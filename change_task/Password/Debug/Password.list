
Password.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800671c  0800671c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800671c  0800671c  0001671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006724  08006724  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006728  08006728  00016728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800672c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000008c  080067b8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080067b8  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019716  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314a  00000000  00000000  000397ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000fd00  00000000  00000000  0003c914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  0004c618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001618  00000000  00000000  0004d468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015409  00000000  00000000  0004ea80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001abd2  00000000  00000000  00063e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007ffe0  00000000  00000000  0007ea5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fea3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033d4  00000000  00000000  000fea8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006178 	.word	0x08006178

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08006178 	.word	0x08006178

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_uldivmod>:
 8000440:	2b00      	cmp	r3, #0
 8000442:	d111      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000444:	2a00      	cmp	r2, #0
 8000446:	d10f      	bne.n	8000468 <__aeabi_uldivmod+0x28>
 8000448:	2900      	cmp	r1, #0
 800044a:	d100      	bne.n	800044e <__aeabi_uldivmod+0xe>
 800044c:	2800      	cmp	r0, #0
 800044e:	d002      	beq.n	8000456 <__aeabi_uldivmod+0x16>
 8000450:	2100      	movs	r1, #0
 8000452:	43c9      	mvns	r1, r1
 8000454:	0008      	movs	r0, r1
 8000456:	b407      	push	{r0, r1, r2}
 8000458:	4802      	ldr	r0, [pc, #8]	; (8000464 <__aeabi_uldivmod+0x24>)
 800045a:	a102      	add	r1, pc, #8	; (adr r1, 8000464 <__aeabi_uldivmod+0x24>)
 800045c:	1840      	adds	r0, r0, r1
 800045e:	9002      	str	r0, [sp, #8]
 8000460:	bd03      	pop	{r0, r1, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	ffffffd9 	.word	0xffffffd9
 8000468:	b403      	push	{r0, r1}
 800046a:	4668      	mov	r0, sp
 800046c:	b501      	push	{r0, lr}
 800046e:	9802      	ldr	r0, [sp, #8]
 8000470:	f000 f86a 	bl	8000548 <__udivmoddi4>
 8000474:	9b01      	ldr	r3, [sp, #4]
 8000476:	469e      	mov	lr, r3
 8000478:	b002      	add	sp, #8
 800047a:	bc0c      	pop	{r2, r3}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_lmul>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	46ce      	mov	lr, r9
 8000484:	4647      	mov	r7, r8
 8000486:	b580      	push	{r7, lr}
 8000488:	0007      	movs	r7, r0
 800048a:	4699      	mov	r9, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	469c      	mov	ip, r3
 8000490:	0413      	lsls	r3, r2, #16
 8000492:	0c1b      	lsrs	r3, r3, #16
 8000494:	001d      	movs	r5, r3
 8000496:	000e      	movs	r6, r1
 8000498:	4661      	mov	r1, ip
 800049a:	0400      	lsls	r0, r0, #16
 800049c:	0c14      	lsrs	r4, r2, #16
 800049e:	0c00      	lsrs	r0, r0, #16
 80004a0:	4345      	muls	r5, r0
 80004a2:	434b      	muls	r3, r1
 80004a4:	4360      	muls	r0, r4
 80004a6:	4361      	muls	r1, r4
 80004a8:	18c0      	adds	r0, r0, r3
 80004aa:	0c2c      	lsrs	r4, r5, #16
 80004ac:	1820      	adds	r0, r4, r0
 80004ae:	468c      	mov	ip, r1
 80004b0:	4283      	cmp	r3, r0
 80004b2:	d903      	bls.n	80004bc <__aeabi_lmul+0x3c>
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	025b      	lsls	r3, r3, #9
 80004b8:	4698      	mov	r8, r3
 80004ba:	44c4      	add	ip, r8
 80004bc:	4649      	mov	r1, r9
 80004be:	4379      	muls	r1, r7
 80004c0:	4372      	muls	r2, r6
 80004c2:	0c03      	lsrs	r3, r0, #16
 80004c4:	4463      	add	r3, ip
 80004c6:	042d      	lsls	r5, r5, #16
 80004c8:	0c2d      	lsrs	r5, r5, #16
 80004ca:	18c9      	adds	r1, r1, r3
 80004cc:	0400      	lsls	r0, r0, #16
 80004ce:	1940      	adds	r0, r0, r5
 80004d0:	1889      	adds	r1, r1, r2
 80004d2:	bcc0      	pop	{r6, r7}
 80004d4:	46b9      	mov	r9, r7
 80004d6:	46b0      	mov	r8, r6
 80004d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_f2uiz>:
 80004dc:	219e      	movs	r1, #158	; 0x9e
 80004de:	b510      	push	{r4, lr}
 80004e0:	05c9      	lsls	r1, r1, #23
 80004e2:	1c04      	adds	r4, r0, #0
 80004e4:	f001 fc34 	bl	8001d50 <__aeabi_fcmpge>
 80004e8:	2800      	cmp	r0, #0
 80004ea:	d103      	bne.n	80004f4 <__aeabi_f2uiz+0x18>
 80004ec:	1c20      	adds	r0, r4, #0
 80004ee:	f000 fce3 	bl	8000eb8 <__aeabi_f2iz>
 80004f2:	bd10      	pop	{r4, pc}
 80004f4:	219e      	movs	r1, #158	; 0x9e
 80004f6:	1c20      	adds	r0, r4, #0
 80004f8:	05c9      	lsls	r1, r1, #23
 80004fa:	f000 fb2f 	bl	8000b5c <__aeabi_fsub>
 80004fe:	f000 fcdb 	bl	8000eb8 <__aeabi_f2iz>
 8000502:	2380      	movs	r3, #128	; 0x80
 8000504:	061b      	lsls	r3, r3, #24
 8000506:	469c      	mov	ip, r3
 8000508:	4460      	add	r0, ip
 800050a:	e7f2      	b.n	80004f2 <__aeabi_f2uiz+0x16>

0800050c <__aeabi_d2uiz>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	2200      	movs	r2, #0
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <__aeabi_d2uiz+0x38>)
 8000512:	0004      	movs	r4, r0
 8000514:	000d      	movs	r5, r1
 8000516:	f001 fbe1 	bl	8001cdc <__aeabi_dcmpge>
 800051a:	2800      	cmp	r0, #0
 800051c:	d104      	bne.n	8000528 <__aeabi_d2uiz+0x1c>
 800051e:	0020      	movs	r0, r4
 8000520:	0029      	movs	r1, r5
 8000522:	f001 fb29 	bl	8001b78 <__aeabi_d2iz>
 8000526:	bd70      	pop	{r4, r5, r6, pc}
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <__aeabi_d2uiz+0x38>)
 800052a:	2200      	movs	r2, #0
 800052c:	0020      	movs	r0, r4
 800052e:	0029      	movs	r1, r5
 8000530:	f000 ff90 	bl	8001454 <__aeabi_dsub>
 8000534:	f001 fb20 	bl	8001b78 <__aeabi_d2iz>
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	061b      	lsls	r3, r3, #24
 800053c:	469c      	mov	ip, r3
 800053e:	4460      	add	r0, ip
 8000540:	e7f1      	b.n	8000526 <__aeabi_d2uiz+0x1a>
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	41e00000 	.word	0x41e00000

08000548 <__udivmoddi4>:
 8000548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054a:	4657      	mov	r7, sl
 800054c:	464e      	mov	r6, r9
 800054e:	4645      	mov	r5, r8
 8000550:	46de      	mov	lr, fp
 8000552:	b5e0      	push	{r5, r6, r7, lr}
 8000554:	0004      	movs	r4, r0
 8000556:	000d      	movs	r5, r1
 8000558:	4692      	mov	sl, r2
 800055a:	4699      	mov	r9, r3
 800055c:	b083      	sub	sp, #12
 800055e:	428b      	cmp	r3, r1
 8000560:	d830      	bhi.n	80005c4 <__udivmoddi4+0x7c>
 8000562:	d02d      	beq.n	80005c0 <__udivmoddi4+0x78>
 8000564:	4649      	mov	r1, r9
 8000566:	4650      	mov	r0, sl
 8000568:	f001 fc1a 	bl	8001da0 <__clzdi2>
 800056c:	0029      	movs	r1, r5
 800056e:	0006      	movs	r6, r0
 8000570:	0020      	movs	r0, r4
 8000572:	f001 fc15 	bl	8001da0 <__clzdi2>
 8000576:	1a33      	subs	r3, r6, r0
 8000578:	4698      	mov	r8, r3
 800057a:	3b20      	subs	r3, #32
 800057c:	469b      	mov	fp, r3
 800057e:	d433      	bmi.n	80005e8 <__udivmoddi4+0xa0>
 8000580:	465a      	mov	r2, fp
 8000582:	4653      	mov	r3, sl
 8000584:	4093      	lsls	r3, r2
 8000586:	4642      	mov	r2, r8
 8000588:	001f      	movs	r7, r3
 800058a:	4653      	mov	r3, sl
 800058c:	4093      	lsls	r3, r2
 800058e:	001e      	movs	r6, r3
 8000590:	42af      	cmp	r7, r5
 8000592:	d83a      	bhi.n	800060a <__udivmoddi4+0xc2>
 8000594:	42af      	cmp	r7, r5
 8000596:	d100      	bne.n	800059a <__udivmoddi4+0x52>
 8000598:	e078      	b.n	800068c <__udivmoddi4+0x144>
 800059a:	465b      	mov	r3, fp
 800059c:	1ba4      	subs	r4, r4, r6
 800059e:	41bd      	sbcs	r5, r7
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	da00      	bge.n	80005a6 <__udivmoddi4+0x5e>
 80005a4:	e075      	b.n	8000692 <__udivmoddi4+0x14a>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2301      	movs	r3, #1
 80005b0:	465a      	mov	r2, fp
 80005b2:	4093      	lsls	r3, r2
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	4642      	mov	r2, r8
 80005ba:	4093      	lsls	r3, r2
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	e028      	b.n	8000612 <__udivmoddi4+0xca>
 80005c0:	4282      	cmp	r2, r0
 80005c2:	d9cf      	bls.n	8000564 <__udivmoddi4+0x1c>
 80005c4:	2200      	movs	r2, #0
 80005c6:	2300      	movs	r3, #0
 80005c8:	9200      	str	r2, [sp, #0]
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <__udivmoddi4+0x8e>
 80005d2:	601c      	str	r4, [r3, #0]
 80005d4:	605d      	str	r5, [r3, #4]
 80005d6:	9800      	ldr	r0, [sp, #0]
 80005d8:	9901      	ldr	r1, [sp, #4]
 80005da:	b003      	add	sp, #12
 80005dc:	bcf0      	pop	{r4, r5, r6, r7}
 80005de:	46bb      	mov	fp, r7
 80005e0:	46b2      	mov	sl, r6
 80005e2:	46a9      	mov	r9, r5
 80005e4:	46a0      	mov	r8, r4
 80005e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e8:	4642      	mov	r2, r8
 80005ea:	2320      	movs	r3, #32
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	4652      	mov	r2, sl
 80005f0:	40da      	lsrs	r2, r3
 80005f2:	4641      	mov	r1, r8
 80005f4:	0013      	movs	r3, r2
 80005f6:	464a      	mov	r2, r9
 80005f8:	408a      	lsls	r2, r1
 80005fa:	0017      	movs	r7, r2
 80005fc:	4642      	mov	r2, r8
 80005fe:	431f      	orrs	r7, r3
 8000600:	4653      	mov	r3, sl
 8000602:	4093      	lsls	r3, r2
 8000604:	001e      	movs	r6, r3
 8000606:	42af      	cmp	r7, r5
 8000608:	d9c4      	bls.n	8000594 <__udivmoddi4+0x4c>
 800060a:	2200      	movs	r2, #0
 800060c:	2300      	movs	r3, #0
 800060e:	9200      	str	r2, [sp, #0]
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	4643      	mov	r3, r8
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0d9      	beq.n	80005cc <__udivmoddi4+0x84>
 8000618:	07fb      	lsls	r3, r7, #31
 800061a:	0872      	lsrs	r2, r6, #1
 800061c:	431a      	orrs	r2, r3
 800061e:	4646      	mov	r6, r8
 8000620:	087b      	lsrs	r3, r7, #1
 8000622:	e00e      	b.n	8000642 <__udivmoddi4+0xfa>
 8000624:	42ab      	cmp	r3, r5
 8000626:	d101      	bne.n	800062c <__udivmoddi4+0xe4>
 8000628:	42a2      	cmp	r2, r4
 800062a:	d80c      	bhi.n	8000646 <__udivmoddi4+0xfe>
 800062c:	1aa4      	subs	r4, r4, r2
 800062e:	419d      	sbcs	r5, r3
 8000630:	2001      	movs	r0, #1
 8000632:	1924      	adds	r4, r4, r4
 8000634:	416d      	adcs	r5, r5
 8000636:	2100      	movs	r1, #0
 8000638:	3e01      	subs	r6, #1
 800063a:	1824      	adds	r4, r4, r0
 800063c:	414d      	adcs	r5, r1
 800063e:	2e00      	cmp	r6, #0
 8000640:	d006      	beq.n	8000650 <__udivmoddi4+0x108>
 8000642:	42ab      	cmp	r3, r5
 8000644:	d9ee      	bls.n	8000624 <__udivmoddi4+0xdc>
 8000646:	3e01      	subs	r6, #1
 8000648:	1924      	adds	r4, r4, r4
 800064a:	416d      	adcs	r5, r5
 800064c:	2e00      	cmp	r6, #0
 800064e:	d1f8      	bne.n	8000642 <__udivmoddi4+0xfa>
 8000650:	9800      	ldr	r0, [sp, #0]
 8000652:	9901      	ldr	r1, [sp, #4]
 8000654:	465b      	mov	r3, fp
 8000656:	1900      	adds	r0, r0, r4
 8000658:	4169      	adcs	r1, r5
 800065a:	2b00      	cmp	r3, #0
 800065c:	db24      	blt.n	80006a8 <__udivmoddi4+0x160>
 800065e:	002b      	movs	r3, r5
 8000660:	465a      	mov	r2, fp
 8000662:	4644      	mov	r4, r8
 8000664:	40d3      	lsrs	r3, r2
 8000666:	002a      	movs	r2, r5
 8000668:	40e2      	lsrs	r2, r4
 800066a:	001c      	movs	r4, r3
 800066c:	465b      	mov	r3, fp
 800066e:	0015      	movs	r5, r2
 8000670:	2b00      	cmp	r3, #0
 8000672:	db2a      	blt.n	80006ca <__udivmoddi4+0x182>
 8000674:	0026      	movs	r6, r4
 8000676:	409e      	lsls	r6, r3
 8000678:	0033      	movs	r3, r6
 800067a:	0026      	movs	r6, r4
 800067c:	4647      	mov	r7, r8
 800067e:	40be      	lsls	r6, r7
 8000680:	0032      	movs	r2, r6
 8000682:	1a80      	subs	r0, r0, r2
 8000684:	4199      	sbcs	r1, r3
 8000686:	9000      	str	r0, [sp, #0]
 8000688:	9101      	str	r1, [sp, #4]
 800068a:	e79f      	b.n	80005cc <__udivmoddi4+0x84>
 800068c:	42a3      	cmp	r3, r4
 800068e:	d8bc      	bhi.n	800060a <__udivmoddi4+0xc2>
 8000690:	e783      	b.n	800059a <__udivmoddi4+0x52>
 8000692:	4642      	mov	r2, r8
 8000694:	2320      	movs	r3, #32
 8000696:	2100      	movs	r1, #0
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	2200      	movs	r2, #0
 800069c:	9100      	str	r1, [sp, #0]
 800069e:	9201      	str	r2, [sp, #4]
 80006a0:	2201      	movs	r2, #1
 80006a2:	40da      	lsrs	r2, r3
 80006a4:	9201      	str	r2, [sp, #4]
 80006a6:	e786      	b.n	80005b6 <__udivmoddi4+0x6e>
 80006a8:	4642      	mov	r2, r8
 80006aa:	2320      	movs	r3, #32
 80006ac:	1a9b      	subs	r3, r3, r2
 80006ae:	002a      	movs	r2, r5
 80006b0:	4646      	mov	r6, r8
 80006b2:	409a      	lsls	r2, r3
 80006b4:	0023      	movs	r3, r4
 80006b6:	40f3      	lsrs	r3, r6
 80006b8:	4644      	mov	r4, r8
 80006ba:	4313      	orrs	r3, r2
 80006bc:	002a      	movs	r2, r5
 80006be:	40e2      	lsrs	r2, r4
 80006c0:	001c      	movs	r4, r3
 80006c2:	465b      	mov	r3, fp
 80006c4:	0015      	movs	r5, r2
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	dad4      	bge.n	8000674 <__udivmoddi4+0x12c>
 80006ca:	4642      	mov	r2, r8
 80006cc:	002f      	movs	r7, r5
 80006ce:	2320      	movs	r3, #32
 80006d0:	0026      	movs	r6, r4
 80006d2:	4097      	lsls	r7, r2
 80006d4:	1a9b      	subs	r3, r3, r2
 80006d6:	40de      	lsrs	r6, r3
 80006d8:	003b      	movs	r3, r7
 80006da:	4333      	orrs	r3, r6
 80006dc:	e7cd      	b.n	800067a <__udivmoddi4+0x132>
 80006de:	46c0      	nop			; (mov r8, r8)

080006e0 <__aeabi_fdiv>:
 80006e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e2:	464f      	mov	r7, r9
 80006e4:	4646      	mov	r6, r8
 80006e6:	46d6      	mov	lr, sl
 80006e8:	0245      	lsls	r5, r0, #9
 80006ea:	b5c0      	push	{r6, r7, lr}
 80006ec:	0047      	lsls	r7, r0, #1
 80006ee:	1c0c      	adds	r4, r1, #0
 80006f0:	0a6d      	lsrs	r5, r5, #9
 80006f2:	0e3f      	lsrs	r7, r7, #24
 80006f4:	0fc6      	lsrs	r6, r0, #31
 80006f6:	2f00      	cmp	r7, #0
 80006f8:	d100      	bne.n	80006fc <__aeabi_fdiv+0x1c>
 80006fa:	e070      	b.n	80007de <__aeabi_fdiv+0xfe>
 80006fc:	2fff      	cmp	r7, #255	; 0xff
 80006fe:	d100      	bne.n	8000702 <__aeabi_fdiv+0x22>
 8000700:	e075      	b.n	80007ee <__aeabi_fdiv+0x10e>
 8000702:	00eb      	lsls	r3, r5, #3
 8000704:	2580      	movs	r5, #128	; 0x80
 8000706:	04ed      	lsls	r5, r5, #19
 8000708:	431d      	orrs	r5, r3
 800070a:	2300      	movs	r3, #0
 800070c:	4699      	mov	r9, r3
 800070e:	469a      	mov	sl, r3
 8000710:	3f7f      	subs	r7, #127	; 0x7f
 8000712:	0260      	lsls	r0, r4, #9
 8000714:	0a43      	lsrs	r3, r0, #9
 8000716:	4698      	mov	r8, r3
 8000718:	0063      	lsls	r3, r4, #1
 800071a:	0e1b      	lsrs	r3, r3, #24
 800071c:	0fe4      	lsrs	r4, r4, #31
 800071e:	2b00      	cmp	r3, #0
 8000720:	d04e      	beq.n	80007c0 <__aeabi_fdiv+0xe0>
 8000722:	2bff      	cmp	r3, #255	; 0xff
 8000724:	d046      	beq.n	80007b4 <__aeabi_fdiv+0xd4>
 8000726:	4642      	mov	r2, r8
 8000728:	00d0      	lsls	r0, r2, #3
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	04d2      	lsls	r2, r2, #19
 800072e:	4302      	orrs	r2, r0
 8000730:	4690      	mov	r8, r2
 8000732:	2200      	movs	r2, #0
 8000734:	3b7f      	subs	r3, #127	; 0x7f
 8000736:	0031      	movs	r1, r6
 8000738:	1aff      	subs	r7, r7, r3
 800073a:	464b      	mov	r3, r9
 800073c:	4061      	eors	r1, r4
 800073e:	b2c9      	uxtb	r1, r1
 8000740:	4313      	orrs	r3, r2
 8000742:	2b0f      	cmp	r3, #15
 8000744:	d900      	bls.n	8000748 <__aeabi_fdiv+0x68>
 8000746:	e0b5      	b.n	80008b4 <__aeabi_fdiv+0x1d4>
 8000748:	486e      	ldr	r0, [pc, #440]	; (8000904 <__aeabi_fdiv+0x224>)
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	58c3      	ldr	r3, [r0, r3]
 800074e:	469f      	mov	pc, r3
 8000750:	2300      	movs	r3, #0
 8000752:	4698      	mov	r8, r3
 8000754:	0026      	movs	r6, r4
 8000756:	4645      	mov	r5, r8
 8000758:	4692      	mov	sl, r2
 800075a:	4653      	mov	r3, sl
 800075c:	2b02      	cmp	r3, #2
 800075e:	d100      	bne.n	8000762 <__aeabi_fdiv+0x82>
 8000760:	e089      	b.n	8000876 <__aeabi_fdiv+0x196>
 8000762:	2b03      	cmp	r3, #3
 8000764:	d100      	bne.n	8000768 <__aeabi_fdiv+0x88>
 8000766:	e09e      	b.n	80008a6 <__aeabi_fdiv+0x1c6>
 8000768:	2b01      	cmp	r3, #1
 800076a:	d018      	beq.n	800079e <__aeabi_fdiv+0xbe>
 800076c:	003b      	movs	r3, r7
 800076e:	337f      	adds	r3, #127	; 0x7f
 8000770:	2b00      	cmp	r3, #0
 8000772:	dd69      	ble.n	8000848 <__aeabi_fdiv+0x168>
 8000774:	076a      	lsls	r2, r5, #29
 8000776:	d004      	beq.n	8000782 <__aeabi_fdiv+0xa2>
 8000778:	220f      	movs	r2, #15
 800077a:	402a      	ands	r2, r5
 800077c:	2a04      	cmp	r2, #4
 800077e:	d000      	beq.n	8000782 <__aeabi_fdiv+0xa2>
 8000780:	3504      	adds	r5, #4
 8000782:	012a      	lsls	r2, r5, #4
 8000784:	d503      	bpl.n	800078e <__aeabi_fdiv+0xae>
 8000786:	4b60      	ldr	r3, [pc, #384]	; (8000908 <__aeabi_fdiv+0x228>)
 8000788:	401d      	ands	r5, r3
 800078a:	003b      	movs	r3, r7
 800078c:	3380      	adds	r3, #128	; 0x80
 800078e:	2bfe      	cmp	r3, #254	; 0xfe
 8000790:	dd00      	ble.n	8000794 <__aeabi_fdiv+0xb4>
 8000792:	e070      	b.n	8000876 <__aeabi_fdiv+0x196>
 8000794:	01ad      	lsls	r5, r5, #6
 8000796:	0a6d      	lsrs	r5, r5, #9
 8000798:	b2d8      	uxtb	r0, r3
 800079a:	e002      	b.n	80007a2 <__aeabi_fdiv+0xc2>
 800079c:	000e      	movs	r6, r1
 800079e:	2000      	movs	r0, #0
 80007a0:	2500      	movs	r5, #0
 80007a2:	05c0      	lsls	r0, r0, #23
 80007a4:	4328      	orrs	r0, r5
 80007a6:	07f6      	lsls	r6, r6, #31
 80007a8:	4330      	orrs	r0, r6
 80007aa:	bce0      	pop	{r5, r6, r7}
 80007ac:	46ba      	mov	sl, r7
 80007ae:	46b1      	mov	r9, r6
 80007b0:	46a8      	mov	r8, r5
 80007b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b4:	4643      	mov	r3, r8
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d13f      	bne.n	800083a <__aeabi_fdiv+0x15a>
 80007ba:	2202      	movs	r2, #2
 80007bc:	3fff      	subs	r7, #255	; 0xff
 80007be:	e003      	b.n	80007c8 <__aeabi_fdiv+0xe8>
 80007c0:	4643      	mov	r3, r8
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d12d      	bne.n	8000822 <__aeabi_fdiv+0x142>
 80007c6:	2201      	movs	r2, #1
 80007c8:	0031      	movs	r1, r6
 80007ca:	464b      	mov	r3, r9
 80007cc:	4061      	eors	r1, r4
 80007ce:	b2c9      	uxtb	r1, r1
 80007d0:	4313      	orrs	r3, r2
 80007d2:	2b0f      	cmp	r3, #15
 80007d4:	d834      	bhi.n	8000840 <__aeabi_fdiv+0x160>
 80007d6:	484d      	ldr	r0, [pc, #308]	; (800090c <__aeabi_fdiv+0x22c>)
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	58c3      	ldr	r3, [r0, r3]
 80007dc:	469f      	mov	pc, r3
 80007de:	2d00      	cmp	r5, #0
 80007e0:	d113      	bne.n	800080a <__aeabi_fdiv+0x12a>
 80007e2:	2304      	movs	r3, #4
 80007e4:	4699      	mov	r9, r3
 80007e6:	3b03      	subs	r3, #3
 80007e8:	2700      	movs	r7, #0
 80007ea:	469a      	mov	sl, r3
 80007ec:	e791      	b.n	8000712 <__aeabi_fdiv+0x32>
 80007ee:	2d00      	cmp	r5, #0
 80007f0:	d105      	bne.n	80007fe <__aeabi_fdiv+0x11e>
 80007f2:	2308      	movs	r3, #8
 80007f4:	4699      	mov	r9, r3
 80007f6:	3b06      	subs	r3, #6
 80007f8:	27ff      	movs	r7, #255	; 0xff
 80007fa:	469a      	mov	sl, r3
 80007fc:	e789      	b.n	8000712 <__aeabi_fdiv+0x32>
 80007fe:	230c      	movs	r3, #12
 8000800:	4699      	mov	r9, r3
 8000802:	3b09      	subs	r3, #9
 8000804:	27ff      	movs	r7, #255	; 0xff
 8000806:	469a      	mov	sl, r3
 8000808:	e783      	b.n	8000712 <__aeabi_fdiv+0x32>
 800080a:	0028      	movs	r0, r5
 800080c:	f001 faaa 	bl	8001d64 <__clzsi2>
 8000810:	2776      	movs	r7, #118	; 0x76
 8000812:	1f43      	subs	r3, r0, #5
 8000814:	409d      	lsls	r5, r3
 8000816:	2300      	movs	r3, #0
 8000818:	427f      	negs	r7, r7
 800081a:	4699      	mov	r9, r3
 800081c:	469a      	mov	sl, r3
 800081e:	1a3f      	subs	r7, r7, r0
 8000820:	e777      	b.n	8000712 <__aeabi_fdiv+0x32>
 8000822:	4640      	mov	r0, r8
 8000824:	f001 fa9e 	bl	8001d64 <__clzsi2>
 8000828:	4642      	mov	r2, r8
 800082a:	1f43      	subs	r3, r0, #5
 800082c:	409a      	lsls	r2, r3
 800082e:	2376      	movs	r3, #118	; 0x76
 8000830:	425b      	negs	r3, r3
 8000832:	4690      	mov	r8, r2
 8000834:	1a1b      	subs	r3, r3, r0
 8000836:	2200      	movs	r2, #0
 8000838:	e77d      	b.n	8000736 <__aeabi_fdiv+0x56>
 800083a:	23ff      	movs	r3, #255	; 0xff
 800083c:	2203      	movs	r2, #3
 800083e:	e77a      	b.n	8000736 <__aeabi_fdiv+0x56>
 8000840:	000e      	movs	r6, r1
 8000842:	20ff      	movs	r0, #255	; 0xff
 8000844:	2500      	movs	r5, #0
 8000846:	e7ac      	b.n	80007a2 <__aeabi_fdiv+0xc2>
 8000848:	2001      	movs	r0, #1
 800084a:	1ac0      	subs	r0, r0, r3
 800084c:	281b      	cmp	r0, #27
 800084e:	dca6      	bgt.n	800079e <__aeabi_fdiv+0xbe>
 8000850:	379e      	adds	r7, #158	; 0x9e
 8000852:	002a      	movs	r2, r5
 8000854:	40bd      	lsls	r5, r7
 8000856:	40c2      	lsrs	r2, r0
 8000858:	1e6b      	subs	r3, r5, #1
 800085a:	419d      	sbcs	r5, r3
 800085c:	4315      	orrs	r5, r2
 800085e:	076b      	lsls	r3, r5, #29
 8000860:	d004      	beq.n	800086c <__aeabi_fdiv+0x18c>
 8000862:	230f      	movs	r3, #15
 8000864:	402b      	ands	r3, r5
 8000866:	2b04      	cmp	r3, #4
 8000868:	d000      	beq.n	800086c <__aeabi_fdiv+0x18c>
 800086a:	3504      	adds	r5, #4
 800086c:	016b      	lsls	r3, r5, #5
 800086e:	d544      	bpl.n	80008fa <__aeabi_fdiv+0x21a>
 8000870:	2001      	movs	r0, #1
 8000872:	2500      	movs	r5, #0
 8000874:	e795      	b.n	80007a2 <__aeabi_fdiv+0xc2>
 8000876:	20ff      	movs	r0, #255	; 0xff
 8000878:	2500      	movs	r5, #0
 800087a:	e792      	b.n	80007a2 <__aeabi_fdiv+0xc2>
 800087c:	2580      	movs	r5, #128	; 0x80
 800087e:	2600      	movs	r6, #0
 8000880:	20ff      	movs	r0, #255	; 0xff
 8000882:	03ed      	lsls	r5, r5, #15
 8000884:	e78d      	b.n	80007a2 <__aeabi_fdiv+0xc2>
 8000886:	2300      	movs	r3, #0
 8000888:	4698      	mov	r8, r3
 800088a:	2080      	movs	r0, #128	; 0x80
 800088c:	03c0      	lsls	r0, r0, #15
 800088e:	4205      	tst	r5, r0
 8000890:	d009      	beq.n	80008a6 <__aeabi_fdiv+0x1c6>
 8000892:	4643      	mov	r3, r8
 8000894:	4203      	tst	r3, r0
 8000896:	d106      	bne.n	80008a6 <__aeabi_fdiv+0x1c6>
 8000898:	4645      	mov	r5, r8
 800089a:	4305      	orrs	r5, r0
 800089c:	026d      	lsls	r5, r5, #9
 800089e:	0026      	movs	r6, r4
 80008a0:	20ff      	movs	r0, #255	; 0xff
 80008a2:	0a6d      	lsrs	r5, r5, #9
 80008a4:	e77d      	b.n	80007a2 <__aeabi_fdiv+0xc2>
 80008a6:	2080      	movs	r0, #128	; 0x80
 80008a8:	03c0      	lsls	r0, r0, #15
 80008aa:	4305      	orrs	r5, r0
 80008ac:	026d      	lsls	r5, r5, #9
 80008ae:	20ff      	movs	r0, #255	; 0xff
 80008b0:	0a6d      	lsrs	r5, r5, #9
 80008b2:	e776      	b.n	80007a2 <__aeabi_fdiv+0xc2>
 80008b4:	4642      	mov	r2, r8
 80008b6:	016b      	lsls	r3, r5, #5
 80008b8:	0150      	lsls	r0, r2, #5
 80008ba:	4283      	cmp	r3, r0
 80008bc:	d219      	bcs.n	80008f2 <__aeabi_fdiv+0x212>
 80008be:	221b      	movs	r2, #27
 80008c0:	2500      	movs	r5, #0
 80008c2:	3f01      	subs	r7, #1
 80008c4:	2601      	movs	r6, #1
 80008c6:	001c      	movs	r4, r3
 80008c8:	006d      	lsls	r5, r5, #1
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	2c00      	cmp	r4, #0
 80008ce:	db01      	blt.n	80008d4 <__aeabi_fdiv+0x1f4>
 80008d0:	4298      	cmp	r0, r3
 80008d2:	d801      	bhi.n	80008d8 <__aeabi_fdiv+0x1f8>
 80008d4:	1a1b      	subs	r3, r3, r0
 80008d6:	4335      	orrs	r5, r6
 80008d8:	3a01      	subs	r2, #1
 80008da:	2a00      	cmp	r2, #0
 80008dc:	d1f3      	bne.n	80008c6 <__aeabi_fdiv+0x1e6>
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	4193      	sbcs	r3, r2
 80008e2:	431d      	orrs	r5, r3
 80008e4:	003b      	movs	r3, r7
 80008e6:	337f      	adds	r3, #127	; 0x7f
 80008e8:	000e      	movs	r6, r1
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd00      	ble.n	80008f0 <__aeabi_fdiv+0x210>
 80008ee:	e741      	b.n	8000774 <__aeabi_fdiv+0x94>
 80008f0:	e7aa      	b.n	8000848 <__aeabi_fdiv+0x168>
 80008f2:	221a      	movs	r2, #26
 80008f4:	2501      	movs	r5, #1
 80008f6:	1a1b      	subs	r3, r3, r0
 80008f8:	e7e4      	b.n	80008c4 <__aeabi_fdiv+0x1e4>
 80008fa:	01ad      	lsls	r5, r5, #6
 80008fc:	2000      	movs	r0, #0
 80008fe:	0a6d      	lsrs	r5, r5, #9
 8000900:	e74f      	b.n	80007a2 <__aeabi_fdiv+0xc2>
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	08006190 	.word	0x08006190
 8000908:	f7ffffff 	.word	0xf7ffffff
 800090c:	080061d0 	.word	0x080061d0

08000910 <__aeabi_fmul>:
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000912:	464f      	mov	r7, r9
 8000914:	4646      	mov	r6, r8
 8000916:	46d6      	mov	lr, sl
 8000918:	0244      	lsls	r4, r0, #9
 800091a:	0045      	lsls	r5, r0, #1
 800091c:	b5c0      	push	{r6, r7, lr}
 800091e:	0a64      	lsrs	r4, r4, #9
 8000920:	1c0f      	adds	r7, r1, #0
 8000922:	0e2d      	lsrs	r5, r5, #24
 8000924:	0fc6      	lsrs	r6, r0, #31
 8000926:	2d00      	cmp	r5, #0
 8000928:	d100      	bne.n	800092c <__aeabi_fmul+0x1c>
 800092a:	e08d      	b.n	8000a48 <__aeabi_fmul+0x138>
 800092c:	2dff      	cmp	r5, #255	; 0xff
 800092e:	d100      	bne.n	8000932 <__aeabi_fmul+0x22>
 8000930:	e092      	b.n	8000a58 <__aeabi_fmul+0x148>
 8000932:	2300      	movs	r3, #0
 8000934:	2080      	movs	r0, #128	; 0x80
 8000936:	4699      	mov	r9, r3
 8000938:	469a      	mov	sl, r3
 800093a:	00e4      	lsls	r4, r4, #3
 800093c:	04c0      	lsls	r0, r0, #19
 800093e:	4304      	orrs	r4, r0
 8000940:	3d7f      	subs	r5, #127	; 0x7f
 8000942:	0278      	lsls	r0, r7, #9
 8000944:	0a43      	lsrs	r3, r0, #9
 8000946:	4698      	mov	r8, r3
 8000948:	007b      	lsls	r3, r7, #1
 800094a:	0e1b      	lsrs	r3, r3, #24
 800094c:	0fff      	lsrs	r7, r7, #31
 800094e:	2b00      	cmp	r3, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_fmul+0x44>
 8000952:	e070      	b.n	8000a36 <__aeabi_fmul+0x126>
 8000954:	2bff      	cmp	r3, #255	; 0xff
 8000956:	d100      	bne.n	800095a <__aeabi_fmul+0x4a>
 8000958:	e086      	b.n	8000a68 <__aeabi_fmul+0x158>
 800095a:	4642      	mov	r2, r8
 800095c:	00d0      	lsls	r0, r2, #3
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	3b7f      	subs	r3, #127	; 0x7f
 8000962:	18ed      	adds	r5, r5, r3
 8000964:	2300      	movs	r3, #0
 8000966:	04d2      	lsls	r2, r2, #19
 8000968:	4302      	orrs	r2, r0
 800096a:	4690      	mov	r8, r2
 800096c:	469c      	mov	ip, r3
 800096e:	0031      	movs	r1, r6
 8000970:	464b      	mov	r3, r9
 8000972:	4079      	eors	r1, r7
 8000974:	1c68      	adds	r0, r5, #1
 8000976:	2b0f      	cmp	r3, #15
 8000978:	d81c      	bhi.n	80009b4 <__aeabi_fmul+0xa4>
 800097a:	4a76      	ldr	r2, [pc, #472]	; (8000b54 <__aeabi_fmul+0x244>)
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	58d3      	ldr	r3, [r2, r3]
 8000980:	469f      	mov	pc, r3
 8000982:	0039      	movs	r1, r7
 8000984:	4644      	mov	r4, r8
 8000986:	46e2      	mov	sl, ip
 8000988:	4653      	mov	r3, sl
 800098a:	2b02      	cmp	r3, #2
 800098c:	d00f      	beq.n	80009ae <__aeabi_fmul+0x9e>
 800098e:	2b03      	cmp	r3, #3
 8000990:	d100      	bne.n	8000994 <__aeabi_fmul+0x84>
 8000992:	e0d7      	b.n	8000b44 <__aeabi_fmul+0x234>
 8000994:	2b01      	cmp	r3, #1
 8000996:	d137      	bne.n	8000a08 <__aeabi_fmul+0xf8>
 8000998:	2000      	movs	r0, #0
 800099a:	2400      	movs	r4, #0
 800099c:	05c0      	lsls	r0, r0, #23
 800099e:	4320      	orrs	r0, r4
 80009a0:	07c9      	lsls	r1, r1, #31
 80009a2:	4308      	orrs	r0, r1
 80009a4:	bce0      	pop	{r5, r6, r7}
 80009a6:	46ba      	mov	sl, r7
 80009a8:	46b1      	mov	r9, r6
 80009aa:	46a8      	mov	r8, r5
 80009ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ae:	20ff      	movs	r0, #255	; 0xff
 80009b0:	2400      	movs	r4, #0
 80009b2:	e7f3      	b.n	800099c <__aeabi_fmul+0x8c>
 80009b4:	0c26      	lsrs	r6, r4, #16
 80009b6:	0424      	lsls	r4, r4, #16
 80009b8:	0c22      	lsrs	r2, r4, #16
 80009ba:	4644      	mov	r4, r8
 80009bc:	0424      	lsls	r4, r4, #16
 80009be:	0c24      	lsrs	r4, r4, #16
 80009c0:	4643      	mov	r3, r8
 80009c2:	0027      	movs	r7, r4
 80009c4:	0c1b      	lsrs	r3, r3, #16
 80009c6:	4357      	muls	r7, r2
 80009c8:	4374      	muls	r4, r6
 80009ca:	435a      	muls	r2, r3
 80009cc:	435e      	muls	r6, r3
 80009ce:	1912      	adds	r2, r2, r4
 80009d0:	0c3b      	lsrs	r3, r7, #16
 80009d2:	189b      	adds	r3, r3, r2
 80009d4:	429c      	cmp	r4, r3
 80009d6:	d903      	bls.n	80009e0 <__aeabi_fmul+0xd0>
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	0252      	lsls	r2, r2, #9
 80009dc:	4694      	mov	ip, r2
 80009de:	4466      	add	r6, ip
 80009e0:	043f      	lsls	r7, r7, #16
 80009e2:	041a      	lsls	r2, r3, #16
 80009e4:	0c3f      	lsrs	r7, r7, #16
 80009e6:	19d2      	adds	r2, r2, r7
 80009e8:	0194      	lsls	r4, r2, #6
 80009ea:	1e67      	subs	r7, r4, #1
 80009ec:	41bc      	sbcs	r4, r7
 80009ee:	0c1b      	lsrs	r3, r3, #16
 80009f0:	0e92      	lsrs	r2, r2, #26
 80009f2:	199b      	adds	r3, r3, r6
 80009f4:	4314      	orrs	r4, r2
 80009f6:	019b      	lsls	r3, r3, #6
 80009f8:	431c      	orrs	r4, r3
 80009fa:	011b      	lsls	r3, r3, #4
 80009fc:	d400      	bmi.n	8000a00 <__aeabi_fmul+0xf0>
 80009fe:	e09b      	b.n	8000b38 <__aeabi_fmul+0x228>
 8000a00:	2301      	movs	r3, #1
 8000a02:	0862      	lsrs	r2, r4, #1
 8000a04:	401c      	ands	r4, r3
 8000a06:	4314      	orrs	r4, r2
 8000a08:	0002      	movs	r2, r0
 8000a0a:	327f      	adds	r2, #127	; 0x7f
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	dd64      	ble.n	8000ada <__aeabi_fmul+0x1ca>
 8000a10:	0763      	lsls	r3, r4, #29
 8000a12:	d004      	beq.n	8000a1e <__aeabi_fmul+0x10e>
 8000a14:	230f      	movs	r3, #15
 8000a16:	4023      	ands	r3, r4
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	d000      	beq.n	8000a1e <__aeabi_fmul+0x10e>
 8000a1c:	3404      	adds	r4, #4
 8000a1e:	0123      	lsls	r3, r4, #4
 8000a20:	d503      	bpl.n	8000a2a <__aeabi_fmul+0x11a>
 8000a22:	0002      	movs	r2, r0
 8000a24:	4b4c      	ldr	r3, [pc, #304]	; (8000b58 <__aeabi_fmul+0x248>)
 8000a26:	3280      	adds	r2, #128	; 0x80
 8000a28:	401c      	ands	r4, r3
 8000a2a:	2afe      	cmp	r2, #254	; 0xfe
 8000a2c:	dcbf      	bgt.n	80009ae <__aeabi_fmul+0x9e>
 8000a2e:	01a4      	lsls	r4, r4, #6
 8000a30:	0a64      	lsrs	r4, r4, #9
 8000a32:	b2d0      	uxtb	r0, r2
 8000a34:	e7b2      	b.n	800099c <__aeabi_fmul+0x8c>
 8000a36:	4643      	mov	r3, r8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d13d      	bne.n	8000ab8 <__aeabi_fmul+0x1a8>
 8000a3c:	464a      	mov	r2, r9
 8000a3e:	3301      	adds	r3, #1
 8000a40:	431a      	orrs	r2, r3
 8000a42:	4691      	mov	r9, r2
 8000a44:	469c      	mov	ip, r3
 8000a46:	e792      	b.n	800096e <__aeabi_fmul+0x5e>
 8000a48:	2c00      	cmp	r4, #0
 8000a4a:	d129      	bne.n	8000aa0 <__aeabi_fmul+0x190>
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	4699      	mov	r9, r3
 8000a50:	3b03      	subs	r3, #3
 8000a52:	2500      	movs	r5, #0
 8000a54:	469a      	mov	sl, r3
 8000a56:	e774      	b.n	8000942 <__aeabi_fmul+0x32>
 8000a58:	2c00      	cmp	r4, #0
 8000a5a:	d11b      	bne.n	8000a94 <__aeabi_fmul+0x184>
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	4699      	mov	r9, r3
 8000a60:	3b06      	subs	r3, #6
 8000a62:	25ff      	movs	r5, #255	; 0xff
 8000a64:	469a      	mov	sl, r3
 8000a66:	e76c      	b.n	8000942 <__aeabi_fmul+0x32>
 8000a68:	4643      	mov	r3, r8
 8000a6a:	35ff      	adds	r5, #255	; 0xff
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d10b      	bne.n	8000a88 <__aeabi_fmul+0x178>
 8000a70:	2302      	movs	r3, #2
 8000a72:	464a      	mov	r2, r9
 8000a74:	431a      	orrs	r2, r3
 8000a76:	4691      	mov	r9, r2
 8000a78:	469c      	mov	ip, r3
 8000a7a:	e778      	b.n	800096e <__aeabi_fmul+0x5e>
 8000a7c:	4653      	mov	r3, sl
 8000a7e:	0031      	movs	r1, r6
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d000      	beq.n	8000a86 <__aeabi_fmul+0x176>
 8000a84:	e783      	b.n	800098e <__aeabi_fmul+0x7e>
 8000a86:	e792      	b.n	80009ae <__aeabi_fmul+0x9e>
 8000a88:	2303      	movs	r3, #3
 8000a8a:	464a      	mov	r2, r9
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	4691      	mov	r9, r2
 8000a90:	469c      	mov	ip, r3
 8000a92:	e76c      	b.n	800096e <__aeabi_fmul+0x5e>
 8000a94:	230c      	movs	r3, #12
 8000a96:	4699      	mov	r9, r3
 8000a98:	3b09      	subs	r3, #9
 8000a9a:	25ff      	movs	r5, #255	; 0xff
 8000a9c:	469a      	mov	sl, r3
 8000a9e:	e750      	b.n	8000942 <__aeabi_fmul+0x32>
 8000aa0:	0020      	movs	r0, r4
 8000aa2:	f001 f95f 	bl	8001d64 <__clzsi2>
 8000aa6:	2576      	movs	r5, #118	; 0x76
 8000aa8:	1f43      	subs	r3, r0, #5
 8000aaa:	409c      	lsls	r4, r3
 8000aac:	2300      	movs	r3, #0
 8000aae:	426d      	negs	r5, r5
 8000ab0:	4699      	mov	r9, r3
 8000ab2:	469a      	mov	sl, r3
 8000ab4:	1a2d      	subs	r5, r5, r0
 8000ab6:	e744      	b.n	8000942 <__aeabi_fmul+0x32>
 8000ab8:	4640      	mov	r0, r8
 8000aba:	f001 f953 	bl	8001d64 <__clzsi2>
 8000abe:	4642      	mov	r2, r8
 8000ac0:	1f43      	subs	r3, r0, #5
 8000ac2:	409a      	lsls	r2, r3
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	1a2d      	subs	r5, r5, r0
 8000ac8:	4690      	mov	r8, r2
 8000aca:	469c      	mov	ip, r3
 8000acc:	3d76      	subs	r5, #118	; 0x76
 8000ace:	e74e      	b.n	800096e <__aeabi_fmul+0x5e>
 8000ad0:	2480      	movs	r4, #128	; 0x80
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	20ff      	movs	r0, #255	; 0xff
 8000ad6:	03e4      	lsls	r4, r4, #15
 8000ad8:	e760      	b.n	800099c <__aeabi_fmul+0x8c>
 8000ada:	2301      	movs	r3, #1
 8000adc:	1a9b      	subs	r3, r3, r2
 8000ade:	2b1b      	cmp	r3, #27
 8000ae0:	dd00      	ble.n	8000ae4 <__aeabi_fmul+0x1d4>
 8000ae2:	e759      	b.n	8000998 <__aeabi_fmul+0x88>
 8000ae4:	0022      	movs	r2, r4
 8000ae6:	309e      	adds	r0, #158	; 0x9e
 8000ae8:	40da      	lsrs	r2, r3
 8000aea:	4084      	lsls	r4, r0
 8000aec:	0013      	movs	r3, r2
 8000aee:	1e62      	subs	r2, r4, #1
 8000af0:	4194      	sbcs	r4, r2
 8000af2:	431c      	orrs	r4, r3
 8000af4:	0763      	lsls	r3, r4, #29
 8000af6:	d004      	beq.n	8000b02 <__aeabi_fmul+0x1f2>
 8000af8:	230f      	movs	r3, #15
 8000afa:	4023      	ands	r3, r4
 8000afc:	2b04      	cmp	r3, #4
 8000afe:	d000      	beq.n	8000b02 <__aeabi_fmul+0x1f2>
 8000b00:	3404      	adds	r4, #4
 8000b02:	0163      	lsls	r3, r4, #5
 8000b04:	d51a      	bpl.n	8000b3c <__aeabi_fmul+0x22c>
 8000b06:	2001      	movs	r0, #1
 8000b08:	2400      	movs	r4, #0
 8000b0a:	e747      	b.n	800099c <__aeabi_fmul+0x8c>
 8000b0c:	2080      	movs	r0, #128	; 0x80
 8000b0e:	03c0      	lsls	r0, r0, #15
 8000b10:	4204      	tst	r4, r0
 8000b12:	d009      	beq.n	8000b28 <__aeabi_fmul+0x218>
 8000b14:	4643      	mov	r3, r8
 8000b16:	4203      	tst	r3, r0
 8000b18:	d106      	bne.n	8000b28 <__aeabi_fmul+0x218>
 8000b1a:	4644      	mov	r4, r8
 8000b1c:	4304      	orrs	r4, r0
 8000b1e:	0264      	lsls	r4, r4, #9
 8000b20:	0039      	movs	r1, r7
 8000b22:	20ff      	movs	r0, #255	; 0xff
 8000b24:	0a64      	lsrs	r4, r4, #9
 8000b26:	e739      	b.n	800099c <__aeabi_fmul+0x8c>
 8000b28:	2080      	movs	r0, #128	; 0x80
 8000b2a:	03c0      	lsls	r0, r0, #15
 8000b2c:	4304      	orrs	r4, r0
 8000b2e:	0264      	lsls	r4, r4, #9
 8000b30:	0031      	movs	r1, r6
 8000b32:	20ff      	movs	r0, #255	; 0xff
 8000b34:	0a64      	lsrs	r4, r4, #9
 8000b36:	e731      	b.n	800099c <__aeabi_fmul+0x8c>
 8000b38:	0028      	movs	r0, r5
 8000b3a:	e765      	b.n	8000a08 <__aeabi_fmul+0xf8>
 8000b3c:	01a4      	lsls	r4, r4, #6
 8000b3e:	2000      	movs	r0, #0
 8000b40:	0a64      	lsrs	r4, r4, #9
 8000b42:	e72b      	b.n	800099c <__aeabi_fmul+0x8c>
 8000b44:	2080      	movs	r0, #128	; 0x80
 8000b46:	03c0      	lsls	r0, r0, #15
 8000b48:	4304      	orrs	r4, r0
 8000b4a:	0264      	lsls	r4, r4, #9
 8000b4c:	20ff      	movs	r0, #255	; 0xff
 8000b4e:	0a64      	lsrs	r4, r4, #9
 8000b50:	e724      	b.n	800099c <__aeabi_fmul+0x8c>
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	08006210 	.word	0x08006210
 8000b58:	f7ffffff 	.word	0xf7ffffff

08000b5c <__aeabi_fsub>:
 8000b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b5e:	46ce      	mov	lr, r9
 8000b60:	4647      	mov	r7, r8
 8000b62:	0243      	lsls	r3, r0, #9
 8000b64:	0a5b      	lsrs	r3, r3, #9
 8000b66:	024e      	lsls	r6, r1, #9
 8000b68:	00da      	lsls	r2, r3, #3
 8000b6a:	4694      	mov	ip, r2
 8000b6c:	0a72      	lsrs	r2, r6, #9
 8000b6e:	4691      	mov	r9, r2
 8000b70:	0045      	lsls	r5, r0, #1
 8000b72:	004a      	lsls	r2, r1, #1
 8000b74:	b580      	push	{r7, lr}
 8000b76:	0e2d      	lsrs	r5, r5, #24
 8000b78:	001f      	movs	r7, r3
 8000b7a:	0fc4      	lsrs	r4, r0, #31
 8000b7c:	0e12      	lsrs	r2, r2, #24
 8000b7e:	0fc9      	lsrs	r1, r1, #31
 8000b80:	09b6      	lsrs	r6, r6, #6
 8000b82:	2aff      	cmp	r2, #255	; 0xff
 8000b84:	d05b      	beq.n	8000c3e <__aeabi_fsub+0xe2>
 8000b86:	2001      	movs	r0, #1
 8000b88:	4041      	eors	r1, r0
 8000b8a:	428c      	cmp	r4, r1
 8000b8c:	d039      	beq.n	8000c02 <__aeabi_fsub+0xa6>
 8000b8e:	1aa8      	subs	r0, r5, r2
 8000b90:	2800      	cmp	r0, #0
 8000b92:	dd5a      	ble.n	8000c4a <__aeabi_fsub+0xee>
 8000b94:	2a00      	cmp	r2, #0
 8000b96:	d06a      	beq.n	8000c6e <__aeabi_fsub+0x112>
 8000b98:	2dff      	cmp	r5, #255	; 0xff
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_fsub+0x42>
 8000b9c:	e0d9      	b.n	8000d52 <__aeabi_fsub+0x1f6>
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	04d2      	lsls	r2, r2, #19
 8000ba2:	4316      	orrs	r6, r2
 8000ba4:	281b      	cmp	r0, #27
 8000ba6:	dc00      	bgt.n	8000baa <__aeabi_fsub+0x4e>
 8000ba8:	e0e9      	b.n	8000d7e <__aeabi_fsub+0x222>
 8000baa:	2001      	movs	r0, #1
 8000bac:	4663      	mov	r3, ip
 8000bae:	1a18      	subs	r0, r3, r0
 8000bb0:	0143      	lsls	r3, r0, #5
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_fsub+0x5a>
 8000bb4:	e0b4      	b.n	8000d20 <__aeabi_fsub+0x1c4>
 8000bb6:	0180      	lsls	r0, r0, #6
 8000bb8:	0987      	lsrs	r7, r0, #6
 8000bba:	0038      	movs	r0, r7
 8000bbc:	f001 f8d2 	bl	8001d64 <__clzsi2>
 8000bc0:	3805      	subs	r0, #5
 8000bc2:	4087      	lsls	r7, r0
 8000bc4:	4285      	cmp	r5, r0
 8000bc6:	dc00      	bgt.n	8000bca <__aeabi_fsub+0x6e>
 8000bc8:	e0cc      	b.n	8000d64 <__aeabi_fsub+0x208>
 8000bca:	1a2d      	subs	r5, r5, r0
 8000bcc:	48b5      	ldr	r0, [pc, #724]	; (8000ea4 <__aeabi_fsub+0x348>)
 8000bce:	4038      	ands	r0, r7
 8000bd0:	0743      	lsls	r3, r0, #29
 8000bd2:	d004      	beq.n	8000bde <__aeabi_fsub+0x82>
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	4003      	ands	r3, r0
 8000bd8:	2b04      	cmp	r3, #4
 8000bda:	d000      	beq.n	8000bde <__aeabi_fsub+0x82>
 8000bdc:	3004      	adds	r0, #4
 8000bde:	0143      	lsls	r3, r0, #5
 8000be0:	d400      	bmi.n	8000be4 <__aeabi_fsub+0x88>
 8000be2:	e0a0      	b.n	8000d26 <__aeabi_fsub+0x1ca>
 8000be4:	1c6a      	adds	r2, r5, #1
 8000be6:	2dfe      	cmp	r5, #254	; 0xfe
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x90>
 8000bea:	e08d      	b.n	8000d08 <__aeabi_fsub+0x1ac>
 8000bec:	0180      	lsls	r0, r0, #6
 8000bee:	0a47      	lsrs	r7, r0, #9
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	05d0      	lsls	r0, r2, #23
 8000bf4:	4338      	orrs	r0, r7
 8000bf6:	07e4      	lsls	r4, r4, #31
 8000bf8:	4320      	orrs	r0, r4
 8000bfa:	bcc0      	pop	{r6, r7}
 8000bfc:	46b9      	mov	r9, r7
 8000bfe:	46b0      	mov	r8, r6
 8000c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c02:	1aa8      	subs	r0, r5, r2
 8000c04:	4680      	mov	r8, r0
 8000c06:	2800      	cmp	r0, #0
 8000c08:	dd45      	ble.n	8000c96 <__aeabi_fsub+0x13a>
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d070      	beq.n	8000cf0 <__aeabi_fsub+0x194>
 8000c0e:	2dff      	cmp	r5, #255	; 0xff
 8000c10:	d100      	bne.n	8000c14 <__aeabi_fsub+0xb8>
 8000c12:	e09e      	b.n	8000d52 <__aeabi_fsub+0x1f6>
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	04db      	lsls	r3, r3, #19
 8000c18:	431e      	orrs	r6, r3
 8000c1a:	4643      	mov	r3, r8
 8000c1c:	2b1b      	cmp	r3, #27
 8000c1e:	dc00      	bgt.n	8000c22 <__aeabi_fsub+0xc6>
 8000c20:	e0d2      	b.n	8000dc8 <__aeabi_fsub+0x26c>
 8000c22:	2001      	movs	r0, #1
 8000c24:	4460      	add	r0, ip
 8000c26:	0143      	lsls	r3, r0, #5
 8000c28:	d57a      	bpl.n	8000d20 <__aeabi_fsub+0x1c4>
 8000c2a:	3501      	adds	r5, #1
 8000c2c:	2dff      	cmp	r5, #255	; 0xff
 8000c2e:	d06b      	beq.n	8000d08 <__aeabi_fsub+0x1ac>
 8000c30:	2301      	movs	r3, #1
 8000c32:	4a9d      	ldr	r2, [pc, #628]	; (8000ea8 <__aeabi_fsub+0x34c>)
 8000c34:	4003      	ands	r3, r0
 8000c36:	0840      	lsrs	r0, r0, #1
 8000c38:	4010      	ands	r0, r2
 8000c3a:	4318      	orrs	r0, r3
 8000c3c:	e7c8      	b.n	8000bd0 <__aeabi_fsub+0x74>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d020      	beq.n	8000c84 <__aeabi_fsub+0x128>
 8000c42:	428c      	cmp	r4, r1
 8000c44:	d023      	beq.n	8000c8e <__aeabi_fsub+0x132>
 8000c46:	0028      	movs	r0, r5
 8000c48:	38ff      	subs	r0, #255	; 0xff
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	d039      	beq.n	8000cc2 <__aeabi_fsub+0x166>
 8000c4e:	1b57      	subs	r7, r2, r5
 8000c50:	2d00      	cmp	r5, #0
 8000c52:	d000      	beq.n	8000c56 <__aeabi_fsub+0xfa>
 8000c54:	e09d      	b.n	8000d92 <__aeabi_fsub+0x236>
 8000c56:	4663      	mov	r3, ip
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_fsub+0x102>
 8000c5c:	e0db      	b.n	8000e16 <__aeabi_fsub+0x2ba>
 8000c5e:	1e7b      	subs	r3, r7, #1
 8000c60:	2f01      	cmp	r7, #1
 8000c62:	d100      	bne.n	8000c66 <__aeabi_fsub+0x10a>
 8000c64:	e10d      	b.n	8000e82 <__aeabi_fsub+0x326>
 8000c66:	2fff      	cmp	r7, #255	; 0xff
 8000c68:	d071      	beq.n	8000d4e <__aeabi_fsub+0x1f2>
 8000c6a:	001f      	movs	r7, r3
 8000c6c:	e098      	b.n	8000da0 <__aeabi_fsub+0x244>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d100      	bne.n	8000c74 <__aeabi_fsub+0x118>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x268>
 8000c74:	1e42      	subs	r2, r0, #1
 8000c76:	2801      	cmp	r0, #1
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fsub+0x120>
 8000c7a:	e0e6      	b.n	8000e4a <__aeabi_fsub+0x2ee>
 8000c7c:	28ff      	cmp	r0, #255	; 0xff
 8000c7e:	d068      	beq.n	8000d52 <__aeabi_fsub+0x1f6>
 8000c80:	0010      	movs	r0, r2
 8000c82:	e78f      	b.n	8000ba4 <__aeabi_fsub+0x48>
 8000c84:	2001      	movs	r0, #1
 8000c86:	4041      	eors	r1, r0
 8000c88:	42a1      	cmp	r1, r4
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fsub+0x132>
 8000c8c:	e77f      	b.n	8000b8e <__aeabi_fsub+0x32>
 8000c8e:	20ff      	movs	r0, #255	; 0xff
 8000c90:	4240      	negs	r0, r0
 8000c92:	4680      	mov	r8, r0
 8000c94:	44a8      	add	r8, r5
 8000c96:	4640      	mov	r0, r8
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	d038      	beq.n	8000d0e <__aeabi_fsub+0x1b2>
 8000c9c:	1b51      	subs	r1, r2, r5
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_fsub+0x148>
 8000ca2:	e0ae      	b.n	8000e02 <__aeabi_fsub+0x2a6>
 8000ca4:	2aff      	cmp	r2, #255	; 0xff
 8000ca6:	d100      	bne.n	8000caa <__aeabi_fsub+0x14e>
 8000ca8:	e0df      	b.n	8000e6a <__aeabi_fsub+0x30e>
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	4660      	mov	r0, ip
 8000cae:	04db      	lsls	r3, r3, #19
 8000cb0:	4318      	orrs	r0, r3
 8000cb2:	4684      	mov	ip, r0
 8000cb4:	291b      	cmp	r1, #27
 8000cb6:	dc00      	bgt.n	8000cba <__aeabi_fsub+0x15e>
 8000cb8:	e0d9      	b.n	8000e6e <__aeabi_fsub+0x312>
 8000cba:	2001      	movs	r0, #1
 8000cbc:	0015      	movs	r5, r2
 8000cbe:	1980      	adds	r0, r0, r6
 8000cc0:	e7b1      	b.n	8000c26 <__aeabi_fsub+0xca>
 8000cc2:	20fe      	movs	r0, #254	; 0xfe
 8000cc4:	1c6a      	adds	r2, r5, #1
 8000cc6:	4210      	tst	r0, r2
 8000cc8:	d171      	bne.n	8000dae <__aeabi_fsub+0x252>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d000      	beq.n	8000cd0 <__aeabi_fsub+0x174>
 8000cce:	e0a6      	b.n	8000e1e <__aeabi_fsub+0x2c2>
 8000cd0:	4663      	mov	r3, ip
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_fsub+0x17c>
 8000cd6:	e0d9      	b.n	8000e8c <__aeabi_fsub+0x330>
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_fsub+0x184>
 8000cde:	e788      	b.n	8000bf2 <__aeabi_fsub+0x96>
 8000ce0:	1b98      	subs	r0, r3, r6
 8000ce2:	0143      	lsls	r3, r0, #5
 8000ce4:	d400      	bmi.n	8000ce8 <__aeabi_fsub+0x18c>
 8000ce6:	e0e1      	b.n	8000eac <__aeabi_fsub+0x350>
 8000ce8:	4663      	mov	r3, ip
 8000cea:	000c      	movs	r4, r1
 8000cec:	1af0      	subs	r0, r6, r3
 8000cee:	e76f      	b.n	8000bd0 <__aeabi_fsub+0x74>
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_fsub+0x19a>
 8000cf4:	e0b7      	b.n	8000e66 <__aeabi_fsub+0x30a>
 8000cf6:	0002      	movs	r2, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	2801      	cmp	r0, #1
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_fsub+0x1a4>
 8000cfe:	e09c      	b.n	8000e3a <__aeabi_fsub+0x2de>
 8000d00:	28ff      	cmp	r0, #255	; 0xff
 8000d02:	d026      	beq.n	8000d52 <__aeabi_fsub+0x1f6>
 8000d04:	4690      	mov	r8, r2
 8000d06:	e788      	b.n	8000c1a <__aeabi_fsub+0xbe>
 8000d08:	22ff      	movs	r2, #255	; 0xff
 8000d0a:	2700      	movs	r7, #0
 8000d0c:	e771      	b.n	8000bf2 <__aeabi_fsub+0x96>
 8000d0e:	20fe      	movs	r0, #254	; 0xfe
 8000d10:	1c6a      	adds	r2, r5, #1
 8000d12:	4210      	tst	r0, r2
 8000d14:	d064      	beq.n	8000de0 <__aeabi_fsub+0x284>
 8000d16:	2aff      	cmp	r2, #255	; 0xff
 8000d18:	d0f6      	beq.n	8000d08 <__aeabi_fsub+0x1ac>
 8000d1a:	0015      	movs	r5, r2
 8000d1c:	4466      	add	r6, ip
 8000d1e:	0870      	lsrs	r0, r6, #1
 8000d20:	0743      	lsls	r3, r0, #29
 8000d22:	d000      	beq.n	8000d26 <__aeabi_fsub+0x1ca>
 8000d24:	e756      	b.n	8000bd4 <__aeabi_fsub+0x78>
 8000d26:	08c3      	lsrs	r3, r0, #3
 8000d28:	2dff      	cmp	r5, #255	; 0xff
 8000d2a:	d012      	beq.n	8000d52 <__aeabi_fsub+0x1f6>
 8000d2c:	025b      	lsls	r3, r3, #9
 8000d2e:	0a5f      	lsrs	r7, r3, #9
 8000d30:	b2ea      	uxtb	r2, r5
 8000d32:	e75e      	b.n	8000bf2 <__aeabi_fsub+0x96>
 8000d34:	4662      	mov	r2, ip
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d100      	bne.n	8000d3c <__aeabi_fsub+0x1e0>
 8000d3a:	e096      	b.n	8000e6a <__aeabi_fsub+0x30e>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d008      	beq.n	8000d52 <__aeabi_fsub+0x1f6>
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	03d2      	lsls	r2, r2, #15
 8000d44:	4213      	tst	r3, r2
 8000d46:	d004      	beq.n	8000d52 <__aeabi_fsub+0x1f6>
 8000d48:	4648      	mov	r0, r9
 8000d4a:	4210      	tst	r0, r2
 8000d4c:	d101      	bne.n	8000d52 <__aeabi_fsub+0x1f6>
 8000d4e:	000c      	movs	r4, r1
 8000d50:	464b      	mov	r3, r9
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0d8      	beq.n	8000d08 <__aeabi_fsub+0x1ac>
 8000d56:	2780      	movs	r7, #128	; 0x80
 8000d58:	03ff      	lsls	r7, r7, #15
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	027f      	lsls	r7, r7, #9
 8000d5e:	22ff      	movs	r2, #255	; 0xff
 8000d60:	0a7f      	lsrs	r7, r7, #9
 8000d62:	e746      	b.n	8000bf2 <__aeabi_fsub+0x96>
 8000d64:	2320      	movs	r3, #32
 8000d66:	003a      	movs	r2, r7
 8000d68:	1b45      	subs	r5, r0, r5
 8000d6a:	0038      	movs	r0, r7
 8000d6c:	3501      	adds	r5, #1
 8000d6e:	40ea      	lsrs	r2, r5
 8000d70:	1b5d      	subs	r5, r3, r5
 8000d72:	40a8      	lsls	r0, r5
 8000d74:	1e43      	subs	r3, r0, #1
 8000d76:	4198      	sbcs	r0, r3
 8000d78:	2500      	movs	r5, #0
 8000d7a:	4310      	orrs	r0, r2
 8000d7c:	e728      	b.n	8000bd0 <__aeabi_fsub+0x74>
 8000d7e:	2320      	movs	r3, #32
 8000d80:	1a1b      	subs	r3, r3, r0
 8000d82:	0032      	movs	r2, r6
 8000d84:	409e      	lsls	r6, r3
 8000d86:	40c2      	lsrs	r2, r0
 8000d88:	0030      	movs	r0, r6
 8000d8a:	1e43      	subs	r3, r0, #1
 8000d8c:	4198      	sbcs	r0, r3
 8000d8e:	4310      	orrs	r0, r2
 8000d90:	e70c      	b.n	8000bac <__aeabi_fsub+0x50>
 8000d92:	2aff      	cmp	r2, #255	; 0xff
 8000d94:	d0db      	beq.n	8000d4e <__aeabi_fsub+0x1f2>
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	4660      	mov	r0, ip
 8000d9a:	04db      	lsls	r3, r3, #19
 8000d9c:	4318      	orrs	r0, r3
 8000d9e:	4684      	mov	ip, r0
 8000da0:	2f1b      	cmp	r7, #27
 8000da2:	dd56      	ble.n	8000e52 <__aeabi_fsub+0x2f6>
 8000da4:	2001      	movs	r0, #1
 8000da6:	000c      	movs	r4, r1
 8000da8:	0015      	movs	r5, r2
 8000daa:	1a30      	subs	r0, r6, r0
 8000dac:	e700      	b.n	8000bb0 <__aeabi_fsub+0x54>
 8000dae:	4663      	mov	r3, ip
 8000db0:	1b9f      	subs	r7, r3, r6
 8000db2:	017b      	lsls	r3, r7, #5
 8000db4:	d43d      	bmi.n	8000e32 <__aeabi_fsub+0x2d6>
 8000db6:	2f00      	cmp	r7, #0
 8000db8:	d000      	beq.n	8000dbc <__aeabi_fsub+0x260>
 8000dba:	e6fe      	b.n	8000bba <__aeabi_fsub+0x5e>
 8000dbc:	2400      	movs	r4, #0
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2700      	movs	r7, #0
 8000dc2:	e716      	b.n	8000bf2 <__aeabi_fsub+0x96>
 8000dc4:	0005      	movs	r5, r0
 8000dc6:	e7af      	b.n	8000d28 <__aeabi_fsub+0x1cc>
 8000dc8:	0032      	movs	r2, r6
 8000dca:	4643      	mov	r3, r8
 8000dcc:	4641      	mov	r1, r8
 8000dce:	40da      	lsrs	r2, r3
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	1a5b      	subs	r3, r3, r1
 8000dd4:	409e      	lsls	r6, r3
 8000dd6:	0030      	movs	r0, r6
 8000dd8:	1e43      	subs	r3, r0, #1
 8000dda:	4198      	sbcs	r0, r3
 8000ddc:	4310      	orrs	r0, r2
 8000dde:	e721      	b.n	8000c24 <__aeabi_fsub+0xc8>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d1a7      	bne.n	8000d34 <__aeabi_fsub+0x1d8>
 8000de4:	4663      	mov	r3, ip
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d059      	beq.n	8000e9e <__aeabi_fsub+0x342>
 8000dea:	2200      	movs	r2, #0
 8000dec:	2e00      	cmp	r6, #0
 8000dee:	d100      	bne.n	8000df2 <__aeabi_fsub+0x296>
 8000df0:	e6ff      	b.n	8000bf2 <__aeabi_fsub+0x96>
 8000df2:	0030      	movs	r0, r6
 8000df4:	4460      	add	r0, ip
 8000df6:	0143      	lsls	r3, r0, #5
 8000df8:	d592      	bpl.n	8000d20 <__aeabi_fsub+0x1c4>
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <__aeabi_fsub+0x348>)
 8000dfc:	3501      	adds	r5, #1
 8000dfe:	4018      	ands	r0, r3
 8000e00:	e78e      	b.n	8000d20 <__aeabi_fsub+0x1c4>
 8000e02:	4663      	mov	r3, ip
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d047      	beq.n	8000e98 <__aeabi_fsub+0x33c>
 8000e08:	1e4b      	subs	r3, r1, #1
 8000e0a:	2901      	cmp	r1, #1
 8000e0c:	d015      	beq.n	8000e3a <__aeabi_fsub+0x2de>
 8000e0e:	29ff      	cmp	r1, #255	; 0xff
 8000e10:	d02b      	beq.n	8000e6a <__aeabi_fsub+0x30e>
 8000e12:	0019      	movs	r1, r3
 8000e14:	e74e      	b.n	8000cb4 <__aeabi_fsub+0x158>
 8000e16:	000c      	movs	r4, r1
 8000e18:	464b      	mov	r3, r9
 8000e1a:	003d      	movs	r5, r7
 8000e1c:	e784      	b.n	8000d28 <__aeabi_fsub+0x1cc>
 8000e1e:	4662      	mov	r2, ip
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	d18b      	bne.n	8000d3c <__aeabi_fsub+0x1e0>
 8000e24:	2e00      	cmp	r6, #0
 8000e26:	d192      	bne.n	8000d4e <__aeabi_fsub+0x1f2>
 8000e28:	2780      	movs	r7, #128	; 0x80
 8000e2a:	2400      	movs	r4, #0
 8000e2c:	22ff      	movs	r2, #255	; 0xff
 8000e2e:	03ff      	lsls	r7, r7, #15
 8000e30:	e6df      	b.n	8000bf2 <__aeabi_fsub+0x96>
 8000e32:	4663      	mov	r3, ip
 8000e34:	000c      	movs	r4, r1
 8000e36:	1af7      	subs	r7, r6, r3
 8000e38:	e6bf      	b.n	8000bba <__aeabi_fsub+0x5e>
 8000e3a:	0030      	movs	r0, r6
 8000e3c:	4460      	add	r0, ip
 8000e3e:	2501      	movs	r5, #1
 8000e40:	0143      	lsls	r3, r0, #5
 8000e42:	d400      	bmi.n	8000e46 <__aeabi_fsub+0x2ea>
 8000e44:	e76c      	b.n	8000d20 <__aeabi_fsub+0x1c4>
 8000e46:	2502      	movs	r5, #2
 8000e48:	e6f2      	b.n	8000c30 <__aeabi_fsub+0xd4>
 8000e4a:	4663      	mov	r3, ip
 8000e4c:	2501      	movs	r5, #1
 8000e4e:	1b98      	subs	r0, r3, r6
 8000e50:	e6ae      	b.n	8000bb0 <__aeabi_fsub+0x54>
 8000e52:	2320      	movs	r3, #32
 8000e54:	4664      	mov	r4, ip
 8000e56:	4660      	mov	r0, ip
 8000e58:	40fc      	lsrs	r4, r7
 8000e5a:	1bdf      	subs	r7, r3, r7
 8000e5c:	40b8      	lsls	r0, r7
 8000e5e:	1e43      	subs	r3, r0, #1
 8000e60:	4198      	sbcs	r0, r3
 8000e62:	4320      	orrs	r0, r4
 8000e64:	e79f      	b.n	8000da6 <__aeabi_fsub+0x24a>
 8000e66:	0005      	movs	r5, r0
 8000e68:	e75e      	b.n	8000d28 <__aeabi_fsub+0x1cc>
 8000e6a:	464b      	mov	r3, r9
 8000e6c:	e771      	b.n	8000d52 <__aeabi_fsub+0x1f6>
 8000e6e:	2320      	movs	r3, #32
 8000e70:	4665      	mov	r5, ip
 8000e72:	4660      	mov	r0, ip
 8000e74:	40cd      	lsrs	r5, r1
 8000e76:	1a59      	subs	r1, r3, r1
 8000e78:	4088      	lsls	r0, r1
 8000e7a:	1e43      	subs	r3, r0, #1
 8000e7c:	4198      	sbcs	r0, r3
 8000e7e:	4328      	orrs	r0, r5
 8000e80:	e71c      	b.n	8000cbc <__aeabi_fsub+0x160>
 8000e82:	4663      	mov	r3, ip
 8000e84:	000c      	movs	r4, r1
 8000e86:	2501      	movs	r5, #1
 8000e88:	1af0      	subs	r0, r6, r3
 8000e8a:	e691      	b.n	8000bb0 <__aeabi_fsub+0x54>
 8000e8c:	2e00      	cmp	r6, #0
 8000e8e:	d095      	beq.n	8000dbc <__aeabi_fsub+0x260>
 8000e90:	000c      	movs	r4, r1
 8000e92:	464f      	mov	r7, r9
 8000e94:	2200      	movs	r2, #0
 8000e96:	e6ac      	b.n	8000bf2 <__aeabi_fsub+0x96>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	000d      	movs	r5, r1
 8000e9c:	e744      	b.n	8000d28 <__aeabi_fsub+0x1cc>
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	e6a6      	b.n	8000bf2 <__aeabi_fsub+0x96>
 8000ea4:	fbffffff 	.word	0xfbffffff
 8000ea8:	7dffffff 	.word	0x7dffffff
 8000eac:	2800      	cmp	r0, #0
 8000eae:	d000      	beq.n	8000eb2 <__aeabi_fsub+0x356>
 8000eb0:	e736      	b.n	8000d20 <__aeabi_fsub+0x1c4>
 8000eb2:	2400      	movs	r4, #0
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e69c      	b.n	8000bf2 <__aeabi_fsub+0x96>

08000eb8 <__aeabi_f2iz>:
 8000eb8:	0241      	lsls	r1, r0, #9
 8000eba:	0042      	lsls	r2, r0, #1
 8000ebc:	0fc3      	lsrs	r3, r0, #31
 8000ebe:	0a49      	lsrs	r1, r1, #9
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	0e12      	lsrs	r2, r2, #24
 8000ec4:	2a7e      	cmp	r2, #126	; 0x7e
 8000ec6:	dd03      	ble.n	8000ed0 <__aeabi_f2iz+0x18>
 8000ec8:	2a9d      	cmp	r2, #157	; 0x9d
 8000eca:	dd02      	ble.n	8000ed2 <__aeabi_f2iz+0x1a>
 8000ecc:	4a09      	ldr	r2, [pc, #36]	; (8000ef4 <__aeabi_f2iz+0x3c>)
 8000ece:	1898      	adds	r0, r3, r2
 8000ed0:	4770      	bx	lr
 8000ed2:	2080      	movs	r0, #128	; 0x80
 8000ed4:	0400      	lsls	r0, r0, #16
 8000ed6:	4301      	orrs	r1, r0
 8000ed8:	2a95      	cmp	r2, #149	; 0x95
 8000eda:	dc07      	bgt.n	8000eec <__aeabi_f2iz+0x34>
 8000edc:	2096      	movs	r0, #150	; 0x96
 8000ede:	1a82      	subs	r2, r0, r2
 8000ee0:	40d1      	lsrs	r1, r2
 8000ee2:	4248      	negs	r0, r1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f3      	bne.n	8000ed0 <__aeabi_f2iz+0x18>
 8000ee8:	0008      	movs	r0, r1
 8000eea:	e7f1      	b.n	8000ed0 <__aeabi_f2iz+0x18>
 8000eec:	3a96      	subs	r2, #150	; 0x96
 8000eee:	4091      	lsls	r1, r2
 8000ef0:	e7f7      	b.n	8000ee2 <__aeabi_f2iz+0x2a>
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	7fffffff 	.word	0x7fffffff

08000ef8 <__aeabi_ui2f>:
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	1e05      	subs	r5, r0, #0
 8000efc:	d00e      	beq.n	8000f1c <__aeabi_ui2f+0x24>
 8000efe:	f000 ff31 	bl	8001d64 <__clzsi2>
 8000f02:	239e      	movs	r3, #158	; 0x9e
 8000f04:	0004      	movs	r4, r0
 8000f06:	1a1b      	subs	r3, r3, r0
 8000f08:	2b96      	cmp	r3, #150	; 0x96
 8000f0a:	dc0c      	bgt.n	8000f26 <__aeabi_ui2f+0x2e>
 8000f0c:	2808      	cmp	r0, #8
 8000f0e:	dd01      	ble.n	8000f14 <__aeabi_ui2f+0x1c>
 8000f10:	3c08      	subs	r4, #8
 8000f12:	40a5      	lsls	r5, r4
 8000f14:	026d      	lsls	r5, r5, #9
 8000f16:	0a6d      	lsrs	r5, r5, #9
 8000f18:	b2d8      	uxtb	r0, r3
 8000f1a:	e001      	b.n	8000f20 <__aeabi_ui2f+0x28>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	2500      	movs	r5, #0
 8000f20:	05c0      	lsls	r0, r0, #23
 8000f22:	4328      	orrs	r0, r5
 8000f24:	bd70      	pop	{r4, r5, r6, pc}
 8000f26:	2b99      	cmp	r3, #153	; 0x99
 8000f28:	dd09      	ble.n	8000f3e <__aeabi_ui2f+0x46>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	0029      	movs	r1, r5
 8000f2e:	321b      	adds	r2, #27
 8000f30:	4091      	lsls	r1, r2
 8000f32:	1e4a      	subs	r2, r1, #1
 8000f34:	4191      	sbcs	r1, r2
 8000f36:	2205      	movs	r2, #5
 8000f38:	1a12      	subs	r2, r2, r0
 8000f3a:	40d5      	lsrs	r5, r2
 8000f3c:	430d      	orrs	r5, r1
 8000f3e:	2c05      	cmp	r4, #5
 8000f40:	dc12      	bgt.n	8000f68 <__aeabi_ui2f+0x70>
 8000f42:	0029      	movs	r1, r5
 8000f44:	4e0c      	ldr	r6, [pc, #48]	; (8000f78 <__aeabi_ui2f+0x80>)
 8000f46:	4031      	ands	r1, r6
 8000f48:	076a      	lsls	r2, r5, #29
 8000f4a:	d009      	beq.n	8000f60 <__aeabi_ui2f+0x68>
 8000f4c:	200f      	movs	r0, #15
 8000f4e:	4028      	ands	r0, r5
 8000f50:	2804      	cmp	r0, #4
 8000f52:	d005      	beq.n	8000f60 <__aeabi_ui2f+0x68>
 8000f54:	3104      	adds	r1, #4
 8000f56:	014a      	lsls	r2, r1, #5
 8000f58:	d502      	bpl.n	8000f60 <__aeabi_ui2f+0x68>
 8000f5a:	239f      	movs	r3, #159	; 0x9f
 8000f5c:	4031      	ands	r1, r6
 8000f5e:	1b1b      	subs	r3, r3, r4
 8000f60:	0189      	lsls	r1, r1, #6
 8000f62:	0a4d      	lsrs	r5, r1, #9
 8000f64:	b2d8      	uxtb	r0, r3
 8000f66:	e7db      	b.n	8000f20 <__aeabi_ui2f+0x28>
 8000f68:	1f62      	subs	r2, r4, #5
 8000f6a:	4095      	lsls	r5, r2
 8000f6c:	0029      	movs	r1, r5
 8000f6e:	4e02      	ldr	r6, [pc, #8]	; (8000f78 <__aeabi_ui2f+0x80>)
 8000f70:	4031      	ands	r1, r6
 8000f72:	076a      	lsls	r2, r5, #29
 8000f74:	d0f4      	beq.n	8000f60 <__aeabi_ui2f+0x68>
 8000f76:	e7e9      	b.n	8000f4c <__aeabi_ui2f+0x54>
 8000f78:	fbffffff 	.word	0xfbffffff

08000f7c <__aeabi_dmul>:
 8000f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f7e:	4657      	mov	r7, sl
 8000f80:	464e      	mov	r6, r9
 8000f82:	4645      	mov	r5, r8
 8000f84:	46de      	mov	lr, fp
 8000f86:	b5e0      	push	{r5, r6, r7, lr}
 8000f88:	4698      	mov	r8, r3
 8000f8a:	030c      	lsls	r4, r1, #12
 8000f8c:	004b      	lsls	r3, r1, #1
 8000f8e:	0006      	movs	r6, r0
 8000f90:	4692      	mov	sl, r2
 8000f92:	b087      	sub	sp, #28
 8000f94:	0b24      	lsrs	r4, r4, #12
 8000f96:	0d5b      	lsrs	r3, r3, #21
 8000f98:	0fcf      	lsrs	r7, r1, #31
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dmul+0x24>
 8000f9e:	e15c      	b.n	800125a <__aeabi_dmul+0x2de>
 8000fa0:	4ad9      	ldr	r2, [pc, #868]	; (8001308 <__aeabi_dmul+0x38c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_dmul+0x2c>
 8000fa6:	e175      	b.n	8001294 <__aeabi_dmul+0x318>
 8000fa8:	0f42      	lsrs	r2, r0, #29
 8000faa:	00e4      	lsls	r4, r4, #3
 8000fac:	4314      	orrs	r4, r2
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	0412      	lsls	r2, r2, #16
 8000fb2:	4314      	orrs	r4, r2
 8000fb4:	4ad5      	ldr	r2, [pc, #852]	; (800130c <__aeabi_dmul+0x390>)
 8000fb6:	00c5      	lsls	r5, r0, #3
 8000fb8:	4694      	mov	ip, r2
 8000fba:	4463      	add	r3, ip
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	4699      	mov	r9, r3
 8000fc2:	469b      	mov	fp, r3
 8000fc4:	4643      	mov	r3, r8
 8000fc6:	4642      	mov	r2, r8
 8000fc8:	031e      	lsls	r6, r3, #12
 8000fca:	0fd2      	lsrs	r2, r2, #31
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4650      	mov	r0, sl
 8000fd0:	4690      	mov	r8, r2
 8000fd2:	0b36      	lsrs	r6, r6, #12
 8000fd4:	0d5b      	lsrs	r3, r3, #21
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dmul+0x5e>
 8000fd8:	e120      	b.n	800121c <__aeabi_dmul+0x2a0>
 8000fda:	4acb      	ldr	r2, [pc, #812]	; (8001308 <__aeabi_dmul+0x38c>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_dmul+0x66>
 8000fe0:	e162      	b.n	80012a8 <__aeabi_dmul+0x32c>
 8000fe2:	49ca      	ldr	r1, [pc, #808]	; (800130c <__aeabi_dmul+0x390>)
 8000fe4:	0f42      	lsrs	r2, r0, #29
 8000fe6:	468c      	mov	ip, r1
 8000fe8:	9900      	ldr	r1, [sp, #0]
 8000fea:	4463      	add	r3, ip
 8000fec:	00f6      	lsls	r6, r6, #3
 8000fee:	468c      	mov	ip, r1
 8000ff0:	4316      	orrs	r6, r2
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	449c      	add	ip, r3
 8000ff6:	0412      	lsls	r2, r2, #16
 8000ff8:	4663      	mov	r3, ip
 8000ffa:	4316      	orrs	r6, r2
 8000ffc:	00c2      	lsls	r2, r0, #3
 8000ffe:	2000      	movs	r0, #0
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	9900      	ldr	r1, [sp, #0]
 8001004:	4643      	mov	r3, r8
 8001006:	3101      	adds	r1, #1
 8001008:	468c      	mov	ip, r1
 800100a:	4649      	mov	r1, r9
 800100c:	407b      	eors	r3, r7
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	290f      	cmp	r1, #15
 8001012:	d826      	bhi.n	8001062 <__aeabi_dmul+0xe6>
 8001014:	4bbe      	ldr	r3, [pc, #760]	; (8001310 <__aeabi_dmul+0x394>)
 8001016:	0089      	lsls	r1, r1, #2
 8001018:	5859      	ldr	r1, [r3, r1]
 800101a:	468f      	mov	pc, r1
 800101c:	4643      	mov	r3, r8
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	0034      	movs	r4, r6
 8001022:	0015      	movs	r5, r2
 8001024:	4683      	mov	fp, r0
 8001026:	465b      	mov	r3, fp
 8001028:	2b02      	cmp	r3, #2
 800102a:	d016      	beq.n	800105a <__aeabi_dmul+0xde>
 800102c:	2b03      	cmp	r3, #3
 800102e:	d100      	bne.n	8001032 <__aeabi_dmul+0xb6>
 8001030:	e203      	b.n	800143a <__aeabi_dmul+0x4be>
 8001032:	2b01      	cmp	r3, #1
 8001034:	d000      	beq.n	8001038 <__aeabi_dmul+0xbc>
 8001036:	e0cd      	b.n	80011d4 <__aeabi_dmul+0x258>
 8001038:	2200      	movs	r2, #0
 800103a:	2400      	movs	r4, #0
 800103c:	2500      	movs	r5, #0
 800103e:	9b01      	ldr	r3, [sp, #4]
 8001040:	0512      	lsls	r2, r2, #20
 8001042:	4322      	orrs	r2, r4
 8001044:	07db      	lsls	r3, r3, #31
 8001046:	431a      	orrs	r2, r3
 8001048:	0028      	movs	r0, r5
 800104a:	0011      	movs	r1, r2
 800104c:	b007      	add	sp, #28
 800104e:	bcf0      	pop	{r4, r5, r6, r7}
 8001050:	46bb      	mov	fp, r7
 8001052:	46b2      	mov	sl, r6
 8001054:	46a9      	mov	r9, r5
 8001056:	46a0      	mov	r8, r4
 8001058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800105a:	2400      	movs	r4, #0
 800105c:	2500      	movs	r5, #0
 800105e:	4aaa      	ldr	r2, [pc, #680]	; (8001308 <__aeabi_dmul+0x38c>)
 8001060:	e7ed      	b.n	800103e <__aeabi_dmul+0xc2>
 8001062:	0c28      	lsrs	r0, r5, #16
 8001064:	042d      	lsls	r5, r5, #16
 8001066:	0c2d      	lsrs	r5, r5, #16
 8001068:	002b      	movs	r3, r5
 800106a:	0c11      	lsrs	r1, r2, #16
 800106c:	0412      	lsls	r2, r2, #16
 800106e:	0c12      	lsrs	r2, r2, #16
 8001070:	4353      	muls	r3, r2
 8001072:	4698      	mov	r8, r3
 8001074:	0013      	movs	r3, r2
 8001076:	002f      	movs	r7, r5
 8001078:	4343      	muls	r3, r0
 800107a:	4699      	mov	r9, r3
 800107c:	434f      	muls	r7, r1
 800107e:	444f      	add	r7, r9
 8001080:	46bb      	mov	fp, r7
 8001082:	4647      	mov	r7, r8
 8001084:	000b      	movs	r3, r1
 8001086:	0c3f      	lsrs	r7, r7, #16
 8001088:	46ba      	mov	sl, r7
 800108a:	4343      	muls	r3, r0
 800108c:	44da      	add	sl, fp
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	45d1      	cmp	r9, sl
 8001092:	d904      	bls.n	800109e <__aeabi_dmul+0x122>
 8001094:	2780      	movs	r7, #128	; 0x80
 8001096:	027f      	lsls	r7, r7, #9
 8001098:	46b9      	mov	r9, r7
 800109a:	444b      	add	r3, r9
 800109c:	9302      	str	r3, [sp, #8]
 800109e:	4653      	mov	r3, sl
 80010a0:	0c1b      	lsrs	r3, r3, #16
 80010a2:	469b      	mov	fp, r3
 80010a4:	4653      	mov	r3, sl
 80010a6:	041f      	lsls	r7, r3, #16
 80010a8:	4643      	mov	r3, r8
 80010aa:	041b      	lsls	r3, r3, #16
 80010ac:	0c1b      	lsrs	r3, r3, #16
 80010ae:	4698      	mov	r8, r3
 80010b0:	003b      	movs	r3, r7
 80010b2:	4443      	add	r3, r8
 80010b4:	9304      	str	r3, [sp, #16]
 80010b6:	0c33      	lsrs	r3, r6, #16
 80010b8:	0436      	lsls	r6, r6, #16
 80010ba:	0c36      	lsrs	r6, r6, #16
 80010bc:	4698      	mov	r8, r3
 80010be:	0033      	movs	r3, r6
 80010c0:	4343      	muls	r3, r0
 80010c2:	4699      	mov	r9, r3
 80010c4:	4643      	mov	r3, r8
 80010c6:	4343      	muls	r3, r0
 80010c8:	002f      	movs	r7, r5
 80010ca:	469a      	mov	sl, r3
 80010cc:	4643      	mov	r3, r8
 80010ce:	4377      	muls	r7, r6
 80010d0:	435d      	muls	r5, r3
 80010d2:	0c38      	lsrs	r0, r7, #16
 80010d4:	444d      	add	r5, r9
 80010d6:	1945      	adds	r5, r0, r5
 80010d8:	45a9      	cmp	r9, r5
 80010da:	d903      	bls.n	80010e4 <__aeabi_dmul+0x168>
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	025b      	lsls	r3, r3, #9
 80010e0:	4699      	mov	r9, r3
 80010e2:	44ca      	add	sl, r9
 80010e4:	043f      	lsls	r7, r7, #16
 80010e6:	0c28      	lsrs	r0, r5, #16
 80010e8:	0c3f      	lsrs	r7, r7, #16
 80010ea:	042d      	lsls	r5, r5, #16
 80010ec:	19ed      	adds	r5, r5, r7
 80010ee:	0c27      	lsrs	r7, r4, #16
 80010f0:	0424      	lsls	r4, r4, #16
 80010f2:	0c24      	lsrs	r4, r4, #16
 80010f4:	0003      	movs	r3, r0
 80010f6:	0020      	movs	r0, r4
 80010f8:	4350      	muls	r0, r2
 80010fa:	437a      	muls	r2, r7
 80010fc:	4691      	mov	r9, r2
 80010fe:	003a      	movs	r2, r7
 8001100:	4453      	add	r3, sl
 8001102:	9305      	str	r3, [sp, #20]
 8001104:	0c03      	lsrs	r3, r0, #16
 8001106:	469a      	mov	sl, r3
 8001108:	434a      	muls	r2, r1
 800110a:	4361      	muls	r1, r4
 800110c:	4449      	add	r1, r9
 800110e:	4451      	add	r1, sl
 8001110:	44ab      	add	fp, r5
 8001112:	4589      	cmp	r9, r1
 8001114:	d903      	bls.n	800111e <__aeabi_dmul+0x1a2>
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	4699      	mov	r9, r3
 800111c:	444a      	add	r2, r9
 800111e:	0400      	lsls	r0, r0, #16
 8001120:	0c0b      	lsrs	r3, r1, #16
 8001122:	0c00      	lsrs	r0, r0, #16
 8001124:	0409      	lsls	r1, r1, #16
 8001126:	1809      	adds	r1, r1, r0
 8001128:	0020      	movs	r0, r4
 800112a:	4699      	mov	r9, r3
 800112c:	4643      	mov	r3, r8
 800112e:	4370      	muls	r0, r6
 8001130:	435c      	muls	r4, r3
 8001132:	437e      	muls	r6, r7
 8001134:	435f      	muls	r7, r3
 8001136:	0c03      	lsrs	r3, r0, #16
 8001138:	4698      	mov	r8, r3
 800113a:	19a4      	adds	r4, r4, r6
 800113c:	4444      	add	r4, r8
 800113e:	444a      	add	r2, r9
 8001140:	9703      	str	r7, [sp, #12]
 8001142:	42a6      	cmp	r6, r4
 8001144:	d904      	bls.n	8001150 <__aeabi_dmul+0x1d4>
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	025b      	lsls	r3, r3, #9
 800114a:	4698      	mov	r8, r3
 800114c:	4447      	add	r7, r8
 800114e:	9703      	str	r7, [sp, #12]
 8001150:	0423      	lsls	r3, r4, #16
 8001152:	9e02      	ldr	r6, [sp, #8]
 8001154:	469a      	mov	sl, r3
 8001156:	9b05      	ldr	r3, [sp, #20]
 8001158:	445e      	add	r6, fp
 800115a:	4698      	mov	r8, r3
 800115c:	42ae      	cmp	r6, r5
 800115e:	41ad      	sbcs	r5, r5
 8001160:	1876      	adds	r6, r6, r1
 8001162:	428e      	cmp	r6, r1
 8001164:	4189      	sbcs	r1, r1
 8001166:	0400      	lsls	r0, r0, #16
 8001168:	0c00      	lsrs	r0, r0, #16
 800116a:	4450      	add	r0, sl
 800116c:	4440      	add	r0, r8
 800116e:	426d      	negs	r5, r5
 8001170:	1947      	adds	r7, r0, r5
 8001172:	46b8      	mov	r8, r7
 8001174:	4693      	mov	fp, r2
 8001176:	4249      	negs	r1, r1
 8001178:	4689      	mov	r9, r1
 800117a:	44c3      	add	fp, r8
 800117c:	44d9      	add	r9, fp
 800117e:	4298      	cmp	r0, r3
 8001180:	4180      	sbcs	r0, r0
 8001182:	45a8      	cmp	r8, r5
 8001184:	41ad      	sbcs	r5, r5
 8001186:	4593      	cmp	fp, r2
 8001188:	4192      	sbcs	r2, r2
 800118a:	4589      	cmp	r9, r1
 800118c:	4189      	sbcs	r1, r1
 800118e:	426d      	negs	r5, r5
 8001190:	4240      	negs	r0, r0
 8001192:	4328      	orrs	r0, r5
 8001194:	0c24      	lsrs	r4, r4, #16
 8001196:	4252      	negs	r2, r2
 8001198:	4249      	negs	r1, r1
 800119a:	430a      	orrs	r2, r1
 800119c:	9b03      	ldr	r3, [sp, #12]
 800119e:	1900      	adds	r0, r0, r4
 80011a0:	1880      	adds	r0, r0, r2
 80011a2:	18c7      	adds	r7, r0, r3
 80011a4:	464b      	mov	r3, r9
 80011a6:	0ddc      	lsrs	r4, r3, #23
 80011a8:	9b04      	ldr	r3, [sp, #16]
 80011aa:	0275      	lsls	r5, r6, #9
 80011ac:	431d      	orrs	r5, r3
 80011ae:	1e6a      	subs	r2, r5, #1
 80011b0:	4195      	sbcs	r5, r2
 80011b2:	464b      	mov	r3, r9
 80011b4:	0df6      	lsrs	r6, r6, #23
 80011b6:	027f      	lsls	r7, r7, #9
 80011b8:	4335      	orrs	r5, r6
 80011ba:	025a      	lsls	r2, r3, #9
 80011bc:	433c      	orrs	r4, r7
 80011be:	4315      	orrs	r5, r2
 80011c0:	01fb      	lsls	r3, r7, #7
 80011c2:	d400      	bmi.n	80011c6 <__aeabi_dmul+0x24a>
 80011c4:	e11c      	b.n	8001400 <__aeabi_dmul+0x484>
 80011c6:	2101      	movs	r1, #1
 80011c8:	086a      	lsrs	r2, r5, #1
 80011ca:	400d      	ands	r5, r1
 80011cc:	4315      	orrs	r5, r2
 80011ce:	07e2      	lsls	r2, r4, #31
 80011d0:	4315      	orrs	r5, r2
 80011d2:	0864      	lsrs	r4, r4, #1
 80011d4:	494f      	ldr	r1, [pc, #316]	; (8001314 <__aeabi_dmul+0x398>)
 80011d6:	4461      	add	r1, ip
 80011d8:	2900      	cmp	r1, #0
 80011da:	dc00      	bgt.n	80011de <__aeabi_dmul+0x262>
 80011dc:	e0b0      	b.n	8001340 <__aeabi_dmul+0x3c4>
 80011de:	076b      	lsls	r3, r5, #29
 80011e0:	d009      	beq.n	80011f6 <__aeabi_dmul+0x27a>
 80011e2:	220f      	movs	r2, #15
 80011e4:	402a      	ands	r2, r5
 80011e6:	2a04      	cmp	r2, #4
 80011e8:	d005      	beq.n	80011f6 <__aeabi_dmul+0x27a>
 80011ea:	1d2a      	adds	r2, r5, #4
 80011ec:	42aa      	cmp	r2, r5
 80011ee:	41ad      	sbcs	r5, r5
 80011f0:	426d      	negs	r5, r5
 80011f2:	1964      	adds	r4, r4, r5
 80011f4:	0015      	movs	r5, r2
 80011f6:	01e3      	lsls	r3, r4, #7
 80011f8:	d504      	bpl.n	8001204 <__aeabi_dmul+0x288>
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	4a46      	ldr	r2, [pc, #280]	; (8001318 <__aeabi_dmul+0x39c>)
 80011fe:	00c9      	lsls	r1, r1, #3
 8001200:	4014      	ands	r4, r2
 8001202:	4461      	add	r1, ip
 8001204:	4a45      	ldr	r2, [pc, #276]	; (800131c <__aeabi_dmul+0x3a0>)
 8001206:	4291      	cmp	r1, r2
 8001208:	dd00      	ble.n	800120c <__aeabi_dmul+0x290>
 800120a:	e726      	b.n	800105a <__aeabi_dmul+0xde>
 800120c:	0762      	lsls	r2, r4, #29
 800120e:	08ed      	lsrs	r5, r5, #3
 8001210:	0264      	lsls	r4, r4, #9
 8001212:	0549      	lsls	r1, r1, #21
 8001214:	4315      	orrs	r5, r2
 8001216:	0b24      	lsrs	r4, r4, #12
 8001218:	0d4a      	lsrs	r2, r1, #21
 800121a:	e710      	b.n	800103e <__aeabi_dmul+0xc2>
 800121c:	4652      	mov	r2, sl
 800121e:	4332      	orrs	r2, r6
 8001220:	d100      	bne.n	8001224 <__aeabi_dmul+0x2a8>
 8001222:	e07f      	b.n	8001324 <__aeabi_dmul+0x3a8>
 8001224:	2e00      	cmp	r6, #0
 8001226:	d100      	bne.n	800122a <__aeabi_dmul+0x2ae>
 8001228:	e0dc      	b.n	80013e4 <__aeabi_dmul+0x468>
 800122a:	0030      	movs	r0, r6
 800122c:	f000 fd9a 	bl	8001d64 <__clzsi2>
 8001230:	0002      	movs	r2, r0
 8001232:	3a0b      	subs	r2, #11
 8001234:	231d      	movs	r3, #29
 8001236:	0001      	movs	r1, r0
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	4652      	mov	r2, sl
 800123c:	3908      	subs	r1, #8
 800123e:	40da      	lsrs	r2, r3
 8001240:	408e      	lsls	r6, r1
 8001242:	4316      	orrs	r6, r2
 8001244:	4652      	mov	r2, sl
 8001246:	408a      	lsls	r2, r1
 8001248:	9b00      	ldr	r3, [sp, #0]
 800124a:	4935      	ldr	r1, [pc, #212]	; (8001320 <__aeabi_dmul+0x3a4>)
 800124c:	1a18      	subs	r0, r3, r0
 800124e:	0003      	movs	r3, r0
 8001250:	468c      	mov	ip, r1
 8001252:	4463      	add	r3, ip
 8001254:	2000      	movs	r0, #0
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	e6d3      	b.n	8001002 <__aeabi_dmul+0x86>
 800125a:	0025      	movs	r5, r4
 800125c:	4305      	orrs	r5, r0
 800125e:	d04a      	beq.n	80012f6 <__aeabi_dmul+0x37a>
 8001260:	2c00      	cmp	r4, #0
 8001262:	d100      	bne.n	8001266 <__aeabi_dmul+0x2ea>
 8001264:	e0b0      	b.n	80013c8 <__aeabi_dmul+0x44c>
 8001266:	0020      	movs	r0, r4
 8001268:	f000 fd7c 	bl	8001d64 <__clzsi2>
 800126c:	0001      	movs	r1, r0
 800126e:	0002      	movs	r2, r0
 8001270:	390b      	subs	r1, #11
 8001272:	231d      	movs	r3, #29
 8001274:	0010      	movs	r0, r2
 8001276:	1a5b      	subs	r3, r3, r1
 8001278:	0031      	movs	r1, r6
 800127a:	0035      	movs	r5, r6
 800127c:	3808      	subs	r0, #8
 800127e:	4084      	lsls	r4, r0
 8001280:	40d9      	lsrs	r1, r3
 8001282:	4085      	lsls	r5, r0
 8001284:	430c      	orrs	r4, r1
 8001286:	4826      	ldr	r0, [pc, #152]	; (8001320 <__aeabi_dmul+0x3a4>)
 8001288:	1a83      	subs	r3, r0, r2
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2300      	movs	r3, #0
 800128e:	4699      	mov	r9, r3
 8001290:	469b      	mov	fp, r3
 8001292:	e697      	b.n	8000fc4 <__aeabi_dmul+0x48>
 8001294:	0005      	movs	r5, r0
 8001296:	4325      	orrs	r5, r4
 8001298:	d126      	bne.n	80012e8 <__aeabi_dmul+0x36c>
 800129a:	2208      	movs	r2, #8
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2302      	movs	r3, #2
 80012a0:	2400      	movs	r4, #0
 80012a2:	4691      	mov	r9, r2
 80012a4:	469b      	mov	fp, r3
 80012a6:	e68d      	b.n	8000fc4 <__aeabi_dmul+0x48>
 80012a8:	4652      	mov	r2, sl
 80012aa:	9b00      	ldr	r3, [sp, #0]
 80012ac:	4332      	orrs	r2, r6
 80012ae:	d110      	bne.n	80012d2 <__aeabi_dmul+0x356>
 80012b0:	4915      	ldr	r1, [pc, #84]	; (8001308 <__aeabi_dmul+0x38c>)
 80012b2:	2600      	movs	r6, #0
 80012b4:	468c      	mov	ip, r1
 80012b6:	4463      	add	r3, ip
 80012b8:	4649      	mov	r1, r9
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2302      	movs	r3, #2
 80012be:	4319      	orrs	r1, r3
 80012c0:	4689      	mov	r9, r1
 80012c2:	2002      	movs	r0, #2
 80012c4:	e69d      	b.n	8001002 <__aeabi_dmul+0x86>
 80012c6:	465b      	mov	r3, fp
 80012c8:	9701      	str	r7, [sp, #4]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d000      	beq.n	80012d0 <__aeabi_dmul+0x354>
 80012ce:	e6ad      	b.n	800102c <__aeabi_dmul+0xb0>
 80012d0:	e6c3      	b.n	800105a <__aeabi_dmul+0xde>
 80012d2:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <__aeabi_dmul+0x38c>)
 80012d4:	2003      	movs	r0, #3
 80012d6:	4694      	mov	ip, r2
 80012d8:	4463      	add	r3, ip
 80012da:	464a      	mov	r2, r9
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2303      	movs	r3, #3
 80012e0:	431a      	orrs	r2, r3
 80012e2:	4691      	mov	r9, r2
 80012e4:	4652      	mov	r2, sl
 80012e6:	e68c      	b.n	8001002 <__aeabi_dmul+0x86>
 80012e8:	220c      	movs	r2, #12
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2303      	movs	r3, #3
 80012ee:	0005      	movs	r5, r0
 80012f0:	4691      	mov	r9, r2
 80012f2:	469b      	mov	fp, r3
 80012f4:	e666      	b.n	8000fc4 <__aeabi_dmul+0x48>
 80012f6:	2304      	movs	r3, #4
 80012f8:	4699      	mov	r9, r3
 80012fa:	2300      	movs	r3, #0
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	2400      	movs	r4, #0
 8001302:	469b      	mov	fp, r3
 8001304:	e65e      	b.n	8000fc4 <__aeabi_dmul+0x48>
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	000007ff 	.word	0x000007ff
 800130c:	fffffc01 	.word	0xfffffc01
 8001310:	08006250 	.word	0x08006250
 8001314:	000003ff 	.word	0x000003ff
 8001318:	feffffff 	.word	0xfeffffff
 800131c:	000007fe 	.word	0x000007fe
 8001320:	fffffc0d 	.word	0xfffffc0d
 8001324:	4649      	mov	r1, r9
 8001326:	2301      	movs	r3, #1
 8001328:	4319      	orrs	r1, r3
 800132a:	4689      	mov	r9, r1
 800132c:	2600      	movs	r6, #0
 800132e:	2001      	movs	r0, #1
 8001330:	e667      	b.n	8001002 <__aeabi_dmul+0x86>
 8001332:	2300      	movs	r3, #0
 8001334:	2480      	movs	r4, #128	; 0x80
 8001336:	2500      	movs	r5, #0
 8001338:	4a43      	ldr	r2, [pc, #268]	; (8001448 <__aeabi_dmul+0x4cc>)
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	0324      	lsls	r4, r4, #12
 800133e:	e67e      	b.n	800103e <__aeabi_dmul+0xc2>
 8001340:	2001      	movs	r0, #1
 8001342:	1a40      	subs	r0, r0, r1
 8001344:	2838      	cmp	r0, #56	; 0x38
 8001346:	dd00      	ble.n	800134a <__aeabi_dmul+0x3ce>
 8001348:	e676      	b.n	8001038 <__aeabi_dmul+0xbc>
 800134a:	281f      	cmp	r0, #31
 800134c:	dd5b      	ble.n	8001406 <__aeabi_dmul+0x48a>
 800134e:	221f      	movs	r2, #31
 8001350:	0023      	movs	r3, r4
 8001352:	4252      	negs	r2, r2
 8001354:	1a51      	subs	r1, r2, r1
 8001356:	40cb      	lsrs	r3, r1
 8001358:	0019      	movs	r1, r3
 800135a:	2820      	cmp	r0, #32
 800135c:	d003      	beq.n	8001366 <__aeabi_dmul+0x3ea>
 800135e:	4a3b      	ldr	r2, [pc, #236]	; (800144c <__aeabi_dmul+0x4d0>)
 8001360:	4462      	add	r2, ip
 8001362:	4094      	lsls	r4, r2
 8001364:	4325      	orrs	r5, r4
 8001366:	1e6a      	subs	r2, r5, #1
 8001368:	4195      	sbcs	r5, r2
 800136a:	002a      	movs	r2, r5
 800136c:	430a      	orrs	r2, r1
 800136e:	2107      	movs	r1, #7
 8001370:	000d      	movs	r5, r1
 8001372:	2400      	movs	r4, #0
 8001374:	4015      	ands	r5, r2
 8001376:	4211      	tst	r1, r2
 8001378:	d05b      	beq.n	8001432 <__aeabi_dmul+0x4b6>
 800137a:	210f      	movs	r1, #15
 800137c:	2400      	movs	r4, #0
 800137e:	4011      	ands	r1, r2
 8001380:	2904      	cmp	r1, #4
 8001382:	d053      	beq.n	800142c <__aeabi_dmul+0x4b0>
 8001384:	1d11      	adds	r1, r2, #4
 8001386:	4291      	cmp	r1, r2
 8001388:	4192      	sbcs	r2, r2
 800138a:	4252      	negs	r2, r2
 800138c:	18a4      	adds	r4, r4, r2
 800138e:	000a      	movs	r2, r1
 8001390:	0223      	lsls	r3, r4, #8
 8001392:	d54b      	bpl.n	800142c <__aeabi_dmul+0x4b0>
 8001394:	2201      	movs	r2, #1
 8001396:	2400      	movs	r4, #0
 8001398:	2500      	movs	r5, #0
 800139a:	e650      	b.n	800103e <__aeabi_dmul+0xc2>
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	031b      	lsls	r3, r3, #12
 80013a0:	421c      	tst	r4, r3
 80013a2:	d009      	beq.n	80013b8 <__aeabi_dmul+0x43c>
 80013a4:	421e      	tst	r6, r3
 80013a6:	d107      	bne.n	80013b8 <__aeabi_dmul+0x43c>
 80013a8:	4333      	orrs	r3, r6
 80013aa:	031c      	lsls	r4, r3, #12
 80013ac:	4643      	mov	r3, r8
 80013ae:	0015      	movs	r5, r2
 80013b0:	0b24      	lsrs	r4, r4, #12
 80013b2:	4a25      	ldr	r2, [pc, #148]	; (8001448 <__aeabi_dmul+0x4cc>)
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	e642      	b.n	800103e <__aeabi_dmul+0xc2>
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0312      	lsls	r2, r2, #12
 80013bc:	4314      	orrs	r4, r2
 80013be:	0324      	lsls	r4, r4, #12
 80013c0:	4a21      	ldr	r2, [pc, #132]	; (8001448 <__aeabi_dmul+0x4cc>)
 80013c2:	0b24      	lsrs	r4, r4, #12
 80013c4:	9701      	str	r7, [sp, #4]
 80013c6:	e63a      	b.n	800103e <__aeabi_dmul+0xc2>
 80013c8:	f000 fccc 	bl	8001d64 <__clzsi2>
 80013cc:	0001      	movs	r1, r0
 80013ce:	0002      	movs	r2, r0
 80013d0:	3115      	adds	r1, #21
 80013d2:	3220      	adds	r2, #32
 80013d4:	291c      	cmp	r1, #28
 80013d6:	dc00      	bgt.n	80013da <__aeabi_dmul+0x45e>
 80013d8:	e74b      	b.n	8001272 <__aeabi_dmul+0x2f6>
 80013da:	0034      	movs	r4, r6
 80013dc:	3808      	subs	r0, #8
 80013de:	2500      	movs	r5, #0
 80013e0:	4084      	lsls	r4, r0
 80013e2:	e750      	b.n	8001286 <__aeabi_dmul+0x30a>
 80013e4:	f000 fcbe 	bl	8001d64 <__clzsi2>
 80013e8:	0003      	movs	r3, r0
 80013ea:	001a      	movs	r2, r3
 80013ec:	3215      	adds	r2, #21
 80013ee:	3020      	adds	r0, #32
 80013f0:	2a1c      	cmp	r2, #28
 80013f2:	dc00      	bgt.n	80013f6 <__aeabi_dmul+0x47a>
 80013f4:	e71e      	b.n	8001234 <__aeabi_dmul+0x2b8>
 80013f6:	4656      	mov	r6, sl
 80013f8:	3b08      	subs	r3, #8
 80013fa:	2200      	movs	r2, #0
 80013fc:	409e      	lsls	r6, r3
 80013fe:	e723      	b.n	8001248 <__aeabi_dmul+0x2cc>
 8001400:	9b00      	ldr	r3, [sp, #0]
 8001402:	469c      	mov	ip, r3
 8001404:	e6e6      	b.n	80011d4 <__aeabi_dmul+0x258>
 8001406:	4912      	ldr	r1, [pc, #72]	; (8001450 <__aeabi_dmul+0x4d4>)
 8001408:	0022      	movs	r2, r4
 800140a:	4461      	add	r1, ip
 800140c:	002e      	movs	r6, r5
 800140e:	408d      	lsls	r5, r1
 8001410:	408a      	lsls	r2, r1
 8001412:	40c6      	lsrs	r6, r0
 8001414:	1e69      	subs	r1, r5, #1
 8001416:	418d      	sbcs	r5, r1
 8001418:	4332      	orrs	r2, r6
 800141a:	432a      	orrs	r2, r5
 800141c:	40c4      	lsrs	r4, r0
 800141e:	0753      	lsls	r3, r2, #29
 8001420:	d0b6      	beq.n	8001390 <__aeabi_dmul+0x414>
 8001422:	210f      	movs	r1, #15
 8001424:	4011      	ands	r1, r2
 8001426:	2904      	cmp	r1, #4
 8001428:	d1ac      	bne.n	8001384 <__aeabi_dmul+0x408>
 800142a:	e7b1      	b.n	8001390 <__aeabi_dmul+0x414>
 800142c:	0765      	lsls	r5, r4, #29
 800142e:	0264      	lsls	r4, r4, #9
 8001430:	0b24      	lsrs	r4, r4, #12
 8001432:	08d2      	lsrs	r2, r2, #3
 8001434:	4315      	orrs	r5, r2
 8001436:	2200      	movs	r2, #0
 8001438:	e601      	b.n	800103e <__aeabi_dmul+0xc2>
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	0312      	lsls	r2, r2, #12
 800143e:	4314      	orrs	r4, r2
 8001440:	0324      	lsls	r4, r4, #12
 8001442:	4a01      	ldr	r2, [pc, #4]	; (8001448 <__aeabi_dmul+0x4cc>)
 8001444:	0b24      	lsrs	r4, r4, #12
 8001446:	e5fa      	b.n	800103e <__aeabi_dmul+0xc2>
 8001448:	000007ff 	.word	0x000007ff
 800144c:	0000043e 	.word	0x0000043e
 8001450:	0000041e 	.word	0x0000041e

08001454 <__aeabi_dsub>:
 8001454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001456:	4657      	mov	r7, sl
 8001458:	464e      	mov	r6, r9
 800145a:	4645      	mov	r5, r8
 800145c:	46de      	mov	lr, fp
 800145e:	b5e0      	push	{r5, r6, r7, lr}
 8001460:	001e      	movs	r6, r3
 8001462:	0017      	movs	r7, r2
 8001464:	004a      	lsls	r2, r1, #1
 8001466:	030b      	lsls	r3, r1, #12
 8001468:	0d52      	lsrs	r2, r2, #21
 800146a:	0a5b      	lsrs	r3, r3, #9
 800146c:	4690      	mov	r8, r2
 800146e:	0f42      	lsrs	r2, r0, #29
 8001470:	431a      	orrs	r2, r3
 8001472:	0fcd      	lsrs	r5, r1, #31
 8001474:	4ccd      	ldr	r4, [pc, #820]	; (80017ac <__aeabi_dsub+0x358>)
 8001476:	0331      	lsls	r1, r6, #12
 8001478:	00c3      	lsls	r3, r0, #3
 800147a:	4694      	mov	ip, r2
 800147c:	0070      	lsls	r0, r6, #1
 800147e:	0f7a      	lsrs	r2, r7, #29
 8001480:	0a49      	lsrs	r1, r1, #9
 8001482:	00ff      	lsls	r7, r7, #3
 8001484:	469a      	mov	sl, r3
 8001486:	46b9      	mov	r9, r7
 8001488:	0d40      	lsrs	r0, r0, #21
 800148a:	0ff6      	lsrs	r6, r6, #31
 800148c:	4311      	orrs	r1, r2
 800148e:	42a0      	cmp	r0, r4
 8001490:	d100      	bne.n	8001494 <__aeabi_dsub+0x40>
 8001492:	e0b1      	b.n	80015f8 <__aeabi_dsub+0x1a4>
 8001494:	2201      	movs	r2, #1
 8001496:	4056      	eors	r6, r2
 8001498:	46b3      	mov	fp, r6
 800149a:	42b5      	cmp	r5, r6
 800149c:	d100      	bne.n	80014a0 <__aeabi_dsub+0x4c>
 800149e:	e088      	b.n	80015b2 <__aeabi_dsub+0x15e>
 80014a0:	4642      	mov	r2, r8
 80014a2:	1a12      	subs	r2, r2, r0
 80014a4:	2a00      	cmp	r2, #0
 80014a6:	dc00      	bgt.n	80014aa <__aeabi_dsub+0x56>
 80014a8:	e0ae      	b.n	8001608 <__aeabi_dsub+0x1b4>
 80014aa:	2800      	cmp	r0, #0
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dsub+0x5c>
 80014ae:	e0c1      	b.n	8001634 <__aeabi_dsub+0x1e0>
 80014b0:	48be      	ldr	r0, [pc, #760]	; (80017ac <__aeabi_dsub+0x358>)
 80014b2:	4580      	cmp	r8, r0
 80014b4:	d100      	bne.n	80014b8 <__aeabi_dsub+0x64>
 80014b6:	e151      	b.n	800175c <__aeabi_dsub+0x308>
 80014b8:	2080      	movs	r0, #128	; 0x80
 80014ba:	0400      	lsls	r0, r0, #16
 80014bc:	4301      	orrs	r1, r0
 80014be:	2a38      	cmp	r2, #56	; 0x38
 80014c0:	dd00      	ble.n	80014c4 <__aeabi_dsub+0x70>
 80014c2:	e17b      	b.n	80017bc <__aeabi_dsub+0x368>
 80014c4:	2a1f      	cmp	r2, #31
 80014c6:	dd00      	ble.n	80014ca <__aeabi_dsub+0x76>
 80014c8:	e1ee      	b.n	80018a8 <__aeabi_dsub+0x454>
 80014ca:	2020      	movs	r0, #32
 80014cc:	003e      	movs	r6, r7
 80014ce:	1a80      	subs	r0, r0, r2
 80014d0:	000c      	movs	r4, r1
 80014d2:	40d6      	lsrs	r6, r2
 80014d4:	40d1      	lsrs	r1, r2
 80014d6:	4087      	lsls	r7, r0
 80014d8:	4662      	mov	r2, ip
 80014da:	4084      	lsls	r4, r0
 80014dc:	1a52      	subs	r2, r2, r1
 80014de:	1e78      	subs	r0, r7, #1
 80014e0:	4187      	sbcs	r7, r0
 80014e2:	4694      	mov	ip, r2
 80014e4:	4334      	orrs	r4, r6
 80014e6:	4327      	orrs	r7, r4
 80014e8:	1bdc      	subs	r4, r3, r7
 80014ea:	42a3      	cmp	r3, r4
 80014ec:	419b      	sbcs	r3, r3
 80014ee:	4662      	mov	r2, ip
 80014f0:	425b      	negs	r3, r3
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	4699      	mov	r9, r3
 80014f6:	464b      	mov	r3, r9
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	d400      	bmi.n	80014fe <__aeabi_dsub+0xaa>
 80014fc:	e118      	b.n	8001730 <__aeabi_dsub+0x2dc>
 80014fe:	464b      	mov	r3, r9
 8001500:	0258      	lsls	r0, r3, #9
 8001502:	0a43      	lsrs	r3, r0, #9
 8001504:	4699      	mov	r9, r3
 8001506:	464b      	mov	r3, r9
 8001508:	2b00      	cmp	r3, #0
 800150a:	d100      	bne.n	800150e <__aeabi_dsub+0xba>
 800150c:	e137      	b.n	800177e <__aeabi_dsub+0x32a>
 800150e:	4648      	mov	r0, r9
 8001510:	f000 fc28 	bl	8001d64 <__clzsi2>
 8001514:	0001      	movs	r1, r0
 8001516:	3908      	subs	r1, #8
 8001518:	2320      	movs	r3, #32
 800151a:	0022      	movs	r2, r4
 800151c:	4648      	mov	r0, r9
 800151e:	1a5b      	subs	r3, r3, r1
 8001520:	40da      	lsrs	r2, r3
 8001522:	4088      	lsls	r0, r1
 8001524:	408c      	lsls	r4, r1
 8001526:	4643      	mov	r3, r8
 8001528:	4310      	orrs	r0, r2
 800152a:	4588      	cmp	r8, r1
 800152c:	dd00      	ble.n	8001530 <__aeabi_dsub+0xdc>
 800152e:	e136      	b.n	800179e <__aeabi_dsub+0x34a>
 8001530:	1ac9      	subs	r1, r1, r3
 8001532:	1c4b      	adds	r3, r1, #1
 8001534:	2b1f      	cmp	r3, #31
 8001536:	dd00      	ble.n	800153a <__aeabi_dsub+0xe6>
 8001538:	e0ea      	b.n	8001710 <__aeabi_dsub+0x2bc>
 800153a:	2220      	movs	r2, #32
 800153c:	0026      	movs	r6, r4
 800153e:	1ad2      	subs	r2, r2, r3
 8001540:	0001      	movs	r1, r0
 8001542:	4094      	lsls	r4, r2
 8001544:	40de      	lsrs	r6, r3
 8001546:	40d8      	lsrs	r0, r3
 8001548:	2300      	movs	r3, #0
 800154a:	4091      	lsls	r1, r2
 800154c:	1e62      	subs	r2, r4, #1
 800154e:	4194      	sbcs	r4, r2
 8001550:	4681      	mov	r9, r0
 8001552:	4698      	mov	r8, r3
 8001554:	4331      	orrs	r1, r6
 8001556:	430c      	orrs	r4, r1
 8001558:	0763      	lsls	r3, r4, #29
 800155a:	d009      	beq.n	8001570 <__aeabi_dsub+0x11c>
 800155c:	230f      	movs	r3, #15
 800155e:	4023      	ands	r3, r4
 8001560:	2b04      	cmp	r3, #4
 8001562:	d005      	beq.n	8001570 <__aeabi_dsub+0x11c>
 8001564:	1d23      	adds	r3, r4, #4
 8001566:	42a3      	cmp	r3, r4
 8001568:	41a4      	sbcs	r4, r4
 800156a:	4264      	negs	r4, r4
 800156c:	44a1      	add	r9, r4
 800156e:	001c      	movs	r4, r3
 8001570:	464b      	mov	r3, r9
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	d400      	bmi.n	8001578 <__aeabi_dsub+0x124>
 8001576:	e0de      	b.n	8001736 <__aeabi_dsub+0x2e2>
 8001578:	4641      	mov	r1, r8
 800157a:	4b8c      	ldr	r3, [pc, #560]	; (80017ac <__aeabi_dsub+0x358>)
 800157c:	3101      	adds	r1, #1
 800157e:	4299      	cmp	r1, r3
 8001580:	d100      	bne.n	8001584 <__aeabi_dsub+0x130>
 8001582:	e0e7      	b.n	8001754 <__aeabi_dsub+0x300>
 8001584:	464b      	mov	r3, r9
 8001586:	488a      	ldr	r0, [pc, #552]	; (80017b0 <__aeabi_dsub+0x35c>)
 8001588:	08e4      	lsrs	r4, r4, #3
 800158a:	4003      	ands	r3, r0
 800158c:	0018      	movs	r0, r3
 800158e:	0549      	lsls	r1, r1, #21
 8001590:	075b      	lsls	r3, r3, #29
 8001592:	0240      	lsls	r0, r0, #9
 8001594:	4323      	orrs	r3, r4
 8001596:	0d4a      	lsrs	r2, r1, #21
 8001598:	0b04      	lsrs	r4, r0, #12
 800159a:	0512      	lsls	r2, r2, #20
 800159c:	07ed      	lsls	r5, r5, #31
 800159e:	4322      	orrs	r2, r4
 80015a0:	432a      	orrs	r2, r5
 80015a2:	0018      	movs	r0, r3
 80015a4:	0011      	movs	r1, r2
 80015a6:	bcf0      	pop	{r4, r5, r6, r7}
 80015a8:	46bb      	mov	fp, r7
 80015aa:	46b2      	mov	sl, r6
 80015ac:	46a9      	mov	r9, r5
 80015ae:	46a0      	mov	r8, r4
 80015b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015b2:	4642      	mov	r2, r8
 80015b4:	1a12      	subs	r2, r2, r0
 80015b6:	2a00      	cmp	r2, #0
 80015b8:	dd52      	ble.n	8001660 <__aeabi_dsub+0x20c>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d100      	bne.n	80015c0 <__aeabi_dsub+0x16c>
 80015be:	e09c      	b.n	80016fa <__aeabi_dsub+0x2a6>
 80015c0:	45a0      	cmp	r8, r4
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dsub+0x172>
 80015c4:	e0ca      	b.n	800175c <__aeabi_dsub+0x308>
 80015c6:	2080      	movs	r0, #128	; 0x80
 80015c8:	0400      	lsls	r0, r0, #16
 80015ca:	4301      	orrs	r1, r0
 80015cc:	2a38      	cmp	r2, #56	; 0x38
 80015ce:	dd00      	ble.n	80015d2 <__aeabi_dsub+0x17e>
 80015d0:	e149      	b.n	8001866 <__aeabi_dsub+0x412>
 80015d2:	2a1f      	cmp	r2, #31
 80015d4:	dc00      	bgt.n	80015d8 <__aeabi_dsub+0x184>
 80015d6:	e197      	b.n	8001908 <__aeabi_dsub+0x4b4>
 80015d8:	0010      	movs	r0, r2
 80015da:	000e      	movs	r6, r1
 80015dc:	3820      	subs	r0, #32
 80015de:	40c6      	lsrs	r6, r0
 80015e0:	2a20      	cmp	r2, #32
 80015e2:	d004      	beq.n	80015ee <__aeabi_dsub+0x19a>
 80015e4:	2040      	movs	r0, #64	; 0x40
 80015e6:	1a82      	subs	r2, r0, r2
 80015e8:	4091      	lsls	r1, r2
 80015ea:	430f      	orrs	r7, r1
 80015ec:	46b9      	mov	r9, r7
 80015ee:	464c      	mov	r4, r9
 80015f0:	1e62      	subs	r2, r4, #1
 80015f2:	4194      	sbcs	r4, r2
 80015f4:	4334      	orrs	r4, r6
 80015f6:	e13a      	b.n	800186e <__aeabi_dsub+0x41a>
 80015f8:	000a      	movs	r2, r1
 80015fa:	433a      	orrs	r2, r7
 80015fc:	d028      	beq.n	8001650 <__aeabi_dsub+0x1fc>
 80015fe:	46b3      	mov	fp, r6
 8001600:	42b5      	cmp	r5, r6
 8001602:	d02b      	beq.n	800165c <__aeabi_dsub+0x208>
 8001604:	4a6b      	ldr	r2, [pc, #428]	; (80017b4 <__aeabi_dsub+0x360>)
 8001606:	4442      	add	r2, r8
 8001608:	2a00      	cmp	r2, #0
 800160a:	d05d      	beq.n	80016c8 <__aeabi_dsub+0x274>
 800160c:	4642      	mov	r2, r8
 800160e:	4644      	mov	r4, r8
 8001610:	1a82      	subs	r2, r0, r2
 8001612:	2c00      	cmp	r4, #0
 8001614:	d000      	beq.n	8001618 <__aeabi_dsub+0x1c4>
 8001616:	e0f5      	b.n	8001804 <__aeabi_dsub+0x3b0>
 8001618:	4665      	mov	r5, ip
 800161a:	431d      	orrs	r5, r3
 800161c:	d100      	bne.n	8001620 <__aeabi_dsub+0x1cc>
 800161e:	e19c      	b.n	800195a <__aeabi_dsub+0x506>
 8001620:	1e55      	subs	r5, r2, #1
 8001622:	2a01      	cmp	r2, #1
 8001624:	d100      	bne.n	8001628 <__aeabi_dsub+0x1d4>
 8001626:	e1fb      	b.n	8001a20 <__aeabi_dsub+0x5cc>
 8001628:	4c60      	ldr	r4, [pc, #384]	; (80017ac <__aeabi_dsub+0x358>)
 800162a:	42a2      	cmp	r2, r4
 800162c:	d100      	bne.n	8001630 <__aeabi_dsub+0x1dc>
 800162e:	e1bd      	b.n	80019ac <__aeabi_dsub+0x558>
 8001630:	002a      	movs	r2, r5
 8001632:	e0f0      	b.n	8001816 <__aeabi_dsub+0x3c2>
 8001634:	0008      	movs	r0, r1
 8001636:	4338      	orrs	r0, r7
 8001638:	d100      	bne.n	800163c <__aeabi_dsub+0x1e8>
 800163a:	e0c3      	b.n	80017c4 <__aeabi_dsub+0x370>
 800163c:	1e50      	subs	r0, r2, #1
 800163e:	2a01      	cmp	r2, #1
 8001640:	d100      	bne.n	8001644 <__aeabi_dsub+0x1f0>
 8001642:	e1a8      	b.n	8001996 <__aeabi_dsub+0x542>
 8001644:	4c59      	ldr	r4, [pc, #356]	; (80017ac <__aeabi_dsub+0x358>)
 8001646:	42a2      	cmp	r2, r4
 8001648:	d100      	bne.n	800164c <__aeabi_dsub+0x1f8>
 800164a:	e087      	b.n	800175c <__aeabi_dsub+0x308>
 800164c:	0002      	movs	r2, r0
 800164e:	e736      	b.n	80014be <__aeabi_dsub+0x6a>
 8001650:	2201      	movs	r2, #1
 8001652:	4056      	eors	r6, r2
 8001654:	46b3      	mov	fp, r6
 8001656:	42b5      	cmp	r5, r6
 8001658:	d000      	beq.n	800165c <__aeabi_dsub+0x208>
 800165a:	e721      	b.n	80014a0 <__aeabi_dsub+0x4c>
 800165c:	4a55      	ldr	r2, [pc, #340]	; (80017b4 <__aeabi_dsub+0x360>)
 800165e:	4442      	add	r2, r8
 8001660:	2a00      	cmp	r2, #0
 8001662:	d100      	bne.n	8001666 <__aeabi_dsub+0x212>
 8001664:	e0b5      	b.n	80017d2 <__aeabi_dsub+0x37e>
 8001666:	4642      	mov	r2, r8
 8001668:	4644      	mov	r4, r8
 800166a:	1a82      	subs	r2, r0, r2
 800166c:	2c00      	cmp	r4, #0
 800166e:	d100      	bne.n	8001672 <__aeabi_dsub+0x21e>
 8001670:	e138      	b.n	80018e4 <__aeabi_dsub+0x490>
 8001672:	4e4e      	ldr	r6, [pc, #312]	; (80017ac <__aeabi_dsub+0x358>)
 8001674:	42b0      	cmp	r0, r6
 8001676:	d100      	bne.n	800167a <__aeabi_dsub+0x226>
 8001678:	e1de      	b.n	8001a38 <__aeabi_dsub+0x5e4>
 800167a:	2680      	movs	r6, #128	; 0x80
 800167c:	4664      	mov	r4, ip
 800167e:	0436      	lsls	r6, r6, #16
 8001680:	4334      	orrs	r4, r6
 8001682:	46a4      	mov	ip, r4
 8001684:	2a38      	cmp	r2, #56	; 0x38
 8001686:	dd00      	ble.n	800168a <__aeabi_dsub+0x236>
 8001688:	e196      	b.n	80019b8 <__aeabi_dsub+0x564>
 800168a:	2a1f      	cmp	r2, #31
 800168c:	dd00      	ble.n	8001690 <__aeabi_dsub+0x23c>
 800168e:	e224      	b.n	8001ada <__aeabi_dsub+0x686>
 8001690:	2620      	movs	r6, #32
 8001692:	1ab4      	subs	r4, r6, r2
 8001694:	46a2      	mov	sl, r4
 8001696:	4664      	mov	r4, ip
 8001698:	4656      	mov	r6, sl
 800169a:	40b4      	lsls	r4, r6
 800169c:	46a1      	mov	r9, r4
 800169e:	001c      	movs	r4, r3
 80016a0:	464e      	mov	r6, r9
 80016a2:	40d4      	lsrs	r4, r2
 80016a4:	4326      	orrs	r6, r4
 80016a6:	0034      	movs	r4, r6
 80016a8:	4656      	mov	r6, sl
 80016aa:	40b3      	lsls	r3, r6
 80016ac:	1e5e      	subs	r6, r3, #1
 80016ae:	41b3      	sbcs	r3, r6
 80016b0:	431c      	orrs	r4, r3
 80016b2:	4663      	mov	r3, ip
 80016b4:	40d3      	lsrs	r3, r2
 80016b6:	18c9      	adds	r1, r1, r3
 80016b8:	19e4      	adds	r4, r4, r7
 80016ba:	42bc      	cmp	r4, r7
 80016bc:	41bf      	sbcs	r7, r7
 80016be:	427f      	negs	r7, r7
 80016c0:	46b9      	mov	r9, r7
 80016c2:	4680      	mov	r8, r0
 80016c4:	4489      	add	r9, r1
 80016c6:	e0d8      	b.n	800187a <__aeabi_dsub+0x426>
 80016c8:	4640      	mov	r0, r8
 80016ca:	4c3b      	ldr	r4, [pc, #236]	; (80017b8 <__aeabi_dsub+0x364>)
 80016cc:	3001      	adds	r0, #1
 80016ce:	4220      	tst	r0, r4
 80016d0:	d000      	beq.n	80016d4 <__aeabi_dsub+0x280>
 80016d2:	e0b4      	b.n	800183e <__aeabi_dsub+0x3ea>
 80016d4:	4640      	mov	r0, r8
 80016d6:	2800      	cmp	r0, #0
 80016d8:	d000      	beq.n	80016dc <__aeabi_dsub+0x288>
 80016da:	e144      	b.n	8001966 <__aeabi_dsub+0x512>
 80016dc:	4660      	mov	r0, ip
 80016de:	4318      	orrs	r0, r3
 80016e0:	d100      	bne.n	80016e4 <__aeabi_dsub+0x290>
 80016e2:	e190      	b.n	8001a06 <__aeabi_dsub+0x5b2>
 80016e4:	0008      	movs	r0, r1
 80016e6:	4338      	orrs	r0, r7
 80016e8:	d000      	beq.n	80016ec <__aeabi_dsub+0x298>
 80016ea:	e1aa      	b.n	8001a42 <__aeabi_dsub+0x5ee>
 80016ec:	4661      	mov	r1, ip
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	0749      	lsls	r1, r1, #29
 80016f2:	430b      	orrs	r3, r1
 80016f4:	4661      	mov	r1, ip
 80016f6:	08cc      	lsrs	r4, r1, #3
 80016f8:	e027      	b.n	800174a <__aeabi_dsub+0x2f6>
 80016fa:	0008      	movs	r0, r1
 80016fc:	4338      	orrs	r0, r7
 80016fe:	d061      	beq.n	80017c4 <__aeabi_dsub+0x370>
 8001700:	1e50      	subs	r0, r2, #1
 8001702:	2a01      	cmp	r2, #1
 8001704:	d100      	bne.n	8001708 <__aeabi_dsub+0x2b4>
 8001706:	e139      	b.n	800197c <__aeabi_dsub+0x528>
 8001708:	42a2      	cmp	r2, r4
 800170a:	d027      	beq.n	800175c <__aeabi_dsub+0x308>
 800170c:	0002      	movs	r2, r0
 800170e:	e75d      	b.n	80015cc <__aeabi_dsub+0x178>
 8001710:	0002      	movs	r2, r0
 8001712:	391f      	subs	r1, #31
 8001714:	40ca      	lsrs	r2, r1
 8001716:	0011      	movs	r1, r2
 8001718:	2b20      	cmp	r3, #32
 800171a:	d003      	beq.n	8001724 <__aeabi_dsub+0x2d0>
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	4098      	lsls	r0, r3
 8001722:	4304      	orrs	r4, r0
 8001724:	1e63      	subs	r3, r4, #1
 8001726:	419c      	sbcs	r4, r3
 8001728:	2300      	movs	r3, #0
 800172a:	4699      	mov	r9, r3
 800172c:	4698      	mov	r8, r3
 800172e:	430c      	orrs	r4, r1
 8001730:	0763      	lsls	r3, r4, #29
 8001732:	d000      	beq.n	8001736 <__aeabi_dsub+0x2e2>
 8001734:	e712      	b.n	800155c <__aeabi_dsub+0x108>
 8001736:	464b      	mov	r3, r9
 8001738:	464a      	mov	r2, r9
 800173a:	08e4      	lsrs	r4, r4, #3
 800173c:	075b      	lsls	r3, r3, #29
 800173e:	4323      	orrs	r3, r4
 8001740:	08d4      	lsrs	r4, r2, #3
 8001742:	4642      	mov	r2, r8
 8001744:	4919      	ldr	r1, [pc, #100]	; (80017ac <__aeabi_dsub+0x358>)
 8001746:	428a      	cmp	r2, r1
 8001748:	d00e      	beq.n	8001768 <__aeabi_dsub+0x314>
 800174a:	0324      	lsls	r4, r4, #12
 800174c:	0552      	lsls	r2, r2, #21
 800174e:	0b24      	lsrs	r4, r4, #12
 8001750:	0d52      	lsrs	r2, r2, #21
 8001752:	e722      	b.n	800159a <__aeabi_dsub+0x146>
 8001754:	000a      	movs	r2, r1
 8001756:	2400      	movs	r4, #0
 8001758:	2300      	movs	r3, #0
 800175a:	e71e      	b.n	800159a <__aeabi_dsub+0x146>
 800175c:	08db      	lsrs	r3, r3, #3
 800175e:	4662      	mov	r2, ip
 8001760:	0752      	lsls	r2, r2, #29
 8001762:	4313      	orrs	r3, r2
 8001764:	4662      	mov	r2, ip
 8001766:	08d4      	lsrs	r4, r2, #3
 8001768:	001a      	movs	r2, r3
 800176a:	4322      	orrs	r2, r4
 800176c:	d100      	bne.n	8001770 <__aeabi_dsub+0x31c>
 800176e:	e1fc      	b.n	8001b6a <__aeabi_dsub+0x716>
 8001770:	2280      	movs	r2, #128	; 0x80
 8001772:	0312      	lsls	r2, r2, #12
 8001774:	4314      	orrs	r4, r2
 8001776:	0324      	lsls	r4, r4, #12
 8001778:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <__aeabi_dsub+0x358>)
 800177a:	0b24      	lsrs	r4, r4, #12
 800177c:	e70d      	b.n	800159a <__aeabi_dsub+0x146>
 800177e:	0020      	movs	r0, r4
 8001780:	f000 faf0 	bl	8001d64 <__clzsi2>
 8001784:	0001      	movs	r1, r0
 8001786:	3118      	adds	r1, #24
 8001788:	291f      	cmp	r1, #31
 800178a:	dc00      	bgt.n	800178e <__aeabi_dsub+0x33a>
 800178c:	e6c4      	b.n	8001518 <__aeabi_dsub+0xc4>
 800178e:	3808      	subs	r0, #8
 8001790:	4084      	lsls	r4, r0
 8001792:	4643      	mov	r3, r8
 8001794:	0020      	movs	r0, r4
 8001796:	2400      	movs	r4, #0
 8001798:	4588      	cmp	r8, r1
 800179a:	dc00      	bgt.n	800179e <__aeabi_dsub+0x34a>
 800179c:	e6c8      	b.n	8001530 <__aeabi_dsub+0xdc>
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <__aeabi_dsub+0x35c>)
 80017a0:	1a5b      	subs	r3, r3, r1
 80017a2:	4010      	ands	r0, r2
 80017a4:	4698      	mov	r8, r3
 80017a6:	4681      	mov	r9, r0
 80017a8:	e6d6      	b.n	8001558 <__aeabi_dsub+0x104>
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	000007ff 	.word	0x000007ff
 80017b0:	ff7fffff 	.word	0xff7fffff
 80017b4:	fffff801 	.word	0xfffff801
 80017b8:	000007fe 	.word	0x000007fe
 80017bc:	430f      	orrs	r7, r1
 80017be:	1e7a      	subs	r2, r7, #1
 80017c0:	4197      	sbcs	r7, r2
 80017c2:	e691      	b.n	80014e8 <__aeabi_dsub+0x94>
 80017c4:	4661      	mov	r1, ip
 80017c6:	08db      	lsrs	r3, r3, #3
 80017c8:	0749      	lsls	r1, r1, #29
 80017ca:	430b      	orrs	r3, r1
 80017cc:	4661      	mov	r1, ip
 80017ce:	08cc      	lsrs	r4, r1, #3
 80017d0:	e7b8      	b.n	8001744 <__aeabi_dsub+0x2f0>
 80017d2:	4640      	mov	r0, r8
 80017d4:	4cd3      	ldr	r4, [pc, #844]	; (8001b24 <__aeabi_dsub+0x6d0>)
 80017d6:	3001      	adds	r0, #1
 80017d8:	4220      	tst	r0, r4
 80017da:	d000      	beq.n	80017de <__aeabi_dsub+0x38a>
 80017dc:	e0a2      	b.n	8001924 <__aeabi_dsub+0x4d0>
 80017de:	4640      	mov	r0, r8
 80017e0:	2800      	cmp	r0, #0
 80017e2:	d000      	beq.n	80017e6 <__aeabi_dsub+0x392>
 80017e4:	e101      	b.n	80019ea <__aeabi_dsub+0x596>
 80017e6:	4660      	mov	r0, ip
 80017e8:	4318      	orrs	r0, r3
 80017ea:	d100      	bne.n	80017ee <__aeabi_dsub+0x39a>
 80017ec:	e15e      	b.n	8001aac <__aeabi_dsub+0x658>
 80017ee:	0008      	movs	r0, r1
 80017f0:	4338      	orrs	r0, r7
 80017f2:	d000      	beq.n	80017f6 <__aeabi_dsub+0x3a2>
 80017f4:	e15f      	b.n	8001ab6 <__aeabi_dsub+0x662>
 80017f6:	4661      	mov	r1, ip
 80017f8:	08db      	lsrs	r3, r3, #3
 80017fa:	0749      	lsls	r1, r1, #29
 80017fc:	430b      	orrs	r3, r1
 80017fe:	4661      	mov	r1, ip
 8001800:	08cc      	lsrs	r4, r1, #3
 8001802:	e7a2      	b.n	800174a <__aeabi_dsub+0x2f6>
 8001804:	4dc8      	ldr	r5, [pc, #800]	; (8001b28 <__aeabi_dsub+0x6d4>)
 8001806:	42a8      	cmp	r0, r5
 8001808:	d100      	bne.n	800180c <__aeabi_dsub+0x3b8>
 800180a:	e0cf      	b.n	80019ac <__aeabi_dsub+0x558>
 800180c:	2580      	movs	r5, #128	; 0x80
 800180e:	4664      	mov	r4, ip
 8001810:	042d      	lsls	r5, r5, #16
 8001812:	432c      	orrs	r4, r5
 8001814:	46a4      	mov	ip, r4
 8001816:	2a38      	cmp	r2, #56	; 0x38
 8001818:	dc56      	bgt.n	80018c8 <__aeabi_dsub+0x474>
 800181a:	2a1f      	cmp	r2, #31
 800181c:	dd00      	ble.n	8001820 <__aeabi_dsub+0x3cc>
 800181e:	e0d1      	b.n	80019c4 <__aeabi_dsub+0x570>
 8001820:	2520      	movs	r5, #32
 8001822:	001e      	movs	r6, r3
 8001824:	1aad      	subs	r5, r5, r2
 8001826:	4664      	mov	r4, ip
 8001828:	40ab      	lsls	r3, r5
 800182a:	40ac      	lsls	r4, r5
 800182c:	40d6      	lsrs	r6, r2
 800182e:	1e5d      	subs	r5, r3, #1
 8001830:	41ab      	sbcs	r3, r5
 8001832:	4334      	orrs	r4, r6
 8001834:	4323      	orrs	r3, r4
 8001836:	4664      	mov	r4, ip
 8001838:	40d4      	lsrs	r4, r2
 800183a:	1b09      	subs	r1, r1, r4
 800183c:	e049      	b.n	80018d2 <__aeabi_dsub+0x47e>
 800183e:	4660      	mov	r0, ip
 8001840:	1bdc      	subs	r4, r3, r7
 8001842:	1a46      	subs	r6, r0, r1
 8001844:	42a3      	cmp	r3, r4
 8001846:	4180      	sbcs	r0, r0
 8001848:	4240      	negs	r0, r0
 800184a:	4681      	mov	r9, r0
 800184c:	0030      	movs	r0, r6
 800184e:	464e      	mov	r6, r9
 8001850:	1b80      	subs	r0, r0, r6
 8001852:	4681      	mov	r9, r0
 8001854:	0200      	lsls	r0, r0, #8
 8001856:	d476      	bmi.n	8001946 <__aeabi_dsub+0x4f2>
 8001858:	464b      	mov	r3, r9
 800185a:	4323      	orrs	r3, r4
 800185c:	d000      	beq.n	8001860 <__aeabi_dsub+0x40c>
 800185e:	e652      	b.n	8001506 <__aeabi_dsub+0xb2>
 8001860:	2400      	movs	r4, #0
 8001862:	2500      	movs	r5, #0
 8001864:	e771      	b.n	800174a <__aeabi_dsub+0x2f6>
 8001866:	4339      	orrs	r1, r7
 8001868:	000c      	movs	r4, r1
 800186a:	1e62      	subs	r2, r4, #1
 800186c:	4194      	sbcs	r4, r2
 800186e:	18e4      	adds	r4, r4, r3
 8001870:	429c      	cmp	r4, r3
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	4463      	add	r3, ip
 8001878:	4699      	mov	r9, r3
 800187a:	464b      	mov	r3, r9
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	d400      	bmi.n	8001882 <__aeabi_dsub+0x42e>
 8001880:	e756      	b.n	8001730 <__aeabi_dsub+0x2dc>
 8001882:	2301      	movs	r3, #1
 8001884:	469c      	mov	ip, r3
 8001886:	4ba8      	ldr	r3, [pc, #672]	; (8001b28 <__aeabi_dsub+0x6d4>)
 8001888:	44e0      	add	r8, ip
 800188a:	4598      	cmp	r8, r3
 800188c:	d038      	beq.n	8001900 <__aeabi_dsub+0x4ac>
 800188e:	464b      	mov	r3, r9
 8001890:	48a6      	ldr	r0, [pc, #664]	; (8001b2c <__aeabi_dsub+0x6d8>)
 8001892:	2201      	movs	r2, #1
 8001894:	4003      	ands	r3, r0
 8001896:	0018      	movs	r0, r3
 8001898:	0863      	lsrs	r3, r4, #1
 800189a:	4014      	ands	r4, r2
 800189c:	431c      	orrs	r4, r3
 800189e:	07c3      	lsls	r3, r0, #31
 80018a0:	431c      	orrs	r4, r3
 80018a2:	0843      	lsrs	r3, r0, #1
 80018a4:	4699      	mov	r9, r3
 80018a6:	e657      	b.n	8001558 <__aeabi_dsub+0x104>
 80018a8:	0010      	movs	r0, r2
 80018aa:	000e      	movs	r6, r1
 80018ac:	3820      	subs	r0, #32
 80018ae:	40c6      	lsrs	r6, r0
 80018b0:	2a20      	cmp	r2, #32
 80018b2:	d004      	beq.n	80018be <__aeabi_dsub+0x46a>
 80018b4:	2040      	movs	r0, #64	; 0x40
 80018b6:	1a82      	subs	r2, r0, r2
 80018b8:	4091      	lsls	r1, r2
 80018ba:	430f      	orrs	r7, r1
 80018bc:	46b9      	mov	r9, r7
 80018be:	464f      	mov	r7, r9
 80018c0:	1e7a      	subs	r2, r7, #1
 80018c2:	4197      	sbcs	r7, r2
 80018c4:	4337      	orrs	r7, r6
 80018c6:	e60f      	b.n	80014e8 <__aeabi_dsub+0x94>
 80018c8:	4662      	mov	r2, ip
 80018ca:	431a      	orrs	r2, r3
 80018cc:	0013      	movs	r3, r2
 80018ce:	1e5a      	subs	r2, r3, #1
 80018d0:	4193      	sbcs	r3, r2
 80018d2:	1afc      	subs	r4, r7, r3
 80018d4:	42a7      	cmp	r7, r4
 80018d6:	41bf      	sbcs	r7, r7
 80018d8:	427f      	negs	r7, r7
 80018da:	1bcb      	subs	r3, r1, r7
 80018dc:	4699      	mov	r9, r3
 80018de:	465d      	mov	r5, fp
 80018e0:	4680      	mov	r8, r0
 80018e2:	e608      	b.n	80014f6 <__aeabi_dsub+0xa2>
 80018e4:	4666      	mov	r6, ip
 80018e6:	431e      	orrs	r6, r3
 80018e8:	d100      	bne.n	80018ec <__aeabi_dsub+0x498>
 80018ea:	e0be      	b.n	8001a6a <__aeabi_dsub+0x616>
 80018ec:	1e56      	subs	r6, r2, #1
 80018ee:	2a01      	cmp	r2, #1
 80018f0:	d100      	bne.n	80018f4 <__aeabi_dsub+0x4a0>
 80018f2:	e109      	b.n	8001b08 <__aeabi_dsub+0x6b4>
 80018f4:	4c8c      	ldr	r4, [pc, #560]	; (8001b28 <__aeabi_dsub+0x6d4>)
 80018f6:	42a2      	cmp	r2, r4
 80018f8:	d100      	bne.n	80018fc <__aeabi_dsub+0x4a8>
 80018fa:	e119      	b.n	8001b30 <__aeabi_dsub+0x6dc>
 80018fc:	0032      	movs	r2, r6
 80018fe:	e6c1      	b.n	8001684 <__aeabi_dsub+0x230>
 8001900:	4642      	mov	r2, r8
 8001902:	2400      	movs	r4, #0
 8001904:	2300      	movs	r3, #0
 8001906:	e648      	b.n	800159a <__aeabi_dsub+0x146>
 8001908:	2020      	movs	r0, #32
 800190a:	000c      	movs	r4, r1
 800190c:	1a80      	subs	r0, r0, r2
 800190e:	003e      	movs	r6, r7
 8001910:	4087      	lsls	r7, r0
 8001912:	4084      	lsls	r4, r0
 8001914:	40d6      	lsrs	r6, r2
 8001916:	1e78      	subs	r0, r7, #1
 8001918:	4187      	sbcs	r7, r0
 800191a:	40d1      	lsrs	r1, r2
 800191c:	4334      	orrs	r4, r6
 800191e:	433c      	orrs	r4, r7
 8001920:	448c      	add	ip, r1
 8001922:	e7a4      	b.n	800186e <__aeabi_dsub+0x41a>
 8001924:	4a80      	ldr	r2, [pc, #512]	; (8001b28 <__aeabi_dsub+0x6d4>)
 8001926:	4290      	cmp	r0, r2
 8001928:	d100      	bne.n	800192c <__aeabi_dsub+0x4d8>
 800192a:	e0e9      	b.n	8001b00 <__aeabi_dsub+0x6ac>
 800192c:	19df      	adds	r7, r3, r7
 800192e:	429f      	cmp	r7, r3
 8001930:	419b      	sbcs	r3, r3
 8001932:	4461      	add	r1, ip
 8001934:	425b      	negs	r3, r3
 8001936:	18c9      	adds	r1, r1, r3
 8001938:	07cc      	lsls	r4, r1, #31
 800193a:	087f      	lsrs	r7, r7, #1
 800193c:	084b      	lsrs	r3, r1, #1
 800193e:	4699      	mov	r9, r3
 8001940:	4680      	mov	r8, r0
 8001942:	433c      	orrs	r4, r7
 8001944:	e6f4      	b.n	8001730 <__aeabi_dsub+0x2dc>
 8001946:	1afc      	subs	r4, r7, r3
 8001948:	42a7      	cmp	r7, r4
 800194a:	41bf      	sbcs	r7, r7
 800194c:	4663      	mov	r3, ip
 800194e:	427f      	negs	r7, r7
 8001950:	1ac9      	subs	r1, r1, r3
 8001952:	1bcb      	subs	r3, r1, r7
 8001954:	4699      	mov	r9, r3
 8001956:	465d      	mov	r5, fp
 8001958:	e5d5      	b.n	8001506 <__aeabi_dsub+0xb2>
 800195a:	08ff      	lsrs	r7, r7, #3
 800195c:	074b      	lsls	r3, r1, #29
 800195e:	465d      	mov	r5, fp
 8001960:	433b      	orrs	r3, r7
 8001962:	08cc      	lsrs	r4, r1, #3
 8001964:	e6ee      	b.n	8001744 <__aeabi_dsub+0x2f0>
 8001966:	4662      	mov	r2, ip
 8001968:	431a      	orrs	r2, r3
 800196a:	d000      	beq.n	800196e <__aeabi_dsub+0x51a>
 800196c:	e082      	b.n	8001a74 <__aeabi_dsub+0x620>
 800196e:	000b      	movs	r3, r1
 8001970:	433b      	orrs	r3, r7
 8001972:	d11b      	bne.n	80019ac <__aeabi_dsub+0x558>
 8001974:	2480      	movs	r4, #128	; 0x80
 8001976:	2500      	movs	r5, #0
 8001978:	0324      	lsls	r4, r4, #12
 800197a:	e6f9      	b.n	8001770 <__aeabi_dsub+0x31c>
 800197c:	19dc      	adds	r4, r3, r7
 800197e:	429c      	cmp	r4, r3
 8001980:	419b      	sbcs	r3, r3
 8001982:	4461      	add	r1, ip
 8001984:	4689      	mov	r9, r1
 8001986:	425b      	negs	r3, r3
 8001988:	4499      	add	r9, r3
 800198a:	464b      	mov	r3, r9
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	d444      	bmi.n	8001a1a <__aeabi_dsub+0x5c6>
 8001990:	2301      	movs	r3, #1
 8001992:	4698      	mov	r8, r3
 8001994:	e6cc      	b.n	8001730 <__aeabi_dsub+0x2dc>
 8001996:	1bdc      	subs	r4, r3, r7
 8001998:	4662      	mov	r2, ip
 800199a:	42a3      	cmp	r3, r4
 800199c:	419b      	sbcs	r3, r3
 800199e:	1a51      	subs	r1, r2, r1
 80019a0:	425b      	negs	r3, r3
 80019a2:	1acb      	subs	r3, r1, r3
 80019a4:	4699      	mov	r9, r3
 80019a6:	2301      	movs	r3, #1
 80019a8:	4698      	mov	r8, r3
 80019aa:	e5a4      	b.n	80014f6 <__aeabi_dsub+0xa2>
 80019ac:	08ff      	lsrs	r7, r7, #3
 80019ae:	074b      	lsls	r3, r1, #29
 80019b0:	465d      	mov	r5, fp
 80019b2:	433b      	orrs	r3, r7
 80019b4:	08cc      	lsrs	r4, r1, #3
 80019b6:	e6d7      	b.n	8001768 <__aeabi_dsub+0x314>
 80019b8:	4662      	mov	r2, ip
 80019ba:	431a      	orrs	r2, r3
 80019bc:	0014      	movs	r4, r2
 80019be:	1e63      	subs	r3, r4, #1
 80019c0:	419c      	sbcs	r4, r3
 80019c2:	e679      	b.n	80016b8 <__aeabi_dsub+0x264>
 80019c4:	0015      	movs	r5, r2
 80019c6:	4664      	mov	r4, ip
 80019c8:	3d20      	subs	r5, #32
 80019ca:	40ec      	lsrs	r4, r5
 80019cc:	46a0      	mov	r8, r4
 80019ce:	2a20      	cmp	r2, #32
 80019d0:	d005      	beq.n	80019de <__aeabi_dsub+0x58a>
 80019d2:	2540      	movs	r5, #64	; 0x40
 80019d4:	4664      	mov	r4, ip
 80019d6:	1aaa      	subs	r2, r5, r2
 80019d8:	4094      	lsls	r4, r2
 80019da:	4323      	orrs	r3, r4
 80019dc:	469a      	mov	sl, r3
 80019de:	4654      	mov	r4, sl
 80019e0:	1e63      	subs	r3, r4, #1
 80019e2:	419c      	sbcs	r4, r3
 80019e4:	4643      	mov	r3, r8
 80019e6:	4323      	orrs	r3, r4
 80019e8:	e773      	b.n	80018d2 <__aeabi_dsub+0x47e>
 80019ea:	4662      	mov	r2, ip
 80019ec:	431a      	orrs	r2, r3
 80019ee:	d023      	beq.n	8001a38 <__aeabi_dsub+0x5e4>
 80019f0:	000a      	movs	r2, r1
 80019f2:	433a      	orrs	r2, r7
 80019f4:	d000      	beq.n	80019f8 <__aeabi_dsub+0x5a4>
 80019f6:	e0a0      	b.n	8001b3a <__aeabi_dsub+0x6e6>
 80019f8:	4662      	mov	r2, ip
 80019fa:	08db      	lsrs	r3, r3, #3
 80019fc:	0752      	lsls	r2, r2, #29
 80019fe:	4313      	orrs	r3, r2
 8001a00:	4662      	mov	r2, ip
 8001a02:	08d4      	lsrs	r4, r2, #3
 8001a04:	e6b0      	b.n	8001768 <__aeabi_dsub+0x314>
 8001a06:	000b      	movs	r3, r1
 8001a08:	433b      	orrs	r3, r7
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x5ba>
 8001a0c:	e728      	b.n	8001860 <__aeabi_dsub+0x40c>
 8001a0e:	08ff      	lsrs	r7, r7, #3
 8001a10:	074b      	lsls	r3, r1, #29
 8001a12:	465d      	mov	r5, fp
 8001a14:	433b      	orrs	r3, r7
 8001a16:	08cc      	lsrs	r4, r1, #3
 8001a18:	e697      	b.n	800174a <__aeabi_dsub+0x2f6>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	4698      	mov	r8, r3
 8001a1e:	e736      	b.n	800188e <__aeabi_dsub+0x43a>
 8001a20:	1afc      	subs	r4, r7, r3
 8001a22:	42a7      	cmp	r7, r4
 8001a24:	41bf      	sbcs	r7, r7
 8001a26:	4663      	mov	r3, ip
 8001a28:	427f      	negs	r7, r7
 8001a2a:	1ac9      	subs	r1, r1, r3
 8001a2c:	1bcb      	subs	r3, r1, r7
 8001a2e:	4699      	mov	r9, r3
 8001a30:	2301      	movs	r3, #1
 8001a32:	465d      	mov	r5, fp
 8001a34:	4698      	mov	r8, r3
 8001a36:	e55e      	b.n	80014f6 <__aeabi_dsub+0xa2>
 8001a38:	074b      	lsls	r3, r1, #29
 8001a3a:	08ff      	lsrs	r7, r7, #3
 8001a3c:	433b      	orrs	r3, r7
 8001a3e:	08cc      	lsrs	r4, r1, #3
 8001a40:	e692      	b.n	8001768 <__aeabi_dsub+0x314>
 8001a42:	1bdc      	subs	r4, r3, r7
 8001a44:	4660      	mov	r0, ip
 8001a46:	42a3      	cmp	r3, r4
 8001a48:	41b6      	sbcs	r6, r6
 8001a4a:	1a40      	subs	r0, r0, r1
 8001a4c:	4276      	negs	r6, r6
 8001a4e:	1b80      	subs	r0, r0, r6
 8001a50:	4681      	mov	r9, r0
 8001a52:	0200      	lsls	r0, r0, #8
 8001a54:	d560      	bpl.n	8001b18 <__aeabi_dsub+0x6c4>
 8001a56:	1afc      	subs	r4, r7, r3
 8001a58:	42a7      	cmp	r7, r4
 8001a5a:	41bf      	sbcs	r7, r7
 8001a5c:	4663      	mov	r3, ip
 8001a5e:	427f      	negs	r7, r7
 8001a60:	1ac9      	subs	r1, r1, r3
 8001a62:	1bcb      	subs	r3, r1, r7
 8001a64:	4699      	mov	r9, r3
 8001a66:	465d      	mov	r5, fp
 8001a68:	e576      	b.n	8001558 <__aeabi_dsub+0x104>
 8001a6a:	08ff      	lsrs	r7, r7, #3
 8001a6c:	074b      	lsls	r3, r1, #29
 8001a6e:	433b      	orrs	r3, r7
 8001a70:	08cc      	lsrs	r4, r1, #3
 8001a72:	e667      	b.n	8001744 <__aeabi_dsub+0x2f0>
 8001a74:	000a      	movs	r2, r1
 8001a76:	08db      	lsrs	r3, r3, #3
 8001a78:	433a      	orrs	r2, r7
 8001a7a:	d100      	bne.n	8001a7e <__aeabi_dsub+0x62a>
 8001a7c:	e66f      	b.n	800175e <__aeabi_dsub+0x30a>
 8001a7e:	4662      	mov	r2, ip
 8001a80:	0752      	lsls	r2, r2, #29
 8001a82:	4313      	orrs	r3, r2
 8001a84:	4662      	mov	r2, ip
 8001a86:	08d4      	lsrs	r4, r2, #3
 8001a88:	2280      	movs	r2, #128	; 0x80
 8001a8a:	0312      	lsls	r2, r2, #12
 8001a8c:	4214      	tst	r4, r2
 8001a8e:	d007      	beq.n	8001aa0 <__aeabi_dsub+0x64c>
 8001a90:	08c8      	lsrs	r0, r1, #3
 8001a92:	4210      	tst	r0, r2
 8001a94:	d104      	bne.n	8001aa0 <__aeabi_dsub+0x64c>
 8001a96:	465d      	mov	r5, fp
 8001a98:	0004      	movs	r4, r0
 8001a9a:	08fb      	lsrs	r3, r7, #3
 8001a9c:	0749      	lsls	r1, r1, #29
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	0f5a      	lsrs	r2, r3, #29
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	0752      	lsls	r2, r2, #29
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	e65d      	b.n	8001768 <__aeabi_dsub+0x314>
 8001aac:	074b      	lsls	r3, r1, #29
 8001aae:	08ff      	lsrs	r7, r7, #3
 8001ab0:	433b      	orrs	r3, r7
 8001ab2:	08cc      	lsrs	r4, r1, #3
 8001ab4:	e649      	b.n	800174a <__aeabi_dsub+0x2f6>
 8001ab6:	19dc      	adds	r4, r3, r7
 8001ab8:	429c      	cmp	r4, r3
 8001aba:	419b      	sbcs	r3, r3
 8001abc:	4461      	add	r1, ip
 8001abe:	4689      	mov	r9, r1
 8001ac0:	425b      	negs	r3, r3
 8001ac2:	4499      	add	r9, r3
 8001ac4:	464b      	mov	r3, r9
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	d400      	bmi.n	8001acc <__aeabi_dsub+0x678>
 8001aca:	e631      	b.n	8001730 <__aeabi_dsub+0x2dc>
 8001acc:	464a      	mov	r2, r9
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <__aeabi_dsub+0x6d8>)
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	4691      	mov	r9, r2
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	e62a      	b.n	8001730 <__aeabi_dsub+0x2dc>
 8001ada:	0016      	movs	r6, r2
 8001adc:	4664      	mov	r4, ip
 8001ade:	3e20      	subs	r6, #32
 8001ae0:	40f4      	lsrs	r4, r6
 8001ae2:	46a0      	mov	r8, r4
 8001ae4:	2a20      	cmp	r2, #32
 8001ae6:	d005      	beq.n	8001af4 <__aeabi_dsub+0x6a0>
 8001ae8:	2640      	movs	r6, #64	; 0x40
 8001aea:	4664      	mov	r4, ip
 8001aec:	1ab2      	subs	r2, r6, r2
 8001aee:	4094      	lsls	r4, r2
 8001af0:	4323      	orrs	r3, r4
 8001af2:	469a      	mov	sl, r3
 8001af4:	4654      	mov	r4, sl
 8001af6:	1e63      	subs	r3, r4, #1
 8001af8:	419c      	sbcs	r4, r3
 8001afa:	4643      	mov	r3, r8
 8001afc:	431c      	orrs	r4, r3
 8001afe:	e5db      	b.n	80016b8 <__aeabi_dsub+0x264>
 8001b00:	0002      	movs	r2, r0
 8001b02:	2400      	movs	r4, #0
 8001b04:	2300      	movs	r3, #0
 8001b06:	e548      	b.n	800159a <__aeabi_dsub+0x146>
 8001b08:	19dc      	adds	r4, r3, r7
 8001b0a:	42bc      	cmp	r4, r7
 8001b0c:	41bf      	sbcs	r7, r7
 8001b0e:	4461      	add	r1, ip
 8001b10:	4689      	mov	r9, r1
 8001b12:	427f      	negs	r7, r7
 8001b14:	44b9      	add	r9, r7
 8001b16:	e738      	b.n	800198a <__aeabi_dsub+0x536>
 8001b18:	464b      	mov	r3, r9
 8001b1a:	4323      	orrs	r3, r4
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dsub+0x6cc>
 8001b1e:	e69f      	b.n	8001860 <__aeabi_dsub+0x40c>
 8001b20:	e606      	b.n	8001730 <__aeabi_dsub+0x2dc>
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	000007fe 	.word	0x000007fe
 8001b28:	000007ff 	.word	0x000007ff
 8001b2c:	ff7fffff 	.word	0xff7fffff
 8001b30:	08ff      	lsrs	r7, r7, #3
 8001b32:	074b      	lsls	r3, r1, #29
 8001b34:	433b      	orrs	r3, r7
 8001b36:	08cc      	lsrs	r4, r1, #3
 8001b38:	e616      	b.n	8001768 <__aeabi_dsub+0x314>
 8001b3a:	4662      	mov	r2, ip
 8001b3c:	08db      	lsrs	r3, r3, #3
 8001b3e:	0752      	lsls	r2, r2, #29
 8001b40:	4313      	orrs	r3, r2
 8001b42:	4662      	mov	r2, ip
 8001b44:	08d4      	lsrs	r4, r2, #3
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	0312      	lsls	r2, r2, #12
 8001b4a:	4214      	tst	r4, r2
 8001b4c:	d007      	beq.n	8001b5e <__aeabi_dsub+0x70a>
 8001b4e:	08c8      	lsrs	r0, r1, #3
 8001b50:	4210      	tst	r0, r2
 8001b52:	d104      	bne.n	8001b5e <__aeabi_dsub+0x70a>
 8001b54:	465d      	mov	r5, fp
 8001b56:	0004      	movs	r4, r0
 8001b58:	08fb      	lsrs	r3, r7, #3
 8001b5a:	0749      	lsls	r1, r1, #29
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	0f5a      	lsrs	r2, r3, #29
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	0752      	lsls	r2, r2, #29
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	e5fe      	b.n	8001768 <__aeabi_dsub+0x314>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	4a01      	ldr	r2, [pc, #4]	; (8001b74 <__aeabi_dsub+0x720>)
 8001b6e:	001c      	movs	r4, r3
 8001b70:	e513      	b.n	800159a <__aeabi_dsub+0x146>
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	000007ff 	.word	0x000007ff

08001b78 <__aeabi_d2iz>:
 8001b78:	000a      	movs	r2, r1
 8001b7a:	b530      	push	{r4, r5, lr}
 8001b7c:	4c13      	ldr	r4, [pc, #76]	; (8001bcc <__aeabi_d2iz+0x54>)
 8001b7e:	0053      	lsls	r3, r2, #1
 8001b80:	0309      	lsls	r1, r1, #12
 8001b82:	0005      	movs	r5, r0
 8001b84:	0b09      	lsrs	r1, r1, #12
 8001b86:	2000      	movs	r0, #0
 8001b88:	0d5b      	lsrs	r3, r3, #21
 8001b8a:	0fd2      	lsrs	r2, r2, #31
 8001b8c:	42a3      	cmp	r3, r4
 8001b8e:	dd04      	ble.n	8001b9a <__aeabi_d2iz+0x22>
 8001b90:	480f      	ldr	r0, [pc, #60]	; (8001bd0 <__aeabi_d2iz+0x58>)
 8001b92:	4283      	cmp	r3, r0
 8001b94:	dd02      	ble.n	8001b9c <__aeabi_d2iz+0x24>
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <__aeabi_d2iz+0x5c>)
 8001b98:	18d0      	adds	r0, r2, r3
 8001b9a:	bd30      	pop	{r4, r5, pc}
 8001b9c:	2080      	movs	r0, #128	; 0x80
 8001b9e:	0340      	lsls	r0, r0, #13
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <__aeabi_d2iz+0x60>)
 8001ba4:	1ac0      	subs	r0, r0, r3
 8001ba6:	281f      	cmp	r0, #31
 8001ba8:	dd08      	ble.n	8001bbc <__aeabi_d2iz+0x44>
 8001baa:	480c      	ldr	r0, [pc, #48]	; (8001bdc <__aeabi_d2iz+0x64>)
 8001bac:	1ac3      	subs	r3, r0, r3
 8001bae:	40d9      	lsrs	r1, r3
 8001bb0:	000b      	movs	r3, r1
 8001bb2:	4258      	negs	r0, r3
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d1f0      	bne.n	8001b9a <__aeabi_d2iz+0x22>
 8001bb8:	0018      	movs	r0, r3
 8001bba:	e7ee      	b.n	8001b9a <__aeabi_d2iz+0x22>
 8001bbc:	4c08      	ldr	r4, [pc, #32]	; (8001be0 <__aeabi_d2iz+0x68>)
 8001bbe:	40c5      	lsrs	r5, r0
 8001bc0:	46a4      	mov	ip, r4
 8001bc2:	4463      	add	r3, ip
 8001bc4:	4099      	lsls	r1, r3
 8001bc6:	000b      	movs	r3, r1
 8001bc8:	432b      	orrs	r3, r5
 8001bca:	e7f2      	b.n	8001bb2 <__aeabi_d2iz+0x3a>
 8001bcc:	000003fe 	.word	0x000003fe
 8001bd0:	0000041d 	.word	0x0000041d
 8001bd4:	7fffffff 	.word	0x7fffffff
 8001bd8:	00000433 	.word	0x00000433
 8001bdc:	00000413 	.word	0x00000413
 8001be0:	fffffbed 	.word	0xfffffbed

08001be4 <__aeabi_f2d>:
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	0043      	lsls	r3, r0, #1
 8001be8:	0246      	lsls	r6, r0, #9
 8001bea:	0fc4      	lsrs	r4, r0, #31
 8001bec:	20fe      	movs	r0, #254	; 0xfe
 8001bee:	0e1b      	lsrs	r3, r3, #24
 8001bf0:	1c59      	adds	r1, r3, #1
 8001bf2:	0a75      	lsrs	r5, r6, #9
 8001bf4:	4208      	tst	r0, r1
 8001bf6:	d00c      	beq.n	8001c12 <__aeabi_f2d+0x2e>
 8001bf8:	22e0      	movs	r2, #224	; 0xe0
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4694      	mov	ip, r2
 8001bfe:	076d      	lsls	r5, r5, #29
 8001c00:	0b36      	lsrs	r6, r6, #12
 8001c02:	4463      	add	r3, ip
 8001c04:	051b      	lsls	r3, r3, #20
 8001c06:	4333      	orrs	r3, r6
 8001c08:	07e4      	lsls	r4, r4, #31
 8001c0a:	4323      	orrs	r3, r4
 8001c0c:	0028      	movs	r0, r5
 8001c0e:	0019      	movs	r1, r3
 8001c10:	bd70      	pop	{r4, r5, r6, pc}
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d114      	bne.n	8001c40 <__aeabi_f2d+0x5c>
 8001c16:	2d00      	cmp	r5, #0
 8001c18:	d01b      	beq.n	8001c52 <__aeabi_f2d+0x6e>
 8001c1a:	0028      	movs	r0, r5
 8001c1c:	f000 f8a2 	bl	8001d64 <__clzsi2>
 8001c20:	280a      	cmp	r0, #10
 8001c22:	dc1c      	bgt.n	8001c5e <__aeabi_f2d+0x7a>
 8001c24:	230b      	movs	r3, #11
 8001c26:	002e      	movs	r6, r5
 8001c28:	1a1b      	subs	r3, r3, r0
 8001c2a:	40de      	lsrs	r6, r3
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	3315      	adds	r3, #21
 8001c30:	409d      	lsls	r5, r3
 8001c32:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <__aeabi_f2d+0x88>)
 8001c34:	0336      	lsls	r6, r6, #12
 8001c36:	1a12      	subs	r2, r2, r0
 8001c38:	0552      	lsls	r2, r2, #21
 8001c3a:	0b36      	lsrs	r6, r6, #12
 8001c3c:	0d53      	lsrs	r3, r2, #21
 8001c3e:	e7e1      	b.n	8001c04 <__aeabi_f2d+0x20>
 8001c40:	2d00      	cmp	r5, #0
 8001c42:	d009      	beq.n	8001c58 <__aeabi_f2d+0x74>
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	0b36      	lsrs	r6, r6, #12
 8001c48:	0312      	lsls	r2, r2, #12
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <__aeabi_f2d+0x8c>)
 8001c4c:	076d      	lsls	r5, r5, #29
 8001c4e:	4316      	orrs	r6, r2
 8001c50:	e7d8      	b.n	8001c04 <__aeabi_f2d+0x20>
 8001c52:	2300      	movs	r3, #0
 8001c54:	2600      	movs	r6, #0
 8001c56:	e7d5      	b.n	8001c04 <__aeabi_f2d+0x20>
 8001c58:	2600      	movs	r6, #0
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <__aeabi_f2d+0x8c>)
 8001c5c:	e7d2      	b.n	8001c04 <__aeabi_f2d+0x20>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	3b0b      	subs	r3, #11
 8001c62:	409d      	lsls	r5, r3
 8001c64:	002e      	movs	r6, r5
 8001c66:	2500      	movs	r5, #0
 8001c68:	e7e3      	b.n	8001c32 <__aeabi_f2d+0x4e>
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	00000389 	.word	0x00000389
 8001c70:	000007ff 	.word	0x000007ff

08001c74 <__aeabi_cdrcmple>:
 8001c74:	4684      	mov	ip, r0
 8001c76:	0010      	movs	r0, r2
 8001c78:	4662      	mov	r2, ip
 8001c7a:	468c      	mov	ip, r1
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	4663      	mov	r3, ip
 8001c80:	e000      	b.n	8001c84 <__aeabi_cdcmpeq>
 8001c82:	46c0      	nop			; (mov r8, r8)

08001c84 <__aeabi_cdcmpeq>:
 8001c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c86:	f000 f9ef 	bl	8002068 <__ledf2>
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	d401      	bmi.n	8001c92 <__aeabi_cdcmpeq+0xe>
 8001c8e:	2100      	movs	r1, #0
 8001c90:	42c8      	cmn	r0, r1
 8001c92:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001c94 <__aeabi_dcmpeq>:
 8001c94:	b510      	push	{r4, lr}
 8001c96:	f000 f93f 	bl	8001f18 <__eqdf2>
 8001c9a:	4240      	negs	r0, r0
 8001c9c:	3001      	adds	r0, #1
 8001c9e:	bd10      	pop	{r4, pc}

08001ca0 <__aeabi_dcmplt>:
 8001ca0:	b510      	push	{r4, lr}
 8001ca2:	f000 f9e1 	bl	8002068 <__ledf2>
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	db01      	blt.n	8001cae <__aeabi_dcmplt+0xe>
 8001caa:	2000      	movs	r0, #0
 8001cac:	bd10      	pop	{r4, pc}
 8001cae:	2001      	movs	r0, #1
 8001cb0:	bd10      	pop	{r4, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)

08001cb4 <__aeabi_dcmple>:
 8001cb4:	b510      	push	{r4, lr}
 8001cb6:	f000 f9d7 	bl	8002068 <__ledf2>
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	dd01      	ble.n	8001cc2 <__aeabi_dcmple+0xe>
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	bd10      	pop	{r4, pc}
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	bd10      	pop	{r4, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)

08001cc8 <__aeabi_dcmpgt>:
 8001cc8:	b510      	push	{r4, lr}
 8001cca:	f000 f967 	bl	8001f9c <__gedf2>
 8001cce:	2800      	cmp	r0, #0
 8001cd0:	dc01      	bgt.n	8001cd6 <__aeabi_dcmpgt+0xe>
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	bd10      	pop	{r4, pc}
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	bd10      	pop	{r4, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)

08001cdc <__aeabi_dcmpge>:
 8001cdc:	b510      	push	{r4, lr}
 8001cde:	f000 f95d 	bl	8001f9c <__gedf2>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	da01      	bge.n	8001cea <__aeabi_dcmpge+0xe>
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	bd10      	pop	{r4, pc}
 8001cea:	2001      	movs	r0, #1
 8001cec:	bd10      	pop	{r4, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)

08001cf0 <__aeabi_cfrcmple>:
 8001cf0:	4684      	mov	ip, r0
 8001cf2:	0008      	movs	r0, r1
 8001cf4:	4661      	mov	r1, ip
 8001cf6:	e7ff      	b.n	8001cf8 <__aeabi_cfcmpeq>

08001cf8 <__aeabi_cfcmpeq>:
 8001cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001cfa:	f000 f8c9 	bl	8001e90 <__lesf2>
 8001cfe:	2800      	cmp	r0, #0
 8001d00:	d401      	bmi.n	8001d06 <__aeabi_cfcmpeq+0xe>
 8001d02:	2100      	movs	r1, #0
 8001d04:	42c8      	cmn	r0, r1
 8001d06:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001d08 <__aeabi_fcmpeq>:
 8001d08:	b510      	push	{r4, lr}
 8001d0a:	f000 f855 	bl	8001db8 <__eqsf2>
 8001d0e:	4240      	negs	r0, r0
 8001d10:	3001      	adds	r0, #1
 8001d12:	bd10      	pop	{r4, pc}

08001d14 <__aeabi_fcmplt>:
 8001d14:	b510      	push	{r4, lr}
 8001d16:	f000 f8bb 	bl	8001e90 <__lesf2>
 8001d1a:	2800      	cmp	r0, #0
 8001d1c:	db01      	blt.n	8001d22 <__aeabi_fcmplt+0xe>
 8001d1e:	2000      	movs	r0, #0
 8001d20:	bd10      	pop	{r4, pc}
 8001d22:	2001      	movs	r0, #1
 8001d24:	bd10      	pop	{r4, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)

08001d28 <__aeabi_fcmple>:
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	f000 f8b1 	bl	8001e90 <__lesf2>
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	dd01      	ble.n	8001d36 <__aeabi_fcmple+0xe>
 8001d32:	2000      	movs	r0, #0
 8001d34:	bd10      	pop	{r4, pc}
 8001d36:	2001      	movs	r0, #1
 8001d38:	bd10      	pop	{r4, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)

08001d3c <__aeabi_fcmpgt>:
 8001d3c:	b510      	push	{r4, lr}
 8001d3e:	f000 f861 	bl	8001e04 <__gesf2>
 8001d42:	2800      	cmp	r0, #0
 8001d44:	dc01      	bgt.n	8001d4a <__aeabi_fcmpgt+0xe>
 8001d46:	2000      	movs	r0, #0
 8001d48:	bd10      	pop	{r4, pc}
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	bd10      	pop	{r4, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)

08001d50 <__aeabi_fcmpge>:
 8001d50:	b510      	push	{r4, lr}
 8001d52:	f000 f857 	bl	8001e04 <__gesf2>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	da01      	bge.n	8001d5e <__aeabi_fcmpge+0xe>
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	bd10      	pop	{r4, pc}
 8001d5e:	2001      	movs	r0, #1
 8001d60:	bd10      	pop	{r4, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)

08001d64 <__clzsi2>:
 8001d64:	211c      	movs	r1, #28
 8001d66:	2301      	movs	r3, #1
 8001d68:	041b      	lsls	r3, r3, #16
 8001d6a:	4298      	cmp	r0, r3
 8001d6c:	d301      	bcc.n	8001d72 <__clzsi2+0xe>
 8001d6e:	0c00      	lsrs	r0, r0, #16
 8001d70:	3910      	subs	r1, #16
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	4298      	cmp	r0, r3
 8001d76:	d301      	bcc.n	8001d7c <__clzsi2+0x18>
 8001d78:	0a00      	lsrs	r0, r0, #8
 8001d7a:	3908      	subs	r1, #8
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	4298      	cmp	r0, r3
 8001d80:	d301      	bcc.n	8001d86 <__clzsi2+0x22>
 8001d82:	0900      	lsrs	r0, r0, #4
 8001d84:	3904      	subs	r1, #4
 8001d86:	a202      	add	r2, pc, #8	; (adr r2, 8001d90 <__clzsi2+0x2c>)
 8001d88:	5c10      	ldrb	r0, [r2, r0]
 8001d8a:	1840      	adds	r0, r0, r1
 8001d8c:	4770      	bx	lr
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	02020304 	.word	0x02020304
 8001d94:	01010101 	.word	0x01010101
	...

08001da0 <__clzdi2>:
 8001da0:	b510      	push	{r4, lr}
 8001da2:	2900      	cmp	r1, #0
 8001da4:	d103      	bne.n	8001dae <__clzdi2+0xe>
 8001da6:	f7ff ffdd 	bl	8001d64 <__clzsi2>
 8001daa:	3020      	adds	r0, #32
 8001dac:	e002      	b.n	8001db4 <__clzdi2+0x14>
 8001dae:	0008      	movs	r0, r1
 8001db0:	f7ff ffd8 	bl	8001d64 <__clzsi2>
 8001db4:	bd10      	pop	{r4, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)

08001db8 <__eqsf2>:
 8001db8:	b570      	push	{r4, r5, r6, lr}
 8001dba:	0042      	lsls	r2, r0, #1
 8001dbc:	0245      	lsls	r5, r0, #9
 8001dbe:	024e      	lsls	r6, r1, #9
 8001dc0:	004c      	lsls	r4, r1, #1
 8001dc2:	0fc3      	lsrs	r3, r0, #31
 8001dc4:	0a6d      	lsrs	r5, r5, #9
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	0e12      	lsrs	r2, r2, #24
 8001dca:	0a76      	lsrs	r6, r6, #9
 8001dcc:	0e24      	lsrs	r4, r4, #24
 8001dce:	0fc9      	lsrs	r1, r1, #31
 8001dd0:	2aff      	cmp	r2, #255	; 0xff
 8001dd2:	d006      	beq.n	8001de2 <__eqsf2+0x2a>
 8001dd4:	2cff      	cmp	r4, #255	; 0xff
 8001dd6:	d003      	beq.n	8001de0 <__eqsf2+0x28>
 8001dd8:	42a2      	cmp	r2, r4
 8001dda:	d101      	bne.n	8001de0 <__eqsf2+0x28>
 8001ddc:	42b5      	cmp	r5, r6
 8001dde:	d006      	beq.n	8001dee <__eqsf2+0x36>
 8001de0:	bd70      	pop	{r4, r5, r6, pc}
 8001de2:	2d00      	cmp	r5, #0
 8001de4:	d1fc      	bne.n	8001de0 <__eqsf2+0x28>
 8001de6:	2cff      	cmp	r4, #255	; 0xff
 8001de8:	d1fa      	bne.n	8001de0 <__eqsf2+0x28>
 8001dea:	2e00      	cmp	r6, #0
 8001dec:	d1f8      	bne.n	8001de0 <__eqsf2+0x28>
 8001dee:	428b      	cmp	r3, r1
 8001df0:	d006      	beq.n	8001e00 <__eqsf2+0x48>
 8001df2:	2001      	movs	r0, #1
 8001df4:	2a00      	cmp	r2, #0
 8001df6:	d1f3      	bne.n	8001de0 <__eqsf2+0x28>
 8001df8:	0028      	movs	r0, r5
 8001dfa:	1e43      	subs	r3, r0, #1
 8001dfc:	4198      	sbcs	r0, r3
 8001dfe:	e7ef      	b.n	8001de0 <__eqsf2+0x28>
 8001e00:	2000      	movs	r0, #0
 8001e02:	e7ed      	b.n	8001de0 <__eqsf2+0x28>

08001e04 <__gesf2>:
 8001e04:	b570      	push	{r4, r5, r6, lr}
 8001e06:	0042      	lsls	r2, r0, #1
 8001e08:	0245      	lsls	r5, r0, #9
 8001e0a:	024e      	lsls	r6, r1, #9
 8001e0c:	004c      	lsls	r4, r1, #1
 8001e0e:	0fc3      	lsrs	r3, r0, #31
 8001e10:	0a6d      	lsrs	r5, r5, #9
 8001e12:	0e12      	lsrs	r2, r2, #24
 8001e14:	0a76      	lsrs	r6, r6, #9
 8001e16:	0e24      	lsrs	r4, r4, #24
 8001e18:	0fc8      	lsrs	r0, r1, #31
 8001e1a:	2aff      	cmp	r2, #255	; 0xff
 8001e1c:	d01b      	beq.n	8001e56 <__gesf2+0x52>
 8001e1e:	2cff      	cmp	r4, #255	; 0xff
 8001e20:	d00e      	beq.n	8001e40 <__gesf2+0x3c>
 8001e22:	2a00      	cmp	r2, #0
 8001e24:	d11b      	bne.n	8001e5e <__gesf2+0x5a>
 8001e26:	2c00      	cmp	r4, #0
 8001e28:	d101      	bne.n	8001e2e <__gesf2+0x2a>
 8001e2a:	2e00      	cmp	r6, #0
 8001e2c:	d01c      	beq.n	8001e68 <__gesf2+0x64>
 8001e2e:	2d00      	cmp	r5, #0
 8001e30:	d00c      	beq.n	8001e4c <__gesf2+0x48>
 8001e32:	4283      	cmp	r3, r0
 8001e34:	d01c      	beq.n	8001e70 <__gesf2+0x6c>
 8001e36:	2102      	movs	r1, #2
 8001e38:	1e58      	subs	r0, r3, #1
 8001e3a:	4008      	ands	r0, r1
 8001e3c:	3801      	subs	r0, #1
 8001e3e:	bd70      	pop	{r4, r5, r6, pc}
 8001e40:	2e00      	cmp	r6, #0
 8001e42:	d122      	bne.n	8001e8a <__gesf2+0x86>
 8001e44:	2a00      	cmp	r2, #0
 8001e46:	d1f4      	bne.n	8001e32 <__gesf2+0x2e>
 8001e48:	2d00      	cmp	r5, #0
 8001e4a:	d1f2      	bne.n	8001e32 <__gesf2+0x2e>
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d1f6      	bne.n	8001e3e <__gesf2+0x3a>
 8001e50:	2001      	movs	r0, #1
 8001e52:	4240      	negs	r0, r0
 8001e54:	e7f3      	b.n	8001e3e <__gesf2+0x3a>
 8001e56:	2d00      	cmp	r5, #0
 8001e58:	d117      	bne.n	8001e8a <__gesf2+0x86>
 8001e5a:	2cff      	cmp	r4, #255	; 0xff
 8001e5c:	d0f0      	beq.n	8001e40 <__gesf2+0x3c>
 8001e5e:	2c00      	cmp	r4, #0
 8001e60:	d1e7      	bne.n	8001e32 <__gesf2+0x2e>
 8001e62:	2e00      	cmp	r6, #0
 8001e64:	d1e5      	bne.n	8001e32 <__gesf2+0x2e>
 8001e66:	e7e6      	b.n	8001e36 <__gesf2+0x32>
 8001e68:	2000      	movs	r0, #0
 8001e6a:	2d00      	cmp	r5, #0
 8001e6c:	d0e7      	beq.n	8001e3e <__gesf2+0x3a>
 8001e6e:	e7e2      	b.n	8001e36 <__gesf2+0x32>
 8001e70:	42a2      	cmp	r2, r4
 8001e72:	dc05      	bgt.n	8001e80 <__gesf2+0x7c>
 8001e74:	dbea      	blt.n	8001e4c <__gesf2+0x48>
 8001e76:	42b5      	cmp	r5, r6
 8001e78:	d802      	bhi.n	8001e80 <__gesf2+0x7c>
 8001e7a:	d3e7      	bcc.n	8001e4c <__gesf2+0x48>
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	e7de      	b.n	8001e3e <__gesf2+0x3a>
 8001e80:	4243      	negs	r3, r0
 8001e82:	4158      	adcs	r0, r3
 8001e84:	0040      	lsls	r0, r0, #1
 8001e86:	3801      	subs	r0, #1
 8001e88:	e7d9      	b.n	8001e3e <__gesf2+0x3a>
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	e7d6      	b.n	8001e3e <__gesf2+0x3a>

08001e90 <__lesf2>:
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	0042      	lsls	r2, r0, #1
 8001e94:	0245      	lsls	r5, r0, #9
 8001e96:	024e      	lsls	r6, r1, #9
 8001e98:	004c      	lsls	r4, r1, #1
 8001e9a:	0fc3      	lsrs	r3, r0, #31
 8001e9c:	0a6d      	lsrs	r5, r5, #9
 8001e9e:	0e12      	lsrs	r2, r2, #24
 8001ea0:	0a76      	lsrs	r6, r6, #9
 8001ea2:	0e24      	lsrs	r4, r4, #24
 8001ea4:	0fc8      	lsrs	r0, r1, #31
 8001ea6:	2aff      	cmp	r2, #255	; 0xff
 8001ea8:	d00b      	beq.n	8001ec2 <__lesf2+0x32>
 8001eaa:	2cff      	cmp	r4, #255	; 0xff
 8001eac:	d00d      	beq.n	8001eca <__lesf2+0x3a>
 8001eae:	2a00      	cmp	r2, #0
 8001eb0:	d11f      	bne.n	8001ef2 <__lesf2+0x62>
 8001eb2:	2c00      	cmp	r4, #0
 8001eb4:	d116      	bne.n	8001ee4 <__lesf2+0x54>
 8001eb6:	2e00      	cmp	r6, #0
 8001eb8:	d114      	bne.n	8001ee4 <__lesf2+0x54>
 8001eba:	2000      	movs	r0, #0
 8001ebc:	2d00      	cmp	r5, #0
 8001ebe:	d010      	beq.n	8001ee2 <__lesf2+0x52>
 8001ec0:	e009      	b.n	8001ed6 <__lesf2+0x46>
 8001ec2:	2d00      	cmp	r5, #0
 8001ec4:	d10c      	bne.n	8001ee0 <__lesf2+0x50>
 8001ec6:	2cff      	cmp	r4, #255	; 0xff
 8001ec8:	d113      	bne.n	8001ef2 <__lesf2+0x62>
 8001eca:	2e00      	cmp	r6, #0
 8001ecc:	d108      	bne.n	8001ee0 <__lesf2+0x50>
 8001ece:	2a00      	cmp	r2, #0
 8001ed0:	d008      	beq.n	8001ee4 <__lesf2+0x54>
 8001ed2:	4283      	cmp	r3, r0
 8001ed4:	d012      	beq.n	8001efc <__lesf2+0x6c>
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	1e58      	subs	r0, r3, #1
 8001eda:	4008      	ands	r0, r1
 8001edc:	3801      	subs	r0, #1
 8001ede:	e000      	b.n	8001ee2 <__lesf2+0x52>
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
 8001ee4:	2d00      	cmp	r5, #0
 8001ee6:	d1f4      	bne.n	8001ed2 <__lesf2+0x42>
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	d1fa      	bne.n	8001ee2 <__lesf2+0x52>
 8001eec:	2001      	movs	r0, #1
 8001eee:	4240      	negs	r0, r0
 8001ef0:	e7f7      	b.n	8001ee2 <__lesf2+0x52>
 8001ef2:	2c00      	cmp	r4, #0
 8001ef4:	d1ed      	bne.n	8001ed2 <__lesf2+0x42>
 8001ef6:	2e00      	cmp	r6, #0
 8001ef8:	d1eb      	bne.n	8001ed2 <__lesf2+0x42>
 8001efa:	e7ec      	b.n	8001ed6 <__lesf2+0x46>
 8001efc:	42a2      	cmp	r2, r4
 8001efe:	dc05      	bgt.n	8001f0c <__lesf2+0x7c>
 8001f00:	dbf2      	blt.n	8001ee8 <__lesf2+0x58>
 8001f02:	42b5      	cmp	r5, r6
 8001f04:	d802      	bhi.n	8001f0c <__lesf2+0x7c>
 8001f06:	d3ef      	bcc.n	8001ee8 <__lesf2+0x58>
 8001f08:	2000      	movs	r0, #0
 8001f0a:	e7ea      	b.n	8001ee2 <__lesf2+0x52>
 8001f0c:	4243      	negs	r3, r0
 8001f0e:	4158      	adcs	r0, r3
 8001f10:	0040      	lsls	r0, r0, #1
 8001f12:	3801      	subs	r0, #1
 8001f14:	e7e5      	b.n	8001ee2 <__lesf2+0x52>
 8001f16:	46c0      	nop			; (mov r8, r8)

08001f18 <__eqdf2>:
 8001f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1a:	464e      	mov	r6, r9
 8001f1c:	4645      	mov	r5, r8
 8001f1e:	46de      	mov	lr, fp
 8001f20:	4657      	mov	r7, sl
 8001f22:	4690      	mov	r8, r2
 8001f24:	b5e0      	push	{r5, r6, r7, lr}
 8001f26:	0017      	movs	r7, r2
 8001f28:	031a      	lsls	r2, r3, #12
 8001f2a:	0b12      	lsrs	r2, r2, #12
 8001f2c:	0005      	movs	r5, r0
 8001f2e:	4684      	mov	ip, r0
 8001f30:	4819      	ldr	r0, [pc, #100]	; (8001f98 <__eqdf2+0x80>)
 8001f32:	030e      	lsls	r6, r1, #12
 8001f34:	004c      	lsls	r4, r1, #1
 8001f36:	4691      	mov	r9, r2
 8001f38:	005a      	lsls	r2, r3, #1
 8001f3a:	0fdb      	lsrs	r3, r3, #31
 8001f3c:	469b      	mov	fp, r3
 8001f3e:	0b36      	lsrs	r6, r6, #12
 8001f40:	0d64      	lsrs	r4, r4, #21
 8001f42:	0fc9      	lsrs	r1, r1, #31
 8001f44:	0d52      	lsrs	r2, r2, #21
 8001f46:	4284      	cmp	r4, r0
 8001f48:	d019      	beq.n	8001f7e <__eqdf2+0x66>
 8001f4a:	4282      	cmp	r2, r0
 8001f4c:	d010      	beq.n	8001f70 <__eqdf2+0x58>
 8001f4e:	2001      	movs	r0, #1
 8001f50:	4294      	cmp	r4, r2
 8001f52:	d10e      	bne.n	8001f72 <__eqdf2+0x5a>
 8001f54:	454e      	cmp	r6, r9
 8001f56:	d10c      	bne.n	8001f72 <__eqdf2+0x5a>
 8001f58:	2001      	movs	r0, #1
 8001f5a:	45c4      	cmp	ip, r8
 8001f5c:	d109      	bne.n	8001f72 <__eqdf2+0x5a>
 8001f5e:	4559      	cmp	r1, fp
 8001f60:	d017      	beq.n	8001f92 <__eqdf2+0x7a>
 8001f62:	2c00      	cmp	r4, #0
 8001f64:	d105      	bne.n	8001f72 <__eqdf2+0x5a>
 8001f66:	0030      	movs	r0, r6
 8001f68:	4328      	orrs	r0, r5
 8001f6a:	1e43      	subs	r3, r0, #1
 8001f6c:	4198      	sbcs	r0, r3
 8001f6e:	e000      	b.n	8001f72 <__eqdf2+0x5a>
 8001f70:	2001      	movs	r0, #1
 8001f72:	bcf0      	pop	{r4, r5, r6, r7}
 8001f74:	46bb      	mov	fp, r7
 8001f76:	46b2      	mov	sl, r6
 8001f78:	46a9      	mov	r9, r5
 8001f7a:	46a0      	mov	r8, r4
 8001f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f7e:	0033      	movs	r3, r6
 8001f80:	2001      	movs	r0, #1
 8001f82:	432b      	orrs	r3, r5
 8001f84:	d1f5      	bne.n	8001f72 <__eqdf2+0x5a>
 8001f86:	42a2      	cmp	r2, r4
 8001f88:	d1f3      	bne.n	8001f72 <__eqdf2+0x5a>
 8001f8a:	464b      	mov	r3, r9
 8001f8c:	433b      	orrs	r3, r7
 8001f8e:	d1f0      	bne.n	8001f72 <__eqdf2+0x5a>
 8001f90:	e7e2      	b.n	8001f58 <__eqdf2+0x40>
 8001f92:	2000      	movs	r0, #0
 8001f94:	e7ed      	b.n	8001f72 <__eqdf2+0x5a>
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	000007ff 	.word	0x000007ff

08001f9c <__gedf2>:
 8001f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9e:	4647      	mov	r7, r8
 8001fa0:	46ce      	mov	lr, r9
 8001fa2:	0004      	movs	r4, r0
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	0016      	movs	r6, r2
 8001fa8:	031b      	lsls	r3, r3, #12
 8001faa:	0b1b      	lsrs	r3, r3, #12
 8001fac:	4d2d      	ldr	r5, [pc, #180]	; (8002064 <__gedf2+0xc8>)
 8001fae:	004a      	lsls	r2, r1, #1
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	0043      	lsls	r3, r0, #1
 8001fb6:	030f      	lsls	r7, r1, #12
 8001fb8:	46a4      	mov	ip, r4
 8001fba:	46b0      	mov	r8, r6
 8001fbc:	0b3f      	lsrs	r7, r7, #12
 8001fbe:	0d52      	lsrs	r2, r2, #21
 8001fc0:	0fc9      	lsrs	r1, r1, #31
 8001fc2:	0d5b      	lsrs	r3, r3, #21
 8001fc4:	0fc0      	lsrs	r0, r0, #31
 8001fc6:	42aa      	cmp	r2, r5
 8001fc8:	d021      	beq.n	800200e <__gedf2+0x72>
 8001fca:	42ab      	cmp	r3, r5
 8001fcc:	d013      	beq.n	8001ff6 <__gedf2+0x5a>
 8001fce:	2a00      	cmp	r2, #0
 8001fd0:	d122      	bne.n	8002018 <__gedf2+0x7c>
 8001fd2:	433c      	orrs	r4, r7
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <__gedf2+0x42>
 8001fd8:	464d      	mov	r5, r9
 8001fda:	432e      	orrs	r6, r5
 8001fdc:	d022      	beq.n	8002024 <__gedf2+0x88>
 8001fde:	2c00      	cmp	r4, #0
 8001fe0:	d010      	beq.n	8002004 <__gedf2+0x68>
 8001fe2:	4281      	cmp	r1, r0
 8001fe4:	d022      	beq.n	800202c <__gedf2+0x90>
 8001fe6:	2002      	movs	r0, #2
 8001fe8:	3901      	subs	r1, #1
 8001fea:	4008      	ands	r0, r1
 8001fec:	3801      	subs	r0, #1
 8001fee:	bcc0      	pop	{r6, r7}
 8001ff0:	46b9      	mov	r9, r7
 8001ff2:	46b0      	mov	r8, r6
 8001ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff6:	464d      	mov	r5, r9
 8001ff8:	432e      	orrs	r6, r5
 8001ffa:	d129      	bne.n	8002050 <__gedf2+0xb4>
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	d1f0      	bne.n	8001fe2 <__gedf2+0x46>
 8002000:	433c      	orrs	r4, r7
 8002002:	d1ee      	bne.n	8001fe2 <__gedf2+0x46>
 8002004:	2800      	cmp	r0, #0
 8002006:	d1f2      	bne.n	8001fee <__gedf2+0x52>
 8002008:	2001      	movs	r0, #1
 800200a:	4240      	negs	r0, r0
 800200c:	e7ef      	b.n	8001fee <__gedf2+0x52>
 800200e:	003d      	movs	r5, r7
 8002010:	4325      	orrs	r5, r4
 8002012:	d11d      	bne.n	8002050 <__gedf2+0xb4>
 8002014:	4293      	cmp	r3, r2
 8002016:	d0ee      	beq.n	8001ff6 <__gedf2+0x5a>
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e2      	bne.n	8001fe2 <__gedf2+0x46>
 800201c:	464c      	mov	r4, r9
 800201e:	4326      	orrs	r6, r4
 8002020:	d1df      	bne.n	8001fe2 <__gedf2+0x46>
 8002022:	e7e0      	b.n	8001fe6 <__gedf2+0x4a>
 8002024:	2000      	movs	r0, #0
 8002026:	2c00      	cmp	r4, #0
 8002028:	d0e1      	beq.n	8001fee <__gedf2+0x52>
 800202a:	e7dc      	b.n	8001fe6 <__gedf2+0x4a>
 800202c:	429a      	cmp	r2, r3
 800202e:	dc0a      	bgt.n	8002046 <__gedf2+0xaa>
 8002030:	dbe8      	blt.n	8002004 <__gedf2+0x68>
 8002032:	454f      	cmp	r7, r9
 8002034:	d8d7      	bhi.n	8001fe6 <__gedf2+0x4a>
 8002036:	d00e      	beq.n	8002056 <__gedf2+0xba>
 8002038:	2000      	movs	r0, #0
 800203a:	454f      	cmp	r7, r9
 800203c:	d2d7      	bcs.n	8001fee <__gedf2+0x52>
 800203e:	2900      	cmp	r1, #0
 8002040:	d0e2      	beq.n	8002008 <__gedf2+0x6c>
 8002042:	0008      	movs	r0, r1
 8002044:	e7d3      	b.n	8001fee <__gedf2+0x52>
 8002046:	4243      	negs	r3, r0
 8002048:	4158      	adcs	r0, r3
 800204a:	0040      	lsls	r0, r0, #1
 800204c:	3801      	subs	r0, #1
 800204e:	e7ce      	b.n	8001fee <__gedf2+0x52>
 8002050:	2002      	movs	r0, #2
 8002052:	4240      	negs	r0, r0
 8002054:	e7cb      	b.n	8001fee <__gedf2+0x52>
 8002056:	45c4      	cmp	ip, r8
 8002058:	d8c5      	bhi.n	8001fe6 <__gedf2+0x4a>
 800205a:	2000      	movs	r0, #0
 800205c:	45c4      	cmp	ip, r8
 800205e:	d2c6      	bcs.n	8001fee <__gedf2+0x52>
 8002060:	e7ed      	b.n	800203e <__gedf2+0xa2>
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	000007ff 	.word	0x000007ff

08002068 <__ledf2>:
 8002068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206a:	4647      	mov	r7, r8
 800206c:	46ce      	mov	lr, r9
 800206e:	0004      	movs	r4, r0
 8002070:	0018      	movs	r0, r3
 8002072:	0016      	movs	r6, r2
 8002074:	031b      	lsls	r3, r3, #12
 8002076:	0b1b      	lsrs	r3, r3, #12
 8002078:	4d2c      	ldr	r5, [pc, #176]	; (800212c <__ledf2+0xc4>)
 800207a:	004a      	lsls	r2, r1, #1
 800207c:	4699      	mov	r9, r3
 800207e:	b580      	push	{r7, lr}
 8002080:	0043      	lsls	r3, r0, #1
 8002082:	030f      	lsls	r7, r1, #12
 8002084:	46a4      	mov	ip, r4
 8002086:	46b0      	mov	r8, r6
 8002088:	0b3f      	lsrs	r7, r7, #12
 800208a:	0d52      	lsrs	r2, r2, #21
 800208c:	0fc9      	lsrs	r1, r1, #31
 800208e:	0d5b      	lsrs	r3, r3, #21
 8002090:	0fc0      	lsrs	r0, r0, #31
 8002092:	42aa      	cmp	r2, r5
 8002094:	d00d      	beq.n	80020b2 <__ledf2+0x4a>
 8002096:	42ab      	cmp	r3, r5
 8002098:	d010      	beq.n	80020bc <__ledf2+0x54>
 800209a:	2a00      	cmp	r2, #0
 800209c:	d127      	bne.n	80020ee <__ledf2+0x86>
 800209e:	433c      	orrs	r4, r7
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d111      	bne.n	80020c8 <__ledf2+0x60>
 80020a4:	464d      	mov	r5, r9
 80020a6:	432e      	orrs	r6, r5
 80020a8:	d10e      	bne.n	80020c8 <__ledf2+0x60>
 80020aa:	2000      	movs	r0, #0
 80020ac:	2c00      	cmp	r4, #0
 80020ae:	d015      	beq.n	80020dc <__ledf2+0x74>
 80020b0:	e00e      	b.n	80020d0 <__ledf2+0x68>
 80020b2:	003d      	movs	r5, r7
 80020b4:	4325      	orrs	r5, r4
 80020b6:	d110      	bne.n	80020da <__ledf2+0x72>
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d118      	bne.n	80020ee <__ledf2+0x86>
 80020bc:	464d      	mov	r5, r9
 80020be:	432e      	orrs	r6, r5
 80020c0:	d10b      	bne.n	80020da <__ledf2+0x72>
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	d102      	bne.n	80020cc <__ledf2+0x64>
 80020c6:	433c      	orrs	r4, r7
 80020c8:	2c00      	cmp	r4, #0
 80020ca:	d00b      	beq.n	80020e4 <__ledf2+0x7c>
 80020cc:	4281      	cmp	r1, r0
 80020ce:	d014      	beq.n	80020fa <__ledf2+0x92>
 80020d0:	2002      	movs	r0, #2
 80020d2:	3901      	subs	r1, #1
 80020d4:	4008      	ands	r0, r1
 80020d6:	3801      	subs	r0, #1
 80020d8:	e000      	b.n	80020dc <__ledf2+0x74>
 80020da:	2002      	movs	r0, #2
 80020dc:	bcc0      	pop	{r6, r7}
 80020de:	46b9      	mov	r9, r7
 80020e0:	46b0      	mov	r8, r6
 80020e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d1f9      	bne.n	80020dc <__ledf2+0x74>
 80020e8:	2001      	movs	r0, #1
 80020ea:	4240      	negs	r0, r0
 80020ec:	e7f6      	b.n	80020dc <__ledf2+0x74>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ec      	bne.n	80020cc <__ledf2+0x64>
 80020f2:	464c      	mov	r4, r9
 80020f4:	4326      	orrs	r6, r4
 80020f6:	d1e9      	bne.n	80020cc <__ledf2+0x64>
 80020f8:	e7ea      	b.n	80020d0 <__ledf2+0x68>
 80020fa:	429a      	cmp	r2, r3
 80020fc:	dd04      	ble.n	8002108 <__ledf2+0xa0>
 80020fe:	4243      	negs	r3, r0
 8002100:	4158      	adcs	r0, r3
 8002102:	0040      	lsls	r0, r0, #1
 8002104:	3801      	subs	r0, #1
 8002106:	e7e9      	b.n	80020dc <__ledf2+0x74>
 8002108:	429a      	cmp	r2, r3
 800210a:	dbeb      	blt.n	80020e4 <__ledf2+0x7c>
 800210c:	454f      	cmp	r7, r9
 800210e:	d8df      	bhi.n	80020d0 <__ledf2+0x68>
 8002110:	d006      	beq.n	8002120 <__ledf2+0xb8>
 8002112:	2000      	movs	r0, #0
 8002114:	454f      	cmp	r7, r9
 8002116:	d2e1      	bcs.n	80020dc <__ledf2+0x74>
 8002118:	2900      	cmp	r1, #0
 800211a:	d0e5      	beq.n	80020e8 <__ledf2+0x80>
 800211c:	0008      	movs	r0, r1
 800211e:	e7dd      	b.n	80020dc <__ledf2+0x74>
 8002120:	45c4      	cmp	ip, r8
 8002122:	d8d5      	bhi.n	80020d0 <__ledf2+0x68>
 8002124:	2000      	movs	r0, #0
 8002126:	45c4      	cmp	ip, r8
 8002128:	d2d8      	bcs.n	80020dc <__ledf2+0x74>
 800212a:	e7f5      	b.n	8002118 <__ledf2+0xb0>
 800212c:	000007ff 	.word	0x000007ff

08002130 <NEXTION_Get_Touch>:
	int len = sprintf(buf_str, "page %s", Page);
	HAL_UART_Transmit(&huart1, (uint8_t*)buf_str, len, 100);
	HAL_UART_Transmit(&huart1, cmd_end, 3, 100);
}

uint8_t NEXTION_Get_Touch(uint8_t Page){
 8002130:	b513      	push	{r0, r1, r4, lr}
	uint8_t Rx_Data[5];
	HAL_UART_Receive(&huart1, Rx_Data, 5, 200);
 8002132:	23c8      	movs	r3, #200	; 0xc8
uint8_t NEXTION_Get_Touch(uint8_t Page){
 8002134:	0004      	movs	r4, r0
	HAL_UART_Receive(&huart1, Rx_Data, 5, 200);
 8002136:	2205      	movs	r2, #5
 8002138:	4669      	mov	r1, sp
 800213a:	4806      	ldr	r0, [pc, #24]	; (8002154 <NEXTION_Get_Touch+0x24>)
 800213c:	f003 fa62 	bl	8005604 <HAL_UART_Receive>
	if(Rx_Data[1] == Page + 48) return Rx_Data[2];
 8002140:	466b      	mov	r3, sp
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	3430      	adds	r4, #48	; 0x30
	return 0;
 8002146:	2000      	movs	r0, #0
	if(Rx_Data[1] == Page + 48) return Rx_Data[2];
 8002148:	42a3      	cmp	r3, r4
 800214a:	d101      	bne.n	8002150 <NEXTION_Get_Touch+0x20>
 800214c:	466b      	mov	r3, sp
 800214e:	7898      	ldrb	r0, [r3, #2]
}
 8002150:	bd16      	pop	{r1, r2, r4, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	200001c4 	.word	0x200001c4

08002158 <nextion_inst_set>:
	HAL_UART_Receive(&huart1, Rx_Data, 5, 200);
	if(Rx_Data[1] == Page + 48) return 1;
	return 0;
}

void nextion_inst_set(char* inst){
 8002158:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*)inst, strlen(inst), HAL_MAX_DELAY);
 800215a:	2501      	movs	r5, #1
void nextion_inst_set(char* inst){
 800215c:	0004      	movs	r4, r0
	HAL_UART_Transmit(&huart1, (uint8_t*)inst, strlen(inst), HAL_MAX_DELAY);
 800215e:	f7fd ffdd 	bl	800011c <strlen>
 8002162:	4e07      	ldr	r6, [pc, #28]	; (8002180 <nextion_inst_set+0x28>)
 8002164:	426d      	negs	r5, r5
 8002166:	002b      	movs	r3, r5
 8002168:	0021      	movs	r1, r4
 800216a:	b282      	uxth	r2, r0
 800216c:	0030      	movs	r0, r6
 800216e:	f003 f9e2 	bl	8005536 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, cmd_end, 3, HAL_MAX_DELAY);
 8002172:	002b      	movs	r3, r5
 8002174:	0030      	movs	r0, r6
 8002176:	2203      	movs	r2, #3
 8002178:	4902      	ldr	r1, [pc, #8]	; (8002184 <nextion_inst_set+0x2c>)
 800217a:	f003 f9dc 	bl	8005536 <HAL_UART_Transmit>
}
 800217e:	bd70      	pop	{r4, r5, r6, pc}
 8002180:	200001c4 	.word	0x200001c4
 8002184:	20000000 	.word	0x20000000

08002188 <nextion_get_pos>:

coordinate nextion_get_pos(void){
 8002188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_StatusTypeDef res = HAL_OK;
	uint8_t Rx_Data[9];
	coordinate pos = { 0, 0 };
	res = HAL_UART_Receive(&huart1, Rx_Data, 9, 10);
 800218a:	230a      	movs	r3, #10
 800218c:	2209      	movs	r2, #9
 800218e:	4815      	ldr	r0, [pc, #84]	; (80021e4 <nextion_get_pos+0x5c>)
 8002190:	a901      	add	r1, sp, #4
 8002192:	f003 fa37 	bl	8005604 <HAL_UART_Receive>
	if(res != HAL_OK) return pos;
 8002196:	2800      	cmp	r0, #0
 8002198:	d00b      	beq.n	80021b2 <nextion_get_pos+0x2a>
 800219a:	2300      	movs	r3, #0
 800219c:	466a      	mov	r2, sp
 800219e:	8013      	strh	r3, [r2, #0]
	if(Rx_Data[0] != 0x67) return pos;
	if(Rx_Data[5] != 0x01) return pos;
	pos.x = Rx_Data[1] << 8 | Rx_Data[2];
	pos.y = Rx_Data[3] << 8 | Rx_Data[4];
	return pos;
 80021a0:	8053      	strh	r3, [r2, #2]
}
 80021a2:	466b      	mov	r3, sp
 80021a4:	466a      	mov	r2, sp
 80021a6:	885b      	ldrh	r3, [r3, #2]
 80021a8:	8810      	ldrh	r0, [r2, #0]
 80021aa:	041b      	lsls	r3, r3, #16
 80021ac:	4318      	orrs	r0, r3
 80021ae:	b005      	add	sp, #20
 80021b0:	bd00      	pop	{pc}
	if(Rx_Data[0] != 0x67) return pos;
 80021b2:	466b      	mov	r3, sp
 80021b4:	791b      	ldrb	r3, [r3, #4]
 80021b6:	2b67      	cmp	r3, #103	; 0x67
 80021b8:	d1ef      	bne.n	800219a <nextion_get_pos+0x12>
	if(Rx_Data[5] != 0x01) return pos;
 80021ba:	466b      	mov	r3, sp
 80021bc:	7a5b      	ldrb	r3, [r3, #9]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d1eb      	bne.n	800219a <nextion_get_pos+0x12>
	pos.y = Rx_Data[3] << 8 | Rx_Data[4];
 80021c2:	466b      	mov	r3, sp
	return pos;
 80021c4:	466a      	mov	r2, sp
 80021c6:	79d9      	ldrb	r1, [r3, #7]
 80021c8:	7a1b      	ldrb	r3, [r3, #8]
 80021ca:	7950      	ldrb	r0, [r2, #5]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	430b      	orrs	r3, r1
 80021d0:	4669      	mov	r1, sp
 80021d2:	7992      	ldrb	r2, [r2, #6]
 80021d4:	ba5b      	rev16	r3, r3
 80021d6:	0212      	lsls	r2, r2, #8
 80021d8:	4302      	orrs	r2, r0
 80021da:	ba52      	rev16	r2, r2
 80021dc:	800a      	strh	r2, [r1, #0]
 80021de:	466a      	mov	r2, sp
 80021e0:	e7de      	b.n	80021a0 <nextion_get_pos+0x18>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	200001c4 	.word	0x200001c4

080021e8 <initDrv8830>:
#include "drv8830.h"

extern I2C_HandleTypeDef hi2c1;

uint8_t initDrv8830() {
 80021e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t txData = 0x80;
 80021ea:	2317      	movs	r3, #23
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	446b      	add	r3, sp
 80021f0:	701a      	strb	r2, [r3, #0]
	// clear fault
	return HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &txData, 1, 5);
 80021f2:	3a7b      	subs	r2, #123	; 0x7b
 80021f4:	9202      	str	r2, [sp, #8]
 80021f6:	3a04      	subs	r2, #4
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	21c0      	movs	r1, #192	; 0xc0
 80021fc:	0013      	movs	r3, r2
 80021fe:	9201      	str	r2, [sp, #4]
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <initDrv8830+0x24>)
 8002202:	f001 ff65 	bl	80040d0 <HAL_I2C_Mem_Write>
}
 8002206:	b007      	add	sp, #28
 8002208:	bd00      	pop	{pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	20000130 	.word	0x20000130

08002210 <setMotor>:
// VSET[7:2] voltage 0x00~0x3F
// D1, D0 direction
uint8_t setMotor(int direction) {
	uint8_t txData;
	uint8_t	result;
	txData = 0x1f << 2 | direction;
 8002210:	2216      	movs	r2, #22
 8002212:	237c      	movs	r3, #124	; 0x7c
uint8_t setMotor(int direction) {
 8002214:	b570      	push	{r4, r5, r6, lr}
	int status;
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 8002216:	2401      	movs	r4, #1
 8002218:	2505      	movs	r5, #5
uint8_t setMotor(int direction) {
 800221a:	b086      	sub	sp, #24
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 800221c:	4e0d      	ldr	r6, [pc, #52]	; (8002254 <setMotor+0x44>)
	txData = 0x1f << 2 | direction;
 800221e:	446a      	add	r2, sp
 8002220:	4303      	orrs	r3, r0
 8002222:	7013      	strb	r3, [r2, #0]
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 8002224:	21c0      	movs	r1, #192	; 0xc0
 8002226:	0023      	movs	r3, r4
 8002228:	9502      	str	r5, [sp, #8]
 800222a:	9200      	str	r2, [sp, #0]
 800222c:	0030      	movs	r0, r6
 800222e:	2200      	movs	r2, #0
 8002230:	9401      	str	r4, [sp, #4]
 8002232:	f001 ff4d 	bl	80040d0 <HAL_I2C_Mem_Write>
	status = HAL_I2C_Mem_Read(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &result, 1, 5);
 8002236:	9502      	str	r5, [sp, #8]
 8002238:	3512      	adds	r5, #18
 800223a:	446d      	add	r5, sp
 800223c:	0023      	movs	r3, r4
 800223e:	0022      	movs	r2, r4
 8002240:	21c0      	movs	r1, #192	; 0xc0
 8002242:	0030      	movs	r0, r6
 8002244:	9401      	str	r4, [sp, #4]
 8002246:	9500      	str	r5, [sp, #0]
 8002248:	f002 f820 	bl	800428c <HAL_I2C_Mem_Read>
	return result;
 800224c:	7828      	ldrb	r0, [r5, #0]
}
 800224e:	b006      	add	sp, #24
 8002250:	bd70      	pop	{r4, r5, r6, pc}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	20000130 	.word	0x20000130

08002258 <initEns160>:
#include "ens160.h"

extern I2C_HandleTypeDef hi2c1;

void initEns160() {
 8002258:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t txData = ENS160_OpMode_Run;
 800225a:	2217      	movs	r2, #23
 800225c:	2302      	movs	r3, #2
 800225e:	446a      	add	r2, sp
 8002260:	7013      	strb	r3, [r2, #0]
	int status = HAL_I2C_Mem_Write(&hi2c1, ENS160_DeviceAddress, ENS160_OpMode, 1, &txData, 1, 10);
 8002262:	3308      	adds	r3, #8
 8002264:	9302      	str	r3, [sp, #8]
 8002266:	3b09      	subs	r3, #9
 8002268:	9200      	str	r2, [sp, #0]
 800226a:	21a4      	movs	r1, #164	; 0xa4
 800226c:	2210      	movs	r2, #16
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <initEns160+0x24>)
 8002272:	f001 ff2d 	bl	80040d0 <HAL_I2C_Mem_Write>
}
 8002276:	b007      	add	sp, #28
 8002278:	bd00      	pop	{pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	20000130 	.word	0x20000130

08002280 <getCO2>:
	txData[0]= writeValue;
	txData[1]= writeValue >> 8;
	int status = HAL_I2C_Mem_Write(&hi2c1, ENS160_DeviceAddress, ENS160_HumidityIn, 1, txData, 2, 10);
}

int	getCO2() {
 8002280:	b530      	push	{r4, r5, lr}
	HAL_I2C_Init(&hi2c1);
 8002282:	4d0a      	ldr	r5, [pc, #40]	; (80022ac <getCO2+0x2c>)
int	getCO2() {
 8002284:	b087      	sub	sp, #28
	HAL_I2C_Init(&hi2c1);
 8002286:	0028      	movs	r0, r5
 8002288:	f001 fda8 	bl	8003ddc <HAL_I2C_Init>
	uint8_t rxData[2];
	int status = HAL_I2C_Mem_Read(&hi2c1, ENS160_DeviceAddress, ENS160_DataECO2, 1, rxData, 2, 10);
 800228c:	230a      	movs	r3, #10
 800228e:	ac05      	add	r4, sp, #20
 8002290:	9302      	str	r3, [sp, #8]
 8002292:	3b08      	subs	r3, #8
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	2224      	movs	r2, #36	; 0x24
 8002298:	21a4      	movs	r1, #164	; 0xa4
 800229a:	0028      	movs	r0, r5
 800229c:	9400      	str	r4, [sp, #0]
 800229e:	3b01      	subs	r3, #1
 80022a0:	f001 fff4 	bl	800428c <HAL_I2C_Mem_Read>
	return rxData[1] << 8 | rxData[0];
 80022a4:	8820      	ldrh	r0, [r4, #0]
}
 80022a6:	b007      	add	sp, #28
 80022a8:	bd30      	pop	{r4, r5, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	20000130 	.word	0x20000130

080022b0 <reset_buz>:
}
/* eeprom svae load function end */

/* struct reset function start */
void reset_buz(struct _user_buz_control* user_buz){
	user_buz->buzM = buz_off;
 80022b0:	2300      	movs	r3, #0
 80022b2:	6003      	str	r3, [r0, #0]
	user_buz->buz_re = 0;
	user_buz->buzC = 0;
	user_buz->buz_check_fuc = buz_repeat_check;
 80022b4:	4b02      	ldr	r3, [pc, #8]	; (80022c0 <reset_buz+0x10>)
 80022b6:	6083      	str	r3, [r0, #8]
	user_buz->buz_run_fuc = BUZ;
 80022b8:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <reset_buz+0x14>)
 80022ba:	60c3      	str	r3, [r0, #12]
}
 80022bc:	4770      	bx	lr
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	08002361 	.word	0x08002361
 80022c4:	08002755 	.word	0x08002755

080022c8 <reset_touch>:

void reset_touch(struct _user_touched_control* user_touch){
	user_touch->curXY.x = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	6003      	str	r3, [r0, #0]
	user_touch->curXY.y = 0;
	user_touch->getXY = nextion_get_pos;
 80022cc:	4b01      	ldr	r3, [pc, #4]	; (80022d4 <reset_touch+0xc>)
 80022ce:	6083      	str	r3, [r0, #8]
}
 80022d0:	4770      	bx	lr
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	08002189 	.word	0x08002189

080022d8 <reset_mode>:

void reset_mode(struct _user_mode_control* user_mode){
	user_mode->now_page = menu;
 80022d8:	2300      	movs	r3, #0
 80022da:	7003      	strb	r3, [r0, #0]
	user_mode->change_fuc = change_page;
 80022dc:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <reset_mode+0x10>)
 80022de:	6083      	str	r3, [r0, #8]
	user_mode->run_fuc = menu_fuc.main_fuc;
 80022e0:	4b02      	ldr	r3, [pc, #8]	; (80022ec <reset_mode+0x14>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	60c3      	str	r3, [r0, #12]
}
 80022e6:	4770      	bx	lr
 80022e8:	08002311 	.word	0x08002311
 80022ec:	20000268 	.word	0x20000268

080022f0 <reset_sht41>:

void reset_sht41(struct _user_sht41_control* user_sht41){
	user_sht41->sht41_value.temperature = 0.0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	6003      	str	r3, [r0, #0]
	user_sht41->sht41_value.humidity = 0.0;
 80022f4:	6043      	str	r3, [r0, #4]
	user_sht41->get_value_fuc = getTempSht41;
 80022f6:	4b01      	ldr	r3, [pc, #4]	; (80022fc <reset_sht41+0xc>)
 80022f8:	60c3      	str	r3, [r0, #12]
}
 80022fa:	4770      	bx	lr
 80022fc:	080034e5 	.word	0x080034e5

08002300 <reset_ens160>:

void reset_ens160(struct _user_ens160_control* user_ens160){
	user_ens160->ens160_value = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	8003      	strh	r3, [r0, #0]
	user_ens160->get_value_fuc = getCO2;
 8002304:	4b01      	ldr	r3, [pc, #4]	; (800230c <reset_ens160+0xc>)
 8002306:	6083      	str	r3, [r0, #8]
}
 8002308:	4770      	bx	lr
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	08002281 	.word	0x08002281

08002310 <change_page>:
}
/* struct reset function end */

/* running function change function start */
void change_page(struct _user_mode_control* page){
	if(page->now_page == menu)                page->run_fuc = menu_fuc.main_fuc;
 8002310:	7803      	ldrb	r3, [r0, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <change_page+0xe>
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <change_page+0x3c>)
	else if(page->now_page == temp)           page->run_fuc = temp_fuc.main_fuc;
	else if(page->now_page == hum)            page->run_fuc = humidity_fuc.main_fuc;
	else if(page->now_page == co2)            page->run_fuc = co2_fuc.main_fuc;
 8002318:	689b      	ldr	r3, [r3, #8]
	else if(page->now_page == input_password) page->run_fuc = password_fuc.input_password_main_fuc;
	else if(page->now_page == password_set)   page->run_fuc = password_fuc.password_set_main_fuc;
 800231a:	60c3      	str	r3, [r0, #12]
}
 800231c:	4770      	bx	lr
	else if(page->now_page == temp)           page->run_fuc = temp_fuc.main_fuc;
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <change_page+0x16>
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <change_page+0x40>)
 8002324:	e7f8      	b.n	8002318 <change_page+0x8>
	else if(page->now_page == hum)            page->run_fuc = humidity_fuc.main_fuc;
 8002326:	2b02      	cmp	r3, #2
 8002328:	d101      	bne.n	800232e <change_page+0x1e>
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <change_page+0x44>)
 800232c:	e7f4      	b.n	8002318 <change_page+0x8>
	else if(page->now_page == co2)            page->run_fuc = co2_fuc.main_fuc;
 800232e:	2b03      	cmp	r3, #3
 8002330:	d101      	bne.n	8002336 <change_page+0x26>
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <change_page+0x48>)
 8002334:	e7f0      	b.n	8002318 <change_page+0x8>
	else if(page->now_page == input_password) page->run_fuc = password_fuc.input_password_main_fuc;
 8002336:	2b04      	cmp	r3, #4
 8002338:	d102      	bne.n	8002340 <change_page+0x30>
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <change_page+0x4c>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	e7ec      	b.n	800231a <change_page+0xa>
	else if(page->now_page == password_set)   page->run_fuc = password_fuc.password_set_main_fuc;
 8002340:	2b05      	cmp	r3, #5
 8002342:	d1eb      	bne.n	800231c <change_page+0xc>
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <change_page+0x4c>)
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	e7e7      	b.n	800231a <change_page+0xa>
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	20000268 	.word	0x20000268
 8002350:	200002e4 	.word	0x200002e4
 8002354:	2000024c 	.word	0x2000024c
 8002358:	20000110 	.word	0x20000110
 800235c:	20000288 	.word	0x20000288

08002360 <buz_repeat_check>:
	if(x) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	else HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
}

void buz_repeat_check(struct _user_buz_control *user_buz){
	user_buz->buz_re--;
 8002360:	7843      	ldrb	r3, [r0, #1]
 8002362:	3b01      	subs	r3, #1
 8002364:	b2db      	uxtb	r3, r3
 8002366:	7043      	strb	r3, [r0, #1]
	if(user_buz->buz_re == 0) user_buz->buzM = buz_off;
 8002368:	2b00      	cmp	r3, #0
 800236a:	d100      	bne.n	800236e <buz_repeat_check+0xe>
 800236c:	7003      	strb	r3, [r0, #0]
}
 800236e:	4770      	bx	lr

08002370 <read_sht41_fuc>:
		else if(!SW_READ(3) && old_key == 3) { old_key = 0; return 1; }
	}
	return 0;
}

void read_sht41_fuc(void){
 8002370:	b537      	push	{r0, r1, r2, r4, r5, lr}
	user_sht41.sht41_value = user_sht41.get_value_fuc();
 8002372:	466c      	mov	r4, sp
 8002374:	4d03      	ldr	r5, [pc, #12]	; (8002384 <read_sht41_fuc+0x14>)
 8002376:	0020      	movs	r0, r4
 8002378:	68eb      	ldr	r3, [r5, #12]
 800237a:	4798      	blx	r3
 800237c:	cc0c      	ldmia	r4!, {r2, r3}
 800237e:	c50c      	stmia	r5!, {r2, r3}
}
 8002380:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	20000334 	.word	0x20000334

08002388 <menu_struct_reset_fuc>:
/* global using function end */

/* menu display function start */
void menu_struct_reset_fuc(struct _user_menu_control* user_menu){
	user_menu->main_fuc          = menu_main_fuc;
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <menu_struct_reset_fuc+0x18>)
 800238a:	6083      	str	r3, [r0, #8]
	user_menu->init_fuc          = menu_init_fuc;
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <menu_struct_reset_fuc+0x1c>)
 800238e:	60c3      	str	r3, [r0, #12]
	user_menu->screen_update_fuc = menu_screen_update_fuc;
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <menu_struct_reset_fuc+0x20>)
 8002392:	6103      	str	r3, [r0, #16]
	user_menu->touch_sensing_fuc = menu_touch_sensing_fuc;
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <menu_struct_reset_fuc+0x24>)
 8002396:	6143      	str	r3, [r0, #20]
	user_menu->etc_sensor_fuc    = menu_etc_sensor_fuc;
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <menu_struct_reset_fuc+0x28>)
 800239a:	6183      	str	r3, [r0, #24]
}
 800239c:	4770      	bx	lr
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	0800266d 	.word	0x0800266d
 80023a4:	08002771 	.word	0x08002771
 80023a8:	080027f1 	.word	0x080027f1
 80023ac:	080026fd 	.word	0x080026fd
 80023b0:	08002ed5 	.word	0x08002ed5

080023b4 <temp_struct_reset_fuc>:
}
/* menu display etc function end */

/* temp display function start */
void temp_struct_reset_fuc(struct _user_temp_control* user_temp){
	user_temp->main_fuc          = temp_main_fuc;
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <temp_struct_reset_fuc+0x18>)
 80023b6:	6083      	str	r3, [r0, #8]
	user_temp->init_fuc          = temp_init_fuc;
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <temp_struct_reset_fuc+0x1c>)
 80023ba:	60c3      	str	r3, [r0, #12]
	user_temp->read_sht41_fuc    = read_sht41_fuc;
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <temp_struct_reset_fuc+0x20>)
 80023be:	6103      	str	r3, [r0, #16]
	user_temp->screen_update_fuc = temp_screen_update_fuc;
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <temp_struct_reset_fuc+0x24>)
 80023c2:	6143      	str	r3, [r0, #20]
	user_temp->exit_fuc          = temp_exit_fuc;
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <temp_struct_reset_fuc+0x28>)
 80023c6:	6183      	str	r3, [r0, #24]
}
 80023c8:	4770      	bx	lr
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	08002691 	.word	0x08002691
 80023d0:	08002791 	.word	0x08002791
 80023d4:	08002371 	.word	0x08002371
 80023d8:	0800295d 	.word	0x0800295d
 80023dc:	080023e1 	.word	0x080023e1

080023e0 <temp_exit_fuc>:
		nextion_inst_set(bf);
	}
}

void temp_exit_fuc(void){
	if(temp_fuc.touch_id == 8) { user_mode.now_page = menu; firF = 0; }
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <temp_exit_fuc+0x14>)
 80023e2:	791b      	ldrb	r3, [r3, #4]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d104      	bne.n	80023f2 <temp_exit_fuc+0x12>
 80023e8:	2300      	movs	r3, #0
 80023ea:	4a03      	ldr	r2, [pc, #12]	; (80023f8 <temp_exit_fuc+0x18>)
 80023ec:	7013      	strb	r3, [r2, #0]
 80023ee:	4a03      	ldr	r2, [pc, #12]	; (80023fc <temp_exit_fuc+0x1c>)
 80023f0:	7013      	strb	r3, [r2, #0]
}
 80023f2:	4770      	bx	lr
 80023f4:	200002e4 	.word	0x200002e4
 80023f8:	20000324 	.word	0x20000324
 80023fc:	2000012f 	.word	0x2000012f

08002400 <humidity_struct_reset_fuc>:
}
/* temp display function end */

/* humidity display function start */
void humidity_struct_reset_fuc(struct _user_humidity_control* user_humidity){
	user_humidity->main_fuc = humidity_main_fuc;
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <humidity_struct_reset_fuc+0x18>)
 8002402:	6083      	str	r3, [r0, #8]
	user_humidity->init_fuc = humidity_init_fuc;
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <humidity_struct_reset_fuc+0x1c>)
 8002406:	60c3      	str	r3, [r0, #12]
	user_humidity->read_sht41_fuc = read_sht41_fuc;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <humidity_struct_reset_fuc+0x20>)
 800240a:	6103      	str	r3, [r0, #16]
	user_humidity->screen_update_fuc = humidity_screen_update_fuc;
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <humidity_struct_reset_fuc+0x24>)
 800240e:	6143      	str	r3, [r0, #20]
	user_humidity->exit_fuc = humidity_exit_fuc;
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <humidity_struct_reset_fuc+0x28>)
 8002412:	6183      	str	r3, [r0, #24]
}
 8002414:	4770      	bx	lr
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	080026b5 	.word	0x080026b5
 800241c:	080027b1 	.word	0x080027b1
 8002420:	08002371 	.word	0x08002371
 8002424:	080029e5 	.word	0x080029e5
 8002428:	0800242d 	.word	0x0800242d

0800242c <humidity_exit_fuc>:
		}
	}
}

void humidity_exit_fuc(void){
	if(humidity_fuc.touch_id == 6) { user_mode.now_page = menu; firF = 0; }
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <humidity_exit_fuc+0x14>)
 800242e:	791b      	ldrb	r3, [r3, #4]
 8002430:	2b06      	cmp	r3, #6
 8002432:	d104      	bne.n	800243e <humidity_exit_fuc+0x12>
 8002434:	2300      	movs	r3, #0
 8002436:	4a03      	ldr	r2, [pc, #12]	; (8002444 <humidity_exit_fuc+0x18>)
 8002438:	7013      	strb	r3, [r2, #0]
 800243a:	4a03      	ldr	r2, [pc, #12]	; (8002448 <humidity_exit_fuc+0x1c>)
 800243c:	7013      	strb	r3, [r2, #0]
}
 800243e:	4770      	bx	lr
 8002440:	2000024c 	.word	0x2000024c
 8002444:	20000324 	.word	0x20000324
 8002448:	2000012f 	.word	0x2000012f

0800244c <co2_struct_reset_fuc>:
}
/* humidity display function end */

/* co2 display function start */
void co2_struct_reset_fuc(struct _user_co2_control* user_co2){
	user_co2->main_fuc          = co2_main_fuc;
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <co2_struct_reset_fuc+0x18>)
 800244e:	6083      	str	r3, [r0, #8]
	user_co2->init_fuc          = co2_init_fuc;
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <co2_struct_reset_fuc+0x1c>)
 8002452:	60c3      	str	r3, [r0, #12]
	user_co2->read_ens160_fuc   = co2_read_ens160_fuc;
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <co2_struct_reset_fuc+0x20>)
 8002456:	6103      	str	r3, [r0, #16]
	user_co2->screen_update_fuc = co2_screen_update_fuc;
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <co2_struct_reset_fuc+0x24>)
 800245a:	6143      	str	r3, [r0, #20]
	user_co2->exit_fuc          = co2_exit_fuc;
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <co2_struct_reset_fuc+0x28>)
 800245e:	6183      	str	r3, [r0, #24]
}
 8002460:	4770      	bx	lr
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	080026d9 	.word	0x080026d9
 8002468:	080027d1 	.word	0x080027d1
 800246c:	08002479 	.word	0x08002479
 8002470:	08002a7d 	.word	0x08002a7d
 8002474:	0800248d 	.word	0x0800248d

08002478 <co2_read_ens160_fuc>:
		nextion_inst_set("dp=3");
		firF = stop_state;
	}
}

void co2_read_ens160_fuc(void){
 8002478:	b510      	push	{r4, lr}
	user_ens160.ens160_value = user_ens160.get_value_fuc();
 800247a:	4c03      	ldr	r4, [pc, #12]	; (8002488 <co2_read_ens160_fuc+0x10>)
 800247c:	68a3      	ldr	r3, [r4, #8]
 800247e:	4798      	blx	r3
 8002480:	b280      	uxth	r0, r0
 8002482:	8020      	strh	r0, [r4, #0]
}
 8002484:	bd10      	pop	{r4, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	20000318 	.word	0x20000318

0800248c <co2_exit_fuc>:
		nextion_inst_set(bf);
	}
}

void co2_exit_fuc(void){
	if(co2_fuc.touch_id == 5) { user_mode.now_page = menu; firF=0; }
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <co2_exit_fuc+0x14>)
 800248e:	791b      	ldrb	r3, [r3, #4]
 8002490:	2b05      	cmp	r3, #5
 8002492:	d104      	bne.n	800249e <co2_exit_fuc+0x12>
 8002494:	2300      	movs	r3, #0
 8002496:	4a03      	ldr	r2, [pc, #12]	; (80024a4 <co2_exit_fuc+0x18>)
 8002498:	7013      	strb	r3, [r2, #0]
 800249a:	4a03      	ldr	r2, [pc, #12]	; (80024a8 <co2_exit_fuc+0x1c>)
 800249c:	7013      	strb	r3, [r2, #0]
}
 800249e:	4770      	bx	lr
 80024a0:	20000110 	.word	0x20000110
 80024a4:	20000324 	.word	0x20000324
 80024a8:	2000012f 	.word	0x2000012f

080024ac <password_struct_reset_fuc>:
/* co2 display function end */

/* password display function start */
void password_struct_reset_fuc(struct _user_password_control* user_password){
	/* function reset */
	user_password->touch_sensing_fuc         = password_touch_sensing_fuc;
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <password_struct_reset_fuc+0x24>)
 80024ae:	61c3      	str	r3, [r0, #28]
	user_password->touch_pad_fuc             = password_touch_pad_fuc;
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <password_struct_reset_fuc+0x28>)
 80024b2:	6203      	str	r3, [r0, #32]

	user_password->input_password_main_fuc   = password_input_password_fuc;
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <password_struct_reset_fuc+0x2c>)
 80024b6:	6243      	str	r3, [r0, #36]	; 0x24
	user_password->input_password_screen_fuc = password_input_screen_fuc;
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <password_struct_reset_fuc+0x30>)
 80024ba:	6283      	str	r3, [r0, #40]	; 0x28

	user_password->password_set_main_fuc     = password_password_set_fuc;
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <password_struct_reset_fuc+0x34>)
 80024be:	62c3      	str	r3, [r0, #44]	; 0x2c
	user_password->password_set_screen_fuc   = password_set_screen_fuc;
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <password_struct_reset_fuc+0x38>)
 80024c2:	6303      	str	r3, [r0, #48]	; 0x30

	/* string reset */
	user_password->keypad = "123456789*0#";
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <password_struct_reset_fuc+0x3c>)
 80024c6:	6083      	str	r3, [r0, #8]

	/* value reset */
	user_password->try_num = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	75c3      	strb	r3, [r0, #23]
	user_password->try_ok = run_state;
 80024cc:	6183      	str	r3, [r0, #24]
	user_password->try_second = 0;
	user_password->try_cnt = 0;
}
 80024ce:	4770      	bx	lr
 80024d0:	08002fbd 	.word	0x08002fbd
 80024d4:	08002501 	.word	0x08002501
 80024d8:	0800273d 	.word	0x0800273d
 80024dc:	08002589 	.word	0x08002589
 80024e0:	080024ed 	.word	0x080024ed
 80024e4:	0800287d 	.word	0x0800287d
 80024e8:	08006290 	.word	0x08006290

080024ec <password_password_set_fuc>:

void password_password_set_fuc(void){
 80024ec:	b510      	push	{r4, lr}
	password_fuc.password_set_screen_fuc();
 80024ee:	4c03      	ldr	r4, [pc, #12]	; (80024fc <password_password_set_fuc+0x10>)
 80024f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024f2:	4798      	blx	r3
	password_fuc.touch_sensing_fuc();
 80024f4:	69e3      	ldr	r3, [r4, #28]
 80024f6:	4798      	blx	r3
}
 80024f8:	bd10      	pop	{r4, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	20000288 	.word	0x20000288

08002500 <password_touch_pad_fuc>:
	nextion_inst_set("rest");
	Re = 0; firF = run_state;
	HAL_Delay(1000);
}

void password_touch_pad_fuc(void){
 8002500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002502:	2500      	movs	r5, #0
	for(uint8_t i = 0 ; i < 3 ; i++){
		sprintf(bf, "xstr %d,50,30,30,0,WHITE,BLACK,1,1,1,\"%c\"", (i + 1) * 50, password_fuc.keypad[i]);
 8002504:	2632      	movs	r6, #50	; 0x32
 8002506:	1c6b      	adds	r3, r5, #1
 8002508:	435e      	muls	r6, r3
 800250a:	4f19      	ldr	r7, [pc, #100]	; (8002570 <password_touch_pad_fuc+0x70>)
 800250c:	4c19      	ldr	r4, [pc, #100]	; (8002574 <password_touch_pad_fuc+0x74>)
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	0032      	movs	r2, r6
 8002514:	5d5b      	ldrb	r3, [r3, r5]
 8002516:	4918      	ldr	r1, [pc, #96]	; (8002578 <password_touch_pad_fuc+0x78>)
 8002518:	0020      	movs	r0, r4
 800251a:	f003 f9bb 	bl	8005894 <siprintf>
		nextion_inst_set(bf);
 800251e:	0020      	movs	r0, r4
 8002520:	f7ff fe1a 	bl	8002158 <nextion_inst_set>

		sprintf(bf, "xstr %d,100,30,30,0,WHITE,BLACK,1,1,1,\"%c\"", (i + 1) * 50, password_fuc.keypad[i + 3]);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	0032      	movs	r2, r6
 8002528:	195b      	adds	r3, r3, r5
 800252a:	78db      	ldrb	r3, [r3, #3]
 800252c:	4913      	ldr	r1, [pc, #76]	; (800257c <password_touch_pad_fuc+0x7c>)
 800252e:	0020      	movs	r0, r4
 8002530:	f003 f9b0 	bl	8005894 <siprintf>
		nextion_inst_set(bf);
 8002534:	0020      	movs	r0, r4
 8002536:	f7ff fe0f 	bl	8002158 <nextion_inst_set>

		sprintf(bf, "xstr %d,150,30,30,0,WHITE,BLACK,1,1,1,\"%c\"", (i + 1) * 50, password_fuc.keypad[i + 6]);
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	0032      	movs	r2, r6
 800253e:	195b      	adds	r3, r3, r5
 8002540:	799b      	ldrb	r3, [r3, #6]
 8002542:	490f      	ldr	r1, [pc, #60]	; (8002580 <password_touch_pad_fuc+0x80>)
 8002544:	0020      	movs	r0, r4
 8002546:	f003 f9a5 	bl	8005894 <siprintf>
		nextion_inst_set(bf);
 800254a:	0020      	movs	r0, r4
 800254c:	f7ff fe04 	bl	8002158 <nextion_inst_set>

		sprintf(bf, "xstr %d,200,30,30,0,WHITE,BLACK,1,1,1,\"%c\"", (i + 1) * 50, password_fuc.keypad[i + 9]);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	0032      	movs	r2, r6
 8002554:	195d      	adds	r5, r3, r5
 8002556:	7a6b      	ldrb	r3, [r5, #9]
 8002558:	490a      	ldr	r1, [pc, #40]	; (8002584 <password_touch_pad_fuc+0x84>)
 800255a:	0020      	movs	r0, r4
 800255c:	f003 f99a 	bl	8005894 <siprintf>
		nextion_inst_set(bf);
 8002560:	0020      	movs	r0, r4
 8002562:	f7ff fdf9 	bl	8002158 <nextion_inst_set>
	for(uint8_t i = 0 ; i < 3 ; i++){
 8002566:	9d01      	ldr	r5, [sp, #4]
 8002568:	2d03      	cmp	r5, #3
 800256a:	d1cb      	bne.n	8002504 <password_touch_pad_fuc+0x4>
	}
}
 800256c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	20000288 	.word	0x20000288
 8002574:	200000a9 	.word	0x200000a9
 8002578:	0800629d 	.word	0x0800629d
 800257c:	080062c7 	.word	0x080062c7
 8002580:	080062f2 	.word	0x080062f2
 8002584:	0800631d 	.word	0x0800631d

08002588 <password_input_screen_fuc>:
void password_input_screen_fuc(void){
 8002588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(firF == run_state){
 800258a:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <password_input_screen_fuc+0xb0>)
 800258c:	4e2b      	ldr	r6, [pc, #172]	; (800263c <password_input_screen_fuc+0xb4>)
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	2a00      	cmp	r2, #0
 8002592:	d114      	bne.n	80025be <password_input_screen_fuc+0x36>
		firF = stop_state;
 8002594:	2401      	movs	r4, #1
		nextion_inst_set("cls WHITE");
 8002596:	482a      	ldr	r0, [pc, #168]	; (8002640 <password_input_screen_fuc+0xb8>)
		firF = stop_state;
 8002598:	701c      	strb	r4, [r3, #0]
		nextion_inst_set("cls WHITE");
 800259a:	f7ff fddd 	bl	8002158 <nextion_inst_set>
		sprintf(bf, "xstr 0,0,200,30,0,BLACK,WHITE,0,1,1,\"Input PASSWORD: Log In\"");
 800259e:	4d29      	ldr	r5, [pc, #164]	; (8002644 <password_input_screen_fuc+0xbc>)
 80025a0:	4929      	ldr	r1, [pc, #164]	; (8002648 <password_input_screen_fuc+0xc0>)
 80025a2:	0028      	movs	r0, r5
 80025a4:	f003 f996 	bl	80058d4 <strcpy>
		nextion_inst_set(bf);
 80025a8:	0028      	movs	r0, r5
 80025aa:	f7ff fdd5 	bl	8002158 <nextion_inst_set>
		password_fuc.touch_pad_fuc();
 80025ae:	6a33      	ldr	r3, [r6, #32]
 80025b0:	4798      	blx	r3
	HAL_FLASHEx_DATAEEPROM_Unlock();
 80025b2:	f001 f9a9 	bl	8003908 <HAL_FLASHEx_DATAEEPROM_Unlock>
	*(__IO uint8_t*)(DATA_EEPROM_BASE + addr) = data;
 80025b6:	4b25      	ldr	r3, [pc, #148]	; (800264c <password_input_screen_fuc+0xc4>)
 80025b8:	701c      	strb	r4, [r3, #0]
	HAL_FLASHEx_DATAEEPROM_Lock();
 80025ba:	f001 f9bd 	bl	8003938 <HAL_FLASHEx_DATAEEPROM_Lock>
	if(!Re){
 80025be:	4b24      	ldr	r3, [pc, #144]	; (8002650 <password_input_screen_fuc+0xc8>)
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	2a00      	cmp	r2, #0
 80025c4:	d12c      	bne.n	8002620 <password_input_screen_fuc+0x98>
		Re = 1;
 80025c6:	0037      	movs	r7, r6
 80025c8:	25fa      	movs	r5, #250	; 0xfa
 80025ca:	3201      	adds	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0 ; i < 4 ; i++){
 80025ce:	370c      	adds	r7, #12
			sprintf(bf, "xstr %d,50,30,30,0,BLACK,WHITE,1,1,1,\"%c\"", x_buf, password_fuc.input_password[i] == '\0' ? ' ' : '*');
 80025d0:	783a      	ldrb	r2, [r7, #0]
 80025d2:	2320      	movs	r3, #32
 80025d4:	2a00      	cmp	r2, #0
 80025d6:	d000      	beq.n	80025da <password_input_screen_fuc+0x52>
 80025d8:	330a      	adds	r3, #10
 80025da:	4c1a      	ldr	r4, [pc, #104]	; (8002644 <password_input_screen_fuc+0xbc>)
 80025dc:	002a      	movs	r2, r5
 80025de:	491d      	ldr	r1, [pc, #116]	; (8002654 <password_input_screen_fuc+0xcc>)
 80025e0:	0020      	movs	r0, r4
 80025e2:	f003 f957 	bl	8005894 <siprintf>
			nextion_inst_set(bf);
 80025e6:	0020      	movs	r0, r4
 80025e8:	f7ff fdb6 	bl	8002158 <nextion_inst_set>
			sprintf(bf, "draw %d,50,%d+30,50+30,BLACK", x_buf, x_buf);
 80025ec:	002b      	movs	r3, r5
 80025ee:	002a      	movs	r2, r5
 80025f0:	4919      	ldr	r1, [pc, #100]	; (8002658 <password_input_screen_fuc+0xd0>)
 80025f2:	0020      	movs	r0, r4
 80025f4:	f003 f94e 	bl	8005894 <siprintf>
			nextion_inst_set(bf);
 80025f8:	0020      	movs	r0, r4
 80025fa:	f7ff fdad 	bl	8002158 <nextion_inst_set>
		for(uint8_t i = 0 ; i < 4 ; i++){
 80025fe:	23e1      	movs	r3, #225	; 0xe1
 8002600:	3532      	adds	r5, #50	; 0x32
 8002602:	3701      	adds	r7, #1
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	429d      	cmp	r5, r3
 8002608:	d1e2      	bne.n	80025d0 <password_input_screen_fuc+0x48>
		if(password_fuc.try_ok == stop_state){
 800260a:	7e33      	ldrb	r3, [r6, #24]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d10f      	bne.n	8002630 <password_input_screen_fuc+0xa8>
			sprintf(bf, "xstr 320,100,40,40,0,BLACK,WHITE,1,1,1,\"%ds\"", password_fuc.try_second);
 8002610:	7e72      	ldrb	r2, [r6, #25]
 8002612:	4912      	ldr	r1, [pc, #72]	; (800265c <password_input_screen_fuc+0xd4>)
			sprintf(bf, "xstr 320,100,40,40,0,BLACK,WHITE,1,1,1,\"%c\"", ' ');
 8002614:	0020      	movs	r0, r4
 8002616:	f003 f93d 	bl	8005894 <siprintf>
		nextion_inst_set(bf);
 800261a:	0020      	movs	r0, r4
 800261c:	f7ff fd9c 	bl	8002158 <nextion_inst_set>
	if(password_fuc.picM == 1) nextion_inst_set("pic 291,150,2");
 8002620:	7973      	ldrb	r3, [r6, #5]
 8002622:	480f      	ldr	r0, [pc, #60]	; (8002660 <password_input_screen_fuc+0xd8>)
 8002624:	2b01      	cmp	r3, #1
 8002626:	d000      	beq.n	800262a <password_input_screen_fuc+0xa2>
	else nextion_inst_set("pic 291,150,0");
 8002628:	480e      	ldr	r0, [pc, #56]	; (8002664 <password_input_screen_fuc+0xdc>)
 800262a:	f7ff fd95 	bl	8002158 <nextion_inst_set>
}
 800262e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			sprintf(bf, "xstr 320,100,40,40,0,BLACK,WHITE,1,1,1,\"%c\"", ' ');
 8002630:	2220      	movs	r2, #32
 8002632:	490d      	ldr	r1, [pc, #52]	; (8002668 <password_input_screen_fuc+0xe0>)
 8002634:	e7ee      	b.n	8002614 <password_input_screen_fuc+0x8c>
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	2000012f 	.word	0x2000012f
 800263c:	20000288 	.word	0x20000288
 8002640:	08006348 	.word	0x08006348
 8002644:	200000a9 	.word	0x200000a9
 8002648:	08006352 	.word	0x08006352
 800264c:	0808000a 	.word	0x0808000a
 8002650:	200000a8 	.word	0x200000a8
 8002654:	0800638f 	.word	0x0800638f
 8002658:	080063b9 	.word	0x080063b9
 800265c:	080063d6 	.word	0x080063d6
 8002660:	0800642f 	.word	0x0800642f
 8002664:	0800643d 	.word	0x0800643d
 8002668:	08006403 	.word	0x08006403

0800266c <menu_main_fuc>:
void menu_main_fuc(void){
 800266c:	b510      	push	{r4, lr}
	menu_fuc.touch_id = NEXTION_Get_Touch(menu);
 800266e:	2000      	movs	r0, #0
 8002670:	f7ff fd5e 	bl	8002130 <NEXTION_Get_Touch>
 8002674:	4c05      	ldr	r4, [pc, #20]	; (800268c <menu_main_fuc+0x20>)
 8002676:	7120      	strb	r0, [r4, #4]
	menu_fuc.init_fuc();
 8002678:	68e3      	ldr	r3, [r4, #12]
 800267a:	4798      	blx	r3
	menu_fuc.screen_update_fuc();
 800267c:	6923      	ldr	r3, [r4, #16]
 800267e:	4798      	blx	r3
	menu_fuc.touch_sensing_fuc();
 8002680:	6963      	ldr	r3, [r4, #20]
 8002682:	4798      	blx	r3
	menu_fuc.etc_sensor_fuc();
 8002684:	69a3      	ldr	r3, [r4, #24]
 8002686:	4798      	blx	r3
}
 8002688:	bd10      	pop	{r4, pc}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	20000268 	.word	0x20000268

08002690 <temp_main_fuc>:
void temp_main_fuc(void){
 8002690:	b510      	push	{r4, lr}
	temp_fuc.touch_id = NEXTION_Get_Touch(temp);
 8002692:	2001      	movs	r0, #1
 8002694:	f7ff fd4c 	bl	8002130 <NEXTION_Get_Touch>
 8002698:	4c05      	ldr	r4, [pc, #20]	; (80026b0 <temp_main_fuc+0x20>)
 800269a:	7120      	strb	r0, [r4, #4]
	temp_fuc.init_fuc();
 800269c:	68e3      	ldr	r3, [r4, #12]
 800269e:	4798      	blx	r3
	temp_fuc.read_sht41_fuc();
 80026a0:	6923      	ldr	r3, [r4, #16]
 80026a2:	4798      	blx	r3
	temp_fuc.screen_update_fuc();
 80026a4:	6963      	ldr	r3, [r4, #20]
 80026a6:	4798      	blx	r3
	temp_fuc.exit_fuc();
 80026a8:	69a3      	ldr	r3, [r4, #24]
 80026aa:	4798      	blx	r3
}
 80026ac:	bd10      	pop	{r4, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	200002e4 	.word	0x200002e4

080026b4 <humidity_main_fuc>:
void humidity_main_fuc(void){
 80026b4:	b510      	push	{r4, lr}
	humidity_fuc.touch_id = NEXTION_Get_Touch(hum);
 80026b6:	2002      	movs	r0, #2
 80026b8:	f7ff fd3a 	bl	8002130 <NEXTION_Get_Touch>
 80026bc:	4c05      	ldr	r4, [pc, #20]	; (80026d4 <humidity_main_fuc+0x20>)
 80026be:	7120      	strb	r0, [r4, #4]
	humidity_fuc.init_fuc();
 80026c0:	68e3      	ldr	r3, [r4, #12]
 80026c2:	4798      	blx	r3
	humidity_fuc.read_sht41_fuc();
 80026c4:	6923      	ldr	r3, [r4, #16]
 80026c6:	4798      	blx	r3
	humidity_fuc.screen_update_fuc();
 80026c8:	6963      	ldr	r3, [r4, #20]
 80026ca:	4798      	blx	r3
	humidity_fuc.exit_fuc();
 80026cc:	69a3      	ldr	r3, [r4, #24]
 80026ce:	4798      	blx	r3
}
 80026d0:	bd10      	pop	{r4, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	2000024c 	.word	0x2000024c

080026d8 <co2_main_fuc>:
void co2_main_fuc(void){
 80026d8:	b510      	push	{r4, lr}
	co2_fuc.touch_id = NEXTION_Get_Touch(co2);
 80026da:	2003      	movs	r0, #3
 80026dc:	f7ff fd28 	bl	8002130 <NEXTION_Get_Touch>
 80026e0:	4c05      	ldr	r4, [pc, #20]	; (80026f8 <co2_main_fuc+0x20>)
 80026e2:	7120      	strb	r0, [r4, #4]
	co2_fuc.init_fuc();
 80026e4:	68e3      	ldr	r3, [r4, #12]
 80026e6:	4798      	blx	r3
	co2_fuc.read_ens160_fuc();
 80026e8:	6923      	ldr	r3, [r4, #16]
 80026ea:	4798      	blx	r3
	co2_fuc.screen_update_fuc();
 80026ec:	6963      	ldr	r3, [r4, #20]
 80026ee:	4798      	blx	r3
	co2_fuc.exit_fuc();
 80026f0:	69a3      	ldr	r3, [r4, #24]
 80026f2:	4798      	blx	r3
}
 80026f4:	bd10      	pop	{r4, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	20000110 	.word	0x20000110

080026fc <menu_touch_sensing_fuc>:
	if(menu_fuc.touch_id == 3)      { user_mode.now_page = temp; firF = 0; Re = 0; }
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <menu_touch_sensing_fuc+0x30>)
 80026fe:	791b      	ldrb	r3, [r3, #4]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d108      	bne.n	8002716 <menu_touch_sensing_fuc+0x1a>
 8002704:	2201      	movs	r2, #1
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <menu_touch_sensing_fuc+0x34>)
	else if(menu_fuc.touch_id == 5) { user_mode.now_page = co2;  firF = 0; Re = 0; }
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	2300      	movs	r3, #0
 800270c:	4a09      	ldr	r2, [pc, #36]	; (8002734 <menu_touch_sensing_fuc+0x38>)
 800270e:	7013      	strb	r3, [r2, #0]
 8002710:	4a09      	ldr	r2, [pc, #36]	; (8002738 <menu_touch_sensing_fuc+0x3c>)
 8002712:	7013      	strb	r3, [r2, #0]
}
 8002714:	4770      	bx	lr
	else if(menu_fuc.touch_id == 4) { user_mode.now_page = hum;  firF = 0; Re = 0; }
 8002716:	2b04      	cmp	r3, #4
 8002718:	d102      	bne.n	8002720 <menu_touch_sensing_fuc+0x24>
 800271a:	2202      	movs	r2, #2
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <menu_touch_sensing_fuc+0x34>)
 800271e:	e7f3      	b.n	8002708 <menu_touch_sensing_fuc+0xc>
	else if(menu_fuc.touch_id == 5) { user_mode.now_page = co2;  firF = 0; Re = 0; }
 8002720:	2b05      	cmp	r3, #5
 8002722:	d1f7      	bne.n	8002714 <menu_touch_sensing_fuc+0x18>
 8002724:	2203      	movs	r2, #3
 8002726:	4b02      	ldr	r3, [pc, #8]	; (8002730 <menu_touch_sensing_fuc+0x34>)
 8002728:	e7ee      	b.n	8002708 <menu_touch_sensing_fuc+0xc>
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	20000268 	.word	0x20000268
 8002730:	20000324 	.word	0x20000324
 8002734:	2000012f 	.word	0x2000012f
 8002738:	200000a8 	.word	0x200000a8

0800273c <password_input_password_fuc>:
void password_input_password_fuc(void){
 800273c:	b510      	push	{r4, lr}
	password_fuc.input_password_screen_fuc();
 800273e:	4c04      	ldr	r4, [pc, #16]	; (8002750 <password_input_password_fuc+0x14>)
 8002740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002742:	4798      	blx	r3
	if(password_fuc.try_ok == run_state) password_fuc.touch_sensing_fuc();
 8002744:	7e23      	ldrb	r3, [r4, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <password_input_password_fuc+0x12>
 800274a:	69e3      	ldr	r3, [r4, #28]
 800274c:	4798      	blx	r3
}
 800274e:	bd10      	pop	{r4, pc}
 8002750:	20000288 	.word	0x20000288

08002754 <BUZ>:
void BUZ(uint8_t x){
 8002754:	0001      	movs	r1, r0
 8002756:	b510      	push	{r4, lr}
 8002758:	4804      	ldr	r0, [pc, #16]	; (800276c <BUZ+0x18>)
	if(x) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800275a:	2900      	cmp	r1, #0
 800275c:	d003      	beq.n	8002766 <BUZ+0x12>
 800275e:	2100      	movs	r1, #0
 8002760:	f002 fc40 	bl	8004fe4 <HAL_TIM_PWM_Start>
}
 8002764:	bd10      	pop	{r4, pc}
	else HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002766:	f002 fc41 	bl	8004fec <HAL_TIM_PWM_Stop>
}
 800276a:	e7fb      	b.n	8002764 <BUZ+0x10>
 800276c:	20000184 	.word	0x20000184

08002770 <menu_init_fuc>:
void menu_init_fuc(void){
 8002770:	b510      	push	{r4, lr}
	if(firF == run_state){
 8002772:	4c05      	ldr	r4, [pc, #20]	; (8002788 <menu_init_fuc+0x18>)
 8002774:	7823      	ldrb	r3, [r4, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d104      	bne.n	8002784 <menu_init_fuc+0x14>
		nextion_inst_set("dp=0");
 800277a:	4804      	ldr	r0, [pc, #16]	; (800278c <menu_init_fuc+0x1c>)
 800277c:	f7ff fcec 	bl	8002158 <nextion_inst_set>
		firF = stop_state;
 8002780:	2301      	movs	r3, #1
 8002782:	7023      	strb	r3, [r4, #0]
}
 8002784:	bd10      	pop	{r4, pc}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	2000012f 	.word	0x2000012f
 800278c:	0800644b 	.word	0x0800644b

08002790 <temp_init_fuc>:
void temp_init_fuc(void){
 8002790:	b510      	push	{r4, lr}
	if(firF == run_state){
 8002792:	4c05      	ldr	r4, [pc, #20]	; (80027a8 <temp_init_fuc+0x18>)
 8002794:	7823      	ldrb	r3, [r4, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <temp_init_fuc+0x14>
		nextion_inst_set("dp=1");
 800279a:	4804      	ldr	r0, [pc, #16]	; (80027ac <temp_init_fuc+0x1c>)
 800279c:	f7ff fcdc 	bl	8002158 <nextion_inst_set>
		firF = stop_state;
 80027a0:	2301      	movs	r3, #1
 80027a2:	7023      	strb	r3, [r4, #0]
}
 80027a4:	bd10      	pop	{r4, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	2000012f 	.word	0x2000012f
 80027ac:	08006450 	.word	0x08006450

080027b0 <humidity_init_fuc>:
void humidity_init_fuc(void){
 80027b0:	b510      	push	{r4, lr}
	if(!firF){
 80027b2:	4c05      	ldr	r4, [pc, #20]	; (80027c8 <humidity_init_fuc+0x18>)
 80027b4:	7823      	ldrb	r3, [r4, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d104      	bne.n	80027c4 <humidity_init_fuc+0x14>
		nextion_inst_set("dp=2");
 80027ba:	4804      	ldr	r0, [pc, #16]	; (80027cc <humidity_init_fuc+0x1c>)
 80027bc:	f7ff fccc 	bl	8002158 <nextion_inst_set>
		firF = 1;
 80027c0:	2301      	movs	r3, #1
 80027c2:	7023      	strb	r3, [r4, #0]
}
 80027c4:	bd10      	pop	{r4, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	2000012f 	.word	0x2000012f
 80027cc:	08006455 	.word	0x08006455

080027d0 <co2_init_fuc>:
void co2_init_fuc(void){
 80027d0:	b510      	push	{r4, lr}
	if(firF == run_state){
 80027d2:	4c05      	ldr	r4, [pc, #20]	; (80027e8 <co2_init_fuc+0x18>)
 80027d4:	7823      	ldrb	r3, [r4, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d104      	bne.n	80027e4 <co2_init_fuc+0x14>
		nextion_inst_set("dp=3");
 80027da:	4804      	ldr	r0, [pc, #16]	; (80027ec <co2_init_fuc+0x1c>)
 80027dc:	f7ff fcbc 	bl	8002158 <nextion_inst_set>
		firF = stop_state;
 80027e0:	2301      	movs	r3, #1
 80027e2:	7023      	strb	r3, [r4, #0]
}
 80027e4:	bd10      	pop	{r4, pc}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	2000012f 	.word	0x2000012f
 80027ec:	0800645a 	.word	0x0800645a

080027f0 <menu_screen_update_fuc>:
void menu_screen_update_fuc(void){
 80027f0:	b570      	push	{r4, r5, r6, lr}
	if(!Re){
 80027f2:	4d16      	ldr	r5, [pc, #88]	; (800284c <menu_screen_update_fuc+0x5c>)
 80027f4:	782b      	ldrb	r3, [r5, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d127      	bne.n	800284a <menu_screen_update_fuc+0x5a>
		sprintf(bf, "door_button.txt=\"%s\"", door_state_text[door_lock]);
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <menu_screen_update_fuc+0x60>)
 80027fc:	4c15      	ldr	r4, [pc, #84]	; (8002854 <menu_screen_update_fuc+0x64>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4a15      	ldr	r2, [pc, #84]	; (8002858 <menu_screen_update_fuc+0x68>)
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	589a      	ldr	r2, [r3, r2]
 8002806:	4915      	ldr	r1, [pc, #84]	; (800285c <menu_screen_update_fuc+0x6c>)
 8002808:	0020      	movs	r0, r4
 800280a:	f003 f843 	bl	8005894 <siprintf>
		nextion_inst_set(bf);
 800280e:	0020      	movs	r0, r4
 8002810:	f7ff fca2 	bl	8002158 <nextion_inst_set>
		sprintf(bf, "car_t.txt=\"%s\"", car_state_text[car_state]);
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <menu_screen_update_fuc+0x70>)
 8002816:	4a13      	ldr	r2, [pc, #76]	; (8002864 <menu_screen_update_fuc+0x74>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4913      	ldr	r1, [pc, #76]	; (8002868 <menu_screen_update_fuc+0x78>)
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	589a      	ldr	r2, [r3, r2]
 8002820:	0020      	movs	r0, r4
 8002822:	f003 f837 	bl	8005894 <siprintf>
		nextion_inst_set(bf);
 8002826:	0020      	movs	r0, r4
 8002828:	f7ff fc96 	bl	8002158 <nextion_inst_set>
		sprintf(bf, "post_t.txt=\"%s\"", post > 0 ? post_state_text : "Empty");
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <menu_screen_update_fuc+0x7c>)
 800282e:	4a10      	ldr	r2, [pc, #64]	; (8002870 <menu_screen_update_fuc+0x80>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d100      	bne.n	8002838 <menu_screen_update_fuc+0x48>
 8002836:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <menu_screen_update_fuc+0x84>)
 8002838:	490f      	ldr	r1, [pc, #60]	; (8002878 <menu_screen_update_fuc+0x88>)
 800283a:	0020      	movs	r0, r4
 800283c:	f003 f82a 	bl	8005894 <siprintf>
		nextion_inst_set(bf);
 8002840:	0020      	movs	r0, r4
 8002842:	f7ff fc89 	bl	8002158 <nextion_inst_set>
		Re = 1;
 8002846:	2301      	movs	r3, #1
 8002848:	702b      	strb	r3, [r5, #0]
}
 800284a:	bd70      	pop	{r4, r5, r6, pc}
 800284c:	200000a8 	.word	0x200000a8
 8002850:	2000012c 	.word	0x2000012c
 8002854:	200000a9 	.word	0x200000a9
 8002858:	20000014 	.word	0x20000014
 800285c:	08006465 	.word	0x08006465
 8002860:	2000010d 	.word	0x2000010d
 8002864:	20000004 	.word	0x20000004
 8002868:	0800647a 	.word	0x0800647a
 800286c:	200002bd 	.word	0x200002bd
 8002870:	200002be 	.word	0x200002be
 8002874:	0800645f 	.word	0x0800645f
 8002878:	08006489 	.word	0x08006489

0800287c <password_set_screen_fuc>:
void password_set_screen_fuc(void){
 800287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(firF == run_state){
 800287e:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <password_set_screen_fuc+0xb8>)
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	2a00      	cmp	r2, #0
 8002884:	d10f      	bne.n	80028a6 <password_set_screen_fuc+0x2a>
		firF = stop_state;
 8002886:	3201      	adds	r2, #1
		nextion_inst_set("cls WHITE");
 8002888:	482b      	ldr	r0, [pc, #172]	; (8002938 <password_set_screen_fuc+0xbc>)
		firF = stop_state;
 800288a:	701a      	strb	r2, [r3, #0]
		nextion_inst_set("cls WHITE");
 800288c:	f7ff fc64 	bl	8002158 <nextion_inst_set>
		sprintf(bf, "xstr 0,0,200,30,0,BLACK,WHITE,0,1,1,\"Input PASSWORD: Setting\"");
 8002890:	4c2a      	ldr	r4, [pc, #168]	; (800293c <password_set_screen_fuc+0xc0>)
 8002892:	492b      	ldr	r1, [pc, #172]	; (8002940 <password_set_screen_fuc+0xc4>)
 8002894:	0020      	movs	r0, r4
 8002896:	f003 f81d 	bl	80058d4 <strcpy>
		nextion_inst_set(bf);
 800289a:	0020      	movs	r0, r4
 800289c:	f7ff fc5c 	bl	8002158 <nextion_inst_set>
		password_fuc.touch_pad_fuc();
 80028a0:	4b28      	ldr	r3, [pc, #160]	; (8002944 <password_set_screen_fuc+0xc8>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4798      	blx	r3
	if(!Re){
 80028a6:	4b28      	ldr	r3, [pc, #160]	; (8002948 <password_set_screen_fuc+0xcc>)
 80028a8:	781f      	ldrb	r7, [r3, #0]
 80028aa:	2f00      	cmp	r7, #0
 80028ac:	d140      	bne.n	8002930 <password_set_screen_fuc+0xb4>
		Re = 1;
 80028ae:	2201      	movs	r2, #1
 80028b0:	25fa      	movs	r5, #250	; 0xfa
 80028b2:	4e24      	ldr	r6, [pc, #144]	; (8002944 <password_set_screen_fuc+0xc8>)
 80028b4:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0 ; i < 4 ; i++){
 80028b6:	360c      	adds	r6, #12
			sprintf(bf, "xstr %d,50,30,30,0,BLACK,WHITE,1,1,1,\"%c\"", x_buf, password_fuc.input_password[i] == '\0' ? ' ' : password_fuc.input_password[i]);
 80028b8:	7833      	ldrb	r3, [r6, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d100      	bne.n	80028c0 <password_set_screen_fuc+0x44>
 80028be:	3320      	adds	r3, #32
 80028c0:	4c1e      	ldr	r4, [pc, #120]	; (800293c <password_set_screen_fuc+0xc0>)
 80028c2:	002a      	movs	r2, r5
 80028c4:	4921      	ldr	r1, [pc, #132]	; (800294c <password_set_screen_fuc+0xd0>)
 80028c6:	0020      	movs	r0, r4
 80028c8:	f002 ffe4 	bl	8005894 <siprintf>
			nextion_inst_set(bf);
 80028cc:	0020      	movs	r0, r4
 80028ce:	f7ff fc43 	bl	8002158 <nextion_inst_set>
			sprintf(bf, "draw %d,50,%d+30,50+30,BLACK", x_buf, x_buf);
 80028d2:	002b      	movs	r3, r5
 80028d4:	002a      	movs	r2, r5
 80028d6:	491e      	ldr	r1, [pc, #120]	; (8002950 <password_set_screen_fuc+0xd4>)
 80028d8:	0020      	movs	r0, r4
 80028da:	f002 ffdb 	bl	8005894 <siprintf>
			nextion_inst_set(bf);
 80028de:	0020      	movs	r0, r4
 80028e0:	f7ff fc3a 	bl	8002158 <nextion_inst_set>
		for(uint8_t i = 0 ; i < 4 ; i++){
 80028e4:	23e1      	movs	r3, #225	; 0xe1
 80028e6:	3532      	adds	r5, #50	; 0x32
 80028e8:	3601      	adds	r6, #1
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	429d      	cmp	r5, r3
 80028ee:	d1e3      	bne.n	80028b8 <password_set_screen_fuc+0x3c>
		if(password_fuc.input_num >= 2){
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <password_set_screen_fuc+0xc8>)
 80028f2:	7d9a      	ldrb	r2, [r3, #22]
			for(uint8_t i = 0 ; i < password_fuc.input_num - 1 ; i++)
 80028f4:	2300      	movs	r3, #0
 80028f6:	1e51      	subs	r1, r2, #1
		if(password_fuc.input_num >= 2){
 80028f8:	2a01      	cmp	r2, #1
 80028fa:	d80b      	bhi.n	8002914 <password_set_screen_fuc+0x98>
		else nextion_inst_set("pic 292,150,2");
 80028fc:	4815      	ldr	r0, [pc, #84]	; (8002954 <password_set_screen_fuc+0xd8>)
 80028fe:	e015      	b.n	800292c <password_set_screen_fuc+0xb0>
				if(password_fuc.input_password[i] == password_fuc.input_password[i + 1]) check++;
 8002900:	4a10      	ldr	r2, [pc, #64]	; (8002944 <password_set_screen_fuc+0xc8>)
 8002902:	18d2      	adds	r2, r2, r3
 8002904:	7b10      	ldrb	r0, [r2, #12]
 8002906:	7b52      	ldrb	r2, [r2, #13]
 8002908:	4290      	cmp	r0, r2
 800290a:	d101      	bne.n	8002910 <password_set_screen_fuc+0x94>
 800290c:	3701      	adds	r7, #1
 800290e:	b2ff      	uxtb	r7, r7
			for(uint8_t i = 0 ; i < password_fuc.input_num - 1 ; i++)
 8002910:	3301      	adds	r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	428b      	cmp	r3, r1
 8002916:	dbf3      	blt.n	8002900 <password_set_screen_fuc+0x84>
			check = check > 2 ? 2 : check;
 8002918:	1c3a      	adds	r2, r7, #0
 800291a:	2f02      	cmp	r7, #2
 800291c:	d900      	bls.n	8002920 <password_set_screen_fuc+0xa4>
 800291e:	2202      	movs	r2, #2
			sprintf(bf, "pic 292,150,%d", check);
 8002920:	0020      	movs	r0, r4
 8002922:	490d      	ldr	r1, [pc, #52]	; (8002958 <password_set_screen_fuc+0xdc>)
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f002 ffb5 	bl	8005894 <siprintf>
			nextion_inst_set(bf);
 800292a:	0020      	movs	r0, r4
		else nextion_inst_set("pic 292,150,2");
 800292c:	f7ff fc14 	bl	8002158 <nextion_inst_set>
}
 8002930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	2000012f 	.word	0x2000012f
 8002938:	08006348 	.word	0x08006348
 800293c:	200000a9 	.word	0x200000a9
 8002940:	08006499 	.word	0x08006499
 8002944:	20000288 	.word	0x20000288
 8002948:	200000a8 	.word	0x200000a8
 800294c:	0800638f 	.word	0x0800638f
 8002950:	080063b9 	.word	0x080063b9
 8002954:	080064e6 	.word	0x080064e6
 8002958:	080064d7 	.word	0x080064d7

0800295c <temp_screen_update_fuc>:
void temp_screen_update_fuc(void){
 800295c:	b570      	push	{r4, r5, r6, lr}
	if(HAL_GetTick() - t > 1000){
 800295e:	f000 ff65 	bl	800382c <HAL_GetTick>
 8002962:	4c17      	ldr	r4, [pc, #92]	; (80029c0 <temp_screen_update_fuc+0x64>)
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	1ac0      	subs	r0, r0, r3
 8002968:	23fa      	movs	r3, #250	; 0xfa
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4298      	cmp	r0, r3
 800296e:	d926      	bls.n	80029be <temp_screen_update_fuc+0x62>
		t = HAL_GetTick();
 8002970:	f000 ff5c 	bl	800382c <HAL_GetTick>
		sprintf(bf, "temp_n.val=%d", (uint16_t)(user_sht41.sht41_value.temperature * 10));
 8002974:	4d13      	ldr	r5, [pc, #76]	; (80029c4 <temp_screen_update_fuc+0x68>)
 8002976:	4914      	ldr	r1, [pc, #80]	; (80029c8 <temp_screen_update_fuc+0x6c>)
		t = HAL_GetTick();
 8002978:	6020      	str	r0, [r4, #0]
		sprintf(bf, "temp_n.val=%d", (uint16_t)(user_sht41.sht41_value.temperature * 10));
 800297a:	6828      	ldr	r0, [r5, #0]
 800297c:	f7fd ffc8 	bl	8000910 <__aeabi_fmul>
 8002980:	f7fd fdac 	bl	80004dc <__aeabi_f2uiz>
 8002984:	4c11      	ldr	r4, [pc, #68]	; (80029cc <temp_screen_update_fuc+0x70>)
 8002986:	b282      	uxth	r2, r0
 8002988:	4911      	ldr	r1, [pc, #68]	; (80029d0 <temp_screen_update_fuc+0x74>)
 800298a:	0020      	movs	r0, r4
 800298c:	f002 ff82 	bl	8005894 <siprintf>
		nextion_inst_set(bf);
 8002990:	0020      	movs	r0, r4
 8002992:	f7ff fbe1 	bl	8002158 <nextion_inst_set>
		sprintf(bf, "temp_gauge.val=%d", (uint8_t)((user_sht41.sht41_value.temperature - 20) * 6.6));
 8002996:	6828      	ldr	r0, [r5, #0]
 8002998:	490e      	ldr	r1, [pc, #56]	; (80029d4 <temp_screen_update_fuc+0x78>)
 800299a:	f7fe f8df 	bl	8000b5c <__aeabi_fsub>
 800299e:	f7ff f921 	bl	8001be4 <__aeabi_f2d>
 80029a2:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <temp_screen_update_fuc+0x7c>)
 80029a4:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <temp_screen_update_fuc+0x80>)
 80029a6:	f7fe fae9 	bl	8000f7c <__aeabi_dmul>
 80029aa:	f7fd fdaf 	bl	800050c <__aeabi_d2uiz>
 80029ae:	490c      	ldr	r1, [pc, #48]	; (80029e0 <temp_screen_update_fuc+0x84>)
 80029b0:	b2c2      	uxtb	r2, r0
 80029b2:	0020      	movs	r0, r4
 80029b4:	f002 ff6e 	bl	8005894 <siprintf>
		nextion_inst_set(bf);
 80029b8:	0020      	movs	r0, r4
 80029ba:	f7ff fbcd 	bl	8002158 <nextion_inst_set>
}
 80029be:	bd70      	pop	{r4, r5, r6, pc}
 80029c0:	200002d4 	.word	0x200002d4
 80029c4:	20000334 	.word	0x20000334
 80029c8:	41200000 	.word	0x41200000
 80029cc:	200000a9 	.word	0x200000a9
 80029d0:	080064f4 	.word	0x080064f4
 80029d4:	41a00000 	.word	0x41a00000
 80029d8:	66666666 	.word	0x66666666
 80029dc:	401a6666 	.word	0x401a6666
 80029e0:	08006502 	.word	0x08006502

080029e4 <humidity_screen_update_fuc>:
void humidity_screen_update_fuc(void){
 80029e4:	b570      	push	{r4, r5, r6, lr}
	if(HAL_GetTick() - t > 1000){
 80029e6:	f000 ff21 	bl	800382c <HAL_GetTick>
 80029ea:	4c19      	ldr	r4, [pc, #100]	; (8002a50 <humidity_screen_update_fuc+0x6c>)
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	1ac0      	subs	r0, r0, r3
 80029f0:	23fa      	movs	r3, #250	; 0xfa
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4298      	cmp	r0, r3
 80029f6:	d91e      	bls.n	8002a36 <humidity_screen_update_fuc+0x52>
		t = HAL_GetTick();
 80029f8:	f000 ff18 	bl	800382c <HAL_GetTick>
 80029fc:	6020      	str	r0, [r4, #0]
		sprintf(bf, "hum_n.val=%d", (uint16_t)(user_sht41.sht41_value.humidity * 10));
 80029fe:	4c15      	ldr	r4, [pc, #84]	; (8002a54 <humidity_screen_update_fuc+0x70>)
 8002a00:	4915      	ldr	r1, [pc, #84]	; (8002a58 <humidity_screen_update_fuc+0x74>)
 8002a02:	6860      	ldr	r0, [r4, #4]
 8002a04:	f7fd ff84 	bl	8000910 <__aeabi_fmul>
 8002a08:	f7fd fd68 	bl	80004dc <__aeabi_f2uiz>
 8002a0c:	4d13      	ldr	r5, [pc, #76]	; (8002a5c <humidity_screen_update_fuc+0x78>)
 8002a0e:	b282      	uxth	r2, r0
 8002a10:	4913      	ldr	r1, [pc, #76]	; (8002a60 <humidity_screen_update_fuc+0x7c>)
 8002a12:	0028      	movs	r0, r5
 8002a14:	f002 ff3e 	bl	8005894 <siprintf>
		nextion_inst_set(bf);
 8002a18:	0028      	movs	r0, r5
 8002a1a:	f7ff fb9d 	bl	8002158 <nextion_inst_set>
		hum_value = (uint8_t)user_sht41.sht41_value.humidity;
 8002a1e:	6860      	ldr	r0, [r4, #4]
 8002a20:	f7fd fd5c 	bl	80004dc <__aeabi_f2uiz>
 8002a24:	b2c0      	uxtb	r0, r0
		if(hum_value < 40){
 8002a26:	2827      	cmp	r0, #39	; 0x27
 8002a28:	d806      	bhi.n	8002a38 <humidity_screen_update_fuc+0x54>
			nextion_inst_set("hum_state.txt=\"Dry\"");
 8002a2a:	480e      	ldr	r0, [pc, #56]	; (8002a64 <humidity_screen_update_fuc+0x80>)
 8002a2c:	f7ff fb94 	bl	8002158 <nextion_inst_set>
			nextion_inst_set("hum_color.pco=61195");
 8002a30:	480d      	ldr	r0, [pc, #52]	; (8002a68 <humidity_screen_update_fuc+0x84>)
			nextion_inst_set("hum_color.pco=63488");
 8002a32:	f7ff fb91 	bl	8002158 <nextion_inst_set>
}
 8002a36:	bd70      	pop	{r4, r5, r6, pc}
		else if(hum_value < 60){
 8002a38:	283b      	cmp	r0, #59	; 0x3b
 8002a3a:	d804      	bhi.n	8002a46 <humidity_screen_update_fuc+0x62>
			nextion_inst_set("hum_state.txt=\"Appropriate\"");
 8002a3c:	480b      	ldr	r0, [pc, #44]	; (8002a6c <humidity_screen_update_fuc+0x88>)
 8002a3e:	f7ff fb8b 	bl	8002158 <nextion_inst_set>
			nextion_inst_set("hum_color.pco=1024");
 8002a42:	480b      	ldr	r0, [pc, #44]	; (8002a70 <humidity_screen_update_fuc+0x8c>)
 8002a44:	e7f5      	b.n	8002a32 <humidity_screen_update_fuc+0x4e>
			nextion_inst_set("hum_state.txt=\"Humid\"");
 8002a46:	480b      	ldr	r0, [pc, #44]	; (8002a74 <humidity_screen_update_fuc+0x90>)
 8002a48:	f7ff fb86 	bl	8002158 <nextion_inst_set>
			nextion_inst_set("hum_color.pco=63488");
 8002a4c:	480a      	ldr	r0, [pc, #40]	; (8002a78 <humidity_screen_update_fuc+0x94>)
 8002a4e:	e7f0      	b.n	8002a32 <humidity_screen_update_fuc+0x4e>
 8002a50:	200002d0 	.word	0x200002d0
 8002a54:	20000334 	.word	0x20000334
 8002a58:	41200000 	.word	0x41200000
 8002a5c:	200000a9 	.word	0x200000a9
 8002a60:	08006514 	.word	0x08006514
 8002a64:	08006521 	.word	0x08006521
 8002a68:	08006535 	.word	0x08006535
 8002a6c:	08006549 	.word	0x08006549
 8002a70:	08006565 	.word	0x08006565
 8002a74:	08006578 	.word	0x08006578
 8002a78:	0800658e 	.word	0x0800658e

08002a7c <co2_screen_update_fuc>:
void co2_screen_update_fuc(void){
 8002a7c:	b570      	push	{r4, r5, r6, lr}
	if(HAL_GetTick() - t > 1000){
 8002a7e:	f000 fed5 	bl	800382c <HAL_GetTick>
 8002a82:	4c12      	ldr	r4, [pc, #72]	; (8002acc <co2_screen_update_fuc+0x50>)
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	1ac0      	subs	r0, r0, r3
 8002a88:	23fa      	movs	r3, #250	; 0xfa
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4298      	cmp	r0, r3
 8002a8e:	d91b      	bls.n	8002ac8 <co2_screen_update_fuc+0x4c>
		t = HAL_GetTick();
 8002a90:	f000 fecc 	bl	800382c <HAL_GetTick>
		sprintf(bf, "co2_n.val=%d", user_ens160.ens160_value);
 8002a94:	4d0e      	ldr	r5, [pc, #56]	; (8002ad0 <co2_screen_update_fuc+0x54>)
		t = HAL_GetTick();
 8002a96:	6020      	str	r0, [r4, #0]
		sprintf(bf, "co2_n.val=%d", user_ens160.ens160_value);
 8002a98:	882a      	ldrh	r2, [r5, #0]
 8002a9a:	4c0e      	ldr	r4, [pc, #56]	; (8002ad4 <co2_screen_update_fuc+0x58>)
 8002a9c:	b292      	uxth	r2, r2
 8002a9e:	490e      	ldr	r1, [pc, #56]	; (8002ad8 <co2_screen_update_fuc+0x5c>)
 8002aa0:	0020      	movs	r0, r4
 8002aa2:	f002 fef7 	bl	8005894 <siprintf>
		nextion_inst_set(bf);
 8002aa6:	0020      	movs	r0, r4
 8002aa8:	f7ff fb56 	bl	8002158 <nextion_inst_set>
		image_state = (user_ens160.ens160_value - 1) / 500;
 8002aac:	21fa      	movs	r1, #250	; 0xfa
 8002aae:	8828      	ldrh	r0, [r5, #0]
 8002ab0:	0049      	lsls	r1, r1, #1
 8002ab2:	3801      	subs	r0, #1
 8002ab4:	f7fd fbd8 	bl	8000268 <__divsi3>
		sprintf(bf, "co2_state.pic=%d", image_state);
 8002ab8:	4908      	ldr	r1, [pc, #32]	; (8002adc <co2_screen_update_fuc+0x60>)
		image_state = (user_ens160.ens160_value - 1) / 500;
 8002aba:	0002      	movs	r2, r0
		sprintf(bf, "co2_state.pic=%d", image_state);
 8002abc:	0020      	movs	r0, r4
 8002abe:	f002 fee9 	bl	8005894 <siprintf>
		nextion_inst_set(bf);
 8002ac2:	0020      	movs	r0, r4
 8002ac4:	f7ff fb48 	bl	8002158 <nextion_inst_set>
}
 8002ac8:	bd70      	pop	{r4, r5, r6, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	200002cc 	.word	0x200002cc
 8002ad0:	20000318 	.word	0x20000318
 8002ad4:	200000a9 	.word	0x200000a9
 8002ad8:	080065a2 	.word	0x080065a2
 8002adc:	080065af 	.word	0x080065af

08002ae0 <sw.part.0>:
uint8_t sw(uint8_t sw_num){
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	b510      	push	{r4, lr}
	else if(sw_num == 2){
 8002ae4:	2802      	cmp	r0, #2
 8002ae6:	d116      	bne.n	8002b16 <sw.part.0+0x36>
		if(SW_READ(2)) old_key = 2;
 8002ae8:	22a0      	movs	r2, #160	; 0xa0
 8002aea:	05d2      	lsls	r2, r2, #23
 8002aec:	6911      	ldr	r1, [r2, #16]
 8002aee:	0008      	movs	r0, r1
 8002af0:	4018      	ands	r0, r3
 8002af2:	4219      	tst	r1, r3
 8002af4:	d102      	bne.n	8002afc <sw.part.0+0x1c>
		if(SW_READ(3)) old_key = 3;
 8002af6:	4a10      	ldr	r2, [pc, #64]	; (8002b38 <sw.part.0+0x58>)
 8002af8:	7013      	strb	r3, [r2, #0]
 8002afa:	e00b      	b.n	8002b14 <sw.part.0+0x34>
		else if(!SW_READ(2) && old_key == 2) { old_key = 0; return 1; }
 8002afc:	6912      	ldr	r2, [r2, #16]
	return 0;
 8002afe:	2000      	movs	r0, #0
		else if(!SW_READ(2) && old_key == 2) { old_key = 0; return 1; }
 8002b00:	421a      	tst	r2, r3
 8002b02:	d007      	beq.n	8002b14 <sw.part.0+0x34>
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <sw.part.0+0x58>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d103      	bne.n	8002b14 <sw.part.0+0x34>
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2001      	movs	r0, #1
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <sw.part.0+0x58>)
 8002b12:	701a      	strb	r2, [r3, #0]
}
 8002b14:	bd10      	pop	{r4, pc}
	return 0;
 8002b16:	2000      	movs	r0, #0
	else if(sw_num == 3){
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d1fb      	bne.n	8002b14 <sw.part.0+0x34>
		if(SW_READ(3)) old_key = 3;
 8002b1c:	21a0      	movs	r1, #160	; 0xa0
 8002b1e:	2204      	movs	r2, #4
 8002b20:	05c9      	lsls	r1, r1, #23
 8002b22:	690c      	ldr	r4, [r1, #16]
 8002b24:	4214      	tst	r4, r2
 8002b26:	d0e6      	beq.n	8002af6 <sw.part.0+0x16>
		else if(!SW_READ(3) && old_key == 3) { old_key = 0; return 1; }
 8002b28:	690b      	ldr	r3, [r1, #16]
 8002b2a:	4213      	tst	r3, r2
 8002b2c:	d0f2      	beq.n	8002b14 <sw.part.0+0x34>
 8002b2e:	4b02      	ldr	r3, [pc, #8]	; (8002b38 <sw.part.0+0x58>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d1ee      	bne.n	8002b14 <sw.part.0+0x34>
 8002b36:	e7e9      	b.n	8002b0c <sw.part.0+0x2c>
 8002b38:	20000284 	.word	0x20000284

08002b3c <eeprom_save>:
void eeprom_save(uint8_t data, uint8_t addr){
 8002b3c:	b570      	push	{r4, r5, r6, lr}
 8002b3e:	000c      	movs	r4, r1
 8002b40:	0005      	movs	r5, r0
	HAL_FLASHEx_DATAEEPROM_Unlock();
 8002b42:	f000 fee1 	bl	8003908 <HAL_FLASHEx_DATAEEPROM_Unlock>
	*(__IO uint8_t*)(DATA_EEPROM_BASE + addr) = data;
 8002b46:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <eeprom_save+0x18>)
 8002b48:	18e4      	adds	r4, r4, r3
 8002b4a:	7025      	strb	r5, [r4, #0]
	HAL_FLASHEx_DATAEEPROM_Lock();
 8002b4c:	f000 fef4 	bl	8003938 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8002b50:	bd70      	pop	{r4, r5, r6, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	08080000 	.word	0x08080000

08002b58 <eeprom_save_string>:
void eeprom_save_string(char* string, uint8_t addr){
 8002b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5a:	0004      	movs	r4, r0
 8002b5c:	000f      	movs	r7, r1
	uint8_t len = strlen(string);
 8002b5e:	f7fd fadd 	bl	800011c <strlen>
	for(uint8_t i = 0 ; i < len ; i++) eeprom_save(string[i] - '0', addr + i);
 8002b62:	0026      	movs	r6, r4
 8002b64:	b2c5      	uxtb	r5, r0
 8002b66:	1965      	adds	r5, r4, r5
 8002b68:	42ae      	cmp	r6, r5
 8002b6a:	d100      	bne.n	8002b6e <eeprom_save_string+0x16>
}
 8002b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for(uint8_t i = 0 ; i < len ; i++) eeprom_save(string[i] - '0', addr + i);
 8002b6e:	7830      	ldrb	r0, [r6, #0]
 8002b70:	1b39      	subs	r1, r7, r4
 8002b72:	1989      	adds	r1, r1, r6
 8002b74:	3830      	subs	r0, #48	; 0x30
 8002b76:	b2c9      	uxtb	r1, r1
 8002b78:	b2c0      	uxtb	r0, r0
 8002b7a:	f7ff ffdf 	bl	8002b3c <eeprom_save>
 8002b7e:	3601      	adds	r6, #1
 8002b80:	e7f2      	b.n	8002b68 <eeprom_save_string+0x10>
	...

08002b84 <eeprom_load_string>:
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002b84:	1d0a      	adds	r2, r1, #4
		string[i] = *(__IO char*)(DATA_EEPROM_BASE + addr + i) + '0';
 8002b86:	1a40      	subs	r0, r0, r1
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <eeprom_load_string+0x18>)
 8002b8a:	18cb      	adds	r3, r1, r3
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	3330      	adds	r3, #48	; 0x30
 8002b90:	5443      	strb	r3, [r0, r1]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002b92:	3101      	adds	r1, #1
 8002b94:	4291      	cmp	r1, r2
 8002b96:	d1f7      	bne.n	8002b88 <eeprom_load_string+0x4>
}
 8002b98:	4770      	bx	lr
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	08080000 	.word	0x08080000

08002ba0 <system_reset>:
void system_reset(void){
 8002ba0:	b510      	push	{r4, lr}
	HAL_DeInit();
 8002ba2:	f000 fdeb 	bl	800377c <HAL_DeInit>
	HAL_NVIC_SystemReset();
 8002ba6:	f000 fe83 	bl	80038b0 <HAL_NVIC_SystemReset>
}
 8002baa:	bd10      	pop	{r4, pc}

08002bac <sw>:
uint8_t sw(uint8_t sw_num){
 8002bac:	0002      	movs	r2, r0
 8002bae:	b510      	push	{r4, lr}
	if(sw_num == 1){
 8002bb0:	2801      	cmp	r0, #1
 8002bb2:	d115      	bne.n	8002be0 <sw+0x34>
		if(SW_READ(1)) old_key = 1;
 8002bb4:	21a0      	movs	r1, #160	; 0xa0
 8002bb6:	05c9      	lsls	r1, r1, #23
 8002bb8:	6908      	ldr	r0, [r1, #16]
 8002bba:	0003      	movs	r3, r0
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	4210      	tst	r0, r2
 8002bc0:	d103      	bne.n	8002bca <sw+0x1e>
 8002bc2:	4909      	ldr	r1, [pc, #36]	; (8002be8 <sw+0x3c>)
 8002bc4:	700a      	strb	r2, [r1, #0]
	return 0;
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	e009      	b.n	8002bde <sw+0x32>
		else if(!SW_READ(1) && old_key == 1) { old_key = 0; return 1; }
 8002bca:	690b      	ldr	r3, [r1, #16]
	return 0;
 8002bcc:	2000      	movs	r0, #0
		else if(!SW_READ(1) && old_key == 1) { old_key = 0; return 1; }
 8002bce:	4213      	tst	r3, r2
 8002bd0:	d005      	beq.n	8002bde <sw+0x32>
 8002bd2:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <sw+0x3c>)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	7810      	ldrb	r0, [r2, #0]
 8002bd8:	2801      	cmp	r0, #1
 8002bda:	d1f4      	bne.n	8002bc6 <sw+0x1a>
 8002bdc:	7013      	strb	r3, [r2, #0]
}
 8002bde:	bd10      	pop	{r4, pc}
 8002be0:	f7ff ff7e 	bl	8002ae0 <sw.part.0>
 8002be4:	e7fb      	b.n	8002bde <sw+0x32>
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	20000284 	.word	0x20000284

08002bec <door_lock_control>:
void door_lock_control(void){
 8002bec:	b510      	push	{r4, lr}
	if(menu_fuc.touch_id == 8){
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <door_lock_control+0x60>)
 8002bf0:	4c17      	ldr	r4, [pc, #92]	; (8002c50 <door_lock_control+0x64>)
 8002bf2:	791b      	ldrb	r3, [r3, #4]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d110      	bne.n	8002c1a <door_lock_control+0x2e>
		if(touch_state == 0) { touch_state = 1; tick = HAL_GetTick(); }
 8002bf8:	7823      	ldrb	r3, [r4, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d11c      	bne.n	8002c38 <door_lock_control+0x4c>
 8002bfe:	3301      	adds	r3, #1
 8002c00:	7023      	strb	r3, [r4, #0]
 8002c02:	f000 fe13 	bl	800382c <HAL_GetTick>
 8002c06:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <door_lock_control+0x68>)
 8002c08:	6018      	str	r0, [r3, #0]
		door_lock = !door_lock;
 8002c0a:	4a13      	ldr	r2, [pc, #76]	; (8002c58 <door_lock_control+0x6c>)
 8002c0c:	7813      	ldrb	r3, [r2, #0]
 8002c0e:	4259      	negs	r1, r3
 8002c10:	414b      	adcs	r3, r1
 8002c12:	7013      	strb	r3, [r2, #0]
		Re = 0;
 8002c14:	2200      	movs	r2, #0
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <door_lock_control+0x70>)
 8002c18:	701a      	strb	r2, [r3, #0]
	if(touch_state == 1){
 8002c1a:	7823      	ldrb	r3, [r4, #0]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d110      	bne.n	8002c42 <door_lock_control+0x56>
		if(HAL_GetTick() - tick > 500) touch_state = 0;
 8002c20:	f000 fe04 	bl	800382c <HAL_GetTick>
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <door_lock_control+0x68>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	1ac0      	subs	r0, r0, r3
 8002c2a:	23fa      	movs	r3, #250	; 0xfa
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4298      	cmp	r0, r3
 8002c30:	d901      	bls.n	8002c36 <door_lock_control+0x4a>
 8002c32:	2300      	movs	r3, #0
 8002c34:	7023      	strb	r3, [r4, #0]
}
 8002c36:	bd10      	pop	{r4, pc}
		else if(touch_state == 1) { touch_state = 2; }
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d1e6      	bne.n	8002c0a <door_lock_control+0x1e>
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	7023      	strb	r3, [r4, #0]
 8002c40:	e7e3      	b.n	8002c0a <door_lock_control+0x1e>
	else if(touch_state == 2) { system_reset(); }
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d1f7      	bne.n	8002c36 <door_lock_control+0x4a>
 8002c46:	f7ff ffab 	bl	8002ba0 <system_reset>
}
 8002c4a:	e7f4      	b.n	8002c36 <door_lock_control+0x4a>
 8002c4c:	20000268 	.word	0x20000268
 8002c50:	20000304 	.word	0x20000304
 8002c54:	20000300 	.word	0x20000300
 8002c58:	2000012c 	.word	0x2000012c
 8002c5c:	200000a8 	.word	0x200000a8

08002c60 <door_open_control>:
void door_open_control(void){
 8002c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LED(1, door_state);
 8002c62:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <door_open_control+0xdc>)
	if(sw(1)){
 8002c64:	2001      	movs	r0, #1
	LED(1, door_state);
 8002c66:	781c      	ldrb	r4, [r3, #0]
 8002c68:	0023      	movs	r3, r4
 8002c6a:	1e5a      	subs	r2, r3, #1
 8002c6c:	4193      	sbcs	r3, r2
 8002c6e:	4a34      	ldr	r2, [pc, #208]	; (8002d40 <door_open_control+0xe0>)
 8002c70:	425b      	negs	r3, r3
 8002c72:	4013      	ands	r3, r2
 8002c74:	22a0      	movs	r2, #160	; 0xa0
 8002c76:	3308      	adds	r3, #8
 8002c78:	05d2      	lsls	r2, r2, #23
 8002c7a:	6193      	str	r3, [r2, #24]
	if(sw(1)){
 8002c7c:	f7ff ff96 	bl	8002bac <sw>
 8002c80:	4d30      	ldr	r5, [pc, #192]	; (8002d44 <door_open_control+0xe4>)
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d00e      	beq.n	8002ca4 <door_open_control+0x44>
		if(door_lock == 0 && door_state == door_close_state){
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <door_open_control+0xe8>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d123      	bne.n	8002cd6 <door_open_control+0x76>
 8002c8e:	2c00      	cmp	r4, #0
 8002c90:	d150      	bne.n	8002d34 <door_open_control+0xd4>
			user_buz.buzM = buz_door_on;
 8002c92:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <door_open_control+0xec>)
 8002c94:	4a2e      	ldr	r2, [pc, #184]	; (8002d50 <door_open_control+0xf0>)
 8002c96:	801a      	strh	r2, [r3, #0]
			pushed_sw = 1;
 8002c98:	2301      	movs	r3, #1
			pushed_sw = 2;
 8002c9a:	702b      	strb	r3, [r5, #0]
			t = HAL_GetTick();
 8002c9c:	f000 fdc6 	bl	800382c <HAL_GetTick>
 8002ca0:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <door_open_control+0xf4>)
 8002ca2:	6018      	str	r0, [r3, #0]
	if(pushed_sw == 1){
 8002ca4:	782c      	ldrb	r4, [r5, #0]
 8002ca6:	2c01      	cmp	r4, #1
 8002ca8:	d132      	bne.n	8002d10 <door_open_control+0xb0>
		if(user_buz.buzM == 0){
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <door_open_control+0xec>)
 8002cac:	4e29      	ldr	r6, [pc, #164]	; (8002d54 <door_open_control+0xf4>)
 8002cae:	781f      	ldrb	r7, [r3, #0]
 8002cb0:	2f00      	cmp	r7, #0
 8002cb2:	d126      	bne.n	8002d02 <door_open_control+0xa2>
			if(HAL_GetTick() - t > 3000){                            // wait 3 second
 8002cb4:	f000 fdba 	bl	800382c <HAL_GetTick>
 8002cb8:	6833      	ldr	r3, [r6, #0]
 8002cba:	1ac0      	subs	r0, r0, r3
 8002cbc:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <door_open_control+0xf8>)
 8002cbe:	4298      	cmp	r0, r3
 8002cc0:	d925      	bls.n	8002d0e <door_open_control+0xae>
				if(HAL_GetTick() - t < 4000) setMotor(DRV8830_CW);   // run motor 1 second
 8002cc2:	f000 fdb3 	bl	800382c <HAL_GetTick>
 8002cc6:	6833      	ldr	r3, [r6, #0]
 8002cc8:	1ac0      	subs	r0, r0, r3
 8002cca:	23fa      	movs	r3, #250	; 0xfa
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	4298      	cmp	r0, r3
 8002cd0:	d20b      	bcs.n	8002cea <door_open_control+0x8a>
		if(HAL_GetTick() - t < 1000) setMotor(DRV8830_CCW);
 8002cd2:	0020      	movs	r0, r4
 8002cd4:	e012      	b.n	8002cfc <door_open_control+0x9c>
		else if(door_state == door_open_state){
 8002cd6:	2c01      	cmp	r4, #1
 8002cd8:	d101      	bne.n	8002cde <door_open_control+0x7e>
			pushed_sw = 2;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e7dd      	b.n	8002c9a <door_open_control+0x3a>
		else if(door_lock == 1){
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d1e0      	bne.n	8002ca4 <door_open_control+0x44>
			user_buz.buzM = buz_door_on;
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <door_open_control+0xec>)
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <door_open_control+0xfc>)
 8002ce6:	801a      	strh	r2, [r3, #0]
 8002ce8:	e7dc      	b.n	8002ca4 <door_open_control+0x44>
					t = HAL_GetTick();
 8002cea:	f000 fd9f 	bl	800382c <HAL_GetTick>
 8002cee:	6030      	str	r0, [r6, #0]
					setMotor(DRV8830_STOP);
 8002cf0:	0038      	movs	r0, r7
					door_state = door_open_state;
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <door_open_control+0xdc>)
					pushed_sw = 0;
 8002cf4:	702f      	strb	r7, [r5, #0]
					door_state = door_open_state;
 8002cf6:	701c      	strb	r4, [r3, #0]
					door_open = 1;
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <door_open_control+0x100>)
 8002cfa:	701c      	strb	r4, [r3, #0]
			setMotor(DRV8830_STOP);
 8002cfc:	f7ff fa88 	bl	8002210 <setMotor>
}
 8002d00:	e005      	b.n	8002d0e <door_open_control+0xae>
		else { setMotor(DRV8830_STOP); t = HAL_GetTick(); }
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7ff fa84 	bl	8002210 <setMotor>
 8002d08:	f000 fd90 	bl	800382c <HAL_GetTick>
 8002d0c:	6030      	str	r0, [r6, #0]
}
 8002d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(pushed_sw == 2){
 8002d10:	2c02      	cmp	r4, #2
 8002d12:	d1fc      	bne.n	8002d0e <door_open_control+0xae>
		if(HAL_GetTick() - t < 1000) setMotor(DRV8830_CCW);
 8002d14:	f000 fd8a 	bl	800382c <HAL_GetTick>
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <door_open_control+0xf4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	1ac0      	subs	r0, r0, r3
 8002d1e:	23fa      	movs	r3, #250	; 0xfa
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4298      	cmp	r0, r3
 8002d24:	d3d5      	bcc.n	8002cd2 <door_open_control+0x72>
			door_state = door_close_state;
 8002d26:	2000      	movs	r0, #0
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <door_open_control+0xdc>)
			pushed_sw = 0;
 8002d2a:	7028      	strb	r0, [r5, #0]
			door_state = door_close_state;
 8002d2c:	7018      	strb	r0, [r3, #0]
			door_open = 0;
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <door_open_control+0x100>)
 8002d30:	7018      	strb	r0, [r3, #0]
			pushed_sw = 0;
 8002d32:	e7e3      	b.n	8002cfc <door_open_control+0x9c>
		else if(door_state == door_open_state){
 8002d34:	2c01      	cmp	r4, #1
 8002d36:	d1b5      	bne.n	8002ca4 <door_open_control+0x44>
 8002d38:	e7cf      	b.n	8002cda <door_open_control+0x7a>
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	2000012e 	.word	0x2000012e
 8002d40:	0007fff8 	.word	0x0007fff8
 8002d44:	200002c8 	.word	0x200002c8
 8002d48:	2000012c 	.word	0x2000012c
 8002d4c:	20000308 	.word	0x20000308
 8002d50:	00000201 	.word	0x00000201
 8002d54:	200002e0 	.word	0x200002e0
 8002d58:	00000bb8 	.word	0x00000bb8
 8002d5c:	00000401 	.word	0x00000401
 8002d60:	2000012d 	.word	0x2000012d

08002d64 <PIR_Sensor>:
void PIR_Sensor(void){
 8002d64:	b510      	push	{r4, lr}
	LED(2, pir_sen);
 8002d66:	4c14      	ldr	r4, [pc, #80]	; (8002db8 <PIR_Sensor+0x54>)
 8002d68:	7822      	ldrb	r2, [r4, #0]
 8002d6a:	0013      	movs	r3, r2
 8002d6c:	1e59      	subs	r1, r3, #1
 8002d6e:	418b      	sbcs	r3, r1
 8002d70:	4912      	ldr	r1, [pc, #72]	; (8002dbc <PIR_Sensor+0x58>)
 8002d72:	425b      	negs	r3, r3
 8002d74:	400b      	ands	r3, r1
 8002d76:	21a0      	movs	r1, #160	; 0xa0
 8002d78:	3310      	adds	r3, #16
 8002d7a:	05c9      	lsls	r1, r1, #23
 8002d7c:	618b      	str	r3, [r1, #24]
	if((PIR_LEFT || PIR_RIGHT) && pir_sen == 0) { pir_sen = 1; t = HAL_GetTick(); }
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <PIR_Sensor+0x5c>)
 8002d80:	6919      	ldr	r1, [r3, #16]
 8002d82:	0789      	lsls	r1, r1, #30
 8002d84:	d402      	bmi.n	8002d8c <PIR_Sensor+0x28>
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	071b      	lsls	r3, r3, #28
 8002d8a:	d507      	bpl.n	8002d9c <PIR_Sensor+0x38>
 8002d8c:	2a00      	cmp	r2, #0
 8002d8e:	d105      	bne.n	8002d9c <PIR_Sensor+0x38>
 8002d90:	2301      	movs	r3, #1
 8002d92:	7023      	strb	r3, [r4, #0]
 8002d94:	f000 fd4a 	bl	800382c <HAL_GetTick>
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <PIR_Sensor+0x60>)
 8002d9a:	6018      	str	r0, [r3, #0]
	if(pir_sen == 1){
 8002d9c:	7823      	ldrb	r3, [r4, #0]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d109      	bne.n	8002db6 <PIR_Sensor+0x52>
		if(HAL_GetTick() - t > 5000) pir_sen = 0;
 8002da2:	f000 fd43 	bl	800382c <HAL_GetTick>
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <PIR_Sensor+0x60>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	1ac0      	subs	r0, r0, r3
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <PIR_Sensor+0x64>)
 8002dae:	4298      	cmp	r0, r3
 8002db0:	d901      	bls.n	8002db6 <PIR_Sensor+0x52>
 8002db2:	2300      	movs	r3, #0
 8002db4:	7023      	strb	r3, [r4, #0]
}
 8002db6:	bd10      	pop	{r4, pc}
 8002db8:	200002bc 	.word	0x200002bc
 8002dbc:	000ffff0 	.word	0x000ffff0
 8002dc0:	50000400 	.word	0x50000400
 8002dc4:	200002dc 	.word	0x200002dc
 8002dc8:	00001388 	.word	0x00001388

08002dcc <car_call>:
void car_call(void){
 8002dcc:	b570      	push	{r4, r5, r6, lr}
	if(car_state == car_wating)       {  if(sw(2))                     { car_state = car_prepare; Re = 0; t = HAL_GetTick(); }  }
 8002dce:	4c1e      	ldr	r4, [pc, #120]	; (8002e48 <car_call+0x7c>)
 8002dd0:	7825      	ldrb	r5, [r4, #0]
 8002dd2:	2d00      	cmp	r5, #0
 8002dd4:	d10d      	bne.n	8002df2 <car_call+0x26>
	if(sw_num == 1){
 8002dd6:	2002      	movs	r0, #2
 8002dd8:	f7ff fe82 	bl	8002ae0 <sw.part.0>
	if(car_state == car_wating)       {  if(sw(2))                     { car_state = car_prepare; Re = 0; t = HAL_GetTick(); }  }
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	d017      	beq.n	8002e10 <car_call+0x44>
 8002de0:	2301      	movs	r3, #1
 8002de2:	7023      	strb	r3, [r4, #0]
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <car_call+0x80>)
 8002de6:	701d      	strb	r5, [r3, #0]
	else if(car_state == car_arrival) {  if(menu_fuc.touch_id == 6)    { car_state = car_ride;    Re = 0; t = HAL_GetTick(); }  }
 8002de8:	f000 fd20 	bl	800382c <HAL_GetTick>
 8002dec:	4b18      	ldr	r3, [pc, #96]	; (8002e50 <car_call+0x84>)
 8002dee:	6018      	str	r0, [r3, #0]
 8002df0:	e00e      	b.n	8002e10 <car_call+0x44>
	else if(car_state == car_prepare) {  if(HAL_GetTick() - t > 5000)  { car_state = car_arrival; Re = 0;                    }  }
 8002df2:	2d01      	cmp	r5, #1
 8002df4:	d10d      	bne.n	8002e12 <car_call+0x46>
 8002df6:	f000 fd19 	bl	800382c <HAL_GetTick>
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <car_call+0x84>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	1ac0      	subs	r0, r0, r3
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <car_call+0x88>)
 8002e02:	4298      	cmp	r0, r3
 8002e04:	d904      	bls.n	8002e10 <car_call+0x44>
 8002e06:	2302      	movs	r3, #2
 8002e08:	2200      	movs	r2, #0
 8002e0a:	7023      	strb	r3, [r4, #0]
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <car_call+0x80>)
 8002e0e:	701a      	strb	r2, [r3, #0]
}
 8002e10:	bd70      	pop	{r4, r5, r6, pc}
	else if(car_state == car_arrival) {  if(menu_fuc.touch_id == 6)    { car_state = car_ride;    Re = 0; t = HAL_GetTick(); }  }
 8002e12:	2d02      	cmp	r5, #2
 8002e14:	d109      	bne.n	8002e2a <car_call+0x5e>
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <car_call+0x8c>)
 8002e18:	791b      	ldrb	r3, [r3, #4]
 8002e1a:	2b06      	cmp	r3, #6
 8002e1c:	d1f8      	bne.n	8002e10 <car_call+0x44>
 8002e1e:	2200      	movs	r2, #0
 8002e20:	3b03      	subs	r3, #3
 8002e22:	7023      	strb	r3, [r4, #0]
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <car_call+0x80>)
 8002e26:	701a      	strb	r2, [r3, #0]
 8002e28:	e7de      	b.n	8002de8 <car_call+0x1c>
	else if(car_state == car_ride)    {  if(HAL_GetTick() - t > 10000) { car_state = car_wating;  Re = 0;                    }  }
 8002e2a:	2d03      	cmp	r5, #3
 8002e2c:	d1f0      	bne.n	8002e10 <car_call+0x44>
 8002e2e:	f000 fcfd 	bl	800382c <HAL_GetTick>
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <car_call+0x84>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	1ac0      	subs	r0, r0, r3
 8002e38:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <car_call+0x90>)
 8002e3a:	4298      	cmp	r0, r3
 8002e3c:	d9e8      	bls.n	8002e10 <car_call+0x44>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	4a02      	ldr	r2, [pc, #8]	; (8002e4c <car_call+0x80>)
 8002e42:	7023      	strb	r3, [r4, #0]
 8002e44:	7013      	strb	r3, [r2, #0]
}
 8002e46:	e7e3      	b.n	8002e10 <car_call+0x44>
 8002e48:	2000010d 	.word	0x2000010d
 8002e4c:	200000a8 	.word	0x200000a8
 8002e50:	200002d8 	.word	0x200002d8
 8002e54:	00001388 	.word	0x00001388
 8002e58:	20000268 	.word	0x20000268
 8002e5c:	00002710 	.word	0x00002710

08002e60 <post_box>:
void post_box(void){
 8002e60:	b510      	push	{r4, lr}
 8002e62:	2003      	movs	r0, #3
 8002e64:	f7ff fe3c 	bl	8002ae0 <sw.part.0>
 8002e68:	4c15      	ldr	r4, [pc, #84]	; (8002ec0 <post_box+0x60>)
	if(sw(3)){
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	d00a      	beq.n	8002e84 <post_box+0x24>
		post++, Re = 0;
 8002e6e:	2100      	movs	r1, #0
 8002e70:	7822      	ldrb	r2, [r4, #0]
 8002e72:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <post_box+0x64>)
 8002e74:	3201      	adds	r2, #1
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	7019      	strb	r1, [r3, #0]
		sprintf(post_state_text, "%d Box", post);
 8002e7a:	4813      	ldr	r0, [pc, #76]	; (8002ec8 <post_box+0x68>)
 8002e7c:	4913      	ldr	r1, [pc, #76]	; (8002ecc <post_box+0x6c>)
		post++, Re = 0;
 8002e7e:	7022      	strb	r2, [r4, #0]
		sprintf(post_state_text, "%d Box", post);
 8002e80:	f002 fd08 	bl	8005894 <siprintf>
	if(menu_fuc.touch_id == 7 && post > 0){
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <post_box+0x70>)
 8002e86:	791b      	ldrb	r3, [r3, #4]
 8002e88:	2b07      	cmp	r3, #7
 8002e8a:	d10c      	bne.n	8002ea6 <post_box+0x46>
 8002e8c:	7822      	ldrb	r2, [r4, #0]
 8002e8e:	2a00      	cmp	r2, #0
 8002e90:	d012      	beq.n	8002eb8 <post_box+0x58>
		post--; Re = 0;
 8002e92:	2100      	movs	r1, #0
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <post_box+0x64>)
 8002e96:	3a01      	subs	r2, #1
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	7019      	strb	r1, [r3, #0]
		sprintf(post_state_text, "%d Box", post);
 8002e9c:	480a      	ldr	r0, [pc, #40]	; (8002ec8 <post_box+0x68>)
 8002e9e:	490b      	ldr	r1, [pc, #44]	; (8002ecc <post_box+0x6c>)
		post--; Re = 0;
 8002ea0:	7022      	strb	r2, [r4, #0]
		sprintf(post_state_text, "%d Box", post);
 8002ea2:	f002 fcf7 	bl	8005894 <siprintf>
	if(post > 0) LED(3,1);
 8002ea6:	7823      	ldrb	r3, [r4, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <post_box+0x58>
 8002eac:	23a0      	movs	r3, #160	; 0xa0
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	05db      	lsls	r3, r3, #23
 8002eb2:	0392      	lsls	r2, r2, #14
	else LED(3,0);
 8002eb4:	619a      	str	r2, [r3, #24]
}
 8002eb6:	bd10      	pop	{r4, pc}
	else LED(3,0);
 8002eb8:	23a0      	movs	r3, #160	; 0xa0
 8002eba:	2220      	movs	r2, #32
 8002ebc:	05db      	lsls	r3, r3, #23
 8002ebe:	e7f9      	b.n	8002eb4 <post_box+0x54>
 8002ec0:	200002bd 	.word	0x200002bd
 8002ec4:	200000a8 	.word	0x200000a8
 8002ec8:	200002be 	.word	0x200002be
 8002ecc:	080065c0 	.word	0x080065c0
 8002ed0:	20000268 	.word	0x20000268

08002ed4 <menu_etc_sensor_fuc>:
void menu_etc_sensor_fuc(void){
 8002ed4:	b510      	push	{r4, lr}
	door_lock_control();
 8002ed6:	f7ff fe89 	bl	8002bec <door_lock_control>
	door_open_control();
 8002eda:	f7ff fec1 	bl	8002c60 <door_open_control>
	PIR_Sensor();
 8002ede:	f7ff ff41 	bl	8002d64 <PIR_Sensor>
	car_call();
 8002ee2:	f7ff ff73 	bl	8002dcc <car_call>
	post_box();
 8002ee6:	f7ff ffbb 	bl	8002e60 <post_box>
}
 8002eea:	bd10      	pop	{r4, pc}

08002eec <password_input_check_fuc>:
void password_input_check_fuc(void){
 8002eec:	b570      	push	{r4, r5, r6, lr}
	if(strcmp(password_fuc.save_password, password_fuc.input_password) == 0){
 8002eee:	4c1a      	ldr	r4, [pc, #104]	; (8002f58 <password_input_check_fuc+0x6c>)
 8002ef0:	0021      	movs	r1, r4
 8002ef2:	0020      	movs	r0, r4
 8002ef4:	310c      	adds	r1, #12
 8002ef6:	3011      	adds	r0, #17
 8002ef8:	f7fd f906 	bl	8000108 <strcmp>
 8002efc:	4e17      	ldr	r6, [pc, #92]	; (8002f5c <password_input_check_fuc+0x70>)
 8002efe:	1e05      	subs	r5, r0, #0
 8002f00:	d112      	bne.n	8002f28 <password_input_check_fuc+0x3c>
		user_mode.now_page = menu;
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <password_input_check_fuc+0x74>)
 8002f04:	7018      	strb	r0, [r3, #0]
		nextion_inst_set("rest");
 8002f06:	4817      	ldr	r0, [pc, #92]	; (8002f64 <password_input_check_fuc+0x78>)
 8002f08:	f7ff f926 	bl	8002158 <nextion_inst_set>
		Re = 0; firF = run_state;
 8002f0c:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <password_input_check_fuc+0x7c>)
 8002f0e:	7035      	strb	r5, [r6, #0]
 8002f10:	701d      	strb	r5, [r3, #0]
	HAL_FLASHEx_DATAEEPROM_Unlock();
 8002f12:	f000 fcf9 	bl	8003908 <HAL_FLASHEx_DATAEEPROM_Unlock>
	*(__IO uint8_t*)(DATA_EEPROM_BASE + addr) = data;
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <password_input_check_fuc+0x80>)
 8002f18:	701d      	strb	r5, [r3, #0]
	HAL_FLASHEx_DATAEEPROM_Lock();
 8002f1a:	f000 fd0d 	bl	8003938 <HAL_FLASHEx_DATAEEPROM_Lock>
		HAL_Delay(1000);
 8002f1e:	20fa      	movs	r0, #250	; 0xfa
 8002f20:	0080      	lsls	r0, r0, #2
 8002f22:	f000 fc89 	bl	8003838 <HAL_Delay>
}
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
		password_fuc.try_num++;
 8002f28:	7de3      	ldrb	r3, [r4, #23]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	75e3      	strb	r3, [r4, #23]
		if(password_fuc.try_num >= 5) {
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d901      	bls.n	8002f38 <password_input_check_fuc+0x4c>
			password_fuc.try_ok = stop_state;
 8002f34:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <password_input_check_fuc+0x84>)
 8002f36:	8323      	strh	r3, [r4, #24]
		password_fuc.input_num = 0;
 8002f38:	2500      	movs	r5, #0
		memset(password_fuc.input_password, 0, 5);
 8002f3a:	0020      	movs	r0, r4
		user_buz.buz_re = 2; user_buz.buzM = buz_door_on;
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <password_input_check_fuc+0x88>)
 8002f3e:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <password_input_check_fuc+0x8c>)
		memset(password_fuc.input_password, 0, 5);
 8002f40:	0029      	movs	r1, r5
		user_buz.buz_re = 2; user_buz.buzM = buz_door_on;
 8002f42:	801a      	strh	r2, [r3, #0]
		memset(password_fuc.input_password, 0, 5);
 8002f44:	3afd      	subs	r2, #253	; 0xfd
 8002f46:	300c      	adds	r0, #12
 8002f48:	3aff      	subs	r2, #255	; 0xff
		password_fuc.input_num = 0;
 8002f4a:	75a5      	strb	r5, [r4, #22]
		memset(password_fuc.input_password, 0, 5);
 8002f4c:	f002 fc9a 	bl	8005884 <memset>
		password_fuc.picM = 1;
 8002f50:	2301      	movs	r3, #1
		Re = 0;
 8002f52:	7035      	strb	r5, [r6, #0]
		password_fuc.picM = 1;
 8002f54:	7163      	strb	r3, [r4, #5]
}
 8002f56:	e7e6      	b.n	8002f26 <password_input_check_fuc+0x3a>
 8002f58:	20000288 	.word	0x20000288
 8002f5c:	200000a8 	.word	0x200000a8
 8002f60:	20000324 	.word	0x20000324
 8002f64:	080065c7 	.word	0x080065c7
 8002f68:	2000012f 	.word	0x2000012f
 8002f6c:	0808000a 	.word	0x0808000a
 8002f70:	00001e01 	.word	0x00001e01
 8002f74:	20000308 	.word	0x20000308
 8002f78:	00000201 	.word	0x00000201

08002f7c <password_set_check_fuc>:
void password_set_check_fuc(void){
 8002f7c:	b510      	push	{r4, lr}
	user_mode.now_page = menu;
 8002f7e:	2400      	movs	r4, #0
	eeprom_save_string(password_fuc.input_password, STRING_ADDR);
 8002f80:	4809      	ldr	r0, [pc, #36]	; (8002fa8 <password_set_check_fuc+0x2c>)
 8002f82:	2100      	movs	r1, #0
 8002f84:	300c      	adds	r0, #12
 8002f86:	f7ff fde7 	bl	8002b58 <eeprom_save_string>
	user_mode.now_page = menu;
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <password_set_check_fuc+0x30>)
	nextion_inst_set("rest");
 8002f8c:	4808      	ldr	r0, [pc, #32]	; (8002fb0 <password_set_check_fuc+0x34>)
	user_mode.now_page = menu;
 8002f8e:	701c      	strb	r4, [r3, #0]
	nextion_inst_set("rest");
 8002f90:	f7ff f8e2 	bl	8002158 <nextion_inst_set>
	HAL_Delay(1000);
 8002f94:	20fa      	movs	r0, #250	; 0xfa
	Re = 0; firF = run_state;
 8002f96:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <password_set_check_fuc+0x38>)
	HAL_Delay(1000);
 8002f98:	0080      	lsls	r0, r0, #2
	Re = 0; firF = run_state;
 8002f9a:	701c      	strb	r4, [r3, #0]
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <password_set_check_fuc+0x3c>)
 8002f9e:	701c      	strb	r4, [r3, #0]
	HAL_Delay(1000);
 8002fa0:	f000 fc4a 	bl	8003838 <HAL_Delay>
}
 8002fa4:	bd10      	pop	{r4, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	20000288 	.word	0x20000288
 8002fac:	20000324 	.word	0x20000324
 8002fb0:	080065c7 	.word	0x080065c7
 8002fb4:	200000a8 	.word	0x200000a8
 8002fb8:	2000012f 	.word	0x2000012f

08002fbc <password_touch_sensing_fuc>:
void password_touch_sensing_fuc(void){
 8002fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	user_xy.curXY = user_xy.getXY();
 8002fbe:	4c35      	ldr	r4, [pc, #212]	; (8003094 <password_touch_sensing_fuc+0xd8>)
 8002fc0:	68a3      	ldr	r3, [r4, #8]
 8002fc2:	4798      	blx	r3
	password_fuc.touch_id = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	4a34      	ldr	r2, [pc, #208]	; (8003098 <password_touch_sensing_fuc+0xdc>)
	user_xy.curXY = user_xy.getXY();
 8002fc8:	6020      	str	r0, [r4, #0]
	password_fuc.touch_id = 0;
 8002fca:	7113      	strb	r3, [r2, #4]
			if((user_xy.curXY.x >= x_buf && user_xy.curXY.x <= x_buf + 30) && (user_xy.curXY.y >= y_buf && user_xy.curXY.y <= y_buf + 30)){
 8002fcc:	b282      	uxth	r2, r0
 8002fce:	4694      	mov	ip, r2
 8002fd0:	001f      	movs	r7, r3
 8002fd2:	001e      	movs	r6, r3
 8002fd4:	2432      	movs	r4, #50	; 0x32
 8002fd6:	0c00      	lsrs	r0, r0, #16
		for(uint8_t j = 0 ; j < 3 ; j++){
 8002fd8:	b299      	uxth	r1, r3
 8002fda:	1c4d      	adds	r5, r1, #1
 8002fdc:	2203      	movs	r2, #3
 8002fde:	4361      	muls	r1, r4
 8002fe0:	3150      	adds	r1, #80	; 0x50
 8002fe2:	b289      	uxth	r1, r1
 8002fe4:	9101      	str	r1, [sp, #4]
void password_touch_sensing_fuc(void){
 8002fe6:	0021      	movs	r1, r4
 8002fe8:	435a      	muls	r2, r3
 8002fea:	4365      	muls	r5, r4
 8002fec:	3201      	adds	r2, #1
 8002fee:	b2ad      	uxth	r5, r5
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	9500      	str	r5, [sp, #0]
			if((user_xy.curXY.x >= x_buf && user_xy.curXY.x <= x_buf + 30) && (user_xy.curXY.y >= y_buf && user_xy.curXY.y <= y_buf + 30)){
 8002ff4:	458c      	cmp	ip, r1
 8002ff6:	d30c      	bcc.n	8003012 <password_touch_sensing_fuc+0x56>
 8002ff8:	000d      	movs	r5, r1
 8002ffa:	351e      	adds	r5, #30
 8002ffc:	b2ad      	uxth	r5, r5
 8002ffe:	45ac      	cmp	ip, r5
 8003000:	d807      	bhi.n	8003012 <password_touch_sensing_fuc+0x56>
 8003002:	9d00      	ldr	r5, [sp, #0]
 8003004:	42a8      	cmp	r0, r5
 8003006:	d304      	bcc.n	8003012 <password_touch_sensing_fuc+0x56>
 8003008:	9d01      	ldr	r5, [sp, #4]
 800300a:	42a8      	cmp	r0, r5
 800300c:	d801      	bhi.n	8003012 <password_touch_sensing_fuc+0x56>
				password_fuc.touch_id = (i * 3) + j + 1;
 800300e:	0016      	movs	r6, r2
 8003010:	2701      	movs	r7, #1
		for(uint8_t j = 0 ; j < 3 ; j++){
 8003012:	3132      	adds	r1, #50	; 0x32
 8003014:	3201      	adds	r2, #1
 8003016:	b289      	uxth	r1, r1
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	29c8      	cmp	r1, #200	; 0xc8
 800301c:	d1ea      	bne.n	8002ff4 <password_touch_sensing_fuc+0x38>
	for(uint8_t i = 0 ; i < 4 ; i++){
 800301e:	3301      	adds	r3, #1
 8003020:	2b04      	cmp	r3, #4
 8003022:	d1d9      	bne.n	8002fd8 <password_touch_sensing_fuc+0x1c>
 8003024:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <password_touch_sensing_fuc+0xdc>)
 8003026:	2f00      	cmp	r7, #0
 8003028:	d000      	beq.n	800302c <password_touch_sensing_fuc+0x70>
 800302a:	711e      	strb	r6, [r3, #4]
	if(password_fuc.touch_id == 10){
 800302c:	791a      	ldrb	r2, [r3, #4]
 800302e:	2a0a      	cmp	r2, #10
 8003030:	d10b      	bne.n	800304a <password_touch_sensing_fuc+0x8e>
		if(user_mode.now_page == input_password){
 8003032:	4b1a      	ldr	r3, [pc, #104]	; (800309c <password_touch_sensing_fuc+0xe0>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d102      	bne.n	8003040 <password_touch_sensing_fuc+0x84>
			password_input_check_fuc();
 800303a:	f7ff ff57 	bl	8002eec <password_input_check_fuc>
}
 800303e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		else if(user_mode.now_page == password_set){
 8003040:	2b05      	cmp	r3, #5
 8003042:	d1fc      	bne.n	800303e <password_touch_sensing_fuc+0x82>
			password_set_check_fuc();
 8003044:	f7ff ff9a 	bl	8002f7c <password_set_check_fuc>
 8003048:	e7f9      	b.n	800303e <password_touch_sensing_fuc+0x82>
	else if(password_fuc.touch_id == 12){
 800304a:	2a0c      	cmp	r2, #12
 800304c:	d10c      	bne.n	8003068 <password_touch_sensing_fuc+0xac>
		password_fuc.input_password[password_fuc.input_num > 0 ? --password_fuc.input_num : 0] = '\0';
 800304e:	2200      	movs	r2, #0
 8003050:	7d99      	ldrb	r1, [r3, #22]
 8003052:	4291      	cmp	r1, r2
 8003054:	d002      	beq.n	800305c <password_touch_sensing_fuc+0xa0>
 8003056:	3901      	subs	r1, #1
 8003058:	b2ca      	uxtb	r2, r1
 800305a:	759a      	strb	r2, [r3, #22]
 800305c:	189b      	adds	r3, r3, r2
 800305e:	2200      	movs	r2, #0
 8003060:	731a      	strb	r2, [r3, #12]
		Re = 0;
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <password_touch_sensing_fuc+0xe4>)
			Re = 0;
 8003064:	701a      	strb	r2, [r3, #0]
}
 8003066:	e7ea      	b.n	800303e <password_touch_sensing_fuc+0x82>
	else if(password_fuc.touch_id != 0) {
 8003068:	2a00      	cmp	r2, #0
 800306a:	d0e8      	beq.n	800303e <password_touch_sensing_fuc+0x82>
		if(password_fuc.input_num < 4){
 800306c:	7d99      	ldrb	r1, [r3, #22]
 800306e:	2903      	cmp	r1, #3
 8003070:	d8e5      	bhi.n	800303e <password_touch_sensing_fuc+0x82>
				password_fuc.input_password[password_fuc.input_num++] = password_fuc.keypad[password_fuc.touch_id - 1];
 8003072:	1c48      	adds	r0, r1, #1
 8003074:	b2c0      	uxtb	r0, r0
 8003076:	1859      	adds	r1, r3, r1
			if(password_fuc.touch_id != 11) {
 8003078:	2a0b      	cmp	r2, #11
 800307a:	d007      	beq.n	800308c <password_touch_sensing_fuc+0xd0>
				password_fuc.input_password[password_fuc.input_num++] = password_fuc.keypad[password_fuc.touch_id - 1];
 800307c:	689c      	ldr	r4, [r3, #8]
 800307e:	3a01      	subs	r2, #1
 8003080:	7598      	strb	r0, [r3, #22]
 8003082:	5ca3      	ldrb	r3, [r4, r2]
			else { password_fuc.input_password[password_fuc.input_num++] = '0'; }
 8003084:	730b      	strb	r3, [r1, #12]
			Re = 0;
 8003086:	2200      	movs	r2, #0
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <password_touch_sensing_fuc+0xe4>)
 800308a:	e7eb      	b.n	8003064 <password_touch_sensing_fuc+0xa8>
			else { password_fuc.input_password[password_fuc.input_num++] = '0'; }
 800308c:	7598      	strb	r0, [r3, #22]
 800308e:	2330      	movs	r3, #48	; 0x30
 8003090:	e7f8      	b.n	8003084 <password_touch_sensing_fuc+0xc8>
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	20000344 	.word	0x20000344
 8003098:	20000288 	.word	0x20000288
 800309c:	20000324 	.word	0x20000324
 80030a0:	200000a8 	.word	0x200000a8

080030a4 <HAL_SYSTICK_Callback>:
/* password display function end */

/* user_buz running function start */
void HAL_SYSTICK_Callback(void){
	if(user_buz.buzM) user_buz.buzC++;
	else user_buz.buzC = 0;
 80030a4:	2300      	movs	r3, #0
void HAL_SYSTICK_Callback(void){
 80030a6:	b510      	push	{r4, lr}
	if(user_buz.buzM) user_buz.buzC++;
 80030a8:	4c23      	ldr	r4, [pc, #140]	; (8003138 <HAL_SYSTICK_Callback+0x94>)
 80030aa:	7820      	ldrb	r0, [r4, #0]
 80030ac:	4298      	cmp	r0, r3
 80030ae:	d002      	beq.n	80030b6 <HAL_SYSTICK_Callback+0x12>
 80030b0:	8863      	ldrh	r3, [r4, #2]
 80030b2:	3301      	adds	r3, #1
 80030b4:	b29b      	uxth	r3, r3

	if(user_buz.buz_re > 0){
 80030b6:	7862      	ldrb	r2, [r4, #1]
 80030b8:	8063      	strh	r3, [r4, #2]
 80030ba:	2a00      	cmp	r2, #0
 80030bc:	d007      	beq.n	80030ce <HAL_SYSTICK_Callback+0x2a>
		if(user_buz.buzM == buz_door_on){
 80030be:	2801      	cmp	r0, #1
 80030c0:	d105      	bne.n	80030ce <HAL_SYSTICK_Callback+0x2a>
			if(user_buz.buzC < 500) user_buz.buz_run_fuc(buz_on_state);
 80030c2:	21fa      	movs	r1, #250	; 0xfa
 80030c4:	68e2      	ldr	r2, [r4, #12]
 80030c6:	0049      	lsls	r1, r1, #1
 80030c8:	428b      	cmp	r3, r1
 80030ca:	d21b      	bcs.n	8003104 <HAL_SYSTICK_Callback+0x60>
			else if(user_buz.buzC < 1000) user_buz.buz_run_fuc(buz_off_state);
 80030cc:	4790      	blx	r2
				user_buz.buzC = 0;
			}
		}
	}

	if(password_fuc.picM){
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_SYSTICK_Callback+0x98>)
 80030d0:	795a      	ldrb	r2, [r3, #5]
 80030d2:	2a00      	cmp	r2, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_SYSTICK_Callback+0x48>
		password_fuc.picC++;
		if(password_fuc.picC > 2000){
 80030d6:	21fa      	movs	r1, #250	; 0xfa
		password_fuc.picC++;
 80030d8:	88da      	ldrh	r2, [r3, #6]
		if(password_fuc.picC > 2000){
 80030da:	00c9      	lsls	r1, r1, #3
		password_fuc.picC++;
 80030dc:	3201      	adds	r2, #1
 80030de:	b292      	uxth	r2, r2
 80030e0:	80da      	strh	r2, [r3, #6]
		if(password_fuc.picC > 2000){
 80030e2:	428a      	cmp	r2, r1
 80030e4:	d902      	bls.n	80030ec <HAL_SYSTICK_Callback+0x48>
			password_fuc.picM = 0;
 80030e6:	2200      	movs	r2, #0
 80030e8:	715a      	strb	r2, [r3, #5]
			password_fuc.picC = 0;
 80030ea:	80da      	strh	r2, [r3, #6]
		}
	}

	if(password_fuc.try_ok == stop_state){
 80030ec:	7e1a      	ldrb	r2, [r3, #24]
 80030ee:	2a01      	cmp	r2, #1
 80030f0:	d107      	bne.n	8003102 <HAL_SYSTICK_Callback+0x5e>
		password_fuc.try_cnt++;
		if(password_fuc.try_cnt >= 1000){
 80030f2:	21fa      	movs	r1, #250	; 0xfa
		password_fuc.try_cnt++;
 80030f4:	8b5a      	ldrh	r2, [r3, #26]
		if(password_fuc.try_cnt >= 1000){
 80030f6:	0089      	lsls	r1, r1, #2
		password_fuc.try_cnt++;
 80030f8:	3201      	adds	r2, #1
 80030fa:	b292      	uxth	r2, r2
		if(password_fuc.try_cnt >= 1000){
 80030fc:	428a      	cmp	r2, r1
 80030fe:	d20d      	bcs.n	800311c <HAL_SYSTICK_Callback+0x78>
		password_fuc.try_cnt++;
 8003100:	835a      	strh	r2, [r3, #26]
			Re = 0;
			if(password_fuc.try_second > 0) password_fuc.try_second--;
			else { password_fuc.try_num = 0; password_fuc.try_ok = run_state; }
		}
	}
}
 8003102:	bd10      	pop	{r4, pc}
			else if(user_buz.buzC < 1000) user_buz.buz_run_fuc(buz_off_state);
 8003104:	21fa      	movs	r1, #250	; 0xfa
 8003106:	2000      	movs	r0, #0
 8003108:	0089      	lsls	r1, r1, #2
 800310a:	428b      	cmp	r3, r1
 800310c:	d3de      	bcc.n	80030cc <HAL_SYSTICK_Callback+0x28>
				user_buz.buz_run_fuc(buz_off_state);
 800310e:	4790      	blx	r2
				user_buz.buz_check_fuc(&user_buz);
 8003110:	68a3      	ldr	r3, [r4, #8]
 8003112:	0020      	movs	r0, r4
 8003114:	4798      	blx	r3
				user_buz.buzC = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	8063      	strh	r3, [r4, #2]
 800311a:	e7d8      	b.n	80030ce <HAL_SYSTICK_Callback+0x2a>
			password_fuc.try_cnt = 0;
 800311c:	2200      	movs	r2, #0
			Re = 0;
 800311e:	4908      	ldr	r1, [pc, #32]	; (8003140 <HAL_SYSTICK_Callback+0x9c>)
			password_fuc.try_cnt = 0;
 8003120:	835a      	strh	r2, [r3, #26]
			Re = 0;
 8003122:	700a      	strb	r2, [r1, #0]
			if(password_fuc.try_second > 0) password_fuc.try_second--;
 8003124:	7e5a      	ldrb	r2, [r3, #25]
 8003126:	2a00      	cmp	r2, #0
 8003128:	d002      	beq.n	8003130 <HAL_SYSTICK_Callback+0x8c>
 800312a:	3a01      	subs	r2, #1
 800312c:	765a      	strb	r2, [r3, #25]
 800312e:	e7e8      	b.n	8003102 <HAL_SYSTICK_Callback+0x5e>
			else { password_fuc.try_num = 0; password_fuc.try_ok = run_state; }
 8003130:	75da      	strb	r2, [r3, #23]
 8003132:	761a      	strb	r2, [r3, #24]
}
 8003134:	e7e5      	b.n	8003102 <HAL_SYSTICK_Callback+0x5e>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	20000308 	.word	0x20000308
 800313c:	20000288 	.word	0x20000288
 8003140:	200000a8 	.word	0x200000a8

08003144 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003144:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003146:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		system_reset();
 8003148:	f7ff fd2a 	bl	8002ba0 <system_reset>
	while (1)
 800314c:	e7fc      	b.n	8003148 <Error_Handler+0x4>
	...

08003150 <SystemClock_Config>:
{
 8003150:	b510      	push	{r4, lr}
 8003152:	b09c      	sub	sp, #112	; 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003154:	2224      	movs	r2, #36	; 0x24
 8003156:	2100      	movs	r1, #0
 8003158:	a80f      	add	r0, sp, #60	; 0x3c
 800315a:	f002 fb93 	bl	8005884 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800315e:	2214      	movs	r2, #20
 8003160:	2100      	movs	r1, #0
 8003162:	a801      	add	r0, sp, #4
 8003164:	f002 fb8e 	bl	8005884 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003168:	2220      	movs	r2, #32
 800316a:	2100      	movs	r1, #0
 800316c:	a806      	add	r0, sp, #24
 800316e:	f002 fb89 	bl	8005884 <memset>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003172:	491b      	ldr	r1, [pc, #108]	; (80031e0 <SystemClock_Config+0x90>)
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <SystemClock_Config+0x94>)
 8003176:	680b      	ldr	r3, [r1, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003178:	2401      	movs	r4, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800317a:	401a      	ands	r2, r3
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003184:	2302      	movs	r3, #2
 8003186:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003188:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800318a:	2300      	movs	r3, #0
 800318c:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	02db      	lsls	r3, r3, #11
 8003192:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003194:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003196:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003198:	03db      	lsls	r3, r3, #15
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800319a:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800319c:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800319e:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80031a0:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031a2:	f001 f9e7 	bl	8004574 <HAL_RCC_OscConfig>
 80031a6:	2800      	cmp	r0, #0
 80031a8:	d001      	beq.n	80031ae <SystemClock_Config+0x5e>
		Error_Handler();
 80031aa:	f7ff ffcb 	bl	8003144 <Error_Handler>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031ae:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031b0:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031b2:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031b4:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031b6:	3b0c      	subs	r3, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031b8:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031ba:	0021      	movs	r1, r4
 80031bc:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031be:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031c0:	f001 fc5a 	bl	8004a78 <HAL_RCC_ClockConfig>
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d1f0      	bne.n	80031aa <SystemClock_Config+0x5a>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80031c8:	2309      	movs	r3, #9
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031ca:	9008      	str	r0, [sp, #32]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80031cc:	900b      	str	r0, [sp, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031ce:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80031d0:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d2:	f001 fd3f 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
 80031d6:	2800      	cmp	r0, #0
 80031d8:	d1e7      	bne.n	80031aa <SystemClock_Config+0x5a>
}
 80031da:	b01c      	add	sp, #112	; 0x70
 80031dc:	bd10      	pop	{r4, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	40007000 	.word	0x40007000
 80031e4:	ffffe7ff 	.word	0xffffe7ff

080031e8 <main>:
{
 80031e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80031ea:	2601      	movs	r6, #1
{
 80031ec:	b08d      	sub	sp, #52	; 0x34
	HAL_Init();
 80031ee:	f000 fafd 	bl	80037ec <HAL_Init>
	SystemClock_Config();
 80031f2:	f7ff ffad 	bl	8003150 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f6:	2214      	movs	r2, #20
 80031f8:	2100      	movs	r1, #0
 80031fa:	a807      	add	r0, sp, #28
 80031fc:	f002 fb42 	bl	8005884 <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003200:	2202      	movs	r2, #2
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003202:	27a0      	movs	r7, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003204:	4d93      	ldr	r5, [pc, #588]	; (8003454 <main+0x26c>)
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003206:	05ff      	lsls	r7, r7, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003208:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800320a:	2138      	movs	r1, #56	; 0x38
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800320c:	4333      	orrs	r3, r6
 800320e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003210:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003212:	0038      	movs	r0, r7
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003214:	4033      	ands	r3, r6
 8003216:	9303      	str	r3, [sp, #12]
 8003218:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800321a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800321c:	2400      	movs	r4, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800321e:	4313      	orrs	r3, r2
 8003220:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003222:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003224:	4013      	ands	r3, r2
 8003226:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003228:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800322a:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800322c:	f000 fc4e 	bl	8003acc <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8003230:	2307      	movs	r3, #7
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003232:	0038      	movs	r0, r7
 8003234:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8003236:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003238:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800323a:	9609      	str	r6, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323c:	f000 fb86 	bl	800394c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8003240:	2338      	movs	r3, #56	; 0x38
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003242:	0038      	movs	r0, r7
 8003244:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8003246:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003248:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324c:	940a      	str	r4, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324e:	f000 fb7d 	bl	800394c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8003252:	230a      	movs	r3, #10
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003254:	4880      	ldr	r0, [pc, #512]	; (8003458 <main+0x270>)
 8003256:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8003258:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800325a:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325e:	f000 fb75 	bl	800394c <HAL_GPIO_Init>
	huart1.Instance = USART1;
 8003262:	487e      	ldr	r0, [pc, #504]	; (800345c <main+0x274>)
 8003264:	4b7e      	ldr	r3, [pc, #504]	; (8003460 <main+0x278>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003266:	6084      	str	r4, [r0, #8]
	huart1.Instance = USART1;
 8003268:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 9600;
 800326a:	2396      	movs	r3, #150	; 0x96
 800326c:	019b      	lsls	r3, r3, #6
 800326e:	6043      	str	r3, [r0, #4]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003270:	230c      	movs	r3, #12
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003272:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003274:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003276:	6143      	str	r3, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003278:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800327a:	61c4      	str	r4, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800327c:	6204      	str	r4, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800327e:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003280:	f002 faa4 	bl	80057cc <HAL_UART_Init>
 8003284:	42a0      	cmp	r0, r4
 8003286:	d001      	beq.n	800328c <main+0xa4>
		Error_Handler();
 8003288:	f7ff ff5c 	bl	8003144 <Error_Handler>
	hi2c1.Instance = I2C1;
 800328c:	4c75      	ldr	r4, [pc, #468]	; (8003464 <main+0x27c>)
 800328e:	4b76      	ldr	r3, [pc, #472]	; (8003468 <main+0x280>)
	hi2c1.Init.OwnAddress1 = 0;
 8003290:	60a0      	str	r0, [r4, #8]
	hi2c1.Instance = I2C1;
 8003292:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x00300F38;
 8003294:	4b75      	ldr	r3, [pc, #468]	; (800346c <main+0x284>)
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003296:	6120      	str	r0, [r4, #16]
	hi2c1.Init.Timing = 0x00300F38;
 8003298:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800329a:	2301      	movs	r3, #1
	hi2c1.Init.OwnAddress2 = 0;
 800329c:	6160      	str	r0, [r4, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800329e:	61a0      	str	r0, [r4, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032a0:	61e0      	str	r0, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032a2:	6220      	str	r0, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032a4:	0020      	movs	r0, r4
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032a6:	60e3      	str	r3, [r4, #12]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032a8:	f000 fd98 	bl	8003ddc <HAL_I2C_Init>
 80032ac:	1e01      	subs	r1, r0, #0
 80032ae:	d1eb      	bne.n	8003288 <main+0xa0>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032b0:	0020      	movs	r0, r4
 80032b2:	f001 f8cd 	bl	8004450 <HAL_I2CEx_ConfigAnalogFilter>
 80032b6:	1e01      	subs	r1, r0, #0
 80032b8:	d1e6      	bne.n	8003288 <main+0xa0>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80032ba:	0020      	movs	r0, r4
 80032bc:	f001 f8ee 	bl	800449c <HAL_I2CEx_ConfigDigitalFilter>
 80032c0:	1e06      	subs	r6, r0, #0
 80032c2:	d1e1      	bne.n	8003288 <main+0xa0>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c4:	0001      	movs	r1, r0
 80032c6:	2208      	movs	r2, #8
 80032c8:	a805      	add	r0, sp, #20
 80032ca:	f002 fadb 	bl	8005884 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 80032ce:	2210      	movs	r2, #16
 80032d0:	0031      	movs	r1, r6
 80032d2:	a807      	add	r0, sp, #28
 80032d4:	f002 fad6 	bl	8005884 <memset>
	htim2.Instance = TIM2;
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	4c65      	ldr	r4, [pc, #404]	; (8003470 <main+0x288>)
 80032dc:	05db      	lsls	r3, r3, #23
 80032de:	6023      	str	r3, [r4, #0]
	htim2.Init.Prescaler = 32-1;
 80032e0:	231f      	movs	r3, #31
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032e2:	0020      	movs	r0, r4
	htim2.Init.Prescaler = 32-1;
 80032e4:	6063      	str	r3, [r4, #4]
	htim2.Init.Period = 250-1;
 80032e6:	33da      	adds	r3, #218	; 0xda
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e8:	60a6      	str	r6, [r4, #8]
	htim2.Init.Period = 250-1;
 80032ea:	60e3      	str	r3, [r4, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ec:	6126      	str	r6, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ee:	6166      	str	r6, [r4, #20]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032f0:	f001 fe54 	bl	8004f9c <HAL_TIM_PWM_Init>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	d1c7      	bne.n	8003288 <main+0xa0>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032f8:	9005      	str	r0, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032fa:	9006      	str	r0, [sp, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032fc:	a905      	add	r1, sp, #20
 80032fe:	0020      	movs	r0, r4
 8003300:	f001 ff06 	bl	8005110 <HAL_TIMEx_MasterConfigSynchronization>
 8003304:	1e02      	subs	r2, r0, #0
 8003306:	d1bf      	bne.n	8003288 <main+0xa0>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003308:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800330a:	9009      	str	r0, [sp, #36]	; 0x24
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800330c:	9307      	str	r3, [sp, #28]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800330e:	900a      	str	r0, [sp, #40]	; 0x28
	sConfigOC.Pulse = 125-1;
 8003310:	331c      	adds	r3, #28
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003312:	0020      	movs	r0, r4
 8003314:	a907      	add	r1, sp, #28
	sConfigOC.Pulse = 125-1;
 8003316:	9308      	str	r3, [sp, #32]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003318:	f001 fe6c 	bl	8004ff4 <HAL_TIM_PWM_ConfigChannel>
 800331c:	9001      	str	r0, [sp, #4]
 800331e:	2800      	cmp	r0, #0
 8003320:	d1b2      	bne.n	8003288 <main+0xa0>
	HAL_TIM_MspPostInit(&htim2);
 8003322:	0020      	movs	r0, r4
 8003324:	f000 f97a 	bl	800361c <HAL_TIM_MspPostInit>
	initEns160();
 8003328:	f7fe ff96 	bl	8002258 <initEns160>
	initDrv8830();
 800332c:	f7fe ff5c 	bl	80021e8 <initDrv8830>
	user_buz.buz_reset_fuc = reset_buz;
 8003330:	4850      	ldr	r0, [pc, #320]	; (8003474 <main+0x28c>)
 8003332:	4b51      	ldr	r3, [pc, #324]	; (8003478 <main+0x290>)
	user_xy.touch_reset_fuc = reset_touch;
 8003334:	4a51      	ldr	r2, [pc, #324]	; (800347c <main+0x294>)
	user_buz.buz_reset_fuc = reset_buz;
 8003336:	6043      	str	r3, [r0, #4]
	user_xy.touch_reset_fuc = reset_touch;
 8003338:	4b51      	ldr	r3, [pc, #324]	; (8003480 <main+0x298>)
	user_mode.reset_mode_fuc = reset_mode;
 800333a:	4c52      	ldr	r4, [pc, #328]	; (8003484 <main+0x29c>)
	user_xy.touch_reset_fuc = reset_touch;
 800333c:	6053      	str	r3, [r2, #4]
	user_mode.reset_mode_fuc = reset_mode;
 800333e:	4b52      	ldr	r3, [pc, #328]	; (8003488 <main+0x2a0>)
	user_sht41.reset_sht41_fuc = reset_sht41;
 8003340:	4a52      	ldr	r2, [pc, #328]	; (800348c <main+0x2a4>)
	user_mode.reset_mode_fuc = reset_mode;
 8003342:	6063      	str	r3, [r4, #4]
	user_sht41.reset_sht41_fuc = reset_sht41;
 8003344:	4b52      	ldr	r3, [pc, #328]	; (8003490 <main+0x2a8>)
	password_fuc.struct_rest_fuc = password_struct_reset_fuc;
 8003346:	4e53      	ldr	r6, [pc, #332]	; (8003494 <main+0x2ac>)
	user_sht41.reset_sht41_fuc = reset_sht41;
 8003348:	6093      	str	r3, [r2, #8]
	user_ens160.reset_ens160_fuc = reset_ens160;
 800334a:	4b53      	ldr	r3, [pc, #332]	; (8003498 <main+0x2b0>)
 800334c:	4a53      	ldr	r2, [pc, #332]	; (800349c <main+0x2b4>)
 800334e:	6053      	str	r3, [r2, #4]
	menu_fuc.struct_reset_fuc = menu_struct_reset_fuc;
 8003350:	4b53      	ldr	r3, [pc, #332]	; (80034a0 <main+0x2b8>)
 8003352:	4a54      	ldr	r2, [pc, #336]	; (80034a4 <main+0x2bc>)
 8003354:	6013      	str	r3, [r2, #0]
	temp_fuc.struct_reset_fuc = temp_struct_reset_fuc;
 8003356:	4b54      	ldr	r3, [pc, #336]	; (80034a8 <main+0x2c0>)
 8003358:	4a54      	ldr	r2, [pc, #336]	; (80034ac <main+0x2c4>)
 800335a:	6013      	str	r3, [r2, #0]
	humidity_fuc.struct_reset_fuc = humidity_struct_reset_fuc;
 800335c:	4b54      	ldr	r3, [pc, #336]	; (80034b0 <main+0x2c8>)
 800335e:	4a55      	ldr	r2, [pc, #340]	; (80034b4 <main+0x2cc>)
 8003360:	6013      	str	r3, [r2, #0]
	co2_fuc.struct_reset_fuc = co2_struct_reset_fuc;
 8003362:	4a55      	ldr	r2, [pc, #340]	; (80034b8 <main+0x2d0>)
 8003364:	4b55      	ldr	r3, [pc, #340]	; (80034bc <main+0x2d4>)
 8003366:	6013      	str	r3, [r2, #0]
	password_fuc.struct_rest_fuc = password_struct_reset_fuc;
 8003368:	4b55      	ldr	r3, [pc, #340]	; (80034c0 <main+0x2d8>)
 800336a:	6033      	str	r3, [r6, #0]
	user_buz.buz_reset_fuc(&user_buz);
 800336c:	f7fe ffa0 	bl	80022b0 <reset_buz>
	user_xy.touch_reset_fuc(&user_xy);
 8003370:	4b42      	ldr	r3, [pc, #264]	; (800347c <main+0x294>)
 8003372:	4842      	ldr	r0, [pc, #264]	; (800347c <main+0x294>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4798      	blx	r3
	user_mode.reset_mode_fuc(&user_mode);
 8003378:	0020      	movs	r0, r4
 800337a:	6863      	ldr	r3, [r4, #4]
 800337c:	4798      	blx	r3
	user_sht41.reset_sht41_fuc(&user_sht41);
 800337e:	4b43      	ldr	r3, [pc, #268]	; (800348c <main+0x2a4>)
 8003380:	4842      	ldr	r0, [pc, #264]	; (800348c <main+0x2a4>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4798      	blx	r3
	user_ens160.reset_ens160_fuc(&user_ens160);
 8003386:	4b45      	ldr	r3, [pc, #276]	; (800349c <main+0x2b4>)
 8003388:	4844      	ldr	r0, [pc, #272]	; (800349c <main+0x2b4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	4798      	blx	r3
	menu_fuc.struct_reset_fuc(&menu_fuc);
 800338e:	4b45      	ldr	r3, [pc, #276]	; (80034a4 <main+0x2bc>)
 8003390:	4844      	ldr	r0, [pc, #272]	; (80034a4 <main+0x2bc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4798      	blx	r3
	temp_fuc.struct_reset_fuc(&temp_fuc);
 8003396:	4b45      	ldr	r3, [pc, #276]	; (80034ac <main+0x2c4>)
 8003398:	4844      	ldr	r0, [pc, #272]	; (80034ac <main+0x2c4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4798      	blx	r3
	humidity_fuc.struct_reset_fuc(&humidity_fuc);
 800339e:	4b45      	ldr	r3, [pc, #276]	; (80034b4 <main+0x2cc>)
 80033a0:	4844      	ldr	r0, [pc, #272]	; (80034b4 <main+0x2cc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4798      	blx	r3
	co2_fuc.struct_reset_fuc(&co2_fuc);
 80033a6:	4b44      	ldr	r3, [pc, #272]	; (80034b8 <main+0x2d0>)
 80033a8:	4843      	ldr	r0, [pc, #268]	; (80034b8 <main+0x2d0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4798      	blx	r3
	password_fuc.struct_rest_fuc(&password_fuc);
 80033ae:	0030      	movs	r0, r6
 80033b0:	6833      	ldr	r3, [r6, #0]
 80033b2:	4798      	blx	r3
	LED(1,0);
 80033b4:	2308      	movs	r3, #8
 80033b6:	61bb      	str	r3, [r7, #24]
	LED(2,0);
 80033b8:	18db      	adds	r3, r3, r3
 80033ba:	61bb      	str	r3, [r7, #24]
	LED(3,0);
 80033bc:	3310      	adds	r3, #16
 80033be:	61bb      	str	r3, [r7, #24]
	setMotor(DRV8830_STOP);
 80033c0:	9801      	ldr	r0, [sp, #4]
 80033c2:	f7fe ff25 	bl	8002210 <setMotor>
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) reset_state = por_reset;
 80033c6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80033c8:	4b3e      	ldr	r3, [pc, #248]	; (80034c4 <main+0x2dc>)
 80033ca:	0112      	lsls	r2, r2, #4
 80033cc:	d538      	bpl.n	8003440 <main+0x258>
 80033ce:	2202      	movs	r2, #2
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) reset_state = soft_reset;
 80033d0:	701a      	strb	r2, [r3, #0]
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80033d6:	0412      	lsls	r2, r2, #16
 80033d8:	430a      	orrs	r2, r1
 80033da:	652a      	str	r2, [r5, #80]	; 0x50
	if(reset_state == por_reset)       user_mode.now_page = input_password;
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d133      	bne.n	800344a <main+0x262>
 80033e2:	3302      	adds	r3, #2
	else if(reset_state == soft_reset) user_mode.now_page = password_set;
 80033e4:	7023      	strb	r3, [r4, #0]
	HAL_Delay(1000);
 80033e6:	20fa      	movs	r0, #250	; 0xfa
 80033e8:	0080      	lsls	r0, r0, #2
 80033ea:	f000 fa25 	bl	8003838 <HAL_Delay>
	nextion_inst_set("cls WHITE");
 80033ee:	4836      	ldr	r0, [pc, #216]	; (80034c8 <main+0x2e0>)
 80033f0:	f7fe feb2 	bl	8002158 <nextion_inst_set>
	nextion_inst_set("xstr 0,0,250,20,0,BLACK,WHITE,0,0,3,\"HOME AUTOMATION SYSTEM\"");
 80033f4:	4835      	ldr	r0, [pc, #212]	; (80034cc <main+0x2e4>)
 80033f6:	f7fe feaf 	bl	8002158 <nextion_inst_set>
	nextion_inst_set("xstr 0,20,250,20,0,BLACK,WHITE,0,0,3,\"SYSTEM REBOOTING\"");
 80033fa:	4835      	ldr	r0, [pc, #212]	; (80034d0 <main+0x2e8>)
 80033fc:	f7fe feac 	bl	8002158 <nextion_inst_set>
	HAL_Delay(1000);
 8003400:	20fa      	movs	r0, #250	; 0xfa
 8003402:	0080      	lsls	r0, r0, #2
 8003404:	f000 fa18 	bl	8003838 <HAL_Delay>
	if(user_mode.now_page == input_password || user_mode.now_page == password_set) { nextion_inst_set("tsw 255,0"); nextion_inst_set("sendxy=1"); }
 8003408:	7823      	ldrb	r3, [r4, #0]
	else nextion_inst_set("sendxy=0");
 800340a:	4832      	ldr	r0, [pc, #200]	; (80034d4 <main+0x2ec>)
	if(user_mode.now_page == input_password || user_mode.now_page == password_set) { nextion_inst_set("tsw 255,0"); nextion_inst_set("sendxy=1"); }
 800340c:	3b04      	subs	r3, #4
 800340e:	2b01      	cmp	r3, #1
 8003410:	d803      	bhi.n	800341a <main+0x232>
 8003412:	4831      	ldr	r0, [pc, #196]	; (80034d8 <main+0x2f0>)
 8003414:	f7fe fea0 	bl	8002158 <nextion_inst_set>
 8003418:	4830      	ldr	r0, [pc, #192]	; (80034dc <main+0x2f4>)
	else nextion_inst_set("sendxy=0");
 800341a:	f7fe fe9d 	bl	8002158 <nextion_inst_set>
	return *(__IO uint8_t*)(DATA_EEPROM_BASE + addr);
 800341e:	4b30      	ldr	r3, [pc, #192]	; (80034e0 <main+0x2f8>)
 8003420:	781b      	ldrb	r3, [r3, #0]
	if(eeprom_load(INPUT_PASSWORD_ADDR) == 1) user_mode.now_page = input_password;
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <main+0x242>
 8003426:	3303      	adds	r3, #3
 8003428:	7023      	strb	r3, [r4, #0]
	eeprom_load_string(password_fuc.save_password, STRING_ADDR);
 800342a:	0030      	movs	r0, r6
 800342c:	2100      	movs	r1, #0
 800342e:	3011      	adds	r0, #17
 8003430:	f7ff fba8 	bl	8002b84 <eeprom_load_string>
		user_mode.change_fuc(&user_mode);
 8003434:	68a3      	ldr	r3, [r4, #8]
 8003436:	0020      	movs	r0, r4
 8003438:	4798      	blx	r3
		user_mode.run_fuc();
 800343a:	68e3      	ldr	r3, [r4, #12]
 800343c:	4798      	blx	r3
	while (1)
 800343e:	e7f9      	b.n	8003434 <main+0x24c>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) reset_state = soft_reset;
 8003440:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8003442:	00d2      	lsls	r2, r2, #3
 8003444:	d5c5      	bpl.n	80033d2 <main+0x1ea>
 8003446:	2201      	movs	r2, #1
 8003448:	e7c2      	b.n	80033d0 <main+0x1e8>
	else if(reset_state == soft_reset) user_mode.now_page = password_set;
 800344a:	2b01      	cmp	r3, #1
 800344c:	d1cb      	bne.n	80033e6 <main+0x1fe>
 800344e:	3304      	adds	r3, #4
 8003450:	e7c8      	b.n	80033e4 <main+0x1fc>
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	40021000 	.word	0x40021000
 8003458:	50000400 	.word	0x50000400
 800345c:	200001c4 	.word	0x200001c4
 8003460:	40013800 	.word	0x40013800
 8003464:	20000130 	.word	0x20000130
 8003468:	40005400 	.word	0x40005400
 800346c:	00300f38 	.word	0x00300f38
 8003470:	20000184 	.word	0x20000184
 8003474:	20000308 	.word	0x20000308
 8003478:	080022b1 	.word	0x080022b1
 800347c:	20000344 	.word	0x20000344
 8003480:	080022c9 	.word	0x080022c9
 8003484:	20000324 	.word	0x20000324
 8003488:	080022d9 	.word	0x080022d9
 800348c:	20000334 	.word	0x20000334
 8003490:	080022f1 	.word	0x080022f1
 8003494:	20000288 	.word	0x20000288
 8003498:	08002301 	.word	0x08002301
 800349c:	20000318 	.word	0x20000318
 80034a0:	08002389 	.word	0x08002389
 80034a4:	20000268 	.word	0x20000268
 80034a8:	080023b5 	.word	0x080023b5
 80034ac:	200002e4 	.word	0x200002e4
 80034b0:	08002401 	.word	0x08002401
 80034b4:	2000024c 	.word	0x2000024c
 80034b8:	20000110 	.word	0x20000110
 80034bc:	0800244d 	.word	0x0800244d
 80034c0:	080024ad 	.word	0x080024ad
 80034c4:	200002c9 	.word	0x200002c9
 80034c8:	08006348 	.word	0x08006348
 80034cc:	080065cc 	.word	0x080065cc
 80034d0:	08006609 	.word	0x08006609
 80034d4:	08006654 	.word	0x08006654
 80034d8:	08006641 	.word	0x08006641
 80034dc:	0800664b 	.word	0x0800664b
 80034e0:	0808000a 	.word	0x0808000a

080034e4 <getTempSht41>:
#include "sht41.h"

extern I2C_HandleTypeDef hi2c1;

SHT41_t	getTempSht41() {
 80034e4:	b570      	push	{r4, r5, r6, lr}
	uint8_t txData = SHT41_MeasureHigh;
 80034e6:	250f      	movs	r5, #15
 80034e8:	23fd      	movs	r3, #253	; 0xfd
	uint8_t	rxData[6];
	SHT41_t result;
	uint16_t buf[2];

	HAL_I2C_Init(&hi2c1);
 80034ea:	4e21      	ldr	r6, [pc, #132]	; (8003570 <getTempSht41+0x8c>)
SHT41_t	getTempSht41() {
 80034ec:	b086      	sub	sp, #24
 80034ee:	0004      	movs	r4, r0
	uint8_t txData = SHT41_MeasureHigh;
 80034f0:	446d      	add	r5, sp
	HAL_I2C_Init(&hi2c1);
 80034f2:	0030      	movs	r0, r6
	uint8_t txData = SHT41_MeasureHigh;
 80034f4:	702b      	strb	r3, [r5, #0]
	HAL_I2C_Init(&hi2c1);
 80034f6:	f000 fc71 	bl	8003ddc <HAL_I2C_Init>
	int status = HAL_I2C_Master_Transmit(&hi2c1, SHT41_DeviceAddress, &txData, 1, 1);
 80034fa:	2301      	movs	r3, #1
 80034fc:	002a      	movs	r2, r5
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2188      	movs	r1, #136	; 0x88
 8003502:	0030      	movs	r0, r6
 8003504:	f000 fcc0 	bl	8003e88 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8003508:	2014      	movs	r0, #20
 800350a:	f000 f995 	bl	8003838 <HAL_Delay>
	status = HAL_I2C_Master_Receive(&hi2c1, SHT41_DeviceAddress, rxData, 6, 10);
 800350e:	230a      	movs	r3, #10
 8003510:	ad04      	add	r5, sp, #16
 8003512:	002a      	movs	r2, r5
 8003514:	2188      	movs	r1, #136	; 0x88
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	0030      	movs	r0, r6
 800351a:	3b04      	subs	r3, #4
 800351c:	f000 fd46 	bl	8003fac <HAL_I2C_Master_Receive>
	buf[0] = rxData[0] << 8 | rxData[1];
	buf[1] = rxData[3] << 8 | rxData[4];
	result.temperature = -45.0f + (175.0f * ((float)buf[0] / 65535.0f));
	result.humidity = -6.0f + (125.0f * ((float)buf[1] / 65535.0f));
 8003520:	2213      	movs	r2, #19
 8003522:	446a      	add	r2, sp
 8003524:	7850      	ldrb	r0, [r2, #1]
 8003526:	7813      	ldrb	r3, [r2, #0]
 8003528:	0200      	lsls	r0, r0, #8
 800352a:	4318      	orrs	r0, r3
 800352c:	ba40      	rev16	r0, r0
 800352e:	b280      	uxth	r0, r0
 8003530:	f7fd fce2 	bl	8000ef8 <__aeabi_ui2f>
 8003534:	490f      	ldr	r1, [pc, #60]	; (8003574 <getTempSht41+0x90>)
 8003536:	f7fd f8d3 	bl	80006e0 <__aeabi_fdiv>
 800353a:	490f      	ldr	r1, [pc, #60]	; (8003578 <getTempSht41+0x94>)
 800353c:	f7fd f9e8 	bl	8000910 <__aeabi_fmul>
 8003540:	490e      	ldr	r1, [pc, #56]	; (800357c <getTempSht41+0x98>)
 8003542:	f7fd fb0b 	bl	8000b5c <__aeabi_fsub>
 8003546:	1c06      	adds	r6, r0, #0
	result.temperature = -45.0f + (175.0f * ((float)buf[0] / 65535.0f));
 8003548:	8828      	ldrh	r0, [r5, #0]
 800354a:	ba40      	rev16	r0, r0
 800354c:	b280      	uxth	r0, r0
 800354e:	f7fd fcd3 	bl	8000ef8 <__aeabi_ui2f>
 8003552:	4908      	ldr	r1, [pc, #32]	; (8003574 <getTempSht41+0x90>)
 8003554:	f7fd f8c4 	bl	80006e0 <__aeabi_fdiv>
 8003558:	4909      	ldr	r1, [pc, #36]	; (8003580 <getTempSht41+0x9c>)
 800355a:	f7fd f9d9 	bl	8000910 <__aeabi_fmul>
 800355e:	4909      	ldr	r1, [pc, #36]	; (8003584 <getTempSht41+0xa0>)
 8003560:	f7fd fafc 	bl	8000b5c <__aeabi_fsub>
	return result;
 8003564:	6020      	str	r0, [r4, #0]
}
 8003566:	0020      	movs	r0, r4
	return result;
 8003568:	6066      	str	r6, [r4, #4]
}
 800356a:	b006      	add	sp, #24
 800356c:	bd70      	pop	{r4, r5, r6, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	20000130 	.word	0x20000130
 8003574:	477fff00 	.word	0x477fff00
 8003578:	42fa0000 	.word	0x42fa0000
 800357c:	40c00000 	.word	0x40c00000
 8003580:	432f0000 	.word	0x432f0000
 8003584:	42340000 	.word	0x42340000

08003588 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003588:	2201      	movs	r2, #1
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_MspInit+0x18>)
 800358c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800358e:	430a      	orrs	r2, r1
 8003590:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003596:	0552      	lsls	r2, r2, #21
 8003598:	430a      	orrs	r2, r1
 800359a:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800359c:	4770      	bx	lr
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	40021000 	.word	0x40021000

080035a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035a4:	b510      	push	{r4, lr}
 80035a6:	0004      	movs	r4, r0
 80035a8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035aa:	2214      	movs	r2, #20
 80035ac:	2100      	movs	r1, #0
 80035ae:	a801      	add	r0, sp, #4
 80035b0:	f002 f968 	bl	8005884 <memset>
  if(hi2c->Instance==I2C1)
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <HAL_I2C_MspInit+0x50>)
 80035b6:	6822      	ldr	r2, [r4, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d119      	bne.n	80035f0 <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035bc:	2102      	movs	r1, #2
 80035be:	4c0e      	ldr	r4, [pc, #56]	; (80035f8 <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c0:	480e      	ldr	r0, [pc, #56]	; (80035fc <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80035c4:	430a      	orrs	r2, r1
 80035c6:	62e2      	str	r2, [r4, #44]	; 0x2c
 80035c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80035ca:	400b      	ands	r3, r1
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035d0:	23c0      	movs	r3, #192	; 0xc0
 80035d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035d4:	3bae      	subs	r3, #174	; 0xae
 80035d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d8:	3b0f      	subs	r3, #15
 80035da:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035dc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80035de:	3b02      	subs	r3, #2
 80035e0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e2:	f000 f9b3 	bl	800394c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035ea:	039b      	lsls	r3, r3, #14
 80035ec:	4313      	orrs	r3, r2
 80035ee:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80035f0:	b006      	add	sp, #24
 80035f2:	bd10      	pop	{r4, pc}
 80035f4:	40005400 	.word	0x40005400
 80035f8:	40021000 	.word	0x40021000
 80035fc:	50000400 	.word	0x50000400

08003600 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	6802      	ldr	r2, [r0, #0]
 8003604:	05db      	lsls	r3, r3, #23
 8003606:	429a      	cmp	r2, r3
 8003608:	d104      	bne.n	8003614 <HAL_TIM_PWM_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800360a:	2301      	movs	r3, #1
 800360c:	4a02      	ldr	r2, [pc, #8]	; (8003618 <HAL_TIM_PWM_MspInit+0x18>)
 800360e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003610:	430b      	orrs	r3, r1
 8003612:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003614:	4770      	bx	lr
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	40021000 	.word	0x40021000

0800361c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800361c:	b510      	push	{r4, lr}
 800361e:	0004      	movs	r4, r0
 8003620:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003622:	2214      	movs	r2, #20
 8003624:	2100      	movs	r1, #0
 8003626:	a801      	add	r0, sp, #4
 8003628:	f002 f92c 	bl	8005884 <memset>
  if(htim->Instance==TIM2)
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	05db      	lsls	r3, r3, #23
 8003632:	429a      	cmp	r2, r3
 8003634:	d114      	bne.n	8003660 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003636:	2001      	movs	r0, #1
 8003638:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <HAL_TIM_MspPostInit+0x48>)
 800363a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800363c:	4301      	orrs	r1, r0
 800363e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003640:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003642:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003644:	4003      	ands	r3, r0
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	021b      	lsls	r3, r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364e:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003650:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003652:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003654:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003656:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8003658:	3303      	adds	r3, #3
 800365a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800365c:	f000 f976 	bl	800394c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003660:	b006      	add	sp, #24
 8003662:	bd10      	pop	{r4, pc}
 8003664:	40021000 	.word	0x40021000

08003668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003668:	b510      	push	{r4, lr}
 800366a:	0004      	movs	r4, r0
 800366c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800366e:	2214      	movs	r2, #20
 8003670:	2100      	movs	r1, #0
 8003672:	a801      	add	r0, sp, #4
 8003674:	f002 f906 	bl	8005884 <memset>
  if(huart->Instance==USART1)
 8003678:	4b10      	ldr	r3, [pc, #64]	; (80036bc <HAL_UART_MspInit+0x54>)
 800367a:	6822      	ldr	r2, [r4, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d11b      	bne.n	80036b8 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003680:	2280      	movs	r2, #128	; 0x80
 8003682:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <HAL_UART_MspInit+0x58>)
 8003684:	01d2      	lsls	r2, r2, #7
 8003686:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003688:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 800368a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368c:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 800368e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003692:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003694:	430a      	orrs	r2, r1
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	400b      	ands	r3, r1
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80036a0:	23c0      	movs	r3, #192	; 0xc0
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036aa:	185b      	adds	r3, r3, r1
 80036ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80036ae:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80036b2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b4:	f000 f94a 	bl	800394c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80036b8:	b006      	add	sp, #24
 80036ba:	bd10      	pop	{r4, pc}
 80036bc:	40013800 	.word	0x40013800
 80036c0:	40021000 	.word	0x40021000

080036c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036c4:	e7fe      	b.n	80036c4 <NMI_Handler>

080036c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036c6:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
	  HAL_DeInit();
 80036c8:	f000 f858 	bl	800377c <HAL_DeInit>
	  HAL_NVIC_SystemReset();
 80036cc:	f000 f8f0 	bl	80038b0 <HAL_NVIC_SystemReset>
  while (1)
 80036d0:	e7fa      	b.n	80036c8 <HardFault_Handler+0x2>

080036d2 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80036d2:	4770      	bx	lr

080036d4 <PendSV_Handler>:
 80036d4:	4770      	bx	lr

080036d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036d6:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036d8:	f000 f89c 	bl	8003814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80036dc:	f000 f910 	bl	8003900 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80036e0:	bd10      	pop	{r4, pc}
	...

080036e4 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036e4:	4a0b      	ldr	r2, [pc, #44]	; (8003714 <_sbrk+0x30>)
 80036e6:	490c      	ldr	r1, [pc, #48]	; (8003718 <_sbrk+0x34>)
{
 80036e8:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036ea:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036ec:	4a0b      	ldr	r2, [pc, #44]	; (800371c <_sbrk+0x38>)
{
 80036ee:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80036f0:	6810      	ldr	r0, [r2, #0]
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d101      	bne.n	80036fa <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80036f6:	480a      	ldr	r0, [pc, #40]	; (8003720 <_sbrk+0x3c>)
 80036f8:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036fa:	6810      	ldr	r0, [r2, #0]
 80036fc:	18c3      	adds	r3, r0, r3
 80036fe:	428b      	cmp	r3, r1
 8003700:	d906      	bls.n	8003710 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8003702:	f002 f895 	bl	8005830 <__errno>
 8003706:	230c      	movs	r3, #12
 8003708:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800370a:	2001      	movs	r0, #1
 800370c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800370e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003710:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8003712:	e7fc      	b.n	800370e <_sbrk+0x2a>
 8003714:	00000400 	.word	0x00000400
 8003718:	20002000 	.word	0x20002000
 800371c:	20000350 	.word	0x20000350
 8003720:	20000368 	.word	0x20000368

08003724 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003724:	4770      	bx	lr
	...

08003728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003728:	480d      	ldr	r0, [pc, #52]	; (8003760 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800372a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800372c:	f7ff fffa 	bl	8003724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003730:	480c      	ldr	r0, [pc, #48]	; (8003764 <LoopForever+0x6>)
  ldr r1, =_edata
 8003732:	490d      	ldr	r1, [pc, #52]	; (8003768 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003734:	4a0d      	ldr	r2, [pc, #52]	; (800376c <LoopForever+0xe>)
  movs r3, #0
 8003736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003738:	e002      	b.n	8003740 <LoopCopyDataInit>

0800373a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800373a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800373c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800373e:	3304      	adds	r3, #4

08003740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003744:	d3f9      	bcc.n	800373a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003748:	4c0a      	ldr	r4, [pc, #40]	; (8003774 <LoopForever+0x16>)
  movs r3, #0
 800374a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800374c:	e001      	b.n	8003752 <LoopFillZerobss>

0800374e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800374e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003750:	3204      	adds	r2, #4

08003752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003754:	d3fb      	bcc.n	800374e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003756:	f002 f871 	bl	800583c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800375a:	f7ff fd45 	bl	80031e8 <main>

0800375e <LoopForever>:

LoopForever:
    b LoopForever
 800375e:	e7fe      	b.n	800375e <LoopForever>
   ldr   r0, =_estack
 8003760:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003768:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800376c:	0800672c 	.word	0x0800672c
  ldr r2, =_sbss
 8003770:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003774:	20000368 	.word	0x20000368

08003778 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003778:	e7fe      	b.n	8003778 <ADC1_COMP_IRQHandler>

0800377a <HAL_MspDeInit>:
 800377a:	4770      	bx	lr

0800377c <HAL_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800377c:	2201      	movs	r2, #1
{
 800377e:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_RELEASE_RESET();
 8003780:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 8003782:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <HAL_DeInit+0x24>)
 8003784:	4252      	negs	r2, r2
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_APB1_RELEASE_RESET();
 8003788:	629c      	str	r4, [r3, #40]	; 0x28

  __HAL_RCC_APB2_FORCE_RESET();
 800378a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800378c:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB_FORCE_RESET();
 800378e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_AHB_RELEASE_RESET();
 8003790:	621c      	str	r4, [r3, #32]

  __HAL_RCC_IOP_FORCE_RESET();
 8003792:	61da      	str	r2, [r3, #28]
  __HAL_RCC_IOP_RELEASE_RESET();
 8003794:	61dc      	str	r4, [r3, #28]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8003796:	f7ff fff0 	bl	800377a <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
}
 800379a:	0020      	movs	r0, r4
 800379c:	bd10      	pop	{r4, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	40021000 	.word	0x40021000

080037a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037a8:	20fa      	movs	r0, #250	; 0xfa
 80037aa:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <HAL_InitTick+0x3c>)
 80037ac:	0080      	lsls	r0, r0, #2
 80037ae:	7819      	ldrb	r1, [r3, #0]
 80037b0:	f7fc fcd0 	bl	8000154 <__udivsi3>
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_InitTick+0x40>)
 80037b6:	0001      	movs	r1, r0
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	f7fc fccb 	bl	8000154 <__udivsi3>
 80037be:	f000 f885 	bl	80038cc <HAL_SYSTICK_Config>
 80037c2:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80037c4:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037c6:	2c00      	cmp	r4, #0
 80037c8:	d109      	bne.n	80037de <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ca:	2d03      	cmp	r5, #3
 80037cc:	d807      	bhi.n	80037de <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037ce:	3802      	subs	r0, #2
 80037d0:	0022      	movs	r2, r4
 80037d2:	0029      	movs	r1, r5
 80037d4:	f000 f842 	bl	800385c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037d8:	0020      	movs	r0, r4
 80037da:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <HAL_InitTick+0x44>)
 80037dc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80037de:	bd70      	pop	{r4, r5, r6, pc}
 80037e0:	20000020 	.word	0x20000020
 80037e4:	2000001c 	.word	0x2000001c
 80037e8:	20000024 	.word	0x20000024

080037ec <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80037ec:	2340      	movs	r3, #64	; 0x40
 80037ee:	4a08      	ldr	r2, [pc, #32]	; (8003810 <HAL_Init+0x24>)
{
 80037f0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80037f2:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037f4:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80037f6:	430b      	orrs	r3, r1
 80037f8:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037fa:	f7ff ffd3 	bl	80037a4 <HAL_InitTick>
 80037fe:	1e04      	subs	r4, r0, #0
 8003800:	d103      	bne.n	800380a <HAL_Init+0x1e>
    HAL_MspInit();
 8003802:	f7ff fec1 	bl	8003588 <HAL_MspInit>
}
 8003806:	0020      	movs	r0, r4
 8003808:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800380a:	2401      	movs	r4, #1
 800380c:	e7fb      	b.n	8003806 <HAL_Init+0x1a>
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	40022000 	.word	0x40022000

08003814 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003814:	4a03      	ldr	r2, [pc, #12]	; (8003824 <HAL_IncTick+0x10>)
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <HAL_IncTick+0x14>)
 8003818:	6811      	ldr	r1, [r2, #0]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	185b      	adds	r3, r3, r1
 800381e:	6013      	str	r3, [r2, #0]
}
 8003820:	4770      	bx	lr
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	20000354 	.word	0x20000354
 8003828:	20000020 	.word	0x20000020

0800382c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800382c:	4b01      	ldr	r3, [pc, #4]	; (8003834 <HAL_GetTick+0x8>)
 800382e:	6818      	ldr	r0, [r3, #0]
}
 8003830:	4770      	bx	lr
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	20000354 	.word	0x20000354

08003838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003838:	b570      	push	{r4, r5, r6, lr}
 800383a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800383c:	f7ff fff6 	bl	800382c <HAL_GetTick>
 8003840:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003842:	1c63      	adds	r3, r4, #1
 8003844:	d002      	beq.n	800384c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003846:	4b04      	ldr	r3, [pc, #16]	; (8003858 <HAL_Delay+0x20>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800384c:	f7ff ffee 	bl	800382c <HAL_GetTick>
 8003850:	1b40      	subs	r0, r0, r5
 8003852:	42a0      	cmp	r0, r4
 8003854:	d3fa      	bcc.n	800384c <HAL_Delay+0x14>
  {
  }
}
 8003856:	bd70      	pop	{r4, r5, r6, pc}
 8003858:	20000020 	.word	0x20000020

0800385c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800385c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800385e:	25ff      	movs	r5, #255	; 0xff
 8003860:	2403      	movs	r4, #3
 8003862:	002a      	movs	r2, r5
 8003864:	4004      	ands	r4, r0
 8003866:	00e4      	lsls	r4, r4, #3
 8003868:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800386a:	0189      	lsls	r1, r1, #6
 800386c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800386e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003870:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003872:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003874:	2800      	cmp	r0, #0
 8003876:	db0a      	blt.n	800388e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003878:	24c0      	movs	r4, #192	; 0xc0
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_NVIC_SetPriority+0x4c>)
 800387c:	0880      	lsrs	r0, r0, #2
 800387e:	0080      	lsls	r0, r0, #2
 8003880:	18c0      	adds	r0, r0, r3
 8003882:	00a4      	lsls	r4, r4, #2
 8003884:	5903      	ldr	r3, [r0, r4]
 8003886:	401a      	ands	r2, r3
 8003888:	4311      	orrs	r1, r2
 800388a:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800388c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800388e:	200f      	movs	r0, #15
 8003890:	4003      	ands	r3, r0
 8003892:	3b08      	subs	r3, #8
 8003894:	4805      	ldr	r0, [pc, #20]	; (80038ac <HAL_NVIC_SetPriority+0x50>)
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	181b      	adds	r3, r3, r0
 800389c:	69d8      	ldr	r0, [r3, #28]
 800389e:	4002      	ands	r2, r0
 80038a0:	4311      	orrs	r1, r2
 80038a2:	61d9      	str	r1, [r3, #28]
 80038a4:	e7f2      	b.n	800388c <HAL_NVIC_SetPriority+0x30>
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	e000e100 	.word	0xe000e100
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80038b0:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_NVIC_SystemReset+0x14>)
 80038b6:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <HAL_NVIC_SystemReset+0x18>)
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80038be:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80038c0:	e7fd      	b.n	80038be <HAL_NVIC_SystemReset+0xe>
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	e000ed00 	.word	0xe000ed00
 80038c8:	05fa0004 	.word	0x05fa0004

080038cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	1e43      	subs	r3, r0, #1
 80038d0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80038d2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d20d      	bcs.n	80038f4 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038d8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038da:	4a07      	ldr	r2, [pc, #28]	; (80038f8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038dc:	4807      	ldr	r0, [pc, #28]	; (80038fc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038de:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038e0:	6a03      	ldr	r3, [r0, #32]
 80038e2:	0609      	lsls	r1, r1, #24
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038ec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ee:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f0:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038f2:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80038f4:	4770      	bx	lr
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	e000e010 	.word	0xe000e010
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003900:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8003902:	f7ff fbcf 	bl	80030a4 <HAL_SYSTICK_Callback>
}
 8003906:	bd10      	pop	{r4, pc}

08003908 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003908:	2201      	movs	r2, #1
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 800390c:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	4211      	tst	r1, r2
 8003912:	d00a      	beq.n	800392a <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003914:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003918:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 800391a:	4805      	ldr	r0, [pc, #20]	; (8003930 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 800391c:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800391e:	4805      	ldr	r0, [pc, #20]	; (8003934 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003920:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003922:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003926:	6858      	ldr	r0, [r3, #4]
 8003928:	4010      	ands	r0, r2
}
 800392a:	4770      	bx	lr
 800392c:	40022000 	.word	0x40022000
 8003930:	89abcdef 	.word	0x89abcdef
 8003934:	02030405 	.word	0x02030405

08003938 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003938:	2301      	movs	r3, #1
 800393a:	4a03      	ldr	r2, [pc, #12]	; (8003948 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 800393c:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800393e:	6851      	ldr	r1, [r2, #4]
 8003940:	430b      	orrs	r3, r1
 8003942:	6053      	str	r3, [r2, #4]
}
 8003944:	4770      	bx	lr
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	40022000 	.word	0x40022000

0800394c <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800394c:	4a58      	ldr	r2, [pc, #352]	; (8003ab0 <HAL_GPIO_Init+0x164>)
{
 800394e:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003950:	1882      	adds	r2, r0, r2
 8003952:	1e54      	subs	r4, r2, #1
 8003954:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8003956:	2300      	movs	r3, #0
{
 8003958:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800395a:	3205      	adds	r2, #5
{
 800395c:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800395e:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003960:	9a03      	ldr	r2, [sp, #12]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	0014      	movs	r4, r2
 8003966:	40dc      	lsrs	r4, r3
 8003968:	d101      	bne.n	800396e <HAL_GPIO_Init+0x22>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 800396a:	b007      	add	sp, #28
 800396c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800396e:	2101      	movs	r1, #1
 8003970:	000d      	movs	r5, r1
 8003972:	0014      	movs	r4, r2
 8003974:	409d      	lsls	r5, r3
 8003976:	402c      	ands	r4, r5
 8003978:	468c      	mov	ip, r1
 800397a:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 800397c:	422a      	tst	r2, r5
 800397e:	d100      	bne.n	8003982 <HAL_GPIO_Init+0x36>
 8003980:	e094      	b.n	8003aac <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003982:	2403      	movs	r4, #3
 8003984:	9a03      	ldr	r2, [sp, #12]
 8003986:	005e      	lsls	r6, r3, #1
 8003988:	6852      	ldr	r2, [r2, #4]
 800398a:	9201      	str	r2, [sp, #4]
 800398c:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800398e:	40b4      	lsls	r4, r6
 8003990:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003992:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003994:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003996:	4564      	cmp	r4, ip
 8003998:	d82a      	bhi.n	80039f0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 800399a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800399c:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 800399e:	9903      	ldr	r1, [sp, #12]
 80039a0:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a2:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039a4:	40b4      	lsls	r4, r6
 80039a6:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 80039a8:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80039aa:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039ac:	43ac      	bics	r4, r5
 80039ae:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039b0:	090c      	lsrs	r4, r1, #4
 80039b2:	4661      	mov	r1, ip
 80039b4:	400c      	ands	r4, r1
 80039b6:	409c      	lsls	r4, r3
 80039b8:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80039ba:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80039bc:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039be:	9904      	ldr	r1, [sp, #16]
 80039c0:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039c2:	9903      	ldr	r1, [sp, #12]
 80039c4:	688c      	ldr	r4, [r1, #8]
 80039c6:	40b4      	lsls	r4, r6
 80039c8:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80039ca:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039cc:	2a02      	cmp	r2, #2
 80039ce:	d111      	bne.n	80039f4 <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80039d0:	2507      	movs	r5, #7
 80039d2:	210f      	movs	r1, #15
 80039d4:	401d      	ands	r5, r3
 80039d6:	00ad      	lsls	r5, r5, #2
 80039d8:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 80039da:	08dc      	lsrs	r4, r3, #3
 80039dc:	00a4      	lsls	r4, r4, #2
 80039de:	1904      	adds	r4, r0, r4
 80039e0:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80039e2:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80039e4:	9903      	ldr	r1, [sp, #12]
 80039e6:	6909      	ldr	r1, [r1, #16]
 80039e8:	40a9      	lsls	r1, r5
 80039ea:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80039ec:	6227      	str	r7, [r4, #32]
 80039ee:	e001      	b.n	80039f4 <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039f0:	2a03      	cmp	r2, #3
 80039f2:	d1e3      	bne.n	80039bc <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039f4:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 80039f6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039f8:	9904      	ldr	r1, [sp, #16]
 80039fa:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039fc:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 80039fe:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a00:	22c0      	movs	r2, #192	; 0xc0
 8003a02:	9901      	ldr	r1, [sp, #4]
 8003a04:	0292      	lsls	r2, r2, #10
 8003a06:	4211      	tst	r1, r2
 8003a08:	d050      	beq.n	8003aac <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0a:	2701      	movs	r7, #1
 8003a0c:	4c29      	ldr	r4, [pc, #164]	; (8003ab4 <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003a0e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a10:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003a12:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a14:	433a      	orrs	r2, r7
 8003a16:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003a18:	4a27      	ldr	r2, [pc, #156]	; (8003ab8 <HAL_GPIO_Init+0x16c>)
 8003a1a:	089c      	lsrs	r4, r3, #2
 8003a1c:	00a4      	lsls	r4, r4, #2
 8003a1e:	18a4      	adds	r4, r4, r2
 8003a20:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003a22:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8003a24:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003a26:	220f      	movs	r2, #15
 8003a28:	00ad      	lsls	r5, r5, #2
 8003a2a:	40aa      	lsls	r2, r5
 8003a2c:	4661      	mov	r1, ip
 8003a2e:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003a30:	22a0      	movs	r2, #160	; 0xa0
 8003a32:	05d2      	lsls	r2, r2, #23
 8003a34:	4694      	mov	ip, r2
 8003a36:	2200      	movs	r2, #0
 8003a38:	4560      	cmp	r0, ip
 8003a3a:	d00d      	beq.n	8003a58 <HAL_GPIO_Init+0x10c>
 8003a3c:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <HAL_GPIO_Init+0x170>)
 8003a3e:	4694      	mov	ip, r2
 8003a40:	003a      	movs	r2, r7
 8003a42:	4560      	cmp	r0, ip
 8003a44:	d008      	beq.n	8003a58 <HAL_GPIO_Init+0x10c>
 8003a46:	4f1e      	ldr	r7, [pc, #120]	; (8003ac0 <HAL_GPIO_Init+0x174>)
 8003a48:	1892      	adds	r2, r2, r2
 8003a4a:	42b8      	cmp	r0, r7
 8003a4c:	d004      	beq.n	8003a58 <HAL_GPIO_Init+0x10c>
 8003a4e:	4f1d      	ldr	r7, [pc, #116]	; (8003ac4 <HAL_GPIO_Init+0x178>)
 8003a50:	0032      	movs	r2, r6
 8003a52:	42b8      	cmp	r0, r7
 8003a54:	d000      	beq.n	8003a58 <HAL_GPIO_Init+0x10c>
 8003a56:	9a05      	ldr	r2, [sp, #20]
 8003a58:	40aa      	lsls	r2, r5
 8003a5a:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8003a5c:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a5e:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8003a60:	000d      	movs	r5, r1
        temp = EXTI->RTSR;
 8003a62:	4a19      	ldr	r2, [pc, #100]	; (8003ac8 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 8003a64:	43cc      	mvns	r4, r1
        temp = EXTI->RTSR;
 8003a66:	6896      	ldr	r6, [r2, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a68:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003a6a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a6c:	02c9      	lsls	r1, r1, #11
 8003a6e:	d401      	bmi.n	8003a74 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8003a70:	0035      	movs	r5, r6
 8003a72:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8003a74:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003a76:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8003a78:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a7a:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003a7c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a7e:	0289      	lsls	r1, r1, #10
 8003a80:	d401      	bmi.n	8003a86 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8003a82:	0035      	movs	r5, r6
 8003a84:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 8003a86:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8003a88:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003a8a:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a8c:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003a8e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a90:	0389      	lsls	r1, r1, #14
 8003a92:	d401      	bmi.n	8003a98 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8003a94:	0035      	movs	r5, r6
 8003a96:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8003a98:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8003a9a:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8003a9c:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a9e:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003aa0:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aa2:	03c9      	lsls	r1, r1, #15
 8003aa4:	d401      	bmi.n	8003aaa <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 8003aa6:	4025      	ands	r5, r4
 8003aa8:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8003aaa:	6016      	str	r6, [r2, #0]
    position++;
 8003aac:	3301      	adds	r3, #1
 8003aae:	e757      	b.n	8003960 <HAL_GPIO_Init+0x14>
 8003ab0:	afffe400 	.word	0xafffe400
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	50000400 	.word	0x50000400
 8003ac0:	50000800 	.word	0x50000800
 8003ac4:	50000c00 	.word	0x50000c00
 8003ac8:	40010400 	.word	0x40010400

08003acc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003acc:	2a00      	cmp	r2, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ad0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003ad2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003ad4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003ad6:	e7fc      	b.n	8003ad2 <HAL_GPIO_WritePin+0x6>

08003ad8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ad8:	6803      	ldr	r3, [r0, #0]
 8003ada:	699a      	ldr	r2, [r3, #24]
 8003adc:	0792      	lsls	r2, r2, #30
 8003ade:	d501      	bpl.n	8003ae4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	6999      	ldr	r1, [r3, #24]
 8003ae8:	4211      	tst	r1, r2
 8003aea:	d102      	bne.n	8003af2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003aec:	6999      	ldr	r1, [r3, #24]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	619a      	str	r2, [r3, #24]
  }
}
 8003af2:	4770      	bx	lr

08003af4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003af4:	b530      	push	{r4, r5, lr}
 8003af6:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003af8:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003afa:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003afc:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003afe:	0589      	lsls	r1, r1, #22
 8003b00:	431a      	orrs	r2, r3
 8003b02:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <I2C_TransferConfig+0x28>)
 8003b06:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b08:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b0a:	0d64      	lsrs	r4, r4, #21
 8003b0c:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b0e:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b10:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b12:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b14:	432a      	orrs	r2, r5
 8003b16:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b18:	bd30      	pop	{r4, r5, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	03ff63ff 	.word	0x03ff63ff

08003b20 <I2C_IsErrorOccurred>:
{
 8003b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b22:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b24:	6802      	ldr	r2, [r0, #0]
{
 8003b26:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b28:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b2a:	2310      	movs	r3, #16
 8003b2c:	000f      	movs	r7, r1
{
 8003b2e:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b30:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8003b32:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b34:	4219      	tst	r1, r3
 8003b36:	d00e      	beq.n	8003b56 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b38:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b3a:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8003b3c:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	699a      	ldr	r2, [r3, #24]
 8003b44:	423a      	tst	r2, r7
 8003b46:	d164      	bne.n	8003c12 <I2C_IsErrorOccurred+0xf2>
 8003b48:	9a01      	ldr	r2, [sp, #4]
 8003b4a:	2a00      	cmp	r2, #0
 8003b4c:	d032      	beq.n	8003bb4 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 8003b4e:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8003b50:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8003b52:	9b00      	ldr	r3, [sp, #0]
 8003b54:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b56:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8003b58:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b5a:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 8003b5c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b5e:	420a      	tst	r2, r1
 8003b60:	d002      	beq.n	8003b68 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 8003b62:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b64:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8003b66:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b68:	2180      	movs	r1, #128	; 0x80
 8003b6a:	00c9      	lsls	r1, r1, #3
 8003b6c:	420a      	tst	r2, r1
 8003b6e:	d003      	beq.n	8003b78 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8003b70:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b72:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8003b74:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 8003b76:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b78:	2180      	movs	r1, #128	; 0x80
 8003b7a:	0089      	lsls	r1, r1, #2
 8003b7c:	420a      	tst	r2, r1
 8003b7e:	d04d      	beq.n	8003c1c <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b80:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b82:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b84:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 8003b86:	0020      	movs	r0, r4
 8003b88:	f7ff ffa6 	bl	8003ad8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003b8c:	6822      	ldr	r2, [r4, #0]
 8003b8e:	4925      	ldr	r1, [pc, #148]	; (8003c24 <I2C_IsErrorOccurred+0x104>)
 8003b90:	6853      	ldr	r3, [r2, #4]
 8003b92:	400b      	ands	r3, r1
 8003b94:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	0023      	movs	r3, r4
 8003b98:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8003b9a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b9c:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 8003b9e:	4307      	orrs	r7, r0
 8003ba0:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ba2:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	0022      	movs	r2, r4
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8003baa:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003bae:	2001      	movs	r0, #1
 8003bb0:	7023      	strb	r3, [r4, #0]
 8003bb2:	e035      	b.n	8003c20 <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 8003bb4:	1c72      	adds	r2, r6, #1
 8003bb6:	d0c4      	beq.n	8003b42 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bb8:	f7ff fe38 	bl	800382c <HAL_GetTick>
 8003bbc:	1b40      	subs	r0, r0, r5
 8003bbe:	42b0      	cmp	r0, r6
 8003bc0:	d801      	bhi.n	8003bc6 <I2C_IsErrorOccurred+0xa6>
 8003bc2:	2e00      	cmp	r6, #0
 8003bc4:	d1bc      	bne.n	8003b40 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8003bc6:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bc8:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8003bca:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bcc:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8003bce:	7811      	ldrb	r1, [r2, #0]
 8003bd0:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bd2:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8003bd4:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bd6:	699a      	ldr	r2, [r3, #24]
 8003bd8:	0209      	lsls	r1, r1, #8
 8003bda:	420a      	tst	r2, r1
 8003bdc:	d00c      	beq.n	8003bf8 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bde:	2280      	movs	r2, #128	; 0x80
 8003be0:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003be2:	4210      	tst	r0, r2
 8003be4:	d108      	bne.n	8003bf8 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 8003be6:	4661      	mov	r1, ip
 8003be8:	2920      	cmp	r1, #32
 8003bea:	d005      	beq.n	8003bf8 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bec:	6859      	ldr	r1, [r3, #4]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8003bf2:	f7ff fe1b 	bl	800382c <HAL_GetTick>
 8003bf6:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	423b      	tst	r3, r7
 8003bfe:	d19f      	bne.n	8003b40 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c00:	f7ff fe14 	bl	800382c <HAL_GetTick>
 8003c04:	1b40      	subs	r0, r0, r5
 8003c06:	2819      	cmp	r0, #25
 8003c08:	d9f6      	bls.n	8003bf8 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c0c:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	e796      	b.n	8003b40 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 8003c12:	9a01      	ldr	r2, [sp, #4]
 8003c14:	2a00      	cmp	r2, #0
 8003c16:	d19a      	bne.n	8003b4e <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c18:	61df      	str	r7, [r3, #28]
 8003c1a:	e798      	b.n	8003b4e <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8003c1c:	2800      	cmp	r0, #0
 8003c1e:	d1b2      	bne.n	8003b86 <I2C_IsErrorOccurred+0x66>
}
 8003c20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	fe00e800 	.word	0xfe00e800

08003c28 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2a:	0004      	movs	r4, r0
 8003c2c:	000d      	movs	r5, r1
 8003c2e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c30:	2702      	movs	r7, #2
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	423b      	tst	r3, r7
 8003c38:	d001      	beq.n	8003c3e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8003c3a:	2000      	movs	r0, #0
}
 8003c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3e:	0032      	movs	r2, r6
 8003c40:	0029      	movs	r1, r5
 8003c42:	0020      	movs	r0, r4
 8003c44:	f7ff ff6c 	bl	8003b20 <I2C_IsErrorOccurred>
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	d118      	bne.n	8003c7e <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8003c4c:	1c6b      	adds	r3, r5, #1
 8003c4e:	d0f0      	beq.n	8003c32 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c50:	f7ff fdec 	bl	800382c <HAL_GetTick>
 8003c54:	1b80      	subs	r0, r0, r6
 8003c56:	42a8      	cmp	r0, r5
 8003c58:	d801      	bhi.n	8003c5e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8003c5a:	2d00      	cmp	r5, #0
 8003c5c:	d1e9      	bne.n	8003c32 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	001a      	movs	r2, r3
 8003c64:	403a      	ands	r2, r7
 8003c66:	423b      	tst	r3, r7
 8003c68:	d1e3      	bne.n	8003c32 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c6a:	2120      	movs	r1, #32
 8003c6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c6e:	430b      	orrs	r3, r1
 8003c70:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c72:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8003c74:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	3341      	adds	r3, #65	; 0x41
 8003c78:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7a:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8003c7c:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8003c7e:	2001      	movs	r0, #1
 8003c80:	e7dc      	b.n	8003c3c <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08003c82 <I2C_WaitOnFlagUntilTimeout>:
{
 8003c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c84:	0004      	movs	r4, r0
 8003c86:	000d      	movs	r5, r1
 8003c88:	0017      	movs	r7, r2
 8003c8a:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c8c:	6822      	ldr	r2, [r4, #0]
 8003c8e:	6993      	ldr	r3, [r2, #24]
 8003c90:	402b      	ands	r3, r5
 8003c92:	1b5b      	subs	r3, r3, r5
 8003c94:	4259      	negs	r1, r3
 8003c96:	414b      	adcs	r3, r1
 8003c98:	42bb      	cmp	r3, r7
 8003c9a:	d001      	beq.n	8003ca0 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	e01f      	b.n	8003ce0 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8003ca0:	1c73      	adds	r3, r6, #1
 8003ca2:	d0f4      	beq.n	8003c8e <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca4:	f7ff fdc2 	bl	800382c <HAL_GetTick>
 8003ca8:	9b06      	ldr	r3, [sp, #24]
 8003caa:	1ac0      	subs	r0, r0, r3
 8003cac:	42b0      	cmp	r0, r6
 8003cae:	d801      	bhi.n	8003cb4 <I2C_WaitOnFlagUntilTimeout+0x32>
 8003cb0:	2e00      	cmp	r6, #0
 8003cb2:	d1eb      	bne.n	8003c8c <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	402b      	ands	r3, r5
 8003cba:	1b5b      	subs	r3, r3, r5
 8003cbc:	425a      	negs	r2, r3
 8003cbe:	4153      	adcs	r3, r2
 8003cc0:	42bb      	cmp	r3, r7
 8003cc2:	d1e3      	bne.n	8003c8c <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8003cc8:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cce:	0023      	movs	r3, r4
 8003cd0:	3341      	adds	r3, #65	; 0x41
 8003cd2:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd4:	0022      	movs	r2, r4
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8003cda:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cdc:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8003cde:	7023      	strb	r3, [r4, #0]
}
 8003ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ce2 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce4:	0004      	movs	r4, r0
 8003ce6:	000e      	movs	r6, r1
 8003ce8:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cea:	2520      	movs	r5, #32
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	422b      	tst	r3, r5
 8003cf2:	d001      	beq.n	8003cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8003cf4:	2000      	movs	r0, #0
}
 8003cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf8:	003a      	movs	r2, r7
 8003cfa:	0031      	movs	r1, r6
 8003cfc:	0020      	movs	r0, r4
 8003cfe:	f7ff ff0f 	bl	8003b20 <I2C_IsErrorOccurred>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d115      	bne.n	8003d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d06:	f7ff fd91 	bl	800382c <HAL_GetTick>
 8003d0a:	1bc0      	subs	r0, r0, r7
 8003d0c:	42b0      	cmp	r0, r6
 8003d0e:	d801      	bhi.n	8003d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003d10:	2e00      	cmp	r6, #0
 8003d12:	d1eb      	bne.n	8003cec <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	001a      	movs	r2, r3
 8003d1a:	402a      	ands	r2, r5
 8003d1c:	422b      	tst	r3, r5
 8003d1e:	d1e5      	bne.n	8003cec <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003d22:	432b      	orrs	r3, r5
 8003d24:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8003d28:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	3341      	adds	r3, #65	; 0x41
 8003d2c:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2e:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8003d30:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8003d32:	2001      	movs	r0, #1
 8003d34:	e7df      	b.n	8003cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

08003d38 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	0004      	movs	r4, r0
 8003d3c:	000d      	movs	r5, r1
 8003d3e:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d40:	2604      	movs	r6, #4
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	4233      	tst	r3, r6
 8003d48:	d111      	bne.n	8003d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4a:	003a      	movs	r2, r7
 8003d4c:	0029      	movs	r1, r5
 8003d4e:	0020      	movs	r0, r4
 8003d50:	f7ff fee6 	bl	8003b20 <I2C_IsErrorOccurred>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d124      	bne.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d58:	2120      	movs	r1, #32
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	420a      	tst	r2, r1
 8003d60:	d023      	beq.n	8003daa <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	4232      	tst	r2, r6
 8003d66:	d004      	beq.n	8003d72 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8003d68:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003d6a:	2a00      	cmp	r2, #0
 8003d6c:	d001      	beq.n	8003d72 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 8003d6e:	2000      	movs	r0, #0
}
 8003d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d72:	6999      	ldr	r1, [r3, #24]
 8003d74:	2210      	movs	r2, #16
 8003d76:	0008      	movs	r0, r1
 8003d78:	4010      	ands	r0, r2
 8003d7a:	4211      	tst	r1, r2
 8003d7c:	d013      	beq.n	8003da6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003d80:	3a0c      	subs	r2, #12
 8003d82:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d84:	2120      	movs	r1, #32
 8003d86:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	4813      	ldr	r0, [pc, #76]	; (8003dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>)
 8003d8c:	4002      	ands	r2, r0
 8003d8e:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8003d90:	0023      	movs	r3, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	0022      	movs	r2, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8003d94:	3341      	adds	r3, #65	; 0x41
 8003d96:	7019      	strb	r1, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8003d9c:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9e:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003da0:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003da2:	2001      	movs	r0, #1
 8003da4:	e7e4      	b.n	8003d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da6:	6460      	str	r0, [r4, #68]	; 0x44
 8003da8:	e7ec      	b.n	8003d84 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003daa:	f7ff fd3f 	bl	800382c <HAL_GetTick>
 8003dae:	1bc0      	subs	r0, r0, r7
 8003db0:	42a8      	cmp	r0, r5
 8003db2:	d801      	bhi.n	8003db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8003db4:	2d00      	cmp	r5, #0
 8003db6:	d1c4      	bne.n	8003d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	4031      	ands	r1, r6
 8003dc0:	4233      	tst	r3, r6
 8003dc2:	d1be      	bne.n	8003d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8003dce:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	3341      	adds	r3, #65	; 0x41
 8003dd2:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 8003dd4:	7021      	strb	r1, [r4, #0]
        return HAL_ERROR;
 8003dd6:	e7e4      	b.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
 8003dd8:	fe00e800 	.word	0xfe00e800

08003ddc <HAL_I2C_Init>:
{
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003de0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003de2:	2c00      	cmp	r4, #0
 8003de4:	d03f      	beq.n	8003e66 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003de6:	0025      	movs	r5, r4
 8003de8:	3541      	adds	r5, #65	; 0x41
 8003dea:	782b      	ldrb	r3, [r5, #0]
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d105      	bne.n	8003dfe <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8003df2:	0023      	movs	r3, r4
 8003df4:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003df6:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8003df8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8003dfa:	f7ff fbd3 	bl	80035a4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dfe:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003e00:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e02:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003e04:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e06:	481d      	ldr	r0, [pc, #116]	; (8003e7c <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8003e08:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e0a:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e10:	6861      	ldr	r1, [r4, #4]
 8003e12:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <HAL_I2C_Init+0xa4>)
 8003e14:	400a      	ands	r2, r1
 8003e16:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	4002      	ands	r2, r0
 8003e1c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e1e:	68e2      	ldr	r2, [r4, #12]
 8003e20:	2a01      	cmp	r2, #1
 8003e22:	d121      	bne.n	8003e68 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e24:	2180      	movs	r1, #128	; 0x80
 8003e26:	0209      	lsls	r1, r1, #8
 8003e28:	4331      	orrs	r1, r6
 8003e2a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	4915      	ldr	r1, [pc, #84]	; (8003e84 <HAL_I2C_Init+0xa8>)
 8003e30:	4311      	orrs	r1, r2
 8003e32:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e34:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e36:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e38:	4002      	ands	r2, r0
 8003e3a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e3c:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e3e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e40:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e42:	69a1      	ldr	r1, [r4, #24]
 8003e44:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e46:	430a      	orrs	r2, r1
 8003e48:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e4a:	6a21      	ldr	r1, [r4, #32]
 8003e4c:	69e2      	ldr	r2, [r4, #28]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003e52:	2201      	movs	r2, #1
 8003e54:	6819      	ldr	r1, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e5c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e60:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e62:	3442      	adds	r4, #66	; 0x42
 8003e64:	7020      	strb	r0, [r4, #0]
}
 8003e66:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e68:	2184      	movs	r1, #132	; 0x84
 8003e6a:	0209      	lsls	r1, r1, #8
 8003e6c:	4331      	orrs	r1, r6
 8003e6e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e70:	2a02      	cmp	r2, #2
 8003e72:	d1db      	bne.n	8003e2c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	0112      	lsls	r2, r2, #4
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	e7d7      	b.n	8003e2c <HAL_I2C_Init+0x50>
 8003e7c:	ffff7fff 	.word	0xffff7fff
 8003e80:	f0ffffff 	.word	0xf0ffffff
 8003e84:	02008000 	.word	0x02008000

08003e88 <HAL_I2C_Master_Transmit>:
{
 8003e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8e:	0003      	movs	r3, r0
 8003e90:	3341      	adds	r3, #65	; 0x41
{
 8003e92:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e94:	9303      	str	r3, [sp, #12]
 8003e96:	781b      	ldrb	r3, [r3, #0]
{
 8003e98:	0004      	movs	r4, r0
 8003e9a:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003e9c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d114      	bne.n	8003ecc <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 8003ea2:	0023      	movs	r3, r4
 8003ea4:	3340      	adds	r3, #64	; 0x40
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	2a01      	cmp	r2, #1
 8003eaa:	d00f      	beq.n	8003ecc <HAL_I2C_Master_Transmit+0x44>
 8003eac:	2601      	movs	r6, #1
 8003eae:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003eb0:	f7ff fcbc 	bl	800382c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003eb4:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003eb6:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003eb8:	9000      	str	r0, [sp, #0]
 8003eba:	2319      	movs	r3, #25
 8003ebc:	0032      	movs	r2, r6
 8003ebe:	0020      	movs	r0, r4
 8003ec0:	0209      	lsls	r1, r1, #8
 8003ec2:	f7ff fede 	bl	8003c82 <I2C_WaitOnFlagUntilTimeout>
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 8003eca:	2001      	movs	r0, #1
}
 8003ecc:	b007      	add	sp, #28
 8003ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ed0:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ed2:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ed4:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ed6:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ed8:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003eda:	3b11      	subs	r3, #17
 8003edc:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8003ede:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003ee2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ee4:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8003ee6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003ee8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003eec:	4b2d      	ldr	r3, [pc, #180]	; (8003fa4 <HAL_I2C_Master_Transmit+0x11c>)
 8003eee:	2aff      	cmp	r2, #255	; 0xff
 8003ef0:	d920      	bls.n	8003f34 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ef2:	22ff      	movs	r2, #255	; 0xff
 8003ef4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003efc:	0039      	movs	r1, r7
 8003efe:	0020      	movs	r0, r4
 8003f00:	f7ff fdf8 	bl	8003af4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f06:	002a      	movs	r2, r5
 8003f08:	0020      	movs	r0, r4
 8003f0a:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d119      	bne.n	8003f44 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f10:	f7ff fee7 	bl	8003ce2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d1d8      	bne.n	8003eca <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f18:	2120      	movs	r1, #32
 8003f1a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003f1c:	4d22      	ldr	r5, [pc, #136]	; (8003fa8 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f1e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	402a      	ands	r2, r5
 8003f24:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003f28:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003f2a:	3341      	adds	r3, #65	; 0x41
 8003f2c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f2e:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003f30:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003f32:	e7cb      	b.n	8003ecc <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8003f34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003f36:	b292      	uxth	r2, r2
 8003f38:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	049b      	lsls	r3, r3, #18
 8003f42:	e7db      	b.n	8003efc <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f44:	f7ff fe70 	bl	8003c28 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d1be      	bne.n	8003eca <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f4e:	6822      	ldr	r2, [r4, #0]
 8003f50:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003f52:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f54:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003f56:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003f58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003f5a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003f62:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003f66:	b292      	uxth	r2, r2
 8003f68:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0ca      	beq.n	8003f04 <HAL_I2C_Master_Transmit+0x7c>
 8003f6e:	2a00      	cmp	r2, #0
 8003f70:	d1c8      	bne.n	8003f04 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	0020      	movs	r0, r4
 8003f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f78:	9500      	str	r5, [sp, #0]
 8003f7a:	f7ff fe82 	bl	8003c82 <I2C_WaitOnFlagUntilTimeout>
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d1a3      	bne.n	8003eca <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f84:	2bff      	cmp	r3, #255	; 0xff
 8003f86:	d906      	bls.n	8003f96 <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f88:	23ff      	movs	r3, #255	; 0xff
 8003f8a:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	22ff      	movs	r2, #255	; 0xff
 8003f90:	9000      	str	r0, [sp, #0]
 8003f92:	045b      	lsls	r3, r3, #17
 8003f94:	e7b2      	b.n	8003efc <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8003f96:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003f98:	b292      	uxth	r2, r2
 8003f9a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	9000      	str	r0, [sp, #0]
 8003fa0:	e7cd      	b.n	8003f3e <HAL_I2C_Master_Transmit+0xb6>
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	80002000 	.word	0x80002000
 8003fa8:	fe00e800 	.word	0xfe00e800

08003fac <HAL_I2C_Master_Receive>:
{
 8003fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	3341      	adds	r3, #65	; 0x41
{
 8003fb6:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb8:	9303      	str	r3, [sp, #12]
 8003fba:	781b      	ldrb	r3, [r3, #0]
{
 8003fbc:	0004      	movs	r4, r0
 8003fbe:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003fc0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d114      	bne.n	8003ff0 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 8003fc6:	0023      	movs	r3, r4
 8003fc8:	3340      	adds	r3, #64	; 0x40
 8003fca:	781a      	ldrb	r2, [r3, #0]
 8003fcc:	2a01      	cmp	r2, #1
 8003fce:	d00f      	beq.n	8003ff0 <HAL_I2C_Master_Receive+0x44>
 8003fd0:	2601      	movs	r6, #1
 8003fd2:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003fd4:	f7ff fc2a 	bl	800382c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fd8:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003fda:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fdc:	9000      	str	r0, [sp, #0]
 8003fde:	2319      	movs	r3, #25
 8003fe0:	0032      	movs	r2, r6
 8003fe2:	0020      	movs	r0, r4
 8003fe4:	0209      	lsls	r1, r1, #8
 8003fe6:	f7ff fe4c 	bl	8003c82 <I2C_WaitOnFlagUntilTimeout>
 8003fea:	2800      	cmp	r0, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 8003fee:	2001      	movs	r0, #1
}
 8003ff0:	b007      	add	sp, #28
 8003ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ff4:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ff6:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ff8:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ffa:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ffc:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ffe:	3b12      	subs	r3, #18
 8004000:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8004002:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004004:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004006:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004008:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800400a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800400c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800400e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004010:	4b2d      	ldr	r3, [pc, #180]	; (80040c8 <HAL_I2C_Master_Receive+0x11c>)
 8004012:	2aff      	cmp	r2, #255	; 0xff
 8004014:	d920      	bls.n	8004058 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004016:	22ff      	movs	r2, #255	; 0xff
 8004018:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004020:	0039      	movs	r1, r7
 8004022:	0020      	movs	r0, r4
 8004024:	f7ff fd66 	bl	8003af4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004028:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800402a:	002a      	movs	r2, r5
 800402c:	0020      	movs	r0, r4
 800402e:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8004030:	2b00      	cmp	r3, #0
 8004032:	d119      	bne.n	8004068 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004034:	f7ff fe55 	bl	8003ce2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004038:	2800      	cmp	r0, #0
 800403a:	d1d8      	bne.n	8003fee <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800403c:	2120      	movs	r1, #32
 800403e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8004040:	4d22      	ldr	r5, [pc, #136]	; (80040cc <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004042:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	402a      	ands	r2, r5
 8004048:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800404a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800404c:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800404e:	3341      	adds	r3, #65	; 0x41
 8004050:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004052:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8004054:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8004056:	e7cb      	b.n	8003ff0 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8004058:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800405a:	b292      	uxth	r2, r2
 800405c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	049b      	lsls	r3, r3, #18
 8004066:	e7db      	b.n	8004020 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004068:	f7ff fe66 	bl	8003d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 800406c:	2800      	cmp	r0, #0
 800406e:	d1be      	bne.n	8003fee <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8004078:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800407a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800407c:	3301      	adds	r3, #1
 800407e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004080:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004082:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004084:	3b01      	subs	r3, #1
 8004086:	b29b      	uxth	r3, r3
 8004088:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800408a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800408c:	b292      	uxth	r2, r2
 800408e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0c9      	beq.n	8004028 <HAL_I2C_Master_Receive+0x7c>
 8004094:	2a00      	cmp	r2, #0
 8004096:	d1c7      	bne.n	8004028 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	0020      	movs	r0, r4
 800409c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800409e:	9500      	str	r5, [sp, #0]
 80040a0:	f7ff fdef 	bl	8003c82 <I2C_WaitOnFlagUntilTimeout>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d1a2      	bne.n	8003fee <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040aa:	2bff      	cmp	r3, #255	; 0xff
 80040ac:	d906      	bls.n	80040bc <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ae:	23ff      	movs	r3, #255	; 0xff
 80040b0:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	22ff      	movs	r2, #255	; 0xff
 80040b6:	9000      	str	r0, [sp, #0]
 80040b8:	045b      	lsls	r3, r3, #17
 80040ba:	e7b1      	b.n	8004020 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 80040bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80040be:	b292      	uxth	r2, r2
 80040c0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	9000      	str	r0, [sp, #0]
 80040c6:	e7cc      	b.n	8004062 <HAL_I2C_Master_Receive+0xb6>
 80040c8:	80002400 	.word	0x80002400
 80040cc:	fe00e800 	.word	0xfe00e800

080040d0 <HAL_I2C_Mem_Write>:
{
 80040d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040d2:	b089      	sub	sp, #36	; 0x24
 80040d4:	9304      	str	r3, [sp, #16]
 80040d6:	ab0e      	add	r3, sp, #56	; 0x38
 80040d8:	9203      	str	r2, [sp, #12]
 80040da:	cb04      	ldmia	r3!, {r2}
 80040dc:	0004      	movs	r4, r0
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	9205      	str	r2, [sp, #20]
 80040e2:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e4:	0003      	movs	r3, r0
 80040e6:	3341      	adds	r3, #65	; 0x41
 80040e8:	9307      	str	r3, [sp, #28]
 80040ea:	781b      	ldrb	r3, [r3, #0]
{
 80040ec:	000f      	movs	r7, r1
    return HAL_BUSY;
 80040ee:	2002      	movs	r0, #2
{
 80040f0:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d108      	bne.n	8004108 <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 80040f6:	2a00      	cmp	r2, #0
 80040f8:	d002      	beq.n	8004100 <HAL_I2C_Mem_Write+0x30>
 80040fa:	9b06      	ldr	r3, [sp, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d105      	bne.n	800410c <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004106:	2001      	movs	r0, #1
}
 8004108:	b009      	add	sp, #36	; 0x24
 800410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800410c:	0023      	movs	r3, r4
 800410e:	3340      	adds	r3, #64	; 0x40
 8004110:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8004112:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8004114:	2a01      	cmp	r2, #1
 8004116:	d0f7      	beq.n	8004108 <HAL_I2C_Mem_Write+0x38>
 8004118:	2201      	movs	r2, #1
 800411a:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800411c:	f7ff fb86 	bl	800382c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004120:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8004122:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004124:	9000      	str	r0, [sp, #0]
 8004126:	2319      	movs	r3, #25
 8004128:	2201      	movs	r2, #1
 800412a:	0020      	movs	r0, r4
 800412c:	0209      	lsls	r1, r1, #8
 800412e:	f7ff fda8 	bl	8003c82 <I2C_WaitOnFlagUntilTimeout>
 8004132:	2800      	cmp	r0, #0
 8004134:	d1e7      	bne.n	8004106 <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004136:	2321      	movs	r3, #33	; 0x21
 8004138:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800413a:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800413c:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800413e:	0023      	movs	r3, r4
 8004140:	3342      	adds	r3, #66	; 0x42
 8004142:	9307      	str	r3, [sp, #28]
 8004144:	2340      	movs	r3, #64	; 0x40
 8004146:	9a07      	ldr	r2, [sp, #28]
 8004148:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 800414a:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800414c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800414e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004150:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 8004152:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8004154:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004156:	466b      	mov	r3, sp
 8004158:	7c1a      	ldrb	r2, [r3, #16]
 800415a:	4b4a      	ldr	r3, [pc, #296]	; (8004284 <HAL_I2C_Mem_Write+0x1b4>)
 800415c:	0020      	movs	r0, r4
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	045b      	lsls	r3, r3, #17
 8004164:	f7ff fcc6 	bl	8003af4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004168:	002a      	movs	r2, r5
 800416a:	0031      	movs	r1, r6
 800416c:	0020      	movs	r0, r4
 800416e:	f7ff fd5b 	bl	8003c28 <I2C_WaitOnTXISFlagUntilTimeout>
 8004172:	2800      	cmp	r0, #0
 8004174:	d126      	bne.n	80041c4 <HAL_I2C_Mem_Write+0xf4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004176:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004178:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800417a:	2a01      	cmp	r2, #1
 800417c:	d116      	bne.n	80041ac <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800417e:	466a      	mov	r2, sp
 8004180:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004182:	2180      	movs	r1, #128	; 0x80
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004184:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004186:	0020      	movs	r0, r4
 8004188:	0033      	movs	r3, r6
 800418a:	2200      	movs	r2, #0
 800418c:	9500      	str	r5, [sp, #0]
 800418e:	f7ff fd78 	bl	8003c82 <I2C_WaitOnFlagUntilTimeout>
 8004192:	2800      	cmp	r0, #0
 8004194:	d116      	bne.n	80041c4 <HAL_I2C_Mem_Write+0xf4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004196:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004198:	2bff      	cmp	r3, #255	; 0xff
 800419a:	d817      	bhi.n	80041cc <HAL_I2C_Mem_Write+0xfc>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800419c:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 800419e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041a0:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 80041a2:	b292      	uxth	r2, r2
 80041a4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	9000      	str	r0, [sp, #0]
 80041aa:	e014      	b.n	80041d6 <HAL_I2C_Mem_Write+0x106>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041ac:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ae:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041b0:	0a12      	lsrs	r2, r2, #8
 80041b2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b4:	0020      	movs	r0, r4
 80041b6:	002a      	movs	r2, r5
 80041b8:	f7ff fd36 	bl	8003c28 <I2C_WaitOnTXISFlagUntilTimeout>
 80041bc:	2800      	cmp	r0, #0
 80041be:	d101      	bne.n	80041c4 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	e7dc      	b.n	800417e <HAL_I2C_Mem_Write+0xae>
      __HAL_UNLOCK(hi2c);
 80041c4:	2300      	movs	r3, #0
 80041c6:	3440      	adds	r4, #64	; 0x40
 80041c8:	7023      	strb	r3, [r4, #0]
 80041ca:	e79c      	b.n	8004106 <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041cc:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041ce:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041d0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041d2:	045b      	lsls	r3, r3, #17
 80041d4:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041d6:	0039      	movs	r1, r7
 80041d8:	0020      	movs	r0, r4
 80041da:	f7ff fc8b 	bl	8003af4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041de:	002a      	movs	r2, r5
 80041e0:	0031      	movs	r1, r6
 80041e2:	0020      	movs	r0, r4
 80041e4:	f7ff fd20 	bl	8003c28 <I2C_WaitOnTXISFlagUntilTimeout>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d000      	beq.n	80041ee <HAL_I2C_Mem_Write+0x11e>
 80041ec:	e78b      	b.n	8004106 <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041f0:	6822      	ldr	r2, [r4, #0]
 80041f2:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80041f4:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041f6:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80041f8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80041fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80041fc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29b      	uxth	r3, r3
 8004202:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004204:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004206:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004208:	b292      	uxth	r2, r2
 800420a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800420c:	2b00      	cmp	r3, #0
 800420e:	d017      	beq.n	8004240 <HAL_I2C_Mem_Write+0x170>
 8004210:	2a00      	cmp	r2, #0
 8004212:	d115      	bne.n	8004240 <HAL_I2C_Mem_Write+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004214:	0033      	movs	r3, r6
 8004216:	2180      	movs	r1, #128	; 0x80
 8004218:	0020      	movs	r0, r4
 800421a:	9500      	str	r5, [sp, #0]
 800421c:	f7ff fd31 	bl	8003c82 <I2C_WaitOnFlagUntilTimeout>
 8004220:	2800      	cmp	r0, #0
 8004222:	d000      	beq.n	8004226 <HAL_I2C_Mem_Write+0x156>
 8004224:	e76f      	b.n	8004106 <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004226:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004228:	2bff      	cmp	r3, #255	; 0xff
 800422a:	d923      	bls.n	8004274 <HAL_I2C_Mem_Write+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800422c:	23ff      	movs	r3, #255	; 0xff
 800422e:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	22ff      	movs	r2, #255	; 0xff
 8004234:	9000      	str	r0, [sp, #0]
 8004236:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004238:	0039      	movs	r1, r7
 800423a:	0020      	movs	r0, r4
 800423c:	f7ff fc5a 	bl	8003af4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004240:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1cb      	bne.n	80041de <HAL_I2C_Mem_Write+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004246:	002a      	movs	r2, r5
 8004248:	0031      	movs	r1, r6
 800424a:	0020      	movs	r0, r4
 800424c:	f7ff fd49 	bl	8003ce2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004250:	2800      	cmp	r0, #0
 8004252:	d000      	beq.n	8004256 <HAL_I2C_Mem_Write+0x186>
 8004254:	e757      	b.n	8004106 <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004256:	2120      	movs	r1, #32
 8004258:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800425a:	4d0b      	ldr	r5, [pc, #44]	; (8004288 <HAL_I2C_Mem_Write+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800425c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	402a      	ands	r2, r5
 8004262:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004264:	0023      	movs	r3, r4
 8004266:	3341      	adds	r3, #65	; 0x41
 8004268:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800426a:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 800426c:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800426e:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004270:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8004272:	e749      	b.n	8004108 <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004274:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8004276:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004278:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800427a:	b292      	uxth	r2, r2
 800427c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	9000      	str	r0, [sp, #0]
 8004282:	e7d9      	b.n	8004238 <HAL_I2C_Mem_Write+0x168>
 8004284:	80002000 	.word	0x80002000
 8004288:	fe00e800 	.word	0xfe00e800

0800428c <HAL_I2C_Mem_Read>:
{
 800428c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428e:	b089      	sub	sp, #36	; 0x24
 8004290:	9304      	str	r3, [sp, #16]
 8004292:	ab0e      	add	r3, sp, #56	; 0x38
 8004294:	9203      	str	r2, [sp, #12]
 8004296:	cb04      	ldmia	r3!, {r2}
 8004298:	0004      	movs	r4, r0
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	9205      	str	r2, [sp, #20]
 800429e:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a0:	0003      	movs	r3, r0
 80042a2:	3341      	adds	r3, #65	; 0x41
 80042a4:	9307      	str	r3, [sp, #28]
 80042a6:	781b      	ldrb	r3, [r3, #0]
{
 80042a8:	000f      	movs	r7, r1
    return HAL_BUSY;
 80042aa:	2002      	movs	r0, #2
{
 80042ac:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d108      	bne.n	80042c4 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	d002      	beq.n	80042bc <HAL_I2C_Mem_Read+0x30>
 80042b6:	9b06      	ldr	r3, [sp, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042bc:	2380      	movs	r3, #128	; 0x80
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80042c2:	2001      	movs	r0, #1
}
 80042c4:	b009      	add	sp, #36	; 0x24
 80042c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80042c8:	0023      	movs	r3, r4
 80042ca:	3340      	adds	r3, #64	; 0x40
 80042cc:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80042ce:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 80042d0:	2a01      	cmp	r2, #1
 80042d2:	d0f7      	beq.n	80042c4 <HAL_I2C_Mem_Read+0x38>
 80042d4:	2201      	movs	r2, #1
 80042d6:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80042d8:	f7ff faa8 	bl	800382c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	2319      	movs	r3, #25
 80042e0:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80042e2:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042e4:	2201      	movs	r2, #1
 80042e6:	0020      	movs	r0, r4
 80042e8:	0209      	lsls	r1, r1, #8
 80042ea:	f7ff fcca 	bl	8003c82 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	1e03      	subs	r3, r0, #0
 80042f0:	d1e7      	bne.n	80042c2 <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042f2:	2222      	movs	r2, #34	; 0x22
 80042f4:	9907      	ldr	r1, [sp, #28]
 80042f6:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042f8:	0022      	movs	r2, r4
 80042fa:	3242      	adds	r2, #66	; 0x42
 80042fc:	9207      	str	r2, [sp, #28]
 80042fe:	2240      	movs	r2, #64	; 0x40
 8004300:	9907      	ldr	r1, [sp, #28]
 8004302:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8004304:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004306:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004308:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800430a:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800430c:	494d      	ldr	r1, [pc, #308]	; (8004444 <HAL_I2C_Mem_Read+0x1b8>)
    hi2c->XferCount = Size;
 800430e:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004310:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8004312:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004314:	7c12      	ldrb	r2, [r2, #16]
 8004316:	0020      	movs	r0, r4
 8004318:	9100      	str	r1, [sp, #0]
 800431a:	0039      	movs	r1, r7
 800431c:	f7ff fbea 	bl	8003af4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004320:	002a      	movs	r2, r5
 8004322:	0031      	movs	r1, r6
 8004324:	0020      	movs	r0, r4
 8004326:	f7ff fc7f 	bl	8003c28 <I2C_WaitOnTXISFlagUntilTimeout>
 800432a:	2800      	cmp	r0, #0
 800432c:	d127      	bne.n	800437e <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800432e:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004330:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004332:	2a01      	cmp	r2, #1
 8004334:	d117      	bne.n	8004366 <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004336:	466a      	mov	r2, sp
 8004338:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800433a:	2140      	movs	r1, #64	; 0x40
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800433c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800433e:	0020      	movs	r0, r4
 8004340:	0033      	movs	r3, r6
 8004342:	2200      	movs	r2, #0
 8004344:	9500      	str	r5, [sp, #0]
 8004346:	f7ff fc9c 	bl	8003c82 <I2C_WaitOnFlagUntilTimeout>
 800434a:	2800      	cmp	r0, #0
 800434c:	d117      	bne.n	800437e <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800434e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004350:	4b3d      	ldr	r3, [pc, #244]	; (8004448 <HAL_I2C_Mem_Read+0x1bc>)
 8004352:	2aff      	cmp	r2, #255	; 0xff
 8004354:	d817      	bhi.n	8004386 <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 8004356:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004358:	b292      	uxth	r2, r2
 800435a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	049b      	lsls	r3, r3, #18
 8004364:	e014      	b.n	8004390 <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004366:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004368:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800436a:	0a12      	lsrs	r2, r2, #8
 800436c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800436e:	0020      	movs	r0, r4
 8004370:	002a      	movs	r2, r5
 8004372:	f7ff fc59 	bl	8003c28 <I2C_WaitOnTXISFlagUntilTimeout>
 8004376:	2800      	cmp	r0, #0
 8004378:	d101      	bne.n	800437e <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	e7db      	b.n	8004336 <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 800437e:	2300      	movs	r3, #0
 8004380:	3440      	adds	r4, #64	; 0x40
 8004382:	7023      	strb	r3, [r4, #0]
 8004384:	e79d      	b.n	80042c2 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004386:	22ff      	movs	r2, #255	; 0xff
 8004388:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	2380      	movs	r3, #128	; 0x80
 800438e:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004390:	0039      	movs	r1, r7
 8004392:	0020      	movs	r0, r4
 8004394:	f7ff fbae 	bl	8003af4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004398:	0033      	movs	r3, r6
 800439a:	2200      	movs	r2, #0
 800439c:	2104      	movs	r1, #4
 800439e:	0020      	movs	r0, r4
 80043a0:	9500      	str	r5, [sp, #0]
 80043a2:	f7ff fc6e 	bl	8003c82 <I2C_WaitOnFlagUntilTimeout>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d000      	beq.n	80043ac <HAL_I2C_Mem_Read+0x120>
 80043aa:	e78a      	b.n	80042c2 <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80043b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80043b6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80043b8:	3301      	adds	r3, #1
 80043ba:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80043bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80043be:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80043c8:	b292      	uxth	r2, r2
 80043ca:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d017      	beq.n	8004400 <HAL_I2C_Mem_Read+0x174>
 80043d0:	2a00      	cmp	r2, #0
 80043d2:	d115      	bne.n	8004400 <HAL_I2C_Mem_Read+0x174>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043d4:	0033      	movs	r3, r6
 80043d6:	2180      	movs	r1, #128	; 0x80
 80043d8:	0020      	movs	r0, r4
 80043da:	9500      	str	r5, [sp, #0]
 80043dc:	f7ff fc51 	bl	8003c82 <I2C_WaitOnFlagUntilTimeout>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d000      	beq.n	80043e6 <HAL_I2C_Mem_Read+0x15a>
 80043e4:	e76d      	b.n	80042c2 <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043e8:	2bff      	cmp	r3, #255	; 0xff
 80043ea:	d923      	bls.n	8004434 <HAL_I2C_Mem_Read+0x1a8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ec:	23ff      	movs	r3, #255	; 0xff
 80043ee:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	22ff      	movs	r2, #255	; 0xff
 80043f4:	9000      	str	r0, [sp, #0]
 80043f6:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043f8:	0039      	movs	r1, r7
 80043fa:	0020      	movs	r0, r4
 80043fc:	f7ff fb7a 	bl	8003af4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004400:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1c8      	bne.n	8004398 <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004406:	002a      	movs	r2, r5
 8004408:	0031      	movs	r1, r6
 800440a:	0020      	movs	r0, r4
 800440c:	f7ff fc69 	bl	8003ce2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004410:	2800      	cmp	r0, #0
 8004412:	d000      	beq.n	8004416 <HAL_I2C_Mem_Read+0x18a>
 8004414:	e755      	b.n	80042c2 <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004416:	2120      	movs	r1, #32
 8004418:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800441a:	4d0c      	ldr	r5, [pc, #48]	; (800444c <HAL_I2C_Mem_Read+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800441c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	402a      	ands	r2, r5
 8004422:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004424:	0023      	movs	r3, r4
 8004426:	3341      	adds	r3, #65	; 0x41
 8004428:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800442a:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 800442c:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800442e:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004430:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8004432:	e747      	b.n	80042c4 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004434:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8004436:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004438:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800443a:	b292      	uxth	r2, r2
 800443c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	9000      	str	r0, [sp, #0]
 8004442:	e7d9      	b.n	80043f8 <HAL_I2C_Mem_Read+0x16c>
 8004444:	80002000 	.word	0x80002000
 8004448:	80002400 	.word	0x80002400
 800444c:	fe00e800 	.word	0xfe00e800

08004450 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004450:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004452:	0004      	movs	r4, r0
 8004454:	3441      	adds	r4, #65	; 0x41
 8004456:	7822      	ldrb	r2, [r4, #0]
{
 8004458:	0003      	movs	r3, r0
 800445a:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800445c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800445e:	b2d6      	uxtb	r6, r2
 8004460:	2a20      	cmp	r2, #32
 8004462:	d118      	bne.n	8004496 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8004464:	001d      	movs	r5, r3
 8004466:	3540      	adds	r5, #64	; 0x40
 8004468:	782a      	ldrb	r2, [r5, #0]
 800446a:	2a01      	cmp	r2, #1
 800446c:	d013      	beq.n	8004496 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800446e:	2224      	movs	r2, #36	; 0x24
 8004470:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3a23      	subs	r2, #35	; 0x23
 8004476:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004478:	4807      	ldr	r0, [pc, #28]	; (8004498 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800447a:	4391      	bics	r1, r2
 800447c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8004482:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004484:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8004486:	6819      	ldr	r1, [r3, #0]
 8004488:	4339      	orrs	r1, r7
 800448a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800448c:	6819      	ldr	r1, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004492:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8004494:	7028      	strb	r0, [r5, #0]
  }
}
 8004496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004498:	ffffefff 	.word	0xffffefff

0800449c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800449c:	0002      	movs	r2, r0
{
 800449e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a0:	3241      	adds	r2, #65	; 0x41
 80044a2:	7814      	ldrb	r4, [r2, #0]
{
 80044a4:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a6:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80044a8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044aa:	2c20      	cmp	r4, #32
 80044ac:	d117      	bne.n	80044de <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80044ae:	001c      	movs	r4, r3
 80044b0:	3440      	adds	r4, #64	; 0x40
 80044b2:	7826      	ldrb	r6, [r4, #0]
 80044b4:	2e01      	cmp	r6, #1
 80044b6:	d012      	beq.n	80044de <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80044b8:	3022      	adds	r0, #34	; 0x22
 80044ba:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3823      	subs	r0, #35	; 0x23
 80044c0:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80044c2:	4f07      	ldr	r7, [pc, #28]	; (80044e0 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 80044c4:	4386      	bics	r6, r0
 80044c6:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80044c8:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80044ca:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80044cc:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80044ce:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80044d0:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80044d2:	6819      	ldr	r1, [r3, #0]
 80044d4:	4308      	orrs	r0, r1
 80044d6:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80044d8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80044da:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80044dc:	7020      	strb	r0, [r4, #0]
  }
}
 80044de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044e0:	fffff0ff 	.word	0xfffff0ff

080044e4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044e4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <HAL_RCC_GetSysClockFreq+0x78>)
{
 80044e8:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80044ea:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80044ec:	4022      	ands	r2, r4
 80044ee:	2a08      	cmp	r2, #8
 80044f0:	d031      	beq.n	8004556 <HAL_RCC_GetSysClockFreq+0x72>
 80044f2:	2a0c      	cmp	r2, #12
 80044f4:	d009      	beq.n	800450a <HAL_RCC_GetSysClockFreq+0x26>
 80044f6:	2a04      	cmp	r2, #4
 80044f8:	d125      	bne.n	8004546 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80044fa:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80044fc:	4b18      	ldr	r3, [pc, #96]	; (8004560 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80044fe:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8004500:	17c0      	asrs	r0, r0, #31
 8004502:	4018      	ands	r0, r3
 8004504:	4b17      	ldr	r3, [pc, #92]	; (8004564 <HAL_RCC_GetSysClockFreq+0x80>)
 8004506:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8004508:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800450a:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800450c:	4816      	ldr	r0, [pc, #88]	; (8004568 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800450e:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004510:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004512:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004514:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004516:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004518:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800451a:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800451c:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800451e:	4211      	tst	r1, r2
 8004520:	d009      	beq.n	8004536 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004522:	4a12      	ldr	r2, [pc, #72]	; (800456c <HAL_RCC_GetSysClockFreq+0x88>)
 8004524:	2300      	movs	r3, #0
 8004526:	2100      	movs	r1, #0
 8004528:	f7fb ffaa 	bl	8000480 <__aeabi_lmul>
 800452c:	0022      	movs	r2, r4
 800452e:	2300      	movs	r3, #0
 8004530:	f7fb ff86 	bl	8000440 <__aeabi_uldivmod>
 8004534:	e7e8      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	2310      	movs	r3, #16
 800453a:	421a      	tst	r2, r3
 800453c:	d001      	beq.n	8004542 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800453e:	4a0c      	ldr	r2, [pc, #48]	; (8004570 <HAL_RCC_GetSysClockFreq+0x8c>)
 8004540:	e7f0      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004542:	4a08      	ldr	r2, [pc, #32]	; (8004564 <HAL_RCC_GetSysClockFreq+0x80>)
 8004544:	e7ee      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004546:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004548:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800454a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800454c:	041b      	lsls	r3, r3, #16
 800454e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004550:	3301      	adds	r3, #1
 8004552:	4098      	lsls	r0, r3
      break;
 8004554:	e7d8      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8004556:	4805      	ldr	r0, [pc, #20]	; (800456c <HAL_RCC_GetSysClockFreq+0x88>)
 8004558:	e7d6      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x24>
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	40021000 	.word	0x40021000
 8004560:	ff48e500 	.word	0xff48e500
 8004564:	00f42400 	.word	0x00f42400
 8004568:	080066ce 	.word	0x080066ce
 800456c:	007a1200 	.word	0x007a1200
 8004570:	003d0900 	.word	0x003d0900

08004574 <HAL_RCC_OscConfig>:
{
 8004574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004576:	0005      	movs	r5, r0
 8004578:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 800457a:	2800      	cmp	r0, #0
 800457c:	d05a      	beq.n	8004634 <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800457e:	230c      	movs	r3, #12
 8004580:	4cbe      	ldr	r4, [pc, #760]	; (800487c <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004582:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004584:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004586:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004588:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	025b      	lsls	r3, r3, #9
 800458e:	0019      	movs	r1, r3
 8004590:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004592:	07d2      	lsls	r2, r2, #31
 8004594:	d442      	bmi.n	800461c <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	079b      	lsls	r3, r3, #30
 800459a:	d500      	bpl.n	800459e <HAL_RCC_OscConfig+0x2a>
 800459c:	e08b      	b.n	80046b6 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800459e:	682b      	ldr	r3, [r5, #0]
 80045a0:	06db      	lsls	r3, r3, #27
 80045a2:	d529      	bpl.n	80045f8 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045a4:	2e00      	cmp	r6, #0
 80045a6:	d000      	beq.n	80045aa <HAL_RCC_OscConfig+0x36>
 80045a8:	e0dc      	b.n	8004764 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	059b      	lsls	r3, r3, #22
 80045ae:	d502      	bpl.n	80045b6 <HAL_RCC_OscConfig+0x42>
 80045b0:	69eb      	ldr	r3, [r5, #28]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d03e      	beq.n	8004634 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045b6:	6862      	ldr	r2, [r4, #4]
 80045b8:	49b1      	ldr	r1, [pc, #708]	; (8004880 <HAL_RCC_OscConfig+0x30c>)
 80045ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80045bc:	400a      	ands	r2, r1
 80045be:	431a      	orrs	r2, r3
 80045c0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045c2:	6861      	ldr	r1, [r4, #4]
 80045c4:	6a2a      	ldr	r2, [r5, #32]
 80045c6:	0209      	lsls	r1, r1, #8
 80045c8:	0a09      	lsrs	r1, r1, #8
 80045ca:	0612      	lsls	r2, r2, #24
 80045cc:	430a      	orrs	r2, r1
 80045ce:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80045d0:	2280      	movs	r2, #128	; 0x80
 80045d2:	0b5b      	lsrs	r3, r3, #13
 80045d4:	3301      	adds	r3, #1
 80045d6:	0212      	lsls	r2, r2, #8
 80045d8:	409a      	lsls	r2, r3
 80045da:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80045dc:	68e1      	ldr	r1, [r4, #12]
 80045de:	060a      	lsls	r2, r1, #24
 80045e0:	49a8      	ldr	r1, [pc, #672]	; (8004884 <HAL_RCC_OscConfig+0x310>)
 80045e2:	0f12      	lsrs	r2, r2, #28
 80045e4:	5c8a      	ldrb	r2, [r1, r2]
 80045e6:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80045e8:	4aa7      	ldr	r2, [pc, #668]	; (8004888 <HAL_RCC_OscConfig+0x314>)
 80045ea:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80045ec:	4ba7      	ldr	r3, [pc, #668]	; (800488c <HAL_RCC_OscConfig+0x318>)
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	f7ff f8d8 	bl	80037a4 <HAL_InitTick>
        if(status != HAL_OK)
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d134      	bne.n	8004662 <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	071b      	lsls	r3, r3, #28
 80045fc:	d500      	bpl.n	8004600 <HAL_RCC_OscConfig+0x8c>
 80045fe:	e0e8      	b.n	80047d2 <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	075b      	lsls	r3, r3, #29
 8004604:	d500      	bpl.n	8004608 <HAL_RCC_OscConfig+0x94>
 8004606:	e10a      	b.n	800481e <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004608:	682b      	ldr	r3, [r5, #0]
 800460a:	069b      	lsls	r3, r3, #26
 800460c:	d500      	bpl.n	8004610 <HAL_RCC_OscConfig+0x9c>
 800460e:	e18e      	b.n	800492e <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004610:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004612:	2b00      	cmp	r3, #0
 8004614:	d000      	beq.n	8004618 <HAL_RCC_OscConfig+0xa4>
 8004616:	e1bd      	b.n	8004994 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8004618:	2000      	movs	r0, #0
 800461a:	e022      	b.n	8004662 <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800461c:	2e08      	cmp	r6, #8
 800461e:	d003      	beq.n	8004628 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004620:	2e0c      	cmp	r6, #12
 8004622:	d109      	bne.n	8004638 <HAL_RCC_OscConfig+0xc4>
 8004624:	2f00      	cmp	r7, #0
 8004626:	d007      	beq.n	8004638 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	039b      	lsls	r3, r3, #14
 800462c:	d5b3      	bpl.n	8004596 <HAL_RCC_OscConfig+0x22>
 800462e:	686b      	ldr	r3, [r5, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1b0      	bne.n	8004596 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8004634:	2001      	movs	r0, #1
 8004636:	e014      	b.n	8004662 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004638:	686a      	ldr	r2, [r5, #4]
 800463a:	428a      	cmp	r2, r1
 800463c:	d113      	bne.n	8004666 <HAL_RCC_OscConfig+0xf2>
 800463e:	6822      	ldr	r2, [r4, #0]
 8004640:	4313      	orrs	r3, r2
 8004642:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004644:	f7ff f8f2 	bl	800382c <HAL_GetTick>
 8004648:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800464a:	2280      	movs	r2, #128	; 0x80
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	0292      	lsls	r2, r2, #10
 8004650:	4213      	tst	r3, r2
 8004652:	d1a0      	bne.n	8004596 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004654:	f7ff f8ea 	bl	800382c <HAL_GetTick>
 8004658:	9b00      	ldr	r3, [sp, #0]
 800465a:	1ac0      	subs	r0, r0, r3
 800465c:	2864      	cmp	r0, #100	; 0x64
 800465e:	d9f4      	bls.n	800464a <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 8004660:	2003      	movs	r0, #3
}
 8004662:	b005      	add	sp, #20
 8004664:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004666:	21a0      	movs	r1, #160	; 0xa0
 8004668:	02c9      	lsls	r1, r1, #11
 800466a:	428a      	cmp	r2, r1
 800466c:	d105      	bne.n	800467a <HAL_RCC_OscConfig+0x106>
 800466e:	2280      	movs	r2, #128	; 0x80
 8004670:	6821      	ldr	r1, [r4, #0]
 8004672:	02d2      	lsls	r2, r2, #11
 8004674:	430a      	orrs	r2, r1
 8004676:	6022      	str	r2, [r4, #0]
 8004678:	e7e1      	b.n	800463e <HAL_RCC_OscConfig+0xca>
 800467a:	6821      	ldr	r1, [r4, #0]
 800467c:	4884      	ldr	r0, [pc, #528]	; (8004890 <HAL_RCC_OscConfig+0x31c>)
 800467e:	4001      	ands	r1, r0
 8004680:	6021      	str	r1, [r4, #0]
 8004682:	6821      	ldr	r1, [r4, #0]
 8004684:	400b      	ands	r3, r1
 8004686:	9303      	str	r3, [sp, #12]
 8004688:	9b03      	ldr	r3, [sp, #12]
 800468a:	4982      	ldr	r1, [pc, #520]	; (8004894 <HAL_RCC_OscConfig+0x320>)
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	400b      	ands	r3, r1
 8004690:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004692:	2a00      	cmp	r2, #0
 8004694:	d1d6      	bne.n	8004644 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 8004696:	f7ff f8c9 	bl	800382c <HAL_GetTick>
 800469a:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800469c:	2280      	movs	r2, #128	; 0x80
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	0292      	lsls	r2, r2, #10
 80046a2:	4213      	tst	r3, r2
 80046a4:	d100      	bne.n	80046a8 <HAL_RCC_OscConfig+0x134>
 80046a6:	e776      	b.n	8004596 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a8:	f7ff f8c0 	bl	800382c <HAL_GetTick>
 80046ac:	9b00      	ldr	r3, [sp, #0]
 80046ae:	1ac0      	subs	r0, r0, r3
 80046b0:	2864      	cmp	r0, #100	; 0x64
 80046b2:	d9f3      	bls.n	800469c <HAL_RCC_OscConfig+0x128>
 80046b4:	e7d4      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 80046b6:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046b8:	2e04      	cmp	r6, #4
 80046ba:	d003      	beq.n	80046c4 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046bc:	2e0c      	cmp	r6, #12
 80046be:	d124      	bne.n	800470a <HAL_RCC_OscConfig+0x196>
 80046c0:	2f00      	cmp	r7, #0
 80046c2:	d122      	bne.n	800470a <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	075b      	lsls	r3, r3, #29
 80046c8:	d501      	bpl.n	80046ce <HAL_RCC_OscConfig+0x15a>
 80046ca:	2a00      	cmp	r2, #0
 80046cc:	d0b2      	beq.n	8004634 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ce:	6861      	ldr	r1, [r4, #4]
 80046d0:	692b      	ldr	r3, [r5, #16]
 80046d2:	4871      	ldr	r0, [pc, #452]	; (8004898 <HAL_RCC_OscConfig+0x324>)
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	4001      	ands	r1, r0
 80046d8:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80046da:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046dc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	438b      	bics	r3, r1
 80046e2:	4313      	orrs	r3, r2
 80046e4:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046e6:	f7ff fefd 	bl	80044e4 <HAL_RCC_GetSysClockFreq>
 80046ea:	68e3      	ldr	r3, [r4, #12]
 80046ec:	4a65      	ldr	r2, [pc, #404]	; (8004884 <HAL_RCC_OscConfig+0x310>)
 80046ee:	061b      	lsls	r3, r3, #24
 80046f0:	0f1b      	lsrs	r3, r3, #28
 80046f2:	5cd3      	ldrb	r3, [r2, r3]
 80046f4:	40d8      	lsrs	r0, r3
 80046f6:	4b64      	ldr	r3, [pc, #400]	; (8004888 <HAL_RCC_OscConfig+0x314>)
 80046f8:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 80046fa:	4b64      	ldr	r3, [pc, #400]	; (800488c <HAL_RCC_OscConfig+0x318>)
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	f7ff f851 	bl	80037a4 <HAL_InitTick>
      if(status != HAL_OK)
 8004702:	2800      	cmp	r0, #0
 8004704:	d100      	bne.n	8004708 <HAL_RCC_OscConfig+0x194>
 8004706:	e74a      	b.n	800459e <HAL_RCC_OscConfig+0x2a>
 8004708:	e7ab      	b.n	8004662 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800470a:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 800470c:	2a00      	cmp	r2, #0
 800470e:	d018      	beq.n	8004742 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004710:	2109      	movs	r1, #9
 8004712:	438b      	bics	r3, r1
 8004714:	4313      	orrs	r3, r2
 8004716:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004718:	f7ff f888 	bl	800382c <HAL_GetTick>
 800471c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800471e:	2204      	movs	r2, #4
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	4213      	tst	r3, r2
 8004724:	d007      	beq.n	8004736 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004726:	6862      	ldr	r2, [r4, #4]
 8004728:	692b      	ldr	r3, [r5, #16]
 800472a:	495b      	ldr	r1, [pc, #364]	; (8004898 <HAL_RCC_OscConfig+0x324>)
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	400a      	ands	r2, r1
 8004730:	4313      	orrs	r3, r2
 8004732:	6063      	str	r3, [r4, #4]
 8004734:	e733      	b.n	800459e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004736:	f7ff f879 	bl	800382c <HAL_GetTick>
 800473a:	1bc0      	subs	r0, r0, r7
 800473c:	2802      	cmp	r0, #2
 800473e:	d9ee      	bls.n	800471e <HAL_RCC_OscConfig+0x1aa>
 8004740:	e78e      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8004742:	2201      	movs	r2, #1
 8004744:	4393      	bics	r3, r2
 8004746:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004748:	f7ff f870 	bl	800382c <HAL_GetTick>
 800474c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800474e:	2204      	movs	r2, #4
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	4213      	tst	r3, r2
 8004754:	d100      	bne.n	8004758 <HAL_RCC_OscConfig+0x1e4>
 8004756:	e722      	b.n	800459e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004758:	f7ff f868 	bl	800382c <HAL_GetTick>
 800475c:	1bc0      	subs	r0, r0, r7
 800475e:	2802      	cmp	r0, #2
 8004760:	d9f5      	bls.n	800474e <HAL_RCC_OscConfig+0x1da>
 8004762:	e77d      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004764:	69eb      	ldr	r3, [r5, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d020      	beq.n	80047ac <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 800476a:	2380      	movs	r3, #128	; 0x80
 800476c:	6822      	ldr	r2, [r4, #0]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4313      	orrs	r3, r2
 8004772:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004774:	f7ff f85a 	bl	800382c <HAL_GetTick>
 8004778:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800477a:	2280      	movs	r2, #128	; 0x80
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	0092      	lsls	r2, r2, #2
 8004780:	4213      	tst	r3, r2
 8004782:	d00d      	beq.n	80047a0 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004784:	6863      	ldr	r3, [r4, #4]
 8004786:	4a3e      	ldr	r2, [pc, #248]	; (8004880 <HAL_RCC_OscConfig+0x30c>)
 8004788:	4013      	ands	r3, r2
 800478a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800478c:	4313      	orrs	r3, r2
 800478e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004790:	6862      	ldr	r2, [r4, #4]
 8004792:	6a2b      	ldr	r3, [r5, #32]
 8004794:	0212      	lsls	r2, r2, #8
 8004796:	061b      	lsls	r3, r3, #24
 8004798:	0a12      	lsrs	r2, r2, #8
 800479a:	4313      	orrs	r3, r2
 800479c:	6063      	str	r3, [r4, #4]
 800479e:	e72b      	b.n	80045f8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047a0:	f7ff f844 	bl	800382c <HAL_GetTick>
 80047a4:	1bc0      	subs	r0, r0, r7
 80047a6:	2802      	cmp	r0, #2
 80047a8:	d9e7      	bls.n	800477a <HAL_RCC_OscConfig+0x206>
 80047aa:	e759      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	4a3b      	ldr	r2, [pc, #236]	; (800489c <HAL_RCC_OscConfig+0x328>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80047b4:	f7ff f83a 	bl	800382c <HAL_GetTick>
 80047b8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80047ba:	2280      	movs	r2, #128	; 0x80
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	0092      	lsls	r2, r2, #2
 80047c0:	4213      	tst	r3, r2
 80047c2:	d100      	bne.n	80047c6 <HAL_RCC_OscConfig+0x252>
 80047c4:	e718      	b.n	80045f8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047c6:	f7ff f831 	bl	800382c <HAL_GetTick>
 80047ca:	1bc0      	subs	r0, r0, r7
 80047cc:	2802      	cmp	r0, #2
 80047ce:	d9f4      	bls.n	80047ba <HAL_RCC_OscConfig+0x246>
 80047d0:	e746      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047d2:	696a      	ldr	r2, [r5, #20]
 80047d4:	2301      	movs	r3, #1
 80047d6:	2a00      	cmp	r2, #0
 80047d8:	d010      	beq.n	80047fc <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 80047da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80047dc:	4313      	orrs	r3, r2
 80047de:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80047e0:	f7ff f824 	bl	800382c <HAL_GetTick>
 80047e4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047e6:	2202      	movs	r2, #2
 80047e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80047ea:	4213      	tst	r3, r2
 80047ec:	d000      	beq.n	80047f0 <HAL_RCC_OscConfig+0x27c>
 80047ee:	e707      	b.n	8004600 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f0:	f7ff f81c 	bl	800382c <HAL_GetTick>
 80047f4:	1bc0      	subs	r0, r0, r7
 80047f6:	2802      	cmp	r0, #2
 80047f8:	d9f5      	bls.n	80047e6 <HAL_RCC_OscConfig+0x272>
 80047fa:	e731      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 80047fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80047fe:	439a      	bics	r2, r3
 8004800:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004802:	f7ff f813 	bl	800382c <HAL_GetTick>
 8004806:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004808:	2202      	movs	r2, #2
 800480a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800480c:	4213      	tst	r3, r2
 800480e:	d100      	bne.n	8004812 <HAL_RCC_OscConfig+0x29e>
 8004810:	e6f6      	b.n	8004600 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004812:	f7ff f80b 	bl	800382c <HAL_GetTick>
 8004816:	1bc0      	subs	r0, r0, r7
 8004818:	2802      	cmp	r0, #2
 800481a:	d9f5      	bls.n	8004808 <HAL_RCC_OscConfig+0x294>
 800481c:	e720      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004820:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004822:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004824:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8004826:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004828:	421a      	tst	r2, r3
 800482a:	d104      	bne.n	8004836 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800482c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800482e:	4313      	orrs	r3, r2
 8004830:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004832:	2301      	movs	r3, #1
 8004834:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004836:	2280      	movs	r2, #128	; 0x80
 8004838:	4f19      	ldr	r7, [pc, #100]	; (80048a0 <HAL_RCC_OscConfig+0x32c>)
 800483a:	0052      	lsls	r2, r2, #1
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	4213      	tst	r3, r2
 8004840:	d008      	beq.n	8004854 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004842:	2280      	movs	r2, #128	; 0x80
 8004844:	68ab      	ldr	r3, [r5, #8]
 8004846:	0052      	lsls	r2, r2, #1
 8004848:	4293      	cmp	r3, r2
 800484a:	d12b      	bne.n	80048a4 <HAL_RCC_OscConfig+0x330>
 800484c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800484e:	4313      	orrs	r3, r2
 8004850:	6523      	str	r3, [r4, #80]	; 0x50
 8004852:	e04c      	b.n	80048ee <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004854:	2280      	movs	r2, #128	; 0x80
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	0052      	lsls	r2, r2, #1
 800485a:	4313      	orrs	r3, r2
 800485c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800485e:	f7fe ffe5 	bl	800382c <HAL_GetTick>
 8004862:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004864:	2280      	movs	r2, #128	; 0x80
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	0052      	lsls	r2, r2, #1
 800486a:	4213      	tst	r3, r2
 800486c:	d1e9      	bne.n	8004842 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486e:	f7fe ffdd 	bl	800382c <HAL_GetTick>
 8004872:	9b01      	ldr	r3, [sp, #4]
 8004874:	1ac0      	subs	r0, r0, r3
 8004876:	2864      	cmp	r0, #100	; 0x64
 8004878:	d9f4      	bls.n	8004864 <HAL_RCC_OscConfig+0x2f0>
 800487a:	e6f1      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
 800487c:	40021000 	.word	0x40021000
 8004880:	ffff1fff 	.word	0xffff1fff
 8004884:	080066b6 	.word	0x080066b6
 8004888:	2000001c 	.word	0x2000001c
 800488c:	20000024 	.word	0x20000024
 8004890:	fffeffff 	.word	0xfffeffff
 8004894:	fffbffff 	.word	0xfffbffff
 8004898:	ffffe0ff 	.word	0xffffe0ff
 800489c:	fffffeff 	.word	0xfffffeff
 80048a0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d116      	bne.n	80048d6 <HAL_RCC_OscConfig+0x362>
 80048a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80048aa:	4a6b      	ldr	r2, [pc, #428]	; (8004a58 <HAL_RCC_OscConfig+0x4e4>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	6523      	str	r3, [r4, #80]	; 0x50
 80048b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80048b2:	4a6a      	ldr	r2, [pc, #424]	; (8004a5c <HAL_RCC_OscConfig+0x4e8>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80048b8:	f7fe ffb8 	bl	800382c <HAL_GetTick>
 80048bc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048be:	2280      	movs	r2, #128	; 0x80
 80048c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80048c2:	0092      	lsls	r2, r2, #2
 80048c4:	4213      	tst	r3, r2
 80048c6:	d01a      	beq.n	80048fe <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c8:	f7fe ffb0 	bl	800382c <HAL_GetTick>
 80048cc:	4b64      	ldr	r3, [pc, #400]	; (8004a60 <HAL_RCC_OscConfig+0x4ec>)
 80048ce:	1bc0      	subs	r0, r0, r7
 80048d0:	4298      	cmp	r0, r3
 80048d2:	d9f4      	bls.n	80048be <HAL_RCC_OscConfig+0x34a>
 80048d4:	e6c4      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d6:	21a0      	movs	r1, #160	; 0xa0
 80048d8:	00c9      	lsls	r1, r1, #3
 80048da:	428b      	cmp	r3, r1
 80048dc:	d118      	bne.n	8004910 <HAL_RCC_OscConfig+0x39c>
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6523      	str	r3, [r4, #80]	; 0x50
 80048e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80048ea:	431a      	orrs	r2, r3
 80048ec:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80048ee:	f7fe ff9d 	bl	800382c <HAL_GetTick>
 80048f2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048f4:	2280      	movs	r2, #128	; 0x80
 80048f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80048f8:	0092      	lsls	r2, r2, #2
 80048fa:	4213      	tst	r3, r2
 80048fc:	d010      	beq.n	8004920 <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 80048fe:	9b00      	ldr	r3, [sp, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d000      	beq.n	8004906 <HAL_RCC_OscConfig+0x392>
 8004904:	e680      	b.n	8004608 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004906:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004908:	4a56      	ldr	r2, [pc, #344]	; (8004a64 <HAL_RCC_OscConfig+0x4f0>)
 800490a:	4013      	ands	r3, r2
 800490c:	63a3      	str	r3, [r4, #56]	; 0x38
 800490e:	e67b      	b.n	8004608 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004910:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004912:	4a51      	ldr	r2, [pc, #324]	; (8004a58 <HAL_RCC_OscConfig+0x4e4>)
 8004914:	4013      	ands	r3, r2
 8004916:	6523      	str	r3, [r4, #80]	; 0x50
 8004918:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800491a:	4a50      	ldr	r2, [pc, #320]	; (8004a5c <HAL_RCC_OscConfig+0x4e8>)
 800491c:	4013      	ands	r3, r2
 800491e:	e797      	b.n	8004850 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004920:	f7fe ff84 	bl	800382c <HAL_GetTick>
 8004924:	4b4e      	ldr	r3, [pc, #312]	; (8004a60 <HAL_RCC_OscConfig+0x4ec>)
 8004926:	1bc0      	subs	r0, r0, r7
 8004928:	4298      	cmp	r0, r3
 800492a:	d9e3      	bls.n	80048f4 <HAL_RCC_OscConfig+0x380>
 800492c:	e698      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800492e:	69a9      	ldr	r1, [r5, #24]
 8004930:	2301      	movs	r3, #1
 8004932:	4a4d      	ldr	r2, [pc, #308]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004934:	2900      	cmp	r1, #0
 8004936:	d018      	beq.n	800496a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 8004938:	68a1      	ldr	r1, [r4, #8]
 800493a:	4319      	orrs	r1, r3
 800493c:	60a1      	str	r1, [r4, #8]
 800493e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004940:	430b      	orrs	r3, r1
 8004942:	6363      	str	r3, [r4, #52]	; 0x34
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	6a11      	ldr	r1, [r2, #32]
 8004948:	019b      	lsls	r3, r3, #6
 800494a:	430b      	orrs	r3, r1
 800494c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800494e:	f7fe ff6d 	bl	800382c <HAL_GetTick>
 8004952:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004954:	2202      	movs	r2, #2
 8004956:	68a3      	ldr	r3, [r4, #8]
 8004958:	4213      	tst	r3, r2
 800495a:	d000      	beq.n	800495e <HAL_RCC_OscConfig+0x3ea>
 800495c:	e658      	b.n	8004610 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800495e:	f7fe ff65 	bl	800382c <HAL_GetTick>
 8004962:	1bc0      	subs	r0, r0, r7
 8004964:	2802      	cmp	r0, #2
 8004966:	d9f5      	bls.n	8004954 <HAL_RCC_OscConfig+0x3e0>
 8004968:	e67a      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 800496a:	68a1      	ldr	r1, [r4, #8]
 800496c:	4399      	bics	r1, r3
 800496e:	60a1      	str	r1, [r4, #8]
 8004970:	6a13      	ldr	r3, [r2, #32]
 8004972:	493e      	ldr	r1, [pc, #248]	; (8004a6c <HAL_RCC_OscConfig+0x4f8>)
 8004974:	400b      	ands	r3, r1
 8004976:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004978:	f7fe ff58 	bl	800382c <HAL_GetTick>
 800497c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800497e:	2202      	movs	r2, #2
 8004980:	68a3      	ldr	r3, [r4, #8]
 8004982:	4213      	tst	r3, r2
 8004984:	d100      	bne.n	8004988 <HAL_RCC_OscConfig+0x414>
 8004986:	e643      	b.n	8004610 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004988:	f7fe ff50 	bl	800382c <HAL_GetTick>
 800498c:	1bc0      	subs	r0, r0, r7
 800498e:	2802      	cmp	r0, #2
 8004990:	d9f5      	bls.n	800497e <HAL_RCC_OscConfig+0x40a>
 8004992:	e665      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004994:	2e0c      	cmp	r6, #12
 8004996:	d043      	beq.n	8004a20 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004998:	4a35      	ldr	r2, [pc, #212]	; (8004a70 <HAL_RCC_OscConfig+0x4fc>)
 800499a:	2b02      	cmp	r3, #2
 800499c:	d12e      	bne.n	80049fc <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 800499e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049a0:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80049a2:	4013      	ands	r3, r2
 80049a4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80049a6:	f7fe ff41 	bl	800382c <HAL_GetTick>
 80049aa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049ac:	04bf      	lsls	r7, r7, #18
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	423b      	tst	r3, r7
 80049b2:	d11d      	bne.n	80049f0 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049b4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80049b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80049b8:	68e2      	ldr	r2, [r4, #12]
 80049ba:	430b      	orrs	r3, r1
 80049bc:	492d      	ldr	r1, [pc, #180]	; (8004a74 <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80049be:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049c0:	400a      	ands	r2, r1
 80049c2:	4313      	orrs	r3, r2
 80049c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80049c6:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	6822      	ldr	r2, [r4, #0]
 80049d0:	045b      	lsls	r3, r3, #17
 80049d2:	4313      	orrs	r3, r2
 80049d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80049d6:	f7fe ff29 	bl	800382c <HAL_GetTick>
 80049da:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	4233      	tst	r3, r6
 80049e0:	d000      	beq.n	80049e4 <HAL_RCC_OscConfig+0x470>
 80049e2:	e619      	b.n	8004618 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e4:	f7fe ff22 	bl	800382c <HAL_GetTick>
 80049e8:	1b40      	subs	r0, r0, r5
 80049ea:	2802      	cmp	r0, #2
 80049ec:	d9f6      	bls.n	80049dc <HAL_RCC_OscConfig+0x468>
 80049ee:	e637      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f0:	f7fe ff1c 	bl	800382c <HAL_GetTick>
 80049f4:	1b80      	subs	r0, r0, r6
 80049f6:	2802      	cmp	r0, #2
 80049f8:	d9d9      	bls.n	80049ae <HAL_RCC_OscConfig+0x43a>
 80049fa:	e631      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 80049fc:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80049fe:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004a00:	4013      	ands	r3, r2
 8004a02:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004a04:	f7fe ff12 	bl	800382c <HAL_GetTick>
 8004a08:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a0a:	04b6      	lsls	r6, r6, #18
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	4233      	tst	r3, r6
 8004a10:	d100      	bne.n	8004a14 <HAL_RCC_OscConfig+0x4a0>
 8004a12:	e601      	b.n	8004618 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a14:	f7fe ff0a 	bl	800382c <HAL_GetTick>
 8004a18:	1b40      	subs	r0, r0, r5
 8004a1a:	2802      	cmp	r0, #2
 8004a1c:	d9f6      	bls.n	8004a0c <HAL_RCC_OscConfig+0x498>
 8004a1e:	e61f      	b.n	8004660 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8004a20:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d100      	bne.n	8004a28 <HAL_RCC_OscConfig+0x4b4>
 8004a26:	e61c      	b.n	8004662 <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a28:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8004a2a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004a2e:	0252      	lsls	r2, r2, #9
 8004a30:	401a      	ands	r2, r3
 8004a32:	428a      	cmp	r2, r1
 8004a34:	d000      	beq.n	8004a38 <HAL_RCC_OscConfig+0x4c4>
 8004a36:	e5fd      	b.n	8004634 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a38:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3a:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a3c:	0392      	lsls	r2, r2, #14
 8004a3e:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a40:	428a      	cmp	r2, r1
 8004a42:	d000      	beq.n	8004a46 <HAL_RCC_OscConfig+0x4d2>
 8004a44:	e5f6      	b.n	8004634 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004a46:	22c0      	movs	r2, #192	; 0xc0
 8004a48:	0412      	lsls	r2, r2, #16
 8004a4a:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a4c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d100      	bne.n	8004a54 <HAL_RCC_OscConfig+0x4e0>
 8004a52:	e5e1      	b.n	8004618 <HAL_RCC_OscConfig+0xa4>
 8004a54:	e5ee      	b.n	8004634 <HAL_RCC_OscConfig+0xc0>
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	fffffeff 	.word	0xfffffeff
 8004a5c:	fffffbff 	.word	0xfffffbff
 8004a60:	00001388 	.word	0x00001388
 8004a64:	efffffff 	.word	0xefffffff
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	ffffdfff 	.word	0xffffdfff
 8004a70:	feffffff 	.word	0xfeffffff
 8004a74:	ff02ffff 	.word	0xff02ffff

08004a78 <HAL_RCC_ClockConfig>:
{
 8004a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a7a:	1e04      	subs	r4, r0, #0
 8004a7c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8004a80:	2001      	movs	r0, #1
}
 8004a82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a84:	2501      	movs	r5, #1
 8004a86:	4e5b      	ldr	r6, [pc, #364]	; (8004bf4 <HAL_RCC_ClockConfig+0x17c>)
 8004a88:	9a01      	ldr	r2, [sp, #4]
 8004a8a:	6833      	ldr	r3, [r6, #0]
 8004a8c:	402b      	ands	r3, r5
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d331      	bcc.n	8004af6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a92:	6822      	ldr	r2, [r4, #0]
 8004a94:	0793      	lsls	r3, r2, #30
 8004a96:	d443      	bmi.n	8004b20 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a98:	07d3      	lsls	r3, r2, #31
 8004a9a:	d449      	bmi.n	8004b30 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9c:	2501      	movs	r5, #1
 8004a9e:	6833      	ldr	r3, [r6, #0]
 8004aa0:	9a01      	ldr	r2, [sp, #4]
 8004aa2:	402b      	ands	r3, r5
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d909      	bls.n	8004abc <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa8:	6833      	ldr	r3, [r6, #0]
 8004aaa:	43ab      	bics	r3, r5
 8004aac:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004aae:	f7fe febd 	bl	800382c <HAL_GetTick>
 8004ab2:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab4:	6833      	ldr	r3, [r6, #0]
 8004ab6:	422b      	tst	r3, r5
 8004ab8:	d000      	beq.n	8004abc <HAL_RCC_ClockConfig+0x44>
 8004aba:	e08c      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	6822      	ldr	r2, [r4, #0]
 8004abe:	4d4e      	ldr	r5, [pc, #312]	; (8004bf8 <HAL_RCC_ClockConfig+0x180>)
 8004ac0:	0753      	lsls	r3, r2, #29
 8004ac2:	d500      	bpl.n	8004ac6 <HAL_RCC_ClockConfig+0x4e>
 8004ac4:	e08f      	b.n	8004be6 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac6:	0713      	lsls	r3, r2, #28
 8004ac8:	d506      	bpl.n	8004ad8 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aca:	68e9      	ldr	r1, [r5, #12]
 8004acc:	6923      	ldr	r3, [r4, #16]
 8004ace:	4a4b      	ldr	r2, [pc, #300]	; (8004bfc <HAL_RCC_ClockConfig+0x184>)
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ad8:	f7ff fd04 	bl	80044e4 <HAL_RCC_GetSysClockFreq>
 8004adc:	68eb      	ldr	r3, [r5, #12]
 8004ade:	4a48      	ldr	r2, [pc, #288]	; (8004c00 <HAL_RCC_ClockConfig+0x188>)
 8004ae0:	061b      	lsls	r3, r3, #24
 8004ae2:	0f1b      	lsrs	r3, r3, #28
 8004ae4:	5cd3      	ldrb	r3, [r2, r3]
 8004ae6:	40d8      	lsrs	r0, r3
 8004ae8:	4b46      	ldr	r3, [pc, #280]	; (8004c04 <HAL_RCC_ClockConfig+0x18c>)
 8004aea:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004aec:	4b46      	ldr	r3, [pc, #280]	; (8004c08 <HAL_RCC_ClockConfig+0x190>)
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	f7fe fe58 	bl	80037a4 <HAL_InitTick>
  if(status != HAL_OK)
 8004af4:	e7c5      	b.n	8004a82 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	6833      	ldr	r3, [r6, #0]
 8004af8:	9a01      	ldr	r2, [sp, #4]
 8004afa:	43ab      	bics	r3, r5
 8004afc:	4313      	orrs	r3, r2
 8004afe:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004b00:	f7fe fe94 	bl	800382c <HAL_GetTick>
 8004b04:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b06:	6833      	ldr	r3, [r6, #0]
 8004b08:	9a01      	ldr	r2, [sp, #4]
 8004b0a:	402b      	ands	r3, r5
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d0c0      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b10:	f7fe fe8c 	bl	800382c <HAL_GetTick>
 8004b14:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <HAL_RCC_ClockConfig+0x194>)
 8004b16:	1bc0      	subs	r0, r0, r7
 8004b18:	4298      	cmp	r0, r3
 8004b1a:	d9f4      	bls.n	8004b06 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8004b1c:	2003      	movs	r0, #3
 8004b1e:	e7b0      	b.n	8004a82 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b20:	20f0      	movs	r0, #240	; 0xf0
 8004b22:	4935      	ldr	r1, [pc, #212]	; (8004bf8 <HAL_RCC_ClockConfig+0x180>)
 8004b24:	68cb      	ldr	r3, [r1, #12]
 8004b26:	4383      	bics	r3, r0
 8004b28:	68a0      	ldr	r0, [r4, #8]
 8004b2a:	4303      	orrs	r3, r0
 8004b2c:	60cb      	str	r3, [r1, #12]
 8004b2e:	e7b3      	b.n	8004a98 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b30:	4d31      	ldr	r5, [pc, #196]	; (8004bf8 <HAL_RCC_ClockConfig+0x180>)
 8004b32:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b34:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b36:	2a02      	cmp	r2, #2
 8004b38:	d118      	bne.n	8004b6c <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b3a:	039b      	lsls	r3, r3, #14
 8004b3c:	d5a0      	bpl.n	8004a80 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b3e:	2103      	movs	r1, #3
 8004b40:	68eb      	ldr	r3, [r5, #12]
 8004b42:	438b      	bics	r3, r1
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8004b48:	f7fe fe70 	bl	800382c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b4c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8004b4e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d118      	bne.n	8004b86 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b54:	220c      	movs	r2, #12
 8004b56:	68eb      	ldr	r3, [r5, #12]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d09e      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b5e:	f7fe fe65 	bl	800382c <HAL_GetTick>
 8004b62:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <HAL_RCC_ClockConfig+0x194>)
 8004b64:	1bc0      	subs	r0, r0, r7
 8004b66:	4298      	cmp	r0, r3
 8004b68:	d9f4      	bls.n	8004b54 <HAL_RCC_ClockConfig+0xdc>
 8004b6a:	e7d7      	b.n	8004b1c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b6c:	2a03      	cmp	r2, #3
 8004b6e:	d102      	bne.n	8004b76 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b70:	019b      	lsls	r3, r3, #6
 8004b72:	d4e4      	bmi.n	8004b3e <HAL_RCC_ClockConfig+0xc6>
 8004b74:	e784      	b.n	8004a80 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b76:	2a01      	cmp	r2, #1
 8004b78:	d102      	bne.n	8004b80 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b7a:	075b      	lsls	r3, r3, #29
 8004b7c:	d4df      	bmi.n	8004b3e <HAL_RCC_ClockConfig+0xc6>
 8004b7e:	e77f      	b.n	8004a80 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b80:	059b      	lsls	r3, r3, #22
 8004b82:	d4dc      	bmi.n	8004b3e <HAL_RCC_ClockConfig+0xc6>
 8004b84:	e77c      	b.n	8004a80 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d10b      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b8a:	220c      	movs	r2, #12
 8004b8c:	68eb      	ldr	r3, [r5, #12]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d083      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b94:	f7fe fe4a 	bl	800382c <HAL_GetTick>
 8004b98:	4b1c      	ldr	r3, [pc, #112]	; (8004c0c <HAL_RCC_ClockConfig+0x194>)
 8004b9a:	1bc0      	subs	r0, r0, r7
 8004b9c:	4298      	cmp	r0, r3
 8004b9e:	d9f4      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x112>
 8004ba0:	e7bc      	b.n	8004b1c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d011      	beq.n	8004bca <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ba6:	220c      	movs	r2, #12
 8004ba8:	68eb      	ldr	r3, [r5, #12]
 8004baa:	4213      	tst	r3, r2
 8004bac:	d100      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0x138>
 8004bae:	e775      	b.n	8004a9c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb0:	f7fe fe3c 	bl	800382c <HAL_GetTick>
 8004bb4:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <HAL_RCC_ClockConfig+0x194>)
 8004bb6:	1bc0      	subs	r0, r0, r7
 8004bb8:	4298      	cmp	r0, r3
 8004bba:	d9f4      	bls.n	8004ba6 <HAL_RCC_ClockConfig+0x12e>
 8004bbc:	e7ae      	b.n	8004b1c <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bbe:	f7fe fe35 	bl	800382c <HAL_GetTick>
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <HAL_RCC_ClockConfig+0x194>)
 8004bc4:	1bc0      	subs	r0, r0, r7
 8004bc6:	4298      	cmp	r0, r3
 8004bc8:	d8a8      	bhi.n	8004b1c <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bca:	220c      	movs	r2, #12
 8004bcc:	68eb      	ldr	r3, [r5, #12]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d1f4      	bne.n	8004bbe <HAL_RCC_ClockConfig+0x146>
 8004bd4:	e762      	b.n	8004a9c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd6:	f7fe fe29 	bl	800382c <HAL_GetTick>
 8004bda:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <HAL_RCC_ClockConfig+0x194>)
 8004bdc:	1bc0      	subs	r0, r0, r7
 8004bde:	4298      	cmp	r0, r3
 8004be0:	d800      	bhi.n	8004be4 <HAL_RCC_ClockConfig+0x16c>
 8004be2:	e767      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x3c>
 8004be4:	e79a      	b.n	8004b1c <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be6:	68eb      	ldr	r3, [r5, #12]
 8004be8:	4909      	ldr	r1, [pc, #36]	; (8004c10 <HAL_RCC_ClockConfig+0x198>)
 8004bea:	400b      	ands	r3, r1
 8004bec:	68e1      	ldr	r1, [r4, #12]
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	60eb      	str	r3, [r5, #12]
 8004bf2:	e768      	b.n	8004ac6 <HAL_RCC_ClockConfig+0x4e>
 8004bf4:	40022000 	.word	0x40022000
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	ffffc7ff 	.word	0xffffc7ff
 8004c00:	080066b6 	.word	0x080066b6
 8004c04:	2000001c 	.word	0x2000001c
 8004c08:	20000024 	.word	0x20000024
 8004c0c:	00001388 	.word	0x00001388
 8004c10:	fffff8ff 	.word	0xfffff8ff

08004c14 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c14:	4b04      	ldr	r3, [pc, #16]	; (8004c28 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004c16:	4a05      	ldr	r2, [pc, #20]	; (8004c2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	055b      	lsls	r3, r3, #21
 8004c1c:	0f5b      	lsrs	r3, r3, #29
 8004c1e:	5cd3      	ldrb	r3, [r2, r3]
 8004c20:	4a03      	ldr	r2, [pc, #12]	; (8004c30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004c22:	6810      	ldr	r0, [r2, #0]
 8004c24:	40d8      	lsrs	r0, r3
}
 8004c26:	4770      	bx	lr
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	080066c6 	.word	0x080066c6
 8004c30:	2000001c 	.word	0x2000001c

08004c34 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c34:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004c36:	4a05      	ldr	r2, [pc, #20]	; (8004c4c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	049b      	lsls	r3, r3, #18
 8004c3c:	0f5b      	lsrs	r3, r3, #29
 8004c3e:	5cd3      	ldrb	r3, [r2, r3]
 8004c40:	4a03      	ldr	r2, [pc, #12]	; (8004c50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004c42:	6810      	ldr	r0, [r2, #0]
 8004c44:	40d8      	lsrs	r0, r3
}
 8004c46:	4770      	bx	lr
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	080066c6 	.word	0x080066c6
 8004c50:	2000001c 	.word	0x2000001c

08004c54 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c54:	6803      	ldr	r3, [r0, #0]
{
 8004c56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c58:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c5a:	069b      	lsls	r3, r3, #26
 8004c5c:	d52d      	bpl.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x66>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c5e:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8004c60:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c62:	4c5c      	ldr	r4, [pc, #368]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004c64:	055b      	lsls	r3, r3, #21
 8004c66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8004c68:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c6a:	421a      	tst	r2, r3
 8004c6c:	d104      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c70:	4313      	orrs	r3, r2
 8004c72:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004c74:	2301      	movs	r3, #1
 8004c76:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c78:	2780      	movs	r7, #128	; 0x80
 8004c7a:	4e57      	ldr	r6, [pc, #348]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004c7c:	007f      	lsls	r7, r7, #1
 8004c7e:	6833      	ldr	r3, [r6, #0]
 8004c80:	423b      	tst	r3, r7
 8004c82:	d053      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004c84:	686b      	ldr	r3, [r5, #4]
 8004c86:	21c0      	movs	r1, #192	; 0xc0
 8004c88:	0018      	movs	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004c8a:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004c8c:	0389      	lsls	r1, r1, #14
 8004c8e:	4008      	ands	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004c90:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004c92:	4290      	cmp	r0, r2
 8004c94:	d15b      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xfa>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004c96:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004c98:	22c0      	movs	r2, #192	; 0xc0
 8004c9a:	0008      	movs	r0, r1
 8004c9c:	0292      	lsls	r2, r2, #10
 8004c9e:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004ca0:	4211      	tst	r1, r2
 8004ca2:	d15f      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	069b      	lsls	r3, r3, #26
 8004ca8:	d500      	bpl.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004caa:	e070      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cac:	9b00      	ldr	r3, [sp, #0]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d103      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004cb4:	4a49      	ldr	r2, [pc, #292]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cba:	682b      	ldr	r3, [r5, #0]
 8004cbc:	07da      	lsls	r2, r3, #31
 8004cbe:	d506      	bpl.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cc0:	2003      	movs	r0, #3
 8004cc2:	4944      	ldr	r1, [pc, #272]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004cc4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004cc6:	4382      	bics	r2, r0
 8004cc8:	68a8      	ldr	r0, [r5, #8]
 8004cca:	4302      	orrs	r2, r0
 8004ccc:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cce:	079a      	lsls	r2, r3, #30
 8004cd0:	d506      	bpl.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cd2:	200c      	movs	r0, #12
 8004cd4:	493f      	ldr	r1, [pc, #252]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004cd6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004cd8:	4382      	bics	r2, r0
 8004cda:	68e8      	ldr	r0, [r5, #12]
 8004cdc:	4302      	orrs	r2, r0
 8004cde:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ce0:	075a      	lsls	r2, r3, #29
 8004ce2:	d506      	bpl.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ce4:	493b      	ldr	r1, [pc, #236]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004ce6:	483e      	ldr	r0, [pc, #248]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004ce8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004cea:	4002      	ands	r2, r0
 8004cec:	6928      	ldr	r0, [r5, #16]
 8004cee:	4302      	orrs	r2, r0
 8004cf0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cf2:	071a      	lsls	r2, r3, #28
 8004cf4:	d506      	bpl.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cf6:	4937      	ldr	r1, [pc, #220]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004cf8:	483a      	ldr	r0, [pc, #232]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004cfa:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004cfc:	4002      	ands	r2, r0
 8004cfe:	6968      	ldr	r0, [r5, #20]
 8004d00:	4302      	orrs	r2, r0
 8004d02:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d04:	065a      	lsls	r2, r3, #25
 8004d06:	d506      	bpl.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d08:	4932      	ldr	r1, [pc, #200]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004d0a:	4837      	ldr	r0, [pc, #220]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004d0c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004d0e:	4002      	ands	r2, r0
 8004d10:	69e8      	ldr	r0, [r5, #28]
 8004d12:	4302      	orrs	r2, r0
 8004d14:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8004d16:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d18:	061b      	lsls	r3, r3, #24
 8004d1a:	d517      	bpl.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004d1c:	4a2d      	ldr	r2, [pc, #180]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004d1e:	4933      	ldr	r1, [pc, #204]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004d20:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004d22:	400b      	ands	r3, r1
 8004d24:	69a9      	ldr	r1, [r5, #24]
 8004d26:	430b      	orrs	r3, r1
 8004d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d2a:	e00f      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2c:	6833      	ldr	r3, [r6, #0]
 8004d2e:	433b      	orrs	r3, r7
 8004d30:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004d32:	f7fe fd7b 	bl	800382c <HAL_GetTick>
 8004d36:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d38:	6833      	ldr	r3, [r6, #0]
 8004d3a:	423b      	tst	r3, r7
 8004d3c:	d1a2      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3e:	f7fe fd75 	bl	800382c <HAL_GetTick>
 8004d42:	9b01      	ldr	r3, [sp, #4]
 8004d44:	1ac0      	subs	r0, r0, r3
 8004d46:	2864      	cmp	r0, #100	; 0x64
 8004d48:	d9f6      	bls.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          return HAL_TIMEOUT;
 8004d4a:	2003      	movs	r0, #3
}
 8004d4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004d4e:	22c0      	movs	r2, #192	; 0xc0
 8004d50:	0019      	movs	r1, r3
 8004d52:	0292      	lsls	r2, r2, #10
 8004d54:	4011      	ands	r1, r2
 8004d56:	4291      	cmp	r1, r2
 8004d58:	d19d      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d5a:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8004d5c:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d5e:	0392      	lsls	r2, r2, #14
 8004d60:	d599      	bpl.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004d62:	e7f3      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004d64:	4013      	ands	r3, r2
 8004d66:	4283      	cmp	r3, r0
 8004d68:	d09c      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d6a:	682b      	ldr	r3, [r5, #0]
 8004d6c:	069b      	lsls	r3, r3, #26
 8004d6e:	d59d      	bpl.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d70:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004d72:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d74:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004d76:	0312      	lsls	r2, r2, #12
 8004d78:	4302      	orrs	r2, r0
 8004d7a:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d7c:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004d7e:	4b1c      	ldr	r3, [pc, #112]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d80:	481c      	ldr	r0, [pc, #112]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004d82:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d84:	4002      	ands	r2, r0
 8004d86:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004d88:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004d8a:	05cb      	lsls	r3, r1, #23
 8004d8c:	d412      	bmi.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d8e:	6869      	ldr	r1, [r5, #4]
 8004d90:	23c0      	movs	r3, #192	; 0xc0
 8004d92:	000a      	movs	r2, r1
 8004d94:	029b      	lsls	r3, r3, #10
 8004d96:	401a      	ands	r2, r3
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d107      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x158>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	4816      	ldr	r0, [pc, #88]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004da0:	4003      	ands	r3, r0
 8004da2:	20c0      	movs	r0, #192	; 0xc0
 8004da4:	0380      	lsls	r0, r0, #14
 8004da6:	4001      	ands	r1, r0
 8004da8:	430b      	orrs	r3, r1
 8004daa:	6023      	str	r3, [r4, #0]
 8004dac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004dae:	431a      	orrs	r2, r3
 8004db0:	6522      	str	r2, [r4, #80]	; 0x50
 8004db2:	e77b      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 8004db4:	f7fe fd3a 	bl	800382c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004db8:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004dba:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004dbc:	00bf      	lsls	r7, r7, #2
 8004dbe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004dc0:	423b      	tst	r3, r7
 8004dc2:	d000      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004dc4:	e76e      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc6:	f7fe fd31 	bl	800382c <HAL_GetTick>
 8004dca:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004dcc:	1b80      	subs	r0, r0, r6
 8004dce:	4298      	cmp	r0, r3
 8004dd0:	d9f5      	bls.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8004dd2:	e7ba      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	40007000 	.word	0x40007000
 8004ddc:	efffffff 	.word	0xefffffff
 8004de0:	fffff3ff 	.word	0xfffff3ff
 8004de4:	ffffcfff 	.word	0xffffcfff
 8004de8:	fbffffff 	.word	0xfbffffff
 8004dec:	fff3ffff 	.word	0xfff3ffff
 8004df0:	fffcffff 	.word	0xfffcffff
 8004df4:	fff7ffff 	.word	0xfff7ffff
 8004df8:	ffcfffff 	.word	0xffcfffff
 8004dfc:	00001388 	.word	0x00001388

08004e00 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e00:	2280      	movs	r2, #128	; 0x80
{
 8004e02:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004e04:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e06:	05d2      	lsls	r2, r2, #23
 8004e08:	4290      	cmp	r0, r2
 8004e0a:	d005      	beq.n	8004e18 <TIM_Base_SetConfig+0x18>
 8004e0c:	4c10      	ldr	r4, [pc, #64]	; (8004e50 <TIM_Base_SetConfig+0x50>)
 8004e0e:	42a0      	cmp	r0, r4
 8004e10:	d002      	beq.n	8004e18 <TIM_Base_SetConfig+0x18>
 8004e12:	4c10      	ldr	r4, [pc, #64]	; (8004e54 <TIM_Base_SetConfig+0x54>)
 8004e14:	42a0      	cmp	r0, r4
 8004e16:	d10f      	bne.n	8004e38 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e18:	2470      	movs	r4, #112	; 0x70
 8004e1a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004e1c:	684c      	ldr	r4, [r1, #4]
 8004e1e:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e20:	4290      	cmp	r0, r2
 8004e22:	d005      	beq.n	8004e30 <TIM_Base_SetConfig+0x30>
 8004e24:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <TIM_Base_SetConfig+0x50>)
 8004e26:	4290      	cmp	r0, r2
 8004e28:	d002      	beq.n	8004e30 <TIM_Base_SetConfig+0x30>
 8004e2a:	4a0a      	ldr	r2, [pc, #40]	; (8004e54 <TIM_Base_SetConfig+0x54>)
 8004e2c:	4290      	cmp	r0, r2
 8004e2e:	d103      	bne.n	8004e38 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e30:	4a09      	ldr	r2, [pc, #36]	; (8004e58 <TIM_Base_SetConfig+0x58>)
 8004e32:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e34:	68ca      	ldr	r2, [r1, #12]
 8004e36:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e38:	2280      	movs	r2, #128	; 0x80
 8004e3a:	4393      	bics	r3, r2
 8004e3c:	690a      	ldr	r2, [r1, #16]
 8004e3e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004e40:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e42:	688b      	ldr	r3, [r1, #8]
 8004e44:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e46:	680b      	ldr	r3, [r1, #0]
 8004e48:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	6143      	str	r3, [r0, #20]
}
 8004e4e:	bd10      	pop	{r4, pc}
 8004e50:	40010800 	.word	0x40010800
 8004e54:	40011400 	.word	0x40011400
 8004e58:	fffffcff 	.word	0xfffffcff

08004e5c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5c:	2201      	movs	r2, #1
{
 8004e5e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e60:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e62:	6a03      	ldr	r3, [r0, #32]
 8004e64:	4393      	bics	r3, r2
 8004e66:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004e68:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004e6a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004e6c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e6e:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e70:	680d      	ldr	r5, [r1, #0]
 8004e72:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e74:	2502      	movs	r5, #2
 8004e76:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e78:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e7c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e7e:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8004e80:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8004e82:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e84:	6203      	str	r3, [r0, #32]
}
 8004e86:	bd30      	pop	{r4, r5, pc}

08004e88 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e88:	2210      	movs	r2, #16
 8004e8a:	6a03      	ldr	r3, [r0, #32]
{
 8004e8c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e8e:	4393      	bics	r3, r2
 8004e90:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e92:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e94:	4c09      	ldr	r4, [pc, #36]	; (8004ebc <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 8004e96:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004e98:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e9a:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e9c:	680a      	ldr	r2, [r1, #0]
 8004e9e:	0212      	lsls	r2, r2, #8
 8004ea0:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ea2:	2420      	movs	r4, #32
 8004ea4:	43a3      	bics	r3, r4
 8004ea6:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ea8:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eaa:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004eac:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eae:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eb0:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004eb2:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8004eb4:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb6:	6203      	str	r3, [r0, #32]
}
 8004eb8:	bd30      	pop	{r4, r5, pc}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	ffff8cff 	.word	0xffff8cff

08004ec0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ec0:	231f      	movs	r3, #31
{
 8004ec2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ec4:	2401      	movs	r4, #1
 8004ec6:	4019      	ands	r1, r3
 8004ec8:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eca:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8004ecc:	6a03      	ldr	r3, [r0, #32]
 8004ece:	43a3      	bics	r3, r4
 8004ed0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ed2:	6a03      	ldr	r3, [r0, #32]
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	6202      	str	r2, [r0, #32]
}
 8004ed8:	bd10      	pop	{r4, pc}
	...

08004edc <HAL_TIM_OC_Start>:
{
 8004edc:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ede:	0003      	movs	r3, r0
{
 8004ee0:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ee2:	2900      	cmp	r1, #0
 8004ee4:	d105      	bne.n	8004ef2 <HAL_TIM_OC_Start+0x16>
 8004ee6:	333a      	adds	r3, #58	; 0x3a
    return HAL_ERROR;
 8004ee8:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eea:	781a      	ldrb	r2, [r3, #0]
 8004eec:	4282      	cmp	r2, r0
 8004eee:	d00a      	beq.n	8004f06 <HAL_TIM_OC_Start+0x2a>
}
 8004ef0:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ef2:	2904      	cmp	r1, #4
 8004ef4:	d101      	bne.n	8004efa <HAL_TIM_OC_Start+0x1e>
 8004ef6:	333b      	adds	r3, #59	; 0x3b
 8004ef8:	e7f6      	b.n	8004ee8 <HAL_TIM_OC_Start+0xc>
 8004efa:	2908      	cmp	r1, #8
 8004efc:	d101      	bne.n	8004f02 <HAL_TIM_OC_Start+0x26>
 8004efe:	333c      	adds	r3, #60	; 0x3c
 8004f00:	e7f2      	b.n	8004ee8 <HAL_TIM_OC_Start+0xc>
 8004f02:	333d      	adds	r3, #61	; 0x3d
 8004f04:	e7f0      	b.n	8004ee8 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f06:	2202      	movs	r2, #2
 8004f08:	701a      	strb	r2, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f0a:	6820      	ldr	r0, [r4, #0]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f7ff ffd7 	bl	8004ec0 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f12:	2280      	movs	r2, #128	; 0x80
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	05d2      	lsls	r2, r2, #23
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d005      	beq.n	8004f28 <HAL_TIM_OC_Start+0x4c>
 8004f1c:	4a0b      	ldr	r2, [pc, #44]	; (8004f4c <HAL_TIM_OC_Start+0x70>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d002      	beq.n	8004f28 <HAL_TIM_OC_Start+0x4c>
 8004f22:	4a0b      	ldr	r2, [pc, #44]	; (8004f50 <HAL_TIM_OC_Start+0x74>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d10a      	bne.n	8004f3e <HAL_TIM_OC_Start+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f28:	2107      	movs	r1, #7
 8004f2a:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8004f2c:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f30:	2a06      	cmp	r2, #6
 8004f32:	d0dd      	beq.n	8004ef0 <HAL_TIM_OC_Start+0x14>
      __HAL_TIM_ENABLE(htim);
 8004f34:	2201      	movs	r2, #1
 8004f36:	6819      	ldr	r1, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	e7d8      	b.n	8004ef0 <HAL_TIM_OC_Start+0x14>
    __HAL_TIM_ENABLE(htim);
 8004f3e:	2201      	movs	r2, #1
 8004f40:	6819      	ldr	r1, [r3, #0]
  return HAL_OK;
 8004f42:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004f44:	430a      	orrs	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	e7d2      	b.n	8004ef0 <HAL_TIM_OC_Start+0x14>
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	40010800 	.word	0x40010800
 8004f50:	40011400 	.word	0x40011400

08004f54 <HAL_TIM_OC_Stop>:
{
 8004f54:	b570      	push	{r4, r5, r6, lr}
 8004f56:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f58:	2200      	movs	r2, #0
 8004f5a:	6800      	ldr	r0, [r0, #0]
{
 8004f5c:	000d      	movs	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f5e:	f7ff ffaf 	bl	8004ec0 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	4a0c      	ldr	r2, [pc, #48]	; (8004f98 <HAL_TIM_OC_Stop+0x44>)
 8004f66:	6a19      	ldr	r1, [r3, #32]
 8004f68:	4211      	tst	r1, r2
 8004f6a:	d103      	bne.n	8004f74 <HAL_TIM_OC_Stop+0x20>
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	438a      	bics	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	2301      	movs	r3, #1
 8004f76:	2d00      	cmp	r5, #0
 8004f78:	d103      	bne.n	8004f82 <HAL_TIM_OC_Stop+0x2e>
 8004f7a:	343a      	adds	r4, #58	; 0x3a
}
 8004f7c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f7e:	7023      	strb	r3, [r4, #0]
}
 8004f80:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f82:	2d04      	cmp	r5, #4
 8004f84:	d101      	bne.n	8004f8a <HAL_TIM_OC_Stop+0x36>
 8004f86:	343b      	adds	r4, #59	; 0x3b
 8004f88:	e7f8      	b.n	8004f7c <HAL_TIM_OC_Stop+0x28>
 8004f8a:	2d08      	cmp	r5, #8
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_OC_Stop+0x3e>
 8004f8e:	343c      	adds	r4, #60	; 0x3c
 8004f90:	e7f4      	b.n	8004f7c <HAL_TIM_OC_Stop+0x28>
 8004f92:	343d      	adds	r4, #61	; 0x3d
 8004f94:	e7f2      	b.n	8004f7c <HAL_TIM_OC_Stop+0x28>
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	00001111 	.word	0x00001111

08004f9c <HAL_TIM_PWM_Init>:
{
 8004f9c:	b570      	push	{r4, r5, r6, lr}
 8004f9e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004fa0:	2001      	movs	r0, #1
  if (htim == NULL)
 8004fa2:	2c00      	cmp	r4, #0
 8004fa4:	d01d      	beq.n	8004fe2 <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa6:	0025      	movs	r5, r4
 8004fa8:	3539      	adds	r5, #57	; 0x39
 8004faa:	782b      	ldrb	r3, [r5, #0]
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d105      	bne.n	8004fbe <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004fb2:	0023      	movs	r3, r4
 8004fb4:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8004fb6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004fb8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8004fba:	f7fe fb21 	bl	8003600 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc2:	6820      	ldr	r0, [r4, #0]
 8004fc4:	1d21      	adds	r1, r4, #4
 8004fc6:	f7ff ff1b 	bl	8004e00 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fca:	0022      	movs	r2, r4
 8004fcc:	2301      	movs	r3, #1
  return HAL_OK;
 8004fce:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd0:	323e      	adds	r2, #62	; 0x3e
 8004fd2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd4:	343d      	adds	r4, #61	; 0x3d
 8004fd6:	3a04      	subs	r2, #4
 8004fd8:	7013      	strb	r3, [r2, #0]
 8004fda:	7053      	strb	r3, [r2, #1]
 8004fdc:	7093      	strb	r3, [r2, #2]
 8004fde:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	702b      	strb	r3, [r5, #0]
}
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}

08004fe4 <HAL_TIM_PWM_Start>:
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	f7ff ff79 	bl	8004edc <HAL_TIM_OC_Start>
 8004fea:	bd10      	pop	{r4, pc}

08004fec <HAL_TIM_PWM_Stop>:
 8004fec:	b510      	push	{r4, lr}
 8004fee:	f7ff ffb1 	bl	8004f54 <HAL_TIM_OC_Stop>
 8004ff2:	bd10      	pop	{r4, pc}

08004ff4 <HAL_TIM_PWM_ConfigChannel>:
{
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004ff6:	0005      	movs	r5, r0
 8004ff8:	3538      	adds	r5, #56	; 0x38
 8004ffa:	782b      	ldrb	r3, [r5, #0]
{
 8004ffc:	0007      	movs	r7, r0
 8004ffe:	000c      	movs	r4, r1
 8005000:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 8005002:	2002      	movs	r0, #2
 8005004:	2b01      	cmp	r3, #1
 8005006:	d00a      	beq.n	800501e <HAL_TIM_PWM_ConfigChannel+0x2a>
 8005008:	3801      	subs	r0, #1
 800500a:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 800500c:	2a08      	cmp	r2, #8
 800500e:	d050      	beq.n	80050b2 <HAL_TIM_PWM_ConfigChannel+0xbe>
 8005010:	d806      	bhi.n	8005020 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8005012:	2a00      	cmp	r2, #0
 8005014:	d02a      	beq.n	800506c <HAL_TIM_PWM_ConfigChannel+0x78>
 8005016:	2a04      	cmp	r2, #4
 8005018:	d03a      	beq.n	8005090 <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 800501a:	2300      	movs	r3, #0
 800501c:	702b      	strb	r3, [r5, #0]
}
 800501e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8005020:	2a0c      	cmp	r2, #12
 8005022:	d1fa      	bne.n	800501a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005024:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005026:	4934      	ldr	r1, [pc, #208]	; (80050f8 <HAL_TIM_PWM_ConfigChannel+0x104>)
 8005028:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800502a:	4834      	ldr	r0, [pc, #208]	; (80050fc <HAL_TIM_PWM_ConfigChannel+0x108>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800502c:	400a      	ands	r2, r1
 800502e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005030:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005032:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005034:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005036:	4001      	ands	r1, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005038:	6820      	ldr	r0, [r4, #0]
 800503a:	0207      	lsls	r7, r0, #8
  tmpccer &= ~TIM_CCER_CC4P;
 800503c:	4830      	ldr	r0, [pc, #192]	; (8005100 <HAL_TIM_PWM_ConfigChannel+0x10c>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800503e:	4339      	orrs	r1, r7
  tmpccer &= ~TIM_CCER_CC4P;
 8005040:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005042:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8005044:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005046:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8005048:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800504a:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800504c:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 800504e:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005050:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005052:	2280      	movs	r2, #128	; 0x80
 8005054:	69d9      	ldr	r1, [r3, #28]
 8005056:	0112      	lsls	r2, r2, #4
 8005058:	430a      	orrs	r2, r1
 800505a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800505c:	69da      	ldr	r2, [r3, #28]
 800505e:	4929      	ldr	r1, [pc, #164]	; (8005104 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8005060:	400a      	ands	r2, r1
 8005062:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005064:	68e2      	ldr	r2, [r4, #12]
 8005066:	69d9      	ldr	r1, [r3, #28]
 8005068:	0212      	lsls	r2, r2, #8
 800506a:	e041      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800506c:	6838      	ldr	r0, [r7, #0]
 800506e:	f7ff fef5 	bl	8004e5c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005072:	2208      	movs	r2, #8
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	6999      	ldr	r1, [r3, #24]
 8005078:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800507a:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800507c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800507e:	699a      	ldr	r2, [r3, #24]
 8005080:	438a      	bics	r2, r1
 8005082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005088:	430a      	orrs	r2, r1
 800508a:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800508c:	2000      	movs	r0, #0
      break;
 800508e:	e7c4      	b.n	800501a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005090:	6838      	ldr	r0, [r7, #0]
 8005092:	f7ff fef9 	bl	8004e88 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005096:	2280      	movs	r2, #128	; 0x80
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	0112      	lsls	r2, r2, #4
 800509c:	6999      	ldr	r1, [r3, #24]
 800509e:	430a      	orrs	r2, r1
 80050a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a2:	699a      	ldr	r2, [r3, #24]
 80050a4:	4917      	ldr	r1, [pc, #92]	; (8005104 <HAL_TIM_PWM_ConfigChannel+0x110>)
 80050a6:	400a      	ands	r2, r1
 80050a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050aa:	68e2      	ldr	r2, [r4, #12]
 80050ac:	6999      	ldr	r1, [r3, #24]
 80050ae:	0212      	lsls	r2, r2, #8
 80050b0:	e7ea      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x94>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050b2:	2073      	movs	r0, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050b4:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050b6:	4914      	ldr	r1, [pc, #80]	; (8005108 <HAL_TIM_PWM_ConfigChannel+0x114>)
 80050b8:	6a1a      	ldr	r2, [r3, #32]
 80050ba:	400a      	ands	r2, r1
 80050bc:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80050be:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80050c0:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80050c2:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050c4:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 80050c6:	6820      	ldr	r0, [r4, #0]
 80050c8:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 80050ca:	4810      	ldr	r0, [pc, #64]	; (800510c <HAL_TIM_PWM_ConfigChannel+0x118>)
 80050cc:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ce:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 80050d0:	605f      	str	r7, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80050d2:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80050d4:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050d6:	0212      	lsls	r2, r2, #8
  TIMx->CCR3 = OC_Config->Pulse;
 80050d8:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050da:	2104      	movs	r1, #4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050dc:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 80050de:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050e0:	69da      	ldr	r2, [r3, #28]
 80050e2:	4316      	orrs	r6, r2
 80050e4:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	438a      	bics	r2, r1
 80050ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050ec:	69da      	ldr	r2, [r3, #28]
 80050ee:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050f0:	430a      	orrs	r2, r1
 80050f2:	61da      	str	r2, [r3, #28]
 80050f4:	e7ca      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x98>
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	ffffefff 	.word	0xffffefff
 80050fc:	ffff8cff 	.word	0xffff8cff
 8005100:	ffffdfff 	.word	0xffffdfff
 8005104:	fffffbff 	.word	0xfffffbff
 8005108:	fffffeff 	.word	0xfffffeff
 800510c:	fffffdff 	.word	0xfffffdff

08005110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005110:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005112:	0004      	movs	r4, r0
 8005114:	2202      	movs	r2, #2
 8005116:	3438      	adds	r4, #56	; 0x38
 8005118:	7825      	ldrb	r5, [r4, #0]
{
 800511a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800511c:	0010      	movs	r0, r2
 800511e:	2d01      	cmp	r5, #1
 8005120:	d01d      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005122:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005124:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8005126:	3539      	adds	r5, #57	; 0x39
 8005128:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800512e:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005130:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005132:	680e      	ldr	r6, [r1, #0]
 8005134:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005136:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005138:	2080      	movs	r0, #128	; 0x80
 800513a:	05c0      	lsls	r0, r0, #23
 800513c:	4283      	cmp	r3, r0
 800513e:	d005      	beq.n	800514c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005140:	4807      	ldr	r0, [pc, #28]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8005142:	4283      	cmp	r3, r0
 8005144:	d002      	beq.n	800514c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005146:	4807      	ldr	r0, [pc, #28]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8005148:	4283      	cmp	r3, r0
 800514a:	d104      	bne.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800514c:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800514e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005150:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005152:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005154:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005156:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8005158:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800515a:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800515c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	40010800 	.word	0x40010800
 8005164:	40011400 	.word	0x40011400

08005168 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005168:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800516a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516e:	2201      	movs	r2, #1
 8005170:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005174:	6801      	ldr	r1, [r0, #0]
 8005176:	4d12      	ldr	r5, [pc, #72]	; (80051c0 <UART_EndRxTransfer+0x58>)
 8005178:	680b      	ldr	r3, [r1, #0]
 800517a:	402b      	ands	r3, r5
 800517c:	600b      	str	r3, [r1, #0]
 800517e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005182:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005186:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518a:	6801      	ldr	r1, [r0, #0]
 800518c:	688b      	ldr	r3, [r1, #8]
 800518e:	4393      	bics	r3, r2
 8005190:	608b      	str	r3, [r1, #8]
 8005192:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005196:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005198:	4293      	cmp	r3, r2
 800519a:	d10a      	bne.n	80051b2 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a0:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a4:	2410      	movs	r4, #16
 80051a6:	6802      	ldr	r2, [r0, #0]
 80051a8:	6813      	ldr	r3, [r2, #0]
 80051aa:	43a3      	bics	r3, r4
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051b2:	2220      	movs	r2, #32
 80051b4:	1d03      	adds	r3, r0, #4
 80051b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b8:	2300      	movs	r3, #0
 80051ba:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051bc:	6683      	str	r3, [r0, #104]	; 0x68
}
 80051be:	bd30      	pop	{r4, r5, pc}
 80051c0:	fffffedf 	.word	0xfffffedf

080051c4 <UART_SetConfig>:
{
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051c8:	6925      	ldr	r5, [r4, #16]
 80051ca:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80051cc:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051ce:	4329      	orrs	r1, r5
 80051d0:	6965      	ldr	r5, [r4, #20]
 80051d2:	69c3      	ldr	r3, [r0, #28]
 80051d4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051d6:	6810      	ldr	r0, [r2, #0]
 80051d8:	4d72      	ldr	r5, [pc, #456]	; (80053a4 <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051da:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051dc:	4028      	ands	r0, r5
 80051de:	4301      	orrs	r1, r0
 80051e0:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e2:	6851      	ldr	r1, [r2, #4]
 80051e4:	4870      	ldr	r0, [pc, #448]	; (80053a8 <UART_SetConfig+0x1e4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051e6:	4d71      	ldr	r5, [pc, #452]	; (80053ac <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e8:	4001      	ands	r1, r0
 80051ea:	68e0      	ldr	r0, [r4, #12]
 80051ec:	4301      	orrs	r1, r0
 80051ee:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051f0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051f2:	42aa      	cmp	r2, r5
 80051f4:	d001      	beq.n	80051fa <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80051f6:	6a21      	ldr	r1, [r4, #32]
 80051f8:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051fa:	6891      	ldr	r1, [r2, #8]
 80051fc:	4e6c      	ldr	r6, [pc, #432]	; (80053b0 <UART_SetConfig+0x1ec>)
 80051fe:	4031      	ands	r1, r6
 8005200:	4301      	orrs	r1, r0
 8005202:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005204:	496b      	ldr	r1, [pc, #428]	; (80053b4 <UART_SetConfig+0x1f0>)
 8005206:	428a      	cmp	r2, r1
 8005208:	d10f      	bne.n	800522a <UART_SetConfig+0x66>
 800520a:	2103      	movs	r1, #3
 800520c:	4a6a      	ldr	r2, [pc, #424]	; (80053b8 <UART_SetConfig+0x1f4>)
 800520e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005210:	400a      	ands	r2, r1
 8005212:	3a01      	subs	r2, #1
 8005214:	4969      	ldr	r1, [pc, #420]	; (80053bc <UART_SetConfig+0x1f8>)
 8005216:	2a02      	cmp	r2, #2
 8005218:	d90f      	bls.n	800523a <UART_SetConfig+0x76>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800521a:	2280      	movs	r2, #128	; 0x80
 800521c:	0212      	lsls	r2, r2, #8
 800521e:	4293      	cmp	r3, r2
 8005220:	d100      	bne.n	8005224 <UART_SetConfig+0x60>
 8005222:	e069      	b.n	80052f8 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005224:	f7ff fd06 	bl	8004c34 <HAL_RCC_GetPCLK2Freq>
        break;
 8005228:	e09c      	b.n	8005364 <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800522a:	4965      	ldr	r1, [pc, #404]	; (80053c0 <UART_SetConfig+0x1fc>)
 800522c:	428a      	cmp	r2, r1
 800522e:	d113      	bne.n	8005258 <UART_SetConfig+0x94>
 8005230:	210c      	movs	r1, #12
 8005232:	4a61      	ldr	r2, [pc, #388]	; (80053b8 <UART_SetConfig+0x1f4>)
 8005234:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005236:	400a      	ands	r2, r1
 8005238:	4962      	ldr	r1, [pc, #392]	; (80053c4 <UART_SetConfig+0x200>)
 800523a:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800523c:	2280      	movs	r2, #128	; 0x80
 800523e:	0212      	lsls	r2, r2, #8
 8005240:	4293      	cmp	r3, r2
 8005242:	d000      	beq.n	8005246 <UART_SetConfig+0x82>
 8005244:	e07f      	b.n	8005346 <UART_SetConfig+0x182>
    switch (clocksource)
 8005246:	2808      	cmp	r0, #8
 8005248:	d818      	bhi.n	800527c <UART_SetConfig+0xb8>
 800524a:	f7fa ff6f 	bl	800012c <__gnu_thumb1_case_uqi>
 800524e:	5550      	.short	0x5550
 8005250:	17791758 	.word	0x17791758
 8005254:	1717      	.short	0x1717
 8005256:	63          	.byte	0x63
 8005257:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005258:	42aa      	cmp	r2, r5
 800525a:	d10f      	bne.n	800527c <UART_SetConfig+0xb8>
 800525c:	21c0      	movs	r1, #192	; 0xc0
 800525e:	2080      	movs	r0, #128	; 0x80
 8005260:	4a55      	ldr	r2, [pc, #340]	; (80053b8 <UART_SetConfig+0x1f4>)
 8005262:	0109      	lsls	r1, r1, #4
 8005264:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005266:	0100      	lsls	r0, r0, #4
 8005268:	400b      	ands	r3, r1
 800526a:	4283      	cmp	r3, r0
 800526c:	d016      	beq.n	800529c <UART_SetConfig+0xd8>
 800526e:	d807      	bhi.n	8005280 <UART_SetConfig+0xbc>
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <UART_SetConfig+0xc6>
 8005274:	2280      	movs	r2, #128	; 0x80
 8005276:	00d2      	lsls	r2, r2, #3
 8005278:	4293      	cmp	r3, r2
 800527a:	d035      	beq.n	80052e8 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800527c:	2001      	movs	r0, #1
 800527e:	e009      	b.n	8005294 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005280:	428b      	cmp	r3, r1
 8005282:	d1fb      	bne.n	800527c <UART_SetConfig+0xb8>
 8005284:	2080      	movs	r0, #128	; 0x80
 8005286:	0200      	lsls	r0, r0, #8
 8005288:	e012      	b.n	80052b0 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 800528a:	f7ff fcc3 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800528e:	2800      	cmp	r0, #0
 8005290:	d10e      	bne.n	80052b0 <UART_SetConfig+0xec>
 8005292:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005294:	2300      	movs	r3, #0
 8005296:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8005298:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800529a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800529c:	2310      	movs	r3, #16
 800529e:	6810      	ldr	r0, [r2, #0]
 80052a0:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052a2:	4243      	negs	r3, r0
 80052a4:	4158      	adcs	r0, r3
 80052a6:	4b48      	ldr	r3, [pc, #288]	; (80053c8 <UART_SetConfig+0x204>)
 80052a8:	4240      	negs	r0, r0
 80052aa:	4018      	ands	r0, r3
 80052ac:	4b47      	ldr	r3, [pc, #284]	; (80053cc <UART_SetConfig+0x208>)
 80052ae:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052b0:	2203      	movs	r2, #3
 80052b2:	6863      	ldr	r3, [r4, #4]
 80052b4:	435a      	muls	r2, r3
 80052b6:	4282      	cmp	r2, r0
 80052b8:	d8e0      	bhi.n	800527c <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80052ba:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052bc:	4282      	cmp	r2, r0
 80052be:	d3dd      	bcc.n	800527c <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052c0:	2700      	movs	r7, #0
 80052c2:	0e02      	lsrs	r2, r0, #24
 80052c4:	0201      	lsls	r1, r0, #8
 80052c6:	085e      	lsrs	r6, r3, #1
 80052c8:	1989      	adds	r1, r1, r6
 80052ca:	417a      	adcs	r2, r7
 80052cc:	0008      	movs	r0, r1
 80052ce:	0011      	movs	r1, r2
 80052d0:	001a      	movs	r2, r3
 80052d2:	003b      	movs	r3, r7
 80052d4:	f7fb f8b4 	bl	8000440 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052d8:	4b3d      	ldr	r3, [pc, #244]	; (80053d0 <UART_SetConfig+0x20c>)
 80052da:	18c2      	adds	r2, r0, r3
 80052dc:	4b3d      	ldr	r3, [pc, #244]	; (80053d4 <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052de:	429a      	cmp	r2, r3
 80052e0:	d8cc      	bhi.n	800527c <UART_SetConfig+0xb8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	60d8      	str	r0, [r3, #12]
 80052e6:	e7d4      	b.n	8005292 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 80052e8:	f7ff f8fc 	bl	80044e4 <HAL_RCC_GetSysClockFreq>
        break;
 80052ec:	e7cf      	b.n	800528e <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ee:	f7ff fc91 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80052f2:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80052f4:	d0cd      	beq.n	8005292 <UART_SetConfig+0xce>
 80052f6:	e00d      	b.n	8005314 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f8:	f7ff fc9c 	bl	8004c34 <HAL_RCC_GetPCLK2Freq>
 80052fc:	e7f9      	b.n	80052f2 <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052fe:	4b2e      	ldr	r3, [pc, #184]	; (80053b8 <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005300:	4a32      	ldr	r2, [pc, #200]	; (80053cc <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	2310      	movs	r3, #16
 8005306:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005308:	4243      	negs	r3, r0
 800530a:	4158      	adcs	r0, r3
 800530c:	4b2e      	ldr	r3, [pc, #184]	; (80053c8 <UART_SetConfig+0x204>)
 800530e:	4240      	negs	r0, r0
 8005310:	4003      	ands	r3, r0
 8005312:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005314:	0058      	lsls	r0, r3, #1
 8005316:	6863      	ldr	r3, [r4, #4]
 8005318:	6861      	ldr	r1, [r4, #4]
 800531a:	085b      	lsrs	r3, r3, #1
 800531c:	18c0      	adds	r0, r0, r3
 800531e:	f7fa ff19 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005322:	0002      	movs	r2, r0
 8005324:	4b2c      	ldr	r3, [pc, #176]	; (80053d8 <UART_SetConfig+0x214>)
 8005326:	3a10      	subs	r2, #16
 8005328:	429a      	cmp	r2, r3
 800532a:	d8a7      	bhi.n	800527c <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800532c:	230f      	movs	r3, #15
 800532e:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005330:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005332:	439a      	bics	r2, r3
 8005334:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005336:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8005338:	6822      	ldr	r2, [r4, #0]
 800533a:	4318      	orrs	r0, r3
 800533c:	60d0      	str	r0, [r2, #12]
 800533e:	e7a8      	b.n	8005292 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8005340:	f7ff f8d0 	bl	80044e4 <HAL_RCC_GetSysClockFreq>
 8005344:	e7d5      	b.n	80052f2 <UART_SetConfig+0x12e>
    switch (clocksource)
 8005346:	2808      	cmp	r0, #8
 8005348:	d898      	bhi.n	800527c <UART_SetConfig+0xb8>
 800534a:	f7fa fef9 	bl	8000140 <__gnu_thumb1_case_shi>
 800534e:	0009      	.short	0x0009
 8005350:	000fff6b 	.word	0x000fff6b
 8005354:	0024ff97 	.word	0x0024ff97
 8005358:	ff97ff97 	.word	0xff97ff97
 800535c:	0027ff97 	.word	0x0027ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 8005360:	f7ff fc58 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005364:	2800      	cmp	r0, #0
 8005366:	d100      	bne.n	800536a <UART_SetConfig+0x1a6>
 8005368:	e793      	b.n	8005292 <UART_SetConfig+0xce>
 800536a:	e00a      	b.n	8005382 <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800536c:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <UART_SetConfig+0x1f4>)
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	2310      	movs	r3, #16
 8005372:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005374:	4243      	negs	r3, r0
 8005376:	4158      	adcs	r0, r3
 8005378:	4b13      	ldr	r3, [pc, #76]	; (80053c8 <UART_SetConfig+0x204>)
 800537a:	4240      	negs	r0, r0
 800537c:	4018      	ands	r0, r3
 800537e:	4b13      	ldr	r3, [pc, #76]	; (80053cc <UART_SetConfig+0x208>)
 8005380:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005382:	6863      	ldr	r3, [r4, #4]
 8005384:	6861      	ldr	r1, [r4, #4]
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	1818      	adds	r0, r3, r0
 800538a:	f7fa fee3 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538e:	0002      	movs	r2, r0
 8005390:	4b11      	ldr	r3, [pc, #68]	; (80053d8 <UART_SetConfig+0x214>)
 8005392:	3a10      	subs	r2, #16
 8005394:	e7a3      	b.n	80052de <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 8005396:	f7ff f8a5 	bl	80044e4 <HAL_RCC_GetSysClockFreq>
        break;
 800539a:	e7e3      	b.n	8005364 <UART_SetConfig+0x1a0>
    switch (clocksource)
 800539c:	2080      	movs	r0, #128	; 0x80
 800539e:	0200      	lsls	r0, r0, #8
 80053a0:	e7ef      	b.n	8005382 <UART_SetConfig+0x1be>
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	efff69f3 	.word	0xefff69f3
 80053a8:	ffffcfff 	.word	0xffffcfff
 80053ac:	40004800 	.word	0x40004800
 80053b0:	fffff4ff 	.word	0xfffff4ff
 80053b4:	40013800 	.word	0x40013800
 80053b8:	40021000 	.word	0x40021000
 80053bc:	080066d7 	.word	0x080066d7
 80053c0:	40004400 	.word	0x40004400
 80053c4:	080066da 	.word	0x080066da
 80053c8:	00b71b00 	.word	0x00b71b00
 80053cc:	003d0900 	.word	0x003d0900
 80053d0:	fffffd00 	.word	0xfffffd00
 80053d4:	000ffcff 	.word	0x000ffcff
 80053d8:	0000ffef 	.word	0x0000ffef

080053dc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80053de:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053e0:	07da      	lsls	r2, r3, #31
 80053e2:	d506      	bpl.n	80053f2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053e4:	6801      	ldr	r1, [r0, #0]
 80053e6:	4c28      	ldr	r4, [pc, #160]	; (8005488 <UART_AdvFeatureConfig+0xac>)
 80053e8:	684a      	ldr	r2, [r1, #4]
 80053ea:	4022      	ands	r2, r4
 80053ec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80053ee:	4322      	orrs	r2, r4
 80053f0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053f2:	079a      	lsls	r2, r3, #30
 80053f4:	d506      	bpl.n	8005404 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053f6:	6801      	ldr	r1, [r0, #0]
 80053f8:	4c24      	ldr	r4, [pc, #144]	; (800548c <UART_AdvFeatureConfig+0xb0>)
 80053fa:	684a      	ldr	r2, [r1, #4]
 80053fc:	4022      	ands	r2, r4
 80053fe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005400:	4322      	orrs	r2, r4
 8005402:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005404:	075a      	lsls	r2, r3, #29
 8005406:	d506      	bpl.n	8005416 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005408:	6801      	ldr	r1, [r0, #0]
 800540a:	4c21      	ldr	r4, [pc, #132]	; (8005490 <UART_AdvFeatureConfig+0xb4>)
 800540c:	684a      	ldr	r2, [r1, #4]
 800540e:	4022      	ands	r2, r4
 8005410:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005412:	4322      	orrs	r2, r4
 8005414:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005416:	071a      	lsls	r2, r3, #28
 8005418:	d506      	bpl.n	8005428 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800541a:	6801      	ldr	r1, [r0, #0]
 800541c:	4c1d      	ldr	r4, [pc, #116]	; (8005494 <UART_AdvFeatureConfig+0xb8>)
 800541e:	684a      	ldr	r2, [r1, #4]
 8005420:	4022      	ands	r2, r4
 8005422:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005424:	4322      	orrs	r2, r4
 8005426:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005428:	06da      	lsls	r2, r3, #27
 800542a:	d506      	bpl.n	800543a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800542c:	6801      	ldr	r1, [r0, #0]
 800542e:	4c1a      	ldr	r4, [pc, #104]	; (8005498 <UART_AdvFeatureConfig+0xbc>)
 8005430:	688a      	ldr	r2, [r1, #8]
 8005432:	4022      	ands	r2, r4
 8005434:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005436:	4322      	orrs	r2, r4
 8005438:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800543a:	069a      	lsls	r2, r3, #26
 800543c:	d506      	bpl.n	800544c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800543e:	6801      	ldr	r1, [r0, #0]
 8005440:	4c16      	ldr	r4, [pc, #88]	; (800549c <UART_AdvFeatureConfig+0xc0>)
 8005442:	688a      	ldr	r2, [r1, #8]
 8005444:	4022      	ands	r2, r4
 8005446:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005448:	4322      	orrs	r2, r4
 800544a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800544c:	065a      	lsls	r2, r3, #25
 800544e:	d510      	bpl.n	8005472 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005450:	6801      	ldr	r1, [r0, #0]
 8005452:	4d13      	ldr	r5, [pc, #76]	; (80054a0 <UART_AdvFeatureConfig+0xc4>)
 8005454:	684a      	ldr	r2, [r1, #4]
 8005456:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005458:	402a      	ands	r2, r5
 800545a:	4322      	orrs	r2, r4
 800545c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800545e:	2280      	movs	r2, #128	; 0x80
 8005460:	0352      	lsls	r2, r2, #13
 8005462:	4294      	cmp	r4, r2
 8005464:	d105      	bne.n	8005472 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005466:	684a      	ldr	r2, [r1, #4]
 8005468:	4c0e      	ldr	r4, [pc, #56]	; (80054a4 <UART_AdvFeatureConfig+0xc8>)
 800546a:	4022      	ands	r2, r4
 800546c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800546e:	4322      	orrs	r2, r4
 8005470:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005472:	061b      	lsls	r3, r3, #24
 8005474:	d506      	bpl.n	8005484 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005476:	6802      	ldr	r2, [r0, #0]
 8005478:	490b      	ldr	r1, [pc, #44]	; (80054a8 <UART_AdvFeatureConfig+0xcc>)
 800547a:	6853      	ldr	r3, [r2, #4]
 800547c:	400b      	ands	r3, r1
 800547e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005480:	430b      	orrs	r3, r1
 8005482:	6053      	str	r3, [r2, #4]
}
 8005484:	bd30      	pop	{r4, r5, pc}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	fffdffff 	.word	0xfffdffff
 800548c:	fffeffff 	.word	0xfffeffff
 8005490:	fffbffff 	.word	0xfffbffff
 8005494:	ffff7fff 	.word	0xffff7fff
 8005498:	ffffefff 	.word	0xffffefff
 800549c:	ffffdfff 	.word	0xffffdfff
 80054a0:	ffefffff 	.word	0xffefffff
 80054a4:	ff9fffff 	.word	0xff9fffff
 80054a8:	fff7ffff 	.word	0xfff7ffff

080054ac <UART_WaitOnFlagUntilTimeout>:
{
 80054ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ae:	0004      	movs	r4, r0
 80054b0:	000d      	movs	r5, r1
 80054b2:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054b4:	2608      	movs	r6, #8
{
 80054b6:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b8:	6822      	ldr	r2, [r4, #0]
 80054ba:	69d3      	ldr	r3, [r2, #28]
 80054bc:	402b      	ands	r3, r5
 80054be:	1b5b      	subs	r3, r3, r5
 80054c0:	4259      	negs	r1, r3
 80054c2:	414b      	adcs	r3, r1
 80054c4:	42bb      	cmp	r3, r7
 80054c6:	d001      	beq.n	80054cc <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 80054c8:	2000      	movs	r0, #0
 80054ca:	e021      	b.n	8005510 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 80054cc:	9b08      	ldr	r3, [sp, #32]
 80054ce:	3301      	adds	r3, #1
 80054d0:	d0f3      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d2:	f7fe f9ab 	bl	800382c <HAL_GetTick>
 80054d6:	9b00      	ldr	r3, [sp, #0]
 80054d8:	1ac0      	subs	r0, r0, r3
 80054da:	9b08      	ldr	r3, [sp, #32]
 80054dc:	4298      	cmp	r0, r3
 80054de:	d828      	bhi.n	8005532 <UART_WaitOnFlagUntilTimeout+0x86>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d026      	beq.n	8005532 <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054e4:	2104      	movs	r1, #4
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	420a      	tst	r2, r1
 80054ec:	d0e4      	beq.n	80054b8 <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ee:	69da      	ldr	r2, [r3, #28]
 80054f0:	0011      	movs	r1, r2
 80054f2:	4031      	ands	r1, r6
 80054f4:	9101      	str	r1, [sp, #4]
 80054f6:	4232      	tst	r2, r6
 80054f8:	d00b      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 80054fa:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054fc:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 80054fe:	f7ff fe33 	bl	8005168 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005502:	0023      	movs	r3, r4
 8005504:	3308      	adds	r3, #8
 8005506:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8005508:	2300      	movs	r3, #0
           return HAL_ERROR;
 800550a:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 800550c:	3478      	adds	r4, #120	; 0x78
 800550e:	7023      	strb	r3, [r4, #0]
}
 8005510:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005512:	2280      	movs	r2, #128	; 0x80
 8005514:	69d9      	ldr	r1, [r3, #28]
 8005516:	0112      	lsls	r2, r2, #4
 8005518:	4211      	tst	r1, r2
 800551a:	d0cd      	beq.n	80054b8 <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800551c:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800551e:	0020      	movs	r0, r4
 8005520:	f7ff fe22 	bl	8005168 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005524:	0023      	movs	r3, r4
 8005526:	2220      	movs	r2, #32
 8005528:	3308      	adds	r3, #8
 800552a:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 800552c:	9b01      	ldr	r3, [sp, #4]
 800552e:	3478      	adds	r4, #120	; 0x78
 8005530:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8005532:	2003      	movs	r0, #3
 8005534:	e7ec      	b.n	8005510 <UART_WaitOnFlagUntilTimeout+0x64>

08005536 <HAL_UART_Transmit>:
{
 8005536:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005538:	b085      	sub	sp, #20
 800553a:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 800553c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 800553e:	0004      	movs	r4, r0
 8005540:	000d      	movs	r5, r1
 8005542:	0016      	movs	r6, r2
    return HAL_BUSY;
 8005544:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8005546:	2b20      	cmp	r3, #32
 8005548:	d139      	bne.n	80055be <HAL_UART_Transmit+0x88>
      return  HAL_ERROR;
 800554a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800554c:	2900      	cmp	r1, #0
 800554e:	d036      	beq.n	80055be <HAL_UART_Transmit+0x88>
 8005550:	2a00      	cmp	r2, #0
 8005552:	d034      	beq.n	80055be <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005554:	2380      	movs	r3, #128	; 0x80
 8005556:	68a2      	ldr	r2, [r4, #8]
 8005558:	015b      	lsls	r3, r3, #5
 800555a:	429a      	cmp	r2, r3
 800555c:	d104      	bne.n	8005568 <HAL_UART_Transmit+0x32>
 800555e:	6923      	ldr	r3, [r4, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005564:	4201      	tst	r1, r0
 8005566:	d12a      	bne.n	80055be <HAL_UART_Transmit+0x88>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005568:	0023      	movs	r3, r4
 800556a:	2200      	movs	r2, #0
 800556c:	3308      	adds	r3, #8
 800556e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005570:	2321      	movs	r3, #33	; 0x21
 8005572:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8005574:	f7fe f95a 	bl	800382c <HAL_GetTick>
    huart->TxXferSize  = Size;
 8005578:	0023      	movs	r3, r4
 800557a:	3350      	adds	r3, #80	; 0x50
 800557c:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 800557e:	3302      	adds	r3, #2
 8005580:	801e      	strh	r6, [r3, #0]
 8005582:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005584:	2380      	movs	r3, #128	; 0x80
 8005586:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8005588:	0007      	movs	r7, r0
      pdata16bits = NULL;
 800558a:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800558c:	015b      	lsls	r3, r3, #5
 800558e:	429a      	cmp	r2, r3
 8005590:	d104      	bne.n	800559c <HAL_UART_Transmit+0x66>
 8005592:	6923      	ldr	r3, [r4, #16]
 8005594:	42b3      	cmp	r3, r6
 8005596:	d101      	bne.n	800559c <HAL_UART_Transmit+0x66>
 8005598:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800559a:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800559c:	0023      	movs	r3, r4
 800559e:	3352      	adds	r3, #82	; 0x52
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10c      	bne.n	80055c2 <HAL_UART_Transmit+0x8c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055a8:	9b03      	ldr	r3, [sp, #12]
 80055aa:	2140      	movs	r1, #64	; 0x40
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	0020      	movs	r0, r4
 80055b0:	003b      	movs	r3, r7
 80055b2:	f7ff ff7b 	bl	80054ac <UART_WaitOnFlagUntilTimeout>
 80055b6:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 80055b8:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d10d      	bne.n	80055da <HAL_UART_Transmit+0xa4>
}
 80055be:	b005      	add	sp, #20
 80055c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055c2:	9b03      	ldr	r3, [sp, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	2180      	movs	r1, #128	; 0x80
 80055ca:	003b      	movs	r3, r7
 80055cc:	0020      	movs	r0, r4
 80055ce:	f7ff ff6d 	bl	80054ac <UART_WaitOnFlagUntilTimeout>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d003      	beq.n	80055de <HAL_UART_Transmit+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 80055d6:	2320      	movs	r3, #32
 80055d8:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80055da:	2003      	movs	r0, #3
 80055dc:	e7ef      	b.n	80055be <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055de:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80055e0:	2d00      	cmp	r5, #0
 80055e2:	d10b      	bne.n	80055fc <HAL_UART_Transmit+0xc6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055e4:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80055e6:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055e8:	05db      	lsls	r3, r3, #23
 80055ea:	0ddb      	lsrs	r3, r3, #23
 80055ec:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80055ee:	9b02      	ldr	r3, [sp, #8]
 80055f0:	9a02      	ldr	r2, [sp, #8]
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	8013      	strh	r3, [r2, #0]
 80055fa:	e7cf      	b.n	800559c <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055fc:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80055fe:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005600:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8005602:	e7f4      	b.n	80055ee <HAL_UART_Transmit+0xb8>

08005604 <HAL_UART_Receive>:
{
 8005604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005606:	0016      	movs	r6, r2
 8005608:	b087      	sub	sp, #28
  if (huart->RxState == HAL_UART_STATE_READY)
 800560a:	1d02      	adds	r2, r0, #4
{
 800560c:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 800560e:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
{
 8005610:	0004      	movs	r4, r0
 8005612:	000d      	movs	r5, r1
    return HAL_BUSY;
 8005614:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8005616:	2b20      	cmp	r3, #32
 8005618:	d160      	bne.n	80056dc <HAL_UART_Receive+0xd8>
      return  HAL_ERROR;
 800561a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800561c:	2900      	cmp	r1, #0
 800561e:	d05d      	beq.n	80056dc <HAL_UART_Receive+0xd8>
 8005620:	2e00      	cmp	r6, #0
 8005622:	d05b      	beq.n	80056dc <HAL_UART_Receive+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	68a1      	ldr	r1, [r4, #8]
 8005628:	015b      	lsls	r3, r3, #5
 800562a:	4299      	cmp	r1, r3
 800562c:	d104      	bne.n	8005638 <HAL_UART_Receive+0x34>
 800562e:	6923      	ldr	r3, [r4, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_UART_Receive+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005634:	4205      	tst	r5, r0
 8005636:	d151      	bne.n	80056dc <HAL_UART_Receive+0xd8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005638:	0023      	movs	r3, r4
 800563a:	2700      	movs	r7, #0
 800563c:	3308      	adds	r3, #8
 800563e:	67df      	str	r7, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005640:	2322      	movs	r3, #34	; 0x22
 8005642:	67d3      	str	r3, [r2, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005644:	6627      	str	r7, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 8005646:	f7fe f8f1 	bl	800382c <HAL_GetTick>
    huart->RxXferSize  = Size;
 800564a:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 800564c:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 800564e:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 8005650:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 8005652:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 8005654:	3302      	adds	r3, #2
 8005656:	9303      	str	r3, [sp, #12]
 8005658:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800565a:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 800565c:	0149      	lsls	r1, r1, #5
 800565e:	3302      	adds	r3, #2
 8005660:	428a      	cmp	r2, r1
 8005662:	d11b      	bne.n	800569c <HAL_UART_Receive+0x98>
 8005664:	6921      	ldr	r1, [r4, #16]
 8005666:	42b9      	cmp	r1, r7
 8005668:	d116      	bne.n	8005698 <HAL_UART_Receive+0x94>
 800566a:	4926      	ldr	r1, [pc, #152]	; (8005704 <HAL_UART_Receive+0x100>)
 800566c:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 800566e:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005670:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 8005672:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005674:	015b      	lsls	r3, r3, #5
 8005676:	429a      	cmp	r2, r3
 8005678:	d104      	bne.n	8005684 <HAL_UART_Receive+0x80>
 800567a:	6923      	ldr	r3, [r4, #16]
 800567c:	42b3      	cmp	r3, r6
 800567e:	d101      	bne.n	8005684 <HAL_UART_Receive+0x80>
 8005680:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8005682:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 8005684:	0023      	movs	r3, r4
 8005686:	335a      	adds	r3, #90	; 0x5a
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b298      	uxth	r0, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d117      	bne.n	80056c0 <HAL_UART_Receive+0xbc>
    huart->RxState = HAL_UART_STATE_READY;
 8005690:	3404      	adds	r4, #4
 8005692:	3320      	adds	r3, #32
 8005694:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8005696:	e021      	b.n	80056dc <HAL_UART_Receive+0xd8>
    UART_MASK_COMPUTATION(huart);
 8005698:	21ff      	movs	r1, #255	; 0xff
 800569a:	e7e7      	b.n	800566c <HAL_UART_Receive+0x68>
 800569c:	2a00      	cmp	r2, #0
 800569e:	d104      	bne.n	80056aa <HAL_UART_Receive+0xa6>
 80056a0:	6921      	ldr	r1, [r4, #16]
 80056a2:	2900      	cmp	r1, #0
 80056a4:	d0f8      	beq.n	8005698 <HAL_UART_Receive+0x94>
 80056a6:	217f      	movs	r1, #127	; 0x7f
 80056a8:	e7e0      	b.n	800566c <HAL_UART_Receive+0x68>
 80056aa:	2180      	movs	r1, #128	; 0x80
 80056ac:	0549      	lsls	r1, r1, #21
 80056ae:	428a      	cmp	r2, r1
 80056b0:	d104      	bne.n	80056bc <HAL_UART_Receive+0xb8>
 80056b2:	6921      	ldr	r1, [r4, #16]
 80056b4:	2900      	cmp	r1, #0
 80056b6:	d0f6      	beq.n	80056a6 <HAL_UART_Receive+0xa2>
 80056b8:	213f      	movs	r1, #63	; 0x3f
 80056ba:	e7d7      	b.n	800566c <HAL_UART_Receive+0x68>
 80056bc:	801f      	strh	r7, [r3, #0]
 80056be:	e7d6      	b.n	800566e <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056c0:	9b05      	ldr	r3, [sp, #20]
 80056c2:	2200      	movs	r2, #0
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	2120      	movs	r1, #32
 80056c8:	0020      	movs	r0, r4
 80056ca:	9b04      	ldr	r3, [sp, #16]
 80056cc:	f7ff feee 	bl	80054ac <UART_WaitOnFlagUntilTimeout>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_UART_Receive+0xdc>
        huart->RxState = HAL_UART_STATE_READY;
 80056d4:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80056d6:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80056d8:	3404      	adds	r4, #4
 80056da:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 80056dc:	b007      	add	sp, #28
 80056de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 80056e6:	2d00      	cmp	r5, #0
 80056e8:	d108      	bne.n	80056fc <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80056ea:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 80056ec:	3602      	adds	r6, #2
      huart->RxXferCount--;
 80056ee:	9b03      	ldr	r3, [sp, #12]
 80056f0:	9a03      	ldr	r2, [sp, #12]
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	8013      	strh	r3, [r2, #0]
 80056fa:	e7c3      	b.n	8005684 <HAL_UART_Receive+0x80>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80056fc:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 80056fe:	3501      	adds	r5, #1
 8005700:	e7f5      	b.n	80056ee <HAL_UART_Receive+0xea>
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	000001ff 	.word	0x000001ff

08005708 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005708:	0003      	movs	r3, r0
{
 800570a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570c:	2500      	movs	r5, #0
{
 800570e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005710:	3308      	adds	r3, #8
 8005712:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005714:	f7fe f88a 	bl	800382c <HAL_GetTick>
 8005718:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800571a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800571c:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3678      	adds	r6, #120	; 0x78
 8005722:	071b      	lsls	r3, r3, #28
 8005724:	d51b      	bpl.n	800575e <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005726:	2180      	movs	r1, #128	; 0x80
 8005728:	4b26      	ldr	r3, [pc, #152]	; (80057c4 <UART_CheckIdleState+0xbc>)
 800572a:	002a      	movs	r2, r5
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	0389      	lsls	r1, r1, #14
 8005730:	0003      	movs	r3, r0
 8005732:	0020      	movs	r0, r4
 8005734:	f7ff feba 	bl	80054ac <UART_WaitOnFlagUntilTimeout>
 8005738:	42a8      	cmp	r0, r5
 800573a:	d010      	beq.n	800575e <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800573c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005740:	2301      	movs	r3, #1
 8005742:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005746:	2080      	movs	r0, #128	; 0x80
 8005748:	6822      	ldr	r2, [r4, #0]
 800574a:	6813      	ldr	r3, [r2, #0]
 800574c:	4383      	bics	r3, r0
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8005754:	2320      	movs	r3, #32
 8005756:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8005758:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 800575a:	2003      	movs	r0, #3
}
 800575c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800575e:	0025      	movs	r5, r4
 8005760:	cd08      	ldmia	r5!, {r3}
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	075b      	lsls	r3, r3, #29
 8005766:	d525      	bpl.n	80057b4 <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005768:	2180      	movs	r1, #128	; 0x80
 800576a:	4b16      	ldr	r3, [pc, #88]	; (80057c4 <UART_CheckIdleState+0xbc>)
 800576c:	2200      	movs	r2, #0
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	0020      	movs	r0, r4
 8005772:	003b      	movs	r3, r7
 8005774:	03c9      	lsls	r1, r1, #15
 8005776:	f7ff fe99 	bl	80054ac <UART_WaitOnFlagUntilTimeout>
 800577a:	2800      	cmp	r0, #0
 800577c:	d01a      	beq.n	80057b4 <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800577e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005782:	2201      	movs	r2, #1
 8005784:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005788:	6821      	ldr	r1, [r4, #0]
 800578a:	4f0f      	ldr	r7, [pc, #60]	; (80057c8 <UART_CheckIdleState+0xc0>)
 800578c:	680b      	ldr	r3, [r1, #0]
 800578e:	403b      	ands	r3, r7
 8005790:	600b      	str	r3, [r1, #0]
 8005792:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005796:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579e:	6821      	ldr	r1, [r4, #0]
 80057a0:	688b      	ldr	r3, [r1, #8]
 80057a2:	4393      	bics	r3, r2
 80057a4:	608b      	str	r3, [r1, #8]
 80057a6:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80057aa:	2320      	movs	r3, #32
 80057ac:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 80057ae:	2300      	movs	r3, #0
 80057b0:	7033      	strb	r3, [r6, #0]
 80057b2:	e7d2      	b.n	800575a <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80057b6:	2320      	movs	r3, #32
 80057b8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057ba:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057bc:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057be:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80057c0:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 80057c2:	e7cb      	b.n	800575c <UART_CheckIdleState+0x54>
 80057c4:	01ffffff 	.word	0x01ffffff
 80057c8:	fffffedf 	.word	0xfffffedf

080057cc <HAL_UART_Init>:
{
 80057cc:	b510      	push	{r4, lr}
 80057ce:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80057d2:	2001      	movs	r0, #1
}
 80057d4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80057d6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80057dc:	0002      	movs	r2, r0
 80057de:	3278      	adds	r2, #120	; 0x78
 80057e0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80057e2:	f7fd ff41 	bl	8003668 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80057e6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80057e8:	2101      	movs	r1, #1
 80057ea:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80057ec:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80057ee:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057f0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80057f2:	438b      	bics	r3, r1
 80057f4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057f6:	f7ff fce5 	bl	80051c4 <UART_SetConfig>
 80057fa:	2801      	cmp	r0, #1
 80057fc:	d0e9      	beq.n	80057d2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8005804:	0020      	movs	r0, r4
 8005806:	f7ff fde9 	bl	80053dc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	4907      	ldr	r1, [pc, #28]	; (800582c <HAL_UART_Init+0x60>)
 800580e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005810:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005812:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005814:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005816:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	438a      	bics	r2, r1
 800581c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800581e:	2201      	movs	r2, #1
 8005820:	6819      	ldr	r1, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005826:	f7ff ff6f 	bl	8005708 <UART_CheckIdleState>
 800582a:	e7d3      	b.n	80057d4 <HAL_UART_Init+0x8>
 800582c:	ffffb7ff 	.word	0xffffb7ff

08005830 <__errno>:
 8005830:	4b01      	ldr	r3, [pc, #4]	; (8005838 <__errno+0x8>)
 8005832:	6818      	ldr	r0, [r3, #0]
 8005834:	4770      	bx	lr
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	20000028 	.word	0x20000028

0800583c <__libc_init_array>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	2600      	movs	r6, #0
 8005840:	4d0c      	ldr	r5, [pc, #48]	; (8005874 <__libc_init_array+0x38>)
 8005842:	4c0d      	ldr	r4, [pc, #52]	; (8005878 <__libc_init_array+0x3c>)
 8005844:	1b64      	subs	r4, r4, r5
 8005846:	10a4      	asrs	r4, r4, #2
 8005848:	42a6      	cmp	r6, r4
 800584a:	d109      	bne.n	8005860 <__libc_init_array+0x24>
 800584c:	2600      	movs	r6, #0
 800584e:	f000 fc93 	bl	8006178 <_init>
 8005852:	4d0a      	ldr	r5, [pc, #40]	; (800587c <__libc_init_array+0x40>)
 8005854:	4c0a      	ldr	r4, [pc, #40]	; (8005880 <__libc_init_array+0x44>)
 8005856:	1b64      	subs	r4, r4, r5
 8005858:	10a4      	asrs	r4, r4, #2
 800585a:	42a6      	cmp	r6, r4
 800585c:	d105      	bne.n	800586a <__libc_init_array+0x2e>
 800585e:	bd70      	pop	{r4, r5, r6, pc}
 8005860:	00b3      	lsls	r3, r6, #2
 8005862:	58eb      	ldr	r3, [r5, r3]
 8005864:	4798      	blx	r3
 8005866:	3601      	adds	r6, #1
 8005868:	e7ee      	b.n	8005848 <__libc_init_array+0xc>
 800586a:	00b3      	lsls	r3, r6, #2
 800586c:	58eb      	ldr	r3, [r5, r3]
 800586e:	4798      	blx	r3
 8005870:	3601      	adds	r6, #1
 8005872:	e7f2      	b.n	800585a <__libc_init_array+0x1e>
 8005874:	08006724 	.word	0x08006724
 8005878:	08006724 	.word	0x08006724
 800587c:	08006724 	.word	0x08006724
 8005880:	08006728 	.word	0x08006728

08005884 <memset>:
 8005884:	0003      	movs	r3, r0
 8005886:	1882      	adds	r2, r0, r2
 8005888:	4293      	cmp	r3, r2
 800588a:	d100      	bne.n	800588e <memset+0xa>
 800588c:	4770      	bx	lr
 800588e:	7019      	strb	r1, [r3, #0]
 8005890:	3301      	adds	r3, #1
 8005892:	e7f9      	b.n	8005888 <memset+0x4>

08005894 <siprintf>:
 8005894:	b40e      	push	{r1, r2, r3}
 8005896:	b500      	push	{lr}
 8005898:	490b      	ldr	r1, [pc, #44]	; (80058c8 <siprintf+0x34>)
 800589a:	b09c      	sub	sp, #112	; 0x70
 800589c:	ab1d      	add	r3, sp, #116	; 0x74
 800589e:	9002      	str	r0, [sp, #8]
 80058a0:	9006      	str	r0, [sp, #24]
 80058a2:	9107      	str	r1, [sp, #28]
 80058a4:	9104      	str	r1, [sp, #16]
 80058a6:	4809      	ldr	r0, [pc, #36]	; (80058cc <siprintf+0x38>)
 80058a8:	4909      	ldr	r1, [pc, #36]	; (80058d0 <siprintf+0x3c>)
 80058aa:	cb04      	ldmia	r3!, {r2}
 80058ac:	9105      	str	r1, [sp, #20]
 80058ae:	6800      	ldr	r0, [r0, #0]
 80058b0:	a902      	add	r1, sp, #8
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	f000 f878 	bl	80059a8 <_svfiprintf_r>
 80058b8:	2300      	movs	r3, #0
 80058ba:	9a02      	ldr	r2, [sp, #8]
 80058bc:	7013      	strb	r3, [r2, #0]
 80058be:	b01c      	add	sp, #112	; 0x70
 80058c0:	bc08      	pop	{r3}
 80058c2:	b003      	add	sp, #12
 80058c4:	4718      	bx	r3
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	7fffffff 	.word	0x7fffffff
 80058cc:	20000028 	.word	0x20000028
 80058d0:	ffff0208 	.word	0xffff0208

080058d4 <strcpy>:
 80058d4:	0003      	movs	r3, r0
 80058d6:	780a      	ldrb	r2, [r1, #0]
 80058d8:	3101      	adds	r1, #1
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	3301      	adds	r3, #1
 80058de:	2a00      	cmp	r2, #0
 80058e0:	d1f9      	bne.n	80058d6 <strcpy+0x2>
 80058e2:	4770      	bx	lr

080058e4 <__ssputs_r>:
 80058e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058e6:	688e      	ldr	r6, [r1, #8]
 80058e8:	b085      	sub	sp, #20
 80058ea:	0007      	movs	r7, r0
 80058ec:	000c      	movs	r4, r1
 80058ee:	9203      	str	r2, [sp, #12]
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	429e      	cmp	r6, r3
 80058f4:	d83c      	bhi.n	8005970 <__ssputs_r+0x8c>
 80058f6:	2390      	movs	r3, #144	; 0x90
 80058f8:	898a      	ldrh	r2, [r1, #12]
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	421a      	tst	r2, r3
 80058fe:	d034      	beq.n	800596a <__ssputs_r+0x86>
 8005900:	6909      	ldr	r1, [r1, #16]
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	6960      	ldr	r0, [r4, #20]
 8005906:	1a5b      	subs	r3, r3, r1
 8005908:	9302      	str	r3, [sp, #8]
 800590a:	2303      	movs	r3, #3
 800590c:	4343      	muls	r3, r0
 800590e:	0fdd      	lsrs	r5, r3, #31
 8005910:	18ed      	adds	r5, r5, r3
 8005912:	9b01      	ldr	r3, [sp, #4]
 8005914:	9802      	ldr	r0, [sp, #8]
 8005916:	3301      	adds	r3, #1
 8005918:	181b      	adds	r3, r3, r0
 800591a:	106d      	asrs	r5, r5, #1
 800591c:	42ab      	cmp	r3, r5
 800591e:	d900      	bls.n	8005922 <__ssputs_r+0x3e>
 8005920:	001d      	movs	r5, r3
 8005922:	0553      	lsls	r3, r2, #21
 8005924:	d532      	bpl.n	800598c <__ssputs_r+0xa8>
 8005926:	0029      	movs	r1, r5
 8005928:	0038      	movs	r0, r7
 800592a:	f000 fb53 	bl	8005fd4 <_malloc_r>
 800592e:	1e06      	subs	r6, r0, #0
 8005930:	d109      	bne.n	8005946 <__ssputs_r+0x62>
 8005932:	230c      	movs	r3, #12
 8005934:	603b      	str	r3, [r7, #0]
 8005936:	2340      	movs	r3, #64	; 0x40
 8005938:	2001      	movs	r0, #1
 800593a:	89a2      	ldrh	r2, [r4, #12]
 800593c:	4240      	negs	r0, r0
 800593e:	4313      	orrs	r3, r2
 8005940:	81a3      	strh	r3, [r4, #12]
 8005942:	b005      	add	sp, #20
 8005944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005946:	9a02      	ldr	r2, [sp, #8]
 8005948:	6921      	ldr	r1, [r4, #16]
 800594a:	f000 faba 	bl	8005ec2 <memcpy>
 800594e:	89a3      	ldrh	r3, [r4, #12]
 8005950:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <__ssputs_r+0xc0>)
 8005952:	401a      	ands	r2, r3
 8005954:	2380      	movs	r3, #128	; 0x80
 8005956:	4313      	orrs	r3, r2
 8005958:	81a3      	strh	r3, [r4, #12]
 800595a:	9b02      	ldr	r3, [sp, #8]
 800595c:	6126      	str	r6, [r4, #16]
 800595e:	18f6      	adds	r6, r6, r3
 8005960:	6026      	str	r6, [r4, #0]
 8005962:	6165      	str	r5, [r4, #20]
 8005964:	9e01      	ldr	r6, [sp, #4]
 8005966:	1aed      	subs	r5, r5, r3
 8005968:	60a5      	str	r5, [r4, #8]
 800596a:	9b01      	ldr	r3, [sp, #4]
 800596c:	429e      	cmp	r6, r3
 800596e:	d900      	bls.n	8005972 <__ssputs_r+0x8e>
 8005970:	9e01      	ldr	r6, [sp, #4]
 8005972:	0032      	movs	r2, r6
 8005974:	9903      	ldr	r1, [sp, #12]
 8005976:	6820      	ldr	r0, [r4, #0]
 8005978:	f000 faac 	bl	8005ed4 <memmove>
 800597c:	68a3      	ldr	r3, [r4, #8]
 800597e:	2000      	movs	r0, #0
 8005980:	1b9b      	subs	r3, r3, r6
 8005982:	60a3      	str	r3, [r4, #8]
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	199e      	adds	r6, r3, r6
 8005988:	6026      	str	r6, [r4, #0]
 800598a:	e7da      	b.n	8005942 <__ssputs_r+0x5e>
 800598c:	002a      	movs	r2, r5
 800598e:	0038      	movs	r0, r7
 8005990:	f000 fb96 	bl	80060c0 <_realloc_r>
 8005994:	1e06      	subs	r6, r0, #0
 8005996:	d1e0      	bne.n	800595a <__ssputs_r+0x76>
 8005998:	0038      	movs	r0, r7
 800599a:	6921      	ldr	r1, [r4, #16]
 800599c:	f000 faae 	bl	8005efc <_free_r>
 80059a0:	e7c7      	b.n	8005932 <__ssputs_r+0x4e>
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	fffffb7f 	.word	0xfffffb7f

080059a8 <_svfiprintf_r>:
 80059a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059aa:	b0a1      	sub	sp, #132	; 0x84
 80059ac:	9003      	str	r0, [sp, #12]
 80059ae:	001d      	movs	r5, r3
 80059b0:	898b      	ldrh	r3, [r1, #12]
 80059b2:	000f      	movs	r7, r1
 80059b4:	0016      	movs	r6, r2
 80059b6:	061b      	lsls	r3, r3, #24
 80059b8:	d511      	bpl.n	80059de <_svfiprintf_r+0x36>
 80059ba:	690b      	ldr	r3, [r1, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10e      	bne.n	80059de <_svfiprintf_r+0x36>
 80059c0:	2140      	movs	r1, #64	; 0x40
 80059c2:	f000 fb07 	bl	8005fd4 <_malloc_r>
 80059c6:	6038      	str	r0, [r7, #0]
 80059c8:	6138      	str	r0, [r7, #16]
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d105      	bne.n	80059da <_svfiprintf_r+0x32>
 80059ce:	230c      	movs	r3, #12
 80059d0:	9a03      	ldr	r2, [sp, #12]
 80059d2:	3801      	subs	r0, #1
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	b021      	add	sp, #132	; 0x84
 80059d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059da:	2340      	movs	r3, #64	; 0x40
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	2300      	movs	r3, #0
 80059e0:	ac08      	add	r4, sp, #32
 80059e2:	6163      	str	r3, [r4, #20]
 80059e4:	3320      	adds	r3, #32
 80059e6:	7663      	strb	r3, [r4, #25]
 80059e8:	3310      	adds	r3, #16
 80059ea:	76a3      	strb	r3, [r4, #26]
 80059ec:	9507      	str	r5, [sp, #28]
 80059ee:	0035      	movs	r5, r6
 80059f0:	782b      	ldrb	r3, [r5, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <_svfiprintf_r+0x52>
 80059f6:	2b25      	cmp	r3, #37	; 0x25
 80059f8:	d147      	bne.n	8005a8a <_svfiprintf_r+0xe2>
 80059fa:	1bab      	subs	r3, r5, r6
 80059fc:	9305      	str	r3, [sp, #20]
 80059fe:	42b5      	cmp	r5, r6
 8005a00:	d00c      	beq.n	8005a1c <_svfiprintf_r+0x74>
 8005a02:	0032      	movs	r2, r6
 8005a04:	0039      	movs	r1, r7
 8005a06:	9803      	ldr	r0, [sp, #12]
 8005a08:	f7ff ff6c 	bl	80058e4 <__ssputs_r>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d100      	bne.n	8005a12 <_svfiprintf_r+0x6a>
 8005a10:	e0ae      	b.n	8005b70 <_svfiprintf_r+0x1c8>
 8005a12:	6962      	ldr	r2, [r4, #20]
 8005a14:	9b05      	ldr	r3, [sp, #20]
 8005a16:	4694      	mov	ip, r2
 8005a18:	4463      	add	r3, ip
 8005a1a:	6163      	str	r3, [r4, #20]
 8005a1c:	782b      	ldrb	r3, [r5, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d100      	bne.n	8005a24 <_svfiprintf_r+0x7c>
 8005a22:	e0a5      	b.n	8005b70 <_svfiprintf_r+0x1c8>
 8005a24:	2201      	movs	r2, #1
 8005a26:	2300      	movs	r3, #0
 8005a28:	4252      	negs	r2, r2
 8005a2a:	6062      	str	r2, [r4, #4]
 8005a2c:	a904      	add	r1, sp, #16
 8005a2e:	3254      	adds	r2, #84	; 0x54
 8005a30:	1852      	adds	r2, r2, r1
 8005a32:	1c6e      	adds	r6, r5, #1
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	60e3      	str	r3, [r4, #12]
 8005a38:	60a3      	str	r3, [r4, #8]
 8005a3a:	7013      	strb	r3, [r2, #0]
 8005a3c:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a3e:	2205      	movs	r2, #5
 8005a40:	7831      	ldrb	r1, [r6, #0]
 8005a42:	4854      	ldr	r0, [pc, #336]	; (8005b94 <_svfiprintf_r+0x1ec>)
 8005a44:	f000 fa32 	bl	8005eac <memchr>
 8005a48:	1c75      	adds	r5, r6, #1
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d11f      	bne.n	8005a8e <_svfiprintf_r+0xe6>
 8005a4e:	6822      	ldr	r2, [r4, #0]
 8005a50:	06d3      	lsls	r3, r2, #27
 8005a52:	d504      	bpl.n	8005a5e <_svfiprintf_r+0xb6>
 8005a54:	2353      	movs	r3, #83	; 0x53
 8005a56:	a904      	add	r1, sp, #16
 8005a58:	185b      	adds	r3, r3, r1
 8005a5a:	2120      	movs	r1, #32
 8005a5c:	7019      	strb	r1, [r3, #0]
 8005a5e:	0713      	lsls	r3, r2, #28
 8005a60:	d504      	bpl.n	8005a6c <_svfiprintf_r+0xc4>
 8005a62:	2353      	movs	r3, #83	; 0x53
 8005a64:	a904      	add	r1, sp, #16
 8005a66:	185b      	adds	r3, r3, r1
 8005a68:	212b      	movs	r1, #43	; 0x2b
 8005a6a:	7019      	strb	r1, [r3, #0]
 8005a6c:	7833      	ldrb	r3, [r6, #0]
 8005a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a70:	d016      	beq.n	8005aa0 <_svfiprintf_r+0xf8>
 8005a72:	0035      	movs	r5, r6
 8005a74:	2100      	movs	r1, #0
 8005a76:	200a      	movs	r0, #10
 8005a78:	68e3      	ldr	r3, [r4, #12]
 8005a7a:	782a      	ldrb	r2, [r5, #0]
 8005a7c:	1c6e      	adds	r6, r5, #1
 8005a7e:	3a30      	subs	r2, #48	; 0x30
 8005a80:	2a09      	cmp	r2, #9
 8005a82:	d94e      	bls.n	8005b22 <_svfiprintf_r+0x17a>
 8005a84:	2900      	cmp	r1, #0
 8005a86:	d111      	bne.n	8005aac <_svfiprintf_r+0x104>
 8005a88:	e017      	b.n	8005aba <_svfiprintf_r+0x112>
 8005a8a:	3501      	adds	r5, #1
 8005a8c:	e7b0      	b.n	80059f0 <_svfiprintf_r+0x48>
 8005a8e:	4b41      	ldr	r3, [pc, #260]	; (8005b94 <_svfiprintf_r+0x1ec>)
 8005a90:	6822      	ldr	r2, [r4, #0]
 8005a92:	1ac0      	subs	r0, r0, r3
 8005a94:	2301      	movs	r3, #1
 8005a96:	4083      	lsls	r3, r0
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	002e      	movs	r6, r5
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	e7ce      	b.n	8005a3e <_svfiprintf_r+0x96>
 8005aa0:	9b07      	ldr	r3, [sp, #28]
 8005aa2:	1d19      	adds	r1, r3, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	9107      	str	r1, [sp, #28]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	db01      	blt.n	8005ab0 <_svfiprintf_r+0x108>
 8005aac:	930b      	str	r3, [sp, #44]	; 0x2c
 8005aae:	e004      	b.n	8005aba <_svfiprintf_r+0x112>
 8005ab0:	425b      	negs	r3, r3
 8005ab2:	60e3      	str	r3, [r4, #12]
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	782b      	ldrb	r3, [r5, #0]
 8005abc:	2b2e      	cmp	r3, #46	; 0x2e
 8005abe:	d10a      	bne.n	8005ad6 <_svfiprintf_r+0x12e>
 8005ac0:	786b      	ldrb	r3, [r5, #1]
 8005ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ac4:	d135      	bne.n	8005b32 <_svfiprintf_r+0x18a>
 8005ac6:	9b07      	ldr	r3, [sp, #28]
 8005ac8:	3502      	adds	r5, #2
 8005aca:	1d1a      	adds	r2, r3, #4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	9207      	str	r2, [sp, #28]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	db2b      	blt.n	8005b2c <_svfiprintf_r+0x184>
 8005ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad6:	4e30      	ldr	r6, [pc, #192]	; (8005b98 <_svfiprintf_r+0x1f0>)
 8005ad8:	2203      	movs	r2, #3
 8005ada:	0030      	movs	r0, r6
 8005adc:	7829      	ldrb	r1, [r5, #0]
 8005ade:	f000 f9e5 	bl	8005eac <memchr>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d006      	beq.n	8005af4 <_svfiprintf_r+0x14c>
 8005ae6:	2340      	movs	r3, #64	; 0x40
 8005ae8:	1b80      	subs	r0, r0, r6
 8005aea:	4083      	lsls	r3, r0
 8005aec:	6822      	ldr	r2, [r4, #0]
 8005aee:	3501      	adds	r5, #1
 8005af0:	4313      	orrs	r3, r2
 8005af2:	6023      	str	r3, [r4, #0]
 8005af4:	7829      	ldrb	r1, [r5, #0]
 8005af6:	2206      	movs	r2, #6
 8005af8:	4828      	ldr	r0, [pc, #160]	; (8005b9c <_svfiprintf_r+0x1f4>)
 8005afa:	1c6e      	adds	r6, r5, #1
 8005afc:	7621      	strb	r1, [r4, #24]
 8005afe:	f000 f9d5 	bl	8005eac <memchr>
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d03c      	beq.n	8005b80 <_svfiprintf_r+0x1d8>
 8005b06:	4b26      	ldr	r3, [pc, #152]	; (8005ba0 <_svfiprintf_r+0x1f8>)
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d125      	bne.n	8005b58 <_svfiprintf_r+0x1b0>
 8005b0c:	2207      	movs	r2, #7
 8005b0e:	9b07      	ldr	r3, [sp, #28]
 8005b10:	3307      	adds	r3, #7
 8005b12:	4393      	bics	r3, r2
 8005b14:	3308      	adds	r3, #8
 8005b16:	9307      	str	r3, [sp, #28]
 8005b18:	6963      	ldr	r3, [r4, #20]
 8005b1a:	9a04      	ldr	r2, [sp, #16]
 8005b1c:	189b      	adds	r3, r3, r2
 8005b1e:	6163      	str	r3, [r4, #20]
 8005b20:	e765      	b.n	80059ee <_svfiprintf_r+0x46>
 8005b22:	4343      	muls	r3, r0
 8005b24:	0035      	movs	r5, r6
 8005b26:	2101      	movs	r1, #1
 8005b28:	189b      	adds	r3, r3, r2
 8005b2a:	e7a6      	b.n	8005a7a <_svfiprintf_r+0xd2>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	425b      	negs	r3, r3
 8005b30:	e7d0      	b.n	8005ad4 <_svfiprintf_r+0x12c>
 8005b32:	2300      	movs	r3, #0
 8005b34:	200a      	movs	r0, #10
 8005b36:	001a      	movs	r2, r3
 8005b38:	3501      	adds	r5, #1
 8005b3a:	6063      	str	r3, [r4, #4]
 8005b3c:	7829      	ldrb	r1, [r5, #0]
 8005b3e:	1c6e      	adds	r6, r5, #1
 8005b40:	3930      	subs	r1, #48	; 0x30
 8005b42:	2909      	cmp	r1, #9
 8005b44:	d903      	bls.n	8005b4e <_svfiprintf_r+0x1a6>
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0c5      	beq.n	8005ad6 <_svfiprintf_r+0x12e>
 8005b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b4c:	e7c3      	b.n	8005ad6 <_svfiprintf_r+0x12e>
 8005b4e:	4342      	muls	r2, r0
 8005b50:	0035      	movs	r5, r6
 8005b52:	2301      	movs	r3, #1
 8005b54:	1852      	adds	r2, r2, r1
 8005b56:	e7f1      	b.n	8005b3c <_svfiprintf_r+0x194>
 8005b58:	ab07      	add	r3, sp, #28
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	003a      	movs	r2, r7
 8005b5e:	0021      	movs	r1, r4
 8005b60:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <_svfiprintf_r+0x1fc>)
 8005b62:	9803      	ldr	r0, [sp, #12]
 8005b64:	e000      	b.n	8005b68 <_svfiprintf_r+0x1c0>
 8005b66:	bf00      	nop
 8005b68:	9004      	str	r0, [sp, #16]
 8005b6a:	9b04      	ldr	r3, [sp, #16]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	d1d3      	bne.n	8005b18 <_svfiprintf_r+0x170>
 8005b70:	89bb      	ldrh	r3, [r7, #12]
 8005b72:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005b74:	065b      	lsls	r3, r3, #25
 8005b76:	d400      	bmi.n	8005b7a <_svfiprintf_r+0x1d2>
 8005b78:	e72d      	b.n	80059d6 <_svfiprintf_r+0x2e>
 8005b7a:	2001      	movs	r0, #1
 8005b7c:	4240      	negs	r0, r0
 8005b7e:	e72a      	b.n	80059d6 <_svfiprintf_r+0x2e>
 8005b80:	ab07      	add	r3, sp, #28
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	003a      	movs	r2, r7
 8005b86:	0021      	movs	r1, r4
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <_svfiprintf_r+0x1fc>)
 8005b8a:	9803      	ldr	r0, [sp, #12]
 8005b8c:	f000 f87c 	bl	8005c88 <_printf_i>
 8005b90:	e7ea      	b.n	8005b68 <_svfiprintf_r+0x1c0>
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	080066e7 	.word	0x080066e7
 8005b98:	080066ed 	.word	0x080066ed
 8005b9c:	080066f1 	.word	0x080066f1
 8005ba0:	00000000 	.word	0x00000000
 8005ba4:	080058e5 	.word	0x080058e5

08005ba8 <_printf_common>:
 8005ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005baa:	0015      	movs	r5, r2
 8005bac:	9301      	str	r3, [sp, #4]
 8005bae:	688a      	ldr	r2, [r1, #8]
 8005bb0:	690b      	ldr	r3, [r1, #16]
 8005bb2:	000c      	movs	r4, r1
 8005bb4:	9000      	str	r0, [sp, #0]
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	da00      	bge.n	8005bbc <_printf_common+0x14>
 8005bba:	0013      	movs	r3, r2
 8005bbc:	0022      	movs	r2, r4
 8005bbe:	602b      	str	r3, [r5, #0]
 8005bc0:	3243      	adds	r2, #67	; 0x43
 8005bc2:	7812      	ldrb	r2, [r2, #0]
 8005bc4:	2a00      	cmp	r2, #0
 8005bc6:	d001      	beq.n	8005bcc <_printf_common+0x24>
 8005bc8:	3301      	adds	r3, #1
 8005bca:	602b      	str	r3, [r5, #0]
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	069b      	lsls	r3, r3, #26
 8005bd0:	d502      	bpl.n	8005bd8 <_printf_common+0x30>
 8005bd2:	682b      	ldr	r3, [r5, #0]
 8005bd4:	3302      	adds	r3, #2
 8005bd6:	602b      	str	r3, [r5, #0]
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	2306      	movs	r3, #6
 8005bdc:	0017      	movs	r7, r2
 8005bde:	401f      	ands	r7, r3
 8005be0:	421a      	tst	r2, r3
 8005be2:	d027      	beq.n	8005c34 <_printf_common+0x8c>
 8005be4:	0023      	movs	r3, r4
 8005be6:	3343      	adds	r3, #67	; 0x43
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	1e5a      	subs	r2, r3, #1
 8005bec:	4193      	sbcs	r3, r2
 8005bee:	6822      	ldr	r2, [r4, #0]
 8005bf0:	0692      	lsls	r2, r2, #26
 8005bf2:	d430      	bmi.n	8005c56 <_printf_common+0xae>
 8005bf4:	0022      	movs	r2, r4
 8005bf6:	9901      	ldr	r1, [sp, #4]
 8005bf8:	9800      	ldr	r0, [sp, #0]
 8005bfa:	9e08      	ldr	r6, [sp, #32]
 8005bfc:	3243      	adds	r2, #67	; 0x43
 8005bfe:	47b0      	blx	r6
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d025      	beq.n	8005c50 <_printf_common+0xa8>
 8005c04:	2306      	movs	r3, #6
 8005c06:	6820      	ldr	r0, [r4, #0]
 8005c08:	682a      	ldr	r2, [r5, #0]
 8005c0a:	68e1      	ldr	r1, [r4, #12]
 8005c0c:	2500      	movs	r5, #0
 8005c0e:	4003      	ands	r3, r0
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d103      	bne.n	8005c1c <_printf_common+0x74>
 8005c14:	1a8d      	subs	r5, r1, r2
 8005c16:	43eb      	mvns	r3, r5
 8005c18:	17db      	asrs	r3, r3, #31
 8005c1a:	401d      	ands	r5, r3
 8005c1c:	68a3      	ldr	r3, [r4, #8]
 8005c1e:	6922      	ldr	r2, [r4, #16]
 8005c20:	4293      	cmp	r3, r2
 8005c22:	dd01      	ble.n	8005c28 <_printf_common+0x80>
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	18ed      	adds	r5, r5, r3
 8005c28:	2700      	movs	r7, #0
 8005c2a:	42bd      	cmp	r5, r7
 8005c2c:	d120      	bne.n	8005c70 <_printf_common+0xc8>
 8005c2e:	2000      	movs	r0, #0
 8005c30:	e010      	b.n	8005c54 <_printf_common+0xac>
 8005c32:	3701      	adds	r7, #1
 8005c34:	68e3      	ldr	r3, [r4, #12]
 8005c36:	682a      	ldr	r2, [r5, #0]
 8005c38:	1a9b      	subs	r3, r3, r2
 8005c3a:	42bb      	cmp	r3, r7
 8005c3c:	ddd2      	ble.n	8005be4 <_printf_common+0x3c>
 8005c3e:	0022      	movs	r2, r4
 8005c40:	2301      	movs	r3, #1
 8005c42:	9901      	ldr	r1, [sp, #4]
 8005c44:	9800      	ldr	r0, [sp, #0]
 8005c46:	9e08      	ldr	r6, [sp, #32]
 8005c48:	3219      	adds	r2, #25
 8005c4a:	47b0      	blx	r6
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d1f0      	bne.n	8005c32 <_printf_common+0x8a>
 8005c50:	2001      	movs	r0, #1
 8005c52:	4240      	negs	r0, r0
 8005c54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c56:	2030      	movs	r0, #48	; 0x30
 8005c58:	18e1      	adds	r1, r4, r3
 8005c5a:	3143      	adds	r1, #67	; 0x43
 8005c5c:	7008      	strb	r0, [r1, #0]
 8005c5e:	0021      	movs	r1, r4
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	3145      	adds	r1, #69	; 0x45
 8005c64:	7809      	ldrb	r1, [r1, #0]
 8005c66:	18a2      	adds	r2, r4, r2
 8005c68:	3243      	adds	r2, #67	; 0x43
 8005c6a:	3302      	adds	r3, #2
 8005c6c:	7011      	strb	r1, [r2, #0]
 8005c6e:	e7c1      	b.n	8005bf4 <_printf_common+0x4c>
 8005c70:	0022      	movs	r2, r4
 8005c72:	2301      	movs	r3, #1
 8005c74:	9901      	ldr	r1, [sp, #4]
 8005c76:	9800      	ldr	r0, [sp, #0]
 8005c78:	9e08      	ldr	r6, [sp, #32]
 8005c7a:	321a      	adds	r2, #26
 8005c7c:	47b0      	blx	r6
 8005c7e:	1c43      	adds	r3, r0, #1
 8005c80:	d0e6      	beq.n	8005c50 <_printf_common+0xa8>
 8005c82:	3701      	adds	r7, #1
 8005c84:	e7d1      	b.n	8005c2a <_printf_common+0x82>
	...

08005c88 <_printf_i>:
 8005c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c8a:	b08b      	sub	sp, #44	; 0x2c
 8005c8c:	9206      	str	r2, [sp, #24]
 8005c8e:	000a      	movs	r2, r1
 8005c90:	3243      	adds	r2, #67	; 0x43
 8005c92:	9307      	str	r3, [sp, #28]
 8005c94:	9005      	str	r0, [sp, #20]
 8005c96:	9204      	str	r2, [sp, #16]
 8005c98:	7e0a      	ldrb	r2, [r1, #24]
 8005c9a:	000c      	movs	r4, r1
 8005c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c9e:	2a78      	cmp	r2, #120	; 0x78
 8005ca0:	d807      	bhi.n	8005cb2 <_printf_i+0x2a>
 8005ca2:	2a62      	cmp	r2, #98	; 0x62
 8005ca4:	d809      	bhi.n	8005cba <_printf_i+0x32>
 8005ca6:	2a00      	cmp	r2, #0
 8005ca8:	d100      	bne.n	8005cac <_printf_i+0x24>
 8005caa:	e0c1      	b.n	8005e30 <_printf_i+0x1a8>
 8005cac:	2a58      	cmp	r2, #88	; 0x58
 8005cae:	d100      	bne.n	8005cb2 <_printf_i+0x2a>
 8005cb0:	e08c      	b.n	8005dcc <_printf_i+0x144>
 8005cb2:	0026      	movs	r6, r4
 8005cb4:	3642      	adds	r6, #66	; 0x42
 8005cb6:	7032      	strb	r2, [r6, #0]
 8005cb8:	e022      	b.n	8005d00 <_printf_i+0x78>
 8005cba:	0010      	movs	r0, r2
 8005cbc:	3863      	subs	r0, #99	; 0x63
 8005cbe:	2815      	cmp	r0, #21
 8005cc0:	d8f7      	bhi.n	8005cb2 <_printf_i+0x2a>
 8005cc2:	f7fa fa3d 	bl	8000140 <__gnu_thumb1_case_shi>
 8005cc6:	0016      	.short	0x0016
 8005cc8:	fff6001f 	.word	0xfff6001f
 8005ccc:	fff6fff6 	.word	0xfff6fff6
 8005cd0:	001ffff6 	.word	0x001ffff6
 8005cd4:	fff6fff6 	.word	0xfff6fff6
 8005cd8:	fff6fff6 	.word	0xfff6fff6
 8005cdc:	003600a8 	.word	0x003600a8
 8005ce0:	fff6009a 	.word	0xfff6009a
 8005ce4:	00b9fff6 	.word	0x00b9fff6
 8005ce8:	0036fff6 	.word	0x0036fff6
 8005cec:	fff6fff6 	.word	0xfff6fff6
 8005cf0:	009e      	.short	0x009e
 8005cf2:	0026      	movs	r6, r4
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	3642      	adds	r6, #66	; 0x42
 8005cf8:	1d11      	adds	r1, r2, #4
 8005cfa:	6019      	str	r1, [r3, #0]
 8005cfc:	6813      	ldr	r3, [r2, #0]
 8005cfe:	7033      	strb	r3, [r6, #0]
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0a7      	b.n	8005e54 <_printf_i+0x1cc>
 8005d04:	6808      	ldr	r0, [r1, #0]
 8005d06:	6819      	ldr	r1, [r3, #0]
 8005d08:	1d0a      	adds	r2, r1, #4
 8005d0a:	0605      	lsls	r5, r0, #24
 8005d0c:	d50b      	bpl.n	8005d26 <_printf_i+0x9e>
 8005d0e:	680d      	ldr	r5, [r1, #0]
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	2d00      	cmp	r5, #0
 8005d14:	da03      	bge.n	8005d1e <_printf_i+0x96>
 8005d16:	232d      	movs	r3, #45	; 0x2d
 8005d18:	9a04      	ldr	r2, [sp, #16]
 8005d1a:	426d      	negs	r5, r5
 8005d1c:	7013      	strb	r3, [r2, #0]
 8005d1e:	4b61      	ldr	r3, [pc, #388]	; (8005ea4 <_printf_i+0x21c>)
 8005d20:	270a      	movs	r7, #10
 8005d22:	9303      	str	r3, [sp, #12]
 8005d24:	e01b      	b.n	8005d5e <_printf_i+0xd6>
 8005d26:	680d      	ldr	r5, [r1, #0]
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	0641      	lsls	r1, r0, #25
 8005d2c:	d5f1      	bpl.n	8005d12 <_printf_i+0x8a>
 8005d2e:	b22d      	sxth	r5, r5
 8005d30:	e7ef      	b.n	8005d12 <_printf_i+0x8a>
 8005d32:	680d      	ldr	r5, [r1, #0]
 8005d34:	6819      	ldr	r1, [r3, #0]
 8005d36:	1d08      	adds	r0, r1, #4
 8005d38:	6018      	str	r0, [r3, #0]
 8005d3a:	062e      	lsls	r6, r5, #24
 8005d3c:	d501      	bpl.n	8005d42 <_printf_i+0xba>
 8005d3e:	680d      	ldr	r5, [r1, #0]
 8005d40:	e003      	b.n	8005d4a <_printf_i+0xc2>
 8005d42:	066d      	lsls	r5, r5, #25
 8005d44:	d5fb      	bpl.n	8005d3e <_printf_i+0xb6>
 8005d46:	680d      	ldr	r5, [r1, #0]
 8005d48:	b2ad      	uxth	r5, r5
 8005d4a:	4b56      	ldr	r3, [pc, #344]	; (8005ea4 <_printf_i+0x21c>)
 8005d4c:	2708      	movs	r7, #8
 8005d4e:	9303      	str	r3, [sp, #12]
 8005d50:	2a6f      	cmp	r2, #111	; 0x6f
 8005d52:	d000      	beq.n	8005d56 <_printf_i+0xce>
 8005d54:	3702      	adds	r7, #2
 8005d56:	0023      	movs	r3, r4
 8005d58:	2200      	movs	r2, #0
 8005d5a:	3343      	adds	r3, #67	; 0x43
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	6863      	ldr	r3, [r4, #4]
 8005d60:	60a3      	str	r3, [r4, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	db03      	blt.n	8005d6e <_printf_i+0xe6>
 8005d66:	2204      	movs	r2, #4
 8005d68:	6821      	ldr	r1, [r4, #0]
 8005d6a:	4391      	bics	r1, r2
 8005d6c:	6021      	str	r1, [r4, #0]
 8005d6e:	2d00      	cmp	r5, #0
 8005d70:	d102      	bne.n	8005d78 <_printf_i+0xf0>
 8005d72:	9e04      	ldr	r6, [sp, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00c      	beq.n	8005d92 <_printf_i+0x10a>
 8005d78:	9e04      	ldr	r6, [sp, #16]
 8005d7a:	0028      	movs	r0, r5
 8005d7c:	0039      	movs	r1, r7
 8005d7e:	f7fa fa6f 	bl	8000260 <__aeabi_uidivmod>
 8005d82:	9b03      	ldr	r3, [sp, #12]
 8005d84:	3e01      	subs	r6, #1
 8005d86:	5c5b      	ldrb	r3, [r3, r1]
 8005d88:	7033      	strb	r3, [r6, #0]
 8005d8a:	002b      	movs	r3, r5
 8005d8c:	0005      	movs	r5, r0
 8005d8e:	429f      	cmp	r7, r3
 8005d90:	d9f3      	bls.n	8005d7a <_printf_i+0xf2>
 8005d92:	2f08      	cmp	r7, #8
 8005d94:	d109      	bne.n	8005daa <_printf_i+0x122>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	07db      	lsls	r3, r3, #31
 8005d9a:	d506      	bpl.n	8005daa <_printf_i+0x122>
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	6922      	ldr	r2, [r4, #16]
 8005da0:	4293      	cmp	r3, r2
 8005da2:	dc02      	bgt.n	8005daa <_printf_i+0x122>
 8005da4:	2330      	movs	r3, #48	; 0x30
 8005da6:	3e01      	subs	r6, #1
 8005da8:	7033      	strb	r3, [r6, #0]
 8005daa:	9b04      	ldr	r3, [sp, #16]
 8005dac:	1b9b      	subs	r3, r3, r6
 8005dae:	6123      	str	r3, [r4, #16]
 8005db0:	9b07      	ldr	r3, [sp, #28]
 8005db2:	0021      	movs	r1, r4
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	9805      	ldr	r0, [sp, #20]
 8005db8:	9b06      	ldr	r3, [sp, #24]
 8005dba:	aa09      	add	r2, sp, #36	; 0x24
 8005dbc:	f7ff fef4 	bl	8005ba8 <_printf_common>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d14c      	bne.n	8005e5e <_printf_i+0x1d6>
 8005dc4:	2001      	movs	r0, #1
 8005dc6:	4240      	negs	r0, r0
 8005dc8:	b00b      	add	sp, #44	; 0x2c
 8005dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dcc:	3145      	adds	r1, #69	; 0x45
 8005dce:	700a      	strb	r2, [r1, #0]
 8005dd0:	4a34      	ldr	r2, [pc, #208]	; (8005ea4 <_printf_i+0x21c>)
 8005dd2:	9203      	str	r2, [sp, #12]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	6821      	ldr	r1, [r4, #0]
 8005dd8:	ca20      	ldmia	r2!, {r5}
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	0608      	lsls	r0, r1, #24
 8005dde:	d516      	bpl.n	8005e0e <_printf_i+0x186>
 8005de0:	07cb      	lsls	r3, r1, #31
 8005de2:	d502      	bpl.n	8005dea <_printf_i+0x162>
 8005de4:	2320      	movs	r3, #32
 8005de6:	4319      	orrs	r1, r3
 8005de8:	6021      	str	r1, [r4, #0]
 8005dea:	2710      	movs	r7, #16
 8005dec:	2d00      	cmp	r5, #0
 8005dee:	d1b2      	bne.n	8005d56 <_printf_i+0xce>
 8005df0:	2320      	movs	r3, #32
 8005df2:	6822      	ldr	r2, [r4, #0]
 8005df4:	439a      	bics	r2, r3
 8005df6:	6022      	str	r2, [r4, #0]
 8005df8:	e7ad      	b.n	8005d56 <_printf_i+0xce>
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	6809      	ldr	r1, [r1, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	6022      	str	r2, [r4, #0]
 8005e02:	0022      	movs	r2, r4
 8005e04:	2178      	movs	r1, #120	; 0x78
 8005e06:	3245      	adds	r2, #69	; 0x45
 8005e08:	7011      	strb	r1, [r2, #0]
 8005e0a:	4a27      	ldr	r2, [pc, #156]	; (8005ea8 <_printf_i+0x220>)
 8005e0c:	e7e1      	b.n	8005dd2 <_printf_i+0x14a>
 8005e0e:	0648      	lsls	r0, r1, #25
 8005e10:	d5e6      	bpl.n	8005de0 <_printf_i+0x158>
 8005e12:	b2ad      	uxth	r5, r5
 8005e14:	e7e4      	b.n	8005de0 <_printf_i+0x158>
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	680d      	ldr	r5, [r1, #0]
 8005e1a:	1d10      	adds	r0, r2, #4
 8005e1c:	6949      	ldr	r1, [r1, #20]
 8005e1e:	6018      	str	r0, [r3, #0]
 8005e20:	6813      	ldr	r3, [r2, #0]
 8005e22:	062e      	lsls	r6, r5, #24
 8005e24:	d501      	bpl.n	8005e2a <_printf_i+0x1a2>
 8005e26:	6019      	str	r1, [r3, #0]
 8005e28:	e002      	b.n	8005e30 <_printf_i+0x1a8>
 8005e2a:	066d      	lsls	r5, r5, #25
 8005e2c:	d5fb      	bpl.n	8005e26 <_printf_i+0x19e>
 8005e2e:	8019      	strh	r1, [r3, #0]
 8005e30:	2300      	movs	r3, #0
 8005e32:	9e04      	ldr	r6, [sp, #16]
 8005e34:	6123      	str	r3, [r4, #16]
 8005e36:	e7bb      	b.n	8005db0 <_printf_i+0x128>
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	1d11      	adds	r1, r2, #4
 8005e3c:	6019      	str	r1, [r3, #0]
 8005e3e:	6816      	ldr	r6, [r2, #0]
 8005e40:	2100      	movs	r1, #0
 8005e42:	0030      	movs	r0, r6
 8005e44:	6862      	ldr	r2, [r4, #4]
 8005e46:	f000 f831 	bl	8005eac <memchr>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d001      	beq.n	8005e52 <_printf_i+0x1ca>
 8005e4e:	1b80      	subs	r0, r0, r6
 8005e50:	6060      	str	r0, [r4, #4]
 8005e52:	6863      	ldr	r3, [r4, #4]
 8005e54:	6123      	str	r3, [r4, #16]
 8005e56:	2300      	movs	r3, #0
 8005e58:	9a04      	ldr	r2, [sp, #16]
 8005e5a:	7013      	strb	r3, [r2, #0]
 8005e5c:	e7a8      	b.n	8005db0 <_printf_i+0x128>
 8005e5e:	6923      	ldr	r3, [r4, #16]
 8005e60:	0032      	movs	r2, r6
 8005e62:	9906      	ldr	r1, [sp, #24]
 8005e64:	9805      	ldr	r0, [sp, #20]
 8005e66:	9d07      	ldr	r5, [sp, #28]
 8005e68:	47a8      	blx	r5
 8005e6a:	1c43      	adds	r3, r0, #1
 8005e6c:	d0aa      	beq.n	8005dc4 <_printf_i+0x13c>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	079b      	lsls	r3, r3, #30
 8005e72:	d415      	bmi.n	8005ea0 <_printf_i+0x218>
 8005e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e76:	68e0      	ldr	r0, [r4, #12]
 8005e78:	4298      	cmp	r0, r3
 8005e7a:	daa5      	bge.n	8005dc8 <_printf_i+0x140>
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	e7a3      	b.n	8005dc8 <_printf_i+0x140>
 8005e80:	0022      	movs	r2, r4
 8005e82:	2301      	movs	r3, #1
 8005e84:	9906      	ldr	r1, [sp, #24]
 8005e86:	9805      	ldr	r0, [sp, #20]
 8005e88:	9e07      	ldr	r6, [sp, #28]
 8005e8a:	3219      	adds	r2, #25
 8005e8c:	47b0      	blx	r6
 8005e8e:	1c43      	adds	r3, r0, #1
 8005e90:	d098      	beq.n	8005dc4 <_printf_i+0x13c>
 8005e92:	3501      	adds	r5, #1
 8005e94:	68e3      	ldr	r3, [r4, #12]
 8005e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e98:	1a9b      	subs	r3, r3, r2
 8005e9a:	42ab      	cmp	r3, r5
 8005e9c:	dcf0      	bgt.n	8005e80 <_printf_i+0x1f8>
 8005e9e:	e7e9      	b.n	8005e74 <_printf_i+0x1ec>
 8005ea0:	2500      	movs	r5, #0
 8005ea2:	e7f7      	b.n	8005e94 <_printf_i+0x20c>
 8005ea4:	080066f8 	.word	0x080066f8
 8005ea8:	08006709 	.word	0x08006709

08005eac <memchr>:
 8005eac:	b2c9      	uxtb	r1, r1
 8005eae:	1882      	adds	r2, r0, r2
 8005eb0:	4290      	cmp	r0, r2
 8005eb2:	d101      	bne.n	8005eb8 <memchr+0xc>
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	4770      	bx	lr
 8005eb8:	7803      	ldrb	r3, [r0, #0]
 8005eba:	428b      	cmp	r3, r1
 8005ebc:	d0fb      	beq.n	8005eb6 <memchr+0xa>
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	e7f6      	b.n	8005eb0 <memchr+0x4>

08005ec2 <memcpy>:
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d100      	bne.n	8005ecc <memcpy+0xa>
 8005eca:	bd10      	pop	{r4, pc}
 8005ecc:	5ccc      	ldrb	r4, [r1, r3]
 8005ece:	54c4      	strb	r4, [r0, r3]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	e7f8      	b.n	8005ec6 <memcpy+0x4>

08005ed4 <memmove>:
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	4288      	cmp	r0, r1
 8005ed8:	d902      	bls.n	8005ee0 <memmove+0xc>
 8005eda:	188b      	adds	r3, r1, r2
 8005edc:	4298      	cmp	r0, r3
 8005ede:	d303      	bcc.n	8005ee8 <memmove+0x14>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e007      	b.n	8005ef4 <memmove+0x20>
 8005ee4:	5c8b      	ldrb	r3, [r1, r2]
 8005ee6:	5483      	strb	r3, [r0, r2]
 8005ee8:	3a01      	subs	r2, #1
 8005eea:	d2fb      	bcs.n	8005ee4 <memmove+0x10>
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	5ccc      	ldrb	r4, [r1, r3]
 8005ef0:	54c4      	strb	r4, [r0, r3]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d1fa      	bne.n	8005eee <memmove+0x1a>
 8005ef8:	e7f8      	b.n	8005eec <memmove+0x18>
	...

08005efc <_free_r>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	0005      	movs	r5, r0
 8005f00:	2900      	cmp	r1, #0
 8005f02:	d010      	beq.n	8005f26 <_free_r+0x2a>
 8005f04:	1f0c      	subs	r4, r1, #4
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	da00      	bge.n	8005f0e <_free_r+0x12>
 8005f0c:	18e4      	adds	r4, r4, r3
 8005f0e:	0028      	movs	r0, r5
 8005f10:	f000 f918 	bl	8006144 <__malloc_lock>
 8005f14:	4a1d      	ldr	r2, [pc, #116]	; (8005f8c <_free_r+0x90>)
 8005f16:	6813      	ldr	r3, [r2, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d105      	bne.n	8005f28 <_free_r+0x2c>
 8005f1c:	6063      	str	r3, [r4, #4]
 8005f1e:	6014      	str	r4, [r2, #0]
 8005f20:	0028      	movs	r0, r5
 8005f22:	f000 f917 	bl	8006154 <__malloc_unlock>
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	d908      	bls.n	8005f3e <_free_r+0x42>
 8005f2c:	6821      	ldr	r1, [r4, #0]
 8005f2e:	1860      	adds	r0, r4, r1
 8005f30:	4283      	cmp	r3, r0
 8005f32:	d1f3      	bne.n	8005f1c <_free_r+0x20>
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	1841      	adds	r1, r0, r1
 8005f3a:	6021      	str	r1, [r4, #0]
 8005f3c:	e7ee      	b.n	8005f1c <_free_r+0x20>
 8005f3e:	001a      	movs	r2, r3
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <_free_r+0x4e>
 8005f46:	42a3      	cmp	r3, r4
 8005f48:	d9f9      	bls.n	8005f3e <_free_r+0x42>
 8005f4a:	6811      	ldr	r1, [r2, #0]
 8005f4c:	1850      	adds	r0, r2, r1
 8005f4e:	42a0      	cmp	r0, r4
 8005f50:	d10b      	bne.n	8005f6a <_free_r+0x6e>
 8005f52:	6820      	ldr	r0, [r4, #0]
 8005f54:	1809      	adds	r1, r1, r0
 8005f56:	1850      	adds	r0, r2, r1
 8005f58:	6011      	str	r1, [r2, #0]
 8005f5a:	4283      	cmp	r3, r0
 8005f5c:	d1e0      	bne.n	8005f20 <_free_r+0x24>
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	1841      	adds	r1, r0, r1
 8005f64:	6011      	str	r1, [r2, #0]
 8005f66:	6053      	str	r3, [r2, #4]
 8005f68:	e7da      	b.n	8005f20 <_free_r+0x24>
 8005f6a:	42a0      	cmp	r0, r4
 8005f6c:	d902      	bls.n	8005f74 <_free_r+0x78>
 8005f6e:	230c      	movs	r3, #12
 8005f70:	602b      	str	r3, [r5, #0]
 8005f72:	e7d5      	b.n	8005f20 <_free_r+0x24>
 8005f74:	6821      	ldr	r1, [r4, #0]
 8005f76:	1860      	adds	r0, r4, r1
 8005f78:	4283      	cmp	r3, r0
 8005f7a:	d103      	bne.n	8005f84 <_free_r+0x88>
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	1841      	adds	r1, r0, r1
 8005f82:	6021      	str	r1, [r4, #0]
 8005f84:	6063      	str	r3, [r4, #4]
 8005f86:	6054      	str	r4, [r2, #4]
 8005f88:	e7ca      	b.n	8005f20 <_free_r+0x24>
 8005f8a:	46c0      	nop			; (mov r8, r8)
 8005f8c:	20000358 	.word	0x20000358

08005f90 <sbrk_aligned>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	4e0f      	ldr	r6, [pc, #60]	; (8005fd0 <sbrk_aligned+0x40>)
 8005f94:	000d      	movs	r5, r1
 8005f96:	6831      	ldr	r1, [r6, #0]
 8005f98:	0004      	movs	r4, r0
 8005f9a:	2900      	cmp	r1, #0
 8005f9c:	d102      	bne.n	8005fa4 <sbrk_aligned+0x14>
 8005f9e:	f000 f8bf 	bl	8006120 <_sbrk_r>
 8005fa2:	6030      	str	r0, [r6, #0]
 8005fa4:	0029      	movs	r1, r5
 8005fa6:	0020      	movs	r0, r4
 8005fa8:	f000 f8ba 	bl	8006120 <_sbrk_r>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d00a      	beq.n	8005fc6 <sbrk_aligned+0x36>
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	1cc5      	adds	r5, r0, #3
 8005fb4:	439d      	bics	r5, r3
 8005fb6:	42a8      	cmp	r0, r5
 8005fb8:	d007      	beq.n	8005fca <sbrk_aligned+0x3a>
 8005fba:	1a29      	subs	r1, r5, r0
 8005fbc:	0020      	movs	r0, r4
 8005fbe:	f000 f8af 	bl	8006120 <_sbrk_r>
 8005fc2:	1c43      	adds	r3, r0, #1
 8005fc4:	d101      	bne.n	8005fca <sbrk_aligned+0x3a>
 8005fc6:	2501      	movs	r5, #1
 8005fc8:	426d      	negs	r5, r5
 8005fca:	0028      	movs	r0, r5
 8005fcc:	bd70      	pop	{r4, r5, r6, pc}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	2000035c 	.word	0x2000035c

08005fd4 <_malloc_r>:
 8005fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	1ccb      	adds	r3, r1, #3
 8005fda:	4393      	bics	r3, r2
 8005fdc:	3308      	adds	r3, #8
 8005fde:	0006      	movs	r6, r0
 8005fe0:	001f      	movs	r7, r3
 8005fe2:	2b0c      	cmp	r3, #12
 8005fe4:	d232      	bcs.n	800604c <_malloc_r+0x78>
 8005fe6:	270c      	movs	r7, #12
 8005fe8:	42b9      	cmp	r1, r7
 8005fea:	d831      	bhi.n	8006050 <_malloc_r+0x7c>
 8005fec:	0030      	movs	r0, r6
 8005fee:	f000 f8a9 	bl	8006144 <__malloc_lock>
 8005ff2:	4d32      	ldr	r5, [pc, #200]	; (80060bc <_malloc_r+0xe8>)
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	001c      	movs	r4, r3
 8005ff8:	2c00      	cmp	r4, #0
 8005ffa:	d12e      	bne.n	800605a <_malloc_r+0x86>
 8005ffc:	0039      	movs	r1, r7
 8005ffe:	0030      	movs	r0, r6
 8006000:	f7ff ffc6 	bl	8005f90 <sbrk_aligned>
 8006004:	0004      	movs	r4, r0
 8006006:	1c43      	adds	r3, r0, #1
 8006008:	d11e      	bne.n	8006048 <_malloc_r+0x74>
 800600a:	682c      	ldr	r4, [r5, #0]
 800600c:	0025      	movs	r5, r4
 800600e:	2d00      	cmp	r5, #0
 8006010:	d14a      	bne.n	80060a8 <_malloc_r+0xd4>
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	0029      	movs	r1, r5
 8006016:	18e3      	adds	r3, r4, r3
 8006018:	0030      	movs	r0, r6
 800601a:	9301      	str	r3, [sp, #4]
 800601c:	f000 f880 	bl	8006120 <_sbrk_r>
 8006020:	9b01      	ldr	r3, [sp, #4]
 8006022:	4283      	cmp	r3, r0
 8006024:	d143      	bne.n	80060ae <_malloc_r+0xda>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	3703      	adds	r7, #3
 800602a:	1aff      	subs	r7, r7, r3
 800602c:	2303      	movs	r3, #3
 800602e:	439f      	bics	r7, r3
 8006030:	3708      	adds	r7, #8
 8006032:	2f0c      	cmp	r7, #12
 8006034:	d200      	bcs.n	8006038 <_malloc_r+0x64>
 8006036:	270c      	movs	r7, #12
 8006038:	0039      	movs	r1, r7
 800603a:	0030      	movs	r0, r6
 800603c:	f7ff ffa8 	bl	8005f90 <sbrk_aligned>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d034      	beq.n	80060ae <_malloc_r+0xda>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	19df      	adds	r7, r3, r7
 8006048:	6027      	str	r7, [r4, #0]
 800604a:	e013      	b.n	8006074 <_malloc_r+0xa0>
 800604c:	2b00      	cmp	r3, #0
 800604e:	dacb      	bge.n	8005fe8 <_malloc_r+0x14>
 8006050:	230c      	movs	r3, #12
 8006052:	2500      	movs	r5, #0
 8006054:	6033      	str	r3, [r6, #0]
 8006056:	0028      	movs	r0, r5
 8006058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800605a:	6822      	ldr	r2, [r4, #0]
 800605c:	1bd1      	subs	r1, r2, r7
 800605e:	d420      	bmi.n	80060a2 <_malloc_r+0xce>
 8006060:	290b      	cmp	r1, #11
 8006062:	d917      	bls.n	8006094 <_malloc_r+0xc0>
 8006064:	19e2      	adds	r2, r4, r7
 8006066:	6027      	str	r7, [r4, #0]
 8006068:	42a3      	cmp	r3, r4
 800606a:	d111      	bne.n	8006090 <_malloc_r+0xbc>
 800606c:	602a      	str	r2, [r5, #0]
 800606e:	6863      	ldr	r3, [r4, #4]
 8006070:	6011      	str	r1, [r2, #0]
 8006072:	6053      	str	r3, [r2, #4]
 8006074:	0030      	movs	r0, r6
 8006076:	0025      	movs	r5, r4
 8006078:	f000 f86c 	bl	8006154 <__malloc_unlock>
 800607c:	2207      	movs	r2, #7
 800607e:	350b      	adds	r5, #11
 8006080:	1d23      	adds	r3, r4, #4
 8006082:	4395      	bics	r5, r2
 8006084:	1aea      	subs	r2, r5, r3
 8006086:	429d      	cmp	r5, r3
 8006088:	d0e5      	beq.n	8006056 <_malloc_r+0x82>
 800608a:	1b5b      	subs	r3, r3, r5
 800608c:	50a3      	str	r3, [r4, r2]
 800608e:	e7e2      	b.n	8006056 <_malloc_r+0x82>
 8006090:	605a      	str	r2, [r3, #4]
 8006092:	e7ec      	b.n	800606e <_malloc_r+0x9a>
 8006094:	6862      	ldr	r2, [r4, #4]
 8006096:	42a3      	cmp	r3, r4
 8006098:	d101      	bne.n	800609e <_malloc_r+0xca>
 800609a:	602a      	str	r2, [r5, #0]
 800609c:	e7ea      	b.n	8006074 <_malloc_r+0xa0>
 800609e:	605a      	str	r2, [r3, #4]
 80060a0:	e7e8      	b.n	8006074 <_malloc_r+0xa0>
 80060a2:	0023      	movs	r3, r4
 80060a4:	6864      	ldr	r4, [r4, #4]
 80060a6:	e7a7      	b.n	8005ff8 <_malloc_r+0x24>
 80060a8:	002c      	movs	r4, r5
 80060aa:	686d      	ldr	r5, [r5, #4]
 80060ac:	e7af      	b.n	800600e <_malloc_r+0x3a>
 80060ae:	230c      	movs	r3, #12
 80060b0:	0030      	movs	r0, r6
 80060b2:	6033      	str	r3, [r6, #0]
 80060b4:	f000 f84e 	bl	8006154 <__malloc_unlock>
 80060b8:	e7cd      	b.n	8006056 <_malloc_r+0x82>
 80060ba:	46c0      	nop			; (mov r8, r8)
 80060bc:	20000358 	.word	0x20000358

080060c0 <_realloc_r>:
 80060c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060c2:	0007      	movs	r7, r0
 80060c4:	000e      	movs	r6, r1
 80060c6:	0014      	movs	r4, r2
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d105      	bne.n	80060d8 <_realloc_r+0x18>
 80060cc:	0011      	movs	r1, r2
 80060ce:	f7ff ff81 	bl	8005fd4 <_malloc_r>
 80060d2:	0005      	movs	r5, r0
 80060d4:	0028      	movs	r0, r5
 80060d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060d8:	2a00      	cmp	r2, #0
 80060da:	d103      	bne.n	80060e4 <_realloc_r+0x24>
 80060dc:	f7ff ff0e 	bl	8005efc <_free_r>
 80060e0:	0025      	movs	r5, r4
 80060e2:	e7f7      	b.n	80060d4 <_realloc_r+0x14>
 80060e4:	f000 f83e 	bl	8006164 <_malloc_usable_size_r>
 80060e8:	9001      	str	r0, [sp, #4]
 80060ea:	4284      	cmp	r4, r0
 80060ec:	d803      	bhi.n	80060f6 <_realloc_r+0x36>
 80060ee:	0035      	movs	r5, r6
 80060f0:	0843      	lsrs	r3, r0, #1
 80060f2:	42a3      	cmp	r3, r4
 80060f4:	d3ee      	bcc.n	80060d4 <_realloc_r+0x14>
 80060f6:	0021      	movs	r1, r4
 80060f8:	0038      	movs	r0, r7
 80060fa:	f7ff ff6b 	bl	8005fd4 <_malloc_r>
 80060fe:	1e05      	subs	r5, r0, #0
 8006100:	d0e8      	beq.n	80060d4 <_realloc_r+0x14>
 8006102:	9b01      	ldr	r3, [sp, #4]
 8006104:	0022      	movs	r2, r4
 8006106:	429c      	cmp	r4, r3
 8006108:	d900      	bls.n	800610c <_realloc_r+0x4c>
 800610a:	001a      	movs	r2, r3
 800610c:	0031      	movs	r1, r6
 800610e:	0028      	movs	r0, r5
 8006110:	f7ff fed7 	bl	8005ec2 <memcpy>
 8006114:	0031      	movs	r1, r6
 8006116:	0038      	movs	r0, r7
 8006118:	f7ff fef0 	bl	8005efc <_free_r>
 800611c:	e7da      	b.n	80060d4 <_realloc_r+0x14>
	...

08006120 <_sbrk_r>:
 8006120:	2300      	movs	r3, #0
 8006122:	b570      	push	{r4, r5, r6, lr}
 8006124:	4d06      	ldr	r5, [pc, #24]	; (8006140 <_sbrk_r+0x20>)
 8006126:	0004      	movs	r4, r0
 8006128:	0008      	movs	r0, r1
 800612a:	602b      	str	r3, [r5, #0]
 800612c:	f7fd fada 	bl	80036e4 <_sbrk>
 8006130:	1c43      	adds	r3, r0, #1
 8006132:	d103      	bne.n	800613c <_sbrk_r+0x1c>
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d000      	beq.n	800613c <_sbrk_r+0x1c>
 800613a:	6023      	str	r3, [r4, #0]
 800613c:	bd70      	pop	{r4, r5, r6, pc}
 800613e:	46c0      	nop			; (mov r8, r8)
 8006140:	20000360 	.word	0x20000360

08006144 <__malloc_lock>:
 8006144:	b510      	push	{r4, lr}
 8006146:	4802      	ldr	r0, [pc, #8]	; (8006150 <__malloc_lock+0xc>)
 8006148:	f000 f814 	bl	8006174 <__retarget_lock_acquire_recursive>
 800614c:	bd10      	pop	{r4, pc}
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	20000364 	.word	0x20000364

08006154 <__malloc_unlock>:
 8006154:	b510      	push	{r4, lr}
 8006156:	4802      	ldr	r0, [pc, #8]	; (8006160 <__malloc_unlock+0xc>)
 8006158:	f000 f80d 	bl	8006176 <__retarget_lock_release_recursive>
 800615c:	bd10      	pop	{r4, pc}
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	20000364 	.word	0x20000364

08006164 <_malloc_usable_size_r>:
 8006164:	1f0b      	subs	r3, r1, #4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	1f18      	subs	r0, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	da01      	bge.n	8006172 <_malloc_usable_size_r+0xe>
 800616e:	580b      	ldr	r3, [r1, r0]
 8006170:	18c0      	adds	r0, r0, r3
 8006172:	4770      	bx	lr

08006174 <__retarget_lock_acquire_recursive>:
 8006174:	4770      	bx	lr

08006176 <__retarget_lock_release_recursive>:
 8006176:	4770      	bx	lr

08006178 <_init>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617e:	bc08      	pop	{r3}
 8006180:	469e      	mov	lr, r3
 8006182:	4770      	bx	lr

08006184 <_fini>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618a:	bc08      	pop	{r3}
 800618c:	469e      	mov	lr, r3
 800618e:	4770      	bx	lr
