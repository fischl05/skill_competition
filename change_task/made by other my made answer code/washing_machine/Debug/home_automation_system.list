
home_automation_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f88  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08004048  08004048  00014048  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004540  08004540  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004548  08004548  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800454c  0800454c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08004550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200001b0  08004700  000201b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08004700  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e49  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002930  00000000  00000000  00037021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000f21d  00000000  00000000  00039951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  00048b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001620  00000000  00000000  00049790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002549  00000000  00000000  0004adb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018452  00000000  00000000  0004d2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f5f1  00000000  00000000  0006574b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e4d3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b20  00000000  00000000  000e4d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001b0 	.word	0x200001b0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004030 	.word	0x08004030

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001b4 	.word	0x200001b4
 8000104:	08004030 	.word	0x08004030

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uldivmod>:
 8000258:	2b00      	cmp	r3, #0
 800025a:	d111      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 800025c:	2a00      	cmp	r2, #0
 800025e:	d10f      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 8000260:	2900      	cmp	r1, #0
 8000262:	d100      	bne.n	8000266 <__aeabi_uldivmod+0xe>
 8000264:	2800      	cmp	r0, #0
 8000266:	d002      	beq.n	800026e <__aeabi_uldivmod+0x16>
 8000268:	2100      	movs	r1, #0
 800026a:	43c9      	mvns	r1, r1
 800026c:	0008      	movs	r0, r1
 800026e:	b407      	push	{r0, r1, r2}
 8000270:	4802      	ldr	r0, [pc, #8]	; (800027c <__aeabi_uldivmod+0x24>)
 8000272:	a102      	add	r1, pc, #8	; (adr r1, 800027c <__aeabi_uldivmod+0x24>)
 8000274:	1840      	adds	r0, r0, r1
 8000276:	9002      	str	r0, [sp, #8]
 8000278:	bd03      	pop	{r0, r1, pc}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	ffffffd9 	.word	0xffffffd9
 8000280:	b403      	push	{r0, r1}
 8000282:	4668      	mov	r0, sp
 8000284:	b501      	push	{r0, lr}
 8000286:	9802      	ldr	r0, [sp, #8]
 8000288:	f000 f834 	bl	80002f4 <__udivmoddi4>
 800028c:	9b01      	ldr	r3, [sp, #4]
 800028e:	469e      	mov	lr, r3
 8000290:	b002      	add	sp, #8
 8000292:	bc0c      	pop	{r2, r3}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_lmul>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	46ce      	mov	lr, r9
 800029c:	4647      	mov	r7, r8
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	4699      	mov	r9, r3
 80002a4:	0c3b      	lsrs	r3, r7, #16
 80002a6:	469c      	mov	ip, r3
 80002a8:	0413      	lsls	r3, r2, #16
 80002aa:	0c1b      	lsrs	r3, r3, #16
 80002ac:	001d      	movs	r5, r3
 80002ae:	000e      	movs	r6, r1
 80002b0:	4661      	mov	r1, ip
 80002b2:	0400      	lsls	r0, r0, #16
 80002b4:	0c14      	lsrs	r4, r2, #16
 80002b6:	0c00      	lsrs	r0, r0, #16
 80002b8:	4345      	muls	r5, r0
 80002ba:	434b      	muls	r3, r1
 80002bc:	4360      	muls	r0, r4
 80002be:	4361      	muls	r1, r4
 80002c0:	18c0      	adds	r0, r0, r3
 80002c2:	0c2c      	lsrs	r4, r5, #16
 80002c4:	1820      	adds	r0, r4, r0
 80002c6:	468c      	mov	ip, r1
 80002c8:	4283      	cmp	r3, r0
 80002ca:	d903      	bls.n	80002d4 <__aeabi_lmul+0x3c>
 80002cc:	2380      	movs	r3, #128	; 0x80
 80002ce:	025b      	lsls	r3, r3, #9
 80002d0:	4698      	mov	r8, r3
 80002d2:	44c4      	add	ip, r8
 80002d4:	4649      	mov	r1, r9
 80002d6:	4379      	muls	r1, r7
 80002d8:	4372      	muls	r2, r6
 80002da:	0c03      	lsrs	r3, r0, #16
 80002dc:	4463      	add	r3, ip
 80002de:	042d      	lsls	r5, r5, #16
 80002e0:	0c2d      	lsrs	r5, r5, #16
 80002e2:	18c9      	adds	r1, r1, r3
 80002e4:	0400      	lsls	r0, r0, #16
 80002e6:	1940      	adds	r0, r0, r5
 80002e8:	1889      	adds	r1, r1, r2
 80002ea:	bcc0      	pop	{r6, r7}
 80002ec:	46b9      	mov	r9, r7
 80002ee:	46b0      	mov	r8, r6
 80002f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f2:	46c0      	nop			; (mov r8, r8)

080002f4 <__udivmoddi4>:
 80002f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f6:	4657      	mov	r7, sl
 80002f8:	464e      	mov	r6, r9
 80002fa:	4645      	mov	r5, r8
 80002fc:	46de      	mov	lr, fp
 80002fe:	b5e0      	push	{r5, r6, r7, lr}
 8000300:	0004      	movs	r4, r0
 8000302:	000d      	movs	r5, r1
 8000304:	4692      	mov	sl, r2
 8000306:	4699      	mov	r9, r3
 8000308:	b083      	sub	sp, #12
 800030a:	428b      	cmp	r3, r1
 800030c:	d830      	bhi.n	8000370 <__udivmoddi4+0x7c>
 800030e:	d02d      	beq.n	800036c <__udivmoddi4+0x78>
 8000310:	4649      	mov	r1, r9
 8000312:	4650      	mov	r0, sl
 8000314:	f000 f8d8 	bl	80004c8 <__clzdi2>
 8000318:	0029      	movs	r1, r5
 800031a:	0006      	movs	r6, r0
 800031c:	0020      	movs	r0, r4
 800031e:	f000 f8d3 	bl	80004c8 <__clzdi2>
 8000322:	1a33      	subs	r3, r6, r0
 8000324:	4698      	mov	r8, r3
 8000326:	3b20      	subs	r3, #32
 8000328:	469b      	mov	fp, r3
 800032a:	d433      	bmi.n	8000394 <__udivmoddi4+0xa0>
 800032c:	465a      	mov	r2, fp
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	4642      	mov	r2, r8
 8000334:	001f      	movs	r7, r3
 8000336:	4653      	mov	r3, sl
 8000338:	4093      	lsls	r3, r2
 800033a:	001e      	movs	r6, r3
 800033c:	42af      	cmp	r7, r5
 800033e:	d83a      	bhi.n	80003b6 <__udivmoddi4+0xc2>
 8000340:	42af      	cmp	r7, r5
 8000342:	d100      	bne.n	8000346 <__udivmoddi4+0x52>
 8000344:	e078      	b.n	8000438 <__udivmoddi4+0x144>
 8000346:	465b      	mov	r3, fp
 8000348:	1ba4      	subs	r4, r4, r6
 800034a:	41bd      	sbcs	r5, r7
 800034c:	2b00      	cmp	r3, #0
 800034e:	da00      	bge.n	8000352 <__udivmoddi4+0x5e>
 8000350:	e075      	b.n	800043e <__udivmoddi4+0x14a>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2301      	movs	r3, #1
 800035c:	465a      	mov	r2, fp
 800035e:	4093      	lsls	r3, r2
 8000360:	9301      	str	r3, [sp, #4]
 8000362:	2301      	movs	r3, #1
 8000364:	4642      	mov	r2, r8
 8000366:	4093      	lsls	r3, r2
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	e028      	b.n	80003be <__udivmoddi4+0xca>
 800036c:	4282      	cmp	r2, r0
 800036e:	d9cf      	bls.n	8000310 <__udivmoddi4+0x1c>
 8000370:	2200      	movs	r2, #0
 8000372:	2300      	movs	r3, #0
 8000374:	9200      	str	r2, [sp, #0]
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <__udivmoddi4+0x8e>
 800037e:	601c      	str	r4, [r3, #0]
 8000380:	605d      	str	r5, [r3, #4]
 8000382:	9800      	ldr	r0, [sp, #0]
 8000384:	9901      	ldr	r1, [sp, #4]
 8000386:	b003      	add	sp, #12
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	46bb      	mov	fp, r7
 800038c:	46b2      	mov	sl, r6
 800038e:	46a9      	mov	r9, r5
 8000390:	46a0      	mov	r8, r4
 8000392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000394:	4642      	mov	r2, r8
 8000396:	2320      	movs	r3, #32
 8000398:	1a9b      	subs	r3, r3, r2
 800039a:	4652      	mov	r2, sl
 800039c:	40da      	lsrs	r2, r3
 800039e:	4641      	mov	r1, r8
 80003a0:	0013      	movs	r3, r2
 80003a2:	464a      	mov	r2, r9
 80003a4:	408a      	lsls	r2, r1
 80003a6:	0017      	movs	r7, r2
 80003a8:	4642      	mov	r2, r8
 80003aa:	431f      	orrs	r7, r3
 80003ac:	4653      	mov	r3, sl
 80003ae:	4093      	lsls	r3, r2
 80003b0:	001e      	movs	r6, r3
 80003b2:	42af      	cmp	r7, r5
 80003b4:	d9c4      	bls.n	8000340 <__udivmoddi4+0x4c>
 80003b6:	2200      	movs	r2, #0
 80003b8:	2300      	movs	r3, #0
 80003ba:	9200      	str	r2, [sp, #0]
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	4643      	mov	r3, r8
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d0d9      	beq.n	8000378 <__udivmoddi4+0x84>
 80003c4:	07fb      	lsls	r3, r7, #31
 80003c6:	0872      	lsrs	r2, r6, #1
 80003c8:	431a      	orrs	r2, r3
 80003ca:	4646      	mov	r6, r8
 80003cc:	087b      	lsrs	r3, r7, #1
 80003ce:	e00e      	b.n	80003ee <__udivmoddi4+0xfa>
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d101      	bne.n	80003d8 <__udivmoddi4+0xe4>
 80003d4:	42a2      	cmp	r2, r4
 80003d6:	d80c      	bhi.n	80003f2 <__udivmoddi4+0xfe>
 80003d8:	1aa4      	subs	r4, r4, r2
 80003da:	419d      	sbcs	r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	1924      	adds	r4, r4, r4
 80003e0:	416d      	adcs	r5, r5
 80003e2:	2100      	movs	r1, #0
 80003e4:	3e01      	subs	r6, #1
 80003e6:	1824      	adds	r4, r4, r0
 80003e8:	414d      	adcs	r5, r1
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d006      	beq.n	80003fc <__udivmoddi4+0x108>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d9ee      	bls.n	80003d0 <__udivmoddi4+0xdc>
 80003f2:	3e01      	subs	r6, #1
 80003f4:	1924      	adds	r4, r4, r4
 80003f6:	416d      	adcs	r5, r5
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d1f8      	bne.n	80003ee <__udivmoddi4+0xfa>
 80003fc:	9800      	ldr	r0, [sp, #0]
 80003fe:	9901      	ldr	r1, [sp, #4]
 8000400:	465b      	mov	r3, fp
 8000402:	1900      	adds	r0, r0, r4
 8000404:	4169      	adcs	r1, r5
 8000406:	2b00      	cmp	r3, #0
 8000408:	db24      	blt.n	8000454 <__udivmoddi4+0x160>
 800040a:	002b      	movs	r3, r5
 800040c:	465a      	mov	r2, fp
 800040e:	4644      	mov	r4, r8
 8000410:	40d3      	lsrs	r3, r2
 8000412:	002a      	movs	r2, r5
 8000414:	40e2      	lsrs	r2, r4
 8000416:	001c      	movs	r4, r3
 8000418:	465b      	mov	r3, fp
 800041a:	0015      	movs	r5, r2
 800041c:	2b00      	cmp	r3, #0
 800041e:	db2a      	blt.n	8000476 <__udivmoddi4+0x182>
 8000420:	0026      	movs	r6, r4
 8000422:	409e      	lsls	r6, r3
 8000424:	0033      	movs	r3, r6
 8000426:	0026      	movs	r6, r4
 8000428:	4647      	mov	r7, r8
 800042a:	40be      	lsls	r6, r7
 800042c:	0032      	movs	r2, r6
 800042e:	1a80      	subs	r0, r0, r2
 8000430:	4199      	sbcs	r1, r3
 8000432:	9000      	str	r0, [sp, #0]
 8000434:	9101      	str	r1, [sp, #4]
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x84>
 8000438:	42a3      	cmp	r3, r4
 800043a:	d8bc      	bhi.n	80003b6 <__udivmoddi4+0xc2>
 800043c:	e783      	b.n	8000346 <__udivmoddi4+0x52>
 800043e:	4642      	mov	r2, r8
 8000440:	2320      	movs	r3, #32
 8000442:	2100      	movs	r1, #0
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	2200      	movs	r2, #0
 8000448:	9100      	str	r1, [sp, #0]
 800044a:	9201      	str	r2, [sp, #4]
 800044c:	2201      	movs	r2, #1
 800044e:	40da      	lsrs	r2, r3
 8000450:	9201      	str	r2, [sp, #4]
 8000452:	e786      	b.n	8000362 <__udivmoddi4+0x6e>
 8000454:	4642      	mov	r2, r8
 8000456:	2320      	movs	r3, #32
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	002a      	movs	r2, r5
 800045c:	4646      	mov	r6, r8
 800045e:	409a      	lsls	r2, r3
 8000460:	0023      	movs	r3, r4
 8000462:	40f3      	lsrs	r3, r6
 8000464:	4644      	mov	r4, r8
 8000466:	4313      	orrs	r3, r2
 8000468:	002a      	movs	r2, r5
 800046a:	40e2      	lsrs	r2, r4
 800046c:	001c      	movs	r4, r3
 800046e:	465b      	mov	r3, fp
 8000470:	0015      	movs	r5, r2
 8000472:	2b00      	cmp	r3, #0
 8000474:	dad4      	bge.n	8000420 <__udivmoddi4+0x12c>
 8000476:	4642      	mov	r2, r8
 8000478:	002f      	movs	r7, r5
 800047a:	2320      	movs	r3, #32
 800047c:	0026      	movs	r6, r4
 800047e:	4097      	lsls	r7, r2
 8000480:	1a9b      	subs	r3, r3, r2
 8000482:	40de      	lsrs	r6, r3
 8000484:	003b      	movs	r3, r7
 8000486:	4333      	orrs	r3, r6
 8000488:	e7cd      	b.n	8000426 <__udivmoddi4+0x132>
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__clzsi2>:
 800048c:	211c      	movs	r1, #28
 800048e:	2301      	movs	r3, #1
 8000490:	041b      	lsls	r3, r3, #16
 8000492:	4298      	cmp	r0, r3
 8000494:	d301      	bcc.n	800049a <__clzsi2+0xe>
 8000496:	0c00      	lsrs	r0, r0, #16
 8000498:	3910      	subs	r1, #16
 800049a:	0a1b      	lsrs	r3, r3, #8
 800049c:	4298      	cmp	r0, r3
 800049e:	d301      	bcc.n	80004a4 <__clzsi2+0x18>
 80004a0:	0a00      	lsrs	r0, r0, #8
 80004a2:	3908      	subs	r1, #8
 80004a4:	091b      	lsrs	r3, r3, #4
 80004a6:	4298      	cmp	r0, r3
 80004a8:	d301      	bcc.n	80004ae <__clzsi2+0x22>
 80004aa:	0900      	lsrs	r0, r0, #4
 80004ac:	3904      	subs	r1, #4
 80004ae:	a202      	add	r2, pc, #8	; (adr r2, 80004b8 <__clzsi2+0x2c>)
 80004b0:	5c10      	ldrb	r0, [r2, r0]
 80004b2:	1840      	adds	r0, r0, r1
 80004b4:	4770      	bx	lr
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	02020304 	.word	0x02020304
 80004bc:	01010101 	.word	0x01010101
	...

080004c8 <__clzdi2>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d103      	bne.n	80004d6 <__clzdi2+0xe>
 80004ce:	f7ff ffdd 	bl	800048c <__clzsi2>
 80004d2:	3020      	adds	r0, #32
 80004d4:	e002      	b.n	80004dc <__clzdi2+0x14>
 80004d6:	0008      	movs	r0, r1
 80004d8:	f7ff ffd8 	bl	800048c <__clzsi2>
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <initDrv8830>:
#include "drv8830.h"

extern I2C_HandleTypeDef hi2c1;

uint8_t initDrv8830() {
 80004e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t txData = 0x80;
 80004e2:	2317      	movs	r3, #23
 80004e4:	2280      	movs	r2, #128	; 0x80
 80004e6:	446b      	add	r3, sp
 80004e8:	701a      	strb	r2, [r3, #0]
	// clear fault
	return HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &txData, 1, 5);
 80004ea:	3a7b      	subs	r2, #123	; 0x7b
 80004ec:	9202      	str	r2, [sp, #8]
 80004ee:	3a04      	subs	r2, #4
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	21c0      	movs	r1, #192	; 0xc0
 80004f4:	0013      	movs	r3, r2
 80004f6:	9201      	str	r2, [sp, #4]
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <initDrv8830+0x24>)
 80004fa:	f001 fbbb 	bl	8001c74 <HAL_I2C_Mem_Write>
}
 80004fe:	b007      	add	sp, #28
 8000500:	bd00      	pop	{pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	20000244 	.word	0x20000244

08000508 <setMotor>:
// VSET[7:2] voltage 0x00~0x3F
// D1, D0 direction
uint8_t setMotor(int direction) {
	uint8_t txData;
	uint8_t	result;
	txData = 0x1f << 2 | direction;
 8000508:	2216      	movs	r2, #22
 800050a:	237c      	movs	r3, #124	; 0x7c
uint8_t setMotor(int direction) {
 800050c:	b570      	push	{r4, r5, r6, lr}
	int status;
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 800050e:	2401      	movs	r4, #1
 8000510:	2505      	movs	r5, #5
uint8_t setMotor(int direction) {
 8000512:	b086      	sub	sp, #24
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 8000514:	4e0d      	ldr	r6, [pc, #52]	; (800054c <setMotor+0x44>)
	txData = 0x1f << 2 | direction;
 8000516:	446a      	add	r2, sp
 8000518:	4303      	orrs	r3, r0
 800051a:	7013      	strb	r3, [r2, #0]
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 800051c:	21c0      	movs	r1, #192	; 0xc0
 800051e:	0023      	movs	r3, r4
 8000520:	9502      	str	r5, [sp, #8]
 8000522:	9200      	str	r2, [sp, #0]
 8000524:	0030      	movs	r0, r6
 8000526:	2200      	movs	r2, #0
 8000528:	9401      	str	r4, [sp, #4]
 800052a:	f001 fba3 	bl	8001c74 <HAL_I2C_Mem_Write>
	status = HAL_I2C_Mem_Read(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &result, 1, 5);
 800052e:	9502      	str	r5, [sp, #8]
 8000530:	3512      	adds	r5, #18
 8000532:	446d      	add	r5, sp
 8000534:	0023      	movs	r3, r4
 8000536:	0022      	movs	r2, r4
 8000538:	21c0      	movs	r1, #192	; 0xc0
 800053a:	0030      	movs	r0, r6
 800053c:	9401      	str	r4, [sp, #4]
 800053e:	9500      	str	r5, [sp, #0]
 8000540:	f001 fc76 	bl	8001e30 <HAL_I2C_Mem_Read>
	return result;
 8000544:	7828      	ldrb	r0, [r5, #0]
}
 8000546:	b006      	add	sp, #24
 8000548:	bd70      	pop	{r4, r5, r6, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	20000244 	.word	0x20000244

08000550 <initEns160>:
#include "ens160.h"

extern I2C_HandleTypeDef hi2c1;

void initEns160() {
 8000550:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t txData = ENS160_OpMode_Run;
 8000552:	2217      	movs	r2, #23
 8000554:	2302      	movs	r3, #2
 8000556:	446a      	add	r2, sp
 8000558:	7013      	strb	r3, [r2, #0]
	int status = HAL_I2C_Mem_Write(&hi2c1, ENS160_DeviceAddress, ENS160_OpMode, 1, &txData, 1, 10);
 800055a:	3308      	adds	r3, #8
 800055c:	9302      	str	r3, [sp, #8]
 800055e:	3b09      	subs	r3, #9
 8000560:	9200      	str	r2, [sp, #0]
 8000562:	21a4      	movs	r1, #164	; 0xa4
 8000564:	2210      	movs	r2, #16
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <initEns160+0x24>)
 800056a:	f001 fb83 	bl	8001c74 <HAL_I2C_Mem_Write>
}
 800056e:	b007      	add	sp, #28
 8000570:	bd00      	pop	{pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	20000244 	.word	0x20000244

08000578 <weight_compare>:
}

/* parameters is laundry pointer array`s address                        */
/* origin of qsort function`s function pointer parameter is const void* */
/* return value`s meaning 1: change that`s value 0: don`t change value  */
int weight_compare(const void* mem1, const void* mem2){
 8000578:	b510      	push	{r4, lr}
	laundry_Typedef** a = (laundry_Typedef**)mem1;
	laundry_Typedef** b = (laundry_Typedef**)mem2;

	if((*a)->weight < (*b)->weight) return 1;
 800057a:	6802      	ldr	r2, [r0, #0]
 800057c:	680b      	ldr	r3, [r1, #0]
 800057e:	7914      	ldrb	r4, [r2, #4]
 8000580:	7919      	ldrb	r1, [r3, #4]
 8000582:	2001      	movs	r0, #1
 8000584:	428c      	cmp	r4, r1
 8000586:	d307      	bcc.n	8000598 <weight_compare+0x20>
	else if((*a)->weight == (*b)->weight){
		if((*a)->color > (*b)->color) return 1;
	}
	return 0;
 8000588:	2000      	movs	r0, #0
	else if((*a)->weight == (*b)->weight){
 800058a:	428c      	cmp	r4, r1
 800058c:	d104      	bne.n	8000598 <weight_compare+0x20>
		if((*a)->color > (*b)->color) return 1;
 800058e:	7992      	ldrb	r2, [r2, #6]
 8000590:	7998      	ldrb	r0, [r3, #6]
 8000592:	4290      	cmp	r0, r2
 8000594:	4180      	sbcs	r0, r0
 8000596:	4240      	negs	r0, r0
}
 8000598:	bd10      	pop	{r4, pc}

0800059a <color_compare>:

int color_compare(const void* mem1, const void* mem2){
 800059a:	b510      	push	{r4, lr}
	laundry_Typedef** a = (laundry_Typedef**)mem1;
	laundry_Typedef** b = (laundry_Typedef**)mem2;

	if((*a)->color > (*b)->color) return 1;
 800059c:	6802      	ldr	r2, [r0, #0]
 800059e:	680b      	ldr	r3, [r1, #0]
 80005a0:	7994      	ldrb	r4, [r2, #6]
 80005a2:	7999      	ldrb	r1, [r3, #6]
 80005a4:	2001      	movs	r0, #1
 80005a6:	428c      	cmp	r4, r1
 80005a8:	d807      	bhi.n	80005ba <color_compare+0x20>
	else if((*a)->color == (*b)->color){
		if((*a)->weight < (*b)->weight) return 1;
	}
	return 0;
 80005aa:	2000      	movs	r0, #0
	else if((*a)->color == (*b)->color){
 80005ac:	428c      	cmp	r4, r1
 80005ae:	d104      	bne.n	80005ba <color_compare+0x20>
		if((*a)->weight < (*b)->weight) return 1;
 80005b0:	7910      	ldrb	r0, [r2, #4]
 80005b2:	791b      	ldrb	r3, [r3, #4]
 80005b4:	4298      	cmp	r0, r3
 80005b6:	4180      	sbcs	r0, r0
 80005b8:	4240      	negs	r0, r0
}
 80005ba:	bd10      	pop	{r4, pc}

080005bc <BUZ>:
void BUZ(uint8_t state){
 80005bc:	0003      	movs	r3, r0
	if(state == 1) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005be:	2100      	movs	r1, #0
void BUZ(uint8_t state){
 80005c0:	b510      	push	{r4, lr}
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <BUZ+0x18>)
	if(state == 1) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d102      	bne.n	80005ce <BUZ+0x12>
 80005c8:	f002 fade 	bl	8002b88 <HAL_TIM_PWM_Start>
}
 80005cc:	bd10      	pop	{r4, pc}
	else HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80005ce:	f002 fadf 	bl	8002b90 <HAL_TIM_PWM_Stop>
}
 80005d2:	e7fb      	b.n	80005cc <BUZ+0x10>
 80005d4:	20000298 	.word	0x20000298

080005d8 <nextion_inst_set>:

int (*compare_item[2])(const void* mem1, const void* mem2) = { weight_compare, color_compare };

void nextion_inst_set(char* str){
 80005d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t end_cmd[3] = { 0xFF, 0xFF, 0xFF };
 80005da:	2503      	movs	r5, #3
void nextion_inst_set(char* str){
 80005dc:	0004      	movs	r4, r0
	uint8_t end_cmd[3] = { 0xFF, 0xFF, 0xFF };
 80005de:	002a      	movs	r2, r5
 80005e0:	490a      	ldr	r1, [pc, #40]	; (800060c <nextion_inst_set+0x34>)
 80005e2:	a801      	add	r0, sp, #4
 80005e4:	f002 ff20 	bl	8003428 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 80005e8:	0020      	movs	r0, r4
 80005ea:	f7ff fd8d 	bl	8000108 <strlen>
 80005ee:	4e08      	ldr	r6, [pc, #32]	; (8000610 <nextion_inst_set+0x38>)
 80005f0:	0021      	movs	r1, r4
 80005f2:	b282      	uxth	r2, r0
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	0030      	movs	r0, r6
 80005f8:	f002 fd6f 	bl	80030da <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, end_cmd, 3, 100);
 80005fc:	002a      	movs	r2, r5
 80005fe:	0030      	movs	r0, r6
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	a901      	add	r1, sp, #4
 8000604:	f002 fd69 	bl	80030da <HAL_UART_Transmit>
}
 8000608:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	08004048 	.word	0x08004048
 8000610:	200002d8 	.word	0x200002d8

08000614 <get_touch>:

void get_touch(POS* buf){
 8000614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000616:	0004      	movs	r4, r0
	uint8_t rx_dat[8];

	nextion_inst_set("get tch0");
 8000618:	4818      	ldr	r0, [pc, #96]	; (800067c <get_touch+0x68>)
 800061a:	f7ff ffdd 	bl	80005d8 <nextion_inst_set>
	HAL_UART_Receive(&huart1, rx_dat, 8, 100);
 800061e:	4d18      	ldr	r5, [pc, #96]	; (8000680 <get_touch+0x6c>)
 8000620:	2364      	movs	r3, #100	; 0x64
 8000622:	2208      	movs	r2, #8
 8000624:	4669      	mov	r1, sp
 8000626:	0028      	movs	r0, r5
 8000628:	f002 fdbe 	bl	80031a8 <HAL_UART_Receive>
	if(rx_dat[0] == 0x71) buf->x = rx_dat[2] << 8 | rx_dat[1];
 800062c:	466b      	mov	r3, sp
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b71      	cmp	r3, #113	; 0x71
 8000632:	d105      	bne.n	8000640 <get_touch+0x2c>
 8000634:	466b      	mov	r3, sp
 8000636:	7859      	ldrb	r1, [r3, #1]
 8000638:	789b      	ldrb	r3, [r3, #2]
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	430b      	orrs	r3, r1
 800063e:	8023      	strh	r3, [r4, #0]

	nextion_inst_set("get tch1");
 8000640:	4810      	ldr	r0, [pc, #64]	; (8000684 <get_touch+0x70>)
 8000642:	f7ff ffc9 	bl	80005d8 <nextion_inst_set>
	HAL_UART_Receive(&huart1, rx_dat, 8, 100);
 8000646:	2364      	movs	r3, #100	; 0x64
 8000648:	2208      	movs	r2, #8
 800064a:	4669      	mov	r1, sp
 800064c:	0028      	movs	r0, r5
 800064e:	f002 fdab 	bl	80031a8 <HAL_UART_Receive>
	if(rx_dat[0] == 0x71) buf->y = rx_dat[2] << 8 | rx_dat[1];
 8000652:	466b      	mov	r3, sp
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b71      	cmp	r3, #113	; 0x71
 8000658:	d105      	bne.n	8000666 <get_touch+0x52>
 800065a:	466b      	mov	r3, sp
 800065c:	7859      	ldrb	r1, [r3, #1]
 800065e:	789b      	ldrb	r3, [r3, #2]
 8000660:	021b      	lsls	r3, r3, #8
 8000662:	430b      	orrs	r3, r1
 8000664:	8063      	strh	r3, [r4, #2]

	if(buf->x > 0 && buf->y > 0) buf->touched = 1;
	else buf->touched = 0;
 8000666:	2300      	movs	r3, #0
	if(buf->x > 0 && buf->y > 0) buf->touched = 1;
 8000668:	8822      	ldrh	r2, [r4, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d003      	beq.n	8000676 <get_touch+0x62>
 800066e:	8863      	ldrh	r3, [r4, #2]
 8000670:	1e5a      	subs	r2, r3, #1
 8000672:	4193      	sbcs	r3, r2
	else buf->touched = 0;
 8000674:	b2db      	uxtb	r3, r3
 8000676:	7123      	strb	r3, [r4, #4]
}
 8000678:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	0800404c 	.word	0x0800404c
 8000680:	200002d8 	.word	0x200002d8
 8000684:	08004055 	.word	0x08004055

08000688 <get_slide>:

SLIDE_Typedef get_slide(POS* buf){
 8000688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint8_t befo_touched = 0;
	SLIDE_Typedef res = none;
	static POS befo_pos = { 0, 0, 0 }, cur_pos = { 0, 0, 0 };

	if(befo_touched != buf->touched){ // touched or release check
 800068a:	4d14      	ldr	r5, [pc, #80]	; (80006dc <get_slide+0x54>)
 800068c:	7906      	ldrb	r6, [r0, #4]
 800068e:	782f      	ldrb	r7, [r5, #0]
SLIDE_Typedef get_slide(POS* buf){
 8000690:	0001      	movs	r1, r0
		else{                         // touched
			cur_pos.x = buf->x;
			cur_pos.y = buf->y;
		}
	}
	else res = none;                  // already sensing touch
 8000692:	2400      	movs	r4, #0
 8000694:	4812      	ldr	r0, [pc, #72]	; (80006e0 <get_slide+0x58>)
	if(befo_touched != buf->touched){ // touched or release check
 8000696:	42be      	cmp	r6, r7
 8000698:	d00b      	beq.n	80006b2 <get_slide+0x2a>
		if(befo_touched == 1){        // release
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <get_slide+0x5c>)
 800069c:	2f01      	cmp	r7, #1
 800069e:	d116      	bne.n	80006ce <get_slide+0x46>
			if(cur_pos.y > befo_pos.y){
 80006a0:	885a      	ldrh	r2, [r3, #2]
 80006a2:	8843      	ldrh	r3, [r0, #2]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d90a      	bls.n	80006be <get_slide+0x36>
				if(cur_pos.y - befo_pos.y > 30) res = up_slide;
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	2b1e      	cmp	r3, #30
 80006ac:	dc00      	bgt.n	80006b0 <get_slide+0x28>
 80006ae:	2700      	movs	r7, #0
	SLIDE_Typedef res = none;
 80006b0:	b2fc      	uxtb	r4, r7

	befo_touched = buf->touched;
	befo_pos = *buf;
 80006b2:	2206      	movs	r2, #6
	befo_touched = buf->touched;
 80006b4:	702e      	strb	r6, [r5, #0]
	befo_pos = *buf;
 80006b6:	f002 feb7 	bl	8003428 <memcpy>

	return res;
}
 80006ba:	0020      	movs	r0, r4
 80006bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else res = none;                  // already sensing touch
 80006be:	2400      	movs	r4, #0
			else if(befo_pos.y > cur_pos.y){
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d2f6      	bcs.n	80006b2 <get_slide+0x2a>
				if(befo_pos.y - cur_pos.y > 30) res = down_slide;
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	2b1e      	cmp	r3, #30
 80006c8:	ddf3      	ble.n	80006b2 <get_slide+0x2a>
 80006ca:	3402      	adds	r4, #2
 80006cc:	e7f1      	b.n	80006b2 <get_slide+0x2a>
			cur_pos.x = buf->x;
 80006ce:	880a      	ldrh	r2, [r1, #0]
	SLIDE_Typedef res = none;
 80006d0:	2400      	movs	r4, #0
			cur_pos.x = buf->x;
 80006d2:	801a      	strh	r2, [r3, #0]
			cur_pos.y = buf->y;
 80006d4:	884a      	ldrh	r2, [r1, #2]
 80006d6:	805a      	strh	r2, [r3, #2]
 80006d8:	e7eb      	b.n	80006b2 <get_slide+0x2a>
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	200001d2 	.word	0x200001d2
 80006e0:	200001cc 	.word	0x200001cc
 80006e4:	2000023c 	.word	0x2000023c

080006e8 <area_check>:

uint8_t area_check(POS* pos, AREA_Typedef* area){
 80006e8:	b510      	push	{r4, lr}
	if(pos->x >= area->x0 && pos->x <= area->x1){
 80006ea:	8802      	ldrh	r2, [r0, #0]
 80006ec:	880c      	ldrh	r4, [r1, #0]
uint8_t area_check(POS* pos, AREA_Typedef* area){
 80006ee:	0003      	movs	r3, r0
		if(pos->y >= area->y0 && pos->y <= area->y1){
			return 1;
		}
	}
	return 0;
 80006f0:	2000      	movs	r0, #0
	if(pos->x >= area->x0 && pos->x <= area->x1){
 80006f2:	4294      	cmp	r4, r2
 80006f4:	d80a      	bhi.n	800070c <area_check+0x24>
 80006f6:	888c      	ldrh	r4, [r1, #4]
 80006f8:	4294      	cmp	r4, r2
 80006fa:	d307      	bcc.n	800070c <area_check+0x24>
 80006fc:	885b      	ldrh	r3, [r3, #2]
		if(pos->y >= area->y0 && pos->y <= area->y1){
 80006fe:	884a      	ldrh	r2, [r1, #2]
 8000700:	429a      	cmp	r2, r3
 8000702:	d803      	bhi.n	800070c <area_check+0x24>
 8000704:	88ca      	ldrh	r2, [r1, #6]
 8000706:	429a      	cmp	r2, r3
 8000708:	4140      	adcs	r0, r0
	return 0;
 800070a:	b2c0      	uxtb	r0, r0
}
 800070c:	bd10      	pop	{r4, pc}
	...

08000710 <main_dis>:

void main_dis(void){
 8000710:	b5f0      	push	{r4, r5, r6, r7, lr}

	nextion_inst_set("draw 160,0,319,200,BLACK"); // basket 2
	nextion_inst_set("xstr 161,1,158,30,0,BLACK,WHITE,1,1,1,\"Basket 2\"");

	nextion_inst_set("draw 320,0,479,200,BLACK"); // basket 3
	nextion_inst_set("xstr 321,1,158,30,0,BLACK,WHITE,1,1,1,\"Basket 3\"");
 8000712:	2500      	movs	r5, #0
void main_dis(void){
 8000714:	b085      	sub	sp, #20
	HAL_Delay(100);
 8000716:	2064      	movs	r0, #100	; 0x64
 8000718:	f000 ff6e 	bl	80015f8 <HAL_Delay>
	nextion_inst_set("cls WHITE");
 800071c:	4c36      	ldr	r4, [pc, #216]	; (80007f8 <main_dis+0xe8>)
 800071e:	0020      	movs	r0, r4
 8000720:	f7ff ff5a 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("cls WHITE");
 8000724:	0020      	movs	r0, r4
 8000726:	f7ff ff57 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("cls WHITE");
 800072a:	0020      	movs	r0, r4
 800072c:	f7ff ff54 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("draw 0,0,479,271,BLACK");   // border
 8000730:	4832      	ldr	r0, [pc, #200]	; (80007fc <main_dis+0xec>)
 8000732:	f7ff ff51 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("draw 0,0,159,200,BLACK");   // basket 1
 8000736:	4832      	ldr	r0, [pc, #200]	; (8000800 <main_dis+0xf0>)
 8000738:	f7ff ff4e 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("xstr 1,1,158,30,0,BLACK,WHITE,1,1,1,\"Basket 1\"");
 800073c:	4831      	ldr	r0, [pc, #196]	; (8000804 <main_dis+0xf4>)
 800073e:	f7ff ff4b 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("draw 160,0,319,200,BLACK"); // basket 2
 8000742:	4831      	ldr	r0, [pc, #196]	; (8000808 <main_dis+0xf8>)
 8000744:	f7ff ff48 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("xstr 161,1,158,30,0,BLACK,WHITE,1,1,1,\"Basket 2\"");
 8000748:	4830      	ldr	r0, [pc, #192]	; (800080c <main_dis+0xfc>)
 800074a:	f7ff ff45 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("draw 320,0,479,200,BLACK"); // basket 3
 800074e:	4830      	ldr	r0, [pc, #192]	; (8000810 <main_dis+0x100>)
 8000750:	f7ff ff42 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("xstr 321,1,158,30,0,BLACK,WHITE,1,1,1,\"Basket 3\"");
 8000754:	482f      	ldr	r0, [pc, #188]	; (8000814 <main_dis+0x104>)
 8000756:	f7ff ff3f 	bl	80005d8 <nextion_inst_set>

	for(uint8_t i = 0 ; i < 3 ; i++){
 800075a:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <main_dis+0x108>)
 800075c:	9302      	str	r3, [sp, #8]
 800075e:	23a0      	movs	r3, #160	; 0xa0
 8000760:	436b      	muls	r3, r5
 8000762:	b29b      	uxth	r3, r3
		for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 8000764:	2400      	movs	r4, #0
 8000766:	9303      	str	r3, [sp, #12]
 8000768:	e03a      	b.n	80007e0 <main_dis+0xd0>
			basket[i].laundry[j]->x = j % 2 == 0 ? 80 : 0;
 800076a:	270d      	movs	r7, #13
 800076c:	2301      	movs	r3, #1
 800076e:	2250      	movs	r2, #80	; 0x50
			basket[i].laundry[j]->x += (i * 160);

			basket[i].laundry[j]->y = ((9 - j) / 2) * 40;
 8000770:	2009      	movs	r0, #9
			basket[i].laundry[j]->x = j % 2 == 0 ? 80 : 0;
 8000772:	436f      	muls	r7, r5
 8000774:	4023      	ands	r3, r4
 8000776:	3b01      	subs	r3, #1
 8000778:	193f      	adds	r7, r7, r4
 800077a:	401a      	ands	r2, r3
 800077c:	3702      	adds	r7, #2
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <main_dis+0x108>)
 8000780:	00bf      	lsls	r7, r7, #2
 8000782:	19df      	adds	r7, r3, r7
			basket[i].laundry[j]->x += (i * 160);
 8000784:	9b03      	ldr	r3, [sp, #12]
			basket[i].laundry[j]->y = ((9 - j) / 2) * 40;
 8000786:	1b00      	subs	r0, r0, r4
			basket[i].laundry[j]->x += (i * 160);
 8000788:	18d2      	adds	r2, r2, r3
			basket[i].laundry[j]->y = ((9 - j) / 2) * 40;
 800078a:	0fc3      	lsrs	r3, r0, #31
 800078c:	181b      	adds	r3, r3, r0
 800078e:	2028      	movs	r0, #40	; 0x28
 8000790:	105b      	asrs	r3, r3, #1
 8000792:	4343      	muls	r3, r0
			basket[i].laundry[j]->x = j % 2 == 0 ? 80 : 0;
 8000794:	6879      	ldr	r1, [r7, #4]
			basket[i].laundry[j]->x += (i * 160);
 8000796:	b292      	uxth	r2, r2

			sprintf(bf, "xstr %d,%d,79,39,0,WHITE,%s,1,1,1,\"%dkg\"", basket[i].laundry[j]->x, basket[i].laundry[j]->y, user_color[basket[i].laundry[j]->color], basket[i].laundry[j]->weight);
 8000798:	7908      	ldrb	r0, [r1, #4]
			basket[i].laundry[j]->y = ((9 - j) / 2) * 40;
 800079a:	b29b      	uxth	r3, r3
			basket[i].laundry[j]->x += (i * 160);
 800079c:	800a      	strh	r2, [r1, #0]
			basket[i].laundry[j]->y = ((9 - j) / 2) * 40;
 800079e:	804b      	strh	r3, [r1, #2]
			sprintf(bf, "xstr %d,%d,79,39,0,WHITE,%s,1,1,1,\"%dkg\"", basket[i].laundry[j]->x, basket[i].laundry[j]->y, user_color[basket[i].laundry[j]->color], basket[i].laundry[j]->weight);
 80007a0:	9001      	str	r0, [sp, #4]
 80007a2:	7989      	ldrb	r1, [r1, #6]
 80007a4:	481d      	ldr	r0, [pc, #116]	; (800081c <main_dis+0x10c>)
 80007a6:	0089      	lsls	r1, r1, #2
 80007a8:	4e1d      	ldr	r6, [pc, #116]	; (8000820 <main_dis+0x110>)
 80007aa:	5809      	ldr	r1, [r1, r0]
 80007ac:	0030      	movs	r0, r6
 80007ae:	9100      	str	r1, [sp, #0]
 80007b0:	491c      	ldr	r1, [pc, #112]	; (8000824 <main_dis+0x114>)
 80007b2:	f002 ffdd 	bl	8003770 <siprintf>
			nextion_inst_set(bf);
 80007b6:	0030      	movs	r0, r6
 80007b8:	f7ff ff0e 	bl	80005d8 <nextion_inst_set>
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", basket[i].laundry[j]->x, basket[i].laundry[j]->y, basket[i].laundry[j]->x + 79, basket[i].laundry[j]->y + 39);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	0030      	movs	r0, r6
 80007c0:	881a      	ldrh	r2, [r3, #0]
 80007c2:	885b      	ldrh	r3, [r3, #2]
		for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 80007c4:	3401      	adds	r4, #1
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", basket[i].laundry[j]->x, basket[i].laundry[j]->y, basket[i].laundry[j]->x + 79, basket[i].laundry[j]->y + 39);
 80007c6:	0019      	movs	r1, r3
 80007c8:	3127      	adds	r1, #39	; 0x27
 80007ca:	9101      	str	r1, [sp, #4]
 80007cc:	0011      	movs	r1, r2
 80007ce:	314f      	adds	r1, #79	; 0x4f
 80007d0:	9100      	str	r1, [sp, #0]
 80007d2:	4915      	ldr	r1, [pc, #84]	; (8000828 <main_dis+0x118>)
 80007d4:	f002 ffcc 	bl	8003770 <siprintf>
			nextion_inst_set(bf);
 80007d8:	0030      	movs	r0, r6
 80007da:	f7ff fefd 	bl	80005d8 <nextion_inst_set>
		for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 80007de:	b2e4      	uxtb	r4, r4
 80007e0:	9b02      	ldr	r3, [sp, #8]
 80007e2:	7a9b      	ldrb	r3, [r3, #10]
 80007e4:	42a3      	cmp	r3, r4
 80007e6:	d8c0      	bhi.n	800076a <main_dis+0x5a>
	for(uint8_t i = 0 ; i < 3 ; i++){
 80007e8:	9b02      	ldr	r3, [sp, #8]
 80007ea:	3501      	adds	r5, #1
 80007ec:	3334      	adds	r3, #52	; 0x34
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	2d03      	cmp	r5, #3
 80007f2:	d1b4      	bne.n	800075e <main_dis+0x4e>
		}
	}
}
 80007f4:	b005      	add	sp, #20
 80007f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f8:	0800405e 	.word	0x0800405e
 80007fc:	08004068 	.word	0x08004068
 8000800:	0800407f 	.word	0x0800407f
 8000804:	08004096 	.word	0x08004096
 8000808:	080040c5 	.word	0x080040c5
 800080c:	080040de 	.word	0x080040de
 8000810:	0800410f 	.word	0x0800410f
 8000814:	08004128 	.word	0x08004128
 8000818:	20000000 	.word	0x20000000
 800081c:	20000118 	.word	0x20000118
 8000820:	200001d3 	.word	0x200001d3
 8000824:	08004159 	.word	0x08004159
 8000828:	08004182 	.word	0x08004182

0800082c <kg_draw>:

void kg_draw(void){
 800082c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800082e:	4c0b      	ldr	r4, [pc, #44]	; (800085c <kg_draw+0x30>)
 8000830:	0026      	movs	r6, r4
 8000832:	369c      	adds	r6, #156	; 0x9c
	for(uint8_t i = 0 ; i < 3 ; i++){
		sprintf(bf, "xstr %d,201,159,100,0,%s,WHITE,1,0,1,\"%d/15kg\"", basket[i].area.x0, basket[i].weight > 15 ? "RED" : "BLACK", basket[i].weight);
 8000834:	7a21      	ldrb	r1, [r4, #8]
 8000836:	8822      	ldrh	r2, [r4, #0]
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <kg_draw+0x34>)
 800083a:	290f      	cmp	r1, #15
 800083c:	d800      	bhi.n	8000840 <kg_draw+0x14>
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <kg_draw+0x38>)
 8000840:	4d09      	ldr	r5, [pc, #36]	; (8000868 <kg_draw+0x3c>)
 8000842:	9100      	str	r1, [sp, #0]
 8000844:	0028      	movs	r0, r5
 8000846:	4909      	ldr	r1, [pc, #36]	; (800086c <kg_draw+0x40>)
 8000848:	f002 ff92 	bl	8003770 <siprintf>
	for(uint8_t i = 0 ; i < 3 ; i++){
 800084c:	3434      	adds	r4, #52	; 0x34
		nextion_inst_set(bf);
 800084e:	0028      	movs	r0, r5
 8000850:	f7ff fec2 	bl	80005d8 <nextion_inst_set>
	for(uint8_t i = 0 ; i < 3 ; i++){
 8000854:	42b4      	cmp	r4, r6
 8000856:	d1ed      	bne.n	8000834 <kg_draw+0x8>
	}
}
 8000858:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	20000000 	.word	0x20000000
 8000860:	08004199 	.word	0x08004199
 8000864:	0800434f 	.word	0x0800434f
 8000868:	200001d3 	.word	0x200001d3
 800086c:	0800419d 	.word	0x0800419d

08000870 <button_draw>:

void button_draw(BUTTON_Typedef* buf){
 8000870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000872:	0004      	movs	r4, r0
	if(buf->check.state == 0){
		sprintf(bf, "cir %d,%d,%d,%s", buf->x, buf->y, buf->rad + 1, user_color[gray]);
 8000874:	4e26      	ldr	r6, [pc, #152]	; (8000910 <button_draw+0xa0>)
 8000876:	8802      	ldrh	r2, [r0, #0]
 8000878:	8843      	ldrh	r3, [r0, #2]
 800087a:	69b1      	ldr	r1, [r6, #24]
 800087c:	7900      	ldrb	r0, [r0, #4]
	if(buf->check.state == 0){
 800087e:	7aa5      	ldrb	r5, [r4, #10]
		sprintf(bf, "cir %d,%d,%d,%s", buf->x, buf->y, buf->rad + 1, user_color[gray]);
 8000880:	468c      	mov	ip, r1
 8000882:	3001      	adds	r0, #1
	if(buf->check.state == 0){
 8000884:	2d00      	cmp	r5, #0
 8000886:	d119      	bne.n	80008bc <button_draw+0x4c>
		sprintf(bf, "cir %d,%d,%d,%s", buf->x, buf->y, buf->rad + 1, user_color[gray]);
 8000888:	4d22      	ldr	r5, [pc, #136]	; (8000914 <button_draw+0xa4>)
 800088a:	9101      	str	r1, [sp, #4]
 800088c:	9000      	str	r0, [sp, #0]
 800088e:	4922      	ldr	r1, [pc, #136]	; (8000918 <button_draw+0xa8>)
 8000890:	0028      	movs	r0, r5
 8000892:	f002 ff6d 	bl	8003770 <siprintf>
		nextion_inst_set(bf);
 8000896:	0028      	movs	r0, r5
 8000898:	f7ff fe9e 	bl	80005d8 <nextion_inst_set>
		sprintf(bf, "cirs %d,%d,%d,%s", buf->x, buf->y, buf->rad, user_color[buf->color]);
 800089c:	7a21      	ldrb	r1, [r4, #8]
 800089e:	0028      	movs	r0, r5
 80008a0:	0089      	lsls	r1, r1, #2
 80008a2:	5989      	ldr	r1, [r1, r6]
 80008a4:	8863      	ldrh	r3, [r4, #2]
 80008a6:	9101      	str	r1, [sp, #4]
 80008a8:	7921      	ldrb	r1, [r4, #4]
 80008aa:	8822      	ldrh	r2, [r4, #0]
 80008ac:	9100      	str	r1, [sp, #0]
 80008ae:	491b      	ldr	r1, [pc, #108]	; (800091c <button_draw+0xac>)
 80008b0:	f002 ff5e 	bl	8003770 <siprintf>
		nextion_inst_set(bf);
 80008b4:	0028      	movs	r0, r5
		color |= buf->color == blue ? 31 : 20;

		sprintf(bf, "cir %d,%d,%d,%s", buf->x, buf->y, buf->rad + 1, user_color[gray]);
		nextion_inst_set(bf);
		sprintf(bf, "cirs %d,%d,%d,%d", buf->x, buf->y, buf->rad, color);
		nextion_inst_set(bf);
 80008b6:	f7ff fe8f 	bl	80005d8 <nextion_inst_set>
	}
}
 80008ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		color |= (buf->color == red || buf->color == yellow) ? 31 << 11 : 10 << 11;
 80008bc:	7a26      	ldrb	r6, [r4, #8]
 80008be:	1f35      	subs	r5, r6, #4
 80008c0:	2d01      	cmp	r5, #1
 80008c2:	d822      	bhi.n	800090a <button_draw+0x9a>
		color |= buf->color == yellow ? 62 << 5 : 40 << 5;
 80008c4:	27f8      	movs	r7, #248	; 0xf8
		color |= (buf->color == red || buf->color == yellow) ? 31 << 11 : 10 << 11;
 80008c6:	4d16      	ldr	r5, [pc, #88]	; (8000920 <button_draw+0xb0>)
		color |= buf->color == yellow ? 62 << 5 : 40 << 5;
 80008c8:	2e05      	cmp	r6, #5
 80008ca:	d000      	beq.n	80008ce <button_draw+0x5e>
 80008cc:	27a0      	movs	r7, #160	; 0xa0
 80008ce:	00ff      	lsls	r7, r7, #3
 80008d0:	433d      	orrs	r5, r7
		color |= buf->color == blue ? 31 : 20;
 80008d2:	271f      	movs	r7, #31
 80008d4:	2e01      	cmp	r6, #1
 80008d6:	d000      	beq.n	80008da <button_draw+0x6a>
 80008d8:	3f0b      	subs	r7, #11
		sprintf(bf, "cir %d,%d,%d,%s", buf->x, buf->y, buf->rad + 1, user_color[gray]);
 80008da:	4661      	mov	r1, ip
 80008dc:	4e0d      	ldr	r6, [pc, #52]	; (8000914 <button_draw+0xa4>)
 80008de:	9101      	str	r1, [sp, #4]
 80008e0:	9000      	str	r0, [sp, #0]
 80008e2:	490d      	ldr	r1, [pc, #52]	; (8000918 <button_draw+0xa8>)
 80008e4:	0030      	movs	r0, r6
 80008e6:	f002 ff43 	bl	8003770 <siprintf>
		nextion_inst_set(bf);
 80008ea:	0030      	movs	r0, r6
 80008ec:	f7ff fe74 	bl	80005d8 <nextion_inst_set>
		color |= buf->color == blue ? 31 : 20;
 80008f0:	433d      	orrs	r5, r7
		sprintf(bf, "cirs %d,%d,%d,%d", buf->x, buf->y, buf->rad, color);
 80008f2:	7921      	ldrb	r1, [r4, #4]
 80008f4:	b2ad      	uxth	r5, r5
 80008f6:	9100      	str	r1, [sp, #0]
 80008f8:	0030      	movs	r0, r6
 80008fa:	8863      	ldrh	r3, [r4, #2]
 80008fc:	8822      	ldrh	r2, [r4, #0]
 80008fe:	4909      	ldr	r1, [pc, #36]	; (8000924 <button_draw+0xb4>)
 8000900:	9501      	str	r5, [sp, #4]
 8000902:	f002 ff35 	bl	8003770 <siprintf>
		nextion_inst_set(bf);
 8000906:	0030      	movs	r0, r6
 8000908:	e7d5      	b.n	80008b6 <button_draw+0x46>
		color |= (buf->color == red || buf->color == yellow) ? 31 << 11 : 10 << 11;
 800090a:	25a0      	movs	r5, #160	; 0xa0
 800090c:	01ed      	lsls	r5, r5, #7
 800090e:	e7dd      	b.n	80008cc <button_draw+0x5c>
 8000910:	20000118 	.word	0x20000118
 8000914:	200001d3 	.word	0x200001d3
 8000918:	080041cc 	.word	0x080041cc
 800091c:	080041dc 	.word	0x080041dc
 8000920:	fffff800 	.word	0xfffff800
 8000924:	080041ed 	.word	0x080041ed

08000928 <button_check>:

void button_check(BUTTON_Typedef* buf, POS* curXY){
 8000928:	b530      	push	{r4, r5, lr}
	if((buf->x - buf->rad) <= curXY->x && (buf->x + buf->rad) >= curXY->x){
 800092a:	8802      	ldrh	r2, [r0, #0]
 800092c:	7903      	ldrb	r3, [r0, #4]
 800092e:	880c      	ldrh	r4, [r1, #0]
 8000930:	1ad5      	subs	r5, r2, r3
 8000932:	42a5      	cmp	r5, r4
 8000934:	dc13      	bgt.n	800095e <button_check+0x36>
 8000936:	18d2      	adds	r2, r2, r3
 8000938:	4294      	cmp	r4, r2
 800093a:	dc10      	bgt.n	800095e <button_check+0x36>
		if((buf->y - buf->rad) <= curXY->y && (buf->y + buf->rad) >= curXY->y){
 800093c:	8844      	ldrh	r4, [r0, #2]
 800093e:	884a      	ldrh	r2, [r1, #2]
 8000940:	1ae1      	subs	r1, r4, r3
 8000942:	4291      	cmp	r1, r2
 8000944:	dc0b      	bgt.n	800095e <button_check+0x36>
 8000946:	191b      	adds	r3, r3, r4
 8000948:	429a      	cmp	r2, r3
 800094a:	dc08      	bgt.n	800095e <button_check+0x36>
			if(buf->check.state == 0) { buf->check.cnt++; buf->check.state = 1; }
 800094c:	7a83      	ldrb	r3, [r0, #10]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d104      	bne.n	800095c <button_check+0x34>
 8000952:	7a43      	ldrb	r3, [r0, #9]
 8000954:	3301      	adds	r3, #1
 8000956:	7243      	strb	r3, [r0, #9]
 8000958:	2301      	movs	r3, #1
		}
		else buf->check.state = 0;
 800095a:	7283      	strb	r3, [r0, #10]
	}
	else buf->check.state = 0;
}
 800095c:	bd30      	pop	{r4, r5, pc}
		else buf->check.state = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	e7fb      	b.n	800095a <button_check+0x32>
	...

08000964 <laundry_display>:

void laundry_display(laundry_Typedef* item){
 8000964:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000966:	0004      	movs	r4, r0
	sprintf(bf, "xstr %d,%d,59,39,0,WHITE,%s,1,1,1,\"%dkg\"", item->x, item->y, user_color[item->color],item->weight);
 8000968:	7901      	ldrb	r1, [r0, #4]
 800096a:	8843      	ldrh	r3, [r0, #2]
 800096c:	8802      	ldrh	r2, [r0, #0]
 800096e:	9101      	str	r1, [sp, #4]
 8000970:	7981      	ldrb	r1, [r0, #6]
 8000972:	4811      	ldr	r0, [pc, #68]	; (80009b8 <laundry_display+0x54>)
 8000974:	0089      	lsls	r1, r1, #2
 8000976:	5809      	ldr	r1, [r1, r0]
 8000978:	4d10      	ldr	r5, [pc, #64]	; (80009bc <laundry_display+0x58>)
 800097a:	9100      	str	r1, [sp, #0]
 800097c:	0028      	movs	r0, r5
 800097e:	4910      	ldr	r1, [pc, #64]	; (80009c0 <laundry_display+0x5c>)
 8000980:	f002 fef6 	bl	8003770 <siprintf>
	nextion_inst_set(bf);
 8000984:	0028      	movs	r0, r5
 8000986:	f7ff fe27 	bl	80005d8 <nextion_inst_set>
	sprintf(bf, "draw %d,%d,%d,%d,%s", item->x, item->y, item->x + 59, item->y + 39, item->selected ? "GRAY" : "BLACK");
 800098a:	8822      	ldrh	r2, [r4, #0]
 800098c:	8863      	ldrh	r3, [r4, #2]
 800098e:	0010      	movs	r0, r2
 8000990:	001e      	movs	r6, r3
 8000992:	7964      	ldrb	r4, [r4, #5]
 8000994:	490b      	ldr	r1, [pc, #44]	; (80009c4 <laundry_display+0x60>)
 8000996:	303b      	adds	r0, #59	; 0x3b
 8000998:	3627      	adds	r6, #39	; 0x27
 800099a:	2c00      	cmp	r4, #0
 800099c:	d100      	bne.n	80009a0 <laundry_display+0x3c>
 800099e:	490a      	ldr	r1, [pc, #40]	; (80009c8 <laundry_display+0x64>)
 80009a0:	9102      	str	r1, [sp, #8]
 80009a2:	9601      	str	r6, [sp, #4]
 80009a4:	4909      	ldr	r1, [pc, #36]	; (80009cc <laundry_display+0x68>)
 80009a6:	9000      	str	r0, [sp, #0]
 80009a8:	0028      	movs	r0, r5
 80009aa:	f002 fee1 	bl	8003770 <siprintf>
	nextion_inst_set(bf);
 80009ae:	0028      	movs	r0, r5
 80009b0:	f7ff fe12 	bl	80005d8 <nextion_inst_set>
}
 80009b4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	20000118 	.word	0x20000118
 80009bc:	200001d3 	.word	0x200001d3
 80009c0:	08004203 	.word	0x08004203
 80009c4:	080041fe 	.word	0x080041fe
 80009c8:	0800434f 	.word	0x0800434f
 80009cc:	0800422c 	.word	0x0800422c

080009d0 <add_laundry_dis>:

void add_laundry_dis(void){
 80009d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	nextion_inst_set("cls WHITE");
 80009d2:	4837      	ldr	r0, [pc, #220]	; (8000ab0 <add_laundry_dis+0xe0>)
 80009d4:	f7ff fe00 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("draw 0,0,479,271,BLACK");
 80009d8:	4836      	ldr	r0, [pc, #216]	; (8000ab4 <add_laundry_dis+0xe4>)
 80009da:	f7ff fdfd 	bl	80005d8 <nextion_inst_set>

	nextion_inst_set("draw 0,0,119,200,BLACK");
 80009de:	4836      	ldr	r0, [pc, #216]	; (8000ab8 <add_laundry_dis+0xe8>)
 80009e0:	f7ff fdfa 	bl	80005d8 <nextion_inst_set>
	sprintf(bf, "xstr 1,1,118,30,0,%s,WHITE,1,1,1,\"%d/15kg\"", basket[0].weight > 15 ? "RED" : "BLACK", basket[0].weight);
 80009e4:	4d35      	ldr	r5, [pc, #212]	; (8000abc <add_laundry_dis+0xec>)
 80009e6:	4a36      	ldr	r2, [pc, #216]	; (8000ac0 <add_laundry_dis+0xf0>)
 80009e8:	7a2b      	ldrb	r3, [r5, #8]
 80009ea:	2b0f      	cmp	r3, #15
 80009ec:	d800      	bhi.n	80009f0 <add_laundry_dis+0x20>
 80009ee:	4a35      	ldr	r2, [pc, #212]	; (8000ac4 <add_laundry_dis+0xf4>)
 80009f0:	4c35      	ldr	r4, [pc, #212]	; (8000ac8 <add_laundry_dis+0xf8>)
 80009f2:	4936      	ldr	r1, [pc, #216]	; (8000acc <add_laundry_dis+0xfc>)
 80009f4:	0020      	movs	r0, r4
 80009f6:	f002 febb 	bl	8003770 <siprintf>
	nextion_inst_set(bf);
 80009fa:	0020      	movs	r0, r4
 80009fc:	f7ff fdec 	bl	80005d8 <nextion_inst_set>

	nextion_inst_set("draw 120,0,239,200,BLACK");
 8000a00:	4833      	ldr	r0, [pc, #204]	; (8000ad0 <add_laundry_dis+0x100>)
 8000a02:	f7ff fde9 	bl	80005d8 <nextion_inst_set>
	sprintf(bf, "xstr 121,1,118,30,0,%s,WHITE,1,1,1,\"%d/15kg\"", basket[1].weight > 15 ? "RED" : "BLACK", basket[1].weight);
 8000a06:	002b      	movs	r3, r5
 8000a08:	333c      	adds	r3, #60	; 0x3c
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4a2c      	ldr	r2, [pc, #176]	; (8000ac0 <add_laundry_dis+0xf0>)
 8000a0e:	2b0f      	cmp	r3, #15
 8000a10:	d800      	bhi.n	8000a14 <add_laundry_dis+0x44>
 8000a12:	4a2c      	ldr	r2, [pc, #176]	; (8000ac4 <add_laundry_dis+0xf4>)
 8000a14:	492f      	ldr	r1, [pc, #188]	; (8000ad4 <add_laundry_dis+0x104>)
 8000a16:	0020      	movs	r0, r4
 8000a18:	f002 feaa 	bl	8003770 <siprintf>
	nextion_inst_set(bf);
 8000a1c:	0020      	movs	r0, r4
 8000a1e:	f7ff fddb 	bl	80005d8 <nextion_inst_set>

	nextion_inst_set("draw 240,0,359,200,BLACK");
 8000a22:	482d      	ldr	r0, [pc, #180]	; (8000ad8 <add_laundry_dis+0x108>)
 8000a24:	f7ff fdd8 	bl	80005d8 <nextion_inst_set>
	sprintf(bf, "xstr 241,1,118,30,0,%s,WHITE,1,1,1,\"%d/15kg\"", basket[2].weight > 15 ? "RED" : "BLACK", basket[2].weight);
 8000a28:	002b      	movs	r3, r5
 8000a2a:	3370      	adds	r3, #112	; 0x70
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	4a24      	ldr	r2, [pc, #144]	; (8000ac0 <add_laundry_dis+0xf0>)
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d800      	bhi.n	8000a36 <add_laundry_dis+0x66>
 8000a34:	4a23      	ldr	r2, [pc, #140]	; (8000ac4 <add_laundry_dis+0xf4>)
 8000a36:	4929      	ldr	r1, [pc, #164]	; (8000adc <add_laundry_dis+0x10c>)
 8000a38:	0020      	movs	r0, r4
 8000a3a:	f002 fe99 	bl	8003770 <siprintf>
	nextion_inst_set(bf);
 8000a3e:	0020      	movs	r0, r4
 8000a40:	f7ff fdca 	bl	80005d8 <nextion_inst_set>

	nextion_inst_set("draw 360,0,479,200,BLACK");
 8000a44:	4826      	ldr	r0, [pc, #152]	; (8000ae0 <add_laundry_dis+0x110>)
 8000a46:	f7ff fdc7 	bl	80005d8 <nextion_inst_set>
	for(uint8_t i = 0 ; i < 3 ; i++){
		for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
			basket[i].laundry[j]->x = j % 2 == 0 ? 60 : 0;
			basket[i].laundry[j]->x += (i * 120);

			basket[i].laundry[j]->y = ((9 - j) / 2) * 40;
 8000a4a:	2209      	movs	r2, #9
 8000a4c:	002b      	movs	r3, r5
	nextion_inst_set("draw 360,0,479,200,BLACK");
 8000a4e:	2100      	movs	r1, #0
			basket[i].laundry[j]->x = j % 2 == 0 ? 60 : 0;
 8000a50:	2701      	movs	r7, #1
			basket[i].laundry[j]->y = ((9 - j) / 2) * 40;
 8000a52:	4694      	mov	ip, r2
		for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 8000a54:	7a9a      	ldrb	r2, [r3, #10]
 8000a56:	001c      	movs	r4, r3
 8000a58:	2000      	movs	r0, #0
 8000a5a:	9201      	str	r2, [sp, #4]
 8000a5c:	e010      	b.n	8000a80 <add_laundry_dis+0xb0>
			basket[i].laundry[j]->x = j % 2 == 0 ? 60 : 0;
 8000a5e:	2200      	movs	r2, #0
 8000a60:	423d      	tst	r5, r7
 8000a62:	d100      	bne.n	8000a66 <add_laundry_dis+0x96>
 8000a64:	323c      	adds	r2, #60	; 0x3c
 8000a66:	68e5      	ldr	r5, [r4, #12]
			basket[i].laundry[j]->x += (i * 120);
 8000a68:	1852      	adds	r2, r2, r1
 8000a6a:	802a      	strh	r2, [r5, #0]
			basket[i].laundry[j]->y = ((9 - j) / 2) * 40;
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	1a16      	subs	r6, r2, r0
 8000a70:	0ff2      	lsrs	r2, r6, #31
 8000a72:	1992      	adds	r2, r2, r6
 8000a74:	2628      	movs	r6, #40	; 0x28
 8000a76:	1052      	asrs	r2, r2, #1
 8000a78:	4372      	muls	r2, r6
 8000a7a:	3001      	adds	r0, #1
 8000a7c:	806a      	strh	r2, [r5, #2]
		for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 8000a7e:	3404      	adds	r4, #4
 8000a80:	9a01      	ldr	r2, [sp, #4]
 8000a82:	b2c5      	uxtb	r5, r0
 8000a84:	42aa      	cmp	r2, r5
 8000a86:	d8ea      	bhi.n	8000a5e <add_laundry_dis+0x8e>
	for(uint8_t i = 0 ; i < 3 ; i++){
 8000a88:	22b4      	movs	r2, #180	; 0xb4
 8000a8a:	3178      	adds	r1, #120	; 0x78
 8000a8c:	b289      	uxth	r1, r1
 8000a8e:	3334      	adds	r3, #52	; 0x34
 8000a90:	0052      	lsls	r2, r2, #1
 8000a92:	4291      	cmp	r1, r2
 8000a94:	d1de      	bne.n	8000a54 <add_laundry_dis+0x84>
 8000a96:	4c13      	ldr	r4, [pc, #76]	; (8000ae4 <add_laundry_dis+0x114>)
 8000a98:	0025      	movs	r5, r4
 8000a9a:	3550      	adds	r5, #80	; 0x50
		}
	}

	for(uint8_t i = 0 ; i < 10 ; i++){
		laundry[i].selected = 0;
 8000a9c:	2300      	movs	r3, #0
		laundry_display(&laundry[i]);
 8000a9e:	0020      	movs	r0, r4
		laundry[i].selected = 0;
 8000aa0:	7163      	strb	r3, [r4, #5]
	for(uint8_t i = 0 ; i < 10 ; i++){
 8000aa2:	3408      	adds	r4, #8
		laundry_display(&laundry[i]);
 8000aa4:	f7ff ff5e 	bl	8000964 <laundry_display>
	for(uint8_t i = 0 ; i < 10 ; i++){
 8000aa8:	42a5      	cmp	r5, r4
 8000aaa:	d1f7      	bne.n	8000a9c <add_laundry_dis+0xcc>
	}
}
 8000aac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	0800405e 	.word	0x0800405e
 8000ab4:	08004068 	.word	0x08004068
 8000ab8:	08004240 	.word	0x08004240
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	08004199 	.word	0x08004199
 8000ac4:	0800434f 	.word	0x0800434f
 8000ac8:	200001d3 	.word	0x200001d3
 8000acc:	08004257 	.word	0x08004257
 8000ad0:	08004282 	.word	0x08004282
 8000ad4:	0800429b 	.word	0x0800429b
 8000ad8:	080042c8 	.word	0x080042c8
 8000adc:	080042e1 	.word	0x080042e1
 8000ae0:	0800430e 	.word	0x0800430e
 8000ae4:	200000c8 	.word	0x200000c8

08000ae8 <wash_dis>:

void wash_dis(BASKET_Typedef* now_basket, uint8_t* basket_num){
 8000ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000aea:	000c      	movs	r4, r1
 8000aec:	0005      	movs	r5, r0
	nextion_inst_set("fill 0,0,160,200,WHITE");
 8000aee:	482d      	ldr	r0, [pc, #180]	; (8000ba4 <wash_dis+0xbc>)
 8000af0:	f7ff fd72 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("draw 0,0,160,200,BLACK");
 8000af4:	482c      	ldr	r0, [pc, #176]	; (8000ba8 <wash_dis+0xc0>)
 8000af6:	f7ff fd6f 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("draw 161,0,479,200,BLACK");
 8000afa:	482c      	ldr	r0, [pc, #176]	; (8000bac <wash_dis+0xc4>)
 8000afc:	f7ff fd6c 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("cir 320,110,70,BLACK");
 8000b00:	482b      	ldr	r0, [pc, #172]	; (8000bb0 <wash_dis+0xc8>)
 8000b02:	f7ff fd69 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("cirs 320,110,60,BLUE");
 8000b06:	482b      	ldr	r0, [pc, #172]	; (8000bb4 <wash_dis+0xcc>)
 8000b08:	f7ff fd66 	bl	80005d8 <nextion_inst_set>

	sprintf(bf, "xstr 1,1,159,30,0,BLACK,WHITE,1,1,1,\"Basket %d\"", *basket_num + 1);
 8000b0c:	7822      	ldrb	r2, [r4, #0]
 8000b0e:	4c2a      	ldr	r4, [pc, #168]	; (8000bb8 <wash_dis+0xd0>)
 8000b10:	492a      	ldr	r1, [pc, #168]	; (8000bbc <wash_dis+0xd4>)
 8000b12:	3201      	adds	r2, #1
 8000b14:	0020      	movs	r0, r4
 8000b16:	f002 fe2b 	bl	8003770 <siprintf>
	nextion_inst_set(bf);
 8000b1a:	0020      	movs	r0, r4
 8000b1c:	f7ff fd5c 	bl	80005d8 <nextion_inst_set>

	sprintf(bf, "xstr 162,1,300,30,0,BLACK,WHITE,2,1,1,\"Time: %02ds\"", now_basket->cnt);
 8000b20:	0020      	movs	r0, r4
 8000b22:	7a6a      	ldrb	r2, [r5, #9]
 8000b24:	4926      	ldr	r1, [pc, #152]	; (8000bc0 <wash_dis+0xd8>)
 8000b26:	f002 fe23 	bl	8003770 <siprintf>
	nextion_inst_set(bf);
 8000b2a:	0020      	movs	r0, r4
 8000b2c:	f7ff fd54 	bl	80005d8 <nextion_inst_set>

	for(uint8_t i = 0 ; i < now_basket->laundry_num ; i++){
 8000b30:	2400      	movs	r4, #0
 8000b32:	7aab      	ldrb	r3, [r5, #10]
 8000b34:	42a3      	cmp	r3, r4
 8000b36:	d800      	bhi.n	8000b3a <wash_dis+0x52>
		sprintf(bf, "xstr %d,%d,79,39,0,WHITE,%s,1,1,1,\"%dkg\"", now_basket->laundry[i]->x, now_basket->laundry[i]->y, user_color[now_basket->laundry[i]->color], now_basket->laundry[i]->weight);
		nextion_inst_set(bf);
		sprintf(bf, "draw %d,%d,%d,%d,BLACK", now_basket->laundry[i]->x, now_basket->laundry[i]->y, now_basket->laundry[i]->x + 79, now_basket->laundry[i]->y + 39);
		nextion_inst_set(bf);
	}
}
 8000b38:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		now_basket->laundry[i]->x = i % 2 == 0 ? 80 : 0;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	2250      	movs	r2, #80	; 0x50
 8000b3e:	4023      	ands	r3, r4
 8000b40:	3b01      	subs	r3, #1
 8000b42:	401a      	ands	r2, r3
		now_basket->laundry[i]->y = ((9 - i) / 2) * 40;
 8000b44:	2309      	movs	r3, #9
 8000b46:	1b18      	subs	r0, r3, r4
 8000b48:	0fc3      	lsrs	r3, r0, #31
 8000b4a:	181b      	adds	r3, r3, r0
 8000b4c:	2028      	movs	r0, #40	; 0x28
 8000b4e:	00a7      	lsls	r7, r4, #2
 8000b50:	105b      	asrs	r3, r3, #1
 8000b52:	4343      	muls	r3, r0
 8000b54:	19ef      	adds	r7, r5, r7
		now_basket->laundry[i]->x = i % 2 == 0 ? 80 : 0;
 8000b56:	68f9      	ldr	r1, [r7, #12]
		now_basket->laundry[i]->y = ((9 - i) / 2) * 40;
 8000b58:	b29b      	uxth	r3, r3
		sprintf(bf, "xstr %d,%d,79,39,0,WHITE,%s,1,1,1,\"%dkg\"", now_basket->laundry[i]->x, now_basket->laundry[i]->y, user_color[now_basket->laundry[i]->color], now_basket->laundry[i]->weight);
 8000b5a:	7908      	ldrb	r0, [r1, #4]
		now_basket->laundry[i]->x = i % 2 == 0 ? 80 : 0;
 8000b5c:	800a      	strh	r2, [r1, #0]
		now_basket->laundry[i]->y = ((9 - i) / 2) * 40;
 8000b5e:	804b      	strh	r3, [r1, #2]
		sprintf(bf, "xstr %d,%d,79,39,0,WHITE,%s,1,1,1,\"%dkg\"", now_basket->laundry[i]->x, now_basket->laundry[i]->y, user_color[now_basket->laundry[i]->color], now_basket->laundry[i]->weight);
 8000b60:	9001      	str	r0, [sp, #4]
 8000b62:	7989      	ldrb	r1, [r1, #6]
 8000b64:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <wash_dis+0xdc>)
 8000b66:	0089      	lsls	r1, r1, #2
 8000b68:	4e13      	ldr	r6, [pc, #76]	; (8000bb8 <wash_dis+0xd0>)
 8000b6a:	5809      	ldr	r1, [r1, r0]
 8000b6c:	0030      	movs	r0, r6
 8000b6e:	9100      	str	r1, [sp, #0]
 8000b70:	4915      	ldr	r1, [pc, #84]	; (8000bc8 <wash_dis+0xe0>)
 8000b72:	f002 fdfd 	bl	8003770 <siprintf>
		nextion_inst_set(bf);
 8000b76:	0030      	movs	r0, r6
 8000b78:	f7ff fd2e 	bl	80005d8 <nextion_inst_set>
		sprintf(bf, "draw %d,%d,%d,%d,BLACK", now_basket->laundry[i]->x, now_basket->laundry[i]->y, now_basket->laundry[i]->x + 79, now_basket->laundry[i]->y + 39);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	0030      	movs	r0, r6
 8000b80:	881a      	ldrh	r2, [r3, #0]
 8000b82:	885b      	ldrh	r3, [r3, #2]
	for(uint8_t i = 0 ; i < now_basket->laundry_num ; i++){
 8000b84:	3401      	adds	r4, #1
		sprintf(bf, "draw %d,%d,%d,%d,BLACK", now_basket->laundry[i]->x, now_basket->laundry[i]->y, now_basket->laundry[i]->x + 79, now_basket->laundry[i]->y + 39);
 8000b86:	0019      	movs	r1, r3
 8000b88:	3127      	adds	r1, #39	; 0x27
 8000b8a:	9101      	str	r1, [sp, #4]
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	314f      	adds	r1, #79	; 0x4f
 8000b90:	9100      	str	r1, [sp, #0]
 8000b92:	490e      	ldr	r1, [pc, #56]	; (8000bcc <wash_dis+0xe4>)
 8000b94:	f002 fdec 	bl	8003770 <siprintf>
		nextion_inst_set(bf);
 8000b98:	0030      	movs	r0, r6
 8000b9a:	f7ff fd1d 	bl	80005d8 <nextion_inst_set>
	for(uint8_t i = 0 ; i < now_basket->laundry_num ; i++){
 8000b9e:	b2e4      	uxtb	r4, r4
 8000ba0:	e7c7      	b.n	8000b32 <wash_dis+0x4a>
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	08004327 	.word	0x08004327
 8000ba8:	0800433e 	.word	0x0800433e
 8000bac:	08004355 	.word	0x08004355
 8000bb0:	0800436e 	.word	0x0800436e
 8000bb4:	08004383 	.word	0x08004383
 8000bb8:	200001d3 	.word	0x200001d3
 8000bbc:	08004398 	.word	0x08004398
 8000bc0:	080043c8 	.word	0x080043c8
 8000bc4:	20000118 	.word	0x20000118
 8000bc8:	08004159 	.word	0x08004159
 8000bcc:	08004182 	.word	0x08004182

08000bd0 <task_fuc>:

void task_fuc(void){
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	b08b      	sub	sp, #44	; 0x2c
	POS curXY = { 0, 0 };
 8000bd4:	2206      	movs	r2, #6
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	a806      	add	r0, sp, #24
 8000bda:	f002 fc2e 	bl	800343a <memset>
	MENU_Typedef mode_f = menu;
	uint8_t button_state = 0;

	uint8_t blue_check = 0, red_check = 0;

	nextion_inst_set("cls WHITE");
 8000bde:	4ccc      	ldr	r4, [pc, #816]	; (8000f10 <task_fuc+0x340>)
 8000be0:	0020      	movs	r0, r4
 8000be2:	f7ff fcf9 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("cls WHITE");
 8000be6:	0020      	movs	r0, r4
 8000be8:	f7ff fcf6 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("cls WHITE");
 8000bec:	0020      	movs	r0, r4
 8000bee:	f7ff fcf3 	bl	80005d8 <nextion_inst_set>

	main_dis();
 8000bf2:	f7ff fd8d 	bl	8000710 <main_dis>
	main_dis();
 8000bf6:	f7ff fd8b 	bl	8000710 <main_dis>
	main_dis();
 8000bfa:	f7ff fd89 	bl	8000710 <main_dis>
	uint8_t blue_check = 0, red_check = 0;
 8000bfe:	2300      	movs	r3, #0
	MENU_Typedef mode_f = menu;
 8000c00:	001c      	movs	r4, r3
	uint8_t blue_check = 0, red_check = 0;
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	9300      	str	r3, [sp, #0]
	uint8_t button_state = 0;
 8000c06:	9302      	str	r3, [sp, #8]

	while(1){
		get_touch(&curXY);
 8000c08:	a806      	add	r0, sp, #24
 8000c0a:	f7ff fd03 	bl	8000614 <get_touch>
		slide = get_slide(&curXY);
 8000c0e:	a806      	add	r0, sp, #24
 8000c10:	f7ff fd3a 	bl	8000688 <get_slide>

		if(slide == up_slide) { button_state = 1; nextion_inst_set("fill 0,201,479,100,WHITE"); }
 8000c14:	2801      	cmp	r0, #1
 8000c16:	d177      	bne.n	8000d08 <task_fuc+0x138>
 8000c18:	48be      	ldr	r0, [pc, #760]	; (8000f14 <task_fuc+0x344>)
 8000c1a:	f7ff fcdd 	bl	80005d8 <nextion_inst_set>
 8000c1e:	2301      	movs	r3, #1
		else if(slide == down_slide) { button_state = 0; nextion_inst_set("fill 0,201,479,100,WHITE"); }
 8000c20:	9302      	str	r3, [sp, #8]

		if(mode_f == menu){
 8000c22:	2c00      	cmp	r4, #0
 8000c24:	d000      	beq.n	8000c28 <task_fuc+0x58>
 8000c26:	e089      	b.n	8000d3c <task_fuc+0x16c>
			if(button_data[0].check.state == 1 && blue_check == 0){
 8000c28:	4ebb      	ldr	r6, [pc, #748]	; (8000f18 <task_fuc+0x348>)
 8000c2a:	7ab5      	ldrb	r5, [r6, #10]
 8000c2c:	2d01      	cmp	r5, #1
 8000c2e:	d172      	bne.n	8000d16 <task_fuc+0x146>
 8000c30:	9b00      	ldr	r3, [sp, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d103      	bne.n	8000c3e <task_fuc+0x6e>
				blue_check = 1;
				mode_f = add;
				add_laundry_dis();
 8000c36:	f7ff fecb 	bl	80009d0 <add_laundry_dis>
				mode_f = add;
 8000c3a:	3402      	adds	r4, #2
				blue_check = 1;
 8000c3c:	9500      	str	r5, [sp, #0]
			}
			else if(button_data[0].check.state == 0) blue_check = 0;

			if(button_data[2].check.state == 1 && red_check == 0){
 8000c3e:	1cf3      	adds	r3, r6, #3
 8000c40:	7fdd      	ldrb	r5, [r3, #31]
 8000c42:	2d01      	cmp	r5, #1
 8000c44:	d16e      	bne.n	8000d24 <task_fuc+0x154>
 8000c46:	9b01      	ldr	r3, [sp, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d113      	bne.n	8000c74 <task_fuc+0xa4>
				red_check = 1;
				mode_f = wash;
				wash_m = 1;
 8000c4c:	4cb3      	ldr	r4, [pc, #716]	; (8000f1c <task_fuc+0x34c>)
				nextion_inst_set("cls WHITE");
 8000c4e:	48b0      	ldr	r0, [pc, #704]	; (8000f10 <task_fuc+0x340>)
				wash_m = 1;
 8000c50:	7025      	strb	r5, [r4, #0]
				nextion_inst_set("cls WHITE");
 8000c52:	f7ff fcc1 	bl	80005d8 <nextion_inst_set>

				wash_dis(&basket[0], &wash_m);
 8000c56:	4fb2      	ldr	r7, [pc, #712]	; (8000f20 <task_fuc+0x350>)
 8000c58:	0021      	movs	r1, r4
 8000c5a:	0038      	movs	r0, r7
 8000c5c:	f7ff ff44 	bl	8000ae8 <wash_dis>
				wash_dis(&basket[0], &wash_m);
 8000c60:	0021      	movs	r1, r4
 8000c62:	0038      	movs	r0, r7
 8000c64:	f7ff ff40 	bl	8000ae8 <wash_dis>
				wash_dis(&basket[0], &wash_m);
 8000c68:	0021      	movs	r1, r4
				mode_f = wash;
 8000c6a:	2403      	movs	r4, #3
				wash_dis(&basket[0], &wash_m);
 8000c6c:	0038      	movs	r0, r7
 8000c6e:	f7ff ff3b 	bl	8000ae8 <wash_dis>
				red_check = 1;
 8000c72:	9501      	str	r5, [sp, #4]
			}
			else if(button_data[2].check.state == 0) red_check = 0;

			static uint8_t yellow_check = 0;
			static uint32_t tick = 0;
			if(button_data[1].check.state == 1 && yellow_check == 0){
 8000c74:	7db3      	ldrb	r3, [r6, #22]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d15b      	bne.n	8000d32 <task_fuc+0x162>
 8000c7a:	4aaa      	ldr	r2, [pc, #680]	; (8000f24 <task_fuc+0x354>)
 8000c7c:	7811      	ldrb	r1, [r2, #0]
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d107      	bne.n	8000c92 <task_fuc+0xc2>
				yellow_check = 1;
				if(button_data[1].check.cnt == 1) tick = HAL_GetTick();
 8000c82:	7d71      	ldrb	r1, [r6, #21]
				yellow_check = 1;
 8000c84:	7013      	strb	r3, [r2, #0]
				if(button_data[1].check.cnt == 1) tick = HAL_GetTick();
 8000c86:	2901      	cmp	r1, #1
 8000c88:	d103      	bne.n	8000c92 <task_fuc+0xc2>
 8000c8a:	f000 fcaf 	bl	80015ec <HAL_GetTick>
 8000c8e:	4ba6      	ldr	r3, [pc, #664]	; (8000f28 <task_fuc+0x358>)
 8000c90:	6018      	str	r0, [r3, #0]
			}
			else if(button_data[1].check.state == 0) yellow_check = 0;

			if(button_data[1].check.cnt >= 1){
 8000c92:	7d73      	ldrb	r3, [r6, #21]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d022      	beq.n	8000cde <task_fuc+0x10e>
				if(HAL_GetTick() - tick > 500){
 8000c98:	f000 fca8 	bl	80015ec <HAL_GetTick>
 8000c9c:	4ba2      	ldr	r3, [pc, #648]	; (8000f28 <task_fuc+0x358>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	1ac0      	subs	r0, r0, r3
 8000ca2:	23fa      	movs	r3, #250	; 0xfa
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4298      	cmp	r0, r3
 8000ca8:	d919      	bls.n	8000cde <task_fuc+0x10e>
 8000caa:	4d9d      	ldr	r5, [pc, #628]	; (8000f20 <task_fuc+0x350>)
 8000cac:	002e      	movs	r6, r5
 8000cae:	369c      	adds	r6, #156	; 0x9c
					for(uint8_t i = 0 ; i < 3 ; i++){
						if(basket[i].weight > 15) continue;
 8000cb0:	7a2b      	ldrb	r3, [r5, #8]
 8000cb2:	2b0f      	cmp	r3, #15
 8000cb4:	d80b      	bhi.n	8000cce <task_fuc+0xfe>
						qsort((laundry_Typedef**) &basket[i].laundry, basket[i].laundry_num, sizeof(laundry_Typedef*), compare_item[button_data[1].check.cnt - 1]);
 8000cb6:	0028      	movs	r0, r5
 8000cb8:	4b97      	ldr	r3, [pc, #604]	; (8000f18 <task_fuc+0x348>)
 8000cba:	4a9c      	ldr	r2, [pc, #624]	; (8000f2c <task_fuc+0x35c>)
 8000cbc:	7d5b      	ldrb	r3, [r3, #21]
 8000cbe:	7aa9      	ldrb	r1, [r5, #10]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	589b      	ldr	r3, [r3, r2]
 8000cc6:	300c      	adds	r0, #12
 8000cc8:	2204      	movs	r2, #4
 8000cca:	f002 fbf5 	bl	80034b8 <qsort>
					for(uint8_t i = 0 ; i < 3 ; i++){
 8000cce:	3534      	adds	r5, #52	; 0x34
 8000cd0:	42ae      	cmp	r6, r5
 8000cd2:	d1ed      	bne.n	8000cb0 <task_fuc+0xe0>
					}
					button_data[1].check.cnt = 0;
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4b90      	ldr	r3, [pc, #576]	; (8000f18 <task_fuc+0x348>)
 8000cd8:	755a      	strb	r2, [r3, #21]
					main_dis();
 8000cda:	f7ff fd19 	bl	8000710 <main_dis>
					wash_m = 1;
				}
			}
		}

		if(button_state == 1){
 8000cde:	9b02      	ldr	r3, [sp, #8]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d000      	beq.n	8000ce6 <task_fuc+0x116>
 8000ce4:	e18b      	b.n	8000ffe <task_fuc+0x42e>
 8000ce6:	2500      	movs	r5, #0
 8000ce8:	270c      	movs	r7, #12
			for(uint8_t i = 0 ; i < 3 ; i++){
				button_check(&button_data[i], &curXY);
 8000cea:	003b      	movs	r3, r7
 8000cec:	436b      	muls	r3, r5
 8000cee:	4e8a      	ldr	r6, [pc, #552]	; (8000f18 <task_fuc+0x348>)
 8000cf0:	a906      	add	r1, sp, #24
 8000cf2:	18f6      	adds	r6, r6, r3
 8000cf4:	0030      	movs	r0, r6
 8000cf6:	f7ff fe17 	bl	8000928 <button_check>
			for(uint8_t i = 0 ; i < 3 ; i++){
 8000cfa:	3501      	adds	r5, #1
				button_draw(&button_data[i]);
 8000cfc:	0030      	movs	r0, r6
 8000cfe:	f7ff fdb7 	bl	8000870 <button_draw>
			for(uint8_t i = 0 ; i < 3 ; i++){
 8000d02:	2d03      	cmp	r5, #3
 8000d04:	d1f1      	bne.n	8000cea <task_fuc+0x11a>
 8000d06:	e77f      	b.n	8000c08 <task_fuc+0x38>
		else if(slide == down_slide) { button_state = 0; nextion_inst_set("fill 0,201,479,100,WHITE"); }
 8000d08:	2802      	cmp	r0, #2
 8000d0a:	d18a      	bne.n	8000c22 <task_fuc+0x52>
 8000d0c:	4881      	ldr	r0, [pc, #516]	; (8000f14 <task_fuc+0x344>)
 8000d0e:	f7ff fc63 	bl	80005d8 <nextion_inst_set>
 8000d12:	2300      	movs	r3, #0
 8000d14:	e784      	b.n	8000c20 <task_fuc+0x50>
			else if(button_data[0].check.state == 0) blue_check = 0;
 8000d16:	1e6b      	subs	r3, r5, #1
 8000d18:	419d      	sbcs	r5, r3
 8000d1a:	9b00      	ldr	r3, [sp, #0]
 8000d1c:	426d      	negs	r5, r5
 8000d1e:	402b      	ands	r3, r5
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	e78c      	b.n	8000c3e <task_fuc+0x6e>
			else if(button_data[2].check.state == 0) red_check = 0;
 8000d24:	1e6b      	subs	r3, r5, #1
 8000d26:	419d      	sbcs	r5, r3
 8000d28:	9b01      	ldr	r3, [sp, #4]
 8000d2a:	426d      	negs	r5, r5
 8000d2c:	402b      	ands	r3, r5
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	e7a0      	b.n	8000c74 <task_fuc+0xa4>
			else if(button_data[1].check.state == 0) yellow_check = 0;
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1ad      	bne.n	8000c92 <task_fuc+0xc2>
 8000d36:	4a7b      	ldr	r2, [pc, #492]	; (8000f24 <task_fuc+0x354>)
 8000d38:	7013      	strb	r3, [r2, #0]
 8000d3a:	e7aa      	b.n	8000c92 <task_fuc+0xc2>
		else if(mode_f == add){
 8000d3c:	2c02      	cmp	r4, #2
 8000d3e:	d000      	beq.n	8000d42 <task_fuc+0x172>
 8000d40:	e0b2      	b.n	8000ea8 <task_fuc+0x2d8>
			if(curXY.touched == 1 && touch_check == 0){
 8000d42:	ab06      	add	r3, sp, #24
 8000d44:	791b      	ldrb	r3, [r3, #4]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d000      	beq.n	8000d4c <task_fuc+0x17c>
 8000d4a:	e0a1      	b.n	8000e90 <task_fuc+0x2c0>
 8000d4c:	4b78      	ldr	r3, [pc, #480]	; (8000f30 <task_fuc+0x360>)
 8000d4e:	781e      	ldrb	r6, [r3, #0]
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d127      	bne.n	8000da4 <task_fuc+0x1d4>
				if(curXY.x >= 360){
 8000d54:	23b4      	movs	r3, #180	; 0xb4
 8000d56:	aa06      	add	r2, sp, #24
 8000d58:	8812      	ldrh	r2, [r2, #0]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d335      	bcc.n	8000dcc <task_fuc+0x1fc>
 8000d60:	4d74      	ldr	r5, [pc, #464]	; (8000f34 <task_fuc+0x364>)
 8000d62:	002e      	movs	r6, r5
 8000d64:	3650      	adds	r6, #80	; 0x50
						AREA_Typedef check = { laundry[i].x, laundry[i].y, laundry[i].x + 59, laundry[i].y + 39 };
 8000d66:	882a      	ldrh	r2, [r5, #0]
 8000d68:	886b      	ldrh	r3, [r5, #2]
 8000d6a:	a908      	add	r1, sp, #32
 8000d6c:	800a      	strh	r2, [r1, #0]
 8000d6e:	804b      	strh	r3, [r1, #2]
 8000d70:	323b      	adds	r2, #59	; 0x3b
 8000d72:	3327      	adds	r3, #39	; 0x27
 8000d74:	808a      	strh	r2, [r1, #4]
 8000d76:	80cb      	strh	r3, [r1, #6]
						if(area_check(&curXY, &check) == 1) {
 8000d78:	a806      	add	r0, sp, #24
 8000d7a:	f7ff fcb5 	bl	80006e8 <area_check>
 8000d7e:	2801      	cmp	r0, #1
 8000d80:	d10d      	bne.n	8000d9e <task_fuc+0x1ce>
							if(laundry[i].selected == 0) { laundry[i].selected = 1; cnt++; }
 8000d82:	796b      	ldrb	r3, [r5, #5]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d119      	bne.n	8000dbc <task_fuc+0x1ec>
 8000d88:	4a6b      	ldr	r2, [pc, #428]	; (8000f38 <task_fuc+0x368>)
 8000d8a:	7168      	strb	r0, [r5, #5]
 8000d8c:	7813      	ldrb	r3, [r2, #0]
 8000d8e:	3301      	adds	r3, #1
							else if(laundry[i].selected == 1) { laundry[i].selected = 0; cnt--; }
 8000d90:	7013      	strb	r3, [r2, #0]
							laundry_display(&laundry[i]);
 8000d92:	0028      	movs	r0, r5
 8000d94:	f7ff fde6 	bl	8000964 <laundry_display>
							touch_check = 1;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4b65      	ldr	r3, [pc, #404]	; (8000f30 <task_fuc+0x360>)
 8000d9c:	701a      	strb	r2, [r3, #0]
					for(uint8_t i = 0 ; i < 10 ; i++){
 8000d9e:	3508      	adds	r5, #8
 8000da0:	42b5      	cmp	r5, r6
 8000da2:	d1e0      	bne.n	8000d66 <task_fuc+0x196>
			if(button_data[0].check.state == 1 && blue_check == 0){
 8000da4:	4b5c      	ldr	r3, [pc, #368]	; (8000f18 <task_fuc+0x348>)
 8000da6:	7a9d      	ldrb	r5, [r3, #10]
 8000da8:	2d01      	cmp	r5, #1
 8000daa:	d176      	bne.n	8000e9a <task_fuc+0x2ca>
 8000dac:	9b00      	ldr	r3, [sp, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d195      	bne.n	8000cde <task_fuc+0x10e>
				main_dis();
 8000db2:	f7ff fcad 	bl	8000710 <main_dis>
				mode_f = menu;
 8000db6:	9c00      	ldr	r4, [sp, #0]
				blue_check = 1;
 8000db8:	9500      	str	r5, [sp, #0]
				mode_f = menu;
 8000dba:	e790      	b.n	8000cde <task_fuc+0x10e>
							else if(laundry[i].selected == 1) { laundry[i].selected = 0; cnt--; }
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d1e8      	bne.n	8000d92 <task_fuc+0x1c2>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	4a5d      	ldr	r2, [pc, #372]	; (8000f38 <task_fuc+0x368>)
 8000dc4:	716b      	strb	r3, [r5, #5]
 8000dc6:	7813      	ldrb	r3, [r2, #0]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	e7e1      	b.n	8000d90 <task_fuc+0x1c0>
				else if(cnt > 0){
 8000dcc:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <task_fuc+0x368>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0e7      	beq.n	8000da4 <task_fuc+0x1d4>
 8000dd4:	4d52      	ldr	r5, [pc, #328]	; (8000f20 <task_fuc+0x350>)
						AREA_Typedef area = { 120 * i, 0, 120 * (i + 1), 200 };
 8000dd6:	2378      	movs	r3, #120	; 0x78
 8000dd8:	4373      	muls	r3, r6
 8000dda:	a908      	add	r1, sp, #32
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	9303      	str	r3, [sp, #12]
 8000de0:	800b      	strh	r3, [r1, #0]
 8000de2:	3378      	adds	r3, #120	; 0x78
 8000de4:	2700      	movs	r7, #0
 8000de6:	808b      	strh	r3, [r1, #4]
 8000de8:	23c8      	movs	r3, #200	; 0xc8
 8000dea:	804f      	strh	r7, [r1, #2]
 8000dec:	80cb      	strh	r3, [r1, #6]
						if(area_check(&curXY, &area) == 1){
 8000dee:	a806      	add	r0, sp, #24
 8000df0:	f7ff fc7a 	bl	80006e8 <area_check>
 8000df4:	2801      	cmp	r0, #1
 8000df6:	d13f      	bne.n	8000e78 <task_fuc+0x2a8>
									basket[i].laundry[basket[i].laundry_num] = &laundry[j];
 8000df8:	210d      	movs	r1, #13
						AREA_Typedef area = { 120 * i, 0, 120 * (i + 1), 200 };
 8000dfa:	003a      	movs	r2, r7
 8000dfc:	4b4e      	ldr	r3, [pc, #312]	; (8000f38 <task_fuc+0x368>)
									basket[i].laundry[basket[i].laundry_num] = &laundry[j];
 8000dfe:	4371      	muls	r1, r6
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	9105      	str	r1, [sp, #20]
 8000e04:	469c      	mov	ip, r3
 8000e06:	4b4b      	ldr	r3, [pc, #300]	; (8000f34 <task_fuc+0x364>)
								if(laundry[j].selected == 1){
 8000e08:	795f      	ldrb	r7, [r3, #5]
 8000e0a:	2f01      	cmp	r7, #1
 8000e0c:	d129      	bne.n	8000e62 <task_fuc+0x292>
									basket[i].laundry[basket[i].laundry_num] = &laundry[j];
 8000e0e:	7aa9      	ldrb	r1, [r5, #10]
 8000e10:	9a05      	ldr	r2, [sp, #20]
 8000e12:	4843      	ldr	r0, [pc, #268]	; (8000f20 <task_fuc+0x350>)
 8000e14:	1852      	adds	r2, r2, r1
 8000e16:	3202      	adds	r2, #2
 8000e18:	0092      	lsls	r2, r2, #2
 8000e1a:	1882      	adds	r2, r0, r2
 8000e1c:	6053      	str	r3, [r2, #4]
									laundry[j].x = (basket[i].laundry_num % 2) == 0 ? 60 : 1;
 8000e1e:	223c      	movs	r2, #60	; 0x3c
 8000e20:	4239      	tst	r1, r7
 8000e22:	d000      	beq.n	8000e26 <task_fuc+0x256>
 8000e24:	3a3b      	subs	r2, #59	; 0x3b
									laundry[j].x += (i * 120);
 8000e26:	9803      	ldr	r0, [sp, #12]
 8000e28:	1812      	adds	r2, r2, r0
 8000e2a:	801a      	strh	r2, [r3, #0]
									laundry[j].y = ((9 - basket[i].laundry_num) / 2) * 40;
 8000e2c:	2209      	movs	r2, #9
 8000e2e:	1a50      	subs	r0, r2, r1
 8000e30:	0fc2      	lsrs	r2, r0, #31
 8000e32:	1812      	adds	r2, r2, r0
 8000e34:	2028      	movs	r0, #40	; 0x28
 8000e36:	1052      	asrs	r2, r2, #1
 8000e38:	4342      	muls	r2, r0
									cnt--;
 8000e3a:	4660      	mov	r0, ip
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	b2c0      	uxtb	r0, r0
									laundry[j].y = ((9 - basket[i].laundry_num) / 2) * 40;
 8000e40:	805a      	strh	r2, [r3, #2]
									laundry[j].selected = 0;
 8000e42:	2200      	movs	r2, #0
									cnt--;
 8000e44:	4684      	mov	ip, r0
									for(uint8_t k = 0 ; k < basket[i].laundry_num ; k++)
 8000e46:	0028      	movs	r0, r5
									basket[i].laundry_num++;
 8000e48:	3101      	adds	r1, #1
 8000e4a:	b2c9      	uxtb	r1, r1
									laundry[j].selected = 0;
 8000e4c:	715a      	strb	r2, [r3, #5]
									basket[i].laundry_num++;
 8000e4e:	9104      	str	r1, [sp, #16]
 8000e50:	72a9      	strb	r1, [r5, #10]
									basket[i].weight = 0;
 8000e52:	722a      	strb	r2, [r5, #8]
									for(uint8_t k = 0 ; k < basket[i].laundry_num ; k++)
 8000e54:	9904      	ldr	r1, [sp, #16]
										basket[i].weight += basket[i].laundry[k]->weight;
 8000e56:	7a2f      	ldrb	r7, [r5, #8]
									for(uint8_t k = 0 ; k < basket[i].laundry_num ; k++)
 8000e58:	3004      	adds	r0, #4
 8000e5a:	4291      	cmp	r1, r2
 8000e5c:	d811      	bhi.n	8000e82 <task_fuc+0x2b2>
									basket[i].cnt = basket[i].weight;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	726f      	strb	r7, [r5, #9]
							for(uint8_t j = 0 ; j < 10 ; j++){
 8000e62:	4936      	ldr	r1, [pc, #216]	; (8000f3c <task_fuc+0x36c>)
 8000e64:	3308      	adds	r3, #8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d1ce      	bne.n	8000e08 <task_fuc+0x238>
 8000e6a:	2a00      	cmp	r2, #0
 8000e6c:	d002      	beq.n	8000e74 <task_fuc+0x2a4>
 8000e6e:	4662      	mov	r2, ip
 8000e70:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <task_fuc+0x368>)
 8000e72:	701a      	strb	r2, [r3, #0]
							add_laundry_dis();
 8000e74:	f7ff fdac 	bl	80009d0 <add_laundry_dis>
					for(uint8_t i = 0 ; i < 3 ; i++){
 8000e78:	3601      	adds	r6, #1
 8000e7a:	3534      	adds	r5, #52	; 0x34
 8000e7c:	2e03      	cmp	r6, #3
 8000e7e:	d1aa      	bne.n	8000dd6 <task_fuc+0x206>
 8000e80:	e790      	b.n	8000da4 <task_fuc+0x1d4>
										basket[i].weight += basket[i].laundry[k]->weight;
 8000e82:	6881      	ldr	r1, [r0, #8]
									for(uint8_t k = 0 ; k < basket[i].laundry_num ; k++)
 8000e84:	3201      	adds	r2, #1
										basket[i].weight += basket[i].laundry[k]->weight;
 8000e86:	7909      	ldrb	r1, [r1, #4]
									for(uint8_t k = 0 ; k < basket[i].laundry_num ; k++)
 8000e88:	b2d2      	uxtb	r2, r2
										basket[i].weight += basket[i].laundry[k]->weight;
 8000e8a:	187f      	adds	r7, r7, r1
 8000e8c:	722f      	strb	r7, [r5, #8]
									for(uint8_t k = 0 ; k < basket[i].laundry_num ; k++)
 8000e8e:	e7e1      	b.n	8000e54 <task_fuc+0x284>
			else if(curXY.touched == 0) touch_check = 0;
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d187      	bne.n	8000da4 <task_fuc+0x1d4>
 8000e94:	4a26      	ldr	r2, [pc, #152]	; (8000f30 <task_fuc+0x360>)
 8000e96:	7013      	strb	r3, [r2, #0]
 8000e98:	e784      	b.n	8000da4 <task_fuc+0x1d4>
			else if(button_data[0].check.state == 0) blue_check = 0;
 8000e9a:	1e6b      	subs	r3, r5, #1
 8000e9c:	419d      	sbcs	r5, r3
 8000e9e:	9b00      	ldr	r3, [sp, #0]
 8000ea0:	426d      	negs	r5, r5
 8000ea2:	402b      	ands	r3, r5
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	e71a      	b.n	8000cde <task_fuc+0x10e>
		else if(mode_f == wash){
 8000ea8:	2c03      	cmp	r4, #3
 8000eaa:	d000      	beq.n	8000eae <task_fuc+0x2de>
 8000eac:	e717      	b.n	8000cde <task_fuc+0x10e>
			if(now_basket < 3) setMotor(DRV8830_CW);
 8000eae:	4d24      	ldr	r5, [pc, #144]	; (8000f40 <task_fuc+0x370>)
 8000eb0:	782b      	ldrb	r3, [r5, #0]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d802      	bhi.n	8000ebc <task_fuc+0x2ec>
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f7ff fb26 	bl	8000508 <setMotor>
									basket[i].cnt = basket[i].weight;
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	782b      	ldrb	r3, [r5, #0]
			while(basket[now_basket].cnt == 0 || basket[now_basket].cnt > 15){
 8000ec0:	4817      	ldr	r0, [pc, #92]	; (8000f20 <task_fuc+0x350>)
 8000ec2:	2234      	movs	r2, #52	; 0x34
 8000ec4:	435a      	muls	r2, r3
 8000ec6:	1882      	adds	r2, r0, r2
 8000ec8:	7a52      	ldrb	r2, [r2, #9]
 8000eca:	3a01      	subs	r2, #1
 8000ecc:	2a0e      	cmp	r2, #14
 8000ece:	d839      	bhi.n	8000f44 <task_fuc+0x374>
 8000ed0:	2900      	cmp	r1, #0
 8000ed2:	d13c      	bne.n	8000f4e <task_fuc+0x37e>
			wash_dis(&basket[now_basket], &now_basket);
 8000ed4:	2734      	movs	r7, #52	; 0x34
 8000ed6:	7828      	ldrb	r0, [r5, #0]
 8000ed8:	4e11      	ldr	r6, [pc, #68]	; (8000f20 <task_fuc+0x350>)
 8000eda:	4378      	muls	r0, r7
 8000edc:	0029      	movs	r1, r5
 8000ede:	1980      	adds	r0, r0, r6
 8000ee0:	f7ff fe02 	bl	8000ae8 <wash_dis>
			wash_dis(&basket[now_basket], &now_basket);
 8000ee4:	7828      	ldrb	r0, [r5, #0]
 8000ee6:	0029      	movs	r1, r5
 8000ee8:	4378      	muls	r0, r7
 8000eea:	1980      	adds	r0, r0, r6
 8000eec:	f7ff fdfc 	bl	8000ae8 <wash_dis>
			wash_dis(&basket[now_basket], &now_basket);
 8000ef0:	7828      	ldrb	r0, [r5, #0]
 8000ef2:	0029      	movs	r1, r5
 8000ef4:	4378      	muls	r0, r7
 8000ef6:	1980      	adds	r0, r0, r6
 8000ef8:	f7ff fdf6 	bl	8000ae8 <wash_dis>
			if(now_basket >= 3){
 8000efc:	7828      	ldrb	r0, [r5, #0]
 8000efe:	2802      	cmp	r0, #2
 8000f00:	d949      	bls.n	8000f96 <task_fuc+0x3c6>
						basket[i].laundry[j]->x = 500;
 8000f02:	20fa      	movs	r0, #250	; 0xfa
					for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 8000f04:	2100      	movs	r1, #0
						basket[i].laundry[j]->x = 500;
 8000f06:	0040      	lsls	r0, r0, #1
					for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 8000f08:	0032      	movs	r2, r6
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	7ab7      	ldrb	r7, [r6, #10]
 8000f0e:	e026      	b.n	8000f5e <task_fuc+0x38e>
 8000f10:	0800405e 	.word	0x0800405e
 8000f14:	080043fc 	.word	0x080043fc
 8000f18:	2000009c 	.word	0x2000009c
 8000f1c:	20000370 	.word	0x20000370
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000371 	.word	0x20000371
 8000f28:	20000368 	.word	0x20000368
 8000f2c:	200000c0 	.word	0x200000c0
 8000f30:	2000036c 	.word	0x2000036c
 8000f34:	200000c8 	.word	0x200000c8
 8000f38:	2000023b 	.word	0x2000023b
 8000f3c:	20000118 	.word	0x20000118
 8000f40:	20000360 	.word	0x20000360
				now_basket++;
 8000f44:	3301      	adds	r3, #1
 8000f46:	b2db      	uxtb	r3, r3
				if(now_basket >= 3) break;
 8000f48:	2101      	movs	r1, #1
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d9b9      	bls.n	8000ec2 <task_fuc+0x2f2>
 8000f4e:	702b      	strb	r3, [r5, #0]
 8000f50:	e7c0      	b.n	8000ed4 <task_fuc+0x304>
						basket[i].laundry[j]->x = 500;
 8000f52:	6895      	ldr	r5, [r2, #8]
					for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 8000f54:	3301      	adds	r3, #1
						basket[i].laundry[j]->x = 500;
 8000f56:	8028      	strh	r0, [r5, #0]
						basket[i].laundry[j]->y = 500;
 8000f58:	8068      	strh	r0, [r5, #2]
					for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 8000f5a:	b2db      	uxtb	r3, r3
						basket[i].laundry[j] = NULL;
 8000f5c:	6091      	str	r1, [r2, #8]
					for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 8000f5e:	3204      	adds	r2, #4
 8000f60:	429f      	cmp	r7, r3
 8000f62:	d1f6      	bne.n	8000f52 <task_fuc+0x382>
				for(uint8_t i = 0 ; i < 3 ; i++){
 8000f64:	3c01      	subs	r4, #1
 8000f66:	b2e4      	uxtb	r4, r4
					basket[i].cnt = 0;
 8000f68:	7271      	strb	r1, [r6, #9]
					basket[i].laundry_num = 0;
 8000f6a:	72b1      	strb	r1, [r6, #10]
					basket[i].weight = 0;
 8000f6c:	7231      	strb	r1, [r6, #8]
				for(uint8_t i = 0 ; i < 3 ; i++){
 8000f6e:	3634      	adds	r6, #52	; 0x34
 8000f70:	2c00      	cmp	r4, #0
 8000f72:	d1c9      	bne.n	8000f08 <task_fuc+0x338>
				main_dis();
 8000f74:	f7ff fbcc 	bl	8000710 <main_dis>
				main_dis();
 8000f78:	f7ff fbca 	bl	8000710 <main_dis>
				main_dis();
 8000f7c:	f7ff fbc8 	bl	8000710 <main_dis>
				buz_on = 1;
 8000f80:	2201      	movs	r2, #1
				wash_m = 0;
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <task_fuc+0x434>)
				setMotor(DRV8830_STOP);
 8000f84:	0020      	movs	r0, r4
				wash_m = 0;
 8000f86:	701c      	strb	r4, [r3, #0]
				now_basket = 0;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <task_fuc+0x438>)
 8000f8a:	701c      	strb	r4, [r3, #0]
				buz_on = 1;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <task_fuc+0x43c>)
 8000f8e:	701a      	strb	r2, [r3, #0]
				setMotor(DRV8830_STOP);
 8000f90:	f7ff faba 	bl	8000508 <setMotor>
 8000f94:	e6a3      	b.n	8000cde <task_fuc+0x10e>
			else if(wash_cnt >= 1000){
 8000f96:	27fa      	movs	r7, #250	; 0xfa
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <task_fuc+0x440>)
 8000f9a:	00bf      	lsls	r7, r7, #2
 8000f9c:	881a      	ldrh	r2, [r3, #0]
 8000f9e:	42ba      	cmp	r2, r7
 8000fa0:	d200      	bcs.n	8000fa4 <task_fuc+0x3d4>
 8000fa2:	e69c      	b.n	8000cde <task_fuc+0x10e>
				wash_cnt = 0;
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	801a      	strh	r2, [r3, #0]
				basket[now_basket].cnt--;
 8000fa8:	2334      	movs	r3, #52	; 0x34
 8000faa:	4358      	muls	r0, r3
 8000fac:	1830      	adds	r0, r6, r0
 8000fae:	7a43      	ldrb	r3, [r0, #9]
				wash_dis(&basket[now_basket], &now_basket);
 8000fb0:	0029      	movs	r1, r5
				basket[now_basket].cnt--;
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	7243      	strb	r3, [r0, #9]
				wash_dis(&basket[now_basket], &now_basket);
 8000fb6:	f7ff fd97 	bl	8000ae8 <wash_dis>
				wash_dis(&basket[now_basket], &now_basket);
 8000fba:	2334      	movs	r3, #52	; 0x34
 8000fbc:	7828      	ldrb	r0, [r5, #0]
 8000fbe:	0029      	movs	r1, r5
 8000fc0:	4358      	muls	r0, r3
 8000fc2:	1980      	adds	r0, r0, r6
 8000fc4:	f7ff fd90 	bl	8000ae8 <wash_dis>
				wash_dis(&basket[now_basket], &now_basket);
 8000fc8:	2334      	movs	r3, #52	; 0x34
 8000fca:	7828      	ldrb	r0, [r5, #0]
 8000fcc:	0029      	movs	r1, r5
 8000fce:	4358      	muls	r0, r3
 8000fd0:	1980      	adds	r0, r0, r6
 8000fd2:	f7ff fd89 	bl	8000ae8 <wash_dis>
				if(basket[now_basket].cnt == 0) {
 8000fd6:	2234      	movs	r2, #52	; 0x34
 8000fd8:	782b      	ldrb	r3, [r5, #0]
 8000fda:	435a      	muls	r2, r3
 8000fdc:	18b6      	adds	r6, r6, r2
 8000fde:	7a70      	ldrb	r0, [r6, #9]
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d000      	beq.n	8000fe6 <task_fuc+0x416>
 8000fe4:	e67b      	b.n	8000cde <task_fuc+0x10e>
					now_basket++;
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	702b      	strb	r3, [r5, #0]
					wash_m = 0;
 8000fea:	4d06      	ldr	r5, [pc, #24]	; (8001004 <task_fuc+0x434>)
 8000fec:	7028      	strb	r0, [r5, #0]
					setMotor(DRV8830_STOP);
 8000fee:	f7ff fa8b 	bl	8000508 <setMotor>
					HAL_Delay(1000);
 8000ff2:	0038      	movs	r0, r7
 8000ff4:	f000 fb00 	bl	80015f8 <HAL_Delay>
					wash_m = 1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	702b      	strb	r3, [r5, #0]
 8000ffc:	e66f      	b.n	8000cde <task_fuc+0x10e>
			}
		}
		else kg_draw();
 8000ffe:	f7ff fc15 	bl	800082c <kg_draw>
 8001002:	e601      	b.n	8000c08 <task_fuc+0x38>
 8001004:	20000370 	.word	0x20000370
 8001008:	20000360 	.word	0x20000360
 800100c:	2000023a 	.word	0x2000023a
 8001010:	2000036e 	.word	0x2000036e

08001014 <HAL_SYSTICK_Callback>:
	}
}

void HAL_SYSTICK_Callback(void){
 8001014:	b510      	push	{r4, lr}
	if(buz_on) buz_cnt++;
 8001016:	4a15      	ldr	r2, [pc, #84]	; (800106c <HAL_SYSTICK_Callback+0x58>)
 8001018:	7811      	ldrb	r1, [r2, #0]
 800101a:	2900      	cmp	r1, #0
 800101c:	d003      	beq.n	8001026 <HAL_SYSTICK_Callback+0x12>
 800101e:	4814      	ldr	r0, [pc, #80]	; (8001070 <HAL_SYSTICK_Callback+0x5c>)
 8001020:	8803      	ldrh	r3, [r0, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	8003      	strh	r3, [r0, #0]
	if(wash_m) wash_cnt++;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_SYSTICK_Callback+0x60>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_SYSTICK_Callback+0x22>
 800102e:	4812      	ldr	r0, [pc, #72]	; (8001078 <HAL_SYSTICK_Callback+0x64>)
 8001030:	8803      	ldrh	r3, [r0, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	8003      	strh	r3, [r0, #0]

	if(buz_on == 1){
 8001036:	2901      	cmp	r1, #1
 8001038:	d107      	bne.n	800104a <HAL_SYSTICK_Callback+0x36>
		if(buz_cnt < 250) BUZ(1);
 800103a:	490d      	ldr	r1, [pc, #52]	; (8001070 <HAL_SYSTICK_Callback+0x5c>)
 800103c:	880b      	ldrh	r3, [r1, #0]
 800103e:	2bf9      	cmp	r3, #249	; 0xf9
 8001040:	d804      	bhi.n	800104c <HAL_SYSTICK_Callback+0x38>
	if(state == 1) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001042:	2100      	movs	r1, #0
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <HAL_SYSTICK_Callback+0x68>)
 8001046:	f001 fd9f 	bl	8002b88 <HAL_TIM_PWM_Start>
		else{
			buz_on = buz_cnt = 0;
			BUZ(0);
		}
	}
}
 800104a:	bd10      	pop	{r4, pc}
		else if(buz_cnt < 500) BUZ(0);
 800104c:	20fa      	movs	r0, #250	; 0xfa
 800104e:	0040      	lsls	r0, r0, #1
 8001050:	4283      	cmp	r3, r0
 8001052:	d203      	bcs.n	800105c <HAL_SYSTICK_Callback+0x48>
 8001054:	2000      	movs	r0, #0
			BUZ(0);
 8001056:	f7ff fab1 	bl	80005bc <BUZ>
}
 800105a:	e7f6      	b.n	800104a <HAL_SYSTICK_Callback+0x36>
		else if(buz_cnt < 750) BUZ(1);
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <HAL_SYSTICK_Callback+0x6c>)
 800105e:	4283      	cmp	r3, r0
 8001060:	d9ef      	bls.n	8001042 <HAL_SYSTICK_Callback+0x2e>
			buz_on = buz_cnt = 0;
 8001062:	2000      	movs	r0, #0
 8001064:	8008      	strh	r0, [r1, #0]
 8001066:	7010      	strb	r0, [r2, #0]
 8001068:	e7f5      	b.n	8001056 <HAL_SYSTICK_Callback+0x42>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	2000023a 	.word	0x2000023a
 8001070:	20000238 	.word	0x20000238
 8001074:	20000370 	.word	0x20000370
 8001078:	2000036e 	.word	0x2000036e
 800107c:	20000298 	.word	0x20000298
 8001080:	000002ed 	.word	0x000002ed

08001084 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001084:	b510      	push	{r4, lr}
 8001086:	b09c      	sub	sp, #112	; 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001088:	2224      	movs	r2, #36	; 0x24
 800108a:	2100      	movs	r1, #0
 800108c:	a80f      	add	r0, sp, #60	; 0x3c
 800108e:	f002 f9d4 	bl	800343a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001092:	2214      	movs	r2, #20
 8001094:	2100      	movs	r1, #0
 8001096:	a801      	add	r0, sp, #4
 8001098:	f002 f9cf 	bl	800343a <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800109c:	2220      	movs	r2, #32
 800109e:	2100      	movs	r1, #0
 80010a0:	a806      	add	r0, sp, #24
 80010a2:	f002 f9ca 	bl	800343a <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a6:	491d      	ldr	r1, [pc, #116]	; (800111c <SystemClock_Config+0x98>)
 80010a8:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <SystemClock_Config+0x9c>)
 80010aa:	680b      	ldr	r3, [r1, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ac:	2401      	movs	r4, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ae:	401a      	ands	r2, r3
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4313      	orrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010bc:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010be:	2300      	movs	r3, #0
 80010c0:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	02db      	lsls	r3, r3, #11
 80010c6:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80010c8:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ca:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80010cc:	03db      	lsls	r3, r3, #15
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d0:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d2:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80010d4:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d6:	f001 f81f 	bl	8002118 <HAL_RCC_OscConfig>
 80010da:	2800      	cmp	r0, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010de:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010e0:	e7fe      	b.n	80010e0 <SystemClock_Config+0x5c>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e4:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e8:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ea:	3b0c      	subs	r3, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ec:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010ee:	0021      	movs	r1, r4
 80010f0:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f2:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010f4:	f001 fa92 	bl	800261c <HAL_RCC_ClockConfig>
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x7c>
 80010fc:	b672      	cpsid	i
	while (1)
 80010fe:	e7fe      	b.n	80010fe <SystemClock_Config+0x7a>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001100:	2309      	movs	r3, #9
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001102:	9008      	str	r0, [sp, #32]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001104:	900b      	str	r0, [sp, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001106:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001108:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110a:	f001 fb75 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	2800      	cmp	r0, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x92>
 8001112:	b672      	cpsid	i
	while (1)
 8001114:	e7fe      	b.n	8001114 <SystemClock_Config+0x90>
}
 8001116:	b01c      	add	sp, #112	; 0x70
 8001118:	bd10      	pop	{r4, pc}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	40007000 	.word	0x40007000
 8001120:	ffffe7ff 	.word	0xffffe7ff

08001124 <main>:
{
 8001124:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2501      	movs	r5, #1
{
 8001128:	b08f      	sub	sp, #60	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	ac09      	add	r4, sp, #36	; 0x24
	HAL_Init();
 800112c:	f000 fa3e 	bl	80015ac <HAL_Init>
	SystemClock_Config();
 8001130:	f7ff ffa8 	bl	8001084 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	2214      	movs	r2, #20
 8001136:	2100      	movs	r1, #0
 8001138:	0020      	movs	r0, r4
 800113a:	f002 f97e 	bl	800343a <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2102      	movs	r1, #2
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001140:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b80      	ldr	r3, [pc, #512]	; (8001344 <main+0x220>)
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001144:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2600      	movs	r6, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	432a      	orrs	r2, r5
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
 800114e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	huart1.Instance = USART1;
 8001150:	4f7d      	ldr	r7, [pc, #500]	; (8001348 <main+0x224>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	402a      	ands	r2, r5
 8001154:	9205      	str	r2, [sp, #20]
 8001156:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800115a:	430a      	orrs	r2, r1
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
 800115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	400b      	ands	r3, r1
 8001164:	9306      	str	r3, [sp, #24]
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001166:	3136      	adds	r1, #54	; 0x36
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	9b06      	ldr	r3, [sp, #24]
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800116a:	f000 fb65 	bl	8001838 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 800116e:	2307      	movs	r3, #7
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8001172:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	0021      	movs	r1, r4
 8001176:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001178:	6066      	str	r6, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117a:	60a5      	str	r5, [r4, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f000 fa96 	bl	80016ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001180:	2338      	movs	r3, #56	; 0x38
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001184:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	0021      	movs	r1, r4
 8001188:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	6065      	str	r5, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	60a6      	str	r6, [r4, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	60e6      	str	r6, [r4, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f000 fa8c 	bl	80016ac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8001194:	230a      	movs	r3, #10
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	0021      	movs	r1, r4
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8001198:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	486c      	ldr	r0, [pc, #432]	; (800134c <main+0x228>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119c:	6066      	str	r6, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	60a6      	str	r6, [r4, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	f000 fa84 	bl	80016ac <HAL_GPIO_Init>
	huart1.Init.BaudRate = 9600;
 80011a4:	2396      	movs	r3, #150	; 0x96
	huart1.Instance = USART1;
 80011a6:	486a      	ldr	r0, [pc, #424]	; (8001350 <main+0x22c>)
	huart1.Init.BaudRate = 9600;
 80011a8:	019b      	lsls	r3, r3, #6
 80011aa:	6043      	str	r3, [r0, #4]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80011ac:	230c      	movs	r3, #12
	huart1.Instance = USART1;
 80011ae:	6007      	str	r7, [r0, #0]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011b0:	6086      	str	r6, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80011b2:	60c6      	str	r6, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80011b4:	6106      	str	r6, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80011b6:	6143      	str	r3, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b8:	6186      	str	r6, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ba:	61c6      	str	r6, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011bc:	6206      	str	r6, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011be:	6246      	str	r6, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c0:	f002 f8d6 	bl	8003370 <HAL_UART_Init>
 80011c4:	9003      	str	r0, [sp, #12]
 80011c6:	42b0      	cmp	r0, r6
 80011c8:	d001      	beq.n	80011ce <main+0xaa>
 80011ca:	b672      	cpsid	i
	while (1)
 80011cc:	e7fe      	b.n	80011cc <main+0xa8>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ce:	2208      	movs	r2, #8
 80011d0:	9903      	ldr	r1, [sp, #12]
 80011d2:	a807      	add	r0, sp, #28
 80011d4:	f002 f931 	bl	800343a <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 80011d8:	2210      	movs	r2, #16
 80011da:	0020      	movs	r0, r4
 80011dc:	9903      	ldr	r1, [sp, #12]
 80011de:	f002 f92c 	bl	800343a <memset>
	htim2.Instance = TIM2;
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	4e5b      	ldr	r6, [pc, #364]	; (8001354 <main+0x230>)
 80011e6:	05db      	lsls	r3, r3, #23
 80011e8:	6033      	str	r3, [r6, #0]
	htim2.Init.Prescaler = 32-1;
 80011ea:	231f      	movs	r3, #31
 80011ec:	6073      	str	r3, [r6, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ee:	9b03      	ldr	r3, [sp, #12]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011f0:	0030      	movs	r0, r6
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f2:	60b3      	str	r3, [r6, #8]
	htim2.Init.Period = 250-1;
 80011f4:	23f9      	movs	r3, #249	; 0xf9
 80011f6:	60f3      	str	r3, [r6, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	9b03      	ldr	r3, [sp, #12]
 80011fa:	6133      	str	r3, [r6, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fc:	6173      	str	r3, [r6, #20]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011fe:	f001 fc9f 	bl	8002b40 <HAL_TIM_PWM_Init>
 8001202:	2800      	cmp	r0, #0
 8001204:	d001      	beq.n	800120a <main+0xe6>
 8001206:	b672      	cpsid	i
	while (1)
 8001208:	e7fe      	b.n	8001208 <main+0xe4>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	9007      	str	r0, [sp, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	9008      	str	r0, [sp, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800120e:	a907      	add	r1, sp, #28
 8001210:	0030      	movs	r0, r6
 8001212:	f001 fd4f 	bl	8002cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	1e02      	subs	r2, r0, #0
 8001218:	d001      	beq.n	800121e <main+0xfa>
 800121a:	b672      	cpsid	i
	while (1)
 800121c:	e7fe      	b.n	800121c <main+0xf8>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121e:	2360      	movs	r3, #96	; 0x60
 8001220:	6023      	str	r3, [r4, #0]
	sConfigOC.Pulse = 125-1;
 8001222:	331c      	adds	r3, #28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001224:	60a0      	str	r0, [r4, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001226:	60e0      	str	r0, [r4, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001228:	0021      	movs	r1, r4
 800122a:	0030      	movs	r0, r6
	sConfigOC.Pulse = 125-1;
 800122c:	6063      	str	r3, [r4, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122e:	f001 fcb3 	bl	8002b98 <HAL_TIM_PWM_ConfigChannel>
 8001232:	9003      	str	r0, [sp, #12]
 8001234:	2800      	cmp	r0, #0
 8001236:	d001      	beq.n	800123c <main+0x118>
 8001238:	b672      	cpsid	i
	while (1)
 800123a:	e7fe      	b.n	800123a <main+0x116>
	HAL_TIM_MspPostInit(&htim2);
 800123c:	0030      	movs	r0, r6
 800123e:	f000 f8e7 	bl	8001410 <HAL_TIM_MspPostInit>
	hi2c1.Instance = I2C1;
 8001242:	4e45      	ldr	r6, [pc, #276]	; (8001358 <main+0x234>)
 8001244:	4b45      	ldr	r3, [pc, #276]	; (800135c <main+0x238>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001246:	0030      	movs	r0, r6
	hi2c1.Instance = I2C1;
 8001248:	6033      	str	r3, [r6, #0]
	hi2c1.Init.Timing = 0x00300F38;
 800124a:	4b45      	ldr	r3, [pc, #276]	; (8001360 <main+0x23c>)
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124c:	60f5      	str	r5, [r6, #12]
	hi2c1.Init.Timing = 0x00300F38;
 800124e:	6073      	str	r3, [r6, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001250:	9b03      	ldr	r3, [sp, #12]
 8001252:	60b3      	str	r3, [r6, #8]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	6133      	str	r3, [r6, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001256:	6173      	str	r3, [r6, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001258:	61b3      	str	r3, [r6, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125a:	61f3      	str	r3, [r6, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125c:	6233      	str	r3, [r6, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125e:	f000 fc21 	bl	8001aa4 <HAL_I2C_Init>
 8001262:	1e01      	subs	r1, r0, #0
 8001264:	d001      	beq.n	800126a <main+0x146>
 8001266:	b672      	cpsid	i
	while (1)
 8001268:	e7fe      	b.n	8001268 <main+0x144>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126a:	0030      	movs	r0, r6
 800126c:	f000 fec2 	bl	8001ff4 <HAL_I2CEx_ConfigAnalogFilter>
 8001270:	1e01      	subs	r1, r0, #0
 8001272:	d001      	beq.n	8001278 <main+0x154>
 8001274:	b672      	cpsid	i
	while (1)
 8001276:	e7fe      	b.n	8001276 <main+0x152>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001278:	0030      	movs	r0, r6
 800127a:	f000 fee1 	bl	8002040 <HAL_I2CEx_ConfigDigitalFilter>
 800127e:	9003      	str	r0, [sp, #12]
 8001280:	2800      	cmp	r0, #0
 8001282:	d001      	beq.n	8001288 <main+0x164>
 8001284:	b672      	cpsid	i
	while (1)
 8001286:	e7fe      	b.n	8001286 <main+0x162>
	initEns160();
 8001288:	f7ff f962 	bl	8000550 <initEns160>
	initDrv8830();
 800128c:	f7ff f928 	bl	80004e0 <initDrv8830>
	uint8_t txData = SHT41_MeasureHigh;
 8001290:	23fd      	movs	r3, #253	; 0xfd
 8001292:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, SHT41_DeviceAddress, &txData, 1, 10);
 8001294:	3bf3      	subs	r3, #243	; 0xf3
 8001296:	0022      	movs	r2, r4
 8001298:	2144      	movs	r1, #68	; 0x44
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	0030      	movs	r0, r6
 800129e:	002b      	movs	r3, r5
 80012a0:	f000 fc56 	bl	8001b50 <HAL_I2C_Master_Transmit>
	LED1(0);
 80012a4:	20a0      	movs	r0, #160	; 0xa0
 80012a6:	002a      	movs	r2, r5
 80012a8:	2108      	movs	r1, #8
 80012aa:	05c0      	lsls	r0, r0, #23
 80012ac:	f000 fac4 	bl	8001838 <HAL_GPIO_WritePin>
	LED2(0);
 80012b0:	20a0      	movs	r0, #160	; 0xa0
 80012b2:	002a      	movs	r2, r5
 80012b4:	2110      	movs	r1, #16
 80012b6:	05c0      	lsls	r0, r0, #23
 80012b8:	f000 fabe 	bl	8001838 <HAL_GPIO_WritePin>
	LED3(0);
 80012bc:	20a0      	movs	r0, #160	; 0xa0
 80012be:	002a      	movs	r2, r5
 80012c0:	2120      	movs	r1, #32
 80012c2:	05c0      	lsls	r0, r0, #23
 80012c4:	f000 fab8 	bl	8001838 <HAL_GPIO_WritePin>
	setMotor(DRV8830_STOP);
 80012c8:	9803      	ldr	r0, [sp, #12]
 80012ca:	f7ff f91d 	bl	8000508 <setMotor>
	nextion_inst_set("door_button.txt=\"Unlocked Door\"");
 80012ce:	4825      	ldr	r0, [pc, #148]	; (8001364 <main+0x240>)
 80012d0:	f7ff f982 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("car_t.txt=\"Waiting for car\"");
 80012d4:	4824      	ldr	r0, [pc, #144]	; (8001368 <main+0x244>)
 80012d6:	f7ff f97f 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("post_t.txt=\"Empty\"");
 80012da:	4824      	ldr	r0, [pc, #144]	; (800136c <main+0x248>)
 80012dc:	f7ff f97c 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 80012e0:	4c23      	ldr	r4, [pc, #140]	; (8001370 <main+0x24c>)
 80012e2:	0020      	movs	r0, r4
 80012e4:	f7ff f978 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 80012e8:	0020      	movs	r0, r4
 80012ea:	f7ff f975 	bl	80005d8 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 80012ee:	0020      	movs	r0, r4
 80012f0:	f7ff f972 	bl	80005d8 <nextion_inst_set>
	HAL_Delay(50);
 80012f4:	2032      	movs	r0, #50	; 0x32
 80012f6:	f000 f97f 	bl	80015f8 <HAL_Delay>
	USART1->CR1 &= (~USART_CR1_UE);
 80012fa:	683b      	ldr	r3, [r7, #0]
	HAL_Delay(50);
 80012fc:	2032      	movs	r0, #50	; 0x32
	USART1->CR1 &= (~USART_CR1_UE);
 80012fe:	43ab      	bics	r3, r5
 8001300:	603b      	str	r3, [r7, #0]
	USART1->BRR = 0x23;
 8001302:	2323      	movs	r3, #35	; 0x23
 8001304:	60fb      	str	r3, [r7, #12]
	USART1->CR1 |= USART_CR1_UE;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	431d      	orrs	r5, r3
 800130a:	603d      	str	r5, [r7, #0]
	HAL_Delay(50);
 800130c:	f000 f974 	bl	80015f8 <HAL_Delay>
	HAL_Delay(1000);
 8001310:	20fa      	movs	r0, #250	; 0xfa
		if(SW2){
 8001312:	25a0      	movs	r5, #160	; 0xa0
	HAL_Delay(1000);
 8001314:	0080      	lsls	r0, r0, #2
 8001316:	f000 f96f 	bl	80015f8 <HAL_Delay>
		if(SW2){
 800131a:	05ed      	lsls	r5, r5, #23
 800131c:	2102      	movs	r1, #2
 800131e:	0028      	movs	r0, r5
 8001320:	f000 fa84 	bl	800182c <HAL_GPIO_ReadPin>
 8001324:	4c13      	ldr	r4, [pc, #76]	; (8001374 <main+0x250>)
 8001326:	2800      	cmp	r0, #0
 8001328:	d108      	bne.n	800133c <main+0x218>
			if(HAL_GetTick() - start_cnt > 3000) task_fuc();
 800132a:	f000 f95f 	bl	80015ec <HAL_GetTick>
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	1ac0      	subs	r0, r0, r3
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <main+0x254>)
 8001334:	4298      	cmp	r0, r3
 8001336:	d9f1      	bls.n	800131c <main+0x1f8>
 8001338:	f7ff fc4a 	bl	8000bd0 <task_fuc>
		else start_cnt = HAL_GetTick();
 800133c:	f000 f956 	bl	80015ec <HAL_GetTick>
 8001340:	6020      	str	r0, [r4, #0]
 8001342:	e7eb      	b.n	800131c <main+0x1f8>
 8001344:	40021000 	.word	0x40021000
 8001348:	40013800 	.word	0x40013800
 800134c:	50000400 	.word	0x50000400
 8001350:	200002d8 	.word	0x200002d8
 8001354:	20000298 	.word	0x20000298
 8001358:	20000244 	.word	0x20000244
 800135c:	40005400 	.word	0x40005400
 8001360:	00300f38 	.word	0x00300f38
 8001364:	08004415 	.word	0x08004415
 8001368:	08004435 	.word	0x08004435
 800136c:	08004451 	.word	0x08004451
 8001370:	08004464 	.word	0x08004464
 8001374:	20000364 	.word	0x20000364
 8001378:	00000bb8 	.word	0x00000bb8

0800137c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137c:	2201      	movs	r2, #1
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_MspInit+0x18>)
 8001380:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001382:	430a      	orrs	r2, r1
 8001384:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	2280      	movs	r2, #128	; 0x80
 8001388:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800138a:	0552      	lsls	r2, r2, #21
 800138c:	430a      	orrs	r2, r1
 800138e:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001390:	4770      	bx	lr
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	40021000 	.word	0x40021000

08001398 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001398:	b510      	push	{r4, lr}
 800139a:	0004      	movs	r4, r0
 800139c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	2214      	movs	r2, #20
 80013a0:	2100      	movs	r1, #0
 80013a2:	a801      	add	r0, sp, #4
 80013a4:	f002 f849 	bl	800343a <memset>
  if(hi2c->Instance==I2C1)
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_I2C_MspInit+0x50>)
 80013aa:	6822      	ldr	r2, [r4, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d119      	bne.n	80013e4 <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	2102      	movs	r1, #2
 80013b2:	4c0e      	ldr	r4, [pc, #56]	; (80013ec <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	480e      	ldr	r0, [pc, #56]	; (80013f0 <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013b8:	430a      	orrs	r2, r1
 80013ba:	62e2      	str	r2, [r4, #44]	; 0x2c
 80013bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013be:	400b      	ands	r3, r1
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013c4:	23c0      	movs	r3, #192	; 0xc0
 80013c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c8:	3bae      	subs	r3, #174	; 0xae
 80013ca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	3b0f      	subs	r3, #15
 80013ce:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80013d2:	3b02      	subs	r3, #2
 80013d4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f000 f969 	bl	80016ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80013de:	039b      	lsls	r3, r3, #14
 80013e0:	4313      	orrs	r3, r2
 80013e2:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013e4:	b006      	add	sp, #24
 80013e6:	bd10      	pop	{r4, pc}
 80013e8:	40005400 	.word	0x40005400
 80013ec:	40021000 	.word	0x40021000
 80013f0:	50000400 	.word	0x50000400

080013f4 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	6802      	ldr	r2, [r0, #0]
 80013f8:	05db      	lsls	r3, r3, #23
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d104      	bne.n	8001408 <HAL_TIM_PWM_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013fe:	2301      	movs	r3, #1
 8001400:	4a02      	ldr	r2, [pc, #8]	; (800140c <HAL_TIM_PWM_MspInit+0x18>)
 8001402:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001404:	430b      	orrs	r3, r1
 8001406:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001408:	4770      	bx	lr
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	40021000 	.word	0x40021000

08001410 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001410:	b510      	push	{r4, lr}
 8001412:	0004      	movs	r4, r0
 8001414:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	2214      	movs	r2, #20
 8001418:	2100      	movs	r1, #0
 800141a:	a801      	add	r0, sp, #4
 800141c:	f002 f80d 	bl	800343a <memset>
  if(htim->Instance==TIM2)
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	6822      	ldr	r2, [r4, #0]
 8001424:	05db      	lsls	r3, r3, #23
 8001426:	429a      	cmp	r2, r3
 8001428:	d114      	bne.n	8001454 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2001      	movs	r0, #1
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_TIM_MspPostInit+0x48>)
 800142e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001430:	4301      	orrs	r1, r0
 8001432:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001434:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4003      	ands	r3, r0
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	021b      	lsls	r3, r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001444:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800144c:	3303      	adds	r3, #3
 800144e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f000 f92c 	bl	80016ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001454:	b006      	add	sp, #24
 8001456:	bd10      	pop	{r4, pc}
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b510      	push	{r4, lr}
 800145e:	0004      	movs	r4, r0
 8001460:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	2214      	movs	r2, #20
 8001464:	2100      	movs	r1, #0
 8001466:	a801      	add	r0, sp, #4
 8001468:	f001 ffe7 	bl	800343a <memset>
  if(huart->Instance==USART1)
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_UART_MspInit+0x54>)
 800146e:	6822      	ldr	r2, [r4, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d11b      	bne.n	80014ac <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_UART_MspInit+0x58>)
 8001478:	01d2      	lsls	r2, r2, #7
 800147a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 800147e:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 8001482:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	430a      	orrs	r2, r1
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	400b      	ands	r3, r1
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001494:	23c0      	movs	r3, #192	; 0xc0
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	185b      	adds	r3, r3, r1
 80014a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80014a2:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80014a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	f000 f900 	bl	80016ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014ac:	b006      	add	sp, #24
 80014ae:	bd10      	pop	{r4, pc}
 80014b0:	40013800 	.word	0x40013800
 80014b4:	40021000 	.word	0x40021000

080014b8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <NMI_Handler>

080014ba <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler>

080014bc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:
 80014be:	4770      	bx	lr

080014c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c2:	f000 f887 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80014c6:	f000 f8ed 	bl	80016a4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80014ca:	bd10      	pop	{r4, pc}

080014cc <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <_sbrk+0x30>)
 80014ce:	490c      	ldr	r1, [pc, #48]	; (8001500 <_sbrk+0x34>)
{
 80014d0:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d2:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d4:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <_sbrk+0x38>)
{
 80014d6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80014d8:	6810      	ldr	r0, [r2, #0]
 80014da:	2800      	cmp	r0, #0
 80014dc:	d101      	bne.n	80014e2 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80014de:	480a      	ldr	r0, [pc, #40]	; (8001508 <_sbrk+0x3c>)
 80014e0:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e2:	6810      	ldr	r0, [r2, #0]
 80014e4:	18c3      	adds	r3, r0, r3
 80014e6:	428b      	cmp	r3, r1
 80014e8:	d906      	bls.n	80014f8 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80014ea:	f001 ff73 	bl	80033d4 <__errno>
 80014ee:	230c      	movs	r3, #12
 80014f0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80014f2:	2001      	movs	r0, #1
 80014f4:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80014f6:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80014f8:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80014fa:	e7fc      	b.n	80014f6 <_sbrk+0x2a>
 80014fc:	00000400 	.word	0x00000400
 8001500:	20002000 	.word	0x20002000
 8001504:	20000374 	.word	0x20000374
 8001508:	20000390 	.word	0x20000390

0800150c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	4770      	bx	lr
	...

08001510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001512:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001514:	f7ff fffa 	bl	800150c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <LoopForever+0x6>)
  ldr r1, =_edata
 800151a:	490d      	ldr	r1, [pc, #52]	; (8001550 <LoopForever+0xa>)
  ldr r2, =_sidata
 800151c:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <LoopForever+0xe>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001530:	4c0a      	ldr	r4, [pc, #40]	; (800155c <LoopForever+0x16>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153e:	f001 ff4f 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001542:	f7ff fdef 	bl	8001124 <main>

08001546 <LoopForever>:

LoopForever:
    b LoopForever
 8001546:	e7fe      	b.n	8001546 <LoopForever>
   ldr   r0, =_estack
 8001548:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800154c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001550:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8001554:	08004550 	.word	0x08004550
  ldr r2, =_sbss
 8001558:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 800155c:	2000038c 	.word	0x2000038c

08001560 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC1_COMP_IRQHandler>
	...

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001568:	20fa      	movs	r0, #250	; 0xfa
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_InitTick+0x3c>)
 800156c:	0080      	lsls	r0, r0, #2
 800156e:	7819      	ldrb	r1, [r3, #0]
 8001570:	f7fe fde6 	bl	8000140 <__udivsi3>
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_InitTick+0x40>)
 8001576:	0001      	movs	r1, r0
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	f7fe fde1 	bl	8000140 <__udivsi3>
 800157e:	f000 f877 	bl	8001670 <HAL_SYSTICK_Config>
 8001582:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001584:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001586:	2c00      	cmp	r4, #0
 8001588:	d109      	bne.n	800159e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	2d03      	cmp	r5, #3
 800158c:	d807      	bhi.n	800159e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158e:	3802      	subs	r0, #2
 8001590:	0022      	movs	r2, r4
 8001592:	0029      	movs	r1, r5
 8001594:	f000 f842 	bl	800161c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001598:	0020      	movs	r0, r4
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_InitTick+0x44>)
 800159c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800159e:	bd70      	pop	{r4, r5, r6, pc}
 80015a0:	20000144 	.word	0x20000144
 80015a4:	20000140 	.word	0x20000140
 80015a8:	20000148 	.word	0x20000148

080015ac <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80015ac:	2340      	movs	r3, #64	; 0x40
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_Init+0x24>)
{
 80015b0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80015b2:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015b4:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80015b6:	430b      	orrs	r3, r1
 80015b8:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ba:	f7ff ffd3 	bl	8001564 <HAL_InitTick>
 80015be:	1e04      	subs	r4, r0, #0
 80015c0:	d103      	bne.n	80015ca <HAL_Init+0x1e>
    HAL_MspInit();
 80015c2:	f7ff fedb 	bl	800137c <HAL_MspInit>
}
 80015c6:	0020      	movs	r0, r4
 80015c8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80015ca:	2401      	movs	r4, #1
 80015cc:	e7fb      	b.n	80015c6 <HAL_Init+0x1a>
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	40022000 	.word	0x40022000

080015d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015d4:	4a03      	ldr	r2, [pc, #12]	; (80015e4 <HAL_IncTick+0x10>)
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <HAL_IncTick+0x14>)
 80015d8:	6811      	ldr	r1, [r2, #0]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	185b      	adds	r3, r3, r1
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	4770      	bx	lr
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	20000378 	.word	0x20000378
 80015e8:	20000144 	.word	0x20000144

080015ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015ec:	4b01      	ldr	r3, [pc, #4]	; (80015f4 <HAL_GetTick+0x8>)
 80015ee:	6818      	ldr	r0, [r3, #0]
}
 80015f0:	4770      	bx	lr
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	20000378 	.word	0x20000378

080015f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f8:	b570      	push	{r4, r5, r6, lr}
 80015fa:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff fff6 	bl	80015ec <HAL_GetTick>
 8001600:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001602:	1c63      	adds	r3, r4, #1
 8001604:	d002      	beq.n	800160c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <HAL_Delay+0x20>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800160c:	f7ff ffee 	bl	80015ec <HAL_GetTick>
 8001610:	1b40      	subs	r0, r0, r5
 8001612:	42a0      	cmp	r0, r4
 8001614:	d3fa      	bcc.n	800160c <HAL_Delay+0x14>
  {
  }
}
 8001616:	bd70      	pop	{r4, r5, r6, pc}
 8001618:	20000144 	.word	0x20000144

0800161c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800161e:	25ff      	movs	r5, #255	; 0xff
 8001620:	2403      	movs	r4, #3
 8001622:	002a      	movs	r2, r5
 8001624:	4004      	ands	r4, r0
 8001626:	00e4      	lsls	r4, r4, #3
 8001628:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800162a:	0189      	lsls	r1, r1, #6
 800162c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800162e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001630:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001632:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8001634:	2800      	cmp	r0, #0
 8001636:	db0a      	blt.n	800164e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001638:	24c0      	movs	r4, #192	; 0xc0
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_NVIC_SetPriority+0x4c>)
 800163c:	0880      	lsrs	r0, r0, #2
 800163e:	0080      	lsls	r0, r0, #2
 8001640:	18c0      	adds	r0, r0, r3
 8001642:	00a4      	lsls	r4, r4, #2
 8001644:	5903      	ldr	r3, [r0, r4]
 8001646:	401a      	ands	r2, r3
 8001648:	4311      	orrs	r1, r2
 800164a:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800164c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800164e:	200f      	movs	r0, #15
 8001650:	4003      	ands	r3, r0
 8001652:	3b08      	subs	r3, #8
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <HAL_NVIC_SetPriority+0x50>)
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	181b      	adds	r3, r3, r0
 800165c:	69d8      	ldr	r0, [r3, #28]
 800165e:	4002      	ands	r2, r0
 8001660:	4311      	orrs	r1, r2
 8001662:	61d9      	str	r1, [r3, #28]
 8001664:	e7f2      	b.n	800164c <HAL_NVIC_SetPriority+0x30>
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	1e43      	subs	r3, r0, #1
 8001674:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	4293      	cmp	r3, r2
 800167a:	d20d      	bcs.n	8001698 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800167c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001680:	4807      	ldr	r0, [pc, #28]	; (80016a0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001682:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001684:	6a03      	ldr	r3, [r0, #32]
 8001686:	0609      	lsls	r1, r1, #24
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	430b      	orrs	r3, r1
 800168e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001698:	4770      	bx	lr
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	e000e010 	.word	0xe000e010
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80016a4:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80016a6:	f7ff fcb5 	bl	8001014 <HAL_SYSTICK_Callback>
}
 80016aa:	bd10      	pop	{r4, pc}

080016ac <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80016ac:	4a58      	ldr	r2, [pc, #352]	; (8001810 <HAL_GPIO_Init+0x164>)
{
 80016ae:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80016b0:	1882      	adds	r2, r0, r2
 80016b2:	1e54      	subs	r4, r2, #1
 80016b4:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 80016b6:	2300      	movs	r3, #0
{
 80016b8:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80016ba:	3205      	adds	r2, #5
{
 80016bc:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80016be:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80016c0:	9a03      	ldr	r2, [sp, #12]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	0014      	movs	r4, r2
 80016c6:	40dc      	lsrs	r4, r3
 80016c8:	d101      	bne.n	80016ce <HAL_GPIO_Init+0x22>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 80016ca:	b007      	add	sp, #28
 80016cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80016ce:	2101      	movs	r1, #1
 80016d0:	000d      	movs	r5, r1
 80016d2:	0014      	movs	r4, r2
 80016d4:	409d      	lsls	r5, r3
 80016d6:	402c      	ands	r4, r5
 80016d8:	468c      	mov	ip, r1
 80016da:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 80016dc:	422a      	tst	r2, r5
 80016de:	d100      	bne.n	80016e2 <HAL_GPIO_Init+0x36>
 80016e0:	e094      	b.n	800180c <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016e2:	2403      	movs	r4, #3
 80016e4:	9a03      	ldr	r2, [sp, #12]
 80016e6:	005e      	lsls	r6, r3, #1
 80016e8:	6852      	ldr	r2, [r2, #4]
 80016ea:	9201      	str	r2, [sp, #4]
 80016ec:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80016ee:	40b4      	lsls	r4, r6
 80016f0:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016f2:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80016f4:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016f6:	4564      	cmp	r4, ip
 80016f8:	d82a      	bhi.n	8001750 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 80016fa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80016fc:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016fe:	9903      	ldr	r1, [sp, #12]
 8001700:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001702:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001704:	40b4      	lsls	r4, r6
 8001706:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8001708:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800170a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800170c:	43ac      	bics	r4, r5
 800170e:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001710:	090c      	lsrs	r4, r1, #4
 8001712:	4661      	mov	r1, ip
 8001714:	400c      	ands	r4, r1
 8001716:	409c      	lsls	r4, r3
 8001718:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800171a:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800171c:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800171e:	9904      	ldr	r1, [sp, #16]
 8001720:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001722:	9903      	ldr	r1, [sp, #12]
 8001724:	688c      	ldr	r4, [r1, #8]
 8001726:	40b4      	lsls	r4, r6
 8001728:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800172a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172c:	2a02      	cmp	r2, #2
 800172e:	d111      	bne.n	8001754 <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001730:	2507      	movs	r5, #7
 8001732:	210f      	movs	r1, #15
 8001734:	401d      	ands	r5, r3
 8001736:	00ad      	lsls	r5, r5, #2
 8001738:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 800173a:	08dc      	lsrs	r4, r3, #3
 800173c:	00a4      	lsls	r4, r4, #2
 800173e:	1904      	adds	r4, r0, r4
 8001740:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001742:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001744:	9903      	ldr	r1, [sp, #12]
 8001746:	6909      	ldr	r1, [r1, #16]
 8001748:	40a9      	lsls	r1, r5
 800174a:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800174c:	6227      	str	r7, [r4, #32]
 800174e:	e001      	b.n	8001754 <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001750:	2a03      	cmp	r2, #3
 8001752:	d1e3      	bne.n	800171c <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001754:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 8001756:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001758:	9904      	ldr	r1, [sp, #16]
 800175a:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800175c:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 800175e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001760:	22c0      	movs	r2, #192	; 0xc0
 8001762:	9901      	ldr	r1, [sp, #4]
 8001764:	0292      	lsls	r2, r2, #10
 8001766:	4211      	tst	r1, r2
 8001768:	d050      	beq.n	800180c <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	2701      	movs	r7, #1
 800176c:	4c29      	ldr	r4, [pc, #164]	; (8001814 <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800176e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001770:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001772:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001774:	433a      	orrs	r2, r7
 8001776:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8001778:	4a27      	ldr	r2, [pc, #156]	; (8001818 <HAL_GPIO_Init+0x16c>)
 800177a:	089c      	lsrs	r4, r3, #2
 800177c:	00a4      	lsls	r4, r4, #2
 800177e:	18a4      	adds	r4, r4, r2
 8001780:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001782:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8001784:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001786:	220f      	movs	r2, #15
 8001788:	00ad      	lsls	r5, r5, #2
 800178a:	40aa      	lsls	r2, r5
 800178c:	4661      	mov	r1, ip
 800178e:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001790:	22a0      	movs	r2, #160	; 0xa0
 8001792:	05d2      	lsls	r2, r2, #23
 8001794:	4694      	mov	ip, r2
 8001796:	2200      	movs	r2, #0
 8001798:	4560      	cmp	r0, ip
 800179a:	d00d      	beq.n	80017b8 <HAL_GPIO_Init+0x10c>
 800179c:	4a1f      	ldr	r2, [pc, #124]	; (800181c <HAL_GPIO_Init+0x170>)
 800179e:	4694      	mov	ip, r2
 80017a0:	003a      	movs	r2, r7
 80017a2:	4560      	cmp	r0, ip
 80017a4:	d008      	beq.n	80017b8 <HAL_GPIO_Init+0x10c>
 80017a6:	4f1e      	ldr	r7, [pc, #120]	; (8001820 <HAL_GPIO_Init+0x174>)
 80017a8:	1892      	adds	r2, r2, r2
 80017aa:	42b8      	cmp	r0, r7
 80017ac:	d004      	beq.n	80017b8 <HAL_GPIO_Init+0x10c>
 80017ae:	4f1d      	ldr	r7, [pc, #116]	; (8001824 <HAL_GPIO_Init+0x178>)
 80017b0:	0032      	movs	r2, r6
 80017b2:	42b8      	cmp	r0, r7
 80017b4:	d000      	beq.n	80017b8 <HAL_GPIO_Init+0x10c>
 80017b6:	9a05      	ldr	r2, [sp, #20]
 80017b8:	40aa      	lsls	r2, r5
 80017ba:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 80017bc:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017be:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 80017c0:	000d      	movs	r5, r1
        temp = EXTI->RTSR;
 80017c2:	4a19      	ldr	r2, [pc, #100]	; (8001828 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 80017c4:	43cc      	mvns	r4, r1
        temp = EXTI->RTSR;
 80017c6:	6896      	ldr	r6, [r2, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017c8:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80017ca:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017cc:	02c9      	lsls	r1, r1, #11
 80017ce:	d401      	bmi.n	80017d4 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 80017d0:	0035      	movs	r5, r6
 80017d2:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80017d4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80017d6:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80017d8:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017da:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80017dc:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017de:	0289      	lsls	r1, r1, #10
 80017e0:	d401      	bmi.n	80017e6 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 80017e2:	0035      	movs	r5, r6
 80017e4:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 80017e6:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80017e8:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80017ea:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ec:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80017ee:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017f0:	0389      	lsls	r1, r1, #14
 80017f2:	d401      	bmi.n	80017f8 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 80017f4:	0035      	movs	r5, r6
 80017f6:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80017f8:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80017fa:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80017fc:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017fe:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8001800:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001802:	03c9      	lsls	r1, r1, #15
 8001804:	d401      	bmi.n	800180a <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 8001806:	4025      	ands	r5, r4
 8001808:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 800180a:	6016      	str	r6, [r2, #0]
    position++;
 800180c:	3301      	adds	r3, #1
 800180e:	e757      	b.n	80016c0 <HAL_GPIO_Init+0x14>
 8001810:	afffe400 	.word	0xafffe400
 8001814:	40021000 	.word	0x40021000
 8001818:	40010000 	.word	0x40010000
 800181c:	50000400 	.word	0x50000400
 8001820:	50000800 	.word	0x50000800
 8001824:	50000c00 	.word	0x50000c00
 8001828:	40010400 	.word	0x40010400

0800182c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800182c:	6900      	ldr	r0, [r0, #16]
 800182e:	4008      	ands	r0, r1
 8001830:	1e43      	subs	r3, r0, #1
 8001832:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001834:	b2c0      	uxtb	r0, r0
}
 8001836:	4770      	bx	lr

08001838 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001838:	2a00      	cmp	r2, #0
 800183a:	d001      	beq.n	8001840 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800183e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001840:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001842:	e7fc      	b.n	800183e <HAL_GPIO_WritePin+0x6>

08001844 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001844:	6803      	ldr	r3, [r0, #0]
 8001846:	699a      	ldr	r2, [r3, #24]
 8001848:	0792      	lsls	r2, r2, #30
 800184a:	d501      	bpl.n	8001850 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800184c:	2200      	movs	r2, #0
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001850:	2201      	movs	r2, #1
 8001852:	6999      	ldr	r1, [r3, #24]
 8001854:	4211      	tst	r1, r2
 8001856:	d102      	bne.n	800185e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001858:	6999      	ldr	r1, [r3, #24]
 800185a:	430a      	orrs	r2, r1
 800185c:	619a      	str	r2, [r3, #24]
  }
}
 800185e:	4770      	bx	lr

08001860 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001860:	b530      	push	{r4, r5, lr}
 8001862:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001864:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001866:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001868:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800186a:	0589      	lsls	r1, r1, #22
 800186c:	431a      	orrs	r2, r3
 800186e:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <I2C_TransferConfig+0x28>)
 8001872:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001874:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001876:	0d64      	lsrs	r4, r4, #21
 8001878:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800187a:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800187c:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800187e:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001880:	432a      	orrs	r2, r5
 8001882:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001884:	bd30      	pop	{r4, r5, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	03ff63ff 	.word	0x03ff63ff

0800188c <I2C_IsErrorOccurred>:
{
 800188c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800188e:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8001890:	6802      	ldr	r2, [r0, #0]
{
 8001892:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8001894:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001896:	2310      	movs	r3, #16
 8001898:	000f      	movs	r7, r1
{
 800189a:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800189c:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 800189e:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80018a0:	4219      	tst	r1, r3
 80018a2:	d00e      	beq.n	80018c2 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018a4:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018a6:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 80018a8:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018aa:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	699a      	ldr	r2, [r3, #24]
 80018b0:	423a      	tst	r2, r7
 80018b2:	d164      	bne.n	800197e <I2C_IsErrorOccurred+0xf2>
 80018b4:	9a01      	ldr	r2, [sp, #4]
 80018b6:	2a00      	cmp	r2, #0
 80018b8:	d032      	beq.n	8001920 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 80018ba:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80018bc:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 80018be:	9b00      	ldr	r3, [sp, #0]
 80018c0:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018c2:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 80018c4:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018c6:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 80018c8:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018ca:	420a      	tst	r2, r1
 80018cc:	d002      	beq.n	80018d4 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 80018ce:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018d0:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80018d2:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	00c9      	lsls	r1, r1, #3
 80018d8:	420a      	tst	r2, r1
 80018da:	d003      	beq.n	80018e4 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 80018dc:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018de:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80018e0:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 80018e2:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	0089      	lsls	r1, r1, #2
 80018e8:	420a      	tst	r2, r1
 80018ea:	d04d      	beq.n	8001988 <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 80018ec:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018ee:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 80018f0:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 80018f2:	0020      	movs	r0, r4
 80018f4:	f7ff ffa6 	bl	8001844 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80018f8:	6822      	ldr	r2, [r4, #0]
 80018fa:	4925      	ldr	r1, [pc, #148]	; (8001990 <I2C_IsErrorOccurred+0x104>)
 80018fc:	6853      	ldr	r3, [r2, #4]
 80018fe:	400b      	ands	r3, r1
 8001900:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001902:	0023      	movs	r3, r4
 8001904:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8001906:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001908:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 800190a:	4307      	orrs	r7, r0
 800190c:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800190e:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001910:	0022      	movs	r2, r4
 8001912:	2300      	movs	r3, #0
 8001914:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8001916:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001918:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800191a:	2001      	movs	r0, #1
 800191c:	7023      	strb	r3, [r4, #0]
 800191e:	e035      	b.n	800198c <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 8001920:	1c72      	adds	r2, r6, #1
 8001922:	d0c4      	beq.n	80018ae <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001924:	f7ff fe62 	bl	80015ec <HAL_GetTick>
 8001928:	1b40      	subs	r0, r0, r5
 800192a:	42b0      	cmp	r0, r6
 800192c:	d801      	bhi.n	8001932 <I2C_IsErrorOccurred+0xa6>
 800192e:	2e00      	cmp	r6, #0
 8001930:	d1bc      	bne.n	80018ac <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8001932:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001934:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8001936:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001938:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800193a:	7811      	ldrb	r1, [r2, #0]
 800193c:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800193e:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8001940:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001942:	699a      	ldr	r2, [r3, #24]
 8001944:	0209      	lsls	r1, r1, #8
 8001946:	420a      	tst	r2, r1
 8001948:	d00c      	beq.n	8001964 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800194e:	4210      	tst	r0, r2
 8001950:	d108      	bne.n	8001964 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 8001952:	4661      	mov	r1, ip
 8001954:	2920      	cmp	r1, #32
 8001956:	d005      	beq.n	8001964 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	430a      	orrs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800195e:	f7ff fe45 	bl	80015ec <HAL_GetTick>
 8001962:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	423b      	tst	r3, r7
 800196a:	d19f      	bne.n	80018ac <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800196c:	f7ff fe3e 	bl	80015ec <HAL_GetTick>
 8001970:	1b40      	subs	r0, r0, r5
 8001972:	2819      	cmp	r0, #25
 8001974:	d9f6      	bls.n	8001964 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001978:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	e796      	b.n	80018ac <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 800197e:	9a01      	ldr	r2, [sp, #4]
 8001980:	2a00      	cmp	r2, #0
 8001982:	d19a      	bne.n	80018ba <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001984:	61df      	str	r7, [r3, #28]
 8001986:	e798      	b.n	80018ba <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8001988:	2800      	cmp	r0, #0
 800198a:	d1b2      	bne.n	80018f2 <I2C_IsErrorOccurred+0x66>
}
 800198c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	fe00e800 	.word	0xfe00e800

08001994 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001996:	0004      	movs	r4, r0
 8001998:	000d      	movs	r5, r1
 800199a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800199c:	2702      	movs	r7, #2
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	423b      	tst	r3, r7
 80019a4:	d001      	beq.n	80019aa <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80019a6:	2000      	movs	r0, #0
}
 80019a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019aa:	0032      	movs	r2, r6
 80019ac:	0029      	movs	r1, r5
 80019ae:	0020      	movs	r0, r4
 80019b0:	f7ff ff6c 	bl	800188c <I2C_IsErrorOccurred>
 80019b4:	2800      	cmp	r0, #0
 80019b6:	d118      	bne.n	80019ea <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80019b8:	1c6b      	adds	r3, r5, #1
 80019ba:	d0f0      	beq.n	800199e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019bc:	f7ff fe16 	bl	80015ec <HAL_GetTick>
 80019c0:	1b80      	subs	r0, r0, r6
 80019c2:	42a8      	cmp	r0, r5
 80019c4:	d801      	bhi.n	80019ca <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80019c6:	2d00      	cmp	r5, #0
 80019c8:	d1e9      	bne.n	800199e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	001a      	movs	r2, r3
 80019d0:	403a      	ands	r2, r7
 80019d2:	423b      	tst	r3, r7
 80019d4:	d1e3      	bne.n	800199e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d6:	2120      	movs	r1, #32
 80019d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019da:	430b      	orrs	r3, r1
 80019dc:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019de:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 80019e0:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80019e2:	3341      	adds	r3, #65	; 0x41
 80019e4:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e6:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 80019e8:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80019ea:	2001      	movs	r0, #1
 80019ec:	e7dc      	b.n	80019a8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080019ee <I2C_WaitOnFlagUntilTimeout>:
{
 80019ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f0:	0004      	movs	r4, r0
 80019f2:	000d      	movs	r5, r1
 80019f4:	0017      	movs	r7, r2
 80019f6:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019f8:	6822      	ldr	r2, [r4, #0]
 80019fa:	6993      	ldr	r3, [r2, #24]
 80019fc:	402b      	ands	r3, r5
 80019fe:	1b5b      	subs	r3, r3, r5
 8001a00:	4259      	negs	r1, r3
 8001a02:	414b      	adcs	r3, r1
 8001a04:	42bb      	cmp	r3, r7
 8001a06:	d001      	beq.n	8001a0c <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001a08:	2000      	movs	r0, #0
 8001a0a:	e01f      	b.n	8001a4c <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8001a0c:	1c73      	adds	r3, r6, #1
 8001a0e:	d0f4      	beq.n	80019fa <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a10:	f7ff fdec 	bl	80015ec <HAL_GetTick>
 8001a14:	9b06      	ldr	r3, [sp, #24]
 8001a16:	1ac0      	subs	r0, r0, r3
 8001a18:	42b0      	cmp	r0, r6
 8001a1a:	d801      	bhi.n	8001a20 <I2C_WaitOnFlagUntilTimeout+0x32>
 8001a1c:	2e00      	cmp	r6, #0
 8001a1e:	d1eb      	bne.n	80019f8 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	402b      	ands	r3, r5
 8001a26:	1b5b      	subs	r3, r3, r5
 8001a28:	425a      	negs	r2, r3
 8001a2a:	4153      	adcs	r3, r2
 8001a2c:	42bb      	cmp	r3, r7
 8001a2e:	d1e3      	bne.n	80019f8 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a30:	2220      	movs	r2, #32
 8001a32:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8001a34:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a36:	4313      	orrs	r3, r2
 8001a38:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	0023      	movs	r3, r4
 8001a3c:	3341      	adds	r3, #65	; 0x41
 8001a3e:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a40:	0022      	movs	r2, r4
 8001a42:	2300      	movs	r3, #0
 8001a44:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8001a46:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a48:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8001a4a:	7023      	strb	r3, [r4, #0]
}
 8001a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a4e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a50:	0004      	movs	r4, r0
 8001a52:	000e      	movs	r6, r1
 8001a54:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a56:	2520      	movs	r5, #32
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	422b      	tst	r3, r5
 8001a5e:	d001      	beq.n	8001a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8001a60:	2000      	movs	r0, #0
}
 8001a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a64:	003a      	movs	r2, r7
 8001a66:	0031      	movs	r1, r6
 8001a68:	0020      	movs	r0, r4
 8001a6a:	f7ff ff0f 	bl	800188c <I2C_IsErrorOccurred>
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	d115      	bne.n	8001a9e <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a72:	f7ff fdbb 	bl	80015ec <HAL_GetTick>
 8001a76:	1bc0      	subs	r0, r0, r7
 8001a78:	42b0      	cmp	r0, r6
 8001a7a:	d801      	bhi.n	8001a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8001a7c:	2e00      	cmp	r6, #0
 8001a7e:	d1eb      	bne.n	8001a58 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	001a      	movs	r2, r3
 8001a86:	402a      	ands	r2, r5
 8001a88:	422b      	tst	r3, r5
 8001a8a:	d1e5      	bne.n	8001a58 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a8e:	432b      	orrs	r3, r5
 8001a90:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a92:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8001a94:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	3341      	adds	r3, #65	; 0x41
 8001a98:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9a:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8001a9c:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	e7df      	b.n	8001a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

08001aa4 <HAL_I2C_Init>:
{
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001aa8:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001aaa:	2c00      	cmp	r4, #0
 8001aac:	d03f      	beq.n	8001b2e <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aae:	0025      	movs	r5, r4
 8001ab0:	3541      	adds	r5, #65	; 0x41
 8001ab2:	782b      	ldrb	r3, [r5, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8001aba:	0023      	movs	r3, r4
 8001abc:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001abe:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8001ac0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8001ac2:	f7ff fc69 	bl	8001398 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac6:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001ac8:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aca:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001acc:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ace:	481d      	ldr	r0, [pc, #116]	; (8001b44 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8001ad0:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ad2:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ad8:	6861      	ldr	r1, [r4, #4]
 8001ada:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <HAL_I2C_Init+0xa4>)
 8001adc:	400a      	ands	r2, r1
 8001ade:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	4002      	ands	r2, r0
 8001ae4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ae6:	68e2      	ldr	r2, [r4, #12]
 8001ae8:	2a01      	cmp	r2, #1
 8001aea:	d121      	bne.n	8001b30 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0209      	lsls	r1, r1, #8
 8001af0:	4331      	orrs	r1, r6
 8001af2:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	4915      	ldr	r1, [pc, #84]	; (8001b4c <HAL_I2C_Init+0xa8>)
 8001af8:	4311      	orrs	r1, r2
 8001afa:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001afc:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001afe:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b00:	4002      	ands	r2, r0
 8001b02:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b04:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b06:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b08:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b0a:	69a1      	ldr	r1, [r4, #24]
 8001b0c:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b12:	6a21      	ldr	r1, [r4, #32]
 8001b14:	69e2      	ldr	r2, [r4, #28]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001b22:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b24:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b28:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2a:	3442      	adds	r4, #66	; 0x42
 8001b2c:	7020      	strb	r0, [r4, #0]
}
 8001b2e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b30:	2184      	movs	r1, #132	; 0x84
 8001b32:	0209      	lsls	r1, r1, #8
 8001b34:	4331      	orrs	r1, r6
 8001b36:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b38:	2a02      	cmp	r2, #2
 8001b3a:	d1db      	bne.n	8001af4 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	e7d7      	b.n	8001af4 <HAL_I2C_Init+0x50>
 8001b44:	ffff7fff 	.word	0xffff7fff
 8001b48:	f0ffffff 	.word	0xf0ffffff
 8001b4c:	02008000 	.word	0x02008000

08001b50 <HAL_I2C_Master_Transmit>:
{
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	b087      	sub	sp, #28
 8001b54:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b56:	0003      	movs	r3, r0
 8001b58:	3341      	adds	r3, #65	; 0x41
{
 8001b5a:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b5c:	9303      	str	r3, [sp, #12]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
{
 8001b60:	0004      	movs	r4, r0
 8001b62:	000f      	movs	r7, r1
    return HAL_BUSY;
 8001b64:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b66:	2b20      	cmp	r3, #32
 8001b68:	d114      	bne.n	8001b94 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 8001b6a:	0023      	movs	r3, r4
 8001b6c:	3340      	adds	r3, #64	; 0x40
 8001b6e:	781a      	ldrb	r2, [r3, #0]
 8001b70:	2a01      	cmp	r2, #1
 8001b72:	d00f      	beq.n	8001b94 <HAL_I2C_Master_Transmit+0x44>
 8001b74:	2601      	movs	r6, #1
 8001b76:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8001b78:	f7ff fd38 	bl	80015ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b7c:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8001b7e:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b80:	9000      	str	r0, [sp, #0]
 8001b82:	2319      	movs	r3, #25
 8001b84:	0032      	movs	r2, r6
 8001b86:	0020      	movs	r0, r4
 8001b88:	0209      	lsls	r1, r1, #8
 8001b8a:	f7ff ff30 	bl	80019ee <I2C_WaitOnFlagUntilTimeout>
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	d002      	beq.n	8001b98 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 8001b92:	2001      	movs	r0, #1
}
 8001b94:	b007      	add	sp, #28
 8001b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b98:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b9a:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b9c:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b9e:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ba0:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ba2:	3b11      	subs	r3, #17
 8001ba4:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8001ba6:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001baa:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bac:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8001bae:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001bb0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bb2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_I2C_Master_Transmit+0x11c>)
 8001bb6:	2aff      	cmp	r2, #255	; 0xff
 8001bb8:	d920      	bls.n	8001bfc <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bba:	22ff      	movs	r2, #255	; 0xff
 8001bbc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bc4:	0039      	movs	r1, r7
 8001bc6:	0020      	movs	r0, r4
 8001bc8:	f7ff fe4a 	bl	8001860 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bce:	002a      	movs	r2, r5
 8001bd0:	0020      	movs	r0, r4
 8001bd2:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d119      	bne.n	8001c0c <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd8:	f7ff ff39 	bl	8001a4e <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	d1d8      	bne.n	8001b92 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001be0:	2120      	movs	r1, #32
 8001be2:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001be4:	4d22      	ldr	r5, [pc, #136]	; (8001c70 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001be6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	402a      	ands	r2, r5
 8001bec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001bee:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8001bf0:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001bf2:	3341      	adds	r3, #65	; 0x41
 8001bf4:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bf6:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8001bf8:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001bfa:	e7cb      	b.n	8001b94 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8001bfc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001bfe:	b292      	uxth	r2, r2
 8001c00:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	049b      	lsls	r3, r3, #18
 8001c0a:	e7db      	b.n	8001bc4 <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0c:	f7ff fec2 	bl	8001994 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d1be      	bne.n	8001b92 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c16:	6822      	ldr	r2, [r4, #0]
 8001c18:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001c1a:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c1c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001c1e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001c20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001c22:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001c2a:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001c2e:	b292      	uxth	r2, r2
 8001c30:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0ca      	beq.n	8001bcc <HAL_I2C_Master_Transmit+0x7c>
 8001c36:	2a00      	cmp	r2, #0
 8001c38:	d1c8      	bne.n	8001bcc <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	0020      	movs	r0, r4
 8001c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001c40:	9500      	str	r5, [sp, #0]
 8001c42:	f7ff fed4 	bl	80019ee <I2C_WaitOnFlagUntilTimeout>
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d1a3      	bne.n	8001b92 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c4c:	2bff      	cmp	r3, #255	; 0xff
 8001c4e:	d906      	bls.n	8001c5e <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c50:	23ff      	movs	r3, #255	; 0xff
 8001c52:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	22ff      	movs	r2, #255	; 0xff
 8001c58:	9000      	str	r0, [sp, #0]
 8001c5a:	045b      	lsls	r3, r3, #17
 8001c5c:	e7b2      	b.n	8001bc4 <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8001c5e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c60:	b292      	uxth	r2, r2
 8001c62:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	9000      	str	r0, [sp, #0]
 8001c68:	e7cd      	b.n	8001c06 <HAL_I2C_Master_Transmit+0xb6>
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	80002000 	.word	0x80002000
 8001c70:	fe00e800 	.word	0xfe00e800

08001c74 <HAL_I2C_Mem_Write>:
{
 8001c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	9304      	str	r3, [sp, #16]
 8001c7a:	ab0e      	add	r3, sp, #56	; 0x38
 8001c7c:	9203      	str	r2, [sp, #12]
 8001c7e:	cb04      	ldmia	r3!, {r2}
 8001c80:	0004      	movs	r4, r0
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	9205      	str	r2, [sp, #20]
 8001c86:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3341      	adds	r3, #65	; 0x41
 8001c8c:	9307      	str	r3, [sp, #28]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
{
 8001c90:	000f      	movs	r7, r1
    return HAL_BUSY;
 8001c92:	2002      	movs	r0, #2
{
 8001c94:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d108      	bne.n	8001cac <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 8001c9a:	2a00      	cmp	r2, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_I2C_Mem_Write+0x30>
 8001c9e:	9b06      	ldr	r3, [sp, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001caa:	2001      	movs	r0, #1
}
 8001cac:	b009      	add	sp, #36	; 0x24
 8001cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001cb0:	0023      	movs	r3, r4
 8001cb2:	3340      	adds	r3, #64	; 0x40
 8001cb4:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001cb6:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8001cb8:	2a01      	cmp	r2, #1
 8001cba:	d0f7      	beq.n	8001cac <HAL_I2C_Mem_Write+0x38>
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001cc0:	f7ff fc94 	bl	80015ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cc4:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8001cc6:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cc8:	9000      	str	r0, [sp, #0]
 8001cca:	2319      	movs	r3, #25
 8001ccc:	2201      	movs	r2, #1
 8001cce:	0020      	movs	r0, r4
 8001cd0:	0209      	lsls	r1, r1, #8
 8001cd2:	f7ff fe8c 	bl	80019ee <I2C_WaitOnFlagUntilTimeout>
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d1e7      	bne.n	8001caa <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cda:	2321      	movs	r3, #33	; 0x21
 8001cdc:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cde:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ce0:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ce2:	0023      	movs	r3, r4
 8001ce4:	3342      	adds	r3, #66	; 0x42
 8001ce6:	9307      	str	r3, [sp, #28]
 8001ce8:	2340      	movs	r3, #64	; 0x40
 8001cea:	9a07      	ldr	r2, [sp, #28]
 8001cec:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8001cee:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001cf2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cf4:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 8001cf6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001cf8:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cfa:	466b      	mov	r3, sp
 8001cfc:	7c1a      	ldrb	r2, [r3, #16]
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <HAL_I2C_Mem_Write+0x1b4>)
 8001d00:	0020      	movs	r0, r4
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	045b      	lsls	r3, r3, #17
 8001d08:	f7ff fdaa 	bl	8001860 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d0c:	002a      	movs	r2, r5
 8001d0e:	0031      	movs	r1, r6
 8001d10:	0020      	movs	r0, r4
 8001d12:	f7ff fe3f 	bl	8001994 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d16:	2800      	cmp	r0, #0
 8001d18:	d126      	bne.n	8001d68 <HAL_I2C_Mem_Write+0xf4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d1a:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d1c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d1e:	2a01      	cmp	r2, #1
 8001d20:	d116      	bne.n	8001d50 <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d22:	466a      	mov	r2, sp
 8001d24:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d26:	2180      	movs	r1, #128	; 0x80
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d2a:	0020      	movs	r0, r4
 8001d2c:	0033      	movs	r3, r6
 8001d2e:	2200      	movs	r2, #0
 8001d30:	9500      	str	r5, [sp, #0]
 8001d32:	f7ff fe5c 	bl	80019ee <I2C_WaitOnFlagUntilTimeout>
 8001d36:	2800      	cmp	r0, #0
 8001d38:	d116      	bne.n	8001d68 <HAL_I2C_Mem_Write+0xf4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d3c:	2bff      	cmp	r3, #255	; 0xff
 8001d3e:	d817      	bhi.n	8001d70 <HAL_I2C_Mem_Write+0xfc>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d40:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8001d42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d44:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8001d46:	b292      	uxth	r2, r2
 8001d48:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	9000      	str	r0, [sp, #0]
 8001d4e:	e014      	b.n	8001d7a <HAL_I2C_Mem_Write+0x106>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d50:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d52:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d54:	0a12      	lsrs	r2, r2, #8
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d58:	0020      	movs	r0, r4
 8001d5a:	002a      	movs	r2, r5
 8001d5c:	f7ff fe1a 	bl	8001994 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d60:	2800      	cmp	r0, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d64:	6823      	ldr	r3, [r4, #0]
 8001d66:	e7dc      	b.n	8001d22 <HAL_I2C_Mem_Write+0xae>
      __HAL_UNLOCK(hi2c);
 8001d68:	2300      	movs	r3, #0
 8001d6a:	3440      	adds	r4, #64	; 0x40
 8001d6c:	7023      	strb	r3, [r4, #0]
 8001d6e:	e79c      	b.n	8001caa <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d70:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d72:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d74:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d76:	045b      	lsls	r3, r3, #17
 8001d78:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d7a:	0039      	movs	r1, r7
 8001d7c:	0020      	movs	r0, r4
 8001d7e:	f7ff fd6f 	bl	8001860 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d82:	002a      	movs	r2, r5
 8001d84:	0031      	movs	r1, r6
 8001d86:	0020      	movs	r0, r4
 8001d88:	f7ff fe04 	bl	8001994 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	d000      	beq.n	8001d92 <HAL_I2C_Mem_Write+0x11e>
 8001d90:	e78b      	b.n	8001caa <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d94:	6822      	ldr	r2, [r4, #0]
 8001d96:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001d98:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d9a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001d9c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001d9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001da0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001da8:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001daa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001dac:	b292      	uxth	r2, r2
 8001dae:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d017      	beq.n	8001de4 <HAL_I2C_Mem_Write+0x170>
 8001db4:	2a00      	cmp	r2, #0
 8001db6:	d115      	bne.n	8001de4 <HAL_I2C_Mem_Write+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001db8:	0033      	movs	r3, r6
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	0020      	movs	r0, r4
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	f7ff fe15 	bl	80019ee <I2C_WaitOnFlagUntilTimeout>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	d000      	beq.n	8001dca <HAL_I2C_Mem_Write+0x156>
 8001dc8:	e76f      	b.n	8001caa <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dcc:	2bff      	cmp	r3, #255	; 0xff
 8001dce:	d923      	bls.n	8001e18 <HAL_I2C_Mem_Write+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dd0:	23ff      	movs	r3, #255	; 0xff
 8001dd2:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	22ff      	movs	r2, #255	; 0xff
 8001dd8:	9000      	str	r0, [sp, #0]
 8001dda:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ddc:	0039      	movs	r1, r7
 8001dde:	0020      	movs	r0, r4
 8001de0:	f7ff fd3e 	bl	8001860 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001de4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1cb      	bne.n	8001d82 <HAL_I2C_Mem_Write+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dea:	002a      	movs	r2, r5
 8001dec:	0031      	movs	r1, r6
 8001dee:	0020      	movs	r0, r4
 8001df0:	f7ff fe2d 	bl	8001a4e <I2C_WaitOnSTOPFlagUntilTimeout>
 8001df4:	2800      	cmp	r0, #0
 8001df6:	d000      	beq.n	8001dfa <HAL_I2C_Mem_Write+0x186>
 8001df8:	e757      	b.n	8001caa <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dfa:	2120      	movs	r1, #32
 8001dfc:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001dfe:	4d0b      	ldr	r5, [pc, #44]	; (8001e2c <HAL_I2C_Mem_Write+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e00:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	402a      	ands	r2, r5
 8001e06:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	0023      	movs	r3, r4
 8001e0a:	3341      	adds	r3, #65	; 0x41
 8001e0c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e0e:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8001e10:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e12:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001e14:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001e16:	e749      	b.n	8001cac <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e18:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8001e1a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e1c:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8001e1e:	b292      	uxth	r2, r2
 8001e20:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	9000      	str	r0, [sp, #0]
 8001e26:	e7d9      	b.n	8001ddc <HAL_I2C_Mem_Write+0x168>
 8001e28:	80002000 	.word	0x80002000
 8001e2c:	fe00e800 	.word	0xfe00e800

08001e30 <HAL_I2C_Mem_Read>:
{
 8001e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	9304      	str	r3, [sp, #16]
 8001e36:	ab0e      	add	r3, sp, #56	; 0x38
 8001e38:	9203      	str	r2, [sp, #12]
 8001e3a:	cb04      	ldmia	r3!, {r2}
 8001e3c:	0004      	movs	r4, r0
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	9205      	str	r2, [sp, #20]
 8001e42:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e44:	0003      	movs	r3, r0
 8001e46:	3341      	adds	r3, #65	; 0x41
 8001e48:	9307      	str	r3, [sp, #28]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
{
 8001e4c:	000f      	movs	r7, r1
    return HAL_BUSY;
 8001e4e:	2002      	movs	r0, #2
{
 8001e50:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d108      	bne.n	8001e68 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 8001e56:	2a00      	cmp	r2, #0
 8001e58:	d002      	beq.n	8001e60 <HAL_I2C_Mem_Read+0x30>
 8001e5a:	9b06      	ldr	r3, [sp, #24]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001e66:	2001      	movs	r0, #1
}
 8001e68:	b009      	add	sp, #36	; 0x24
 8001e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001e6c:	0023      	movs	r3, r4
 8001e6e:	3340      	adds	r3, #64	; 0x40
 8001e70:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001e72:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8001e74:	2a01      	cmp	r2, #1
 8001e76:	d0f7      	beq.n	8001e68 <HAL_I2C_Mem_Read+0x38>
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001e7c:	f7ff fbb6 	bl	80015ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	2319      	movs	r3, #25
 8001e84:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001e86:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	0020      	movs	r0, r4
 8001e8c:	0209      	lsls	r1, r1, #8
 8001e8e:	f7ff fdae 	bl	80019ee <I2C_WaitOnFlagUntilTimeout>
 8001e92:	1e03      	subs	r3, r0, #0
 8001e94:	d1e7      	bne.n	8001e66 <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e96:	2222      	movs	r2, #34	; 0x22
 8001e98:	9907      	ldr	r1, [sp, #28]
 8001e9a:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e9c:	0022      	movs	r2, r4
 8001e9e:	3242      	adds	r2, #66	; 0x42
 8001ea0:	9207      	str	r2, [sp, #28]
 8001ea2:	2240      	movs	r2, #64	; 0x40
 8001ea4:	9907      	ldr	r1, [sp, #28]
 8001ea6:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8001ea8:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eaa:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001eac:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001eae:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001eb0:	494d      	ldr	r1, [pc, #308]	; (8001fe8 <HAL_I2C_Mem_Read+0x1b8>)
    hi2c->XferCount = Size;
 8001eb2:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001eb4:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8001eb6:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001eb8:	7c12      	ldrb	r2, [r2, #16]
 8001eba:	0020      	movs	r0, r4
 8001ebc:	9100      	str	r1, [sp, #0]
 8001ebe:	0039      	movs	r1, r7
 8001ec0:	f7ff fcce 	bl	8001860 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec4:	002a      	movs	r2, r5
 8001ec6:	0031      	movs	r1, r6
 8001ec8:	0020      	movs	r0, r4
 8001eca:	f7ff fd63 	bl	8001994 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d127      	bne.n	8001f22 <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ed2:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ed6:	2a01      	cmp	r2, #1
 8001ed8:	d117      	bne.n	8001f0a <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001eda:	466a      	mov	r2, sp
 8001edc:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ede:	2140      	movs	r1, #64	; 0x40
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ee0:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee2:	0020      	movs	r0, r4
 8001ee4:	0033      	movs	r3, r6
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	9500      	str	r5, [sp, #0]
 8001eea:	f7ff fd80 	bl	80019ee <I2C_WaitOnFlagUntilTimeout>
 8001eee:	2800      	cmp	r0, #0
 8001ef0:	d117      	bne.n	8001f22 <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ef2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ef4:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <HAL_I2C_Mem_Read+0x1bc>)
 8001ef6:	2aff      	cmp	r2, #255	; 0xff
 8001ef8:	d817      	bhi.n	8001f2a <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 8001efa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001efc:	b292      	uxth	r2, r2
 8001efe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	049b      	lsls	r3, r3, #18
 8001f08:	e014      	b.n	8001f34 <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f0a:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f0c:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f0e:	0a12      	lsrs	r2, r2, #8
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f12:	0020      	movs	r0, r4
 8001f14:	002a      	movs	r2, r5
 8001f16:	f7ff fd3d 	bl	8001994 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	e7db      	b.n	8001eda <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 8001f22:	2300      	movs	r3, #0
 8001f24:	3440      	adds	r4, #64	; 0x40
 8001f26:	7023      	strb	r3, [r4, #0]
 8001f28:	e79d      	b.n	8001e66 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f2a:	22ff      	movs	r2, #255	; 0xff
 8001f2c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f34:	0039      	movs	r1, r7
 8001f36:	0020      	movs	r0, r4
 8001f38:	f7ff fc92 	bl	8001860 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f3c:	0033      	movs	r3, r6
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2104      	movs	r1, #4
 8001f42:	0020      	movs	r0, r4
 8001f44:	9500      	str	r5, [sp, #0]
 8001f46:	f7ff fd52 	bl	80019ee <I2C_WaitOnFlagUntilTimeout>
 8001f4a:	2800      	cmp	r0, #0
 8001f4c:	d000      	beq.n	8001f50 <HAL_I2C_Mem_Read+0x120>
 8001f4e:	e78a      	b.n	8001e66 <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001f5a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001f60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f62:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f6c:	b292      	uxth	r2, r2
 8001f6e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d017      	beq.n	8001fa4 <HAL_I2C_Mem_Read+0x174>
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	d115      	bne.n	8001fa4 <HAL_I2C_Mem_Read+0x174>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f78:	0033      	movs	r3, r6
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	0020      	movs	r0, r4
 8001f7e:	9500      	str	r5, [sp, #0]
 8001f80:	f7ff fd35 	bl	80019ee <I2C_WaitOnFlagUntilTimeout>
 8001f84:	2800      	cmp	r0, #0
 8001f86:	d000      	beq.n	8001f8a <HAL_I2C_Mem_Read+0x15a>
 8001f88:	e76d      	b.n	8001e66 <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f8c:	2bff      	cmp	r3, #255	; 0xff
 8001f8e:	d923      	bls.n	8001fd8 <HAL_I2C_Mem_Read+0x1a8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f90:	23ff      	movs	r3, #255	; 0xff
 8001f92:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	22ff      	movs	r2, #255	; 0xff
 8001f98:	9000      	str	r0, [sp, #0]
 8001f9a:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f9c:	0039      	movs	r1, r7
 8001f9e:	0020      	movs	r0, r4
 8001fa0:	f7ff fc5e 	bl	8001860 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001fa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1c8      	bne.n	8001f3c <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001faa:	002a      	movs	r2, r5
 8001fac:	0031      	movs	r1, r6
 8001fae:	0020      	movs	r0, r4
 8001fb0:	f7ff fd4d 	bl	8001a4e <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	d000      	beq.n	8001fba <HAL_I2C_Mem_Read+0x18a>
 8001fb8:	e755      	b.n	8001e66 <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fba:	2120      	movs	r1, #32
 8001fbc:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001fbe:	4d0c      	ldr	r5, [pc, #48]	; (8001ff0 <HAL_I2C_Mem_Read+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fc0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	402a      	ands	r2, r5
 8001fc6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	0023      	movs	r3, r4
 8001fca:	3341      	adds	r3, #65	; 0x41
 8001fcc:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fce:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8001fd0:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fd2:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001fd4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001fd6:	e747      	b.n	8001e68 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fd8:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8001fda:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fdc:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8001fde:	b292      	uxth	r2, r2
 8001fe0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	9000      	str	r0, [sp, #0]
 8001fe6:	e7d9      	b.n	8001f9c <HAL_I2C_Mem_Read+0x16c>
 8001fe8:	80002000 	.word	0x80002000
 8001fec:	80002400 	.word	0x80002400
 8001ff0:	fe00e800 	.word	0xfe00e800

08001ff4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff6:	0004      	movs	r4, r0
 8001ff8:	3441      	adds	r4, #65	; 0x41
 8001ffa:	7822      	ldrb	r2, [r4, #0]
{
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002000:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002002:	b2d6      	uxtb	r6, r2
 8002004:	2a20      	cmp	r2, #32
 8002006:	d118      	bne.n	800203a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8002008:	001d      	movs	r5, r3
 800200a:	3540      	adds	r5, #64	; 0x40
 800200c:	782a      	ldrb	r2, [r5, #0]
 800200e:	2a01      	cmp	r2, #1
 8002010:	d013      	beq.n	800203a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002012:	2224      	movs	r2, #36	; 0x24
 8002014:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3a23      	subs	r2, #35	; 0x23
 800201a:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800201c:	4807      	ldr	r0, [pc, #28]	; (800203c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800201e:	4391      	bics	r1, r2
 8002020:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8002026:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002028:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800202a:	6819      	ldr	r1, [r3, #0]
 800202c:	4339      	orrs	r1, r7
 800202e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002030:	6819      	ldr	r1, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002036:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002038:	7028      	strb	r0, [r5, #0]
  }
}
 800203a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800203c:	ffffefff 	.word	0xffffefff

08002040 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002040:	0002      	movs	r2, r0
{
 8002042:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002044:	3241      	adds	r2, #65	; 0x41
 8002046:	7814      	ldrb	r4, [r2, #0]
{
 8002048:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800204a:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800204c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800204e:	2c20      	cmp	r4, #32
 8002050:	d117      	bne.n	8002082 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002052:	001c      	movs	r4, r3
 8002054:	3440      	adds	r4, #64	; 0x40
 8002056:	7826      	ldrb	r6, [r4, #0]
 8002058:	2e01      	cmp	r6, #1
 800205a:	d012      	beq.n	8002082 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800205c:	3022      	adds	r0, #34	; 0x22
 800205e:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3823      	subs	r0, #35	; 0x23
 8002064:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002066:	4f07      	ldr	r7, [pc, #28]	; (8002084 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8002068:	4386      	bics	r6, r0
 800206a:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800206c:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 800206e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002070:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002072:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002074:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002076:	6819      	ldr	r1, [r3, #0]
 8002078:	4308      	orrs	r0, r1
 800207a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800207c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800207e:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002080:	7020      	strb	r0, [r4, #0]
  }
}
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002084:	fffff0ff 	.word	0xfffff0ff

08002088 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002088:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_RCC_GetSysClockFreq+0x78>)
{
 800208c:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800208e:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002090:	4022      	ands	r2, r4
 8002092:	2a08      	cmp	r2, #8
 8002094:	d031      	beq.n	80020fa <HAL_RCC_GetSysClockFreq+0x72>
 8002096:	2a0c      	cmp	r2, #12
 8002098:	d009      	beq.n	80020ae <HAL_RCC_GetSysClockFreq+0x26>
 800209a:	2a04      	cmp	r2, #4
 800209c:	d125      	bne.n	80020ea <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800209e:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020a2:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80020a4:	17c0      	asrs	r0, r0, #31
 80020a6:	4018      	ands	r0, r3
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <HAL_RCC_GetSysClockFreq+0x80>)
 80020aa:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80020ac:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020ae:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020b0:	4816      	ldr	r0, [pc, #88]	; (800210c <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020b2:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020b4:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020b6:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80020b8:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ba:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80020bc:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020be:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80020c0:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c2:	4211      	tst	r1, r2
 80020c4:	d009      	beq.n	80020da <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020c6:	4a12      	ldr	r2, [pc, #72]	; (8002110 <HAL_RCC_GetSysClockFreq+0x88>)
 80020c8:	2300      	movs	r3, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	f7fe f8e4 	bl	8000298 <__aeabi_lmul>
 80020d0:	0022      	movs	r2, r4
 80020d2:	2300      	movs	r3, #0
 80020d4:	f7fe f8c0 	bl	8000258 <__aeabi_uldivmod>
 80020d8:	e7e8      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2310      	movs	r3, #16
 80020de:	421a      	tst	r2, r3
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80020e2:	4a0c      	ldr	r2, [pc, #48]	; (8002114 <HAL_RCC_GetSysClockFreq+0x8c>)
 80020e4:	e7f0      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_RCC_GetSysClockFreq+0x80>)
 80020e8:	e7ee      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80020ea:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80020ec:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80020ee:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80020f0:	041b      	lsls	r3, r3, #16
 80020f2:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80020f4:	3301      	adds	r3, #1
 80020f6:	4098      	lsls	r0, r3
      break;
 80020f8:	e7d8      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <HAL_RCC_GetSysClockFreq+0x88>)
 80020fc:	e7d6      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x24>
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	40021000 	.word	0x40021000
 8002104:	ff48e500 	.word	0xff48e500
 8002108:	00f42400 	.word	0x00f42400
 800210c:	080044f4 	.word	0x080044f4
 8002110:	007a1200 	.word	0x007a1200
 8002114:	003d0900 	.word	0x003d0900

08002118 <HAL_RCC_OscConfig>:
{
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211a:	0005      	movs	r5, r0
 800211c:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 800211e:	2800      	cmp	r0, #0
 8002120:	d05a      	beq.n	80021d8 <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002122:	230c      	movs	r3, #12
 8002124:	4cbe      	ldr	r4, [pc, #760]	; (8002420 <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002126:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002128:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800212a:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800212c:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	025b      	lsls	r3, r3, #9
 8002132:	0019      	movs	r1, r3
 8002134:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002136:	07d2      	lsls	r2, r2, #31
 8002138:	d442      	bmi.n	80021c0 <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213a:	682b      	ldr	r3, [r5, #0]
 800213c:	079b      	lsls	r3, r3, #30
 800213e:	d500      	bpl.n	8002142 <HAL_RCC_OscConfig+0x2a>
 8002140:	e08b      	b.n	800225a <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002142:	682b      	ldr	r3, [r5, #0]
 8002144:	06db      	lsls	r3, r3, #27
 8002146:	d529      	bpl.n	800219c <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002148:	2e00      	cmp	r6, #0
 800214a:	d000      	beq.n	800214e <HAL_RCC_OscConfig+0x36>
 800214c:	e0dc      	b.n	8002308 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	059b      	lsls	r3, r3, #22
 8002152:	d502      	bpl.n	800215a <HAL_RCC_OscConfig+0x42>
 8002154:	69eb      	ldr	r3, [r5, #28]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d03e      	beq.n	80021d8 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800215a:	6862      	ldr	r2, [r4, #4]
 800215c:	49b1      	ldr	r1, [pc, #708]	; (8002424 <HAL_RCC_OscConfig+0x30c>)
 800215e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002160:	400a      	ands	r2, r1
 8002162:	431a      	orrs	r2, r3
 8002164:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002166:	6861      	ldr	r1, [r4, #4]
 8002168:	6a2a      	ldr	r2, [r5, #32]
 800216a:	0209      	lsls	r1, r1, #8
 800216c:	0a09      	lsrs	r1, r1, #8
 800216e:	0612      	lsls	r2, r2, #24
 8002170:	430a      	orrs	r2, r1
 8002172:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	0b5b      	lsrs	r3, r3, #13
 8002178:	3301      	adds	r3, #1
 800217a:	0212      	lsls	r2, r2, #8
 800217c:	409a      	lsls	r2, r3
 800217e:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002180:	68e1      	ldr	r1, [r4, #12]
 8002182:	060a      	lsls	r2, r1, #24
 8002184:	49a8      	ldr	r1, [pc, #672]	; (8002428 <HAL_RCC_OscConfig+0x310>)
 8002186:	0f12      	lsrs	r2, r2, #28
 8002188:	5c8a      	ldrb	r2, [r1, r2]
 800218a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800218c:	4aa7      	ldr	r2, [pc, #668]	; (800242c <HAL_RCC_OscConfig+0x314>)
 800218e:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8002190:	4ba7      	ldr	r3, [pc, #668]	; (8002430 <HAL_RCC_OscConfig+0x318>)
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	f7ff f9e6 	bl	8001564 <HAL_InitTick>
        if(status != HAL_OK)
 8002198:	2800      	cmp	r0, #0
 800219a:	d134      	bne.n	8002206 <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	071b      	lsls	r3, r3, #28
 80021a0:	d500      	bpl.n	80021a4 <HAL_RCC_OscConfig+0x8c>
 80021a2:	e0e8      	b.n	8002376 <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a4:	682b      	ldr	r3, [r5, #0]
 80021a6:	075b      	lsls	r3, r3, #29
 80021a8:	d500      	bpl.n	80021ac <HAL_RCC_OscConfig+0x94>
 80021aa:	e10a      	b.n	80023c2 <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021ac:	682b      	ldr	r3, [r5, #0]
 80021ae:	069b      	lsls	r3, r3, #26
 80021b0:	d500      	bpl.n	80021b4 <HAL_RCC_OscConfig+0x9c>
 80021b2:	e18e      	b.n	80024d2 <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d000      	beq.n	80021bc <HAL_RCC_OscConfig+0xa4>
 80021ba:	e1bd      	b.n	8002538 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 80021bc:	2000      	movs	r0, #0
 80021be:	e022      	b.n	8002206 <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c0:	2e08      	cmp	r6, #8
 80021c2:	d003      	beq.n	80021cc <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021c4:	2e0c      	cmp	r6, #12
 80021c6:	d109      	bne.n	80021dc <HAL_RCC_OscConfig+0xc4>
 80021c8:	2f00      	cmp	r7, #0
 80021ca:	d007      	beq.n	80021dc <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	039b      	lsls	r3, r3, #14
 80021d0:	d5b3      	bpl.n	800213a <HAL_RCC_OscConfig+0x22>
 80021d2:	686b      	ldr	r3, [r5, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1b0      	bne.n	800213a <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 80021d8:	2001      	movs	r0, #1
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021dc:	686a      	ldr	r2, [r5, #4]
 80021de:	428a      	cmp	r2, r1
 80021e0:	d113      	bne.n	800220a <HAL_RCC_OscConfig+0xf2>
 80021e2:	6822      	ldr	r2, [r4, #0]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021e8:	f7ff fa00 	bl	80015ec <HAL_GetTick>
 80021ec:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	0292      	lsls	r2, r2, #10
 80021f4:	4213      	tst	r3, r2
 80021f6:	d1a0      	bne.n	800213a <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff f9f8 	bl	80015ec <HAL_GetTick>
 80021fc:	9b00      	ldr	r3, [sp, #0]
 80021fe:	1ac0      	subs	r0, r0, r3
 8002200:	2864      	cmp	r0, #100	; 0x64
 8002202:	d9f4      	bls.n	80021ee <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 8002204:	2003      	movs	r0, #3
}
 8002206:	b005      	add	sp, #20
 8002208:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220a:	21a0      	movs	r1, #160	; 0xa0
 800220c:	02c9      	lsls	r1, r1, #11
 800220e:	428a      	cmp	r2, r1
 8002210:	d105      	bne.n	800221e <HAL_RCC_OscConfig+0x106>
 8002212:	2280      	movs	r2, #128	; 0x80
 8002214:	6821      	ldr	r1, [r4, #0]
 8002216:	02d2      	lsls	r2, r2, #11
 8002218:	430a      	orrs	r2, r1
 800221a:	6022      	str	r2, [r4, #0]
 800221c:	e7e1      	b.n	80021e2 <HAL_RCC_OscConfig+0xca>
 800221e:	6821      	ldr	r1, [r4, #0]
 8002220:	4884      	ldr	r0, [pc, #528]	; (8002434 <HAL_RCC_OscConfig+0x31c>)
 8002222:	4001      	ands	r1, r0
 8002224:	6021      	str	r1, [r4, #0]
 8002226:	6821      	ldr	r1, [r4, #0]
 8002228:	400b      	ands	r3, r1
 800222a:	9303      	str	r3, [sp, #12]
 800222c:	9b03      	ldr	r3, [sp, #12]
 800222e:	4982      	ldr	r1, [pc, #520]	; (8002438 <HAL_RCC_OscConfig+0x320>)
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	400b      	ands	r3, r1
 8002234:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002236:	2a00      	cmp	r2, #0
 8002238:	d1d6      	bne.n	80021e8 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 800223a:	f7ff f9d7 	bl	80015ec <HAL_GetTick>
 800223e:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002240:	2280      	movs	r2, #128	; 0x80
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	0292      	lsls	r2, r2, #10
 8002246:	4213      	tst	r3, r2
 8002248:	d100      	bne.n	800224c <HAL_RCC_OscConfig+0x134>
 800224a:	e776      	b.n	800213a <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff f9ce 	bl	80015ec <HAL_GetTick>
 8002250:	9b00      	ldr	r3, [sp, #0]
 8002252:	1ac0      	subs	r0, r0, r3
 8002254:	2864      	cmp	r0, #100	; 0x64
 8002256:	d9f3      	bls.n	8002240 <HAL_RCC_OscConfig+0x128>
 8002258:	e7d4      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 800225a:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800225c:	2e04      	cmp	r6, #4
 800225e:	d003      	beq.n	8002268 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002260:	2e0c      	cmp	r6, #12
 8002262:	d124      	bne.n	80022ae <HAL_RCC_OscConfig+0x196>
 8002264:	2f00      	cmp	r7, #0
 8002266:	d122      	bne.n	80022ae <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002268:	6823      	ldr	r3, [r4, #0]
 800226a:	075b      	lsls	r3, r3, #29
 800226c:	d501      	bpl.n	8002272 <HAL_RCC_OscConfig+0x15a>
 800226e:	2a00      	cmp	r2, #0
 8002270:	d0b2      	beq.n	80021d8 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002272:	6861      	ldr	r1, [r4, #4]
 8002274:	692b      	ldr	r3, [r5, #16]
 8002276:	4871      	ldr	r0, [pc, #452]	; (800243c <HAL_RCC_OscConfig+0x324>)
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	4001      	ands	r1, r0
 800227c:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800227e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002280:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	438b      	bics	r3, r1
 8002286:	4313      	orrs	r3, r2
 8002288:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800228a:	f7ff fefd 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 800228e:	68e3      	ldr	r3, [r4, #12]
 8002290:	4a65      	ldr	r2, [pc, #404]	; (8002428 <HAL_RCC_OscConfig+0x310>)
 8002292:	061b      	lsls	r3, r3, #24
 8002294:	0f1b      	lsrs	r3, r3, #28
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	40d8      	lsrs	r0, r3
 800229a:	4b64      	ldr	r3, [pc, #400]	; (800242c <HAL_RCC_OscConfig+0x314>)
 800229c:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 800229e:	4b64      	ldr	r3, [pc, #400]	; (8002430 <HAL_RCC_OscConfig+0x318>)
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	f7ff f95f 	bl	8001564 <HAL_InitTick>
      if(status != HAL_OK)
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d100      	bne.n	80022ac <HAL_RCC_OscConfig+0x194>
 80022aa:	e74a      	b.n	8002142 <HAL_RCC_OscConfig+0x2a>
 80022ac:	e7ab      	b.n	8002206 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022ae:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 80022b0:	2a00      	cmp	r2, #0
 80022b2:	d018      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022b4:	2109      	movs	r1, #9
 80022b6:	438b      	bics	r3, r1
 80022b8:	4313      	orrs	r3, r2
 80022ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80022bc:	f7ff f996 	bl	80015ec <HAL_GetTick>
 80022c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022c2:	2204      	movs	r2, #4
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	4213      	tst	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ca:	6862      	ldr	r2, [r4, #4]
 80022cc:	692b      	ldr	r3, [r5, #16]
 80022ce:	495b      	ldr	r1, [pc, #364]	; (800243c <HAL_RCC_OscConfig+0x324>)
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	400a      	ands	r2, r1
 80022d4:	4313      	orrs	r3, r2
 80022d6:	6063      	str	r3, [r4, #4]
 80022d8:	e733      	b.n	8002142 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022da:	f7ff f987 	bl	80015ec <HAL_GetTick>
 80022de:	1bc0      	subs	r0, r0, r7
 80022e0:	2802      	cmp	r0, #2
 80022e2:	d9ee      	bls.n	80022c2 <HAL_RCC_OscConfig+0x1aa>
 80022e4:	e78e      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 80022e6:	2201      	movs	r2, #1
 80022e8:	4393      	bics	r3, r2
 80022ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80022ec:	f7ff f97e 	bl	80015ec <HAL_GetTick>
 80022f0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022f2:	2204      	movs	r2, #4
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	4213      	tst	r3, r2
 80022f8:	d100      	bne.n	80022fc <HAL_RCC_OscConfig+0x1e4>
 80022fa:	e722      	b.n	8002142 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fc:	f7ff f976 	bl	80015ec <HAL_GetTick>
 8002300:	1bc0      	subs	r0, r0, r7
 8002302:	2802      	cmp	r0, #2
 8002304:	d9f5      	bls.n	80022f2 <HAL_RCC_OscConfig+0x1da>
 8002306:	e77d      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002308:	69eb      	ldr	r3, [r5, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d020      	beq.n	8002350 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	6822      	ldr	r2, [r4, #0]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4313      	orrs	r3, r2
 8002316:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002318:	f7ff f968 	bl	80015ec <HAL_GetTick>
 800231c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	0092      	lsls	r2, r2, #2
 8002324:	4213      	tst	r3, r2
 8002326:	d00d      	beq.n	8002344 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002328:	6863      	ldr	r3, [r4, #4]
 800232a:	4a3e      	ldr	r2, [pc, #248]	; (8002424 <HAL_RCC_OscConfig+0x30c>)
 800232c:	4013      	ands	r3, r2
 800232e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002330:	4313      	orrs	r3, r2
 8002332:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002334:	6862      	ldr	r2, [r4, #4]
 8002336:	6a2b      	ldr	r3, [r5, #32]
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	061b      	lsls	r3, r3, #24
 800233c:	0a12      	lsrs	r2, r2, #8
 800233e:	4313      	orrs	r3, r2
 8002340:	6063      	str	r3, [r4, #4]
 8002342:	e72b      	b.n	800219c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002344:	f7ff f952 	bl	80015ec <HAL_GetTick>
 8002348:	1bc0      	subs	r0, r0, r7
 800234a:	2802      	cmp	r0, #2
 800234c:	d9e7      	bls.n	800231e <HAL_RCC_OscConfig+0x206>
 800234e:	e759      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	4a3b      	ldr	r2, [pc, #236]	; (8002440 <HAL_RCC_OscConfig+0x328>)
 8002354:	4013      	ands	r3, r2
 8002356:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002358:	f7ff f948 	bl	80015ec <HAL_GetTick>
 800235c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	0092      	lsls	r2, r2, #2
 8002364:	4213      	tst	r3, r2
 8002366:	d100      	bne.n	800236a <HAL_RCC_OscConfig+0x252>
 8002368:	e718      	b.n	800219c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800236a:	f7ff f93f 	bl	80015ec <HAL_GetTick>
 800236e:	1bc0      	subs	r0, r0, r7
 8002370:	2802      	cmp	r0, #2
 8002372:	d9f4      	bls.n	800235e <HAL_RCC_OscConfig+0x246>
 8002374:	e746      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002376:	696a      	ldr	r2, [r5, #20]
 8002378:	2301      	movs	r3, #1
 800237a:	2a00      	cmp	r2, #0
 800237c:	d010      	beq.n	80023a0 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 800237e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002380:	4313      	orrs	r3, r2
 8002382:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002384:	f7ff f932 	bl	80015ec <HAL_GetTick>
 8002388:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800238a:	2202      	movs	r2, #2
 800238c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800238e:	4213      	tst	r3, r2
 8002390:	d000      	beq.n	8002394 <HAL_RCC_OscConfig+0x27c>
 8002392:	e707      	b.n	80021a4 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002394:	f7ff f92a 	bl	80015ec <HAL_GetTick>
 8002398:	1bc0      	subs	r0, r0, r7
 800239a:	2802      	cmp	r0, #2
 800239c:	d9f5      	bls.n	800238a <HAL_RCC_OscConfig+0x272>
 800239e:	e731      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 80023a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80023a2:	439a      	bics	r2, r3
 80023a4:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80023a6:	f7ff f921 	bl	80015ec <HAL_GetTick>
 80023aa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023ac:	2202      	movs	r2, #2
 80023ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80023b0:	4213      	tst	r3, r2
 80023b2:	d100      	bne.n	80023b6 <HAL_RCC_OscConfig+0x29e>
 80023b4:	e6f6      	b.n	80021a4 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b6:	f7ff f919 	bl	80015ec <HAL_GetTick>
 80023ba:	1bc0      	subs	r0, r0, r7
 80023bc:	2802      	cmp	r0, #2
 80023be:	d9f5      	bls.n	80023ac <HAL_RCC_OscConfig+0x294>
 80023c0:	e720      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80023c4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80023c8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80023ca:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023cc:	421a      	tst	r2, r3
 80023ce:	d104      	bne.n	80023da <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80023d2:	4313      	orrs	r3, r2
 80023d4:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	2280      	movs	r2, #128	; 0x80
 80023dc:	4f19      	ldr	r7, [pc, #100]	; (8002444 <HAL_RCC_OscConfig+0x32c>)
 80023de:	0052      	lsls	r2, r2, #1
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4213      	tst	r3, r2
 80023e4:	d008      	beq.n	80023f8 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e6:	2280      	movs	r2, #128	; 0x80
 80023e8:	68ab      	ldr	r3, [r5, #8]
 80023ea:	0052      	lsls	r2, r2, #1
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d12b      	bne.n	8002448 <HAL_RCC_OscConfig+0x330>
 80023f0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80023f2:	4313      	orrs	r3, r2
 80023f4:	6523      	str	r3, [r4, #80]	; 0x50
 80023f6:	e04c      	b.n	8002492 <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	0052      	lsls	r2, r2, #1
 80023fe:	4313      	orrs	r3, r2
 8002400:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002402:	f7ff f8f3 	bl	80015ec <HAL_GetTick>
 8002406:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	0052      	lsls	r2, r2, #1
 800240e:	4213      	tst	r3, r2
 8002410:	d1e9      	bne.n	80023e6 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7ff f8eb 	bl	80015ec <HAL_GetTick>
 8002416:	9b01      	ldr	r3, [sp, #4]
 8002418:	1ac0      	subs	r0, r0, r3
 800241a:	2864      	cmp	r0, #100	; 0x64
 800241c:	d9f4      	bls.n	8002408 <HAL_RCC_OscConfig+0x2f0>
 800241e:	e6f1      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
 8002420:	40021000 	.word	0x40021000
 8002424:	ffff1fff 	.word	0xffff1fff
 8002428:	080044dc 	.word	0x080044dc
 800242c:	20000140 	.word	0x20000140
 8002430:	20000148 	.word	0x20000148
 8002434:	fffeffff 	.word	0xfffeffff
 8002438:	fffbffff 	.word	0xfffbffff
 800243c:	ffffe0ff 	.word	0xffffe0ff
 8002440:	fffffeff 	.word	0xfffffeff
 8002444:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002448:	2b00      	cmp	r3, #0
 800244a:	d116      	bne.n	800247a <HAL_RCC_OscConfig+0x362>
 800244c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800244e:	4a6b      	ldr	r2, [pc, #428]	; (80025fc <HAL_RCC_OscConfig+0x4e4>)
 8002450:	4013      	ands	r3, r2
 8002452:	6523      	str	r3, [r4, #80]	; 0x50
 8002454:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002456:	4a6a      	ldr	r2, [pc, #424]	; (8002600 <HAL_RCC_OscConfig+0x4e8>)
 8002458:	4013      	ands	r3, r2
 800245a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800245c:	f7ff f8c6 	bl	80015ec <HAL_GetTick>
 8002460:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002462:	2280      	movs	r2, #128	; 0x80
 8002464:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002466:	0092      	lsls	r2, r2, #2
 8002468:	4213      	tst	r3, r2
 800246a:	d01a      	beq.n	80024a2 <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7ff f8be 	bl	80015ec <HAL_GetTick>
 8002470:	4b64      	ldr	r3, [pc, #400]	; (8002604 <HAL_RCC_OscConfig+0x4ec>)
 8002472:	1bc0      	subs	r0, r0, r7
 8002474:	4298      	cmp	r0, r3
 8002476:	d9f4      	bls.n	8002462 <HAL_RCC_OscConfig+0x34a>
 8002478:	e6c4      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247a:	21a0      	movs	r1, #160	; 0xa0
 800247c:	00c9      	lsls	r1, r1, #3
 800247e:	428b      	cmp	r3, r1
 8002480:	d118      	bne.n	80024b4 <HAL_RCC_OscConfig+0x39c>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	430b      	orrs	r3, r1
 800248a:	6523      	str	r3, [r4, #80]	; 0x50
 800248c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800248e:	431a      	orrs	r2, r3
 8002490:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002492:	f7ff f8ab 	bl	80015ec <HAL_GetTick>
 8002496:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800249c:	0092      	lsls	r2, r2, #2
 800249e:	4213      	tst	r3, r2
 80024a0:	d010      	beq.n	80024c4 <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 80024a2:	9b00      	ldr	r3, [sp, #0]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d000      	beq.n	80024aa <HAL_RCC_OscConfig+0x392>
 80024a8:	e680      	b.n	80021ac <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024ac:	4a56      	ldr	r2, [pc, #344]	; (8002608 <HAL_RCC_OscConfig+0x4f0>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80024b2:	e67b      	b.n	80021ac <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024b6:	4a51      	ldr	r2, [pc, #324]	; (80025fc <HAL_RCC_OscConfig+0x4e4>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	6523      	str	r3, [r4, #80]	; 0x50
 80024bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024be:	4a50      	ldr	r2, [pc, #320]	; (8002600 <HAL_RCC_OscConfig+0x4e8>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	e797      	b.n	80023f4 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c4:	f7ff f892 	bl	80015ec <HAL_GetTick>
 80024c8:	4b4e      	ldr	r3, [pc, #312]	; (8002604 <HAL_RCC_OscConfig+0x4ec>)
 80024ca:	1bc0      	subs	r0, r0, r7
 80024cc:	4298      	cmp	r0, r3
 80024ce:	d9e3      	bls.n	8002498 <HAL_RCC_OscConfig+0x380>
 80024d0:	e698      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024d2:	69a9      	ldr	r1, [r5, #24]
 80024d4:	2301      	movs	r3, #1
 80024d6:	4a4d      	ldr	r2, [pc, #308]	; (800260c <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	2900      	cmp	r1, #0
 80024da:	d018      	beq.n	800250e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 80024dc:	68a1      	ldr	r1, [r4, #8]
 80024de:	4319      	orrs	r1, r3
 80024e0:	60a1      	str	r1, [r4, #8]
 80024e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024e4:	430b      	orrs	r3, r1
 80024e6:	6363      	str	r3, [r4, #52]	; 0x34
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	6a11      	ldr	r1, [r2, #32]
 80024ec:	019b      	lsls	r3, r3, #6
 80024ee:	430b      	orrs	r3, r1
 80024f0:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80024f2:	f7ff f87b 	bl	80015ec <HAL_GetTick>
 80024f6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024f8:	2202      	movs	r2, #2
 80024fa:	68a3      	ldr	r3, [r4, #8]
 80024fc:	4213      	tst	r3, r2
 80024fe:	d000      	beq.n	8002502 <HAL_RCC_OscConfig+0x3ea>
 8002500:	e658      	b.n	80021b4 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002502:	f7ff f873 	bl	80015ec <HAL_GetTick>
 8002506:	1bc0      	subs	r0, r0, r7
 8002508:	2802      	cmp	r0, #2
 800250a:	d9f5      	bls.n	80024f8 <HAL_RCC_OscConfig+0x3e0>
 800250c:	e67a      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 800250e:	68a1      	ldr	r1, [r4, #8]
 8002510:	4399      	bics	r1, r3
 8002512:	60a1      	str	r1, [r4, #8]
 8002514:	6a13      	ldr	r3, [r2, #32]
 8002516:	493e      	ldr	r1, [pc, #248]	; (8002610 <HAL_RCC_OscConfig+0x4f8>)
 8002518:	400b      	ands	r3, r1
 800251a:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800251c:	f7ff f866 	bl	80015ec <HAL_GetTick>
 8002520:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002522:	2202      	movs	r2, #2
 8002524:	68a3      	ldr	r3, [r4, #8]
 8002526:	4213      	tst	r3, r2
 8002528:	d100      	bne.n	800252c <HAL_RCC_OscConfig+0x414>
 800252a:	e643      	b.n	80021b4 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800252c:	f7ff f85e 	bl	80015ec <HAL_GetTick>
 8002530:	1bc0      	subs	r0, r0, r7
 8002532:	2802      	cmp	r0, #2
 8002534:	d9f5      	bls.n	8002522 <HAL_RCC_OscConfig+0x40a>
 8002536:	e665      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002538:	2e0c      	cmp	r6, #12
 800253a:	d043      	beq.n	80025c4 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253c:	4a35      	ldr	r2, [pc, #212]	; (8002614 <HAL_RCC_OscConfig+0x4fc>)
 800253e:	2b02      	cmp	r3, #2
 8002540:	d12e      	bne.n	80025a0 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 8002542:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002544:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002546:	4013      	ands	r3, r2
 8002548:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800254a:	f7ff f84f 	bl	80015ec <HAL_GetTick>
 800254e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002550:	04bf      	lsls	r7, r7, #18
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	423b      	tst	r3, r7
 8002556:	d11d      	bne.n	8002594 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002558:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800255a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800255c:	68e2      	ldr	r2, [r4, #12]
 800255e:	430b      	orrs	r3, r1
 8002560:	492d      	ldr	r1, [pc, #180]	; (8002618 <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002562:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002564:	400a      	ands	r2, r1
 8002566:	4313      	orrs	r3, r2
 8002568:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800256a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256c:	4313      	orrs	r3, r2
 800256e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	6822      	ldr	r2, [r4, #0]
 8002574:	045b      	lsls	r3, r3, #17
 8002576:	4313      	orrs	r3, r2
 8002578:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800257a:	f7ff f837 	bl	80015ec <HAL_GetTick>
 800257e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	4233      	tst	r3, r6
 8002584:	d000      	beq.n	8002588 <HAL_RCC_OscConfig+0x470>
 8002586:	e619      	b.n	80021bc <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002588:	f7ff f830 	bl	80015ec <HAL_GetTick>
 800258c:	1b40      	subs	r0, r0, r5
 800258e:	2802      	cmp	r0, #2
 8002590:	d9f6      	bls.n	8002580 <HAL_RCC_OscConfig+0x468>
 8002592:	e637      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002594:	f7ff f82a 	bl	80015ec <HAL_GetTick>
 8002598:	1b80      	subs	r0, r0, r6
 800259a:	2802      	cmp	r0, #2
 800259c:	d9d9      	bls.n	8002552 <HAL_RCC_OscConfig+0x43a>
 800259e:	e631      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 80025a0:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025a2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80025a4:	4013      	ands	r3, r2
 80025a6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80025a8:	f7ff f820 	bl	80015ec <HAL_GetTick>
 80025ac:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025ae:	04b6      	lsls	r6, r6, #18
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	4233      	tst	r3, r6
 80025b4:	d100      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
 80025b6:	e601      	b.n	80021bc <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b8:	f7ff f818 	bl	80015ec <HAL_GetTick>
 80025bc:	1b40      	subs	r0, r0, r5
 80025be:	2802      	cmp	r0, #2
 80025c0:	d9f6      	bls.n	80025b0 <HAL_RCC_OscConfig+0x498>
 80025c2:	e61f      	b.n	8002204 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 80025c4:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d100      	bne.n	80025cc <HAL_RCC_OscConfig+0x4b4>
 80025ca:	e61c      	b.n	8002206 <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025cc:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80025ce:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80025d2:	0252      	lsls	r2, r2, #9
 80025d4:	401a      	ands	r2, r3
 80025d6:	428a      	cmp	r2, r1
 80025d8:	d000      	beq.n	80025dc <HAL_RCC_OscConfig+0x4c4>
 80025da:	e5fd      	b.n	80021d8 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025dc:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025e0:	0392      	lsls	r2, r2, #14
 80025e2:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e4:	428a      	cmp	r2, r1
 80025e6:	d000      	beq.n	80025ea <HAL_RCC_OscConfig+0x4d2>
 80025e8:	e5f6      	b.n	80021d8 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025ea:	22c0      	movs	r2, #192	; 0xc0
 80025ec:	0412      	lsls	r2, r2, #16
 80025ee:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025f0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d100      	bne.n	80025f8 <HAL_RCC_OscConfig+0x4e0>
 80025f6:	e5e1      	b.n	80021bc <HAL_RCC_OscConfig+0xa4>
 80025f8:	e5ee      	b.n	80021d8 <HAL_RCC_OscConfig+0xc0>
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	fffffeff 	.word	0xfffffeff
 8002600:	fffffbff 	.word	0xfffffbff
 8002604:	00001388 	.word	0x00001388
 8002608:	efffffff 	.word	0xefffffff
 800260c:	40010000 	.word	0x40010000
 8002610:	ffffdfff 	.word	0xffffdfff
 8002614:	feffffff 	.word	0xfeffffff
 8002618:	ff02ffff 	.word	0xff02ffff

0800261c <HAL_RCC_ClockConfig>:
{
 800261c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800261e:	1e04      	subs	r4, r0, #0
 8002620:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8002624:	2001      	movs	r0, #1
}
 8002626:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002628:	2501      	movs	r5, #1
 800262a:	4e5b      	ldr	r6, [pc, #364]	; (8002798 <HAL_RCC_ClockConfig+0x17c>)
 800262c:	9a01      	ldr	r2, [sp, #4]
 800262e:	6833      	ldr	r3, [r6, #0]
 8002630:	402b      	ands	r3, r5
 8002632:	4293      	cmp	r3, r2
 8002634:	d331      	bcc.n	800269a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002636:	6822      	ldr	r2, [r4, #0]
 8002638:	0793      	lsls	r3, r2, #30
 800263a:	d443      	bmi.n	80026c4 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263c:	07d3      	lsls	r3, r2, #31
 800263e:	d449      	bmi.n	80026d4 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002640:	2501      	movs	r5, #1
 8002642:	6833      	ldr	r3, [r6, #0]
 8002644:	9a01      	ldr	r2, [sp, #4]
 8002646:	402b      	ands	r3, r5
 8002648:	4293      	cmp	r3, r2
 800264a:	d909      	bls.n	8002660 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264c:	6833      	ldr	r3, [r6, #0]
 800264e:	43ab      	bics	r3, r5
 8002650:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002652:	f7fe ffcb 	bl	80015ec <HAL_GetTick>
 8002656:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002658:	6833      	ldr	r3, [r6, #0]
 800265a:	422b      	tst	r3, r5
 800265c:	d000      	beq.n	8002660 <HAL_RCC_ClockConfig+0x44>
 800265e:	e08c      	b.n	800277a <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002660:	6822      	ldr	r2, [r4, #0]
 8002662:	4d4e      	ldr	r5, [pc, #312]	; (800279c <HAL_RCC_ClockConfig+0x180>)
 8002664:	0753      	lsls	r3, r2, #29
 8002666:	d500      	bpl.n	800266a <HAL_RCC_ClockConfig+0x4e>
 8002668:	e08f      	b.n	800278a <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266a:	0713      	lsls	r3, r2, #28
 800266c:	d506      	bpl.n	800267c <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800266e:	68e9      	ldr	r1, [r5, #12]
 8002670:	6923      	ldr	r3, [r4, #16]
 8002672:	4a4b      	ldr	r2, [pc, #300]	; (80027a0 <HAL_RCC_ClockConfig+0x184>)
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	400a      	ands	r2, r1
 8002678:	4313      	orrs	r3, r2
 800267a:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800267c:	f7ff fd04 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 8002680:	68eb      	ldr	r3, [r5, #12]
 8002682:	4a48      	ldr	r2, [pc, #288]	; (80027a4 <HAL_RCC_ClockConfig+0x188>)
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	0f1b      	lsrs	r3, r3, #28
 8002688:	5cd3      	ldrb	r3, [r2, r3]
 800268a:	40d8      	lsrs	r0, r3
 800268c:	4b46      	ldr	r3, [pc, #280]	; (80027a8 <HAL_RCC_ClockConfig+0x18c>)
 800268e:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002690:	4b46      	ldr	r3, [pc, #280]	; (80027ac <HAL_RCC_ClockConfig+0x190>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	f7fe ff66 	bl	8001564 <HAL_InitTick>
  if(status != HAL_OK)
 8002698:	e7c5      	b.n	8002626 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	6833      	ldr	r3, [r6, #0]
 800269c:	9a01      	ldr	r2, [sp, #4]
 800269e:	43ab      	bics	r3, r5
 80026a0:	4313      	orrs	r3, r2
 80026a2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80026a4:	f7fe ffa2 	bl	80015ec <HAL_GetTick>
 80026a8:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	6833      	ldr	r3, [r6, #0]
 80026ac:	9a01      	ldr	r2, [sp, #4]
 80026ae:	402b      	ands	r3, r5
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d0c0      	beq.n	8002636 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b4:	f7fe ff9a 	bl	80015ec <HAL_GetTick>
 80026b8:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <HAL_RCC_ClockConfig+0x194>)
 80026ba:	1bc0      	subs	r0, r0, r7
 80026bc:	4298      	cmp	r0, r3
 80026be:	d9f4      	bls.n	80026aa <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80026c0:	2003      	movs	r0, #3
 80026c2:	e7b0      	b.n	8002626 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c4:	20f0      	movs	r0, #240	; 0xf0
 80026c6:	4935      	ldr	r1, [pc, #212]	; (800279c <HAL_RCC_ClockConfig+0x180>)
 80026c8:	68cb      	ldr	r3, [r1, #12]
 80026ca:	4383      	bics	r3, r0
 80026cc:	68a0      	ldr	r0, [r4, #8]
 80026ce:	4303      	orrs	r3, r0
 80026d0:	60cb      	str	r3, [r1, #12]
 80026d2:	e7b3      	b.n	800263c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d4:	4d31      	ldr	r5, [pc, #196]	; (800279c <HAL_RCC_ClockConfig+0x180>)
 80026d6:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026d8:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026da:	2a02      	cmp	r2, #2
 80026dc:	d118      	bne.n	8002710 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026de:	039b      	lsls	r3, r3, #14
 80026e0:	d5a0      	bpl.n	8002624 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e2:	2103      	movs	r1, #3
 80026e4:	68eb      	ldr	r3, [r5, #12]
 80026e6:	438b      	bics	r3, r1
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80026ec:	f7fe ff7e 	bl	80015ec <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f0:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80026f2:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d118      	bne.n	800272a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026f8:	220c      	movs	r2, #12
 80026fa:	68eb      	ldr	r3, [r5, #12]
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d09e      	beq.n	8002640 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002702:	f7fe ff73 	bl	80015ec <HAL_GetTick>
 8002706:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <HAL_RCC_ClockConfig+0x194>)
 8002708:	1bc0      	subs	r0, r0, r7
 800270a:	4298      	cmp	r0, r3
 800270c:	d9f4      	bls.n	80026f8 <HAL_RCC_ClockConfig+0xdc>
 800270e:	e7d7      	b.n	80026c0 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002710:	2a03      	cmp	r2, #3
 8002712:	d102      	bne.n	800271a <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002714:	019b      	lsls	r3, r3, #6
 8002716:	d4e4      	bmi.n	80026e2 <HAL_RCC_ClockConfig+0xc6>
 8002718:	e784      	b.n	8002624 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800271a:	2a01      	cmp	r2, #1
 800271c:	d102      	bne.n	8002724 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800271e:	075b      	lsls	r3, r3, #29
 8002720:	d4df      	bmi.n	80026e2 <HAL_RCC_ClockConfig+0xc6>
 8002722:	e77f      	b.n	8002624 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002724:	059b      	lsls	r3, r3, #22
 8002726:	d4dc      	bmi.n	80026e2 <HAL_RCC_ClockConfig+0xc6>
 8002728:	e77c      	b.n	8002624 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	2b03      	cmp	r3, #3
 800272c:	d10b      	bne.n	8002746 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800272e:	220c      	movs	r2, #12
 8002730:	68eb      	ldr	r3, [r5, #12]
 8002732:	4013      	ands	r3, r2
 8002734:	4293      	cmp	r3, r2
 8002736:	d083      	beq.n	8002640 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7fe ff58 	bl	80015ec <HAL_GetTick>
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <HAL_RCC_ClockConfig+0x194>)
 800273e:	1bc0      	subs	r0, r0, r7
 8002740:	4298      	cmp	r0, r3
 8002742:	d9f4      	bls.n	800272e <HAL_RCC_ClockConfig+0x112>
 8002744:	e7bc      	b.n	80026c0 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002746:	2b01      	cmp	r3, #1
 8002748:	d011      	beq.n	800276e <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800274a:	220c      	movs	r2, #12
 800274c:	68eb      	ldr	r3, [r5, #12]
 800274e:	4213      	tst	r3, r2
 8002750:	d100      	bne.n	8002754 <HAL_RCC_ClockConfig+0x138>
 8002752:	e775      	b.n	8002640 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7fe ff4a 	bl	80015ec <HAL_GetTick>
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_RCC_ClockConfig+0x194>)
 800275a:	1bc0      	subs	r0, r0, r7
 800275c:	4298      	cmp	r0, r3
 800275e:	d9f4      	bls.n	800274a <HAL_RCC_ClockConfig+0x12e>
 8002760:	e7ae      	b.n	80026c0 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002762:	f7fe ff43 	bl	80015ec <HAL_GetTick>
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_RCC_ClockConfig+0x194>)
 8002768:	1bc0      	subs	r0, r0, r7
 800276a:	4298      	cmp	r0, r3
 800276c:	d8a8      	bhi.n	80026c0 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800276e:	220c      	movs	r2, #12
 8002770:	68eb      	ldr	r3, [r5, #12]
 8002772:	4013      	ands	r3, r2
 8002774:	2b04      	cmp	r3, #4
 8002776:	d1f4      	bne.n	8002762 <HAL_RCC_ClockConfig+0x146>
 8002778:	e762      	b.n	8002640 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277a:	f7fe ff37 	bl	80015ec <HAL_GetTick>
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_RCC_ClockConfig+0x194>)
 8002780:	1bc0      	subs	r0, r0, r7
 8002782:	4298      	cmp	r0, r3
 8002784:	d800      	bhi.n	8002788 <HAL_RCC_ClockConfig+0x16c>
 8002786:	e767      	b.n	8002658 <HAL_RCC_ClockConfig+0x3c>
 8002788:	e79a      	b.n	80026c0 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278a:	68eb      	ldr	r3, [r5, #12]
 800278c:	4909      	ldr	r1, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x198>)
 800278e:	400b      	ands	r3, r1
 8002790:	68e1      	ldr	r1, [r4, #12]
 8002792:	430b      	orrs	r3, r1
 8002794:	60eb      	str	r3, [r5, #12]
 8002796:	e768      	b.n	800266a <HAL_RCC_ClockConfig+0x4e>
 8002798:	40022000 	.word	0x40022000
 800279c:	40021000 	.word	0x40021000
 80027a0:	ffffc7ff 	.word	0xffffc7ff
 80027a4:	080044dc 	.word	0x080044dc
 80027a8:	20000140 	.word	0x20000140
 80027ac:	20000148 	.word	0x20000148
 80027b0:	00001388 	.word	0x00001388
 80027b4:	fffff8ff 	.word	0xfffff8ff

080027b8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <HAL_RCC_GetPCLK1Freq+0x14>)
 80027ba:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	055b      	lsls	r3, r3, #21
 80027c0:	0f5b      	lsrs	r3, r3, #29
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
 80027c4:	4a03      	ldr	r2, [pc, #12]	; (80027d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80027c6:	6810      	ldr	r0, [r2, #0]
 80027c8:	40d8      	lsrs	r0, r3
}
 80027ca:	4770      	bx	lr
 80027cc:	40021000 	.word	0x40021000
 80027d0:	080044ec 	.word	0x080044ec
 80027d4:	20000140 	.word	0x20000140

080027d8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x14>)
 80027da:	4a05      	ldr	r2, [pc, #20]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	049b      	lsls	r3, r3, #18
 80027e0:	0f5b      	lsrs	r3, r3, #29
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	4a03      	ldr	r2, [pc, #12]	; (80027f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80027e6:	6810      	ldr	r0, [r2, #0]
 80027e8:	40d8      	lsrs	r0, r3
}
 80027ea:	4770      	bx	lr
 80027ec:	40021000 	.word	0x40021000
 80027f0:	080044ec 	.word	0x080044ec
 80027f4:	20000140 	.word	0x20000140

080027f8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027f8:	6803      	ldr	r3, [r0, #0]
{
 80027fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027fc:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027fe:	069b      	lsls	r3, r3, #26
 8002800:	d52d      	bpl.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x66>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002802:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8002804:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002806:	4c5c      	ldr	r4, [pc, #368]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002808:	055b      	lsls	r3, r3, #21
 800280a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 800280c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280e:	421a      	tst	r2, r3
 8002810:	d104      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002814:	4313      	orrs	r3, r2
 8002816:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8002818:	2301      	movs	r3, #1
 800281a:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	2780      	movs	r7, #128	; 0x80
 800281e:	4e57      	ldr	r6, [pc, #348]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002820:	007f      	lsls	r7, r7, #1
 8002822:	6833      	ldr	r3, [r6, #0]
 8002824:	423b      	tst	r3, r7
 8002826:	d053      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002828:	686b      	ldr	r3, [r5, #4]
 800282a:	21c0      	movs	r1, #192	; 0xc0
 800282c:	0018      	movs	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800282e:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002830:	0389      	lsls	r1, r1, #14
 8002832:	4008      	ands	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002834:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002836:	4290      	cmp	r0, r2
 8002838:	d15b      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800283a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800283c:	22c0      	movs	r2, #192	; 0xc0
 800283e:	0008      	movs	r0, r1
 8002840:	0292      	lsls	r2, r2, #10
 8002842:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002844:	4211      	tst	r1, r2
 8002846:	d15f      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002848:	682b      	ldr	r3, [r5, #0]
 800284a:	069b      	lsls	r3, r3, #26
 800284c:	d500      	bpl.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800284e:	e070      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002850:	9b00      	ldr	r3, [sp, #0]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d103      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002856:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002858:	4a49      	ldr	r2, [pc, #292]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800285a:	4013      	ands	r3, r2
 800285c:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800285e:	682b      	ldr	r3, [r5, #0]
 8002860:	07da      	lsls	r2, r3, #31
 8002862:	d506      	bpl.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002864:	2003      	movs	r0, #3
 8002866:	4944      	ldr	r1, [pc, #272]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002868:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800286a:	4382      	bics	r2, r0
 800286c:	68a8      	ldr	r0, [r5, #8]
 800286e:	4302      	orrs	r2, r0
 8002870:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002872:	079a      	lsls	r2, r3, #30
 8002874:	d506      	bpl.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002876:	200c      	movs	r0, #12
 8002878:	493f      	ldr	r1, [pc, #252]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800287a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800287c:	4382      	bics	r2, r0
 800287e:	68e8      	ldr	r0, [r5, #12]
 8002880:	4302      	orrs	r2, r0
 8002882:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002884:	075a      	lsls	r2, r3, #29
 8002886:	d506      	bpl.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002888:	493b      	ldr	r1, [pc, #236]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800288a:	483e      	ldr	r0, [pc, #248]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800288c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800288e:	4002      	ands	r2, r0
 8002890:	6928      	ldr	r0, [r5, #16]
 8002892:	4302      	orrs	r2, r0
 8002894:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002896:	071a      	lsls	r2, r3, #28
 8002898:	d506      	bpl.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800289a:	4937      	ldr	r1, [pc, #220]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800289c:	483a      	ldr	r0, [pc, #232]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800289e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80028a0:	4002      	ands	r2, r0
 80028a2:	6968      	ldr	r0, [r5, #20]
 80028a4:	4302      	orrs	r2, r0
 80028a6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028a8:	065a      	lsls	r2, r3, #25
 80028aa:	d506      	bpl.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ac:	4932      	ldr	r1, [pc, #200]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80028ae:	4837      	ldr	r0, [pc, #220]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80028b0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80028b2:	4002      	ands	r2, r0
 80028b4:	69e8      	ldr	r0, [r5, #28]
 80028b6:	4302      	orrs	r2, r0
 80028b8:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80028ba:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	d517      	bpl.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80028c0:	4a2d      	ldr	r2, [pc, #180]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80028c2:	4933      	ldr	r1, [pc, #204]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80028c4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80028c6:	400b      	ands	r3, r1
 80028c8:	69a9      	ldr	r1, [r5, #24]
 80028ca:	430b      	orrs	r3, r1
 80028cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ce:	e00f      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d0:	6833      	ldr	r3, [r6, #0]
 80028d2:	433b      	orrs	r3, r7
 80028d4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80028d6:	f7fe fe89 	bl	80015ec <HAL_GetTick>
 80028da:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028dc:	6833      	ldr	r3, [r6, #0]
 80028de:	423b      	tst	r3, r7
 80028e0:	d1a2      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7fe fe83 	bl	80015ec <HAL_GetTick>
 80028e6:	9b01      	ldr	r3, [sp, #4]
 80028e8:	1ac0      	subs	r0, r0, r3
 80028ea:	2864      	cmp	r0, #100	; 0x64
 80028ec:	d9f6      	bls.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
          return HAL_TIMEOUT;
 80028ee:	2003      	movs	r0, #3
}
 80028f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80028f2:	22c0      	movs	r2, #192	; 0xc0
 80028f4:	0019      	movs	r1, r3
 80028f6:	0292      	lsls	r2, r2, #10
 80028f8:	4011      	ands	r1, r2
 80028fa:	4291      	cmp	r1, r2
 80028fc:	d19d      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80028fe:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8002900:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002902:	0392      	lsls	r2, r2, #14
 8002904:	d599      	bpl.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002906:	e7f3      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002908:	4013      	ands	r3, r2
 800290a:	4283      	cmp	r3, r0
 800290c:	d09c      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800290e:	682b      	ldr	r3, [r5, #0]
 8002910:	069b      	lsls	r3, r3, #26
 8002912:	d59d      	bpl.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002914:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002916:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8002918:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800291a:	0312      	lsls	r2, r2, #12
 800291c:	4302      	orrs	r2, r0
 800291e:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002920:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002924:	481c      	ldr	r0, [pc, #112]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002926:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002928:	4002      	ands	r2, r0
 800292a:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800292c:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800292e:	05cb      	lsls	r3, r1, #23
 8002930:	d412      	bmi.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002932:	6869      	ldr	r1, [r5, #4]
 8002934:	23c0      	movs	r3, #192	; 0xc0
 8002936:	000a      	movs	r2, r1
 8002938:	029b      	lsls	r3, r3, #10
 800293a:	401a      	ands	r2, r3
 800293c:	429a      	cmp	r2, r3
 800293e:	d107      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	4816      	ldr	r0, [pc, #88]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002944:	4003      	ands	r3, r0
 8002946:	20c0      	movs	r0, #192	; 0xc0
 8002948:	0380      	lsls	r0, r0, #14
 800294a:	4001      	ands	r1, r0
 800294c:	430b      	orrs	r3, r1
 800294e:	6023      	str	r3, [r4, #0]
 8002950:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002952:	431a      	orrs	r2, r3
 8002954:	6522      	str	r2, [r4, #80]	; 0x50
 8002956:	e77b      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 8002958:	f7fe fe48 	bl	80015ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800295c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800295e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002960:	00bf      	lsls	r7, r7, #2
 8002962:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002964:	423b      	tst	r3, r7
 8002966:	d000      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002968:	e76e      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296a:	f7fe fe3f 	bl	80015ec <HAL_GetTick>
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002970:	1b80      	subs	r0, r0, r6
 8002972:	4298      	cmp	r0, r3
 8002974:	d9f5      	bls.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002976:	e7ba      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002978:	40021000 	.word	0x40021000
 800297c:	40007000 	.word	0x40007000
 8002980:	efffffff 	.word	0xefffffff
 8002984:	fffff3ff 	.word	0xfffff3ff
 8002988:	ffffcfff 	.word	0xffffcfff
 800298c:	fbffffff 	.word	0xfbffffff
 8002990:	fff3ffff 	.word	0xfff3ffff
 8002994:	fffcffff 	.word	0xfffcffff
 8002998:	fff7ffff 	.word	0xfff7ffff
 800299c:	ffcfffff 	.word	0xffcfffff
 80029a0:	00001388 	.word	0x00001388

080029a4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a4:	2280      	movs	r2, #128	; 0x80
{
 80029a6:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80029a8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029aa:	05d2      	lsls	r2, r2, #23
 80029ac:	4290      	cmp	r0, r2
 80029ae:	d005      	beq.n	80029bc <TIM_Base_SetConfig+0x18>
 80029b0:	4c10      	ldr	r4, [pc, #64]	; (80029f4 <TIM_Base_SetConfig+0x50>)
 80029b2:	42a0      	cmp	r0, r4
 80029b4:	d002      	beq.n	80029bc <TIM_Base_SetConfig+0x18>
 80029b6:	4c10      	ldr	r4, [pc, #64]	; (80029f8 <TIM_Base_SetConfig+0x54>)
 80029b8:	42a0      	cmp	r0, r4
 80029ba:	d10f      	bne.n	80029dc <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029bc:	2470      	movs	r4, #112	; 0x70
 80029be:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80029c0:	684c      	ldr	r4, [r1, #4]
 80029c2:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029c4:	4290      	cmp	r0, r2
 80029c6:	d005      	beq.n	80029d4 <TIM_Base_SetConfig+0x30>
 80029c8:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <TIM_Base_SetConfig+0x50>)
 80029ca:	4290      	cmp	r0, r2
 80029cc:	d002      	beq.n	80029d4 <TIM_Base_SetConfig+0x30>
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <TIM_Base_SetConfig+0x54>)
 80029d0:	4290      	cmp	r0, r2
 80029d2:	d103      	bne.n	80029dc <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029d4:	4a09      	ldr	r2, [pc, #36]	; (80029fc <TIM_Base_SetConfig+0x58>)
 80029d6:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d8:	68ca      	ldr	r2, [r1, #12]
 80029da:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	4393      	bics	r3, r2
 80029e0:	690a      	ldr	r2, [r1, #16]
 80029e2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80029e4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e6:	688b      	ldr	r3, [r1, #8]
 80029e8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ea:	680b      	ldr	r3, [r1, #0]
 80029ec:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ee:	2301      	movs	r3, #1
 80029f0:	6143      	str	r3, [r0, #20]
}
 80029f2:	bd10      	pop	{r4, pc}
 80029f4:	40010800 	.word	0x40010800
 80029f8:	40011400 	.word	0x40011400
 80029fc:	fffffcff 	.word	0xfffffcff

08002a00 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a00:	2201      	movs	r2, #1
{
 8002a02:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a04:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a06:	6a03      	ldr	r3, [r0, #32]
 8002a08:	4393      	bics	r3, r2
 8002a0a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002a0c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002a0e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002a10:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a12:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a14:	680d      	ldr	r5, [r1, #0]
 8002a16:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a18:	2502      	movs	r5, #2
 8002a1a:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a1c:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a20:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a22:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8002a24:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8002a26:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a28:	6203      	str	r3, [r0, #32]
}
 8002a2a:	bd30      	pop	{r4, r5, pc}

08002a2c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	6a03      	ldr	r3, [r0, #32]
{
 8002a30:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a32:	4393      	bics	r3, r2
 8002a34:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a36:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a38:	4c09      	ldr	r4, [pc, #36]	; (8002a60 <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 8002a3a:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002a3c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a3e:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a40:	680a      	ldr	r2, [r1, #0]
 8002a42:	0212      	lsls	r2, r2, #8
 8002a44:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a46:	2420      	movs	r4, #32
 8002a48:	43a3      	bics	r3, r4
 8002a4a:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a4c:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a4e:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a50:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a52:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a54:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a56:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8002a58:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a5a:	6203      	str	r3, [r0, #32]
}
 8002a5c:	bd30      	pop	{r4, r5, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	ffff8cff 	.word	0xffff8cff

08002a64 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a64:	231f      	movs	r3, #31
{
 8002a66:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a68:	2401      	movs	r4, #1
 8002a6a:	4019      	ands	r1, r3
 8002a6c:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a6e:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002a70:	6a03      	ldr	r3, [r0, #32]
 8002a72:	43a3      	bics	r3, r4
 8002a74:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a76:	6a03      	ldr	r3, [r0, #32]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	6202      	str	r2, [r0, #32]
}
 8002a7c:	bd10      	pop	{r4, pc}
	...

08002a80 <HAL_TIM_OC_Start>:
{
 8002a80:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a82:	0003      	movs	r3, r0
{
 8002a84:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a86:	2900      	cmp	r1, #0
 8002a88:	d105      	bne.n	8002a96 <HAL_TIM_OC_Start+0x16>
 8002a8a:	333a      	adds	r3, #58	; 0x3a
    return HAL_ERROR;
 8002a8c:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a8e:	781a      	ldrb	r2, [r3, #0]
 8002a90:	4282      	cmp	r2, r0
 8002a92:	d00a      	beq.n	8002aaa <HAL_TIM_OC_Start+0x2a>
}
 8002a94:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a96:	2904      	cmp	r1, #4
 8002a98:	d101      	bne.n	8002a9e <HAL_TIM_OC_Start+0x1e>
 8002a9a:	333b      	adds	r3, #59	; 0x3b
 8002a9c:	e7f6      	b.n	8002a8c <HAL_TIM_OC_Start+0xc>
 8002a9e:	2908      	cmp	r1, #8
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_OC_Start+0x26>
 8002aa2:	333c      	adds	r3, #60	; 0x3c
 8002aa4:	e7f2      	b.n	8002a8c <HAL_TIM_OC_Start+0xc>
 8002aa6:	333d      	adds	r3, #61	; 0x3d
 8002aa8:	e7f0      	b.n	8002a8c <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aae:	6820      	ldr	r0, [r4, #0]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f7ff ffd7 	bl	8002a64 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	05d2      	lsls	r2, r2, #23
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d005      	beq.n	8002acc <HAL_TIM_OC_Start+0x4c>
 8002ac0:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <HAL_TIM_OC_Start+0x70>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d002      	beq.n	8002acc <HAL_TIM_OC_Start+0x4c>
 8002ac6:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <HAL_TIM_OC_Start+0x74>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d10a      	bne.n	8002ae2 <HAL_TIM_OC_Start+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002acc:	2107      	movs	r1, #7
 8002ace:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8002ad0:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ad2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad4:	2a06      	cmp	r2, #6
 8002ad6:	d0dd      	beq.n	8002a94 <HAL_TIM_OC_Start+0x14>
      __HAL_TIM_ENABLE(htim);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	6819      	ldr	r1, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e7d8      	b.n	8002a94 <HAL_TIM_OC_Start+0x14>
    __HAL_TIM_ENABLE(htim);
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	6819      	ldr	r1, [r3, #0]
  return HAL_OK;
 8002ae6:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	e7d2      	b.n	8002a94 <HAL_TIM_OC_Start+0x14>
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	40010800 	.word	0x40010800
 8002af4:	40011400 	.word	0x40011400

08002af8 <HAL_TIM_OC_Stop>:
{
 8002af8:	b570      	push	{r4, r5, r6, lr}
 8002afa:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002afc:	2200      	movs	r2, #0
 8002afe:	6800      	ldr	r0, [r0, #0]
{
 8002b00:	000d      	movs	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b02:	f7ff ffaf 	bl	8002a64 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	4a0c      	ldr	r2, [pc, #48]	; (8002b3c <HAL_TIM_OC_Stop+0x44>)
 8002b0a:	6a19      	ldr	r1, [r3, #32]
 8002b0c:	4211      	tst	r1, r2
 8002b0e:	d103      	bne.n	8002b18 <HAL_TIM_OC_Stop+0x20>
 8002b10:	2101      	movs	r1, #1
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	438a      	bics	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b18:	2301      	movs	r3, #1
 8002b1a:	2d00      	cmp	r5, #0
 8002b1c:	d103      	bne.n	8002b26 <HAL_TIM_OC_Stop+0x2e>
 8002b1e:	343a      	adds	r4, #58	; 0x3a
}
 8002b20:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b22:	7023      	strb	r3, [r4, #0]
}
 8002b24:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b26:	2d04      	cmp	r5, #4
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_OC_Stop+0x36>
 8002b2a:	343b      	adds	r4, #59	; 0x3b
 8002b2c:	e7f8      	b.n	8002b20 <HAL_TIM_OC_Stop+0x28>
 8002b2e:	2d08      	cmp	r5, #8
 8002b30:	d101      	bne.n	8002b36 <HAL_TIM_OC_Stop+0x3e>
 8002b32:	343c      	adds	r4, #60	; 0x3c
 8002b34:	e7f4      	b.n	8002b20 <HAL_TIM_OC_Stop+0x28>
 8002b36:	343d      	adds	r4, #61	; 0x3d
 8002b38:	e7f2      	b.n	8002b20 <HAL_TIM_OC_Stop+0x28>
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	00001111 	.word	0x00001111

08002b40 <HAL_TIM_PWM_Init>:
{
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002b44:	2001      	movs	r0, #1
  if (htim == NULL)
 8002b46:	2c00      	cmp	r4, #0
 8002b48:	d01d      	beq.n	8002b86 <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4a:	0025      	movs	r5, r4
 8002b4c:	3539      	adds	r5, #57	; 0x39
 8002b4e:	782b      	ldrb	r3, [r5, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002b56:	0023      	movs	r3, r4
 8002b58:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002b5a:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002b5c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8002b5e:	f7fe fc49 	bl	80013f4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b62:	2302      	movs	r3, #2
 8002b64:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b66:	6820      	ldr	r0, [r4, #0]
 8002b68:	1d21      	adds	r1, r4, #4
 8002b6a:	f7ff ff1b 	bl	80029a4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b6e:	0022      	movs	r2, r4
 8002b70:	2301      	movs	r3, #1
  return HAL_OK;
 8002b72:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b74:	323e      	adds	r2, #62	; 0x3e
 8002b76:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	343d      	adds	r4, #61	; 0x3d
 8002b7a:	3a04      	subs	r2, #4
 8002b7c:	7013      	strb	r3, [r2, #0]
 8002b7e:	7053      	strb	r3, [r2, #1]
 8002b80:	7093      	strb	r3, [r2, #2]
 8002b82:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002b84:	702b      	strb	r3, [r5, #0]
}
 8002b86:	bd70      	pop	{r4, r5, r6, pc}

08002b88 <HAL_TIM_PWM_Start>:
 8002b88:	b510      	push	{r4, lr}
 8002b8a:	f7ff ff79 	bl	8002a80 <HAL_TIM_OC_Start>
 8002b8e:	bd10      	pop	{r4, pc}

08002b90 <HAL_TIM_PWM_Stop>:
 8002b90:	b510      	push	{r4, lr}
 8002b92:	f7ff ffb1 	bl	8002af8 <HAL_TIM_OC_Stop>
 8002b96:	bd10      	pop	{r4, pc}

08002b98 <HAL_TIM_PWM_ConfigChannel>:
{
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002b9a:	0005      	movs	r5, r0
 8002b9c:	3538      	adds	r5, #56	; 0x38
 8002b9e:	782b      	ldrb	r3, [r5, #0]
{
 8002ba0:	0007      	movs	r7, r0
 8002ba2:	000c      	movs	r4, r1
 8002ba4:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 8002ba6:	2002      	movs	r0, #2
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d00a      	beq.n	8002bc2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002bac:	3801      	subs	r0, #1
 8002bae:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 8002bb0:	2a08      	cmp	r2, #8
 8002bb2:	d050      	beq.n	8002c56 <HAL_TIM_PWM_ConfigChannel+0xbe>
 8002bb4:	d806      	bhi.n	8002bc4 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8002bb6:	2a00      	cmp	r2, #0
 8002bb8:	d02a      	beq.n	8002c10 <HAL_TIM_PWM_ConfigChannel+0x78>
 8002bba:	2a04      	cmp	r2, #4
 8002bbc:	d03a      	beq.n	8002c34 <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	702b      	strb	r3, [r5, #0]
}
 8002bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8002bc4:	2a0c      	cmp	r2, #12
 8002bc6:	d1fa      	bne.n	8002bbe <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bc8:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bca:	4934      	ldr	r1, [pc, #208]	; (8002c9c <HAL_TIM_PWM_ConfigChannel+0x104>)
 8002bcc:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bce:	4834      	ldr	r0, [pc, #208]	; (8002ca0 <HAL_TIM_PWM_ConfigChannel+0x108>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8002bd4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002bd6:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002bd8:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bda:	4001      	ands	r1, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bdc:	6820      	ldr	r0, [r4, #0]
 8002bde:	0207      	lsls	r7, r0, #8
  tmpccer &= ~TIM_CCER_CC4P;
 8002be0:	4830      	ldr	r0, [pc, #192]	; (8002ca4 <HAL_TIM_PWM_ConfigChannel+0x10c>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002be2:	4339      	orrs	r1, r7
  tmpccer &= ~TIM_CCER_CC4P;
 8002be4:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002be6:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8002be8:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bea:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8002bec:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002bee:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bf0:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 8002bf2:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002bf4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	69d9      	ldr	r1, [r3, #28]
 8002bfa:	0112      	lsls	r2, r2, #4
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c00:	69da      	ldr	r2, [r3, #28]
 8002c02:	4929      	ldr	r1, [pc, #164]	; (8002ca8 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8002c04:	400a      	ands	r2, r1
 8002c06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c08:	68e2      	ldr	r2, [r4, #12]
 8002c0a:	69d9      	ldr	r1, [r3, #28]
 8002c0c:	0212      	lsls	r2, r2, #8
 8002c0e:	e041      	b.n	8002c94 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c10:	6838      	ldr	r0, [r7, #0]
 8002c12:	f7ff fef5 	bl	8002a00 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c16:	2208      	movs	r2, #8
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6999      	ldr	r1, [r3, #24]
 8002c1c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c1e:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c20:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c22:	699a      	ldr	r2, [r3, #24]
 8002c24:	438a      	bics	r2, r1
 8002c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002c30:	2000      	movs	r0, #0
      break;
 8002c32:	e7c4      	b.n	8002bbe <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c34:	6838      	ldr	r0, [r7, #0]
 8002c36:	f7ff fef9 	bl	8002a2c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c3a:	2280      	movs	r2, #128	; 0x80
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	0112      	lsls	r2, r2, #4
 8002c40:	6999      	ldr	r1, [r3, #24]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	4917      	ldr	r1, [pc, #92]	; (8002ca8 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8002c4a:	400a      	ands	r2, r1
 8002c4c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c4e:	68e2      	ldr	r2, [r4, #12]
 8002c50:	6999      	ldr	r1, [r3, #24]
 8002c52:	0212      	lsls	r2, r2, #8
 8002c54:	e7ea      	b.n	8002c2c <HAL_TIM_PWM_ConfigChannel+0x94>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c56:	2073      	movs	r0, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c58:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c5a:	4914      	ldr	r1, [pc, #80]	; (8002cac <HAL_TIM_PWM_ConfigChannel+0x114>)
 8002c5c:	6a1a      	ldr	r2, [r3, #32]
 8002c5e:	400a      	ands	r2, r1
 8002c60:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8002c62:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002c64:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002c66:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c68:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 8002c6a:	6820      	ldr	r0, [r4, #0]
 8002c6c:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8002c6e:	4810      	ldr	r0, [pc, #64]	; (8002cb0 <HAL_TIM_PWM_ConfigChannel+0x118>)
 8002c70:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c72:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8002c74:	605f      	str	r7, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002c76:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002c78:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c7a:	0212      	lsls	r2, r2, #8
  TIMx->CCR3 = OC_Config->Pulse;
 8002c7c:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c7e:	2104      	movs	r1, #4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c80:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8002c82:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c84:	69da      	ldr	r2, [r3, #28]
 8002c86:	4316      	orrs	r6, r2
 8002c88:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c94:	430a      	orrs	r2, r1
 8002c96:	61da      	str	r2, [r3, #28]
 8002c98:	e7ca      	b.n	8002c30 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	ffffefff 	.word	0xffffefff
 8002ca0:	ffff8cff 	.word	0xffff8cff
 8002ca4:	ffffdfff 	.word	0xffffdfff
 8002ca8:	fffffbff 	.word	0xfffffbff
 8002cac:	fffffeff 	.word	0xfffffeff
 8002cb0:	fffffdff 	.word	0xfffffdff

08002cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cb6:	0004      	movs	r4, r0
 8002cb8:	2202      	movs	r2, #2
 8002cba:	3438      	adds	r4, #56	; 0x38
 8002cbc:	7825      	ldrb	r5, [r4, #0]
{
 8002cbe:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002cc0:	0010      	movs	r0, r2
 8002cc2:	2d01      	cmp	r5, #1
 8002cc4:	d01d      	beq.n	8002d02 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc6:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cc8:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8002cca:	3539      	adds	r5, #57	; 0x39
 8002ccc:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002cd2:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cd4:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cd6:	680e      	ldr	r6, [r1, #0]
 8002cd8:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cda:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cdc:	2080      	movs	r0, #128	; 0x80
 8002cde:	05c0      	lsls	r0, r0, #23
 8002ce0:	4283      	cmp	r3, r0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002ce4:	4807      	ldr	r0, [pc, #28]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8002ce6:	4283      	cmp	r3, r0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002cea:	4807      	ldr	r0, [pc, #28]	; (8002d08 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8002cec:	4283      	cmp	r3, r0
 8002cee:	d104      	bne.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cf0:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cf2:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cf4:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cf6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cfa:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002cfc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002cfe:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002d00:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
 8002d04:	40010800 	.word	0x40010800
 8002d08:	40011400 	.word	0x40011400

08002d0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d0c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d0e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d12:	2201      	movs	r2, #1
 8002d14:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d18:	6801      	ldr	r1, [r0, #0]
 8002d1a:	4d12      	ldr	r5, [pc, #72]	; (8002d64 <UART_EndRxTransfer+0x58>)
 8002d1c:	680b      	ldr	r3, [r1, #0]
 8002d1e:	402b      	ands	r3, r5
 8002d20:	600b      	str	r3, [r1, #0]
 8002d22:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d26:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2e:	6801      	ldr	r1, [r0, #0]
 8002d30:	688b      	ldr	r3, [r1, #8]
 8002d32:	4393      	bics	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
 8002d36:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d3a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d10a      	bne.n	8002d56 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d40:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d44:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d48:	2410      	movs	r4, #16
 8002d4a:	6802      	ldr	r2, [r0, #0]
 8002d4c:	6813      	ldr	r3, [r2, #0]
 8002d4e:	43a3      	bics	r3, r4
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d56:	2220      	movs	r2, #32
 8002d58:	1d03      	adds	r3, r0, #4
 8002d5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d60:	6683      	str	r3, [r0, #104]	; 0x68
}
 8002d62:	bd30      	pop	{r4, r5, pc}
 8002d64:	fffffedf 	.word	0xfffffedf

08002d68 <UART_SetConfig>:
{
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d6c:	6925      	ldr	r5, [r4, #16]
 8002d6e:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d70:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d72:	4329      	orrs	r1, r5
 8002d74:	6965      	ldr	r5, [r4, #20]
 8002d76:	69c3      	ldr	r3, [r0, #28]
 8002d78:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d7a:	6810      	ldr	r0, [r2, #0]
 8002d7c:	4d72      	ldr	r5, [pc, #456]	; (8002f48 <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d7e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d80:	4028      	ands	r0, r5
 8002d82:	4301      	orrs	r1, r0
 8002d84:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d86:	6851      	ldr	r1, [r2, #4]
 8002d88:	4870      	ldr	r0, [pc, #448]	; (8002f4c <UART_SetConfig+0x1e4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d8a:	4d71      	ldr	r5, [pc, #452]	; (8002f50 <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d8c:	4001      	ands	r1, r0
 8002d8e:	68e0      	ldr	r0, [r4, #12]
 8002d90:	4301      	orrs	r1, r0
 8002d92:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d94:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d96:	42aa      	cmp	r2, r5
 8002d98:	d001      	beq.n	8002d9e <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8002d9a:	6a21      	ldr	r1, [r4, #32]
 8002d9c:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d9e:	6891      	ldr	r1, [r2, #8]
 8002da0:	4e6c      	ldr	r6, [pc, #432]	; (8002f54 <UART_SetConfig+0x1ec>)
 8002da2:	4031      	ands	r1, r6
 8002da4:	4301      	orrs	r1, r0
 8002da6:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002da8:	496b      	ldr	r1, [pc, #428]	; (8002f58 <UART_SetConfig+0x1f0>)
 8002daa:	428a      	cmp	r2, r1
 8002dac:	d10f      	bne.n	8002dce <UART_SetConfig+0x66>
 8002dae:	2103      	movs	r1, #3
 8002db0:	4a6a      	ldr	r2, [pc, #424]	; (8002f5c <UART_SetConfig+0x1f4>)
 8002db2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002db4:	400a      	ands	r2, r1
 8002db6:	3a01      	subs	r2, #1
 8002db8:	4969      	ldr	r1, [pc, #420]	; (8002f60 <UART_SetConfig+0x1f8>)
 8002dba:	2a02      	cmp	r2, #2
 8002dbc:	d90f      	bls.n	8002dde <UART_SetConfig+0x76>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	0212      	lsls	r2, r2, #8
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d100      	bne.n	8002dc8 <UART_SetConfig+0x60>
 8002dc6:	e069      	b.n	8002e9c <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dc8:	f7ff fd06 	bl	80027d8 <HAL_RCC_GetPCLK2Freq>
        break;
 8002dcc:	e09c      	b.n	8002f08 <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dce:	4965      	ldr	r1, [pc, #404]	; (8002f64 <UART_SetConfig+0x1fc>)
 8002dd0:	428a      	cmp	r2, r1
 8002dd2:	d113      	bne.n	8002dfc <UART_SetConfig+0x94>
 8002dd4:	210c      	movs	r1, #12
 8002dd6:	4a61      	ldr	r2, [pc, #388]	; (8002f5c <UART_SetConfig+0x1f4>)
 8002dd8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002dda:	400a      	ands	r2, r1
 8002ddc:	4962      	ldr	r1, [pc, #392]	; (8002f68 <UART_SetConfig+0x200>)
 8002dde:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002de0:	2280      	movs	r2, #128	; 0x80
 8002de2:	0212      	lsls	r2, r2, #8
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d000      	beq.n	8002dea <UART_SetConfig+0x82>
 8002de8:	e07f      	b.n	8002eea <UART_SetConfig+0x182>
    switch (clocksource)
 8002dea:	2808      	cmp	r0, #8
 8002dec:	d818      	bhi.n	8002e20 <UART_SetConfig+0xb8>
 8002dee:	f7fd f993 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002df2:	5550      	.short	0x5550
 8002df4:	17791758 	.word	0x17791758
 8002df8:	1717      	.short	0x1717
 8002dfa:	63          	.byte	0x63
 8002dfb:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfc:	42aa      	cmp	r2, r5
 8002dfe:	d10f      	bne.n	8002e20 <UART_SetConfig+0xb8>
 8002e00:	21c0      	movs	r1, #192	; 0xc0
 8002e02:	2080      	movs	r0, #128	; 0x80
 8002e04:	4a55      	ldr	r2, [pc, #340]	; (8002f5c <UART_SetConfig+0x1f4>)
 8002e06:	0109      	lsls	r1, r1, #4
 8002e08:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002e0a:	0100      	lsls	r0, r0, #4
 8002e0c:	400b      	ands	r3, r1
 8002e0e:	4283      	cmp	r3, r0
 8002e10:	d016      	beq.n	8002e40 <UART_SetConfig+0xd8>
 8002e12:	d807      	bhi.n	8002e24 <UART_SetConfig+0xbc>
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <UART_SetConfig+0xc6>
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	00d2      	lsls	r2, r2, #3
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d035      	beq.n	8002e8c <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e20:	2001      	movs	r0, #1
 8002e22:	e009      	b.n	8002e38 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e24:	428b      	cmp	r3, r1
 8002e26:	d1fb      	bne.n	8002e20 <UART_SetConfig+0xb8>
 8002e28:	2080      	movs	r0, #128	; 0x80
 8002e2a:	0200      	lsls	r0, r0, #8
 8002e2c:	e012      	b.n	8002e54 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e2e:	f7ff fcc3 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d10e      	bne.n	8002e54 <UART_SetConfig+0xec>
 8002e36:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8002e3c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8002e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e40:	2310      	movs	r3, #16
 8002e42:	6810      	ldr	r0, [r2, #0]
 8002e44:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e46:	4243      	negs	r3, r0
 8002e48:	4158      	adcs	r0, r3
 8002e4a:	4b48      	ldr	r3, [pc, #288]	; (8002f6c <UART_SetConfig+0x204>)
 8002e4c:	4240      	negs	r0, r0
 8002e4e:	4018      	ands	r0, r3
 8002e50:	4b47      	ldr	r3, [pc, #284]	; (8002f70 <UART_SetConfig+0x208>)
 8002e52:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e54:	2203      	movs	r2, #3
 8002e56:	6863      	ldr	r3, [r4, #4]
 8002e58:	435a      	muls	r2, r3
 8002e5a:	4282      	cmp	r2, r0
 8002e5c:	d8e0      	bhi.n	8002e20 <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e5e:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e60:	4282      	cmp	r2, r0
 8002e62:	d3dd      	bcc.n	8002e20 <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e64:	2700      	movs	r7, #0
 8002e66:	0e02      	lsrs	r2, r0, #24
 8002e68:	0201      	lsls	r1, r0, #8
 8002e6a:	085e      	lsrs	r6, r3, #1
 8002e6c:	1989      	adds	r1, r1, r6
 8002e6e:	417a      	adcs	r2, r7
 8002e70:	0008      	movs	r0, r1
 8002e72:	0011      	movs	r1, r2
 8002e74:	001a      	movs	r2, r3
 8002e76:	003b      	movs	r3, r7
 8002e78:	f7fd f9ee 	bl	8000258 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e7c:	4b3d      	ldr	r3, [pc, #244]	; (8002f74 <UART_SetConfig+0x20c>)
 8002e7e:	18c2      	adds	r2, r0, r3
 8002e80:	4b3d      	ldr	r3, [pc, #244]	; (8002f78 <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d8cc      	bhi.n	8002e20 <UART_SetConfig+0xb8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	60d8      	str	r0, [r3, #12]
 8002e8a:	e7d4      	b.n	8002e36 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8002e8c:	f7ff f8fc 	bl	8002088 <HAL_RCC_GetSysClockFreq>
        break;
 8002e90:	e7cf      	b.n	8002e32 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e92:	f7ff fc91 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002e96:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002e98:	d0cd      	beq.n	8002e36 <UART_SetConfig+0xce>
 8002e9a:	e00d      	b.n	8002eb8 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e9c:	f7ff fc9c 	bl	80027d8 <HAL_RCC_GetPCLK2Freq>
 8002ea0:	e7f9      	b.n	8002e96 <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ea2:	4b2e      	ldr	r3, [pc, #184]	; (8002f5c <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ea4:	4a32      	ldr	r2, [pc, #200]	; (8002f70 <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	2310      	movs	r3, #16
 8002eaa:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002eac:	4243      	negs	r3, r0
 8002eae:	4158      	adcs	r0, r3
 8002eb0:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <UART_SetConfig+0x204>)
 8002eb2:	4240      	negs	r0, r0
 8002eb4:	4003      	ands	r3, r0
 8002eb6:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002eb8:	0058      	lsls	r0, r3, #1
 8002eba:	6863      	ldr	r3, [r4, #4]
 8002ebc:	6861      	ldr	r1, [r4, #4]
 8002ebe:	085b      	lsrs	r3, r3, #1
 8002ec0:	18c0      	adds	r0, r0, r3
 8002ec2:	f7fd f93d 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <UART_SetConfig+0x214>)
 8002eca:	3a10      	subs	r2, #16
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d8a7      	bhi.n	8002e20 <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ed0:	230f      	movs	r3, #15
 8002ed2:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ed4:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ed6:	439a      	bics	r2, r3
 8002ed8:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eda:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002edc:	6822      	ldr	r2, [r4, #0]
 8002ede:	4318      	orrs	r0, r3
 8002ee0:	60d0      	str	r0, [r2, #12]
 8002ee2:	e7a8      	b.n	8002e36 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ee4:	f7ff f8d0 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 8002ee8:	e7d5      	b.n	8002e96 <UART_SetConfig+0x12e>
    switch (clocksource)
 8002eea:	2808      	cmp	r0, #8
 8002eec:	d898      	bhi.n	8002e20 <UART_SetConfig+0xb8>
 8002eee:	f7fd f91d 	bl	800012c <__gnu_thumb1_case_shi>
 8002ef2:	0009      	.short	0x0009
 8002ef4:	000fff6b 	.word	0x000fff6b
 8002ef8:	0024ff97 	.word	0x0024ff97
 8002efc:	ff97ff97 	.word	0xff97ff97
 8002f00:	0027ff97 	.word	0x0027ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f04:	f7ff fc58 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002f08:	2800      	cmp	r0, #0
 8002f0a:	d100      	bne.n	8002f0e <UART_SetConfig+0x1a6>
 8002f0c:	e793      	b.n	8002e36 <UART_SetConfig+0xce>
 8002f0e:	e00a      	b.n	8002f26 <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <UART_SetConfig+0x1f4>)
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	2310      	movs	r3, #16
 8002f16:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f18:	4243      	negs	r3, r0
 8002f1a:	4158      	adcs	r0, r3
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <UART_SetConfig+0x204>)
 8002f1e:	4240      	negs	r0, r0
 8002f20:	4018      	ands	r0, r3
 8002f22:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <UART_SetConfig+0x208>)
 8002f24:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f26:	6863      	ldr	r3, [r4, #4]
 8002f28:	6861      	ldr	r1, [r4, #4]
 8002f2a:	085b      	lsrs	r3, r3, #1
 8002f2c:	1818      	adds	r0, r3, r0
 8002f2e:	f7fd f907 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f32:	0002      	movs	r2, r0
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <UART_SetConfig+0x214>)
 8002f36:	3a10      	subs	r2, #16
 8002f38:	e7a3      	b.n	8002e82 <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f3a:	f7ff f8a5 	bl	8002088 <HAL_RCC_GetSysClockFreq>
        break;
 8002f3e:	e7e3      	b.n	8002f08 <UART_SetConfig+0x1a0>
    switch (clocksource)
 8002f40:	2080      	movs	r0, #128	; 0x80
 8002f42:	0200      	lsls	r0, r0, #8
 8002f44:	e7ef      	b.n	8002f26 <UART_SetConfig+0x1be>
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	efff69f3 	.word	0xefff69f3
 8002f4c:	ffffcfff 	.word	0xffffcfff
 8002f50:	40004800 	.word	0x40004800
 8002f54:	fffff4ff 	.word	0xfffff4ff
 8002f58:	40013800 	.word	0x40013800
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	080044fd 	.word	0x080044fd
 8002f64:	40004400 	.word	0x40004400
 8002f68:	08004500 	.word	0x08004500
 8002f6c:	00b71b00 	.word	0x00b71b00
 8002f70:	003d0900 	.word	0x003d0900
 8002f74:	fffffd00 	.word	0xfffffd00
 8002f78:	000ffcff 	.word	0x000ffcff
 8002f7c:	0000ffef 	.word	0x0000ffef

08002f80 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f80:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002f82:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f84:	07da      	lsls	r2, r3, #31
 8002f86:	d506      	bpl.n	8002f96 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f88:	6801      	ldr	r1, [r0, #0]
 8002f8a:	4c28      	ldr	r4, [pc, #160]	; (800302c <UART_AdvFeatureConfig+0xac>)
 8002f8c:	684a      	ldr	r2, [r1, #4]
 8002f8e:	4022      	ands	r2, r4
 8002f90:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002f92:	4322      	orrs	r2, r4
 8002f94:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f96:	079a      	lsls	r2, r3, #30
 8002f98:	d506      	bpl.n	8002fa8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f9a:	6801      	ldr	r1, [r0, #0]
 8002f9c:	4c24      	ldr	r4, [pc, #144]	; (8003030 <UART_AdvFeatureConfig+0xb0>)
 8002f9e:	684a      	ldr	r2, [r1, #4]
 8002fa0:	4022      	ands	r2, r4
 8002fa2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002fa4:	4322      	orrs	r2, r4
 8002fa6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fa8:	075a      	lsls	r2, r3, #29
 8002faa:	d506      	bpl.n	8002fba <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fac:	6801      	ldr	r1, [r0, #0]
 8002fae:	4c21      	ldr	r4, [pc, #132]	; (8003034 <UART_AdvFeatureConfig+0xb4>)
 8002fb0:	684a      	ldr	r2, [r1, #4]
 8002fb2:	4022      	ands	r2, r4
 8002fb4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002fb6:	4322      	orrs	r2, r4
 8002fb8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fba:	071a      	lsls	r2, r3, #28
 8002fbc:	d506      	bpl.n	8002fcc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fbe:	6801      	ldr	r1, [r0, #0]
 8002fc0:	4c1d      	ldr	r4, [pc, #116]	; (8003038 <UART_AdvFeatureConfig+0xb8>)
 8002fc2:	684a      	ldr	r2, [r1, #4]
 8002fc4:	4022      	ands	r2, r4
 8002fc6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002fc8:	4322      	orrs	r2, r4
 8002fca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fcc:	06da      	lsls	r2, r3, #27
 8002fce:	d506      	bpl.n	8002fde <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fd0:	6801      	ldr	r1, [r0, #0]
 8002fd2:	4c1a      	ldr	r4, [pc, #104]	; (800303c <UART_AdvFeatureConfig+0xbc>)
 8002fd4:	688a      	ldr	r2, [r1, #8]
 8002fd6:	4022      	ands	r2, r4
 8002fd8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002fda:	4322      	orrs	r2, r4
 8002fdc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fde:	069a      	lsls	r2, r3, #26
 8002fe0:	d506      	bpl.n	8002ff0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fe2:	6801      	ldr	r1, [r0, #0]
 8002fe4:	4c16      	ldr	r4, [pc, #88]	; (8003040 <UART_AdvFeatureConfig+0xc0>)
 8002fe6:	688a      	ldr	r2, [r1, #8]
 8002fe8:	4022      	ands	r2, r4
 8002fea:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002fec:	4322      	orrs	r2, r4
 8002fee:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ff0:	065a      	lsls	r2, r3, #25
 8002ff2:	d510      	bpl.n	8003016 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ff4:	6801      	ldr	r1, [r0, #0]
 8002ff6:	4d13      	ldr	r5, [pc, #76]	; (8003044 <UART_AdvFeatureConfig+0xc4>)
 8002ff8:	684a      	ldr	r2, [r1, #4]
 8002ffa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002ffc:	402a      	ands	r2, r5
 8002ffe:	4322      	orrs	r2, r4
 8003000:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003002:	2280      	movs	r2, #128	; 0x80
 8003004:	0352      	lsls	r2, r2, #13
 8003006:	4294      	cmp	r4, r2
 8003008:	d105      	bne.n	8003016 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800300a:	684a      	ldr	r2, [r1, #4]
 800300c:	4c0e      	ldr	r4, [pc, #56]	; (8003048 <UART_AdvFeatureConfig+0xc8>)
 800300e:	4022      	ands	r2, r4
 8003010:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003012:	4322      	orrs	r2, r4
 8003014:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003016:	061b      	lsls	r3, r3, #24
 8003018:	d506      	bpl.n	8003028 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800301a:	6802      	ldr	r2, [r0, #0]
 800301c:	490b      	ldr	r1, [pc, #44]	; (800304c <UART_AdvFeatureConfig+0xcc>)
 800301e:	6853      	ldr	r3, [r2, #4]
 8003020:	400b      	ands	r3, r1
 8003022:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003024:	430b      	orrs	r3, r1
 8003026:	6053      	str	r3, [r2, #4]
}
 8003028:	bd30      	pop	{r4, r5, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	fffdffff 	.word	0xfffdffff
 8003030:	fffeffff 	.word	0xfffeffff
 8003034:	fffbffff 	.word	0xfffbffff
 8003038:	ffff7fff 	.word	0xffff7fff
 800303c:	ffffefff 	.word	0xffffefff
 8003040:	ffffdfff 	.word	0xffffdfff
 8003044:	ffefffff 	.word	0xffefffff
 8003048:	ff9fffff 	.word	0xff9fffff
 800304c:	fff7ffff 	.word	0xfff7ffff

08003050 <UART_WaitOnFlagUntilTimeout>:
{
 8003050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003052:	0004      	movs	r4, r0
 8003054:	000d      	movs	r5, r1
 8003056:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003058:	2608      	movs	r6, #8
{
 800305a:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800305c:	6822      	ldr	r2, [r4, #0]
 800305e:	69d3      	ldr	r3, [r2, #28]
 8003060:	402b      	ands	r3, r5
 8003062:	1b5b      	subs	r3, r3, r5
 8003064:	4259      	negs	r1, r3
 8003066:	414b      	adcs	r3, r1
 8003068:	42bb      	cmp	r3, r7
 800306a:	d001      	beq.n	8003070 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 800306c:	2000      	movs	r0, #0
 800306e:	e021      	b.n	80030b4 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8003070:	9b08      	ldr	r3, [sp, #32]
 8003072:	3301      	adds	r3, #1
 8003074:	d0f3      	beq.n	800305e <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fe fab9 	bl	80015ec <HAL_GetTick>
 800307a:	9b00      	ldr	r3, [sp, #0]
 800307c:	1ac0      	subs	r0, r0, r3
 800307e:	9b08      	ldr	r3, [sp, #32]
 8003080:	4298      	cmp	r0, r3
 8003082:	d828      	bhi.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x86>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d026      	beq.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003088:	2104      	movs	r1, #4
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	420a      	tst	r2, r1
 8003090:	d0e4      	beq.n	800305c <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003092:	69da      	ldr	r2, [r3, #28]
 8003094:	0011      	movs	r1, r2
 8003096:	4031      	ands	r1, r6
 8003098:	9101      	str	r1, [sp, #4]
 800309a:	4232      	tst	r2, r6
 800309c:	d00b      	beq.n	80030b6 <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 800309e:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030a0:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 80030a2:	f7ff fe33 	bl	8002d0c <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030a6:	0023      	movs	r3, r4
 80030a8:	3308      	adds	r3, #8
 80030aa:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 80030ac:	2300      	movs	r3, #0
           return HAL_ERROR;
 80030ae:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 80030b0:	3478      	adds	r4, #120	; 0x78
 80030b2:	7023      	strb	r3, [r4, #0]
}
 80030b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	69d9      	ldr	r1, [r3, #28]
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	4211      	tst	r1, r2
 80030be:	d0cd      	beq.n	800305c <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030c0:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80030c2:	0020      	movs	r0, r4
 80030c4:	f7ff fe22 	bl	8002d0c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030c8:	0023      	movs	r3, r4
 80030ca:	2220      	movs	r2, #32
 80030cc:	3308      	adds	r3, #8
 80030ce:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80030d0:	9b01      	ldr	r3, [sp, #4]
 80030d2:	3478      	adds	r4, #120	; 0x78
 80030d4:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80030d6:	2003      	movs	r0, #3
 80030d8:	e7ec      	b.n	80030b4 <UART_WaitOnFlagUntilTimeout+0x64>

080030da <HAL_UART_Transmit>:
{
 80030da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030dc:	b085      	sub	sp, #20
 80030de:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 80030e0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 80030e2:	0004      	movs	r4, r0
 80030e4:	000d      	movs	r5, r1
 80030e6:	0016      	movs	r6, r2
    return HAL_BUSY;
 80030e8:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d139      	bne.n	8003162 <HAL_UART_Transmit+0x88>
      return  HAL_ERROR;
 80030ee:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80030f0:	2900      	cmp	r1, #0
 80030f2:	d036      	beq.n	8003162 <HAL_UART_Transmit+0x88>
 80030f4:	2a00      	cmp	r2, #0
 80030f6:	d034      	beq.n	8003162 <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	68a2      	ldr	r2, [r4, #8]
 80030fc:	015b      	lsls	r3, r3, #5
 80030fe:	429a      	cmp	r2, r3
 8003100:	d104      	bne.n	800310c <HAL_UART_Transmit+0x32>
 8003102:	6923      	ldr	r3, [r4, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003108:	4201      	tst	r1, r0
 800310a:	d12a      	bne.n	8003162 <HAL_UART_Transmit+0x88>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310c:	0023      	movs	r3, r4
 800310e:	2200      	movs	r2, #0
 8003110:	3308      	adds	r3, #8
 8003112:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003114:	2321      	movs	r3, #33	; 0x21
 8003116:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8003118:	f7fe fa68 	bl	80015ec <HAL_GetTick>
    huart->TxXferSize  = Size;
 800311c:	0023      	movs	r3, r4
 800311e:	3350      	adds	r3, #80	; 0x50
 8003120:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8003122:	3302      	adds	r3, #2
 8003124:	801e      	strh	r6, [r3, #0]
 8003126:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800312c:	0007      	movs	r7, r0
      pdata16bits = NULL;
 800312e:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003130:	015b      	lsls	r3, r3, #5
 8003132:	429a      	cmp	r2, r3
 8003134:	d104      	bne.n	8003140 <HAL_UART_Transmit+0x66>
 8003136:	6923      	ldr	r3, [r4, #16]
 8003138:	42b3      	cmp	r3, r6
 800313a:	d101      	bne.n	8003140 <HAL_UART_Transmit+0x66>
 800313c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800313e:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8003140:	0023      	movs	r3, r4
 8003142:	3352      	adds	r3, #82	; 0x52
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	b29a      	uxth	r2, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10c      	bne.n	8003166 <HAL_UART_Transmit+0x8c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800314c:	9b03      	ldr	r3, [sp, #12]
 800314e:	2140      	movs	r1, #64	; 0x40
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	0020      	movs	r0, r4
 8003154:	003b      	movs	r3, r7
 8003156:	f7ff ff7b 	bl	8003050 <UART_WaitOnFlagUntilTimeout>
 800315a:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 800315c:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800315e:	2800      	cmp	r0, #0
 8003160:	d10d      	bne.n	800317e <HAL_UART_Transmit+0xa4>
}
 8003162:	b005      	add	sp, #20
 8003164:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003166:	9b03      	ldr	r3, [sp, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	2180      	movs	r1, #128	; 0x80
 800316e:	003b      	movs	r3, r7
 8003170:	0020      	movs	r0, r4
 8003172:	f7ff ff6d 	bl	8003050 <UART_WaitOnFlagUntilTimeout>
 8003176:	2800      	cmp	r0, #0
 8003178:	d003      	beq.n	8003182 <HAL_UART_Transmit+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 800317a:	2320      	movs	r3, #32
 800317c:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 800317e:	2003      	movs	r0, #3
 8003180:	e7ef      	b.n	8003162 <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003182:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003184:	2d00      	cmp	r5, #0
 8003186:	d10b      	bne.n	80031a0 <HAL_UART_Transmit+0xc6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003188:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800318a:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800318c:	05db      	lsls	r3, r3, #23
 800318e:	0ddb      	lsrs	r3, r3, #23
 8003190:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003192:	9b02      	ldr	r3, [sp, #8]
 8003194:	9a02      	ldr	r2, [sp, #8]
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	3b01      	subs	r3, #1
 800319a:	b29b      	uxth	r3, r3
 800319c:	8013      	strh	r3, [r2, #0]
 800319e:	e7cf      	b.n	8003140 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031a0:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80031a2:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031a4:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 80031a6:	e7f4      	b.n	8003192 <HAL_UART_Transmit+0xb8>

080031a8 <HAL_UART_Receive>:
{
 80031a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031aa:	0016      	movs	r6, r2
 80031ac:	b087      	sub	sp, #28
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ae:	1d02      	adds	r2, r0, #4
{
 80031b0:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 80031b2:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
{
 80031b4:	0004      	movs	r4, r0
 80031b6:	000d      	movs	r5, r1
    return HAL_BUSY;
 80031b8:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d160      	bne.n	8003280 <HAL_UART_Receive+0xd8>
      return  HAL_ERROR;
 80031be:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80031c0:	2900      	cmp	r1, #0
 80031c2:	d05d      	beq.n	8003280 <HAL_UART_Receive+0xd8>
 80031c4:	2e00      	cmp	r6, #0
 80031c6:	d05b      	beq.n	8003280 <HAL_UART_Receive+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	68a1      	ldr	r1, [r4, #8]
 80031cc:	015b      	lsls	r3, r3, #5
 80031ce:	4299      	cmp	r1, r3
 80031d0:	d104      	bne.n	80031dc <HAL_UART_Receive+0x34>
 80031d2:	6923      	ldr	r3, [r4, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_UART_Receive+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 80031d8:	4205      	tst	r5, r0
 80031da:	d151      	bne.n	8003280 <HAL_UART_Receive+0xd8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031dc:	0023      	movs	r3, r4
 80031de:	2700      	movs	r7, #0
 80031e0:	3308      	adds	r3, #8
 80031e2:	67df      	str	r7, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031e4:	2322      	movs	r3, #34	; 0x22
 80031e6:	67d3      	str	r3, [r2, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e8:	6627      	str	r7, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 80031ea:	f7fe f9ff 	bl	80015ec <HAL_GetTick>
    huart->RxXferSize  = Size;
 80031ee:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 80031f0:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 80031f2:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 80031f4:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 80031f6:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 80031f8:	3302      	adds	r3, #2
 80031fa:	9303      	str	r3, [sp, #12]
 80031fc:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80031fe:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 8003200:	0149      	lsls	r1, r1, #5
 8003202:	3302      	adds	r3, #2
 8003204:	428a      	cmp	r2, r1
 8003206:	d11b      	bne.n	8003240 <HAL_UART_Receive+0x98>
 8003208:	6921      	ldr	r1, [r4, #16]
 800320a:	42b9      	cmp	r1, r7
 800320c:	d116      	bne.n	800323c <HAL_UART_Receive+0x94>
 800320e:	4926      	ldr	r1, [pc, #152]	; (80032a8 <HAL_UART_Receive+0x100>)
 8003210:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 8003212:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003214:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 8003216:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003218:	015b      	lsls	r3, r3, #5
 800321a:	429a      	cmp	r2, r3
 800321c:	d104      	bne.n	8003228 <HAL_UART_Receive+0x80>
 800321e:	6923      	ldr	r3, [r4, #16]
 8003220:	42b3      	cmp	r3, r6
 8003222:	d101      	bne.n	8003228 <HAL_UART_Receive+0x80>
 8003224:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8003226:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 8003228:	0023      	movs	r3, r4
 800322a:	335a      	adds	r3, #90	; 0x5a
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	b298      	uxth	r0, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d117      	bne.n	8003264 <HAL_UART_Receive+0xbc>
    huart->RxState = HAL_UART_STATE_READY;
 8003234:	3404      	adds	r4, #4
 8003236:	3320      	adds	r3, #32
 8003238:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 800323a:	e021      	b.n	8003280 <HAL_UART_Receive+0xd8>
    UART_MASK_COMPUTATION(huart);
 800323c:	21ff      	movs	r1, #255	; 0xff
 800323e:	e7e7      	b.n	8003210 <HAL_UART_Receive+0x68>
 8003240:	2a00      	cmp	r2, #0
 8003242:	d104      	bne.n	800324e <HAL_UART_Receive+0xa6>
 8003244:	6921      	ldr	r1, [r4, #16]
 8003246:	2900      	cmp	r1, #0
 8003248:	d0f8      	beq.n	800323c <HAL_UART_Receive+0x94>
 800324a:	217f      	movs	r1, #127	; 0x7f
 800324c:	e7e0      	b.n	8003210 <HAL_UART_Receive+0x68>
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	0549      	lsls	r1, r1, #21
 8003252:	428a      	cmp	r2, r1
 8003254:	d104      	bne.n	8003260 <HAL_UART_Receive+0xb8>
 8003256:	6921      	ldr	r1, [r4, #16]
 8003258:	2900      	cmp	r1, #0
 800325a:	d0f6      	beq.n	800324a <HAL_UART_Receive+0xa2>
 800325c:	213f      	movs	r1, #63	; 0x3f
 800325e:	e7d7      	b.n	8003210 <HAL_UART_Receive+0x68>
 8003260:	801f      	strh	r7, [r3, #0]
 8003262:	e7d6      	b.n	8003212 <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003264:	9b05      	ldr	r3, [sp, #20]
 8003266:	2200      	movs	r2, #0
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	2120      	movs	r1, #32
 800326c:	0020      	movs	r0, r4
 800326e:	9b04      	ldr	r3, [sp, #16]
 8003270:	f7ff feee 	bl	8003050 <UART_WaitOnFlagUntilTimeout>
 8003274:	2800      	cmp	r0, #0
 8003276:	d005      	beq.n	8003284 <HAL_UART_Receive+0xdc>
        huart->RxState = HAL_UART_STATE_READY;
 8003278:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800327a:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 800327c:	3404      	adds	r4, #4
 800327e:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8003280:	b007      	add	sp, #28
 8003282:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 800328a:	2d00      	cmp	r5, #0
 800328c:	d108      	bne.n	80032a0 <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800328e:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 8003290:	3602      	adds	r6, #2
      huart->RxXferCount--;
 8003292:	9b03      	ldr	r3, [sp, #12]
 8003294:	9a03      	ldr	r2, [sp, #12]
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	3b01      	subs	r3, #1
 800329a:	b29b      	uxth	r3, r3
 800329c:	8013      	strh	r3, [r2, #0]
 800329e:	e7c3      	b.n	8003228 <HAL_UART_Receive+0x80>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80032a0:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 80032a2:	3501      	adds	r5, #1
 80032a4:	e7f5      	b.n	8003292 <HAL_UART_Receive+0xea>
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	000001ff 	.word	0x000001ff

080032ac <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ac:	0003      	movs	r3, r0
{
 80032ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	2500      	movs	r5, #0
{
 80032b2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b4:	3308      	adds	r3, #8
 80032b6:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80032b8:	f7fe f998 	bl	80015ec <HAL_GetTick>
 80032bc:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032be:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80032c0:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3678      	adds	r6, #120	; 0x78
 80032c6:	071b      	lsls	r3, r3, #28
 80032c8:	d51b      	bpl.n	8003302 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032ca:	2180      	movs	r1, #128	; 0x80
 80032cc:	4b26      	ldr	r3, [pc, #152]	; (8003368 <UART_CheckIdleState+0xbc>)
 80032ce:	002a      	movs	r2, r5
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	0389      	lsls	r1, r1, #14
 80032d4:	0003      	movs	r3, r0
 80032d6:	0020      	movs	r0, r4
 80032d8:	f7ff feba 	bl	8003050 <UART_WaitOnFlagUntilTimeout>
 80032dc:	42a8      	cmp	r0, r5
 80032de:	d010      	beq.n	8003302 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e4:	2301      	movs	r3, #1
 80032e6:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032ea:	2080      	movs	r0, #128	; 0x80
 80032ec:	6822      	ldr	r2, [r4, #0]
 80032ee:	6813      	ldr	r3, [r2, #0]
 80032f0:	4383      	bics	r3, r0
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80032f8:	2320      	movs	r3, #32
 80032fa:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 80032fc:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 80032fe:	2003      	movs	r0, #3
}
 8003300:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003302:	0025      	movs	r5, r4
 8003304:	cd08      	ldmia	r5!, {r3}
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	075b      	lsls	r3, r3, #29
 800330a:	d525      	bpl.n	8003358 <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	4b16      	ldr	r3, [pc, #88]	; (8003368 <UART_CheckIdleState+0xbc>)
 8003310:	2200      	movs	r2, #0
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	0020      	movs	r0, r4
 8003316:	003b      	movs	r3, r7
 8003318:	03c9      	lsls	r1, r1, #15
 800331a:	f7ff fe99 	bl	8003050 <UART_WaitOnFlagUntilTimeout>
 800331e:	2800      	cmp	r0, #0
 8003320:	d01a      	beq.n	8003358 <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003322:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003326:	2201      	movs	r2, #1
 8003328:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800332c:	6821      	ldr	r1, [r4, #0]
 800332e:	4f0f      	ldr	r7, [pc, #60]	; (800336c <UART_CheckIdleState+0xc0>)
 8003330:	680b      	ldr	r3, [r1, #0]
 8003332:	403b      	ands	r3, r7
 8003334:	600b      	str	r3, [r1, #0]
 8003336:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800333a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003342:	6821      	ldr	r1, [r4, #0]
 8003344:	688b      	ldr	r3, [r1, #8]
 8003346:	4393      	bics	r3, r2
 8003348:	608b      	str	r3, [r1, #8]
 800334a:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800334e:	2320      	movs	r3, #32
 8003350:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8003352:	2300      	movs	r3, #0
 8003354:	7033      	strb	r3, [r6, #0]
 8003356:	e7d2      	b.n	80032fe <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003358:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800335a:	2320      	movs	r3, #32
 800335c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800335e:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003360:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003362:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8003364:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 8003366:	e7cb      	b.n	8003300 <UART_CheckIdleState+0x54>
 8003368:	01ffffff 	.word	0x01ffffff
 800336c:	fffffedf 	.word	0xfffffedf

08003370 <HAL_UART_Init>:
{
 8003370:	b510      	push	{r4, lr}
 8003372:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003374:	d101      	bne.n	800337a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003376:	2001      	movs	r0, #1
}
 8003378:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800337a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d104      	bne.n	800338a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8003380:	0002      	movs	r2, r0
 8003382:	3278      	adds	r2, #120	; 0x78
 8003384:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003386:	f7fe f869 	bl	800145c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800338a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800338c:	2101      	movs	r1, #1
 800338e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003390:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8003392:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003394:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003396:	438b      	bics	r3, r1
 8003398:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800339a:	f7ff fce5 	bl	8002d68 <UART_SetConfig>
 800339e:	2801      	cmp	r0, #1
 80033a0:	d0e9      	beq.n	8003376 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80033a8:	0020      	movs	r0, r4
 80033aa:	f7ff fde9 	bl	8002f80 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	4907      	ldr	r1, [pc, #28]	; (80033d0 <HAL_UART_Init+0x60>)
 80033b2:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80033b4:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b6:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b8:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	438a      	bics	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80033c2:	2201      	movs	r2, #1
 80033c4:	6819      	ldr	r1, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80033ca:	f7ff ff6f 	bl	80032ac <UART_CheckIdleState>
 80033ce:	e7d3      	b.n	8003378 <HAL_UART_Init+0x8>
 80033d0:	ffffb7ff 	.word	0xffffb7ff

080033d4 <__errno>:
 80033d4:	4b01      	ldr	r3, [pc, #4]	; (80033dc <__errno+0x8>)
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	4770      	bx	lr
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	2000014c 	.word	0x2000014c

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	2600      	movs	r6, #0
 80033e4:	4d0c      	ldr	r5, [pc, #48]	; (8003418 <__libc_init_array+0x38>)
 80033e6:	4c0d      	ldr	r4, [pc, #52]	; (800341c <__libc_init_array+0x3c>)
 80033e8:	1b64      	subs	r4, r4, r5
 80033ea:	10a4      	asrs	r4, r4, #2
 80033ec:	42a6      	cmp	r6, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	2600      	movs	r6, #0
 80033f2:	f000 fe1d 	bl	8004030 <_init>
 80033f6:	4d0a      	ldr	r5, [pc, #40]	; (8003420 <__libc_init_array+0x40>)
 80033f8:	4c0a      	ldr	r4, [pc, #40]	; (8003424 <__libc_init_array+0x44>)
 80033fa:	1b64      	subs	r4, r4, r5
 80033fc:	10a4      	asrs	r4, r4, #2
 80033fe:	42a6      	cmp	r6, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	00b3      	lsls	r3, r6, #2
 8003406:	58eb      	ldr	r3, [r5, r3]
 8003408:	4798      	blx	r3
 800340a:	3601      	adds	r6, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	00b3      	lsls	r3, r6, #2
 8003410:	58eb      	ldr	r3, [r5, r3]
 8003412:	4798      	blx	r3
 8003414:	3601      	adds	r6, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	08004548 	.word	0x08004548
 800341c:	08004548 	.word	0x08004548
 8003420:	08004548 	.word	0x08004548
 8003424:	0800454c 	.word	0x0800454c

08003428 <memcpy>:
 8003428:	2300      	movs	r3, #0
 800342a:	b510      	push	{r4, lr}
 800342c:	429a      	cmp	r2, r3
 800342e:	d100      	bne.n	8003432 <memcpy+0xa>
 8003430:	bd10      	pop	{r4, pc}
 8003432:	5ccc      	ldrb	r4, [r1, r3]
 8003434:	54c4      	strb	r4, [r0, r3]
 8003436:	3301      	adds	r3, #1
 8003438:	e7f8      	b.n	800342c <memcpy+0x4>

0800343a <memset>:
 800343a:	0003      	movs	r3, r0
 800343c:	1882      	adds	r2, r0, r2
 800343e:	4293      	cmp	r3, r2
 8003440:	d100      	bne.n	8003444 <memset+0xa>
 8003442:	4770      	bx	lr
 8003444:	7019      	strb	r1, [r3, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	e7f9      	b.n	800343e <memset+0x4>

0800344a <swapfunc>:
 800344a:	b530      	push	{r4, r5, lr}
 800344c:	2400      	movs	r4, #0
 800344e:	2b02      	cmp	r3, #2
 8003450:	d009      	beq.n	8003466 <swapfunc+0x1c>
 8003452:	0892      	lsrs	r2, r2, #2
 8003454:	5903      	ldr	r3, [r0, r4]
 8003456:	590d      	ldr	r5, [r1, r4]
 8003458:	3a01      	subs	r2, #1
 800345a:	5105      	str	r5, [r0, r4]
 800345c:	510b      	str	r3, [r1, r4]
 800345e:	3404      	adds	r4, #4
 8003460:	2a00      	cmp	r2, #0
 8003462:	dcf7      	bgt.n	8003454 <swapfunc+0xa>
 8003464:	bd30      	pop	{r4, r5, pc}
 8003466:	5d03      	ldrb	r3, [r0, r4]
 8003468:	5d0d      	ldrb	r5, [r1, r4]
 800346a:	5505      	strb	r5, [r0, r4]
 800346c:	550b      	strb	r3, [r1, r4]
 800346e:	3401      	adds	r4, #1
 8003470:	1b13      	subs	r3, r2, r4
 8003472:	2b00      	cmp	r3, #0
 8003474:	dcf7      	bgt.n	8003466 <swapfunc+0x1c>
 8003476:	e7f5      	b.n	8003464 <swapfunc+0x1a>

08003478 <med3.constprop.0>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	000c      	movs	r4, r1
 800347c:	0015      	movs	r5, r2
 800347e:	0007      	movs	r7, r0
 8003480:	001e      	movs	r6, r3
 8003482:	4798      	blx	r3
 8003484:	0029      	movs	r1, r5
 8003486:	2800      	cmp	r0, #0
 8003488:	da0b      	bge.n	80034a2 <med3.constprop.0+0x2a>
 800348a:	0020      	movs	r0, r4
 800348c:	47b0      	blx	r6
 800348e:	2800      	cmp	r0, #0
 8003490:	db05      	blt.n	800349e <med3.constprop.0+0x26>
 8003492:	0029      	movs	r1, r5
 8003494:	0038      	movs	r0, r7
 8003496:	47b0      	blx	r6
 8003498:	2800      	cmp	r0, #0
 800349a:	db0b      	blt.n	80034b4 <med3.constprop.0+0x3c>
 800349c:	003c      	movs	r4, r7
 800349e:	0020      	movs	r0, r4
 80034a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034a2:	0020      	movs	r0, r4
 80034a4:	47b0      	blx	r6
 80034a6:	2800      	cmp	r0, #0
 80034a8:	dcf9      	bgt.n	800349e <med3.constprop.0+0x26>
 80034aa:	0029      	movs	r1, r5
 80034ac:	0038      	movs	r0, r7
 80034ae:	47b0      	blx	r6
 80034b0:	2800      	cmp	r0, #0
 80034b2:	dbf3      	blt.n	800349c <med3.constprop.0+0x24>
 80034b4:	002c      	movs	r4, r5
 80034b6:	e7f2      	b.n	800349e <med3.constprop.0+0x26>

080034b8 <qsort>:
 80034b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ba:	b099      	sub	sp, #100	; 0x64
 80034bc:	9000      	str	r0, [sp, #0]
 80034be:	9303      	str	r3, [sp, #12]
 80034c0:	9b00      	ldr	r3, [sp, #0]
 80034c2:	0016      	movs	r6, r2
 80034c4:	4313      	orrs	r3, r2
 80034c6:	2202      	movs	r2, #2
 80034c8:	0008      	movs	r0, r1
 80034ca:	9201      	str	r2, [sp, #4]
 80034cc:	079b      	lsls	r3, r3, #30
 80034ce:	d104      	bne.n	80034da <qsort+0x22>
 80034d0:	1f33      	subs	r3, r6, #4
 80034d2:	001a      	movs	r2, r3
 80034d4:	1e53      	subs	r3, r2, #1
 80034d6:	419a      	sbcs	r2, r3
 80034d8:	9201      	str	r2, [sp, #4]
 80034da:	2300      	movs	r3, #0
 80034dc:	9304      	str	r3, [sp, #16]
 80034de:	0037      	movs	r7, r6
 80034e0:	9b00      	ldr	r3, [sp, #0]
 80034e2:	4347      	muls	r7, r0
 80034e4:	199b      	adds	r3, r3, r6
 80034e6:	9302      	str	r3, [sp, #8]
 80034e8:	9b00      	ldr	r3, [sp, #0]
 80034ea:	19db      	adds	r3, r3, r7
 80034ec:	9306      	str	r3, [sp, #24]
 80034ee:	2806      	cmp	r0, #6
 80034f0:	d828      	bhi.n	8003544 <qsort+0x8c>
 80034f2:	9b02      	ldr	r3, [sp, #8]
 80034f4:	9a06      	ldr	r2, [sp, #24]
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d30c      	bcc.n	8003514 <qsort+0x5c>
 80034fa:	9b04      	ldr	r3, [sp, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d000      	beq.n	8003502 <qsort+0x4a>
 8003500:	e123      	b.n	800374a <qsort+0x292>
 8003502:	b019      	add	sp, #100	; 0x64
 8003504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003506:	0032      	movs	r2, r6
 8003508:	0029      	movs	r1, r5
 800350a:	0020      	movs	r0, r4
 800350c:	9b01      	ldr	r3, [sp, #4]
 800350e:	f7ff ff9c 	bl	800344a <swapfunc>
 8003512:	e00f      	b.n	8003534 <qsort+0x7c>
 8003514:	9c02      	ldr	r4, [sp, #8]
 8003516:	e00e      	b.n	8003536 <qsort+0x7e>
 8003518:	1ba5      	subs	r5, r4, r6
 800351a:	0021      	movs	r1, r4
 800351c:	0028      	movs	r0, r5
 800351e:	9b03      	ldr	r3, [sp, #12]
 8003520:	4798      	blx	r3
 8003522:	2800      	cmp	r0, #0
 8003524:	dd0a      	ble.n	800353c <qsort+0x84>
 8003526:	9b01      	ldr	r3, [sp, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1ec      	bne.n	8003506 <qsort+0x4e>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	682a      	ldr	r2, [r5, #0]
 8003530:	6022      	str	r2, [r4, #0]
 8003532:	602b      	str	r3, [r5, #0]
 8003534:	002c      	movs	r4, r5
 8003536:	9b00      	ldr	r3, [sp, #0]
 8003538:	42a3      	cmp	r3, r4
 800353a:	d3ed      	bcc.n	8003518 <qsort+0x60>
 800353c:	9b02      	ldr	r3, [sp, #8]
 800353e:	199b      	adds	r3, r3, r6
 8003540:	9302      	str	r3, [sp, #8]
 8003542:	e7d6      	b.n	80034f2 <qsort+0x3a>
 8003544:	0845      	lsrs	r5, r0, #1
 8003546:	4375      	muls	r5, r6
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	1bbf      	subs	r7, r7, r6
 800354c:	195d      	adds	r5, r3, r5
 800354e:	19df      	adds	r7, r3, r7
 8003550:	2807      	cmp	r0, #7
 8003552:	d021      	beq.n	8003598 <qsort+0xe0>
 8003554:	003a      	movs	r2, r7
 8003556:	9305      	str	r3, [sp, #20]
 8003558:	2828      	cmp	r0, #40	; 0x28
 800355a:	d917      	bls.n	800358c <qsort+0xd4>
 800355c:	08c4      	lsrs	r4, r0, #3
 800355e:	4374      	muls	r4, r6
 8003560:	1919      	adds	r1, r3, r4
 8003562:	190a      	adds	r2, r1, r4
 8003564:	9b03      	ldr	r3, [sp, #12]
 8003566:	9800      	ldr	r0, [sp, #0]
 8003568:	f7ff ff86 	bl	8003478 <med3.constprop.0>
 800356c:	0029      	movs	r1, r5
 800356e:	192a      	adds	r2, r5, r4
 8003570:	9b03      	ldr	r3, [sp, #12]
 8003572:	9005      	str	r0, [sp, #20]
 8003574:	1b28      	subs	r0, r5, r4
 8003576:	f7ff ff7f 	bl	8003478 <med3.constprop.0>
 800357a:	0005      	movs	r5, r0
 800357c:	0060      	lsls	r0, r4, #1
 800357e:	1a38      	subs	r0, r7, r0
 8003580:	003a      	movs	r2, r7
 8003582:	9b03      	ldr	r3, [sp, #12]
 8003584:	1901      	adds	r1, r0, r4
 8003586:	f7ff ff77 	bl	8003478 <med3.constprop.0>
 800358a:	0002      	movs	r2, r0
 800358c:	0029      	movs	r1, r5
 800358e:	9b03      	ldr	r3, [sp, #12]
 8003590:	9805      	ldr	r0, [sp, #20]
 8003592:	f7ff ff71 	bl	8003478 <med3.constprop.0>
 8003596:	0005      	movs	r5, r0
 8003598:	9b01      	ldr	r3, [sp, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d11f      	bne.n	80035de <qsort+0x126>
 800359e:	9b00      	ldr	r3, [sp, #0]
 80035a0:	6829      	ldr	r1, [r5, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	9a00      	ldr	r2, [sp, #0]
 80035a6:	6011      	str	r1, [r2, #0]
 80035a8:	602b      	str	r3, [r5, #0]
 80035aa:	9d02      	ldr	r5, [sp, #8]
 80035ac:	2300      	movs	r3, #0
 80035ae:	002c      	movs	r4, r5
 80035b0:	9705      	str	r7, [sp, #20]
 80035b2:	9307      	str	r3, [sp, #28]
 80035b4:	42bd      	cmp	r5, r7
 80035b6:	d834      	bhi.n	8003622 <qsort+0x16a>
 80035b8:	0028      	movs	r0, r5
 80035ba:	9900      	ldr	r1, [sp, #0]
 80035bc:	9b03      	ldr	r3, [sp, #12]
 80035be:	4798      	blx	r3
 80035c0:	2800      	cmp	r0, #0
 80035c2:	dc3f      	bgt.n	8003644 <qsort+0x18c>
 80035c4:	d109      	bne.n	80035da <qsort+0x122>
 80035c6:	9b01      	ldr	r3, [sp, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10f      	bne.n	80035ec <qsort+0x134>
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	682a      	ldr	r2, [r5, #0]
 80035d0:	6022      	str	r2, [r4, #0]
 80035d2:	602b      	str	r3, [r5, #0]
 80035d4:	19a4      	adds	r4, r4, r6
 80035d6:	2301      	movs	r3, #1
 80035d8:	9307      	str	r3, [sp, #28]
 80035da:	19ad      	adds	r5, r5, r6
 80035dc:	e7ea      	b.n	80035b4 <qsort+0xfc>
 80035de:	0032      	movs	r2, r6
 80035e0:	0029      	movs	r1, r5
 80035e2:	9b01      	ldr	r3, [sp, #4]
 80035e4:	9800      	ldr	r0, [sp, #0]
 80035e6:	f7ff ff30 	bl	800344a <swapfunc>
 80035ea:	e7de      	b.n	80035aa <qsort+0xf2>
 80035ec:	0032      	movs	r2, r6
 80035ee:	0029      	movs	r1, r5
 80035f0:	0020      	movs	r0, r4
 80035f2:	9b01      	ldr	r3, [sp, #4]
 80035f4:	f7ff ff29 	bl	800344a <swapfunc>
 80035f8:	e7ec      	b.n	80035d4 <qsort+0x11c>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d10e      	bne.n	800361c <qsort+0x164>
 80035fe:	9b01      	ldr	r3, [sp, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d118      	bne.n	8003636 <qsort+0x17e>
 8003604:	9a05      	ldr	r2, [sp, #20]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	603a      	str	r2, [r7, #0]
 800360c:	9207      	str	r2, [sp, #28]
 800360e:	9a05      	ldr	r2, [sp, #20]
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	9b05      	ldr	r3, [sp, #20]
 8003614:	1b9b      	subs	r3, r3, r6
 8003616:	9305      	str	r3, [sp, #20]
 8003618:	2301      	movs	r3, #1
 800361a:	9307      	str	r3, [sp, #28]
 800361c:	1bbf      	subs	r7, r7, r6
 800361e:	42af      	cmp	r7, r5
 8003620:	d210      	bcs.n	8003644 <qsort+0x18c>
 8003622:	9b07      	ldr	r3, [sp, #28]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d140      	bne.n	80036aa <qsort+0x1f2>
 8003628:	9b02      	ldr	r3, [sp, #8]
 800362a:	9a06      	ldr	r2, [sp, #24]
 800362c:	4293      	cmp	r3, r2
 800362e:	d300      	bcc.n	8003632 <qsort+0x17a>
 8003630:	e763      	b.n	80034fa <qsort+0x42>
 8003632:	9c02      	ldr	r4, [sp, #8]
 8003634:	e032      	b.n	800369c <qsort+0x1e4>
 8003636:	0032      	movs	r2, r6
 8003638:	0038      	movs	r0, r7
 800363a:	9b01      	ldr	r3, [sp, #4]
 800363c:	9905      	ldr	r1, [sp, #20]
 800363e:	f7ff ff04 	bl	800344a <swapfunc>
 8003642:	e7e6      	b.n	8003612 <qsort+0x15a>
 8003644:	0038      	movs	r0, r7
 8003646:	9900      	ldr	r1, [sp, #0]
 8003648:	9b03      	ldr	r3, [sp, #12]
 800364a:	4798      	blx	r3
 800364c:	2800      	cmp	r0, #0
 800364e:	dad4      	bge.n	80035fa <qsort+0x142>
 8003650:	9b01      	ldr	r3, [sp, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d006      	beq.n	8003664 <qsort+0x1ac>
 8003656:	0032      	movs	r2, r6
 8003658:	0039      	movs	r1, r7
 800365a:	0028      	movs	r0, r5
 800365c:	9b01      	ldr	r3, [sp, #4]
 800365e:	f7ff fef4 	bl	800344a <swapfunc>
 8003662:	e003      	b.n	800366c <qsort+0x1b4>
 8003664:	682b      	ldr	r3, [r5, #0]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	602a      	str	r2, [r5, #0]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	1bbf      	subs	r7, r7, r6
 800366e:	e7b2      	b.n	80035d6 <qsort+0x11e>
 8003670:	0032      	movs	r2, r6
 8003672:	0029      	movs	r1, r5
 8003674:	0020      	movs	r0, r4
 8003676:	9b01      	ldr	r3, [sp, #4]
 8003678:	f7ff fee7 	bl	800344a <swapfunc>
 800367c:	e00d      	b.n	800369a <qsort+0x1e2>
 800367e:	1ba5      	subs	r5, r4, r6
 8003680:	0021      	movs	r1, r4
 8003682:	0028      	movs	r0, r5
 8003684:	9b03      	ldr	r3, [sp, #12]
 8003686:	4798      	blx	r3
 8003688:	2800      	cmp	r0, #0
 800368a:	dd0a      	ble.n	80036a2 <qsort+0x1ea>
 800368c:	9b01      	ldr	r3, [sp, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1ee      	bne.n	8003670 <qsort+0x1b8>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	682a      	ldr	r2, [r5, #0]
 8003696:	6022      	str	r2, [r4, #0]
 8003698:	602b      	str	r3, [r5, #0]
 800369a:	002c      	movs	r4, r5
 800369c:	9b00      	ldr	r3, [sp, #0]
 800369e:	42a3      	cmp	r3, r4
 80036a0:	d3ed      	bcc.n	800367e <qsort+0x1c6>
 80036a2:	9b02      	ldr	r3, [sp, #8]
 80036a4:	199b      	adds	r3, r3, r6
 80036a6:	9302      	str	r3, [sp, #8]
 80036a8:	e7be      	b.n	8003628 <qsort+0x170>
 80036aa:	1b2b      	subs	r3, r5, r4
 80036ac:	9302      	str	r3, [sp, #8]
 80036ae:	9b00      	ldr	r3, [sp, #0]
 80036b0:	1ae2      	subs	r2, r4, r3
 80036b2:	9b02      	ldr	r3, [sp, #8]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	dd00      	ble.n	80036ba <qsort+0x202>
 80036b8:	001a      	movs	r2, r3
 80036ba:	2a00      	cmp	r2, #0
 80036bc:	d004      	beq.n	80036c8 <qsort+0x210>
 80036be:	9b01      	ldr	r3, [sp, #4]
 80036c0:	9800      	ldr	r0, [sp, #0]
 80036c2:	1aa9      	subs	r1, r5, r2
 80036c4:	f7ff fec1 	bl	800344a <swapfunc>
 80036c8:	9b05      	ldr	r3, [sp, #20]
 80036ca:	9a05      	ldr	r2, [sp, #20]
 80036cc:	1bdc      	subs	r4, r3, r7
 80036ce:	9b06      	ldr	r3, [sp, #24]
 80036d0:	1a9a      	subs	r2, r3, r2
 80036d2:	1b92      	subs	r2, r2, r6
 80036d4:	42a2      	cmp	r2, r4
 80036d6:	d900      	bls.n	80036da <qsort+0x222>
 80036d8:	0022      	movs	r2, r4
 80036da:	2a00      	cmp	r2, #0
 80036dc:	d005      	beq.n	80036ea <qsort+0x232>
 80036de:	9b06      	ldr	r3, [sp, #24]
 80036e0:	0028      	movs	r0, r5
 80036e2:	1a99      	subs	r1, r3, r2
 80036e4:	9b01      	ldr	r3, [sp, #4]
 80036e6:	f7ff feb0 	bl	800344a <swapfunc>
 80036ea:	9b06      	ldr	r3, [sp, #24]
 80036ec:	9d02      	ldr	r5, [sp, #8]
 80036ee:	1b1f      	subs	r7, r3, r4
 80036f0:	42ac      	cmp	r4, r5
 80036f2:	d904      	bls.n	80036fe <qsort+0x246>
 80036f4:	9b00      	ldr	r3, [sp, #0]
 80036f6:	9700      	str	r7, [sp, #0]
 80036f8:	001f      	movs	r7, r3
 80036fa:	0025      	movs	r5, r4
 80036fc:	9c02      	ldr	r4, [sp, #8]
 80036fe:	42b4      	cmp	r4, r6
 8003700:	d92c      	bls.n	800375c <qsort+0x2a4>
 8003702:	9b04      	ldr	r3, [sp, #16]
 8003704:	2b07      	cmp	r3, #7
 8003706:	d814      	bhi.n	8003732 <qsort+0x27a>
 8003708:	9900      	ldr	r1, [sp, #0]
 800370a:	aa08      	add	r2, sp, #32
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	5099      	str	r1, [r3, r2]
 8003710:	0028      	movs	r0, r5
 8003712:	189b      	adds	r3, r3, r2
 8003714:	0031      	movs	r1, r6
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	f7fc fd12 	bl	8000140 <__udivsi3>
 800371c:	9b00      	ldr	r3, [sp, #0]
 800371e:	0031      	movs	r1, r6
 8003720:	6058      	str	r0, [r3, #4]
 8003722:	9b04      	ldr	r3, [sp, #16]
 8003724:	0020      	movs	r0, r4
 8003726:	3301      	adds	r3, #1
 8003728:	9304      	str	r3, [sp, #16]
 800372a:	f7fc fd09 	bl	8000140 <__udivsi3>
 800372e:	9700      	str	r7, [sp, #0]
 8003730:	e6d5      	b.n	80034de <qsort+0x26>
 8003732:	0031      	movs	r1, r6
 8003734:	0020      	movs	r0, r4
 8003736:	f7fc fd03 	bl	8000140 <__udivsi3>
 800373a:	0032      	movs	r2, r6
 800373c:	0001      	movs	r1, r0
 800373e:	9b03      	ldr	r3, [sp, #12]
 8003740:	0038      	movs	r0, r7
 8003742:	f7ff feb9 	bl	80034b8 <qsort>
 8003746:	42b5      	cmp	r5, r6
 8003748:	d80b      	bhi.n	8003762 <qsort+0x2aa>
 800374a:	9b04      	ldr	r3, [sp, #16]
 800374c:	aa08      	add	r2, sp, #32
 800374e:	3b01      	subs	r3, #1
 8003750:	9304      	str	r3, [sp, #16]
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	589f      	ldr	r7, [r3, r2]
 8003756:	189b      	adds	r3, r3, r2
 8003758:	6858      	ldr	r0, [r3, #4]
 800375a:	e7e8      	b.n	800372e <qsort+0x276>
 800375c:	42b5      	cmp	r5, r6
 800375e:	d800      	bhi.n	8003762 <qsort+0x2aa>
 8003760:	e6cb      	b.n	80034fa <qsort+0x42>
 8003762:	0031      	movs	r1, r6
 8003764:	0028      	movs	r0, r5
 8003766:	f7fc fceb 	bl	8000140 <__udivsi3>
 800376a:	9f00      	ldr	r7, [sp, #0]
 800376c:	e7df      	b.n	800372e <qsort+0x276>
	...

08003770 <siprintf>:
 8003770:	b40e      	push	{r1, r2, r3}
 8003772:	b500      	push	{lr}
 8003774:	490b      	ldr	r1, [pc, #44]	; (80037a4 <siprintf+0x34>)
 8003776:	b09c      	sub	sp, #112	; 0x70
 8003778:	ab1d      	add	r3, sp, #116	; 0x74
 800377a:	9002      	str	r0, [sp, #8]
 800377c:	9006      	str	r0, [sp, #24]
 800377e:	9107      	str	r1, [sp, #28]
 8003780:	9104      	str	r1, [sp, #16]
 8003782:	4809      	ldr	r0, [pc, #36]	; (80037a8 <siprintf+0x38>)
 8003784:	4909      	ldr	r1, [pc, #36]	; (80037ac <siprintf+0x3c>)
 8003786:	cb04      	ldmia	r3!, {r2}
 8003788:	9105      	str	r1, [sp, #20]
 800378a:	6800      	ldr	r0, [r0, #0]
 800378c:	a902      	add	r1, sp, #8
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	f000 f870 	bl	8003874 <_svfiprintf_r>
 8003794:	2300      	movs	r3, #0
 8003796:	9a02      	ldr	r2, [sp, #8]
 8003798:	7013      	strb	r3, [r2, #0]
 800379a:	b01c      	add	sp, #112	; 0x70
 800379c:	bc08      	pop	{r3}
 800379e:	b003      	add	sp, #12
 80037a0:	4718      	bx	r3
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	7fffffff 	.word	0x7fffffff
 80037a8:	2000014c 	.word	0x2000014c
 80037ac:	ffff0208 	.word	0xffff0208

080037b0 <__ssputs_r>:
 80037b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b2:	688e      	ldr	r6, [r1, #8]
 80037b4:	b085      	sub	sp, #20
 80037b6:	0007      	movs	r7, r0
 80037b8:	000c      	movs	r4, r1
 80037ba:	9203      	str	r2, [sp, #12]
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	429e      	cmp	r6, r3
 80037c0:	d83c      	bhi.n	800383c <__ssputs_r+0x8c>
 80037c2:	2390      	movs	r3, #144	; 0x90
 80037c4:	898a      	ldrh	r2, [r1, #12]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	421a      	tst	r2, r3
 80037ca:	d034      	beq.n	8003836 <__ssputs_r+0x86>
 80037cc:	6909      	ldr	r1, [r1, #16]
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	6960      	ldr	r0, [r4, #20]
 80037d2:	1a5b      	subs	r3, r3, r1
 80037d4:	9302      	str	r3, [sp, #8]
 80037d6:	2303      	movs	r3, #3
 80037d8:	4343      	muls	r3, r0
 80037da:	0fdd      	lsrs	r5, r3, #31
 80037dc:	18ed      	adds	r5, r5, r3
 80037de:	9b01      	ldr	r3, [sp, #4]
 80037e0:	9802      	ldr	r0, [sp, #8]
 80037e2:	3301      	adds	r3, #1
 80037e4:	181b      	adds	r3, r3, r0
 80037e6:	106d      	asrs	r5, r5, #1
 80037e8:	42ab      	cmp	r3, r5
 80037ea:	d900      	bls.n	80037ee <__ssputs_r+0x3e>
 80037ec:	001d      	movs	r5, r3
 80037ee:	0553      	lsls	r3, r2, #21
 80037f0:	d532      	bpl.n	8003858 <__ssputs_r+0xa8>
 80037f2:	0029      	movs	r1, r5
 80037f4:	0038      	movs	r0, r7
 80037f6:	f000 fb49 	bl	8003e8c <_malloc_r>
 80037fa:	1e06      	subs	r6, r0, #0
 80037fc:	d109      	bne.n	8003812 <__ssputs_r+0x62>
 80037fe:	230c      	movs	r3, #12
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	2340      	movs	r3, #64	; 0x40
 8003804:	2001      	movs	r0, #1
 8003806:	89a2      	ldrh	r2, [r4, #12]
 8003808:	4240      	negs	r0, r0
 800380a:	4313      	orrs	r3, r2
 800380c:	81a3      	strh	r3, [r4, #12]
 800380e:	b005      	add	sp, #20
 8003810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003812:	9a02      	ldr	r2, [sp, #8]
 8003814:	6921      	ldr	r1, [r4, #16]
 8003816:	f7ff fe07 	bl	8003428 <memcpy>
 800381a:	89a3      	ldrh	r3, [r4, #12]
 800381c:	4a14      	ldr	r2, [pc, #80]	; (8003870 <__ssputs_r+0xc0>)
 800381e:	401a      	ands	r2, r3
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	4313      	orrs	r3, r2
 8003824:	81a3      	strh	r3, [r4, #12]
 8003826:	9b02      	ldr	r3, [sp, #8]
 8003828:	6126      	str	r6, [r4, #16]
 800382a:	18f6      	adds	r6, r6, r3
 800382c:	6026      	str	r6, [r4, #0]
 800382e:	6165      	str	r5, [r4, #20]
 8003830:	9e01      	ldr	r6, [sp, #4]
 8003832:	1aed      	subs	r5, r5, r3
 8003834:	60a5      	str	r5, [r4, #8]
 8003836:	9b01      	ldr	r3, [sp, #4]
 8003838:	429e      	cmp	r6, r3
 800383a:	d900      	bls.n	800383e <__ssputs_r+0x8e>
 800383c:	9e01      	ldr	r6, [sp, #4]
 800383e:	0032      	movs	r2, r6
 8003840:	9903      	ldr	r1, [sp, #12]
 8003842:	6820      	ldr	r0, [r4, #0]
 8003844:	f000 faa3 	bl	8003d8e <memmove>
 8003848:	68a3      	ldr	r3, [r4, #8]
 800384a:	2000      	movs	r0, #0
 800384c:	1b9b      	subs	r3, r3, r6
 800384e:	60a3      	str	r3, [r4, #8]
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	199e      	adds	r6, r3, r6
 8003854:	6026      	str	r6, [r4, #0]
 8003856:	e7da      	b.n	800380e <__ssputs_r+0x5e>
 8003858:	002a      	movs	r2, r5
 800385a:	0038      	movs	r0, r7
 800385c:	f000 fb8c 	bl	8003f78 <_realloc_r>
 8003860:	1e06      	subs	r6, r0, #0
 8003862:	d1e0      	bne.n	8003826 <__ssputs_r+0x76>
 8003864:	0038      	movs	r0, r7
 8003866:	6921      	ldr	r1, [r4, #16]
 8003868:	f000 faa4 	bl	8003db4 <_free_r>
 800386c:	e7c7      	b.n	80037fe <__ssputs_r+0x4e>
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	fffffb7f 	.word	0xfffffb7f

08003874 <_svfiprintf_r>:
 8003874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003876:	b0a1      	sub	sp, #132	; 0x84
 8003878:	9003      	str	r0, [sp, #12]
 800387a:	001d      	movs	r5, r3
 800387c:	898b      	ldrh	r3, [r1, #12]
 800387e:	000f      	movs	r7, r1
 8003880:	0016      	movs	r6, r2
 8003882:	061b      	lsls	r3, r3, #24
 8003884:	d511      	bpl.n	80038aa <_svfiprintf_r+0x36>
 8003886:	690b      	ldr	r3, [r1, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10e      	bne.n	80038aa <_svfiprintf_r+0x36>
 800388c:	2140      	movs	r1, #64	; 0x40
 800388e:	f000 fafd 	bl	8003e8c <_malloc_r>
 8003892:	6038      	str	r0, [r7, #0]
 8003894:	6138      	str	r0, [r7, #16]
 8003896:	2800      	cmp	r0, #0
 8003898:	d105      	bne.n	80038a6 <_svfiprintf_r+0x32>
 800389a:	230c      	movs	r3, #12
 800389c:	9a03      	ldr	r2, [sp, #12]
 800389e:	3801      	subs	r0, #1
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	b021      	add	sp, #132	; 0x84
 80038a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a6:	2340      	movs	r3, #64	; 0x40
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	2300      	movs	r3, #0
 80038ac:	ac08      	add	r4, sp, #32
 80038ae:	6163      	str	r3, [r4, #20]
 80038b0:	3320      	adds	r3, #32
 80038b2:	7663      	strb	r3, [r4, #25]
 80038b4:	3310      	adds	r3, #16
 80038b6:	76a3      	strb	r3, [r4, #26]
 80038b8:	9507      	str	r5, [sp, #28]
 80038ba:	0035      	movs	r5, r6
 80038bc:	782b      	ldrb	r3, [r5, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <_svfiprintf_r+0x52>
 80038c2:	2b25      	cmp	r3, #37	; 0x25
 80038c4:	d147      	bne.n	8003956 <_svfiprintf_r+0xe2>
 80038c6:	1bab      	subs	r3, r5, r6
 80038c8:	9305      	str	r3, [sp, #20]
 80038ca:	42b5      	cmp	r5, r6
 80038cc:	d00c      	beq.n	80038e8 <_svfiprintf_r+0x74>
 80038ce:	0032      	movs	r2, r6
 80038d0:	0039      	movs	r1, r7
 80038d2:	9803      	ldr	r0, [sp, #12]
 80038d4:	f7ff ff6c 	bl	80037b0 <__ssputs_r>
 80038d8:	1c43      	adds	r3, r0, #1
 80038da:	d100      	bne.n	80038de <_svfiprintf_r+0x6a>
 80038dc:	e0ae      	b.n	8003a3c <_svfiprintf_r+0x1c8>
 80038de:	6962      	ldr	r2, [r4, #20]
 80038e0:	9b05      	ldr	r3, [sp, #20]
 80038e2:	4694      	mov	ip, r2
 80038e4:	4463      	add	r3, ip
 80038e6:	6163      	str	r3, [r4, #20]
 80038e8:	782b      	ldrb	r3, [r5, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d100      	bne.n	80038f0 <_svfiprintf_r+0x7c>
 80038ee:	e0a5      	b.n	8003a3c <_svfiprintf_r+0x1c8>
 80038f0:	2201      	movs	r2, #1
 80038f2:	2300      	movs	r3, #0
 80038f4:	4252      	negs	r2, r2
 80038f6:	6062      	str	r2, [r4, #4]
 80038f8:	a904      	add	r1, sp, #16
 80038fa:	3254      	adds	r2, #84	; 0x54
 80038fc:	1852      	adds	r2, r2, r1
 80038fe:	1c6e      	adds	r6, r5, #1
 8003900:	6023      	str	r3, [r4, #0]
 8003902:	60e3      	str	r3, [r4, #12]
 8003904:	60a3      	str	r3, [r4, #8]
 8003906:	7013      	strb	r3, [r2, #0]
 8003908:	65a3      	str	r3, [r4, #88]	; 0x58
 800390a:	2205      	movs	r2, #5
 800390c:	7831      	ldrb	r1, [r6, #0]
 800390e:	4854      	ldr	r0, [pc, #336]	; (8003a60 <_svfiprintf_r+0x1ec>)
 8003910:	f000 fa32 	bl	8003d78 <memchr>
 8003914:	1c75      	adds	r5, r6, #1
 8003916:	2800      	cmp	r0, #0
 8003918:	d11f      	bne.n	800395a <_svfiprintf_r+0xe6>
 800391a:	6822      	ldr	r2, [r4, #0]
 800391c:	06d3      	lsls	r3, r2, #27
 800391e:	d504      	bpl.n	800392a <_svfiprintf_r+0xb6>
 8003920:	2353      	movs	r3, #83	; 0x53
 8003922:	a904      	add	r1, sp, #16
 8003924:	185b      	adds	r3, r3, r1
 8003926:	2120      	movs	r1, #32
 8003928:	7019      	strb	r1, [r3, #0]
 800392a:	0713      	lsls	r3, r2, #28
 800392c:	d504      	bpl.n	8003938 <_svfiprintf_r+0xc4>
 800392e:	2353      	movs	r3, #83	; 0x53
 8003930:	a904      	add	r1, sp, #16
 8003932:	185b      	adds	r3, r3, r1
 8003934:	212b      	movs	r1, #43	; 0x2b
 8003936:	7019      	strb	r1, [r3, #0]
 8003938:	7833      	ldrb	r3, [r6, #0]
 800393a:	2b2a      	cmp	r3, #42	; 0x2a
 800393c:	d016      	beq.n	800396c <_svfiprintf_r+0xf8>
 800393e:	0035      	movs	r5, r6
 8003940:	2100      	movs	r1, #0
 8003942:	200a      	movs	r0, #10
 8003944:	68e3      	ldr	r3, [r4, #12]
 8003946:	782a      	ldrb	r2, [r5, #0]
 8003948:	1c6e      	adds	r6, r5, #1
 800394a:	3a30      	subs	r2, #48	; 0x30
 800394c:	2a09      	cmp	r2, #9
 800394e:	d94e      	bls.n	80039ee <_svfiprintf_r+0x17a>
 8003950:	2900      	cmp	r1, #0
 8003952:	d111      	bne.n	8003978 <_svfiprintf_r+0x104>
 8003954:	e017      	b.n	8003986 <_svfiprintf_r+0x112>
 8003956:	3501      	adds	r5, #1
 8003958:	e7b0      	b.n	80038bc <_svfiprintf_r+0x48>
 800395a:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <_svfiprintf_r+0x1ec>)
 800395c:	6822      	ldr	r2, [r4, #0]
 800395e:	1ac0      	subs	r0, r0, r3
 8003960:	2301      	movs	r3, #1
 8003962:	4083      	lsls	r3, r0
 8003964:	4313      	orrs	r3, r2
 8003966:	002e      	movs	r6, r5
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	e7ce      	b.n	800390a <_svfiprintf_r+0x96>
 800396c:	9b07      	ldr	r3, [sp, #28]
 800396e:	1d19      	adds	r1, r3, #4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	9107      	str	r1, [sp, #28]
 8003974:	2b00      	cmp	r3, #0
 8003976:	db01      	blt.n	800397c <_svfiprintf_r+0x108>
 8003978:	930b      	str	r3, [sp, #44]	; 0x2c
 800397a:	e004      	b.n	8003986 <_svfiprintf_r+0x112>
 800397c:	425b      	negs	r3, r3
 800397e:	60e3      	str	r3, [r4, #12]
 8003980:	2302      	movs	r3, #2
 8003982:	4313      	orrs	r3, r2
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	782b      	ldrb	r3, [r5, #0]
 8003988:	2b2e      	cmp	r3, #46	; 0x2e
 800398a:	d10a      	bne.n	80039a2 <_svfiprintf_r+0x12e>
 800398c:	786b      	ldrb	r3, [r5, #1]
 800398e:	2b2a      	cmp	r3, #42	; 0x2a
 8003990:	d135      	bne.n	80039fe <_svfiprintf_r+0x18a>
 8003992:	9b07      	ldr	r3, [sp, #28]
 8003994:	3502      	adds	r5, #2
 8003996:	1d1a      	adds	r2, r3, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	9207      	str	r2, [sp, #28]
 800399c:	2b00      	cmp	r3, #0
 800399e:	db2b      	blt.n	80039f8 <_svfiprintf_r+0x184>
 80039a0:	9309      	str	r3, [sp, #36]	; 0x24
 80039a2:	4e30      	ldr	r6, [pc, #192]	; (8003a64 <_svfiprintf_r+0x1f0>)
 80039a4:	2203      	movs	r2, #3
 80039a6:	0030      	movs	r0, r6
 80039a8:	7829      	ldrb	r1, [r5, #0]
 80039aa:	f000 f9e5 	bl	8003d78 <memchr>
 80039ae:	2800      	cmp	r0, #0
 80039b0:	d006      	beq.n	80039c0 <_svfiprintf_r+0x14c>
 80039b2:	2340      	movs	r3, #64	; 0x40
 80039b4:	1b80      	subs	r0, r0, r6
 80039b6:	4083      	lsls	r3, r0
 80039b8:	6822      	ldr	r2, [r4, #0]
 80039ba:	3501      	adds	r5, #1
 80039bc:	4313      	orrs	r3, r2
 80039be:	6023      	str	r3, [r4, #0]
 80039c0:	7829      	ldrb	r1, [r5, #0]
 80039c2:	2206      	movs	r2, #6
 80039c4:	4828      	ldr	r0, [pc, #160]	; (8003a68 <_svfiprintf_r+0x1f4>)
 80039c6:	1c6e      	adds	r6, r5, #1
 80039c8:	7621      	strb	r1, [r4, #24]
 80039ca:	f000 f9d5 	bl	8003d78 <memchr>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d03c      	beq.n	8003a4c <_svfiprintf_r+0x1d8>
 80039d2:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <_svfiprintf_r+0x1f8>)
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d125      	bne.n	8003a24 <_svfiprintf_r+0x1b0>
 80039d8:	2207      	movs	r2, #7
 80039da:	9b07      	ldr	r3, [sp, #28]
 80039dc:	3307      	adds	r3, #7
 80039de:	4393      	bics	r3, r2
 80039e0:	3308      	adds	r3, #8
 80039e2:	9307      	str	r3, [sp, #28]
 80039e4:	6963      	ldr	r3, [r4, #20]
 80039e6:	9a04      	ldr	r2, [sp, #16]
 80039e8:	189b      	adds	r3, r3, r2
 80039ea:	6163      	str	r3, [r4, #20]
 80039ec:	e765      	b.n	80038ba <_svfiprintf_r+0x46>
 80039ee:	4343      	muls	r3, r0
 80039f0:	0035      	movs	r5, r6
 80039f2:	2101      	movs	r1, #1
 80039f4:	189b      	adds	r3, r3, r2
 80039f6:	e7a6      	b.n	8003946 <_svfiprintf_r+0xd2>
 80039f8:	2301      	movs	r3, #1
 80039fa:	425b      	negs	r3, r3
 80039fc:	e7d0      	b.n	80039a0 <_svfiprintf_r+0x12c>
 80039fe:	2300      	movs	r3, #0
 8003a00:	200a      	movs	r0, #10
 8003a02:	001a      	movs	r2, r3
 8003a04:	3501      	adds	r5, #1
 8003a06:	6063      	str	r3, [r4, #4]
 8003a08:	7829      	ldrb	r1, [r5, #0]
 8003a0a:	1c6e      	adds	r6, r5, #1
 8003a0c:	3930      	subs	r1, #48	; 0x30
 8003a0e:	2909      	cmp	r1, #9
 8003a10:	d903      	bls.n	8003a1a <_svfiprintf_r+0x1a6>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0c5      	beq.n	80039a2 <_svfiprintf_r+0x12e>
 8003a16:	9209      	str	r2, [sp, #36]	; 0x24
 8003a18:	e7c3      	b.n	80039a2 <_svfiprintf_r+0x12e>
 8003a1a:	4342      	muls	r2, r0
 8003a1c:	0035      	movs	r5, r6
 8003a1e:	2301      	movs	r3, #1
 8003a20:	1852      	adds	r2, r2, r1
 8003a22:	e7f1      	b.n	8003a08 <_svfiprintf_r+0x194>
 8003a24:	ab07      	add	r3, sp, #28
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	003a      	movs	r2, r7
 8003a2a:	0021      	movs	r1, r4
 8003a2c:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <_svfiprintf_r+0x1fc>)
 8003a2e:	9803      	ldr	r0, [sp, #12]
 8003a30:	e000      	b.n	8003a34 <_svfiprintf_r+0x1c0>
 8003a32:	bf00      	nop
 8003a34:	9004      	str	r0, [sp, #16]
 8003a36:	9b04      	ldr	r3, [sp, #16]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	d1d3      	bne.n	80039e4 <_svfiprintf_r+0x170>
 8003a3c:	89bb      	ldrh	r3, [r7, #12]
 8003a3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a40:	065b      	lsls	r3, r3, #25
 8003a42:	d400      	bmi.n	8003a46 <_svfiprintf_r+0x1d2>
 8003a44:	e72d      	b.n	80038a2 <_svfiprintf_r+0x2e>
 8003a46:	2001      	movs	r0, #1
 8003a48:	4240      	negs	r0, r0
 8003a4a:	e72a      	b.n	80038a2 <_svfiprintf_r+0x2e>
 8003a4c:	ab07      	add	r3, sp, #28
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	003a      	movs	r2, r7
 8003a52:	0021      	movs	r1, r4
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <_svfiprintf_r+0x1fc>)
 8003a56:	9803      	ldr	r0, [sp, #12]
 8003a58:	f000 f87c 	bl	8003b54 <_printf_i>
 8003a5c:	e7ea      	b.n	8003a34 <_svfiprintf_r+0x1c0>
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	0800450d 	.word	0x0800450d
 8003a64:	08004513 	.word	0x08004513
 8003a68:	08004517 	.word	0x08004517
 8003a6c:	00000000 	.word	0x00000000
 8003a70:	080037b1 	.word	0x080037b1

08003a74 <_printf_common>:
 8003a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a76:	0015      	movs	r5, r2
 8003a78:	9301      	str	r3, [sp, #4]
 8003a7a:	688a      	ldr	r2, [r1, #8]
 8003a7c:	690b      	ldr	r3, [r1, #16]
 8003a7e:	000c      	movs	r4, r1
 8003a80:	9000      	str	r0, [sp, #0]
 8003a82:	4293      	cmp	r3, r2
 8003a84:	da00      	bge.n	8003a88 <_printf_common+0x14>
 8003a86:	0013      	movs	r3, r2
 8003a88:	0022      	movs	r2, r4
 8003a8a:	602b      	str	r3, [r5, #0]
 8003a8c:	3243      	adds	r2, #67	; 0x43
 8003a8e:	7812      	ldrb	r2, [r2, #0]
 8003a90:	2a00      	cmp	r2, #0
 8003a92:	d001      	beq.n	8003a98 <_printf_common+0x24>
 8003a94:	3301      	adds	r3, #1
 8003a96:	602b      	str	r3, [r5, #0]
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	069b      	lsls	r3, r3, #26
 8003a9c:	d502      	bpl.n	8003aa4 <_printf_common+0x30>
 8003a9e:	682b      	ldr	r3, [r5, #0]
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	602b      	str	r3, [r5, #0]
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	2306      	movs	r3, #6
 8003aa8:	0017      	movs	r7, r2
 8003aaa:	401f      	ands	r7, r3
 8003aac:	421a      	tst	r2, r3
 8003aae:	d027      	beq.n	8003b00 <_printf_common+0x8c>
 8003ab0:	0023      	movs	r3, r4
 8003ab2:	3343      	adds	r3, #67	; 0x43
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	1e5a      	subs	r2, r3, #1
 8003ab8:	4193      	sbcs	r3, r2
 8003aba:	6822      	ldr	r2, [r4, #0]
 8003abc:	0692      	lsls	r2, r2, #26
 8003abe:	d430      	bmi.n	8003b22 <_printf_common+0xae>
 8003ac0:	0022      	movs	r2, r4
 8003ac2:	9901      	ldr	r1, [sp, #4]
 8003ac4:	9800      	ldr	r0, [sp, #0]
 8003ac6:	9e08      	ldr	r6, [sp, #32]
 8003ac8:	3243      	adds	r2, #67	; 0x43
 8003aca:	47b0      	blx	r6
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	d025      	beq.n	8003b1c <_printf_common+0xa8>
 8003ad0:	2306      	movs	r3, #6
 8003ad2:	6820      	ldr	r0, [r4, #0]
 8003ad4:	682a      	ldr	r2, [r5, #0]
 8003ad6:	68e1      	ldr	r1, [r4, #12]
 8003ad8:	2500      	movs	r5, #0
 8003ada:	4003      	ands	r3, r0
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d103      	bne.n	8003ae8 <_printf_common+0x74>
 8003ae0:	1a8d      	subs	r5, r1, r2
 8003ae2:	43eb      	mvns	r3, r5
 8003ae4:	17db      	asrs	r3, r3, #31
 8003ae6:	401d      	ands	r5, r3
 8003ae8:	68a3      	ldr	r3, [r4, #8]
 8003aea:	6922      	ldr	r2, [r4, #16]
 8003aec:	4293      	cmp	r3, r2
 8003aee:	dd01      	ble.n	8003af4 <_printf_common+0x80>
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	18ed      	adds	r5, r5, r3
 8003af4:	2700      	movs	r7, #0
 8003af6:	42bd      	cmp	r5, r7
 8003af8:	d120      	bne.n	8003b3c <_printf_common+0xc8>
 8003afa:	2000      	movs	r0, #0
 8003afc:	e010      	b.n	8003b20 <_printf_common+0xac>
 8003afe:	3701      	adds	r7, #1
 8003b00:	68e3      	ldr	r3, [r4, #12]
 8003b02:	682a      	ldr	r2, [r5, #0]
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	42bb      	cmp	r3, r7
 8003b08:	ddd2      	ble.n	8003ab0 <_printf_common+0x3c>
 8003b0a:	0022      	movs	r2, r4
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	9901      	ldr	r1, [sp, #4]
 8003b10:	9800      	ldr	r0, [sp, #0]
 8003b12:	9e08      	ldr	r6, [sp, #32]
 8003b14:	3219      	adds	r2, #25
 8003b16:	47b0      	blx	r6
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d1f0      	bne.n	8003afe <_printf_common+0x8a>
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	4240      	negs	r0, r0
 8003b20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b22:	2030      	movs	r0, #48	; 0x30
 8003b24:	18e1      	adds	r1, r4, r3
 8003b26:	3143      	adds	r1, #67	; 0x43
 8003b28:	7008      	strb	r0, [r1, #0]
 8003b2a:	0021      	movs	r1, r4
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	3145      	adds	r1, #69	; 0x45
 8003b30:	7809      	ldrb	r1, [r1, #0]
 8003b32:	18a2      	adds	r2, r4, r2
 8003b34:	3243      	adds	r2, #67	; 0x43
 8003b36:	3302      	adds	r3, #2
 8003b38:	7011      	strb	r1, [r2, #0]
 8003b3a:	e7c1      	b.n	8003ac0 <_printf_common+0x4c>
 8003b3c:	0022      	movs	r2, r4
 8003b3e:	2301      	movs	r3, #1
 8003b40:	9901      	ldr	r1, [sp, #4]
 8003b42:	9800      	ldr	r0, [sp, #0]
 8003b44:	9e08      	ldr	r6, [sp, #32]
 8003b46:	321a      	adds	r2, #26
 8003b48:	47b0      	blx	r6
 8003b4a:	1c43      	adds	r3, r0, #1
 8003b4c:	d0e6      	beq.n	8003b1c <_printf_common+0xa8>
 8003b4e:	3701      	adds	r7, #1
 8003b50:	e7d1      	b.n	8003af6 <_printf_common+0x82>
	...

08003b54 <_printf_i>:
 8003b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b56:	b08b      	sub	sp, #44	; 0x2c
 8003b58:	9206      	str	r2, [sp, #24]
 8003b5a:	000a      	movs	r2, r1
 8003b5c:	3243      	adds	r2, #67	; 0x43
 8003b5e:	9307      	str	r3, [sp, #28]
 8003b60:	9005      	str	r0, [sp, #20]
 8003b62:	9204      	str	r2, [sp, #16]
 8003b64:	7e0a      	ldrb	r2, [r1, #24]
 8003b66:	000c      	movs	r4, r1
 8003b68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b6a:	2a78      	cmp	r2, #120	; 0x78
 8003b6c:	d807      	bhi.n	8003b7e <_printf_i+0x2a>
 8003b6e:	2a62      	cmp	r2, #98	; 0x62
 8003b70:	d809      	bhi.n	8003b86 <_printf_i+0x32>
 8003b72:	2a00      	cmp	r2, #0
 8003b74:	d100      	bne.n	8003b78 <_printf_i+0x24>
 8003b76:	e0c1      	b.n	8003cfc <_printf_i+0x1a8>
 8003b78:	2a58      	cmp	r2, #88	; 0x58
 8003b7a:	d100      	bne.n	8003b7e <_printf_i+0x2a>
 8003b7c:	e08c      	b.n	8003c98 <_printf_i+0x144>
 8003b7e:	0026      	movs	r6, r4
 8003b80:	3642      	adds	r6, #66	; 0x42
 8003b82:	7032      	strb	r2, [r6, #0]
 8003b84:	e022      	b.n	8003bcc <_printf_i+0x78>
 8003b86:	0010      	movs	r0, r2
 8003b88:	3863      	subs	r0, #99	; 0x63
 8003b8a:	2815      	cmp	r0, #21
 8003b8c:	d8f7      	bhi.n	8003b7e <_printf_i+0x2a>
 8003b8e:	f7fc facd 	bl	800012c <__gnu_thumb1_case_shi>
 8003b92:	0016      	.short	0x0016
 8003b94:	fff6001f 	.word	0xfff6001f
 8003b98:	fff6fff6 	.word	0xfff6fff6
 8003b9c:	001ffff6 	.word	0x001ffff6
 8003ba0:	fff6fff6 	.word	0xfff6fff6
 8003ba4:	fff6fff6 	.word	0xfff6fff6
 8003ba8:	003600a8 	.word	0x003600a8
 8003bac:	fff6009a 	.word	0xfff6009a
 8003bb0:	00b9fff6 	.word	0x00b9fff6
 8003bb4:	0036fff6 	.word	0x0036fff6
 8003bb8:	fff6fff6 	.word	0xfff6fff6
 8003bbc:	009e      	.short	0x009e
 8003bbe:	0026      	movs	r6, r4
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	3642      	adds	r6, #66	; 0x42
 8003bc4:	1d11      	adds	r1, r2, #4
 8003bc6:	6019      	str	r1, [r3, #0]
 8003bc8:	6813      	ldr	r3, [r2, #0]
 8003bca:	7033      	strb	r3, [r6, #0]
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0a7      	b.n	8003d20 <_printf_i+0x1cc>
 8003bd0:	6808      	ldr	r0, [r1, #0]
 8003bd2:	6819      	ldr	r1, [r3, #0]
 8003bd4:	1d0a      	adds	r2, r1, #4
 8003bd6:	0605      	lsls	r5, r0, #24
 8003bd8:	d50b      	bpl.n	8003bf2 <_printf_i+0x9e>
 8003bda:	680d      	ldr	r5, [r1, #0]
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	2d00      	cmp	r5, #0
 8003be0:	da03      	bge.n	8003bea <_printf_i+0x96>
 8003be2:	232d      	movs	r3, #45	; 0x2d
 8003be4:	9a04      	ldr	r2, [sp, #16]
 8003be6:	426d      	negs	r5, r5
 8003be8:	7013      	strb	r3, [r2, #0]
 8003bea:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <_printf_i+0x21c>)
 8003bec:	270a      	movs	r7, #10
 8003bee:	9303      	str	r3, [sp, #12]
 8003bf0:	e01b      	b.n	8003c2a <_printf_i+0xd6>
 8003bf2:	680d      	ldr	r5, [r1, #0]
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	0641      	lsls	r1, r0, #25
 8003bf8:	d5f1      	bpl.n	8003bde <_printf_i+0x8a>
 8003bfa:	b22d      	sxth	r5, r5
 8003bfc:	e7ef      	b.n	8003bde <_printf_i+0x8a>
 8003bfe:	680d      	ldr	r5, [r1, #0]
 8003c00:	6819      	ldr	r1, [r3, #0]
 8003c02:	1d08      	adds	r0, r1, #4
 8003c04:	6018      	str	r0, [r3, #0]
 8003c06:	062e      	lsls	r6, r5, #24
 8003c08:	d501      	bpl.n	8003c0e <_printf_i+0xba>
 8003c0a:	680d      	ldr	r5, [r1, #0]
 8003c0c:	e003      	b.n	8003c16 <_printf_i+0xc2>
 8003c0e:	066d      	lsls	r5, r5, #25
 8003c10:	d5fb      	bpl.n	8003c0a <_printf_i+0xb6>
 8003c12:	680d      	ldr	r5, [r1, #0]
 8003c14:	b2ad      	uxth	r5, r5
 8003c16:	4b56      	ldr	r3, [pc, #344]	; (8003d70 <_printf_i+0x21c>)
 8003c18:	2708      	movs	r7, #8
 8003c1a:	9303      	str	r3, [sp, #12]
 8003c1c:	2a6f      	cmp	r2, #111	; 0x6f
 8003c1e:	d000      	beq.n	8003c22 <_printf_i+0xce>
 8003c20:	3702      	adds	r7, #2
 8003c22:	0023      	movs	r3, r4
 8003c24:	2200      	movs	r2, #0
 8003c26:	3343      	adds	r3, #67	; 0x43
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	6863      	ldr	r3, [r4, #4]
 8003c2c:	60a3      	str	r3, [r4, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	db03      	blt.n	8003c3a <_printf_i+0xe6>
 8003c32:	2204      	movs	r2, #4
 8003c34:	6821      	ldr	r1, [r4, #0]
 8003c36:	4391      	bics	r1, r2
 8003c38:	6021      	str	r1, [r4, #0]
 8003c3a:	2d00      	cmp	r5, #0
 8003c3c:	d102      	bne.n	8003c44 <_printf_i+0xf0>
 8003c3e:	9e04      	ldr	r6, [sp, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00c      	beq.n	8003c5e <_printf_i+0x10a>
 8003c44:	9e04      	ldr	r6, [sp, #16]
 8003c46:	0028      	movs	r0, r5
 8003c48:	0039      	movs	r1, r7
 8003c4a:	f7fc faff 	bl	800024c <__aeabi_uidivmod>
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	3e01      	subs	r6, #1
 8003c52:	5c5b      	ldrb	r3, [r3, r1]
 8003c54:	7033      	strb	r3, [r6, #0]
 8003c56:	002b      	movs	r3, r5
 8003c58:	0005      	movs	r5, r0
 8003c5a:	429f      	cmp	r7, r3
 8003c5c:	d9f3      	bls.n	8003c46 <_printf_i+0xf2>
 8003c5e:	2f08      	cmp	r7, #8
 8003c60:	d109      	bne.n	8003c76 <_printf_i+0x122>
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	07db      	lsls	r3, r3, #31
 8003c66:	d506      	bpl.n	8003c76 <_printf_i+0x122>
 8003c68:	6863      	ldr	r3, [r4, #4]
 8003c6a:	6922      	ldr	r2, [r4, #16]
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	dc02      	bgt.n	8003c76 <_printf_i+0x122>
 8003c70:	2330      	movs	r3, #48	; 0x30
 8003c72:	3e01      	subs	r6, #1
 8003c74:	7033      	strb	r3, [r6, #0]
 8003c76:	9b04      	ldr	r3, [sp, #16]
 8003c78:	1b9b      	subs	r3, r3, r6
 8003c7a:	6123      	str	r3, [r4, #16]
 8003c7c:	9b07      	ldr	r3, [sp, #28]
 8003c7e:	0021      	movs	r1, r4
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	9805      	ldr	r0, [sp, #20]
 8003c84:	9b06      	ldr	r3, [sp, #24]
 8003c86:	aa09      	add	r2, sp, #36	; 0x24
 8003c88:	f7ff fef4 	bl	8003a74 <_printf_common>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d14c      	bne.n	8003d2a <_printf_i+0x1d6>
 8003c90:	2001      	movs	r0, #1
 8003c92:	4240      	negs	r0, r0
 8003c94:	b00b      	add	sp, #44	; 0x2c
 8003c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c98:	3145      	adds	r1, #69	; 0x45
 8003c9a:	700a      	strb	r2, [r1, #0]
 8003c9c:	4a34      	ldr	r2, [pc, #208]	; (8003d70 <_printf_i+0x21c>)
 8003c9e:	9203      	str	r2, [sp, #12]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	6821      	ldr	r1, [r4, #0]
 8003ca4:	ca20      	ldmia	r2!, {r5}
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	0608      	lsls	r0, r1, #24
 8003caa:	d516      	bpl.n	8003cda <_printf_i+0x186>
 8003cac:	07cb      	lsls	r3, r1, #31
 8003cae:	d502      	bpl.n	8003cb6 <_printf_i+0x162>
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	4319      	orrs	r1, r3
 8003cb4:	6021      	str	r1, [r4, #0]
 8003cb6:	2710      	movs	r7, #16
 8003cb8:	2d00      	cmp	r5, #0
 8003cba:	d1b2      	bne.n	8003c22 <_printf_i+0xce>
 8003cbc:	2320      	movs	r3, #32
 8003cbe:	6822      	ldr	r2, [r4, #0]
 8003cc0:	439a      	bics	r2, r3
 8003cc2:	6022      	str	r2, [r4, #0]
 8003cc4:	e7ad      	b.n	8003c22 <_printf_i+0xce>
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	6809      	ldr	r1, [r1, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	6022      	str	r2, [r4, #0]
 8003cce:	0022      	movs	r2, r4
 8003cd0:	2178      	movs	r1, #120	; 0x78
 8003cd2:	3245      	adds	r2, #69	; 0x45
 8003cd4:	7011      	strb	r1, [r2, #0]
 8003cd6:	4a27      	ldr	r2, [pc, #156]	; (8003d74 <_printf_i+0x220>)
 8003cd8:	e7e1      	b.n	8003c9e <_printf_i+0x14a>
 8003cda:	0648      	lsls	r0, r1, #25
 8003cdc:	d5e6      	bpl.n	8003cac <_printf_i+0x158>
 8003cde:	b2ad      	uxth	r5, r5
 8003ce0:	e7e4      	b.n	8003cac <_printf_i+0x158>
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	680d      	ldr	r5, [r1, #0]
 8003ce6:	1d10      	adds	r0, r2, #4
 8003ce8:	6949      	ldr	r1, [r1, #20]
 8003cea:	6018      	str	r0, [r3, #0]
 8003cec:	6813      	ldr	r3, [r2, #0]
 8003cee:	062e      	lsls	r6, r5, #24
 8003cf0:	d501      	bpl.n	8003cf6 <_printf_i+0x1a2>
 8003cf2:	6019      	str	r1, [r3, #0]
 8003cf4:	e002      	b.n	8003cfc <_printf_i+0x1a8>
 8003cf6:	066d      	lsls	r5, r5, #25
 8003cf8:	d5fb      	bpl.n	8003cf2 <_printf_i+0x19e>
 8003cfa:	8019      	strh	r1, [r3, #0]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	9e04      	ldr	r6, [sp, #16]
 8003d00:	6123      	str	r3, [r4, #16]
 8003d02:	e7bb      	b.n	8003c7c <_printf_i+0x128>
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	1d11      	adds	r1, r2, #4
 8003d08:	6019      	str	r1, [r3, #0]
 8003d0a:	6816      	ldr	r6, [r2, #0]
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	0030      	movs	r0, r6
 8003d10:	6862      	ldr	r2, [r4, #4]
 8003d12:	f000 f831 	bl	8003d78 <memchr>
 8003d16:	2800      	cmp	r0, #0
 8003d18:	d001      	beq.n	8003d1e <_printf_i+0x1ca>
 8003d1a:	1b80      	subs	r0, r0, r6
 8003d1c:	6060      	str	r0, [r4, #4]
 8003d1e:	6863      	ldr	r3, [r4, #4]
 8003d20:	6123      	str	r3, [r4, #16]
 8003d22:	2300      	movs	r3, #0
 8003d24:	9a04      	ldr	r2, [sp, #16]
 8003d26:	7013      	strb	r3, [r2, #0]
 8003d28:	e7a8      	b.n	8003c7c <_printf_i+0x128>
 8003d2a:	6923      	ldr	r3, [r4, #16]
 8003d2c:	0032      	movs	r2, r6
 8003d2e:	9906      	ldr	r1, [sp, #24]
 8003d30:	9805      	ldr	r0, [sp, #20]
 8003d32:	9d07      	ldr	r5, [sp, #28]
 8003d34:	47a8      	blx	r5
 8003d36:	1c43      	adds	r3, r0, #1
 8003d38:	d0aa      	beq.n	8003c90 <_printf_i+0x13c>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	079b      	lsls	r3, r3, #30
 8003d3e:	d415      	bmi.n	8003d6c <_printf_i+0x218>
 8003d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d42:	68e0      	ldr	r0, [r4, #12]
 8003d44:	4298      	cmp	r0, r3
 8003d46:	daa5      	bge.n	8003c94 <_printf_i+0x140>
 8003d48:	0018      	movs	r0, r3
 8003d4a:	e7a3      	b.n	8003c94 <_printf_i+0x140>
 8003d4c:	0022      	movs	r2, r4
 8003d4e:	2301      	movs	r3, #1
 8003d50:	9906      	ldr	r1, [sp, #24]
 8003d52:	9805      	ldr	r0, [sp, #20]
 8003d54:	9e07      	ldr	r6, [sp, #28]
 8003d56:	3219      	adds	r2, #25
 8003d58:	47b0      	blx	r6
 8003d5a:	1c43      	adds	r3, r0, #1
 8003d5c:	d098      	beq.n	8003c90 <_printf_i+0x13c>
 8003d5e:	3501      	adds	r5, #1
 8003d60:	68e3      	ldr	r3, [r4, #12]
 8003d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	42ab      	cmp	r3, r5
 8003d68:	dcf0      	bgt.n	8003d4c <_printf_i+0x1f8>
 8003d6a:	e7e9      	b.n	8003d40 <_printf_i+0x1ec>
 8003d6c:	2500      	movs	r5, #0
 8003d6e:	e7f7      	b.n	8003d60 <_printf_i+0x20c>
 8003d70:	0800451e 	.word	0x0800451e
 8003d74:	0800452f 	.word	0x0800452f

08003d78 <memchr>:
 8003d78:	b2c9      	uxtb	r1, r1
 8003d7a:	1882      	adds	r2, r0, r2
 8003d7c:	4290      	cmp	r0, r2
 8003d7e:	d101      	bne.n	8003d84 <memchr+0xc>
 8003d80:	2000      	movs	r0, #0
 8003d82:	4770      	bx	lr
 8003d84:	7803      	ldrb	r3, [r0, #0]
 8003d86:	428b      	cmp	r3, r1
 8003d88:	d0fb      	beq.n	8003d82 <memchr+0xa>
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	e7f6      	b.n	8003d7c <memchr+0x4>

08003d8e <memmove>:
 8003d8e:	b510      	push	{r4, lr}
 8003d90:	4288      	cmp	r0, r1
 8003d92:	d902      	bls.n	8003d9a <memmove+0xc>
 8003d94:	188b      	adds	r3, r1, r2
 8003d96:	4298      	cmp	r0, r3
 8003d98:	d303      	bcc.n	8003da2 <memmove+0x14>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e007      	b.n	8003dae <memmove+0x20>
 8003d9e:	5c8b      	ldrb	r3, [r1, r2]
 8003da0:	5483      	strb	r3, [r0, r2]
 8003da2:	3a01      	subs	r2, #1
 8003da4:	d2fb      	bcs.n	8003d9e <memmove+0x10>
 8003da6:	bd10      	pop	{r4, pc}
 8003da8:	5ccc      	ldrb	r4, [r1, r3]
 8003daa:	54c4      	strb	r4, [r0, r3]
 8003dac:	3301      	adds	r3, #1
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d1fa      	bne.n	8003da8 <memmove+0x1a>
 8003db2:	e7f8      	b.n	8003da6 <memmove+0x18>

08003db4 <_free_r>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	0005      	movs	r5, r0
 8003db8:	2900      	cmp	r1, #0
 8003dba:	d010      	beq.n	8003dde <_free_r+0x2a>
 8003dbc:	1f0c      	subs	r4, r1, #4
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	da00      	bge.n	8003dc6 <_free_r+0x12>
 8003dc4:	18e4      	adds	r4, r4, r3
 8003dc6:	0028      	movs	r0, r5
 8003dc8:	f000 f918 	bl	8003ffc <__malloc_lock>
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	; (8003e44 <_free_r+0x90>)
 8003dce:	6813      	ldr	r3, [r2, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <_free_r+0x2c>
 8003dd4:	6063      	str	r3, [r4, #4]
 8003dd6:	6014      	str	r4, [r2, #0]
 8003dd8:	0028      	movs	r0, r5
 8003dda:	f000 f917 	bl	800400c <__malloc_unlock>
 8003dde:	bd70      	pop	{r4, r5, r6, pc}
 8003de0:	42a3      	cmp	r3, r4
 8003de2:	d908      	bls.n	8003df6 <_free_r+0x42>
 8003de4:	6821      	ldr	r1, [r4, #0]
 8003de6:	1860      	adds	r0, r4, r1
 8003de8:	4283      	cmp	r3, r0
 8003dea:	d1f3      	bne.n	8003dd4 <_free_r+0x20>
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	1841      	adds	r1, r0, r1
 8003df2:	6021      	str	r1, [r4, #0]
 8003df4:	e7ee      	b.n	8003dd4 <_free_r+0x20>
 8003df6:	001a      	movs	r2, r3
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <_free_r+0x4e>
 8003dfe:	42a3      	cmp	r3, r4
 8003e00:	d9f9      	bls.n	8003df6 <_free_r+0x42>
 8003e02:	6811      	ldr	r1, [r2, #0]
 8003e04:	1850      	adds	r0, r2, r1
 8003e06:	42a0      	cmp	r0, r4
 8003e08:	d10b      	bne.n	8003e22 <_free_r+0x6e>
 8003e0a:	6820      	ldr	r0, [r4, #0]
 8003e0c:	1809      	adds	r1, r1, r0
 8003e0e:	1850      	adds	r0, r2, r1
 8003e10:	6011      	str	r1, [r2, #0]
 8003e12:	4283      	cmp	r3, r0
 8003e14:	d1e0      	bne.n	8003dd8 <_free_r+0x24>
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	1841      	adds	r1, r0, r1
 8003e1c:	6011      	str	r1, [r2, #0]
 8003e1e:	6053      	str	r3, [r2, #4]
 8003e20:	e7da      	b.n	8003dd8 <_free_r+0x24>
 8003e22:	42a0      	cmp	r0, r4
 8003e24:	d902      	bls.n	8003e2c <_free_r+0x78>
 8003e26:	230c      	movs	r3, #12
 8003e28:	602b      	str	r3, [r5, #0]
 8003e2a:	e7d5      	b.n	8003dd8 <_free_r+0x24>
 8003e2c:	6821      	ldr	r1, [r4, #0]
 8003e2e:	1860      	adds	r0, r4, r1
 8003e30:	4283      	cmp	r3, r0
 8003e32:	d103      	bne.n	8003e3c <_free_r+0x88>
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	1841      	adds	r1, r0, r1
 8003e3a:	6021      	str	r1, [r4, #0]
 8003e3c:	6063      	str	r3, [r4, #4]
 8003e3e:	6054      	str	r4, [r2, #4]
 8003e40:	e7ca      	b.n	8003dd8 <_free_r+0x24>
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	2000037c 	.word	0x2000037c

08003e48 <sbrk_aligned>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4e0f      	ldr	r6, [pc, #60]	; (8003e88 <sbrk_aligned+0x40>)
 8003e4c:	000d      	movs	r5, r1
 8003e4e:	6831      	ldr	r1, [r6, #0]
 8003e50:	0004      	movs	r4, r0
 8003e52:	2900      	cmp	r1, #0
 8003e54:	d102      	bne.n	8003e5c <sbrk_aligned+0x14>
 8003e56:	f000 f8bf 	bl	8003fd8 <_sbrk_r>
 8003e5a:	6030      	str	r0, [r6, #0]
 8003e5c:	0029      	movs	r1, r5
 8003e5e:	0020      	movs	r0, r4
 8003e60:	f000 f8ba 	bl	8003fd8 <_sbrk_r>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d00a      	beq.n	8003e7e <sbrk_aligned+0x36>
 8003e68:	2303      	movs	r3, #3
 8003e6a:	1cc5      	adds	r5, r0, #3
 8003e6c:	439d      	bics	r5, r3
 8003e6e:	42a8      	cmp	r0, r5
 8003e70:	d007      	beq.n	8003e82 <sbrk_aligned+0x3a>
 8003e72:	1a29      	subs	r1, r5, r0
 8003e74:	0020      	movs	r0, r4
 8003e76:	f000 f8af 	bl	8003fd8 <_sbrk_r>
 8003e7a:	1c43      	adds	r3, r0, #1
 8003e7c:	d101      	bne.n	8003e82 <sbrk_aligned+0x3a>
 8003e7e:	2501      	movs	r5, #1
 8003e80:	426d      	negs	r5, r5
 8003e82:	0028      	movs	r0, r5
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	20000380 	.word	0x20000380

08003e8c <_malloc_r>:
 8003e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e8e:	2203      	movs	r2, #3
 8003e90:	1ccb      	adds	r3, r1, #3
 8003e92:	4393      	bics	r3, r2
 8003e94:	3308      	adds	r3, #8
 8003e96:	0006      	movs	r6, r0
 8003e98:	001f      	movs	r7, r3
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d232      	bcs.n	8003f04 <_malloc_r+0x78>
 8003e9e:	270c      	movs	r7, #12
 8003ea0:	42b9      	cmp	r1, r7
 8003ea2:	d831      	bhi.n	8003f08 <_malloc_r+0x7c>
 8003ea4:	0030      	movs	r0, r6
 8003ea6:	f000 f8a9 	bl	8003ffc <__malloc_lock>
 8003eaa:	4d32      	ldr	r5, [pc, #200]	; (8003f74 <_malloc_r+0xe8>)
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	001c      	movs	r4, r3
 8003eb0:	2c00      	cmp	r4, #0
 8003eb2:	d12e      	bne.n	8003f12 <_malloc_r+0x86>
 8003eb4:	0039      	movs	r1, r7
 8003eb6:	0030      	movs	r0, r6
 8003eb8:	f7ff ffc6 	bl	8003e48 <sbrk_aligned>
 8003ebc:	0004      	movs	r4, r0
 8003ebe:	1c43      	adds	r3, r0, #1
 8003ec0:	d11e      	bne.n	8003f00 <_malloc_r+0x74>
 8003ec2:	682c      	ldr	r4, [r5, #0]
 8003ec4:	0025      	movs	r5, r4
 8003ec6:	2d00      	cmp	r5, #0
 8003ec8:	d14a      	bne.n	8003f60 <_malloc_r+0xd4>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	0029      	movs	r1, r5
 8003ece:	18e3      	adds	r3, r4, r3
 8003ed0:	0030      	movs	r0, r6
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	f000 f880 	bl	8003fd8 <_sbrk_r>
 8003ed8:	9b01      	ldr	r3, [sp, #4]
 8003eda:	4283      	cmp	r3, r0
 8003edc:	d143      	bne.n	8003f66 <_malloc_r+0xda>
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	3703      	adds	r7, #3
 8003ee2:	1aff      	subs	r7, r7, r3
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	439f      	bics	r7, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	2f0c      	cmp	r7, #12
 8003eec:	d200      	bcs.n	8003ef0 <_malloc_r+0x64>
 8003eee:	270c      	movs	r7, #12
 8003ef0:	0039      	movs	r1, r7
 8003ef2:	0030      	movs	r0, r6
 8003ef4:	f7ff ffa8 	bl	8003e48 <sbrk_aligned>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	d034      	beq.n	8003f66 <_malloc_r+0xda>
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	19df      	adds	r7, r3, r7
 8003f00:	6027      	str	r7, [r4, #0]
 8003f02:	e013      	b.n	8003f2c <_malloc_r+0xa0>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	dacb      	bge.n	8003ea0 <_malloc_r+0x14>
 8003f08:	230c      	movs	r3, #12
 8003f0a:	2500      	movs	r5, #0
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	0028      	movs	r0, r5
 8003f10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f12:	6822      	ldr	r2, [r4, #0]
 8003f14:	1bd1      	subs	r1, r2, r7
 8003f16:	d420      	bmi.n	8003f5a <_malloc_r+0xce>
 8003f18:	290b      	cmp	r1, #11
 8003f1a:	d917      	bls.n	8003f4c <_malloc_r+0xc0>
 8003f1c:	19e2      	adds	r2, r4, r7
 8003f1e:	6027      	str	r7, [r4, #0]
 8003f20:	42a3      	cmp	r3, r4
 8003f22:	d111      	bne.n	8003f48 <_malloc_r+0xbc>
 8003f24:	602a      	str	r2, [r5, #0]
 8003f26:	6863      	ldr	r3, [r4, #4]
 8003f28:	6011      	str	r1, [r2, #0]
 8003f2a:	6053      	str	r3, [r2, #4]
 8003f2c:	0030      	movs	r0, r6
 8003f2e:	0025      	movs	r5, r4
 8003f30:	f000 f86c 	bl	800400c <__malloc_unlock>
 8003f34:	2207      	movs	r2, #7
 8003f36:	350b      	adds	r5, #11
 8003f38:	1d23      	adds	r3, r4, #4
 8003f3a:	4395      	bics	r5, r2
 8003f3c:	1aea      	subs	r2, r5, r3
 8003f3e:	429d      	cmp	r5, r3
 8003f40:	d0e5      	beq.n	8003f0e <_malloc_r+0x82>
 8003f42:	1b5b      	subs	r3, r3, r5
 8003f44:	50a3      	str	r3, [r4, r2]
 8003f46:	e7e2      	b.n	8003f0e <_malloc_r+0x82>
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	e7ec      	b.n	8003f26 <_malloc_r+0x9a>
 8003f4c:	6862      	ldr	r2, [r4, #4]
 8003f4e:	42a3      	cmp	r3, r4
 8003f50:	d101      	bne.n	8003f56 <_malloc_r+0xca>
 8003f52:	602a      	str	r2, [r5, #0]
 8003f54:	e7ea      	b.n	8003f2c <_malloc_r+0xa0>
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	e7e8      	b.n	8003f2c <_malloc_r+0xa0>
 8003f5a:	0023      	movs	r3, r4
 8003f5c:	6864      	ldr	r4, [r4, #4]
 8003f5e:	e7a7      	b.n	8003eb0 <_malloc_r+0x24>
 8003f60:	002c      	movs	r4, r5
 8003f62:	686d      	ldr	r5, [r5, #4]
 8003f64:	e7af      	b.n	8003ec6 <_malloc_r+0x3a>
 8003f66:	230c      	movs	r3, #12
 8003f68:	0030      	movs	r0, r6
 8003f6a:	6033      	str	r3, [r6, #0]
 8003f6c:	f000 f84e 	bl	800400c <__malloc_unlock>
 8003f70:	e7cd      	b.n	8003f0e <_malloc_r+0x82>
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	2000037c 	.word	0x2000037c

08003f78 <_realloc_r>:
 8003f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f7a:	0007      	movs	r7, r0
 8003f7c:	000e      	movs	r6, r1
 8003f7e:	0014      	movs	r4, r2
 8003f80:	2900      	cmp	r1, #0
 8003f82:	d105      	bne.n	8003f90 <_realloc_r+0x18>
 8003f84:	0011      	movs	r1, r2
 8003f86:	f7ff ff81 	bl	8003e8c <_malloc_r>
 8003f8a:	0005      	movs	r5, r0
 8003f8c:	0028      	movs	r0, r5
 8003f8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f90:	2a00      	cmp	r2, #0
 8003f92:	d103      	bne.n	8003f9c <_realloc_r+0x24>
 8003f94:	f7ff ff0e 	bl	8003db4 <_free_r>
 8003f98:	0025      	movs	r5, r4
 8003f9a:	e7f7      	b.n	8003f8c <_realloc_r+0x14>
 8003f9c:	f000 f83e 	bl	800401c <_malloc_usable_size_r>
 8003fa0:	9001      	str	r0, [sp, #4]
 8003fa2:	4284      	cmp	r4, r0
 8003fa4:	d803      	bhi.n	8003fae <_realloc_r+0x36>
 8003fa6:	0035      	movs	r5, r6
 8003fa8:	0843      	lsrs	r3, r0, #1
 8003faa:	42a3      	cmp	r3, r4
 8003fac:	d3ee      	bcc.n	8003f8c <_realloc_r+0x14>
 8003fae:	0021      	movs	r1, r4
 8003fb0:	0038      	movs	r0, r7
 8003fb2:	f7ff ff6b 	bl	8003e8c <_malloc_r>
 8003fb6:	1e05      	subs	r5, r0, #0
 8003fb8:	d0e8      	beq.n	8003f8c <_realloc_r+0x14>
 8003fba:	9b01      	ldr	r3, [sp, #4]
 8003fbc:	0022      	movs	r2, r4
 8003fbe:	429c      	cmp	r4, r3
 8003fc0:	d900      	bls.n	8003fc4 <_realloc_r+0x4c>
 8003fc2:	001a      	movs	r2, r3
 8003fc4:	0031      	movs	r1, r6
 8003fc6:	0028      	movs	r0, r5
 8003fc8:	f7ff fa2e 	bl	8003428 <memcpy>
 8003fcc:	0031      	movs	r1, r6
 8003fce:	0038      	movs	r0, r7
 8003fd0:	f7ff fef0 	bl	8003db4 <_free_r>
 8003fd4:	e7da      	b.n	8003f8c <_realloc_r+0x14>
	...

08003fd8 <_sbrk_r>:
 8003fd8:	2300      	movs	r3, #0
 8003fda:	b570      	push	{r4, r5, r6, lr}
 8003fdc:	4d06      	ldr	r5, [pc, #24]	; (8003ff8 <_sbrk_r+0x20>)
 8003fde:	0004      	movs	r4, r0
 8003fe0:	0008      	movs	r0, r1
 8003fe2:	602b      	str	r3, [r5, #0]
 8003fe4:	f7fd fa72 	bl	80014cc <_sbrk>
 8003fe8:	1c43      	adds	r3, r0, #1
 8003fea:	d103      	bne.n	8003ff4 <_sbrk_r+0x1c>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d000      	beq.n	8003ff4 <_sbrk_r+0x1c>
 8003ff2:	6023      	str	r3, [r4, #0]
 8003ff4:	bd70      	pop	{r4, r5, r6, pc}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	20000384 	.word	0x20000384

08003ffc <__malloc_lock>:
 8003ffc:	b510      	push	{r4, lr}
 8003ffe:	4802      	ldr	r0, [pc, #8]	; (8004008 <__malloc_lock+0xc>)
 8004000:	f000 f814 	bl	800402c <__retarget_lock_acquire_recursive>
 8004004:	bd10      	pop	{r4, pc}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	20000388 	.word	0x20000388

0800400c <__malloc_unlock>:
 800400c:	b510      	push	{r4, lr}
 800400e:	4802      	ldr	r0, [pc, #8]	; (8004018 <__malloc_unlock+0xc>)
 8004010:	f000 f80d 	bl	800402e <__retarget_lock_release_recursive>
 8004014:	bd10      	pop	{r4, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	20000388 	.word	0x20000388

0800401c <_malloc_usable_size_r>:
 800401c:	1f0b      	subs	r3, r1, #4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	1f18      	subs	r0, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	da01      	bge.n	800402a <_malloc_usable_size_r+0xe>
 8004026:	580b      	ldr	r3, [r1, r0]
 8004028:	18c0      	adds	r0, r0, r3
 800402a:	4770      	bx	lr

0800402c <__retarget_lock_acquire_recursive>:
 800402c:	4770      	bx	lr

0800402e <__retarget_lock_release_recursive>:
 800402e:	4770      	bx	lr

08004030 <_init>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004036:	bc08      	pop	{r3}
 8004038:	469e      	mov	lr, r3
 800403a:	4770      	bx	lr

0800403c <_fini>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr
