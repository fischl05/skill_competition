
smart_window.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004850  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c54  08004c54  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c5c  08004c5c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c60  08004c60  00014c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200000cc  08004d30  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08004d30  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001721b  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b4e  00000000  00000000  0003730f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000f0e7  00000000  00000000  00039e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  00048f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001480  00000000  00000000  00049b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002741  00000000  00000000  0004aff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001872e  00000000  00000000  0004d739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f549  00000000  00000000  00065e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e53b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cac  00000000  00000000  000e5400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000cc 	.word	0x200000cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080048f8 	.word	0x080048f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d0 	.word	0x200000d0
 8000104:	080048f8 	.word	0x080048f8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_uldivmod>:
 800042c:	2b00      	cmp	r3, #0
 800042e:	d111      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000430:	2a00      	cmp	r2, #0
 8000432:	d10f      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000434:	2900      	cmp	r1, #0
 8000436:	d100      	bne.n	800043a <__aeabi_uldivmod+0xe>
 8000438:	2800      	cmp	r0, #0
 800043a:	d002      	beq.n	8000442 <__aeabi_uldivmod+0x16>
 800043c:	2100      	movs	r1, #0
 800043e:	43c9      	mvns	r1, r1
 8000440:	0008      	movs	r0, r1
 8000442:	b407      	push	{r0, r1, r2}
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <__aeabi_uldivmod+0x24>)
 8000446:	a102      	add	r1, pc, #8	; (adr r1, 8000450 <__aeabi_uldivmod+0x24>)
 8000448:	1840      	adds	r0, r0, r1
 800044a:	9002      	str	r0, [sp, #8]
 800044c:	bd03      	pop	{r0, r1, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	ffffffd9 	.word	0xffffffd9
 8000454:	b403      	push	{r0, r1}
 8000456:	4668      	mov	r0, sp
 8000458:	b501      	push	{r0, lr}
 800045a:	9802      	ldr	r0, [sp, #8]
 800045c:	f000 f84c 	bl	80004f8 <__udivmoddi4>
 8000460:	9b01      	ldr	r3, [sp, #4]
 8000462:	469e      	mov	lr, r3
 8000464:	b002      	add	sp, #8
 8000466:	bc0c      	pop	{r2, r3}
 8000468:	4770      	bx	lr
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_lmul>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	46ce      	mov	lr, r9
 8000470:	4647      	mov	r7, r8
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	4699      	mov	r9, r3
 8000478:	0c3b      	lsrs	r3, r7, #16
 800047a:	469c      	mov	ip, r3
 800047c:	0413      	lsls	r3, r2, #16
 800047e:	0c1b      	lsrs	r3, r3, #16
 8000480:	001d      	movs	r5, r3
 8000482:	000e      	movs	r6, r1
 8000484:	4661      	mov	r1, ip
 8000486:	0400      	lsls	r0, r0, #16
 8000488:	0c14      	lsrs	r4, r2, #16
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	4345      	muls	r5, r0
 800048e:	434b      	muls	r3, r1
 8000490:	4360      	muls	r0, r4
 8000492:	4361      	muls	r1, r4
 8000494:	18c0      	adds	r0, r0, r3
 8000496:	0c2c      	lsrs	r4, r5, #16
 8000498:	1820      	adds	r0, r4, r0
 800049a:	468c      	mov	ip, r1
 800049c:	4283      	cmp	r3, r0
 800049e:	d903      	bls.n	80004a8 <__aeabi_lmul+0x3c>
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	025b      	lsls	r3, r3, #9
 80004a4:	4698      	mov	r8, r3
 80004a6:	44c4      	add	ip, r8
 80004a8:	4649      	mov	r1, r9
 80004aa:	4379      	muls	r1, r7
 80004ac:	4372      	muls	r2, r6
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	4463      	add	r3, ip
 80004b2:	042d      	lsls	r5, r5, #16
 80004b4:	0c2d      	lsrs	r5, r5, #16
 80004b6:	18c9      	adds	r1, r1, r3
 80004b8:	0400      	lsls	r0, r0, #16
 80004ba:	1940      	adds	r0, r0, r5
 80004bc:	1889      	adds	r1, r1, r2
 80004be:	bcc0      	pop	{r6, r7}
 80004c0:	46b9      	mov	r9, r7
 80004c2:	46b0      	mov	r8, r6
 80004c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_f2uiz>:
 80004c8:	219e      	movs	r1, #158	; 0x9e
 80004ca:	b510      	push	{r4, lr}
 80004cc:	05c9      	lsls	r1, r1, #23
 80004ce:	1c04      	adds	r4, r0, #0
 80004d0:	f000 fd5c 	bl	8000f8c <__aeabi_fcmpge>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d103      	bne.n	80004e0 <__aeabi_f2uiz+0x18>
 80004d8:	1c20      	adds	r0, r4, #0
 80004da:	f000 fcc5 	bl	8000e68 <__aeabi_f2iz>
 80004de:	bd10      	pop	{r4, pc}
 80004e0:	219e      	movs	r1, #158	; 0x9e
 80004e2:	1c20      	adds	r0, r4, #0
 80004e4:	05c9      	lsls	r1, r1, #23
 80004e6:	f000 fb11 	bl	8000b0c <__aeabi_fsub>
 80004ea:	f000 fcbd 	bl	8000e68 <__aeabi_f2iz>
 80004ee:	2380      	movs	r3, #128	; 0x80
 80004f0:	061b      	lsls	r3, r3, #24
 80004f2:	469c      	mov	ip, r3
 80004f4:	4460      	add	r0, ip
 80004f6:	e7f2      	b.n	80004de <__aeabi_f2uiz+0x16>

080004f8 <__udivmoddi4>:
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	4657      	mov	r7, sl
 80004fc:	464e      	mov	r6, r9
 80004fe:	4645      	mov	r5, r8
 8000500:	46de      	mov	lr, fp
 8000502:	b5e0      	push	{r5, r6, r7, lr}
 8000504:	0004      	movs	r4, r0
 8000506:	000d      	movs	r5, r1
 8000508:	4692      	mov	sl, r2
 800050a:	4699      	mov	r9, r3
 800050c:	b083      	sub	sp, #12
 800050e:	428b      	cmp	r3, r1
 8000510:	d830      	bhi.n	8000574 <__udivmoddi4+0x7c>
 8000512:	d02d      	beq.n	8000570 <__udivmoddi4+0x78>
 8000514:	4649      	mov	r1, r9
 8000516:	4650      	mov	r0, sl
 8000518:	f000 fd60 	bl	8000fdc <__clzdi2>
 800051c:	0029      	movs	r1, r5
 800051e:	0006      	movs	r6, r0
 8000520:	0020      	movs	r0, r4
 8000522:	f000 fd5b 	bl	8000fdc <__clzdi2>
 8000526:	1a33      	subs	r3, r6, r0
 8000528:	4698      	mov	r8, r3
 800052a:	3b20      	subs	r3, #32
 800052c:	469b      	mov	fp, r3
 800052e:	d433      	bmi.n	8000598 <__udivmoddi4+0xa0>
 8000530:	465a      	mov	r2, fp
 8000532:	4653      	mov	r3, sl
 8000534:	4093      	lsls	r3, r2
 8000536:	4642      	mov	r2, r8
 8000538:	001f      	movs	r7, r3
 800053a:	4653      	mov	r3, sl
 800053c:	4093      	lsls	r3, r2
 800053e:	001e      	movs	r6, r3
 8000540:	42af      	cmp	r7, r5
 8000542:	d83a      	bhi.n	80005ba <__udivmoddi4+0xc2>
 8000544:	42af      	cmp	r7, r5
 8000546:	d100      	bne.n	800054a <__udivmoddi4+0x52>
 8000548:	e078      	b.n	800063c <__udivmoddi4+0x144>
 800054a:	465b      	mov	r3, fp
 800054c:	1ba4      	subs	r4, r4, r6
 800054e:	41bd      	sbcs	r5, r7
 8000550:	2b00      	cmp	r3, #0
 8000552:	da00      	bge.n	8000556 <__udivmoddi4+0x5e>
 8000554:	e075      	b.n	8000642 <__udivmoddi4+0x14a>
 8000556:	2200      	movs	r2, #0
 8000558:	2300      	movs	r3, #0
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	2301      	movs	r3, #1
 8000560:	465a      	mov	r2, fp
 8000562:	4093      	lsls	r3, r2
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	4642      	mov	r2, r8
 800056a:	4093      	lsls	r3, r2
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	e028      	b.n	80005c2 <__udivmoddi4+0xca>
 8000570:	4282      	cmp	r2, r0
 8000572:	d9cf      	bls.n	8000514 <__udivmoddi4+0x1c>
 8000574:	2200      	movs	r2, #0
 8000576:	2300      	movs	r3, #0
 8000578:	9200      	str	r2, [sp, #0]
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <__udivmoddi4+0x8e>
 8000582:	601c      	str	r4, [r3, #0]
 8000584:	605d      	str	r5, [r3, #4]
 8000586:	9800      	ldr	r0, [sp, #0]
 8000588:	9901      	ldr	r1, [sp, #4]
 800058a:	b003      	add	sp, #12
 800058c:	bcf0      	pop	{r4, r5, r6, r7}
 800058e:	46bb      	mov	fp, r7
 8000590:	46b2      	mov	sl, r6
 8000592:	46a9      	mov	r9, r5
 8000594:	46a0      	mov	r8, r4
 8000596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000598:	4642      	mov	r2, r8
 800059a:	2320      	movs	r3, #32
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	4652      	mov	r2, sl
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	4641      	mov	r1, r8
 80005a4:	0013      	movs	r3, r2
 80005a6:	464a      	mov	r2, r9
 80005a8:	408a      	lsls	r2, r1
 80005aa:	0017      	movs	r7, r2
 80005ac:	4642      	mov	r2, r8
 80005ae:	431f      	orrs	r7, r3
 80005b0:	4653      	mov	r3, sl
 80005b2:	4093      	lsls	r3, r2
 80005b4:	001e      	movs	r6, r3
 80005b6:	42af      	cmp	r7, r5
 80005b8:	d9c4      	bls.n	8000544 <__udivmoddi4+0x4c>
 80005ba:	2200      	movs	r2, #0
 80005bc:	2300      	movs	r3, #0
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	4643      	mov	r3, r8
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0d9      	beq.n	800057c <__udivmoddi4+0x84>
 80005c8:	07fb      	lsls	r3, r7, #31
 80005ca:	0872      	lsrs	r2, r6, #1
 80005cc:	431a      	orrs	r2, r3
 80005ce:	4646      	mov	r6, r8
 80005d0:	087b      	lsrs	r3, r7, #1
 80005d2:	e00e      	b.n	80005f2 <__udivmoddi4+0xfa>
 80005d4:	42ab      	cmp	r3, r5
 80005d6:	d101      	bne.n	80005dc <__udivmoddi4+0xe4>
 80005d8:	42a2      	cmp	r2, r4
 80005da:	d80c      	bhi.n	80005f6 <__udivmoddi4+0xfe>
 80005dc:	1aa4      	subs	r4, r4, r2
 80005de:	419d      	sbcs	r5, r3
 80005e0:	2001      	movs	r0, #1
 80005e2:	1924      	adds	r4, r4, r4
 80005e4:	416d      	adcs	r5, r5
 80005e6:	2100      	movs	r1, #0
 80005e8:	3e01      	subs	r6, #1
 80005ea:	1824      	adds	r4, r4, r0
 80005ec:	414d      	adcs	r5, r1
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d006      	beq.n	8000600 <__udivmoddi4+0x108>
 80005f2:	42ab      	cmp	r3, r5
 80005f4:	d9ee      	bls.n	80005d4 <__udivmoddi4+0xdc>
 80005f6:	3e01      	subs	r6, #1
 80005f8:	1924      	adds	r4, r4, r4
 80005fa:	416d      	adcs	r5, r5
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d1f8      	bne.n	80005f2 <__udivmoddi4+0xfa>
 8000600:	9800      	ldr	r0, [sp, #0]
 8000602:	9901      	ldr	r1, [sp, #4]
 8000604:	465b      	mov	r3, fp
 8000606:	1900      	adds	r0, r0, r4
 8000608:	4169      	adcs	r1, r5
 800060a:	2b00      	cmp	r3, #0
 800060c:	db24      	blt.n	8000658 <__udivmoddi4+0x160>
 800060e:	002b      	movs	r3, r5
 8000610:	465a      	mov	r2, fp
 8000612:	4644      	mov	r4, r8
 8000614:	40d3      	lsrs	r3, r2
 8000616:	002a      	movs	r2, r5
 8000618:	40e2      	lsrs	r2, r4
 800061a:	001c      	movs	r4, r3
 800061c:	465b      	mov	r3, fp
 800061e:	0015      	movs	r5, r2
 8000620:	2b00      	cmp	r3, #0
 8000622:	db2a      	blt.n	800067a <__udivmoddi4+0x182>
 8000624:	0026      	movs	r6, r4
 8000626:	409e      	lsls	r6, r3
 8000628:	0033      	movs	r3, r6
 800062a:	0026      	movs	r6, r4
 800062c:	4647      	mov	r7, r8
 800062e:	40be      	lsls	r6, r7
 8000630:	0032      	movs	r2, r6
 8000632:	1a80      	subs	r0, r0, r2
 8000634:	4199      	sbcs	r1, r3
 8000636:	9000      	str	r0, [sp, #0]
 8000638:	9101      	str	r1, [sp, #4]
 800063a:	e79f      	b.n	800057c <__udivmoddi4+0x84>
 800063c:	42a3      	cmp	r3, r4
 800063e:	d8bc      	bhi.n	80005ba <__udivmoddi4+0xc2>
 8000640:	e783      	b.n	800054a <__udivmoddi4+0x52>
 8000642:	4642      	mov	r2, r8
 8000644:	2320      	movs	r3, #32
 8000646:	2100      	movs	r1, #0
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	9100      	str	r1, [sp, #0]
 800064e:	9201      	str	r2, [sp, #4]
 8000650:	2201      	movs	r2, #1
 8000652:	40da      	lsrs	r2, r3
 8000654:	9201      	str	r2, [sp, #4]
 8000656:	e786      	b.n	8000566 <__udivmoddi4+0x6e>
 8000658:	4642      	mov	r2, r8
 800065a:	2320      	movs	r3, #32
 800065c:	1a9b      	subs	r3, r3, r2
 800065e:	002a      	movs	r2, r5
 8000660:	4646      	mov	r6, r8
 8000662:	409a      	lsls	r2, r3
 8000664:	0023      	movs	r3, r4
 8000666:	40f3      	lsrs	r3, r6
 8000668:	4644      	mov	r4, r8
 800066a:	4313      	orrs	r3, r2
 800066c:	002a      	movs	r2, r5
 800066e:	40e2      	lsrs	r2, r4
 8000670:	001c      	movs	r4, r3
 8000672:	465b      	mov	r3, fp
 8000674:	0015      	movs	r5, r2
 8000676:	2b00      	cmp	r3, #0
 8000678:	dad4      	bge.n	8000624 <__udivmoddi4+0x12c>
 800067a:	4642      	mov	r2, r8
 800067c:	002f      	movs	r7, r5
 800067e:	2320      	movs	r3, #32
 8000680:	0026      	movs	r6, r4
 8000682:	4097      	lsls	r7, r2
 8000684:	1a9b      	subs	r3, r3, r2
 8000686:	40de      	lsrs	r6, r3
 8000688:	003b      	movs	r3, r7
 800068a:	4333      	orrs	r3, r6
 800068c:	e7cd      	b.n	800062a <__udivmoddi4+0x132>
 800068e:	46c0      	nop			; (mov r8, r8)

08000690 <__aeabi_fdiv>:
 8000690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000692:	464f      	mov	r7, r9
 8000694:	4646      	mov	r6, r8
 8000696:	46d6      	mov	lr, sl
 8000698:	0245      	lsls	r5, r0, #9
 800069a:	b5c0      	push	{r6, r7, lr}
 800069c:	0047      	lsls	r7, r0, #1
 800069e:	1c0c      	adds	r4, r1, #0
 80006a0:	0a6d      	lsrs	r5, r5, #9
 80006a2:	0e3f      	lsrs	r7, r7, #24
 80006a4:	0fc6      	lsrs	r6, r0, #31
 80006a6:	2f00      	cmp	r7, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fdiv+0x1c>
 80006aa:	e070      	b.n	800078e <__aeabi_fdiv+0xfe>
 80006ac:	2fff      	cmp	r7, #255	; 0xff
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fdiv+0x22>
 80006b0:	e075      	b.n	800079e <__aeabi_fdiv+0x10e>
 80006b2:	00eb      	lsls	r3, r5, #3
 80006b4:	2580      	movs	r5, #128	; 0x80
 80006b6:	04ed      	lsls	r5, r5, #19
 80006b8:	431d      	orrs	r5, r3
 80006ba:	2300      	movs	r3, #0
 80006bc:	4699      	mov	r9, r3
 80006be:	469a      	mov	sl, r3
 80006c0:	3f7f      	subs	r7, #127	; 0x7f
 80006c2:	0260      	lsls	r0, r4, #9
 80006c4:	0a43      	lsrs	r3, r0, #9
 80006c6:	4698      	mov	r8, r3
 80006c8:	0063      	lsls	r3, r4, #1
 80006ca:	0e1b      	lsrs	r3, r3, #24
 80006cc:	0fe4      	lsrs	r4, r4, #31
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d04e      	beq.n	8000770 <__aeabi_fdiv+0xe0>
 80006d2:	2bff      	cmp	r3, #255	; 0xff
 80006d4:	d046      	beq.n	8000764 <__aeabi_fdiv+0xd4>
 80006d6:	4642      	mov	r2, r8
 80006d8:	00d0      	lsls	r0, r2, #3
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	04d2      	lsls	r2, r2, #19
 80006de:	4302      	orrs	r2, r0
 80006e0:	4690      	mov	r8, r2
 80006e2:	2200      	movs	r2, #0
 80006e4:	3b7f      	subs	r3, #127	; 0x7f
 80006e6:	0031      	movs	r1, r6
 80006e8:	1aff      	subs	r7, r7, r3
 80006ea:	464b      	mov	r3, r9
 80006ec:	4061      	eors	r1, r4
 80006ee:	b2c9      	uxtb	r1, r1
 80006f0:	4313      	orrs	r3, r2
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d900      	bls.n	80006f8 <__aeabi_fdiv+0x68>
 80006f6:	e0b5      	b.n	8000864 <__aeabi_fdiv+0x1d4>
 80006f8:	486e      	ldr	r0, [pc, #440]	; (80008b4 <__aeabi_fdiv+0x224>)
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	58c3      	ldr	r3, [r0, r3]
 80006fe:	469f      	mov	pc, r3
 8000700:	2300      	movs	r3, #0
 8000702:	4698      	mov	r8, r3
 8000704:	0026      	movs	r6, r4
 8000706:	4645      	mov	r5, r8
 8000708:	4692      	mov	sl, r2
 800070a:	4653      	mov	r3, sl
 800070c:	2b02      	cmp	r3, #2
 800070e:	d100      	bne.n	8000712 <__aeabi_fdiv+0x82>
 8000710:	e089      	b.n	8000826 <__aeabi_fdiv+0x196>
 8000712:	2b03      	cmp	r3, #3
 8000714:	d100      	bne.n	8000718 <__aeabi_fdiv+0x88>
 8000716:	e09e      	b.n	8000856 <__aeabi_fdiv+0x1c6>
 8000718:	2b01      	cmp	r3, #1
 800071a:	d018      	beq.n	800074e <__aeabi_fdiv+0xbe>
 800071c:	003b      	movs	r3, r7
 800071e:	337f      	adds	r3, #127	; 0x7f
 8000720:	2b00      	cmp	r3, #0
 8000722:	dd69      	ble.n	80007f8 <__aeabi_fdiv+0x168>
 8000724:	076a      	lsls	r2, r5, #29
 8000726:	d004      	beq.n	8000732 <__aeabi_fdiv+0xa2>
 8000728:	220f      	movs	r2, #15
 800072a:	402a      	ands	r2, r5
 800072c:	2a04      	cmp	r2, #4
 800072e:	d000      	beq.n	8000732 <__aeabi_fdiv+0xa2>
 8000730:	3504      	adds	r5, #4
 8000732:	012a      	lsls	r2, r5, #4
 8000734:	d503      	bpl.n	800073e <__aeabi_fdiv+0xae>
 8000736:	4b60      	ldr	r3, [pc, #384]	; (80008b8 <__aeabi_fdiv+0x228>)
 8000738:	401d      	ands	r5, r3
 800073a:	003b      	movs	r3, r7
 800073c:	3380      	adds	r3, #128	; 0x80
 800073e:	2bfe      	cmp	r3, #254	; 0xfe
 8000740:	dd00      	ble.n	8000744 <__aeabi_fdiv+0xb4>
 8000742:	e070      	b.n	8000826 <__aeabi_fdiv+0x196>
 8000744:	01ad      	lsls	r5, r5, #6
 8000746:	0a6d      	lsrs	r5, r5, #9
 8000748:	b2d8      	uxtb	r0, r3
 800074a:	e002      	b.n	8000752 <__aeabi_fdiv+0xc2>
 800074c:	000e      	movs	r6, r1
 800074e:	2000      	movs	r0, #0
 8000750:	2500      	movs	r5, #0
 8000752:	05c0      	lsls	r0, r0, #23
 8000754:	4328      	orrs	r0, r5
 8000756:	07f6      	lsls	r6, r6, #31
 8000758:	4330      	orrs	r0, r6
 800075a:	bce0      	pop	{r5, r6, r7}
 800075c:	46ba      	mov	sl, r7
 800075e:	46b1      	mov	r9, r6
 8000760:	46a8      	mov	r8, r5
 8000762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000764:	4643      	mov	r3, r8
 8000766:	2b00      	cmp	r3, #0
 8000768:	d13f      	bne.n	80007ea <__aeabi_fdiv+0x15a>
 800076a:	2202      	movs	r2, #2
 800076c:	3fff      	subs	r7, #255	; 0xff
 800076e:	e003      	b.n	8000778 <__aeabi_fdiv+0xe8>
 8000770:	4643      	mov	r3, r8
 8000772:	2b00      	cmp	r3, #0
 8000774:	d12d      	bne.n	80007d2 <__aeabi_fdiv+0x142>
 8000776:	2201      	movs	r2, #1
 8000778:	0031      	movs	r1, r6
 800077a:	464b      	mov	r3, r9
 800077c:	4061      	eors	r1, r4
 800077e:	b2c9      	uxtb	r1, r1
 8000780:	4313      	orrs	r3, r2
 8000782:	2b0f      	cmp	r3, #15
 8000784:	d834      	bhi.n	80007f0 <__aeabi_fdiv+0x160>
 8000786:	484d      	ldr	r0, [pc, #308]	; (80008bc <__aeabi_fdiv+0x22c>)
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	58c3      	ldr	r3, [r0, r3]
 800078c:	469f      	mov	pc, r3
 800078e:	2d00      	cmp	r5, #0
 8000790:	d113      	bne.n	80007ba <__aeabi_fdiv+0x12a>
 8000792:	2304      	movs	r3, #4
 8000794:	4699      	mov	r9, r3
 8000796:	3b03      	subs	r3, #3
 8000798:	2700      	movs	r7, #0
 800079a:	469a      	mov	sl, r3
 800079c:	e791      	b.n	80006c2 <__aeabi_fdiv+0x32>
 800079e:	2d00      	cmp	r5, #0
 80007a0:	d105      	bne.n	80007ae <__aeabi_fdiv+0x11e>
 80007a2:	2308      	movs	r3, #8
 80007a4:	4699      	mov	r9, r3
 80007a6:	3b06      	subs	r3, #6
 80007a8:	27ff      	movs	r7, #255	; 0xff
 80007aa:	469a      	mov	sl, r3
 80007ac:	e789      	b.n	80006c2 <__aeabi_fdiv+0x32>
 80007ae:	230c      	movs	r3, #12
 80007b0:	4699      	mov	r9, r3
 80007b2:	3b09      	subs	r3, #9
 80007b4:	27ff      	movs	r7, #255	; 0xff
 80007b6:	469a      	mov	sl, r3
 80007b8:	e783      	b.n	80006c2 <__aeabi_fdiv+0x32>
 80007ba:	0028      	movs	r0, r5
 80007bc:	f000 fbf0 	bl	8000fa0 <__clzsi2>
 80007c0:	2776      	movs	r7, #118	; 0x76
 80007c2:	1f43      	subs	r3, r0, #5
 80007c4:	409d      	lsls	r5, r3
 80007c6:	2300      	movs	r3, #0
 80007c8:	427f      	negs	r7, r7
 80007ca:	4699      	mov	r9, r3
 80007cc:	469a      	mov	sl, r3
 80007ce:	1a3f      	subs	r7, r7, r0
 80007d0:	e777      	b.n	80006c2 <__aeabi_fdiv+0x32>
 80007d2:	4640      	mov	r0, r8
 80007d4:	f000 fbe4 	bl	8000fa0 <__clzsi2>
 80007d8:	4642      	mov	r2, r8
 80007da:	1f43      	subs	r3, r0, #5
 80007dc:	409a      	lsls	r2, r3
 80007de:	2376      	movs	r3, #118	; 0x76
 80007e0:	425b      	negs	r3, r3
 80007e2:	4690      	mov	r8, r2
 80007e4:	1a1b      	subs	r3, r3, r0
 80007e6:	2200      	movs	r2, #0
 80007e8:	e77d      	b.n	80006e6 <__aeabi_fdiv+0x56>
 80007ea:	23ff      	movs	r3, #255	; 0xff
 80007ec:	2203      	movs	r2, #3
 80007ee:	e77a      	b.n	80006e6 <__aeabi_fdiv+0x56>
 80007f0:	000e      	movs	r6, r1
 80007f2:	20ff      	movs	r0, #255	; 0xff
 80007f4:	2500      	movs	r5, #0
 80007f6:	e7ac      	b.n	8000752 <__aeabi_fdiv+0xc2>
 80007f8:	2001      	movs	r0, #1
 80007fa:	1ac0      	subs	r0, r0, r3
 80007fc:	281b      	cmp	r0, #27
 80007fe:	dca6      	bgt.n	800074e <__aeabi_fdiv+0xbe>
 8000800:	379e      	adds	r7, #158	; 0x9e
 8000802:	002a      	movs	r2, r5
 8000804:	40bd      	lsls	r5, r7
 8000806:	40c2      	lsrs	r2, r0
 8000808:	1e6b      	subs	r3, r5, #1
 800080a:	419d      	sbcs	r5, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	076b      	lsls	r3, r5, #29
 8000810:	d004      	beq.n	800081c <__aeabi_fdiv+0x18c>
 8000812:	230f      	movs	r3, #15
 8000814:	402b      	ands	r3, r5
 8000816:	2b04      	cmp	r3, #4
 8000818:	d000      	beq.n	800081c <__aeabi_fdiv+0x18c>
 800081a:	3504      	adds	r5, #4
 800081c:	016b      	lsls	r3, r5, #5
 800081e:	d544      	bpl.n	80008aa <__aeabi_fdiv+0x21a>
 8000820:	2001      	movs	r0, #1
 8000822:	2500      	movs	r5, #0
 8000824:	e795      	b.n	8000752 <__aeabi_fdiv+0xc2>
 8000826:	20ff      	movs	r0, #255	; 0xff
 8000828:	2500      	movs	r5, #0
 800082a:	e792      	b.n	8000752 <__aeabi_fdiv+0xc2>
 800082c:	2580      	movs	r5, #128	; 0x80
 800082e:	2600      	movs	r6, #0
 8000830:	20ff      	movs	r0, #255	; 0xff
 8000832:	03ed      	lsls	r5, r5, #15
 8000834:	e78d      	b.n	8000752 <__aeabi_fdiv+0xc2>
 8000836:	2300      	movs	r3, #0
 8000838:	4698      	mov	r8, r3
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	03c0      	lsls	r0, r0, #15
 800083e:	4205      	tst	r5, r0
 8000840:	d009      	beq.n	8000856 <__aeabi_fdiv+0x1c6>
 8000842:	4643      	mov	r3, r8
 8000844:	4203      	tst	r3, r0
 8000846:	d106      	bne.n	8000856 <__aeabi_fdiv+0x1c6>
 8000848:	4645      	mov	r5, r8
 800084a:	4305      	orrs	r5, r0
 800084c:	026d      	lsls	r5, r5, #9
 800084e:	0026      	movs	r6, r4
 8000850:	20ff      	movs	r0, #255	; 0xff
 8000852:	0a6d      	lsrs	r5, r5, #9
 8000854:	e77d      	b.n	8000752 <__aeabi_fdiv+0xc2>
 8000856:	2080      	movs	r0, #128	; 0x80
 8000858:	03c0      	lsls	r0, r0, #15
 800085a:	4305      	orrs	r5, r0
 800085c:	026d      	lsls	r5, r5, #9
 800085e:	20ff      	movs	r0, #255	; 0xff
 8000860:	0a6d      	lsrs	r5, r5, #9
 8000862:	e776      	b.n	8000752 <__aeabi_fdiv+0xc2>
 8000864:	4642      	mov	r2, r8
 8000866:	016b      	lsls	r3, r5, #5
 8000868:	0150      	lsls	r0, r2, #5
 800086a:	4283      	cmp	r3, r0
 800086c:	d219      	bcs.n	80008a2 <__aeabi_fdiv+0x212>
 800086e:	221b      	movs	r2, #27
 8000870:	2500      	movs	r5, #0
 8000872:	3f01      	subs	r7, #1
 8000874:	2601      	movs	r6, #1
 8000876:	001c      	movs	r4, r3
 8000878:	006d      	lsls	r5, r5, #1
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	2c00      	cmp	r4, #0
 800087e:	db01      	blt.n	8000884 <__aeabi_fdiv+0x1f4>
 8000880:	4298      	cmp	r0, r3
 8000882:	d801      	bhi.n	8000888 <__aeabi_fdiv+0x1f8>
 8000884:	1a1b      	subs	r3, r3, r0
 8000886:	4335      	orrs	r5, r6
 8000888:	3a01      	subs	r2, #1
 800088a:	2a00      	cmp	r2, #0
 800088c:	d1f3      	bne.n	8000876 <__aeabi_fdiv+0x1e6>
 800088e:	1e5a      	subs	r2, r3, #1
 8000890:	4193      	sbcs	r3, r2
 8000892:	431d      	orrs	r5, r3
 8000894:	003b      	movs	r3, r7
 8000896:	337f      	adds	r3, #127	; 0x7f
 8000898:	000e      	movs	r6, r1
 800089a:	2b00      	cmp	r3, #0
 800089c:	dd00      	ble.n	80008a0 <__aeabi_fdiv+0x210>
 800089e:	e741      	b.n	8000724 <__aeabi_fdiv+0x94>
 80008a0:	e7aa      	b.n	80007f8 <__aeabi_fdiv+0x168>
 80008a2:	221a      	movs	r2, #26
 80008a4:	2501      	movs	r5, #1
 80008a6:	1a1b      	subs	r3, r3, r0
 80008a8:	e7e4      	b.n	8000874 <__aeabi_fdiv+0x1e4>
 80008aa:	01ad      	lsls	r5, r5, #6
 80008ac:	2000      	movs	r0, #0
 80008ae:	0a6d      	lsrs	r5, r5, #9
 80008b0:	e74f      	b.n	8000752 <__aeabi_fdiv+0xc2>
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	08004918 	.word	0x08004918
 80008b8:	f7ffffff 	.word	0xf7ffffff
 80008bc:	08004958 	.word	0x08004958

080008c0 <__aeabi_fmul>:
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	464f      	mov	r7, r9
 80008c4:	4646      	mov	r6, r8
 80008c6:	46d6      	mov	lr, sl
 80008c8:	0244      	lsls	r4, r0, #9
 80008ca:	0045      	lsls	r5, r0, #1
 80008cc:	b5c0      	push	{r6, r7, lr}
 80008ce:	0a64      	lsrs	r4, r4, #9
 80008d0:	1c0f      	adds	r7, r1, #0
 80008d2:	0e2d      	lsrs	r5, r5, #24
 80008d4:	0fc6      	lsrs	r6, r0, #31
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d100      	bne.n	80008dc <__aeabi_fmul+0x1c>
 80008da:	e08d      	b.n	80009f8 <__aeabi_fmul+0x138>
 80008dc:	2dff      	cmp	r5, #255	; 0xff
 80008de:	d100      	bne.n	80008e2 <__aeabi_fmul+0x22>
 80008e0:	e092      	b.n	8000a08 <__aeabi_fmul+0x148>
 80008e2:	2300      	movs	r3, #0
 80008e4:	2080      	movs	r0, #128	; 0x80
 80008e6:	4699      	mov	r9, r3
 80008e8:	469a      	mov	sl, r3
 80008ea:	00e4      	lsls	r4, r4, #3
 80008ec:	04c0      	lsls	r0, r0, #19
 80008ee:	4304      	orrs	r4, r0
 80008f0:	3d7f      	subs	r5, #127	; 0x7f
 80008f2:	0278      	lsls	r0, r7, #9
 80008f4:	0a43      	lsrs	r3, r0, #9
 80008f6:	4698      	mov	r8, r3
 80008f8:	007b      	lsls	r3, r7, #1
 80008fa:	0e1b      	lsrs	r3, r3, #24
 80008fc:	0fff      	lsrs	r7, r7, #31
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d100      	bne.n	8000904 <__aeabi_fmul+0x44>
 8000902:	e070      	b.n	80009e6 <__aeabi_fmul+0x126>
 8000904:	2bff      	cmp	r3, #255	; 0xff
 8000906:	d100      	bne.n	800090a <__aeabi_fmul+0x4a>
 8000908:	e086      	b.n	8000a18 <__aeabi_fmul+0x158>
 800090a:	4642      	mov	r2, r8
 800090c:	00d0      	lsls	r0, r2, #3
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	3b7f      	subs	r3, #127	; 0x7f
 8000912:	18ed      	adds	r5, r5, r3
 8000914:	2300      	movs	r3, #0
 8000916:	04d2      	lsls	r2, r2, #19
 8000918:	4302      	orrs	r2, r0
 800091a:	4690      	mov	r8, r2
 800091c:	469c      	mov	ip, r3
 800091e:	0031      	movs	r1, r6
 8000920:	464b      	mov	r3, r9
 8000922:	4079      	eors	r1, r7
 8000924:	1c68      	adds	r0, r5, #1
 8000926:	2b0f      	cmp	r3, #15
 8000928:	d81c      	bhi.n	8000964 <__aeabi_fmul+0xa4>
 800092a:	4a76      	ldr	r2, [pc, #472]	; (8000b04 <__aeabi_fmul+0x244>)
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	58d3      	ldr	r3, [r2, r3]
 8000930:	469f      	mov	pc, r3
 8000932:	0039      	movs	r1, r7
 8000934:	4644      	mov	r4, r8
 8000936:	46e2      	mov	sl, ip
 8000938:	4653      	mov	r3, sl
 800093a:	2b02      	cmp	r3, #2
 800093c:	d00f      	beq.n	800095e <__aeabi_fmul+0x9e>
 800093e:	2b03      	cmp	r3, #3
 8000940:	d100      	bne.n	8000944 <__aeabi_fmul+0x84>
 8000942:	e0d7      	b.n	8000af4 <__aeabi_fmul+0x234>
 8000944:	2b01      	cmp	r3, #1
 8000946:	d137      	bne.n	80009b8 <__aeabi_fmul+0xf8>
 8000948:	2000      	movs	r0, #0
 800094a:	2400      	movs	r4, #0
 800094c:	05c0      	lsls	r0, r0, #23
 800094e:	4320      	orrs	r0, r4
 8000950:	07c9      	lsls	r1, r1, #31
 8000952:	4308      	orrs	r0, r1
 8000954:	bce0      	pop	{r5, r6, r7}
 8000956:	46ba      	mov	sl, r7
 8000958:	46b1      	mov	r9, r6
 800095a:	46a8      	mov	r8, r5
 800095c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095e:	20ff      	movs	r0, #255	; 0xff
 8000960:	2400      	movs	r4, #0
 8000962:	e7f3      	b.n	800094c <__aeabi_fmul+0x8c>
 8000964:	0c26      	lsrs	r6, r4, #16
 8000966:	0424      	lsls	r4, r4, #16
 8000968:	0c22      	lsrs	r2, r4, #16
 800096a:	4644      	mov	r4, r8
 800096c:	0424      	lsls	r4, r4, #16
 800096e:	0c24      	lsrs	r4, r4, #16
 8000970:	4643      	mov	r3, r8
 8000972:	0027      	movs	r7, r4
 8000974:	0c1b      	lsrs	r3, r3, #16
 8000976:	4357      	muls	r7, r2
 8000978:	4374      	muls	r4, r6
 800097a:	435a      	muls	r2, r3
 800097c:	435e      	muls	r6, r3
 800097e:	1912      	adds	r2, r2, r4
 8000980:	0c3b      	lsrs	r3, r7, #16
 8000982:	189b      	adds	r3, r3, r2
 8000984:	429c      	cmp	r4, r3
 8000986:	d903      	bls.n	8000990 <__aeabi_fmul+0xd0>
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	0252      	lsls	r2, r2, #9
 800098c:	4694      	mov	ip, r2
 800098e:	4466      	add	r6, ip
 8000990:	043f      	lsls	r7, r7, #16
 8000992:	041a      	lsls	r2, r3, #16
 8000994:	0c3f      	lsrs	r7, r7, #16
 8000996:	19d2      	adds	r2, r2, r7
 8000998:	0194      	lsls	r4, r2, #6
 800099a:	1e67      	subs	r7, r4, #1
 800099c:	41bc      	sbcs	r4, r7
 800099e:	0c1b      	lsrs	r3, r3, #16
 80009a0:	0e92      	lsrs	r2, r2, #26
 80009a2:	199b      	adds	r3, r3, r6
 80009a4:	4314      	orrs	r4, r2
 80009a6:	019b      	lsls	r3, r3, #6
 80009a8:	431c      	orrs	r4, r3
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	d400      	bmi.n	80009b0 <__aeabi_fmul+0xf0>
 80009ae:	e09b      	b.n	8000ae8 <__aeabi_fmul+0x228>
 80009b0:	2301      	movs	r3, #1
 80009b2:	0862      	lsrs	r2, r4, #1
 80009b4:	401c      	ands	r4, r3
 80009b6:	4314      	orrs	r4, r2
 80009b8:	0002      	movs	r2, r0
 80009ba:	327f      	adds	r2, #127	; 0x7f
 80009bc:	2a00      	cmp	r2, #0
 80009be:	dd64      	ble.n	8000a8a <__aeabi_fmul+0x1ca>
 80009c0:	0763      	lsls	r3, r4, #29
 80009c2:	d004      	beq.n	80009ce <__aeabi_fmul+0x10e>
 80009c4:	230f      	movs	r3, #15
 80009c6:	4023      	ands	r3, r4
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x10e>
 80009cc:	3404      	adds	r4, #4
 80009ce:	0123      	lsls	r3, r4, #4
 80009d0:	d503      	bpl.n	80009da <__aeabi_fmul+0x11a>
 80009d2:	0002      	movs	r2, r0
 80009d4:	4b4c      	ldr	r3, [pc, #304]	; (8000b08 <__aeabi_fmul+0x248>)
 80009d6:	3280      	adds	r2, #128	; 0x80
 80009d8:	401c      	ands	r4, r3
 80009da:	2afe      	cmp	r2, #254	; 0xfe
 80009dc:	dcbf      	bgt.n	800095e <__aeabi_fmul+0x9e>
 80009de:	01a4      	lsls	r4, r4, #6
 80009e0:	0a64      	lsrs	r4, r4, #9
 80009e2:	b2d0      	uxtb	r0, r2
 80009e4:	e7b2      	b.n	800094c <__aeabi_fmul+0x8c>
 80009e6:	4643      	mov	r3, r8
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d13d      	bne.n	8000a68 <__aeabi_fmul+0x1a8>
 80009ec:	464a      	mov	r2, r9
 80009ee:	3301      	adds	r3, #1
 80009f0:	431a      	orrs	r2, r3
 80009f2:	4691      	mov	r9, r2
 80009f4:	469c      	mov	ip, r3
 80009f6:	e792      	b.n	800091e <__aeabi_fmul+0x5e>
 80009f8:	2c00      	cmp	r4, #0
 80009fa:	d129      	bne.n	8000a50 <__aeabi_fmul+0x190>
 80009fc:	2304      	movs	r3, #4
 80009fe:	4699      	mov	r9, r3
 8000a00:	3b03      	subs	r3, #3
 8000a02:	2500      	movs	r5, #0
 8000a04:	469a      	mov	sl, r3
 8000a06:	e774      	b.n	80008f2 <__aeabi_fmul+0x32>
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	d11b      	bne.n	8000a44 <__aeabi_fmul+0x184>
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	4699      	mov	r9, r3
 8000a10:	3b06      	subs	r3, #6
 8000a12:	25ff      	movs	r5, #255	; 0xff
 8000a14:	469a      	mov	sl, r3
 8000a16:	e76c      	b.n	80008f2 <__aeabi_fmul+0x32>
 8000a18:	4643      	mov	r3, r8
 8000a1a:	35ff      	adds	r5, #255	; 0xff
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10b      	bne.n	8000a38 <__aeabi_fmul+0x178>
 8000a20:	2302      	movs	r3, #2
 8000a22:	464a      	mov	r2, r9
 8000a24:	431a      	orrs	r2, r3
 8000a26:	4691      	mov	r9, r2
 8000a28:	469c      	mov	ip, r3
 8000a2a:	e778      	b.n	800091e <__aeabi_fmul+0x5e>
 8000a2c:	4653      	mov	r3, sl
 8000a2e:	0031      	movs	r1, r6
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d000      	beq.n	8000a36 <__aeabi_fmul+0x176>
 8000a34:	e783      	b.n	800093e <__aeabi_fmul+0x7e>
 8000a36:	e792      	b.n	800095e <__aeabi_fmul+0x9e>
 8000a38:	2303      	movs	r3, #3
 8000a3a:	464a      	mov	r2, r9
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	4691      	mov	r9, r2
 8000a40:	469c      	mov	ip, r3
 8000a42:	e76c      	b.n	800091e <__aeabi_fmul+0x5e>
 8000a44:	230c      	movs	r3, #12
 8000a46:	4699      	mov	r9, r3
 8000a48:	3b09      	subs	r3, #9
 8000a4a:	25ff      	movs	r5, #255	; 0xff
 8000a4c:	469a      	mov	sl, r3
 8000a4e:	e750      	b.n	80008f2 <__aeabi_fmul+0x32>
 8000a50:	0020      	movs	r0, r4
 8000a52:	f000 faa5 	bl	8000fa0 <__clzsi2>
 8000a56:	2576      	movs	r5, #118	; 0x76
 8000a58:	1f43      	subs	r3, r0, #5
 8000a5a:	409c      	lsls	r4, r3
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	426d      	negs	r5, r5
 8000a60:	4699      	mov	r9, r3
 8000a62:	469a      	mov	sl, r3
 8000a64:	1a2d      	subs	r5, r5, r0
 8000a66:	e744      	b.n	80008f2 <__aeabi_fmul+0x32>
 8000a68:	4640      	mov	r0, r8
 8000a6a:	f000 fa99 	bl	8000fa0 <__clzsi2>
 8000a6e:	4642      	mov	r2, r8
 8000a70:	1f43      	subs	r3, r0, #5
 8000a72:	409a      	lsls	r2, r3
 8000a74:	2300      	movs	r3, #0
 8000a76:	1a2d      	subs	r5, r5, r0
 8000a78:	4690      	mov	r8, r2
 8000a7a:	469c      	mov	ip, r3
 8000a7c:	3d76      	subs	r5, #118	; 0x76
 8000a7e:	e74e      	b.n	800091e <__aeabi_fmul+0x5e>
 8000a80:	2480      	movs	r4, #128	; 0x80
 8000a82:	2100      	movs	r1, #0
 8000a84:	20ff      	movs	r0, #255	; 0xff
 8000a86:	03e4      	lsls	r4, r4, #15
 8000a88:	e760      	b.n	800094c <__aeabi_fmul+0x8c>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	1a9b      	subs	r3, r3, r2
 8000a8e:	2b1b      	cmp	r3, #27
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_fmul+0x1d4>
 8000a92:	e759      	b.n	8000948 <__aeabi_fmul+0x88>
 8000a94:	0022      	movs	r2, r4
 8000a96:	309e      	adds	r0, #158	; 0x9e
 8000a98:	40da      	lsrs	r2, r3
 8000a9a:	4084      	lsls	r4, r0
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	1e62      	subs	r2, r4, #1
 8000aa0:	4194      	sbcs	r4, r2
 8000aa2:	431c      	orrs	r4, r3
 8000aa4:	0763      	lsls	r3, r4, #29
 8000aa6:	d004      	beq.n	8000ab2 <__aeabi_fmul+0x1f2>
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	4023      	ands	r3, r4
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_fmul+0x1f2>
 8000ab0:	3404      	adds	r4, #4
 8000ab2:	0163      	lsls	r3, r4, #5
 8000ab4:	d51a      	bpl.n	8000aec <__aeabi_fmul+0x22c>
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	2400      	movs	r4, #0
 8000aba:	e747      	b.n	800094c <__aeabi_fmul+0x8c>
 8000abc:	2080      	movs	r0, #128	; 0x80
 8000abe:	03c0      	lsls	r0, r0, #15
 8000ac0:	4204      	tst	r4, r0
 8000ac2:	d009      	beq.n	8000ad8 <__aeabi_fmul+0x218>
 8000ac4:	4643      	mov	r3, r8
 8000ac6:	4203      	tst	r3, r0
 8000ac8:	d106      	bne.n	8000ad8 <__aeabi_fmul+0x218>
 8000aca:	4644      	mov	r4, r8
 8000acc:	4304      	orrs	r4, r0
 8000ace:	0264      	lsls	r4, r4, #9
 8000ad0:	0039      	movs	r1, r7
 8000ad2:	20ff      	movs	r0, #255	; 0xff
 8000ad4:	0a64      	lsrs	r4, r4, #9
 8000ad6:	e739      	b.n	800094c <__aeabi_fmul+0x8c>
 8000ad8:	2080      	movs	r0, #128	; 0x80
 8000ada:	03c0      	lsls	r0, r0, #15
 8000adc:	4304      	orrs	r4, r0
 8000ade:	0264      	lsls	r4, r4, #9
 8000ae0:	0031      	movs	r1, r6
 8000ae2:	20ff      	movs	r0, #255	; 0xff
 8000ae4:	0a64      	lsrs	r4, r4, #9
 8000ae6:	e731      	b.n	800094c <__aeabi_fmul+0x8c>
 8000ae8:	0028      	movs	r0, r5
 8000aea:	e765      	b.n	80009b8 <__aeabi_fmul+0xf8>
 8000aec:	01a4      	lsls	r4, r4, #6
 8000aee:	2000      	movs	r0, #0
 8000af0:	0a64      	lsrs	r4, r4, #9
 8000af2:	e72b      	b.n	800094c <__aeabi_fmul+0x8c>
 8000af4:	2080      	movs	r0, #128	; 0x80
 8000af6:	03c0      	lsls	r0, r0, #15
 8000af8:	4304      	orrs	r4, r0
 8000afa:	0264      	lsls	r4, r4, #9
 8000afc:	20ff      	movs	r0, #255	; 0xff
 8000afe:	0a64      	lsrs	r4, r4, #9
 8000b00:	e724      	b.n	800094c <__aeabi_fmul+0x8c>
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	08004998 	.word	0x08004998
 8000b08:	f7ffffff 	.word	0xf7ffffff

08000b0c <__aeabi_fsub>:
 8000b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0e:	46ce      	mov	lr, r9
 8000b10:	4647      	mov	r7, r8
 8000b12:	0243      	lsls	r3, r0, #9
 8000b14:	0a5b      	lsrs	r3, r3, #9
 8000b16:	024e      	lsls	r6, r1, #9
 8000b18:	00da      	lsls	r2, r3, #3
 8000b1a:	4694      	mov	ip, r2
 8000b1c:	0a72      	lsrs	r2, r6, #9
 8000b1e:	4691      	mov	r9, r2
 8000b20:	0045      	lsls	r5, r0, #1
 8000b22:	004a      	lsls	r2, r1, #1
 8000b24:	b580      	push	{r7, lr}
 8000b26:	0e2d      	lsrs	r5, r5, #24
 8000b28:	001f      	movs	r7, r3
 8000b2a:	0fc4      	lsrs	r4, r0, #31
 8000b2c:	0e12      	lsrs	r2, r2, #24
 8000b2e:	0fc9      	lsrs	r1, r1, #31
 8000b30:	09b6      	lsrs	r6, r6, #6
 8000b32:	2aff      	cmp	r2, #255	; 0xff
 8000b34:	d05b      	beq.n	8000bee <__aeabi_fsub+0xe2>
 8000b36:	2001      	movs	r0, #1
 8000b38:	4041      	eors	r1, r0
 8000b3a:	428c      	cmp	r4, r1
 8000b3c:	d039      	beq.n	8000bb2 <__aeabi_fsub+0xa6>
 8000b3e:	1aa8      	subs	r0, r5, r2
 8000b40:	2800      	cmp	r0, #0
 8000b42:	dd5a      	ble.n	8000bfa <__aeabi_fsub+0xee>
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d06a      	beq.n	8000c1e <__aeabi_fsub+0x112>
 8000b48:	2dff      	cmp	r5, #255	; 0xff
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_fsub+0x42>
 8000b4c:	e0d9      	b.n	8000d02 <__aeabi_fsub+0x1f6>
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	04d2      	lsls	r2, r2, #19
 8000b52:	4316      	orrs	r6, r2
 8000b54:	281b      	cmp	r0, #27
 8000b56:	dc00      	bgt.n	8000b5a <__aeabi_fsub+0x4e>
 8000b58:	e0e9      	b.n	8000d2e <__aeabi_fsub+0x222>
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4663      	mov	r3, ip
 8000b5e:	1a18      	subs	r0, r3, r0
 8000b60:	0143      	lsls	r3, r0, #5
 8000b62:	d400      	bmi.n	8000b66 <__aeabi_fsub+0x5a>
 8000b64:	e0b4      	b.n	8000cd0 <__aeabi_fsub+0x1c4>
 8000b66:	0180      	lsls	r0, r0, #6
 8000b68:	0987      	lsrs	r7, r0, #6
 8000b6a:	0038      	movs	r0, r7
 8000b6c:	f000 fa18 	bl	8000fa0 <__clzsi2>
 8000b70:	3805      	subs	r0, #5
 8000b72:	4087      	lsls	r7, r0
 8000b74:	4285      	cmp	r5, r0
 8000b76:	dc00      	bgt.n	8000b7a <__aeabi_fsub+0x6e>
 8000b78:	e0cc      	b.n	8000d14 <__aeabi_fsub+0x208>
 8000b7a:	1a2d      	subs	r5, r5, r0
 8000b7c:	48b5      	ldr	r0, [pc, #724]	; (8000e54 <__aeabi_fsub+0x348>)
 8000b7e:	4038      	ands	r0, r7
 8000b80:	0743      	lsls	r3, r0, #29
 8000b82:	d004      	beq.n	8000b8e <__aeabi_fsub+0x82>
 8000b84:	230f      	movs	r3, #15
 8000b86:	4003      	ands	r3, r0
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_fsub+0x82>
 8000b8c:	3004      	adds	r0, #4
 8000b8e:	0143      	lsls	r3, r0, #5
 8000b90:	d400      	bmi.n	8000b94 <__aeabi_fsub+0x88>
 8000b92:	e0a0      	b.n	8000cd6 <__aeabi_fsub+0x1ca>
 8000b94:	1c6a      	adds	r2, r5, #1
 8000b96:	2dfe      	cmp	r5, #254	; 0xfe
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x90>
 8000b9a:	e08d      	b.n	8000cb8 <__aeabi_fsub+0x1ac>
 8000b9c:	0180      	lsls	r0, r0, #6
 8000b9e:	0a47      	lsrs	r7, r0, #9
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	05d0      	lsls	r0, r2, #23
 8000ba4:	4338      	orrs	r0, r7
 8000ba6:	07e4      	lsls	r4, r4, #31
 8000ba8:	4320      	orrs	r0, r4
 8000baa:	bcc0      	pop	{r6, r7}
 8000bac:	46b9      	mov	r9, r7
 8000bae:	46b0      	mov	r8, r6
 8000bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bb2:	1aa8      	subs	r0, r5, r2
 8000bb4:	4680      	mov	r8, r0
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	dd45      	ble.n	8000c46 <__aeabi_fsub+0x13a>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	d070      	beq.n	8000ca0 <__aeabi_fsub+0x194>
 8000bbe:	2dff      	cmp	r5, #255	; 0xff
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0xb8>
 8000bc2:	e09e      	b.n	8000d02 <__aeabi_fsub+0x1f6>
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	04db      	lsls	r3, r3, #19
 8000bc8:	431e      	orrs	r6, r3
 8000bca:	4643      	mov	r3, r8
 8000bcc:	2b1b      	cmp	r3, #27
 8000bce:	dc00      	bgt.n	8000bd2 <__aeabi_fsub+0xc6>
 8000bd0:	e0d2      	b.n	8000d78 <__aeabi_fsub+0x26c>
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4460      	add	r0, ip
 8000bd6:	0143      	lsls	r3, r0, #5
 8000bd8:	d57a      	bpl.n	8000cd0 <__aeabi_fsub+0x1c4>
 8000bda:	3501      	adds	r5, #1
 8000bdc:	2dff      	cmp	r5, #255	; 0xff
 8000bde:	d06b      	beq.n	8000cb8 <__aeabi_fsub+0x1ac>
 8000be0:	2301      	movs	r3, #1
 8000be2:	4a9d      	ldr	r2, [pc, #628]	; (8000e58 <__aeabi_fsub+0x34c>)
 8000be4:	4003      	ands	r3, r0
 8000be6:	0840      	lsrs	r0, r0, #1
 8000be8:	4010      	ands	r0, r2
 8000bea:	4318      	orrs	r0, r3
 8000bec:	e7c8      	b.n	8000b80 <__aeabi_fsub+0x74>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d020      	beq.n	8000c34 <__aeabi_fsub+0x128>
 8000bf2:	428c      	cmp	r4, r1
 8000bf4:	d023      	beq.n	8000c3e <__aeabi_fsub+0x132>
 8000bf6:	0028      	movs	r0, r5
 8000bf8:	38ff      	subs	r0, #255	; 0xff
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	d039      	beq.n	8000c72 <__aeabi_fsub+0x166>
 8000bfe:	1b57      	subs	r7, r2, r5
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d000      	beq.n	8000c06 <__aeabi_fsub+0xfa>
 8000c04:	e09d      	b.n	8000d42 <__aeabi_fsub+0x236>
 8000c06:	4663      	mov	r3, ip
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_fsub+0x102>
 8000c0c:	e0db      	b.n	8000dc6 <__aeabi_fsub+0x2ba>
 8000c0e:	1e7b      	subs	r3, r7, #1
 8000c10:	2f01      	cmp	r7, #1
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x10a>
 8000c14:	e10d      	b.n	8000e32 <__aeabi_fsub+0x326>
 8000c16:	2fff      	cmp	r7, #255	; 0xff
 8000c18:	d071      	beq.n	8000cfe <__aeabi_fsub+0x1f2>
 8000c1a:	001f      	movs	r7, r3
 8000c1c:	e098      	b.n	8000d50 <__aeabi_fsub+0x244>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fsub+0x118>
 8000c22:	e0a7      	b.n	8000d74 <__aeabi_fsub+0x268>
 8000c24:	1e42      	subs	r2, r0, #1
 8000c26:	2801      	cmp	r0, #1
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fsub+0x120>
 8000c2a:	e0e6      	b.n	8000dfa <__aeabi_fsub+0x2ee>
 8000c2c:	28ff      	cmp	r0, #255	; 0xff
 8000c2e:	d068      	beq.n	8000d02 <__aeabi_fsub+0x1f6>
 8000c30:	0010      	movs	r0, r2
 8000c32:	e78f      	b.n	8000b54 <__aeabi_fsub+0x48>
 8000c34:	2001      	movs	r0, #1
 8000c36:	4041      	eors	r1, r0
 8000c38:	42a1      	cmp	r1, r4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x132>
 8000c3c:	e77f      	b.n	8000b3e <__aeabi_fsub+0x32>
 8000c3e:	20ff      	movs	r0, #255	; 0xff
 8000c40:	4240      	negs	r0, r0
 8000c42:	4680      	mov	r8, r0
 8000c44:	44a8      	add	r8, r5
 8000c46:	4640      	mov	r0, r8
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	d038      	beq.n	8000cbe <__aeabi_fsub+0x1b2>
 8000c4c:	1b51      	subs	r1, r2, r5
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d100      	bne.n	8000c54 <__aeabi_fsub+0x148>
 8000c52:	e0ae      	b.n	8000db2 <__aeabi_fsub+0x2a6>
 8000c54:	2aff      	cmp	r2, #255	; 0xff
 8000c56:	d100      	bne.n	8000c5a <__aeabi_fsub+0x14e>
 8000c58:	e0df      	b.n	8000e1a <__aeabi_fsub+0x30e>
 8000c5a:	2380      	movs	r3, #128	; 0x80
 8000c5c:	4660      	mov	r0, ip
 8000c5e:	04db      	lsls	r3, r3, #19
 8000c60:	4318      	orrs	r0, r3
 8000c62:	4684      	mov	ip, r0
 8000c64:	291b      	cmp	r1, #27
 8000c66:	dc00      	bgt.n	8000c6a <__aeabi_fsub+0x15e>
 8000c68:	e0d9      	b.n	8000e1e <__aeabi_fsub+0x312>
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	0015      	movs	r5, r2
 8000c6e:	1980      	adds	r0, r0, r6
 8000c70:	e7b1      	b.n	8000bd6 <__aeabi_fsub+0xca>
 8000c72:	20fe      	movs	r0, #254	; 0xfe
 8000c74:	1c6a      	adds	r2, r5, #1
 8000c76:	4210      	tst	r0, r2
 8000c78:	d171      	bne.n	8000d5e <__aeabi_fsub+0x252>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d000      	beq.n	8000c80 <__aeabi_fsub+0x174>
 8000c7e:	e0a6      	b.n	8000dce <__aeabi_fsub+0x2c2>
 8000c80:	4663      	mov	r3, ip
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d100      	bne.n	8000c88 <__aeabi_fsub+0x17c>
 8000c86:	e0d9      	b.n	8000e3c <__aeabi_fsub+0x330>
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_fsub+0x184>
 8000c8e:	e788      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000c90:	1b98      	subs	r0, r3, r6
 8000c92:	0143      	lsls	r3, r0, #5
 8000c94:	d400      	bmi.n	8000c98 <__aeabi_fsub+0x18c>
 8000c96:	e0e1      	b.n	8000e5c <__aeabi_fsub+0x350>
 8000c98:	4663      	mov	r3, ip
 8000c9a:	000c      	movs	r4, r1
 8000c9c:	1af0      	subs	r0, r6, r3
 8000c9e:	e76f      	b.n	8000b80 <__aeabi_fsub+0x74>
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_fsub+0x19a>
 8000ca4:	e0b7      	b.n	8000e16 <__aeabi_fsub+0x30a>
 8000ca6:	0002      	movs	r2, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	2801      	cmp	r0, #1
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fsub+0x1a4>
 8000cae:	e09c      	b.n	8000dea <__aeabi_fsub+0x2de>
 8000cb0:	28ff      	cmp	r0, #255	; 0xff
 8000cb2:	d026      	beq.n	8000d02 <__aeabi_fsub+0x1f6>
 8000cb4:	4690      	mov	r8, r2
 8000cb6:	e788      	b.n	8000bca <__aeabi_fsub+0xbe>
 8000cb8:	22ff      	movs	r2, #255	; 0xff
 8000cba:	2700      	movs	r7, #0
 8000cbc:	e771      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000cbe:	20fe      	movs	r0, #254	; 0xfe
 8000cc0:	1c6a      	adds	r2, r5, #1
 8000cc2:	4210      	tst	r0, r2
 8000cc4:	d064      	beq.n	8000d90 <__aeabi_fsub+0x284>
 8000cc6:	2aff      	cmp	r2, #255	; 0xff
 8000cc8:	d0f6      	beq.n	8000cb8 <__aeabi_fsub+0x1ac>
 8000cca:	0015      	movs	r5, r2
 8000ccc:	4466      	add	r6, ip
 8000cce:	0870      	lsrs	r0, r6, #1
 8000cd0:	0743      	lsls	r3, r0, #29
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_fsub+0x1ca>
 8000cd4:	e756      	b.n	8000b84 <__aeabi_fsub+0x78>
 8000cd6:	08c3      	lsrs	r3, r0, #3
 8000cd8:	2dff      	cmp	r5, #255	; 0xff
 8000cda:	d012      	beq.n	8000d02 <__aeabi_fsub+0x1f6>
 8000cdc:	025b      	lsls	r3, r3, #9
 8000cde:	0a5f      	lsrs	r7, r3, #9
 8000ce0:	b2ea      	uxtb	r2, r5
 8000ce2:	e75e      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000ce4:	4662      	mov	r2, ip
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fsub+0x1e0>
 8000cea:	e096      	b.n	8000e1a <__aeabi_fsub+0x30e>
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d008      	beq.n	8000d02 <__aeabi_fsub+0x1f6>
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	03d2      	lsls	r2, r2, #15
 8000cf4:	4213      	tst	r3, r2
 8000cf6:	d004      	beq.n	8000d02 <__aeabi_fsub+0x1f6>
 8000cf8:	4648      	mov	r0, r9
 8000cfa:	4210      	tst	r0, r2
 8000cfc:	d101      	bne.n	8000d02 <__aeabi_fsub+0x1f6>
 8000cfe:	000c      	movs	r4, r1
 8000d00:	464b      	mov	r3, r9
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0d8      	beq.n	8000cb8 <__aeabi_fsub+0x1ac>
 8000d06:	2780      	movs	r7, #128	; 0x80
 8000d08:	03ff      	lsls	r7, r7, #15
 8000d0a:	431f      	orrs	r7, r3
 8000d0c:	027f      	lsls	r7, r7, #9
 8000d0e:	22ff      	movs	r2, #255	; 0xff
 8000d10:	0a7f      	lsrs	r7, r7, #9
 8000d12:	e746      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000d14:	2320      	movs	r3, #32
 8000d16:	003a      	movs	r2, r7
 8000d18:	1b45      	subs	r5, r0, r5
 8000d1a:	0038      	movs	r0, r7
 8000d1c:	3501      	adds	r5, #1
 8000d1e:	40ea      	lsrs	r2, r5
 8000d20:	1b5d      	subs	r5, r3, r5
 8000d22:	40a8      	lsls	r0, r5
 8000d24:	1e43      	subs	r3, r0, #1
 8000d26:	4198      	sbcs	r0, r3
 8000d28:	2500      	movs	r5, #0
 8000d2a:	4310      	orrs	r0, r2
 8000d2c:	e728      	b.n	8000b80 <__aeabi_fsub+0x74>
 8000d2e:	2320      	movs	r3, #32
 8000d30:	1a1b      	subs	r3, r3, r0
 8000d32:	0032      	movs	r2, r6
 8000d34:	409e      	lsls	r6, r3
 8000d36:	40c2      	lsrs	r2, r0
 8000d38:	0030      	movs	r0, r6
 8000d3a:	1e43      	subs	r3, r0, #1
 8000d3c:	4198      	sbcs	r0, r3
 8000d3e:	4310      	orrs	r0, r2
 8000d40:	e70c      	b.n	8000b5c <__aeabi_fsub+0x50>
 8000d42:	2aff      	cmp	r2, #255	; 0xff
 8000d44:	d0db      	beq.n	8000cfe <__aeabi_fsub+0x1f2>
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	4660      	mov	r0, ip
 8000d4a:	04db      	lsls	r3, r3, #19
 8000d4c:	4318      	orrs	r0, r3
 8000d4e:	4684      	mov	ip, r0
 8000d50:	2f1b      	cmp	r7, #27
 8000d52:	dd56      	ble.n	8000e02 <__aeabi_fsub+0x2f6>
 8000d54:	2001      	movs	r0, #1
 8000d56:	000c      	movs	r4, r1
 8000d58:	0015      	movs	r5, r2
 8000d5a:	1a30      	subs	r0, r6, r0
 8000d5c:	e700      	b.n	8000b60 <__aeabi_fsub+0x54>
 8000d5e:	4663      	mov	r3, ip
 8000d60:	1b9f      	subs	r7, r3, r6
 8000d62:	017b      	lsls	r3, r7, #5
 8000d64:	d43d      	bmi.n	8000de2 <__aeabi_fsub+0x2d6>
 8000d66:	2f00      	cmp	r7, #0
 8000d68:	d000      	beq.n	8000d6c <__aeabi_fsub+0x260>
 8000d6a:	e6fe      	b.n	8000b6a <__aeabi_fsub+0x5e>
 8000d6c:	2400      	movs	r4, #0
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2700      	movs	r7, #0
 8000d72:	e716      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000d74:	0005      	movs	r5, r0
 8000d76:	e7af      	b.n	8000cd8 <__aeabi_fsub+0x1cc>
 8000d78:	0032      	movs	r2, r6
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	40da      	lsrs	r2, r3
 8000d80:	2320      	movs	r3, #32
 8000d82:	1a5b      	subs	r3, r3, r1
 8000d84:	409e      	lsls	r6, r3
 8000d86:	0030      	movs	r0, r6
 8000d88:	1e43      	subs	r3, r0, #1
 8000d8a:	4198      	sbcs	r0, r3
 8000d8c:	4310      	orrs	r0, r2
 8000d8e:	e721      	b.n	8000bd4 <__aeabi_fsub+0xc8>
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d1a7      	bne.n	8000ce4 <__aeabi_fsub+0x1d8>
 8000d94:	4663      	mov	r3, ip
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d059      	beq.n	8000e4e <__aeabi_fsub+0x342>
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_fsub+0x296>
 8000da0:	e6ff      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000da2:	0030      	movs	r0, r6
 8000da4:	4460      	add	r0, ip
 8000da6:	0143      	lsls	r3, r0, #5
 8000da8:	d592      	bpl.n	8000cd0 <__aeabi_fsub+0x1c4>
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <__aeabi_fsub+0x348>)
 8000dac:	3501      	adds	r5, #1
 8000dae:	4018      	ands	r0, r3
 8000db0:	e78e      	b.n	8000cd0 <__aeabi_fsub+0x1c4>
 8000db2:	4663      	mov	r3, ip
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d047      	beq.n	8000e48 <__aeabi_fsub+0x33c>
 8000db8:	1e4b      	subs	r3, r1, #1
 8000dba:	2901      	cmp	r1, #1
 8000dbc:	d015      	beq.n	8000dea <__aeabi_fsub+0x2de>
 8000dbe:	29ff      	cmp	r1, #255	; 0xff
 8000dc0:	d02b      	beq.n	8000e1a <__aeabi_fsub+0x30e>
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	e74e      	b.n	8000c64 <__aeabi_fsub+0x158>
 8000dc6:	000c      	movs	r4, r1
 8000dc8:	464b      	mov	r3, r9
 8000dca:	003d      	movs	r5, r7
 8000dcc:	e784      	b.n	8000cd8 <__aeabi_fsub+0x1cc>
 8000dce:	4662      	mov	r2, ip
 8000dd0:	2a00      	cmp	r2, #0
 8000dd2:	d18b      	bne.n	8000cec <__aeabi_fsub+0x1e0>
 8000dd4:	2e00      	cmp	r6, #0
 8000dd6:	d192      	bne.n	8000cfe <__aeabi_fsub+0x1f2>
 8000dd8:	2780      	movs	r7, #128	; 0x80
 8000dda:	2400      	movs	r4, #0
 8000ddc:	22ff      	movs	r2, #255	; 0xff
 8000dde:	03ff      	lsls	r7, r7, #15
 8000de0:	e6df      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000de2:	4663      	mov	r3, ip
 8000de4:	000c      	movs	r4, r1
 8000de6:	1af7      	subs	r7, r6, r3
 8000de8:	e6bf      	b.n	8000b6a <__aeabi_fsub+0x5e>
 8000dea:	0030      	movs	r0, r6
 8000dec:	4460      	add	r0, ip
 8000dee:	2501      	movs	r5, #1
 8000df0:	0143      	lsls	r3, r0, #5
 8000df2:	d400      	bmi.n	8000df6 <__aeabi_fsub+0x2ea>
 8000df4:	e76c      	b.n	8000cd0 <__aeabi_fsub+0x1c4>
 8000df6:	2502      	movs	r5, #2
 8000df8:	e6f2      	b.n	8000be0 <__aeabi_fsub+0xd4>
 8000dfa:	4663      	mov	r3, ip
 8000dfc:	2501      	movs	r5, #1
 8000dfe:	1b98      	subs	r0, r3, r6
 8000e00:	e6ae      	b.n	8000b60 <__aeabi_fsub+0x54>
 8000e02:	2320      	movs	r3, #32
 8000e04:	4664      	mov	r4, ip
 8000e06:	4660      	mov	r0, ip
 8000e08:	40fc      	lsrs	r4, r7
 8000e0a:	1bdf      	subs	r7, r3, r7
 8000e0c:	40b8      	lsls	r0, r7
 8000e0e:	1e43      	subs	r3, r0, #1
 8000e10:	4198      	sbcs	r0, r3
 8000e12:	4320      	orrs	r0, r4
 8000e14:	e79f      	b.n	8000d56 <__aeabi_fsub+0x24a>
 8000e16:	0005      	movs	r5, r0
 8000e18:	e75e      	b.n	8000cd8 <__aeabi_fsub+0x1cc>
 8000e1a:	464b      	mov	r3, r9
 8000e1c:	e771      	b.n	8000d02 <__aeabi_fsub+0x1f6>
 8000e1e:	2320      	movs	r3, #32
 8000e20:	4665      	mov	r5, ip
 8000e22:	4660      	mov	r0, ip
 8000e24:	40cd      	lsrs	r5, r1
 8000e26:	1a59      	subs	r1, r3, r1
 8000e28:	4088      	lsls	r0, r1
 8000e2a:	1e43      	subs	r3, r0, #1
 8000e2c:	4198      	sbcs	r0, r3
 8000e2e:	4328      	orrs	r0, r5
 8000e30:	e71c      	b.n	8000c6c <__aeabi_fsub+0x160>
 8000e32:	4663      	mov	r3, ip
 8000e34:	000c      	movs	r4, r1
 8000e36:	2501      	movs	r5, #1
 8000e38:	1af0      	subs	r0, r6, r3
 8000e3a:	e691      	b.n	8000b60 <__aeabi_fsub+0x54>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d095      	beq.n	8000d6c <__aeabi_fsub+0x260>
 8000e40:	000c      	movs	r4, r1
 8000e42:	464f      	mov	r7, r9
 8000e44:	2200      	movs	r2, #0
 8000e46:	e6ac      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000e48:	464b      	mov	r3, r9
 8000e4a:	000d      	movs	r5, r1
 8000e4c:	e744      	b.n	8000cd8 <__aeabi_fsub+0x1cc>
 8000e4e:	464f      	mov	r7, r9
 8000e50:	2200      	movs	r2, #0
 8000e52:	e6a6      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000e54:	fbffffff 	.word	0xfbffffff
 8000e58:	7dffffff 	.word	0x7dffffff
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	d000      	beq.n	8000e62 <__aeabi_fsub+0x356>
 8000e60:	e736      	b.n	8000cd0 <__aeabi_fsub+0x1c4>
 8000e62:	2400      	movs	r4, #0
 8000e64:	2700      	movs	r7, #0
 8000e66:	e69c      	b.n	8000ba2 <__aeabi_fsub+0x96>

08000e68 <__aeabi_f2iz>:
 8000e68:	0241      	lsls	r1, r0, #9
 8000e6a:	0042      	lsls	r2, r0, #1
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0a49      	lsrs	r1, r1, #9
 8000e70:	2000      	movs	r0, #0
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	2a7e      	cmp	r2, #126	; 0x7e
 8000e76:	dd03      	ble.n	8000e80 <__aeabi_f2iz+0x18>
 8000e78:	2a9d      	cmp	r2, #157	; 0x9d
 8000e7a:	dd02      	ble.n	8000e82 <__aeabi_f2iz+0x1a>
 8000e7c:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <__aeabi_f2iz+0x3c>)
 8000e7e:	1898      	adds	r0, r3, r2
 8000e80:	4770      	bx	lr
 8000e82:	2080      	movs	r0, #128	; 0x80
 8000e84:	0400      	lsls	r0, r0, #16
 8000e86:	4301      	orrs	r1, r0
 8000e88:	2a95      	cmp	r2, #149	; 0x95
 8000e8a:	dc07      	bgt.n	8000e9c <__aeabi_f2iz+0x34>
 8000e8c:	2096      	movs	r0, #150	; 0x96
 8000e8e:	1a82      	subs	r2, r0, r2
 8000e90:	40d1      	lsrs	r1, r2
 8000e92:	4248      	negs	r0, r1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1f3      	bne.n	8000e80 <__aeabi_f2iz+0x18>
 8000e98:	0008      	movs	r0, r1
 8000e9a:	e7f1      	b.n	8000e80 <__aeabi_f2iz+0x18>
 8000e9c:	3a96      	subs	r2, #150	; 0x96
 8000e9e:	4091      	lsls	r1, r2
 8000ea0:	e7f7      	b.n	8000e92 <__aeabi_f2iz+0x2a>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	7fffffff 	.word	0x7fffffff

08000ea8 <__aeabi_ui2f>:
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	1e05      	subs	r5, r0, #0
 8000eac:	d00e      	beq.n	8000ecc <__aeabi_ui2f+0x24>
 8000eae:	f000 f877 	bl	8000fa0 <__clzsi2>
 8000eb2:	239e      	movs	r3, #158	; 0x9e
 8000eb4:	0004      	movs	r4, r0
 8000eb6:	1a1b      	subs	r3, r3, r0
 8000eb8:	2b96      	cmp	r3, #150	; 0x96
 8000eba:	dc0c      	bgt.n	8000ed6 <__aeabi_ui2f+0x2e>
 8000ebc:	2808      	cmp	r0, #8
 8000ebe:	dd01      	ble.n	8000ec4 <__aeabi_ui2f+0x1c>
 8000ec0:	3c08      	subs	r4, #8
 8000ec2:	40a5      	lsls	r5, r4
 8000ec4:	026d      	lsls	r5, r5, #9
 8000ec6:	0a6d      	lsrs	r5, r5, #9
 8000ec8:	b2d8      	uxtb	r0, r3
 8000eca:	e001      	b.n	8000ed0 <__aeabi_ui2f+0x28>
 8000ecc:	2000      	movs	r0, #0
 8000ece:	2500      	movs	r5, #0
 8000ed0:	05c0      	lsls	r0, r0, #23
 8000ed2:	4328      	orrs	r0, r5
 8000ed4:	bd70      	pop	{r4, r5, r6, pc}
 8000ed6:	2b99      	cmp	r3, #153	; 0x99
 8000ed8:	dd09      	ble.n	8000eee <__aeabi_ui2f+0x46>
 8000eda:	0002      	movs	r2, r0
 8000edc:	0029      	movs	r1, r5
 8000ede:	321b      	adds	r2, #27
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	1e4a      	subs	r2, r1, #1
 8000ee4:	4191      	sbcs	r1, r2
 8000ee6:	2205      	movs	r2, #5
 8000ee8:	1a12      	subs	r2, r2, r0
 8000eea:	40d5      	lsrs	r5, r2
 8000eec:	430d      	orrs	r5, r1
 8000eee:	2c05      	cmp	r4, #5
 8000ef0:	dc12      	bgt.n	8000f18 <__aeabi_ui2f+0x70>
 8000ef2:	0029      	movs	r1, r5
 8000ef4:	4e0c      	ldr	r6, [pc, #48]	; (8000f28 <__aeabi_ui2f+0x80>)
 8000ef6:	4031      	ands	r1, r6
 8000ef8:	076a      	lsls	r2, r5, #29
 8000efa:	d009      	beq.n	8000f10 <__aeabi_ui2f+0x68>
 8000efc:	200f      	movs	r0, #15
 8000efe:	4028      	ands	r0, r5
 8000f00:	2804      	cmp	r0, #4
 8000f02:	d005      	beq.n	8000f10 <__aeabi_ui2f+0x68>
 8000f04:	3104      	adds	r1, #4
 8000f06:	014a      	lsls	r2, r1, #5
 8000f08:	d502      	bpl.n	8000f10 <__aeabi_ui2f+0x68>
 8000f0a:	239f      	movs	r3, #159	; 0x9f
 8000f0c:	4031      	ands	r1, r6
 8000f0e:	1b1b      	subs	r3, r3, r4
 8000f10:	0189      	lsls	r1, r1, #6
 8000f12:	0a4d      	lsrs	r5, r1, #9
 8000f14:	b2d8      	uxtb	r0, r3
 8000f16:	e7db      	b.n	8000ed0 <__aeabi_ui2f+0x28>
 8000f18:	1f62      	subs	r2, r4, #5
 8000f1a:	4095      	lsls	r5, r2
 8000f1c:	0029      	movs	r1, r5
 8000f1e:	4e02      	ldr	r6, [pc, #8]	; (8000f28 <__aeabi_ui2f+0x80>)
 8000f20:	4031      	ands	r1, r6
 8000f22:	076a      	lsls	r2, r5, #29
 8000f24:	d0f4      	beq.n	8000f10 <__aeabi_ui2f+0x68>
 8000f26:	e7e9      	b.n	8000efc <__aeabi_ui2f+0x54>
 8000f28:	fbffffff 	.word	0xfbffffff

08000f2c <__aeabi_cfrcmple>:
 8000f2c:	4684      	mov	ip, r0
 8000f2e:	0008      	movs	r0, r1
 8000f30:	4661      	mov	r1, ip
 8000f32:	e7ff      	b.n	8000f34 <__aeabi_cfcmpeq>

08000f34 <__aeabi_cfcmpeq>:
 8000f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f36:	f000 f8c9 	bl	80010cc <__lesf2>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d401      	bmi.n	8000f42 <__aeabi_cfcmpeq+0xe>
 8000f3e:	2100      	movs	r1, #0
 8000f40:	42c8      	cmn	r0, r1
 8000f42:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f44 <__aeabi_fcmpeq>:
 8000f44:	b510      	push	{r4, lr}
 8000f46:	f000 f855 	bl	8000ff4 <__eqsf2>
 8000f4a:	4240      	negs	r0, r0
 8000f4c:	3001      	adds	r0, #1
 8000f4e:	bd10      	pop	{r4, pc}

08000f50 <__aeabi_fcmplt>:
 8000f50:	b510      	push	{r4, lr}
 8000f52:	f000 f8bb 	bl	80010cc <__lesf2>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	db01      	blt.n	8000f5e <__aeabi_fcmplt+0xe>
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	bd10      	pop	{r4, pc}
 8000f5e:	2001      	movs	r0, #1
 8000f60:	bd10      	pop	{r4, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)

08000f64 <__aeabi_fcmple>:
 8000f64:	b510      	push	{r4, lr}
 8000f66:	f000 f8b1 	bl	80010cc <__lesf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	dd01      	ble.n	8000f72 <__aeabi_fcmple+0xe>
 8000f6e:	2000      	movs	r0, #0
 8000f70:	bd10      	pop	{r4, pc}
 8000f72:	2001      	movs	r0, #1
 8000f74:	bd10      	pop	{r4, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)

08000f78 <__aeabi_fcmpgt>:
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	f000 f861 	bl	8001040 <__gesf2>
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	dc01      	bgt.n	8000f86 <__aeabi_fcmpgt+0xe>
 8000f82:	2000      	movs	r0, #0
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	2001      	movs	r0, #1
 8000f88:	bd10      	pop	{r4, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)

08000f8c <__aeabi_fcmpge>:
 8000f8c:	b510      	push	{r4, lr}
 8000f8e:	f000 f857 	bl	8001040 <__gesf2>
 8000f92:	2800      	cmp	r0, #0
 8000f94:	da01      	bge.n	8000f9a <__aeabi_fcmpge+0xe>
 8000f96:	2000      	movs	r0, #0
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	bd10      	pop	{r4, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)

08000fa0 <__clzsi2>:
 8000fa0:	211c      	movs	r1, #28
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	041b      	lsls	r3, r3, #16
 8000fa6:	4298      	cmp	r0, r3
 8000fa8:	d301      	bcc.n	8000fae <__clzsi2+0xe>
 8000faa:	0c00      	lsrs	r0, r0, #16
 8000fac:	3910      	subs	r1, #16
 8000fae:	0a1b      	lsrs	r3, r3, #8
 8000fb0:	4298      	cmp	r0, r3
 8000fb2:	d301      	bcc.n	8000fb8 <__clzsi2+0x18>
 8000fb4:	0a00      	lsrs	r0, r0, #8
 8000fb6:	3908      	subs	r1, #8
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	4298      	cmp	r0, r3
 8000fbc:	d301      	bcc.n	8000fc2 <__clzsi2+0x22>
 8000fbe:	0900      	lsrs	r0, r0, #4
 8000fc0:	3904      	subs	r1, #4
 8000fc2:	a202      	add	r2, pc, #8	; (adr r2, 8000fcc <__clzsi2+0x2c>)
 8000fc4:	5c10      	ldrb	r0, [r2, r0]
 8000fc6:	1840      	adds	r0, r0, r1
 8000fc8:	4770      	bx	lr
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	02020304 	.word	0x02020304
 8000fd0:	01010101 	.word	0x01010101
	...

08000fdc <__clzdi2>:
 8000fdc:	b510      	push	{r4, lr}
 8000fde:	2900      	cmp	r1, #0
 8000fe0:	d103      	bne.n	8000fea <__clzdi2+0xe>
 8000fe2:	f7ff ffdd 	bl	8000fa0 <__clzsi2>
 8000fe6:	3020      	adds	r0, #32
 8000fe8:	e002      	b.n	8000ff0 <__clzdi2+0x14>
 8000fea:	0008      	movs	r0, r1
 8000fec:	f7ff ffd8 	bl	8000fa0 <__clzsi2>
 8000ff0:	bd10      	pop	{r4, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)

08000ff4 <__eqsf2>:
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	0042      	lsls	r2, r0, #1
 8000ff8:	0245      	lsls	r5, r0, #9
 8000ffa:	024e      	lsls	r6, r1, #9
 8000ffc:	004c      	lsls	r4, r1, #1
 8000ffe:	0fc3      	lsrs	r3, r0, #31
 8001000:	0a6d      	lsrs	r5, r5, #9
 8001002:	2001      	movs	r0, #1
 8001004:	0e12      	lsrs	r2, r2, #24
 8001006:	0a76      	lsrs	r6, r6, #9
 8001008:	0e24      	lsrs	r4, r4, #24
 800100a:	0fc9      	lsrs	r1, r1, #31
 800100c:	2aff      	cmp	r2, #255	; 0xff
 800100e:	d006      	beq.n	800101e <__eqsf2+0x2a>
 8001010:	2cff      	cmp	r4, #255	; 0xff
 8001012:	d003      	beq.n	800101c <__eqsf2+0x28>
 8001014:	42a2      	cmp	r2, r4
 8001016:	d101      	bne.n	800101c <__eqsf2+0x28>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d006      	beq.n	800102a <__eqsf2+0x36>
 800101c:	bd70      	pop	{r4, r5, r6, pc}
 800101e:	2d00      	cmp	r5, #0
 8001020:	d1fc      	bne.n	800101c <__eqsf2+0x28>
 8001022:	2cff      	cmp	r4, #255	; 0xff
 8001024:	d1fa      	bne.n	800101c <__eqsf2+0x28>
 8001026:	2e00      	cmp	r6, #0
 8001028:	d1f8      	bne.n	800101c <__eqsf2+0x28>
 800102a:	428b      	cmp	r3, r1
 800102c:	d006      	beq.n	800103c <__eqsf2+0x48>
 800102e:	2001      	movs	r0, #1
 8001030:	2a00      	cmp	r2, #0
 8001032:	d1f3      	bne.n	800101c <__eqsf2+0x28>
 8001034:	0028      	movs	r0, r5
 8001036:	1e43      	subs	r3, r0, #1
 8001038:	4198      	sbcs	r0, r3
 800103a:	e7ef      	b.n	800101c <__eqsf2+0x28>
 800103c:	2000      	movs	r0, #0
 800103e:	e7ed      	b.n	800101c <__eqsf2+0x28>

08001040 <__gesf2>:
 8001040:	b570      	push	{r4, r5, r6, lr}
 8001042:	0042      	lsls	r2, r0, #1
 8001044:	0245      	lsls	r5, r0, #9
 8001046:	024e      	lsls	r6, r1, #9
 8001048:	004c      	lsls	r4, r1, #1
 800104a:	0fc3      	lsrs	r3, r0, #31
 800104c:	0a6d      	lsrs	r5, r5, #9
 800104e:	0e12      	lsrs	r2, r2, #24
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc8      	lsrs	r0, r1, #31
 8001056:	2aff      	cmp	r2, #255	; 0xff
 8001058:	d01b      	beq.n	8001092 <__gesf2+0x52>
 800105a:	2cff      	cmp	r4, #255	; 0xff
 800105c:	d00e      	beq.n	800107c <__gesf2+0x3c>
 800105e:	2a00      	cmp	r2, #0
 8001060:	d11b      	bne.n	800109a <__gesf2+0x5a>
 8001062:	2c00      	cmp	r4, #0
 8001064:	d101      	bne.n	800106a <__gesf2+0x2a>
 8001066:	2e00      	cmp	r6, #0
 8001068:	d01c      	beq.n	80010a4 <__gesf2+0x64>
 800106a:	2d00      	cmp	r5, #0
 800106c:	d00c      	beq.n	8001088 <__gesf2+0x48>
 800106e:	4283      	cmp	r3, r0
 8001070:	d01c      	beq.n	80010ac <__gesf2+0x6c>
 8001072:	2102      	movs	r1, #2
 8001074:	1e58      	subs	r0, r3, #1
 8001076:	4008      	ands	r0, r1
 8001078:	3801      	subs	r0, #1
 800107a:	bd70      	pop	{r4, r5, r6, pc}
 800107c:	2e00      	cmp	r6, #0
 800107e:	d122      	bne.n	80010c6 <__gesf2+0x86>
 8001080:	2a00      	cmp	r2, #0
 8001082:	d1f4      	bne.n	800106e <__gesf2+0x2e>
 8001084:	2d00      	cmp	r5, #0
 8001086:	d1f2      	bne.n	800106e <__gesf2+0x2e>
 8001088:	2800      	cmp	r0, #0
 800108a:	d1f6      	bne.n	800107a <__gesf2+0x3a>
 800108c:	2001      	movs	r0, #1
 800108e:	4240      	negs	r0, r0
 8001090:	e7f3      	b.n	800107a <__gesf2+0x3a>
 8001092:	2d00      	cmp	r5, #0
 8001094:	d117      	bne.n	80010c6 <__gesf2+0x86>
 8001096:	2cff      	cmp	r4, #255	; 0xff
 8001098:	d0f0      	beq.n	800107c <__gesf2+0x3c>
 800109a:	2c00      	cmp	r4, #0
 800109c:	d1e7      	bne.n	800106e <__gesf2+0x2e>
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d1e5      	bne.n	800106e <__gesf2+0x2e>
 80010a2:	e7e6      	b.n	8001072 <__gesf2+0x32>
 80010a4:	2000      	movs	r0, #0
 80010a6:	2d00      	cmp	r5, #0
 80010a8:	d0e7      	beq.n	800107a <__gesf2+0x3a>
 80010aa:	e7e2      	b.n	8001072 <__gesf2+0x32>
 80010ac:	42a2      	cmp	r2, r4
 80010ae:	dc05      	bgt.n	80010bc <__gesf2+0x7c>
 80010b0:	dbea      	blt.n	8001088 <__gesf2+0x48>
 80010b2:	42b5      	cmp	r5, r6
 80010b4:	d802      	bhi.n	80010bc <__gesf2+0x7c>
 80010b6:	d3e7      	bcc.n	8001088 <__gesf2+0x48>
 80010b8:	2000      	movs	r0, #0
 80010ba:	e7de      	b.n	800107a <__gesf2+0x3a>
 80010bc:	4243      	negs	r3, r0
 80010be:	4158      	adcs	r0, r3
 80010c0:	0040      	lsls	r0, r0, #1
 80010c2:	3801      	subs	r0, #1
 80010c4:	e7d9      	b.n	800107a <__gesf2+0x3a>
 80010c6:	2002      	movs	r0, #2
 80010c8:	4240      	negs	r0, r0
 80010ca:	e7d6      	b.n	800107a <__gesf2+0x3a>

080010cc <__lesf2>:
 80010cc:	b570      	push	{r4, r5, r6, lr}
 80010ce:	0042      	lsls	r2, r0, #1
 80010d0:	0245      	lsls	r5, r0, #9
 80010d2:	024e      	lsls	r6, r1, #9
 80010d4:	004c      	lsls	r4, r1, #1
 80010d6:	0fc3      	lsrs	r3, r0, #31
 80010d8:	0a6d      	lsrs	r5, r5, #9
 80010da:	0e12      	lsrs	r2, r2, #24
 80010dc:	0a76      	lsrs	r6, r6, #9
 80010de:	0e24      	lsrs	r4, r4, #24
 80010e0:	0fc8      	lsrs	r0, r1, #31
 80010e2:	2aff      	cmp	r2, #255	; 0xff
 80010e4:	d00b      	beq.n	80010fe <__lesf2+0x32>
 80010e6:	2cff      	cmp	r4, #255	; 0xff
 80010e8:	d00d      	beq.n	8001106 <__lesf2+0x3a>
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d11f      	bne.n	800112e <__lesf2+0x62>
 80010ee:	2c00      	cmp	r4, #0
 80010f0:	d116      	bne.n	8001120 <__lesf2+0x54>
 80010f2:	2e00      	cmp	r6, #0
 80010f4:	d114      	bne.n	8001120 <__lesf2+0x54>
 80010f6:	2000      	movs	r0, #0
 80010f8:	2d00      	cmp	r5, #0
 80010fa:	d010      	beq.n	800111e <__lesf2+0x52>
 80010fc:	e009      	b.n	8001112 <__lesf2+0x46>
 80010fe:	2d00      	cmp	r5, #0
 8001100:	d10c      	bne.n	800111c <__lesf2+0x50>
 8001102:	2cff      	cmp	r4, #255	; 0xff
 8001104:	d113      	bne.n	800112e <__lesf2+0x62>
 8001106:	2e00      	cmp	r6, #0
 8001108:	d108      	bne.n	800111c <__lesf2+0x50>
 800110a:	2a00      	cmp	r2, #0
 800110c:	d008      	beq.n	8001120 <__lesf2+0x54>
 800110e:	4283      	cmp	r3, r0
 8001110:	d012      	beq.n	8001138 <__lesf2+0x6c>
 8001112:	2102      	movs	r1, #2
 8001114:	1e58      	subs	r0, r3, #1
 8001116:	4008      	ands	r0, r1
 8001118:	3801      	subs	r0, #1
 800111a:	e000      	b.n	800111e <__lesf2+0x52>
 800111c:	2002      	movs	r0, #2
 800111e:	bd70      	pop	{r4, r5, r6, pc}
 8001120:	2d00      	cmp	r5, #0
 8001122:	d1f4      	bne.n	800110e <__lesf2+0x42>
 8001124:	2800      	cmp	r0, #0
 8001126:	d1fa      	bne.n	800111e <__lesf2+0x52>
 8001128:	2001      	movs	r0, #1
 800112a:	4240      	negs	r0, r0
 800112c:	e7f7      	b.n	800111e <__lesf2+0x52>
 800112e:	2c00      	cmp	r4, #0
 8001130:	d1ed      	bne.n	800110e <__lesf2+0x42>
 8001132:	2e00      	cmp	r6, #0
 8001134:	d1eb      	bne.n	800110e <__lesf2+0x42>
 8001136:	e7ec      	b.n	8001112 <__lesf2+0x46>
 8001138:	42a2      	cmp	r2, r4
 800113a:	dc05      	bgt.n	8001148 <__lesf2+0x7c>
 800113c:	dbf2      	blt.n	8001124 <__lesf2+0x58>
 800113e:	42b5      	cmp	r5, r6
 8001140:	d802      	bhi.n	8001148 <__lesf2+0x7c>
 8001142:	d3ef      	bcc.n	8001124 <__lesf2+0x58>
 8001144:	2000      	movs	r0, #0
 8001146:	e7ea      	b.n	800111e <__lesf2+0x52>
 8001148:	4243      	negs	r3, r0
 800114a:	4158      	adcs	r0, r3
 800114c:	0040      	lsls	r0, r0, #1
 800114e:	3801      	subs	r0, #1
 8001150:	e7e5      	b.n	800111e <__lesf2+0x52>
 8001152:	46c0      	nop			; (mov r8, r8)

08001154 <initDrv8830>:
#include "drv8830.h"

extern I2C_HandleTypeDef hi2c1;

uint8_t initDrv8830() {
 8001154:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t txData = 0x80;
 8001156:	2317      	movs	r3, #23
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	446b      	add	r3, sp
 800115c:	701a      	strb	r2, [r3, #0]
	// clear fault
	return HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &txData, 1, 5);
 800115e:	3a7b      	subs	r2, #123	; 0x7b
 8001160:	9202      	str	r2, [sp, #8]
 8001162:	3a04      	subs	r2, #4
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	21c0      	movs	r1, #192	; 0xc0
 8001168:	0013      	movs	r3, r2
 800116a:	9201      	str	r2, [sp, #4]
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <initDrv8830+0x24>)
 800116e:	f001 fb5b 	bl	8002828 <HAL_I2C_Mem_Write>
}
 8001172:	b007      	add	sp, #28
 8001174:	bd00      	pop	{pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	20000158 	.word	0x20000158

0800117c <setMotor>:
// VSET[7:2] voltage 0x00~0x3F
// D1, D0 direction
uint8_t setMotor(int direction) {
	uint8_t txData;
	uint8_t	result;
	txData = 0x1F << 2 | direction;
 800117c:	2216      	movs	r2, #22
 800117e:	237c      	movs	r3, #124	; 0x7c
uint8_t setMotor(int direction) {
 8001180:	b570      	push	{r4, r5, r6, lr}
	int status;
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 8001182:	2401      	movs	r4, #1
 8001184:	2505      	movs	r5, #5
uint8_t setMotor(int direction) {
 8001186:	b086      	sub	sp, #24
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 8001188:	4e0d      	ldr	r6, [pc, #52]	; (80011c0 <setMotor+0x44>)
	txData = 0x1F << 2 | direction;
 800118a:	446a      	add	r2, sp
 800118c:	4303      	orrs	r3, r0
 800118e:	7013      	strb	r3, [r2, #0]
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 8001190:	21c0      	movs	r1, #192	; 0xc0
 8001192:	0023      	movs	r3, r4
 8001194:	9502      	str	r5, [sp, #8]
 8001196:	9200      	str	r2, [sp, #0]
 8001198:	0030      	movs	r0, r6
 800119a:	2200      	movs	r2, #0
 800119c:	9401      	str	r4, [sp, #4]
 800119e:	f001 fb43 	bl	8002828 <HAL_I2C_Mem_Write>
	status = HAL_I2C_Mem_Read(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &result, 1, 5);
 80011a2:	9502      	str	r5, [sp, #8]
 80011a4:	3512      	adds	r5, #18
 80011a6:	446d      	add	r5, sp
 80011a8:	0023      	movs	r3, r4
 80011aa:	0022      	movs	r2, r4
 80011ac:	21c0      	movs	r1, #192	; 0xc0
 80011ae:	0030      	movs	r0, r6
 80011b0:	9401      	str	r4, [sp, #4]
 80011b2:	9500      	str	r5, [sp, #0]
 80011b4:	f001 fc16 	bl	80029e4 <HAL_I2C_Mem_Read>
	return result;
 80011b8:	7828      	ldrb	r0, [r5, #0]
}
 80011ba:	b006      	add	sp, #24
 80011bc:	bd70      	pop	{r4, r5, r6, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	20000158 	.word	0x20000158

080011c4 <initEns160>:
#include "ens160.h"

extern I2C_HandleTypeDef hi2c1;

void initEns160() {
 80011c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t txData = ENS160_OpMode_Run;
 80011c6:	2217      	movs	r2, #23
 80011c8:	2302      	movs	r3, #2
 80011ca:	446a      	add	r2, sp
 80011cc:	7013      	strb	r3, [r2, #0]
	int status = HAL_I2C_Mem_Write(&hi2c1, ENS160_DeviceAddress, ENS160_OpMode, 1, &txData, 1, 10);
 80011ce:	3308      	adds	r3, #8
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	3b09      	subs	r3, #9
 80011d4:	9200      	str	r2, [sp, #0]
 80011d6:	21a4      	movs	r1, #164	; 0xa4
 80011d8:	2210      	movs	r2, #16
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <initEns160+0x24>)
 80011de:	f001 fb23 	bl	8002828 <HAL_I2C_Mem_Write>
}
 80011e2:	b007      	add	sp, #28
 80011e4:	bd00      	pop	{pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	20000158 	.word	0x20000158

080011ec <getCO2>:
	txData[0]= writeValue;
	txData[1]= writeValue >> 8;
	int status = HAL_I2C_Mem_Write(&hi2c1, ENS160_DeviceAddress, ENS160_HumidityIn, 1, txData, 2, 10);
}

int	getCO2() {
 80011ec:	b530      	push	{r4, r5, lr}
	HAL_I2C_Init(&hi2c1);
 80011ee:	4d0a      	ldr	r5, [pc, #40]	; (8001218 <getCO2+0x2c>)
int	getCO2() {
 80011f0:	b087      	sub	sp, #28
	HAL_I2C_Init(&hi2c1);
 80011f2:	0028      	movs	r0, r5
 80011f4:	f001 f99e 	bl	8002534 <HAL_I2C_Init>
	uint8_t rxData[2];
	int status = HAL_I2C_Mem_Read(&hi2c1, ENS160_DeviceAddress, ENS160_DataECO2, 1, rxData, 2, 10);
 80011f8:	230a      	movs	r3, #10
 80011fa:	ac05      	add	r4, sp, #20
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	3b08      	subs	r3, #8
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	2224      	movs	r2, #36	; 0x24
 8001204:	21a4      	movs	r1, #164	; 0xa4
 8001206:	0028      	movs	r0, r5
 8001208:	9400      	str	r4, [sp, #0]
 800120a:	3b01      	subs	r3, #1
 800120c:	f001 fbea 	bl	80029e4 <HAL_I2C_Mem_Read>
	return rxData[1] << 8 | rxData[0];
 8001210:	8820      	ldrh	r0, [r4, #0]
}
 8001212:	b007      	add	sp, #28
 8001214:	bd30      	pop	{r4, r5, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	20000158 	.word	0x20000158

0800121c <BUZ.part.0>:
	/* reset NULL */
	*address = NULL;
}

/* BUZZER on/off set */
void BUZ(uint8_t state){
 800121c:	b510      	push	{r4, lr}
	if(state == 1) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800121e:	2100      	movs	r1, #0
 8001220:	4801      	ldr	r0, [pc, #4]	; (8001228 <BUZ.part.0+0xc>)
 8001222:	f002 fa8b 	bl	800373c <HAL_TIM_PWM_Start>
	else HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
}
 8001226:	bd10      	pop	{r4, pc}
 8001228:	200001ac 	.word	0x200001ac

0800122c <get_sensor>:
void* get_sensor(GET_SENSOR_Typedef mem){
 800122c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(mem == get_sht41){
 800122e:	2800      	cmp	r0, #0
 8001230:	d10c      	bne.n	800124c <get_sensor+0x20>
		SHT41_t* buf = (SHT41_t*)malloc(sizeof(SHT41_t));
 8001232:	3008      	adds	r0, #8
 8001234:	f002 fed2 	bl	8003fdc <malloc>
		*buf = getTempSht41();
 8001238:	466d      	mov	r5, sp
		SHT41_t* buf = (SHT41_t*)malloc(sizeof(SHT41_t));
 800123a:	0004      	movs	r4, r0
		*buf = getTempSht41();
 800123c:	0028      	movs	r0, r5
 800123e:	f000 fd45 	bl	8001ccc <getTempSht41>
 8001242:	0023      	movs	r3, r4
 8001244:	cd06      	ldmia	r5!, {r1, r2}
 8001246:	c306      	stmia	r3!, {r1, r2}
}
 8001248:	0020      	movs	r0, r4
 800124a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		uint16_t* buf = (uint16_t*)malloc(sizeof(uint16_t));
 800124c:	2002      	movs	r0, #2
 800124e:	f002 fec5 	bl	8003fdc <malloc>
 8001252:	0004      	movs	r4, r0
		*buf = getCO2();
 8001254:	f7ff ffca 	bl	80011ec <getCO2>
 8001258:	8020      	strh	r0, [r4, #0]
		return buf;
 800125a:	e7f5      	b.n	8001248 <get_sensor+0x1c>

0800125c <free_value>:
void free_value(void** address){
 800125c:	b510      	push	{r4, lr}
 800125e:	0004      	movs	r4, r0
	free(*address);
 8001260:	6800      	ldr	r0, [r0, #0]
 8001262:	f002 fec5 	bl	8003ff0 <free>
	*address = NULL;
 8001266:	2300      	movs	r3, #0
 8001268:	6023      	str	r3, [r4, #0]
}
 800126a:	bd10      	pop	{r4, pc}

0800126c <BUZ>:
void BUZ(uint8_t state){
 800126c:	b510      	push	{r4, lr}
	if(state == 1) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800126e:	2801      	cmp	r0, #1
 8001270:	d102      	bne.n	8001278 <BUZ+0xc>
 8001272:	f7ff ffd3 	bl	800121c <BUZ.part.0>
}
 8001276:	bd10      	pop	{r4, pc}
	else HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001278:	2100      	movs	r1, #0
 800127a:	4802      	ldr	r0, [pc, #8]	; (8001284 <BUZ+0x18>)
 800127c:	f002 fa62 	bl	8003744 <HAL_TIM_PWM_Stop>
}
 8001280:	e7f9      	b.n	8001276 <BUZ+0xa>
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	200001ac 	.word	0x200001ac

08001288 <BUZ_hz_set>:

/* buzzer frequency set */
void BUZ_hz_set(uint16_t hz){
 8001288:	0001      	movs	r1, r0
 800128a:	b510      	push	{r4, lr}
	TIM2->ARR = 1000000 / hz;
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <BUZ_hz_set+0x18>)
 800128e:	f7fe ffe1 	bl	8000254 <__divsi3>
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	05db      	lsls	r3, r3, #23
 8001296:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM2->CCR1 = TIM2->ARR / 2;
 8001298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800129a:	0852      	lsrs	r2, r2, #1
 800129c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800129e:	bd10      	pop	{r4, pc}
 80012a0:	000f4240 	.word	0x000f4240

080012a4 <nextion_inst_set>:

/* NEXTION instruction set */
void nextion_inst_set(char* str){
 80012a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t end_cmd[3] = { 0xFF, 0xFF, 0xFF };
 80012a6:	2503      	movs	r5, #3
void nextion_inst_set(char* str){
 80012a8:	0004      	movs	r4, r0
	uint8_t end_cmd[3] = { 0xFF, 0xFF, 0xFF };
 80012aa:	002a      	movs	r2, r5
 80012ac:	490a      	ldr	r1, [pc, #40]	; (80012d8 <nextion_inst_set+0x34>)
 80012ae:	a801      	add	r0, sp, #4
 80012b0:	f002 fea8 	bl	8004004 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 80012b4:	0020      	movs	r0, r4
 80012b6:	f7fe ff27 	bl	8000108 <strlen>
 80012ba:	4e08      	ldr	r6, [pc, #32]	; (80012dc <nextion_inst_set+0x38>)
 80012bc:	0021      	movs	r1, r4
 80012be:	b282      	uxth	r2, r0
 80012c0:	2364      	movs	r3, #100	; 0x64
 80012c2:	0030      	movs	r0, r6
 80012c4:	f002 fce3 	bl	8003c8e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, end_cmd, 3, 100);
 80012c8:	002a      	movs	r2, r5
 80012ca:	0030      	movs	r0, r6
 80012cc:	2364      	movs	r3, #100	; 0x64
 80012ce:	a901      	add	r1, sp, #4
 80012d0:	f002 fcdd 	bl	8003c8e <HAL_UART_Transmit>
}
 80012d4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	080049d8 	.word	0x080049d8
 80012dc:	200001ec 	.word	0x200001ec

080012e0 <get_touch>:

/* get touch coordinate */
void get_touch(POS_Typedef* buf){
	HAL_StatusTypeDef res = HAL_OK;
	uint8_t rx_data[8] = { 0, };
 80012e0:	2300      	movs	r3, #0
void get_touch(POS_Typedef* buf){
 80012e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012e4:	0004      	movs	r4, r0

	/* x coordinate */
	nextion_inst_set("get tch0");
 80012e6:	481b      	ldr	r0, [pc, #108]	; (8001354 <get_touch+0x74>)
	uint8_t rx_data[8] = { 0, };
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	9301      	str	r3, [sp, #4]
	nextion_inst_set("get tch0");
 80012ec:	f7ff ffda 	bl	80012a4 <nextion_inst_set>
	res = HAL_UART_Receive(&huart1, rx_data, 8, 100);
 80012f0:	4d19      	ldr	r5, [pc, #100]	; (8001358 <get_touch+0x78>)
 80012f2:	2364      	movs	r3, #100	; 0x64
 80012f4:	2208      	movs	r2, #8
 80012f6:	4669      	mov	r1, sp
 80012f8:	0028      	movs	r0, r5
 80012fa:	f002 fd2f 	bl	8003d5c <HAL_UART_Receive>
	if(res == HAL_OK) { if(rx_data[0] == 0x71) { buf->x = rx_data[2] << 8 | rx_data[1]; } }
 80012fe:	2800      	cmp	r0, #0
 8001300:	d109      	bne.n	8001316 <get_touch+0x36>
 8001302:	466b      	mov	r3, sp
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b71      	cmp	r3, #113	; 0x71
 8001308:	d105      	bne.n	8001316 <get_touch+0x36>
 800130a:	466b      	mov	r3, sp
 800130c:	7859      	ldrb	r1, [r3, #1]
 800130e:	789b      	ldrb	r3, [r3, #2]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	430b      	orrs	r3, r1
 8001314:	8023      	strh	r3, [r4, #0]

	/* y coordinate */
	nextion_inst_set("get tch1");
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <get_touch+0x7c>)
 8001318:	f7ff ffc4 	bl	80012a4 <nextion_inst_set>
	res = HAL_UART_Receive(&huart1, rx_data, 8, 100);
 800131c:	2364      	movs	r3, #100	; 0x64
 800131e:	2208      	movs	r2, #8
 8001320:	4669      	mov	r1, sp
 8001322:	0028      	movs	r0, r5
 8001324:	f002 fd1a 	bl	8003d5c <HAL_UART_Receive>
	if(res == HAL_OK) { if(rx_data[0] == 0x71) { buf->y = rx_data[2] << 8 | rx_data[1]; } }
 8001328:	2800      	cmp	r0, #0
 800132a:	d109      	bne.n	8001340 <get_touch+0x60>
 800132c:	466b      	mov	r3, sp
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b71      	cmp	r3, #113	; 0x71
 8001332:	d105      	bne.n	8001340 <get_touch+0x60>
 8001334:	466b      	mov	r3, sp
 8001336:	7859      	ldrb	r1, [r3, #1]
 8001338:	789b      	ldrb	r3, [r3, #2]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	430b      	orrs	r3, r1
 800133e:	8063      	strh	r3, [r4, #2]

	/* touch state set */
	if(buf->x > 0 && buf->y > 0) buf->touched = 1;
	else buf->touched = 0;
 8001340:	2300      	movs	r3, #0
	if(buf->x > 0 && buf->y > 0) buf->touched = 1;
 8001342:	8822      	ldrh	r2, [r4, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d003      	beq.n	8001350 <get_touch+0x70>
 8001348:	8863      	ldrh	r3, [r4, #2]
 800134a:	1e5a      	subs	r2, r3, #1
 800134c:	4193      	sbcs	r3, r2
	else buf->touched = 0;
 800134e:	b2db      	uxtb	r3, r3
 8001350:	7123      	strb	r3, [r4, #4]
}
 8001352:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8001354:	080049dc 	.word	0x080049dc
 8001358:	200001ec 	.word	0x200001ec
 800135c:	080049e5 	.word	0x080049e5

08001360 <area_check>:

/* check for area touch */
uint8_t area_check(POS_Typedef* xy, AREA_Typedef* area){
 8001360:	b510      	push	{r4, lr}
	if(xy->x >= area->x0 && xy->x <= area->x1){
 8001362:	8802      	ldrh	r2, [r0, #0]
 8001364:	880c      	ldrh	r4, [r1, #0]
uint8_t area_check(POS_Typedef* xy, AREA_Typedef* area){
 8001366:	0003      	movs	r3, r0
		if(xy->y >= area->y0 && xy->y <= area->y1){
			return 1;
		}
	}
	return 0;
 8001368:	2000      	movs	r0, #0
	if(xy->x >= area->x0 && xy->x <= area->x1){
 800136a:	4294      	cmp	r4, r2
 800136c:	d80a      	bhi.n	8001384 <area_check+0x24>
 800136e:	888c      	ldrh	r4, [r1, #4]
 8001370:	4294      	cmp	r4, r2
 8001372:	d307      	bcc.n	8001384 <area_check+0x24>
 8001374:	885b      	ldrh	r3, [r3, #2]
		if(xy->y >= area->y0 && xy->y <= area->y1){
 8001376:	884a      	ldrh	r2, [r1, #2]
 8001378:	429a      	cmp	r2, r3
 800137a:	d803      	bhi.n	8001384 <area_check+0x24>
 800137c:	88ca      	ldrh	r2, [r1, #6]
 800137e:	429a      	cmp	r2, r3
 8001380:	4140      	adcs	r0, r0
	return 0;
 8001382:	b2c0      	uxtb	r0, r0
}
 8001384:	bd10      	pop	{r4, pc}
	...

08001388 <button_draw>:

/* auto with menu button draw */
void button_draw(BUTTON_Typedef* data){
 8001388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800138a:	0004      	movs	r4, r0
	/* button draw */
	sprintf(bf, "xstr %d,%d,50,30,0,BLACK,%s,1,1,1,\"%s\"", data->area.x0, data->area.y0, data->color, data->text);
 800138c:	68c1      	ldr	r1, [r0, #12]
 800138e:	8843      	ldrh	r3, [r0, #2]
 8001390:	8802      	ldrh	r2, [r0, #0]
 8001392:	9101      	str	r1, [sp, #4]
 8001394:	4d0b      	ldr	r5, [pc, #44]	; (80013c4 <button_draw+0x3c>)
 8001396:	6881      	ldr	r1, [r0, #8]
 8001398:	0028      	movs	r0, r5
 800139a:	9100      	str	r1, [sp, #0]
 800139c:	490a      	ldr	r1, [pc, #40]	; (80013c8 <button_draw+0x40>)
 800139e:	f002 ff37 	bl	8004210 <siprintf>
	nextion_inst_set(bf);
 80013a2:	0028      	movs	r0, r5
 80013a4:	f7ff ff7e 	bl	80012a4 <nextion_inst_set>

	/* button outline draw */
	sprintf(bf, "draw %d,%d,%d,%d,BLACK", data->area.x0, data->area.y0, data->area.x1, data->area.y1);
 80013a8:	88e1      	ldrh	r1, [r4, #6]
 80013aa:	0028      	movs	r0, r5
 80013ac:	9101      	str	r1, [sp, #4]
 80013ae:	88a1      	ldrh	r1, [r4, #4]
 80013b0:	8863      	ldrh	r3, [r4, #2]
 80013b2:	8822      	ldrh	r2, [r4, #0]
 80013b4:	9100      	str	r1, [sp, #0]
 80013b6:	4905      	ldr	r1, [pc, #20]	; (80013cc <button_draw+0x44>)
 80013b8:	f002 ff2a 	bl	8004210 <siprintf>
	nextion_inst_set(bf);
 80013bc:	0028      	movs	r0, r5
 80013be:	f7ff ff71 	bl	80012a4 <nextion_inst_set>
}
 80013c2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80013c4:	200000e9 	.word	0x200000e9
 80013c8:	080049ee 	.word	0x080049ee
 80013cc:	08004a15 	.word	0x08004a15

080013d0 <draw_sensor>:

/* draw sensor value */
void draw_sensor(void* buf, uint8_t i){
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	SENSOR_Typedef* data = (SENSOR_Typedef*)buf;
	if(i == 0){
		/* temperature dis */
		sprintf(bf, "xstr %d,%d,90,30,0,BLACK,%s,1,1,1,\"%d.%d%cC\"", data->area.x0, data->area.y0, data->color, data->value / 10, data->value % 10, 0xb0);
 80013d2:	8803      	ldrh	r3, [r0, #0]
void draw_sensor(void* buf, uint8_t i){
 80013d4:	b087      	sub	sp, #28
		sprintf(bf, "xstr %d,%d,90,30,0,BLACK,%s,1,1,1,\"%d.%d%cC\"", data->area.x0, data->area.y0, data->color, data->value / 10, data->value % 10, 0xb0);
 80013d6:	9304      	str	r3, [sp, #16]
 80013d8:	68c3      	ldr	r3, [r0, #12]
 80013da:	8847      	ldrh	r7, [r0, #2]
 80013dc:	9305      	str	r3, [sp, #20]
void draw_sensor(void* buf, uint8_t i){
 80013de:	0004      	movs	r4, r0
		sprintf(bf, "xstr %d,%d,90,30,0,BLACK,%s,1,1,1,\"%d.%d%cC\"", data->area.x0, data->area.y0, data->color, data->value / 10, data->value % 10, 0xb0);
 80013e0:	8905      	ldrh	r5, [r0, #8]
 80013e2:	4e26      	ldr	r6, [pc, #152]	; (800147c <draw_sensor+0xac>)
	if(i == 0){
 80013e4:	2900      	cmp	r1, #0
 80013e6:	d128      	bne.n	800143a <draw_sensor+0x6a>
		sprintf(bf, "xstr %d,%d,90,30,0,BLACK,%s,1,1,1,\"%d.%d%cC\"", data->area.x0, data->area.y0, data->color, data->value / 10, data->value % 10, 0xb0);
 80013e8:	23b0      	movs	r3, #176	; 0xb0
 80013ea:	0028      	movs	r0, r5
 80013ec:	310a      	adds	r1, #10
 80013ee:	9303      	str	r3, [sp, #12]
 80013f0:	f7fe ff2c 	bl	800024c <__aeabi_uidivmod>
 80013f4:	b289      	uxth	r1, r1
 80013f6:	9102      	str	r1, [sp, #8]
 80013f8:	0028      	movs	r0, r5
 80013fa:	210a      	movs	r1, #10
 80013fc:	f7fe fea0 	bl	8000140 <__udivsi3>
 8001400:	9b05      	ldr	r3, [sp, #20]
 8001402:	b280      	uxth	r0, r0
 8001404:	9001      	str	r0, [sp, #4]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	0030      	movs	r0, r6
 800140a:	003b      	movs	r3, r7
 800140c:	9a04      	ldr	r2, [sp, #16]
 800140e:	491c      	ldr	r1, [pc, #112]	; (8001480 <draw_sensor+0xb0>)
 8001410:	f002 fefe 	bl	8004210 <siprintf>
	}
	else{
		/* co2 dis */
		sprintf(bf, "xstr %d,%d,90,30,0,BLACK,%s,1,1,1,\"%d\"", data->area.x0, data->area.y0, data->color, data->value);
	}
	nextion_inst_set(bf);
 8001414:	4d19      	ldr	r5, [pc, #100]	; (800147c <draw_sensor+0xac>)
 8001416:	0028      	movs	r0, r5
 8001418:	f7ff ff44 	bl	80012a4 <nextion_inst_set>

	/* value outline draw */
	sprintf(bf, "draw %d,%d,%d,%d,BLACK", data->area.x0, data->area.y0, data->area.x1, data->area.y1);
 800141c:	88e1      	ldrh	r1, [r4, #6]
 800141e:	8863      	ldrh	r3, [r4, #2]
 8001420:	9101      	str	r1, [sp, #4]
 8001422:	88a1      	ldrh	r1, [r4, #4]
 8001424:	8822      	ldrh	r2, [r4, #0]
 8001426:	9100      	str	r1, [sp, #0]
 8001428:	0028      	movs	r0, r5
 800142a:	4916      	ldr	r1, [pc, #88]	; (8001484 <draw_sensor+0xb4>)
 800142c:	f002 fef0 	bl	8004210 <siprintf>
	nextion_inst_set(bf);
 8001430:	0028      	movs	r0, r5
 8001432:	f7ff ff37 	bl	80012a4 <nextion_inst_set>
}
 8001436:	b007      	add	sp, #28
 8001438:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(i == 1){
 800143a:	2901      	cmp	r1, #1
 800143c:	d114      	bne.n	8001468 <draw_sensor+0x98>
		sprintf(bf, "xstr %d,%d,90,30,0,BLACK,%s,1,1,1,\"%02d.%d%%\"", data->area.x0, data->area.y0, data->color, data->value / 10, data->value % 10);
 800143e:	0028      	movs	r0, r5
 8001440:	3109      	adds	r1, #9
 8001442:	f7fe ff03 	bl	800024c <__aeabi_uidivmod>
 8001446:	b289      	uxth	r1, r1
 8001448:	9102      	str	r1, [sp, #8]
 800144a:	0028      	movs	r0, r5
 800144c:	210a      	movs	r1, #10
 800144e:	f7fe fe77 	bl	8000140 <__udivsi3>
 8001452:	9b05      	ldr	r3, [sp, #20]
 8001454:	b280      	uxth	r0, r0
 8001456:	9001      	str	r0, [sp, #4]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	0030      	movs	r0, r6
 800145c:	003b      	movs	r3, r7
 800145e:	9a04      	ldr	r2, [sp, #16]
 8001460:	4909      	ldr	r1, [pc, #36]	; (8001488 <draw_sensor+0xb8>)
 8001462:	f002 fed5 	bl	8004210 <siprintf>
 8001466:	e7d5      	b.n	8001414 <draw_sensor+0x44>
		sprintf(bf, "xstr %d,%d,90,30,0,BLACK,%s,1,1,1,\"%d\"", data->area.x0, data->area.y0, data->color, data->value);
 8001468:	9b05      	ldr	r3, [sp, #20]
 800146a:	0030      	movs	r0, r6
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	9a04      	ldr	r2, [sp, #16]
 8001470:	003b      	movs	r3, r7
 8001472:	4906      	ldr	r1, [pc, #24]	; (800148c <draw_sensor+0xbc>)
 8001474:	9501      	str	r5, [sp, #4]
 8001476:	f002 fecb 	bl	8004210 <siprintf>
 800147a:	e7cb      	b.n	8001414 <draw_sensor+0x44>
 800147c:	200000e9 	.word	0x200000e9
 8001480:	08004a2c 	.word	0x08004a2c
 8001484:	08004a15 	.word	0x08004a15
 8001488:	08004a59 	.word	0x08004a59
 800148c:	08004a87 	.word	0x08004a87

08001490 <button_display>:

/* button with sensor draw */
void button_display(uint8_t* rad){
 8001490:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* circle color */
	if(*rad > 0) sprintf(bf, "cirs 420,220,%d,GREEN", *rad); // green circle draw ( variable radius  )
 8001492:	7802      	ldrb	r2, [r0, #0]
 8001494:	4c28      	ldr	r4, [pc, #160]	; (8001538 <button_display+0xa8>)
 8001496:	2a00      	cmp	r2, #0
 8001498:	d049      	beq.n	800152e <button_display+0x9e>
 800149a:	0020      	movs	r0, r4
 800149c:	4927      	ldr	r1, [pc, #156]	; (800153c <button_display+0xac>)
 800149e:	f002 feb7 	bl	8004210 <siprintf>
	else         sprintf(bf, "cirs 420,220,25,WHITE");       // white circle draw ( fix radius at 25 )
	nextion_inst_set(bf);
 80014a2:	0020      	movs	r0, r4
 80014a4:	f7ff fefe 	bl	80012a4 <nextion_inst_set>

	/* circle outline */
	nextion_inst_set("cir 420,220,25,BLACK");
 80014a8:	4825      	ldr	r0, [pc, #148]	; (8001540 <button_display+0xb0>)
 80014aa:	f7ff fefb 	bl	80012a4 <nextion_inst_set>
		SHT41_t* buf = (SHT41_t*)malloc(sizeof(SHT41_t));
 80014ae:	2008      	movs	r0, #8
 80014b0:	f002 fd94 	bl	8003fdc <malloc>
		*buf = getTempSht41();
 80014b4:	466d      	mov	r5, sp
		SHT41_t* buf = (SHT41_t*)malloc(sizeof(SHT41_t));
 80014b6:	0004      	movs	r4, r0
		*buf = getTempSht41();
 80014b8:	0028      	movs	r0, r5
 80014ba:	f000 fc07 	bl	8001ccc <getTempSht41>
 80014be:	0023      	movs	r3, r4

	/* value draw */
	SHT41_t* sht41_vluae   = get_sensor(get_sht41);
	uint16_t* ens160_value = get_sensor(get_ens160);
 80014c0:	2001      	movs	r0, #1
		*buf = getTempSht41();
 80014c2:	cd06      	ldmia	r5!, {r1, r2}
 80014c4:	c306      	stmia	r3!, {r1, r2}
	SHT41_t* sht41_vluae   = get_sensor(get_sht41);
 80014c6:	9402      	str	r4, [sp, #8]
	uint16_t* ens160_value = get_sensor(get_ens160);
 80014c8:	f7ff feb0 	bl	800122c <get_sensor>

	sensor[sht41_temp].value = (uint16_t)(sht41_vluae->temperature * 10.0f); // getting sht41 temperature
 80014cc:	9e02      	ldr	r6, [sp, #8]
	uint16_t* ens160_value = get_sensor(get_ens160);
 80014ce:	0005      	movs	r5, r0
	sensor[sht41_temp].value = (uint16_t)(sht41_vluae->temperature * 10.0f); // getting sht41 temperature
 80014d0:	491c      	ldr	r1, [pc, #112]	; (8001544 <button_display+0xb4>)
	uint16_t* ens160_value = get_sensor(get_ens160);
 80014d2:	9003      	str	r0, [sp, #12]
	sensor[sht41_temp].value = (uint16_t)(sht41_vluae->temperature * 10.0f); // getting sht41 temperature
 80014d4:	6830      	ldr	r0, [r6, #0]
 80014d6:	f7ff f9f3 	bl	80008c0 <__aeabi_fmul>
 80014da:	f7fe fff5 	bl	80004c8 <__aeabi_f2uiz>
 80014de:	4c1a      	ldr	r4, [pc, #104]	; (8001548 <button_display+0xb8>)
	sensor[sht41_hum].value  = (uint16_t)(sht41_vluae->humidity    * 10.0f); // getting sht41 humidity
 80014e0:	4918      	ldr	r1, [pc, #96]	; (8001544 <button_display+0xb4>)
	sensor[sht41_temp].value = (uint16_t)(sht41_vluae->temperature * 10.0f); // getting sht41 temperature
 80014e2:	8120      	strh	r0, [r4, #8]
	sensor[sht41_hum].value  = (uint16_t)(sht41_vluae->humidity    * 10.0f); // getting sht41 humidity
 80014e4:	6870      	ldr	r0, [r6, #4]
 80014e6:	f7ff f9eb 	bl	80008c0 <__aeabi_fmul>
 80014ea:	f7fe ffed 	bl	80004c8 <__aeabi_f2uiz>
 80014ee:	8320      	strh	r0, [r4, #24]
	sensor[ens160_co2].value = *ens160_value;                                // getting ens160 co2
 80014f0:	882b      	ldrh	r3, [r5, #0]

	/* dynamic memory free and NULL reset */
	free_value((void*)&sht41_vluae);
 80014f2:	a802      	add	r0, sp, #8
	sensor[ens160_co2].value = *ens160_value;                                // getting ens160 co2
 80014f4:	8523      	strh	r3, [r4, #40]	; 0x28
	free_value((void*)&sht41_vluae);
 80014f6:	f7ff feb1 	bl	800125c <free_value>
	free_value((void*)&ens160_value);
 80014fa:	a803      	add	r0, sp, #12
 80014fc:	f7ff feae 	bl	800125c <free_value>

	/* sensor menu draw */
	for(uint8_t i = 0 ; i < 3 ; i++)
		draw_sensor(&sensor[i], i);
 8001500:	0020      	movs	r0, r4
 8001502:	2100      	movs	r1, #0
 8001504:	f7ff ff64 	bl	80013d0 <draw_sensor>
 8001508:	0020      	movs	r0, r4
 800150a:	2101      	movs	r1, #1
 800150c:	3010      	adds	r0, #16
 800150e:	f7ff ff5f 	bl	80013d0 <draw_sensor>
 8001512:	0020      	movs	r0, r4
 8001514:	2102      	movs	r1, #2
 8001516:	3020      	adds	r0, #32
 8001518:	f7ff ff5a 	bl	80013d0 <draw_sensor>

	/* button draw */
	for(uint8_t i = 0 ; i < 2 ; i++)
		button_draw(&button[i]);
 800151c:	4c0b      	ldr	r4, [pc, #44]	; (800154c <button_display+0xbc>)
 800151e:	0020      	movs	r0, r4
 8001520:	f7ff ff32 	bl	8001388 <button_draw>
 8001524:	0020      	movs	r0, r4
 8001526:	3010      	adds	r0, #16
 8001528:	f7ff ff2e 	bl	8001388 <button_draw>
}
 800152c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
	else         sprintf(bf, "cirs 420,220,25,WHITE");       // white circle draw ( fix radius at 25 )
 800152e:	0020      	movs	r0, r4
 8001530:	4907      	ldr	r1, [pc, #28]	; (8001550 <button_display+0xc0>)
 8001532:	f002 fe8d 	bl	8004250 <strcpy>
 8001536:	e7b4      	b.n	80014a2 <button_display+0x12>
 8001538:	200000e9 	.word	0x200000e9
 800153c:	08004aae 	.word	0x08004aae
 8001540:	08004ada 	.word	0x08004ada
 8001544:	41200000 	.word	0x41200000
 8001548:	20000024 	.word	0x20000024
 800154c:	20000000 	.word	0x20000000
 8001550:	08004ac4 	.word	0x08004ac4

08001554 <window_display>:

void window_display(uint16_t* y){
 8001554:	b5f0      	push	{r4, r5, r6, r7, lr}
	DAY_Typedef day_state = night;
	uint16_t time_sum = 0;
	uint16_t display_time = 0;

	/* night state */
	if(time.hour < 7) time_sum = (time.hour + 17) * 60 + time.min;
 8001556:	4b4d      	ldr	r3, [pc, #308]	; (800168c <window_display+0x138>)
void window_display(uint16_t* y){
 8001558:	b087      	sub	sp, #28
	if(time.hour < 7) time_sum = (time.hour + 17) * 60 + time.min;
 800155a:	781e      	ldrb	r6, [r3, #0]
 800155c:	785b      	ldrb	r3, [r3, #1]
void window_display(uint16_t* y){
 800155e:	0007      	movs	r7, r0
	if(time.hour < 7) time_sum = (time.hour + 17) * 60 + time.min;
 8001560:	9305      	str	r3, [sp, #20]
 8001562:	466b      	mov	r3, sp
 8001564:	213c      	movs	r1, #60	; 0x3c
 8001566:	8a98      	ldrh	r0, [r3, #20]
 8001568:	2e06      	cmp	r6, #6
 800156a:	d900      	bls.n	800156e <window_display+0x1a>
 800156c:	e07d      	b.n	800166a <window_display+0x116>
 800156e:	0033      	movs	r3, r6
 8001570:	3311      	adds	r3, #17
 8001572:	b2db      	uxtb	r3, r3
 8001574:	434b      	muls	r3, r1
 8001576:	18c0      	adds	r0, r0, r3
	DAY_Typedef day_state = night;
 8001578:	2301      	movs	r3, #1
	else              time_sum = (time.hour - 7) * 60 + time.min;

	/* 24hour = 1440 minute */
	if(time_sum < 720) day_state = day;

	display_time = time_sum % 720;
 800157a:	21b4      	movs	r1, #180	; 0xb4
 800157c:	0089      	lsls	r1, r1, #2
	if(time_sum < 720) day_state = day;
 800157e:	9303      	str	r3, [sp, #12]
	display_time = time_sum % 720;
 8001580:	f7fe fe64 	bl	800024c <__aeabi_uidivmod>

	/* basic x coordinate = 75 */
	uint16_t sun_x = (display_time * 30) / 100 + 75;
 8001584:	201e      	movs	r0, #30
	display_time = time_sum % 720;
 8001586:	b28c      	uxth	r4, r1
	uint16_t sun_x = (display_time * 30) / 100 + 75;
 8001588:	4360      	muls	r0, r4
 800158a:	2164      	movs	r1, #100	; 0x64
 800158c:	f7fe fe62 	bl	8000254 <__divsi3>
 8001590:	304b      	adds	r0, #75	; 0x4b
 8001592:	b283      	uxth	r3, r0
 8001594:	9304      	str	r3, [sp, #16]
	uint16_t sun_y;
	/* max y coordinate 135 */
	/* time < 360: rising sun, time > 360: falling sun */
	if(display_time < 360) { sun_y = 135 - (display_time * 5 / 100); }
 8001596:	23b4      	movs	r3, #180	; 0xb4
 8001598:	2114      	movs	r1, #20
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	429c      	cmp	r4, r3
 800159e:	d300      	bcc.n	80015a2 <window_display+0x4e>
 80015a0:	e06e      	b.n	8001680 <window_display+0x12c>
 80015a2:	0020      	movs	r0, r4
 80015a4:	4249      	negs	r1, r1
 80015a6:	f7fe fe55 	bl	8000254 <__divsi3>
 80015aa:	3087      	adds	r0, #135	; 0x87
 80015ac:	b285      	uxth	r5, r0
	else                   { sun_y = display_time * 5 / 100 + 100; }

	/* time draw */
	sprintf(bf, "xstr 30,51,100,29,0,BLACK,WHITE,0,1,1,\"%02d:%02d\"", time.hour, time.min);
 80015ae:	4c38      	ldr	r4, [pc, #224]	; (8001690 <window_display+0x13c>)
 80015b0:	0032      	movs	r2, r6
 80015b2:	9b05      	ldr	r3, [sp, #20]
 80015b4:	4937      	ldr	r1, [pc, #220]	; (8001694 <window_display+0x140>)
 80015b6:	0020      	movs	r0, r4
 80015b8:	f002 fe2a 	bl	8004210 <siprintf>
	nextion_inst_set(bf);
 80015bc:	0020      	movs	r0, r4
 80015be:	f7ff fe71 	bl	80012a4 <nextion_inst_set>

	/* window outside */
	nextion_inst_set("fill 30,80,300,160,BLACK");
 80015c2:	4835      	ldr	r0, [pc, #212]	; (8001698 <window_display+0x144>)
 80015c4:	f7ff fe6e 	bl	80012a4 <nextion_inst_set>

	/* background sky draw */
	uint16_t color = day_state == day ? 52831 : 6250;
 80015c8:	9b03      	ldr	r3, [sp, #12]
	sprintf(bf, "fill 40,90,280,140,%d", color);
 80015ca:	4934      	ldr	r1, [pc, #208]	; (800169c <window_display+0x148>)
	uint16_t color = day_state == day ? 52831 : 6250;
 80015cc:	425a      	negs	r2, r3
 80015ce:	415a      	adcs	r2, r3
 80015d0:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <window_display+0x14c>)
 80015d2:	4252      	negs	r2, r2
 80015d4:	401a      	ands	r2, r3
 80015d6:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <window_display+0x150>)
	sprintf(bf, "fill 40,90,280,140,%d", color);
 80015d8:	0020      	movs	r0, r4
	uint16_t color = day_state == day ? 52831 : 6250;
 80015da:	18d2      	adds	r2, r2, r3
	sprintf(bf, "fill 40,90,280,140,%d", color);
 80015dc:	f002 fe18 	bl	8004210 <siprintf>
	nextion_inst_set(bf);
 80015e0:	0020      	movs	r0, r4
 80015e2:	f7ff fe5f 	bl	80012a4 <nextion_inst_set>

	/* sun draw */
	sprintf(bf, "cirs %d,%d,10,%s", sun_x, sun_y, day_state == day ? "RED" : "YELLOW");
 80015e6:	9a03      	ldr	r2, [sp, #12]
 80015e8:	4b2f      	ldr	r3, [pc, #188]	; (80016a8 <window_display+0x154>)
 80015ea:	2a00      	cmp	r2, #0
 80015ec:	d000      	beq.n	80015f0 <window_display+0x9c>
 80015ee:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <window_display+0x158>)
 80015f0:	9a04      	ldr	r2, [sp, #16]
 80015f2:	492f      	ldr	r1, [pc, #188]	; (80016b0 <window_display+0x15c>)
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	0020      	movs	r0, r4
 80015f8:	002b      	movs	r3, r5
 80015fa:	f002 fe09 	bl	8004210 <siprintf>
	nextion_inst_set(bf);
 80015fe:	0020      	movs	r0, r4
 8001600:	f7ff fe50 	bl	80012a4 <nextion_inst_set>

	/* sun outline draw */
	sprintf(bf, "cir %d,%d,11,BLACK", sun_x, sun_y);
 8001604:	002b      	movs	r3, r5

	/* window inside */
	sprintf(bf, "fill 40,90,%d,140,GRAY", *y);
	nextion_inst_set(bf);

	sprintf(bf, "fill %d,90,%d,140,GRAY", 180 + (140 - *y), *y);
 8001606:	25a0      	movs	r5, #160	; 0xa0
	sprintf(bf, "cir %d,%d,11,BLACK", sun_x, sun_y);
 8001608:	9a04      	ldr	r2, [sp, #16]
 800160a:	492a      	ldr	r1, [pc, #168]	; (80016b4 <window_display+0x160>)
 800160c:	0020      	movs	r0, r4
 800160e:	f002 fdff 	bl	8004210 <siprintf>
	nextion_inst_set(bf);
 8001612:	0020      	movs	r0, r4
 8001614:	f7ff fe46 	bl	80012a4 <nextion_inst_set>
	sprintf(bf, "fill 40,90,%d,140,GRAY", *y);
 8001618:	883a      	ldrh	r2, [r7, #0]
 800161a:	4927      	ldr	r1, [pc, #156]	; (80016b8 <window_display+0x164>)
 800161c:	0020      	movs	r0, r4
 800161e:	f002 fdf7 	bl	8004210 <siprintf>
	nextion_inst_set(bf);
 8001622:	0020      	movs	r0, r4
 8001624:	f7ff fe3e 	bl	80012a4 <nextion_inst_set>
	sprintf(bf, "fill %d,90,%d,140,GRAY", 180 + (140 - *y), *y);
 8001628:	883b      	ldrh	r3, [r7, #0]
 800162a:	006d      	lsls	r5, r5, #1
 800162c:	1aea      	subs	r2, r5, r3
 800162e:	4923      	ldr	r1, [pc, #140]	; (80016bc <window_display+0x168>)
 8001630:	0020      	movs	r0, r4
 8001632:	f002 fded 	bl	8004210 <siprintf>
	nextion_inst_set(bf);
 8001636:	0020      	movs	r0, r4
 8001638:	f7ff fe34 	bl	80012a4 <nextion_inst_set>

	/* window inside outline */
	sprintf(bf, "draw %d,90,%d,230,BLACK", 40, *y + 40);
 800163c:	4e20      	ldr	r6, [pc, #128]	; (80016c0 <window_display+0x16c>)
 800163e:	883b      	ldrh	r3, [r7, #0]
 8001640:	0031      	movs	r1, r6
 8001642:	2228      	movs	r2, #40	; 0x28
 8001644:	3328      	adds	r3, #40	; 0x28
 8001646:	0020      	movs	r0, r4
 8001648:	f002 fde2 	bl	8004210 <siprintf>
	nextion_inst_set(bf);
 800164c:	0020      	movs	r0, r4
 800164e:	f7ff fe29 	bl	80012a4 <nextion_inst_set>

	sprintf(bf, "draw %d,90,%d,230,BLACK", 180 + (140 - *y), 320);
 8001652:	883a      	ldrh	r2, [r7, #0]
 8001654:	002b      	movs	r3, r5
 8001656:	0031      	movs	r1, r6
 8001658:	1aaa      	subs	r2, r5, r2
 800165a:	0020      	movs	r0, r4
 800165c:	f002 fdd8 	bl	8004210 <siprintf>
	nextion_inst_set(bf);
 8001660:	0020      	movs	r0, r4
 8001662:	f7ff fe1f 	bl	80012a4 <nextion_inst_set>
}
 8001666:	b007      	add	sp, #28
 8001668:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else              time_sum = (time.hour - 7) * 60 + time.min;
 800166a:	1ff3      	subs	r3, r6, #7
 800166c:	434b      	muls	r3, r1
	if(time_sum < 720) day_state = day;
 800166e:	22b4      	movs	r2, #180	; 0xb4
	else              time_sum = (time.hour - 7) * 60 + time.min;
 8001670:	18c0      	adds	r0, r0, r3
	if(time_sum < 720) day_state = day;
 8001672:	2300      	movs	r3, #0
	else              time_sum = (time.hour - 7) * 60 + time.min;
 8001674:	b280      	uxth	r0, r0
	if(time_sum < 720) day_state = day;
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4290      	cmp	r0, r2
 800167a:	415b      	adcs	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	e77c      	b.n	800157a <window_display+0x26>
	else                   { sun_y = display_time * 5 / 100 + 100; }
 8001680:	0020      	movs	r0, r4
 8001682:	f7fe fde7 	bl	8000254 <__divsi3>
 8001686:	3064      	adds	r0, #100	; 0x64
 8001688:	b285      	uxth	r5, r0
 800168a:	e790      	b.n	80015ae <window_display+0x5a>
 800168c:	2000027c 	.word	0x2000027c
 8001690:	200000e9 	.word	0x200000e9
 8001694:	08004afa 	.word	0x08004afa
 8001698:	08004b2c 	.word	0x08004b2c
 800169c:	08004b45 	.word	0x08004b45
 80016a0:	0000b5f5 	.word	0x0000b5f5
 80016a4:	0000186a 	.word	0x0000186a
 80016a8:	08004aef 	.word	0x08004aef
 80016ac:	08004af3 	.word	0x08004af3
 80016b0:	08004b5b 	.word	0x08004b5b
 80016b4:	08004b6c 	.word	0x08004b6c
 80016b8:	08004b7f 	.word	0x08004b7f
 80016bc:	08004b96 	.word	0x08004b96
 80016c0:	08004bad 	.word	0x08004bad

080016c4 <auto_mode>:

/* auto mode function */
void auto_mode(uint8_t* mode_f){
	/* auto mode start */
	if(*mode_f == 1){
 80016c4:	7803      	ldrb	r3, [r0, #0]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d111      	bne.n	80016ee <auto_mode+0x2a>
		/* if humidity > 70 -> door open */
		if(sensor[ens160_co2].value > 1000){
 80016ca:	22fa      	movs	r2, #250	; 0xfa
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <auto_mode+0x70>)
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80016d2:	4291      	cmp	r1, r2
 80016d4:	d90c      	bls.n	80016f0 <auto_mode+0x2c>
			if(door_state == close && door_move == 0) { door_move = 1; auto_buz = 1; }
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <auto_mode+0x74>)
 80016d8:	4a18      	ldr	r2, [pc, #96]	; (800173c <auto_mode+0x78>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	4313      	orrs	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d104      	bne.n	80016ee <auto_mode+0x2a>
 80016e4:	2301      	movs	r3, #1
 80016e6:	4a15      	ldr	r2, [pc, #84]	; (800173c <auto_mode+0x78>)
 80016e8:	7013      	strb	r3, [r2, #0]
 80016ea:	4a15      	ldr	r2, [pc, #84]	; (8001740 <auto_mode+0x7c>)
 80016ec:	7013      	strb	r3, [r2, #0]
			else if(time.hour < 24){
				if(door_state == open && door_move == 0)  { door_move = 1; auto_buz = 1; }
			}
		}
	}
}
 80016ee:	4770      	bx	lr
		else if(sensor[sht41_hum].value > 700){
 80016f0:	22af      	movs	r2, #175	; 0xaf
 80016f2:	8b19      	ldrh	r1, [r3, #24]
 80016f4:	0092      	lsls	r2, r2, #2
 80016f6:	4291      	cmp	r1, r2
 80016f8:	d8ed      	bhi.n	80016d6 <auto_mode+0x12>
		else if(sensor[sht41_temp].value <= 300){
 80016fa:	3a91      	subs	r2, #145	; 0x91
 80016fc:	891b      	ldrh	r3, [r3, #8]
 80016fe:	3aff      	subs	r2, #255	; 0xff
 8001700:	4293      	cmp	r3, r2
 8001702:	d8f4      	bhi.n	80016ee <auto_mode+0x2a>
			if(time.hour < 10){
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <auto_mode+0x80>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b09      	cmp	r3, #9
 800170a:	d806      	bhi.n	800171a <auto_mode+0x56>
				if(door_state == open && door_move == 0)  { door_move = 1; auto_buz = 1; }
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <auto_mode+0x74>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d1ec      	bne.n	80016ee <auto_mode+0x2a>
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <auto_mode+0x78>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	e7e2      	b.n	80016e0 <auto_mode+0x1c>
			else if(time.hour < 11){
 800171a:	2b0a      	cmp	r3, #10
 800171c:	d0db      	beq.n	80016d6 <auto_mode+0x12>
			else if(time.hour < 13){
 800171e:	2b0c      	cmp	r3, #12
 8001720:	d9f4      	bls.n	800170c <auto_mode+0x48>
			else if(time.hour < 14){
 8001722:	2b0d      	cmp	r3, #13
 8001724:	d0d7      	beq.n	80016d6 <auto_mode+0x12>
			else if(time.hour < 16){
 8001726:	2b0f      	cmp	r3, #15
 8001728:	d9f0      	bls.n	800170c <auto_mode+0x48>
			else if(time.hour < 17){
 800172a:	2b10      	cmp	r3, #16
 800172c:	d0d3      	beq.n	80016d6 <auto_mode+0x12>
			else if(time.hour < 24){
 800172e:	2b17      	cmp	r3, #23
 8001730:	d8dd      	bhi.n	80016ee <auto_mode+0x2a>
 8001732:	e7eb      	b.n	800170c <auto_mode+0x48>
 8001734:	20000024 	.word	0x20000024
 8001738:	20000155 	.word	0x20000155
 800173c:	20000154 	.word	0x20000154
 8001740:	200000e8 	.word	0x200000e8
 8001744:	2000027c 	.word	0x2000027c

08001748 <task_fuc>:

/* main task function */
void task_fuc(void){
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
	nextion_inst_set("cls WHITE");        // clear screen
 800174a:	4cb2      	ldr	r4, [pc, #712]	; (8001a14 <task_fuc+0x2cc>)
void task_fuc(void){
 800174c:	b089      	sub	sp, #36	; 0x24
	nextion_inst_set("cls WHITE");        // clear screen
 800174e:	0020      	movs	r0, r4
 8001750:	f7ff fda8 	bl	80012a4 <nextion_inst_set>
	nextion_inst_set("cls WHITE");
 8001754:	0020      	movs	r0, r4
 8001756:	f7ff fda5 	bl	80012a4 <nextion_inst_set>
	nextion_inst_set("cls WHITE");
 800175a:	0020      	movs	r0, r4

	uint8_t rad = 0;                      // reset button radius
 800175c:	2400      	movs	r4, #0
	nextion_inst_set("cls WHITE");
 800175e:	f7ff fda1 	bl	80012a4 <nextion_inst_set>
	uint8_t rad = 0;                      // reset button radius
 8001762:	ab04      	add	r3, sp, #16
 8001764:	719c      	strb	r4, [r3, #6]
	uint8_t auto_f = 0;                   // auto mode state
 8001766:	71dc      	strb	r4, [r3, #7]
	uint16_t befo_touch = curXY.touched;  // state at before touch
 8001768:	4bab      	ldr	r3, [pc, #684]	; (8001a18 <task_fuc+0x2d0>)
	/* checking tick, using with hal_gettick */
	uint32_t time_tick = 0;
	uint32_t door_tick = 0;
	uint32_t buz_tick = 0;

	AREA_Typedef area = { 420 - 25, 220 - 25, 420 + 25, 220 + 25 }; // reset button area
 800176a:	2208      	movs	r2, #8
	uint16_t befo_touch = curXY.touched;  // state at before touch
 800176c:	791b      	ldrb	r3, [r3, #4]
	AREA_Typedef area = { 420 - 25, 220 - 25, 420 + 25, 220 + 25 }; // reset button area
 800176e:	49ab      	ldr	r1, [pc, #684]	; (8001a1c <task_fuc+0x2d4>)
 8001770:	a806      	add	r0, sp, #24
	uint16_t befo_touch = curXY.touched;  // state at before touch
 8001772:	9300      	str	r3, [sp, #0]
	AREA_Typedef area = { 420 - 25, 220 - 25, 420 + 25, 220 + 25 }; // reset button area
 8001774:	f002 fc46 	bl	8004004 <memcpy>
	uint32_t buz_tick = 0;
 8001778:	9401      	str	r4, [sp, #4]
	uint32_t door_tick = 0;
 800177a:	9403      	str	r4, [sp, #12]
	uint32_t time_tick = 0;
 800177c:	9402      	str	r4, [sp, #8]

	while(1){
		/* get touch coordinate */
		get_touch(&curXY);
 800177e:	4ea6      	ldr	r6, [pc, #664]	; (8001a18 <task_fuc+0x2d0>)
 8001780:	0030      	movs	r0, r6
 8001782:	f7ff fdad 	bl	80012e0 <get_touch>

		/* screen update */
		if(screen_update == 0){
 8001786:	4ba6      	ldr	r3, [pc, #664]	; (8001a20 <task_fuc+0x2d8>)
 8001788:	aa04      	add	r2, sp, #16
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	1dd4      	adds	r4, r2, #7
 800178e:	2b00      	cmp	r3, #0
 8001790:	d110      	bne.n	80017b4 <task_fuc+0x6c>
			/* auto button color set */
			button[auto_button].color = auto_f == 0 ? "GREEN" : "64517";
 8001792:	7822      	ldrb	r2, [r4, #0]
 8001794:	4ba3      	ldr	r3, [pc, #652]	; (8001a24 <task_fuc+0x2dc>)
 8001796:	2a00      	cmp	r2, #0
 8001798:	d000      	beq.n	800179c <task_fuc+0x54>
 800179a:	4ba3      	ldr	r3, [pc, #652]	; (8001a28 <task_fuc+0x2e0>)
 800179c:	4aa3      	ldr	r2, [pc, #652]	; (8001a2c <task_fuc+0x2e4>)

			/* window display */
			window_display(&door_coordinate);
 800179e:	48a4      	ldr	r0, [pc, #656]	; (8001a30 <task_fuc+0x2e8>)
			button[auto_button].color = auto_f == 0 ? "GREEN" : "64517";
 80017a0:	6093      	str	r3, [r2, #8]
			window_display(&door_coordinate);
 80017a2:	f7ff fed7 	bl	8001554 <window_display>

			/* button display */
			button_display(&rad);
 80017a6:	ab04      	add	r3, sp, #16
 80017a8:	1d98      	adds	r0, r3, #6
 80017aa:	f7ff fe71 	bl	8001490 <button_display>

			screen_update = 1;
 80017ae:	2201      	movs	r2, #1
 80017b0:	4b9b      	ldr	r3, [pc, #620]	; (8001a20 <task_fuc+0x2d8>)
 80017b2:	701a      	strb	r2, [r3, #0]
		}

		/* if touched */
		if(curXY.touched == 1){
 80017b4:	7937      	ldrb	r7, [r6, #4]
 80017b6:	2f01      	cmp	r7, #1
 80017b8:	d11a      	bne.n	80017f0 <task_fuc+0xa8>
			/* if touched reset button */
			if(area_check(&curXY, &area)){
 80017ba:	0030      	movs	r0, r6
 80017bc:	a906      	add	r1, sp, #24
 80017be:	f7ff fdcf 	bl	8001360 <area_check>
 80017c2:	1e05      	subs	r5, r0, #0
 80017c4:	d100      	bne.n	80017c8 <task_fuc+0x80>
 80017c6:	e07f      	b.n	80018c8 <task_fuc+0x180>
				static uint32_t tick;
				if(HAL_GetTick() - tick > 10){
 80017c8:	f000 fc0a 	bl	8001fe0 <HAL_GetTick>
 80017cc:	4d99      	ldr	r5, [pc, #612]	; (8001a34 <task_fuc+0x2ec>)
 80017ce:	682b      	ldr	r3, [r5, #0]
 80017d0:	1ac0      	subs	r0, r0, r3
 80017d2:	280a      	cmp	r0, #10
 80017d4:	d90c      	bls.n	80017f0 <task_fuc+0xa8>
					tick = HAL_GetTick();
 80017d6:	f000 fc03 	bl	8001fe0 <HAL_GetTick>

					/* circle radius plus */
					if(rad < 25) { rad++; screen_update = 0; }
 80017da:	ab04      	add	r3, sp, #16
					tick = HAL_GetTick();
 80017dc:	6028      	str	r0, [r5, #0]
					if(rad < 25) { rad++; screen_update = 0; }
 80017de:	1d9d      	adds	r5, r3, #6
 80017e0:	782b      	ldrb	r3, [r5, #0]
 80017e2:	2b18      	cmp	r3, #24
 80017e4:	d84b      	bhi.n	800187e <task_fuc+0x136>
 80017e6:	2200      	movs	r2, #0
 80017e8:	3301      	adds	r3, #1
 80017ea:	702b      	strb	r3, [r5, #0]
 80017ec:	4b8c      	ldr	r3, [pc, #560]	; (8001a20 <task_fuc+0x2d8>)
 80017ee:	701a      	strb	r2, [r3, #0]
				if(door_move == 0 && auto_f == 0) door_move = 1;
			}
		}

		/* auto mode run */
		auto_mode(&auto_f);
 80017f0:	0020      	movs	r0, r4
 80017f2:	f7ff ff67 	bl	80016c4 <auto_mode>

		/* time count */
		if(HAL_GetTick() - time_tick >= 1000){
 80017f6:	f000 fbf3 	bl	8001fe0 <HAL_GetTick>
 80017fa:	9b02      	ldr	r3, [sp, #8]
 80017fc:	4f88      	ldr	r7, [pc, #544]	; (8001a20 <task_fuc+0x2d8>)
 80017fe:	1ac0      	subs	r0, r0, r3
 8001800:	23fa      	movs	r3, #250	; 0xfa
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4298      	cmp	r0, r3
 8001806:	d31b      	bcc.n	8001840 <task_fuc+0xf8>
			screen_update = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	703b      	strb	r3, [r7, #0]
			time_tick = HAL_GetTick();
 800180c:	f000 fbe8 	bl	8001fe0 <HAL_GetTick>

			/* minute += 10 */
			if(SW(1)){
 8001810:	22a0      	movs	r2, #160	; 0xa0
			time_tick = HAL_GetTick();
 8001812:	9002      	str	r0, [sp, #8]
			if(SW(1)){
 8001814:	2001      	movs	r0, #1
 8001816:	05d2      	lsls	r2, r2, #23
 8001818:	6911      	ldr	r1, [r2, #16]
 800181a:	4b87      	ldr	r3, [pc, #540]	; (8001a38 <task_fuc+0x2f0>)
 800181c:	4201      	tst	r1, r0
 800181e:	d000      	beq.n	8001822 <task_fuc+0xda>
 8001820:	e09b      	b.n	800195a <task_fuc+0x212>
				time.min += 10;
 8001822:	785a      	ldrb	r2, [r3, #1]
 8001824:	0011      	movs	r1, r2
 8001826:	310a      	adds	r1, #10
 8001828:	b2c9      	uxtb	r1, r1
				if(time.min > 60){
 800182a:	293c      	cmp	r1, #60	; 0x3c
 800182c:	d900      	bls.n	8001830 <task_fuc+0xe8>
 800182e:	e088      	b.n	8001942 <task_fuc+0x1fa>
				time.min += 10;
 8001830:	7059      	strb	r1, [r3, #1]
				time.hour++;
				if(time.hour > 23) time.hour = 0;
			}

			/* sum of basic time */
			time.min++;
 8001832:	785a      	ldrb	r2, [r3, #1]
 8001834:	3201      	adds	r2, #1
 8001836:	b2d2      	uxtb	r2, r2
			if(time.min > 59){
 8001838:	2a3b      	cmp	r2, #59	; 0x3b
 800183a:	d900      	bls.n	800183e <task_fuc+0xf6>
 800183c:	e092      	b.n	8001964 <task_fuc+0x21c>
			time.min++;
 800183e:	705a      	strb	r2, [r3, #1]
				if(time.hour > 23) time.hour = 0;
			}
		}

		/* door count */
		if(HAL_GetTick() - door_tick >= 20){
 8001840:	f000 fbce 	bl	8001fe0 <HAL_GetTick>
 8001844:	9b03      	ldr	r3, [sp, #12]
 8001846:	1ac0      	subs	r0, r0, r3
 8001848:	2813      	cmp	r0, #19
 800184a:	d800      	bhi.n	800184e <task_fuc+0x106>
 800184c:	e097      	b.n	800197e <task_fuc+0x236>
			door_tick = HAL_GetTick();
 800184e:	f000 fbc7 	bl	8001fe0 <HAL_GetTick>

			if(door_move == 1){
 8001852:	4d7a      	ldr	r5, [pc, #488]	; (8001a3c <task_fuc+0x2f4>)
			door_tick = HAL_GetTick();
 8001854:	9003      	str	r0, [sp, #12]
			if(door_move == 1){
 8001856:	782e      	ldrb	r6, [r5, #0]
 8001858:	2e01      	cmp	r6, #1
 800185a:	d000      	beq.n	800185e <task_fuc+0x116>
 800185c:	e08f      	b.n	800197e <task_fuc+0x236>
				window_display(&door_coordinate);
 800185e:	4c74      	ldr	r4, [pc, #464]	; (8001a30 <task_fuc+0x2e8>)
 8001860:	0020      	movs	r0, r4
 8001862:	f7ff fe77 	bl	8001554 <window_display>

				/* door: close -> open state */
				if(door_state == close){
 8001866:	4a76      	ldr	r2, [pc, #472]	; (8001a40 <task_fuc+0x2f8>)
 8001868:	7811      	ldrb	r1, [r2, #0]
 800186a:	2900      	cmp	r1, #0
 800186c:	d000      	beq.n	8001870 <task_fuc+0x128>
 800186e:	e0bb      	b.n	80019e8 <task_fuc+0x2a0>
					if(door_coordinate > 10) door_coordinate--;
 8001870:	8823      	ldrh	r3, [r4, #0]
 8001872:	2b0a      	cmp	r3, #10
 8001874:	d800      	bhi.n	8001878 <task_fuc+0x130>
 8001876:	e080      	b.n	800197a <task_fuc+0x232>
 8001878:	3b01      	subs	r3, #1
					else { door_move = 0; door_state = open; }
				}
				/* door: open -> close state */
				else if(door_state == open){
					if(door_coordinate < 140) door_coordinate++;
 800187a:	8023      	strh	r3, [r4, #0]
 800187c:	e07f      	b.n	800197e <task_fuc+0x236>
						BUZ_hz_set(4000);
 800187e:	20fa      	movs	r0, #250	; 0xfa
 8001880:	0100      	lsls	r0, r0, #4
 8001882:	f7ff fd01 	bl	8001288 <BUZ_hz_set>
	if(state == 1) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001886:	f7ff fcc9 	bl	800121c <BUZ.part.0>
						HAL_Delay(100);
 800188a:	2064      	movs	r0, #100	; 0x64
 800188c:	f000 fbae 	bl	8001fec <HAL_Delay>
						BUZ(0);
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff fceb 	bl	800126c <BUZ>
						HAL_Delay(100);
 8001896:	2064      	movs	r0, #100	; 0x64
 8001898:	f000 fba8 	bl	8001fec <HAL_Delay>
	if(state == 1) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800189c:	f7ff fcbe 	bl	800121c <BUZ.part.0>
						HAL_Delay(100);
 80018a0:	2064      	movs	r0, #100	; 0x64
 80018a2:	f000 fba3 	bl	8001fec <HAL_Delay>
						BUZ(0);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f7ff fce0 	bl	800126c <BUZ>
						door_state = open;
 80018ac:	4b64      	ldr	r3, [pc, #400]	; (8001a40 <task_fuc+0x2f8>)
						time.hour = time.min = 0;
 80018ae:	4a62      	ldr	r2, [pc, #392]	; (8001a38 <task_fuc+0x2f0>)
						door_state = open;
 80018b0:	701f      	strb	r7, [r3, #0]
						door_move = 1;
 80018b2:	4b62      	ldr	r3, [pc, #392]	; (8001a3c <task_fuc+0x2f4>)
 80018b4:	701f      	strb	r7, [r3, #0]
						time.hour = time.min = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	7013      	strb	r3, [r2, #0]
 80018ba:	7053      	strb	r3, [r2, #1]
						screen_update = 0;
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <task_fuc+0x2d8>)
						rad = 0;
 80018be:	702b      	strb	r3, [r5, #0]
						screen_update = 0;
 80018c0:	7013      	strb	r3, [r2, #0]
						auto_f = 0;
 80018c2:	aa04      	add	r2, sp, #16
 80018c4:	71d3      	strb	r3, [r2, #7]
 80018c6:	e793      	b.n	80017f0 <task_fuc+0xa8>
			else if(area_check(&curXY, &button[time_button].area) && curXY.touched != befo_touch){
 80018c8:	4f58      	ldr	r7, [pc, #352]	; (8001a2c <task_fuc+0x2e4>)
 80018ca:	0030      	movs	r0, r6
 80018cc:	0039      	movs	r1, r7
 80018ce:	3110      	adds	r1, #16
 80018d0:	f7ff fd46 	bl	8001360 <area_check>
 80018d4:	4e52      	ldr	r6, [pc, #328]	; (8001a20 <task_fuc+0x2d8>)
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d00e      	beq.n	80018f8 <task_fuc+0x1b0>
 80018da:	9b00      	ldr	r3, [sp, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d00b      	beq.n	80018f8 <task_fuc+0x1b0>
				if(time.hour >= 7 && time.hour <= 18) time.hour = 19;
 80018e0:	4b55      	ldr	r3, [pc, #340]	; (8001a38 <task_fuc+0x2f0>)
 80018e2:	2113      	movs	r1, #19
 80018e4:	781a      	ldrb	r2, [r3, #0]
				screen_update = 0;
 80018e6:	7035      	strb	r5, [r6, #0]
				if(time.hour >= 7 && time.hour <= 18) time.hour = 19;
 80018e8:	3a07      	subs	r2, #7
 80018ea:	2a0b      	cmp	r2, #11
 80018ec:	d900      	bls.n	80018f0 <task_fuc+0x1a8>
				else time.hour = 7;
 80018ee:	390c      	subs	r1, #12
				time.min = 0;
 80018f0:	2200      	movs	r2, #0
 80018f2:	7019      	strb	r1, [r3, #0]
 80018f4:	705a      	strb	r2, [r3, #1]
 80018f6:	e77b      	b.n	80017f0 <task_fuc+0xa8>
			else if(area_check(&curXY, &button[auto_button].area) && curXY.touched != befo_touch){
 80018f8:	4d47      	ldr	r5, [pc, #284]	; (8001a18 <task_fuc+0x2d0>)
 80018fa:	0039      	movs	r1, r7
 80018fc:	0028      	movs	r0, r5
 80018fe:	f7ff fd2f 	bl	8001360 <area_check>
 8001902:	2800      	cmp	r0, #0
 8001904:	d009      	beq.n	800191a <task_fuc+0x1d2>
 8001906:	9b00      	ldr	r3, [sp, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d006      	beq.n	800191a <task_fuc+0x1d2>
				screen_update = 0;
 800190c:	2300      	movs	r3, #0
				auto_f ^= 1;
 800190e:	2201      	movs	r2, #1
				screen_update = 0;
 8001910:	7033      	strb	r3, [r6, #0]
				auto_f ^= 1;
 8001912:	7823      	ldrb	r3, [r4, #0]
 8001914:	4053      	eors	r3, r2
 8001916:	7023      	strb	r3, [r4, #0]
 8001918:	e76a      	b.n	80017f0 <task_fuc+0xa8>
			else if(area_check(&curXY, &window_area) && curXY.touched != befo_touch){
 800191a:	0028      	movs	r0, r5
 800191c:	4949      	ldr	r1, [pc, #292]	; (8001a44 <task_fuc+0x2fc>)
 800191e:	f7ff fd1f 	bl	8001360 <area_check>
 8001922:	2800      	cmp	r0, #0
 8001924:	d100      	bne.n	8001928 <task_fuc+0x1e0>
 8001926:	e763      	b.n	80017f0 <task_fuc+0xa8>
 8001928:	9b00      	ldr	r3, [sp, #0]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d100      	bne.n	8001930 <task_fuc+0x1e8>
 800192e:	e75f      	b.n	80017f0 <task_fuc+0xa8>
				if(door_move == 0 && auto_f == 0) door_move = 1;
 8001930:	4a42      	ldr	r2, [pc, #264]	; (8001a3c <task_fuc+0x2f4>)
 8001932:	7821      	ldrb	r1, [r4, #0]
 8001934:	7813      	ldrb	r3, [r2, #0]
 8001936:	430b      	orrs	r3, r1
 8001938:	d000      	beq.n	800193c <task_fuc+0x1f4>
 800193a:	e759      	b.n	80017f0 <task_fuc+0xa8>
 800193c:	3301      	adds	r3, #1
 800193e:	7013      	strb	r3, [r2, #0]
 8001940:	e756      	b.n	80017f0 <task_fuc+0xa8>
					time.min -= 60;
 8001942:	3a32      	subs	r2, #50	; 0x32
 8001944:	705a      	strb	r2, [r3, #1]
					time.hour++;
 8001946:	781a      	ldrb	r2, [r3, #0]
 8001948:	3201      	adds	r2, #1
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]
					if(time.hour > 23) time.hour = 0;
 800194e:	2a17      	cmp	r2, #23
 8001950:	d800      	bhi.n	8001954 <task_fuc+0x20c>
 8001952:	e76e      	b.n	8001832 <task_fuc+0xea>
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	e76b      	b.n	8001832 <task_fuc+0xea>
			else if(SW(2)){
 800195a:	6912      	ldr	r2, [r2, #16]
 800195c:	0792      	lsls	r2, r2, #30
 800195e:	d500      	bpl.n	8001962 <task_fuc+0x21a>
 8001960:	e767      	b.n	8001832 <task_fuc+0xea>
 8001962:	e7f0      	b.n	8001946 <task_fuc+0x1fe>
				time.min = 0;
 8001964:	2100      	movs	r1, #0
				time.hour++;
 8001966:	781a      	ldrb	r2, [r3, #0]
				time.min = 0;
 8001968:	7059      	strb	r1, [r3, #1]
				time.hour++;
 800196a:	3201      	adds	r2, #1
 800196c:	b2d2      	uxtb	r2, r2
				if(time.hour > 23) time.hour = 0;
 800196e:	2a17      	cmp	r2, #23
 8001970:	d801      	bhi.n	8001976 <task_fuc+0x22e>
				time.hour++;
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e764      	b.n	8001840 <task_fuc+0xf8>
				if(time.hour > 23) time.hour = 0;
 8001976:	7019      	strb	r1, [r3, #0]
 8001978:	e762      	b.n	8001840 <task_fuc+0xf8>
					else { door_move = 0; door_state = open; }
 800197a:	7029      	strb	r1, [r5, #0]
 800197c:	7016      	strb	r6, [r2, #0]
				}
			}
		}

		/* buzzer count */
		if(HAL_GetTick() - buz_tick >= 100){
 800197e:	f000 fb2f 	bl	8001fe0 <HAL_GetTick>
 8001982:	9b01      	ldr	r3, [sp, #4]
 8001984:	1ac0      	subs	r0, r0, r3
 8001986:	2863      	cmp	r0, #99	; 0x63
 8001988:	d916      	bls.n	80019b8 <task_fuc+0x270>
			buz_tick = HAL_GetTick();
 800198a:	f000 fb29 	bl	8001fe0 <HAL_GetTick>
			static uint8_t buz_cnt = 0;

			if(auto_buz == 1){
 800198e:	4c2e      	ldr	r4, [pc, #184]	; (8001a48 <task_fuc+0x300>)
			buz_tick = HAL_GetTick();
 8001990:	9001      	str	r0, [sp, #4]
			if(auto_buz == 1){
 8001992:	7823      	ldrb	r3, [r4, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d10f      	bne.n	80019b8 <task_fuc+0x270>
	if(state == 1) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001998:	f7ff fc40 	bl	800121c <BUZ.part.0>
				BUZ(1);
				buz_cnt++;
 800199c:	4a2b      	ldr	r2, [pc, #172]	; (8001a4c <task_fuc+0x304>)

				if(buz_cnt < 2)      BUZ_hz_set(1000);
 800199e:	20fa      	movs	r0, #250	; 0xfa
				buz_cnt++;
 80019a0:	7813      	ldrb	r3, [r2, #0]
 80019a2:	3301      	adds	r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	7013      	strb	r3, [r2, #0]
				if(buz_cnt < 2)      BUZ_hz_set(1000);
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d902      	bls.n	80019b2 <task_fuc+0x26a>
				else if(buz_cnt < 4) BUZ_hz_set(800);
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d826      	bhi.n	80019fe <task_fuc+0x2b6>
 80019b0:	20c8      	movs	r0, #200	; 0xc8
 80019b2:	0080      	lsls	r0, r0, #2
 80019b4:	f7ff fc68 	bl	8001288 <BUZ_hz_set>
				else { buz_cnt = auto_buz = 0; BUZ(0); }
			}
		}

		/* motor run */
		if(door_move == 1){
 80019b8:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <task_fuc+0x2f4>)
			if(door_state == close) setMotor(DRV8830_CW);
			else setMotor(DRV8830_CCW);
		}
		else setMotor(DRV8830_STOP);
 80019ba:	2000      	movs	r0, #0
		if(door_move == 1){
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d105      	bne.n	80019ce <task_fuc+0x286>
			if(door_state == close) setMotor(DRV8830_CW);
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <task_fuc+0x2f8>)
 80019c4:	2001      	movs	r0, #1
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d000      	beq.n	80019ce <task_fuc+0x286>
			else setMotor(DRV8830_CCW);
 80019cc:	2002      	movs	r0, #2
		else setMotor(DRV8830_STOP);
 80019ce:	f7ff fbd5 	bl	800117c <setMotor>

		/* touch check */
		if(curXY.touched != befo_touch) { screen_update = 0; rad = 0; }
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <task_fuc+0x2d0>)
 80019d4:	791a      	ldrb	r2, [r3, #4]
 80019d6:	9b00      	ldr	r3, [sp, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d003      	beq.n	80019e4 <task_fuc+0x29c>
 80019dc:	2300      	movs	r3, #0
 80019de:	a904      	add	r1, sp, #16
 80019e0:	703b      	strb	r3, [r7, #0]
 80019e2:	718b      	strb	r3, [r1, #6]
 80019e4:	9200      	str	r2, [sp, #0]
 80019e6:	e6ca      	b.n	800177e <task_fuc+0x36>
				else if(door_state == open){
 80019e8:	2901      	cmp	r1, #1
 80019ea:	d1c8      	bne.n	800197e <task_fuc+0x236>
					if(door_coordinate < 140) door_coordinate++;
 80019ec:	8823      	ldrh	r3, [r4, #0]
 80019ee:	2b8b      	cmp	r3, #139	; 0x8b
 80019f0:	d801      	bhi.n	80019f6 <task_fuc+0x2ae>
 80019f2:	3301      	adds	r3, #1
 80019f4:	e741      	b.n	800187a <task_fuc+0x132>
					else { door_move = 0; door_state = close; }
 80019f6:	2300      	movs	r3, #0
 80019f8:	702b      	strb	r3, [r5, #0]
 80019fa:	7013      	strb	r3, [r2, #0]
 80019fc:	e7bf      	b.n	800197e <task_fuc+0x236>
				else if(buz_cnt < 7) BUZ_hz_set(500);
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d802      	bhi.n	8001a08 <task_fuc+0x2c0>
 8001a02:	20fa      	movs	r0, #250	; 0xfa
 8001a04:	0040      	lsls	r0, r0, #1
 8001a06:	e7d5      	b.n	80019b4 <task_fuc+0x26c>
				else { buz_cnt = auto_buz = 0; BUZ(0); }
 8001a08:	2000      	movs	r0, #0
 8001a0a:	7020      	strb	r0, [r4, #0]
 8001a0c:	7010      	strb	r0, [r2, #0]
 8001a0e:	f7ff fc2d 	bl	800126c <BUZ>
 8001a12:	e7d1      	b.n	80019b8 <task_fuc+0x270>
 8001a14:	08004bcb 	.word	0x08004bcb
 8001a18:	2000014e 	.word	0x2000014e
 8001a1c:	08004910 	.word	0x08004910
 8001a20:	20000274 	.word	0x20000274
 8001a24:	08004abe 	.word	0x08004abe
 8001a28:	08004bc5 	.word	0x08004bc5
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000020 	.word	0x20000020
 8001a34:	20000278 	.word	0x20000278
 8001a38:	2000027c 	.word	0x2000027c
 8001a3c:	20000154 	.word	0x20000154
 8001a40:	20000155 	.word	0x20000155
 8001a44:	20000054 	.word	0x20000054
 8001a48:	200000e8 	.word	0x200000e8
 8001a4c:	2000014d 	.word	0x2000014d

08001a50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a50:	b510      	push	{r4, lr}
 8001a52:	b09c      	sub	sp, #112	; 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a54:	2224      	movs	r2, #36	; 0x24
 8001a56:	2100      	movs	r1, #0
 8001a58:	a80f      	add	r0, sp, #60	; 0x3c
 8001a5a:	f002 fadc 	bl	8004016 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a5e:	2214      	movs	r2, #20
 8001a60:	2100      	movs	r1, #0
 8001a62:	a801      	add	r0, sp, #4
 8001a64:	f002 fad7 	bl	8004016 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a68:	2220      	movs	r2, #32
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	a806      	add	r0, sp, #24
 8001a6e:	f002 fad2 	bl	8004016 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a72:	491d      	ldr	r1, [pc, #116]	; (8001ae8 <SystemClock_Config+0x98>)
 8001a74:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <SystemClock_Config+0x9c>)
 8001a76:	680b      	ldr	r3, [r1, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a78:	2401      	movs	r4, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	4313      	orrs	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a84:	2302      	movs	r3, #2
 8001a86:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a88:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	02db      	lsls	r3, r3, #11
 8001a92:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001a94:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a96:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001a98:	03db      	lsls	r3, r3, #15
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9a:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a9c:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a9e:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001aa0:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa2:	f001 f913 	bl	8002ccc <HAL_RCC_OscConfig>
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	d001      	beq.n	8001aae <SystemClock_Config+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aaa:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001aac:	e7fe      	b.n	8001aac <SystemClock_Config+0x5c>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aae:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab0:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab2:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ab4:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab6:	3b0c      	subs	r3, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab8:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001aba:	0021      	movs	r1, r4
 8001abc:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001abe:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ac0:	f001 fb86 	bl	80031d0 <HAL_RCC_ClockConfig>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0x7c>
 8001ac8:	b672      	cpsid	i
	while (1)
 8001aca:	e7fe      	b.n	8001aca <SystemClock_Config+0x7a>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001acc:	2309      	movs	r3, #9
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ace:	9008      	str	r0, [sp, #32]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ad0:	900b      	str	r0, [sp, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad2:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001ad4:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad6:	f001 fc69 	bl	80033ac <HAL_RCCEx_PeriphCLKConfig>
 8001ada:	2800      	cmp	r0, #0
 8001adc:	d001      	beq.n	8001ae2 <SystemClock_Config+0x92>
 8001ade:	b672      	cpsid	i
	while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <SystemClock_Config+0x90>
}
 8001ae2:	b01c      	add	sp, #112	; 0x70
 8001ae4:	bd10      	pop	{r4, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	ffffe7ff 	.word	0xffffe7ff

08001af0 <main>:
{
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2501      	movs	r5, #1
{
 8001af4:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 8001af6:	f000 fa53 	bl	8001fa0 <HAL_Init>
	SystemClock_Config();
 8001afa:	f7ff ffa9 	bl	8001a50 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afe:	2214      	movs	r2, #20
 8001b00:	2100      	movs	r1, #0
 8001b02:	a805      	add	r0, sp, #20
 8001b04:	f002 fa87 	bl	8004016 <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b08:	2102      	movs	r1, #2
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b0a:	27a0      	movs	r7, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <main+0x1b8>)
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b0e:	05ff      	lsls	r7, r7, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b12:	0038      	movs	r0, r7
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	432a      	orrs	r2, r5
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1a:	2400      	movs	r4, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	402a      	ands	r2, r5
 8001b1e:	9201      	str	r2, [sp, #4]
 8001b20:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	huart1.Instance = USART1;
 8001b24:	4e61      	ldr	r6, [pc, #388]	; (8001cac <main+0x1bc>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	430a      	orrs	r2, r1
 8001b28:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	400b      	ands	r3, r1
 8001b30:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b32:	3136      	adds	r1, #54	; 0x36
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b34:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b36:	f000 fb75 	bl	8002224 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8001b3a:	2307      	movs	r3, #7
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	0038      	movs	r0, r7
 8001b3e:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8001b40:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b42:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b44:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	f000 faad 	bl	80020a4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001b4a:	2338      	movs	r3, #56	; 0x38
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	0038      	movs	r0, r7
 8001b4e:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001b50:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f000 faa4 	bl	80020a4 <HAL_GPIO_Init>
	HAL_GPIO_Init(FAULTN_GPIO_Port, &GPIO_InitStruct);
 8001b5c:	4854      	ldr	r0, [pc, #336]	; (8001cb0 <main+0x1c0>)
 8001b5e:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = FAULTN_Pin;
 8001b60:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b62:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b64:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(FAULTN_GPIO_Port, &GPIO_InitStruct);
 8001b66:	f000 fa9d 	bl	80020a4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8001b6a:	230a      	movs	r3, #10
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6c:	4850      	ldr	r0, [pc, #320]	; (8001cb0 <main+0x1c0>)
 8001b6e:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8001b70:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b72:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f000 fa95 	bl	80020a4 <HAL_GPIO_Init>
	huart1.Init.BaudRate = 9600;
 8001b7a:	2396      	movs	r3, #150	; 0x96
	huart1.Instance = USART1;
 8001b7c:	484d      	ldr	r0, [pc, #308]	; (8001cb4 <main+0x1c4>)
	huart1.Init.BaudRate = 9600;
 8001b7e:	019b      	lsls	r3, r3, #6
 8001b80:	6043      	str	r3, [r0, #4]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001b82:	230c      	movs	r3, #12
	huart1.Instance = USART1;
 8001b84:	6006      	str	r6, [r0, #0]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b86:	6084      	str	r4, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001b88:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001b8a:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001b8c:	6143      	str	r3, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8e:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b90:	61c4      	str	r4, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b92:	6204      	str	r4, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b94:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b96:	f002 f9c5 	bl	8003f24 <HAL_UART_Init>
 8001b9a:	0005      	movs	r5, r0
 8001b9c:	42a0      	cmp	r0, r4
 8001b9e:	d001      	beq.n	8001ba4 <main+0xb4>
 8001ba0:	b672      	cpsid	i
	while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <main+0xb2>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	0001      	movs	r1, r0
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	a803      	add	r0, sp, #12
 8001baa:	f002 fa34 	bl	8004016 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001bae:	2210      	movs	r2, #16
 8001bb0:	0029      	movs	r1, r5
 8001bb2:	a805      	add	r0, sp, #20
 8001bb4:	f002 fa2f 	bl	8004016 <memset>
	htim2.Instance = TIM2;
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	4c3f      	ldr	r4, [pc, #252]	; (8001cb8 <main+0x1c8>)
 8001bbc:	05db      	lsls	r3, r3, #23
 8001bbe:	6023      	str	r3, [r4, #0]
	htim2.Init.Prescaler = 32-1;
 8001bc0:	231f      	movs	r3, #31
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bc2:	0020      	movs	r0, r4
	htim2.Init.Prescaler = 32-1;
 8001bc4:	6063      	str	r3, [r4, #4]
	htim2.Init.Period = 250-1;
 8001bc6:	33da      	adds	r3, #218	; 0xda
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc8:	60a5      	str	r5, [r4, #8]
	htim2.Init.Period = 250-1;
 8001bca:	60e3      	str	r3, [r4, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bcc:	6125      	str	r5, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bce:	6165      	str	r5, [r4, #20]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bd0:	f001 fd90 	bl	80036f4 <HAL_TIM_PWM_Init>
 8001bd4:	2800      	cmp	r0, #0
 8001bd6:	d001      	beq.n	8001bdc <main+0xec>
 8001bd8:	b672      	cpsid	i
	while (1)
 8001bda:	e7fe      	b.n	8001bda <main+0xea>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bdc:	9003      	str	r0, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bde:	9004      	str	r0, [sp, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be0:	a903      	add	r1, sp, #12
 8001be2:	0020      	movs	r0, r4
 8001be4:	f001 fe40 	bl	8003868 <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	1e02      	subs	r2, r0, #0
 8001bea:	d001      	beq.n	8001bf0 <main+0x100>
 8001bec:	b672      	cpsid	i
	while (1)
 8001bee:	e7fe      	b.n	8001bee <main+0xfe>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf0:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bf2:	9007      	str	r0, [sp, #28]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf4:	9305      	str	r3, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf6:	9008      	str	r0, [sp, #32]
	sConfigOC.Pulse = 125-1;
 8001bf8:	331c      	adds	r3, #28
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bfa:	0020      	movs	r0, r4
 8001bfc:	a905      	add	r1, sp, #20
	sConfigOC.Pulse = 125-1;
 8001bfe:	9306      	str	r3, [sp, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c00:	f001 fda4 	bl	800374c <HAL_TIM_PWM_ConfigChannel>
 8001c04:	1e05      	subs	r5, r0, #0
 8001c06:	d001      	beq.n	8001c0c <main+0x11c>
 8001c08:	b672      	cpsid	i
	while (1)
 8001c0a:	e7fe      	b.n	8001c0a <main+0x11a>
	HAL_TIM_MspPostInit(&htim2);
 8001c0c:	0020      	movs	r0, r4
 8001c0e:	f000 f8f9 	bl	8001e04 <HAL_TIM_MspPostInit>
	hi2c1.Instance = I2C1;
 8001c12:	4c2a      	ldr	r4, [pc, #168]	; (8001cbc <main+0x1cc>)
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <main+0x1d0>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c16:	0020      	movs	r0, r4
	hi2c1.Instance = I2C1;
 8001c18:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x00300F38;
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <main+0x1d4>)
	hi2c1.Init.OwnAddress1 = 0;
 8001c1c:	60a5      	str	r5, [r4, #8]
	hi2c1.Init.Timing = 0x00300F38;
 8001c1e:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c20:	2301      	movs	r3, #1
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c22:	6125      	str	r5, [r4, #16]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c24:	60e3      	str	r3, [r4, #12]
	hi2c1.Init.OwnAddress2 = 0;
 8001c26:	6165      	str	r5, [r4, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c28:	61a5      	str	r5, [r4, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c2a:	61e5      	str	r5, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c2c:	6225      	str	r5, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c2e:	f000 fc81 	bl	8002534 <HAL_I2C_Init>
 8001c32:	1e01      	subs	r1, r0, #0
 8001c34:	d001      	beq.n	8001c3a <main+0x14a>
 8001c36:	b672      	cpsid	i
	while (1)
 8001c38:	e7fe      	b.n	8001c38 <main+0x148>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c3a:	0020      	movs	r0, r4
 8001c3c:	f000 ffb4 	bl	8002ba8 <HAL_I2CEx_ConfigAnalogFilter>
 8001c40:	1e01      	subs	r1, r0, #0
 8001c42:	d001      	beq.n	8001c48 <main+0x158>
 8001c44:	b672      	cpsid	i
	while (1)
 8001c46:	e7fe      	b.n	8001c46 <main+0x156>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c48:	0020      	movs	r0, r4
 8001c4a:	f000 ffd3 	bl	8002bf4 <HAL_I2CEx_ConfigDigitalFilter>
 8001c4e:	1e04      	subs	r4, r0, #0
 8001c50:	d001      	beq.n	8001c56 <main+0x166>
 8001c52:	b672      	cpsid	i
	while (1)
 8001c54:	e7fe      	b.n	8001c54 <main+0x164>
	initEns160();
 8001c56:	f7ff fab5 	bl	80011c4 <initEns160>
	initDrv8830();
 8001c5a:	f7ff fa7b 	bl	8001154 <initDrv8830>
	LED(1,0);
 8001c5e:	2308      	movs	r3, #8
	nextion_inst_set("baud=921600");
 8001c60:	4d19      	ldr	r5, [pc, #100]	; (8001cc8 <main+0x1d8>)
	LED(1,0);
 8001c62:	61bb      	str	r3, [r7, #24]
	LED(2,0);
 8001c64:	18db      	adds	r3, r3, r3
 8001c66:	61bb      	str	r3, [r7, #24]
	LED(3,0);
 8001c68:	3310      	adds	r3, #16
 8001c6a:	61bb      	str	r3, [r7, #24]
	nextion_inst_set("baud=921600");
 8001c6c:	0028      	movs	r0, r5
 8001c6e:	f7ff fb19 	bl	80012a4 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 8001c72:	0028      	movs	r0, r5
 8001c74:	f7ff fb16 	bl	80012a4 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 8001c78:	0028      	movs	r0, r5
 8001c7a:	f7ff fb13 	bl	80012a4 <nextion_inst_set>
	HAL_Delay(50);
 8001c7e:	2032      	movs	r0, #50	; 0x32
 8001c80:	f000 f9b4 	bl	8001fec <HAL_Delay>
	USART1->CR1 &= (~USART_CR1_UE);
 8001c84:	2201      	movs	r2, #1
 8001c86:	6833      	ldr	r3, [r6, #0]
	HAL_Delay(1000);
 8001c88:	20fa      	movs	r0, #250	; 0xfa
	USART1->CR1 &= (~USART_CR1_UE);
 8001c8a:	4393      	bics	r3, r2
 8001c8c:	6033      	str	r3, [r6, #0]
	USART1->BRR = 0x23;
 8001c8e:	2323      	movs	r3, #35	; 0x23
 8001c90:	60f3      	str	r3, [r6, #12]
	USART1->CR1 |= USART_CR1_UE;
 8001c92:	6833      	ldr	r3, [r6, #0]
	HAL_Delay(1000);
 8001c94:	0080      	lsls	r0, r0, #2
	USART1->CR1 |= USART_CR1_UE;
 8001c96:	4313      	orrs	r3, r2
 8001c98:	6033      	str	r3, [r6, #0]
	HAL_Delay(1000);
 8001c9a:	f000 f9a7 	bl	8001fec <HAL_Delay>
	setMotor(DRV8830_STOP);
 8001c9e:	0020      	movs	r0, r4
 8001ca0:	f7ff fa6c 	bl	800117c <setMotor>
	task_fuc();
 8001ca4:	f7ff fd50 	bl	8001748 <task_fuc>
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40013800 	.word	0x40013800
 8001cb0:	50000400 	.word	0x50000400
 8001cb4:	200001ec 	.word	0x200001ec
 8001cb8:	200001ac 	.word	0x200001ac
 8001cbc:	20000158 	.word	0x20000158
 8001cc0:	40005400 	.word	0x40005400
 8001cc4:	00300f38 	.word	0x00300f38
 8001cc8:	08004bd5 	.word	0x08004bd5

08001ccc <getTempSht41>:
#include "sht41.h"

extern I2C_HandleTypeDef hi2c1;

SHT41_t	getTempSht41() {
 8001ccc:	b570      	push	{r4, r5, r6, lr}
	uint8_t txData = SHT41_MeasureHigh;
 8001cce:	250f      	movs	r5, #15
 8001cd0:	23fd      	movs	r3, #253	; 0xfd
	uint8_t	rxData[6];
	SHT41_t result;
	uint16_t buf[2];

	HAL_I2C_Init(&hi2c1);
 8001cd2:	4e21      	ldr	r6, [pc, #132]	; (8001d58 <getTempSht41+0x8c>)
SHT41_t	getTempSht41() {
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	0004      	movs	r4, r0
	uint8_t txData = SHT41_MeasureHigh;
 8001cd8:	446d      	add	r5, sp
	HAL_I2C_Init(&hi2c1);
 8001cda:	0030      	movs	r0, r6
	uint8_t txData = SHT41_MeasureHigh;
 8001cdc:	702b      	strb	r3, [r5, #0]
	HAL_I2C_Init(&hi2c1);
 8001cde:	f000 fc29 	bl	8002534 <HAL_I2C_Init>
	HAL_StatusTypeDef status = HAL_ERROR;
	HAL_I2C_Master_Transmit(&hi2c1, SHT41_DeviceAddress, &txData, 1, 1);
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	002a      	movs	r2, r5
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2189      	movs	r1, #137	; 0x89
 8001cea:	0030      	movs	r0, r6
 8001cec:	f000 fc78 	bl	80025e0 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001cf0:	2014      	movs	r0, #20
 8001cf2:	f000 f97b 	bl	8001fec <HAL_Delay>
	status = HAL_I2C_Master_Receive(&hi2c1, SHT41_DeviceAddress, rxData, 6, 10);
 8001cf6:	230a      	movs	r3, #10
 8001cf8:	ad04      	add	r5, sp, #16
 8001cfa:	002a      	movs	r2, r5
 8001cfc:	2189      	movs	r1, #137	; 0x89
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	0030      	movs	r0, r6
 8001d02:	3b04      	subs	r3, #4
 8001d04:	f000 fcfe 	bl	8002704 <HAL_I2C_Master_Receive>
	buf[0] = rxData[0] << 8 | rxData[1];
	buf[1] = rxData[3] << 8 | rxData[4];
	result.temperature = -45.0f + (175.0f * ((float)buf[0] / 65535.0f));
	result.humidity = -6.0f + (125.0f * ((float)buf[1] / 65535.0f));
 8001d08:	2213      	movs	r2, #19
 8001d0a:	446a      	add	r2, sp
 8001d0c:	7850      	ldrb	r0, [r2, #1]
 8001d0e:	7813      	ldrb	r3, [r2, #0]
 8001d10:	0200      	lsls	r0, r0, #8
 8001d12:	4318      	orrs	r0, r3
 8001d14:	ba40      	rev16	r0, r0
 8001d16:	b280      	uxth	r0, r0
 8001d18:	f7ff f8c6 	bl	8000ea8 <__aeabi_ui2f>
 8001d1c:	490f      	ldr	r1, [pc, #60]	; (8001d5c <getTempSht41+0x90>)
 8001d1e:	f7fe fcb7 	bl	8000690 <__aeabi_fdiv>
 8001d22:	490f      	ldr	r1, [pc, #60]	; (8001d60 <getTempSht41+0x94>)
 8001d24:	f7fe fdcc 	bl	80008c0 <__aeabi_fmul>
 8001d28:	490e      	ldr	r1, [pc, #56]	; (8001d64 <getTempSht41+0x98>)
 8001d2a:	f7fe feef 	bl	8000b0c <__aeabi_fsub>
 8001d2e:	1c06      	adds	r6, r0, #0
	result.temperature = -45.0f + (175.0f * ((float)buf[0] / 65535.0f));
 8001d30:	8828      	ldrh	r0, [r5, #0]
 8001d32:	ba40      	rev16	r0, r0
 8001d34:	b280      	uxth	r0, r0
 8001d36:	f7ff f8b7 	bl	8000ea8 <__aeabi_ui2f>
 8001d3a:	4908      	ldr	r1, [pc, #32]	; (8001d5c <getTempSht41+0x90>)
 8001d3c:	f7fe fca8 	bl	8000690 <__aeabi_fdiv>
 8001d40:	4909      	ldr	r1, [pc, #36]	; (8001d68 <getTempSht41+0x9c>)
 8001d42:	f7fe fdbd 	bl	80008c0 <__aeabi_fmul>
 8001d46:	4909      	ldr	r1, [pc, #36]	; (8001d6c <getTempSht41+0xa0>)
 8001d48:	f7fe fee0 	bl	8000b0c <__aeabi_fsub>
	return result;
 8001d4c:	6020      	str	r0, [r4, #0]
}
 8001d4e:	0020      	movs	r0, r4
	return result;
 8001d50:	6066      	str	r6, [r4, #4]
}
 8001d52:	b006      	add	sp, #24
 8001d54:	bd70      	pop	{r4, r5, r6, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	20000158 	.word	0x20000158
 8001d5c:	477fff00 	.word	0x477fff00
 8001d60:	42fa0000 	.word	0x42fa0000
 8001d64:	40c00000 	.word	0x40c00000
 8001d68:	432f0000 	.word	0x432f0000
 8001d6c:	42340000 	.word	0x42340000

08001d70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d70:	2201      	movs	r2, #1
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_MspInit+0x18>)
 8001d74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d76:	430a      	orrs	r2, r1
 8001d78:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	2280      	movs	r2, #128	; 0x80
 8001d7c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d7e:	0552      	lsls	r2, r2, #21
 8001d80:	430a      	orrs	r2, r1
 8001d82:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d84:	4770      	bx	lr
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	0004      	movs	r4, r0
 8001d90:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d92:	2214      	movs	r2, #20
 8001d94:	2100      	movs	r1, #0
 8001d96:	a801      	add	r0, sp, #4
 8001d98:	f002 f93d 	bl	8004016 <memset>
  if(hi2c->Instance==I2C1)
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_I2C_MspInit+0x50>)
 8001d9e:	6822      	ldr	r2, [r4, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d119      	bne.n	8001dd8 <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da4:	2102      	movs	r1, #2
 8001da6:	4c0e      	ldr	r4, [pc, #56]	; (8001de0 <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	480e      	ldr	r0, [pc, #56]	; (8001de4 <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dac:	430a      	orrs	r2, r1
 8001dae:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001db0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001db2:	400b      	ands	r3, r1
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db8:	23c0      	movs	r3, #192	; 0xc0
 8001dba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbc:	3bae      	subs	r3, #174	; 0xae
 8001dbe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	3b0f      	subs	r3, #15
 8001dc2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001dc6:	3b02      	subs	r3, #2
 8001dc8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dca:	f000 f96b 	bl	80020a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001dd2:	039b      	lsls	r3, r3, #14
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dd8:	b006      	add	sp, #24
 8001dda:	bd10      	pop	{r4, pc}
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	40021000 	.word	0x40021000
 8001de4:	50000400 	.word	0x50000400

08001de8 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	6802      	ldr	r2, [r0, #0]
 8001dec:	05db      	lsls	r3, r3, #23
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d104      	bne.n	8001dfc <HAL_TIM_PWM_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df2:	2301      	movs	r3, #1
 8001df4:	4a02      	ldr	r2, [pc, #8]	; (8001e00 <HAL_TIM_PWM_MspInit+0x18>)
 8001df6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dfc:	4770      	bx	lr
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	40021000 	.word	0x40021000

08001e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e04:	b510      	push	{r4, lr}
 8001e06:	0004      	movs	r4, r0
 8001e08:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0a:	2214      	movs	r2, #20
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	a801      	add	r0, sp, #4
 8001e10:	f002 f901 	bl	8004016 <memset>
  if(htim->Instance==TIM2)
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	6822      	ldr	r2, [r4, #0]
 8001e18:	05db      	lsls	r3, r3, #23
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d114      	bne.n	8001e48 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	2001      	movs	r0, #1
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_TIM_MspPostInit+0x48>)
 8001e22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e24:	4301      	orrs	r1, r0
 8001e26:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e28:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2c:	4003      	ands	r3, r0
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	021b      	lsls	r3, r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e38:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8001e40:	3303      	adds	r3, #3
 8001e42:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f000 f92e 	bl	80020a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e48:	b006      	add	sp, #24
 8001e4a:	bd10      	pop	{r4, pc}
 8001e4c:	40021000 	.word	0x40021000

08001e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e50:	b510      	push	{r4, lr}
 8001e52:	0004      	movs	r4, r0
 8001e54:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e56:	2214      	movs	r2, #20
 8001e58:	2100      	movs	r1, #0
 8001e5a:	a801      	add	r0, sp, #4
 8001e5c:	f002 f8db 	bl	8004016 <memset>
  if(huart->Instance==USART1)
 8001e60:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <HAL_UART_MspInit+0x54>)
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d11b      	bne.n	8001ea0 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e68:	2280      	movs	r2, #128	; 0x80
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <HAL_UART_MspInit+0x58>)
 8001e6c:	01d2      	lsls	r2, r2, #7
 8001e6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e72:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e74:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e76:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	400b      	ands	r3, r1
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001e88:	23c0      	movs	r3, #192	; 0xc0
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	185b      	adds	r3, r3, r1
 8001e94:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001e96:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001e9a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f000 f902 	bl	80020a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ea0:	b006      	add	sp, #24
 8001ea2:	bd10      	pop	{r4, pc}
 8001ea4:	40013800 	.word	0x40013800
 8001ea8:	40021000 	.word	0x40021000

08001eac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <NMI_Handler>

08001eae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <HardFault_Handler>

08001eb0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001eb0:	4770      	bx	lr

08001eb2 <PendSV_Handler>:
 8001eb2:	4770      	bx	lr

08001eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb6:	f000 f887 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001eba:	f000 f8ee 	bl	800209a <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001ebe:	bd10      	pop	{r4, pc}

08001ec0 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec0:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <_sbrk+0x30>)
 8001ec2:	490c      	ldr	r1, [pc, #48]	; (8001ef4 <_sbrk+0x34>)
{
 8001ec4:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec6:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <_sbrk+0x38>)
{
 8001eca:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001ecc:	6810      	ldr	r0, [r2, #0]
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d101      	bne.n	8001ed6 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8001ed2:	480a      	ldr	r0, [pc, #40]	; (8001efc <_sbrk+0x3c>)
 8001ed4:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed6:	6810      	ldr	r0, [r2, #0]
 8001ed8:	18c3      	adds	r3, r0, r3
 8001eda:	428b      	cmp	r3, r1
 8001edc:	d906      	bls.n	8001eec <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8001ede:	f002 f853 	bl	8003f88 <__errno>
 8001ee2:	230c      	movs	r3, #12
 8001ee4:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001eea:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001eec:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001eee:	e7fc      	b.n	8001eea <_sbrk+0x2a>
 8001ef0:	00000400 	.word	0x00000400
 8001ef4:	20002000 	.word	0x20002000
 8001ef8:	20000280 	.word	0x20000280
 8001efc:	20000298 	.word	0x20000298

08001f00 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f00:	4770      	bx	lr
	...

08001f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001f06:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f08:	f7ff fffa 	bl	8001f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f0e:	490d      	ldr	r1, [pc, #52]	; (8001f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f10:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <LoopForever+0xe>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f14:	e002      	b.n	8001f1c <LoopCopyDataInit>

08001f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1a:	3304      	adds	r3, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f20:	d3f9      	bcc.n	8001f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f24:	4c0a      	ldr	r4, [pc, #40]	; (8001f50 <LoopForever+0x16>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f28:	e001      	b.n	8001f2e <LoopFillZerobss>

08001f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f2c:	3204      	adds	r2, #4

08001f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f30:	d3fb      	bcc.n	8001f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f32:	f002 f82f 	bl	8003f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f36:	f7ff fddb 	bl	8001af0 <main>

08001f3a <LoopForever>:

LoopForever:
    b LoopForever
 8001f3a:	e7fe      	b.n	8001f3a <LoopForever>
   ldr   r0, =_estack
 8001f3c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f44:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001f48:	08004c64 	.word	0x08004c64
  ldr r2, =_sbss
 8001f4c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001f50:	20000298 	.word	0x20000298

08001f54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f54:	e7fe      	b.n	8001f54 <ADC1_COMP_IRQHandler>
	...

08001f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f58:	b570      	push	{r4, r5, r6, lr}
 8001f5a:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f5c:	20fa      	movs	r0, #250	; 0xfa
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_InitTick+0x3c>)
 8001f60:	0080      	lsls	r0, r0, #2
 8001f62:	7819      	ldrb	r1, [r3, #0]
 8001f64:	f7fe f8ec 	bl	8000140 <__udivsi3>
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_InitTick+0x40>)
 8001f6a:	0001      	movs	r1, r0
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	f7fe f8e7 	bl	8000140 <__udivsi3>
 8001f72:	f000 f877 	bl	8002064 <HAL_SYSTICK_Config>
 8001f76:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001f78:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f7a:	2c00      	cmp	r4, #0
 8001f7c:	d109      	bne.n	8001f92 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7e:	2d03      	cmp	r5, #3
 8001f80:	d807      	bhi.n	8001f92 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f82:	3802      	subs	r0, #2
 8001f84:	0022      	movs	r2, r4
 8001f86:	0029      	movs	r1, r5
 8001f88:	f000 f842 	bl	8002010 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f8c:	0020      	movs	r0, r4
 8001f8e:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_InitTick+0x44>)
 8001f90:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001f92:	bd70      	pop	{r4, r5, r6, pc}
 8001f94:	20000060 	.word	0x20000060
 8001f98:	2000005c 	.word	0x2000005c
 8001f9c:	20000064 	.word	0x20000064

08001fa0 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001fa0:	2340      	movs	r3, #64	; 0x40
 8001fa2:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <HAL_Init+0x24>)
{
 8001fa4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001fa6:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fa8:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001faa:	430b      	orrs	r3, r1
 8001fac:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fae:	f7ff ffd3 	bl	8001f58 <HAL_InitTick>
 8001fb2:	1e04      	subs	r4, r0, #0
 8001fb4:	d103      	bne.n	8001fbe <HAL_Init+0x1e>
    HAL_MspInit();
 8001fb6:	f7ff fedb 	bl	8001d70 <HAL_MspInit>
}
 8001fba:	0020      	movs	r0, r4
 8001fbc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001fbe:	2401      	movs	r4, #1
 8001fc0:	e7fb      	b.n	8001fba <HAL_Init+0x1a>
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	40022000 	.word	0x40022000

08001fc8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001fc8:	4a03      	ldr	r2, [pc, #12]	; (8001fd8 <HAL_IncTick+0x10>)
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <HAL_IncTick+0x14>)
 8001fcc:	6811      	ldr	r1, [r2, #0]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	185b      	adds	r3, r3, r1
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	4770      	bx	lr
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	20000284 	.word	0x20000284
 8001fdc:	20000060 	.word	0x20000060

08001fe0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001fe0:	4b01      	ldr	r3, [pc, #4]	; (8001fe8 <HAL_GetTick+0x8>)
 8001fe2:	6818      	ldr	r0, [r3, #0]
}
 8001fe4:	4770      	bx	lr
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	20000284 	.word	0x20000284

08001fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fec:	b570      	push	{r4, r5, r6, lr}
 8001fee:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ff0:	f7ff fff6 	bl	8001fe0 <HAL_GetTick>
 8001ff4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	1c63      	adds	r3, r4, #1
 8001ff8:	d002      	beq.n	8002000 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <HAL_Delay+0x20>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002000:	f7ff ffee 	bl	8001fe0 <HAL_GetTick>
 8002004:	1b40      	subs	r0, r0, r5
 8002006:	42a0      	cmp	r0, r4
 8002008:	d3fa      	bcc.n	8002000 <HAL_Delay+0x14>
  {
  }
}
 800200a:	bd70      	pop	{r4, r5, r6, pc}
 800200c:	20000060 	.word	0x20000060

08002010 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002010:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002012:	25ff      	movs	r5, #255	; 0xff
 8002014:	2403      	movs	r4, #3
 8002016:	002a      	movs	r2, r5
 8002018:	4004      	ands	r4, r0
 800201a:	00e4      	lsls	r4, r4, #3
 800201c:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800201e:	0189      	lsls	r1, r1, #6
 8002020:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002022:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002024:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002026:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8002028:	2800      	cmp	r0, #0
 800202a:	db0a      	blt.n	8002042 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800202c:	24c0      	movs	r4, #192	; 0xc0
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_NVIC_SetPriority+0x4c>)
 8002030:	0880      	lsrs	r0, r0, #2
 8002032:	0080      	lsls	r0, r0, #2
 8002034:	18c0      	adds	r0, r0, r3
 8002036:	00a4      	lsls	r4, r4, #2
 8002038:	5903      	ldr	r3, [r0, r4]
 800203a:	401a      	ands	r2, r3
 800203c:	4311      	orrs	r1, r2
 800203e:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002040:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002042:	200f      	movs	r0, #15
 8002044:	4003      	ands	r3, r0
 8002046:	3b08      	subs	r3, #8
 8002048:	4805      	ldr	r0, [pc, #20]	; (8002060 <HAL_NVIC_SetPriority+0x50>)
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	181b      	adds	r3, r3, r0
 8002050:	69d8      	ldr	r0, [r3, #28]
 8002052:	4002      	ands	r2, r0
 8002054:	4311      	orrs	r1, r2
 8002056:	61d9      	str	r1, [r3, #28]
 8002058:	e7f2      	b.n	8002040 <HAL_NVIC_SetPriority+0x30>
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	1e43      	subs	r3, r0, #1
 8002068:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800206a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	4293      	cmp	r3, r2
 800206e:	d20d      	bcs.n	800208c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002070:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002072:	4a07      	ldr	r2, [pc, #28]	; (8002090 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002074:	4807      	ldr	r0, [pc, #28]	; (8002094 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002076:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002078:	6a03      	ldr	r3, [r0, #32]
 800207a:	0609      	lsls	r1, r1, #24
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	430b      	orrs	r3, r1
 8002082:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002084:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002088:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800208c:	4770      	bx	lr
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	e000e010 	.word	0xe000e010
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002098:	4770      	bx	lr

0800209a <HAL_SYSTICK_IRQHandler>:
{
 800209a:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800209c:	f7ff fffc 	bl	8002098 <HAL_SYSTICK_Callback>
}
 80020a0:	bd10      	pop	{r4, pc}
	...

080020a4 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80020a4:	4a58      	ldr	r2, [pc, #352]	; (8002208 <HAL_GPIO_Init+0x164>)
{
 80020a6:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80020a8:	1882      	adds	r2, r0, r2
 80020aa:	1e54      	subs	r4, r2, #1
 80020ac:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 80020ae:	2300      	movs	r3, #0
{
 80020b0:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80020b2:	3205      	adds	r2, #5
{
 80020b4:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80020b6:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80020b8:	9a03      	ldr	r2, [sp, #12]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	0014      	movs	r4, r2
 80020be:	40dc      	lsrs	r4, r3
 80020c0:	d101      	bne.n	80020c6 <HAL_GPIO_Init+0x22>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 80020c2:	b007      	add	sp, #28
 80020c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80020c6:	2101      	movs	r1, #1
 80020c8:	000d      	movs	r5, r1
 80020ca:	0014      	movs	r4, r2
 80020cc:	409d      	lsls	r5, r3
 80020ce:	402c      	ands	r4, r5
 80020d0:	468c      	mov	ip, r1
 80020d2:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 80020d4:	422a      	tst	r2, r5
 80020d6:	d100      	bne.n	80020da <HAL_GPIO_Init+0x36>
 80020d8:	e094      	b.n	8002204 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020da:	2403      	movs	r4, #3
 80020dc:	9a03      	ldr	r2, [sp, #12]
 80020de:	005e      	lsls	r6, r3, #1
 80020e0:	6852      	ldr	r2, [r2, #4]
 80020e2:	9201      	str	r2, [sp, #4]
 80020e4:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80020e6:	40b4      	lsls	r4, r6
 80020e8:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020ea:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80020ec:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020ee:	4564      	cmp	r4, ip
 80020f0:	d82a      	bhi.n	8002148 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 80020f2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80020f4:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f6:	9903      	ldr	r1, [sp, #12]
 80020f8:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fa:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fc:	40b4      	lsls	r4, r6
 80020fe:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8002100:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002102:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002104:	43ac      	bics	r4, r5
 8002106:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002108:	090c      	lsrs	r4, r1, #4
 800210a:	4661      	mov	r1, ip
 800210c:	400c      	ands	r4, r1
 800210e:	409c      	lsls	r4, r3
 8002110:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002112:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8002114:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002116:	9904      	ldr	r1, [sp, #16]
 8002118:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211a:	9903      	ldr	r1, [sp, #12]
 800211c:	688c      	ldr	r4, [r1, #8]
 800211e:	40b4      	lsls	r4, r6
 8002120:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8002122:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002124:	2a02      	cmp	r2, #2
 8002126:	d111      	bne.n	800214c <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002128:	2507      	movs	r5, #7
 800212a:	210f      	movs	r1, #15
 800212c:	401d      	ands	r5, r3
 800212e:	00ad      	lsls	r5, r5, #2
 8002130:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8002132:	08dc      	lsrs	r4, r3, #3
 8002134:	00a4      	lsls	r4, r4, #2
 8002136:	1904      	adds	r4, r0, r4
 8002138:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800213a:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800213c:	9903      	ldr	r1, [sp, #12]
 800213e:	6909      	ldr	r1, [r1, #16]
 8002140:	40a9      	lsls	r1, r5
 8002142:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8002144:	6227      	str	r7, [r4, #32]
 8002146:	e001      	b.n	800214c <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002148:	2a03      	cmp	r2, #3
 800214a:	d1e3      	bne.n	8002114 <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800214c:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 800214e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002150:	9904      	ldr	r1, [sp, #16]
 8002152:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002154:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8002156:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002158:	22c0      	movs	r2, #192	; 0xc0
 800215a:	9901      	ldr	r1, [sp, #4]
 800215c:	0292      	lsls	r2, r2, #10
 800215e:	4211      	tst	r1, r2
 8002160:	d050      	beq.n	8002204 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	2701      	movs	r7, #1
 8002164:	4c29      	ldr	r4, [pc, #164]	; (800220c <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002166:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002168:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800216a:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216c:	433a      	orrs	r2, r7
 800216e:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8002170:	4a27      	ldr	r2, [pc, #156]	; (8002210 <HAL_GPIO_Init+0x16c>)
 8002172:	089c      	lsrs	r4, r3, #2
 8002174:	00a4      	lsls	r4, r4, #2
 8002176:	18a4      	adds	r4, r4, r2
 8002178:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800217a:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 800217c:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800217e:	220f      	movs	r2, #15
 8002180:	00ad      	lsls	r5, r5, #2
 8002182:	40aa      	lsls	r2, r5
 8002184:	4661      	mov	r1, ip
 8002186:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002188:	22a0      	movs	r2, #160	; 0xa0
 800218a:	05d2      	lsls	r2, r2, #23
 800218c:	4694      	mov	ip, r2
 800218e:	2200      	movs	r2, #0
 8002190:	4560      	cmp	r0, ip
 8002192:	d00d      	beq.n	80021b0 <HAL_GPIO_Init+0x10c>
 8002194:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <HAL_GPIO_Init+0x170>)
 8002196:	4694      	mov	ip, r2
 8002198:	003a      	movs	r2, r7
 800219a:	4560      	cmp	r0, ip
 800219c:	d008      	beq.n	80021b0 <HAL_GPIO_Init+0x10c>
 800219e:	4f1e      	ldr	r7, [pc, #120]	; (8002218 <HAL_GPIO_Init+0x174>)
 80021a0:	1892      	adds	r2, r2, r2
 80021a2:	42b8      	cmp	r0, r7
 80021a4:	d004      	beq.n	80021b0 <HAL_GPIO_Init+0x10c>
 80021a6:	4f1d      	ldr	r7, [pc, #116]	; (800221c <HAL_GPIO_Init+0x178>)
 80021a8:	0032      	movs	r2, r6
 80021aa:	42b8      	cmp	r0, r7
 80021ac:	d000      	beq.n	80021b0 <HAL_GPIO_Init+0x10c>
 80021ae:	9a05      	ldr	r2, [sp, #20]
 80021b0:	40aa      	lsls	r2, r5
 80021b2:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 80021b4:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b6:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 80021b8:	000d      	movs	r5, r1
        temp = EXTI->RTSR;
 80021ba:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 80021bc:	43cc      	mvns	r4, r1
        temp = EXTI->RTSR;
 80021be:	6896      	ldr	r6, [r2, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021c0:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80021c2:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021c4:	02c9      	lsls	r1, r1, #11
 80021c6:	d401      	bmi.n	80021cc <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 80021c8:	0035      	movs	r5, r6
 80021ca:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80021cc:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80021ce:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80021d0:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021d2:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80021d4:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021d6:	0289      	lsls	r1, r1, #10
 80021d8:	d401      	bmi.n	80021de <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 80021da:	0035      	movs	r5, r6
 80021dc:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 80021de:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80021e0:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80021e2:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e4:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80021e6:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e8:	0389      	lsls	r1, r1, #14
 80021ea:	d401      	bmi.n	80021f0 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 80021ec:	0035      	movs	r5, r6
 80021ee:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80021f0:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80021f2:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80021f4:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f6:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80021f8:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021fa:	03c9      	lsls	r1, r1, #15
 80021fc:	d401      	bmi.n	8002202 <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 80021fe:	4025      	ands	r5, r4
 8002200:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8002202:	6016      	str	r6, [r2, #0]
    position++;
 8002204:	3301      	adds	r3, #1
 8002206:	e757      	b.n	80020b8 <HAL_GPIO_Init+0x14>
 8002208:	afffe400 	.word	0xafffe400
 800220c:	40021000 	.word	0x40021000
 8002210:	40010000 	.word	0x40010000
 8002214:	50000400 	.word	0x50000400
 8002218:	50000800 	.word	0x50000800
 800221c:	50000c00 	.word	0x50000c00
 8002220:	40010400 	.word	0x40010400

08002224 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002224:	2a00      	cmp	r2, #0
 8002226:	d001      	beq.n	800222c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002228:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800222a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800222c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800222e:	e7fc      	b.n	800222a <HAL_GPIO_WritePin+0x6>

08002230 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002230:	6803      	ldr	r3, [r0, #0]
 8002232:	699a      	ldr	r2, [r3, #24]
 8002234:	0792      	lsls	r2, r2, #30
 8002236:	d501      	bpl.n	800223c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002238:	2200      	movs	r2, #0
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800223c:	2201      	movs	r2, #1
 800223e:	6999      	ldr	r1, [r3, #24]
 8002240:	4211      	tst	r1, r2
 8002242:	d102      	bne.n	800224a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002244:	6999      	ldr	r1, [r3, #24]
 8002246:	430a      	orrs	r2, r1
 8002248:	619a      	str	r2, [r3, #24]
  }
}
 800224a:	4770      	bx	lr

0800224c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800224c:	b530      	push	{r4, r5, lr}
 800224e:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002250:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002252:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002254:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002256:	0589      	lsls	r1, r1, #22
 8002258:	431a      	orrs	r2, r3
 800225a:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <I2C_TransferConfig+0x28>)
 800225e:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002260:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002262:	0d64      	lsrs	r4, r4, #21
 8002264:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002266:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002268:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800226a:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800226c:	432a      	orrs	r2, r5
 800226e:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002270:	bd30      	pop	{r4, r5, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	03ff63ff 	.word	0x03ff63ff

08002278 <I2C_IsErrorOccurred>:
{
 8002278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800227a:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 800227c:	6802      	ldr	r2, [r0, #0]
{
 800227e:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8002280:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002282:	2310      	movs	r3, #16
 8002284:	000f      	movs	r7, r1
{
 8002286:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002288:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 800228a:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800228c:	4219      	tst	r1, r3
 800228e:	d00e      	beq.n	80022ae <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002290:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002292:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8002294:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002296:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	423a      	tst	r2, r7
 800229e:	d164      	bne.n	800236a <I2C_IsErrorOccurred+0xf2>
 80022a0:	9a01      	ldr	r2, [sp, #4]
 80022a2:	2a00      	cmp	r2, #0
 80022a4:	d032      	beq.n	800230c <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 80022a6:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80022a8:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 80022aa:	9b00      	ldr	r3, [sp, #0]
 80022ac:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022ae:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 80022b0:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022b2:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 80022b4:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022b6:	420a      	tst	r2, r1
 80022b8:	d002      	beq.n	80022c0 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 80022ba:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022bc:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80022be:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	00c9      	lsls	r1, r1, #3
 80022c4:	420a      	tst	r2, r1
 80022c6:	d003      	beq.n	80022d0 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 80022c8:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022ca:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80022cc:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 80022ce:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022d0:	2180      	movs	r1, #128	; 0x80
 80022d2:	0089      	lsls	r1, r1, #2
 80022d4:	420a      	tst	r2, r1
 80022d6:	d04d      	beq.n	8002374 <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 80022d8:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022da:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 80022dc:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 80022de:	0020      	movs	r0, r4
 80022e0:	f7ff ffa6 	bl	8002230 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80022e4:	6822      	ldr	r2, [r4, #0]
 80022e6:	4925      	ldr	r1, [pc, #148]	; (800237c <I2C_IsErrorOccurred+0x104>)
 80022e8:	6853      	ldr	r3, [r2, #4]
 80022ea:	400b      	ands	r3, r1
 80022ec:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022ee:	0023      	movs	r3, r4
 80022f0:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80022f2:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022f4:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 80022f6:	4307      	orrs	r7, r0
 80022f8:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fc:	0022      	movs	r2, r4
 80022fe:	2300      	movs	r3, #0
 8002300:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8002302:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002306:	2001      	movs	r0, #1
 8002308:	7023      	strb	r3, [r4, #0]
 800230a:	e035      	b.n	8002378 <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 800230c:	1c72      	adds	r2, r6, #1
 800230e:	d0c4      	beq.n	800229a <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002310:	f7ff fe66 	bl	8001fe0 <HAL_GetTick>
 8002314:	1b40      	subs	r0, r0, r5
 8002316:	42b0      	cmp	r0, r6
 8002318:	d801      	bhi.n	800231e <I2C_IsErrorOccurred+0xa6>
 800231a:	2e00      	cmp	r6, #0
 800231c:	d1bc      	bne.n	8002298 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 800231e:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002320:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8002322:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002324:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002326:	7811      	ldrb	r1, [r2, #0]
 8002328:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800232a:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 800232c:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	0209      	lsls	r1, r1, #8
 8002332:	420a      	tst	r2, r1
 8002334:	d00c      	beq.n	8002350 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800233a:	4210      	tst	r0, r2
 800233c:	d108      	bne.n	8002350 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 800233e:	4661      	mov	r1, ip
 8002340:	2920      	cmp	r1, #32
 8002342:	d005      	beq.n	8002350 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002344:	6859      	ldr	r1, [r3, #4]
 8002346:	430a      	orrs	r2, r1
 8002348:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800234a:	f7ff fe49 	bl	8001fe0 <HAL_GetTick>
 800234e:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	423b      	tst	r3, r7
 8002356:	d19f      	bne.n	8002298 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002358:	f7ff fe42 	bl	8001fe0 <HAL_GetTick>
 800235c:	1b40      	subs	r0, r0, r5
 800235e:	2819      	cmp	r0, #25
 8002360:	d9f6      	bls.n	8002350 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002364:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	e796      	b.n	8002298 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 800236a:	9a01      	ldr	r2, [sp, #4]
 800236c:	2a00      	cmp	r2, #0
 800236e:	d19a      	bne.n	80022a6 <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002370:	61df      	str	r7, [r3, #28]
 8002372:	e798      	b.n	80022a6 <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8002374:	2800      	cmp	r0, #0
 8002376:	d1b2      	bne.n	80022de <I2C_IsErrorOccurred+0x66>
}
 8002378:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	fe00e800 	.word	0xfe00e800

08002380 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002382:	0004      	movs	r4, r0
 8002384:	000d      	movs	r5, r1
 8002386:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002388:	2702      	movs	r7, #2
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	423b      	tst	r3, r7
 8002390:	d001      	beq.n	8002396 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8002392:	2000      	movs	r0, #0
}
 8002394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002396:	0032      	movs	r2, r6
 8002398:	0029      	movs	r1, r5
 800239a:	0020      	movs	r0, r4
 800239c:	f7ff ff6c 	bl	8002278 <I2C_IsErrorOccurred>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d118      	bne.n	80023d6 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80023a4:	1c6b      	adds	r3, r5, #1
 80023a6:	d0f0      	beq.n	800238a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a8:	f7ff fe1a 	bl	8001fe0 <HAL_GetTick>
 80023ac:	1b80      	subs	r0, r0, r6
 80023ae:	42a8      	cmp	r0, r5
 80023b0:	d801      	bhi.n	80023b6 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80023b2:	2d00      	cmp	r5, #0
 80023b4:	d1e9      	bne.n	800238a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	001a      	movs	r2, r3
 80023bc:	403a      	ands	r2, r7
 80023be:	423b      	tst	r3, r7
 80023c0:	d1e3      	bne.n	800238a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023c2:	2120      	movs	r1, #32
 80023c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023c6:	430b      	orrs	r3, r1
 80023c8:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023ca:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 80023cc:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80023ce:	3341      	adds	r3, #65	; 0x41
 80023d0:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d2:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 80023d4:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80023d6:	2001      	movs	r0, #1
 80023d8:	e7dc      	b.n	8002394 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080023da <I2C_WaitOnFlagUntilTimeout>:
{
 80023da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023dc:	0004      	movs	r4, r0
 80023de:	000d      	movs	r5, r1
 80023e0:	0017      	movs	r7, r2
 80023e2:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e4:	6822      	ldr	r2, [r4, #0]
 80023e6:	6993      	ldr	r3, [r2, #24]
 80023e8:	402b      	ands	r3, r5
 80023ea:	1b5b      	subs	r3, r3, r5
 80023ec:	4259      	negs	r1, r3
 80023ee:	414b      	adcs	r3, r1
 80023f0:	42bb      	cmp	r3, r7
 80023f2:	d001      	beq.n	80023f8 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80023f4:	2000      	movs	r0, #0
 80023f6:	e01f      	b.n	8002438 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80023f8:	1c73      	adds	r3, r6, #1
 80023fa:	d0f4      	beq.n	80023e6 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fc:	f7ff fdf0 	bl	8001fe0 <HAL_GetTick>
 8002400:	9b06      	ldr	r3, [sp, #24]
 8002402:	1ac0      	subs	r0, r0, r3
 8002404:	42b0      	cmp	r0, r6
 8002406:	d801      	bhi.n	800240c <I2C_WaitOnFlagUntilTimeout+0x32>
 8002408:	2e00      	cmp	r6, #0
 800240a:	d1eb      	bne.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	402b      	ands	r3, r5
 8002412:	1b5b      	subs	r3, r3, r5
 8002414:	425a      	negs	r2, r3
 8002416:	4153      	adcs	r3, r2
 8002418:	42bb      	cmp	r3, r7
 800241a:	d1e3      	bne.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800241c:	2220      	movs	r2, #32
 800241e:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8002420:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002422:	4313      	orrs	r3, r2
 8002424:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002426:	0023      	movs	r3, r4
 8002428:	3341      	adds	r3, #65	; 0x41
 800242a:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	0022      	movs	r2, r4
 800242e:	2300      	movs	r3, #0
 8002430:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8002432:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002434:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8002436:	7023      	strb	r3, [r4, #0]
}
 8002438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800243a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800243a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243c:	0004      	movs	r4, r0
 800243e:	000e      	movs	r6, r1
 8002440:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002442:	2520      	movs	r5, #32
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	422b      	tst	r3, r5
 800244a:	d001      	beq.n	8002450 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800244c:	2000      	movs	r0, #0
}
 800244e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002450:	003a      	movs	r2, r7
 8002452:	0031      	movs	r1, r6
 8002454:	0020      	movs	r0, r4
 8002456:	f7ff ff0f 	bl	8002278 <I2C_IsErrorOccurred>
 800245a:	2800      	cmp	r0, #0
 800245c:	d115      	bne.n	800248a <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245e:	f7ff fdbf 	bl	8001fe0 <HAL_GetTick>
 8002462:	1bc0      	subs	r0, r0, r7
 8002464:	42b0      	cmp	r0, r6
 8002466:	d801      	bhi.n	800246c <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8002468:	2e00      	cmp	r6, #0
 800246a:	d1eb      	bne.n	8002444 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	001a      	movs	r2, r3
 8002472:	402a      	ands	r2, r5
 8002474:	422b      	tst	r3, r5
 8002476:	d1e5      	bne.n	8002444 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002478:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800247a:	432b      	orrs	r3, r5
 800247c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800247e:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8002480:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8002482:	3341      	adds	r3, #65	; 0x41
 8002484:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002486:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8002488:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 800248a:	2001      	movs	r0, #1
 800248c:	e7df      	b.n	800244e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

08002490 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	0004      	movs	r4, r0
 8002494:	000d      	movs	r5, r1
 8002496:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002498:	2604      	movs	r6, #4
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	4233      	tst	r3, r6
 80024a0:	d111      	bne.n	80024c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a2:	003a      	movs	r2, r7
 80024a4:	0029      	movs	r1, r5
 80024a6:	0020      	movs	r0, r4
 80024a8:	f7ff fee6 	bl	8002278 <I2C_IsErrorOccurred>
 80024ac:	2800      	cmp	r0, #0
 80024ae:	d124      	bne.n	80024fa <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024b0:	2120      	movs	r1, #32
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	420a      	tst	r2, r1
 80024b8:	d023      	beq.n	8002502 <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	4232      	tst	r2, r6
 80024be:	d004      	beq.n	80024ca <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80024c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80024c2:	2a00      	cmp	r2, #0
 80024c4:	d001      	beq.n	80024ca <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 80024c6:	2000      	movs	r0, #0
}
 80024c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024ca:	6999      	ldr	r1, [r3, #24]
 80024cc:	2210      	movs	r2, #16
 80024ce:	0008      	movs	r0, r1
 80024d0:	4010      	ands	r0, r2
 80024d2:	4211      	tst	r1, r2
 80024d4:	d013      	beq.n	80024fe <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80024d8:	3a0c      	subs	r2, #12
 80024da:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024dc:	2120      	movs	r1, #32
 80024de:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	4813      	ldr	r0, [pc, #76]	; (8002530 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>)
 80024e4:	4002      	ands	r2, r0
 80024e6:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80024e8:	0023      	movs	r3, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ea:	0022      	movs	r2, r4
        hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	3341      	adds	r3, #65	; 0x41
 80024ee:	7019      	strb	r1, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80024f4:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f6:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80024f8:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80024fa:	2001      	movs	r0, #1
 80024fc:	e7e4      	b.n	80024c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fe:	6460      	str	r0, [r4, #68]	; 0x44
 8002500:	e7ec      	b.n	80024dc <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002502:	f7ff fd6d 	bl	8001fe0 <HAL_GetTick>
 8002506:	1bc0      	subs	r0, r0, r7
 8002508:	42a8      	cmp	r0, r5
 800250a:	d801      	bhi.n	8002510 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 800250c:	2d00      	cmp	r5, #0
 800250e:	d1c4      	bne.n	800249a <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	0019      	movs	r1, r3
 8002516:	4031      	ands	r1, r6
 8002518:	4233      	tst	r3, r6
 800251a:	d1be      	bne.n	800249a <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800251c:	2220      	movs	r2, #32
 800251e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002520:	4313      	orrs	r3, r2
 8002522:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002524:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8002526:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8002528:	3341      	adds	r3, #65	; 0x41
 800252a:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 800252c:	7021      	strb	r1, [r4, #0]
        return HAL_ERROR;
 800252e:	e7e4      	b.n	80024fa <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
 8002530:	fe00e800 	.word	0xfe00e800

08002534 <HAL_I2C_Init>:
{
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002538:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800253a:	2c00      	cmp	r4, #0
 800253c:	d03f      	beq.n	80025be <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800253e:	0025      	movs	r5, r4
 8002540:	3541      	adds	r5, #65	; 0x41
 8002542:	782b      	ldrb	r3, [r5, #0]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d105      	bne.n	8002556 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800254a:	0023      	movs	r3, r4
 800254c:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800254e:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8002550:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8002552:	f7ff fc1b 	bl	8001d8c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002556:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002558:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800255a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800255c:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800255e:	481d      	ldr	r0, [pc, #116]	; (80025d4 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8002560:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002562:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8002564:	438a      	bics	r2, r1
 8002566:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002568:	6861      	ldr	r1, [r4, #4]
 800256a:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_I2C_Init+0xa4>)
 800256c:	400a      	ands	r2, r1
 800256e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	4002      	ands	r2, r0
 8002574:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002576:	68e2      	ldr	r2, [r4, #12]
 8002578:	2a01      	cmp	r2, #1
 800257a:	d121      	bne.n	80025c0 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800257c:	2180      	movs	r1, #128	; 0x80
 800257e:	0209      	lsls	r1, r1, #8
 8002580:	4331      	orrs	r1, r6
 8002582:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	4915      	ldr	r1, [pc, #84]	; (80025dc <HAL_I2C_Init+0xa8>)
 8002588:	4311      	orrs	r1, r2
 800258a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800258c:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800258e:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002590:	4002      	ands	r2, r0
 8002592:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002594:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002596:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002598:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800259a:	69a1      	ldr	r1, [r4, #24]
 800259c:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800259e:	430a      	orrs	r2, r1
 80025a0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025a2:	6a21      	ldr	r1, [r4, #32]
 80025a4:	69e2      	ldr	r2, [r4, #28]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80025aa:	2201      	movs	r2, #1
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80025b8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ba:	3442      	adds	r4, #66	; 0x42
 80025bc:	7020      	strb	r0, [r4, #0]
}
 80025be:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025c0:	2184      	movs	r1, #132	; 0x84
 80025c2:	0209      	lsls	r1, r1, #8
 80025c4:	4331      	orrs	r1, r6
 80025c6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	d1db      	bne.n	8002584 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025cc:	2280      	movs	r2, #128	; 0x80
 80025ce:	0112      	lsls	r2, r2, #4
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	e7d7      	b.n	8002584 <HAL_I2C_Init+0x50>
 80025d4:	ffff7fff 	.word	0xffff7fff
 80025d8:	f0ffffff 	.word	0xf0ffffff
 80025dc:	02008000 	.word	0x02008000

080025e0 <HAL_I2C_Master_Transmit>:
{
 80025e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e2:	b087      	sub	sp, #28
 80025e4:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e6:	0003      	movs	r3, r0
 80025e8:	3341      	adds	r3, #65	; 0x41
{
 80025ea:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ec:	9303      	str	r3, [sp, #12]
 80025ee:	781b      	ldrb	r3, [r3, #0]
{
 80025f0:	0004      	movs	r4, r0
 80025f2:	000f      	movs	r7, r1
    return HAL_BUSY;
 80025f4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	d114      	bne.n	8002624 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 80025fa:	0023      	movs	r3, r4
 80025fc:	3340      	adds	r3, #64	; 0x40
 80025fe:	781a      	ldrb	r2, [r3, #0]
 8002600:	2a01      	cmp	r2, #1
 8002602:	d00f      	beq.n	8002624 <HAL_I2C_Master_Transmit+0x44>
 8002604:	2601      	movs	r6, #1
 8002606:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8002608:	f7ff fcea 	bl	8001fe0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800260c:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800260e:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002610:	9000      	str	r0, [sp, #0]
 8002612:	2319      	movs	r3, #25
 8002614:	0032      	movs	r2, r6
 8002616:	0020      	movs	r0, r4
 8002618:	0209      	lsls	r1, r1, #8
 800261a:	f7ff fede 	bl	80023da <I2C_WaitOnFlagUntilTimeout>
 800261e:	2800      	cmp	r0, #0
 8002620:	d002      	beq.n	8002628 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 8002622:	2001      	movs	r0, #1
}
 8002624:	b007      	add	sp, #28
 8002626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002628:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800262a:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800262c:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800262e:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002630:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002632:	3b11      	subs	r3, #17
 8002634:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8002636:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002638:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800263a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800263c:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800263e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002640:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002642:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002644:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_I2C_Master_Transmit+0x11c>)
 8002646:	2aff      	cmp	r2, #255	; 0xff
 8002648:	d920      	bls.n	800268c <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800264a:	22ff      	movs	r2, #255	; 0xff
 800264c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002654:	0039      	movs	r1, r7
 8002656:	0020      	movs	r0, r4
 8002658:	f7ff fdf8 	bl	800224c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800265c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800265e:	002a      	movs	r2, r5
 8002660:	0020      	movs	r0, r4
 8002662:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8002664:	2b00      	cmp	r3, #0
 8002666:	d119      	bne.n	800269c <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002668:	f7ff fee7 	bl	800243a <I2C_WaitOnSTOPFlagUntilTimeout>
 800266c:	2800      	cmp	r0, #0
 800266e:	d1d8      	bne.n	8002622 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002670:	2120      	movs	r1, #32
 8002672:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002674:	4d22      	ldr	r5, [pc, #136]	; (8002700 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002676:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	402a      	ands	r2, r5
 800267c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800267e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002680:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002682:	3341      	adds	r3, #65	; 0x41
 8002684:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002686:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8002688:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800268a:	e7cb      	b.n	8002624 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800268c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800268e:	b292      	uxth	r2, r2
 8002690:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	049b      	lsls	r3, r3, #18
 800269a:	e7db      	b.n	8002654 <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269c:	f7ff fe70 	bl	8002380 <I2C_WaitOnTXISFlagUntilTimeout>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d1be      	bne.n	8002622 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026a6:	6822      	ldr	r2, [r4, #0]
 80026a8:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80026aa:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026ac:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80026ae:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80026b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026b2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026ba:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026be:	b292      	uxth	r2, r2
 80026c0:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0ca      	beq.n	800265c <HAL_I2C_Master_Transmit+0x7c>
 80026c6:	2a00      	cmp	r2, #0
 80026c8:	d1c8      	bne.n	800265c <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ca:	2180      	movs	r1, #128	; 0x80
 80026cc:	0020      	movs	r0, r4
 80026ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80026d0:	9500      	str	r5, [sp, #0]
 80026d2:	f7ff fe82 	bl	80023da <I2C_WaitOnFlagUntilTimeout>
 80026d6:	2800      	cmp	r0, #0
 80026d8:	d1a3      	bne.n	8002622 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026dc:	2bff      	cmp	r3, #255	; 0xff
 80026de:	d906      	bls.n	80026ee <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026e0:	23ff      	movs	r3, #255	; 0xff
 80026e2:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	22ff      	movs	r2, #255	; 0xff
 80026e8:	9000      	str	r0, [sp, #0]
 80026ea:	045b      	lsls	r3, r3, #17
 80026ec:	e7b2      	b.n	8002654 <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 80026ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80026f0:	b292      	uxth	r2, r2
 80026f2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	9000      	str	r0, [sp, #0]
 80026f8:	e7cd      	b.n	8002696 <HAL_I2C_Master_Transmit+0xb6>
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	80002000 	.word	0x80002000
 8002700:	fe00e800 	.word	0xfe00e800

08002704 <HAL_I2C_Master_Receive>:
{
 8002704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002706:	b087      	sub	sp, #28
 8002708:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800270a:	0003      	movs	r3, r0
 800270c:	3341      	adds	r3, #65	; 0x41
{
 800270e:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002710:	9303      	str	r3, [sp, #12]
 8002712:	781b      	ldrb	r3, [r3, #0]
{
 8002714:	0004      	movs	r4, r0
 8002716:	000f      	movs	r7, r1
    return HAL_BUSY;
 8002718:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800271a:	2b20      	cmp	r3, #32
 800271c:	d114      	bne.n	8002748 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 800271e:	0023      	movs	r3, r4
 8002720:	3340      	adds	r3, #64	; 0x40
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	2a01      	cmp	r2, #1
 8002726:	d00f      	beq.n	8002748 <HAL_I2C_Master_Receive+0x44>
 8002728:	2601      	movs	r6, #1
 800272a:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800272c:	f7ff fc58 	bl	8001fe0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002730:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8002732:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002734:	9000      	str	r0, [sp, #0]
 8002736:	2319      	movs	r3, #25
 8002738:	0032      	movs	r2, r6
 800273a:	0020      	movs	r0, r4
 800273c:	0209      	lsls	r1, r1, #8
 800273e:	f7ff fe4c 	bl	80023da <I2C_WaitOnFlagUntilTimeout>
 8002742:	2800      	cmp	r0, #0
 8002744:	d002      	beq.n	800274c <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 8002746:	2001      	movs	r0, #1
}
 8002748:	b007      	add	sp, #28
 800274a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800274c:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800274e:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002750:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002752:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002754:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002756:	3b12      	subs	r3, #18
 8002758:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 800275a:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800275e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002760:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8002762:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002764:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002766:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002768:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <HAL_I2C_Master_Receive+0x11c>)
 800276a:	2aff      	cmp	r2, #255	; 0xff
 800276c:	d920      	bls.n	80027b0 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800276e:	22ff      	movs	r2, #255	; 0xff
 8002770:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002778:	0039      	movs	r1, r7
 800277a:	0020      	movs	r0, r4
 800277c:	f7ff fd66 	bl	800224c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002780:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002782:	002a      	movs	r2, r5
 8002784:	0020      	movs	r0, r4
 8002786:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8002788:	2b00      	cmp	r3, #0
 800278a:	d119      	bne.n	80027c0 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278c:	f7ff fe55 	bl	800243a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002790:	2800      	cmp	r0, #0
 8002792:	d1d8      	bne.n	8002746 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002794:	2120      	movs	r1, #32
 8002796:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002798:	4d22      	ldr	r5, [pc, #136]	; (8002824 <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800279a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	402a      	ands	r2, r5
 80027a0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80027a2:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80027a4:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80027a6:	3341      	adds	r3, #65	; 0x41
 80027a8:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027aa:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 80027ac:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80027ae:	e7cb      	b.n	8002748 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 80027b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80027b2:	b292      	uxth	r2, r2
 80027b4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	049b      	lsls	r3, r3, #18
 80027be:	e7db      	b.n	8002778 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c0:	f7ff fe66 	bl	8002490 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d1be      	bne.n	8002746 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80027d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80027d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80027d4:	3301      	adds	r3, #1
 80027d6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80027d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80027da:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29b      	uxth	r3, r3
 80027e0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80027e4:	b292      	uxth	r2, r2
 80027e6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0c9      	beq.n	8002780 <HAL_I2C_Master_Receive+0x7c>
 80027ec:	2a00      	cmp	r2, #0
 80027ee:	d1c7      	bne.n	8002780 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	0020      	movs	r0, r4
 80027f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80027f6:	9500      	str	r5, [sp, #0]
 80027f8:	f7ff fdef 	bl	80023da <I2C_WaitOnFlagUntilTimeout>
 80027fc:	2800      	cmp	r0, #0
 80027fe:	d1a2      	bne.n	8002746 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002800:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002802:	2bff      	cmp	r3, #255	; 0xff
 8002804:	d906      	bls.n	8002814 <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002806:	23ff      	movs	r3, #255	; 0xff
 8002808:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	22ff      	movs	r2, #255	; 0xff
 800280e:	9000      	str	r0, [sp, #0]
 8002810:	045b      	lsls	r3, r3, #17
 8002812:	e7b1      	b.n	8002778 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8002814:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002816:	b292      	uxth	r2, r2
 8002818:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	9000      	str	r0, [sp, #0]
 800281e:	e7cc      	b.n	80027ba <HAL_I2C_Master_Receive+0xb6>
 8002820:	80002400 	.word	0x80002400
 8002824:	fe00e800 	.word	0xfe00e800

08002828 <HAL_I2C_Mem_Write>:
{
 8002828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	9304      	str	r3, [sp, #16]
 800282e:	ab0e      	add	r3, sp, #56	; 0x38
 8002830:	9203      	str	r2, [sp, #12]
 8002832:	cb04      	ldmia	r3!, {r2}
 8002834:	0004      	movs	r4, r0
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	9205      	str	r2, [sp, #20]
 800283a:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800283c:	0003      	movs	r3, r0
 800283e:	3341      	adds	r3, #65	; 0x41
 8002840:	9307      	str	r3, [sp, #28]
 8002842:	781b      	ldrb	r3, [r3, #0]
{
 8002844:	000f      	movs	r7, r1
    return HAL_BUSY;
 8002846:	2002      	movs	r0, #2
{
 8002848:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800284a:	2b20      	cmp	r3, #32
 800284c:	d108      	bne.n	8002860 <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 800284e:	2a00      	cmp	r2, #0
 8002850:	d002      	beq.n	8002858 <HAL_I2C_Mem_Write+0x30>
 8002852:	9b06      	ldr	r3, [sp, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800285e:	2001      	movs	r0, #1
}
 8002860:	b009      	add	sp, #36	; 0x24
 8002862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002864:	0023      	movs	r3, r4
 8002866:	3340      	adds	r3, #64	; 0x40
 8002868:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800286a:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 800286c:	2a01      	cmp	r2, #1
 800286e:	d0f7      	beq.n	8002860 <HAL_I2C_Mem_Write+0x38>
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002874:	f7ff fbb4 	bl	8001fe0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002878:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800287a:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800287c:	9000      	str	r0, [sp, #0]
 800287e:	2319      	movs	r3, #25
 8002880:	2201      	movs	r2, #1
 8002882:	0020      	movs	r0, r4
 8002884:	0209      	lsls	r1, r1, #8
 8002886:	f7ff fda8 	bl	80023da <I2C_WaitOnFlagUntilTimeout>
 800288a:	2800      	cmp	r0, #0
 800288c:	d1e7      	bne.n	800285e <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800288e:	2321      	movs	r3, #33	; 0x21
 8002890:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002892:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002894:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002896:	0023      	movs	r3, r4
 8002898:	3342      	adds	r3, #66	; 0x42
 800289a:	9307      	str	r3, [sp, #28]
 800289c:	2340      	movs	r3, #64	; 0x40
 800289e:	9a07      	ldr	r2, [sp, #28]
 80028a0:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 80028a2:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80028a6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80028a8:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 80028aa:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80028ac:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028ae:	466b      	mov	r3, sp
 80028b0:	7c1a      	ldrb	r2, [r3, #16]
 80028b2:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <HAL_I2C_Mem_Write+0x1b4>)
 80028b4:	0020      	movs	r0, r4
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	045b      	lsls	r3, r3, #17
 80028bc:	f7ff fcc6 	bl	800224c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028c0:	002a      	movs	r2, r5
 80028c2:	0031      	movs	r1, r6
 80028c4:	0020      	movs	r0, r4
 80028c6:	f7ff fd5b 	bl	8002380 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d126      	bne.n	800291c <HAL_I2C_Mem_Write+0xf4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ce:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028d0:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028d2:	2a01      	cmp	r2, #1
 80028d4:	d116      	bne.n	8002904 <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028d6:	466a      	mov	r2, sp
 80028d8:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028da:	2180      	movs	r1, #128	; 0x80
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028de:	0020      	movs	r0, r4
 80028e0:	0033      	movs	r3, r6
 80028e2:	2200      	movs	r2, #0
 80028e4:	9500      	str	r5, [sp, #0]
 80028e6:	f7ff fd78 	bl	80023da <I2C_WaitOnFlagUntilTimeout>
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d116      	bne.n	800291c <HAL_I2C_Mem_Write+0xf4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028f0:	2bff      	cmp	r3, #255	; 0xff
 80028f2:	d817      	bhi.n	8002924 <HAL_I2C_Mem_Write+0xfc>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028f4:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 80028f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028f8:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 80028fa:	b292      	uxth	r2, r2
 80028fc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	9000      	str	r0, [sp, #0]
 8002902:	e014      	b.n	800292e <HAL_I2C_Mem_Write+0x106>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002904:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002906:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002908:	0a12      	lsrs	r2, r2, #8
 800290a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800290c:	0020      	movs	r0, r4
 800290e:	002a      	movs	r2, r5
 8002910:	f7ff fd36 	bl	8002380 <I2C_WaitOnTXISFlagUntilTimeout>
 8002914:	2800      	cmp	r0, #0
 8002916:	d101      	bne.n	800291c <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	e7dc      	b.n	80028d6 <HAL_I2C_Mem_Write+0xae>
      __HAL_UNLOCK(hi2c);
 800291c:	2300      	movs	r3, #0
 800291e:	3440      	adds	r4, #64	; 0x40
 8002920:	7023      	strb	r3, [r4, #0]
 8002922:	e79c      	b.n	800285e <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002924:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002926:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002928:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800292a:	045b      	lsls	r3, r3, #17
 800292c:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800292e:	0039      	movs	r1, r7
 8002930:	0020      	movs	r0, r4
 8002932:	f7ff fc8b 	bl	800224c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002936:	002a      	movs	r2, r5
 8002938:	0031      	movs	r1, r6
 800293a:	0020      	movs	r0, r4
 800293c:	f7ff fd20 	bl	8002380 <I2C_WaitOnTXISFlagUntilTimeout>
 8002940:	2800      	cmp	r0, #0
 8002942:	d000      	beq.n	8002946 <HAL_I2C_Mem_Write+0x11e>
 8002944:	e78b      	b.n	800285e <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002948:	6822      	ldr	r2, [r4, #0]
 800294a:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800294c:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800294e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002950:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002952:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002954:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002956:	3b01      	subs	r3, #1
 8002958:	b29b      	uxth	r3, r3
 800295a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800295c:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800295e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002960:	b292      	uxth	r2, r2
 8002962:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002964:	2b00      	cmp	r3, #0
 8002966:	d017      	beq.n	8002998 <HAL_I2C_Mem_Write+0x170>
 8002968:	2a00      	cmp	r2, #0
 800296a:	d115      	bne.n	8002998 <HAL_I2C_Mem_Write+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800296c:	0033      	movs	r3, r6
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	0020      	movs	r0, r4
 8002972:	9500      	str	r5, [sp, #0]
 8002974:	f7ff fd31 	bl	80023da <I2C_WaitOnFlagUntilTimeout>
 8002978:	2800      	cmp	r0, #0
 800297a:	d000      	beq.n	800297e <HAL_I2C_Mem_Write+0x156>
 800297c:	e76f      	b.n	800285e <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800297e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002980:	2bff      	cmp	r3, #255	; 0xff
 8002982:	d923      	bls.n	80029cc <HAL_I2C_Mem_Write+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002984:	23ff      	movs	r3, #255	; 0xff
 8002986:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	22ff      	movs	r2, #255	; 0xff
 800298c:	9000      	str	r0, [sp, #0]
 800298e:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002990:	0039      	movs	r1, r7
 8002992:	0020      	movs	r0, r4
 8002994:	f7ff fc5a 	bl	800224c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002998:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1cb      	bne.n	8002936 <HAL_I2C_Mem_Write+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299e:	002a      	movs	r2, r5
 80029a0:	0031      	movs	r1, r6
 80029a2:	0020      	movs	r0, r4
 80029a4:	f7ff fd49 	bl	800243a <I2C_WaitOnSTOPFlagUntilTimeout>
 80029a8:	2800      	cmp	r0, #0
 80029aa:	d000      	beq.n	80029ae <HAL_I2C_Mem_Write+0x186>
 80029ac:	e757      	b.n	800285e <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ae:	2120      	movs	r1, #32
 80029b0:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80029b2:	4d0b      	ldr	r5, [pc, #44]	; (80029e0 <HAL_I2C_Mem_Write+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029b4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	402a      	ands	r2, r5
 80029ba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	0023      	movs	r3, r4
 80029be:	3341      	adds	r3, #65	; 0x41
 80029c0:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029c2:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 80029c4:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029c6:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80029c8:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80029ca:	e749      	b.n	8002860 <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029cc:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 80029ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029d0:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80029d2:	b292      	uxth	r2, r2
 80029d4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	9000      	str	r0, [sp, #0]
 80029da:	e7d9      	b.n	8002990 <HAL_I2C_Mem_Write+0x168>
 80029dc:	80002000 	.word	0x80002000
 80029e0:	fe00e800 	.word	0xfe00e800

080029e4 <HAL_I2C_Mem_Read>:
{
 80029e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	9304      	str	r3, [sp, #16]
 80029ea:	ab0e      	add	r3, sp, #56	; 0x38
 80029ec:	9203      	str	r2, [sp, #12]
 80029ee:	cb04      	ldmia	r3!, {r2}
 80029f0:	0004      	movs	r4, r0
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	9205      	str	r2, [sp, #20]
 80029f6:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f8:	0003      	movs	r3, r0
 80029fa:	3341      	adds	r3, #65	; 0x41
 80029fc:	9307      	str	r3, [sp, #28]
 80029fe:	781b      	ldrb	r3, [r3, #0]
{
 8002a00:	000f      	movs	r7, r1
    return HAL_BUSY;
 8002a02:	2002      	movs	r0, #2
{
 8002a04:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	d108      	bne.n	8002a1c <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 8002a0a:	2a00      	cmp	r2, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_I2C_Mem_Read+0x30>
 8002a0e:	9b06      	ldr	r3, [sp, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002a1a:	2001      	movs	r0, #1
}
 8002a1c:	b009      	add	sp, #36	; 0x24
 8002a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002a20:	0023      	movs	r3, r4
 8002a22:	3340      	adds	r3, #64	; 0x40
 8002a24:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8002a26:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8002a28:	2a01      	cmp	r2, #1
 8002a2a:	d0f7      	beq.n	8002a1c <HAL_I2C_Mem_Read+0x38>
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002a30:	f7ff fad6 	bl	8001fe0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	2319      	movs	r3, #25
 8002a38:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002a3a:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	0020      	movs	r0, r4
 8002a40:	0209      	lsls	r1, r1, #8
 8002a42:	f7ff fcca 	bl	80023da <I2C_WaitOnFlagUntilTimeout>
 8002a46:	1e03      	subs	r3, r0, #0
 8002a48:	d1e7      	bne.n	8002a1a <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a4a:	2222      	movs	r2, #34	; 0x22
 8002a4c:	9907      	ldr	r1, [sp, #28]
 8002a4e:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a50:	0022      	movs	r2, r4
 8002a52:	3242      	adds	r2, #66	; 0x42
 8002a54:	9207      	str	r2, [sp, #28]
 8002a56:	2240      	movs	r2, #64	; 0x40
 8002a58:	9907      	ldr	r1, [sp, #28]
 8002a5a:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8002a5c:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002a60:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a62:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a64:	494d      	ldr	r1, [pc, #308]	; (8002b9c <HAL_I2C_Mem_Read+0x1b8>)
    hi2c->XferCount = Size;
 8002a66:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a68:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8002a6a:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a6c:	7c12      	ldrb	r2, [r2, #16]
 8002a6e:	0020      	movs	r0, r4
 8002a70:	9100      	str	r1, [sp, #0]
 8002a72:	0039      	movs	r1, r7
 8002a74:	f7ff fbea 	bl	800224c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a78:	002a      	movs	r2, r5
 8002a7a:	0031      	movs	r1, r6
 8002a7c:	0020      	movs	r0, r4
 8002a7e:	f7ff fc7f 	bl	8002380 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d127      	bne.n	8002ad6 <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a86:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a88:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a8a:	2a01      	cmp	r2, #1
 8002a8c:	d117      	bne.n	8002abe <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a8e:	466a      	mov	r2, sp
 8002a90:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a92:	2140      	movs	r1, #64	; 0x40
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a96:	0020      	movs	r0, r4
 8002a98:	0033      	movs	r3, r6
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	9500      	str	r5, [sp, #0]
 8002a9e:	f7ff fc9c 	bl	80023da <I2C_WaitOnFlagUntilTimeout>
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	d117      	bne.n	8002ad6 <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aa6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002aa8:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <HAL_I2C_Mem_Read+0x1bc>)
 8002aaa:	2aff      	cmp	r2, #255	; 0xff
 8002aac:	d817      	bhi.n	8002ade <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 8002aae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002ab0:	b292      	uxth	r2, r2
 8002ab2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	049b      	lsls	r3, r3, #18
 8002abc:	e014      	b.n	8002ae8 <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002abe:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac0:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ac2:	0a12      	lsrs	r2, r2, #8
 8002ac4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac6:	0020      	movs	r0, r4
 8002ac8:	002a      	movs	r2, r5
 8002aca:	f7ff fc59 	bl	8002380 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	e7db      	b.n	8002a8e <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	3440      	adds	r4, #64	; 0x40
 8002ada:	7023      	strb	r3, [r4, #0]
 8002adc:	e79d      	b.n	8002a1a <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ade:	22ff      	movs	r2, #255	; 0xff
 8002ae0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae8:	0039      	movs	r1, r7
 8002aea:	0020      	movs	r0, r4
 8002aec:	f7ff fbae 	bl	800224c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002af0:	0033      	movs	r3, r6
 8002af2:	2200      	movs	r2, #0
 8002af4:	2104      	movs	r1, #4
 8002af6:	0020      	movs	r0, r4
 8002af8:	9500      	str	r5, [sp, #0]
 8002afa:	f7ff fc6e 	bl	80023da <I2C_WaitOnFlagUntilTimeout>
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d000      	beq.n	8002b04 <HAL_I2C_Mem_Read+0x120>
 8002b02:	e78a      	b.n	8002a1a <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002b0e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002b10:	3301      	adds	r3, #1
 8002b12:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002b14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002b16:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002b20:	b292      	uxth	r2, r2
 8002b22:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d017      	beq.n	8002b58 <HAL_I2C_Mem_Read+0x174>
 8002b28:	2a00      	cmp	r2, #0
 8002b2a:	d115      	bne.n	8002b58 <HAL_I2C_Mem_Read+0x174>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b2c:	0033      	movs	r3, r6
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	0020      	movs	r0, r4
 8002b32:	9500      	str	r5, [sp, #0]
 8002b34:	f7ff fc51 	bl	80023da <I2C_WaitOnFlagUntilTimeout>
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	d000      	beq.n	8002b3e <HAL_I2C_Mem_Read+0x15a>
 8002b3c:	e76d      	b.n	8002a1a <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b40:	2bff      	cmp	r3, #255	; 0xff
 8002b42:	d923      	bls.n	8002b8c <HAL_I2C_Mem_Read+0x1a8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b44:	23ff      	movs	r3, #255	; 0xff
 8002b46:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	22ff      	movs	r2, #255	; 0xff
 8002b4c:	9000      	str	r0, [sp, #0]
 8002b4e:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b50:	0039      	movs	r1, r7
 8002b52:	0020      	movs	r0, r4
 8002b54:	f7ff fb7a 	bl	800224c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002b58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1c8      	bne.n	8002af0 <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5e:	002a      	movs	r2, r5
 8002b60:	0031      	movs	r1, r6
 8002b62:	0020      	movs	r0, r4
 8002b64:	f7ff fc69 	bl	800243a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d000      	beq.n	8002b6e <HAL_I2C_Mem_Read+0x18a>
 8002b6c:	e755      	b.n	8002a1a <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b6e:	2120      	movs	r1, #32
 8002b70:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002b72:	4d0c      	ldr	r5, [pc, #48]	; (8002ba4 <HAL_I2C_Mem_Read+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b74:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	402a      	ands	r2, r5
 8002b7a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b7c:	0023      	movs	r3, r4
 8002b7e:	3341      	adds	r3, #65	; 0x41
 8002b80:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b82:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8002b84:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b86:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002b88:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002b8a:	e747      	b.n	8002a1c <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b8c:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8002b8e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b90:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002b92:	b292      	uxth	r2, r2
 8002b94:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	9000      	str	r0, [sp, #0]
 8002b9a:	e7d9      	b.n	8002b50 <HAL_I2C_Mem_Read+0x16c>
 8002b9c:	80002000 	.word	0x80002000
 8002ba0:	80002400 	.word	0x80002400
 8002ba4:	fe00e800 	.word	0xfe00e800

08002ba8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002baa:	0004      	movs	r4, r0
 8002bac:	3441      	adds	r4, #65	; 0x41
 8002bae:	7822      	ldrb	r2, [r4, #0]
{
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb6:	b2d6      	uxtb	r6, r2
 8002bb8:	2a20      	cmp	r2, #32
 8002bba:	d118      	bne.n	8002bee <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8002bbc:	001d      	movs	r5, r3
 8002bbe:	3540      	adds	r5, #64	; 0x40
 8002bc0:	782a      	ldrb	r2, [r5, #0]
 8002bc2:	2a01      	cmp	r2, #1
 8002bc4:	d013      	beq.n	8002bee <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3a23      	subs	r2, #35	; 0x23
 8002bce:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bd0:	4807      	ldr	r0, [pc, #28]	; (8002bf0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8002bd2:	4391      	bics	r1, r2
 8002bd4:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bd6:	6819      	ldr	r1, [r3, #0]
 8002bd8:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8002bda:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bdc:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bde:	6819      	ldr	r1, [r3, #0]
 8002be0:	4339      	orrs	r1, r7
 8002be2:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002be4:	6819      	ldr	r1, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002bec:	7028      	strb	r0, [r5, #0]
  }
}
 8002bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf0:	ffffefff 	.word	0xffffefff

08002bf4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf4:	0002      	movs	r2, r0
{
 8002bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf8:	3241      	adds	r2, #65	; 0x41
 8002bfa:	7814      	ldrb	r4, [r2, #0]
{
 8002bfc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfe:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002c00:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c02:	2c20      	cmp	r4, #32
 8002c04:	d117      	bne.n	8002c36 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002c06:	001c      	movs	r4, r3
 8002c08:	3440      	adds	r4, #64	; 0x40
 8002c0a:	7826      	ldrb	r6, [r4, #0]
 8002c0c:	2e01      	cmp	r6, #1
 8002c0e:	d012      	beq.n	8002c36 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c10:	3022      	adds	r0, #34	; 0x22
 8002c12:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3823      	subs	r0, #35	; 0x23
 8002c18:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002c1a:	4f07      	ldr	r7, [pc, #28]	; (8002c38 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8002c1c:	4386      	bics	r6, r0
 8002c1e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002c20:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8002c22:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002c24:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002c26:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002c28:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002c2a:	6819      	ldr	r1, [r3, #0]
 8002c2c:	4308      	orrs	r0, r1
 8002c2e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002c30:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002c32:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002c34:	7020      	strb	r0, [r4, #0]
  }
}
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	fffff0ff 	.word	0xfffff0ff

08002c3c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c3c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8002c40:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8002c42:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002c44:	4022      	ands	r2, r4
 8002c46:	2a08      	cmp	r2, #8
 8002c48:	d031      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0x72>
 8002c4a:	2a0c      	cmp	r2, #12
 8002c4c:	d009      	beq.n	8002c62 <HAL_RCC_GetSysClockFreq+0x26>
 8002c4e:	2a04      	cmp	r2, #4
 8002c50:	d125      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c52:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c56:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8002c58:	17c0      	asrs	r0, r0, #31
 8002c5a:	4018      	ands	r0, r3
 8002c5c:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x80>)
 8002c5e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8002c60:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c62:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c64:	4816      	ldr	r0, [pc, #88]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c66:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c68:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c6a:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c6c:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c6e:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c70:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c72:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c74:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c76:	4211      	tst	r1, r2
 8002c78:	d009      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x88>)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	2100      	movs	r1, #0
 8002c80:	f7fd fbf4 	bl	800046c <__aeabi_lmul>
 8002c84:	0022      	movs	r2, r4
 8002c86:	2300      	movs	r3, #0
 8002c88:	f7fd fbd0 	bl	800042c <__aeabi_uldivmod>
 8002c8c:	e7e8      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2310      	movs	r3, #16
 8002c92:	421a      	tst	r2, r3
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002c96:	4a0c      	ldr	r2, [pc, #48]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002c98:	e7f0      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c9a:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x80>)
 8002c9c:	e7ee      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c9e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002ca0:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002ca2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002ca8:	3301      	adds	r3, #1
 8002caa:	4098      	lsls	r0, r3
      break;
 8002cac:	e7d8      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8002cae:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x88>)
 8002cb0:	e7d6      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x24>
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	ff48e500 	.word	0xff48e500
 8002cbc:	00f42400 	.word	0x00f42400
 8002cc0:	08004c08 	.word	0x08004c08
 8002cc4:	007a1200 	.word	0x007a1200
 8002cc8:	003d0900 	.word	0x003d0900

08002ccc <HAL_RCC_OscConfig>:
{
 8002ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cce:	0005      	movs	r5, r0
 8002cd0:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d05a      	beq.n	8002d8c <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cd6:	230c      	movs	r3, #12
 8002cd8:	4cbe      	ldr	r4, [pc, #760]	; (8002fd4 <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cda:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cdc:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cde:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce0:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	025b      	lsls	r3, r3, #9
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cea:	07d2      	lsls	r2, r2, #31
 8002cec:	d442      	bmi.n	8002d74 <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cee:	682b      	ldr	r3, [r5, #0]
 8002cf0:	079b      	lsls	r3, r3, #30
 8002cf2:	d500      	bpl.n	8002cf6 <HAL_RCC_OscConfig+0x2a>
 8002cf4:	e08b      	b.n	8002e0e <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cf6:	682b      	ldr	r3, [r5, #0]
 8002cf8:	06db      	lsls	r3, r3, #27
 8002cfa:	d529      	bpl.n	8002d50 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cfc:	2e00      	cmp	r6, #0
 8002cfe:	d000      	beq.n	8002d02 <HAL_RCC_OscConfig+0x36>
 8002d00:	e0dc      	b.n	8002ebc <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	059b      	lsls	r3, r3, #22
 8002d06:	d502      	bpl.n	8002d0e <HAL_RCC_OscConfig+0x42>
 8002d08:	69eb      	ldr	r3, [r5, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d03e      	beq.n	8002d8c <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d0e:	6862      	ldr	r2, [r4, #4]
 8002d10:	49b1      	ldr	r1, [pc, #708]	; (8002fd8 <HAL_RCC_OscConfig+0x30c>)
 8002d12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002d14:	400a      	ands	r2, r1
 8002d16:	431a      	orrs	r2, r3
 8002d18:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d1a:	6861      	ldr	r1, [r4, #4]
 8002d1c:	6a2a      	ldr	r2, [r5, #32]
 8002d1e:	0209      	lsls	r1, r1, #8
 8002d20:	0a09      	lsrs	r1, r1, #8
 8002d22:	0612      	lsls	r2, r2, #24
 8002d24:	430a      	orrs	r2, r1
 8002d26:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d28:	2280      	movs	r2, #128	; 0x80
 8002d2a:	0b5b      	lsrs	r3, r3, #13
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	0212      	lsls	r2, r2, #8
 8002d30:	409a      	lsls	r2, r3
 8002d32:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002d34:	68e1      	ldr	r1, [r4, #12]
 8002d36:	060a      	lsls	r2, r1, #24
 8002d38:	49a8      	ldr	r1, [pc, #672]	; (8002fdc <HAL_RCC_OscConfig+0x310>)
 8002d3a:	0f12      	lsrs	r2, r2, #28
 8002d3c:	5c8a      	ldrb	r2, [r1, r2]
 8002d3e:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d40:	4aa7      	ldr	r2, [pc, #668]	; (8002fe0 <HAL_RCC_OscConfig+0x314>)
 8002d42:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8002d44:	4ba7      	ldr	r3, [pc, #668]	; (8002fe4 <HAL_RCC_OscConfig+0x318>)
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	f7ff f906 	bl	8001f58 <HAL_InitTick>
        if(status != HAL_OK)
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d134      	bne.n	8002dba <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	071b      	lsls	r3, r3, #28
 8002d54:	d500      	bpl.n	8002d58 <HAL_RCC_OscConfig+0x8c>
 8002d56:	e0e8      	b.n	8002f2a <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d58:	682b      	ldr	r3, [r5, #0]
 8002d5a:	075b      	lsls	r3, r3, #29
 8002d5c:	d500      	bpl.n	8002d60 <HAL_RCC_OscConfig+0x94>
 8002d5e:	e10a      	b.n	8002f76 <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d60:	682b      	ldr	r3, [r5, #0]
 8002d62:	069b      	lsls	r3, r3, #26
 8002d64:	d500      	bpl.n	8002d68 <HAL_RCC_OscConfig+0x9c>
 8002d66:	e18e      	b.n	8003086 <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d68:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d000      	beq.n	8002d70 <HAL_RCC_OscConfig+0xa4>
 8002d6e:	e1bd      	b.n	80030ec <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8002d70:	2000      	movs	r0, #0
 8002d72:	e022      	b.n	8002dba <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d74:	2e08      	cmp	r6, #8
 8002d76:	d003      	beq.n	8002d80 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d78:	2e0c      	cmp	r6, #12
 8002d7a:	d109      	bne.n	8002d90 <HAL_RCC_OscConfig+0xc4>
 8002d7c:	2f00      	cmp	r7, #0
 8002d7e:	d007      	beq.n	8002d90 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	039b      	lsls	r3, r3, #14
 8002d84:	d5b3      	bpl.n	8002cee <HAL_RCC_OscConfig+0x22>
 8002d86:	686b      	ldr	r3, [r5, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1b0      	bne.n	8002cee <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	e014      	b.n	8002dba <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d90:	686a      	ldr	r2, [r5, #4]
 8002d92:	428a      	cmp	r2, r1
 8002d94:	d113      	bne.n	8002dbe <HAL_RCC_OscConfig+0xf2>
 8002d96:	6822      	ldr	r2, [r4, #0]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d9c:	f7ff f920 	bl	8001fe0 <HAL_GetTick>
 8002da0:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	0292      	lsls	r2, r2, #10
 8002da8:	4213      	tst	r3, r2
 8002daa:	d1a0      	bne.n	8002cee <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7ff f918 	bl	8001fe0 <HAL_GetTick>
 8002db0:	9b00      	ldr	r3, [sp, #0]
 8002db2:	1ac0      	subs	r0, r0, r3
 8002db4:	2864      	cmp	r0, #100	; 0x64
 8002db6:	d9f4      	bls.n	8002da2 <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 8002db8:	2003      	movs	r0, #3
}
 8002dba:	b005      	add	sp, #20
 8002dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dbe:	21a0      	movs	r1, #160	; 0xa0
 8002dc0:	02c9      	lsls	r1, r1, #11
 8002dc2:	428a      	cmp	r2, r1
 8002dc4:	d105      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x106>
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	6821      	ldr	r1, [r4, #0]
 8002dca:	02d2      	lsls	r2, r2, #11
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	6022      	str	r2, [r4, #0]
 8002dd0:	e7e1      	b.n	8002d96 <HAL_RCC_OscConfig+0xca>
 8002dd2:	6821      	ldr	r1, [r4, #0]
 8002dd4:	4884      	ldr	r0, [pc, #528]	; (8002fe8 <HAL_RCC_OscConfig+0x31c>)
 8002dd6:	4001      	ands	r1, r0
 8002dd8:	6021      	str	r1, [r4, #0]
 8002dda:	6821      	ldr	r1, [r4, #0]
 8002ddc:	400b      	ands	r3, r1
 8002dde:	9303      	str	r3, [sp, #12]
 8002de0:	9b03      	ldr	r3, [sp, #12]
 8002de2:	4982      	ldr	r1, [pc, #520]	; (8002fec <HAL_RCC_OscConfig+0x320>)
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	400b      	ands	r3, r1
 8002de8:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dea:	2a00      	cmp	r2, #0
 8002dec:	d1d6      	bne.n	8002d9c <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 8002dee:	f7ff f8f7 	bl	8001fe0 <HAL_GetTick>
 8002df2:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	0292      	lsls	r2, r2, #10
 8002dfa:	4213      	tst	r3, r2
 8002dfc:	d100      	bne.n	8002e00 <HAL_RCC_OscConfig+0x134>
 8002dfe:	e776      	b.n	8002cee <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e00:	f7ff f8ee 	bl	8001fe0 <HAL_GetTick>
 8002e04:	9b00      	ldr	r3, [sp, #0]
 8002e06:	1ac0      	subs	r0, r0, r3
 8002e08:	2864      	cmp	r0, #100	; 0x64
 8002e0a:	d9f3      	bls.n	8002df4 <HAL_RCC_OscConfig+0x128>
 8002e0c:	e7d4      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 8002e0e:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e10:	2e04      	cmp	r6, #4
 8002e12:	d003      	beq.n	8002e1c <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e14:	2e0c      	cmp	r6, #12
 8002e16:	d124      	bne.n	8002e62 <HAL_RCC_OscConfig+0x196>
 8002e18:	2f00      	cmp	r7, #0
 8002e1a:	d122      	bne.n	8002e62 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	075b      	lsls	r3, r3, #29
 8002e20:	d501      	bpl.n	8002e26 <HAL_RCC_OscConfig+0x15a>
 8002e22:	2a00      	cmp	r2, #0
 8002e24:	d0b2      	beq.n	8002d8c <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e26:	6861      	ldr	r1, [r4, #4]
 8002e28:	692b      	ldr	r3, [r5, #16]
 8002e2a:	4871      	ldr	r0, [pc, #452]	; (8002ff0 <HAL_RCC_OscConfig+0x324>)
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	4001      	ands	r1, r0
 8002e30:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e32:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e34:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	438b      	bics	r3, r1
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e3e:	f7ff fefd 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8002e42:	68e3      	ldr	r3, [r4, #12]
 8002e44:	4a65      	ldr	r2, [pc, #404]	; (8002fdc <HAL_RCC_OscConfig+0x310>)
 8002e46:	061b      	lsls	r3, r3, #24
 8002e48:	0f1b      	lsrs	r3, r3, #28
 8002e4a:	5cd3      	ldrb	r3, [r2, r3]
 8002e4c:	40d8      	lsrs	r0, r3
 8002e4e:	4b64      	ldr	r3, [pc, #400]	; (8002fe0 <HAL_RCC_OscConfig+0x314>)
 8002e50:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8002e52:	4b64      	ldr	r3, [pc, #400]	; (8002fe4 <HAL_RCC_OscConfig+0x318>)
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	f7ff f87f 	bl	8001f58 <HAL_InitTick>
      if(status != HAL_OK)
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	d100      	bne.n	8002e60 <HAL_RCC_OscConfig+0x194>
 8002e5e:	e74a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x2a>
 8002e60:	e7ab      	b.n	8002dba <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e62:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8002e64:	2a00      	cmp	r2, #0
 8002e66:	d018      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e68:	2109      	movs	r1, #9
 8002e6a:	438b      	bics	r3, r1
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e70:	f7ff f8b6 	bl	8001fe0 <HAL_GetTick>
 8002e74:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e76:	2204      	movs	r2, #4
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	4213      	tst	r3, r2
 8002e7c:	d007      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7e:	6862      	ldr	r2, [r4, #4]
 8002e80:	692b      	ldr	r3, [r5, #16]
 8002e82:	495b      	ldr	r1, [pc, #364]	; (8002ff0 <HAL_RCC_OscConfig+0x324>)
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	400a      	ands	r2, r1
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	6063      	str	r3, [r4, #4]
 8002e8c:	e733      	b.n	8002cf6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e8e:	f7ff f8a7 	bl	8001fe0 <HAL_GetTick>
 8002e92:	1bc0      	subs	r0, r0, r7
 8002e94:	2802      	cmp	r0, #2
 8002e96:	d9ee      	bls.n	8002e76 <HAL_RCC_OscConfig+0x1aa>
 8002e98:	e78e      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002ea0:	f7ff f89e 	bl	8001fe0 <HAL_GetTick>
 8002ea4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	4213      	tst	r3, r2
 8002eac:	d100      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1e4>
 8002eae:	e722      	b.n	8002cf6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7ff f896 	bl	8001fe0 <HAL_GetTick>
 8002eb4:	1bc0      	subs	r0, r0, r7
 8002eb6:	2802      	cmp	r0, #2
 8002eb8:	d9f5      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x1da>
 8002eba:	e77d      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ebc:	69eb      	ldr	r3, [r5, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d020      	beq.n	8002f04 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	6822      	ldr	r2, [r4, #0]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002ecc:	f7ff f888 	bl	8001fe0 <HAL_GetTick>
 8002ed0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ed2:	2280      	movs	r2, #128	; 0x80
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	0092      	lsls	r2, r2, #2
 8002ed8:	4213      	tst	r3, r2
 8002eda:	d00d      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002edc:	6863      	ldr	r3, [r4, #4]
 8002ede:	4a3e      	ldr	r2, [pc, #248]	; (8002fd8 <HAL_RCC_OscConfig+0x30c>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ee8:	6862      	ldr	r2, [r4, #4]
 8002eea:	6a2b      	ldr	r3, [r5, #32]
 8002eec:	0212      	lsls	r2, r2, #8
 8002eee:	061b      	lsls	r3, r3, #24
 8002ef0:	0a12      	lsrs	r2, r2, #8
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	6063      	str	r3, [r4, #4]
 8002ef6:	e72b      	b.n	8002d50 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ef8:	f7ff f872 	bl	8001fe0 <HAL_GetTick>
 8002efc:	1bc0      	subs	r0, r0, r7
 8002efe:	2802      	cmp	r0, #2
 8002f00:	d9e7      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x206>
 8002f02:	e759      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	4a3b      	ldr	r2, [pc, #236]	; (8002ff4 <HAL_RCC_OscConfig+0x328>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f0c:	f7ff f868 	bl	8001fe0 <HAL_GetTick>
 8002f10:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	0092      	lsls	r2, r2, #2
 8002f18:	4213      	tst	r3, r2
 8002f1a:	d100      	bne.n	8002f1e <HAL_RCC_OscConfig+0x252>
 8002f1c:	e718      	b.n	8002d50 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f1e:	f7ff f85f 	bl	8001fe0 <HAL_GetTick>
 8002f22:	1bc0      	subs	r0, r0, r7
 8002f24:	2802      	cmp	r0, #2
 8002f26:	d9f4      	bls.n	8002f12 <HAL_RCC_OscConfig+0x246>
 8002f28:	e746      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f2a:	696a      	ldr	r2, [r5, #20]
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	2a00      	cmp	r2, #0
 8002f30:	d010      	beq.n	8002f54 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8002f32:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002f34:	4313      	orrs	r3, r2
 8002f36:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002f38:	f7ff f852 	bl	8001fe0 <HAL_GetTick>
 8002f3c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f3e:	2202      	movs	r2, #2
 8002f40:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002f42:	4213      	tst	r3, r2
 8002f44:	d000      	beq.n	8002f48 <HAL_RCC_OscConfig+0x27c>
 8002f46:	e707      	b.n	8002d58 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f48:	f7ff f84a 	bl	8001fe0 <HAL_GetTick>
 8002f4c:	1bc0      	subs	r0, r0, r7
 8002f4e:	2802      	cmp	r0, #2
 8002f50:	d9f5      	bls.n	8002f3e <HAL_RCC_OscConfig+0x272>
 8002f52:	e731      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 8002f54:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002f56:	439a      	bics	r2, r3
 8002f58:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002f5a:	f7ff f841 	bl	8001fe0 <HAL_GetTick>
 8002f5e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f60:	2202      	movs	r2, #2
 8002f62:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002f64:	4213      	tst	r3, r2
 8002f66:	d100      	bne.n	8002f6a <HAL_RCC_OscConfig+0x29e>
 8002f68:	e6f6      	b.n	8002d58 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6a:	f7ff f839 	bl	8001fe0 <HAL_GetTick>
 8002f6e:	1bc0      	subs	r0, r0, r7
 8002f70:	2802      	cmp	r0, #2
 8002f72:	d9f5      	bls.n	8002f60 <HAL_RCC_OscConfig+0x294>
 8002f74:	e720      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f76:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002f78:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002f7c:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f80:	421a      	tst	r2, r3
 8002f82:	d104      	bne.n	8002f8e <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002f86:	4313      	orrs	r3, r2
 8002f88:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	4f19      	ldr	r7, [pc, #100]	; (8002ff8 <HAL_RCC_OscConfig+0x32c>)
 8002f92:	0052      	lsls	r2, r2, #1
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4213      	tst	r3, r2
 8002f98:	d008      	beq.n	8002fac <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	68ab      	ldr	r3, [r5, #8]
 8002f9e:	0052      	lsls	r2, r2, #1
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d12b      	bne.n	8002ffc <HAL_RCC_OscConfig+0x330>
 8002fa4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	6523      	str	r3, [r4, #80]	; 0x50
 8002faa:	e04c      	b.n	8003046 <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	0052      	lsls	r2, r2, #1
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002fb6:	f7ff f813 	bl	8001fe0 <HAL_GetTick>
 8002fba:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	2280      	movs	r2, #128	; 0x80
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	0052      	lsls	r2, r2, #1
 8002fc2:	4213      	tst	r3, r2
 8002fc4:	d1e9      	bne.n	8002f9a <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc6:	f7ff f80b 	bl	8001fe0 <HAL_GetTick>
 8002fca:	9b01      	ldr	r3, [sp, #4]
 8002fcc:	1ac0      	subs	r0, r0, r3
 8002fce:	2864      	cmp	r0, #100	; 0x64
 8002fd0:	d9f4      	bls.n	8002fbc <HAL_RCC_OscConfig+0x2f0>
 8002fd2:	e6f1      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	ffff1fff 	.word	0xffff1fff
 8002fdc:	08004bf0 	.word	0x08004bf0
 8002fe0:	2000005c 	.word	0x2000005c
 8002fe4:	20000064 	.word	0x20000064
 8002fe8:	fffeffff 	.word	0xfffeffff
 8002fec:	fffbffff 	.word	0xfffbffff
 8002ff0:	ffffe0ff 	.word	0xffffe0ff
 8002ff4:	fffffeff 	.word	0xfffffeff
 8002ff8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d116      	bne.n	800302e <HAL_RCC_OscConfig+0x362>
 8003000:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003002:	4a6b      	ldr	r2, [pc, #428]	; (80031b0 <HAL_RCC_OscConfig+0x4e4>)
 8003004:	4013      	ands	r3, r2
 8003006:	6523      	str	r3, [r4, #80]	; 0x50
 8003008:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800300a:	4a6a      	ldr	r2, [pc, #424]	; (80031b4 <HAL_RCC_OscConfig+0x4e8>)
 800300c:	4013      	ands	r3, r2
 800300e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003010:	f7fe ffe6 	bl	8001fe0 <HAL_GetTick>
 8003014:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003016:	2280      	movs	r2, #128	; 0x80
 8003018:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800301a:	0092      	lsls	r2, r2, #2
 800301c:	4213      	tst	r3, r2
 800301e:	d01a      	beq.n	8003056 <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fe ffde 	bl	8001fe0 <HAL_GetTick>
 8003024:	4b64      	ldr	r3, [pc, #400]	; (80031b8 <HAL_RCC_OscConfig+0x4ec>)
 8003026:	1bc0      	subs	r0, r0, r7
 8003028:	4298      	cmp	r0, r3
 800302a:	d9f4      	bls.n	8003016 <HAL_RCC_OscConfig+0x34a>
 800302c:	e6c4      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302e:	21a0      	movs	r1, #160	; 0xa0
 8003030:	00c9      	lsls	r1, r1, #3
 8003032:	428b      	cmp	r3, r1
 8003034:	d118      	bne.n	8003068 <HAL_RCC_OscConfig+0x39c>
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	430b      	orrs	r3, r1
 800303e:	6523      	str	r3, [r4, #80]	; 0x50
 8003040:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003042:	431a      	orrs	r2, r3
 8003044:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003046:	f7fe ffcb 	bl	8001fe0 <HAL_GetTick>
 800304a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800304c:	2280      	movs	r2, #128	; 0x80
 800304e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003050:	0092      	lsls	r2, r2, #2
 8003052:	4213      	tst	r3, r2
 8003054:	d010      	beq.n	8003078 <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 8003056:	9b00      	ldr	r3, [sp, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d000      	beq.n	800305e <HAL_RCC_OscConfig+0x392>
 800305c:	e680      	b.n	8002d60 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 800305e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003060:	4a56      	ldr	r2, [pc, #344]	; (80031bc <HAL_RCC_OscConfig+0x4f0>)
 8003062:	4013      	ands	r3, r2
 8003064:	63a3      	str	r3, [r4, #56]	; 0x38
 8003066:	e67b      	b.n	8002d60 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003068:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800306a:	4a51      	ldr	r2, [pc, #324]	; (80031b0 <HAL_RCC_OscConfig+0x4e4>)
 800306c:	4013      	ands	r3, r2
 800306e:	6523      	str	r3, [r4, #80]	; 0x50
 8003070:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003072:	4a50      	ldr	r2, [pc, #320]	; (80031b4 <HAL_RCC_OscConfig+0x4e8>)
 8003074:	4013      	ands	r3, r2
 8003076:	e797      	b.n	8002fa8 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003078:	f7fe ffb2 	bl	8001fe0 <HAL_GetTick>
 800307c:	4b4e      	ldr	r3, [pc, #312]	; (80031b8 <HAL_RCC_OscConfig+0x4ec>)
 800307e:	1bc0      	subs	r0, r0, r7
 8003080:	4298      	cmp	r0, r3
 8003082:	d9e3      	bls.n	800304c <HAL_RCC_OscConfig+0x380>
 8003084:	e698      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003086:	69a9      	ldr	r1, [r5, #24]
 8003088:	2301      	movs	r3, #1
 800308a:	4a4d      	ldr	r2, [pc, #308]	; (80031c0 <HAL_RCC_OscConfig+0x4f4>)
 800308c:	2900      	cmp	r1, #0
 800308e:	d018      	beq.n	80030c2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 8003090:	68a1      	ldr	r1, [r4, #8]
 8003092:	4319      	orrs	r1, r3
 8003094:	60a1      	str	r1, [r4, #8]
 8003096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003098:	430b      	orrs	r3, r1
 800309a:	6363      	str	r3, [r4, #52]	; 0x34
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	6a11      	ldr	r1, [r2, #32]
 80030a0:	019b      	lsls	r3, r3, #6
 80030a2:	430b      	orrs	r3, r1
 80030a4:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80030a6:	f7fe ff9b 	bl	8001fe0 <HAL_GetTick>
 80030aa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030ac:	2202      	movs	r2, #2
 80030ae:	68a3      	ldr	r3, [r4, #8]
 80030b0:	4213      	tst	r3, r2
 80030b2:	d000      	beq.n	80030b6 <HAL_RCC_OscConfig+0x3ea>
 80030b4:	e658      	b.n	8002d68 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030b6:	f7fe ff93 	bl	8001fe0 <HAL_GetTick>
 80030ba:	1bc0      	subs	r0, r0, r7
 80030bc:	2802      	cmp	r0, #2
 80030be:	d9f5      	bls.n	80030ac <HAL_RCC_OscConfig+0x3e0>
 80030c0:	e67a      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 80030c2:	68a1      	ldr	r1, [r4, #8]
 80030c4:	4399      	bics	r1, r3
 80030c6:	60a1      	str	r1, [r4, #8]
 80030c8:	6a13      	ldr	r3, [r2, #32]
 80030ca:	493e      	ldr	r1, [pc, #248]	; (80031c4 <HAL_RCC_OscConfig+0x4f8>)
 80030cc:	400b      	ands	r3, r1
 80030ce:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80030d0:	f7fe ff86 	bl	8001fe0 <HAL_GetTick>
 80030d4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030d6:	2202      	movs	r2, #2
 80030d8:	68a3      	ldr	r3, [r4, #8]
 80030da:	4213      	tst	r3, r2
 80030dc:	d100      	bne.n	80030e0 <HAL_RCC_OscConfig+0x414>
 80030de:	e643      	b.n	8002d68 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e0:	f7fe ff7e 	bl	8001fe0 <HAL_GetTick>
 80030e4:	1bc0      	subs	r0, r0, r7
 80030e6:	2802      	cmp	r0, #2
 80030e8:	d9f5      	bls.n	80030d6 <HAL_RCC_OscConfig+0x40a>
 80030ea:	e665      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ec:	2e0c      	cmp	r6, #12
 80030ee:	d043      	beq.n	8003178 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f0:	4a35      	ldr	r2, [pc, #212]	; (80031c8 <HAL_RCC_OscConfig+0x4fc>)
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d12e      	bne.n	8003154 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 80030f6:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030f8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80030fa:	4013      	ands	r3, r2
 80030fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80030fe:	f7fe ff6f 	bl	8001fe0 <HAL_GetTick>
 8003102:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003104:	04bf      	lsls	r7, r7, #18
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	423b      	tst	r3, r7
 800310a:	d11d      	bne.n	8003148 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800310e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003110:	68e2      	ldr	r2, [r4, #12]
 8003112:	430b      	orrs	r3, r1
 8003114:	492d      	ldr	r1, [pc, #180]	; (80031cc <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003116:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003118:	400a      	ands	r2, r1
 800311a:	4313      	orrs	r3, r2
 800311c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800311e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003120:	4313      	orrs	r3, r2
 8003122:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	6822      	ldr	r2, [r4, #0]
 8003128:	045b      	lsls	r3, r3, #17
 800312a:	4313      	orrs	r3, r2
 800312c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800312e:	f7fe ff57 	bl	8001fe0 <HAL_GetTick>
 8003132:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	4233      	tst	r3, r6
 8003138:	d000      	beq.n	800313c <HAL_RCC_OscConfig+0x470>
 800313a:	e619      	b.n	8002d70 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313c:	f7fe ff50 	bl	8001fe0 <HAL_GetTick>
 8003140:	1b40      	subs	r0, r0, r5
 8003142:	2802      	cmp	r0, #2
 8003144:	d9f6      	bls.n	8003134 <HAL_RCC_OscConfig+0x468>
 8003146:	e637      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe ff4a 	bl	8001fe0 <HAL_GetTick>
 800314c:	1b80      	subs	r0, r0, r6
 800314e:	2802      	cmp	r0, #2
 8003150:	d9d9      	bls.n	8003106 <HAL_RCC_OscConfig+0x43a>
 8003152:	e631      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 8003154:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003156:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003158:	4013      	ands	r3, r2
 800315a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800315c:	f7fe ff40 	bl	8001fe0 <HAL_GetTick>
 8003160:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003162:	04b6      	lsls	r6, r6, #18
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	4233      	tst	r3, r6
 8003168:	d100      	bne.n	800316c <HAL_RCC_OscConfig+0x4a0>
 800316a:	e601      	b.n	8002d70 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe ff38 	bl	8001fe0 <HAL_GetTick>
 8003170:	1b40      	subs	r0, r0, r5
 8003172:	2802      	cmp	r0, #2
 8003174:	d9f6      	bls.n	8003164 <HAL_RCC_OscConfig+0x498>
 8003176:	e61f      	b.n	8002db8 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8003178:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800317a:	2b01      	cmp	r3, #1
 800317c:	d100      	bne.n	8003180 <HAL_RCC_OscConfig+0x4b4>
 800317e:	e61c      	b.n	8002dba <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003180:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8003182:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003184:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003186:	0252      	lsls	r2, r2, #9
 8003188:	401a      	ands	r2, r3
 800318a:	428a      	cmp	r2, r1
 800318c:	d000      	beq.n	8003190 <HAL_RCC_OscConfig+0x4c4>
 800318e:	e5fd      	b.n	8002d8c <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003190:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003194:	0392      	lsls	r2, r2, #14
 8003196:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003198:	428a      	cmp	r2, r1
 800319a:	d000      	beq.n	800319e <HAL_RCC_OscConfig+0x4d2>
 800319c:	e5f6      	b.n	8002d8c <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800319e:	22c0      	movs	r2, #192	; 0xc0
 80031a0:	0412      	lsls	r2, r2, #16
 80031a2:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031a4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d100      	bne.n	80031ac <HAL_RCC_OscConfig+0x4e0>
 80031aa:	e5e1      	b.n	8002d70 <HAL_RCC_OscConfig+0xa4>
 80031ac:	e5ee      	b.n	8002d8c <HAL_RCC_OscConfig+0xc0>
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	fffffeff 	.word	0xfffffeff
 80031b4:	fffffbff 	.word	0xfffffbff
 80031b8:	00001388 	.word	0x00001388
 80031bc:	efffffff 	.word	0xefffffff
 80031c0:	40010000 	.word	0x40010000
 80031c4:	ffffdfff 	.word	0xffffdfff
 80031c8:	feffffff 	.word	0xfeffffff
 80031cc:	ff02ffff 	.word	0xff02ffff

080031d0 <HAL_RCC_ClockConfig>:
{
 80031d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031d2:	1e04      	subs	r4, r0, #0
 80031d4:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80031d8:	2001      	movs	r0, #1
}
 80031da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	2501      	movs	r5, #1
 80031de:	4e5b      	ldr	r6, [pc, #364]	; (800334c <HAL_RCC_ClockConfig+0x17c>)
 80031e0:	9a01      	ldr	r2, [sp, #4]
 80031e2:	6833      	ldr	r3, [r6, #0]
 80031e4:	402b      	ands	r3, r5
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d331      	bcc.n	800324e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ea:	6822      	ldr	r2, [r4, #0]
 80031ec:	0793      	lsls	r3, r2, #30
 80031ee:	d443      	bmi.n	8003278 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f0:	07d3      	lsls	r3, r2, #31
 80031f2:	d449      	bmi.n	8003288 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f4:	2501      	movs	r5, #1
 80031f6:	6833      	ldr	r3, [r6, #0]
 80031f8:	9a01      	ldr	r2, [sp, #4]
 80031fa:	402b      	ands	r3, r5
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d909      	bls.n	8003214 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003200:	6833      	ldr	r3, [r6, #0]
 8003202:	43ab      	bics	r3, r5
 8003204:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003206:	f7fe feeb 	bl	8001fe0 <HAL_GetTick>
 800320a:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320c:	6833      	ldr	r3, [r6, #0]
 800320e:	422b      	tst	r3, r5
 8003210:	d000      	beq.n	8003214 <HAL_RCC_ClockConfig+0x44>
 8003212:	e08c      	b.n	800332e <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	6822      	ldr	r2, [r4, #0]
 8003216:	4d4e      	ldr	r5, [pc, #312]	; (8003350 <HAL_RCC_ClockConfig+0x180>)
 8003218:	0753      	lsls	r3, r2, #29
 800321a:	d500      	bpl.n	800321e <HAL_RCC_ClockConfig+0x4e>
 800321c:	e08f      	b.n	800333e <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321e:	0713      	lsls	r3, r2, #28
 8003220:	d506      	bpl.n	8003230 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003222:	68e9      	ldr	r1, [r5, #12]
 8003224:	6923      	ldr	r3, [r4, #16]
 8003226:	4a4b      	ldr	r2, [pc, #300]	; (8003354 <HAL_RCC_ClockConfig+0x184>)
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	400a      	ands	r2, r1
 800322c:	4313      	orrs	r3, r2
 800322e:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003230:	f7ff fd04 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8003234:	68eb      	ldr	r3, [r5, #12]
 8003236:	4a48      	ldr	r2, [pc, #288]	; (8003358 <HAL_RCC_ClockConfig+0x188>)
 8003238:	061b      	lsls	r3, r3, #24
 800323a:	0f1b      	lsrs	r3, r3, #28
 800323c:	5cd3      	ldrb	r3, [r2, r3]
 800323e:	40d8      	lsrs	r0, r3
 8003240:	4b46      	ldr	r3, [pc, #280]	; (800335c <HAL_RCC_ClockConfig+0x18c>)
 8003242:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003244:	4b46      	ldr	r3, [pc, #280]	; (8003360 <HAL_RCC_ClockConfig+0x190>)
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	f7fe fe86 	bl	8001f58 <HAL_InitTick>
  if(status != HAL_OK)
 800324c:	e7c5      	b.n	80031da <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	6833      	ldr	r3, [r6, #0]
 8003250:	9a01      	ldr	r2, [sp, #4]
 8003252:	43ab      	bics	r3, r5
 8003254:	4313      	orrs	r3, r2
 8003256:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003258:	f7fe fec2 	bl	8001fe0 <HAL_GetTick>
 800325c:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	6833      	ldr	r3, [r6, #0]
 8003260:	9a01      	ldr	r2, [sp, #4]
 8003262:	402b      	ands	r3, r5
 8003264:	4293      	cmp	r3, r2
 8003266:	d0c0      	beq.n	80031ea <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7fe feba 	bl	8001fe0 <HAL_GetTick>
 800326c:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <HAL_RCC_ClockConfig+0x194>)
 800326e:	1bc0      	subs	r0, r0, r7
 8003270:	4298      	cmp	r0, r3
 8003272:	d9f4      	bls.n	800325e <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8003274:	2003      	movs	r0, #3
 8003276:	e7b0      	b.n	80031da <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	20f0      	movs	r0, #240	; 0xf0
 800327a:	4935      	ldr	r1, [pc, #212]	; (8003350 <HAL_RCC_ClockConfig+0x180>)
 800327c:	68cb      	ldr	r3, [r1, #12]
 800327e:	4383      	bics	r3, r0
 8003280:	68a0      	ldr	r0, [r4, #8]
 8003282:	4303      	orrs	r3, r0
 8003284:	60cb      	str	r3, [r1, #12]
 8003286:	e7b3      	b.n	80031f0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003288:	4d31      	ldr	r5, [pc, #196]	; (8003350 <HAL_RCC_ClockConfig+0x180>)
 800328a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800328c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	2a02      	cmp	r2, #2
 8003290:	d118      	bne.n	80032c4 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003292:	039b      	lsls	r3, r3, #14
 8003294:	d5a0      	bpl.n	80031d8 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003296:	2103      	movs	r1, #3
 8003298:	68eb      	ldr	r3, [r5, #12]
 800329a:	438b      	bics	r3, r1
 800329c:	4313      	orrs	r3, r2
 800329e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80032a0:	f7fe fe9e 	bl	8001fe0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a4:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80032a6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d118      	bne.n	80032de <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032ac:	220c      	movs	r2, #12
 80032ae:	68eb      	ldr	r3, [r5, #12]
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d09e      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b6:	f7fe fe93 	bl	8001fe0 <HAL_GetTick>
 80032ba:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <HAL_RCC_ClockConfig+0x194>)
 80032bc:	1bc0      	subs	r0, r0, r7
 80032be:	4298      	cmp	r0, r3
 80032c0:	d9f4      	bls.n	80032ac <HAL_RCC_ClockConfig+0xdc>
 80032c2:	e7d7      	b.n	8003274 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c4:	2a03      	cmp	r2, #3
 80032c6:	d102      	bne.n	80032ce <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032c8:	019b      	lsls	r3, r3, #6
 80032ca:	d4e4      	bmi.n	8003296 <HAL_RCC_ClockConfig+0xc6>
 80032cc:	e784      	b.n	80031d8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032ce:	2a01      	cmp	r2, #1
 80032d0:	d102      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032d2:	075b      	lsls	r3, r3, #29
 80032d4:	d4df      	bmi.n	8003296 <HAL_RCC_ClockConfig+0xc6>
 80032d6:	e77f      	b.n	80031d8 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032d8:	059b      	lsls	r3, r3, #22
 80032da:	d4dc      	bmi.n	8003296 <HAL_RCC_ClockConfig+0xc6>
 80032dc:	e77c      	b.n	80031d8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d10b      	bne.n	80032fa <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e2:	220c      	movs	r2, #12
 80032e4:	68eb      	ldr	r3, [r5, #12]
 80032e6:	4013      	ands	r3, r2
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d083      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f7fe fe78 	bl	8001fe0 <HAL_GetTick>
 80032f0:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <HAL_RCC_ClockConfig+0x194>)
 80032f2:	1bc0      	subs	r0, r0, r7
 80032f4:	4298      	cmp	r0, r3
 80032f6:	d9f4      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x112>
 80032f8:	e7bc      	b.n	8003274 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d011      	beq.n	8003322 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80032fe:	220c      	movs	r2, #12
 8003300:	68eb      	ldr	r3, [r5, #12]
 8003302:	4213      	tst	r3, r2
 8003304:	d100      	bne.n	8003308 <HAL_RCC_ClockConfig+0x138>
 8003306:	e775      	b.n	80031f4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003308:	f7fe fe6a 	bl	8001fe0 <HAL_GetTick>
 800330c:	4b15      	ldr	r3, [pc, #84]	; (8003364 <HAL_RCC_ClockConfig+0x194>)
 800330e:	1bc0      	subs	r0, r0, r7
 8003310:	4298      	cmp	r0, r3
 8003312:	d9f4      	bls.n	80032fe <HAL_RCC_ClockConfig+0x12e>
 8003314:	e7ae      	b.n	8003274 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003316:	f7fe fe63 	bl	8001fe0 <HAL_GetTick>
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_RCC_ClockConfig+0x194>)
 800331c:	1bc0      	subs	r0, r0, r7
 800331e:	4298      	cmp	r0, r3
 8003320:	d8a8      	bhi.n	8003274 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003322:	220c      	movs	r2, #12
 8003324:	68eb      	ldr	r3, [r5, #12]
 8003326:	4013      	ands	r3, r2
 8003328:	2b04      	cmp	r3, #4
 800332a:	d1f4      	bne.n	8003316 <HAL_RCC_ClockConfig+0x146>
 800332c:	e762      	b.n	80031f4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800332e:	f7fe fe57 	bl	8001fe0 <HAL_GetTick>
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_RCC_ClockConfig+0x194>)
 8003334:	1bc0      	subs	r0, r0, r7
 8003336:	4298      	cmp	r0, r3
 8003338:	d800      	bhi.n	800333c <HAL_RCC_ClockConfig+0x16c>
 800333a:	e767      	b.n	800320c <HAL_RCC_ClockConfig+0x3c>
 800333c:	e79a      	b.n	8003274 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800333e:	68eb      	ldr	r3, [r5, #12]
 8003340:	4909      	ldr	r1, [pc, #36]	; (8003368 <HAL_RCC_ClockConfig+0x198>)
 8003342:	400b      	ands	r3, r1
 8003344:	68e1      	ldr	r1, [r4, #12]
 8003346:	430b      	orrs	r3, r1
 8003348:	60eb      	str	r3, [r5, #12]
 800334a:	e768      	b.n	800321e <HAL_RCC_ClockConfig+0x4e>
 800334c:	40022000 	.word	0x40022000
 8003350:	40021000 	.word	0x40021000
 8003354:	ffffc7ff 	.word	0xffffc7ff
 8003358:	08004bf0 	.word	0x08004bf0
 800335c:	2000005c 	.word	0x2000005c
 8003360:	20000064 	.word	0x20000064
 8003364:	00001388 	.word	0x00001388
 8003368:	fffff8ff 	.word	0xfffff8ff

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800336c:	4b04      	ldr	r3, [pc, #16]	; (8003380 <HAL_RCC_GetPCLK1Freq+0x14>)
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	055b      	lsls	r3, r3, #21
 8003374:	0f5b      	lsrs	r3, r3, #29
 8003376:	5cd3      	ldrb	r3, [r2, r3]
 8003378:	4a03      	ldr	r2, [pc, #12]	; (8003388 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800337a:	6810      	ldr	r0, [r2, #0]
 800337c:	40d8      	lsrs	r0, r3
}
 800337e:	4770      	bx	lr
 8003380:	40021000 	.word	0x40021000
 8003384:	08004c00 	.word	0x08004c00
 8003388:	2000005c 	.word	0x2000005c

0800338c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800338e:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	049b      	lsls	r3, r3, #18
 8003394:	0f5b      	lsrs	r3, r3, #29
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	4a03      	ldr	r2, [pc, #12]	; (80033a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800339a:	6810      	ldr	r0, [r2, #0]
 800339c:	40d8      	lsrs	r0, r3
}
 800339e:	4770      	bx	lr
 80033a0:	40021000 	.word	0x40021000
 80033a4:	08004c00 	.word	0x08004c00
 80033a8:	2000005c 	.word	0x2000005c

080033ac <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033ac:	6803      	ldr	r3, [r0, #0]
{
 80033ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033b0:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033b2:	069b      	lsls	r3, r3, #26
 80033b4:	d52d      	bpl.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x66>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b6:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 80033b8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ba:	4c5c      	ldr	r4, [pc, #368]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80033bc:	055b      	lsls	r3, r3, #21
 80033be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 80033c0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c2:	421a      	tst	r2, r3
 80033c4:	d104      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80033c8:	4313      	orrs	r3, r2
 80033ca:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80033cc:	2301      	movs	r3, #1
 80033ce:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	2780      	movs	r7, #128	; 0x80
 80033d2:	4e57      	ldr	r6, [pc, #348]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033d4:	007f      	lsls	r7, r7, #1
 80033d6:	6833      	ldr	r3, [r6, #0]
 80033d8:	423b      	tst	r3, r7
 80033da:	d053      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80033dc:	686b      	ldr	r3, [r5, #4]
 80033de:	21c0      	movs	r1, #192	; 0xc0
 80033e0:	0018      	movs	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80033e2:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80033e4:	0389      	lsls	r1, r1, #14
 80033e6:	4008      	ands	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80033e8:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80033ea:	4290      	cmp	r0, r2
 80033ec:	d15b      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80033ee:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80033f0:	22c0      	movs	r2, #192	; 0xc0
 80033f2:	0008      	movs	r0, r1
 80033f4:	0292      	lsls	r2, r2, #10
 80033f6:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80033f8:	4211      	tst	r1, r2
 80033fa:	d15f      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	069b      	lsls	r3, r3, #26
 8003400:	d500      	bpl.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003402:	e070      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003404:	9b00      	ldr	r3, [sp, #0]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d103      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800340c:	4a49      	ldr	r2, [pc, #292]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800340e:	4013      	ands	r3, r2
 8003410:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003412:	682b      	ldr	r3, [r5, #0]
 8003414:	07da      	lsls	r2, r3, #31
 8003416:	d506      	bpl.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003418:	2003      	movs	r0, #3
 800341a:	4944      	ldr	r1, [pc, #272]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800341c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800341e:	4382      	bics	r2, r0
 8003420:	68a8      	ldr	r0, [r5, #8]
 8003422:	4302      	orrs	r2, r0
 8003424:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003426:	079a      	lsls	r2, r3, #30
 8003428:	d506      	bpl.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800342a:	200c      	movs	r0, #12
 800342c:	493f      	ldr	r1, [pc, #252]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800342e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003430:	4382      	bics	r2, r0
 8003432:	68e8      	ldr	r0, [r5, #12]
 8003434:	4302      	orrs	r2, r0
 8003436:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003438:	075a      	lsls	r2, r3, #29
 800343a:	d506      	bpl.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800343c:	493b      	ldr	r1, [pc, #236]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800343e:	483e      	ldr	r0, [pc, #248]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003440:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003442:	4002      	ands	r2, r0
 8003444:	6928      	ldr	r0, [r5, #16]
 8003446:	4302      	orrs	r2, r0
 8003448:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800344a:	071a      	lsls	r2, r3, #28
 800344c:	d506      	bpl.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800344e:	4937      	ldr	r1, [pc, #220]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8003450:	483a      	ldr	r0, [pc, #232]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003452:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003454:	4002      	ands	r2, r0
 8003456:	6968      	ldr	r0, [r5, #20]
 8003458:	4302      	orrs	r2, r0
 800345a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800345c:	065a      	lsls	r2, r3, #25
 800345e:	d506      	bpl.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003460:	4932      	ldr	r1, [pc, #200]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8003462:	4837      	ldr	r0, [pc, #220]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003464:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003466:	4002      	ands	r2, r0
 8003468:	69e8      	ldr	r0, [r5, #28]
 800346a:	4302      	orrs	r2, r0
 800346c:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 800346e:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	d517      	bpl.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003474:	4a2d      	ldr	r2, [pc, #180]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8003476:	4933      	ldr	r1, [pc, #204]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003478:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800347a:	400b      	ands	r3, r1
 800347c:	69a9      	ldr	r1, [r5, #24]
 800347e:	430b      	orrs	r3, r1
 8003480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003482:	e00f      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003484:	6833      	ldr	r3, [r6, #0]
 8003486:	433b      	orrs	r3, r7
 8003488:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800348a:	f7fe fda9 	bl	8001fe0 <HAL_GetTick>
 800348e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003490:	6833      	ldr	r3, [r6, #0]
 8003492:	423b      	tst	r3, r7
 8003494:	d1a2      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003496:	f7fe fda3 	bl	8001fe0 <HAL_GetTick>
 800349a:	9b01      	ldr	r3, [sp, #4]
 800349c:	1ac0      	subs	r0, r0, r3
 800349e:	2864      	cmp	r0, #100	; 0x64
 80034a0:	d9f6      	bls.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          return HAL_TIMEOUT;
 80034a2:	2003      	movs	r0, #3
}
 80034a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80034a6:	22c0      	movs	r2, #192	; 0xc0
 80034a8:	0019      	movs	r1, r3
 80034aa:	0292      	lsls	r2, r2, #10
 80034ac:	4011      	ands	r1, r2
 80034ae:	4291      	cmp	r1, r2
 80034b0:	d19d      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80034b2:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80034b4:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80034b6:	0392      	lsls	r2, r2, #14
 80034b8:	d599      	bpl.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x42>
 80034ba:	e7f3      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80034bc:	4013      	ands	r3, r2
 80034be:	4283      	cmp	r3, r0
 80034c0:	d09c      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034c2:	682b      	ldr	r3, [r5, #0]
 80034c4:	069b      	lsls	r3, r3, #26
 80034c6:	d59d      	bpl.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 80034c8:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80034ca:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80034cc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80034ce:	0312      	lsls	r2, r2, #12
 80034d0:	4302      	orrs	r2, r0
 80034d2:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d8:	481c      	ldr	r0, [pc, #112]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80034da:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034dc:	4002      	ands	r2, r0
 80034de:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 80034e0:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80034e2:	05cb      	lsls	r3, r1, #23
 80034e4:	d412      	bmi.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e6:	6869      	ldr	r1, [r5, #4]
 80034e8:	23c0      	movs	r3, #192	; 0xc0
 80034ea:	000a      	movs	r2, r1
 80034ec:	029b      	lsls	r3, r3, #10
 80034ee:	401a      	ands	r2, r3
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d107      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x158>
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	4816      	ldr	r0, [pc, #88]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80034f8:	4003      	ands	r3, r0
 80034fa:	20c0      	movs	r0, #192	; 0xc0
 80034fc:	0380      	lsls	r0, r0, #14
 80034fe:	4001      	ands	r1, r0
 8003500:	430b      	orrs	r3, r1
 8003502:	6023      	str	r3, [r4, #0]
 8003504:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003506:	431a      	orrs	r2, r3
 8003508:	6522      	str	r2, [r4, #80]	; 0x50
 800350a:	e77b      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 800350c:	f7fe fd68 	bl	8001fe0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003510:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003512:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003514:	00bf      	lsls	r7, r7, #2
 8003516:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003518:	423b      	tst	r3, r7
 800351a:	d000      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x172>
 800351c:	e76e      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7fe fd5f 	bl	8001fe0 <HAL_GetTick>
 8003522:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003524:	1b80      	subs	r0, r0, r6
 8003526:	4298      	cmp	r0, r3
 8003528:	d9f5      	bls.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800352a:	e7ba      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800352c:	40021000 	.word	0x40021000
 8003530:	40007000 	.word	0x40007000
 8003534:	efffffff 	.word	0xefffffff
 8003538:	fffff3ff 	.word	0xfffff3ff
 800353c:	ffffcfff 	.word	0xffffcfff
 8003540:	fbffffff 	.word	0xfbffffff
 8003544:	fff3ffff 	.word	0xfff3ffff
 8003548:	fffcffff 	.word	0xfffcffff
 800354c:	fff7ffff 	.word	0xfff7ffff
 8003550:	ffcfffff 	.word	0xffcfffff
 8003554:	00001388 	.word	0x00001388

08003558 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003558:	2280      	movs	r2, #128	; 0x80
{
 800355a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800355c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800355e:	05d2      	lsls	r2, r2, #23
 8003560:	4290      	cmp	r0, r2
 8003562:	d005      	beq.n	8003570 <TIM_Base_SetConfig+0x18>
 8003564:	4c10      	ldr	r4, [pc, #64]	; (80035a8 <TIM_Base_SetConfig+0x50>)
 8003566:	42a0      	cmp	r0, r4
 8003568:	d002      	beq.n	8003570 <TIM_Base_SetConfig+0x18>
 800356a:	4c10      	ldr	r4, [pc, #64]	; (80035ac <TIM_Base_SetConfig+0x54>)
 800356c:	42a0      	cmp	r0, r4
 800356e:	d10f      	bne.n	8003590 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003570:	2470      	movs	r4, #112	; 0x70
 8003572:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8003574:	684c      	ldr	r4, [r1, #4]
 8003576:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003578:	4290      	cmp	r0, r2
 800357a:	d005      	beq.n	8003588 <TIM_Base_SetConfig+0x30>
 800357c:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <TIM_Base_SetConfig+0x50>)
 800357e:	4290      	cmp	r0, r2
 8003580:	d002      	beq.n	8003588 <TIM_Base_SetConfig+0x30>
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <TIM_Base_SetConfig+0x54>)
 8003584:	4290      	cmp	r0, r2
 8003586:	d103      	bne.n	8003590 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003588:	4a09      	ldr	r2, [pc, #36]	; (80035b0 <TIM_Base_SetConfig+0x58>)
 800358a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358c:	68ca      	ldr	r2, [r1, #12]
 800358e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003590:	2280      	movs	r2, #128	; 0x80
 8003592:	4393      	bics	r3, r2
 8003594:	690a      	ldr	r2, [r1, #16]
 8003596:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003598:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800359a:	688b      	ldr	r3, [r1, #8]
 800359c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800359e:	680b      	ldr	r3, [r1, #0]
 80035a0:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a2:	2301      	movs	r3, #1
 80035a4:	6143      	str	r3, [r0, #20]
}
 80035a6:	bd10      	pop	{r4, pc}
 80035a8:	40010800 	.word	0x40010800
 80035ac:	40011400 	.word	0x40011400
 80035b0:	fffffcff 	.word	0xfffffcff

080035b4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b4:	2201      	movs	r2, #1
{
 80035b6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035b8:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ba:	6a03      	ldr	r3, [r0, #32]
 80035bc:	4393      	bics	r3, r2
 80035be:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80035c0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80035c2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80035c4:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035c6:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c8:	680d      	ldr	r5, [r1, #0]
 80035ca:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035cc:	2502      	movs	r5, #2
 80035ce:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035d0:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035d4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035d6:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 80035d8:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 80035da:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035dc:	6203      	str	r3, [r0, #32]
}
 80035de:	bd30      	pop	{r4, r5, pc}

080035e0 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e0:	2210      	movs	r2, #16
 80035e2:	6a03      	ldr	r3, [r0, #32]
{
 80035e4:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e6:	4393      	bics	r3, r2
 80035e8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035ec:	4c09      	ldr	r4, [pc, #36]	; (8003614 <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 80035ee:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80035f0:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035f2:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f4:	680a      	ldr	r2, [r1, #0]
 80035f6:	0212      	lsls	r2, r2, #8
 80035f8:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035fa:	2420      	movs	r4, #32
 80035fc:	43a3      	bics	r3, r4
 80035fe:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003600:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003602:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003604:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003606:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003608:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800360a:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 800360c:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800360e:	6203      	str	r3, [r0, #32]
}
 8003610:	bd30      	pop	{r4, r5, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	ffff8cff 	.word	0xffff8cff

08003618 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003618:	231f      	movs	r3, #31
{
 800361a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800361c:	2401      	movs	r4, #1
 800361e:	4019      	ands	r1, r3
 8003620:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003622:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003624:	6a03      	ldr	r3, [r0, #32]
 8003626:	43a3      	bics	r3, r4
 8003628:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800362a:	6a03      	ldr	r3, [r0, #32]
 800362c:	431a      	orrs	r2, r3
 800362e:	6202      	str	r2, [r0, #32]
}
 8003630:	bd10      	pop	{r4, pc}
	...

08003634 <HAL_TIM_OC_Start>:
{
 8003634:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003636:	0003      	movs	r3, r0
{
 8003638:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800363a:	2900      	cmp	r1, #0
 800363c:	d105      	bne.n	800364a <HAL_TIM_OC_Start+0x16>
 800363e:	333a      	adds	r3, #58	; 0x3a
    return HAL_ERROR;
 8003640:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003642:	781a      	ldrb	r2, [r3, #0]
 8003644:	4282      	cmp	r2, r0
 8003646:	d00a      	beq.n	800365e <HAL_TIM_OC_Start+0x2a>
}
 8003648:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800364a:	2904      	cmp	r1, #4
 800364c:	d101      	bne.n	8003652 <HAL_TIM_OC_Start+0x1e>
 800364e:	333b      	adds	r3, #59	; 0x3b
 8003650:	e7f6      	b.n	8003640 <HAL_TIM_OC_Start+0xc>
 8003652:	2908      	cmp	r1, #8
 8003654:	d101      	bne.n	800365a <HAL_TIM_OC_Start+0x26>
 8003656:	333c      	adds	r3, #60	; 0x3c
 8003658:	e7f2      	b.n	8003640 <HAL_TIM_OC_Start+0xc>
 800365a:	333d      	adds	r3, #61	; 0x3d
 800365c:	e7f0      	b.n	8003640 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800365e:	2202      	movs	r2, #2
 8003660:	701a      	strb	r2, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003662:	6820      	ldr	r0, [r4, #0]
 8003664:	2201      	movs	r2, #1
 8003666:	f7ff ffd7 	bl	8003618 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800366a:	2280      	movs	r2, #128	; 0x80
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	05d2      	lsls	r2, r2, #23
 8003670:	4293      	cmp	r3, r2
 8003672:	d005      	beq.n	8003680 <HAL_TIM_OC_Start+0x4c>
 8003674:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <HAL_TIM_OC_Start+0x70>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d002      	beq.n	8003680 <HAL_TIM_OC_Start+0x4c>
 800367a:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <HAL_TIM_OC_Start+0x74>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d10a      	bne.n	8003696 <HAL_TIM_OC_Start+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003680:	2107      	movs	r1, #7
 8003682:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8003684:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003686:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003688:	2a06      	cmp	r2, #6
 800368a:	d0dd      	beq.n	8003648 <HAL_TIM_OC_Start+0x14>
      __HAL_TIM_ENABLE(htim);
 800368c:	2201      	movs	r2, #1
 800368e:	6819      	ldr	r1, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e7d8      	b.n	8003648 <HAL_TIM_OC_Start+0x14>
    __HAL_TIM_ENABLE(htim);
 8003696:	2201      	movs	r2, #1
 8003698:	6819      	ldr	r1, [r3, #0]
  return HAL_OK;
 800369a:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	e7d2      	b.n	8003648 <HAL_TIM_OC_Start+0x14>
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	40010800 	.word	0x40010800
 80036a8:	40011400 	.word	0x40011400

080036ac <HAL_TIM_OC_Stop>:
{
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80036b0:	2200      	movs	r2, #0
 80036b2:	6800      	ldr	r0, [r0, #0]
{
 80036b4:	000d      	movs	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80036b6:	f7ff ffaf 	bl	8003618 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	4a0c      	ldr	r2, [pc, #48]	; (80036f0 <HAL_TIM_OC_Stop+0x44>)
 80036be:	6a19      	ldr	r1, [r3, #32]
 80036c0:	4211      	tst	r1, r2
 80036c2:	d103      	bne.n	80036cc <HAL_TIM_OC_Stop+0x20>
 80036c4:	2101      	movs	r1, #1
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	438a      	bics	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	2301      	movs	r3, #1
 80036ce:	2d00      	cmp	r5, #0
 80036d0:	d103      	bne.n	80036da <HAL_TIM_OC_Stop+0x2e>
 80036d2:	343a      	adds	r4, #58	; 0x3a
}
 80036d4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80036d6:	7023      	strb	r3, [r4, #0]
}
 80036d8:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80036da:	2d04      	cmp	r5, #4
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_OC_Stop+0x36>
 80036de:	343b      	adds	r4, #59	; 0x3b
 80036e0:	e7f8      	b.n	80036d4 <HAL_TIM_OC_Stop+0x28>
 80036e2:	2d08      	cmp	r5, #8
 80036e4:	d101      	bne.n	80036ea <HAL_TIM_OC_Stop+0x3e>
 80036e6:	343c      	adds	r4, #60	; 0x3c
 80036e8:	e7f4      	b.n	80036d4 <HAL_TIM_OC_Stop+0x28>
 80036ea:	343d      	adds	r4, #61	; 0x3d
 80036ec:	e7f2      	b.n	80036d4 <HAL_TIM_OC_Stop+0x28>
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	00001111 	.word	0x00001111

080036f4 <HAL_TIM_PWM_Init>:
{
 80036f4:	b570      	push	{r4, r5, r6, lr}
 80036f6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80036f8:	2001      	movs	r0, #1
  if (htim == NULL)
 80036fa:	2c00      	cmp	r4, #0
 80036fc:	d01d      	beq.n	800373a <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 80036fe:	0025      	movs	r5, r4
 8003700:	3539      	adds	r5, #57	; 0x39
 8003702:	782b      	ldrb	r3, [r5, #0]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d105      	bne.n	8003716 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800370a:	0023      	movs	r3, r4
 800370c:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 800370e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003710:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8003712:	f7fe fb69 	bl	8001de8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003716:	2302      	movs	r3, #2
 8003718:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800371a:	6820      	ldr	r0, [r4, #0]
 800371c:	1d21      	adds	r1, r4, #4
 800371e:	f7ff ff1b 	bl	8003558 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003722:	0022      	movs	r2, r4
 8003724:	2301      	movs	r3, #1
  return HAL_OK;
 8003726:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003728:	323e      	adds	r2, #62	; 0x3e
 800372a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	343d      	adds	r4, #61	; 0x3d
 800372e:	3a04      	subs	r2, #4
 8003730:	7013      	strb	r3, [r2, #0]
 8003732:	7053      	strb	r3, [r2, #1]
 8003734:	7093      	strb	r3, [r2, #2]
 8003736:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003738:	702b      	strb	r3, [r5, #0]
}
 800373a:	bd70      	pop	{r4, r5, r6, pc}

0800373c <HAL_TIM_PWM_Start>:
 800373c:	b510      	push	{r4, lr}
 800373e:	f7ff ff79 	bl	8003634 <HAL_TIM_OC_Start>
 8003742:	bd10      	pop	{r4, pc}

08003744 <HAL_TIM_PWM_Stop>:
 8003744:	b510      	push	{r4, lr}
 8003746:	f7ff ffb1 	bl	80036ac <HAL_TIM_OC_Stop>
 800374a:	bd10      	pop	{r4, pc}

0800374c <HAL_TIM_PWM_ConfigChannel>:
{
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800374e:	0005      	movs	r5, r0
 8003750:	3538      	adds	r5, #56	; 0x38
 8003752:	782b      	ldrb	r3, [r5, #0]
{
 8003754:	0007      	movs	r7, r0
 8003756:	000c      	movs	r4, r1
 8003758:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 800375a:	2002      	movs	r0, #2
 800375c:	2b01      	cmp	r3, #1
 800375e:	d00a      	beq.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003760:	3801      	subs	r0, #1
 8003762:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 8003764:	2a08      	cmp	r2, #8
 8003766:	d050      	beq.n	800380a <HAL_TIM_PWM_ConfigChannel+0xbe>
 8003768:	d806      	bhi.n	8003778 <HAL_TIM_PWM_ConfigChannel+0x2c>
 800376a:	2a00      	cmp	r2, #0
 800376c:	d02a      	beq.n	80037c4 <HAL_TIM_PWM_ConfigChannel+0x78>
 800376e:	2a04      	cmp	r2, #4
 8003770:	d03a      	beq.n	80037e8 <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 8003772:	2300      	movs	r3, #0
 8003774:	702b      	strb	r3, [r5, #0]
}
 8003776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8003778:	2a0c      	cmp	r2, #12
 800377a:	d1fa      	bne.n	8003772 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800377c:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800377e:	4934      	ldr	r1, [pc, #208]	; (8003850 <HAL_TIM_PWM_ConfigChannel+0x104>)
 8003780:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003782:	4834      	ldr	r0, [pc, #208]	; (8003854 <HAL_TIM_PWM_ConfigChannel+0x108>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003784:	400a      	ands	r2, r1
 8003786:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003788:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800378a:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800378c:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800378e:	4001      	ands	r1, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003790:	6820      	ldr	r0, [r4, #0]
 8003792:	0207      	lsls	r7, r0, #8
  tmpccer &= ~TIM_CCER_CC4P;
 8003794:	4830      	ldr	r0, [pc, #192]	; (8003858 <HAL_TIM_PWM_ConfigChannel+0x10c>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003796:	4339      	orrs	r1, r7
  tmpccer &= ~TIM_CCER_CC4P;
 8003798:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800379a:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 800379c:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800379e:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 80037a0:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80037a2:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037a4:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 80037a6:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80037a8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037aa:	2280      	movs	r2, #128	; 0x80
 80037ac:	69d9      	ldr	r1, [r3, #28]
 80037ae:	0112      	lsls	r2, r2, #4
 80037b0:	430a      	orrs	r2, r1
 80037b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037b4:	69da      	ldr	r2, [r3, #28]
 80037b6:	4929      	ldr	r1, [pc, #164]	; (800385c <HAL_TIM_PWM_ConfigChannel+0x110>)
 80037b8:	400a      	ands	r2, r1
 80037ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037bc:	68e2      	ldr	r2, [r4, #12]
 80037be:	69d9      	ldr	r1, [r3, #28]
 80037c0:	0212      	lsls	r2, r2, #8
 80037c2:	e041      	b.n	8003848 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037c4:	6838      	ldr	r0, [r7, #0]
 80037c6:	f7ff fef5 	bl	80035b4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037ca:	2208      	movs	r2, #8
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	6999      	ldr	r1, [r3, #24]
 80037d0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037d2:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	438a      	bics	r2, r1
 80037da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e0:	430a      	orrs	r2, r1
 80037e2:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80037e4:	2000      	movs	r0, #0
      break;
 80037e6:	e7c4      	b.n	8003772 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037e8:	6838      	ldr	r0, [r7, #0]
 80037ea:	f7ff fef9 	bl	80035e0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037ee:	2280      	movs	r2, #128	; 0x80
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	0112      	lsls	r2, r2, #4
 80037f4:	6999      	ldr	r1, [r3, #24]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	4917      	ldr	r1, [pc, #92]	; (800385c <HAL_TIM_PWM_ConfigChannel+0x110>)
 80037fe:	400a      	ands	r2, r1
 8003800:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003802:	68e2      	ldr	r2, [r4, #12]
 8003804:	6999      	ldr	r1, [r3, #24]
 8003806:	0212      	lsls	r2, r2, #8
 8003808:	e7ea      	b.n	80037e0 <HAL_TIM_PWM_ConfigChannel+0x94>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800380a:	2073      	movs	r0, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800380c:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800380e:	4914      	ldr	r1, [pc, #80]	; (8003860 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8003810:	6a1a      	ldr	r2, [r3, #32]
 8003812:	400a      	ands	r2, r1
 8003814:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003816:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003818:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800381a:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800381c:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 800381e:	6820      	ldr	r0, [r4, #0]
 8003820:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8003822:	4810      	ldr	r0, [pc, #64]	; (8003864 <HAL_TIM_PWM_ConfigChannel+0x118>)
 8003824:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003826:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8003828:	605f      	str	r7, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800382a:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800382c:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800382e:	0212      	lsls	r2, r2, #8
  TIMx->CCR3 = OC_Config->Pulse;
 8003830:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003832:	2104      	movs	r1, #4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003834:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8003836:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	4316      	orrs	r6, r2
 800383c:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	438a      	bics	r2, r1
 8003842:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003844:	69da      	ldr	r2, [r3, #28]
 8003846:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003848:	430a      	orrs	r2, r1
 800384a:	61da      	str	r2, [r3, #28]
 800384c:	e7ca      	b.n	80037e4 <HAL_TIM_PWM_ConfigChannel+0x98>
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	ffffefff 	.word	0xffffefff
 8003854:	ffff8cff 	.word	0xffff8cff
 8003858:	ffffdfff 	.word	0xffffdfff
 800385c:	fffffbff 	.word	0xfffffbff
 8003860:	fffffeff 	.word	0xfffffeff
 8003864:	fffffdff 	.word	0xfffffdff

08003868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003868:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800386a:	0004      	movs	r4, r0
 800386c:	2202      	movs	r2, #2
 800386e:	3438      	adds	r4, #56	; 0x38
 8003870:	7825      	ldrb	r5, [r4, #0]
{
 8003872:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003874:	0010      	movs	r0, r2
 8003876:	2d01      	cmp	r5, #1
 8003878:	d01d      	beq.n	80038b6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387a:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800387c:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800387e:	3539      	adds	r5, #57	; 0x39
 8003880:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003886:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003888:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800388a:	680e      	ldr	r6, [r1, #0]
 800388c:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800388e:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003890:	2080      	movs	r0, #128	; 0x80
 8003892:	05c0      	lsls	r0, r0, #23
 8003894:	4283      	cmp	r3, r0
 8003896:	d005      	beq.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003898:	4807      	ldr	r0, [pc, #28]	; (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800389a:	4283      	cmp	r3, r0
 800389c:	d002      	beq.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800389e:	4807      	ldr	r0, [pc, #28]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80038a0:	4283      	cmp	r3, r0
 80038a2:	d104      	bne.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038a4:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038a6:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038a8:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038aa:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ae:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80038b0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80038b2:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80038b4:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	40010800 	.word	0x40010800
 80038bc:	40011400 	.word	0x40011400

080038c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038c0:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c2:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c6:	2201      	movs	r2, #1
 80038c8:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038cc:	6801      	ldr	r1, [r0, #0]
 80038ce:	4d12      	ldr	r5, [pc, #72]	; (8003918 <UART_EndRxTransfer+0x58>)
 80038d0:	680b      	ldr	r3, [r1, #0]
 80038d2:	402b      	ands	r3, r5
 80038d4:	600b      	str	r3, [r1, #0]
 80038d6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038da:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038de:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e2:	6801      	ldr	r1, [r0, #0]
 80038e4:	688b      	ldr	r3, [r1, #8]
 80038e6:	4393      	bics	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
 80038ea:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ee:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d10a      	bne.n	800390a <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f8:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038fc:	2410      	movs	r4, #16
 80038fe:	6802      	ldr	r2, [r0, #0]
 8003900:	6813      	ldr	r3, [r2, #0]
 8003902:	43a3      	bics	r3, r4
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800390a:	2220      	movs	r2, #32
 800390c:	1d03      	adds	r3, r0, #4
 800390e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003910:	2300      	movs	r3, #0
 8003912:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003914:	6683      	str	r3, [r0, #104]	; 0x68
}
 8003916:	bd30      	pop	{r4, r5, pc}
 8003918:	fffffedf 	.word	0xfffffedf

0800391c <UART_SetConfig>:
{
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003920:	6925      	ldr	r5, [r4, #16]
 8003922:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003924:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003926:	4329      	orrs	r1, r5
 8003928:	6965      	ldr	r5, [r4, #20]
 800392a:	69c3      	ldr	r3, [r0, #28]
 800392c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800392e:	6810      	ldr	r0, [r2, #0]
 8003930:	4d72      	ldr	r5, [pc, #456]	; (8003afc <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003932:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003934:	4028      	ands	r0, r5
 8003936:	4301      	orrs	r1, r0
 8003938:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800393a:	6851      	ldr	r1, [r2, #4]
 800393c:	4870      	ldr	r0, [pc, #448]	; (8003b00 <UART_SetConfig+0x1e4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800393e:	4d71      	ldr	r5, [pc, #452]	; (8003b04 <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003940:	4001      	ands	r1, r0
 8003942:	68e0      	ldr	r0, [r4, #12]
 8003944:	4301      	orrs	r1, r0
 8003946:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003948:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800394a:	42aa      	cmp	r2, r5
 800394c:	d001      	beq.n	8003952 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 800394e:	6a21      	ldr	r1, [r4, #32]
 8003950:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003952:	6891      	ldr	r1, [r2, #8]
 8003954:	4e6c      	ldr	r6, [pc, #432]	; (8003b08 <UART_SetConfig+0x1ec>)
 8003956:	4031      	ands	r1, r6
 8003958:	4301      	orrs	r1, r0
 800395a:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800395c:	496b      	ldr	r1, [pc, #428]	; (8003b0c <UART_SetConfig+0x1f0>)
 800395e:	428a      	cmp	r2, r1
 8003960:	d10f      	bne.n	8003982 <UART_SetConfig+0x66>
 8003962:	2103      	movs	r1, #3
 8003964:	4a6a      	ldr	r2, [pc, #424]	; (8003b10 <UART_SetConfig+0x1f4>)
 8003966:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003968:	400a      	ands	r2, r1
 800396a:	3a01      	subs	r2, #1
 800396c:	4969      	ldr	r1, [pc, #420]	; (8003b14 <UART_SetConfig+0x1f8>)
 800396e:	2a02      	cmp	r2, #2
 8003970:	d90f      	bls.n	8003992 <UART_SetConfig+0x76>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003972:	2280      	movs	r2, #128	; 0x80
 8003974:	0212      	lsls	r2, r2, #8
 8003976:	4293      	cmp	r3, r2
 8003978:	d100      	bne.n	800397c <UART_SetConfig+0x60>
 800397a:	e069      	b.n	8003a50 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK2Freq();
 800397c:	f7ff fd06 	bl	800338c <HAL_RCC_GetPCLK2Freq>
        break;
 8003980:	e09c      	b.n	8003abc <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003982:	4965      	ldr	r1, [pc, #404]	; (8003b18 <UART_SetConfig+0x1fc>)
 8003984:	428a      	cmp	r2, r1
 8003986:	d113      	bne.n	80039b0 <UART_SetConfig+0x94>
 8003988:	210c      	movs	r1, #12
 800398a:	4a61      	ldr	r2, [pc, #388]	; (8003b10 <UART_SetConfig+0x1f4>)
 800398c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800398e:	400a      	ands	r2, r1
 8003990:	4962      	ldr	r1, [pc, #392]	; (8003b1c <UART_SetConfig+0x200>)
 8003992:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003994:	2280      	movs	r2, #128	; 0x80
 8003996:	0212      	lsls	r2, r2, #8
 8003998:	4293      	cmp	r3, r2
 800399a:	d000      	beq.n	800399e <UART_SetConfig+0x82>
 800399c:	e07f      	b.n	8003a9e <UART_SetConfig+0x182>
    switch (clocksource)
 800399e:	2808      	cmp	r0, #8
 80039a0:	d818      	bhi.n	80039d4 <UART_SetConfig+0xb8>
 80039a2:	f7fc fbb9 	bl	8000118 <__gnu_thumb1_case_uqi>
 80039a6:	5550      	.short	0x5550
 80039a8:	17791758 	.word	0x17791758
 80039ac:	1717      	.short	0x1717
 80039ae:	63          	.byte	0x63
 80039af:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039b0:	42aa      	cmp	r2, r5
 80039b2:	d10f      	bne.n	80039d4 <UART_SetConfig+0xb8>
 80039b4:	21c0      	movs	r1, #192	; 0xc0
 80039b6:	2080      	movs	r0, #128	; 0x80
 80039b8:	4a55      	ldr	r2, [pc, #340]	; (8003b10 <UART_SetConfig+0x1f4>)
 80039ba:	0109      	lsls	r1, r1, #4
 80039bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80039be:	0100      	lsls	r0, r0, #4
 80039c0:	400b      	ands	r3, r1
 80039c2:	4283      	cmp	r3, r0
 80039c4:	d016      	beq.n	80039f4 <UART_SetConfig+0xd8>
 80039c6:	d807      	bhi.n	80039d8 <UART_SetConfig+0xbc>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <UART_SetConfig+0xc6>
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	00d2      	lsls	r2, r2, #3
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d035      	beq.n	8003a40 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039d4:	2001      	movs	r0, #1
 80039d6:	e009      	b.n	80039ec <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039d8:	428b      	cmp	r3, r1
 80039da:	d1fb      	bne.n	80039d4 <UART_SetConfig+0xb8>
 80039dc:	2080      	movs	r0, #128	; 0x80
 80039de:	0200      	lsls	r0, r0, #8
 80039e0:	e012      	b.n	8003a08 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e2:	f7ff fcc3 	bl	800336c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d10e      	bne.n	8003a08 <UART_SetConfig+0xec>
 80039ea:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80039f0:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80039f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039f4:	2310      	movs	r3, #16
 80039f6:	6810      	ldr	r0, [r2, #0]
 80039f8:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80039fa:	4243      	negs	r3, r0
 80039fc:	4158      	adcs	r0, r3
 80039fe:	4b48      	ldr	r3, [pc, #288]	; (8003b20 <UART_SetConfig+0x204>)
 8003a00:	4240      	negs	r0, r0
 8003a02:	4018      	ands	r0, r3
 8003a04:	4b47      	ldr	r3, [pc, #284]	; (8003b24 <UART_SetConfig+0x208>)
 8003a06:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a08:	2203      	movs	r2, #3
 8003a0a:	6863      	ldr	r3, [r4, #4]
 8003a0c:	435a      	muls	r2, r3
 8003a0e:	4282      	cmp	r2, r0
 8003a10:	d8e0      	bhi.n	80039d4 <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a12:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a14:	4282      	cmp	r2, r0
 8003a16:	d3dd      	bcc.n	80039d4 <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a18:	2700      	movs	r7, #0
 8003a1a:	0e02      	lsrs	r2, r0, #24
 8003a1c:	0201      	lsls	r1, r0, #8
 8003a1e:	085e      	lsrs	r6, r3, #1
 8003a20:	1989      	adds	r1, r1, r6
 8003a22:	417a      	adcs	r2, r7
 8003a24:	0008      	movs	r0, r1
 8003a26:	0011      	movs	r1, r2
 8003a28:	001a      	movs	r2, r3
 8003a2a:	003b      	movs	r3, r7
 8003a2c:	f7fc fcfe 	bl	800042c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a30:	4b3d      	ldr	r3, [pc, #244]	; (8003b28 <UART_SetConfig+0x20c>)
 8003a32:	18c2      	adds	r2, r0, r3
 8003a34:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d8cc      	bhi.n	80039d4 <UART_SetConfig+0xb8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	60d8      	str	r0, [r3, #12]
 8003a3e:	e7d4      	b.n	80039ea <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8003a40:	f7ff f8fc 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
        break;
 8003a44:	e7cf      	b.n	80039e6 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a46:	f7ff fc91 	bl	800336c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4a:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8003a4c:	d0cd      	beq.n	80039ea <UART_SetConfig+0xce>
 8003a4e:	e00d      	b.n	8003a6c <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a50:	f7ff fc9c 	bl	800338c <HAL_RCC_GetPCLK2Freq>
 8003a54:	e7f9      	b.n	8003a4a <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a56:	4b2e      	ldr	r3, [pc, #184]	; (8003b10 <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003a58:	4a32      	ldr	r2, [pc, #200]	; (8003b24 <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003a60:	4243      	negs	r3, r0
 8003a62:	4158      	adcs	r0, r3
 8003a64:	4b2e      	ldr	r3, [pc, #184]	; (8003b20 <UART_SetConfig+0x204>)
 8003a66:	4240      	negs	r0, r0
 8003a68:	4003      	ands	r3, r0
 8003a6a:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a6c:	0058      	lsls	r0, r3, #1
 8003a6e:	6863      	ldr	r3, [r4, #4]
 8003a70:	6861      	ldr	r1, [r4, #4]
 8003a72:	085b      	lsrs	r3, r3, #1
 8003a74:	18c0      	adds	r0, r0, r3
 8003a76:	f7fc fb63 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <UART_SetConfig+0x214>)
 8003a7e:	3a10      	subs	r2, #16
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d8a7      	bhi.n	80039d4 <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a84:	230f      	movs	r3, #15
 8003a86:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a88:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a8a:	439a      	bics	r2, r3
 8003a8c:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a8e:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8003a90:	6822      	ldr	r2, [r4, #0]
 8003a92:	4318      	orrs	r0, r3
 8003a94:	60d0      	str	r0, [r2, #12]
 8003a96:	e7a8      	b.n	80039ea <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8003a98:	f7ff f8d0 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8003a9c:	e7d5      	b.n	8003a4a <UART_SetConfig+0x12e>
    switch (clocksource)
 8003a9e:	2808      	cmp	r0, #8
 8003aa0:	d898      	bhi.n	80039d4 <UART_SetConfig+0xb8>
 8003aa2:	f7fc fb43 	bl	800012c <__gnu_thumb1_case_shi>
 8003aa6:	0009      	.short	0x0009
 8003aa8:	000fff6b 	.word	0x000fff6b
 8003aac:	0024ff97 	.word	0x0024ff97
 8003ab0:	ff97ff97 	.word	0xff97ff97
 8003ab4:	0027ff97 	.word	0x0027ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab8:	f7ff fc58 	bl	800336c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003abc:	2800      	cmp	r0, #0
 8003abe:	d100      	bne.n	8003ac2 <UART_SetConfig+0x1a6>
 8003ac0:	e793      	b.n	80039ea <UART_SetConfig+0xce>
 8003ac2:	e00a      	b.n	8003ada <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ac4:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <UART_SetConfig+0x1f4>)
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	2310      	movs	r3, #16
 8003aca:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003acc:	4243      	negs	r3, r0
 8003ace:	4158      	adcs	r0, r3
 8003ad0:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <UART_SetConfig+0x204>)
 8003ad2:	4240      	negs	r0, r0
 8003ad4:	4018      	ands	r0, r3
 8003ad6:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <UART_SetConfig+0x208>)
 8003ad8:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ada:	6863      	ldr	r3, [r4, #4]
 8003adc:	6861      	ldr	r1, [r4, #4]
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	1818      	adds	r0, r3, r0
 8003ae2:	f7fc fb2d 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <UART_SetConfig+0x214>)
 8003aea:	3a10      	subs	r2, #16
 8003aec:	e7a3      	b.n	8003a36 <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003aee:	f7ff f8a5 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
        break;
 8003af2:	e7e3      	b.n	8003abc <UART_SetConfig+0x1a0>
    switch (clocksource)
 8003af4:	2080      	movs	r0, #128	; 0x80
 8003af6:	0200      	lsls	r0, r0, #8
 8003af8:	e7ef      	b.n	8003ada <UART_SetConfig+0x1be>
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	efff69f3 	.word	0xefff69f3
 8003b00:	ffffcfff 	.word	0xffffcfff
 8003b04:	40004800 	.word	0x40004800
 8003b08:	fffff4ff 	.word	0xfffff4ff
 8003b0c:	40013800 	.word	0x40013800
 8003b10:	40021000 	.word	0x40021000
 8003b14:	08004c11 	.word	0x08004c11
 8003b18:	40004400 	.word	0x40004400
 8003b1c:	08004c14 	.word	0x08004c14
 8003b20:	00b71b00 	.word	0x00b71b00
 8003b24:	003d0900 	.word	0x003d0900
 8003b28:	fffffd00 	.word	0xfffffd00
 8003b2c:	000ffcff 	.word	0x000ffcff
 8003b30:	0000ffef 	.word	0x0000ffef

08003b34 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b34:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003b36:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b38:	07da      	lsls	r2, r3, #31
 8003b3a:	d506      	bpl.n	8003b4a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b3c:	6801      	ldr	r1, [r0, #0]
 8003b3e:	4c28      	ldr	r4, [pc, #160]	; (8003be0 <UART_AdvFeatureConfig+0xac>)
 8003b40:	684a      	ldr	r2, [r1, #4]
 8003b42:	4022      	ands	r2, r4
 8003b44:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003b46:	4322      	orrs	r2, r4
 8003b48:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b4a:	079a      	lsls	r2, r3, #30
 8003b4c:	d506      	bpl.n	8003b5c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b4e:	6801      	ldr	r1, [r0, #0]
 8003b50:	4c24      	ldr	r4, [pc, #144]	; (8003be4 <UART_AdvFeatureConfig+0xb0>)
 8003b52:	684a      	ldr	r2, [r1, #4]
 8003b54:	4022      	ands	r2, r4
 8003b56:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003b58:	4322      	orrs	r2, r4
 8003b5a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b5c:	075a      	lsls	r2, r3, #29
 8003b5e:	d506      	bpl.n	8003b6e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b60:	6801      	ldr	r1, [r0, #0]
 8003b62:	4c21      	ldr	r4, [pc, #132]	; (8003be8 <UART_AdvFeatureConfig+0xb4>)
 8003b64:	684a      	ldr	r2, [r1, #4]
 8003b66:	4022      	ands	r2, r4
 8003b68:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003b6a:	4322      	orrs	r2, r4
 8003b6c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b6e:	071a      	lsls	r2, r3, #28
 8003b70:	d506      	bpl.n	8003b80 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b72:	6801      	ldr	r1, [r0, #0]
 8003b74:	4c1d      	ldr	r4, [pc, #116]	; (8003bec <UART_AdvFeatureConfig+0xb8>)
 8003b76:	684a      	ldr	r2, [r1, #4]
 8003b78:	4022      	ands	r2, r4
 8003b7a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003b7c:	4322      	orrs	r2, r4
 8003b7e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b80:	06da      	lsls	r2, r3, #27
 8003b82:	d506      	bpl.n	8003b92 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b84:	6801      	ldr	r1, [r0, #0]
 8003b86:	4c1a      	ldr	r4, [pc, #104]	; (8003bf0 <UART_AdvFeatureConfig+0xbc>)
 8003b88:	688a      	ldr	r2, [r1, #8]
 8003b8a:	4022      	ands	r2, r4
 8003b8c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003b8e:	4322      	orrs	r2, r4
 8003b90:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b92:	069a      	lsls	r2, r3, #26
 8003b94:	d506      	bpl.n	8003ba4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b96:	6801      	ldr	r1, [r0, #0]
 8003b98:	4c16      	ldr	r4, [pc, #88]	; (8003bf4 <UART_AdvFeatureConfig+0xc0>)
 8003b9a:	688a      	ldr	r2, [r1, #8]
 8003b9c:	4022      	ands	r2, r4
 8003b9e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003ba0:	4322      	orrs	r2, r4
 8003ba2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ba4:	065a      	lsls	r2, r3, #25
 8003ba6:	d510      	bpl.n	8003bca <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ba8:	6801      	ldr	r1, [r0, #0]
 8003baa:	4d13      	ldr	r5, [pc, #76]	; (8003bf8 <UART_AdvFeatureConfig+0xc4>)
 8003bac:	684a      	ldr	r2, [r1, #4]
 8003bae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003bb0:	402a      	ands	r2, r5
 8003bb2:	4322      	orrs	r2, r4
 8003bb4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bb6:	2280      	movs	r2, #128	; 0x80
 8003bb8:	0352      	lsls	r2, r2, #13
 8003bba:	4294      	cmp	r4, r2
 8003bbc:	d105      	bne.n	8003bca <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bbe:	684a      	ldr	r2, [r1, #4]
 8003bc0:	4c0e      	ldr	r4, [pc, #56]	; (8003bfc <UART_AdvFeatureConfig+0xc8>)
 8003bc2:	4022      	ands	r2, r4
 8003bc4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003bc6:	4322      	orrs	r2, r4
 8003bc8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bca:	061b      	lsls	r3, r3, #24
 8003bcc:	d506      	bpl.n	8003bdc <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bce:	6802      	ldr	r2, [r0, #0]
 8003bd0:	490b      	ldr	r1, [pc, #44]	; (8003c00 <UART_AdvFeatureConfig+0xcc>)
 8003bd2:	6853      	ldr	r3, [r2, #4]
 8003bd4:	400b      	ands	r3, r1
 8003bd6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6053      	str	r3, [r2, #4]
}
 8003bdc:	bd30      	pop	{r4, r5, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	fffdffff 	.word	0xfffdffff
 8003be4:	fffeffff 	.word	0xfffeffff
 8003be8:	fffbffff 	.word	0xfffbffff
 8003bec:	ffff7fff 	.word	0xffff7fff
 8003bf0:	ffffefff 	.word	0xffffefff
 8003bf4:	ffffdfff 	.word	0xffffdfff
 8003bf8:	ffefffff 	.word	0xffefffff
 8003bfc:	ff9fffff 	.word	0xff9fffff
 8003c00:	fff7ffff 	.word	0xfff7ffff

08003c04 <UART_WaitOnFlagUntilTimeout>:
{
 8003c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c06:	0004      	movs	r4, r0
 8003c08:	000d      	movs	r5, r1
 8003c0a:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c0c:	2608      	movs	r6, #8
{
 8003c0e:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c10:	6822      	ldr	r2, [r4, #0]
 8003c12:	69d3      	ldr	r3, [r2, #28]
 8003c14:	402b      	ands	r3, r5
 8003c16:	1b5b      	subs	r3, r3, r5
 8003c18:	4259      	negs	r1, r3
 8003c1a:	414b      	adcs	r3, r1
 8003c1c:	42bb      	cmp	r3, r7
 8003c1e:	d001      	beq.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 8003c20:	2000      	movs	r0, #0
 8003c22:	e021      	b.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8003c24:	9b08      	ldr	r3, [sp, #32]
 8003c26:	3301      	adds	r3, #1
 8003c28:	d0f3      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2a:	f7fe f9d9 	bl	8001fe0 <HAL_GetTick>
 8003c2e:	9b00      	ldr	r3, [sp, #0]
 8003c30:	1ac0      	subs	r0, r0, r3
 8003c32:	9b08      	ldr	r3, [sp, #32]
 8003c34:	4298      	cmp	r0, r3
 8003c36:	d828      	bhi.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x86>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d026      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c3c:	2104      	movs	r1, #4
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	420a      	tst	r2, r1
 8003c44:	d0e4      	beq.n	8003c10 <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c46:	69da      	ldr	r2, [r3, #28]
 8003c48:	0011      	movs	r1, r2
 8003c4a:	4031      	ands	r1, r6
 8003c4c:	9101      	str	r1, [sp, #4]
 8003c4e:	4232      	tst	r2, r6
 8003c50:	d00b      	beq.n	8003c6a <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 8003c52:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c54:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8003c56:	f7ff fe33 	bl	80038c0 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c5a:	0023      	movs	r3, r4
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8003c60:	2300      	movs	r3, #0
           return HAL_ERROR;
 8003c62:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8003c64:	3478      	adds	r4, #120	; 0x78
 8003c66:	7023      	strb	r3, [r4, #0]
}
 8003c68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	69d9      	ldr	r1, [r3, #28]
 8003c6e:	0112      	lsls	r2, r2, #4
 8003c70:	4211      	tst	r1, r2
 8003c72:	d0cd      	beq.n	8003c10 <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c74:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8003c76:	0020      	movs	r0, r4
 8003c78:	f7ff fe22 	bl	80038c0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c7c:	0023      	movs	r3, r4
 8003c7e:	2220      	movs	r2, #32
 8003c80:	3308      	adds	r3, #8
 8003c82:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8003c84:	9b01      	ldr	r3, [sp, #4]
 8003c86:	3478      	adds	r4, #120	; 0x78
 8003c88:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003c8a:	2003      	movs	r0, #3
 8003c8c:	e7ec      	b.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x64>

08003c8e <HAL_UART_Transmit>:
{
 8003c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c90:	b085      	sub	sp, #20
 8003c92:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8003c94:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8003c96:	0004      	movs	r4, r0
 8003c98:	000d      	movs	r5, r1
 8003c9a:	0016      	movs	r6, r2
    return HAL_BUSY;
 8003c9c:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d139      	bne.n	8003d16 <HAL_UART_Transmit+0x88>
      return  HAL_ERROR;
 8003ca2:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003ca4:	2900      	cmp	r1, #0
 8003ca6:	d036      	beq.n	8003d16 <HAL_UART_Transmit+0x88>
 8003ca8:	2a00      	cmp	r2, #0
 8003caa:	d034      	beq.n	8003d16 <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cac:	2380      	movs	r3, #128	; 0x80
 8003cae:	68a2      	ldr	r2, [r4, #8]
 8003cb0:	015b      	lsls	r3, r3, #5
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d104      	bne.n	8003cc0 <HAL_UART_Transmit+0x32>
 8003cb6:	6923      	ldr	r3, [r4, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003cbc:	4201      	tst	r1, r0
 8003cbe:	d12a      	bne.n	8003d16 <HAL_UART_Transmit+0x88>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc0:	0023      	movs	r3, r4
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cc8:	2321      	movs	r3, #33	; 0x21
 8003cca:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8003ccc:	f7fe f988 	bl	8001fe0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8003cd0:	0023      	movs	r3, r4
 8003cd2:	3350      	adds	r3, #80	; 0x50
 8003cd4:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	801e      	strh	r6, [r3, #0]
 8003cda:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8003ce0:	0007      	movs	r7, r0
      pdata16bits = NULL;
 8003ce2:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ce4:	015b      	lsls	r3, r3, #5
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d104      	bne.n	8003cf4 <HAL_UART_Transmit+0x66>
 8003cea:	6923      	ldr	r3, [r4, #16]
 8003cec:	42b3      	cmp	r3, r6
 8003cee:	d101      	bne.n	8003cf4 <HAL_UART_Transmit+0x66>
 8003cf0:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8003cf2:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8003cf4:	0023      	movs	r3, r4
 8003cf6:	3352      	adds	r3, #82	; 0x52
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10c      	bne.n	8003d1a <HAL_UART_Transmit+0x8c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d00:	9b03      	ldr	r3, [sp, #12]
 8003d02:	2140      	movs	r1, #64	; 0x40
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	0020      	movs	r0, r4
 8003d08:	003b      	movs	r3, r7
 8003d0a:	f7ff ff7b 	bl	8003c04 <UART_WaitOnFlagUntilTimeout>
 8003d0e:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8003d10:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d10d      	bne.n	8003d32 <HAL_UART_Transmit+0xa4>
}
 8003d16:	b005      	add	sp, #20
 8003d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d1a:	9b03      	ldr	r3, [sp, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	2180      	movs	r1, #128	; 0x80
 8003d22:	003b      	movs	r3, r7
 8003d24:	0020      	movs	r0, r4
 8003d26:	f7ff ff6d 	bl	8003c04 <UART_WaitOnFlagUntilTimeout>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_UART_Transmit+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 8003d2e:	2320      	movs	r3, #32
 8003d30:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8003d32:	2003      	movs	r0, #3
 8003d34:	e7ef      	b.n	8003d16 <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d36:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003d38:	2d00      	cmp	r5, #0
 8003d3a:	d10b      	bne.n	8003d54 <HAL_UART_Transmit+0xc6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d3c:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8003d3e:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d40:	05db      	lsls	r3, r3, #23
 8003d42:	0ddb      	lsrs	r3, r3, #23
 8003d44:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003d46:	9b02      	ldr	r3, [sp, #8]
 8003d48:	9a02      	ldr	r2, [sp, #8]
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	8013      	strh	r3, [r2, #0]
 8003d52:	e7cf      	b.n	8003cf4 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d54:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8003d56:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d58:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8003d5a:	e7f4      	b.n	8003d46 <HAL_UART_Transmit+0xb8>

08003d5c <HAL_UART_Receive>:
{
 8003d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5e:	0016      	movs	r6, r2
 8003d60:	b087      	sub	sp, #28
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d62:	1d02      	adds	r2, r0, #4
{
 8003d64:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d66:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
{
 8003d68:	0004      	movs	r4, r0
 8003d6a:	000d      	movs	r5, r1
    return HAL_BUSY;
 8003d6c:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d160      	bne.n	8003e34 <HAL_UART_Receive+0xd8>
      return  HAL_ERROR;
 8003d72:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003d74:	2900      	cmp	r1, #0
 8003d76:	d05d      	beq.n	8003e34 <HAL_UART_Receive+0xd8>
 8003d78:	2e00      	cmp	r6, #0
 8003d7a:	d05b      	beq.n	8003e34 <HAL_UART_Receive+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	68a1      	ldr	r1, [r4, #8]
 8003d80:	015b      	lsls	r3, r3, #5
 8003d82:	4299      	cmp	r1, r3
 8003d84:	d104      	bne.n	8003d90 <HAL_UART_Receive+0x34>
 8003d86:	6923      	ldr	r3, [r4, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_UART_Receive+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d8c:	4205      	tst	r5, r0
 8003d8e:	d151      	bne.n	8003e34 <HAL_UART_Receive+0xd8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d90:	0023      	movs	r3, r4
 8003d92:	2700      	movs	r7, #0
 8003d94:	3308      	adds	r3, #8
 8003d96:	67df      	str	r7, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d98:	2322      	movs	r3, #34	; 0x22
 8003d9a:	67d3      	str	r3, [r2, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9c:	6627      	str	r7, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 8003d9e:	f7fe f91f 	bl	8001fe0 <HAL_GetTick>
    huart->RxXferSize  = Size;
 8003da2:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8003da4:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 8003da6:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 8003da8:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 8003daa:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 8003dac:	3302      	adds	r3, #2
 8003dae:	9303      	str	r3, [sp, #12]
 8003db0:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003db2:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 8003db4:	0149      	lsls	r1, r1, #5
 8003db6:	3302      	adds	r3, #2
 8003db8:	428a      	cmp	r2, r1
 8003dba:	d11b      	bne.n	8003df4 <HAL_UART_Receive+0x98>
 8003dbc:	6921      	ldr	r1, [r4, #16]
 8003dbe:	42b9      	cmp	r1, r7
 8003dc0:	d116      	bne.n	8003df0 <HAL_UART_Receive+0x94>
 8003dc2:	4926      	ldr	r1, [pc, #152]	; (8003e5c <HAL_UART_Receive+0x100>)
 8003dc4:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 8003dc6:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc8:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 8003dca:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dcc:	015b      	lsls	r3, r3, #5
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d104      	bne.n	8003ddc <HAL_UART_Receive+0x80>
 8003dd2:	6923      	ldr	r3, [r4, #16]
 8003dd4:	42b3      	cmp	r3, r6
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Receive+0x80>
 8003dd8:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8003dda:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 8003ddc:	0023      	movs	r3, r4
 8003dde:	335a      	adds	r3, #90	; 0x5a
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	b298      	uxth	r0, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d117      	bne.n	8003e18 <HAL_UART_Receive+0xbc>
    huart->RxState = HAL_UART_STATE_READY;
 8003de8:	3404      	adds	r4, #4
 8003dea:	3320      	adds	r3, #32
 8003dec:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8003dee:	e021      	b.n	8003e34 <HAL_UART_Receive+0xd8>
    UART_MASK_COMPUTATION(huart);
 8003df0:	21ff      	movs	r1, #255	; 0xff
 8003df2:	e7e7      	b.n	8003dc4 <HAL_UART_Receive+0x68>
 8003df4:	2a00      	cmp	r2, #0
 8003df6:	d104      	bne.n	8003e02 <HAL_UART_Receive+0xa6>
 8003df8:	6921      	ldr	r1, [r4, #16]
 8003dfa:	2900      	cmp	r1, #0
 8003dfc:	d0f8      	beq.n	8003df0 <HAL_UART_Receive+0x94>
 8003dfe:	217f      	movs	r1, #127	; 0x7f
 8003e00:	e7e0      	b.n	8003dc4 <HAL_UART_Receive+0x68>
 8003e02:	2180      	movs	r1, #128	; 0x80
 8003e04:	0549      	lsls	r1, r1, #21
 8003e06:	428a      	cmp	r2, r1
 8003e08:	d104      	bne.n	8003e14 <HAL_UART_Receive+0xb8>
 8003e0a:	6921      	ldr	r1, [r4, #16]
 8003e0c:	2900      	cmp	r1, #0
 8003e0e:	d0f6      	beq.n	8003dfe <HAL_UART_Receive+0xa2>
 8003e10:	213f      	movs	r1, #63	; 0x3f
 8003e12:	e7d7      	b.n	8003dc4 <HAL_UART_Receive+0x68>
 8003e14:	801f      	strh	r7, [r3, #0]
 8003e16:	e7d6      	b.n	8003dc6 <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e18:	9b05      	ldr	r3, [sp, #20]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2120      	movs	r1, #32
 8003e20:	0020      	movs	r0, r4
 8003e22:	9b04      	ldr	r3, [sp, #16]
 8003e24:	f7ff feee 	bl	8003c04 <UART_WaitOnFlagUntilTimeout>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_UART_Receive+0xdc>
        huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8003e2e:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8003e30:	3404      	adds	r4, #4
 8003e32:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8003e34:	b007      	add	sp, #28
 8003e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8003e3e:	2d00      	cmp	r5, #0
 8003e40:	d108      	bne.n	8003e54 <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003e42:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 8003e44:	3602      	adds	r6, #2
      huart->RxXferCount--;
 8003e46:	9b03      	ldr	r3, [sp, #12]
 8003e48:	9a03      	ldr	r2, [sp, #12]
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	8013      	strh	r3, [r2, #0]
 8003e52:	e7c3      	b.n	8003ddc <HAL_UART_Receive+0x80>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003e54:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8003e56:	3501      	adds	r5, #1
 8003e58:	e7f5      	b.n	8003e46 <HAL_UART_Receive+0xea>
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	000001ff 	.word	0x000001ff

08003e60 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e60:	0003      	movs	r3, r0
{
 8003e62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	2500      	movs	r5, #0
{
 8003e66:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e68:	3308      	adds	r3, #8
 8003e6a:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003e6c:	f7fe f8b8 	bl	8001fe0 <HAL_GetTick>
 8003e70:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e72:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003e74:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3678      	adds	r6, #120	; 0x78
 8003e7a:	071b      	lsls	r3, r3, #28
 8003e7c:	d51b      	bpl.n	8003eb6 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e7e:	2180      	movs	r1, #128	; 0x80
 8003e80:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <UART_CheckIdleState+0xbc>)
 8003e82:	002a      	movs	r2, r5
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	0389      	lsls	r1, r1, #14
 8003e88:	0003      	movs	r3, r0
 8003e8a:	0020      	movs	r0, r4
 8003e8c:	f7ff feba 	bl	8003c04 <UART_WaitOnFlagUntilTimeout>
 8003e90:	42a8      	cmp	r0, r5
 8003e92:	d010      	beq.n	8003eb6 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e94:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e9e:	2080      	movs	r0, #128	; 0x80
 8003ea0:	6822      	ldr	r2, [r4, #0]
 8003ea2:	6813      	ldr	r3, [r2, #0]
 8003ea4:	4383      	bics	r3, r0
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8003eac:	2320      	movs	r3, #32
 8003eae:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8003eb0:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 8003eb2:	2003      	movs	r0, #3
}
 8003eb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eb6:	0025      	movs	r5, r4
 8003eb8:	cd08      	ldmia	r5!, {r3}
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	075b      	lsls	r3, r3, #29
 8003ebe:	d525      	bpl.n	8003f0c <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	4b16      	ldr	r3, [pc, #88]	; (8003f1c <UART_CheckIdleState+0xbc>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	0020      	movs	r0, r4
 8003eca:	003b      	movs	r3, r7
 8003ecc:	03c9      	lsls	r1, r1, #15
 8003ece:	f7ff fe99 	bl	8003c04 <UART_WaitOnFlagUntilTimeout>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d01a      	beq.n	8003f0c <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eda:	2201      	movs	r2, #1
 8003edc:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee0:	6821      	ldr	r1, [r4, #0]
 8003ee2:	4f0f      	ldr	r7, [pc, #60]	; (8003f20 <UART_CheckIdleState+0xc0>)
 8003ee4:	680b      	ldr	r3, [r1, #0]
 8003ee6:	403b      	ands	r3, r7
 8003ee8:	600b      	str	r3, [r1, #0]
 8003eea:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eee:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef2:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	6821      	ldr	r1, [r4, #0]
 8003ef8:	688b      	ldr	r3, [r1, #8]
 8003efa:	4393      	bics	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
 8003efe:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8003f02:	2320      	movs	r3, #32
 8003f04:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8003f06:	2300      	movs	r3, #0
 8003f08:	7033      	strb	r3, [r6, #0]
 8003f0a:	e7d2      	b.n	8003eb2 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003f0e:	2320      	movs	r3, #32
 8003f10:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f12:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f14:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f16:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8003f18:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 8003f1a:	e7cb      	b.n	8003eb4 <UART_CheckIdleState+0x54>
 8003f1c:	01ffffff 	.word	0x01ffffff
 8003f20:	fffffedf 	.word	0xfffffedf

08003f24 <HAL_UART_Init>:
{
 8003f24:	b510      	push	{r4, lr}
 8003f26:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003f28:	d101      	bne.n	8003f2e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003f2a:	2001      	movs	r0, #1
}
 8003f2c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003f2e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d104      	bne.n	8003f3e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8003f34:	0002      	movs	r2, r0
 8003f36:	3278      	adds	r2, #120	; 0x78
 8003f38:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003f3a:	f7fd ff89 	bl	8001e50 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003f3e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003f40:	2101      	movs	r1, #1
 8003f42:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003f44:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8003f46:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f48:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003f4a:	438b      	bics	r3, r1
 8003f4c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f4e:	f7ff fce5 	bl	800391c <UART_SetConfig>
 8003f52:	2801      	cmp	r0, #1
 8003f54:	d0e9      	beq.n	8003f2a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8003f5c:	0020      	movs	r0, r4
 8003f5e:	f7ff fde9 	bl	8003b34 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	4907      	ldr	r1, [pc, #28]	; (8003f84 <HAL_UART_Init+0x60>)
 8003f66:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003f68:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	438a      	bics	r2, r1
 8003f74:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003f76:	2201      	movs	r2, #1
 8003f78:	6819      	ldr	r1, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003f7e:	f7ff ff6f 	bl	8003e60 <UART_CheckIdleState>
 8003f82:	e7d3      	b.n	8003f2c <HAL_UART_Init+0x8>
 8003f84:	ffffb7ff 	.word	0xffffb7ff

08003f88 <__errno>:
 8003f88:	4b01      	ldr	r3, [pc, #4]	; (8003f90 <__errno+0x8>)
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	4770      	bx	lr
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	20000068 	.word	0x20000068

08003f94 <__libc_init_array>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	2600      	movs	r6, #0
 8003f98:	4d0c      	ldr	r5, [pc, #48]	; (8003fcc <__libc_init_array+0x38>)
 8003f9a:	4c0d      	ldr	r4, [pc, #52]	; (8003fd0 <__libc_init_array+0x3c>)
 8003f9c:	1b64      	subs	r4, r4, r5
 8003f9e:	10a4      	asrs	r4, r4, #2
 8003fa0:	42a6      	cmp	r6, r4
 8003fa2:	d109      	bne.n	8003fb8 <__libc_init_array+0x24>
 8003fa4:	2600      	movs	r6, #0
 8003fa6:	f000 fca7 	bl	80048f8 <_init>
 8003faa:	4d0a      	ldr	r5, [pc, #40]	; (8003fd4 <__libc_init_array+0x40>)
 8003fac:	4c0a      	ldr	r4, [pc, #40]	; (8003fd8 <__libc_init_array+0x44>)
 8003fae:	1b64      	subs	r4, r4, r5
 8003fb0:	10a4      	asrs	r4, r4, #2
 8003fb2:	42a6      	cmp	r6, r4
 8003fb4:	d105      	bne.n	8003fc2 <__libc_init_array+0x2e>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	00b3      	lsls	r3, r6, #2
 8003fba:	58eb      	ldr	r3, [r5, r3]
 8003fbc:	4798      	blx	r3
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7ee      	b.n	8003fa0 <__libc_init_array+0xc>
 8003fc2:	00b3      	lsls	r3, r6, #2
 8003fc4:	58eb      	ldr	r3, [r5, r3]
 8003fc6:	4798      	blx	r3
 8003fc8:	3601      	adds	r6, #1
 8003fca:	e7f2      	b.n	8003fb2 <__libc_init_array+0x1e>
 8003fcc:	08004c5c 	.word	0x08004c5c
 8003fd0:	08004c5c 	.word	0x08004c5c
 8003fd4:	08004c5c 	.word	0x08004c5c
 8003fd8:	08004c60 	.word	0x08004c60

08003fdc <malloc>:
 8003fdc:	b510      	push	{r4, lr}
 8003fde:	4b03      	ldr	r3, [pc, #12]	; (8003fec <malloc+0x10>)
 8003fe0:	0001      	movs	r1, r0
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	f000 f88c 	bl	8004100 <_malloc_r>
 8003fe8:	bd10      	pop	{r4, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	20000068 	.word	0x20000068

08003ff0 <free>:
 8003ff0:	b510      	push	{r4, lr}
 8003ff2:	4b03      	ldr	r3, [pc, #12]	; (8004000 <free+0x10>)
 8003ff4:	0001      	movs	r1, r0
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	f000 f816 	bl	8004028 <_free_r>
 8003ffc:	bd10      	pop	{r4, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	20000068 	.word	0x20000068

08004004 <memcpy>:
 8004004:	2300      	movs	r3, #0
 8004006:	b510      	push	{r4, lr}
 8004008:	429a      	cmp	r2, r3
 800400a:	d100      	bne.n	800400e <memcpy+0xa>
 800400c:	bd10      	pop	{r4, pc}
 800400e:	5ccc      	ldrb	r4, [r1, r3]
 8004010:	54c4      	strb	r4, [r0, r3]
 8004012:	3301      	adds	r3, #1
 8004014:	e7f8      	b.n	8004008 <memcpy+0x4>

08004016 <memset>:
 8004016:	0003      	movs	r3, r0
 8004018:	1882      	adds	r2, r0, r2
 800401a:	4293      	cmp	r3, r2
 800401c:	d100      	bne.n	8004020 <memset+0xa>
 800401e:	4770      	bx	lr
 8004020:	7019      	strb	r1, [r3, #0]
 8004022:	3301      	adds	r3, #1
 8004024:	e7f9      	b.n	800401a <memset+0x4>
	...

08004028 <_free_r>:
 8004028:	b570      	push	{r4, r5, r6, lr}
 800402a:	0005      	movs	r5, r0
 800402c:	2900      	cmp	r1, #0
 800402e:	d010      	beq.n	8004052 <_free_r+0x2a>
 8004030:	1f0c      	subs	r4, r1, #4
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	da00      	bge.n	800403a <_free_r+0x12>
 8004038:	18e4      	adds	r4, r4, r3
 800403a:	0028      	movs	r0, r5
 800403c:	f000 f910 	bl	8004260 <__malloc_lock>
 8004040:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <_free_r+0x90>)
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d105      	bne.n	8004054 <_free_r+0x2c>
 8004048:	6063      	str	r3, [r4, #4]
 800404a:	6014      	str	r4, [r2, #0]
 800404c:	0028      	movs	r0, r5
 800404e:	f000 f90f 	bl	8004270 <__malloc_unlock>
 8004052:	bd70      	pop	{r4, r5, r6, pc}
 8004054:	42a3      	cmp	r3, r4
 8004056:	d908      	bls.n	800406a <_free_r+0x42>
 8004058:	6821      	ldr	r1, [r4, #0]
 800405a:	1860      	adds	r0, r4, r1
 800405c:	4283      	cmp	r3, r0
 800405e:	d1f3      	bne.n	8004048 <_free_r+0x20>
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	1841      	adds	r1, r0, r1
 8004066:	6021      	str	r1, [r4, #0]
 8004068:	e7ee      	b.n	8004048 <_free_r+0x20>
 800406a:	001a      	movs	r2, r3
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <_free_r+0x4e>
 8004072:	42a3      	cmp	r3, r4
 8004074:	d9f9      	bls.n	800406a <_free_r+0x42>
 8004076:	6811      	ldr	r1, [r2, #0]
 8004078:	1850      	adds	r0, r2, r1
 800407a:	42a0      	cmp	r0, r4
 800407c:	d10b      	bne.n	8004096 <_free_r+0x6e>
 800407e:	6820      	ldr	r0, [r4, #0]
 8004080:	1809      	adds	r1, r1, r0
 8004082:	1850      	adds	r0, r2, r1
 8004084:	6011      	str	r1, [r2, #0]
 8004086:	4283      	cmp	r3, r0
 8004088:	d1e0      	bne.n	800404c <_free_r+0x24>
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	1841      	adds	r1, r0, r1
 8004090:	6011      	str	r1, [r2, #0]
 8004092:	6053      	str	r3, [r2, #4]
 8004094:	e7da      	b.n	800404c <_free_r+0x24>
 8004096:	42a0      	cmp	r0, r4
 8004098:	d902      	bls.n	80040a0 <_free_r+0x78>
 800409a:	230c      	movs	r3, #12
 800409c:	602b      	str	r3, [r5, #0]
 800409e:	e7d5      	b.n	800404c <_free_r+0x24>
 80040a0:	6821      	ldr	r1, [r4, #0]
 80040a2:	1860      	adds	r0, r4, r1
 80040a4:	4283      	cmp	r3, r0
 80040a6:	d103      	bne.n	80040b0 <_free_r+0x88>
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	1841      	adds	r1, r0, r1
 80040ae:	6021      	str	r1, [r4, #0]
 80040b0:	6063      	str	r3, [r4, #4]
 80040b2:	6054      	str	r4, [r2, #4]
 80040b4:	e7ca      	b.n	800404c <_free_r+0x24>
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	20000288 	.word	0x20000288

080040bc <sbrk_aligned>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	4e0f      	ldr	r6, [pc, #60]	; (80040fc <sbrk_aligned+0x40>)
 80040c0:	000d      	movs	r5, r1
 80040c2:	6831      	ldr	r1, [r6, #0]
 80040c4:	0004      	movs	r4, r0
 80040c6:	2900      	cmp	r1, #0
 80040c8:	d102      	bne.n	80040d0 <sbrk_aligned+0x14>
 80040ca:	f000 f88f 	bl	80041ec <_sbrk_r>
 80040ce:	6030      	str	r0, [r6, #0]
 80040d0:	0029      	movs	r1, r5
 80040d2:	0020      	movs	r0, r4
 80040d4:	f000 f88a 	bl	80041ec <_sbrk_r>
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	d00a      	beq.n	80040f2 <sbrk_aligned+0x36>
 80040dc:	2303      	movs	r3, #3
 80040de:	1cc5      	adds	r5, r0, #3
 80040e0:	439d      	bics	r5, r3
 80040e2:	42a8      	cmp	r0, r5
 80040e4:	d007      	beq.n	80040f6 <sbrk_aligned+0x3a>
 80040e6:	1a29      	subs	r1, r5, r0
 80040e8:	0020      	movs	r0, r4
 80040ea:	f000 f87f 	bl	80041ec <_sbrk_r>
 80040ee:	1c43      	adds	r3, r0, #1
 80040f0:	d101      	bne.n	80040f6 <sbrk_aligned+0x3a>
 80040f2:	2501      	movs	r5, #1
 80040f4:	426d      	negs	r5, r5
 80040f6:	0028      	movs	r0, r5
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	2000028c 	.word	0x2000028c

08004100 <_malloc_r>:
 8004100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004102:	2203      	movs	r2, #3
 8004104:	1ccb      	adds	r3, r1, #3
 8004106:	4393      	bics	r3, r2
 8004108:	3308      	adds	r3, #8
 800410a:	0006      	movs	r6, r0
 800410c:	001f      	movs	r7, r3
 800410e:	2b0c      	cmp	r3, #12
 8004110:	d232      	bcs.n	8004178 <_malloc_r+0x78>
 8004112:	270c      	movs	r7, #12
 8004114:	42b9      	cmp	r1, r7
 8004116:	d831      	bhi.n	800417c <_malloc_r+0x7c>
 8004118:	0030      	movs	r0, r6
 800411a:	f000 f8a1 	bl	8004260 <__malloc_lock>
 800411e:	4d32      	ldr	r5, [pc, #200]	; (80041e8 <_malloc_r+0xe8>)
 8004120:	682b      	ldr	r3, [r5, #0]
 8004122:	001c      	movs	r4, r3
 8004124:	2c00      	cmp	r4, #0
 8004126:	d12e      	bne.n	8004186 <_malloc_r+0x86>
 8004128:	0039      	movs	r1, r7
 800412a:	0030      	movs	r0, r6
 800412c:	f7ff ffc6 	bl	80040bc <sbrk_aligned>
 8004130:	0004      	movs	r4, r0
 8004132:	1c43      	adds	r3, r0, #1
 8004134:	d11e      	bne.n	8004174 <_malloc_r+0x74>
 8004136:	682c      	ldr	r4, [r5, #0]
 8004138:	0025      	movs	r5, r4
 800413a:	2d00      	cmp	r5, #0
 800413c:	d14a      	bne.n	80041d4 <_malloc_r+0xd4>
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	0029      	movs	r1, r5
 8004142:	18e3      	adds	r3, r4, r3
 8004144:	0030      	movs	r0, r6
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	f000 f850 	bl	80041ec <_sbrk_r>
 800414c:	9b01      	ldr	r3, [sp, #4]
 800414e:	4283      	cmp	r3, r0
 8004150:	d143      	bne.n	80041da <_malloc_r+0xda>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	3703      	adds	r7, #3
 8004156:	1aff      	subs	r7, r7, r3
 8004158:	2303      	movs	r3, #3
 800415a:	439f      	bics	r7, r3
 800415c:	3708      	adds	r7, #8
 800415e:	2f0c      	cmp	r7, #12
 8004160:	d200      	bcs.n	8004164 <_malloc_r+0x64>
 8004162:	270c      	movs	r7, #12
 8004164:	0039      	movs	r1, r7
 8004166:	0030      	movs	r0, r6
 8004168:	f7ff ffa8 	bl	80040bc <sbrk_aligned>
 800416c:	1c43      	adds	r3, r0, #1
 800416e:	d034      	beq.n	80041da <_malloc_r+0xda>
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	19df      	adds	r7, r3, r7
 8004174:	6027      	str	r7, [r4, #0]
 8004176:	e013      	b.n	80041a0 <_malloc_r+0xa0>
 8004178:	2b00      	cmp	r3, #0
 800417a:	dacb      	bge.n	8004114 <_malloc_r+0x14>
 800417c:	230c      	movs	r3, #12
 800417e:	2500      	movs	r5, #0
 8004180:	6033      	str	r3, [r6, #0]
 8004182:	0028      	movs	r0, r5
 8004184:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004186:	6822      	ldr	r2, [r4, #0]
 8004188:	1bd1      	subs	r1, r2, r7
 800418a:	d420      	bmi.n	80041ce <_malloc_r+0xce>
 800418c:	290b      	cmp	r1, #11
 800418e:	d917      	bls.n	80041c0 <_malloc_r+0xc0>
 8004190:	19e2      	adds	r2, r4, r7
 8004192:	6027      	str	r7, [r4, #0]
 8004194:	42a3      	cmp	r3, r4
 8004196:	d111      	bne.n	80041bc <_malloc_r+0xbc>
 8004198:	602a      	str	r2, [r5, #0]
 800419a:	6863      	ldr	r3, [r4, #4]
 800419c:	6011      	str	r1, [r2, #0]
 800419e:	6053      	str	r3, [r2, #4]
 80041a0:	0030      	movs	r0, r6
 80041a2:	0025      	movs	r5, r4
 80041a4:	f000 f864 	bl	8004270 <__malloc_unlock>
 80041a8:	2207      	movs	r2, #7
 80041aa:	350b      	adds	r5, #11
 80041ac:	1d23      	adds	r3, r4, #4
 80041ae:	4395      	bics	r5, r2
 80041b0:	1aea      	subs	r2, r5, r3
 80041b2:	429d      	cmp	r5, r3
 80041b4:	d0e5      	beq.n	8004182 <_malloc_r+0x82>
 80041b6:	1b5b      	subs	r3, r3, r5
 80041b8:	50a3      	str	r3, [r4, r2]
 80041ba:	e7e2      	b.n	8004182 <_malloc_r+0x82>
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	e7ec      	b.n	800419a <_malloc_r+0x9a>
 80041c0:	6862      	ldr	r2, [r4, #4]
 80041c2:	42a3      	cmp	r3, r4
 80041c4:	d101      	bne.n	80041ca <_malloc_r+0xca>
 80041c6:	602a      	str	r2, [r5, #0]
 80041c8:	e7ea      	b.n	80041a0 <_malloc_r+0xa0>
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	e7e8      	b.n	80041a0 <_malloc_r+0xa0>
 80041ce:	0023      	movs	r3, r4
 80041d0:	6864      	ldr	r4, [r4, #4]
 80041d2:	e7a7      	b.n	8004124 <_malloc_r+0x24>
 80041d4:	002c      	movs	r4, r5
 80041d6:	686d      	ldr	r5, [r5, #4]
 80041d8:	e7af      	b.n	800413a <_malloc_r+0x3a>
 80041da:	230c      	movs	r3, #12
 80041dc:	0030      	movs	r0, r6
 80041de:	6033      	str	r3, [r6, #0]
 80041e0:	f000 f846 	bl	8004270 <__malloc_unlock>
 80041e4:	e7cd      	b.n	8004182 <_malloc_r+0x82>
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	20000288 	.word	0x20000288

080041ec <_sbrk_r>:
 80041ec:	2300      	movs	r3, #0
 80041ee:	b570      	push	{r4, r5, r6, lr}
 80041f0:	4d06      	ldr	r5, [pc, #24]	; (800420c <_sbrk_r+0x20>)
 80041f2:	0004      	movs	r4, r0
 80041f4:	0008      	movs	r0, r1
 80041f6:	602b      	str	r3, [r5, #0]
 80041f8:	f7fd fe62 	bl	8001ec0 <_sbrk>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d103      	bne.n	8004208 <_sbrk_r+0x1c>
 8004200:	682b      	ldr	r3, [r5, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d000      	beq.n	8004208 <_sbrk_r+0x1c>
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	bd70      	pop	{r4, r5, r6, pc}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	20000290 	.word	0x20000290

08004210 <siprintf>:
 8004210:	b40e      	push	{r1, r2, r3}
 8004212:	b500      	push	{lr}
 8004214:	490b      	ldr	r1, [pc, #44]	; (8004244 <siprintf+0x34>)
 8004216:	b09c      	sub	sp, #112	; 0x70
 8004218:	ab1d      	add	r3, sp, #116	; 0x74
 800421a:	9002      	str	r0, [sp, #8]
 800421c:	9006      	str	r0, [sp, #24]
 800421e:	9107      	str	r1, [sp, #28]
 8004220:	9104      	str	r1, [sp, #16]
 8004222:	4809      	ldr	r0, [pc, #36]	; (8004248 <siprintf+0x38>)
 8004224:	4909      	ldr	r1, [pc, #36]	; (800424c <siprintf+0x3c>)
 8004226:	cb04      	ldmia	r3!, {r2}
 8004228:	9105      	str	r1, [sp, #20]
 800422a:	6800      	ldr	r0, [r0, #0]
 800422c:	a902      	add	r1, sp, #8
 800422e:	9301      	str	r3, [sp, #4]
 8004230:	f000 f888 	bl	8004344 <_svfiprintf_r>
 8004234:	2300      	movs	r3, #0
 8004236:	9a02      	ldr	r2, [sp, #8]
 8004238:	7013      	strb	r3, [r2, #0]
 800423a:	b01c      	add	sp, #112	; 0x70
 800423c:	bc08      	pop	{r3}
 800423e:	b003      	add	sp, #12
 8004240:	4718      	bx	r3
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	7fffffff 	.word	0x7fffffff
 8004248:	20000068 	.word	0x20000068
 800424c:	ffff0208 	.word	0xffff0208

08004250 <strcpy>:
 8004250:	0003      	movs	r3, r0
 8004252:	780a      	ldrb	r2, [r1, #0]
 8004254:	3101      	adds	r1, #1
 8004256:	701a      	strb	r2, [r3, #0]
 8004258:	3301      	adds	r3, #1
 800425a:	2a00      	cmp	r2, #0
 800425c:	d1f9      	bne.n	8004252 <strcpy+0x2>
 800425e:	4770      	bx	lr

08004260 <__malloc_lock>:
 8004260:	b510      	push	{r4, lr}
 8004262:	4802      	ldr	r0, [pc, #8]	; (800426c <__malloc_lock+0xc>)
 8004264:	f000 faf0 	bl	8004848 <__retarget_lock_acquire_recursive>
 8004268:	bd10      	pop	{r4, pc}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	20000294 	.word	0x20000294

08004270 <__malloc_unlock>:
 8004270:	b510      	push	{r4, lr}
 8004272:	4802      	ldr	r0, [pc, #8]	; (800427c <__malloc_unlock+0xc>)
 8004274:	f000 fae9 	bl	800484a <__retarget_lock_release_recursive>
 8004278:	bd10      	pop	{r4, pc}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	20000294 	.word	0x20000294

08004280 <__ssputs_r>:
 8004280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004282:	688e      	ldr	r6, [r1, #8]
 8004284:	b085      	sub	sp, #20
 8004286:	0007      	movs	r7, r0
 8004288:	000c      	movs	r4, r1
 800428a:	9203      	str	r2, [sp, #12]
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	429e      	cmp	r6, r3
 8004290:	d83c      	bhi.n	800430c <__ssputs_r+0x8c>
 8004292:	2390      	movs	r3, #144	; 0x90
 8004294:	898a      	ldrh	r2, [r1, #12]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	421a      	tst	r2, r3
 800429a:	d034      	beq.n	8004306 <__ssputs_r+0x86>
 800429c:	6909      	ldr	r1, [r1, #16]
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	6960      	ldr	r0, [r4, #20]
 80042a2:	1a5b      	subs	r3, r3, r1
 80042a4:	9302      	str	r3, [sp, #8]
 80042a6:	2303      	movs	r3, #3
 80042a8:	4343      	muls	r3, r0
 80042aa:	0fdd      	lsrs	r5, r3, #31
 80042ac:	18ed      	adds	r5, r5, r3
 80042ae:	9b01      	ldr	r3, [sp, #4]
 80042b0:	9802      	ldr	r0, [sp, #8]
 80042b2:	3301      	adds	r3, #1
 80042b4:	181b      	adds	r3, r3, r0
 80042b6:	106d      	asrs	r5, r5, #1
 80042b8:	42ab      	cmp	r3, r5
 80042ba:	d900      	bls.n	80042be <__ssputs_r+0x3e>
 80042bc:	001d      	movs	r5, r3
 80042be:	0553      	lsls	r3, r2, #21
 80042c0:	d532      	bpl.n	8004328 <__ssputs_r+0xa8>
 80042c2:	0029      	movs	r1, r5
 80042c4:	0038      	movs	r0, r7
 80042c6:	f7ff ff1b 	bl	8004100 <_malloc_r>
 80042ca:	1e06      	subs	r6, r0, #0
 80042cc:	d109      	bne.n	80042e2 <__ssputs_r+0x62>
 80042ce:	230c      	movs	r3, #12
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	2340      	movs	r3, #64	; 0x40
 80042d4:	2001      	movs	r0, #1
 80042d6:	89a2      	ldrh	r2, [r4, #12]
 80042d8:	4240      	negs	r0, r0
 80042da:	4313      	orrs	r3, r2
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	b005      	add	sp, #20
 80042e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042e2:	9a02      	ldr	r2, [sp, #8]
 80042e4:	6921      	ldr	r1, [r4, #16]
 80042e6:	f7ff fe8d 	bl	8004004 <memcpy>
 80042ea:	89a3      	ldrh	r3, [r4, #12]
 80042ec:	4a14      	ldr	r2, [pc, #80]	; (8004340 <__ssputs_r+0xc0>)
 80042ee:	401a      	ands	r2, r3
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	4313      	orrs	r3, r2
 80042f4:	81a3      	strh	r3, [r4, #12]
 80042f6:	9b02      	ldr	r3, [sp, #8]
 80042f8:	6126      	str	r6, [r4, #16]
 80042fa:	18f6      	adds	r6, r6, r3
 80042fc:	6026      	str	r6, [r4, #0]
 80042fe:	6165      	str	r5, [r4, #20]
 8004300:	9e01      	ldr	r6, [sp, #4]
 8004302:	1aed      	subs	r5, r5, r3
 8004304:	60a5      	str	r5, [r4, #8]
 8004306:	9b01      	ldr	r3, [sp, #4]
 8004308:	429e      	cmp	r6, r3
 800430a:	d900      	bls.n	800430e <__ssputs_r+0x8e>
 800430c:	9e01      	ldr	r6, [sp, #4]
 800430e:	0032      	movs	r2, r6
 8004310:	9903      	ldr	r1, [sp, #12]
 8004312:	6820      	ldr	r0, [r4, #0]
 8004314:	f000 faa5 	bl	8004862 <memmove>
 8004318:	68a3      	ldr	r3, [r4, #8]
 800431a:	2000      	movs	r0, #0
 800431c:	1b9b      	subs	r3, r3, r6
 800431e:	60a3      	str	r3, [r4, #8]
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	199e      	adds	r6, r3, r6
 8004324:	6026      	str	r6, [r4, #0]
 8004326:	e7da      	b.n	80042de <__ssputs_r+0x5e>
 8004328:	002a      	movs	r2, r5
 800432a:	0038      	movs	r0, r7
 800432c:	f000 faac 	bl	8004888 <_realloc_r>
 8004330:	1e06      	subs	r6, r0, #0
 8004332:	d1e0      	bne.n	80042f6 <__ssputs_r+0x76>
 8004334:	0038      	movs	r0, r7
 8004336:	6921      	ldr	r1, [r4, #16]
 8004338:	f7ff fe76 	bl	8004028 <_free_r>
 800433c:	e7c7      	b.n	80042ce <__ssputs_r+0x4e>
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	fffffb7f 	.word	0xfffffb7f

08004344 <_svfiprintf_r>:
 8004344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004346:	b0a1      	sub	sp, #132	; 0x84
 8004348:	9003      	str	r0, [sp, #12]
 800434a:	001d      	movs	r5, r3
 800434c:	898b      	ldrh	r3, [r1, #12]
 800434e:	000f      	movs	r7, r1
 8004350:	0016      	movs	r6, r2
 8004352:	061b      	lsls	r3, r3, #24
 8004354:	d511      	bpl.n	800437a <_svfiprintf_r+0x36>
 8004356:	690b      	ldr	r3, [r1, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10e      	bne.n	800437a <_svfiprintf_r+0x36>
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	f7ff fecf 	bl	8004100 <_malloc_r>
 8004362:	6038      	str	r0, [r7, #0]
 8004364:	6138      	str	r0, [r7, #16]
 8004366:	2800      	cmp	r0, #0
 8004368:	d105      	bne.n	8004376 <_svfiprintf_r+0x32>
 800436a:	230c      	movs	r3, #12
 800436c:	9a03      	ldr	r2, [sp, #12]
 800436e:	3801      	subs	r0, #1
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	b021      	add	sp, #132	; 0x84
 8004374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004376:	2340      	movs	r3, #64	; 0x40
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	2300      	movs	r3, #0
 800437c:	ac08      	add	r4, sp, #32
 800437e:	6163      	str	r3, [r4, #20]
 8004380:	3320      	adds	r3, #32
 8004382:	7663      	strb	r3, [r4, #25]
 8004384:	3310      	adds	r3, #16
 8004386:	76a3      	strb	r3, [r4, #26]
 8004388:	9507      	str	r5, [sp, #28]
 800438a:	0035      	movs	r5, r6
 800438c:	782b      	ldrb	r3, [r5, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <_svfiprintf_r+0x52>
 8004392:	2b25      	cmp	r3, #37	; 0x25
 8004394:	d147      	bne.n	8004426 <_svfiprintf_r+0xe2>
 8004396:	1bab      	subs	r3, r5, r6
 8004398:	9305      	str	r3, [sp, #20]
 800439a:	42b5      	cmp	r5, r6
 800439c:	d00c      	beq.n	80043b8 <_svfiprintf_r+0x74>
 800439e:	0032      	movs	r2, r6
 80043a0:	0039      	movs	r1, r7
 80043a2:	9803      	ldr	r0, [sp, #12]
 80043a4:	f7ff ff6c 	bl	8004280 <__ssputs_r>
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	d100      	bne.n	80043ae <_svfiprintf_r+0x6a>
 80043ac:	e0ae      	b.n	800450c <_svfiprintf_r+0x1c8>
 80043ae:	6962      	ldr	r2, [r4, #20]
 80043b0:	9b05      	ldr	r3, [sp, #20]
 80043b2:	4694      	mov	ip, r2
 80043b4:	4463      	add	r3, ip
 80043b6:	6163      	str	r3, [r4, #20]
 80043b8:	782b      	ldrb	r3, [r5, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d100      	bne.n	80043c0 <_svfiprintf_r+0x7c>
 80043be:	e0a5      	b.n	800450c <_svfiprintf_r+0x1c8>
 80043c0:	2201      	movs	r2, #1
 80043c2:	2300      	movs	r3, #0
 80043c4:	4252      	negs	r2, r2
 80043c6:	6062      	str	r2, [r4, #4]
 80043c8:	a904      	add	r1, sp, #16
 80043ca:	3254      	adds	r2, #84	; 0x54
 80043cc:	1852      	adds	r2, r2, r1
 80043ce:	1c6e      	adds	r6, r5, #1
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	60e3      	str	r3, [r4, #12]
 80043d4:	60a3      	str	r3, [r4, #8]
 80043d6:	7013      	strb	r3, [r2, #0]
 80043d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80043da:	2205      	movs	r2, #5
 80043dc:	7831      	ldrb	r1, [r6, #0]
 80043de:	4854      	ldr	r0, [pc, #336]	; (8004530 <_svfiprintf_r+0x1ec>)
 80043e0:	f000 fa34 	bl	800484c <memchr>
 80043e4:	1c75      	adds	r5, r6, #1
 80043e6:	2800      	cmp	r0, #0
 80043e8:	d11f      	bne.n	800442a <_svfiprintf_r+0xe6>
 80043ea:	6822      	ldr	r2, [r4, #0]
 80043ec:	06d3      	lsls	r3, r2, #27
 80043ee:	d504      	bpl.n	80043fa <_svfiprintf_r+0xb6>
 80043f0:	2353      	movs	r3, #83	; 0x53
 80043f2:	a904      	add	r1, sp, #16
 80043f4:	185b      	adds	r3, r3, r1
 80043f6:	2120      	movs	r1, #32
 80043f8:	7019      	strb	r1, [r3, #0]
 80043fa:	0713      	lsls	r3, r2, #28
 80043fc:	d504      	bpl.n	8004408 <_svfiprintf_r+0xc4>
 80043fe:	2353      	movs	r3, #83	; 0x53
 8004400:	a904      	add	r1, sp, #16
 8004402:	185b      	adds	r3, r3, r1
 8004404:	212b      	movs	r1, #43	; 0x2b
 8004406:	7019      	strb	r1, [r3, #0]
 8004408:	7833      	ldrb	r3, [r6, #0]
 800440a:	2b2a      	cmp	r3, #42	; 0x2a
 800440c:	d016      	beq.n	800443c <_svfiprintf_r+0xf8>
 800440e:	0035      	movs	r5, r6
 8004410:	2100      	movs	r1, #0
 8004412:	200a      	movs	r0, #10
 8004414:	68e3      	ldr	r3, [r4, #12]
 8004416:	782a      	ldrb	r2, [r5, #0]
 8004418:	1c6e      	adds	r6, r5, #1
 800441a:	3a30      	subs	r2, #48	; 0x30
 800441c:	2a09      	cmp	r2, #9
 800441e:	d94e      	bls.n	80044be <_svfiprintf_r+0x17a>
 8004420:	2900      	cmp	r1, #0
 8004422:	d111      	bne.n	8004448 <_svfiprintf_r+0x104>
 8004424:	e017      	b.n	8004456 <_svfiprintf_r+0x112>
 8004426:	3501      	adds	r5, #1
 8004428:	e7b0      	b.n	800438c <_svfiprintf_r+0x48>
 800442a:	4b41      	ldr	r3, [pc, #260]	; (8004530 <_svfiprintf_r+0x1ec>)
 800442c:	6822      	ldr	r2, [r4, #0]
 800442e:	1ac0      	subs	r0, r0, r3
 8004430:	2301      	movs	r3, #1
 8004432:	4083      	lsls	r3, r0
 8004434:	4313      	orrs	r3, r2
 8004436:	002e      	movs	r6, r5
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	e7ce      	b.n	80043da <_svfiprintf_r+0x96>
 800443c:	9b07      	ldr	r3, [sp, #28]
 800443e:	1d19      	adds	r1, r3, #4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	9107      	str	r1, [sp, #28]
 8004444:	2b00      	cmp	r3, #0
 8004446:	db01      	blt.n	800444c <_svfiprintf_r+0x108>
 8004448:	930b      	str	r3, [sp, #44]	; 0x2c
 800444a:	e004      	b.n	8004456 <_svfiprintf_r+0x112>
 800444c:	425b      	negs	r3, r3
 800444e:	60e3      	str	r3, [r4, #12]
 8004450:	2302      	movs	r3, #2
 8004452:	4313      	orrs	r3, r2
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	782b      	ldrb	r3, [r5, #0]
 8004458:	2b2e      	cmp	r3, #46	; 0x2e
 800445a:	d10a      	bne.n	8004472 <_svfiprintf_r+0x12e>
 800445c:	786b      	ldrb	r3, [r5, #1]
 800445e:	2b2a      	cmp	r3, #42	; 0x2a
 8004460:	d135      	bne.n	80044ce <_svfiprintf_r+0x18a>
 8004462:	9b07      	ldr	r3, [sp, #28]
 8004464:	3502      	adds	r5, #2
 8004466:	1d1a      	adds	r2, r3, #4
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	9207      	str	r2, [sp, #28]
 800446c:	2b00      	cmp	r3, #0
 800446e:	db2b      	blt.n	80044c8 <_svfiprintf_r+0x184>
 8004470:	9309      	str	r3, [sp, #36]	; 0x24
 8004472:	4e30      	ldr	r6, [pc, #192]	; (8004534 <_svfiprintf_r+0x1f0>)
 8004474:	2203      	movs	r2, #3
 8004476:	0030      	movs	r0, r6
 8004478:	7829      	ldrb	r1, [r5, #0]
 800447a:	f000 f9e7 	bl	800484c <memchr>
 800447e:	2800      	cmp	r0, #0
 8004480:	d006      	beq.n	8004490 <_svfiprintf_r+0x14c>
 8004482:	2340      	movs	r3, #64	; 0x40
 8004484:	1b80      	subs	r0, r0, r6
 8004486:	4083      	lsls	r3, r0
 8004488:	6822      	ldr	r2, [r4, #0]
 800448a:	3501      	adds	r5, #1
 800448c:	4313      	orrs	r3, r2
 800448e:	6023      	str	r3, [r4, #0]
 8004490:	7829      	ldrb	r1, [r5, #0]
 8004492:	2206      	movs	r2, #6
 8004494:	4828      	ldr	r0, [pc, #160]	; (8004538 <_svfiprintf_r+0x1f4>)
 8004496:	1c6e      	adds	r6, r5, #1
 8004498:	7621      	strb	r1, [r4, #24]
 800449a:	f000 f9d7 	bl	800484c <memchr>
 800449e:	2800      	cmp	r0, #0
 80044a0:	d03c      	beq.n	800451c <_svfiprintf_r+0x1d8>
 80044a2:	4b26      	ldr	r3, [pc, #152]	; (800453c <_svfiprintf_r+0x1f8>)
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d125      	bne.n	80044f4 <_svfiprintf_r+0x1b0>
 80044a8:	2207      	movs	r2, #7
 80044aa:	9b07      	ldr	r3, [sp, #28]
 80044ac:	3307      	adds	r3, #7
 80044ae:	4393      	bics	r3, r2
 80044b0:	3308      	adds	r3, #8
 80044b2:	9307      	str	r3, [sp, #28]
 80044b4:	6963      	ldr	r3, [r4, #20]
 80044b6:	9a04      	ldr	r2, [sp, #16]
 80044b8:	189b      	adds	r3, r3, r2
 80044ba:	6163      	str	r3, [r4, #20]
 80044bc:	e765      	b.n	800438a <_svfiprintf_r+0x46>
 80044be:	4343      	muls	r3, r0
 80044c0:	0035      	movs	r5, r6
 80044c2:	2101      	movs	r1, #1
 80044c4:	189b      	adds	r3, r3, r2
 80044c6:	e7a6      	b.n	8004416 <_svfiprintf_r+0xd2>
 80044c8:	2301      	movs	r3, #1
 80044ca:	425b      	negs	r3, r3
 80044cc:	e7d0      	b.n	8004470 <_svfiprintf_r+0x12c>
 80044ce:	2300      	movs	r3, #0
 80044d0:	200a      	movs	r0, #10
 80044d2:	001a      	movs	r2, r3
 80044d4:	3501      	adds	r5, #1
 80044d6:	6063      	str	r3, [r4, #4]
 80044d8:	7829      	ldrb	r1, [r5, #0]
 80044da:	1c6e      	adds	r6, r5, #1
 80044dc:	3930      	subs	r1, #48	; 0x30
 80044de:	2909      	cmp	r1, #9
 80044e0:	d903      	bls.n	80044ea <_svfiprintf_r+0x1a6>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0c5      	beq.n	8004472 <_svfiprintf_r+0x12e>
 80044e6:	9209      	str	r2, [sp, #36]	; 0x24
 80044e8:	e7c3      	b.n	8004472 <_svfiprintf_r+0x12e>
 80044ea:	4342      	muls	r2, r0
 80044ec:	0035      	movs	r5, r6
 80044ee:	2301      	movs	r3, #1
 80044f0:	1852      	adds	r2, r2, r1
 80044f2:	e7f1      	b.n	80044d8 <_svfiprintf_r+0x194>
 80044f4:	ab07      	add	r3, sp, #28
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	003a      	movs	r2, r7
 80044fa:	0021      	movs	r1, r4
 80044fc:	4b10      	ldr	r3, [pc, #64]	; (8004540 <_svfiprintf_r+0x1fc>)
 80044fe:	9803      	ldr	r0, [sp, #12]
 8004500:	e000      	b.n	8004504 <_svfiprintf_r+0x1c0>
 8004502:	bf00      	nop
 8004504:	9004      	str	r0, [sp, #16]
 8004506:	9b04      	ldr	r3, [sp, #16]
 8004508:	3301      	adds	r3, #1
 800450a:	d1d3      	bne.n	80044b4 <_svfiprintf_r+0x170>
 800450c:	89bb      	ldrh	r3, [r7, #12]
 800450e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004510:	065b      	lsls	r3, r3, #25
 8004512:	d400      	bmi.n	8004516 <_svfiprintf_r+0x1d2>
 8004514:	e72d      	b.n	8004372 <_svfiprintf_r+0x2e>
 8004516:	2001      	movs	r0, #1
 8004518:	4240      	negs	r0, r0
 800451a:	e72a      	b.n	8004372 <_svfiprintf_r+0x2e>
 800451c:	ab07      	add	r3, sp, #28
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	003a      	movs	r2, r7
 8004522:	0021      	movs	r1, r4
 8004524:	4b06      	ldr	r3, [pc, #24]	; (8004540 <_svfiprintf_r+0x1fc>)
 8004526:	9803      	ldr	r0, [sp, #12]
 8004528:	f000 f87c 	bl	8004624 <_printf_i>
 800452c:	e7ea      	b.n	8004504 <_svfiprintf_r+0x1c0>
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	08004c21 	.word	0x08004c21
 8004534:	08004c27 	.word	0x08004c27
 8004538:	08004c2b 	.word	0x08004c2b
 800453c:	00000000 	.word	0x00000000
 8004540:	08004281 	.word	0x08004281

08004544 <_printf_common>:
 8004544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004546:	0015      	movs	r5, r2
 8004548:	9301      	str	r3, [sp, #4]
 800454a:	688a      	ldr	r2, [r1, #8]
 800454c:	690b      	ldr	r3, [r1, #16]
 800454e:	000c      	movs	r4, r1
 8004550:	9000      	str	r0, [sp, #0]
 8004552:	4293      	cmp	r3, r2
 8004554:	da00      	bge.n	8004558 <_printf_common+0x14>
 8004556:	0013      	movs	r3, r2
 8004558:	0022      	movs	r2, r4
 800455a:	602b      	str	r3, [r5, #0]
 800455c:	3243      	adds	r2, #67	; 0x43
 800455e:	7812      	ldrb	r2, [r2, #0]
 8004560:	2a00      	cmp	r2, #0
 8004562:	d001      	beq.n	8004568 <_printf_common+0x24>
 8004564:	3301      	adds	r3, #1
 8004566:	602b      	str	r3, [r5, #0]
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	069b      	lsls	r3, r3, #26
 800456c:	d502      	bpl.n	8004574 <_printf_common+0x30>
 800456e:	682b      	ldr	r3, [r5, #0]
 8004570:	3302      	adds	r3, #2
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	2306      	movs	r3, #6
 8004578:	0017      	movs	r7, r2
 800457a:	401f      	ands	r7, r3
 800457c:	421a      	tst	r2, r3
 800457e:	d027      	beq.n	80045d0 <_printf_common+0x8c>
 8004580:	0023      	movs	r3, r4
 8004582:	3343      	adds	r3, #67	; 0x43
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	1e5a      	subs	r2, r3, #1
 8004588:	4193      	sbcs	r3, r2
 800458a:	6822      	ldr	r2, [r4, #0]
 800458c:	0692      	lsls	r2, r2, #26
 800458e:	d430      	bmi.n	80045f2 <_printf_common+0xae>
 8004590:	0022      	movs	r2, r4
 8004592:	9901      	ldr	r1, [sp, #4]
 8004594:	9800      	ldr	r0, [sp, #0]
 8004596:	9e08      	ldr	r6, [sp, #32]
 8004598:	3243      	adds	r2, #67	; 0x43
 800459a:	47b0      	blx	r6
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d025      	beq.n	80045ec <_printf_common+0xa8>
 80045a0:	2306      	movs	r3, #6
 80045a2:	6820      	ldr	r0, [r4, #0]
 80045a4:	682a      	ldr	r2, [r5, #0]
 80045a6:	68e1      	ldr	r1, [r4, #12]
 80045a8:	2500      	movs	r5, #0
 80045aa:	4003      	ands	r3, r0
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d103      	bne.n	80045b8 <_printf_common+0x74>
 80045b0:	1a8d      	subs	r5, r1, r2
 80045b2:	43eb      	mvns	r3, r5
 80045b4:	17db      	asrs	r3, r3, #31
 80045b6:	401d      	ands	r5, r3
 80045b8:	68a3      	ldr	r3, [r4, #8]
 80045ba:	6922      	ldr	r2, [r4, #16]
 80045bc:	4293      	cmp	r3, r2
 80045be:	dd01      	ble.n	80045c4 <_printf_common+0x80>
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	18ed      	adds	r5, r5, r3
 80045c4:	2700      	movs	r7, #0
 80045c6:	42bd      	cmp	r5, r7
 80045c8:	d120      	bne.n	800460c <_printf_common+0xc8>
 80045ca:	2000      	movs	r0, #0
 80045cc:	e010      	b.n	80045f0 <_printf_common+0xac>
 80045ce:	3701      	adds	r7, #1
 80045d0:	68e3      	ldr	r3, [r4, #12]
 80045d2:	682a      	ldr	r2, [r5, #0]
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	42bb      	cmp	r3, r7
 80045d8:	ddd2      	ble.n	8004580 <_printf_common+0x3c>
 80045da:	0022      	movs	r2, r4
 80045dc:	2301      	movs	r3, #1
 80045de:	9901      	ldr	r1, [sp, #4]
 80045e0:	9800      	ldr	r0, [sp, #0]
 80045e2:	9e08      	ldr	r6, [sp, #32]
 80045e4:	3219      	adds	r2, #25
 80045e6:	47b0      	blx	r6
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	d1f0      	bne.n	80045ce <_printf_common+0x8a>
 80045ec:	2001      	movs	r0, #1
 80045ee:	4240      	negs	r0, r0
 80045f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045f2:	2030      	movs	r0, #48	; 0x30
 80045f4:	18e1      	adds	r1, r4, r3
 80045f6:	3143      	adds	r1, #67	; 0x43
 80045f8:	7008      	strb	r0, [r1, #0]
 80045fa:	0021      	movs	r1, r4
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	3145      	adds	r1, #69	; 0x45
 8004600:	7809      	ldrb	r1, [r1, #0]
 8004602:	18a2      	adds	r2, r4, r2
 8004604:	3243      	adds	r2, #67	; 0x43
 8004606:	3302      	adds	r3, #2
 8004608:	7011      	strb	r1, [r2, #0]
 800460a:	e7c1      	b.n	8004590 <_printf_common+0x4c>
 800460c:	0022      	movs	r2, r4
 800460e:	2301      	movs	r3, #1
 8004610:	9901      	ldr	r1, [sp, #4]
 8004612:	9800      	ldr	r0, [sp, #0]
 8004614:	9e08      	ldr	r6, [sp, #32]
 8004616:	321a      	adds	r2, #26
 8004618:	47b0      	blx	r6
 800461a:	1c43      	adds	r3, r0, #1
 800461c:	d0e6      	beq.n	80045ec <_printf_common+0xa8>
 800461e:	3701      	adds	r7, #1
 8004620:	e7d1      	b.n	80045c6 <_printf_common+0x82>
	...

08004624 <_printf_i>:
 8004624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004626:	b08b      	sub	sp, #44	; 0x2c
 8004628:	9206      	str	r2, [sp, #24]
 800462a:	000a      	movs	r2, r1
 800462c:	3243      	adds	r2, #67	; 0x43
 800462e:	9307      	str	r3, [sp, #28]
 8004630:	9005      	str	r0, [sp, #20]
 8004632:	9204      	str	r2, [sp, #16]
 8004634:	7e0a      	ldrb	r2, [r1, #24]
 8004636:	000c      	movs	r4, r1
 8004638:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800463a:	2a78      	cmp	r2, #120	; 0x78
 800463c:	d807      	bhi.n	800464e <_printf_i+0x2a>
 800463e:	2a62      	cmp	r2, #98	; 0x62
 8004640:	d809      	bhi.n	8004656 <_printf_i+0x32>
 8004642:	2a00      	cmp	r2, #0
 8004644:	d100      	bne.n	8004648 <_printf_i+0x24>
 8004646:	e0c1      	b.n	80047cc <_printf_i+0x1a8>
 8004648:	2a58      	cmp	r2, #88	; 0x58
 800464a:	d100      	bne.n	800464e <_printf_i+0x2a>
 800464c:	e08c      	b.n	8004768 <_printf_i+0x144>
 800464e:	0026      	movs	r6, r4
 8004650:	3642      	adds	r6, #66	; 0x42
 8004652:	7032      	strb	r2, [r6, #0]
 8004654:	e022      	b.n	800469c <_printf_i+0x78>
 8004656:	0010      	movs	r0, r2
 8004658:	3863      	subs	r0, #99	; 0x63
 800465a:	2815      	cmp	r0, #21
 800465c:	d8f7      	bhi.n	800464e <_printf_i+0x2a>
 800465e:	f7fb fd65 	bl	800012c <__gnu_thumb1_case_shi>
 8004662:	0016      	.short	0x0016
 8004664:	fff6001f 	.word	0xfff6001f
 8004668:	fff6fff6 	.word	0xfff6fff6
 800466c:	001ffff6 	.word	0x001ffff6
 8004670:	fff6fff6 	.word	0xfff6fff6
 8004674:	fff6fff6 	.word	0xfff6fff6
 8004678:	003600a8 	.word	0x003600a8
 800467c:	fff6009a 	.word	0xfff6009a
 8004680:	00b9fff6 	.word	0x00b9fff6
 8004684:	0036fff6 	.word	0x0036fff6
 8004688:	fff6fff6 	.word	0xfff6fff6
 800468c:	009e      	.short	0x009e
 800468e:	0026      	movs	r6, r4
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	3642      	adds	r6, #66	; 0x42
 8004694:	1d11      	adds	r1, r2, #4
 8004696:	6019      	str	r1, [r3, #0]
 8004698:	6813      	ldr	r3, [r2, #0]
 800469a:	7033      	strb	r3, [r6, #0]
 800469c:	2301      	movs	r3, #1
 800469e:	e0a7      	b.n	80047f0 <_printf_i+0x1cc>
 80046a0:	6808      	ldr	r0, [r1, #0]
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	1d0a      	adds	r2, r1, #4
 80046a6:	0605      	lsls	r5, r0, #24
 80046a8:	d50b      	bpl.n	80046c2 <_printf_i+0x9e>
 80046aa:	680d      	ldr	r5, [r1, #0]
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	2d00      	cmp	r5, #0
 80046b0:	da03      	bge.n	80046ba <_printf_i+0x96>
 80046b2:	232d      	movs	r3, #45	; 0x2d
 80046b4:	9a04      	ldr	r2, [sp, #16]
 80046b6:	426d      	negs	r5, r5
 80046b8:	7013      	strb	r3, [r2, #0]
 80046ba:	4b61      	ldr	r3, [pc, #388]	; (8004840 <_printf_i+0x21c>)
 80046bc:	270a      	movs	r7, #10
 80046be:	9303      	str	r3, [sp, #12]
 80046c0:	e01b      	b.n	80046fa <_printf_i+0xd6>
 80046c2:	680d      	ldr	r5, [r1, #0]
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	0641      	lsls	r1, r0, #25
 80046c8:	d5f1      	bpl.n	80046ae <_printf_i+0x8a>
 80046ca:	b22d      	sxth	r5, r5
 80046cc:	e7ef      	b.n	80046ae <_printf_i+0x8a>
 80046ce:	680d      	ldr	r5, [r1, #0]
 80046d0:	6819      	ldr	r1, [r3, #0]
 80046d2:	1d08      	adds	r0, r1, #4
 80046d4:	6018      	str	r0, [r3, #0]
 80046d6:	062e      	lsls	r6, r5, #24
 80046d8:	d501      	bpl.n	80046de <_printf_i+0xba>
 80046da:	680d      	ldr	r5, [r1, #0]
 80046dc:	e003      	b.n	80046e6 <_printf_i+0xc2>
 80046de:	066d      	lsls	r5, r5, #25
 80046e0:	d5fb      	bpl.n	80046da <_printf_i+0xb6>
 80046e2:	680d      	ldr	r5, [r1, #0]
 80046e4:	b2ad      	uxth	r5, r5
 80046e6:	4b56      	ldr	r3, [pc, #344]	; (8004840 <_printf_i+0x21c>)
 80046e8:	2708      	movs	r7, #8
 80046ea:	9303      	str	r3, [sp, #12]
 80046ec:	2a6f      	cmp	r2, #111	; 0x6f
 80046ee:	d000      	beq.n	80046f2 <_printf_i+0xce>
 80046f0:	3702      	adds	r7, #2
 80046f2:	0023      	movs	r3, r4
 80046f4:	2200      	movs	r2, #0
 80046f6:	3343      	adds	r3, #67	; 0x43
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	6863      	ldr	r3, [r4, #4]
 80046fc:	60a3      	str	r3, [r4, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	db03      	blt.n	800470a <_printf_i+0xe6>
 8004702:	2204      	movs	r2, #4
 8004704:	6821      	ldr	r1, [r4, #0]
 8004706:	4391      	bics	r1, r2
 8004708:	6021      	str	r1, [r4, #0]
 800470a:	2d00      	cmp	r5, #0
 800470c:	d102      	bne.n	8004714 <_printf_i+0xf0>
 800470e:	9e04      	ldr	r6, [sp, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00c      	beq.n	800472e <_printf_i+0x10a>
 8004714:	9e04      	ldr	r6, [sp, #16]
 8004716:	0028      	movs	r0, r5
 8004718:	0039      	movs	r1, r7
 800471a:	f7fb fd97 	bl	800024c <__aeabi_uidivmod>
 800471e:	9b03      	ldr	r3, [sp, #12]
 8004720:	3e01      	subs	r6, #1
 8004722:	5c5b      	ldrb	r3, [r3, r1]
 8004724:	7033      	strb	r3, [r6, #0]
 8004726:	002b      	movs	r3, r5
 8004728:	0005      	movs	r5, r0
 800472a:	429f      	cmp	r7, r3
 800472c:	d9f3      	bls.n	8004716 <_printf_i+0xf2>
 800472e:	2f08      	cmp	r7, #8
 8004730:	d109      	bne.n	8004746 <_printf_i+0x122>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	07db      	lsls	r3, r3, #31
 8004736:	d506      	bpl.n	8004746 <_printf_i+0x122>
 8004738:	6863      	ldr	r3, [r4, #4]
 800473a:	6922      	ldr	r2, [r4, #16]
 800473c:	4293      	cmp	r3, r2
 800473e:	dc02      	bgt.n	8004746 <_printf_i+0x122>
 8004740:	2330      	movs	r3, #48	; 0x30
 8004742:	3e01      	subs	r6, #1
 8004744:	7033      	strb	r3, [r6, #0]
 8004746:	9b04      	ldr	r3, [sp, #16]
 8004748:	1b9b      	subs	r3, r3, r6
 800474a:	6123      	str	r3, [r4, #16]
 800474c:	9b07      	ldr	r3, [sp, #28]
 800474e:	0021      	movs	r1, r4
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	9805      	ldr	r0, [sp, #20]
 8004754:	9b06      	ldr	r3, [sp, #24]
 8004756:	aa09      	add	r2, sp, #36	; 0x24
 8004758:	f7ff fef4 	bl	8004544 <_printf_common>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d14c      	bne.n	80047fa <_printf_i+0x1d6>
 8004760:	2001      	movs	r0, #1
 8004762:	4240      	negs	r0, r0
 8004764:	b00b      	add	sp, #44	; 0x2c
 8004766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004768:	3145      	adds	r1, #69	; 0x45
 800476a:	700a      	strb	r2, [r1, #0]
 800476c:	4a34      	ldr	r2, [pc, #208]	; (8004840 <_printf_i+0x21c>)
 800476e:	9203      	str	r2, [sp, #12]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	6821      	ldr	r1, [r4, #0]
 8004774:	ca20      	ldmia	r2!, {r5}
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	0608      	lsls	r0, r1, #24
 800477a:	d516      	bpl.n	80047aa <_printf_i+0x186>
 800477c:	07cb      	lsls	r3, r1, #31
 800477e:	d502      	bpl.n	8004786 <_printf_i+0x162>
 8004780:	2320      	movs	r3, #32
 8004782:	4319      	orrs	r1, r3
 8004784:	6021      	str	r1, [r4, #0]
 8004786:	2710      	movs	r7, #16
 8004788:	2d00      	cmp	r5, #0
 800478a:	d1b2      	bne.n	80046f2 <_printf_i+0xce>
 800478c:	2320      	movs	r3, #32
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	439a      	bics	r2, r3
 8004792:	6022      	str	r2, [r4, #0]
 8004794:	e7ad      	b.n	80046f2 <_printf_i+0xce>
 8004796:	2220      	movs	r2, #32
 8004798:	6809      	ldr	r1, [r1, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	6022      	str	r2, [r4, #0]
 800479e:	0022      	movs	r2, r4
 80047a0:	2178      	movs	r1, #120	; 0x78
 80047a2:	3245      	adds	r2, #69	; 0x45
 80047a4:	7011      	strb	r1, [r2, #0]
 80047a6:	4a27      	ldr	r2, [pc, #156]	; (8004844 <_printf_i+0x220>)
 80047a8:	e7e1      	b.n	800476e <_printf_i+0x14a>
 80047aa:	0648      	lsls	r0, r1, #25
 80047ac:	d5e6      	bpl.n	800477c <_printf_i+0x158>
 80047ae:	b2ad      	uxth	r5, r5
 80047b0:	e7e4      	b.n	800477c <_printf_i+0x158>
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	680d      	ldr	r5, [r1, #0]
 80047b6:	1d10      	adds	r0, r2, #4
 80047b8:	6949      	ldr	r1, [r1, #20]
 80047ba:	6018      	str	r0, [r3, #0]
 80047bc:	6813      	ldr	r3, [r2, #0]
 80047be:	062e      	lsls	r6, r5, #24
 80047c0:	d501      	bpl.n	80047c6 <_printf_i+0x1a2>
 80047c2:	6019      	str	r1, [r3, #0]
 80047c4:	e002      	b.n	80047cc <_printf_i+0x1a8>
 80047c6:	066d      	lsls	r5, r5, #25
 80047c8:	d5fb      	bpl.n	80047c2 <_printf_i+0x19e>
 80047ca:	8019      	strh	r1, [r3, #0]
 80047cc:	2300      	movs	r3, #0
 80047ce:	9e04      	ldr	r6, [sp, #16]
 80047d0:	6123      	str	r3, [r4, #16]
 80047d2:	e7bb      	b.n	800474c <_printf_i+0x128>
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	1d11      	adds	r1, r2, #4
 80047d8:	6019      	str	r1, [r3, #0]
 80047da:	6816      	ldr	r6, [r2, #0]
 80047dc:	2100      	movs	r1, #0
 80047de:	0030      	movs	r0, r6
 80047e0:	6862      	ldr	r2, [r4, #4]
 80047e2:	f000 f833 	bl	800484c <memchr>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d001      	beq.n	80047ee <_printf_i+0x1ca>
 80047ea:	1b80      	subs	r0, r0, r6
 80047ec:	6060      	str	r0, [r4, #4]
 80047ee:	6863      	ldr	r3, [r4, #4]
 80047f0:	6123      	str	r3, [r4, #16]
 80047f2:	2300      	movs	r3, #0
 80047f4:	9a04      	ldr	r2, [sp, #16]
 80047f6:	7013      	strb	r3, [r2, #0]
 80047f8:	e7a8      	b.n	800474c <_printf_i+0x128>
 80047fa:	6923      	ldr	r3, [r4, #16]
 80047fc:	0032      	movs	r2, r6
 80047fe:	9906      	ldr	r1, [sp, #24]
 8004800:	9805      	ldr	r0, [sp, #20]
 8004802:	9d07      	ldr	r5, [sp, #28]
 8004804:	47a8      	blx	r5
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	d0aa      	beq.n	8004760 <_printf_i+0x13c>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	079b      	lsls	r3, r3, #30
 800480e:	d415      	bmi.n	800483c <_printf_i+0x218>
 8004810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004812:	68e0      	ldr	r0, [r4, #12]
 8004814:	4298      	cmp	r0, r3
 8004816:	daa5      	bge.n	8004764 <_printf_i+0x140>
 8004818:	0018      	movs	r0, r3
 800481a:	e7a3      	b.n	8004764 <_printf_i+0x140>
 800481c:	0022      	movs	r2, r4
 800481e:	2301      	movs	r3, #1
 8004820:	9906      	ldr	r1, [sp, #24]
 8004822:	9805      	ldr	r0, [sp, #20]
 8004824:	9e07      	ldr	r6, [sp, #28]
 8004826:	3219      	adds	r2, #25
 8004828:	47b0      	blx	r6
 800482a:	1c43      	adds	r3, r0, #1
 800482c:	d098      	beq.n	8004760 <_printf_i+0x13c>
 800482e:	3501      	adds	r5, #1
 8004830:	68e3      	ldr	r3, [r4, #12]
 8004832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	42ab      	cmp	r3, r5
 8004838:	dcf0      	bgt.n	800481c <_printf_i+0x1f8>
 800483a:	e7e9      	b.n	8004810 <_printf_i+0x1ec>
 800483c:	2500      	movs	r5, #0
 800483e:	e7f7      	b.n	8004830 <_printf_i+0x20c>
 8004840:	08004c32 	.word	0x08004c32
 8004844:	08004c43 	.word	0x08004c43

08004848 <__retarget_lock_acquire_recursive>:
 8004848:	4770      	bx	lr

0800484a <__retarget_lock_release_recursive>:
 800484a:	4770      	bx	lr

0800484c <memchr>:
 800484c:	b2c9      	uxtb	r1, r1
 800484e:	1882      	adds	r2, r0, r2
 8004850:	4290      	cmp	r0, r2
 8004852:	d101      	bne.n	8004858 <memchr+0xc>
 8004854:	2000      	movs	r0, #0
 8004856:	4770      	bx	lr
 8004858:	7803      	ldrb	r3, [r0, #0]
 800485a:	428b      	cmp	r3, r1
 800485c:	d0fb      	beq.n	8004856 <memchr+0xa>
 800485e:	3001      	adds	r0, #1
 8004860:	e7f6      	b.n	8004850 <memchr+0x4>

08004862 <memmove>:
 8004862:	b510      	push	{r4, lr}
 8004864:	4288      	cmp	r0, r1
 8004866:	d902      	bls.n	800486e <memmove+0xc>
 8004868:	188b      	adds	r3, r1, r2
 800486a:	4298      	cmp	r0, r3
 800486c:	d303      	bcc.n	8004876 <memmove+0x14>
 800486e:	2300      	movs	r3, #0
 8004870:	e007      	b.n	8004882 <memmove+0x20>
 8004872:	5c8b      	ldrb	r3, [r1, r2]
 8004874:	5483      	strb	r3, [r0, r2]
 8004876:	3a01      	subs	r2, #1
 8004878:	d2fb      	bcs.n	8004872 <memmove+0x10>
 800487a:	bd10      	pop	{r4, pc}
 800487c:	5ccc      	ldrb	r4, [r1, r3]
 800487e:	54c4      	strb	r4, [r0, r3]
 8004880:	3301      	adds	r3, #1
 8004882:	429a      	cmp	r2, r3
 8004884:	d1fa      	bne.n	800487c <memmove+0x1a>
 8004886:	e7f8      	b.n	800487a <memmove+0x18>

08004888 <_realloc_r>:
 8004888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800488a:	0007      	movs	r7, r0
 800488c:	000e      	movs	r6, r1
 800488e:	0014      	movs	r4, r2
 8004890:	2900      	cmp	r1, #0
 8004892:	d105      	bne.n	80048a0 <_realloc_r+0x18>
 8004894:	0011      	movs	r1, r2
 8004896:	f7ff fc33 	bl	8004100 <_malloc_r>
 800489a:	0005      	movs	r5, r0
 800489c:	0028      	movs	r0, r5
 800489e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048a0:	2a00      	cmp	r2, #0
 80048a2:	d103      	bne.n	80048ac <_realloc_r+0x24>
 80048a4:	f7ff fbc0 	bl	8004028 <_free_r>
 80048a8:	0025      	movs	r5, r4
 80048aa:	e7f7      	b.n	800489c <_realloc_r+0x14>
 80048ac:	f000 f81b 	bl	80048e6 <_malloc_usable_size_r>
 80048b0:	9001      	str	r0, [sp, #4]
 80048b2:	4284      	cmp	r4, r0
 80048b4:	d803      	bhi.n	80048be <_realloc_r+0x36>
 80048b6:	0035      	movs	r5, r6
 80048b8:	0843      	lsrs	r3, r0, #1
 80048ba:	42a3      	cmp	r3, r4
 80048bc:	d3ee      	bcc.n	800489c <_realloc_r+0x14>
 80048be:	0021      	movs	r1, r4
 80048c0:	0038      	movs	r0, r7
 80048c2:	f7ff fc1d 	bl	8004100 <_malloc_r>
 80048c6:	1e05      	subs	r5, r0, #0
 80048c8:	d0e8      	beq.n	800489c <_realloc_r+0x14>
 80048ca:	9b01      	ldr	r3, [sp, #4]
 80048cc:	0022      	movs	r2, r4
 80048ce:	429c      	cmp	r4, r3
 80048d0:	d900      	bls.n	80048d4 <_realloc_r+0x4c>
 80048d2:	001a      	movs	r2, r3
 80048d4:	0031      	movs	r1, r6
 80048d6:	0028      	movs	r0, r5
 80048d8:	f7ff fb94 	bl	8004004 <memcpy>
 80048dc:	0031      	movs	r1, r6
 80048de:	0038      	movs	r0, r7
 80048e0:	f7ff fba2 	bl	8004028 <_free_r>
 80048e4:	e7da      	b.n	800489c <_realloc_r+0x14>

080048e6 <_malloc_usable_size_r>:
 80048e6:	1f0b      	subs	r3, r1, #4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	1f18      	subs	r0, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	da01      	bge.n	80048f4 <_malloc_usable_size_r+0xe>
 80048f0:	580b      	ldr	r3, [r1, r0]
 80048f2:	18c0      	adds	r0, r0, r3
 80048f4:	4770      	bx	lr
	...

080048f8 <_init>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fe:	bc08      	pop	{r3}
 8004900:	469e      	mov	lr, r3
 8004902:	4770      	bx	lr

08004904 <_fini>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490a:	bc08      	pop	{r3}
 800490c:	469e      	mov	lr, r3
 800490e:	4770      	bx	lr
