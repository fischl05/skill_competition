
system_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d48  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006328  08006328  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08006328  08006328  00016328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006330  08006330  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006330  08006330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006334  08006334  00016334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08006338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000104  0800643c  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  0800643c  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184c9  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e94  00000000  00000000  000385f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000ffae  00000000  00000000  0003b489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  0004b438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001610  00000000  00000000  0004c120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002903  00000000  00000000  0004d730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019af0  00000000  00000000  00050033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fb36  00000000  00000000  00069b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e9659  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003060  00000000  00000000  000e96ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000104 	.word	0x20000104
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005df0 	.word	0x08005df0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000108 	.word	0x20000108
 8000104:	08005df0 	.word	0x08005df0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_uldivmod>:
 800042c:	2b00      	cmp	r3, #0
 800042e:	d111      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000430:	2a00      	cmp	r2, #0
 8000432:	d10f      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000434:	2900      	cmp	r1, #0
 8000436:	d100      	bne.n	800043a <__aeabi_uldivmod+0xe>
 8000438:	2800      	cmp	r0, #0
 800043a:	d002      	beq.n	8000442 <__aeabi_uldivmod+0x16>
 800043c:	2100      	movs	r1, #0
 800043e:	43c9      	mvns	r1, r1
 8000440:	0008      	movs	r0, r1
 8000442:	b407      	push	{r0, r1, r2}
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <__aeabi_uldivmod+0x24>)
 8000446:	a102      	add	r1, pc, #8	; (adr r1, 8000450 <__aeabi_uldivmod+0x24>)
 8000448:	1840      	adds	r0, r0, r1
 800044a:	9002      	str	r0, [sp, #8]
 800044c:	bd03      	pop	{r0, r1, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	ffffffd9 	.word	0xffffffd9
 8000454:	b403      	push	{r0, r1}
 8000456:	4668      	mov	r0, sp
 8000458:	b501      	push	{r0, lr}
 800045a:	9802      	ldr	r0, [sp, #8]
 800045c:	f000 f86a 	bl	8000534 <__udivmoddi4>
 8000460:	9b01      	ldr	r3, [sp, #4]
 8000462:	469e      	mov	lr, r3
 8000464:	b002      	add	sp, #8
 8000466:	bc0c      	pop	{r2, r3}
 8000468:	4770      	bx	lr
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_lmul>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	46ce      	mov	lr, r9
 8000470:	4647      	mov	r7, r8
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	4699      	mov	r9, r3
 8000478:	0c3b      	lsrs	r3, r7, #16
 800047a:	469c      	mov	ip, r3
 800047c:	0413      	lsls	r3, r2, #16
 800047e:	0c1b      	lsrs	r3, r3, #16
 8000480:	001d      	movs	r5, r3
 8000482:	000e      	movs	r6, r1
 8000484:	4661      	mov	r1, ip
 8000486:	0400      	lsls	r0, r0, #16
 8000488:	0c14      	lsrs	r4, r2, #16
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	4345      	muls	r5, r0
 800048e:	434b      	muls	r3, r1
 8000490:	4360      	muls	r0, r4
 8000492:	4361      	muls	r1, r4
 8000494:	18c0      	adds	r0, r0, r3
 8000496:	0c2c      	lsrs	r4, r5, #16
 8000498:	1820      	adds	r0, r4, r0
 800049a:	468c      	mov	ip, r1
 800049c:	4283      	cmp	r3, r0
 800049e:	d903      	bls.n	80004a8 <__aeabi_lmul+0x3c>
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	025b      	lsls	r3, r3, #9
 80004a4:	4698      	mov	r8, r3
 80004a6:	44c4      	add	ip, r8
 80004a8:	4649      	mov	r1, r9
 80004aa:	4379      	muls	r1, r7
 80004ac:	4372      	muls	r2, r6
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	4463      	add	r3, ip
 80004b2:	042d      	lsls	r5, r5, #16
 80004b4:	0c2d      	lsrs	r5, r5, #16
 80004b6:	18c9      	adds	r1, r1, r3
 80004b8:	0400      	lsls	r0, r0, #16
 80004ba:	1940      	adds	r0, r0, r5
 80004bc:	1889      	adds	r1, r1, r2
 80004be:	bcc0      	pop	{r6, r7}
 80004c0:	46b9      	mov	r9, r7
 80004c2:	46b0      	mov	r8, r6
 80004c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_f2uiz>:
 80004c8:	219e      	movs	r1, #158	; 0x9e
 80004ca:	b510      	push	{r4, lr}
 80004cc:	05c9      	lsls	r1, r1, #23
 80004ce:	1c04      	adds	r4, r0, #0
 80004d0:	f001 fc82 	bl	8001dd8 <__aeabi_fcmpge>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d103      	bne.n	80004e0 <__aeabi_f2uiz+0x18>
 80004d8:	1c20      	adds	r0, r4, #0
 80004da:	f000 fce3 	bl	8000ea4 <__aeabi_f2iz>
 80004de:	bd10      	pop	{r4, pc}
 80004e0:	219e      	movs	r1, #158	; 0x9e
 80004e2:	1c20      	adds	r0, r4, #0
 80004e4:	05c9      	lsls	r1, r1, #23
 80004e6:	f000 fb2f 	bl	8000b48 <__aeabi_fsub>
 80004ea:	f000 fcdb 	bl	8000ea4 <__aeabi_f2iz>
 80004ee:	2380      	movs	r3, #128	; 0x80
 80004f0:	061b      	lsls	r3, r3, #24
 80004f2:	469c      	mov	ip, r3
 80004f4:	4460      	add	r0, ip
 80004f6:	e7f2      	b.n	80004de <__aeabi_f2uiz+0x16>

080004f8 <__aeabi_d2uiz>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	2200      	movs	r2, #0
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <__aeabi_d2uiz+0x38>)
 80004fe:	0004      	movs	r4, r0
 8000500:	000d      	movs	r5, r1
 8000502:	f001 fc2f 	bl	8001d64 <__aeabi_dcmpge>
 8000506:	2800      	cmp	r0, #0
 8000508:	d104      	bne.n	8000514 <__aeabi_d2uiz+0x1c>
 800050a:	0020      	movs	r0, r4
 800050c:	0029      	movs	r1, r5
 800050e:	f001 fb77 	bl	8001c00 <__aeabi_d2iz>
 8000512:	bd70      	pop	{r4, r5, r6, pc}
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <__aeabi_d2uiz+0x38>)
 8000516:	2200      	movs	r2, #0
 8000518:	0020      	movs	r0, r4
 800051a:	0029      	movs	r1, r5
 800051c:	f000 ffde 	bl	80014dc <__aeabi_dsub>
 8000520:	f001 fb6e 	bl	8001c00 <__aeabi_d2iz>
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	061b      	lsls	r3, r3, #24
 8000528:	469c      	mov	ip, r3
 800052a:	4460      	add	r0, ip
 800052c:	e7f1      	b.n	8000512 <__aeabi_d2uiz+0x1a>
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	41e00000 	.word	0x41e00000

08000534 <__udivmoddi4>:
 8000534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000536:	4657      	mov	r7, sl
 8000538:	464e      	mov	r6, r9
 800053a:	4645      	mov	r5, r8
 800053c:	46de      	mov	lr, fp
 800053e:	b5e0      	push	{r5, r6, r7, lr}
 8000540:	0004      	movs	r4, r0
 8000542:	000d      	movs	r5, r1
 8000544:	4692      	mov	sl, r2
 8000546:	4699      	mov	r9, r3
 8000548:	b083      	sub	sp, #12
 800054a:	428b      	cmp	r3, r1
 800054c:	d830      	bhi.n	80005b0 <__udivmoddi4+0x7c>
 800054e:	d02d      	beq.n	80005ac <__udivmoddi4+0x78>
 8000550:	4649      	mov	r1, r9
 8000552:	4650      	mov	r0, sl
 8000554:	f001 fc68 	bl	8001e28 <__clzdi2>
 8000558:	0029      	movs	r1, r5
 800055a:	0006      	movs	r6, r0
 800055c:	0020      	movs	r0, r4
 800055e:	f001 fc63 	bl	8001e28 <__clzdi2>
 8000562:	1a33      	subs	r3, r6, r0
 8000564:	4698      	mov	r8, r3
 8000566:	3b20      	subs	r3, #32
 8000568:	469b      	mov	fp, r3
 800056a:	d433      	bmi.n	80005d4 <__udivmoddi4+0xa0>
 800056c:	465a      	mov	r2, fp
 800056e:	4653      	mov	r3, sl
 8000570:	4093      	lsls	r3, r2
 8000572:	4642      	mov	r2, r8
 8000574:	001f      	movs	r7, r3
 8000576:	4653      	mov	r3, sl
 8000578:	4093      	lsls	r3, r2
 800057a:	001e      	movs	r6, r3
 800057c:	42af      	cmp	r7, r5
 800057e:	d83a      	bhi.n	80005f6 <__udivmoddi4+0xc2>
 8000580:	42af      	cmp	r7, r5
 8000582:	d100      	bne.n	8000586 <__udivmoddi4+0x52>
 8000584:	e078      	b.n	8000678 <__udivmoddi4+0x144>
 8000586:	465b      	mov	r3, fp
 8000588:	1ba4      	subs	r4, r4, r6
 800058a:	41bd      	sbcs	r5, r7
 800058c:	2b00      	cmp	r3, #0
 800058e:	da00      	bge.n	8000592 <__udivmoddi4+0x5e>
 8000590:	e075      	b.n	800067e <__udivmoddi4+0x14a>
 8000592:	2200      	movs	r2, #0
 8000594:	2300      	movs	r3, #0
 8000596:	9200      	str	r2, [sp, #0]
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2301      	movs	r3, #1
 800059c:	465a      	mov	r2, fp
 800059e:	4093      	lsls	r3, r2
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	4642      	mov	r2, r8
 80005a6:	4093      	lsls	r3, r2
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	e028      	b.n	80005fe <__udivmoddi4+0xca>
 80005ac:	4282      	cmp	r2, r0
 80005ae:	d9cf      	bls.n	8000550 <__udivmoddi4+0x1c>
 80005b0:	2200      	movs	r2, #0
 80005b2:	2300      	movs	r3, #0
 80005b4:	9200      	str	r2, [sp, #0]
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <__udivmoddi4+0x8e>
 80005be:	601c      	str	r4, [r3, #0]
 80005c0:	605d      	str	r5, [r3, #4]
 80005c2:	9800      	ldr	r0, [sp, #0]
 80005c4:	9901      	ldr	r1, [sp, #4]
 80005c6:	b003      	add	sp, #12
 80005c8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ca:	46bb      	mov	fp, r7
 80005cc:	46b2      	mov	sl, r6
 80005ce:	46a9      	mov	r9, r5
 80005d0:	46a0      	mov	r8, r4
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d4:	4642      	mov	r2, r8
 80005d6:	2320      	movs	r3, #32
 80005d8:	1a9b      	subs	r3, r3, r2
 80005da:	4652      	mov	r2, sl
 80005dc:	40da      	lsrs	r2, r3
 80005de:	4641      	mov	r1, r8
 80005e0:	0013      	movs	r3, r2
 80005e2:	464a      	mov	r2, r9
 80005e4:	408a      	lsls	r2, r1
 80005e6:	0017      	movs	r7, r2
 80005e8:	4642      	mov	r2, r8
 80005ea:	431f      	orrs	r7, r3
 80005ec:	4653      	mov	r3, sl
 80005ee:	4093      	lsls	r3, r2
 80005f0:	001e      	movs	r6, r3
 80005f2:	42af      	cmp	r7, r5
 80005f4:	d9c4      	bls.n	8000580 <__udivmoddi4+0x4c>
 80005f6:	2200      	movs	r2, #0
 80005f8:	2300      	movs	r3, #0
 80005fa:	9200      	str	r2, [sp, #0]
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	4643      	mov	r3, r8
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0d9      	beq.n	80005b8 <__udivmoddi4+0x84>
 8000604:	07fb      	lsls	r3, r7, #31
 8000606:	0872      	lsrs	r2, r6, #1
 8000608:	431a      	orrs	r2, r3
 800060a:	4646      	mov	r6, r8
 800060c:	087b      	lsrs	r3, r7, #1
 800060e:	e00e      	b.n	800062e <__udivmoddi4+0xfa>
 8000610:	42ab      	cmp	r3, r5
 8000612:	d101      	bne.n	8000618 <__udivmoddi4+0xe4>
 8000614:	42a2      	cmp	r2, r4
 8000616:	d80c      	bhi.n	8000632 <__udivmoddi4+0xfe>
 8000618:	1aa4      	subs	r4, r4, r2
 800061a:	419d      	sbcs	r5, r3
 800061c:	2001      	movs	r0, #1
 800061e:	1924      	adds	r4, r4, r4
 8000620:	416d      	adcs	r5, r5
 8000622:	2100      	movs	r1, #0
 8000624:	3e01      	subs	r6, #1
 8000626:	1824      	adds	r4, r4, r0
 8000628:	414d      	adcs	r5, r1
 800062a:	2e00      	cmp	r6, #0
 800062c:	d006      	beq.n	800063c <__udivmoddi4+0x108>
 800062e:	42ab      	cmp	r3, r5
 8000630:	d9ee      	bls.n	8000610 <__udivmoddi4+0xdc>
 8000632:	3e01      	subs	r6, #1
 8000634:	1924      	adds	r4, r4, r4
 8000636:	416d      	adcs	r5, r5
 8000638:	2e00      	cmp	r6, #0
 800063a:	d1f8      	bne.n	800062e <__udivmoddi4+0xfa>
 800063c:	9800      	ldr	r0, [sp, #0]
 800063e:	9901      	ldr	r1, [sp, #4]
 8000640:	465b      	mov	r3, fp
 8000642:	1900      	adds	r0, r0, r4
 8000644:	4169      	adcs	r1, r5
 8000646:	2b00      	cmp	r3, #0
 8000648:	db24      	blt.n	8000694 <__udivmoddi4+0x160>
 800064a:	002b      	movs	r3, r5
 800064c:	465a      	mov	r2, fp
 800064e:	4644      	mov	r4, r8
 8000650:	40d3      	lsrs	r3, r2
 8000652:	002a      	movs	r2, r5
 8000654:	40e2      	lsrs	r2, r4
 8000656:	001c      	movs	r4, r3
 8000658:	465b      	mov	r3, fp
 800065a:	0015      	movs	r5, r2
 800065c:	2b00      	cmp	r3, #0
 800065e:	db2a      	blt.n	80006b6 <__udivmoddi4+0x182>
 8000660:	0026      	movs	r6, r4
 8000662:	409e      	lsls	r6, r3
 8000664:	0033      	movs	r3, r6
 8000666:	0026      	movs	r6, r4
 8000668:	4647      	mov	r7, r8
 800066a:	40be      	lsls	r6, r7
 800066c:	0032      	movs	r2, r6
 800066e:	1a80      	subs	r0, r0, r2
 8000670:	4199      	sbcs	r1, r3
 8000672:	9000      	str	r0, [sp, #0]
 8000674:	9101      	str	r1, [sp, #4]
 8000676:	e79f      	b.n	80005b8 <__udivmoddi4+0x84>
 8000678:	42a3      	cmp	r3, r4
 800067a:	d8bc      	bhi.n	80005f6 <__udivmoddi4+0xc2>
 800067c:	e783      	b.n	8000586 <__udivmoddi4+0x52>
 800067e:	4642      	mov	r2, r8
 8000680:	2320      	movs	r3, #32
 8000682:	2100      	movs	r1, #0
 8000684:	1a9b      	subs	r3, r3, r2
 8000686:	2200      	movs	r2, #0
 8000688:	9100      	str	r1, [sp, #0]
 800068a:	9201      	str	r2, [sp, #4]
 800068c:	2201      	movs	r2, #1
 800068e:	40da      	lsrs	r2, r3
 8000690:	9201      	str	r2, [sp, #4]
 8000692:	e786      	b.n	80005a2 <__udivmoddi4+0x6e>
 8000694:	4642      	mov	r2, r8
 8000696:	2320      	movs	r3, #32
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	002a      	movs	r2, r5
 800069c:	4646      	mov	r6, r8
 800069e:	409a      	lsls	r2, r3
 80006a0:	0023      	movs	r3, r4
 80006a2:	40f3      	lsrs	r3, r6
 80006a4:	4644      	mov	r4, r8
 80006a6:	4313      	orrs	r3, r2
 80006a8:	002a      	movs	r2, r5
 80006aa:	40e2      	lsrs	r2, r4
 80006ac:	001c      	movs	r4, r3
 80006ae:	465b      	mov	r3, fp
 80006b0:	0015      	movs	r5, r2
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	dad4      	bge.n	8000660 <__udivmoddi4+0x12c>
 80006b6:	4642      	mov	r2, r8
 80006b8:	002f      	movs	r7, r5
 80006ba:	2320      	movs	r3, #32
 80006bc:	0026      	movs	r6, r4
 80006be:	4097      	lsls	r7, r2
 80006c0:	1a9b      	subs	r3, r3, r2
 80006c2:	40de      	lsrs	r6, r3
 80006c4:	003b      	movs	r3, r7
 80006c6:	4333      	orrs	r3, r6
 80006c8:	e7cd      	b.n	8000666 <__udivmoddi4+0x132>
 80006ca:	46c0      	nop			; (mov r8, r8)

080006cc <__aeabi_fdiv>:
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ce:	464f      	mov	r7, r9
 80006d0:	4646      	mov	r6, r8
 80006d2:	46d6      	mov	lr, sl
 80006d4:	0245      	lsls	r5, r0, #9
 80006d6:	b5c0      	push	{r6, r7, lr}
 80006d8:	0047      	lsls	r7, r0, #1
 80006da:	1c0c      	adds	r4, r1, #0
 80006dc:	0a6d      	lsrs	r5, r5, #9
 80006de:	0e3f      	lsrs	r7, r7, #24
 80006e0:	0fc6      	lsrs	r6, r0, #31
 80006e2:	2f00      	cmp	r7, #0
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fdiv+0x1c>
 80006e6:	e070      	b.n	80007ca <__aeabi_fdiv+0xfe>
 80006e8:	2fff      	cmp	r7, #255	; 0xff
 80006ea:	d100      	bne.n	80006ee <__aeabi_fdiv+0x22>
 80006ec:	e075      	b.n	80007da <__aeabi_fdiv+0x10e>
 80006ee:	00eb      	lsls	r3, r5, #3
 80006f0:	2580      	movs	r5, #128	; 0x80
 80006f2:	04ed      	lsls	r5, r5, #19
 80006f4:	431d      	orrs	r5, r3
 80006f6:	2300      	movs	r3, #0
 80006f8:	4699      	mov	r9, r3
 80006fa:	469a      	mov	sl, r3
 80006fc:	3f7f      	subs	r7, #127	; 0x7f
 80006fe:	0260      	lsls	r0, r4, #9
 8000700:	0a43      	lsrs	r3, r0, #9
 8000702:	4698      	mov	r8, r3
 8000704:	0063      	lsls	r3, r4, #1
 8000706:	0e1b      	lsrs	r3, r3, #24
 8000708:	0fe4      	lsrs	r4, r4, #31
 800070a:	2b00      	cmp	r3, #0
 800070c:	d04e      	beq.n	80007ac <__aeabi_fdiv+0xe0>
 800070e:	2bff      	cmp	r3, #255	; 0xff
 8000710:	d046      	beq.n	80007a0 <__aeabi_fdiv+0xd4>
 8000712:	4642      	mov	r2, r8
 8000714:	00d0      	lsls	r0, r2, #3
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	04d2      	lsls	r2, r2, #19
 800071a:	4302      	orrs	r2, r0
 800071c:	4690      	mov	r8, r2
 800071e:	2200      	movs	r2, #0
 8000720:	3b7f      	subs	r3, #127	; 0x7f
 8000722:	0031      	movs	r1, r6
 8000724:	1aff      	subs	r7, r7, r3
 8000726:	464b      	mov	r3, r9
 8000728:	4061      	eors	r1, r4
 800072a:	b2c9      	uxtb	r1, r1
 800072c:	4313      	orrs	r3, r2
 800072e:	2b0f      	cmp	r3, #15
 8000730:	d900      	bls.n	8000734 <__aeabi_fdiv+0x68>
 8000732:	e0b5      	b.n	80008a0 <__aeabi_fdiv+0x1d4>
 8000734:	486e      	ldr	r0, [pc, #440]	; (80008f0 <__aeabi_fdiv+0x224>)
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	58c3      	ldr	r3, [r0, r3]
 800073a:	469f      	mov	pc, r3
 800073c:	2300      	movs	r3, #0
 800073e:	4698      	mov	r8, r3
 8000740:	0026      	movs	r6, r4
 8000742:	4645      	mov	r5, r8
 8000744:	4692      	mov	sl, r2
 8000746:	4653      	mov	r3, sl
 8000748:	2b02      	cmp	r3, #2
 800074a:	d100      	bne.n	800074e <__aeabi_fdiv+0x82>
 800074c:	e089      	b.n	8000862 <__aeabi_fdiv+0x196>
 800074e:	2b03      	cmp	r3, #3
 8000750:	d100      	bne.n	8000754 <__aeabi_fdiv+0x88>
 8000752:	e09e      	b.n	8000892 <__aeabi_fdiv+0x1c6>
 8000754:	2b01      	cmp	r3, #1
 8000756:	d018      	beq.n	800078a <__aeabi_fdiv+0xbe>
 8000758:	003b      	movs	r3, r7
 800075a:	337f      	adds	r3, #127	; 0x7f
 800075c:	2b00      	cmp	r3, #0
 800075e:	dd69      	ble.n	8000834 <__aeabi_fdiv+0x168>
 8000760:	076a      	lsls	r2, r5, #29
 8000762:	d004      	beq.n	800076e <__aeabi_fdiv+0xa2>
 8000764:	220f      	movs	r2, #15
 8000766:	402a      	ands	r2, r5
 8000768:	2a04      	cmp	r2, #4
 800076a:	d000      	beq.n	800076e <__aeabi_fdiv+0xa2>
 800076c:	3504      	adds	r5, #4
 800076e:	012a      	lsls	r2, r5, #4
 8000770:	d503      	bpl.n	800077a <__aeabi_fdiv+0xae>
 8000772:	4b60      	ldr	r3, [pc, #384]	; (80008f4 <__aeabi_fdiv+0x228>)
 8000774:	401d      	ands	r5, r3
 8000776:	003b      	movs	r3, r7
 8000778:	3380      	adds	r3, #128	; 0x80
 800077a:	2bfe      	cmp	r3, #254	; 0xfe
 800077c:	dd00      	ble.n	8000780 <__aeabi_fdiv+0xb4>
 800077e:	e070      	b.n	8000862 <__aeabi_fdiv+0x196>
 8000780:	01ad      	lsls	r5, r5, #6
 8000782:	0a6d      	lsrs	r5, r5, #9
 8000784:	b2d8      	uxtb	r0, r3
 8000786:	e002      	b.n	800078e <__aeabi_fdiv+0xc2>
 8000788:	000e      	movs	r6, r1
 800078a:	2000      	movs	r0, #0
 800078c:	2500      	movs	r5, #0
 800078e:	05c0      	lsls	r0, r0, #23
 8000790:	4328      	orrs	r0, r5
 8000792:	07f6      	lsls	r6, r6, #31
 8000794:	4330      	orrs	r0, r6
 8000796:	bce0      	pop	{r5, r6, r7}
 8000798:	46ba      	mov	sl, r7
 800079a:	46b1      	mov	r9, r6
 800079c:	46a8      	mov	r8, r5
 800079e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a0:	4643      	mov	r3, r8
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d13f      	bne.n	8000826 <__aeabi_fdiv+0x15a>
 80007a6:	2202      	movs	r2, #2
 80007a8:	3fff      	subs	r7, #255	; 0xff
 80007aa:	e003      	b.n	80007b4 <__aeabi_fdiv+0xe8>
 80007ac:	4643      	mov	r3, r8
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d12d      	bne.n	800080e <__aeabi_fdiv+0x142>
 80007b2:	2201      	movs	r2, #1
 80007b4:	0031      	movs	r1, r6
 80007b6:	464b      	mov	r3, r9
 80007b8:	4061      	eors	r1, r4
 80007ba:	b2c9      	uxtb	r1, r1
 80007bc:	4313      	orrs	r3, r2
 80007be:	2b0f      	cmp	r3, #15
 80007c0:	d834      	bhi.n	800082c <__aeabi_fdiv+0x160>
 80007c2:	484d      	ldr	r0, [pc, #308]	; (80008f8 <__aeabi_fdiv+0x22c>)
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	58c3      	ldr	r3, [r0, r3]
 80007c8:	469f      	mov	pc, r3
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d113      	bne.n	80007f6 <__aeabi_fdiv+0x12a>
 80007ce:	2304      	movs	r3, #4
 80007d0:	4699      	mov	r9, r3
 80007d2:	3b03      	subs	r3, #3
 80007d4:	2700      	movs	r7, #0
 80007d6:	469a      	mov	sl, r3
 80007d8:	e791      	b.n	80006fe <__aeabi_fdiv+0x32>
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d105      	bne.n	80007ea <__aeabi_fdiv+0x11e>
 80007de:	2308      	movs	r3, #8
 80007e0:	4699      	mov	r9, r3
 80007e2:	3b06      	subs	r3, #6
 80007e4:	27ff      	movs	r7, #255	; 0xff
 80007e6:	469a      	mov	sl, r3
 80007e8:	e789      	b.n	80006fe <__aeabi_fdiv+0x32>
 80007ea:	230c      	movs	r3, #12
 80007ec:	4699      	mov	r9, r3
 80007ee:	3b09      	subs	r3, #9
 80007f0:	27ff      	movs	r7, #255	; 0xff
 80007f2:	469a      	mov	sl, r3
 80007f4:	e783      	b.n	80006fe <__aeabi_fdiv+0x32>
 80007f6:	0028      	movs	r0, r5
 80007f8:	f001 faf8 	bl	8001dec <__clzsi2>
 80007fc:	2776      	movs	r7, #118	; 0x76
 80007fe:	1f43      	subs	r3, r0, #5
 8000800:	409d      	lsls	r5, r3
 8000802:	2300      	movs	r3, #0
 8000804:	427f      	negs	r7, r7
 8000806:	4699      	mov	r9, r3
 8000808:	469a      	mov	sl, r3
 800080a:	1a3f      	subs	r7, r7, r0
 800080c:	e777      	b.n	80006fe <__aeabi_fdiv+0x32>
 800080e:	4640      	mov	r0, r8
 8000810:	f001 faec 	bl	8001dec <__clzsi2>
 8000814:	4642      	mov	r2, r8
 8000816:	1f43      	subs	r3, r0, #5
 8000818:	409a      	lsls	r2, r3
 800081a:	2376      	movs	r3, #118	; 0x76
 800081c:	425b      	negs	r3, r3
 800081e:	4690      	mov	r8, r2
 8000820:	1a1b      	subs	r3, r3, r0
 8000822:	2200      	movs	r2, #0
 8000824:	e77d      	b.n	8000722 <__aeabi_fdiv+0x56>
 8000826:	23ff      	movs	r3, #255	; 0xff
 8000828:	2203      	movs	r2, #3
 800082a:	e77a      	b.n	8000722 <__aeabi_fdiv+0x56>
 800082c:	000e      	movs	r6, r1
 800082e:	20ff      	movs	r0, #255	; 0xff
 8000830:	2500      	movs	r5, #0
 8000832:	e7ac      	b.n	800078e <__aeabi_fdiv+0xc2>
 8000834:	2001      	movs	r0, #1
 8000836:	1ac0      	subs	r0, r0, r3
 8000838:	281b      	cmp	r0, #27
 800083a:	dca6      	bgt.n	800078a <__aeabi_fdiv+0xbe>
 800083c:	379e      	adds	r7, #158	; 0x9e
 800083e:	002a      	movs	r2, r5
 8000840:	40bd      	lsls	r5, r7
 8000842:	40c2      	lsrs	r2, r0
 8000844:	1e6b      	subs	r3, r5, #1
 8000846:	419d      	sbcs	r5, r3
 8000848:	4315      	orrs	r5, r2
 800084a:	076b      	lsls	r3, r5, #29
 800084c:	d004      	beq.n	8000858 <__aeabi_fdiv+0x18c>
 800084e:	230f      	movs	r3, #15
 8000850:	402b      	ands	r3, r5
 8000852:	2b04      	cmp	r3, #4
 8000854:	d000      	beq.n	8000858 <__aeabi_fdiv+0x18c>
 8000856:	3504      	adds	r5, #4
 8000858:	016b      	lsls	r3, r5, #5
 800085a:	d544      	bpl.n	80008e6 <__aeabi_fdiv+0x21a>
 800085c:	2001      	movs	r0, #1
 800085e:	2500      	movs	r5, #0
 8000860:	e795      	b.n	800078e <__aeabi_fdiv+0xc2>
 8000862:	20ff      	movs	r0, #255	; 0xff
 8000864:	2500      	movs	r5, #0
 8000866:	e792      	b.n	800078e <__aeabi_fdiv+0xc2>
 8000868:	2580      	movs	r5, #128	; 0x80
 800086a:	2600      	movs	r6, #0
 800086c:	20ff      	movs	r0, #255	; 0xff
 800086e:	03ed      	lsls	r5, r5, #15
 8000870:	e78d      	b.n	800078e <__aeabi_fdiv+0xc2>
 8000872:	2300      	movs	r3, #0
 8000874:	4698      	mov	r8, r3
 8000876:	2080      	movs	r0, #128	; 0x80
 8000878:	03c0      	lsls	r0, r0, #15
 800087a:	4205      	tst	r5, r0
 800087c:	d009      	beq.n	8000892 <__aeabi_fdiv+0x1c6>
 800087e:	4643      	mov	r3, r8
 8000880:	4203      	tst	r3, r0
 8000882:	d106      	bne.n	8000892 <__aeabi_fdiv+0x1c6>
 8000884:	4645      	mov	r5, r8
 8000886:	4305      	orrs	r5, r0
 8000888:	026d      	lsls	r5, r5, #9
 800088a:	0026      	movs	r6, r4
 800088c:	20ff      	movs	r0, #255	; 0xff
 800088e:	0a6d      	lsrs	r5, r5, #9
 8000890:	e77d      	b.n	800078e <__aeabi_fdiv+0xc2>
 8000892:	2080      	movs	r0, #128	; 0x80
 8000894:	03c0      	lsls	r0, r0, #15
 8000896:	4305      	orrs	r5, r0
 8000898:	026d      	lsls	r5, r5, #9
 800089a:	20ff      	movs	r0, #255	; 0xff
 800089c:	0a6d      	lsrs	r5, r5, #9
 800089e:	e776      	b.n	800078e <__aeabi_fdiv+0xc2>
 80008a0:	4642      	mov	r2, r8
 80008a2:	016b      	lsls	r3, r5, #5
 80008a4:	0150      	lsls	r0, r2, #5
 80008a6:	4283      	cmp	r3, r0
 80008a8:	d219      	bcs.n	80008de <__aeabi_fdiv+0x212>
 80008aa:	221b      	movs	r2, #27
 80008ac:	2500      	movs	r5, #0
 80008ae:	3f01      	subs	r7, #1
 80008b0:	2601      	movs	r6, #1
 80008b2:	001c      	movs	r4, r3
 80008b4:	006d      	lsls	r5, r5, #1
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	2c00      	cmp	r4, #0
 80008ba:	db01      	blt.n	80008c0 <__aeabi_fdiv+0x1f4>
 80008bc:	4298      	cmp	r0, r3
 80008be:	d801      	bhi.n	80008c4 <__aeabi_fdiv+0x1f8>
 80008c0:	1a1b      	subs	r3, r3, r0
 80008c2:	4335      	orrs	r5, r6
 80008c4:	3a01      	subs	r2, #1
 80008c6:	2a00      	cmp	r2, #0
 80008c8:	d1f3      	bne.n	80008b2 <__aeabi_fdiv+0x1e6>
 80008ca:	1e5a      	subs	r2, r3, #1
 80008cc:	4193      	sbcs	r3, r2
 80008ce:	431d      	orrs	r5, r3
 80008d0:	003b      	movs	r3, r7
 80008d2:	337f      	adds	r3, #127	; 0x7f
 80008d4:	000e      	movs	r6, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	dd00      	ble.n	80008dc <__aeabi_fdiv+0x210>
 80008da:	e741      	b.n	8000760 <__aeabi_fdiv+0x94>
 80008dc:	e7aa      	b.n	8000834 <__aeabi_fdiv+0x168>
 80008de:	221a      	movs	r2, #26
 80008e0:	2501      	movs	r5, #1
 80008e2:	1a1b      	subs	r3, r3, r0
 80008e4:	e7e4      	b.n	80008b0 <__aeabi_fdiv+0x1e4>
 80008e6:	01ad      	lsls	r5, r5, #6
 80008e8:	2000      	movs	r0, #0
 80008ea:	0a6d      	lsrs	r5, r5, #9
 80008ec:	e74f      	b.n	800078e <__aeabi_fdiv+0xc2>
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	08005e08 	.word	0x08005e08
 80008f4:	f7ffffff 	.word	0xf7ffffff
 80008f8:	08005e48 	.word	0x08005e48

080008fc <__aeabi_fmul>:
 80008fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fe:	464f      	mov	r7, r9
 8000900:	4646      	mov	r6, r8
 8000902:	46d6      	mov	lr, sl
 8000904:	0244      	lsls	r4, r0, #9
 8000906:	0045      	lsls	r5, r0, #1
 8000908:	b5c0      	push	{r6, r7, lr}
 800090a:	0a64      	lsrs	r4, r4, #9
 800090c:	1c0f      	adds	r7, r1, #0
 800090e:	0e2d      	lsrs	r5, r5, #24
 8000910:	0fc6      	lsrs	r6, r0, #31
 8000912:	2d00      	cmp	r5, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_fmul+0x1c>
 8000916:	e08d      	b.n	8000a34 <__aeabi_fmul+0x138>
 8000918:	2dff      	cmp	r5, #255	; 0xff
 800091a:	d100      	bne.n	800091e <__aeabi_fmul+0x22>
 800091c:	e092      	b.n	8000a44 <__aeabi_fmul+0x148>
 800091e:	2300      	movs	r3, #0
 8000920:	2080      	movs	r0, #128	; 0x80
 8000922:	4699      	mov	r9, r3
 8000924:	469a      	mov	sl, r3
 8000926:	00e4      	lsls	r4, r4, #3
 8000928:	04c0      	lsls	r0, r0, #19
 800092a:	4304      	orrs	r4, r0
 800092c:	3d7f      	subs	r5, #127	; 0x7f
 800092e:	0278      	lsls	r0, r7, #9
 8000930:	0a43      	lsrs	r3, r0, #9
 8000932:	4698      	mov	r8, r3
 8000934:	007b      	lsls	r3, r7, #1
 8000936:	0e1b      	lsrs	r3, r3, #24
 8000938:	0fff      	lsrs	r7, r7, #31
 800093a:	2b00      	cmp	r3, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_fmul+0x44>
 800093e:	e070      	b.n	8000a22 <__aeabi_fmul+0x126>
 8000940:	2bff      	cmp	r3, #255	; 0xff
 8000942:	d100      	bne.n	8000946 <__aeabi_fmul+0x4a>
 8000944:	e086      	b.n	8000a54 <__aeabi_fmul+0x158>
 8000946:	4642      	mov	r2, r8
 8000948:	00d0      	lsls	r0, r2, #3
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	3b7f      	subs	r3, #127	; 0x7f
 800094e:	18ed      	adds	r5, r5, r3
 8000950:	2300      	movs	r3, #0
 8000952:	04d2      	lsls	r2, r2, #19
 8000954:	4302      	orrs	r2, r0
 8000956:	4690      	mov	r8, r2
 8000958:	469c      	mov	ip, r3
 800095a:	0031      	movs	r1, r6
 800095c:	464b      	mov	r3, r9
 800095e:	4079      	eors	r1, r7
 8000960:	1c68      	adds	r0, r5, #1
 8000962:	2b0f      	cmp	r3, #15
 8000964:	d81c      	bhi.n	80009a0 <__aeabi_fmul+0xa4>
 8000966:	4a76      	ldr	r2, [pc, #472]	; (8000b40 <__aeabi_fmul+0x244>)
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	58d3      	ldr	r3, [r2, r3]
 800096c:	469f      	mov	pc, r3
 800096e:	0039      	movs	r1, r7
 8000970:	4644      	mov	r4, r8
 8000972:	46e2      	mov	sl, ip
 8000974:	4653      	mov	r3, sl
 8000976:	2b02      	cmp	r3, #2
 8000978:	d00f      	beq.n	800099a <__aeabi_fmul+0x9e>
 800097a:	2b03      	cmp	r3, #3
 800097c:	d100      	bne.n	8000980 <__aeabi_fmul+0x84>
 800097e:	e0d7      	b.n	8000b30 <__aeabi_fmul+0x234>
 8000980:	2b01      	cmp	r3, #1
 8000982:	d137      	bne.n	80009f4 <__aeabi_fmul+0xf8>
 8000984:	2000      	movs	r0, #0
 8000986:	2400      	movs	r4, #0
 8000988:	05c0      	lsls	r0, r0, #23
 800098a:	4320      	orrs	r0, r4
 800098c:	07c9      	lsls	r1, r1, #31
 800098e:	4308      	orrs	r0, r1
 8000990:	bce0      	pop	{r5, r6, r7}
 8000992:	46ba      	mov	sl, r7
 8000994:	46b1      	mov	r9, r6
 8000996:	46a8      	mov	r8, r5
 8000998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800099a:	20ff      	movs	r0, #255	; 0xff
 800099c:	2400      	movs	r4, #0
 800099e:	e7f3      	b.n	8000988 <__aeabi_fmul+0x8c>
 80009a0:	0c26      	lsrs	r6, r4, #16
 80009a2:	0424      	lsls	r4, r4, #16
 80009a4:	0c22      	lsrs	r2, r4, #16
 80009a6:	4644      	mov	r4, r8
 80009a8:	0424      	lsls	r4, r4, #16
 80009aa:	0c24      	lsrs	r4, r4, #16
 80009ac:	4643      	mov	r3, r8
 80009ae:	0027      	movs	r7, r4
 80009b0:	0c1b      	lsrs	r3, r3, #16
 80009b2:	4357      	muls	r7, r2
 80009b4:	4374      	muls	r4, r6
 80009b6:	435a      	muls	r2, r3
 80009b8:	435e      	muls	r6, r3
 80009ba:	1912      	adds	r2, r2, r4
 80009bc:	0c3b      	lsrs	r3, r7, #16
 80009be:	189b      	adds	r3, r3, r2
 80009c0:	429c      	cmp	r4, r3
 80009c2:	d903      	bls.n	80009cc <__aeabi_fmul+0xd0>
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	0252      	lsls	r2, r2, #9
 80009c8:	4694      	mov	ip, r2
 80009ca:	4466      	add	r6, ip
 80009cc:	043f      	lsls	r7, r7, #16
 80009ce:	041a      	lsls	r2, r3, #16
 80009d0:	0c3f      	lsrs	r7, r7, #16
 80009d2:	19d2      	adds	r2, r2, r7
 80009d4:	0194      	lsls	r4, r2, #6
 80009d6:	1e67      	subs	r7, r4, #1
 80009d8:	41bc      	sbcs	r4, r7
 80009da:	0c1b      	lsrs	r3, r3, #16
 80009dc:	0e92      	lsrs	r2, r2, #26
 80009de:	199b      	adds	r3, r3, r6
 80009e0:	4314      	orrs	r4, r2
 80009e2:	019b      	lsls	r3, r3, #6
 80009e4:	431c      	orrs	r4, r3
 80009e6:	011b      	lsls	r3, r3, #4
 80009e8:	d400      	bmi.n	80009ec <__aeabi_fmul+0xf0>
 80009ea:	e09b      	b.n	8000b24 <__aeabi_fmul+0x228>
 80009ec:	2301      	movs	r3, #1
 80009ee:	0862      	lsrs	r2, r4, #1
 80009f0:	401c      	ands	r4, r3
 80009f2:	4314      	orrs	r4, r2
 80009f4:	0002      	movs	r2, r0
 80009f6:	327f      	adds	r2, #127	; 0x7f
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	dd64      	ble.n	8000ac6 <__aeabi_fmul+0x1ca>
 80009fc:	0763      	lsls	r3, r4, #29
 80009fe:	d004      	beq.n	8000a0a <__aeabi_fmul+0x10e>
 8000a00:	230f      	movs	r3, #15
 8000a02:	4023      	ands	r3, r4
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d000      	beq.n	8000a0a <__aeabi_fmul+0x10e>
 8000a08:	3404      	adds	r4, #4
 8000a0a:	0123      	lsls	r3, r4, #4
 8000a0c:	d503      	bpl.n	8000a16 <__aeabi_fmul+0x11a>
 8000a0e:	0002      	movs	r2, r0
 8000a10:	4b4c      	ldr	r3, [pc, #304]	; (8000b44 <__aeabi_fmul+0x248>)
 8000a12:	3280      	adds	r2, #128	; 0x80
 8000a14:	401c      	ands	r4, r3
 8000a16:	2afe      	cmp	r2, #254	; 0xfe
 8000a18:	dcbf      	bgt.n	800099a <__aeabi_fmul+0x9e>
 8000a1a:	01a4      	lsls	r4, r4, #6
 8000a1c:	0a64      	lsrs	r4, r4, #9
 8000a1e:	b2d0      	uxtb	r0, r2
 8000a20:	e7b2      	b.n	8000988 <__aeabi_fmul+0x8c>
 8000a22:	4643      	mov	r3, r8
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d13d      	bne.n	8000aa4 <__aeabi_fmul+0x1a8>
 8000a28:	464a      	mov	r2, r9
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	4691      	mov	r9, r2
 8000a30:	469c      	mov	ip, r3
 8000a32:	e792      	b.n	800095a <__aeabi_fmul+0x5e>
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	d129      	bne.n	8000a8c <__aeabi_fmul+0x190>
 8000a38:	2304      	movs	r3, #4
 8000a3a:	4699      	mov	r9, r3
 8000a3c:	3b03      	subs	r3, #3
 8000a3e:	2500      	movs	r5, #0
 8000a40:	469a      	mov	sl, r3
 8000a42:	e774      	b.n	800092e <__aeabi_fmul+0x32>
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	d11b      	bne.n	8000a80 <__aeabi_fmul+0x184>
 8000a48:	2308      	movs	r3, #8
 8000a4a:	4699      	mov	r9, r3
 8000a4c:	3b06      	subs	r3, #6
 8000a4e:	25ff      	movs	r5, #255	; 0xff
 8000a50:	469a      	mov	sl, r3
 8000a52:	e76c      	b.n	800092e <__aeabi_fmul+0x32>
 8000a54:	4643      	mov	r3, r8
 8000a56:	35ff      	adds	r5, #255	; 0xff
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d10b      	bne.n	8000a74 <__aeabi_fmul+0x178>
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	464a      	mov	r2, r9
 8000a60:	431a      	orrs	r2, r3
 8000a62:	4691      	mov	r9, r2
 8000a64:	469c      	mov	ip, r3
 8000a66:	e778      	b.n	800095a <__aeabi_fmul+0x5e>
 8000a68:	4653      	mov	r3, sl
 8000a6a:	0031      	movs	r1, r6
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_fmul+0x176>
 8000a70:	e783      	b.n	800097a <__aeabi_fmul+0x7e>
 8000a72:	e792      	b.n	800099a <__aeabi_fmul+0x9e>
 8000a74:	2303      	movs	r3, #3
 8000a76:	464a      	mov	r2, r9
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	4691      	mov	r9, r2
 8000a7c:	469c      	mov	ip, r3
 8000a7e:	e76c      	b.n	800095a <__aeabi_fmul+0x5e>
 8000a80:	230c      	movs	r3, #12
 8000a82:	4699      	mov	r9, r3
 8000a84:	3b09      	subs	r3, #9
 8000a86:	25ff      	movs	r5, #255	; 0xff
 8000a88:	469a      	mov	sl, r3
 8000a8a:	e750      	b.n	800092e <__aeabi_fmul+0x32>
 8000a8c:	0020      	movs	r0, r4
 8000a8e:	f001 f9ad 	bl	8001dec <__clzsi2>
 8000a92:	2576      	movs	r5, #118	; 0x76
 8000a94:	1f43      	subs	r3, r0, #5
 8000a96:	409c      	lsls	r4, r3
 8000a98:	2300      	movs	r3, #0
 8000a9a:	426d      	negs	r5, r5
 8000a9c:	4699      	mov	r9, r3
 8000a9e:	469a      	mov	sl, r3
 8000aa0:	1a2d      	subs	r5, r5, r0
 8000aa2:	e744      	b.n	800092e <__aeabi_fmul+0x32>
 8000aa4:	4640      	mov	r0, r8
 8000aa6:	f001 f9a1 	bl	8001dec <__clzsi2>
 8000aaa:	4642      	mov	r2, r8
 8000aac:	1f43      	subs	r3, r0, #5
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	1a2d      	subs	r5, r5, r0
 8000ab4:	4690      	mov	r8, r2
 8000ab6:	469c      	mov	ip, r3
 8000ab8:	3d76      	subs	r5, #118	; 0x76
 8000aba:	e74e      	b.n	800095a <__aeabi_fmul+0x5e>
 8000abc:	2480      	movs	r4, #128	; 0x80
 8000abe:	2100      	movs	r1, #0
 8000ac0:	20ff      	movs	r0, #255	; 0xff
 8000ac2:	03e4      	lsls	r4, r4, #15
 8000ac4:	e760      	b.n	8000988 <__aeabi_fmul+0x8c>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	1a9b      	subs	r3, r3, r2
 8000aca:	2b1b      	cmp	r3, #27
 8000acc:	dd00      	ble.n	8000ad0 <__aeabi_fmul+0x1d4>
 8000ace:	e759      	b.n	8000984 <__aeabi_fmul+0x88>
 8000ad0:	0022      	movs	r2, r4
 8000ad2:	309e      	adds	r0, #158	; 0x9e
 8000ad4:	40da      	lsrs	r2, r3
 8000ad6:	4084      	lsls	r4, r0
 8000ad8:	0013      	movs	r3, r2
 8000ada:	1e62      	subs	r2, r4, #1
 8000adc:	4194      	sbcs	r4, r2
 8000ade:	431c      	orrs	r4, r3
 8000ae0:	0763      	lsls	r3, r4, #29
 8000ae2:	d004      	beq.n	8000aee <__aeabi_fmul+0x1f2>
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	4023      	ands	r3, r4
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d000      	beq.n	8000aee <__aeabi_fmul+0x1f2>
 8000aec:	3404      	adds	r4, #4
 8000aee:	0163      	lsls	r3, r4, #5
 8000af0:	d51a      	bpl.n	8000b28 <__aeabi_fmul+0x22c>
 8000af2:	2001      	movs	r0, #1
 8000af4:	2400      	movs	r4, #0
 8000af6:	e747      	b.n	8000988 <__aeabi_fmul+0x8c>
 8000af8:	2080      	movs	r0, #128	; 0x80
 8000afa:	03c0      	lsls	r0, r0, #15
 8000afc:	4204      	tst	r4, r0
 8000afe:	d009      	beq.n	8000b14 <__aeabi_fmul+0x218>
 8000b00:	4643      	mov	r3, r8
 8000b02:	4203      	tst	r3, r0
 8000b04:	d106      	bne.n	8000b14 <__aeabi_fmul+0x218>
 8000b06:	4644      	mov	r4, r8
 8000b08:	4304      	orrs	r4, r0
 8000b0a:	0264      	lsls	r4, r4, #9
 8000b0c:	0039      	movs	r1, r7
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	0a64      	lsrs	r4, r4, #9
 8000b12:	e739      	b.n	8000988 <__aeabi_fmul+0x8c>
 8000b14:	2080      	movs	r0, #128	; 0x80
 8000b16:	03c0      	lsls	r0, r0, #15
 8000b18:	4304      	orrs	r4, r0
 8000b1a:	0264      	lsls	r4, r4, #9
 8000b1c:	0031      	movs	r1, r6
 8000b1e:	20ff      	movs	r0, #255	; 0xff
 8000b20:	0a64      	lsrs	r4, r4, #9
 8000b22:	e731      	b.n	8000988 <__aeabi_fmul+0x8c>
 8000b24:	0028      	movs	r0, r5
 8000b26:	e765      	b.n	80009f4 <__aeabi_fmul+0xf8>
 8000b28:	01a4      	lsls	r4, r4, #6
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	0a64      	lsrs	r4, r4, #9
 8000b2e:	e72b      	b.n	8000988 <__aeabi_fmul+0x8c>
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	03c0      	lsls	r0, r0, #15
 8000b34:	4304      	orrs	r4, r0
 8000b36:	0264      	lsls	r4, r4, #9
 8000b38:	20ff      	movs	r0, #255	; 0xff
 8000b3a:	0a64      	lsrs	r4, r4, #9
 8000b3c:	e724      	b.n	8000988 <__aeabi_fmul+0x8c>
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	08005e88 	.word	0x08005e88
 8000b44:	f7ffffff 	.word	0xf7ffffff

08000b48 <__aeabi_fsub>:
 8000b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4a:	46ce      	mov	lr, r9
 8000b4c:	4647      	mov	r7, r8
 8000b4e:	0243      	lsls	r3, r0, #9
 8000b50:	0a5b      	lsrs	r3, r3, #9
 8000b52:	024e      	lsls	r6, r1, #9
 8000b54:	00da      	lsls	r2, r3, #3
 8000b56:	4694      	mov	ip, r2
 8000b58:	0a72      	lsrs	r2, r6, #9
 8000b5a:	4691      	mov	r9, r2
 8000b5c:	0045      	lsls	r5, r0, #1
 8000b5e:	004a      	lsls	r2, r1, #1
 8000b60:	b580      	push	{r7, lr}
 8000b62:	0e2d      	lsrs	r5, r5, #24
 8000b64:	001f      	movs	r7, r3
 8000b66:	0fc4      	lsrs	r4, r0, #31
 8000b68:	0e12      	lsrs	r2, r2, #24
 8000b6a:	0fc9      	lsrs	r1, r1, #31
 8000b6c:	09b6      	lsrs	r6, r6, #6
 8000b6e:	2aff      	cmp	r2, #255	; 0xff
 8000b70:	d05b      	beq.n	8000c2a <__aeabi_fsub+0xe2>
 8000b72:	2001      	movs	r0, #1
 8000b74:	4041      	eors	r1, r0
 8000b76:	428c      	cmp	r4, r1
 8000b78:	d039      	beq.n	8000bee <__aeabi_fsub+0xa6>
 8000b7a:	1aa8      	subs	r0, r5, r2
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	dd5a      	ble.n	8000c36 <__aeabi_fsub+0xee>
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	d06a      	beq.n	8000c5a <__aeabi_fsub+0x112>
 8000b84:	2dff      	cmp	r5, #255	; 0xff
 8000b86:	d100      	bne.n	8000b8a <__aeabi_fsub+0x42>
 8000b88:	e0d9      	b.n	8000d3e <__aeabi_fsub+0x1f6>
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	04d2      	lsls	r2, r2, #19
 8000b8e:	4316      	orrs	r6, r2
 8000b90:	281b      	cmp	r0, #27
 8000b92:	dc00      	bgt.n	8000b96 <__aeabi_fsub+0x4e>
 8000b94:	e0e9      	b.n	8000d6a <__aeabi_fsub+0x222>
 8000b96:	2001      	movs	r0, #1
 8000b98:	4663      	mov	r3, ip
 8000b9a:	1a18      	subs	r0, r3, r0
 8000b9c:	0143      	lsls	r3, r0, #5
 8000b9e:	d400      	bmi.n	8000ba2 <__aeabi_fsub+0x5a>
 8000ba0:	e0b4      	b.n	8000d0c <__aeabi_fsub+0x1c4>
 8000ba2:	0180      	lsls	r0, r0, #6
 8000ba4:	0987      	lsrs	r7, r0, #6
 8000ba6:	0038      	movs	r0, r7
 8000ba8:	f001 f920 	bl	8001dec <__clzsi2>
 8000bac:	3805      	subs	r0, #5
 8000bae:	4087      	lsls	r7, r0
 8000bb0:	4285      	cmp	r5, r0
 8000bb2:	dc00      	bgt.n	8000bb6 <__aeabi_fsub+0x6e>
 8000bb4:	e0cc      	b.n	8000d50 <__aeabi_fsub+0x208>
 8000bb6:	1a2d      	subs	r5, r5, r0
 8000bb8:	48b5      	ldr	r0, [pc, #724]	; (8000e90 <__aeabi_fsub+0x348>)
 8000bba:	4038      	ands	r0, r7
 8000bbc:	0743      	lsls	r3, r0, #29
 8000bbe:	d004      	beq.n	8000bca <__aeabi_fsub+0x82>
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	4003      	ands	r3, r0
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d000      	beq.n	8000bca <__aeabi_fsub+0x82>
 8000bc8:	3004      	adds	r0, #4
 8000bca:	0143      	lsls	r3, r0, #5
 8000bcc:	d400      	bmi.n	8000bd0 <__aeabi_fsub+0x88>
 8000bce:	e0a0      	b.n	8000d12 <__aeabi_fsub+0x1ca>
 8000bd0:	1c6a      	adds	r2, r5, #1
 8000bd2:	2dfe      	cmp	r5, #254	; 0xfe
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_fsub+0x90>
 8000bd6:	e08d      	b.n	8000cf4 <__aeabi_fsub+0x1ac>
 8000bd8:	0180      	lsls	r0, r0, #6
 8000bda:	0a47      	lsrs	r7, r0, #9
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	05d0      	lsls	r0, r2, #23
 8000be0:	4338      	orrs	r0, r7
 8000be2:	07e4      	lsls	r4, r4, #31
 8000be4:	4320      	orrs	r0, r4
 8000be6:	bcc0      	pop	{r6, r7}
 8000be8:	46b9      	mov	r9, r7
 8000bea:	46b0      	mov	r8, r6
 8000bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bee:	1aa8      	subs	r0, r5, r2
 8000bf0:	4680      	mov	r8, r0
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	dd45      	ble.n	8000c82 <__aeabi_fsub+0x13a>
 8000bf6:	2a00      	cmp	r2, #0
 8000bf8:	d070      	beq.n	8000cdc <__aeabi_fsub+0x194>
 8000bfa:	2dff      	cmp	r5, #255	; 0xff
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_fsub+0xb8>
 8000bfe:	e09e      	b.n	8000d3e <__aeabi_fsub+0x1f6>
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	04db      	lsls	r3, r3, #19
 8000c04:	431e      	orrs	r6, r3
 8000c06:	4643      	mov	r3, r8
 8000c08:	2b1b      	cmp	r3, #27
 8000c0a:	dc00      	bgt.n	8000c0e <__aeabi_fsub+0xc6>
 8000c0c:	e0d2      	b.n	8000db4 <__aeabi_fsub+0x26c>
 8000c0e:	2001      	movs	r0, #1
 8000c10:	4460      	add	r0, ip
 8000c12:	0143      	lsls	r3, r0, #5
 8000c14:	d57a      	bpl.n	8000d0c <__aeabi_fsub+0x1c4>
 8000c16:	3501      	adds	r5, #1
 8000c18:	2dff      	cmp	r5, #255	; 0xff
 8000c1a:	d06b      	beq.n	8000cf4 <__aeabi_fsub+0x1ac>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	4a9d      	ldr	r2, [pc, #628]	; (8000e94 <__aeabi_fsub+0x34c>)
 8000c20:	4003      	ands	r3, r0
 8000c22:	0840      	lsrs	r0, r0, #1
 8000c24:	4010      	ands	r0, r2
 8000c26:	4318      	orrs	r0, r3
 8000c28:	e7c8      	b.n	8000bbc <__aeabi_fsub+0x74>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	d020      	beq.n	8000c70 <__aeabi_fsub+0x128>
 8000c2e:	428c      	cmp	r4, r1
 8000c30:	d023      	beq.n	8000c7a <__aeabi_fsub+0x132>
 8000c32:	0028      	movs	r0, r5
 8000c34:	38ff      	subs	r0, #255	; 0xff
 8000c36:	2800      	cmp	r0, #0
 8000c38:	d039      	beq.n	8000cae <__aeabi_fsub+0x166>
 8000c3a:	1b57      	subs	r7, r2, r5
 8000c3c:	2d00      	cmp	r5, #0
 8000c3e:	d000      	beq.n	8000c42 <__aeabi_fsub+0xfa>
 8000c40:	e09d      	b.n	8000d7e <__aeabi_fsub+0x236>
 8000c42:	4663      	mov	r3, ip
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d100      	bne.n	8000c4a <__aeabi_fsub+0x102>
 8000c48:	e0db      	b.n	8000e02 <__aeabi_fsub+0x2ba>
 8000c4a:	1e7b      	subs	r3, r7, #1
 8000c4c:	2f01      	cmp	r7, #1
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_fsub+0x10a>
 8000c50:	e10d      	b.n	8000e6e <__aeabi_fsub+0x326>
 8000c52:	2fff      	cmp	r7, #255	; 0xff
 8000c54:	d071      	beq.n	8000d3a <__aeabi_fsub+0x1f2>
 8000c56:	001f      	movs	r7, r3
 8000c58:	e098      	b.n	8000d8c <__aeabi_fsub+0x244>
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_fsub+0x118>
 8000c5e:	e0a7      	b.n	8000db0 <__aeabi_fsub+0x268>
 8000c60:	1e42      	subs	r2, r0, #1
 8000c62:	2801      	cmp	r0, #1
 8000c64:	d100      	bne.n	8000c68 <__aeabi_fsub+0x120>
 8000c66:	e0e6      	b.n	8000e36 <__aeabi_fsub+0x2ee>
 8000c68:	28ff      	cmp	r0, #255	; 0xff
 8000c6a:	d068      	beq.n	8000d3e <__aeabi_fsub+0x1f6>
 8000c6c:	0010      	movs	r0, r2
 8000c6e:	e78f      	b.n	8000b90 <__aeabi_fsub+0x48>
 8000c70:	2001      	movs	r0, #1
 8000c72:	4041      	eors	r1, r0
 8000c74:	42a1      	cmp	r1, r4
 8000c76:	d000      	beq.n	8000c7a <__aeabi_fsub+0x132>
 8000c78:	e77f      	b.n	8000b7a <__aeabi_fsub+0x32>
 8000c7a:	20ff      	movs	r0, #255	; 0xff
 8000c7c:	4240      	negs	r0, r0
 8000c7e:	4680      	mov	r8, r0
 8000c80:	44a8      	add	r8, r5
 8000c82:	4640      	mov	r0, r8
 8000c84:	2800      	cmp	r0, #0
 8000c86:	d038      	beq.n	8000cfa <__aeabi_fsub+0x1b2>
 8000c88:	1b51      	subs	r1, r2, r5
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_fsub+0x148>
 8000c8e:	e0ae      	b.n	8000dee <__aeabi_fsub+0x2a6>
 8000c90:	2aff      	cmp	r2, #255	; 0xff
 8000c92:	d100      	bne.n	8000c96 <__aeabi_fsub+0x14e>
 8000c94:	e0df      	b.n	8000e56 <__aeabi_fsub+0x30e>
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	4660      	mov	r0, ip
 8000c9a:	04db      	lsls	r3, r3, #19
 8000c9c:	4318      	orrs	r0, r3
 8000c9e:	4684      	mov	ip, r0
 8000ca0:	291b      	cmp	r1, #27
 8000ca2:	dc00      	bgt.n	8000ca6 <__aeabi_fsub+0x15e>
 8000ca4:	e0d9      	b.n	8000e5a <__aeabi_fsub+0x312>
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	0015      	movs	r5, r2
 8000caa:	1980      	adds	r0, r0, r6
 8000cac:	e7b1      	b.n	8000c12 <__aeabi_fsub+0xca>
 8000cae:	20fe      	movs	r0, #254	; 0xfe
 8000cb0:	1c6a      	adds	r2, r5, #1
 8000cb2:	4210      	tst	r0, r2
 8000cb4:	d171      	bne.n	8000d9a <__aeabi_fsub+0x252>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d000      	beq.n	8000cbc <__aeabi_fsub+0x174>
 8000cba:	e0a6      	b.n	8000e0a <__aeabi_fsub+0x2c2>
 8000cbc:	4663      	mov	r3, ip
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_fsub+0x17c>
 8000cc2:	e0d9      	b.n	8000e78 <__aeabi_fsub+0x330>
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_fsub+0x184>
 8000cca:	e788      	b.n	8000bde <__aeabi_fsub+0x96>
 8000ccc:	1b98      	subs	r0, r3, r6
 8000cce:	0143      	lsls	r3, r0, #5
 8000cd0:	d400      	bmi.n	8000cd4 <__aeabi_fsub+0x18c>
 8000cd2:	e0e1      	b.n	8000e98 <__aeabi_fsub+0x350>
 8000cd4:	4663      	mov	r3, ip
 8000cd6:	000c      	movs	r4, r1
 8000cd8:	1af0      	subs	r0, r6, r3
 8000cda:	e76f      	b.n	8000bbc <__aeabi_fsub+0x74>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fsub+0x19a>
 8000ce0:	e0b7      	b.n	8000e52 <__aeabi_fsub+0x30a>
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	3a01      	subs	r2, #1
 8000ce6:	2801      	cmp	r0, #1
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fsub+0x1a4>
 8000cea:	e09c      	b.n	8000e26 <__aeabi_fsub+0x2de>
 8000cec:	28ff      	cmp	r0, #255	; 0xff
 8000cee:	d026      	beq.n	8000d3e <__aeabi_fsub+0x1f6>
 8000cf0:	4690      	mov	r8, r2
 8000cf2:	e788      	b.n	8000c06 <__aeabi_fsub+0xbe>
 8000cf4:	22ff      	movs	r2, #255	; 0xff
 8000cf6:	2700      	movs	r7, #0
 8000cf8:	e771      	b.n	8000bde <__aeabi_fsub+0x96>
 8000cfa:	20fe      	movs	r0, #254	; 0xfe
 8000cfc:	1c6a      	adds	r2, r5, #1
 8000cfe:	4210      	tst	r0, r2
 8000d00:	d064      	beq.n	8000dcc <__aeabi_fsub+0x284>
 8000d02:	2aff      	cmp	r2, #255	; 0xff
 8000d04:	d0f6      	beq.n	8000cf4 <__aeabi_fsub+0x1ac>
 8000d06:	0015      	movs	r5, r2
 8000d08:	4466      	add	r6, ip
 8000d0a:	0870      	lsrs	r0, r6, #1
 8000d0c:	0743      	lsls	r3, r0, #29
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_fsub+0x1ca>
 8000d10:	e756      	b.n	8000bc0 <__aeabi_fsub+0x78>
 8000d12:	08c3      	lsrs	r3, r0, #3
 8000d14:	2dff      	cmp	r5, #255	; 0xff
 8000d16:	d012      	beq.n	8000d3e <__aeabi_fsub+0x1f6>
 8000d18:	025b      	lsls	r3, r3, #9
 8000d1a:	0a5f      	lsrs	r7, r3, #9
 8000d1c:	b2ea      	uxtb	r2, r5
 8000d1e:	e75e      	b.n	8000bde <__aeabi_fsub+0x96>
 8000d20:	4662      	mov	r2, ip
 8000d22:	2a00      	cmp	r2, #0
 8000d24:	d100      	bne.n	8000d28 <__aeabi_fsub+0x1e0>
 8000d26:	e096      	b.n	8000e56 <__aeabi_fsub+0x30e>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d008      	beq.n	8000d3e <__aeabi_fsub+0x1f6>
 8000d2c:	2280      	movs	r2, #128	; 0x80
 8000d2e:	03d2      	lsls	r2, r2, #15
 8000d30:	4213      	tst	r3, r2
 8000d32:	d004      	beq.n	8000d3e <__aeabi_fsub+0x1f6>
 8000d34:	4648      	mov	r0, r9
 8000d36:	4210      	tst	r0, r2
 8000d38:	d101      	bne.n	8000d3e <__aeabi_fsub+0x1f6>
 8000d3a:	000c      	movs	r4, r1
 8000d3c:	464b      	mov	r3, r9
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0d8      	beq.n	8000cf4 <__aeabi_fsub+0x1ac>
 8000d42:	2780      	movs	r7, #128	; 0x80
 8000d44:	03ff      	lsls	r7, r7, #15
 8000d46:	431f      	orrs	r7, r3
 8000d48:	027f      	lsls	r7, r7, #9
 8000d4a:	22ff      	movs	r2, #255	; 0xff
 8000d4c:	0a7f      	lsrs	r7, r7, #9
 8000d4e:	e746      	b.n	8000bde <__aeabi_fsub+0x96>
 8000d50:	2320      	movs	r3, #32
 8000d52:	003a      	movs	r2, r7
 8000d54:	1b45      	subs	r5, r0, r5
 8000d56:	0038      	movs	r0, r7
 8000d58:	3501      	adds	r5, #1
 8000d5a:	40ea      	lsrs	r2, r5
 8000d5c:	1b5d      	subs	r5, r3, r5
 8000d5e:	40a8      	lsls	r0, r5
 8000d60:	1e43      	subs	r3, r0, #1
 8000d62:	4198      	sbcs	r0, r3
 8000d64:	2500      	movs	r5, #0
 8000d66:	4310      	orrs	r0, r2
 8000d68:	e728      	b.n	8000bbc <__aeabi_fsub+0x74>
 8000d6a:	2320      	movs	r3, #32
 8000d6c:	1a1b      	subs	r3, r3, r0
 8000d6e:	0032      	movs	r2, r6
 8000d70:	409e      	lsls	r6, r3
 8000d72:	40c2      	lsrs	r2, r0
 8000d74:	0030      	movs	r0, r6
 8000d76:	1e43      	subs	r3, r0, #1
 8000d78:	4198      	sbcs	r0, r3
 8000d7a:	4310      	orrs	r0, r2
 8000d7c:	e70c      	b.n	8000b98 <__aeabi_fsub+0x50>
 8000d7e:	2aff      	cmp	r2, #255	; 0xff
 8000d80:	d0db      	beq.n	8000d3a <__aeabi_fsub+0x1f2>
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	4660      	mov	r0, ip
 8000d86:	04db      	lsls	r3, r3, #19
 8000d88:	4318      	orrs	r0, r3
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	2f1b      	cmp	r7, #27
 8000d8e:	dd56      	ble.n	8000e3e <__aeabi_fsub+0x2f6>
 8000d90:	2001      	movs	r0, #1
 8000d92:	000c      	movs	r4, r1
 8000d94:	0015      	movs	r5, r2
 8000d96:	1a30      	subs	r0, r6, r0
 8000d98:	e700      	b.n	8000b9c <__aeabi_fsub+0x54>
 8000d9a:	4663      	mov	r3, ip
 8000d9c:	1b9f      	subs	r7, r3, r6
 8000d9e:	017b      	lsls	r3, r7, #5
 8000da0:	d43d      	bmi.n	8000e1e <__aeabi_fsub+0x2d6>
 8000da2:	2f00      	cmp	r7, #0
 8000da4:	d000      	beq.n	8000da8 <__aeabi_fsub+0x260>
 8000da6:	e6fe      	b.n	8000ba6 <__aeabi_fsub+0x5e>
 8000da8:	2400      	movs	r4, #0
 8000daa:	2200      	movs	r2, #0
 8000dac:	2700      	movs	r7, #0
 8000dae:	e716      	b.n	8000bde <__aeabi_fsub+0x96>
 8000db0:	0005      	movs	r5, r0
 8000db2:	e7af      	b.n	8000d14 <__aeabi_fsub+0x1cc>
 8000db4:	0032      	movs	r2, r6
 8000db6:	4643      	mov	r3, r8
 8000db8:	4641      	mov	r1, r8
 8000dba:	40da      	lsrs	r2, r3
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	1a5b      	subs	r3, r3, r1
 8000dc0:	409e      	lsls	r6, r3
 8000dc2:	0030      	movs	r0, r6
 8000dc4:	1e43      	subs	r3, r0, #1
 8000dc6:	4198      	sbcs	r0, r3
 8000dc8:	4310      	orrs	r0, r2
 8000dca:	e721      	b.n	8000c10 <__aeabi_fsub+0xc8>
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d1a7      	bne.n	8000d20 <__aeabi_fsub+0x1d8>
 8000dd0:	4663      	mov	r3, ip
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d059      	beq.n	8000e8a <__aeabi_fsub+0x342>
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d100      	bne.n	8000dde <__aeabi_fsub+0x296>
 8000ddc:	e6ff      	b.n	8000bde <__aeabi_fsub+0x96>
 8000dde:	0030      	movs	r0, r6
 8000de0:	4460      	add	r0, ip
 8000de2:	0143      	lsls	r3, r0, #5
 8000de4:	d592      	bpl.n	8000d0c <__aeabi_fsub+0x1c4>
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <__aeabi_fsub+0x348>)
 8000de8:	3501      	adds	r5, #1
 8000dea:	4018      	ands	r0, r3
 8000dec:	e78e      	b.n	8000d0c <__aeabi_fsub+0x1c4>
 8000dee:	4663      	mov	r3, ip
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d047      	beq.n	8000e84 <__aeabi_fsub+0x33c>
 8000df4:	1e4b      	subs	r3, r1, #1
 8000df6:	2901      	cmp	r1, #1
 8000df8:	d015      	beq.n	8000e26 <__aeabi_fsub+0x2de>
 8000dfa:	29ff      	cmp	r1, #255	; 0xff
 8000dfc:	d02b      	beq.n	8000e56 <__aeabi_fsub+0x30e>
 8000dfe:	0019      	movs	r1, r3
 8000e00:	e74e      	b.n	8000ca0 <__aeabi_fsub+0x158>
 8000e02:	000c      	movs	r4, r1
 8000e04:	464b      	mov	r3, r9
 8000e06:	003d      	movs	r5, r7
 8000e08:	e784      	b.n	8000d14 <__aeabi_fsub+0x1cc>
 8000e0a:	4662      	mov	r2, ip
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d18b      	bne.n	8000d28 <__aeabi_fsub+0x1e0>
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d192      	bne.n	8000d3a <__aeabi_fsub+0x1f2>
 8000e14:	2780      	movs	r7, #128	; 0x80
 8000e16:	2400      	movs	r4, #0
 8000e18:	22ff      	movs	r2, #255	; 0xff
 8000e1a:	03ff      	lsls	r7, r7, #15
 8000e1c:	e6df      	b.n	8000bde <__aeabi_fsub+0x96>
 8000e1e:	4663      	mov	r3, ip
 8000e20:	000c      	movs	r4, r1
 8000e22:	1af7      	subs	r7, r6, r3
 8000e24:	e6bf      	b.n	8000ba6 <__aeabi_fsub+0x5e>
 8000e26:	0030      	movs	r0, r6
 8000e28:	4460      	add	r0, ip
 8000e2a:	2501      	movs	r5, #1
 8000e2c:	0143      	lsls	r3, r0, #5
 8000e2e:	d400      	bmi.n	8000e32 <__aeabi_fsub+0x2ea>
 8000e30:	e76c      	b.n	8000d0c <__aeabi_fsub+0x1c4>
 8000e32:	2502      	movs	r5, #2
 8000e34:	e6f2      	b.n	8000c1c <__aeabi_fsub+0xd4>
 8000e36:	4663      	mov	r3, ip
 8000e38:	2501      	movs	r5, #1
 8000e3a:	1b98      	subs	r0, r3, r6
 8000e3c:	e6ae      	b.n	8000b9c <__aeabi_fsub+0x54>
 8000e3e:	2320      	movs	r3, #32
 8000e40:	4664      	mov	r4, ip
 8000e42:	4660      	mov	r0, ip
 8000e44:	40fc      	lsrs	r4, r7
 8000e46:	1bdf      	subs	r7, r3, r7
 8000e48:	40b8      	lsls	r0, r7
 8000e4a:	1e43      	subs	r3, r0, #1
 8000e4c:	4198      	sbcs	r0, r3
 8000e4e:	4320      	orrs	r0, r4
 8000e50:	e79f      	b.n	8000d92 <__aeabi_fsub+0x24a>
 8000e52:	0005      	movs	r5, r0
 8000e54:	e75e      	b.n	8000d14 <__aeabi_fsub+0x1cc>
 8000e56:	464b      	mov	r3, r9
 8000e58:	e771      	b.n	8000d3e <__aeabi_fsub+0x1f6>
 8000e5a:	2320      	movs	r3, #32
 8000e5c:	4665      	mov	r5, ip
 8000e5e:	4660      	mov	r0, ip
 8000e60:	40cd      	lsrs	r5, r1
 8000e62:	1a59      	subs	r1, r3, r1
 8000e64:	4088      	lsls	r0, r1
 8000e66:	1e43      	subs	r3, r0, #1
 8000e68:	4198      	sbcs	r0, r3
 8000e6a:	4328      	orrs	r0, r5
 8000e6c:	e71c      	b.n	8000ca8 <__aeabi_fsub+0x160>
 8000e6e:	4663      	mov	r3, ip
 8000e70:	000c      	movs	r4, r1
 8000e72:	2501      	movs	r5, #1
 8000e74:	1af0      	subs	r0, r6, r3
 8000e76:	e691      	b.n	8000b9c <__aeabi_fsub+0x54>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d095      	beq.n	8000da8 <__aeabi_fsub+0x260>
 8000e7c:	000c      	movs	r4, r1
 8000e7e:	464f      	mov	r7, r9
 8000e80:	2200      	movs	r2, #0
 8000e82:	e6ac      	b.n	8000bde <__aeabi_fsub+0x96>
 8000e84:	464b      	mov	r3, r9
 8000e86:	000d      	movs	r5, r1
 8000e88:	e744      	b.n	8000d14 <__aeabi_fsub+0x1cc>
 8000e8a:	464f      	mov	r7, r9
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e6a6      	b.n	8000bde <__aeabi_fsub+0x96>
 8000e90:	fbffffff 	.word	0xfbffffff
 8000e94:	7dffffff 	.word	0x7dffffff
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	d000      	beq.n	8000e9e <__aeabi_fsub+0x356>
 8000e9c:	e736      	b.n	8000d0c <__aeabi_fsub+0x1c4>
 8000e9e:	2400      	movs	r4, #0
 8000ea0:	2700      	movs	r7, #0
 8000ea2:	e69c      	b.n	8000bde <__aeabi_fsub+0x96>

08000ea4 <__aeabi_f2iz>:
 8000ea4:	0241      	lsls	r1, r0, #9
 8000ea6:	0042      	lsls	r2, r0, #1
 8000ea8:	0fc3      	lsrs	r3, r0, #31
 8000eaa:	0a49      	lsrs	r1, r1, #9
 8000eac:	2000      	movs	r0, #0
 8000eae:	0e12      	lsrs	r2, r2, #24
 8000eb0:	2a7e      	cmp	r2, #126	; 0x7e
 8000eb2:	dd03      	ble.n	8000ebc <__aeabi_f2iz+0x18>
 8000eb4:	2a9d      	cmp	r2, #157	; 0x9d
 8000eb6:	dd02      	ble.n	8000ebe <__aeabi_f2iz+0x1a>
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <__aeabi_f2iz+0x3c>)
 8000eba:	1898      	adds	r0, r3, r2
 8000ebc:	4770      	bx	lr
 8000ebe:	2080      	movs	r0, #128	; 0x80
 8000ec0:	0400      	lsls	r0, r0, #16
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	2a95      	cmp	r2, #149	; 0x95
 8000ec6:	dc07      	bgt.n	8000ed8 <__aeabi_f2iz+0x34>
 8000ec8:	2096      	movs	r0, #150	; 0x96
 8000eca:	1a82      	subs	r2, r0, r2
 8000ecc:	40d1      	lsrs	r1, r2
 8000ece:	4248      	negs	r0, r1
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f3      	bne.n	8000ebc <__aeabi_f2iz+0x18>
 8000ed4:	0008      	movs	r0, r1
 8000ed6:	e7f1      	b.n	8000ebc <__aeabi_f2iz+0x18>
 8000ed8:	3a96      	subs	r2, #150	; 0x96
 8000eda:	4091      	lsls	r1, r2
 8000edc:	e7f7      	b.n	8000ece <__aeabi_f2iz+0x2a>
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	7fffffff 	.word	0x7fffffff

08000ee4 <__aeabi_i2f>:
 8000ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	d013      	beq.n	8000f12 <__aeabi_i2f+0x2e>
 8000eea:	17c3      	asrs	r3, r0, #31
 8000eec:	18c6      	adds	r6, r0, r3
 8000eee:	405e      	eors	r6, r3
 8000ef0:	0fc4      	lsrs	r4, r0, #31
 8000ef2:	0030      	movs	r0, r6
 8000ef4:	f000 ff7a 	bl	8001dec <__clzsi2>
 8000ef8:	239e      	movs	r3, #158	; 0x9e
 8000efa:	0005      	movs	r5, r0
 8000efc:	1a1b      	subs	r3, r3, r0
 8000efe:	2b96      	cmp	r3, #150	; 0x96
 8000f00:	dc0f      	bgt.n	8000f22 <__aeabi_i2f+0x3e>
 8000f02:	2808      	cmp	r0, #8
 8000f04:	dd01      	ble.n	8000f0a <__aeabi_i2f+0x26>
 8000f06:	3d08      	subs	r5, #8
 8000f08:	40ae      	lsls	r6, r5
 8000f0a:	0276      	lsls	r6, r6, #9
 8000f0c:	0a76      	lsrs	r6, r6, #9
 8000f0e:	b2d8      	uxtb	r0, r3
 8000f10:	e002      	b.n	8000f18 <__aeabi_i2f+0x34>
 8000f12:	2400      	movs	r4, #0
 8000f14:	2000      	movs	r0, #0
 8000f16:	2600      	movs	r6, #0
 8000f18:	05c0      	lsls	r0, r0, #23
 8000f1a:	4330      	orrs	r0, r6
 8000f1c:	07e4      	lsls	r4, r4, #31
 8000f1e:	4320      	orrs	r0, r4
 8000f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f22:	2b99      	cmp	r3, #153	; 0x99
 8000f24:	dd0c      	ble.n	8000f40 <__aeabi_i2f+0x5c>
 8000f26:	2205      	movs	r2, #5
 8000f28:	0031      	movs	r1, r6
 8000f2a:	1a12      	subs	r2, r2, r0
 8000f2c:	40d1      	lsrs	r1, r2
 8000f2e:	000a      	movs	r2, r1
 8000f30:	0001      	movs	r1, r0
 8000f32:	0030      	movs	r0, r6
 8000f34:	311b      	adds	r1, #27
 8000f36:	4088      	lsls	r0, r1
 8000f38:	1e41      	subs	r1, r0, #1
 8000f3a:	4188      	sbcs	r0, r1
 8000f3c:	4302      	orrs	r2, r0
 8000f3e:	0016      	movs	r6, r2
 8000f40:	2d05      	cmp	r5, #5
 8000f42:	dc12      	bgt.n	8000f6a <__aeabi_i2f+0x86>
 8000f44:	0031      	movs	r1, r6
 8000f46:	4f0d      	ldr	r7, [pc, #52]	; (8000f7c <__aeabi_i2f+0x98>)
 8000f48:	4039      	ands	r1, r7
 8000f4a:	0772      	lsls	r2, r6, #29
 8000f4c:	d009      	beq.n	8000f62 <__aeabi_i2f+0x7e>
 8000f4e:	200f      	movs	r0, #15
 8000f50:	4030      	ands	r0, r6
 8000f52:	2804      	cmp	r0, #4
 8000f54:	d005      	beq.n	8000f62 <__aeabi_i2f+0x7e>
 8000f56:	3104      	adds	r1, #4
 8000f58:	014a      	lsls	r2, r1, #5
 8000f5a:	d502      	bpl.n	8000f62 <__aeabi_i2f+0x7e>
 8000f5c:	239f      	movs	r3, #159	; 0x9f
 8000f5e:	4039      	ands	r1, r7
 8000f60:	1b5b      	subs	r3, r3, r5
 8000f62:	0189      	lsls	r1, r1, #6
 8000f64:	0a4e      	lsrs	r6, r1, #9
 8000f66:	b2d8      	uxtb	r0, r3
 8000f68:	e7d6      	b.n	8000f18 <__aeabi_i2f+0x34>
 8000f6a:	1f6a      	subs	r2, r5, #5
 8000f6c:	4096      	lsls	r6, r2
 8000f6e:	0031      	movs	r1, r6
 8000f70:	4f02      	ldr	r7, [pc, #8]	; (8000f7c <__aeabi_i2f+0x98>)
 8000f72:	4039      	ands	r1, r7
 8000f74:	0772      	lsls	r2, r6, #29
 8000f76:	d0f4      	beq.n	8000f62 <__aeabi_i2f+0x7e>
 8000f78:	e7e9      	b.n	8000f4e <__aeabi_i2f+0x6a>
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	fbffffff 	.word	0xfbffffff

08000f80 <__aeabi_ui2f>:
 8000f80:	b570      	push	{r4, r5, r6, lr}
 8000f82:	1e05      	subs	r5, r0, #0
 8000f84:	d00e      	beq.n	8000fa4 <__aeabi_ui2f+0x24>
 8000f86:	f000 ff31 	bl	8001dec <__clzsi2>
 8000f8a:	239e      	movs	r3, #158	; 0x9e
 8000f8c:	0004      	movs	r4, r0
 8000f8e:	1a1b      	subs	r3, r3, r0
 8000f90:	2b96      	cmp	r3, #150	; 0x96
 8000f92:	dc0c      	bgt.n	8000fae <__aeabi_ui2f+0x2e>
 8000f94:	2808      	cmp	r0, #8
 8000f96:	dd01      	ble.n	8000f9c <__aeabi_ui2f+0x1c>
 8000f98:	3c08      	subs	r4, #8
 8000f9a:	40a5      	lsls	r5, r4
 8000f9c:	026d      	lsls	r5, r5, #9
 8000f9e:	0a6d      	lsrs	r5, r5, #9
 8000fa0:	b2d8      	uxtb	r0, r3
 8000fa2:	e001      	b.n	8000fa8 <__aeabi_ui2f+0x28>
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	2500      	movs	r5, #0
 8000fa8:	05c0      	lsls	r0, r0, #23
 8000faa:	4328      	orrs	r0, r5
 8000fac:	bd70      	pop	{r4, r5, r6, pc}
 8000fae:	2b99      	cmp	r3, #153	; 0x99
 8000fb0:	dd09      	ble.n	8000fc6 <__aeabi_ui2f+0x46>
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	0029      	movs	r1, r5
 8000fb6:	321b      	adds	r2, #27
 8000fb8:	4091      	lsls	r1, r2
 8000fba:	1e4a      	subs	r2, r1, #1
 8000fbc:	4191      	sbcs	r1, r2
 8000fbe:	2205      	movs	r2, #5
 8000fc0:	1a12      	subs	r2, r2, r0
 8000fc2:	40d5      	lsrs	r5, r2
 8000fc4:	430d      	orrs	r5, r1
 8000fc6:	2c05      	cmp	r4, #5
 8000fc8:	dc12      	bgt.n	8000ff0 <__aeabi_ui2f+0x70>
 8000fca:	0029      	movs	r1, r5
 8000fcc:	4e0c      	ldr	r6, [pc, #48]	; (8001000 <__aeabi_ui2f+0x80>)
 8000fce:	4031      	ands	r1, r6
 8000fd0:	076a      	lsls	r2, r5, #29
 8000fd2:	d009      	beq.n	8000fe8 <__aeabi_ui2f+0x68>
 8000fd4:	200f      	movs	r0, #15
 8000fd6:	4028      	ands	r0, r5
 8000fd8:	2804      	cmp	r0, #4
 8000fda:	d005      	beq.n	8000fe8 <__aeabi_ui2f+0x68>
 8000fdc:	3104      	adds	r1, #4
 8000fde:	014a      	lsls	r2, r1, #5
 8000fe0:	d502      	bpl.n	8000fe8 <__aeabi_ui2f+0x68>
 8000fe2:	239f      	movs	r3, #159	; 0x9f
 8000fe4:	4031      	ands	r1, r6
 8000fe6:	1b1b      	subs	r3, r3, r4
 8000fe8:	0189      	lsls	r1, r1, #6
 8000fea:	0a4d      	lsrs	r5, r1, #9
 8000fec:	b2d8      	uxtb	r0, r3
 8000fee:	e7db      	b.n	8000fa8 <__aeabi_ui2f+0x28>
 8000ff0:	1f62      	subs	r2, r4, #5
 8000ff2:	4095      	lsls	r5, r2
 8000ff4:	0029      	movs	r1, r5
 8000ff6:	4e02      	ldr	r6, [pc, #8]	; (8001000 <__aeabi_ui2f+0x80>)
 8000ff8:	4031      	ands	r1, r6
 8000ffa:	076a      	lsls	r2, r5, #29
 8000ffc:	d0f4      	beq.n	8000fe8 <__aeabi_ui2f+0x68>
 8000ffe:	e7e9      	b.n	8000fd4 <__aeabi_ui2f+0x54>
 8001000:	fbffffff 	.word	0xfbffffff

08001004 <__aeabi_dmul>:
 8001004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001006:	4657      	mov	r7, sl
 8001008:	464e      	mov	r6, r9
 800100a:	4645      	mov	r5, r8
 800100c:	46de      	mov	lr, fp
 800100e:	b5e0      	push	{r5, r6, r7, lr}
 8001010:	4698      	mov	r8, r3
 8001012:	030c      	lsls	r4, r1, #12
 8001014:	004b      	lsls	r3, r1, #1
 8001016:	0006      	movs	r6, r0
 8001018:	4692      	mov	sl, r2
 800101a:	b087      	sub	sp, #28
 800101c:	0b24      	lsrs	r4, r4, #12
 800101e:	0d5b      	lsrs	r3, r3, #21
 8001020:	0fcf      	lsrs	r7, r1, #31
 8001022:	2b00      	cmp	r3, #0
 8001024:	d100      	bne.n	8001028 <__aeabi_dmul+0x24>
 8001026:	e15c      	b.n	80012e2 <__aeabi_dmul+0x2de>
 8001028:	4ad9      	ldr	r2, [pc, #868]	; (8001390 <__aeabi_dmul+0x38c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d100      	bne.n	8001030 <__aeabi_dmul+0x2c>
 800102e:	e175      	b.n	800131c <__aeabi_dmul+0x318>
 8001030:	0f42      	lsrs	r2, r0, #29
 8001032:	00e4      	lsls	r4, r4, #3
 8001034:	4314      	orrs	r4, r2
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	0412      	lsls	r2, r2, #16
 800103a:	4314      	orrs	r4, r2
 800103c:	4ad5      	ldr	r2, [pc, #852]	; (8001394 <__aeabi_dmul+0x390>)
 800103e:	00c5      	lsls	r5, r0, #3
 8001040:	4694      	mov	ip, r2
 8001042:	4463      	add	r3, ip
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2300      	movs	r3, #0
 8001048:	4699      	mov	r9, r3
 800104a:	469b      	mov	fp, r3
 800104c:	4643      	mov	r3, r8
 800104e:	4642      	mov	r2, r8
 8001050:	031e      	lsls	r6, r3, #12
 8001052:	0fd2      	lsrs	r2, r2, #31
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4650      	mov	r0, sl
 8001058:	4690      	mov	r8, r2
 800105a:	0b36      	lsrs	r6, r6, #12
 800105c:	0d5b      	lsrs	r3, r3, #21
 800105e:	d100      	bne.n	8001062 <__aeabi_dmul+0x5e>
 8001060:	e120      	b.n	80012a4 <__aeabi_dmul+0x2a0>
 8001062:	4acb      	ldr	r2, [pc, #812]	; (8001390 <__aeabi_dmul+0x38c>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d100      	bne.n	800106a <__aeabi_dmul+0x66>
 8001068:	e162      	b.n	8001330 <__aeabi_dmul+0x32c>
 800106a:	49ca      	ldr	r1, [pc, #808]	; (8001394 <__aeabi_dmul+0x390>)
 800106c:	0f42      	lsrs	r2, r0, #29
 800106e:	468c      	mov	ip, r1
 8001070:	9900      	ldr	r1, [sp, #0]
 8001072:	4463      	add	r3, ip
 8001074:	00f6      	lsls	r6, r6, #3
 8001076:	468c      	mov	ip, r1
 8001078:	4316      	orrs	r6, r2
 800107a:	2280      	movs	r2, #128	; 0x80
 800107c:	449c      	add	ip, r3
 800107e:	0412      	lsls	r2, r2, #16
 8001080:	4663      	mov	r3, ip
 8001082:	4316      	orrs	r6, r2
 8001084:	00c2      	lsls	r2, r0, #3
 8001086:	2000      	movs	r0, #0
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	9900      	ldr	r1, [sp, #0]
 800108c:	4643      	mov	r3, r8
 800108e:	3101      	adds	r1, #1
 8001090:	468c      	mov	ip, r1
 8001092:	4649      	mov	r1, r9
 8001094:	407b      	eors	r3, r7
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	290f      	cmp	r1, #15
 800109a:	d826      	bhi.n	80010ea <__aeabi_dmul+0xe6>
 800109c:	4bbe      	ldr	r3, [pc, #760]	; (8001398 <__aeabi_dmul+0x394>)
 800109e:	0089      	lsls	r1, r1, #2
 80010a0:	5859      	ldr	r1, [r3, r1]
 80010a2:	468f      	mov	pc, r1
 80010a4:	4643      	mov	r3, r8
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	0034      	movs	r4, r6
 80010aa:	0015      	movs	r5, r2
 80010ac:	4683      	mov	fp, r0
 80010ae:	465b      	mov	r3, fp
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d016      	beq.n	80010e2 <__aeabi_dmul+0xde>
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d100      	bne.n	80010ba <__aeabi_dmul+0xb6>
 80010b8:	e203      	b.n	80014c2 <__aeabi_dmul+0x4be>
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d000      	beq.n	80010c0 <__aeabi_dmul+0xbc>
 80010be:	e0cd      	b.n	800125c <__aeabi_dmul+0x258>
 80010c0:	2200      	movs	r2, #0
 80010c2:	2400      	movs	r4, #0
 80010c4:	2500      	movs	r5, #0
 80010c6:	9b01      	ldr	r3, [sp, #4]
 80010c8:	0512      	lsls	r2, r2, #20
 80010ca:	4322      	orrs	r2, r4
 80010cc:	07db      	lsls	r3, r3, #31
 80010ce:	431a      	orrs	r2, r3
 80010d0:	0028      	movs	r0, r5
 80010d2:	0011      	movs	r1, r2
 80010d4:	b007      	add	sp, #28
 80010d6:	bcf0      	pop	{r4, r5, r6, r7}
 80010d8:	46bb      	mov	fp, r7
 80010da:	46b2      	mov	sl, r6
 80010dc:	46a9      	mov	r9, r5
 80010de:	46a0      	mov	r8, r4
 80010e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010e2:	2400      	movs	r4, #0
 80010e4:	2500      	movs	r5, #0
 80010e6:	4aaa      	ldr	r2, [pc, #680]	; (8001390 <__aeabi_dmul+0x38c>)
 80010e8:	e7ed      	b.n	80010c6 <__aeabi_dmul+0xc2>
 80010ea:	0c28      	lsrs	r0, r5, #16
 80010ec:	042d      	lsls	r5, r5, #16
 80010ee:	0c2d      	lsrs	r5, r5, #16
 80010f0:	002b      	movs	r3, r5
 80010f2:	0c11      	lsrs	r1, r2, #16
 80010f4:	0412      	lsls	r2, r2, #16
 80010f6:	0c12      	lsrs	r2, r2, #16
 80010f8:	4353      	muls	r3, r2
 80010fa:	4698      	mov	r8, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	002f      	movs	r7, r5
 8001100:	4343      	muls	r3, r0
 8001102:	4699      	mov	r9, r3
 8001104:	434f      	muls	r7, r1
 8001106:	444f      	add	r7, r9
 8001108:	46bb      	mov	fp, r7
 800110a:	4647      	mov	r7, r8
 800110c:	000b      	movs	r3, r1
 800110e:	0c3f      	lsrs	r7, r7, #16
 8001110:	46ba      	mov	sl, r7
 8001112:	4343      	muls	r3, r0
 8001114:	44da      	add	sl, fp
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	45d1      	cmp	r9, sl
 800111a:	d904      	bls.n	8001126 <__aeabi_dmul+0x122>
 800111c:	2780      	movs	r7, #128	; 0x80
 800111e:	027f      	lsls	r7, r7, #9
 8001120:	46b9      	mov	r9, r7
 8001122:	444b      	add	r3, r9
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	4653      	mov	r3, sl
 8001128:	0c1b      	lsrs	r3, r3, #16
 800112a:	469b      	mov	fp, r3
 800112c:	4653      	mov	r3, sl
 800112e:	041f      	lsls	r7, r3, #16
 8001130:	4643      	mov	r3, r8
 8001132:	041b      	lsls	r3, r3, #16
 8001134:	0c1b      	lsrs	r3, r3, #16
 8001136:	4698      	mov	r8, r3
 8001138:	003b      	movs	r3, r7
 800113a:	4443      	add	r3, r8
 800113c:	9304      	str	r3, [sp, #16]
 800113e:	0c33      	lsrs	r3, r6, #16
 8001140:	0436      	lsls	r6, r6, #16
 8001142:	0c36      	lsrs	r6, r6, #16
 8001144:	4698      	mov	r8, r3
 8001146:	0033      	movs	r3, r6
 8001148:	4343      	muls	r3, r0
 800114a:	4699      	mov	r9, r3
 800114c:	4643      	mov	r3, r8
 800114e:	4343      	muls	r3, r0
 8001150:	002f      	movs	r7, r5
 8001152:	469a      	mov	sl, r3
 8001154:	4643      	mov	r3, r8
 8001156:	4377      	muls	r7, r6
 8001158:	435d      	muls	r5, r3
 800115a:	0c38      	lsrs	r0, r7, #16
 800115c:	444d      	add	r5, r9
 800115e:	1945      	adds	r5, r0, r5
 8001160:	45a9      	cmp	r9, r5
 8001162:	d903      	bls.n	800116c <__aeabi_dmul+0x168>
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	025b      	lsls	r3, r3, #9
 8001168:	4699      	mov	r9, r3
 800116a:	44ca      	add	sl, r9
 800116c:	043f      	lsls	r7, r7, #16
 800116e:	0c28      	lsrs	r0, r5, #16
 8001170:	0c3f      	lsrs	r7, r7, #16
 8001172:	042d      	lsls	r5, r5, #16
 8001174:	19ed      	adds	r5, r5, r7
 8001176:	0c27      	lsrs	r7, r4, #16
 8001178:	0424      	lsls	r4, r4, #16
 800117a:	0c24      	lsrs	r4, r4, #16
 800117c:	0003      	movs	r3, r0
 800117e:	0020      	movs	r0, r4
 8001180:	4350      	muls	r0, r2
 8001182:	437a      	muls	r2, r7
 8001184:	4691      	mov	r9, r2
 8001186:	003a      	movs	r2, r7
 8001188:	4453      	add	r3, sl
 800118a:	9305      	str	r3, [sp, #20]
 800118c:	0c03      	lsrs	r3, r0, #16
 800118e:	469a      	mov	sl, r3
 8001190:	434a      	muls	r2, r1
 8001192:	4361      	muls	r1, r4
 8001194:	4449      	add	r1, r9
 8001196:	4451      	add	r1, sl
 8001198:	44ab      	add	fp, r5
 800119a:	4589      	cmp	r9, r1
 800119c:	d903      	bls.n	80011a6 <__aeabi_dmul+0x1a2>
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	4699      	mov	r9, r3
 80011a4:	444a      	add	r2, r9
 80011a6:	0400      	lsls	r0, r0, #16
 80011a8:	0c0b      	lsrs	r3, r1, #16
 80011aa:	0c00      	lsrs	r0, r0, #16
 80011ac:	0409      	lsls	r1, r1, #16
 80011ae:	1809      	adds	r1, r1, r0
 80011b0:	0020      	movs	r0, r4
 80011b2:	4699      	mov	r9, r3
 80011b4:	4643      	mov	r3, r8
 80011b6:	4370      	muls	r0, r6
 80011b8:	435c      	muls	r4, r3
 80011ba:	437e      	muls	r6, r7
 80011bc:	435f      	muls	r7, r3
 80011be:	0c03      	lsrs	r3, r0, #16
 80011c0:	4698      	mov	r8, r3
 80011c2:	19a4      	adds	r4, r4, r6
 80011c4:	4444      	add	r4, r8
 80011c6:	444a      	add	r2, r9
 80011c8:	9703      	str	r7, [sp, #12]
 80011ca:	42a6      	cmp	r6, r4
 80011cc:	d904      	bls.n	80011d8 <__aeabi_dmul+0x1d4>
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	025b      	lsls	r3, r3, #9
 80011d2:	4698      	mov	r8, r3
 80011d4:	4447      	add	r7, r8
 80011d6:	9703      	str	r7, [sp, #12]
 80011d8:	0423      	lsls	r3, r4, #16
 80011da:	9e02      	ldr	r6, [sp, #8]
 80011dc:	469a      	mov	sl, r3
 80011de:	9b05      	ldr	r3, [sp, #20]
 80011e0:	445e      	add	r6, fp
 80011e2:	4698      	mov	r8, r3
 80011e4:	42ae      	cmp	r6, r5
 80011e6:	41ad      	sbcs	r5, r5
 80011e8:	1876      	adds	r6, r6, r1
 80011ea:	428e      	cmp	r6, r1
 80011ec:	4189      	sbcs	r1, r1
 80011ee:	0400      	lsls	r0, r0, #16
 80011f0:	0c00      	lsrs	r0, r0, #16
 80011f2:	4450      	add	r0, sl
 80011f4:	4440      	add	r0, r8
 80011f6:	426d      	negs	r5, r5
 80011f8:	1947      	adds	r7, r0, r5
 80011fa:	46b8      	mov	r8, r7
 80011fc:	4693      	mov	fp, r2
 80011fe:	4249      	negs	r1, r1
 8001200:	4689      	mov	r9, r1
 8001202:	44c3      	add	fp, r8
 8001204:	44d9      	add	r9, fp
 8001206:	4298      	cmp	r0, r3
 8001208:	4180      	sbcs	r0, r0
 800120a:	45a8      	cmp	r8, r5
 800120c:	41ad      	sbcs	r5, r5
 800120e:	4593      	cmp	fp, r2
 8001210:	4192      	sbcs	r2, r2
 8001212:	4589      	cmp	r9, r1
 8001214:	4189      	sbcs	r1, r1
 8001216:	426d      	negs	r5, r5
 8001218:	4240      	negs	r0, r0
 800121a:	4328      	orrs	r0, r5
 800121c:	0c24      	lsrs	r4, r4, #16
 800121e:	4252      	negs	r2, r2
 8001220:	4249      	negs	r1, r1
 8001222:	430a      	orrs	r2, r1
 8001224:	9b03      	ldr	r3, [sp, #12]
 8001226:	1900      	adds	r0, r0, r4
 8001228:	1880      	adds	r0, r0, r2
 800122a:	18c7      	adds	r7, r0, r3
 800122c:	464b      	mov	r3, r9
 800122e:	0ddc      	lsrs	r4, r3, #23
 8001230:	9b04      	ldr	r3, [sp, #16]
 8001232:	0275      	lsls	r5, r6, #9
 8001234:	431d      	orrs	r5, r3
 8001236:	1e6a      	subs	r2, r5, #1
 8001238:	4195      	sbcs	r5, r2
 800123a:	464b      	mov	r3, r9
 800123c:	0df6      	lsrs	r6, r6, #23
 800123e:	027f      	lsls	r7, r7, #9
 8001240:	4335      	orrs	r5, r6
 8001242:	025a      	lsls	r2, r3, #9
 8001244:	433c      	orrs	r4, r7
 8001246:	4315      	orrs	r5, r2
 8001248:	01fb      	lsls	r3, r7, #7
 800124a:	d400      	bmi.n	800124e <__aeabi_dmul+0x24a>
 800124c:	e11c      	b.n	8001488 <__aeabi_dmul+0x484>
 800124e:	2101      	movs	r1, #1
 8001250:	086a      	lsrs	r2, r5, #1
 8001252:	400d      	ands	r5, r1
 8001254:	4315      	orrs	r5, r2
 8001256:	07e2      	lsls	r2, r4, #31
 8001258:	4315      	orrs	r5, r2
 800125a:	0864      	lsrs	r4, r4, #1
 800125c:	494f      	ldr	r1, [pc, #316]	; (800139c <__aeabi_dmul+0x398>)
 800125e:	4461      	add	r1, ip
 8001260:	2900      	cmp	r1, #0
 8001262:	dc00      	bgt.n	8001266 <__aeabi_dmul+0x262>
 8001264:	e0b0      	b.n	80013c8 <__aeabi_dmul+0x3c4>
 8001266:	076b      	lsls	r3, r5, #29
 8001268:	d009      	beq.n	800127e <__aeabi_dmul+0x27a>
 800126a:	220f      	movs	r2, #15
 800126c:	402a      	ands	r2, r5
 800126e:	2a04      	cmp	r2, #4
 8001270:	d005      	beq.n	800127e <__aeabi_dmul+0x27a>
 8001272:	1d2a      	adds	r2, r5, #4
 8001274:	42aa      	cmp	r2, r5
 8001276:	41ad      	sbcs	r5, r5
 8001278:	426d      	negs	r5, r5
 800127a:	1964      	adds	r4, r4, r5
 800127c:	0015      	movs	r5, r2
 800127e:	01e3      	lsls	r3, r4, #7
 8001280:	d504      	bpl.n	800128c <__aeabi_dmul+0x288>
 8001282:	2180      	movs	r1, #128	; 0x80
 8001284:	4a46      	ldr	r2, [pc, #280]	; (80013a0 <__aeabi_dmul+0x39c>)
 8001286:	00c9      	lsls	r1, r1, #3
 8001288:	4014      	ands	r4, r2
 800128a:	4461      	add	r1, ip
 800128c:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <__aeabi_dmul+0x3a0>)
 800128e:	4291      	cmp	r1, r2
 8001290:	dd00      	ble.n	8001294 <__aeabi_dmul+0x290>
 8001292:	e726      	b.n	80010e2 <__aeabi_dmul+0xde>
 8001294:	0762      	lsls	r2, r4, #29
 8001296:	08ed      	lsrs	r5, r5, #3
 8001298:	0264      	lsls	r4, r4, #9
 800129a:	0549      	lsls	r1, r1, #21
 800129c:	4315      	orrs	r5, r2
 800129e:	0b24      	lsrs	r4, r4, #12
 80012a0:	0d4a      	lsrs	r2, r1, #21
 80012a2:	e710      	b.n	80010c6 <__aeabi_dmul+0xc2>
 80012a4:	4652      	mov	r2, sl
 80012a6:	4332      	orrs	r2, r6
 80012a8:	d100      	bne.n	80012ac <__aeabi_dmul+0x2a8>
 80012aa:	e07f      	b.n	80013ac <__aeabi_dmul+0x3a8>
 80012ac:	2e00      	cmp	r6, #0
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dmul+0x2ae>
 80012b0:	e0dc      	b.n	800146c <__aeabi_dmul+0x468>
 80012b2:	0030      	movs	r0, r6
 80012b4:	f000 fd9a 	bl	8001dec <__clzsi2>
 80012b8:	0002      	movs	r2, r0
 80012ba:	3a0b      	subs	r2, #11
 80012bc:	231d      	movs	r3, #29
 80012be:	0001      	movs	r1, r0
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	4652      	mov	r2, sl
 80012c4:	3908      	subs	r1, #8
 80012c6:	40da      	lsrs	r2, r3
 80012c8:	408e      	lsls	r6, r1
 80012ca:	4316      	orrs	r6, r2
 80012cc:	4652      	mov	r2, sl
 80012ce:	408a      	lsls	r2, r1
 80012d0:	9b00      	ldr	r3, [sp, #0]
 80012d2:	4935      	ldr	r1, [pc, #212]	; (80013a8 <__aeabi_dmul+0x3a4>)
 80012d4:	1a18      	subs	r0, r3, r0
 80012d6:	0003      	movs	r3, r0
 80012d8:	468c      	mov	ip, r1
 80012da:	4463      	add	r3, ip
 80012dc:	2000      	movs	r0, #0
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	e6d3      	b.n	800108a <__aeabi_dmul+0x86>
 80012e2:	0025      	movs	r5, r4
 80012e4:	4305      	orrs	r5, r0
 80012e6:	d04a      	beq.n	800137e <__aeabi_dmul+0x37a>
 80012e8:	2c00      	cmp	r4, #0
 80012ea:	d100      	bne.n	80012ee <__aeabi_dmul+0x2ea>
 80012ec:	e0b0      	b.n	8001450 <__aeabi_dmul+0x44c>
 80012ee:	0020      	movs	r0, r4
 80012f0:	f000 fd7c 	bl	8001dec <__clzsi2>
 80012f4:	0001      	movs	r1, r0
 80012f6:	0002      	movs	r2, r0
 80012f8:	390b      	subs	r1, #11
 80012fa:	231d      	movs	r3, #29
 80012fc:	0010      	movs	r0, r2
 80012fe:	1a5b      	subs	r3, r3, r1
 8001300:	0031      	movs	r1, r6
 8001302:	0035      	movs	r5, r6
 8001304:	3808      	subs	r0, #8
 8001306:	4084      	lsls	r4, r0
 8001308:	40d9      	lsrs	r1, r3
 800130a:	4085      	lsls	r5, r0
 800130c:	430c      	orrs	r4, r1
 800130e:	4826      	ldr	r0, [pc, #152]	; (80013a8 <__aeabi_dmul+0x3a4>)
 8001310:	1a83      	subs	r3, r0, r2
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2300      	movs	r3, #0
 8001316:	4699      	mov	r9, r3
 8001318:	469b      	mov	fp, r3
 800131a:	e697      	b.n	800104c <__aeabi_dmul+0x48>
 800131c:	0005      	movs	r5, r0
 800131e:	4325      	orrs	r5, r4
 8001320:	d126      	bne.n	8001370 <__aeabi_dmul+0x36c>
 8001322:	2208      	movs	r2, #8
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2302      	movs	r3, #2
 8001328:	2400      	movs	r4, #0
 800132a:	4691      	mov	r9, r2
 800132c:	469b      	mov	fp, r3
 800132e:	e68d      	b.n	800104c <__aeabi_dmul+0x48>
 8001330:	4652      	mov	r2, sl
 8001332:	9b00      	ldr	r3, [sp, #0]
 8001334:	4332      	orrs	r2, r6
 8001336:	d110      	bne.n	800135a <__aeabi_dmul+0x356>
 8001338:	4915      	ldr	r1, [pc, #84]	; (8001390 <__aeabi_dmul+0x38c>)
 800133a:	2600      	movs	r6, #0
 800133c:	468c      	mov	ip, r1
 800133e:	4463      	add	r3, ip
 8001340:	4649      	mov	r1, r9
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2302      	movs	r3, #2
 8001346:	4319      	orrs	r1, r3
 8001348:	4689      	mov	r9, r1
 800134a:	2002      	movs	r0, #2
 800134c:	e69d      	b.n	800108a <__aeabi_dmul+0x86>
 800134e:	465b      	mov	r3, fp
 8001350:	9701      	str	r7, [sp, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d000      	beq.n	8001358 <__aeabi_dmul+0x354>
 8001356:	e6ad      	b.n	80010b4 <__aeabi_dmul+0xb0>
 8001358:	e6c3      	b.n	80010e2 <__aeabi_dmul+0xde>
 800135a:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <__aeabi_dmul+0x38c>)
 800135c:	2003      	movs	r0, #3
 800135e:	4694      	mov	ip, r2
 8001360:	4463      	add	r3, ip
 8001362:	464a      	mov	r2, r9
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2303      	movs	r3, #3
 8001368:	431a      	orrs	r2, r3
 800136a:	4691      	mov	r9, r2
 800136c:	4652      	mov	r2, sl
 800136e:	e68c      	b.n	800108a <__aeabi_dmul+0x86>
 8001370:	220c      	movs	r2, #12
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2303      	movs	r3, #3
 8001376:	0005      	movs	r5, r0
 8001378:	4691      	mov	r9, r2
 800137a:	469b      	mov	fp, r3
 800137c:	e666      	b.n	800104c <__aeabi_dmul+0x48>
 800137e:	2304      	movs	r3, #4
 8001380:	4699      	mov	r9, r3
 8001382:	2300      	movs	r3, #0
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	2400      	movs	r4, #0
 800138a:	469b      	mov	fp, r3
 800138c:	e65e      	b.n	800104c <__aeabi_dmul+0x48>
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	000007ff 	.word	0x000007ff
 8001394:	fffffc01 	.word	0xfffffc01
 8001398:	08005ec8 	.word	0x08005ec8
 800139c:	000003ff 	.word	0x000003ff
 80013a0:	feffffff 	.word	0xfeffffff
 80013a4:	000007fe 	.word	0x000007fe
 80013a8:	fffffc0d 	.word	0xfffffc0d
 80013ac:	4649      	mov	r1, r9
 80013ae:	2301      	movs	r3, #1
 80013b0:	4319      	orrs	r1, r3
 80013b2:	4689      	mov	r9, r1
 80013b4:	2600      	movs	r6, #0
 80013b6:	2001      	movs	r0, #1
 80013b8:	e667      	b.n	800108a <__aeabi_dmul+0x86>
 80013ba:	2300      	movs	r3, #0
 80013bc:	2480      	movs	r4, #128	; 0x80
 80013be:	2500      	movs	r5, #0
 80013c0:	4a43      	ldr	r2, [pc, #268]	; (80014d0 <__aeabi_dmul+0x4cc>)
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	0324      	lsls	r4, r4, #12
 80013c6:	e67e      	b.n	80010c6 <__aeabi_dmul+0xc2>
 80013c8:	2001      	movs	r0, #1
 80013ca:	1a40      	subs	r0, r0, r1
 80013cc:	2838      	cmp	r0, #56	; 0x38
 80013ce:	dd00      	ble.n	80013d2 <__aeabi_dmul+0x3ce>
 80013d0:	e676      	b.n	80010c0 <__aeabi_dmul+0xbc>
 80013d2:	281f      	cmp	r0, #31
 80013d4:	dd5b      	ble.n	800148e <__aeabi_dmul+0x48a>
 80013d6:	221f      	movs	r2, #31
 80013d8:	0023      	movs	r3, r4
 80013da:	4252      	negs	r2, r2
 80013dc:	1a51      	subs	r1, r2, r1
 80013de:	40cb      	lsrs	r3, r1
 80013e0:	0019      	movs	r1, r3
 80013e2:	2820      	cmp	r0, #32
 80013e4:	d003      	beq.n	80013ee <__aeabi_dmul+0x3ea>
 80013e6:	4a3b      	ldr	r2, [pc, #236]	; (80014d4 <__aeabi_dmul+0x4d0>)
 80013e8:	4462      	add	r2, ip
 80013ea:	4094      	lsls	r4, r2
 80013ec:	4325      	orrs	r5, r4
 80013ee:	1e6a      	subs	r2, r5, #1
 80013f0:	4195      	sbcs	r5, r2
 80013f2:	002a      	movs	r2, r5
 80013f4:	430a      	orrs	r2, r1
 80013f6:	2107      	movs	r1, #7
 80013f8:	000d      	movs	r5, r1
 80013fa:	2400      	movs	r4, #0
 80013fc:	4015      	ands	r5, r2
 80013fe:	4211      	tst	r1, r2
 8001400:	d05b      	beq.n	80014ba <__aeabi_dmul+0x4b6>
 8001402:	210f      	movs	r1, #15
 8001404:	2400      	movs	r4, #0
 8001406:	4011      	ands	r1, r2
 8001408:	2904      	cmp	r1, #4
 800140a:	d053      	beq.n	80014b4 <__aeabi_dmul+0x4b0>
 800140c:	1d11      	adds	r1, r2, #4
 800140e:	4291      	cmp	r1, r2
 8001410:	4192      	sbcs	r2, r2
 8001412:	4252      	negs	r2, r2
 8001414:	18a4      	adds	r4, r4, r2
 8001416:	000a      	movs	r2, r1
 8001418:	0223      	lsls	r3, r4, #8
 800141a:	d54b      	bpl.n	80014b4 <__aeabi_dmul+0x4b0>
 800141c:	2201      	movs	r2, #1
 800141e:	2400      	movs	r4, #0
 8001420:	2500      	movs	r5, #0
 8001422:	e650      	b.n	80010c6 <__aeabi_dmul+0xc2>
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	031b      	lsls	r3, r3, #12
 8001428:	421c      	tst	r4, r3
 800142a:	d009      	beq.n	8001440 <__aeabi_dmul+0x43c>
 800142c:	421e      	tst	r6, r3
 800142e:	d107      	bne.n	8001440 <__aeabi_dmul+0x43c>
 8001430:	4333      	orrs	r3, r6
 8001432:	031c      	lsls	r4, r3, #12
 8001434:	4643      	mov	r3, r8
 8001436:	0015      	movs	r5, r2
 8001438:	0b24      	lsrs	r4, r4, #12
 800143a:	4a25      	ldr	r2, [pc, #148]	; (80014d0 <__aeabi_dmul+0x4cc>)
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	e642      	b.n	80010c6 <__aeabi_dmul+0xc2>
 8001440:	2280      	movs	r2, #128	; 0x80
 8001442:	0312      	lsls	r2, r2, #12
 8001444:	4314      	orrs	r4, r2
 8001446:	0324      	lsls	r4, r4, #12
 8001448:	4a21      	ldr	r2, [pc, #132]	; (80014d0 <__aeabi_dmul+0x4cc>)
 800144a:	0b24      	lsrs	r4, r4, #12
 800144c:	9701      	str	r7, [sp, #4]
 800144e:	e63a      	b.n	80010c6 <__aeabi_dmul+0xc2>
 8001450:	f000 fccc 	bl	8001dec <__clzsi2>
 8001454:	0001      	movs	r1, r0
 8001456:	0002      	movs	r2, r0
 8001458:	3115      	adds	r1, #21
 800145a:	3220      	adds	r2, #32
 800145c:	291c      	cmp	r1, #28
 800145e:	dc00      	bgt.n	8001462 <__aeabi_dmul+0x45e>
 8001460:	e74b      	b.n	80012fa <__aeabi_dmul+0x2f6>
 8001462:	0034      	movs	r4, r6
 8001464:	3808      	subs	r0, #8
 8001466:	2500      	movs	r5, #0
 8001468:	4084      	lsls	r4, r0
 800146a:	e750      	b.n	800130e <__aeabi_dmul+0x30a>
 800146c:	f000 fcbe 	bl	8001dec <__clzsi2>
 8001470:	0003      	movs	r3, r0
 8001472:	001a      	movs	r2, r3
 8001474:	3215      	adds	r2, #21
 8001476:	3020      	adds	r0, #32
 8001478:	2a1c      	cmp	r2, #28
 800147a:	dc00      	bgt.n	800147e <__aeabi_dmul+0x47a>
 800147c:	e71e      	b.n	80012bc <__aeabi_dmul+0x2b8>
 800147e:	4656      	mov	r6, sl
 8001480:	3b08      	subs	r3, #8
 8001482:	2200      	movs	r2, #0
 8001484:	409e      	lsls	r6, r3
 8001486:	e723      	b.n	80012d0 <__aeabi_dmul+0x2cc>
 8001488:	9b00      	ldr	r3, [sp, #0]
 800148a:	469c      	mov	ip, r3
 800148c:	e6e6      	b.n	800125c <__aeabi_dmul+0x258>
 800148e:	4912      	ldr	r1, [pc, #72]	; (80014d8 <__aeabi_dmul+0x4d4>)
 8001490:	0022      	movs	r2, r4
 8001492:	4461      	add	r1, ip
 8001494:	002e      	movs	r6, r5
 8001496:	408d      	lsls	r5, r1
 8001498:	408a      	lsls	r2, r1
 800149a:	40c6      	lsrs	r6, r0
 800149c:	1e69      	subs	r1, r5, #1
 800149e:	418d      	sbcs	r5, r1
 80014a0:	4332      	orrs	r2, r6
 80014a2:	432a      	orrs	r2, r5
 80014a4:	40c4      	lsrs	r4, r0
 80014a6:	0753      	lsls	r3, r2, #29
 80014a8:	d0b6      	beq.n	8001418 <__aeabi_dmul+0x414>
 80014aa:	210f      	movs	r1, #15
 80014ac:	4011      	ands	r1, r2
 80014ae:	2904      	cmp	r1, #4
 80014b0:	d1ac      	bne.n	800140c <__aeabi_dmul+0x408>
 80014b2:	e7b1      	b.n	8001418 <__aeabi_dmul+0x414>
 80014b4:	0765      	lsls	r5, r4, #29
 80014b6:	0264      	lsls	r4, r4, #9
 80014b8:	0b24      	lsrs	r4, r4, #12
 80014ba:	08d2      	lsrs	r2, r2, #3
 80014bc:	4315      	orrs	r5, r2
 80014be:	2200      	movs	r2, #0
 80014c0:	e601      	b.n	80010c6 <__aeabi_dmul+0xc2>
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	0312      	lsls	r2, r2, #12
 80014c6:	4314      	orrs	r4, r2
 80014c8:	0324      	lsls	r4, r4, #12
 80014ca:	4a01      	ldr	r2, [pc, #4]	; (80014d0 <__aeabi_dmul+0x4cc>)
 80014cc:	0b24      	lsrs	r4, r4, #12
 80014ce:	e5fa      	b.n	80010c6 <__aeabi_dmul+0xc2>
 80014d0:	000007ff 	.word	0x000007ff
 80014d4:	0000043e 	.word	0x0000043e
 80014d8:	0000041e 	.word	0x0000041e

080014dc <__aeabi_dsub>:
 80014dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014de:	4657      	mov	r7, sl
 80014e0:	464e      	mov	r6, r9
 80014e2:	4645      	mov	r5, r8
 80014e4:	46de      	mov	lr, fp
 80014e6:	b5e0      	push	{r5, r6, r7, lr}
 80014e8:	001e      	movs	r6, r3
 80014ea:	0017      	movs	r7, r2
 80014ec:	004a      	lsls	r2, r1, #1
 80014ee:	030b      	lsls	r3, r1, #12
 80014f0:	0d52      	lsrs	r2, r2, #21
 80014f2:	0a5b      	lsrs	r3, r3, #9
 80014f4:	4690      	mov	r8, r2
 80014f6:	0f42      	lsrs	r2, r0, #29
 80014f8:	431a      	orrs	r2, r3
 80014fa:	0fcd      	lsrs	r5, r1, #31
 80014fc:	4ccd      	ldr	r4, [pc, #820]	; (8001834 <__aeabi_dsub+0x358>)
 80014fe:	0331      	lsls	r1, r6, #12
 8001500:	00c3      	lsls	r3, r0, #3
 8001502:	4694      	mov	ip, r2
 8001504:	0070      	lsls	r0, r6, #1
 8001506:	0f7a      	lsrs	r2, r7, #29
 8001508:	0a49      	lsrs	r1, r1, #9
 800150a:	00ff      	lsls	r7, r7, #3
 800150c:	469a      	mov	sl, r3
 800150e:	46b9      	mov	r9, r7
 8001510:	0d40      	lsrs	r0, r0, #21
 8001512:	0ff6      	lsrs	r6, r6, #31
 8001514:	4311      	orrs	r1, r2
 8001516:	42a0      	cmp	r0, r4
 8001518:	d100      	bne.n	800151c <__aeabi_dsub+0x40>
 800151a:	e0b1      	b.n	8001680 <__aeabi_dsub+0x1a4>
 800151c:	2201      	movs	r2, #1
 800151e:	4056      	eors	r6, r2
 8001520:	46b3      	mov	fp, r6
 8001522:	42b5      	cmp	r5, r6
 8001524:	d100      	bne.n	8001528 <__aeabi_dsub+0x4c>
 8001526:	e088      	b.n	800163a <__aeabi_dsub+0x15e>
 8001528:	4642      	mov	r2, r8
 800152a:	1a12      	subs	r2, r2, r0
 800152c:	2a00      	cmp	r2, #0
 800152e:	dc00      	bgt.n	8001532 <__aeabi_dsub+0x56>
 8001530:	e0ae      	b.n	8001690 <__aeabi_dsub+0x1b4>
 8001532:	2800      	cmp	r0, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_dsub+0x5c>
 8001536:	e0c1      	b.n	80016bc <__aeabi_dsub+0x1e0>
 8001538:	48be      	ldr	r0, [pc, #760]	; (8001834 <__aeabi_dsub+0x358>)
 800153a:	4580      	cmp	r8, r0
 800153c:	d100      	bne.n	8001540 <__aeabi_dsub+0x64>
 800153e:	e151      	b.n	80017e4 <__aeabi_dsub+0x308>
 8001540:	2080      	movs	r0, #128	; 0x80
 8001542:	0400      	lsls	r0, r0, #16
 8001544:	4301      	orrs	r1, r0
 8001546:	2a38      	cmp	r2, #56	; 0x38
 8001548:	dd00      	ble.n	800154c <__aeabi_dsub+0x70>
 800154a:	e17b      	b.n	8001844 <__aeabi_dsub+0x368>
 800154c:	2a1f      	cmp	r2, #31
 800154e:	dd00      	ble.n	8001552 <__aeabi_dsub+0x76>
 8001550:	e1ee      	b.n	8001930 <__aeabi_dsub+0x454>
 8001552:	2020      	movs	r0, #32
 8001554:	003e      	movs	r6, r7
 8001556:	1a80      	subs	r0, r0, r2
 8001558:	000c      	movs	r4, r1
 800155a:	40d6      	lsrs	r6, r2
 800155c:	40d1      	lsrs	r1, r2
 800155e:	4087      	lsls	r7, r0
 8001560:	4662      	mov	r2, ip
 8001562:	4084      	lsls	r4, r0
 8001564:	1a52      	subs	r2, r2, r1
 8001566:	1e78      	subs	r0, r7, #1
 8001568:	4187      	sbcs	r7, r0
 800156a:	4694      	mov	ip, r2
 800156c:	4334      	orrs	r4, r6
 800156e:	4327      	orrs	r7, r4
 8001570:	1bdc      	subs	r4, r3, r7
 8001572:	42a3      	cmp	r3, r4
 8001574:	419b      	sbcs	r3, r3
 8001576:	4662      	mov	r2, ip
 8001578:	425b      	negs	r3, r3
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	4699      	mov	r9, r3
 800157e:	464b      	mov	r3, r9
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	d400      	bmi.n	8001586 <__aeabi_dsub+0xaa>
 8001584:	e118      	b.n	80017b8 <__aeabi_dsub+0x2dc>
 8001586:	464b      	mov	r3, r9
 8001588:	0258      	lsls	r0, r3, #9
 800158a:	0a43      	lsrs	r3, r0, #9
 800158c:	4699      	mov	r9, r3
 800158e:	464b      	mov	r3, r9
 8001590:	2b00      	cmp	r3, #0
 8001592:	d100      	bne.n	8001596 <__aeabi_dsub+0xba>
 8001594:	e137      	b.n	8001806 <__aeabi_dsub+0x32a>
 8001596:	4648      	mov	r0, r9
 8001598:	f000 fc28 	bl	8001dec <__clzsi2>
 800159c:	0001      	movs	r1, r0
 800159e:	3908      	subs	r1, #8
 80015a0:	2320      	movs	r3, #32
 80015a2:	0022      	movs	r2, r4
 80015a4:	4648      	mov	r0, r9
 80015a6:	1a5b      	subs	r3, r3, r1
 80015a8:	40da      	lsrs	r2, r3
 80015aa:	4088      	lsls	r0, r1
 80015ac:	408c      	lsls	r4, r1
 80015ae:	4643      	mov	r3, r8
 80015b0:	4310      	orrs	r0, r2
 80015b2:	4588      	cmp	r8, r1
 80015b4:	dd00      	ble.n	80015b8 <__aeabi_dsub+0xdc>
 80015b6:	e136      	b.n	8001826 <__aeabi_dsub+0x34a>
 80015b8:	1ac9      	subs	r1, r1, r3
 80015ba:	1c4b      	adds	r3, r1, #1
 80015bc:	2b1f      	cmp	r3, #31
 80015be:	dd00      	ble.n	80015c2 <__aeabi_dsub+0xe6>
 80015c0:	e0ea      	b.n	8001798 <__aeabi_dsub+0x2bc>
 80015c2:	2220      	movs	r2, #32
 80015c4:	0026      	movs	r6, r4
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	0001      	movs	r1, r0
 80015ca:	4094      	lsls	r4, r2
 80015cc:	40de      	lsrs	r6, r3
 80015ce:	40d8      	lsrs	r0, r3
 80015d0:	2300      	movs	r3, #0
 80015d2:	4091      	lsls	r1, r2
 80015d4:	1e62      	subs	r2, r4, #1
 80015d6:	4194      	sbcs	r4, r2
 80015d8:	4681      	mov	r9, r0
 80015da:	4698      	mov	r8, r3
 80015dc:	4331      	orrs	r1, r6
 80015de:	430c      	orrs	r4, r1
 80015e0:	0763      	lsls	r3, r4, #29
 80015e2:	d009      	beq.n	80015f8 <__aeabi_dsub+0x11c>
 80015e4:	230f      	movs	r3, #15
 80015e6:	4023      	ands	r3, r4
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d005      	beq.n	80015f8 <__aeabi_dsub+0x11c>
 80015ec:	1d23      	adds	r3, r4, #4
 80015ee:	42a3      	cmp	r3, r4
 80015f0:	41a4      	sbcs	r4, r4
 80015f2:	4264      	negs	r4, r4
 80015f4:	44a1      	add	r9, r4
 80015f6:	001c      	movs	r4, r3
 80015f8:	464b      	mov	r3, r9
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	d400      	bmi.n	8001600 <__aeabi_dsub+0x124>
 80015fe:	e0de      	b.n	80017be <__aeabi_dsub+0x2e2>
 8001600:	4641      	mov	r1, r8
 8001602:	4b8c      	ldr	r3, [pc, #560]	; (8001834 <__aeabi_dsub+0x358>)
 8001604:	3101      	adds	r1, #1
 8001606:	4299      	cmp	r1, r3
 8001608:	d100      	bne.n	800160c <__aeabi_dsub+0x130>
 800160a:	e0e7      	b.n	80017dc <__aeabi_dsub+0x300>
 800160c:	464b      	mov	r3, r9
 800160e:	488a      	ldr	r0, [pc, #552]	; (8001838 <__aeabi_dsub+0x35c>)
 8001610:	08e4      	lsrs	r4, r4, #3
 8001612:	4003      	ands	r3, r0
 8001614:	0018      	movs	r0, r3
 8001616:	0549      	lsls	r1, r1, #21
 8001618:	075b      	lsls	r3, r3, #29
 800161a:	0240      	lsls	r0, r0, #9
 800161c:	4323      	orrs	r3, r4
 800161e:	0d4a      	lsrs	r2, r1, #21
 8001620:	0b04      	lsrs	r4, r0, #12
 8001622:	0512      	lsls	r2, r2, #20
 8001624:	07ed      	lsls	r5, r5, #31
 8001626:	4322      	orrs	r2, r4
 8001628:	432a      	orrs	r2, r5
 800162a:	0018      	movs	r0, r3
 800162c:	0011      	movs	r1, r2
 800162e:	bcf0      	pop	{r4, r5, r6, r7}
 8001630:	46bb      	mov	fp, r7
 8001632:	46b2      	mov	sl, r6
 8001634:	46a9      	mov	r9, r5
 8001636:	46a0      	mov	r8, r4
 8001638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800163a:	4642      	mov	r2, r8
 800163c:	1a12      	subs	r2, r2, r0
 800163e:	2a00      	cmp	r2, #0
 8001640:	dd52      	ble.n	80016e8 <__aeabi_dsub+0x20c>
 8001642:	2800      	cmp	r0, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dsub+0x16c>
 8001646:	e09c      	b.n	8001782 <__aeabi_dsub+0x2a6>
 8001648:	45a0      	cmp	r8, r4
 800164a:	d100      	bne.n	800164e <__aeabi_dsub+0x172>
 800164c:	e0ca      	b.n	80017e4 <__aeabi_dsub+0x308>
 800164e:	2080      	movs	r0, #128	; 0x80
 8001650:	0400      	lsls	r0, r0, #16
 8001652:	4301      	orrs	r1, r0
 8001654:	2a38      	cmp	r2, #56	; 0x38
 8001656:	dd00      	ble.n	800165a <__aeabi_dsub+0x17e>
 8001658:	e149      	b.n	80018ee <__aeabi_dsub+0x412>
 800165a:	2a1f      	cmp	r2, #31
 800165c:	dc00      	bgt.n	8001660 <__aeabi_dsub+0x184>
 800165e:	e197      	b.n	8001990 <__aeabi_dsub+0x4b4>
 8001660:	0010      	movs	r0, r2
 8001662:	000e      	movs	r6, r1
 8001664:	3820      	subs	r0, #32
 8001666:	40c6      	lsrs	r6, r0
 8001668:	2a20      	cmp	r2, #32
 800166a:	d004      	beq.n	8001676 <__aeabi_dsub+0x19a>
 800166c:	2040      	movs	r0, #64	; 0x40
 800166e:	1a82      	subs	r2, r0, r2
 8001670:	4091      	lsls	r1, r2
 8001672:	430f      	orrs	r7, r1
 8001674:	46b9      	mov	r9, r7
 8001676:	464c      	mov	r4, r9
 8001678:	1e62      	subs	r2, r4, #1
 800167a:	4194      	sbcs	r4, r2
 800167c:	4334      	orrs	r4, r6
 800167e:	e13a      	b.n	80018f6 <__aeabi_dsub+0x41a>
 8001680:	000a      	movs	r2, r1
 8001682:	433a      	orrs	r2, r7
 8001684:	d028      	beq.n	80016d8 <__aeabi_dsub+0x1fc>
 8001686:	46b3      	mov	fp, r6
 8001688:	42b5      	cmp	r5, r6
 800168a:	d02b      	beq.n	80016e4 <__aeabi_dsub+0x208>
 800168c:	4a6b      	ldr	r2, [pc, #428]	; (800183c <__aeabi_dsub+0x360>)
 800168e:	4442      	add	r2, r8
 8001690:	2a00      	cmp	r2, #0
 8001692:	d05d      	beq.n	8001750 <__aeabi_dsub+0x274>
 8001694:	4642      	mov	r2, r8
 8001696:	4644      	mov	r4, r8
 8001698:	1a82      	subs	r2, r0, r2
 800169a:	2c00      	cmp	r4, #0
 800169c:	d000      	beq.n	80016a0 <__aeabi_dsub+0x1c4>
 800169e:	e0f5      	b.n	800188c <__aeabi_dsub+0x3b0>
 80016a0:	4665      	mov	r5, ip
 80016a2:	431d      	orrs	r5, r3
 80016a4:	d100      	bne.n	80016a8 <__aeabi_dsub+0x1cc>
 80016a6:	e19c      	b.n	80019e2 <__aeabi_dsub+0x506>
 80016a8:	1e55      	subs	r5, r2, #1
 80016aa:	2a01      	cmp	r2, #1
 80016ac:	d100      	bne.n	80016b0 <__aeabi_dsub+0x1d4>
 80016ae:	e1fb      	b.n	8001aa8 <__aeabi_dsub+0x5cc>
 80016b0:	4c60      	ldr	r4, [pc, #384]	; (8001834 <__aeabi_dsub+0x358>)
 80016b2:	42a2      	cmp	r2, r4
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dsub+0x1dc>
 80016b6:	e1bd      	b.n	8001a34 <__aeabi_dsub+0x558>
 80016b8:	002a      	movs	r2, r5
 80016ba:	e0f0      	b.n	800189e <__aeabi_dsub+0x3c2>
 80016bc:	0008      	movs	r0, r1
 80016be:	4338      	orrs	r0, r7
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dsub+0x1e8>
 80016c2:	e0c3      	b.n	800184c <__aeabi_dsub+0x370>
 80016c4:	1e50      	subs	r0, r2, #1
 80016c6:	2a01      	cmp	r2, #1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dsub+0x1f0>
 80016ca:	e1a8      	b.n	8001a1e <__aeabi_dsub+0x542>
 80016cc:	4c59      	ldr	r4, [pc, #356]	; (8001834 <__aeabi_dsub+0x358>)
 80016ce:	42a2      	cmp	r2, r4
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dsub+0x1f8>
 80016d2:	e087      	b.n	80017e4 <__aeabi_dsub+0x308>
 80016d4:	0002      	movs	r2, r0
 80016d6:	e736      	b.n	8001546 <__aeabi_dsub+0x6a>
 80016d8:	2201      	movs	r2, #1
 80016da:	4056      	eors	r6, r2
 80016dc:	46b3      	mov	fp, r6
 80016de:	42b5      	cmp	r5, r6
 80016e0:	d000      	beq.n	80016e4 <__aeabi_dsub+0x208>
 80016e2:	e721      	b.n	8001528 <__aeabi_dsub+0x4c>
 80016e4:	4a55      	ldr	r2, [pc, #340]	; (800183c <__aeabi_dsub+0x360>)
 80016e6:	4442      	add	r2, r8
 80016e8:	2a00      	cmp	r2, #0
 80016ea:	d100      	bne.n	80016ee <__aeabi_dsub+0x212>
 80016ec:	e0b5      	b.n	800185a <__aeabi_dsub+0x37e>
 80016ee:	4642      	mov	r2, r8
 80016f0:	4644      	mov	r4, r8
 80016f2:	1a82      	subs	r2, r0, r2
 80016f4:	2c00      	cmp	r4, #0
 80016f6:	d100      	bne.n	80016fa <__aeabi_dsub+0x21e>
 80016f8:	e138      	b.n	800196c <__aeabi_dsub+0x490>
 80016fa:	4e4e      	ldr	r6, [pc, #312]	; (8001834 <__aeabi_dsub+0x358>)
 80016fc:	42b0      	cmp	r0, r6
 80016fe:	d100      	bne.n	8001702 <__aeabi_dsub+0x226>
 8001700:	e1de      	b.n	8001ac0 <__aeabi_dsub+0x5e4>
 8001702:	2680      	movs	r6, #128	; 0x80
 8001704:	4664      	mov	r4, ip
 8001706:	0436      	lsls	r6, r6, #16
 8001708:	4334      	orrs	r4, r6
 800170a:	46a4      	mov	ip, r4
 800170c:	2a38      	cmp	r2, #56	; 0x38
 800170e:	dd00      	ble.n	8001712 <__aeabi_dsub+0x236>
 8001710:	e196      	b.n	8001a40 <__aeabi_dsub+0x564>
 8001712:	2a1f      	cmp	r2, #31
 8001714:	dd00      	ble.n	8001718 <__aeabi_dsub+0x23c>
 8001716:	e224      	b.n	8001b62 <__aeabi_dsub+0x686>
 8001718:	2620      	movs	r6, #32
 800171a:	1ab4      	subs	r4, r6, r2
 800171c:	46a2      	mov	sl, r4
 800171e:	4664      	mov	r4, ip
 8001720:	4656      	mov	r6, sl
 8001722:	40b4      	lsls	r4, r6
 8001724:	46a1      	mov	r9, r4
 8001726:	001c      	movs	r4, r3
 8001728:	464e      	mov	r6, r9
 800172a:	40d4      	lsrs	r4, r2
 800172c:	4326      	orrs	r6, r4
 800172e:	0034      	movs	r4, r6
 8001730:	4656      	mov	r6, sl
 8001732:	40b3      	lsls	r3, r6
 8001734:	1e5e      	subs	r6, r3, #1
 8001736:	41b3      	sbcs	r3, r6
 8001738:	431c      	orrs	r4, r3
 800173a:	4663      	mov	r3, ip
 800173c:	40d3      	lsrs	r3, r2
 800173e:	18c9      	adds	r1, r1, r3
 8001740:	19e4      	adds	r4, r4, r7
 8001742:	42bc      	cmp	r4, r7
 8001744:	41bf      	sbcs	r7, r7
 8001746:	427f      	negs	r7, r7
 8001748:	46b9      	mov	r9, r7
 800174a:	4680      	mov	r8, r0
 800174c:	4489      	add	r9, r1
 800174e:	e0d8      	b.n	8001902 <__aeabi_dsub+0x426>
 8001750:	4640      	mov	r0, r8
 8001752:	4c3b      	ldr	r4, [pc, #236]	; (8001840 <__aeabi_dsub+0x364>)
 8001754:	3001      	adds	r0, #1
 8001756:	4220      	tst	r0, r4
 8001758:	d000      	beq.n	800175c <__aeabi_dsub+0x280>
 800175a:	e0b4      	b.n	80018c6 <__aeabi_dsub+0x3ea>
 800175c:	4640      	mov	r0, r8
 800175e:	2800      	cmp	r0, #0
 8001760:	d000      	beq.n	8001764 <__aeabi_dsub+0x288>
 8001762:	e144      	b.n	80019ee <__aeabi_dsub+0x512>
 8001764:	4660      	mov	r0, ip
 8001766:	4318      	orrs	r0, r3
 8001768:	d100      	bne.n	800176c <__aeabi_dsub+0x290>
 800176a:	e190      	b.n	8001a8e <__aeabi_dsub+0x5b2>
 800176c:	0008      	movs	r0, r1
 800176e:	4338      	orrs	r0, r7
 8001770:	d000      	beq.n	8001774 <__aeabi_dsub+0x298>
 8001772:	e1aa      	b.n	8001aca <__aeabi_dsub+0x5ee>
 8001774:	4661      	mov	r1, ip
 8001776:	08db      	lsrs	r3, r3, #3
 8001778:	0749      	lsls	r1, r1, #29
 800177a:	430b      	orrs	r3, r1
 800177c:	4661      	mov	r1, ip
 800177e:	08cc      	lsrs	r4, r1, #3
 8001780:	e027      	b.n	80017d2 <__aeabi_dsub+0x2f6>
 8001782:	0008      	movs	r0, r1
 8001784:	4338      	orrs	r0, r7
 8001786:	d061      	beq.n	800184c <__aeabi_dsub+0x370>
 8001788:	1e50      	subs	r0, r2, #1
 800178a:	2a01      	cmp	r2, #1
 800178c:	d100      	bne.n	8001790 <__aeabi_dsub+0x2b4>
 800178e:	e139      	b.n	8001a04 <__aeabi_dsub+0x528>
 8001790:	42a2      	cmp	r2, r4
 8001792:	d027      	beq.n	80017e4 <__aeabi_dsub+0x308>
 8001794:	0002      	movs	r2, r0
 8001796:	e75d      	b.n	8001654 <__aeabi_dsub+0x178>
 8001798:	0002      	movs	r2, r0
 800179a:	391f      	subs	r1, #31
 800179c:	40ca      	lsrs	r2, r1
 800179e:	0011      	movs	r1, r2
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d003      	beq.n	80017ac <__aeabi_dsub+0x2d0>
 80017a4:	2240      	movs	r2, #64	; 0x40
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	4098      	lsls	r0, r3
 80017aa:	4304      	orrs	r4, r0
 80017ac:	1e63      	subs	r3, r4, #1
 80017ae:	419c      	sbcs	r4, r3
 80017b0:	2300      	movs	r3, #0
 80017b2:	4699      	mov	r9, r3
 80017b4:	4698      	mov	r8, r3
 80017b6:	430c      	orrs	r4, r1
 80017b8:	0763      	lsls	r3, r4, #29
 80017ba:	d000      	beq.n	80017be <__aeabi_dsub+0x2e2>
 80017bc:	e712      	b.n	80015e4 <__aeabi_dsub+0x108>
 80017be:	464b      	mov	r3, r9
 80017c0:	464a      	mov	r2, r9
 80017c2:	08e4      	lsrs	r4, r4, #3
 80017c4:	075b      	lsls	r3, r3, #29
 80017c6:	4323      	orrs	r3, r4
 80017c8:	08d4      	lsrs	r4, r2, #3
 80017ca:	4642      	mov	r2, r8
 80017cc:	4919      	ldr	r1, [pc, #100]	; (8001834 <__aeabi_dsub+0x358>)
 80017ce:	428a      	cmp	r2, r1
 80017d0:	d00e      	beq.n	80017f0 <__aeabi_dsub+0x314>
 80017d2:	0324      	lsls	r4, r4, #12
 80017d4:	0552      	lsls	r2, r2, #21
 80017d6:	0b24      	lsrs	r4, r4, #12
 80017d8:	0d52      	lsrs	r2, r2, #21
 80017da:	e722      	b.n	8001622 <__aeabi_dsub+0x146>
 80017dc:	000a      	movs	r2, r1
 80017de:	2400      	movs	r4, #0
 80017e0:	2300      	movs	r3, #0
 80017e2:	e71e      	b.n	8001622 <__aeabi_dsub+0x146>
 80017e4:	08db      	lsrs	r3, r3, #3
 80017e6:	4662      	mov	r2, ip
 80017e8:	0752      	lsls	r2, r2, #29
 80017ea:	4313      	orrs	r3, r2
 80017ec:	4662      	mov	r2, ip
 80017ee:	08d4      	lsrs	r4, r2, #3
 80017f0:	001a      	movs	r2, r3
 80017f2:	4322      	orrs	r2, r4
 80017f4:	d100      	bne.n	80017f8 <__aeabi_dsub+0x31c>
 80017f6:	e1fc      	b.n	8001bf2 <__aeabi_dsub+0x716>
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	0312      	lsls	r2, r2, #12
 80017fc:	4314      	orrs	r4, r2
 80017fe:	0324      	lsls	r4, r4, #12
 8001800:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <__aeabi_dsub+0x358>)
 8001802:	0b24      	lsrs	r4, r4, #12
 8001804:	e70d      	b.n	8001622 <__aeabi_dsub+0x146>
 8001806:	0020      	movs	r0, r4
 8001808:	f000 faf0 	bl	8001dec <__clzsi2>
 800180c:	0001      	movs	r1, r0
 800180e:	3118      	adds	r1, #24
 8001810:	291f      	cmp	r1, #31
 8001812:	dc00      	bgt.n	8001816 <__aeabi_dsub+0x33a>
 8001814:	e6c4      	b.n	80015a0 <__aeabi_dsub+0xc4>
 8001816:	3808      	subs	r0, #8
 8001818:	4084      	lsls	r4, r0
 800181a:	4643      	mov	r3, r8
 800181c:	0020      	movs	r0, r4
 800181e:	2400      	movs	r4, #0
 8001820:	4588      	cmp	r8, r1
 8001822:	dc00      	bgt.n	8001826 <__aeabi_dsub+0x34a>
 8001824:	e6c8      	b.n	80015b8 <__aeabi_dsub+0xdc>
 8001826:	4a04      	ldr	r2, [pc, #16]	; (8001838 <__aeabi_dsub+0x35c>)
 8001828:	1a5b      	subs	r3, r3, r1
 800182a:	4010      	ands	r0, r2
 800182c:	4698      	mov	r8, r3
 800182e:	4681      	mov	r9, r0
 8001830:	e6d6      	b.n	80015e0 <__aeabi_dsub+0x104>
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	000007ff 	.word	0x000007ff
 8001838:	ff7fffff 	.word	0xff7fffff
 800183c:	fffff801 	.word	0xfffff801
 8001840:	000007fe 	.word	0x000007fe
 8001844:	430f      	orrs	r7, r1
 8001846:	1e7a      	subs	r2, r7, #1
 8001848:	4197      	sbcs	r7, r2
 800184a:	e691      	b.n	8001570 <__aeabi_dsub+0x94>
 800184c:	4661      	mov	r1, ip
 800184e:	08db      	lsrs	r3, r3, #3
 8001850:	0749      	lsls	r1, r1, #29
 8001852:	430b      	orrs	r3, r1
 8001854:	4661      	mov	r1, ip
 8001856:	08cc      	lsrs	r4, r1, #3
 8001858:	e7b8      	b.n	80017cc <__aeabi_dsub+0x2f0>
 800185a:	4640      	mov	r0, r8
 800185c:	4cd3      	ldr	r4, [pc, #844]	; (8001bac <__aeabi_dsub+0x6d0>)
 800185e:	3001      	adds	r0, #1
 8001860:	4220      	tst	r0, r4
 8001862:	d000      	beq.n	8001866 <__aeabi_dsub+0x38a>
 8001864:	e0a2      	b.n	80019ac <__aeabi_dsub+0x4d0>
 8001866:	4640      	mov	r0, r8
 8001868:	2800      	cmp	r0, #0
 800186a:	d000      	beq.n	800186e <__aeabi_dsub+0x392>
 800186c:	e101      	b.n	8001a72 <__aeabi_dsub+0x596>
 800186e:	4660      	mov	r0, ip
 8001870:	4318      	orrs	r0, r3
 8001872:	d100      	bne.n	8001876 <__aeabi_dsub+0x39a>
 8001874:	e15e      	b.n	8001b34 <__aeabi_dsub+0x658>
 8001876:	0008      	movs	r0, r1
 8001878:	4338      	orrs	r0, r7
 800187a:	d000      	beq.n	800187e <__aeabi_dsub+0x3a2>
 800187c:	e15f      	b.n	8001b3e <__aeabi_dsub+0x662>
 800187e:	4661      	mov	r1, ip
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	0749      	lsls	r1, r1, #29
 8001884:	430b      	orrs	r3, r1
 8001886:	4661      	mov	r1, ip
 8001888:	08cc      	lsrs	r4, r1, #3
 800188a:	e7a2      	b.n	80017d2 <__aeabi_dsub+0x2f6>
 800188c:	4dc8      	ldr	r5, [pc, #800]	; (8001bb0 <__aeabi_dsub+0x6d4>)
 800188e:	42a8      	cmp	r0, r5
 8001890:	d100      	bne.n	8001894 <__aeabi_dsub+0x3b8>
 8001892:	e0cf      	b.n	8001a34 <__aeabi_dsub+0x558>
 8001894:	2580      	movs	r5, #128	; 0x80
 8001896:	4664      	mov	r4, ip
 8001898:	042d      	lsls	r5, r5, #16
 800189a:	432c      	orrs	r4, r5
 800189c:	46a4      	mov	ip, r4
 800189e:	2a38      	cmp	r2, #56	; 0x38
 80018a0:	dc56      	bgt.n	8001950 <__aeabi_dsub+0x474>
 80018a2:	2a1f      	cmp	r2, #31
 80018a4:	dd00      	ble.n	80018a8 <__aeabi_dsub+0x3cc>
 80018a6:	e0d1      	b.n	8001a4c <__aeabi_dsub+0x570>
 80018a8:	2520      	movs	r5, #32
 80018aa:	001e      	movs	r6, r3
 80018ac:	1aad      	subs	r5, r5, r2
 80018ae:	4664      	mov	r4, ip
 80018b0:	40ab      	lsls	r3, r5
 80018b2:	40ac      	lsls	r4, r5
 80018b4:	40d6      	lsrs	r6, r2
 80018b6:	1e5d      	subs	r5, r3, #1
 80018b8:	41ab      	sbcs	r3, r5
 80018ba:	4334      	orrs	r4, r6
 80018bc:	4323      	orrs	r3, r4
 80018be:	4664      	mov	r4, ip
 80018c0:	40d4      	lsrs	r4, r2
 80018c2:	1b09      	subs	r1, r1, r4
 80018c4:	e049      	b.n	800195a <__aeabi_dsub+0x47e>
 80018c6:	4660      	mov	r0, ip
 80018c8:	1bdc      	subs	r4, r3, r7
 80018ca:	1a46      	subs	r6, r0, r1
 80018cc:	42a3      	cmp	r3, r4
 80018ce:	4180      	sbcs	r0, r0
 80018d0:	4240      	negs	r0, r0
 80018d2:	4681      	mov	r9, r0
 80018d4:	0030      	movs	r0, r6
 80018d6:	464e      	mov	r6, r9
 80018d8:	1b80      	subs	r0, r0, r6
 80018da:	4681      	mov	r9, r0
 80018dc:	0200      	lsls	r0, r0, #8
 80018de:	d476      	bmi.n	80019ce <__aeabi_dsub+0x4f2>
 80018e0:	464b      	mov	r3, r9
 80018e2:	4323      	orrs	r3, r4
 80018e4:	d000      	beq.n	80018e8 <__aeabi_dsub+0x40c>
 80018e6:	e652      	b.n	800158e <__aeabi_dsub+0xb2>
 80018e8:	2400      	movs	r4, #0
 80018ea:	2500      	movs	r5, #0
 80018ec:	e771      	b.n	80017d2 <__aeabi_dsub+0x2f6>
 80018ee:	4339      	orrs	r1, r7
 80018f0:	000c      	movs	r4, r1
 80018f2:	1e62      	subs	r2, r4, #1
 80018f4:	4194      	sbcs	r4, r2
 80018f6:	18e4      	adds	r4, r4, r3
 80018f8:	429c      	cmp	r4, r3
 80018fa:	419b      	sbcs	r3, r3
 80018fc:	425b      	negs	r3, r3
 80018fe:	4463      	add	r3, ip
 8001900:	4699      	mov	r9, r3
 8001902:	464b      	mov	r3, r9
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	d400      	bmi.n	800190a <__aeabi_dsub+0x42e>
 8001908:	e756      	b.n	80017b8 <__aeabi_dsub+0x2dc>
 800190a:	2301      	movs	r3, #1
 800190c:	469c      	mov	ip, r3
 800190e:	4ba8      	ldr	r3, [pc, #672]	; (8001bb0 <__aeabi_dsub+0x6d4>)
 8001910:	44e0      	add	r8, ip
 8001912:	4598      	cmp	r8, r3
 8001914:	d038      	beq.n	8001988 <__aeabi_dsub+0x4ac>
 8001916:	464b      	mov	r3, r9
 8001918:	48a6      	ldr	r0, [pc, #664]	; (8001bb4 <__aeabi_dsub+0x6d8>)
 800191a:	2201      	movs	r2, #1
 800191c:	4003      	ands	r3, r0
 800191e:	0018      	movs	r0, r3
 8001920:	0863      	lsrs	r3, r4, #1
 8001922:	4014      	ands	r4, r2
 8001924:	431c      	orrs	r4, r3
 8001926:	07c3      	lsls	r3, r0, #31
 8001928:	431c      	orrs	r4, r3
 800192a:	0843      	lsrs	r3, r0, #1
 800192c:	4699      	mov	r9, r3
 800192e:	e657      	b.n	80015e0 <__aeabi_dsub+0x104>
 8001930:	0010      	movs	r0, r2
 8001932:	000e      	movs	r6, r1
 8001934:	3820      	subs	r0, #32
 8001936:	40c6      	lsrs	r6, r0
 8001938:	2a20      	cmp	r2, #32
 800193a:	d004      	beq.n	8001946 <__aeabi_dsub+0x46a>
 800193c:	2040      	movs	r0, #64	; 0x40
 800193e:	1a82      	subs	r2, r0, r2
 8001940:	4091      	lsls	r1, r2
 8001942:	430f      	orrs	r7, r1
 8001944:	46b9      	mov	r9, r7
 8001946:	464f      	mov	r7, r9
 8001948:	1e7a      	subs	r2, r7, #1
 800194a:	4197      	sbcs	r7, r2
 800194c:	4337      	orrs	r7, r6
 800194e:	e60f      	b.n	8001570 <__aeabi_dsub+0x94>
 8001950:	4662      	mov	r2, ip
 8001952:	431a      	orrs	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	1e5a      	subs	r2, r3, #1
 8001958:	4193      	sbcs	r3, r2
 800195a:	1afc      	subs	r4, r7, r3
 800195c:	42a7      	cmp	r7, r4
 800195e:	41bf      	sbcs	r7, r7
 8001960:	427f      	negs	r7, r7
 8001962:	1bcb      	subs	r3, r1, r7
 8001964:	4699      	mov	r9, r3
 8001966:	465d      	mov	r5, fp
 8001968:	4680      	mov	r8, r0
 800196a:	e608      	b.n	800157e <__aeabi_dsub+0xa2>
 800196c:	4666      	mov	r6, ip
 800196e:	431e      	orrs	r6, r3
 8001970:	d100      	bne.n	8001974 <__aeabi_dsub+0x498>
 8001972:	e0be      	b.n	8001af2 <__aeabi_dsub+0x616>
 8001974:	1e56      	subs	r6, r2, #1
 8001976:	2a01      	cmp	r2, #1
 8001978:	d100      	bne.n	800197c <__aeabi_dsub+0x4a0>
 800197a:	e109      	b.n	8001b90 <__aeabi_dsub+0x6b4>
 800197c:	4c8c      	ldr	r4, [pc, #560]	; (8001bb0 <__aeabi_dsub+0x6d4>)
 800197e:	42a2      	cmp	r2, r4
 8001980:	d100      	bne.n	8001984 <__aeabi_dsub+0x4a8>
 8001982:	e119      	b.n	8001bb8 <__aeabi_dsub+0x6dc>
 8001984:	0032      	movs	r2, r6
 8001986:	e6c1      	b.n	800170c <__aeabi_dsub+0x230>
 8001988:	4642      	mov	r2, r8
 800198a:	2400      	movs	r4, #0
 800198c:	2300      	movs	r3, #0
 800198e:	e648      	b.n	8001622 <__aeabi_dsub+0x146>
 8001990:	2020      	movs	r0, #32
 8001992:	000c      	movs	r4, r1
 8001994:	1a80      	subs	r0, r0, r2
 8001996:	003e      	movs	r6, r7
 8001998:	4087      	lsls	r7, r0
 800199a:	4084      	lsls	r4, r0
 800199c:	40d6      	lsrs	r6, r2
 800199e:	1e78      	subs	r0, r7, #1
 80019a0:	4187      	sbcs	r7, r0
 80019a2:	40d1      	lsrs	r1, r2
 80019a4:	4334      	orrs	r4, r6
 80019a6:	433c      	orrs	r4, r7
 80019a8:	448c      	add	ip, r1
 80019aa:	e7a4      	b.n	80018f6 <__aeabi_dsub+0x41a>
 80019ac:	4a80      	ldr	r2, [pc, #512]	; (8001bb0 <__aeabi_dsub+0x6d4>)
 80019ae:	4290      	cmp	r0, r2
 80019b0:	d100      	bne.n	80019b4 <__aeabi_dsub+0x4d8>
 80019b2:	e0e9      	b.n	8001b88 <__aeabi_dsub+0x6ac>
 80019b4:	19df      	adds	r7, r3, r7
 80019b6:	429f      	cmp	r7, r3
 80019b8:	419b      	sbcs	r3, r3
 80019ba:	4461      	add	r1, ip
 80019bc:	425b      	negs	r3, r3
 80019be:	18c9      	adds	r1, r1, r3
 80019c0:	07cc      	lsls	r4, r1, #31
 80019c2:	087f      	lsrs	r7, r7, #1
 80019c4:	084b      	lsrs	r3, r1, #1
 80019c6:	4699      	mov	r9, r3
 80019c8:	4680      	mov	r8, r0
 80019ca:	433c      	orrs	r4, r7
 80019cc:	e6f4      	b.n	80017b8 <__aeabi_dsub+0x2dc>
 80019ce:	1afc      	subs	r4, r7, r3
 80019d0:	42a7      	cmp	r7, r4
 80019d2:	41bf      	sbcs	r7, r7
 80019d4:	4663      	mov	r3, ip
 80019d6:	427f      	negs	r7, r7
 80019d8:	1ac9      	subs	r1, r1, r3
 80019da:	1bcb      	subs	r3, r1, r7
 80019dc:	4699      	mov	r9, r3
 80019de:	465d      	mov	r5, fp
 80019e0:	e5d5      	b.n	800158e <__aeabi_dsub+0xb2>
 80019e2:	08ff      	lsrs	r7, r7, #3
 80019e4:	074b      	lsls	r3, r1, #29
 80019e6:	465d      	mov	r5, fp
 80019e8:	433b      	orrs	r3, r7
 80019ea:	08cc      	lsrs	r4, r1, #3
 80019ec:	e6ee      	b.n	80017cc <__aeabi_dsub+0x2f0>
 80019ee:	4662      	mov	r2, ip
 80019f0:	431a      	orrs	r2, r3
 80019f2:	d000      	beq.n	80019f6 <__aeabi_dsub+0x51a>
 80019f4:	e082      	b.n	8001afc <__aeabi_dsub+0x620>
 80019f6:	000b      	movs	r3, r1
 80019f8:	433b      	orrs	r3, r7
 80019fa:	d11b      	bne.n	8001a34 <__aeabi_dsub+0x558>
 80019fc:	2480      	movs	r4, #128	; 0x80
 80019fe:	2500      	movs	r5, #0
 8001a00:	0324      	lsls	r4, r4, #12
 8001a02:	e6f9      	b.n	80017f8 <__aeabi_dsub+0x31c>
 8001a04:	19dc      	adds	r4, r3, r7
 8001a06:	429c      	cmp	r4, r3
 8001a08:	419b      	sbcs	r3, r3
 8001a0a:	4461      	add	r1, ip
 8001a0c:	4689      	mov	r9, r1
 8001a0e:	425b      	negs	r3, r3
 8001a10:	4499      	add	r9, r3
 8001a12:	464b      	mov	r3, r9
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	d444      	bmi.n	8001aa2 <__aeabi_dsub+0x5c6>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	4698      	mov	r8, r3
 8001a1c:	e6cc      	b.n	80017b8 <__aeabi_dsub+0x2dc>
 8001a1e:	1bdc      	subs	r4, r3, r7
 8001a20:	4662      	mov	r2, ip
 8001a22:	42a3      	cmp	r3, r4
 8001a24:	419b      	sbcs	r3, r3
 8001a26:	1a51      	subs	r1, r2, r1
 8001a28:	425b      	negs	r3, r3
 8001a2a:	1acb      	subs	r3, r1, r3
 8001a2c:	4699      	mov	r9, r3
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4698      	mov	r8, r3
 8001a32:	e5a4      	b.n	800157e <__aeabi_dsub+0xa2>
 8001a34:	08ff      	lsrs	r7, r7, #3
 8001a36:	074b      	lsls	r3, r1, #29
 8001a38:	465d      	mov	r5, fp
 8001a3a:	433b      	orrs	r3, r7
 8001a3c:	08cc      	lsrs	r4, r1, #3
 8001a3e:	e6d7      	b.n	80017f0 <__aeabi_dsub+0x314>
 8001a40:	4662      	mov	r2, ip
 8001a42:	431a      	orrs	r2, r3
 8001a44:	0014      	movs	r4, r2
 8001a46:	1e63      	subs	r3, r4, #1
 8001a48:	419c      	sbcs	r4, r3
 8001a4a:	e679      	b.n	8001740 <__aeabi_dsub+0x264>
 8001a4c:	0015      	movs	r5, r2
 8001a4e:	4664      	mov	r4, ip
 8001a50:	3d20      	subs	r5, #32
 8001a52:	40ec      	lsrs	r4, r5
 8001a54:	46a0      	mov	r8, r4
 8001a56:	2a20      	cmp	r2, #32
 8001a58:	d005      	beq.n	8001a66 <__aeabi_dsub+0x58a>
 8001a5a:	2540      	movs	r5, #64	; 0x40
 8001a5c:	4664      	mov	r4, ip
 8001a5e:	1aaa      	subs	r2, r5, r2
 8001a60:	4094      	lsls	r4, r2
 8001a62:	4323      	orrs	r3, r4
 8001a64:	469a      	mov	sl, r3
 8001a66:	4654      	mov	r4, sl
 8001a68:	1e63      	subs	r3, r4, #1
 8001a6a:	419c      	sbcs	r4, r3
 8001a6c:	4643      	mov	r3, r8
 8001a6e:	4323      	orrs	r3, r4
 8001a70:	e773      	b.n	800195a <__aeabi_dsub+0x47e>
 8001a72:	4662      	mov	r2, ip
 8001a74:	431a      	orrs	r2, r3
 8001a76:	d023      	beq.n	8001ac0 <__aeabi_dsub+0x5e4>
 8001a78:	000a      	movs	r2, r1
 8001a7a:	433a      	orrs	r2, r7
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dsub+0x5a4>
 8001a7e:	e0a0      	b.n	8001bc2 <__aeabi_dsub+0x6e6>
 8001a80:	4662      	mov	r2, ip
 8001a82:	08db      	lsrs	r3, r3, #3
 8001a84:	0752      	lsls	r2, r2, #29
 8001a86:	4313      	orrs	r3, r2
 8001a88:	4662      	mov	r2, ip
 8001a8a:	08d4      	lsrs	r4, r2, #3
 8001a8c:	e6b0      	b.n	80017f0 <__aeabi_dsub+0x314>
 8001a8e:	000b      	movs	r3, r1
 8001a90:	433b      	orrs	r3, r7
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dsub+0x5ba>
 8001a94:	e728      	b.n	80018e8 <__aeabi_dsub+0x40c>
 8001a96:	08ff      	lsrs	r7, r7, #3
 8001a98:	074b      	lsls	r3, r1, #29
 8001a9a:	465d      	mov	r5, fp
 8001a9c:	433b      	orrs	r3, r7
 8001a9e:	08cc      	lsrs	r4, r1, #3
 8001aa0:	e697      	b.n	80017d2 <__aeabi_dsub+0x2f6>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	4698      	mov	r8, r3
 8001aa6:	e736      	b.n	8001916 <__aeabi_dsub+0x43a>
 8001aa8:	1afc      	subs	r4, r7, r3
 8001aaa:	42a7      	cmp	r7, r4
 8001aac:	41bf      	sbcs	r7, r7
 8001aae:	4663      	mov	r3, ip
 8001ab0:	427f      	negs	r7, r7
 8001ab2:	1ac9      	subs	r1, r1, r3
 8001ab4:	1bcb      	subs	r3, r1, r7
 8001ab6:	4699      	mov	r9, r3
 8001ab8:	2301      	movs	r3, #1
 8001aba:	465d      	mov	r5, fp
 8001abc:	4698      	mov	r8, r3
 8001abe:	e55e      	b.n	800157e <__aeabi_dsub+0xa2>
 8001ac0:	074b      	lsls	r3, r1, #29
 8001ac2:	08ff      	lsrs	r7, r7, #3
 8001ac4:	433b      	orrs	r3, r7
 8001ac6:	08cc      	lsrs	r4, r1, #3
 8001ac8:	e692      	b.n	80017f0 <__aeabi_dsub+0x314>
 8001aca:	1bdc      	subs	r4, r3, r7
 8001acc:	4660      	mov	r0, ip
 8001ace:	42a3      	cmp	r3, r4
 8001ad0:	41b6      	sbcs	r6, r6
 8001ad2:	1a40      	subs	r0, r0, r1
 8001ad4:	4276      	negs	r6, r6
 8001ad6:	1b80      	subs	r0, r0, r6
 8001ad8:	4681      	mov	r9, r0
 8001ada:	0200      	lsls	r0, r0, #8
 8001adc:	d560      	bpl.n	8001ba0 <__aeabi_dsub+0x6c4>
 8001ade:	1afc      	subs	r4, r7, r3
 8001ae0:	42a7      	cmp	r7, r4
 8001ae2:	41bf      	sbcs	r7, r7
 8001ae4:	4663      	mov	r3, ip
 8001ae6:	427f      	negs	r7, r7
 8001ae8:	1ac9      	subs	r1, r1, r3
 8001aea:	1bcb      	subs	r3, r1, r7
 8001aec:	4699      	mov	r9, r3
 8001aee:	465d      	mov	r5, fp
 8001af0:	e576      	b.n	80015e0 <__aeabi_dsub+0x104>
 8001af2:	08ff      	lsrs	r7, r7, #3
 8001af4:	074b      	lsls	r3, r1, #29
 8001af6:	433b      	orrs	r3, r7
 8001af8:	08cc      	lsrs	r4, r1, #3
 8001afa:	e667      	b.n	80017cc <__aeabi_dsub+0x2f0>
 8001afc:	000a      	movs	r2, r1
 8001afe:	08db      	lsrs	r3, r3, #3
 8001b00:	433a      	orrs	r2, r7
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x62a>
 8001b04:	e66f      	b.n	80017e6 <__aeabi_dsub+0x30a>
 8001b06:	4662      	mov	r2, ip
 8001b08:	0752      	lsls	r2, r2, #29
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	4662      	mov	r2, ip
 8001b0e:	08d4      	lsrs	r4, r2, #3
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	0312      	lsls	r2, r2, #12
 8001b14:	4214      	tst	r4, r2
 8001b16:	d007      	beq.n	8001b28 <__aeabi_dsub+0x64c>
 8001b18:	08c8      	lsrs	r0, r1, #3
 8001b1a:	4210      	tst	r0, r2
 8001b1c:	d104      	bne.n	8001b28 <__aeabi_dsub+0x64c>
 8001b1e:	465d      	mov	r5, fp
 8001b20:	0004      	movs	r4, r0
 8001b22:	08fb      	lsrs	r3, r7, #3
 8001b24:	0749      	lsls	r1, r1, #29
 8001b26:	430b      	orrs	r3, r1
 8001b28:	0f5a      	lsrs	r2, r3, #29
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	0752      	lsls	r2, r2, #29
 8001b30:	4313      	orrs	r3, r2
 8001b32:	e65d      	b.n	80017f0 <__aeabi_dsub+0x314>
 8001b34:	074b      	lsls	r3, r1, #29
 8001b36:	08ff      	lsrs	r7, r7, #3
 8001b38:	433b      	orrs	r3, r7
 8001b3a:	08cc      	lsrs	r4, r1, #3
 8001b3c:	e649      	b.n	80017d2 <__aeabi_dsub+0x2f6>
 8001b3e:	19dc      	adds	r4, r3, r7
 8001b40:	429c      	cmp	r4, r3
 8001b42:	419b      	sbcs	r3, r3
 8001b44:	4461      	add	r1, ip
 8001b46:	4689      	mov	r9, r1
 8001b48:	425b      	negs	r3, r3
 8001b4a:	4499      	add	r9, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	d400      	bmi.n	8001b54 <__aeabi_dsub+0x678>
 8001b52:	e631      	b.n	80017b8 <__aeabi_dsub+0x2dc>
 8001b54:	464a      	mov	r2, r9
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <__aeabi_dsub+0x6d8>)
 8001b58:	401a      	ands	r2, r3
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	4691      	mov	r9, r2
 8001b5e:	4698      	mov	r8, r3
 8001b60:	e62a      	b.n	80017b8 <__aeabi_dsub+0x2dc>
 8001b62:	0016      	movs	r6, r2
 8001b64:	4664      	mov	r4, ip
 8001b66:	3e20      	subs	r6, #32
 8001b68:	40f4      	lsrs	r4, r6
 8001b6a:	46a0      	mov	r8, r4
 8001b6c:	2a20      	cmp	r2, #32
 8001b6e:	d005      	beq.n	8001b7c <__aeabi_dsub+0x6a0>
 8001b70:	2640      	movs	r6, #64	; 0x40
 8001b72:	4664      	mov	r4, ip
 8001b74:	1ab2      	subs	r2, r6, r2
 8001b76:	4094      	lsls	r4, r2
 8001b78:	4323      	orrs	r3, r4
 8001b7a:	469a      	mov	sl, r3
 8001b7c:	4654      	mov	r4, sl
 8001b7e:	1e63      	subs	r3, r4, #1
 8001b80:	419c      	sbcs	r4, r3
 8001b82:	4643      	mov	r3, r8
 8001b84:	431c      	orrs	r4, r3
 8001b86:	e5db      	b.n	8001740 <__aeabi_dsub+0x264>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	2400      	movs	r4, #0
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e548      	b.n	8001622 <__aeabi_dsub+0x146>
 8001b90:	19dc      	adds	r4, r3, r7
 8001b92:	42bc      	cmp	r4, r7
 8001b94:	41bf      	sbcs	r7, r7
 8001b96:	4461      	add	r1, ip
 8001b98:	4689      	mov	r9, r1
 8001b9a:	427f      	negs	r7, r7
 8001b9c:	44b9      	add	r9, r7
 8001b9e:	e738      	b.n	8001a12 <__aeabi_dsub+0x536>
 8001ba0:	464b      	mov	r3, r9
 8001ba2:	4323      	orrs	r3, r4
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x6cc>
 8001ba6:	e69f      	b.n	80018e8 <__aeabi_dsub+0x40c>
 8001ba8:	e606      	b.n	80017b8 <__aeabi_dsub+0x2dc>
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	000007fe 	.word	0x000007fe
 8001bb0:	000007ff 	.word	0x000007ff
 8001bb4:	ff7fffff 	.word	0xff7fffff
 8001bb8:	08ff      	lsrs	r7, r7, #3
 8001bba:	074b      	lsls	r3, r1, #29
 8001bbc:	433b      	orrs	r3, r7
 8001bbe:	08cc      	lsrs	r4, r1, #3
 8001bc0:	e616      	b.n	80017f0 <__aeabi_dsub+0x314>
 8001bc2:	4662      	mov	r2, ip
 8001bc4:	08db      	lsrs	r3, r3, #3
 8001bc6:	0752      	lsls	r2, r2, #29
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	4662      	mov	r2, ip
 8001bcc:	08d4      	lsrs	r4, r2, #3
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	0312      	lsls	r2, r2, #12
 8001bd2:	4214      	tst	r4, r2
 8001bd4:	d007      	beq.n	8001be6 <__aeabi_dsub+0x70a>
 8001bd6:	08c8      	lsrs	r0, r1, #3
 8001bd8:	4210      	tst	r0, r2
 8001bda:	d104      	bne.n	8001be6 <__aeabi_dsub+0x70a>
 8001bdc:	465d      	mov	r5, fp
 8001bde:	0004      	movs	r4, r0
 8001be0:	08fb      	lsrs	r3, r7, #3
 8001be2:	0749      	lsls	r1, r1, #29
 8001be4:	430b      	orrs	r3, r1
 8001be6:	0f5a      	lsrs	r2, r3, #29
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	0752      	lsls	r2, r2, #29
 8001bec:	08db      	lsrs	r3, r3, #3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	e5fe      	b.n	80017f0 <__aeabi_dsub+0x314>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	4a01      	ldr	r2, [pc, #4]	; (8001bfc <__aeabi_dsub+0x720>)
 8001bf6:	001c      	movs	r4, r3
 8001bf8:	e513      	b.n	8001622 <__aeabi_dsub+0x146>
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	000007ff 	.word	0x000007ff

08001c00 <__aeabi_d2iz>:
 8001c00:	000a      	movs	r2, r1
 8001c02:	b530      	push	{r4, r5, lr}
 8001c04:	4c13      	ldr	r4, [pc, #76]	; (8001c54 <__aeabi_d2iz+0x54>)
 8001c06:	0053      	lsls	r3, r2, #1
 8001c08:	0309      	lsls	r1, r1, #12
 8001c0a:	0005      	movs	r5, r0
 8001c0c:	0b09      	lsrs	r1, r1, #12
 8001c0e:	2000      	movs	r0, #0
 8001c10:	0d5b      	lsrs	r3, r3, #21
 8001c12:	0fd2      	lsrs	r2, r2, #31
 8001c14:	42a3      	cmp	r3, r4
 8001c16:	dd04      	ble.n	8001c22 <__aeabi_d2iz+0x22>
 8001c18:	480f      	ldr	r0, [pc, #60]	; (8001c58 <__aeabi_d2iz+0x58>)
 8001c1a:	4283      	cmp	r3, r0
 8001c1c:	dd02      	ble.n	8001c24 <__aeabi_d2iz+0x24>
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <__aeabi_d2iz+0x5c>)
 8001c20:	18d0      	adds	r0, r2, r3
 8001c22:	bd30      	pop	{r4, r5, pc}
 8001c24:	2080      	movs	r0, #128	; 0x80
 8001c26:	0340      	lsls	r0, r0, #13
 8001c28:	4301      	orrs	r1, r0
 8001c2a:	480d      	ldr	r0, [pc, #52]	; (8001c60 <__aeabi_d2iz+0x60>)
 8001c2c:	1ac0      	subs	r0, r0, r3
 8001c2e:	281f      	cmp	r0, #31
 8001c30:	dd08      	ble.n	8001c44 <__aeabi_d2iz+0x44>
 8001c32:	480c      	ldr	r0, [pc, #48]	; (8001c64 <__aeabi_d2iz+0x64>)
 8001c34:	1ac3      	subs	r3, r0, r3
 8001c36:	40d9      	lsrs	r1, r3
 8001c38:	000b      	movs	r3, r1
 8001c3a:	4258      	negs	r0, r3
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d1f0      	bne.n	8001c22 <__aeabi_d2iz+0x22>
 8001c40:	0018      	movs	r0, r3
 8001c42:	e7ee      	b.n	8001c22 <__aeabi_d2iz+0x22>
 8001c44:	4c08      	ldr	r4, [pc, #32]	; (8001c68 <__aeabi_d2iz+0x68>)
 8001c46:	40c5      	lsrs	r5, r0
 8001c48:	46a4      	mov	ip, r4
 8001c4a:	4463      	add	r3, ip
 8001c4c:	4099      	lsls	r1, r3
 8001c4e:	000b      	movs	r3, r1
 8001c50:	432b      	orrs	r3, r5
 8001c52:	e7f2      	b.n	8001c3a <__aeabi_d2iz+0x3a>
 8001c54:	000003fe 	.word	0x000003fe
 8001c58:	0000041d 	.word	0x0000041d
 8001c5c:	7fffffff 	.word	0x7fffffff
 8001c60:	00000433 	.word	0x00000433
 8001c64:	00000413 	.word	0x00000413
 8001c68:	fffffbed 	.word	0xfffffbed

08001c6c <__aeabi_f2d>:
 8001c6c:	b570      	push	{r4, r5, r6, lr}
 8001c6e:	0043      	lsls	r3, r0, #1
 8001c70:	0246      	lsls	r6, r0, #9
 8001c72:	0fc4      	lsrs	r4, r0, #31
 8001c74:	20fe      	movs	r0, #254	; 0xfe
 8001c76:	0e1b      	lsrs	r3, r3, #24
 8001c78:	1c59      	adds	r1, r3, #1
 8001c7a:	0a75      	lsrs	r5, r6, #9
 8001c7c:	4208      	tst	r0, r1
 8001c7e:	d00c      	beq.n	8001c9a <__aeabi_f2d+0x2e>
 8001c80:	22e0      	movs	r2, #224	; 0xe0
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4694      	mov	ip, r2
 8001c86:	076d      	lsls	r5, r5, #29
 8001c88:	0b36      	lsrs	r6, r6, #12
 8001c8a:	4463      	add	r3, ip
 8001c8c:	051b      	lsls	r3, r3, #20
 8001c8e:	4333      	orrs	r3, r6
 8001c90:	07e4      	lsls	r4, r4, #31
 8001c92:	4323      	orrs	r3, r4
 8001c94:	0028      	movs	r0, r5
 8001c96:	0019      	movs	r1, r3
 8001c98:	bd70      	pop	{r4, r5, r6, pc}
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d114      	bne.n	8001cc8 <__aeabi_f2d+0x5c>
 8001c9e:	2d00      	cmp	r5, #0
 8001ca0:	d01b      	beq.n	8001cda <__aeabi_f2d+0x6e>
 8001ca2:	0028      	movs	r0, r5
 8001ca4:	f000 f8a2 	bl	8001dec <__clzsi2>
 8001ca8:	280a      	cmp	r0, #10
 8001caa:	dc1c      	bgt.n	8001ce6 <__aeabi_f2d+0x7a>
 8001cac:	230b      	movs	r3, #11
 8001cae:	002e      	movs	r6, r5
 8001cb0:	1a1b      	subs	r3, r3, r0
 8001cb2:	40de      	lsrs	r6, r3
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	3315      	adds	r3, #21
 8001cb8:	409d      	lsls	r5, r3
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <__aeabi_f2d+0x88>)
 8001cbc:	0336      	lsls	r6, r6, #12
 8001cbe:	1a12      	subs	r2, r2, r0
 8001cc0:	0552      	lsls	r2, r2, #21
 8001cc2:	0b36      	lsrs	r6, r6, #12
 8001cc4:	0d53      	lsrs	r3, r2, #21
 8001cc6:	e7e1      	b.n	8001c8c <__aeabi_f2d+0x20>
 8001cc8:	2d00      	cmp	r5, #0
 8001cca:	d009      	beq.n	8001ce0 <__aeabi_f2d+0x74>
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	0b36      	lsrs	r6, r6, #12
 8001cd0:	0312      	lsls	r2, r2, #12
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <__aeabi_f2d+0x8c>)
 8001cd4:	076d      	lsls	r5, r5, #29
 8001cd6:	4316      	orrs	r6, r2
 8001cd8:	e7d8      	b.n	8001c8c <__aeabi_f2d+0x20>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2600      	movs	r6, #0
 8001cde:	e7d5      	b.n	8001c8c <__aeabi_f2d+0x20>
 8001ce0:	2600      	movs	r6, #0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <__aeabi_f2d+0x8c>)
 8001ce4:	e7d2      	b.n	8001c8c <__aeabi_f2d+0x20>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	3b0b      	subs	r3, #11
 8001cea:	409d      	lsls	r5, r3
 8001cec:	002e      	movs	r6, r5
 8001cee:	2500      	movs	r5, #0
 8001cf0:	e7e3      	b.n	8001cba <__aeabi_f2d+0x4e>
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	00000389 	.word	0x00000389
 8001cf8:	000007ff 	.word	0x000007ff

08001cfc <__aeabi_cdrcmple>:
 8001cfc:	4684      	mov	ip, r0
 8001cfe:	0010      	movs	r0, r2
 8001d00:	4662      	mov	r2, ip
 8001d02:	468c      	mov	ip, r1
 8001d04:	0019      	movs	r1, r3
 8001d06:	4663      	mov	r3, ip
 8001d08:	e000      	b.n	8001d0c <__aeabi_cdcmpeq>
 8001d0a:	46c0      	nop			; (mov r8, r8)

08001d0c <__aeabi_cdcmpeq>:
 8001d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d0e:	f000 f9ef 	bl	80020f0 <__ledf2>
 8001d12:	2800      	cmp	r0, #0
 8001d14:	d401      	bmi.n	8001d1a <__aeabi_cdcmpeq+0xe>
 8001d16:	2100      	movs	r1, #0
 8001d18:	42c8      	cmn	r0, r1
 8001d1a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001d1c <__aeabi_dcmpeq>:
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	f000 f93f 	bl	8001fa0 <__eqdf2>
 8001d22:	4240      	negs	r0, r0
 8001d24:	3001      	adds	r0, #1
 8001d26:	bd10      	pop	{r4, pc}

08001d28 <__aeabi_dcmplt>:
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	f000 f9e1 	bl	80020f0 <__ledf2>
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	db01      	blt.n	8001d36 <__aeabi_dcmplt+0xe>
 8001d32:	2000      	movs	r0, #0
 8001d34:	bd10      	pop	{r4, pc}
 8001d36:	2001      	movs	r0, #1
 8001d38:	bd10      	pop	{r4, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)

08001d3c <__aeabi_dcmple>:
 8001d3c:	b510      	push	{r4, lr}
 8001d3e:	f000 f9d7 	bl	80020f0 <__ledf2>
 8001d42:	2800      	cmp	r0, #0
 8001d44:	dd01      	ble.n	8001d4a <__aeabi_dcmple+0xe>
 8001d46:	2000      	movs	r0, #0
 8001d48:	bd10      	pop	{r4, pc}
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	bd10      	pop	{r4, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)

08001d50 <__aeabi_dcmpgt>:
 8001d50:	b510      	push	{r4, lr}
 8001d52:	f000 f967 	bl	8002024 <__gedf2>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	dc01      	bgt.n	8001d5e <__aeabi_dcmpgt+0xe>
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	bd10      	pop	{r4, pc}
 8001d5e:	2001      	movs	r0, #1
 8001d60:	bd10      	pop	{r4, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)

08001d64 <__aeabi_dcmpge>:
 8001d64:	b510      	push	{r4, lr}
 8001d66:	f000 f95d 	bl	8002024 <__gedf2>
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	da01      	bge.n	8001d72 <__aeabi_dcmpge+0xe>
 8001d6e:	2000      	movs	r0, #0
 8001d70:	bd10      	pop	{r4, pc}
 8001d72:	2001      	movs	r0, #1
 8001d74:	bd10      	pop	{r4, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)

08001d78 <__aeabi_cfrcmple>:
 8001d78:	4684      	mov	ip, r0
 8001d7a:	0008      	movs	r0, r1
 8001d7c:	4661      	mov	r1, ip
 8001d7e:	e7ff      	b.n	8001d80 <__aeabi_cfcmpeq>

08001d80 <__aeabi_cfcmpeq>:
 8001d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d82:	f000 f8c9 	bl	8001f18 <__lesf2>
 8001d86:	2800      	cmp	r0, #0
 8001d88:	d401      	bmi.n	8001d8e <__aeabi_cfcmpeq+0xe>
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	42c8      	cmn	r0, r1
 8001d8e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001d90 <__aeabi_fcmpeq>:
 8001d90:	b510      	push	{r4, lr}
 8001d92:	f000 f855 	bl	8001e40 <__eqsf2>
 8001d96:	4240      	negs	r0, r0
 8001d98:	3001      	adds	r0, #1
 8001d9a:	bd10      	pop	{r4, pc}

08001d9c <__aeabi_fcmplt>:
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	f000 f8bb 	bl	8001f18 <__lesf2>
 8001da2:	2800      	cmp	r0, #0
 8001da4:	db01      	blt.n	8001daa <__aeabi_fcmplt+0xe>
 8001da6:	2000      	movs	r0, #0
 8001da8:	bd10      	pop	{r4, pc}
 8001daa:	2001      	movs	r0, #1
 8001dac:	bd10      	pop	{r4, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)

08001db0 <__aeabi_fcmple>:
 8001db0:	b510      	push	{r4, lr}
 8001db2:	f000 f8b1 	bl	8001f18 <__lesf2>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	dd01      	ble.n	8001dbe <__aeabi_fcmple+0xe>
 8001dba:	2000      	movs	r0, #0
 8001dbc:	bd10      	pop	{r4, pc}
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	bd10      	pop	{r4, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)

08001dc4 <__aeabi_fcmpgt>:
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	f000 f861 	bl	8001e8c <__gesf2>
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	dc01      	bgt.n	8001dd2 <__aeabi_fcmpgt+0xe>
 8001dce:	2000      	movs	r0, #0
 8001dd0:	bd10      	pop	{r4, pc}
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	bd10      	pop	{r4, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)

08001dd8 <__aeabi_fcmpge>:
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	f000 f857 	bl	8001e8c <__gesf2>
 8001dde:	2800      	cmp	r0, #0
 8001de0:	da01      	bge.n	8001de6 <__aeabi_fcmpge+0xe>
 8001de2:	2000      	movs	r0, #0
 8001de4:	bd10      	pop	{r4, pc}
 8001de6:	2001      	movs	r0, #1
 8001de8:	bd10      	pop	{r4, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)

08001dec <__clzsi2>:
 8001dec:	211c      	movs	r1, #28
 8001dee:	2301      	movs	r3, #1
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	4298      	cmp	r0, r3
 8001df4:	d301      	bcc.n	8001dfa <__clzsi2+0xe>
 8001df6:	0c00      	lsrs	r0, r0, #16
 8001df8:	3910      	subs	r1, #16
 8001dfa:	0a1b      	lsrs	r3, r3, #8
 8001dfc:	4298      	cmp	r0, r3
 8001dfe:	d301      	bcc.n	8001e04 <__clzsi2+0x18>
 8001e00:	0a00      	lsrs	r0, r0, #8
 8001e02:	3908      	subs	r1, #8
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	4298      	cmp	r0, r3
 8001e08:	d301      	bcc.n	8001e0e <__clzsi2+0x22>
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	3904      	subs	r1, #4
 8001e0e:	a202      	add	r2, pc, #8	; (adr r2, 8001e18 <__clzsi2+0x2c>)
 8001e10:	5c10      	ldrb	r0, [r2, r0]
 8001e12:	1840      	adds	r0, r0, r1
 8001e14:	4770      	bx	lr
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	02020304 	.word	0x02020304
 8001e1c:	01010101 	.word	0x01010101
	...

08001e28 <__clzdi2>:
 8001e28:	b510      	push	{r4, lr}
 8001e2a:	2900      	cmp	r1, #0
 8001e2c:	d103      	bne.n	8001e36 <__clzdi2+0xe>
 8001e2e:	f7ff ffdd 	bl	8001dec <__clzsi2>
 8001e32:	3020      	adds	r0, #32
 8001e34:	e002      	b.n	8001e3c <__clzdi2+0x14>
 8001e36:	0008      	movs	r0, r1
 8001e38:	f7ff ffd8 	bl	8001dec <__clzsi2>
 8001e3c:	bd10      	pop	{r4, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)

08001e40 <__eqsf2>:
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	0042      	lsls	r2, r0, #1
 8001e44:	0245      	lsls	r5, r0, #9
 8001e46:	024e      	lsls	r6, r1, #9
 8001e48:	004c      	lsls	r4, r1, #1
 8001e4a:	0fc3      	lsrs	r3, r0, #31
 8001e4c:	0a6d      	lsrs	r5, r5, #9
 8001e4e:	2001      	movs	r0, #1
 8001e50:	0e12      	lsrs	r2, r2, #24
 8001e52:	0a76      	lsrs	r6, r6, #9
 8001e54:	0e24      	lsrs	r4, r4, #24
 8001e56:	0fc9      	lsrs	r1, r1, #31
 8001e58:	2aff      	cmp	r2, #255	; 0xff
 8001e5a:	d006      	beq.n	8001e6a <__eqsf2+0x2a>
 8001e5c:	2cff      	cmp	r4, #255	; 0xff
 8001e5e:	d003      	beq.n	8001e68 <__eqsf2+0x28>
 8001e60:	42a2      	cmp	r2, r4
 8001e62:	d101      	bne.n	8001e68 <__eqsf2+0x28>
 8001e64:	42b5      	cmp	r5, r6
 8001e66:	d006      	beq.n	8001e76 <__eqsf2+0x36>
 8001e68:	bd70      	pop	{r4, r5, r6, pc}
 8001e6a:	2d00      	cmp	r5, #0
 8001e6c:	d1fc      	bne.n	8001e68 <__eqsf2+0x28>
 8001e6e:	2cff      	cmp	r4, #255	; 0xff
 8001e70:	d1fa      	bne.n	8001e68 <__eqsf2+0x28>
 8001e72:	2e00      	cmp	r6, #0
 8001e74:	d1f8      	bne.n	8001e68 <__eqsf2+0x28>
 8001e76:	428b      	cmp	r3, r1
 8001e78:	d006      	beq.n	8001e88 <__eqsf2+0x48>
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	2a00      	cmp	r2, #0
 8001e7e:	d1f3      	bne.n	8001e68 <__eqsf2+0x28>
 8001e80:	0028      	movs	r0, r5
 8001e82:	1e43      	subs	r3, r0, #1
 8001e84:	4198      	sbcs	r0, r3
 8001e86:	e7ef      	b.n	8001e68 <__eqsf2+0x28>
 8001e88:	2000      	movs	r0, #0
 8001e8a:	e7ed      	b.n	8001e68 <__eqsf2+0x28>

08001e8c <__gesf2>:
 8001e8c:	b570      	push	{r4, r5, r6, lr}
 8001e8e:	0042      	lsls	r2, r0, #1
 8001e90:	0245      	lsls	r5, r0, #9
 8001e92:	024e      	lsls	r6, r1, #9
 8001e94:	004c      	lsls	r4, r1, #1
 8001e96:	0fc3      	lsrs	r3, r0, #31
 8001e98:	0a6d      	lsrs	r5, r5, #9
 8001e9a:	0e12      	lsrs	r2, r2, #24
 8001e9c:	0a76      	lsrs	r6, r6, #9
 8001e9e:	0e24      	lsrs	r4, r4, #24
 8001ea0:	0fc8      	lsrs	r0, r1, #31
 8001ea2:	2aff      	cmp	r2, #255	; 0xff
 8001ea4:	d01b      	beq.n	8001ede <__gesf2+0x52>
 8001ea6:	2cff      	cmp	r4, #255	; 0xff
 8001ea8:	d00e      	beq.n	8001ec8 <__gesf2+0x3c>
 8001eaa:	2a00      	cmp	r2, #0
 8001eac:	d11b      	bne.n	8001ee6 <__gesf2+0x5a>
 8001eae:	2c00      	cmp	r4, #0
 8001eb0:	d101      	bne.n	8001eb6 <__gesf2+0x2a>
 8001eb2:	2e00      	cmp	r6, #0
 8001eb4:	d01c      	beq.n	8001ef0 <__gesf2+0x64>
 8001eb6:	2d00      	cmp	r5, #0
 8001eb8:	d00c      	beq.n	8001ed4 <__gesf2+0x48>
 8001eba:	4283      	cmp	r3, r0
 8001ebc:	d01c      	beq.n	8001ef8 <__gesf2+0x6c>
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	1e58      	subs	r0, r3, #1
 8001ec2:	4008      	ands	r0, r1
 8001ec4:	3801      	subs	r0, #1
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}
 8001ec8:	2e00      	cmp	r6, #0
 8001eca:	d122      	bne.n	8001f12 <__gesf2+0x86>
 8001ecc:	2a00      	cmp	r2, #0
 8001ece:	d1f4      	bne.n	8001eba <__gesf2+0x2e>
 8001ed0:	2d00      	cmp	r5, #0
 8001ed2:	d1f2      	bne.n	8001eba <__gesf2+0x2e>
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	d1f6      	bne.n	8001ec6 <__gesf2+0x3a>
 8001ed8:	2001      	movs	r0, #1
 8001eda:	4240      	negs	r0, r0
 8001edc:	e7f3      	b.n	8001ec6 <__gesf2+0x3a>
 8001ede:	2d00      	cmp	r5, #0
 8001ee0:	d117      	bne.n	8001f12 <__gesf2+0x86>
 8001ee2:	2cff      	cmp	r4, #255	; 0xff
 8001ee4:	d0f0      	beq.n	8001ec8 <__gesf2+0x3c>
 8001ee6:	2c00      	cmp	r4, #0
 8001ee8:	d1e7      	bne.n	8001eba <__gesf2+0x2e>
 8001eea:	2e00      	cmp	r6, #0
 8001eec:	d1e5      	bne.n	8001eba <__gesf2+0x2e>
 8001eee:	e7e6      	b.n	8001ebe <__gesf2+0x32>
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	2d00      	cmp	r5, #0
 8001ef4:	d0e7      	beq.n	8001ec6 <__gesf2+0x3a>
 8001ef6:	e7e2      	b.n	8001ebe <__gesf2+0x32>
 8001ef8:	42a2      	cmp	r2, r4
 8001efa:	dc05      	bgt.n	8001f08 <__gesf2+0x7c>
 8001efc:	dbea      	blt.n	8001ed4 <__gesf2+0x48>
 8001efe:	42b5      	cmp	r5, r6
 8001f00:	d802      	bhi.n	8001f08 <__gesf2+0x7c>
 8001f02:	d3e7      	bcc.n	8001ed4 <__gesf2+0x48>
 8001f04:	2000      	movs	r0, #0
 8001f06:	e7de      	b.n	8001ec6 <__gesf2+0x3a>
 8001f08:	4243      	negs	r3, r0
 8001f0a:	4158      	adcs	r0, r3
 8001f0c:	0040      	lsls	r0, r0, #1
 8001f0e:	3801      	subs	r0, #1
 8001f10:	e7d9      	b.n	8001ec6 <__gesf2+0x3a>
 8001f12:	2002      	movs	r0, #2
 8001f14:	4240      	negs	r0, r0
 8001f16:	e7d6      	b.n	8001ec6 <__gesf2+0x3a>

08001f18 <__lesf2>:
 8001f18:	b570      	push	{r4, r5, r6, lr}
 8001f1a:	0042      	lsls	r2, r0, #1
 8001f1c:	0245      	lsls	r5, r0, #9
 8001f1e:	024e      	lsls	r6, r1, #9
 8001f20:	004c      	lsls	r4, r1, #1
 8001f22:	0fc3      	lsrs	r3, r0, #31
 8001f24:	0a6d      	lsrs	r5, r5, #9
 8001f26:	0e12      	lsrs	r2, r2, #24
 8001f28:	0a76      	lsrs	r6, r6, #9
 8001f2a:	0e24      	lsrs	r4, r4, #24
 8001f2c:	0fc8      	lsrs	r0, r1, #31
 8001f2e:	2aff      	cmp	r2, #255	; 0xff
 8001f30:	d00b      	beq.n	8001f4a <__lesf2+0x32>
 8001f32:	2cff      	cmp	r4, #255	; 0xff
 8001f34:	d00d      	beq.n	8001f52 <__lesf2+0x3a>
 8001f36:	2a00      	cmp	r2, #0
 8001f38:	d11f      	bne.n	8001f7a <__lesf2+0x62>
 8001f3a:	2c00      	cmp	r4, #0
 8001f3c:	d116      	bne.n	8001f6c <__lesf2+0x54>
 8001f3e:	2e00      	cmp	r6, #0
 8001f40:	d114      	bne.n	8001f6c <__lesf2+0x54>
 8001f42:	2000      	movs	r0, #0
 8001f44:	2d00      	cmp	r5, #0
 8001f46:	d010      	beq.n	8001f6a <__lesf2+0x52>
 8001f48:	e009      	b.n	8001f5e <__lesf2+0x46>
 8001f4a:	2d00      	cmp	r5, #0
 8001f4c:	d10c      	bne.n	8001f68 <__lesf2+0x50>
 8001f4e:	2cff      	cmp	r4, #255	; 0xff
 8001f50:	d113      	bne.n	8001f7a <__lesf2+0x62>
 8001f52:	2e00      	cmp	r6, #0
 8001f54:	d108      	bne.n	8001f68 <__lesf2+0x50>
 8001f56:	2a00      	cmp	r2, #0
 8001f58:	d008      	beq.n	8001f6c <__lesf2+0x54>
 8001f5a:	4283      	cmp	r3, r0
 8001f5c:	d012      	beq.n	8001f84 <__lesf2+0x6c>
 8001f5e:	2102      	movs	r1, #2
 8001f60:	1e58      	subs	r0, r3, #1
 8001f62:	4008      	ands	r0, r1
 8001f64:	3801      	subs	r0, #1
 8001f66:	e000      	b.n	8001f6a <__lesf2+0x52>
 8001f68:	2002      	movs	r0, #2
 8001f6a:	bd70      	pop	{r4, r5, r6, pc}
 8001f6c:	2d00      	cmp	r5, #0
 8001f6e:	d1f4      	bne.n	8001f5a <__lesf2+0x42>
 8001f70:	2800      	cmp	r0, #0
 8001f72:	d1fa      	bne.n	8001f6a <__lesf2+0x52>
 8001f74:	2001      	movs	r0, #1
 8001f76:	4240      	negs	r0, r0
 8001f78:	e7f7      	b.n	8001f6a <__lesf2+0x52>
 8001f7a:	2c00      	cmp	r4, #0
 8001f7c:	d1ed      	bne.n	8001f5a <__lesf2+0x42>
 8001f7e:	2e00      	cmp	r6, #0
 8001f80:	d1eb      	bne.n	8001f5a <__lesf2+0x42>
 8001f82:	e7ec      	b.n	8001f5e <__lesf2+0x46>
 8001f84:	42a2      	cmp	r2, r4
 8001f86:	dc05      	bgt.n	8001f94 <__lesf2+0x7c>
 8001f88:	dbf2      	blt.n	8001f70 <__lesf2+0x58>
 8001f8a:	42b5      	cmp	r5, r6
 8001f8c:	d802      	bhi.n	8001f94 <__lesf2+0x7c>
 8001f8e:	d3ef      	bcc.n	8001f70 <__lesf2+0x58>
 8001f90:	2000      	movs	r0, #0
 8001f92:	e7ea      	b.n	8001f6a <__lesf2+0x52>
 8001f94:	4243      	negs	r3, r0
 8001f96:	4158      	adcs	r0, r3
 8001f98:	0040      	lsls	r0, r0, #1
 8001f9a:	3801      	subs	r0, #1
 8001f9c:	e7e5      	b.n	8001f6a <__lesf2+0x52>
 8001f9e:	46c0      	nop			; (mov r8, r8)

08001fa0 <__eqdf2>:
 8001fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa2:	464e      	mov	r6, r9
 8001fa4:	4645      	mov	r5, r8
 8001fa6:	46de      	mov	lr, fp
 8001fa8:	4657      	mov	r7, sl
 8001faa:	4690      	mov	r8, r2
 8001fac:	b5e0      	push	{r5, r6, r7, lr}
 8001fae:	0017      	movs	r7, r2
 8001fb0:	031a      	lsls	r2, r3, #12
 8001fb2:	0b12      	lsrs	r2, r2, #12
 8001fb4:	0005      	movs	r5, r0
 8001fb6:	4684      	mov	ip, r0
 8001fb8:	4819      	ldr	r0, [pc, #100]	; (8002020 <__eqdf2+0x80>)
 8001fba:	030e      	lsls	r6, r1, #12
 8001fbc:	004c      	lsls	r4, r1, #1
 8001fbe:	4691      	mov	r9, r2
 8001fc0:	005a      	lsls	r2, r3, #1
 8001fc2:	0fdb      	lsrs	r3, r3, #31
 8001fc4:	469b      	mov	fp, r3
 8001fc6:	0b36      	lsrs	r6, r6, #12
 8001fc8:	0d64      	lsrs	r4, r4, #21
 8001fca:	0fc9      	lsrs	r1, r1, #31
 8001fcc:	0d52      	lsrs	r2, r2, #21
 8001fce:	4284      	cmp	r4, r0
 8001fd0:	d019      	beq.n	8002006 <__eqdf2+0x66>
 8001fd2:	4282      	cmp	r2, r0
 8001fd4:	d010      	beq.n	8001ff8 <__eqdf2+0x58>
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	4294      	cmp	r4, r2
 8001fda:	d10e      	bne.n	8001ffa <__eqdf2+0x5a>
 8001fdc:	454e      	cmp	r6, r9
 8001fde:	d10c      	bne.n	8001ffa <__eqdf2+0x5a>
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	45c4      	cmp	ip, r8
 8001fe4:	d109      	bne.n	8001ffa <__eqdf2+0x5a>
 8001fe6:	4559      	cmp	r1, fp
 8001fe8:	d017      	beq.n	800201a <__eqdf2+0x7a>
 8001fea:	2c00      	cmp	r4, #0
 8001fec:	d105      	bne.n	8001ffa <__eqdf2+0x5a>
 8001fee:	0030      	movs	r0, r6
 8001ff0:	4328      	orrs	r0, r5
 8001ff2:	1e43      	subs	r3, r0, #1
 8001ff4:	4198      	sbcs	r0, r3
 8001ff6:	e000      	b.n	8001ffa <__eqdf2+0x5a>
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	bcf0      	pop	{r4, r5, r6, r7}
 8001ffc:	46bb      	mov	fp, r7
 8001ffe:	46b2      	mov	sl, r6
 8002000:	46a9      	mov	r9, r5
 8002002:	46a0      	mov	r8, r4
 8002004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002006:	0033      	movs	r3, r6
 8002008:	2001      	movs	r0, #1
 800200a:	432b      	orrs	r3, r5
 800200c:	d1f5      	bne.n	8001ffa <__eqdf2+0x5a>
 800200e:	42a2      	cmp	r2, r4
 8002010:	d1f3      	bne.n	8001ffa <__eqdf2+0x5a>
 8002012:	464b      	mov	r3, r9
 8002014:	433b      	orrs	r3, r7
 8002016:	d1f0      	bne.n	8001ffa <__eqdf2+0x5a>
 8002018:	e7e2      	b.n	8001fe0 <__eqdf2+0x40>
 800201a:	2000      	movs	r0, #0
 800201c:	e7ed      	b.n	8001ffa <__eqdf2+0x5a>
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	000007ff 	.word	0x000007ff

08002024 <__gedf2>:
 8002024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002026:	4647      	mov	r7, r8
 8002028:	46ce      	mov	lr, r9
 800202a:	0004      	movs	r4, r0
 800202c:	0018      	movs	r0, r3
 800202e:	0016      	movs	r6, r2
 8002030:	031b      	lsls	r3, r3, #12
 8002032:	0b1b      	lsrs	r3, r3, #12
 8002034:	4d2d      	ldr	r5, [pc, #180]	; (80020ec <__gedf2+0xc8>)
 8002036:	004a      	lsls	r2, r1, #1
 8002038:	4699      	mov	r9, r3
 800203a:	b580      	push	{r7, lr}
 800203c:	0043      	lsls	r3, r0, #1
 800203e:	030f      	lsls	r7, r1, #12
 8002040:	46a4      	mov	ip, r4
 8002042:	46b0      	mov	r8, r6
 8002044:	0b3f      	lsrs	r7, r7, #12
 8002046:	0d52      	lsrs	r2, r2, #21
 8002048:	0fc9      	lsrs	r1, r1, #31
 800204a:	0d5b      	lsrs	r3, r3, #21
 800204c:	0fc0      	lsrs	r0, r0, #31
 800204e:	42aa      	cmp	r2, r5
 8002050:	d021      	beq.n	8002096 <__gedf2+0x72>
 8002052:	42ab      	cmp	r3, r5
 8002054:	d013      	beq.n	800207e <__gedf2+0x5a>
 8002056:	2a00      	cmp	r2, #0
 8002058:	d122      	bne.n	80020a0 <__gedf2+0x7c>
 800205a:	433c      	orrs	r4, r7
 800205c:	2b00      	cmp	r3, #0
 800205e:	d102      	bne.n	8002066 <__gedf2+0x42>
 8002060:	464d      	mov	r5, r9
 8002062:	432e      	orrs	r6, r5
 8002064:	d022      	beq.n	80020ac <__gedf2+0x88>
 8002066:	2c00      	cmp	r4, #0
 8002068:	d010      	beq.n	800208c <__gedf2+0x68>
 800206a:	4281      	cmp	r1, r0
 800206c:	d022      	beq.n	80020b4 <__gedf2+0x90>
 800206e:	2002      	movs	r0, #2
 8002070:	3901      	subs	r1, #1
 8002072:	4008      	ands	r0, r1
 8002074:	3801      	subs	r0, #1
 8002076:	bcc0      	pop	{r6, r7}
 8002078:	46b9      	mov	r9, r7
 800207a:	46b0      	mov	r8, r6
 800207c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207e:	464d      	mov	r5, r9
 8002080:	432e      	orrs	r6, r5
 8002082:	d129      	bne.n	80020d8 <__gedf2+0xb4>
 8002084:	2a00      	cmp	r2, #0
 8002086:	d1f0      	bne.n	800206a <__gedf2+0x46>
 8002088:	433c      	orrs	r4, r7
 800208a:	d1ee      	bne.n	800206a <__gedf2+0x46>
 800208c:	2800      	cmp	r0, #0
 800208e:	d1f2      	bne.n	8002076 <__gedf2+0x52>
 8002090:	2001      	movs	r0, #1
 8002092:	4240      	negs	r0, r0
 8002094:	e7ef      	b.n	8002076 <__gedf2+0x52>
 8002096:	003d      	movs	r5, r7
 8002098:	4325      	orrs	r5, r4
 800209a:	d11d      	bne.n	80020d8 <__gedf2+0xb4>
 800209c:	4293      	cmp	r3, r2
 800209e:	d0ee      	beq.n	800207e <__gedf2+0x5a>
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1e2      	bne.n	800206a <__gedf2+0x46>
 80020a4:	464c      	mov	r4, r9
 80020a6:	4326      	orrs	r6, r4
 80020a8:	d1df      	bne.n	800206a <__gedf2+0x46>
 80020aa:	e7e0      	b.n	800206e <__gedf2+0x4a>
 80020ac:	2000      	movs	r0, #0
 80020ae:	2c00      	cmp	r4, #0
 80020b0:	d0e1      	beq.n	8002076 <__gedf2+0x52>
 80020b2:	e7dc      	b.n	800206e <__gedf2+0x4a>
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dc0a      	bgt.n	80020ce <__gedf2+0xaa>
 80020b8:	dbe8      	blt.n	800208c <__gedf2+0x68>
 80020ba:	454f      	cmp	r7, r9
 80020bc:	d8d7      	bhi.n	800206e <__gedf2+0x4a>
 80020be:	d00e      	beq.n	80020de <__gedf2+0xba>
 80020c0:	2000      	movs	r0, #0
 80020c2:	454f      	cmp	r7, r9
 80020c4:	d2d7      	bcs.n	8002076 <__gedf2+0x52>
 80020c6:	2900      	cmp	r1, #0
 80020c8:	d0e2      	beq.n	8002090 <__gedf2+0x6c>
 80020ca:	0008      	movs	r0, r1
 80020cc:	e7d3      	b.n	8002076 <__gedf2+0x52>
 80020ce:	4243      	negs	r3, r0
 80020d0:	4158      	adcs	r0, r3
 80020d2:	0040      	lsls	r0, r0, #1
 80020d4:	3801      	subs	r0, #1
 80020d6:	e7ce      	b.n	8002076 <__gedf2+0x52>
 80020d8:	2002      	movs	r0, #2
 80020da:	4240      	negs	r0, r0
 80020dc:	e7cb      	b.n	8002076 <__gedf2+0x52>
 80020de:	45c4      	cmp	ip, r8
 80020e0:	d8c5      	bhi.n	800206e <__gedf2+0x4a>
 80020e2:	2000      	movs	r0, #0
 80020e4:	45c4      	cmp	ip, r8
 80020e6:	d2c6      	bcs.n	8002076 <__gedf2+0x52>
 80020e8:	e7ed      	b.n	80020c6 <__gedf2+0xa2>
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	000007ff 	.word	0x000007ff

080020f0 <__ledf2>:
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	4647      	mov	r7, r8
 80020f4:	46ce      	mov	lr, r9
 80020f6:	0004      	movs	r4, r0
 80020f8:	0018      	movs	r0, r3
 80020fa:	0016      	movs	r6, r2
 80020fc:	031b      	lsls	r3, r3, #12
 80020fe:	0b1b      	lsrs	r3, r3, #12
 8002100:	4d2c      	ldr	r5, [pc, #176]	; (80021b4 <__ledf2+0xc4>)
 8002102:	004a      	lsls	r2, r1, #1
 8002104:	4699      	mov	r9, r3
 8002106:	b580      	push	{r7, lr}
 8002108:	0043      	lsls	r3, r0, #1
 800210a:	030f      	lsls	r7, r1, #12
 800210c:	46a4      	mov	ip, r4
 800210e:	46b0      	mov	r8, r6
 8002110:	0b3f      	lsrs	r7, r7, #12
 8002112:	0d52      	lsrs	r2, r2, #21
 8002114:	0fc9      	lsrs	r1, r1, #31
 8002116:	0d5b      	lsrs	r3, r3, #21
 8002118:	0fc0      	lsrs	r0, r0, #31
 800211a:	42aa      	cmp	r2, r5
 800211c:	d00d      	beq.n	800213a <__ledf2+0x4a>
 800211e:	42ab      	cmp	r3, r5
 8002120:	d010      	beq.n	8002144 <__ledf2+0x54>
 8002122:	2a00      	cmp	r2, #0
 8002124:	d127      	bne.n	8002176 <__ledf2+0x86>
 8002126:	433c      	orrs	r4, r7
 8002128:	2b00      	cmp	r3, #0
 800212a:	d111      	bne.n	8002150 <__ledf2+0x60>
 800212c:	464d      	mov	r5, r9
 800212e:	432e      	orrs	r6, r5
 8002130:	d10e      	bne.n	8002150 <__ledf2+0x60>
 8002132:	2000      	movs	r0, #0
 8002134:	2c00      	cmp	r4, #0
 8002136:	d015      	beq.n	8002164 <__ledf2+0x74>
 8002138:	e00e      	b.n	8002158 <__ledf2+0x68>
 800213a:	003d      	movs	r5, r7
 800213c:	4325      	orrs	r5, r4
 800213e:	d110      	bne.n	8002162 <__ledf2+0x72>
 8002140:	4293      	cmp	r3, r2
 8002142:	d118      	bne.n	8002176 <__ledf2+0x86>
 8002144:	464d      	mov	r5, r9
 8002146:	432e      	orrs	r6, r5
 8002148:	d10b      	bne.n	8002162 <__ledf2+0x72>
 800214a:	2a00      	cmp	r2, #0
 800214c:	d102      	bne.n	8002154 <__ledf2+0x64>
 800214e:	433c      	orrs	r4, r7
 8002150:	2c00      	cmp	r4, #0
 8002152:	d00b      	beq.n	800216c <__ledf2+0x7c>
 8002154:	4281      	cmp	r1, r0
 8002156:	d014      	beq.n	8002182 <__ledf2+0x92>
 8002158:	2002      	movs	r0, #2
 800215a:	3901      	subs	r1, #1
 800215c:	4008      	ands	r0, r1
 800215e:	3801      	subs	r0, #1
 8002160:	e000      	b.n	8002164 <__ledf2+0x74>
 8002162:	2002      	movs	r0, #2
 8002164:	bcc0      	pop	{r6, r7}
 8002166:	46b9      	mov	r9, r7
 8002168:	46b0      	mov	r8, r6
 800216a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800216c:	2800      	cmp	r0, #0
 800216e:	d1f9      	bne.n	8002164 <__ledf2+0x74>
 8002170:	2001      	movs	r0, #1
 8002172:	4240      	negs	r0, r0
 8002174:	e7f6      	b.n	8002164 <__ledf2+0x74>
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ec      	bne.n	8002154 <__ledf2+0x64>
 800217a:	464c      	mov	r4, r9
 800217c:	4326      	orrs	r6, r4
 800217e:	d1e9      	bne.n	8002154 <__ledf2+0x64>
 8002180:	e7ea      	b.n	8002158 <__ledf2+0x68>
 8002182:	429a      	cmp	r2, r3
 8002184:	dd04      	ble.n	8002190 <__ledf2+0xa0>
 8002186:	4243      	negs	r3, r0
 8002188:	4158      	adcs	r0, r3
 800218a:	0040      	lsls	r0, r0, #1
 800218c:	3801      	subs	r0, #1
 800218e:	e7e9      	b.n	8002164 <__ledf2+0x74>
 8002190:	429a      	cmp	r2, r3
 8002192:	dbeb      	blt.n	800216c <__ledf2+0x7c>
 8002194:	454f      	cmp	r7, r9
 8002196:	d8df      	bhi.n	8002158 <__ledf2+0x68>
 8002198:	d006      	beq.n	80021a8 <__ledf2+0xb8>
 800219a:	2000      	movs	r0, #0
 800219c:	454f      	cmp	r7, r9
 800219e:	d2e1      	bcs.n	8002164 <__ledf2+0x74>
 80021a0:	2900      	cmp	r1, #0
 80021a2:	d0e5      	beq.n	8002170 <__ledf2+0x80>
 80021a4:	0008      	movs	r0, r1
 80021a6:	e7dd      	b.n	8002164 <__ledf2+0x74>
 80021a8:	45c4      	cmp	ip, r8
 80021aa:	d8d5      	bhi.n	8002158 <__ledf2+0x68>
 80021ac:	2000      	movs	r0, #0
 80021ae:	45c4      	cmp	ip, r8
 80021b0:	d2d8      	bcs.n	8002164 <__ledf2+0x74>
 80021b2:	e7f5      	b.n	80021a0 <__ledf2+0xb0>
 80021b4:	000007ff 	.word	0x000007ff

080021b8 <initDrv8830>:
#include "drv8830.h"

extern I2C_HandleTypeDef hi2c1;

uint8_t initDrv8830() {
 80021b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t txData = 0x80;
 80021ba:	2317      	movs	r3, #23
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	446b      	add	r3, sp
 80021c0:	701a      	strb	r2, [r3, #0]
	// clear fault
	return HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &txData, 1, 5);
 80021c2:	3a7b      	subs	r2, #123	; 0x7b
 80021c4:	9202      	str	r2, [sp, #8]
 80021c6:	3a04      	subs	r2, #4
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	21c0      	movs	r1, #192	; 0xc0
 80021cc:	0013      	movs	r3, r2
 80021ce:	9201      	str	r2, [sp, #4]
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <initDrv8830+0x24>)
 80021d2:	f001 fda5 	bl	8003d20 <HAL_I2C_Mem_Write>
}
 80021d6:	b007      	add	sp, #28
 80021d8:	bd00      	pop	{pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	20000198 	.word	0x20000198

080021e0 <setMotor>:
// VSET[7:2] voltage 0x00~0x3F
// D1, D0 direction
uint8_t setMotor(int direction) {
	uint8_t txData;
	uint8_t	result;
	txData = 0x1f << 2 | direction;
 80021e0:	2216      	movs	r2, #22
 80021e2:	237c      	movs	r3, #124	; 0x7c
uint8_t setMotor(int direction) {
 80021e4:	b570      	push	{r4, r5, r6, lr}
	int status;
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 80021e6:	2401      	movs	r4, #1
 80021e8:	2505      	movs	r5, #5
uint8_t setMotor(int direction) {
 80021ea:	b086      	sub	sp, #24
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 80021ec:	4e0d      	ldr	r6, [pc, #52]	; (8002224 <setMotor+0x44>)
	txData = 0x1f << 2 | direction;
 80021ee:	446a      	add	r2, sp
 80021f0:	4303      	orrs	r3, r0
 80021f2:	7013      	strb	r3, [r2, #0]
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 80021f4:	21c0      	movs	r1, #192	; 0xc0
 80021f6:	0023      	movs	r3, r4
 80021f8:	9502      	str	r5, [sp, #8]
 80021fa:	9200      	str	r2, [sp, #0]
 80021fc:	0030      	movs	r0, r6
 80021fe:	2200      	movs	r2, #0
 8002200:	9401      	str	r4, [sp, #4]
 8002202:	f001 fd8d 	bl	8003d20 <HAL_I2C_Mem_Write>
	status = HAL_I2C_Mem_Read(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &result, 1, 5);
 8002206:	9502      	str	r5, [sp, #8]
 8002208:	3512      	adds	r5, #18
 800220a:	446d      	add	r5, sp
 800220c:	0023      	movs	r3, r4
 800220e:	0022      	movs	r2, r4
 8002210:	21c0      	movs	r1, #192	; 0xc0
 8002212:	0030      	movs	r0, r6
 8002214:	9401      	str	r4, [sp, #4]
 8002216:	9500      	str	r5, [sp, #0]
 8002218:	f001 fe60 	bl	8003edc <HAL_I2C_Mem_Read>
	return result;
 800221c:	7828      	ldrb	r0, [r5, #0]
}
 800221e:	b006      	add	sp, #24
 8002220:	bd70      	pop	{r4, r5, r6, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	20000198 	.word	0x20000198

08002228 <initEns160>:
#include "ens160.h"

extern I2C_HandleTypeDef hi2c1;

void initEns160() {
 8002228:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t txData = ENS160_OpMode_Run;
 800222a:	2217      	movs	r2, #23
 800222c:	2302      	movs	r3, #2
 800222e:	446a      	add	r2, sp
 8002230:	7013      	strb	r3, [r2, #0]
	int status = HAL_I2C_Mem_Write(&hi2c1, ENS160_DeviceAddress, ENS160_OpMode, 1, &txData, 1, 10);
 8002232:	3308      	adds	r3, #8
 8002234:	9302      	str	r3, [sp, #8]
 8002236:	3b09      	subs	r3, #9
 8002238:	9200      	str	r2, [sp, #0]
 800223a:	21a4      	movs	r1, #164	; 0xa4
 800223c:	2210      	movs	r2, #16
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <initEns160+0x24>)
 8002242:	f001 fd6d 	bl	8003d20 <HAL_I2C_Mem_Write>
}
 8002246:	b007      	add	sp, #28
 8002248:	bd00      	pop	{pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	20000198 	.word	0x20000198

08002250 <getCO2>:
	txData[0]= writeValue;
	txData[1]= writeValue >> 8;
	int status = HAL_I2C_Mem_Write(&hi2c1, ENS160_DeviceAddress, ENS160_HumidityIn, 1, txData, 2, 10);
}

int	getCO2() {
 8002250:	b530      	push	{r4, r5, lr}
	HAL_I2C_Init(&hi2c1);
 8002252:	4d0a      	ldr	r5, [pc, #40]	; (800227c <getCO2+0x2c>)
int	getCO2() {
 8002254:	b087      	sub	sp, #28
	HAL_I2C_Init(&hi2c1);
 8002256:	0028      	movs	r0, r5
 8002258:	f001 fbe8 	bl	8003a2c <HAL_I2C_Init>
	uint8_t rxData[2];
	int status = HAL_I2C_Mem_Read(&hi2c1, ENS160_DeviceAddress, ENS160_DataECO2, 1, rxData, 2, 10);
 800225c:	230a      	movs	r3, #10
 800225e:	ac05      	add	r4, sp, #20
 8002260:	9302      	str	r3, [sp, #8]
 8002262:	3b08      	subs	r3, #8
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	2224      	movs	r2, #36	; 0x24
 8002268:	21a4      	movs	r1, #164	; 0xa4
 800226a:	0028      	movs	r0, r5
 800226c:	9400      	str	r4, [sp, #0]
 800226e:	3b01      	subs	r3, #1
 8002270:	f001 fe34 	bl	8003edc <HAL_I2C_Mem_Read>
	return rxData[1] << 8 | rxData[0];
 8002274:	8820      	ldrh	r0, [r4, #0]
}
 8002276:	b007      	add	sp, #28
 8002278:	bd30      	pop	{r4, r5, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	20000198 	.word	0x20000198

08002280 <BUZ.part.0>:
	free(*reset_data);
	(*reset_data) = NULL;
}

/* buzzer on or off state setting */
void BUZ(uint8_t state){
 8002280:	b510      	push	{r4, lr}
	if(state == 1) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002282:	2100      	movs	r1, #0
 8002284:	4801      	ldr	r0, [pc, #4]	; (800228c <BUZ.part.0+0xc>)
 8002286:	f002 fcd5 	bl	8004c34 <HAL_TIM_PWM_Start>
	else HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
}
 800228a:	bd10      	pop	{r4, pc}
 800228c:	200001ec 	.word	0x200001ec

08002290 <get_sensor>:
void* get_sensor(ITEM_Typedef* want_data){
 8002290:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(*want_data == temp || *want_data == humidity){
 8002292:	7803      	ldrb	r3, [r0, #0]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d80c      	bhi.n	80022b2 <get_sensor+0x22>
		SHT41_t* buf = (SHT41_t*)malloc(sizeof(SHT41_t));
 8002298:	2008      	movs	r0, #8
 800229a:	f003 f91b 	bl	80054d4 <malloc>
		*buf = getTempSht41();
 800229e:	466d      	mov	r5, sp
		SHT41_t* buf = (SHT41_t*)malloc(sizeof(SHT41_t));
 80022a0:	0004      	movs	r4, r0
		*buf = getTempSht41();
 80022a2:	0028      	movs	r0, r5
 80022a4:	f000 ff6e 	bl	8003184 <getTempSht41>
 80022a8:	0023      	movs	r3, r4
 80022aa:	cd06      	ldmia	r5!, {r1, r2}
 80022ac:	c306      	stmia	r3!, {r1, r2}
}
 80022ae:	0020      	movs	r0, r4
 80022b0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		uint16_t* buf = (uint16_t*)malloc(sizeof(uint16_t));
 80022b2:	2002      	movs	r0, #2
 80022b4:	f003 f90e 	bl	80054d4 <malloc>
 80022b8:	0004      	movs	r4, r0
		*buf = getCO2();
 80022ba:	f7ff ffc9 	bl	8002250 <getCO2>
 80022be:	8020      	strh	r0, [r4, #0]
		return buf;
 80022c0:	e7f5      	b.n	80022ae <get_sensor+0x1e>

080022c2 <free_reset>:
void free_reset(void** reset_data){
 80022c2:	b510      	push	{r4, lr}
 80022c4:	0004      	movs	r4, r0
	free(*reset_data);
 80022c6:	6800      	ldr	r0, [r0, #0]
 80022c8:	f003 f90e 	bl	80054e8 <free>
	(*reset_data) = NULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	6023      	str	r3, [r4, #0]
}
 80022d0:	bd10      	pop	{r4, pc}
	...

080022d4 <BUZ>:
void BUZ(uint8_t state){
 80022d4:	b510      	push	{r4, lr}
	if(state == 1) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80022d6:	2801      	cmp	r0, #1
 80022d8:	d102      	bne.n	80022e0 <BUZ+0xc>
 80022da:	f7ff ffd1 	bl	8002280 <BUZ.part.0>
}
 80022de:	bd10      	pop	{r4, pc}
	else HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80022e0:	2100      	movs	r1, #0
 80022e2:	4802      	ldr	r0, [pc, #8]	; (80022ec <BUZ+0x18>)
 80022e4:	f002 fcaa 	bl	8004c3c <HAL_TIM_PWM_Stop>
}
 80022e8:	e7f9      	b.n	80022de <BUZ+0xa>
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	200001ec 	.word	0x200001ec

080022f0 <BUZ_hz_set>:

/* buzzer frequency set                    */
/* adjusting timer2`s auto reload register */
void BUZ_hz_set(uint16_t* hz){
	uint16_t hz_dat = (*hz * 100) / 10 + 10;
 80022f0:	210a      	movs	r1, #10
 80022f2:	8803      	ldrh	r3, [r0, #0]
void BUZ_hz_set(uint16_t* hz){
 80022f4:	b510      	push	{r4, lr}
	uint16_t hz_dat = (*hz * 100) / 10 + 10;
 80022f6:	3301      	adds	r3, #1
 80022f8:	4359      	muls	r1, r3
	TIM2->ARR  = 1000000 / hz_dat - 1;
 80022fa:	4806      	ldr	r0, [pc, #24]	; (8002314 <BUZ_hz_set+0x24>)
 80022fc:	b289      	uxth	r1, r1
 80022fe:	f7fd ffa9 	bl	8000254 <__divsi3>
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	3801      	subs	r0, #1
 8002306:	05db      	lsls	r3, r3, #23
 8002308:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM2->CCR1 = TIM2->ARR / 2;
 800230a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230c:	0852      	lsrs	r2, r2, #1
 800230e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002310:	bd10      	pop	{r4, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	000f4240 	.word	0x000f4240

08002318 <eeprom_save>:

/* save at eeprom with uint16_t          */
/* uint16_t divide to two uint8_t format */
void eeprom_save(ADDR_Typedef address, uint16_t* data){
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	000d      	movs	r5, r1
 800231c:	0004      	movs	r4, r0
	HAL_FLASHEx_DATAEEPROM_Unlock();
 800231e:	f001 f91b 	bl	8003558 <HAL_FLASHEx_DATAEEPROM_Unlock>
	*(__IO uint8_t*)(DATA_EEPROM_BASE + address) = (uint8_t)(*data);
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <eeprom_save+0x24>)
 8002324:	782a      	ldrb	r2, [r5, #0]
 8002326:	18e3      	adds	r3, r4, r3
 8002328:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t*)(DATA_EEPROM_BASE + address + 1) = (uint8_t)(*data >> 8);
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <eeprom_save+0x28>)
 800232c:	18e4      	adds	r4, r4, r3
 800232e:	882b      	ldrh	r3, [r5, #0]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	7023      	strb	r3, [r4, #0]
	HAL_FLASHEx_DATAEEPROM_Lock();
 8002334:	f001 f928 	bl	8003588 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8002338:	bd70      	pop	{r4, r5, r6, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	08080000 	.word	0x08080000
 8002340:	08080001 	.word	0x08080001

08002344 <eeprom_read>:
/* load uint16_t at eeprom           */
/* divided uint16_t merge and return */
uint16_t eeprom_read(ADDR_Typedef address){
	uint16_t return_dat = 0;
	return_dat |= *(__IO uint8_t*)(DATA_EEPROM_BASE + address);
	return_dat |= *(__IO uint8_t*)(DATA_EEPROM_BASE + address + 1) << 8;
 8002344:	4a04      	ldr	r2, [pc, #16]	; (8002358 <eeprom_read+0x14>)
	return_dat |= *(__IO uint8_t*)(DATA_EEPROM_BASE + address);
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <eeprom_read+0x18>)
 8002348:	18c3      	adds	r3, r0, r3
	return_dat |= *(__IO uint8_t*)(DATA_EEPROM_BASE + address + 1) << 8;
 800234a:	1880      	adds	r0, r0, r2
	return_dat |= *(__IO uint8_t*)(DATA_EEPROM_BASE + address);
 800234c:	781b      	ldrb	r3, [r3, #0]
	return_dat |= *(__IO uint8_t*)(DATA_EEPROM_BASE + address + 1) << 8;
 800234e:	7800      	ldrb	r0, [r0, #0]
 8002350:	0200      	lsls	r0, r0, #8
	return return_dat;
 8002352:	4318      	orrs	r0, r3
}
 8002354:	4770      	bx	lr
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	08080001 	.word	0x08080001
 800235c:	08080000 	.word	0x08080000

08002360 <nextion_inst_set>:

/* Nextion instruction set */
void nextion_inst_set(char* str){
 8002360:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t end_cmd[3] = { 0xFF, 0xFF, 0xFF };
 8002362:	2503      	movs	r5, #3
void nextion_inst_set(char* str){
 8002364:	0004      	movs	r4, r0
	uint8_t end_cmd[3] = { 0xFF, 0xFF, 0xFF };
 8002366:	002a      	movs	r2, r5
 8002368:	490a      	ldr	r1, [pc, #40]	; (8002394 <nextion_inst_set+0x34>)
 800236a:	a801      	add	r0, sp, #4
 800236c:	f003 f8c6 	bl	80054fc <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 10);
 8002370:	0020      	movs	r0, r4
 8002372:	f7fd fec9 	bl	8000108 <strlen>
 8002376:	4e08      	ldr	r6, [pc, #32]	; (8002398 <nextion_inst_set+0x38>)
 8002378:	0021      	movs	r1, r4
 800237a:	b282      	uxth	r2, r0
 800237c:	230a      	movs	r3, #10
 800237e:	0030      	movs	r0, r6
 8002380:	f002 ff01 	bl	8005186 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, end_cmd, 3, 10);
 8002384:	002a      	movs	r2, r5
 8002386:	0030      	movs	r0, r6
 8002388:	230a      	movs	r3, #10
 800238a:	a901      	add	r1, sp, #4
 800238c:	f002 fefb 	bl	8005186 <HAL_UART_Transmit>
}
 8002390:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	08005f08 	.word	0x08005f08
 8002398:	2000022c 	.word	0x2000022c

0800239c <get_touch>:

/* request Nextion LCD current touch coordinate transmit & receive */
void get_touch(POS_Typedef* buf){
 800239c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800239e:	0004      	movs	r4, r0
	uint8_t rx_dat[8];

	nextion_inst_set("get tch0");
 80023a0:	4819      	ldr	r0, [pc, #100]	; (8002408 <get_touch+0x6c>)
 80023a2:	f7ff ffdd 	bl	8002360 <nextion_inst_set>
	HAL_UART_Receive(&huart1, rx_dat, 8, 100);
 80023a6:	4d19      	ldr	r5, [pc, #100]	; (800240c <get_touch+0x70>)
 80023a8:	2364      	movs	r3, #100	; 0x64
 80023aa:	2208      	movs	r2, #8
 80023ac:	4669      	mov	r1, sp
 80023ae:	0028      	movs	r0, r5
 80023b0:	f002 ff50 	bl	8005254 <HAL_UART_Receive>
	if(rx_dat[0] == 0x71) buf->x = rx_dat[2] << 8 | rx_dat[1];
 80023b4:	466b      	mov	r3, sp
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b71      	cmp	r3, #113	; 0x71
 80023ba:	d105      	bne.n	80023c8 <get_touch+0x2c>
 80023bc:	466b      	mov	r3, sp
 80023be:	7859      	ldrb	r1, [r3, #1]
 80023c0:	789b      	ldrb	r3, [r3, #2]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	430b      	orrs	r3, r1
 80023c6:	8023      	strh	r3, [r4, #0]

	nextion_inst_set("get tch1");
 80023c8:	4811      	ldr	r0, [pc, #68]	; (8002410 <get_touch+0x74>)
 80023ca:	f7ff ffc9 	bl	8002360 <nextion_inst_set>
	HAL_UART_Receive(&huart1, rx_dat, 8, 100);
 80023ce:	2364      	movs	r3, #100	; 0x64
 80023d0:	2208      	movs	r2, #8
 80023d2:	4669      	mov	r1, sp
 80023d4:	0028      	movs	r0, r5
 80023d6:	f002 ff3d 	bl	8005254 <HAL_UART_Receive>
	if(rx_dat[0] == 0x71) buf->y = rx_dat[2] << 8 | rx_dat[1];
 80023da:	466b      	mov	r3, sp
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b71      	cmp	r3, #113	; 0x71
 80023e0:	d105      	bne.n	80023ee <get_touch+0x52>
 80023e2:	466b      	mov	r3, sp
 80023e4:	7859      	ldrb	r1, [r3, #1]
 80023e6:	789b      	ldrb	r3, [r3, #2]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	430b      	orrs	r3, r1
 80023ec:	8063      	strh	r3, [r4, #2]

	if(buf->x > 0 && buf->y > 0) buf->touched = 1;
 80023ee:	2300      	movs	r3, #0
 80023f0:	5ee2      	ldrsh	r2, [r4, r3]
	else buf->touched = 0;
 80023f2:	2300      	movs	r3, #0
	if(buf->x > 0 && buf->y > 0) buf->touched = 1;
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dd04      	ble.n	8002402 <get_touch+0x66>
 80023f8:	2302      	movs	r3, #2
 80023fa:	5ee2      	ldrsh	r2, [r4, r3]
 80023fc:	17d3      	asrs	r3, r2, #31
 80023fe:	1a9b      	subs	r3, r3, r2
	else buf->touched = 0;
 8002400:	0fdb      	lsrs	r3, r3, #31
 8002402:	7123      	strb	r3, [r4, #4]
}
 8002404:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	08005f0c 	.word	0x08005f0c
 800240c:	2000022c 	.word	0x2000022c
 8002410:	08005f15 	.word	0x08005f15

08002414 <area_check>:

/* current coordinate & menu area equality check */
uint8_t area_check(POS_Typedef* pos, AREA_Typedef* area){
 8002414:	0003      	movs	r3, r0
 8002416:	b530      	push	{r4, r5, lr}
	if(pos->x >= area->x0 && pos->x <= area->x1){
 8002418:	2000      	movs	r0, #0
 800241a:	5e1a      	ldrsh	r2, [r3, r0]
 800241c:	2000      	movs	r0, #0
 800241e:	5e0c      	ldrsh	r4, [r1, r0]
		if(pos->y >= area->y0 && pos->y <= area->y1){
			return 1;
		}
	}
	return 0;
 8002420:	2000      	movs	r0, #0
	if(pos->x >= area->x0 && pos->x <= area->x1){
 8002422:	4294      	cmp	r4, r2
 8002424:	dc10      	bgt.n	8002448 <area_check+0x34>
 8002426:	2504      	movs	r5, #4
 8002428:	5f4c      	ldrsh	r4, [r1, r5]
 800242a:	4294      	cmp	r4, r2
 800242c:	db0c      	blt.n	8002448 <area_check+0x34>
 800242e:	2202      	movs	r2, #2
 8002430:	5e9b      	ldrsh	r3, [r3, r2]
		if(pos->y >= area->y0 && pos->y <= area->y1){
 8002432:	2402      	movs	r4, #2
 8002434:	5f0a      	ldrsh	r2, [r1, r4]
 8002436:	429a      	cmp	r2, r3
 8002438:	dc06      	bgt.n	8002448 <area_check+0x34>
 800243a:	2206      	movs	r2, #6
 800243c:	5e8a      	ldrsh	r2, [r1, r2]
 800243e:	0fd9      	lsrs	r1, r3, #31
 8002440:	17d0      	asrs	r0, r2, #31
 8002442:	429a      	cmp	r2, r3
 8002444:	4148      	adcs	r0, r1
	return 0;
 8002446:	b2c0      	uxtb	r0, r0
}
 8002448:	bd30      	pop	{r4, r5, pc}
	...

0800244c <bar_coordinate_set>:

/* menu drag bar coordinate set & touch area set */
void bar_coordinate_set(int16_t* bar_y){
	if(curXY.y >= 55 && curXY.y <= 255){
 800244c:	4b07      	ldr	r3, [pc, #28]	; (800246c <bar_coordinate_set+0x20>)
 800244e:	2202      	movs	r2, #2
 8002450:	5e9a      	ldrsh	r2, [r3, r2]
 8002452:	b293      	uxth	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	3937      	subs	r1, #55	; 0x37
 8002458:	29c8      	cmp	r1, #200	; 0xc8
 800245a:	d806      	bhi.n	800246a <bar_coordinate_set+0x1e>
		*bar_y = curXY.y;
 800245c:	8002      	strh	r2, [r0, #0]
		bar_area.y0 = *bar_y - 15;
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <bar_coordinate_set+0x24>)
 8002460:	3b0f      	subs	r3, #15
 8002462:	8053      	strh	r3, [r2, #2]
		bar_area.y1 = *bar_y + 15;
 8002464:	8803      	ldrh	r3, [r0, #0]
 8002466:	330f      	adds	r3, #15
 8002468:	80d3      	strh	r3, [r2, #6]
	}
}
 800246a:	4770      	bx	lr
 800246c:	2000018c 	.word	0x2000018c
 8002470:	20000006 	.word	0x20000006

08002474 <menu_coordinate_set>:

/* Adjust coordinate for displaying menu */
void menu_coordinate_set(AREA_Typedef* area, uint16_t *first_y){
 8002474:	b570      	push	{r4, r5, r6, lr}
	if(curXY.y >= 55 && curXY.y <= 255){
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <menu_coordinate_set+0x38>)
void menu_coordinate_set(AREA_Typedef* area, uint16_t *first_y){
 8002478:	0004      	movs	r4, r0
	if(curXY.y >= 55 && curXY.y <= 255){
 800247a:	2002      	movs	r0, #2
 800247c:	5e18      	ldrsh	r0, [r3, r0]
void menu_coordinate_set(AREA_Typedef* area, uint16_t *first_y){
 800247e:	000d      	movs	r5, r1
	if(curXY.y >= 55 && curXY.y <= 255){
 8002480:	3837      	subs	r0, #55	; 0x37
 8002482:	b283      	uxth	r3, r0
 8002484:	2bc8      	cmp	r3, #200	; 0xc8
 8002486:	d810      	bhi.n	80024aa <menu_coordinate_set+0x36>
		area->y0 = *first_y - (uint16_t)((float)(curXY.y - 55) * 1.2);
 8002488:	b200      	sxth	r0, r0
 800248a:	f7fe fd2b 	bl	8000ee4 <__aeabi_i2f>
 800248e:	f7ff fbed 	bl	8001c6c <__aeabi_f2d>
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <menu_coordinate_set+0x3c>)
 8002494:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <menu_coordinate_set+0x40>)
 8002496:	f7fe fdb5 	bl	8001004 <__aeabi_dmul>
 800249a:	f7fe f82d 	bl	80004f8 <__aeabi_d2uiz>
 800249e:	882b      	ldrh	r3, [r5, #0]
 80024a0:	1a1b      	subs	r3, r3, r0
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	8063      	strh	r3, [r4, #2]
		area->y1 = area->y0 + 60;
 80024a6:	333c      	adds	r3, #60	; 0x3c
 80024a8:	80e3      	strh	r3, [r4, #6]
	}
}
 80024aa:	bd70      	pop	{r4, r5, r6, pc}
 80024ac:	2000018c 	.word	0x2000018c
 80024b0:	3ff33333 	.word	0x3ff33333
 80024b4:	33333333 	.word	0x33333333

080024b8 <motor_set>:

/* Motor drive and set motor drive voltage */
void motor_set(uint8_t dir, uint8_t* voltage){
 80024b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t tx_dat = *voltage << 2 | dir;
 80024ba:	2217      	movs	r2, #23
 80024bc:	780b      	ldrb	r3, [r1, #0]
 80024be:	446a      	add	r2, sp
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4303      	orrs	r3, r0
 80024c4:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &tx_dat, 1, 100);
 80024c6:	2364      	movs	r3, #100	; 0x64
 80024c8:	9302      	str	r3, [sp, #8]
 80024ca:	3b63      	subs	r3, #99	; 0x63
 80024cc:	9200      	str	r2, [sp, #0]
 80024ce:	21c0      	movs	r1, #192	; 0xc0
 80024d0:	2200      	movs	r2, #0
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <motor_set+0x28>)
 80024d6:	f001 fc23 	bl	8003d20 <HAL_I2C_Mem_Write>
}
 80024da:	b007      	add	sp, #28
 80024dc:	bd00      	pop	{pc}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	20000198 	.word	0x20000198

080024e4 <motor_string_set>:

/* this function parameter is character double pointer */
/* (*str) <- reference to character pointer`s value    */
void motor_string_set(char** str, uint16_t* value){
 80024e4:	0003      	movs	r3, r0
	switch(*value){
 80024e6:	8808      	ldrh	r0, [r1, #0]
void motor_string_set(char** str, uint16_t* value){
 80024e8:	b500      	push	{lr}
	switch(*value){
 80024ea:	2809      	cmp	r0, #9
 80024ec:	d808      	bhi.n	8002500 <motor_string_set+0x1c>
 80024ee:	f7fd fe13 	bl	8000118 <__gnu_thumb1_case_uqi>
 80024f2:	0805      	.short	0x0805
 80024f4:	100e0c0a 	.word	0x100e0c0a
 80024f8:	18161412 	.word	0x18161412
	case  0: (*str) =   "0.5V >"; break;
 80024fc:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <motor_string_set+0x44>)
	case  4: (*str) = "< 2.5V >"; break;
	case  5: (*str) = "< 3.0V >"; break;
	case  6: (*str) = "< 3.5V >"; break;
	case  7: (*str) = "< 4.0V >"; break;
	case  8: (*str) = "< 4.5V >"; break;
	case  9: (*str) = "< 5.0V";   break;
 80024fe:	601a      	str	r2, [r3, #0]
	default:                      break; // run when input data is error data
	}
}
 8002500:	bd00      	pop	{pc}
	case  1: (*str) = "< 1.0V >"; break;
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <motor_string_set+0x48>)
 8002504:	e7fb      	b.n	80024fe <motor_string_set+0x1a>
	case  2: (*str) = "< 1.5V >"; break;
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <motor_string_set+0x4c>)
 8002508:	e7f9      	b.n	80024fe <motor_string_set+0x1a>
	case  3: (*str) = "< 2.0V >"; break;
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <motor_string_set+0x50>)
 800250c:	e7f7      	b.n	80024fe <motor_string_set+0x1a>
	case  4: (*str) = "< 2.5V >"; break;
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <motor_string_set+0x54>)
 8002510:	e7f5      	b.n	80024fe <motor_string_set+0x1a>
	case  5: (*str) = "< 3.0V >"; break;
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <motor_string_set+0x58>)
 8002514:	e7f3      	b.n	80024fe <motor_string_set+0x1a>
	case  6: (*str) = "< 3.5V >"; break;
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <motor_string_set+0x5c>)
 8002518:	e7f1      	b.n	80024fe <motor_string_set+0x1a>
	case  7: (*str) = "< 4.0V >"; break;
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <motor_string_set+0x60>)
 800251c:	e7ef      	b.n	80024fe <motor_string_set+0x1a>
	case  8: (*str) = "< 4.5V >"; break;
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <motor_string_set+0x64>)
 8002520:	e7ed      	b.n	80024fe <motor_string_set+0x1a>
	case  9: (*str) = "< 5.0V";   break;
 8002522:	4a0a      	ldr	r2, [pc, #40]	; (800254c <motor_string_set+0x68>)
 8002524:	e7eb      	b.n	80024fe <motor_string_set+0x1a>
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	08005f1e 	.word	0x08005f1e
 800252c:	08005f25 	.word	0x08005f25
 8002530:	08005f2e 	.word	0x08005f2e
 8002534:	08005f37 	.word	0x08005f37
 8002538:	08005f40 	.word	0x08005f40
 800253c:	08005f49 	.word	0x08005f49
 8002540:	08005f52 	.word	0x08005f52
 8002544:	08005f5b 	.word	0x08005f5b
 8002548:	08005f64 	.word	0x08005f64
 800254c:	08005f6d 	.word	0x08005f6d

08002550 <button_draw>:

/* draw button using the button state */
void button_draw(BUTTON_STATE_Typedef* power_state){
 8002550:	b510      	push	{r4, lr}
	/* off button draw */
	if(*power_state == off){
 8002552:	7803      	ldrb	r3, [r0, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10c      	bne.n	8002572 <button_draw+0x22>
		nextion_inst_set("cirs 370,17,10,33823");   // 33823 <- sky blue color
 8002558:	480c      	ldr	r0, [pc, #48]	; (800258c <button_draw+0x3c>)
 800255a:	f7ff ff01 	bl	8002360 <nextion_inst_set>
		nextion_inst_set("cirs 370+50,17,10,33823");
 800255e:	480c      	ldr	r0, [pc, #48]	; (8002590 <button_draw+0x40>)
 8002560:	f7ff fefe 	bl	8002360 <nextion_inst_set>
		nextion_inst_set("xstr 370,7,50,20,0,WHITE,33823,1,1,1,\"OFF\"");
 8002564:	480b      	ldr	r0, [pc, #44]	; (8002594 <button_draw+0x44>)
 8002566:	f7ff fefb 	bl	8002360 <nextion_inst_set>
		nextion_inst_set("cirs 370+50,16,8,WHITE");
 800256a:	480b      	ldr	r0, [pc, #44]	; (8002598 <button_draw+0x48>)
	/* on button draw */
	else if(*power_state == on){
		nextion_inst_set("cirs 370,17,10,RED");
		nextion_inst_set("cirs 370+50,17,10,RED");
		nextion_inst_set("xstr 370,7,50,20,0,WHITE,RED,1,1,1,\"ON\"");
		nextion_inst_set("cirs 370,16,8,WHITE");
 800256c:	f7ff fef8 	bl	8002360 <nextion_inst_set>
	}
}
 8002570:	bd10      	pop	{r4, pc}
	else if(*power_state == on){
 8002572:	2b01      	cmp	r3, #1
 8002574:	d1fc      	bne.n	8002570 <button_draw+0x20>
		nextion_inst_set("cirs 370,17,10,RED");
 8002576:	4809      	ldr	r0, [pc, #36]	; (800259c <button_draw+0x4c>)
 8002578:	f7ff fef2 	bl	8002360 <nextion_inst_set>
		nextion_inst_set("cirs 370+50,17,10,RED");
 800257c:	4808      	ldr	r0, [pc, #32]	; (80025a0 <button_draw+0x50>)
 800257e:	f7ff feef 	bl	8002360 <nextion_inst_set>
		nextion_inst_set("xstr 370,7,50,20,0,WHITE,RED,1,1,1,\"ON\"");
 8002582:	4808      	ldr	r0, [pc, #32]	; (80025a4 <button_draw+0x54>)
 8002584:	f7ff feec 	bl	8002360 <nextion_inst_set>
		nextion_inst_set("cirs 370,16,8,WHITE");
 8002588:	4807      	ldr	r0, [pc, #28]	; (80025a8 <button_draw+0x58>)
 800258a:	e7ef      	b.n	800256c <button_draw+0x1c>
 800258c:	08005f74 	.word	0x08005f74
 8002590:	08005f89 	.word	0x08005f89
 8002594:	08005fa1 	.word	0x08005fa1
 8002598:	08005fcc 	.word	0x08005fcc
 800259c:	08005fe3 	.word	0x08005fe3
 80025a0:	08005ff6 	.word	0x08005ff6
 80025a4:	0800600c 	.word	0x0800600c
 80025a8:	08006034 	.word	0x08006034

080025ac <task_dis>:

/* This function merge the all screen display function at Nextion LCD */
/* All the screen display function merge at this function and using   */
void task_dis(int16_t* curY){
 80025ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ae:	b087      	sub	sp, #28
 80025b0:	9005      	str	r0, [sp, #20]
	/* LCD clear */
	nextion_inst_set("cls WHITE");
 80025b2:	489f      	ldr	r0, [pc, #636]	; (8002830 <task_dis+0x284>)
 80025b4:	f7ff fed4 	bl	8002360 <nextion_inst_set>

	/* menu draw */
	for(ITEM_Typedef i = temp ; i < MAX_ITEM ; i++){
 80025b8:	4b9e      	ldr	r3, [pc, #632]	; (8002834 <task_dis+0x288>)
 80025ba:	9303      	str	r3, [sp, #12]
 80025bc:	2300      	movs	r3, #0
 80025be:	9304      	str	r3, [sp, #16]
		/* values display only inside LCD */
		if(menu_data[i].area.y1 < 0)   continue;
 80025c0:	9b03      	ldr	r3, [sp, #12]
 80025c2:	2206      	movs	r2, #6
 80025c4:	5e9b      	ldrsh	r3, [r3, r2]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db50      	blt.n	800266c <task_dis+0xc0>
		if(menu_data[i].area.y0 > 270) continue;
 80025ca:	9b03      	ldr	r3, [sp, #12]
 80025cc:	2502      	movs	r5, #2
 80025ce:	5f5d      	ldrsh	r5, [r3, r5]
 80025d0:	2387      	movs	r3, #135	; 0x87
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	429d      	cmp	r5, r3
 80025d6:	dc49      	bgt.n	800266c <task_dis+0xc0>

		/* menu background and title display */
		uint16_t y_coordinate_buf = menu_data[i].area.y0 + 21;
		sprintf(bf, "fill %d,%d,474,60,%d", menu_data[i].area.x0, menu_data[i].area.y0, menu_data[i].color);
 80025d8:	9b03      	ldr	r3, [sp, #12]
 80025da:	4c97      	ldr	r4, [pc, #604]	; (8002838 <task_dis+0x28c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	5e9a      	ldrsh	r2, [r3, r2]
 80025e0:	9b03      	ldr	r3, [sp, #12]
 80025e2:	4996      	ldr	r1, [pc, #600]	; (800283c <task_dis+0x290>)
 80025e4:	891b      	ldrh	r3, [r3, #8]
 80025e6:	0020      	movs	r0, r4
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	002b      	movs	r3, r5
 80025ec:	f003 f88c 	bl	8005708 <siprintf>
		nextion_inst_set(bf);
 80025f0:	0020      	movs	r0, r4
 80025f2:	f7ff feb5 	bl	8002360 <nextion_inst_set>
		sprintf(bf, "draw %d,%d,%d,%d,BLACK", menu_data[i].area.x0, menu_data[i].area.y0, menu_data[i].area.x1, menu_data[i].area.y1);
 80025f6:	9b03      	ldr	r3, [sp, #12]
 80025f8:	4e91      	ldr	r6, [pc, #580]	; (8002840 <task_dis+0x294>)
 80025fa:	2202      	movs	r2, #2
 80025fc:	5e9b      	ldrsh	r3, [r3, r2]
 80025fe:	9a03      	ldr	r2, [sp, #12]
		uint16_t y_coordinate_buf = menu_data[i].area.y0 + 21;
 8002600:	3515      	adds	r5, #21
		sprintf(bf, "draw %d,%d,%d,%d,BLACK", menu_data[i].area.x0, menu_data[i].area.y0, menu_data[i].area.x1, menu_data[i].area.y1);
 8002602:	2100      	movs	r1, #0
 8002604:	5e52      	ldrsh	r2, [r2, r1]
 8002606:	9903      	ldr	r1, [sp, #12]
		nextion_inst_set(bf);

		sprintf(bf, "xstr 10,%d,80,17,0,WHITE,BLACK,0,1,3,\"%s\"", y_coordinate_buf, menu_data[i].title);
 8002608:	b2ad      	uxth	r5, r5
		sprintf(bf, "draw %d,%d,%d,%d,BLACK", menu_data[i].area.x0, menu_data[i].area.y0, menu_data[i].area.x1, menu_data[i].area.y1);
 800260a:	2006      	movs	r0, #6
 800260c:	5e09      	ldrsh	r1, [r1, r0]
 800260e:	9101      	str	r1, [sp, #4]
 8002610:	9903      	ldr	r1, [sp, #12]
 8002612:	2004      	movs	r0, #4
 8002614:	5e09      	ldrsh	r1, [r1, r0]
 8002616:	0020      	movs	r0, r4
 8002618:	9100      	str	r1, [sp, #0]
 800261a:	0031      	movs	r1, r6
 800261c:	f003 f874 	bl	8005708 <siprintf>
		nextion_inst_set(bf);
 8002620:	0020      	movs	r0, r4
 8002622:	f7ff fe9d 	bl	8002360 <nextion_inst_set>
		sprintf(bf, "xstr 10,%d,80,17,0,WHITE,BLACK,0,1,3,\"%s\"", y_coordinate_buf, menu_data[i].title);
 8002626:	9b03      	ldr	r3, [sp, #12]
 8002628:	002a      	movs	r2, r5
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4985      	ldr	r1, [pc, #532]	; (8002844 <task_dis+0x298>)
 800262e:	0020      	movs	r0, r4
 8002630:	f003 f86a 	bl	8005708 <siprintf>
		nextion_inst_set(bf);
 8002634:	0020      	movs	r0, r4
 8002636:	f7ff fe93 	bl	8002360 <nextion_inst_set>

		/* each menu`s value display */
		if(i == temp){
 800263a:	9b04      	ldr	r3, [sp, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d13c      	bne.n	80026ba <task_dis+0x10e>
			sprintf(bf, "xstr 3,%d,3+474,17,0,WHITE,BLACK,1,1,3,\"%02d.%d / 28\"", y_coordinate_buf, menu_data[temp].value / 10, menu_data[temp].value % 10);
 8002640:	4b7c      	ldr	r3, [pc, #496]	; (8002834 <task_dis+0x288>)
 8002642:	210a      	movs	r1, #10
 8002644:	895f      	ldrh	r7, [r3, #10]
 8002646:	0038      	movs	r0, r7
 8002648:	f7fd fd7a 	bl	8000140 <__udivsi3>
 800264c:	210a      	movs	r1, #10
 800264e:	b286      	uxth	r6, r0
 8002650:	0038      	movs	r0, r7
 8002652:	f7fd fdfb 	bl	800024c <__aeabi_uidivmod>
 8002656:	0033      	movs	r3, r6
 8002658:	002a      	movs	r2, r5
 800265a:	b289      	uxth	r1, r1
 800265c:	9100      	str	r1, [sp, #0]
 800265e:	497a      	ldr	r1, [pc, #488]	; (8002848 <task_dis+0x29c>)
			nextion_inst_set(bf);
		}
		else if(i == humidity){
			sprintf(bf, "xstr 3,%d,3+474,17,0,WHITE,BLACK,1,1,3,\"%02d.%d%% / 070\"", y_coordinate_buf, menu_data[humidity].value / 10, menu_data[humidity].value % 10);
 8002660:	0020      	movs	r0, r4
 8002662:	f003 f851 	bl	8005708 <siprintf>
			sprintf(bf, "fill %d,%d,20,20,WHITE", 140 + menu_data[buzzer].value * 2 - 10, menu_data[buzzer].area.y0 + 20);
			nextion_inst_set(bf);
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", 140 + menu_data[buzzer].value * 2 - 10, menu_data[buzzer].area.y0 + 20, 140 + menu_data[buzzer].value * 2 + 10, menu_data[buzzer].area.y0 + 40);
			nextion_inst_set(bf);
			sprintf(bf, "line %d,%d,%d,%d,BLACK", 140 + menu_data[buzzer].value * 2, menu_data[buzzer].area.y0 + 23, 140 + menu_data[buzzer].value * 2, menu_data[buzzer].area.y0 + 37);
			nextion_inst_set(bf);
 8002666:	0020      	movs	r0, r4
 8002668:	f7ff fe7a 	bl	8002360 <nextion_inst_set>
	for(ITEM_Typedef i = temp ; i < MAX_ITEM ; i++){
 800266c:	9b04      	ldr	r3, [sp, #16]
 800266e:	3301      	adds	r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	9304      	str	r3, [sp, #16]
 8002674:	9b03      	ldr	r3, [sp, #12]
 8002676:	3310      	adds	r3, #16
 8002678:	9303      	str	r3, [sp, #12]
 800267a:	9b04      	ldr	r3, [sp, #16]
 800267c:	2b06      	cmp	r3, #6
 800267e:	d19f      	bne.n	80025c0 <task_dis+0x14>
		}
	}

	/* title draw */
	sprintf(bf, "xstr 0,0,480,35,0,WHITE,BLACK,1,1,1,\"Setting\"");
 8002680:	4c6d      	ldr	r4, [pc, #436]	; (8002838 <task_dis+0x28c>)
 8002682:	4972      	ldr	r1, [pc, #456]	; (800284c <task_dis+0x2a0>)
 8002684:	0020      	movs	r0, r4
 8002686:	f003 f85f 	bl	8005748 <strcpy>
	nextion_inst_set(bf);
 800268a:	0020      	movs	r0, r4
 800268c:	f7ff fe68 	bl	8002360 <nextion_inst_set>

	/* button draw */
	button_draw(&button_state);
 8002690:	486f      	ldr	r0, [pc, #444]	; (8002850 <task_dis+0x2a4>)
 8002692:	f7ff ff5d 	bl	8002550 <button_draw>

	/* menu drag bar draw */
	uint16_t color = 4<<11 | 4<<6 | 4; // 8452 <- more dark than general gray color
	sprintf(bf, "fill %d,%d,15,30,%d", bar_area.x0, *curY-15, color);
 8002696:	9b05      	ldr	r3, [sp, #20]
 8002698:	0020      	movs	r0, r4
 800269a:	2200      	movs	r2, #0
 800269c:	5e9b      	ldrsh	r3, [r3, r2]
 800269e:	4a6d      	ldr	r2, [pc, #436]	; (8002854 <task_dis+0x2a8>)
 80026a0:	3b0f      	subs	r3, #15
 80026a2:	2100      	movs	r1, #0
 80026a4:	5e52      	ldrsh	r2, [r2, r1]
 80026a6:	496c      	ldr	r1, [pc, #432]	; (8002858 <task_dis+0x2ac>)
 80026a8:	9100      	str	r1, [sp, #0]
 80026aa:	496c      	ldr	r1, [pc, #432]	; (800285c <task_dis+0x2b0>)
 80026ac:	f003 f82c 	bl	8005708 <siprintf>
	nextion_inst_set(bf);
 80026b0:	0020      	movs	r0, r4
 80026b2:	f7ff fe55 	bl	8002360 <nextion_inst_set>
}
 80026b6:	b007      	add	sp, #28
 80026b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if(i == humidity){
 80026ba:	9b04      	ldr	r3, [sp, #16]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d110      	bne.n	80026e2 <task_dis+0x136>
			sprintf(bf, "xstr 3,%d,3+474,17,0,WHITE,BLACK,1,1,3,\"%02d.%d%% / 070\"", y_coordinate_buf, menu_data[humidity].value / 10, menu_data[humidity].value % 10);
 80026c0:	4b5c      	ldr	r3, [pc, #368]	; (8002834 <task_dis+0x288>)
 80026c2:	210a      	movs	r1, #10
 80026c4:	8b5f      	ldrh	r7, [r3, #26]
 80026c6:	0038      	movs	r0, r7
 80026c8:	f7fd fd3a 	bl	8000140 <__udivsi3>
 80026cc:	210a      	movs	r1, #10
 80026ce:	b286      	uxth	r6, r0
 80026d0:	0038      	movs	r0, r7
 80026d2:	f7fd fdbb 	bl	800024c <__aeabi_uidivmod>
 80026d6:	b289      	uxth	r1, r1
 80026d8:	9100      	str	r1, [sp, #0]
 80026da:	0033      	movs	r3, r6
 80026dc:	002a      	movs	r2, r5
 80026de:	4960      	ldr	r1, [pc, #384]	; (8002860 <task_dis+0x2b4>)
 80026e0:	e7be      	b.n	8002660 <task_dis+0xb4>
		else if(i == co2){
 80026e2:	9b04      	ldr	r3, [sp, #16]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d107      	bne.n	80026f8 <task_dis+0x14c>
			sprintf(bf, "xstr 3,%d,3+474,17,0,WHITE,BLACK,1,1,3,\"%04d / 0700\"", y_coordinate_buf, menu_data[co2].value);
 80026e8:	002a      	movs	r2, r5
 80026ea:	4b52      	ldr	r3, [pc, #328]	; (8002834 <task_dis+0x288>)
 80026ec:	495d      	ldr	r1, [pc, #372]	; (8002864 <task_dis+0x2b8>)
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
			sprintf(bf, "xstr 3,%d,3+474,17,0,WHITE,BLACK,1,1,3,\"%s\"", y_coordinate_buf, motor_string);
 80026f0:	0020      	movs	r0, r4
 80026f2:	f003 f809 	bl	8005708 <siprintf>
			nextion_inst_set(bf);
 80026f6:	e7b6      	b.n	8002666 <task_dis+0xba>
		else if(i == brightness){
 80026f8:	9b04      	ldr	r3, [sp, #16]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d14a      	bne.n	8002794 <task_dis+0x1e8>
			sprintf(bf, "fill 130,%d,220,20,GRAY", menu_data[brightness].area.y0 + 20);
 80026fe:	4d4d      	ldr	r5, [pc, #308]	; (8002834 <task_dis+0x288>)
 8002700:	4959      	ldr	r1, [pc, #356]	; (8002868 <task_dis+0x2bc>)
 8002702:	2332      	movs	r3, #50	; 0x32
 8002704:	5eea      	ldrsh	r2, [r5, r3]
 8002706:	0020      	movs	r0, r4
 8002708:	3214      	adds	r2, #20
 800270a:	f002 fffd 	bl	8005708 <siprintf>
			nextion_inst_set(bf);
 800270e:	0020      	movs	r0, r4
 8002710:	f7ff fe26 	bl	8002360 <nextion_inst_set>
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", 130, menu_data[brightness].area.y0 + 20, 140 + 210, menu_data[brightness].area.y0 + 40);
 8002714:	2332      	movs	r3, #50	; 0x32
 8002716:	5eea      	ldrsh	r2, [r5, r3]
 8002718:	0031      	movs	r1, r6
 800271a:	0013      	movs	r3, r2
 800271c:	3228      	adds	r2, #40	; 0x28
 800271e:	9201      	str	r2, [sp, #4]
 8002720:	22af      	movs	r2, #175	; 0xaf
 8002722:	0052      	lsls	r2, r2, #1
 8002724:	3314      	adds	r3, #20
 8002726:	9200      	str	r2, [sp, #0]
 8002728:	0020      	movs	r0, r4
 800272a:	3adc      	subs	r2, #220	; 0xdc
 800272c:	f002 ffec 	bl	8005708 <siprintf>
			nextion_inst_set(bf);
 8002730:	0020      	movs	r0, r4
 8002732:	f7ff fe15 	bl	8002360 <nextion_inst_set>
			sprintf(bf, "fill %d,%d,20,20,WHITE", 140 + menu_data[brightness].value * 2 - 10, menu_data[brightness].area.y0 + 20);
 8002736:	2232      	movs	r2, #50	; 0x32
 8002738:	5eab      	ldrsh	r3, [r5, r2]
 800273a:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
 800273c:	3314      	adds	r3, #20
 800273e:	3241      	adds	r2, #65	; 0x41
 8002740:	494a      	ldr	r1, [pc, #296]	; (800286c <task_dis+0x2c0>)
 8002742:	0052      	lsls	r2, r2, #1
 8002744:	0020      	movs	r0, r4
 8002746:	f002 ffdf 	bl	8005708 <siprintf>
			nextion_inst_set(bf);
 800274a:	0020      	movs	r0, r4
 800274c:	f7ff fe08 	bl	8002360 <nextion_inst_set>
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", 140 + menu_data[brightness].value * 2 - 10, menu_data[brightness].area.y0 + 20, 140 + menu_data[brightness].value * 2 + 10, menu_data[brightness].area.y0 + 40);
 8002750:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
 8002752:	2332      	movs	r3, #50	; 0x32
 8002754:	5ee9      	ldrsh	r1, [r5, r3]
 8002756:	3241      	adds	r2, #65	; 0x41
 8002758:	0052      	lsls	r2, r2, #1
 800275a:	000b      	movs	r3, r1
 800275c:	3128      	adds	r1, #40	; 0x28
 800275e:	9101      	str	r1, [sp, #4]
 8002760:	0011      	movs	r1, r2
 8002762:	3114      	adds	r1, #20
 8002764:	3314      	adds	r3, #20
 8002766:	9100      	str	r1, [sp, #0]
 8002768:	0020      	movs	r0, r4
 800276a:	0031      	movs	r1, r6
 800276c:	f002 ffcc 	bl	8005708 <siprintf>
			nextion_inst_set(bf);
 8002770:	0020      	movs	r0, r4
 8002772:	f7ff fdf5 	bl	8002360 <nextion_inst_set>
			sprintf(bf, "line %d,%d,%d,%d,BLACK", 140 + menu_data[brightness].value * 2, menu_data[brightness].area.y0 + 23, 140 + menu_data[brightness].value * 2, menu_data[brightness].area.y0 + 37);
 8002776:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
 8002778:	2332      	movs	r3, #50	; 0x32
 800277a:	5ee9      	ldrsh	r1, [r5, r3]
 800277c:	3246      	adds	r2, #70	; 0x46
 800277e:	0052      	lsls	r2, r2, #1
			sprintf(bf, "line %d,%d,%d,%d,BLACK", 140 + menu_data[buzzer].value * 2, menu_data[buzzer].area.y0 + 23, 140 + menu_data[buzzer].value * 2, menu_data[buzzer].area.y0 + 37);
 8002780:	000b      	movs	r3, r1
 8002782:	3125      	adds	r1, #37	; 0x25
 8002784:	9101      	str	r1, [sp, #4]
 8002786:	0020      	movs	r0, r4
 8002788:	4939      	ldr	r1, [pc, #228]	; (8002870 <task_dis+0x2c4>)
 800278a:	3317      	adds	r3, #23
 800278c:	9200      	str	r2, [sp, #0]
 800278e:	f002 ffbb 	bl	8005708 <siprintf>
 8002792:	e768      	b.n	8002666 <task_dis+0xba>
		else if(i == motor){
 8002794:	9b04      	ldr	r3, [sp, #16]
 8002796:	2b04      	cmp	r3, #4
 8002798:	d104      	bne.n	80027a4 <task_dis+0x1f8>
			sprintf(bf, "xstr 3,%d,3+474,17,0,WHITE,BLACK,1,1,3,\"%s\"", y_coordinate_buf, motor_string);
 800279a:	4b36      	ldr	r3, [pc, #216]	; (8002874 <task_dis+0x2c8>)
 800279c:	002a      	movs	r2, r5
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4935      	ldr	r1, [pc, #212]	; (8002878 <task_dis+0x2cc>)
 80027a2:	e7a5      	b.n	80026f0 <task_dis+0x144>
			sprintf(bf, "fill 130,%d,220,20,GRAY", menu_data[buzzer].area.y0 + 20);
 80027a4:	4d23      	ldr	r5, [pc, #140]	; (8002834 <task_dis+0x288>)
 80027a6:	4930      	ldr	r1, [pc, #192]	; (8002868 <task_dis+0x2bc>)
 80027a8:	002f      	movs	r7, r5
 80027aa:	3752      	adds	r7, #82	; 0x52
 80027ac:	2300      	movs	r3, #0
 80027ae:	5efa      	ldrsh	r2, [r7, r3]
 80027b0:	0020      	movs	r0, r4
 80027b2:	3214      	adds	r2, #20
 80027b4:	f002 ffa8 	bl	8005708 <siprintf>
			nextion_inst_set(bf);
 80027b8:	0020      	movs	r0, r4
 80027ba:	f7ff fdd1 	bl	8002360 <nextion_inst_set>
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", 130, menu_data[buzzer].area.y0 + 20, 140 + 210, menu_data[buzzer].area.y0 + 40);
 80027be:	2300      	movs	r3, #0
 80027c0:	5efa      	ldrsh	r2, [r7, r3]
 80027c2:	0031      	movs	r1, r6
 80027c4:	0013      	movs	r3, r2
 80027c6:	3228      	adds	r2, #40	; 0x28
 80027c8:	9201      	str	r2, [sp, #4]
 80027ca:	22af      	movs	r2, #175	; 0xaf
 80027cc:	0052      	lsls	r2, r2, #1
 80027ce:	3314      	adds	r3, #20
 80027d0:	9200      	str	r2, [sp, #0]
 80027d2:	0020      	movs	r0, r4
 80027d4:	3adc      	subs	r2, #220	; 0xdc
 80027d6:	f002 ff97 	bl	8005708 <siprintf>
			sprintf(bf, "fill %d,%d,20,20,WHITE", 140 + menu_data[buzzer].value * 2 - 10, menu_data[buzzer].area.y0 + 20);
 80027da:	355a      	adds	r5, #90	; 0x5a
			nextion_inst_set(bf);
 80027dc:	0020      	movs	r0, r4
 80027de:	f7ff fdbf 	bl	8002360 <nextion_inst_set>
			sprintf(bf, "fill %d,%d,20,20,WHITE", 140 + menu_data[buzzer].value * 2 - 10, menu_data[buzzer].area.y0 + 20);
 80027e2:	2200      	movs	r2, #0
 80027e4:	5ebb      	ldrsh	r3, [r7, r2]
 80027e6:	882a      	ldrh	r2, [r5, #0]
 80027e8:	3314      	adds	r3, #20
 80027ea:	3241      	adds	r2, #65	; 0x41
 80027ec:	491f      	ldr	r1, [pc, #124]	; (800286c <task_dis+0x2c0>)
 80027ee:	0052      	lsls	r2, r2, #1
 80027f0:	0020      	movs	r0, r4
 80027f2:	f002 ff89 	bl	8005708 <siprintf>
			nextion_inst_set(bf);
 80027f6:	0020      	movs	r0, r4
 80027f8:	f7ff fdb2 	bl	8002360 <nextion_inst_set>
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", 140 + menu_data[buzzer].value * 2 - 10, menu_data[buzzer].area.y0 + 20, 140 + menu_data[buzzer].value * 2 + 10, menu_data[buzzer].area.y0 + 40);
 80027fc:	882a      	ldrh	r2, [r5, #0]
 80027fe:	2300      	movs	r3, #0
 8002800:	5ef9      	ldrsh	r1, [r7, r3]
 8002802:	3241      	adds	r2, #65	; 0x41
 8002804:	0052      	lsls	r2, r2, #1
 8002806:	000b      	movs	r3, r1
 8002808:	3128      	adds	r1, #40	; 0x28
 800280a:	9101      	str	r1, [sp, #4]
 800280c:	0011      	movs	r1, r2
 800280e:	3114      	adds	r1, #20
 8002810:	3314      	adds	r3, #20
 8002812:	9100      	str	r1, [sp, #0]
 8002814:	0020      	movs	r0, r4
 8002816:	0031      	movs	r1, r6
 8002818:	f002 ff76 	bl	8005708 <siprintf>
			nextion_inst_set(bf);
 800281c:	0020      	movs	r0, r4
 800281e:	f7ff fd9f 	bl	8002360 <nextion_inst_set>
			sprintf(bf, "line %d,%d,%d,%d,BLACK", 140 + menu_data[buzzer].value * 2, menu_data[buzzer].area.y0 + 23, 140 + menu_data[buzzer].value * 2, menu_data[buzzer].area.y0 + 37);
 8002822:	882a      	ldrh	r2, [r5, #0]
 8002824:	2300      	movs	r3, #0
 8002826:	5ef9      	ldrsh	r1, [r7, r3]
 8002828:	3246      	adds	r2, #70	; 0x46
 800282a:	0052      	lsls	r2, r2, #1
 800282c:	e7a8      	b.n	8002780 <task_dis+0x1d4>
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	08006048 	.word	0x08006048
 8002834:	20000018 	.word	0x20000018
 8002838:	20000120 	.word	0x20000120
 800283c:	08006052 	.word	0x08006052
 8002840:	08006067 	.word	0x08006067
 8002844:	0800607e 	.word	0x0800607e
 8002848:	080060a8 	.word	0x080060a8
 800284c:	080061be 	.word	0x080061be
 8002850:	20000184 	.word	0x20000184
 8002854:	20000006 	.word	0x20000006
 8002858:	00002104 	.word	0x00002104
 800285c:	080061ec 	.word	0x080061ec
 8002860:	080060de 	.word	0x080060de
 8002864:	08006117 	.word	0x08006117
 8002868:	0800614c 	.word	0x0800614c
 800286c:	08006164 	.word	0x08006164
 8002870:	0800617b 	.word	0x0800617b
 8002874:	20000078 	.word	0x20000078
 8002878:	08006192 	.word	0x08006192

0800287c <task_fuc>:

void task_fuc(void){
	int16_t bar_y = 55;
 800287c:	2316      	movs	r3, #22
void task_fuc(void){
 800287e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002880:	b093      	sub	sp, #76	; 0x4c
	int16_t bar_y = 55;
 8002882:	aa06      	add	r2, sp, #24
 8002884:	189b      	adds	r3, r3, r2
 8002886:	2237      	movs	r2, #55	; 0x37
	uint8_t befo_touched = curXY.touched;
 8002888:	4cb7      	ldr	r4, [pc, #732]	; (8002b68 <task_fuc+0x2ec>)
	uint8_t led_state[LED_MAX] = { 0, 0, 0 };

	uint8_t sign_f = 0;
	uint8_t sign_check = 0;

	nextion_inst_set("thdra=0");
 800288a:	4db8      	ldr	r5, [pc, #736]	; (8002b6c <task_fuc+0x2f0>)
	int16_t bar_y = 55;
 800288c:	801a      	strh	r2, [r3, #0]
	uint8_t befo_touched = curXY.touched;
 800288e:	7923      	ldrb	r3, [r4, #4]
	nextion_inst_set("thdra=0");
 8002890:	0028      	movs	r0, r5
	uint8_t befo_touched = curXY.touched;
 8002892:	9305      	str	r3, [sp, #20]
	nextion_inst_set("thdra=0");
 8002894:	f7ff fd64 	bl	8002360 <nextion_inst_set>
	nextion_inst_set("thdra=0");
 8002898:	0028      	movs	r0, r5
 800289a:	f7ff fd61 	bl	8002360 <nextion_inst_set>
	nextion_inst_set("thdra=0");
 800289e:	0028      	movs	r0, r5
 80028a0:	f7ff fd5e 	bl	8002360 <nextion_inst_set>

	sprintf(bf, "dim=%d", menu_data[brightness].value);
 80028a4:	4eb2      	ldr	r6, [pc, #712]	; (8002b70 <task_fuc+0x2f4>)
 80028a6:	4db3      	ldr	r5, [pc, #716]	; (8002b74 <task_fuc+0x2f8>)
 80028a8:	49b3      	ldr	r1, [pc, #716]	; (8002b78 <task_fuc+0x2fc>)
 80028aa:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
 80028ac:	0030      	movs	r0, r6
 80028ae:	f002 ff2b 	bl	8005708 <siprintf>
	nextion_inst_set(bf);
 80028b2:	0030      	movs	r0, r6
 80028b4:	f7ff fd54 	bl	8002360 <nextion_inst_set>
	nextion_inst_set(bf);
 80028b8:	0030      	movs	r0, r6
 80028ba:	f7ff fd51 	bl	8002360 <nextion_inst_set>
	nextion_inst_set(bf);

	task_dis(&curXY.y);
 80028be:	3402      	adds	r4, #2
	nextion_inst_set(bf);
 80028c0:	0030      	movs	r0, r6
 80028c2:	f7ff fd4d 	bl	8002360 <nextion_inst_set>
	task_dis(&curXY.y);
 80028c6:	0020      	movs	r0, r4
 80028c8:	f7ff fe70 	bl	80025ac <task_dis>
	task_dis(&curXY.y);
 80028cc:	0020      	movs	r0, r4
 80028ce:	f7ff fe6d 	bl	80025ac <task_dis>
	task_dis(&curXY.y);
 80028d2:	0020      	movs	r0, r4
 80028d4:	f7ff fe6a 	bl	80025ac <task_dis>

	motor_string_set(&motor_string, &menu_data[motor].value);
 80028d8:	0029      	movs	r1, r5
 80028da:	48a8      	ldr	r0, [pc, #672]	; (8002b7c <task_fuc+0x300>)
 80028dc:	314a      	adds	r1, #74	; 0x4a
 80028de:	f7ff fe01 	bl	80024e4 <motor_string_set>

		/* display component coordinate set */
		if(area_check(&curXY, &bar_area) == 1 || SW(1) || SW(3) || sign_f == 2) {
			screen_update = 0;

			if(SW(1))       { bar_y = 55;  curXY.y = 55;             }
 80028e2:	27a0      	movs	r7, #160	; 0xa0
	uint8_t sign_check = 0;
 80028e4:	2300      	movs	r3, #0
			if(SW(1))       { bar_y = 55;  curXY.y = 55;             }
 80028e6:	05ff      	lsls	r7, r7, #23
	uint8_t sign_check = 0;
 80028e8:	9304      	str	r3, [sp, #16]
	uint8_t sign_f = 0;
 80028ea:	9303      	str	r3, [sp, #12]
	uint32_t auto_tick = 0;
 80028ec:	9307      	str	r3, [sp, #28]
	uint32_t tick = 0;
 80028ee:	9306      	str	r3, [sp, #24]
		if(sign_f == 0) get_touch(&curXY);
 80028f0:	9b03      	ldr	r3, [sp, #12]
 80028f2:	4c9d      	ldr	r4, [pc, #628]	; (8002b68 <task_fuc+0x2ec>)
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <task_fuc+0x82>
 80028f8:	0020      	movs	r0, r4
 80028fa:	f7ff fd4f 	bl	800239c <get_touch>
		if(area_check(&curXY, &bar_area) == 1 || SW(1) || SW(3) || sign_f == 2) {
 80028fe:	0020      	movs	r0, r4
 8002900:	499f      	ldr	r1, [pc, #636]	; (8002b80 <task_fuc+0x304>)
 8002902:	f7ff fd87 	bl	8002414 <area_check>
 8002906:	2801      	cmp	r0, #1
 8002908:	d009      	beq.n	800291e <task_fuc+0xa2>
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	07db      	lsls	r3, r3, #31
 800290e:	d506      	bpl.n	800291e <task_fuc+0xa2>
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	075b      	lsls	r3, r3, #29
 8002914:	d503      	bpl.n	800291e <task_fuc+0xa2>
 8002916:	9b03      	ldr	r3, [sp, #12]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d000      	beq.n	800291e <task_fuc+0xa2>
 800291c:	e0d7      	b.n	8002ace <task_fuc+0x252>
			screen_update = 0;
 800291e:	2200      	movs	r2, #0
 8002920:	2016      	movs	r0, #22
 8002922:	4b98      	ldr	r3, [pc, #608]	; (8002b84 <task_fuc+0x308>)
 8002924:	701a      	strb	r2, [r3, #0]
			if(SW(1))       { bar_y = 55;  curXY.y = 55;             }
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	aa06      	add	r2, sp, #24
 800292a:	1880      	adds	r0, r0, r2
 800292c:	07db      	lsls	r3, r3, #31
 800292e:	d402      	bmi.n	8002936 <task_fuc+0xba>
 8002930:	2337      	movs	r3, #55	; 0x37
 8002932:	8003      	strh	r3, [r0, #0]
 8002934:	8063      	strh	r3, [r4, #2]
			if(SW(3))       { bar_y = 255; curXY.y = 255;            }
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	075b      	lsls	r3, r3, #29
 800293a:	d402      	bmi.n	8002942 <task_fuc+0xc6>
 800293c:	23ff      	movs	r3, #255	; 0xff
 800293e:	8003      	strh	r3, [r0, #0]
 8002940:	8063      	strh	r3, [r4, #2]
			if(sign_f == 2) { bar_y = 55;  curXY.y = 55; sign_f = 0; }
 8002942:	9b03      	ldr	r3, [sp, #12]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d104      	bne.n	8002952 <task_fuc+0xd6>
 8002948:	3335      	adds	r3, #53	; 0x35
 800294a:	8003      	strh	r3, [r0, #0]
 800294c:	8063      	strh	r3, [r4, #2]
 800294e:	2300      	movs	r3, #0
 8002950:	9303      	str	r3, [sp, #12]

			bar_coordinate_set(&bar_y);
 8002952:	f7ff fd7b 	bl	800244c <bar_coordinate_set>
 8002956:	2400      	movs	r4, #0
			for(ITEM_Typedef i = temp ; i < MAX_ITEM ; i++)
				menu_coordinate_set(&menu_data[i].area, &origin_y_coordinate[i]);
 8002958:	498b      	ldr	r1, [pc, #556]	; (8002b88 <task_fuc+0x30c>)
 800295a:	0063      	lsls	r3, r4, #1
 800295c:	4885      	ldr	r0, [pc, #532]	; (8002b74 <task_fuc+0x2f8>)
 800295e:	18c9      	adds	r1, r1, r3
 8002960:	0123      	lsls	r3, r4, #4
 8002962:	18c0      	adds	r0, r0, r3
			for(ITEM_Typedef i = temp ; i < MAX_ITEM ; i++)
 8002964:	3401      	adds	r4, #1
				menu_coordinate_set(&menu_data[i].area, &origin_y_coordinate[i]);
 8002966:	f7ff fd85 	bl	8002474 <menu_coordinate_set>
			for(ITEM_Typedef i = temp ; i < MAX_ITEM ; i++)
 800296a:	2c06      	cmp	r4, #6
 800296c:	d1f4      	bne.n	8002958 <task_fuc+0xdc>
			else if(buzzer_check == 1 && befo_touched != curXY.touched && curXY.touched == 0){
				buzzer_check = 0;
				buzM = 1; buz_on_time = 500;
			}
		}
		befo_touched = curXY.touched;
 800296e:	4b7e      	ldr	r3, [pc, #504]	; (8002b68 <task_fuc+0x2ec>)
 8002970:	791b      	ldrb	r3, [r3, #4]
 8002972:	9305      	str	r3, [sp, #20]

		/* auto sensing values */
		if(button_state == on && HAL_GetTick() - auto_tick > 500){
 8002974:	4b85      	ldr	r3, [pc, #532]	; (8002b8c <task_fuc+0x310>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d140      	bne.n	80029fe <task_fuc+0x182>
 800297c:	f000 fd8c 	bl	8003498 <HAL_GetTick>
 8002980:	9b07      	ldr	r3, [sp, #28]
 8002982:	1ac0      	subs	r0, r0, r3
 8002984:	23fa      	movs	r3, #250	; 0xfa
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4298      	cmp	r0, r3
 800298a:	d938      	bls.n	80029fe <task_fuc+0x182>
			auto_tick = HAL_GetTick();
 800298c:	f000 fd84 	bl	8003498 <HAL_GetTick>

			ITEM_Typedef get_item_addr = temp;
 8002990:	2328      	movs	r3, #40	; 0x28
 8002992:	aa06      	add	r2, sp, #24
			auto_tick = HAL_GetTick();
 8002994:	9007      	str	r0, [sp, #28]
			ITEM_Typedef get_item_addr = temp;
 8002996:	18d0      	adds	r0, r2, r3
 8002998:	2300      	movs	r3, #0
 800299a:	7003      	strb	r3, [r0, #0]
		SHT41_t* buf = (SHT41_t*)malloc(sizeof(SHT41_t));
 800299c:	2008      	movs	r0, #8
 800299e:	f002 fd99 	bl	80054d4 <malloc>
 80029a2:	0004      	movs	r4, r0
		*buf = getTempSht41();
 80029a4:	ad08      	add	r5, sp, #32
 80029a6:	0028      	movs	r0, r5
 80029a8:	f000 fbec 	bl	8003184 <getTempSht41>
 80029ac:	0020      	movs	r0, r4
 80029ae:	cd44      	ldmia	r5!, {r2, r6}
 80029b0:	c044      	stmia	r0!, {r2, r6}
			sht41_value = (SHT41_t*)get_sensor(&get_item_addr);
 80029b2:	4e77      	ldr	r6, [pc, #476]	; (8002b90 <task_fuc+0x314>)
			menu_data[temp].value     = (uint16_t)(sht41_value->temperature * 10);
 80029b4:	4977      	ldr	r1, [pc, #476]	; (8002b94 <task_fuc+0x318>)
 80029b6:	6820      	ldr	r0, [r4, #0]
			sht41_value = (SHT41_t*)get_sensor(&get_item_addr);
 80029b8:	6034      	str	r4, [r6, #0]
			menu_data[temp].value     = (uint16_t)(sht41_value->temperature * 10);
 80029ba:	f7fd ff9f 	bl	80008fc <__aeabi_fmul>
 80029be:	f7fd fd83 	bl	80004c8 <__aeabi_f2uiz>
 80029c2:	4d6c      	ldr	r5, [pc, #432]	; (8002b74 <task_fuc+0x2f8>)
			menu_data[humidity].value = (uint16_t)(sht41_value->humidity * 10);
 80029c4:	4973      	ldr	r1, [pc, #460]	; (8002b94 <task_fuc+0x318>)
			menu_data[temp].value     = (uint16_t)(sht41_value->temperature * 10);
 80029c6:	8168      	strh	r0, [r5, #10]
			menu_data[humidity].value = (uint16_t)(sht41_value->humidity * 10);
 80029c8:	6860      	ldr	r0, [r4, #4]
 80029ca:	f7fd ff97 	bl	80008fc <__aeabi_fmul>
 80029ce:	f7fd fd7b 	bl	80004c8 <__aeabi_f2uiz>

			get_item_addr = co2;
 80029d2:	2128      	movs	r1, #40	; 0x28
			menu_data[humidity].value = (uint16_t)(sht41_value->humidity * 10);
 80029d4:	8368      	strh	r0, [r5, #26]
			get_item_addr = co2;
 80029d6:	a806      	add	r0, sp, #24
 80029d8:	1841      	adds	r1, r0, r1
 80029da:	2002      	movs	r0, #2
 80029dc:	7008      	strb	r0, [r1, #0]
			ens160_value = (uint16_t*)get_sensor(&get_item_addr);
 80029de:	a810      	add	r0, sp, #64	; 0x40
 80029e0:	f7ff fc56 	bl	8002290 <get_sensor>
 80029e4:	4c6c      	ldr	r4, [pc, #432]	; (8002b98 <task_fuc+0x31c>)
			menu_data[co2].value = *ens160_value;
 80029e6:	8803      	ldrh	r3, [r0, #0]
			ens160_value = (uint16_t*)get_sensor(&get_item_addr);
 80029e8:	6020      	str	r0, [r4, #0]
			menu_data[co2].value = *ens160_value;
 80029ea:	856b      	strh	r3, [r5, #42]	; 0x2a

			free_reset((void*)&sht41_value);
 80029ec:	0030      	movs	r0, r6
 80029ee:	f7ff fc68 	bl	80022c2 <free_reset>
			free_reset((void*)&ens160_value);
 80029f2:	0020      	movs	r0, r4
 80029f4:	f7ff fc65 	bl	80022c2 <free_reset>

			screen_update = 0;
 80029f8:	2200      	movs	r2, #0
 80029fa:	4b62      	ldr	r3, [pc, #392]	; (8002b84 <task_fuc+0x308>)
 80029fc:	701a      	strb	r2, [r3, #0]
		}

		/* LCD screen Update */
		if(screen_update == 0) { screen_update = 1; task_dis(&bar_y); }
 80029fe:	4b61      	ldr	r3, [pc, #388]	; (8002b84 <task_fuc+0x308>)
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	2a00      	cmp	r2, #0
 8002a04:	d106      	bne.n	8002a14 <task_fuc+0x198>
 8002a06:	2016      	movs	r0, #22
 8002a08:	3201      	adds	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	ab06      	add	r3, sp, #24
 8002a0e:	18c0      	adds	r0, r0, r3
 8002a10:	f7ff fdcc 	bl	80025ac <task_dis>
		else led_state[led2] = 0;

		if(menu_data[co2].value > 700)       led_state[led3] = 1;
		else led_state[led3] = 0;

		if(led_state[led1] || led_state[led2] || led_state[led3]) buzM = 2;
 8002a14:	248c      	movs	r4, #140	; 0x8c
		if(menu_data[temp].value >= 280)     led_state[led1] = 1;
 8002a16:	4b57      	ldr	r3, [pc, #348]	; (8002b74 <task_fuc+0x2f8>)
 8002a18:	4a60      	ldr	r2, [pc, #384]	; (8002b9c <task_fuc+0x320>)
 8002a1a:	8959      	ldrh	r1, [r3, #10]
		if(menu_data[humidity].value >= 700) led_state[led2] = 1;
 8002a1c:	8b58      	ldrh	r0, [r3, #26]
		if(led_state[led1] || led_state[led2] || led_state[led3]) buzM = 2;
 8002a1e:	0064      	lsls	r4, r4, #1
		if(menu_data[co2].value > 700)       led_state[led3] = 1;
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
		if(led_state[led1] || led_state[led2] || led_state[led3]) buzM = 2;
 8002a22:	42a1      	cmp	r1, r4
 8002a24:	d206      	bcs.n	8002a34 <task_fuc+0x1b8>
 8002a26:	34a5      	adds	r4, #165	; 0xa5
 8002a28:	34ff      	adds	r4, #255	; 0xff
 8002a2a:	42a0      	cmp	r0, r4
 8002a2c:	d202      	bcs.n	8002a34 <task_fuc+0x1b8>
 8002a2e:	42a3      	cmp	r3, r4
 8002a30:	d800      	bhi.n	8002a34 <task_fuc+0x1b8>
 8002a32:	e1a6      	b.n	8002d82 <task_fuc+0x506>
 8002a34:	2402      	movs	r4, #2
 8002a36:	7014      	strb	r4, [r2, #0]
		else buzM = (buzM == 2) ? 0 : buzM;

		/* LED Light */
		LED(1,led_state[led1]);
 8002a38:	228c      	movs	r2, #140	; 0x8c
 8002a3a:	0052      	lsls	r2, r2, #1
 8002a3c:	4291      	cmp	r1, r2
 8002a3e:	d300      	bcc.n	8002a42 <task_fuc+0x1c6>
 8002a40:	e1a5      	b.n	8002d8e <task_fuc+0x512>
 8002a42:	2208      	movs	r2, #8
 8002a44:	61ba      	str	r2, [r7, #24]
		LED(2,led_state[led2]);
 8002a46:	22af      	movs	r2, #175	; 0xaf
 8002a48:	0092      	lsls	r2, r2, #2
 8002a4a:	4290      	cmp	r0, r2
 8002a4c:	d300      	bcc.n	8002a50 <task_fuc+0x1d4>
 8002a4e:	e1a1      	b.n	8002d94 <task_fuc+0x518>
 8002a50:	2210      	movs	r2, #16
 8002a52:	61ba      	str	r2, [r7, #24]
		LED(3,led_state[led3]);
 8002a54:	22af      	movs	r2, #175	; 0xaf
 8002a56:	0092      	lsls	r2, r2, #2
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	419b      	sbcs	r3, r3
 8002a5c:	4a50      	ldr	r2, [pc, #320]	; (8002ba0 <task_fuc+0x324>)

		/* save values & sign function */
		if(SW(2) && sign_check == 0){
 8002a5e:	2402      	movs	r4, #2
		LED(3,led_state[led3]);
 8002a60:	4013      	ands	r3, r2
		if(SW(2) && sign_check == 0){
 8002a62:	2202      	movs	r2, #2
		LED(3,led_state[led3]);
 8002a64:	3320      	adds	r3, #32
 8002a66:	61bb      	str	r3, [r7, #24]
		if(SW(2) && sign_check == 0){
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	401c      	ands	r4, r3
 8002a6c:	4213      	tst	r3, r2
 8002a6e:	d000      	beq.n	8002a72 <task_fuc+0x1f6>
 8002a70:	e1c0      	b.n	8002df4 <task_fuc+0x578>
 8002a72:	9b04      	ldr	r3, [sp, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d000      	beq.n	8002a7a <task_fuc+0x1fe>
 8002a78:	e1bc      	b.n	8002df4 <task_fuc+0x578>
			sign_f ^= 1;
			sign_check = 1;

			if(sign_f == 1){
 8002a7a:	9b03      	ldr	r3, [sp, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d000      	beq.n	8002a82 <task_fuc+0x206>
 8002a80:	e18b      	b.n	8002d9a <task_fuc+0x51e>
				/* touch draw mode on */
				nextion_inst_set("thdra=1");
 8002a82:	4848      	ldr	r0, [pc, #288]	; (8002ba4 <task_fuc+0x328>)
 8002a84:	f7ff fc6c 	bl	8002360 <nextion_inst_set>
				nextion_inst_set("thc=RED");
 8002a88:	4847      	ldr	r0, [pc, #284]	; (8002ba8 <task_fuc+0x32c>)
 8002a8a:	f7ff fc69 	bl	8002360 <nextion_inst_set>
				curXY.touched = 0;
 8002a8e:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <task_fuc+0x2ec>)
 8002a90:	9a03      	ldr	r2, [sp, #12]

				/* rectangle draw */
				nextion_inst_set("fill 140,50,200,200,WHITE");
 8002a92:	4846      	ldr	r0, [pc, #280]	; (8002bac <task_fuc+0x330>)
				curXY.touched = 0;
 8002a94:	711a      	strb	r2, [r3, #4]
				nextion_inst_set("fill 140,50,200,200,WHITE");
 8002a96:	f7ff fc63 	bl	8002360 <nextion_inst_set>
				nextion_inst_set("draw 140,50,140+200,50+200,BLACK");
 8002a9a:	4845      	ldr	r0, [pc, #276]	; (8002bb0 <task_fuc+0x334>)
 8002a9c:	f7ff fc60 	bl	8002360 <nextion_inst_set>
			sign_check = 1;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	9303      	str	r3, [sp, #12]
			sign_f ^= 1;
 8002aa4:	9304      	str	r3, [sp, #16]
			}
		}
		else if(SW(2) == 0) sign_check = 0;

		/* coordinate display for task testing */
         sprintf(bf, "xstr 0,0,150,30,0,BLACK,WHITE,0,1,1,\"X: %d Y: %d %d\"", curXY.x, curXY.y, bar_y);
 8002aa6:	4a30      	ldr	r2, [pc, #192]	; (8002b68 <task_fuc+0x2ec>)
 8002aa8:	a806      	add	r0, sp, #24
 8002aaa:	2102      	movs	r1, #2
 8002aac:	5e53      	ldrsh	r3, [r2, r1]
 8002aae:	2100      	movs	r1, #0
 8002ab0:	5e52      	ldrsh	r2, [r2, r1]
 8002ab2:	2116      	movs	r1, #22
 8002ab4:	1809      	adds	r1, r1, r0
 8002ab6:	4c2e      	ldr	r4, [pc, #184]	; (8002b70 <task_fuc+0x2f4>)
 8002ab8:	2000      	movs	r0, #0
 8002aba:	5e09      	ldrsh	r1, [r1, r0]
 8002abc:	0020      	movs	r0, r4
 8002abe:	9100      	str	r1, [sp, #0]
 8002ac0:	493c      	ldr	r1, [pc, #240]	; (8002bb4 <task_fuc+0x338>)
 8002ac2:	f002 fe21 	bl	8005708 <siprintf>
		 nextion_inst_set(bf);
 8002ac6:	0020      	movs	r0, r4
 8002ac8:	f7ff fc4a 	bl	8002360 <nextion_inst_set>
		if(sign_f == 0) get_touch(&curXY);
 8002acc:	e710      	b.n	80028f0 <task_fuc+0x74>
		else if(area_check(&curXY, &button_area) == 1 && befo_touched != curXY.touched){
 8002ace:	0020      	movs	r0, r4
 8002ad0:	4939      	ldr	r1, [pc, #228]	; (8002bb8 <task_fuc+0x33c>)
 8002ad2:	f7ff fc9f 	bl	8002414 <area_check>
 8002ad6:	2801      	cmp	r0, #1
 8002ad8:	d111      	bne.n	8002afe <task_fuc+0x282>
 8002ada:	7922      	ldrb	r2, [r4, #4]
 8002adc:	9b05      	ldr	r3, [sp, #20]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d00d      	beq.n	8002afe <task_fuc+0x282>
			if(curXY.touched == 1){
 8002ae2:	2a01      	cmp	r2, #1
 8002ae4:	d000      	beq.n	8002ae8 <task_fuc+0x26c>
 8002ae6:	e742      	b.n	800296e <task_fuc+0xf2>
				screen_update = 0;
 8002ae8:	2100      	movs	r1, #0
				if(button_state == off) button_state = on;
 8002aea:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <task_fuc+0x310>)
				screen_update = 0;
 8002aec:	4c25      	ldr	r4, [pc, #148]	; (8002b84 <task_fuc+0x308>)
				if(button_state == off) button_state = on;
 8002aee:	7818      	ldrb	r0, [r3, #0]
				screen_update = 0;
 8002af0:	7021      	strb	r1, [r4, #0]
				if(button_state == off) button_state = on;
 8002af2:	4288      	cmp	r0, r1
 8002af4:	d101      	bne.n	8002afa <task_fuc+0x27e>
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e739      	b.n	800296e <task_fuc+0xf2>
				else button_state = off;
 8002afa:	7019      	strb	r1, [r3, #0]
 8002afc:	e737      	b.n	800296e <task_fuc+0xf2>
			for(i = temp ; i < MAX_ITEM ; i++){
 8002afe:	2615      	movs	r6, #21
 8002b00:	ab06      	add	r3, sp, #24
 8002b02:	18f6      	adds	r6, r6, r3
 8002b04:	2300      	movs	r3, #0
 8002b06:	0035      	movs	r5, r6
 8002b08:	7033      	strb	r3, [r6, #0]
 8002b0a:	782c      	ldrb	r4, [r5, #0]
 8002b0c:	2c05      	cmp	r4, #5
 8002b0e:	d869      	bhi.n	8002be4 <task_fuc+0x368>
				if(i == brightness || i == buzzer) continue;
 8002b10:	2202      	movs	r2, #2
 8002b12:	1ee3      	subs	r3, r4, #3
 8002b14:	4393      	bics	r3, r2
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d100      	bne.n	8002b1e <task_fuc+0x2a2>
 8002b1c:	e10c      	b.n	8002d38 <task_fuc+0x4bc>
				else if(area_check(&curXY, &menu_data[i].area)){
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <task_fuc+0x2f8>)
 8002b20:	0121      	lsls	r1, r4, #4
 8002b22:	4811      	ldr	r0, [pc, #68]	; (8002b68 <task_fuc+0x2ec>)
 8002b24:	1859      	adds	r1, r3, r1
 8002b26:	f7ff fc75 	bl	8002414 <area_check>
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	d100      	bne.n	8002b30 <task_fuc+0x2b4>
 8002b2e:	e103      	b.n	8002d38 <task_fuc+0x4bc>
					if(curXY.touched == 1 && HAL_GetTick() - tick > 500){
 8002b30:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <task_fuc+0x2ec>)
 8002b32:	791b      	ldrb	r3, [r3, #4]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d155      	bne.n	8002be4 <task_fuc+0x368>
 8002b38:	f000 fcae 	bl	8003498 <HAL_GetTick>
 8002b3c:	9b06      	ldr	r3, [sp, #24]
 8002b3e:	1ac0      	subs	r0, r0, r3
 8002b40:	23fa      	movs	r3, #250	; 0xfa
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4298      	cmp	r0, r3
 8002b46:	d94d      	bls.n	8002be4 <task_fuc+0x368>
						screen_update = 0;
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <task_fuc+0x308>)
 8002b4c:	701a      	strb	r2, [r3, #0]
						tick = HAL_GetTick(); befo_item = i;
 8002b4e:	f000 fca3 	bl	8003498 <HAL_GetTick>
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <task_fuc+0x340>)
 8002b54:	9006      	str	r0, [sp, #24]
 8002b56:	7828      	ldrb	r0, [r5, #0]
 8002b58:	7018      	strb	r0, [r3, #0]
						switch(i){
 8002b5a:	2804      	cmp	r0, #4
 8002b5c:	d842      	bhi.n	8002be4 <task_fuc+0x368>
 8002b5e:	f7fd fadb 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002b62:	c22f      	.short	0xc22f
 8002b64:	41d2      	.short	0x41d2
 8002b66:	dc          	.byte	0xdc
 8002b67:	00          	.byte	0x00
 8002b68:	2000018c 	.word	0x2000018c
 8002b6c:	08006200 	.word	0x08006200
 8002b70:	20000120 	.word	0x20000120
 8002b74:	20000018 	.word	0x20000018
 8002b78:	08006208 	.word	0x08006208
 8002b7c:	20000078 	.word	0x20000078
 8002b80:	20000006 	.word	0x20000006
 8002b84:	200002b8 	.word	0x200002b8
 8002b88:	20000086 	.word	0x20000086
 8002b8c:	20000184 	.word	0x20000184
 8002b90:	200002bc 	.word	0x200002bc
 8002b94:	41200000 	.word	0x41200000
 8002b98:	20000194 	.word	0x20000194
 8002b9c:	20000185 	.word	0x20000185
 8002ba0:	001fffe0 	.word	0x001fffe0
 8002ba4:	0800620f 	.word	0x0800620f
 8002ba8:	08006217 	.word	0x08006217
 8002bac:	0800621f 	.word	0x0800621f
 8002bb0:	08006239 	.word	0x08006239
 8002bb4:	0800625a 	.word	0x0800625a
 8002bb8:	20000010 	.word	0x20000010
 8002bbc:	2000000e 	.word	0x2000000e
							sht41_value = (SHT41_t*)get_sensor(&i);
 8002bc0:	2015      	movs	r0, #21
 8002bc2:	ab06      	add	r3, sp, #24
 8002bc4:	18c0      	adds	r0, r0, r3
 8002bc6:	f7ff fb63 	bl	8002290 <get_sensor>
 8002bca:	4c8f      	ldr	r4, [pc, #572]	; (8002e08 <task_fuc+0x58c>)
							menu_data[temp].value = (uint16_t)(sht41_value->temperature * 10);
 8002bcc:	498f      	ldr	r1, [pc, #572]	; (8002e0c <task_fuc+0x590>)
							sht41_value = (SHT41_t*)get_sensor(&i);
 8002bce:	6020      	str	r0, [r4, #0]
							menu_data[temp].value = (uint16_t)(sht41_value->temperature * 10);
 8002bd0:	6800      	ldr	r0, [r0, #0]
 8002bd2:	f7fd fe93 	bl	80008fc <__aeabi_fmul>
 8002bd6:	f7fd fc77 	bl	80004c8 <__aeabi_f2uiz>
 8002bda:	4b8d      	ldr	r3, [pc, #564]	; (8002e10 <task_fuc+0x594>)
 8002bdc:	8158      	strh	r0, [r3, #10]
							free_reset((void*)&sht41_value);
 8002bde:	0020      	movs	r0, r4
							free_reset((void*)&ens160_value);
 8002be0:	f7ff fb6f 	bl	80022c2 <free_reset>
			if(befo_item == motor && motorM == 0){
 8002be4:	4a8b      	ldr	r2, [pc, #556]	; (8002e14 <task_fuc+0x598>)
 8002be6:	4b8c      	ldr	r3, [pc, #560]	; (8002e18 <task_fuc+0x59c>)
 8002be8:	7811      	ldrb	r1, [r2, #0]
 8002bea:	2904      	cmp	r1, #4
 8002bec:	d000      	beq.n	8002bf0 <task_fuc+0x374>
 8002bee:	e0a6      	b.n	8002d3e <task_fuc+0x4c2>
 8002bf0:	498a      	ldr	r1, [pc, #552]	; (8002e1c <task_fuc+0x5a0>)
 8002bf2:	7808      	ldrb	r0, [r1, #0]
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d000      	beq.n	8002bfa <task_fuc+0x37e>
 8002bf8:	e0a1      	b.n	8002d3e <task_fuc+0x4c2>
				if(befo_touched != curXY.touched && curXY.touched == 0) { motorM = 1; befo_item = MAX_ITEM; }
 8002bfa:	791b      	ldrb	r3, [r3, #4]
 8002bfc:	9805      	ldr	r0, [sp, #20]
 8002bfe:	4283      	cmp	r3, r0
 8002c00:	d005      	beq.n	8002c0e <task_fuc+0x392>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d103      	bne.n	8002c0e <task_fuc+0x392>
 8002c06:	3301      	adds	r3, #1
 8002c08:	700b      	strb	r3, [r1, #0]
 8002c0a:	3305      	adds	r3, #5
 8002c0c:	7013      	strb	r3, [r2, #0]
			AREA_Typedef maximum_area = { 140, 0, 140 + 200, 0 };
 8002c0e:	238c      	movs	r3, #140	; 0x8c
 8002c10:	ac0c      	add	r4, sp, #48	; 0x30
 8002c12:	8023      	strh	r3, [r4, #0]
			AREA_Typedef brightness_var_area = { 130 + menu_data[brightness].value * 2, menu_data[brightness].area.y0 + 20, 150 + menu_data[brightness].value * 2, menu_data[brightness].area.y0 + 40 };
 8002c14:	4d7e      	ldr	r5, [pc, #504]	; (8002e10 <task_fuc+0x594>)
			AREA_Typedef maximum_area = { 140, 0, 140 + 200, 0 };
 8002c16:	33c8      	adds	r3, #200	; 0xc8
 8002c18:	80a3      	strh	r3, [r4, #4]
			AREA_Typedef brightness_var_area = { 130 + menu_data[brightness].value * 2, menu_data[brightness].area.y0 + 20, 150 + menu_data[brightness].value * 2, menu_data[brightness].area.y0 + 40 };
 8002c1a:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 8002c1c:	a90e      	add	r1, sp, #56	; 0x38
 8002c1e:	3341      	adds	r3, #65	; 0x41
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	800b      	strh	r3, [r1, #0]
 8002c26:	8e68      	ldrh	r0, [r5, #50]	; 0x32
 8002c28:	3314      	adds	r3, #20
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	808b      	strh	r3, [r1, #4]
 8002c2e:	0003      	movs	r3, r0
			if(area_check(&curXY, &brightness_var_area) == 1 && area_check(&curXY, &maximum_area) == 1){
 8002c30:	4e79      	ldr	r6, [pc, #484]	; (8002e18 <task_fuc+0x59c>)
			AREA_Typedef brightness_var_area = { 130 + menu_data[brightness].value * 2, menu_data[brightness].area.y0 + 20, 150 + menu_data[brightness].value * 2, menu_data[brightness].area.y0 + 40 };
 8002c32:	3214      	adds	r2, #20
 8002c34:	3328      	adds	r3, #40	; 0x28
 8002c36:	b212      	sxth	r2, r2
 8002c38:	b21b      	sxth	r3, r3
			if(area_check(&curXY, &brightness_var_area) == 1 && area_check(&curXY, &maximum_area) == 1){
 8002c3a:	0030      	movs	r0, r6
			AREA_Typedef brightness_var_area = { 130 + menu_data[brightness].value * 2, menu_data[brightness].area.y0 + 20, 150 + menu_data[brightness].value * 2, menu_data[brightness].area.y0 + 40 };
 8002c3c:	804a      	strh	r2, [r1, #2]
 8002c3e:	80cb      	strh	r3, [r1, #6]
			maximum_area.y0 = menu_data[brightness].area.y0 + 20; maximum_area.y1 = menu_data[brightness].area.y0 + 40;
 8002c40:	8062      	strh	r2, [r4, #2]
 8002c42:	80e3      	strh	r3, [r4, #6]
			if(area_check(&curXY, &brightness_var_area) == 1 && area_check(&curXY, &maximum_area) == 1){
 8002c44:	f7ff fbe6 	bl	8002414 <area_check>
 8002c48:	2801      	cmp	r0, #1
 8002c4a:	d118      	bne.n	8002c7e <task_fuc+0x402>
 8002c4c:	0021      	movs	r1, r4
 8002c4e:	0030      	movs	r0, r6
 8002c50:	f7ff fbe0 	bl	8002414 <area_check>
 8002c54:	2801      	cmp	r0, #1
 8002c56:	d112      	bne.n	8002c7e <task_fuc+0x402>
				screen_update = 0;
 8002c58:	2200      	movs	r2, #0
 8002c5a:	4b71      	ldr	r3, [pc, #452]	; (8002e20 <task_fuc+0x5a4>)
				sprintf(bf, "dim=%d", menu_data[brightness].value);
 8002c5c:	4c71      	ldr	r4, [pc, #452]	; (8002e24 <task_fuc+0x5a8>)
				screen_update = 0;
 8002c5e:	701a      	strb	r2, [r3, #0]
				menu_data[brightness].value = (curXY.x - 140) / 2;
 8002c60:	2200      	movs	r2, #0
 8002c62:	5eb3      	ldrsh	r3, [r6, r2]
				sprintf(bf, "dim=%d", menu_data[brightness].value);
 8002c64:	0020      	movs	r0, r4
				menu_data[brightness].value = (curXY.x - 140) / 2;
 8002c66:	3b8c      	subs	r3, #140	; 0x8c
 8002c68:	0fda      	lsrs	r2, r3, #31
 8002c6a:	18d2      	adds	r2, r2, r3
 8002c6c:	1052      	asrs	r2, r2, #1
 8002c6e:	876a      	strh	r2, [r5, #58]	; 0x3a
				sprintf(bf, "dim=%d", menu_data[brightness].value);
 8002c70:	496d      	ldr	r1, [pc, #436]	; (8002e28 <task_fuc+0x5ac>)
 8002c72:	b292      	uxth	r2, r2
 8002c74:	f002 fd48 	bl	8005708 <siprintf>
				nextion_inst_set(bf);
 8002c78:	0020      	movs	r0, r4
 8002c7a:	f7ff fb71 	bl	8002360 <nextion_inst_set>
			AREA_Typedef buzzer_var_area = { 130 + menu_data[buzzer].value * 2, menu_data[buzzer].area.y0 + 20, 150 + menu_data[buzzer].value * 2, menu_data[buzzer].area.y0 + 40 };
 8002c7e:	4a64      	ldr	r2, [pc, #400]	; (8002e10 <task_fuc+0x594>)
 8002c80:	a910      	add	r1, sp, #64	; 0x40
 8002c82:	0016      	movs	r6, r2
 8002c84:	365a      	adds	r6, #90	; 0x5a
 8002c86:	8833      	ldrh	r3, [r6, #0]
 8002c88:	3252      	adds	r2, #82	; 0x52
 8002c8a:	3341      	adds	r3, #65	; 0x41
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	800b      	strh	r3, [r1, #0]
 8002c92:	8812      	ldrh	r2, [r2, #0]
 8002c94:	3314      	adds	r3, #20
 8002c96:	0010      	movs	r0, r2
 8002c98:	808b      	strh	r3, [r1, #4]
 8002c9a:	0013      	movs	r3, r2
			if(area_check(&curXY, &buzzer_var_area) == 1 && area_check(&curXY, &maximum_area) == 1){
 8002c9c:	4c5e      	ldr	r4, [pc, #376]	; (8002e18 <task_fuc+0x59c>)
			AREA_Typedef buzzer_var_area = { 130 + menu_data[buzzer].value * 2, menu_data[buzzer].area.y0 + 20, 150 + menu_data[buzzer].value * 2, menu_data[buzzer].area.y0 + 40 };
 8002c9e:	3014      	adds	r0, #20
 8002ca0:	3328      	adds	r3, #40	; 0x28
 8002ca2:	b200      	sxth	r0, r0
 8002ca4:	b21b      	sxth	r3, r3
			maximum_area.y0 = menu_data[buzzer].area.y0 + 20; maximum_area.y1 = menu_data[buzzer].area.y0 + 40;
 8002ca6:	aa06      	add	r2, sp, #24
			AREA_Typedef buzzer_var_area = { 130 + menu_data[buzzer].value * 2, menu_data[buzzer].area.y0 + 20, 150 + menu_data[buzzer].value * 2, menu_data[buzzer].area.y0 + 40 };
 8002ca8:	8048      	strh	r0, [r1, #2]
			maximum_area.y0 = menu_data[buzzer].area.y0 + 20; maximum_area.y1 = menu_data[buzzer].area.y0 + 40;
 8002caa:	8350      	strh	r0, [r2, #26]
			AREA_Typedef buzzer_var_area = { 130 + menu_data[buzzer].value * 2, menu_data[buzzer].area.y0 + 20, 150 + menu_data[buzzer].value * 2, menu_data[buzzer].area.y0 + 40 };
 8002cac:	80cb      	strh	r3, [r1, #6]
			if(area_check(&curXY, &buzzer_var_area) == 1 && area_check(&curXY, &maximum_area) == 1){
 8002cae:	0020      	movs	r0, r4
			maximum_area.y0 = menu_data[buzzer].area.y0 + 20; maximum_area.y1 = menu_data[buzzer].area.y0 + 40;
 8002cb0:	83d3      	strh	r3, [r2, #30]
			if(area_check(&curXY, &buzzer_var_area) == 1 && area_check(&curXY, &maximum_area) == 1){
 8002cb2:	f7ff fbaf 	bl	8002414 <area_check>
 8002cb6:	4d5d      	ldr	r5, [pc, #372]	; (8002e2c <task_fuc+0x5b0>)
 8002cb8:	2801      	cmp	r0, #1
 8002cba:	d14e      	bne.n	8002d5a <task_fuc+0x4de>
 8002cbc:	0020      	movs	r0, r4
 8002cbe:	a90c      	add	r1, sp, #48	; 0x30
 8002cc0:	f7ff fba8 	bl	8002414 <area_check>
 8002cc4:	2801      	cmp	r0, #1
 8002cc6:	d148      	bne.n	8002d5a <task_fuc+0x4de>
				screen_update = 0;
 8002cc8:	2200      	movs	r2, #0
 8002cca:	4b55      	ldr	r3, [pc, #340]	; (8002e20 <task_fuc+0x5a4>)
				buzzer_check = 1;
 8002ccc:	7028      	strb	r0, [r5, #0]
				screen_update = 0;
 8002cce:	701a      	strb	r2, [r3, #0]
				menu_data[buzzer].value = (curXY.x - 140) / 2;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	5ee2      	ldrsh	r2, [r4, r3]
				BUZ_hz_set(&menu_data[buzzer].value);
 8002cd4:	0030      	movs	r0, r6
				menu_data[buzzer].value = (curXY.x - 140) / 2;
 8002cd6:	3a8c      	subs	r2, #140	; 0x8c
 8002cd8:	0fd3      	lsrs	r3, r2, #31
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	105b      	asrs	r3, r3, #1
 8002cde:	8033      	strh	r3, [r6, #0]
				BUZ_hz_set(&menu_data[buzzer].value);
 8002ce0:	f7ff fb06 	bl	80022f0 <BUZ_hz_set>
 8002ce4:	e643      	b.n	800296e <task_fuc+0xf2>
							sht41_value = (SHT41_t*)get_sensor(&i);
 8002ce6:	2015      	movs	r0, #21
 8002ce8:	ab06      	add	r3, sp, #24
 8002cea:	18c0      	adds	r0, r0, r3
 8002cec:	f7ff fad0 	bl	8002290 <get_sensor>
 8002cf0:	4c45      	ldr	r4, [pc, #276]	; (8002e08 <task_fuc+0x58c>)
							menu_data[humidity].value = (uint16_t)(sht41_value->humidity * 10);
 8002cf2:	4946      	ldr	r1, [pc, #280]	; (8002e0c <task_fuc+0x590>)
							sht41_value = (SHT41_t*)get_sensor(&i);
 8002cf4:	6020      	str	r0, [r4, #0]
							menu_data[humidity].value = (uint16_t)(sht41_value->humidity * 10);
 8002cf6:	6840      	ldr	r0, [r0, #4]
 8002cf8:	f7fd fe00 	bl	80008fc <__aeabi_fmul>
 8002cfc:	f7fd fbe4 	bl	80004c8 <__aeabi_f2uiz>
 8002d00:	4b43      	ldr	r3, [pc, #268]	; (8002e10 <task_fuc+0x594>)
 8002d02:	8358      	strh	r0, [r3, #26]
 8002d04:	e76b      	b.n	8002bde <task_fuc+0x362>
							ens160_value = (uint16_t*)get_sensor(&i);
 8002d06:	0030      	movs	r0, r6
 8002d08:	f7ff fac2 	bl	8002290 <get_sensor>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	4848      	ldr	r0, [pc, #288]	; (8002e30 <task_fuc+0x5b4>)
							menu_data[co2].value = *ens160_value;
 8002d10:	881a      	ldrh	r2, [r3, #0]
							ens160_value = (uint16_t*)get_sensor(&i);
 8002d12:	6003      	str	r3, [r0, #0]
							menu_data[co2].value = *ens160_value;
 8002d14:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <task_fuc+0x594>)
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d18:	e762      	b.n	8002be0 <task_fuc+0x364>
							menu_data[motor].value = (menu_data[motor].value < 9) ? menu_data[motor].value + 1 : 0;
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <task_fuc+0x594>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	334a      	adds	r3, #74	; 0x4a
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d801      	bhi.n	8002d2a <task_fuc+0x4ae>
 8002d26:	3301      	adds	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	4939      	ldr	r1, [pc, #228]	; (8002e10 <task_fuc+0x594>)
							motor_string_set(&motor_string, &menu_data[motor].value);
 8002d2c:	4841      	ldr	r0, [pc, #260]	; (8002e34 <task_fuc+0x5b8>)
							menu_data[motor].value = (menu_data[motor].value < 9) ? menu_data[motor].value + 1 : 0;
 8002d2e:	314a      	adds	r1, #74	; 0x4a
 8002d30:	800a      	strh	r2, [r1, #0]
							motor_string_set(&motor_string, &menu_data[motor].value);
 8002d32:	f7ff fbd7 	bl	80024e4 <motor_string_set>
							break;
 8002d36:	e755      	b.n	8002be4 <task_fuc+0x368>
			for(i = temp ; i < MAX_ITEM ; i++){
 8002d38:	3401      	adds	r4, #1
 8002d3a:	702c      	strb	r4, [r5, #0]
 8002d3c:	e6e5      	b.n	8002b0a <task_fuc+0x28e>
			else if(i == MAX_ITEM || curXY.touched == 0) tick = HAL_GetTick();
 8002d3e:	2215      	movs	r2, #21
 8002d40:	a906      	add	r1, sp, #24
 8002d42:	1852      	adds	r2, r2, r1
 8002d44:	7812      	ldrb	r2, [r2, #0]
 8002d46:	2a06      	cmp	r2, #6
 8002d48:	d003      	beq.n	8002d52 <task_fuc+0x4d6>
 8002d4a:	791b      	ldrb	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d000      	beq.n	8002d52 <task_fuc+0x4d6>
 8002d50:	e75d      	b.n	8002c0e <task_fuc+0x392>
 8002d52:	f000 fba1 	bl	8003498 <HAL_GetTick>
 8002d56:	9006      	str	r0, [sp, #24]
 8002d58:	e759      	b.n	8002c0e <task_fuc+0x392>
			else if(buzzer_check == 1 && befo_touched != curXY.touched && curXY.touched == 0){
 8002d5a:	782a      	ldrb	r2, [r5, #0]
 8002d5c:	2a01      	cmp	r2, #1
 8002d5e:	d000      	beq.n	8002d62 <task_fuc+0x4e6>
 8002d60:	e605      	b.n	800296e <task_fuc+0xf2>
 8002d62:	7923      	ldrb	r3, [r4, #4]
 8002d64:	9905      	ldr	r1, [sp, #20]
 8002d66:	4299      	cmp	r1, r3
 8002d68:	d100      	bne.n	8002d6c <task_fuc+0x4f0>
 8002d6a:	e600      	b.n	800296e <task_fuc+0xf2>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d000      	beq.n	8002d72 <task_fuc+0x4f6>
 8002d70:	e5fd      	b.n	800296e <task_fuc+0xf2>
				buzzer_check = 0;
 8002d72:	702b      	strb	r3, [r5, #0]
				buzM = 1; buz_on_time = 500;
 8002d74:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <task_fuc+0x5bc>)
 8002d76:	701a      	strb	r2, [r3, #0]
 8002d78:	4b30      	ldr	r3, [pc, #192]	; (8002e3c <task_fuc+0x5c0>)
 8002d7a:	32f4      	adds	r2, #244	; 0xf4
 8002d7c:	32ff      	adds	r2, #255	; 0xff
 8002d7e:	801a      	strh	r2, [r3, #0]
 8002d80:	e5f5      	b.n	800296e <task_fuc+0xf2>
		else buzM = (buzM == 2) ? 0 : buzM;
 8002d82:	7811      	ldrb	r1, [r2, #0]
 8002d84:	2902      	cmp	r1, #2
 8002d86:	d100      	bne.n	8002d8a <task_fuc+0x50e>
 8002d88:	2100      	movs	r1, #0
 8002d8a:	7011      	strb	r1, [r2, #0]
 8002d8c:	e659      	b.n	8002a42 <task_fuc+0x1c6>
		LED(1,led_state[led1]);
 8002d8e:	2280      	movs	r2, #128	; 0x80
 8002d90:	0312      	lsls	r2, r2, #12
 8002d92:	e657      	b.n	8002a44 <task_fuc+0x1c8>
		LED(2,led_state[led2]);
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	0352      	lsls	r2, r2, #13
 8002d98:	e65b      	b.n	8002a52 <task_fuc+0x1d6>
				nextion_inst_set("thdra=0");
 8002d9a:	4d29      	ldr	r5, [pc, #164]	; (8002e40 <task_fuc+0x5c4>)
 8002d9c:	0028      	movs	r0, r5
 8002d9e:	f7ff fadf 	bl	8002360 <nextion_inst_set>
				nextion_inst_set("thdra=0");
 8002da2:	0028      	movs	r0, r5
 8002da4:	f7ff fadc 	bl	8002360 <nextion_inst_set>
				nextion_inst_set("thdra=0");
 8002da8:	0028      	movs	r0, r5
 8002daa:	f7ff fad9 	bl	8002360 <nextion_inst_set>
				for(ITEM_Typedef i = temp ; i < MAX_ITEM ; i++)
 8002dae:	4d18      	ldr	r5, [pc, #96]	; (8002e10 <task_fuc+0x594>)
 8002db0:	350a      	adds	r5, #10
					eeprom_save(addr_array[i], &menu_data[i].value);
 8002db2:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <task_fuc+0x5c8>)
 8002db4:	0029      	movs	r1, r5
 8002db6:	5ce0      	ldrb	r0, [r4, r3]
				for(ITEM_Typedef i = temp ; i < MAX_ITEM ; i++)
 8002db8:	3401      	adds	r4, #1
					eeprom_save(addr_array[i], &menu_data[i].value);
 8002dba:	f7ff faad 	bl	8002318 <eeprom_save>
				for(ITEM_Typedef i = temp ; i < MAX_ITEM ; i++)
 8002dbe:	3510      	adds	r5, #16
 8002dc0:	2c06      	cmp	r4, #6
 8002dc2:	d1f6      	bne.n	8002db2 <task_fuc+0x536>
	if(state == 1) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002dc4:	f7ff fa5c 	bl	8002280 <BUZ.part.0>
				HAL_Delay(100);
 8002dc8:	2064      	movs	r0, #100	; 0x64
 8002dca:	f000 fb6b 	bl	80034a4 <HAL_Delay>
				BUZ(0);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f7ff fa80 	bl	80022d4 <BUZ>
				HAL_Delay(100);
 8002dd4:	2064      	movs	r0, #100	; 0x64
 8002dd6:	f000 fb65 	bl	80034a4 <HAL_Delay>
	if(state == 1) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002dda:	f7ff fa51 	bl	8002280 <BUZ.part.0>
				HAL_Delay(100);
 8002dde:	2064      	movs	r0, #100	; 0x64
 8002de0:	f000 fb60 	bl	80034a4 <HAL_Delay>
				BUZ(0);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7ff fa75 	bl	80022d4 <BUZ>
			sign_check = 1;
 8002dea:	2301      	movs	r3, #1
 8002dec:	9304      	str	r3, [sp, #16]
				sign_f = 2;
 8002dee:	18db      	adds	r3, r3, r3
 8002df0:	9303      	str	r3, [sp, #12]
 8002df2:	e658      	b.n	8002aa6 <task_fuc+0x22a>
		else if(SW(2) == 0) sign_check = 0;
 8002df4:	2202      	movs	r2, #2
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	425a      	negs	r2, r3
 8002dfc:	4153      	adcs	r3, r2
 8002dfe:	9a04      	ldr	r2, [sp, #16]
 8002e00:	425b      	negs	r3, r3
 8002e02:	401a      	ands	r2, r3
 8002e04:	9204      	str	r2, [sp, #16]
 8002e06:	e64e      	b.n	8002aa6 <task_fuc+0x22a>
 8002e08:	200002bc 	.word	0x200002bc
 8002e0c:	41200000 	.word	0x41200000
 8002e10:	20000018 	.word	0x20000018
 8002e14:	2000000e 	.word	0x2000000e
 8002e18:	2000018c 	.word	0x2000018c
 8002e1c:	200002b4 	.word	0x200002b4
 8002e20:	200002b8 	.word	0x200002b8
 8002e24:	20000120 	.word	0x20000120
 8002e28:	08006208 	.word	0x08006208
 8002e2c:	2000018a 	.word	0x2000018a
 8002e30:	20000194 	.word	0x20000194
 8002e34:	20000078 	.word	0x20000078
 8002e38:	20000185 	.word	0x20000185
 8002e3c:	20000188 	.word	0x20000188
 8002e40:	08006200 	.word	0x08006200
 8002e44:	20000000 	.word	0x20000000

08002e48 <HAL_SYSTICK_Callback>:
	}
}

/* make interrupt signal every 1ms */
void HAL_SYSTICK_Callback(void){
 8002e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(buzM) buz_cnt++;
	else buz_cnt = 0;
 8002e4a:	2300      	movs	r3, #0
	if(buzM) buz_cnt++;
 8002e4c:	4e20      	ldr	r6, [pc, #128]	; (8002ed0 <HAL_SYSTICK_Callback+0x88>)
 8002e4e:	4921      	ldr	r1, [pc, #132]	; (8002ed4 <HAL_SYSTICK_Callback+0x8c>)
 8002e50:	7830      	ldrb	r0, [r6, #0]
 8002e52:	4298      	cmp	r0, r3
 8002e54:	d002      	beq.n	8002e5c <HAL_SYSTICK_Callback+0x14>
 8002e56:	880b      	ldrh	r3, [r1, #0]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	b29b      	uxth	r3, r3

	if(motorM) motor_cnt++;
	else motor_cnt = 0;
 8002e5c:	2200      	movs	r2, #0
	if(motorM) motor_cnt++;
 8002e5e:	4d1e      	ldr	r5, [pc, #120]	; (8002ed8 <HAL_SYSTICK_Callback+0x90>)
 8002e60:	4c1e      	ldr	r4, [pc, #120]	; (8002edc <HAL_SYSTICK_Callback+0x94>)
 8002e62:	782f      	ldrb	r7, [r5, #0]
 8002e64:	800b      	strh	r3, [r1, #0]
 8002e66:	4297      	cmp	r7, r2
 8002e68:	d002      	beq.n	8002e70 <HAL_SYSTICK_Callback+0x28>
 8002e6a:	8822      	ldrh	r2, [r4, #0]
 8002e6c:	3201      	adds	r2, #1
 8002e6e:	b292      	uxth	r2, r2
 8002e70:	8022      	strh	r2, [r4, #0]

	if(buzM == 1){
 8002e72:	2801      	cmp	r0, #1
 8002e74:	d11c      	bne.n	8002eb0 <HAL_SYSTICK_Callback+0x68>
		if(buz_cnt < buz_on_time) BUZ(1);
 8002e76:	4a1a      	ldr	r2, [pc, #104]	; (8002ee0 <HAL_SYSTICK_Callback+0x98>)
 8002e78:	8810      	ldrh	r0, [r2, #0]
 8002e7a:	4298      	cmp	r0, r3
 8002e7c:	d911      	bls.n	8002ea2 <HAL_SYSTICK_Callback+0x5a>
	if(state == 1) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002e7e:	f7ff f9ff 	bl	8002280 <BUZ.part.0>
			state ^= 1;
			BUZ(state);
		}
	}

	if(motorM == 1){
 8002e82:	7828      	ldrb	r0, [r5, #0]
 8002e84:	2801      	cmp	r0, #1
 8002e86:	d10b      	bne.n	8002ea0 <HAL_SYSTICK_Callback+0x58>
		if(motor_cnt < 2000) motor_set(DRV8830_CW, &motor_voltage[menu_data[motor].value]);
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <HAL_SYSTICK_Callback+0x9c>)
 8002e8a:	4917      	ldr	r1, [pc, #92]	; (8002ee8 <HAL_SYSTICK_Callback+0xa0>)
 8002e8c:	334a      	adds	r3, #74	; 0x4a
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	8822      	ldrh	r2, [r4, #0]
 8002e92:	18c9      	adds	r1, r1, r3
 8002e94:	23fa      	movs	r3, #250	; 0xfa
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d215      	bcs.n	8002ec8 <HAL_SYSTICK_Callback+0x80>
		else{
			motorM = motor_cnt = 0;
			motor_set(DRV8830_STOP, &motor_voltage[menu_data[motor].value]);
 8002e9c:	f7ff fb0c 	bl	80024b8 <motor_set>
		}
	}
}
 8002ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			buz_cnt = buz_on_time = 0;
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	8010      	strh	r0, [r2, #0]
 8002ea6:	8008      	strh	r0, [r1, #0]
			buzM = 0;
 8002ea8:	7030      	strb	r0, [r6, #0]
			BUZ(state);
 8002eaa:	f7ff fa13 	bl	80022d4 <BUZ>
 8002eae:	e7e8      	b.n	8002e82 <HAL_SYSTICK_Callback+0x3a>
	else if(buzM == 2){
 8002eb0:	2802      	cmp	r0, #2
 8002eb2:	d1e6      	bne.n	8002e82 <HAL_SYSTICK_Callback+0x3a>
		if(buz_cnt > 125){
 8002eb4:	2b7d      	cmp	r3, #125	; 0x7d
 8002eb6:	d9e4      	bls.n	8002e82 <HAL_SYSTICK_Callback+0x3a>
			buz_cnt = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	800b      	strh	r3, [r1, #0]
			state ^= 1;
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_SYSTICK_Callback+0xa4>)
 8002ebe:	3801      	subs	r0, #1
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	4050      	eors	r0, r2
 8002ec4:	7018      	strb	r0, [r3, #0]
 8002ec6:	e7f0      	b.n	8002eaa <HAL_SYSTICK_Callback+0x62>
			motorM = motor_cnt = 0;
 8002ec8:	2000      	movs	r0, #0
 8002eca:	8020      	strh	r0, [r4, #0]
 8002ecc:	7028      	strb	r0, [r5, #0]
 8002ece:	e7e5      	b.n	8002e9c <HAL_SYSTICK_Callback+0x54>
 8002ed0:	20000185 	.word	0x20000185
 8002ed4:	20000186 	.word	0x20000186
 8002ed8:	200002b4 	.word	0x200002b4
 8002edc:	200002b6 	.word	0x200002b6
 8002ee0:	20000188 	.word	0x20000188
 8002ee4:	20000018 	.word	0x20000018
 8002ee8:	2000007c 	.word	0x2000007c
 8002eec:	200002c0 	.word	0x200002c0

08002ef0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002ef0:	b510      	push	{r4, lr}
 8002ef2:	b09c      	sub	sp, #112	; 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ef4:	2224      	movs	r2, #36	; 0x24
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	a80f      	add	r0, sp, #60	; 0x3c
 8002efa:	f002 fb08 	bl	800550e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002efe:	2214      	movs	r2, #20
 8002f00:	2100      	movs	r1, #0
 8002f02:	a801      	add	r0, sp, #4
 8002f04:	f002 fb03 	bl	800550e <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f08:	2220      	movs	r2, #32
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	a806      	add	r0, sp, #24
 8002f0e:	f002 fafe 	bl	800550e <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f12:	491d      	ldr	r1, [pc, #116]	; (8002f88 <SystemClock_Config+0x98>)
 8002f14:	4a1d      	ldr	r2, [pc, #116]	; (8002f8c <SystemClock_Config+0x9c>)
 8002f16:	680b      	ldr	r3, [r1, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f18:	2401      	movs	r4, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f24:	2302      	movs	r3, #2
 8002f26:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f28:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	02db      	lsls	r3, r3, #11
 8002f32:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002f34:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f36:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002f38:	03db      	lsls	r3, r3, #15
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f3a:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f3c:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f3e:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002f40:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f42:	f001 f93f 	bl	80041c4 <HAL_RCC_OscConfig>
 8002f46:	2800      	cmp	r0, #0
 8002f48:	d001      	beq.n	8002f4e <SystemClock_Config+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4a:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002f4c:	e7fe      	b.n	8002f4c <SystemClock_Config+0x5c>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f4e:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f50:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f52:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f54:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f56:	3b0c      	subs	r3, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f58:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f5a:	0021      	movs	r1, r4
 8002f5c:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f5e:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f60:	f001 fbb2 	bl	80046c8 <HAL_RCC_ClockConfig>
 8002f64:	2800      	cmp	r0, #0
 8002f66:	d001      	beq.n	8002f6c <SystemClock_Config+0x7c>
 8002f68:	b672      	cpsid	i
	while (1)
 8002f6a:	e7fe      	b.n	8002f6a <SystemClock_Config+0x7a>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002f6c:	2309      	movs	r3, #9
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f6e:	9008      	str	r0, [sp, #32]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f70:	900b      	str	r0, [sp, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f72:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002f74:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f76:	f001 fc95 	bl	80048a4 <HAL_RCCEx_PeriphCLKConfig>
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d001      	beq.n	8002f82 <SystemClock_Config+0x92>
 8002f7e:	b672      	cpsid	i
	while (1)
 8002f80:	e7fe      	b.n	8002f80 <SystemClock_Config+0x90>
}
 8002f82:	b01c      	add	sp, #112	; 0x70
 8002f84:	bd10      	pop	{r4, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	40007000 	.word	0x40007000
 8002f8c:	ffffe7ff 	.word	0xffffe7ff

08002f90 <main>:
{
 8002f90:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002f92:	2501      	movs	r5, #1
{
 8002f94:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 8002f96:	f000 fa5f 	bl	8003458 <HAL_Init>
	SystemClock_Config();
 8002f9a:	f7ff ffa9 	bl	8002ef0 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9e:	2214      	movs	r2, #20
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	a805      	add	r0, sp, #20
 8002fa4:	f002 fab3 	bl	800550e <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa8:	2102      	movs	r1, #2
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002faa:	27a0      	movs	r7, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002fac:	4b6a      	ldr	r3, [pc, #424]	; (8003158 <main+0x1c8>)
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002fae:	05ff      	lsls	r7, r7, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002fb2:	0038      	movs	r0, r7
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb4:	432a      	orrs	r2, r5
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fba:	2400      	movs	r4, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbc:	402a      	ands	r2, r5
 8002fbe:	9201      	str	r2, [sp, #4]
 8002fc0:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	huart1.Instance = USART1;
 8002fc4:	4e65      	ldr	r6, [pc, #404]	; (800315c <main+0x1cc>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002fcc:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002fce:	400b      	ands	r3, r1
 8002fd0:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002fd2:	3136      	adds	r1, #54	; 0x36
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd4:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002fd6:	f000 fba1 	bl	800371c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8002fda:	2307      	movs	r3, #7
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fdc:	0038      	movs	r0, r7
 8002fde:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8002fe0:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fe2:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fe4:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe6:	f000 fad9 	bl	800359c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8002fea:	2338      	movs	r3, #56	; 0x38
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fec:	0038      	movs	r0, r7
 8002fee:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8002ff0:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff2:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff8:	f000 fad0 	bl	800359c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8002ffc:	230a      	movs	r3, #10
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffe:	4858      	ldr	r0, [pc, #352]	; (8003160 <main+0x1d0>)
 8003000:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8003002:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003004:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003008:	f000 fac8 	bl	800359c <HAL_GPIO_Init>
	huart1.Init.BaudRate = 9600;
 800300c:	2396      	movs	r3, #150	; 0x96
	huart1.Instance = USART1;
 800300e:	4855      	ldr	r0, [pc, #340]	; (8003164 <main+0x1d4>)
	huart1.Init.BaudRate = 9600;
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	6043      	str	r3, [r0, #4]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003014:	230c      	movs	r3, #12
	huart1.Instance = USART1;
 8003016:	6006      	str	r6, [r0, #0]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003018:	6084      	str	r4, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800301a:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800301c:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800301e:	6143      	str	r3, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003020:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003022:	61c4      	str	r4, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003024:	6204      	str	r4, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003026:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003028:	f002 f9f8 	bl	800541c <HAL_UART_Init>
 800302c:	0005      	movs	r5, r0
 800302e:	42a0      	cmp	r0, r4
 8003030:	d001      	beq.n	8003036 <main+0xa6>
 8003032:	b672      	cpsid	i
	while (1)
 8003034:	e7fe      	b.n	8003034 <main+0xa4>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003036:	0001      	movs	r1, r0
 8003038:	2208      	movs	r2, #8
 800303a:	a803      	add	r0, sp, #12
 800303c:	f002 fa67 	bl	800550e <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003040:	2210      	movs	r2, #16
 8003042:	0029      	movs	r1, r5
 8003044:	a805      	add	r0, sp, #20
 8003046:	f002 fa62 	bl	800550e <memset>
	htim2.Instance = TIM2;
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	4c46      	ldr	r4, [pc, #280]	; (8003168 <main+0x1d8>)
 800304e:	05db      	lsls	r3, r3, #23
 8003050:	6023      	str	r3, [r4, #0]
	htim2.Init.Prescaler = 32-1;
 8003052:	231f      	movs	r3, #31
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003054:	0020      	movs	r0, r4
	htim2.Init.Prescaler = 32-1;
 8003056:	6063      	str	r3, [r4, #4]
	htim2.Init.Period = 250-1;
 8003058:	33da      	adds	r3, #218	; 0xda
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800305a:	60a5      	str	r5, [r4, #8]
	htim2.Init.Period = 250-1;
 800305c:	60e3      	str	r3, [r4, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800305e:	6125      	str	r5, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003060:	6165      	str	r5, [r4, #20]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003062:	f001 fdc3 	bl	8004bec <HAL_TIM_PWM_Init>
 8003066:	2800      	cmp	r0, #0
 8003068:	d001      	beq.n	800306e <main+0xde>
 800306a:	b672      	cpsid	i
	while (1)
 800306c:	e7fe      	b.n	800306c <main+0xdc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800306e:	9003      	str	r0, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003070:	9004      	str	r0, [sp, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003072:	a903      	add	r1, sp, #12
 8003074:	0020      	movs	r0, r4
 8003076:	f001 fe73 	bl	8004d60 <HAL_TIMEx_MasterConfigSynchronization>
 800307a:	1e02      	subs	r2, r0, #0
 800307c:	d001      	beq.n	8003082 <main+0xf2>
 800307e:	b672      	cpsid	i
	while (1)
 8003080:	e7fe      	b.n	8003080 <main+0xf0>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003082:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003084:	9007      	str	r0, [sp, #28]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003086:	9305      	str	r3, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003088:	9008      	str	r0, [sp, #32]
	sConfigOC.Pulse = 125-1;
 800308a:	331c      	adds	r3, #28
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800308c:	0020      	movs	r0, r4
 800308e:	a905      	add	r1, sp, #20
	sConfigOC.Pulse = 125-1;
 8003090:	9306      	str	r3, [sp, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003092:	f001 fdd7 	bl	8004c44 <HAL_TIM_PWM_ConfigChannel>
 8003096:	1e05      	subs	r5, r0, #0
 8003098:	d001      	beq.n	800309e <main+0x10e>
 800309a:	b672      	cpsid	i
	while (1)
 800309c:	e7fe      	b.n	800309c <main+0x10c>
	HAL_TIM_MspPostInit(&htim2);
 800309e:	0020      	movs	r0, r4
 80030a0:	f000 f90c 	bl	80032bc <HAL_TIM_MspPostInit>
	hi2c1.Instance = I2C1;
 80030a4:	4c31      	ldr	r4, [pc, #196]	; (800316c <main+0x1dc>)
 80030a6:	4b32      	ldr	r3, [pc, #200]	; (8003170 <main+0x1e0>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030a8:	0020      	movs	r0, r4
	hi2c1.Instance = I2C1;
 80030aa:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x00300F38;
 80030ac:	4b31      	ldr	r3, [pc, #196]	; (8003174 <main+0x1e4>)
	hi2c1.Init.OwnAddress1 = 0;
 80030ae:	60a5      	str	r5, [r4, #8]
	hi2c1.Init.Timing = 0x00300F38;
 80030b0:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030b2:	2301      	movs	r3, #1
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030b4:	6125      	str	r5, [r4, #16]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030b6:	60e3      	str	r3, [r4, #12]
	hi2c1.Init.OwnAddress2 = 0;
 80030b8:	6165      	str	r5, [r4, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030ba:	61a5      	str	r5, [r4, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030bc:	61e5      	str	r5, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030be:	6225      	str	r5, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030c0:	f000 fcb4 	bl	8003a2c <HAL_I2C_Init>
 80030c4:	1e01      	subs	r1, r0, #0
 80030c6:	d001      	beq.n	80030cc <main+0x13c>
 80030c8:	b672      	cpsid	i
	while (1)
 80030ca:	e7fe      	b.n	80030ca <main+0x13a>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030cc:	0020      	movs	r0, r4
 80030ce:	f000 ffe7 	bl	80040a0 <HAL_I2CEx_ConfigAnalogFilter>
 80030d2:	1e01      	subs	r1, r0, #0
 80030d4:	d001      	beq.n	80030da <main+0x14a>
 80030d6:	b672      	cpsid	i
	while (1)
 80030d8:	e7fe      	b.n	80030d8 <main+0x148>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80030da:	0020      	movs	r0, r4
 80030dc:	f001 f806 	bl	80040ec <HAL_I2CEx_ConfigDigitalFilter>
 80030e0:	1e04      	subs	r4, r0, #0
 80030e2:	d001      	beq.n	80030e8 <main+0x158>
 80030e4:	b672      	cpsid	i
	while (1)
 80030e6:	e7fe      	b.n	80030e6 <main+0x156>
	initEns160();
 80030e8:	f7ff f89e 	bl	8002228 <initEns160>
	initDrv8830();
 80030ec:	f7ff f864 	bl	80021b8 <initDrv8830>
	LED(1,0);
 80030f0:	2308      	movs	r3, #8
	nextion_inst_set("baud=921600");
 80030f2:	4d21      	ldr	r5, [pc, #132]	; (8003178 <main+0x1e8>)
	LED(1,0);
 80030f4:	61bb      	str	r3, [r7, #24]
	LED(2,0);
 80030f6:	18db      	adds	r3, r3, r3
 80030f8:	61bb      	str	r3, [r7, #24]
	LED(3,0);
 80030fa:	3310      	adds	r3, #16
 80030fc:	61bb      	str	r3, [r7, #24]
	nextion_inst_set("baud=921600");
 80030fe:	0028      	movs	r0, r5
 8003100:	f7ff f92e 	bl	8002360 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 8003104:	0028      	movs	r0, r5
 8003106:	f7ff f92b 	bl	8002360 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 800310a:	0028      	movs	r0, r5
 800310c:	f7ff f928 	bl	8002360 <nextion_inst_set>
	HAL_Delay(50);
 8003110:	2032      	movs	r0, #50	; 0x32
 8003112:	f000 f9c7 	bl	80034a4 <HAL_Delay>
	USART1->CR1 &= (~USART_CR1_UE);  // usart stop
 8003116:	2201      	movs	r2, #1
 8003118:	6833      	ldr	r3, [r6, #0]
	HAL_Delay(1000);
 800311a:	20fa      	movs	r0, #250	; 0xfa
	USART1->CR1 &= (~USART_CR1_UE);  // usart stop
 800311c:	4393      	bics	r3, r2
 800311e:	6033      	str	r3, [r6, #0]
	USART1->BRR = 0x23;              // baudrate change
 8003120:	2323      	movs	r3, #35	; 0x23
 8003122:	60f3      	str	r3, [r6, #12]
	USART1->CR1 |= USART_CR1_UE;     // usart restart
 8003124:	6833      	ldr	r3, [r6, #0]
	HAL_Delay(1000);
 8003126:	0080      	lsls	r0, r0, #2
	USART1->CR1 |= USART_CR1_UE;     // usart restart
 8003128:	4313      	orrs	r3, r2
 800312a:	6033      	str	r3, [r6, #0]
	HAL_Delay(1000);
 800312c:	f000 f9ba 	bl	80034a4 <HAL_Delay>
	for(ITEM_Typedef i = temp ; i < MAX_ITEM ; i++)
 8003130:	4d12      	ldr	r5, [pc, #72]	; (800317c <main+0x1ec>)
 8003132:	002e      	movs	r6, r5
		menu_data[i].value = eeprom_read(addr_array[i]);
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <main+0x1f0>)
 8003136:	5ce0      	ldrb	r0, [r4, r3]
 8003138:	f7ff f904 	bl	8002344 <eeprom_read>
	for(ITEM_Typedef i = temp ; i < MAX_ITEM ; i++)
 800313c:	3401      	adds	r4, #1
		menu_data[i].value = eeprom_read(addr_array[i]);
 800313e:	8168      	strh	r0, [r5, #10]
	for(ITEM_Typedef i = temp ; i < MAX_ITEM ; i++)
 8003140:	3510      	adds	r5, #16
 8003142:	2c06      	cmp	r4, #6
 8003144:	d1f6      	bne.n	8003134 <main+0x1a4>
	setMotor(DRV8830_STOP);
 8003146:	2000      	movs	r0, #0
 8003148:	f7ff f84a 	bl	80021e0 <setMotor>
	BUZ_hz_set(&menu_data[buzzer].value);
 800314c:	0030      	movs	r0, r6
 800314e:	305a      	adds	r0, #90	; 0x5a
 8003150:	f7ff f8ce 	bl	80022f0 <BUZ_hz_set>
	task_fuc();
 8003154:	f7ff fb92 	bl	800287c <task_fuc>
 8003158:	40021000 	.word	0x40021000
 800315c:	40013800 	.word	0x40013800
 8003160:	50000400 	.word	0x50000400
 8003164:	2000022c 	.word	0x2000022c
 8003168:	200001ec 	.word	0x200001ec
 800316c:	20000198 	.word	0x20000198
 8003170:	40005400 	.word	0x40005400
 8003174:	00300f38 	.word	0x00300f38
 8003178:	0800628f 	.word	0x0800628f
 800317c:	20000018 	.word	0x20000018
 8003180:	20000000 	.word	0x20000000

08003184 <getTempSht41>:
#include "sht41.h"

extern I2C_HandleTypeDef hi2c1;

SHT41_t	getTempSht41() {
 8003184:	b570      	push	{r4, r5, r6, lr}
	uint8_t txData = SHT41_MeasureHigh;
 8003186:	250f      	movs	r5, #15
 8003188:	23fd      	movs	r3, #253	; 0xfd
	uint8_t	rxData[6];
	SHT41_t result;
	uint16_t buf[2];

	HAL_I2C_Init(&hi2c1);
 800318a:	4e21      	ldr	r6, [pc, #132]	; (8003210 <getTempSht41+0x8c>)
SHT41_t	getTempSht41() {
 800318c:	b086      	sub	sp, #24
 800318e:	0004      	movs	r4, r0
	uint8_t txData = SHT41_MeasureHigh;
 8003190:	446d      	add	r5, sp
	HAL_I2C_Init(&hi2c1);
 8003192:	0030      	movs	r0, r6
	uint8_t txData = SHT41_MeasureHigh;
 8003194:	702b      	strb	r3, [r5, #0]
	HAL_I2C_Init(&hi2c1);
 8003196:	f000 fc49 	bl	8003a2c <HAL_I2C_Init>
	HAL_StatusTypeDef status = HAL_ERROR;
	HAL_I2C_Master_Transmit(&hi2c1, SHT41_DeviceAddress, &txData, 1, 1);
 800319a:	2301      	movs	r3, #1
 800319c:	002a      	movs	r2, r5
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2188      	movs	r1, #136	; 0x88
 80031a2:	0030      	movs	r0, r6
 80031a4:	f000 fc98 	bl	8003ad8 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80031a8:	2014      	movs	r0, #20
 80031aa:	f000 f97b 	bl	80034a4 <HAL_Delay>
	status = HAL_I2C_Master_Receive(&hi2c1, SHT41_DeviceAddress, rxData, 6, 10);
 80031ae:	230a      	movs	r3, #10
 80031b0:	ad04      	add	r5, sp, #16
 80031b2:	002a      	movs	r2, r5
 80031b4:	2188      	movs	r1, #136	; 0x88
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	0030      	movs	r0, r6
 80031ba:	3b04      	subs	r3, #4
 80031bc:	f000 fd1e 	bl	8003bfc <HAL_I2C_Master_Receive>
	buf[0] = rxData[0] << 8 | rxData[1];
	buf[1] = rxData[3] << 8 | rxData[4];
	result.temperature = -45.0f + (175.0f * ((float)buf[0] / 65535.0f));
	result.humidity = -6.0f + (125.0f * ((float)buf[1] / 65535.0f));
 80031c0:	2213      	movs	r2, #19
 80031c2:	446a      	add	r2, sp
 80031c4:	7850      	ldrb	r0, [r2, #1]
 80031c6:	7813      	ldrb	r3, [r2, #0]
 80031c8:	0200      	lsls	r0, r0, #8
 80031ca:	4318      	orrs	r0, r3
 80031cc:	ba40      	rev16	r0, r0
 80031ce:	b280      	uxth	r0, r0
 80031d0:	f7fd fed6 	bl	8000f80 <__aeabi_ui2f>
 80031d4:	490f      	ldr	r1, [pc, #60]	; (8003214 <getTempSht41+0x90>)
 80031d6:	f7fd fa79 	bl	80006cc <__aeabi_fdiv>
 80031da:	490f      	ldr	r1, [pc, #60]	; (8003218 <getTempSht41+0x94>)
 80031dc:	f7fd fb8e 	bl	80008fc <__aeabi_fmul>
 80031e0:	490e      	ldr	r1, [pc, #56]	; (800321c <getTempSht41+0x98>)
 80031e2:	f7fd fcb1 	bl	8000b48 <__aeabi_fsub>
 80031e6:	1c06      	adds	r6, r0, #0
	result.temperature = -45.0f + (175.0f * ((float)buf[0] / 65535.0f));
 80031e8:	8828      	ldrh	r0, [r5, #0]
 80031ea:	ba40      	rev16	r0, r0
 80031ec:	b280      	uxth	r0, r0
 80031ee:	f7fd fec7 	bl	8000f80 <__aeabi_ui2f>
 80031f2:	4908      	ldr	r1, [pc, #32]	; (8003214 <getTempSht41+0x90>)
 80031f4:	f7fd fa6a 	bl	80006cc <__aeabi_fdiv>
 80031f8:	4909      	ldr	r1, [pc, #36]	; (8003220 <getTempSht41+0x9c>)
 80031fa:	f7fd fb7f 	bl	80008fc <__aeabi_fmul>
 80031fe:	4909      	ldr	r1, [pc, #36]	; (8003224 <getTempSht41+0xa0>)
 8003200:	f7fd fca2 	bl	8000b48 <__aeabi_fsub>
	return result;
 8003204:	6020      	str	r0, [r4, #0]
}
 8003206:	0020      	movs	r0, r4
	return result;
 8003208:	6066      	str	r6, [r4, #4]
}
 800320a:	b006      	add	sp, #24
 800320c:	bd70      	pop	{r4, r5, r6, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	20000198 	.word	0x20000198
 8003214:	477fff00 	.word	0x477fff00
 8003218:	42fa0000 	.word	0x42fa0000
 800321c:	40c00000 	.word	0x40c00000
 8003220:	432f0000 	.word	0x432f0000
 8003224:	42340000 	.word	0x42340000

08003228 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003228:	2201      	movs	r2, #1
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_MspInit+0x18>)
 800322c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800322e:	430a      	orrs	r2, r1
 8003230:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003232:	2280      	movs	r2, #128	; 0x80
 8003234:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003236:	0552      	lsls	r2, r2, #21
 8003238:	430a      	orrs	r2, r1
 800323a:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800323c:	4770      	bx	lr
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	40021000 	.word	0x40021000

08003244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003244:	b510      	push	{r4, lr}
 8003246:	0004      	movs	r4, r0
 8003248:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324a:	2214      	movs	r2, #20
 800324c:	2100      	movs	r1, #0
 800324e:	a801      	add	r0, sp, #4
 8003250:	f002 f95d 	bl	800550e <memset>
  if(hi2c->Instance==I2C1)
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <HAL_I2C_MspInit+0x50>)
 8003256:	6822      	ldr	r2, [r4, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d119      	bne.n	8003290 <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325c:	2102      	movs	r1, #2
 800325e:	4c0e      	ldr	r4, [pc, #56]	; (8003298 <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003260:	480e      	ldr	r0, [pc, #56]	; (800329c <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003264:	430a      	orrs	r2, r1
 8003266:	62e2      	str	r2, [r4, #44]	; 0x2c
 8003268:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800326a:	400b      	ands	r3, r1
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003270:	23c0      	movs	r3, #192	; 0xc0
 8003272:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003274:	3bae      	subs	r3, #174	; 0xae
 8003276:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003278:	3b0f      	subs	r3, #15
 800327a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800327c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800327e:	3b02      	subs	r3, #2
 8003280:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003282:	f000 f98b 	bl	800359c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800328a:	039b      	lsls	r3, r3, #14
 800328c:	4313      	orrs	r3, r2
 800328e:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003290:	b006      	add	sp, #24
 8003292:	bd10      	pop	{r4, pc}
 8003294:	40005400 	.word	0x40005400
 8003298:	40021000 	.word	0x40021000
 800329c:	50000400 	.word	0x50000400

080032a0 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	6802      	ldr	r2, [r0, #0]
 80032a4:	05db      	lsls	r3, r3, #23
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d104      	bne.n	80032b4 <HAL_TIM_PWM_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032aa:	2301      	movs	r3, #1
 80032ac:	4a02      	ldr	r2, [pc, #8]	; (80032b8 <HAL_TIM_PWM_MspInit+0x18>)
 80032ae:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80032b4:	4770      	bx	lr
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	40021000 	.word	0x40021000

080032bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032bc:	b510      	push	{r4, lr}
 80032be:	0004      	movs	r4, r0
 80032c0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c2:	2214      	movs	r2, #20
 80032c4:	2100      	movs	r1, #0
 80032c6:	a801      	add	r0, sp, #4
 80032c8:	f002 f921 	bl	800550e <memset>
  if(htim->Instance==TIM2)
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	6822      	ldr	r2, [r4, #0]
 80032d0:	05db      	lsls	r3, r3, #23
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d114      	bne.n	8003300 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d6:	2001      	movs	r0, #1
 80032d8:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <HAL_TIM_MspPostInit+0x48>)
 80032da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032dc:	4301      	orrs	r1, r0
 80032de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80032e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e2:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e4:	4003      	ands	r3, r0
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	021b      	lsls	r3, r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ee:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032f0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 80032f8:	3303      	adds	r3, #3
 80032fa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fc:	f000 f94e 	bl	800359c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003300:	b006      	add	sp, #24
 8003302:	bd10      	pop	{r4, pc}
 8003304:	40021000 	.word	0x40021000

08003308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003308:	b510      	push	{r4, lr}
 800330a:	0004      	movs	r4, r0
 800330c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330e:	2214      	movs	r2, #20
 8003310:	2100      	movs	r1, #0
 8003312:	a801      	add	r0, sp, #4
 8003314:	f002 f8fb 	bl	800550e <memset>
  if(huart->Instance==USART1)
 8003318:	4b10      	ldr	r3, [pc, #64]	; (800335c <HAL_UART_MspInit+0x54>)
 800331a:	6822      	ldr	r2, [r4, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d11b      	bne.n	8003358 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003320:	2280      	movs	r2, #128	; 0x80
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_UART_MspInit+0x58>)
 8003324:	01d2      	lsls	r2, r2, #7
 8003326:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003328:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 800332a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332c:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 800332e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003332:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003334:	430a      	orrs	r2, r1
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	400b      	ands	r3, r1
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8003340:	23c0      	movs	r3, #192	; 0xc0
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334a:	185b      	adds	r3, r3, r1
 800334c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800334e:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003350:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003352:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003354:	f000 f922 	bl	800359c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003358:	b006      	add	sp, #24
 800335a:	bd10      	pop	{r4, pc}
 800335c:	40013800 	.word	0x40013800
 8003360:	40021000 	.word	0x40021000

08003364 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <NMI_Handler>

08003366 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003366:	e7fe      	b.n	8003366 <HardFault_Handler>

08003368 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003368:	4770      	bx	lr

0800336a <PendSV_Handler>:
 800336a:	4770      	bx	lr

0800336c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800336c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800336e:	f000 f887 	bl	8003480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003372:	f000 f8ed 	bl	8003550 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003376:	bd10      	pop	{r4, pc}

08003378 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003378:	4a0b      	ldr	r2, [pc, #44]	; (80033a8 <_sbrk+0x30>)
 800337a:	490c      	ldr	r1, [pc, #48]	; (80033ac <_sbrk+0x34>)
{
 800337c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800337e:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003380:	4a0b      	ldr	r2, [pc, #44]	; (80033b0 <_sbrk+0x38>)
{
 8003382:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003384:	6810      	ldr	r0, [r2, #0]
 8003386:	2800      	cmp	r0, #0
 8003388:	d101      	bne.n	800338e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800338a:	480a      	ldr	r0, [pc, #40]	; (80033b4 <_sbrk+0x3c>)
 800338c:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800338e:	6810      	ldr	r0, [r2, #0]
 8003390:	18c3      	adds	r3, r0, r3
 8003392:	428b      	cmp	r3, r1
 8003394:	d906      	bls.n	80033a4 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8003396:	f002 f873 	bl	8005480 <__errno>
 800339a:	230c      	movs	r3, #12
 800339c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800339e:	2001      	movs	r0, #1
 80033a0:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80033a2:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80033a4:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80033a6:	e7fc      	b.n	80033a2 <_sbrk+0x2a>
 80033a8:	00000400 	.word	0x00000400
 80033ac:	20002000 	.word	0x20002000
 80033b0:	200002c4 	.word	0x200002c4
 80033b4:	200002e0 	.word	0x200002e0

080033b8 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033b8:	4770      	bx	lr
	...

080033bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80033bc:	480d      	ldr	r0, [pc, #52]	; (80033f4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80033be:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80033c0:	f7ff fffa 	bl	80033b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033c4:	480c      	ldr	r0, [pc, #48]	; (80033f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80033c6:	490d      	ldr	r1, [pc, #52]	; (80033fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80033c8:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <LoopForever+0xe>)
  movs r3, #0
 80033ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033cc:	e002      	b.n	80033d4 <LoopCopyDataInit>

080033ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033d2:	3304      	adds	r3, #4

080033d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033d8:	d3f9      	bcc.n	80033ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033da:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033dc:	4c0a      	ldr	r4, [pc, #40]	; (8003408 <LoopForever+0x16>)
  movs r3, #0
 80033de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033e0:	e001      	b.n	80033e6 <LoopFillZerobss>

080033e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033e4:	3204      	adds	r2, #4

080033e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033e8:	d3fb      	bcc.n	80033e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033ea:	f002 f84f 	bl	800548c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ee:	f7ff fdcf 	bl	8002f90 <main>

080033f2 <LoopForever>:

LoopForever:
    b LoopForever
 80033f2:	e7fe      	b.n	80033f2 <LoopForever>
   ldr   r0, =_estack
 80033f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80033f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033fc:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8003400:	08006338 	.word	0x08006338
  ldr r2, =_sbss
 8003404:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8003408:	200002dc 	.word	0x200002dc

0800340c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800340c:	e7fe      	b.n	800340c <ADC1_COMP_IRQHandler>
	...

08003410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003410:	b570      	push	{r4, r5, r6, lr}
 8003412:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003414:	20fa      	movs	r0, #250	; 0xfa
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_InitTick+0x3c>)
 8003418:	0080      	lsls	r0, r0, #2
 800341a:	7819      	ldrb	r1, [r3, #0]
 800341c:	f7fc fe90 	bl	8000140 <__udivsi3>
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_InitTick+0x40>)
 8003422:	0001      	movs	r1, r0
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	f7fc fe8b 	bl	8000140 <__udivsi3>
 800342a:	f000 f877 	bl	800351c <HAL_SYSTICK_Config>
 800342e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8003430:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003432:	2c00      	cmp	r4, #0
 8003434:	d109      	bne.n	800344a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003436:	2d03      	cmp	r5, #3
 8003438:	d807      	bhi.n	800344a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800343a:	3802      	subs	r0, #2
 800343c:	0022      	movs	r2, r4
 800343e:	0029      	movs	r1, r5
 8003440:	f000 f842 	bl	80034c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003444:	0020      	movs	r0, r4
 8003446:	4b03      	ldr	r3, [pc, #12]	; (8003454 <HAL_InitTick+0x44>)
 8003448:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800344a:	bd70      	pop	{r4, r5, r6, pc}
 800344c:	20000098 	.word	0x20000098
 8003450:	20000094 	.word	0x20000094
 8003454:	2000009c 	.word	0x2000009c

08003458 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003458:	2340      	movs	r3, #64	; 0x40
 800345a:	4a08      	ldr	r2, [pc, #32]	; (800347c <HAL_Init+0x24>)
{
 800345c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800345e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003460:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003462:	430b      	orrs	r3, r1
 8003464:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003466:	f7ff ffd3 	bl	8003410 <HAL_InitTick>
 800346a:	1e04      	subs	r4, r0, #0
 800346c:	d103      	bne.n	8003476 <HAL_Init+0x1e>
    HAL_MspInit();
 800346e:	f7ff fedb 	bl	8003228 <HAL_MspInit>
}
 8003472:	0020      	movs	r0, r4
 8003474:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003476:	2401      	movs	r4, #1
 8003478:	e7fb      	b.n	8003472 <HAL_Init+0x1a>
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	40022000 	.word	0x40022000

08003480 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003480:	4a03      	ldr	r2, [pc, #12]	; (8003490 <HAL_IncTick+0x10>)
 8003482:	4b04      	ldr	r3, [pc, #16]	; (8003494 <HAL_IncTick+0x14>)
 8003484:	6811      	ldr	r1, [r2, #0]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	185b      	adds	r3, r3, r1
 800348a:	6013      	str	r3, [r2, #0]
}
 800348c:	4770      	bx	lr
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	200002c8 	.word	0x200002c8
 8003494:	20000098 	.word	0x20000098

08003498 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003498:	4b01      	ldr	r3, [pc, #4]	; (80034a0 <HAL_GetTick+0x8>)
 800349a:	6818      	ldr	r0, [r3, #0]
}
 800349c:	4770      	bx	lr
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	200002c8 	.word	0x200002c8

080034a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80034a8:	f7ff fff6 	bl	8003498 <HAL_GetTick>
 80034ac:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034ae:	1c63      	adds	r3, r4, #1
 80034b0:	d002      	beq.n	80034b8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80034b2:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <HAL_Delay+0x20>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034b8:	f7ff ffee 	bl	8003498 <HAL_GetTick>
 80034bc:	1b40      	subs	r0, r0, r5
 80034be:	42a0      	cmp	r0, r4
 80034c0:	d3fa      	bcc.n	80034b8 <HAL_Delay+0x14>
  {
  }
}
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	20000098 	.word	0x20000098

080034c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c8:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034ca:	25ff      	movs	r5, #255	; 0xff
 80034cc:	2403      	movs	r4, #3
 80034ce:	002a      	movs	r2, r5
 80034d0:	4004      	ands	r4, r0
 80034d2:	00e4      	lsls	r4, r4, #3
 80034d4:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034d6:	0189      	lsls	r1, r1, #6
 80034d8:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034da:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034dc:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034de:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80034e0:	2800      	cmp	r0, #0
 80034e2:	db0a      	blt.n	80034fa <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034e4:	24c0      	movs	r4, #192	; 0xc0
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_NVIC_SetPriority+0x4c>)
 80034e8:	0880      	lsrs	r0, r0, #2
 80034ea:	0080      	lsls	r0, r0, #2
 80034ec:	18c0      	adds	r0, r0, r3
 80034ee:	00a4      	lsls	r4, r4, #2
 80034f0:	5903      	ldr	r3, [r0, r4]
 80034f2:	401a      	ands	r2, r3
 80034f4:	4311      	orrs	r1, r2
 80034f6:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80034f8:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034fa:	200f      	movs	r0, #15
 80034fc:	4003      	ands	r3, r0
 80034fe:	3b08      	subs	r3, #8
 8003500:	4805      	ldr	r0, [pc, #20]	; (8003518 <HAL_NVIC_SetPriority+0x50>)
 8003502:	089b      	lsrs	r3, r3, #2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	181b      	adds	r3, r3, r0
 8003508:	69d8      	ldr	r0, [r3, #28]
 800350a:	4002      	ands	r2, r0
 800350c:	4311      	orrs	r1, r2
 800350e:	61d9      	str	r1, [r3, #28]
 8003510:	e7f2      	b.n	80034f8 <HAL_NVIC_SetPriority+0x30>
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	e000e100 	.word	0xe000e100
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	1e43      	subs	r3, r0, #1
 8003520:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8003522:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003524:	4293      	cmp	r3, r2
 8003526:	d20d      	bcs.n	8003544 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003528:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800352a:	4a07      	ldr	r2, [pc, #28]	; (8003548 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800352c:	4807      	ldr	r0, [pc, #28]	; (800354c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800352e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003530:	6a03      	ldr	r3, [r0, #32]
 8003532:	0609      	lsls	r1, r1, #24
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	0a1b      	lsrs	r3, r3, #8
 8003538:	430b      	orrs	r3, r1
 800353a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800353c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003540:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003542:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003544:	4770      	bx	lr
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	e000e010 	.word	0xe000e010
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003550:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8003552:	f7ff fc79 	bl	8002e48 <HAL_SYSTICK_Callback>
}
 8003556:	bd10      	pop	{r4, pc}

08003558 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003558:	2201      	movs	r2, #1
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 800355c:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	4211      	tst	r1, r2
 8003562:	d00a      	beq.n	800357a <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003564:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003568:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 800356a:	4805      	ldr	r0, [pc, #20]	; (8003580 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 800356c:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800356e:	4805      	ldr	r0, [pc, #20]	; (8003584 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003570:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003572:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003576:	6858      	ldr	r0, [r3, #4]
 8003578:	4010      	ands	r0, r2
}
 800357a:	4770      	bx	lr
 800357c:	40022000 	.word	0x40022000
 8003580:	89abcdef 	.word	0x89abcdef
 8003584:	02030405 	.word	0x02030405

08003588 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003588:	2301      	movs	r3, #1
 800358a:	4a03      	ldr	r2, [pc, #12]	; (8003598 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 800358c:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800358e:	6851      	ldr	r1, [r2, #4]
 8003590:	430b      	orrs	r3, r1
 8003592:	6053      	str	r3, [r2, #4]
}
 8003594:	4770      	bx	lr
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	40022000 	.word	0x40022000

0800359c <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800359c:	4a58      	ldr	r2, [pc, #352]	; (8003700 <HAL_GPIO_Init+0x164>)
{
 800359e:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80035a0:	1882      	adds	r2, r0, r2
 80035a2:	1e54      	subs	r4, r2, #1
 80035a4:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 80035a6:	2300      	movs	r3, #0
{
 80035a8:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80035aa:	3205      	adds	r2, #5
{
 80035ac:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80035ae:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80035b0:	9a03      	ldr	r2, [sp, #12]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	0014      	movs	r4, r2
 80035b6:	40dc      	lsrs	r4, r3
 80035b8:	d101      	bne.n	80035be <HAL_GPIO_Init+0x22>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 80035ba:	b007      	add	sp, #28
 80035bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80035be:	2101      	movs	r1, #1
 80035c0:	000d      	movs	r5, r1
 80035c2:	0014      	movs	r4, r2
 80035c4:	409d      	lsls	r5, r3
 80035c6:	402c      	ands	r4, r5
 80035c8:	468c      	mov	ip, r1
 80035ca:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 80035cc:	422a      	tst	r2, r5
 80035ce:	d100      	bne.n	80035d2 <HAL_GPIO_Init+0x36>
 80035d0:	e094      	b.n	80036fc <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035d2:	2403      	movs	r4, #3
 80035d4:	9a03      	ldr	r2, [sp, #12]
 80035d6:	005e      	lsls	r6, r3, #1
 80035d8:	6852      	ldr	r2, [r2, #4]
 80035da:	9201      	str	r2, [sp, #4]
 80035dc:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80035de:	40b4      	lsls	r4, r6
 80035e0:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035e2:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80035e4:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035e6:	4564      	cmp	r4, ip
 80035e8:	d82a      	bhi.n	8003640 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 80035ea:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80035ec:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ee:	9903      	ldr	r1, [sp, #12]
 80035f0:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035f2:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f4:	40b4      	lsls	r4, r6
 80035f6:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 80035f8:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80035fa:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035fc:	43ac      	bics	r4, r5
 80035fe:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003600:	090c      	lsrs	r4, r1, #4
 8003602:	4661      	mov	r1, ip
 8003604:	400c      	ands	r4, r1
 8003606:	409c      	lsls	r4, r3
 8003608:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800360a:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800360c:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800360e:	9904      	ldr	r1, [sp, #16]
 8003610:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003612:	9903      	ldr	r1, [sp, #12]
 8003614:	688c      	ldr	r4, [r1, #8]
 8003616:	40b4      	lsls	r4, r6
 8003618:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800361a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800361c:	2a02      	cmp	r2, #2
 800361e:	d111      	bne.n	8003644 <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003620:	2507      	movs	r5, #7
 8003622:	210f      	movs	r1, #15
 8003624:	401d      	ands	r5, r3
 8003626:	00ad      	lsls	r5, r5, #2
 8003628:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 800362a:	08dc      	lsrs	r4, r3, #3
 800362c:	00a4      	lsls	r4, r4, #2
 800362e:	1904      	adds	r4, r0, r4
 8003630:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003632:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003634:	9903      	ldr	r1, [sp, #12]
 8003636:	6909      	ldr	r1, [r1, #16]
 8003638:	40a9      	lsls	r1, r5
 800363a:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800363c:	6227      	str	r7, [r4, #32]
 800363e:	e001      	b.n	8003644 <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003640:	2a03      	cmp	r2, #3
 8003642:	d1e3      	bne.n	800360c <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003644:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 8003646:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003648:	9904      	ldr	r1, [sp, #16]
 800364a:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800364c:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 800364e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003650:	22c0      	movs	r2, #192	; 0xc0
 8003652:	9901      	ldr	r1, [sp, #4]
 8003654:	0292      	lsls	r2, r2, #10
 8003656:	4211      	tst	r1, r2
 8003658:	d050      	beq.n	80036fc <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365a:	2701      	movs	r7, #1
 800365c:	4c29      	ldr	r4, [pc, #164]	; (8003704 <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800365e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003660:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003662:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003664:	433a      	orrs	r2, r7
 8003666:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003668:	4a27      	ldr	r2, [pc, #156]	; (8003708 <HAL_GPIO_Init+0x16c>)
 800366a:	089c      	lsrs	r4, r3, #2
 800366c:	00a4      	lsls	r4, r4, #2
 800366e:	18a4      	adds	r4, r4, r2
 8003670:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003672:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8003674:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003676:	220f      	movs	r2, #15
 8003678:	00ad      	lsls	r5, r5, #2
 800367a:	40aa      	lsls	r2, r5
 800367c:	4661      	mov	r1, ip
 800367e:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003680:	22a0      	movs	r2, #160	; 0xa0
 8003682:	05d2      	lsls	r2, r2, #23
 8003684:	4694      	mov	ip, r2
 8003686:	2200      	movs	r2, #0
 8003688:	4560      	cmp	r0, ip
 800368a:	d00d      	beq.n	80036a8 <HAL_GPIO_Init+0x10c>
 800368c:	4a1f      	ldr	r2, [pc, #124]	; (800370c <HAL_GPIO_Init+0x170>)
 800368e:	4694      	mov	ip, r2
 8003690:	003a      	movs	r2, r7
 8003692:	4560      	cmp	r0, ip
 8003694:	d008      	beq.n	80036a8 <HAL_GPIO_Init+0x10c>
 8003696:	4f1e      	ldr	r7, [pc, #120]	; (8003710 <HAL_GPIO_Init+0x174>)
 8003698:	1892      	adds	r2, r2, r2
 800369a:	42b8      	cmp	r0, r7
 800369c:	d004      	beq.n	80036a8 <HAL_GPIO_Init+0x10c>
 800369e:	4f1d      	ldr	r7, [pc, #116]	; (8003714 <HAL_GPIO_Init+0x178>)
 80036a0:	0032      	movs	r2, r6
 80036a2:	42b8      	cmp	r0, r7
 80036a4:	d000      	beq.n	80036a8 <HAL_GPIO_Init+0x10c>
 80036a6:	9a05      	ldr	r2, [sp, #20]
 80036a8:	40aa      	lsls	r2, r5
 80036aa:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 80036ac:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036ae:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 80036b0:	000d      	movs	r5, r1
        temp = EXTI->RTSR;
 80036b2:	4a19      	ldr	r2, [pc, #100]	; (8003718 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 80036b4:	43cc      	mvns	r4, r1
        temp = EXTI->RTSR;
 80036b6:	6896      	ldr	r6, [r2, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036b8:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80036ba:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036bc:	02c9      	lsls	r1, r1, #11
 80036be:	d401      	bmi.n	80036c4 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 80036c0:	0035      	movs	r5, r6
 80036c2:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80036c4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80036c6:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80036c8:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036ca:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80036cc:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036ce:	0289      	lsls	r1, r1, #10
 80036d0:	d401      	bmi.n	80036d6 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 80036d2:	0035      	movs	r5, r6
 80036d4:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 80036d6:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80036d8:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80036da:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036dc:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80036de:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036e0:	0389      	lsls	r1, r1, #14
 80036e2:	d401      	bmi.n	80036e8 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 80036e4:	0035      	movs	r5, r6
 80036e6:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80036e8:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80036ea:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80036ec:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036ee:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80036f0:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036f2:	03c9      	lsls	r1, r1, #15
 80036f4:	d401      	bmi.n	80036fa <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 80036f6:	4025      	ands	r5, r4
 80036f8:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80036fa:	6016      	str	r6, [r2, #0]
    position++;
 80036fc:	3301      	adds	r3, #1
 80036fe:	e757      	b.n	80035b0 <HAL_GPIO_Init+0x14>
 8003700:	afffe400 	.word	0xafffe400
 8003704:	40021000 	.word	0x40021000
 8003708:	40010000 	.word	0x40010000
 800370c:	50000400 	.word	0x50000400
 8003710:	50000800 	.word	0x50000800
 8003714:	50000c00 	.word	0x50000c00
 8003718:	40010400 	.word	0x40010400

0800371c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800371c:	2a00      	cmp	r2, #0
 800371e:	d001      	beq.n	8003724 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003720:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003722:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003724:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003726:	e7fc      	b.n	8003722 <HAL_GPIO_WritePin+0x6>

08003728 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003728:	6803      	ldr	r3, [r0, #0]
 800372a:	699a      	ldr	r2, [r3, #24]
 800372c:	0792      	lsls	r2, r2, #30
 800372e:	d501      	bpl.n	8003734 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003730:	2200      	movs	r2, #0
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003734:	2201      	movs	r2, #1
 8003736:	6999      	ldr	r1, [r3, #24]
 8003738:	4211      	tst	r1, r2
 800373a:	d102      	bne.n	8003742 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800373c:	6999      	ldr	r1, [r3, #24]
 800373e:	430a      	orrs	r2, r1
 8003740:	619a      	str	r2, [r3, #24]
  }
}
 8003742:	4770      	bx	lr

08003744 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003744:	b530      	push	{r4, r5, lr}
 8003746:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003748:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800374a:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800374c:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800374e:	0589      	lsls	r1, r1, #22
 8003750:	431a      	orrs	r2, r3
 8003752:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <I2C_TransferConfig+0x28>)
 8003756:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003758:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800375a:	0d64      	lsrs	r4, r4, #21
 800375c:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800375e:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003760:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003762:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003764:	432a      	orrs	r2, r5
 8003766:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003768:	bd30      	pop	{r4, r5, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	03ff63ff 	.word	0x03ff63ff

08003770 <I2C_IsErrorOccurred>:
{
 8003770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003772:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8003774:	6802      	ldr	r2, [r0, #0]
{
 8003776:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8003778:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800377a:	2310      	movs	r3, #16
 800377c:	000f      	movs	r7, r1
{
 800377e:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003780:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003784:	4219      	tst	r1, r3
 8003786:	d00e      	beq.n	80037a6 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003788:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800378a:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 800378c:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800378e:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	699a      	ldr	r2, [r3, #24]
 8003794:	423a      	tst	r2, r7
 8003796:	d164      	bne.n	8003862 <I2C_IsErrorOccurred+0xf2>
 8003798:	9a01      	ldr	r2, [sp, #4]
 800379a:	2a00      	cmp	r2, #0
 800379c:	d032      	beq.n	8003804 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 800379e:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80037a0:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 80037a2:	9b00      	ldr	r3, [sp, #0]
 80037a4:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037a6:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 80037a8:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037aa:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 80037ac:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037ae:	420a      	tst	r2, r1
 80037b0:	d002      	beq.n	80037b8 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 80037b2:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037b4:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80037b6:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037b8:	2180      	movs	r1, #128	; 0x80
 80037ba:	00c9      	lsls	r1, r1, #3
 80037bc:	420a      	tst	r2, r1
 80037be:	d003      	beq.n	80037c8 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 80037c0:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037c2:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80037c4:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 80037c6:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	0089      	lsls	r1, r1, #2
 80037cc:	420a      	tst	r2, r1
 80037ce:	d04d      	beq.n	800386c <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 80037d0:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037d2:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 80037d4:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 80037d6:	0020      	movs	r0, r4
 80037d8:	f7ff ffa6 	bl	8003728 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80037dc:	6822      	ldr	r2, [r4, #0]
 80037de:	4925      	ldr	r1, [pc, #148]	; (8003874 <I2C_IsErrorOccurred+0x104>)
 80037e0:	6853      	ldr	r3, [r2, #4]
 80037e2:	400b      	ands	r3, r1
 80037e4:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	0023      	movs	r3, r4
 80037e8:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80037ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037ec:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 80037ee:	4307      	orrs	r7, r0
 80037f0:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037f2:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	0022      	movs	r2, r4
 80037f6:	2300      	movs	r3, #0
 80037f8:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80037fa:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fc:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80037fe:	2001      	movs	r0, #1
 8003800:	7023      	strb	r3, [r4, #0]
 8003802:	e035      	b.n	8003870 <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 8003804:	1c72      	adds	r2, r6, #1
 8003806:	d0c4      	beq.n	8003792 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7ff fe46 	bl	8003498 <HAL_GetTick>
 800380c:	1b40      	subs	r0, r0, r5
 800380e:	42b0      	cmp	r0, r6
 8003810:	d801      	bhi.n	8003816 <I2C_IsErrorOccurred+0xa6>
 8003812:	2e00      	cmp	r6, #0
 8003814:	d1bc      	bne.n	8003790 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8003816:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003818:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 800381a:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800381c:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800381e:	7811      	ldrb	r1, [r2, #0]
 8003820:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003822:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8003824:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	0209      	lsls	r1, r1, #8
 800382a:	420a      	tst	r2, r1
 800382c:	d00c      	beq.n	8003848 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800382e:	2280      	movs	r2, #128	; 0x80
 8003830:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003832:	4210      	tst	r0, r2
 8003834:	d108      	bne.n	8003848 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 8003836:	4661      	mov	r1, ip
 8003838:	2920      	cmp	r1, #32
 800383a:	d005      	beq.n	8003848 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8003842:	f7ff fe29 	bl	8003498 <HAL_GetTick>
 8003846:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	423b      	tst	r3, r7
 800384e:	d19f      	bne.n	8003790 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003850:	f7ff fe22 	bl	8003498 <HAL_GetTick>
 8003854:	1b40      	subs	r0, r0, r5
 8003856:	2819      	cmp	r0, #25
 8003858:	d9f6      	bls.n	8003848 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800385c:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	e796      	b.n	8003790 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 8003862:	9a01      	ldr	r2, [sp, #4]
 8003864:	2a00      	cmp	r2, #0
 8003866:	d19a      	bne.n	800379e <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003868:	61df      	str	r7, [r3, #28]
 800386a:	e798      	b.n	800379e <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 800386c:	2800      	cmp	r0, #0
 800386e:	d1b2      	bne.n	80037d6 <I2C_IsErrorOccurred+0x66>
}
 8003870:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	fe00e800 	.word	0xfe00e800

08003878 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	0004      	movs	r4, r0
 800387c:	000d      	movs	r5, r1
 800387e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003880:	2702      	movs	r7, #2
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	423b      	tst	r3, r7
 8003888:	d001      	beq.n	800388e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800388a:	2000      	movs	r0, #0
}
 800388c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800388e:	0032      	movs	r2, r6
 8003890:	0029      	movs	r1, r5
 8003892:	0020      	movs	r0, r4
 8003894:	f7ff ff6c 	bl	8003770 <I2C_IsErrorOccurred>
 8003898:	2800      	cmp	r0, #0
 800389a:	d118      	bne.n	80038ce <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800389c:	1c6b      	adds	r3, r5, #1
 800389e:	d0f0      	beq.n	8003882 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a0:	f7ff fdfa 	bl	8003498 <HAL_GetTick>
 80038a4:	1b80      	subs	r0, r0, r6
 80038a6:	42a8      	cmp	r0, r5
 80038a8:	d801      	bhi.n	80038ae <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80038aa:	2d00      	cmp	r5, #0
 80038ac:	d1e9      	bne.n	8003882 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	001a      	movs	r2, r3
 80038b4:	403a      	ands	r2, r7
 80038b6:	423b      	tst	r3, r7
 80038b8:	d1e3      	bne.n	8003882 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ba:	2120      	movs	r1, #32
 80038bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80038be:	430b      	orrs	r3, r1
 80038c0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 80038c4:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	3341      	adds	r3, #65	; 0x41
 80038c8:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ca:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 80038cc:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80038ce:	2001      	movs	r0, #1
 80038d0:	e7dc      	b.n	800388c <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080038d2 <I2C_WaitOnFlagUntilTimeout>:
{
 80038d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d4:	0004      	movs	r4, r0
 80038d6:	000d      	movs	r5, r1
 80038d8:	0017      	movs	r7, r2
 80038da:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038dc:	6822      	ldr	r2, [r4, #0]
 80038de:	6993      	ldr	r3, [r2, #24]
 80038e0:	402b      	ands	r3, r5
 80038e2:	1b5b      	subs	r3, r3, r5
 80038e4:	4259      	negs	r1, r3
 80038e6:	414b      	adcs	r3, r1
 80038e8:	42bb      	cmp	r3, r7
 80038ea:	d001      	beq.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80038ec:	2000      	movs	r0, #0
 80038ee:	e01f      	b.n	8003930 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80038f0:	1c73      	adds	r3, r6, #1
 80038f2:	d0f4      	beq.n	80038de <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f4:	f7ff fdd0 	bl	8003498 <HAL_GetTick>
 80038f8:	9b06      	ldr	r3, [sp, #24]
 80038fa:	1ac0      	subs	r0, r0, r3
 80038fc:	42b0      	cmp	r0, r6
 80038fe:	d801      	bhi.n	8003904 <I2C_WaitOnFlagUntilTimeout+0x32>
 8003900:	2e00      	cmp	r6, #0
 8003902:	d1eb      	bne.n	80038dc <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	402b      	ands	r3, r5
 800390a:	1b5b      	subs	r3, r3, r5
 800390c:	425a      	negs	r2, r3
 800390e:	4153      	adcs	r3, r2
 8003910:	42bb      	cmp	r3, r7
 8003912:	d1e3      	bne.n	80038dc <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003914:	2220      	movs	r2, #32
 8003916:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8003918:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800391a:	4313      	orrs	r3, r2
 800391c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800391e:	0023      	movs	r3, r4
 8003920:	3341      	adds	r3, #65	; 0x41
 8003922:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	0022      	movs	r2, r4
 8003926:	2300      	movs	r3, #0
 8003928:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800392a:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800392c:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 800392e:	7023      	strb	r3, [r4, #0]
}
 8003930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003932 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003934:	0004      	movs	r4, r0
 8003936:	000e      	movs	r6, r1
 8003938:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800393a:	2520      	movs	r5, #32
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	422b      	tst	r3, r5
 8003942:	d001      	beq.n	8003948 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8003944:	2000      	movs	r0, #0
}
 8003946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003948:	003a      	movs	r2, r7
 800394a:	0031      	movs	r1, r6
 800394c:	0020      	movs	r0, r4
 800394e:	f7ff ff0f 	bl	8003770 <I2C_IsErrorOccurred>
 8003952:	2800      	cmp	r0, #0
 8003954:	d115      	bne.n	8003982 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003956:	f7ff fd9f 	bl	8003498 <HAL_GetTick>
 800395a:	1bc0      	subs	r0, r0, r7
 800395c:	42b0      	cmp	r0, r6
 800395e:	d801      	bhi.n	8003964 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003960:	2e00      	cmp	r6, #0
 8003962:	d1eb      	bne.n	800393c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	001a      	movs	r2, r3
 800396a:	402a      	ands	r2, r5
 800396c:	422b      	tst	r3, r5
 800396e:	d1e5      	bne.n	800393c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003970:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003972:	432b      	orrs	r3, r5
 8003974:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003976:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8003978:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800397a:	3341      	adds	r3, #65	; 0x41
 800397c:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800397e:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8003980:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8003982:	2001      	movs	r0, #1
 8003984:	e7df      	b.n	8003946 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

08003988 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	0004      	movs	r4, r0
 800398c:	000d      	movs	r5, r1
 800398e:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003990:	2604      	movs	r6, #4
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	4233      	tst	r3, r6
 8003998:	d111      	bne.n	80039be <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800399a:	003a      	movs	r2, r7
 800399c:	0029      	movs	r1, r5
 800399e:	0020      	movs	r0, r4
 80039a0:	f7ff fee6 	bl	8003770 <I2C_IsErrorOccurred>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d124      	bne.n	80039f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039a8:	2120      	movs	r1, #32
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	420a      	tst	r2, r1
 80039b0:	d023      	beq.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	4232      	tst	r2, r6
 80039b6:	d004      	beq.n	80039c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80039b8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80039ba:	2a00      	cmp	r2, #0
 80039bc:	d001      	beq.n	80039c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 80039be:	2000      	movs	r0, #0
}
 80039c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039c2:	6999      	ldr	r1, [r3, #24]
 80039c4:	2210      	movs	r2, #16
 80039c6:	0008      	movs	r0, r1
 80039c8:	4010      	ands	r0, r2
 80039ca:	4211      	tst	r1, r2
 80039cc:	d013      	beq.n	80039f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80039d0:	3a0c      	subs	r2, #12
 80039d2:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d4:	2120      	movs	r1, #32
 80039d6:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	4813      	ldr	r0, [pc, #76]	; (8003a28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>)
 80039dc:	4002      	ands	r2, r0
 80039de:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80039e0:	0023      	movs	r3, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e2:	0022      	movs	r2, r4
        hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	3341      	adds	r3, #65	; 0x41
 80039e6:	7019      	strb	r1, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80039ec:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ee:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80039f0:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80039f2:	2001      	movs	r0, #1
 80039f4:	e7e4      	b.n	80039c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f6:	6460      	str	r0, [r4, #68]	; 0x44
 80039f8:	e7ec      	b.n	80039d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fa:	f7ff fd4d 	bl	8003498 <HAL_GetTick>
 80039fe:	1bc0      	subs	r0, r0, r7
 8003a00:	42a8      	cmp	r0, r5
 8003a02:	d801      	bhi.n	8003a08 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8003a04:	2d00      	cmp	r5, #0
 8003a06:	d1c4      	bne.n	8003992 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	4031      	ands	r1, r6
 8003a10:	4233      	tst	r3, r6
 8003a12:	d1be      	bne.n	8003992 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a14:	2220      	movs	r2, #32
 8003a16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a1c:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8003a1e:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003a20:	3341      	adds	r3, #65	; 0x41
 8003a22:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 8003a24:	7021      	strb	r1, [r4, #0]
        return HAL_ERROR;
 8003a26:	e7e4      	b.n	80039f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
 8003a28:	fe00e800 	.word	0xfe00e800

08003a2c <HAL_I2C_Init>:
{
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003a30:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003a32:	2c00      	cmp	r4, #0
 8003a34:	d03f      	beq.n	8003ab6 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a36:	0025      	movs	r5, r4
 8003a38:	3541      	adds	r5, #65	; 0x41
 8003a3a:	782b      	ldrb	r3, [r5, #0]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d105      	bne.n	8003a4e <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8003a42:	0023      	movs	r3, r4
 8003a44:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003a46:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8003a48:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8003a4a:	f7ff fbfb 	bl	8003244 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a4e:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003a50:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a52:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003a54:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a56:	481d      	ldr	r0, [pc, #116]	; (8003acc <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8003a58:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a5a:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8003a5c:	438a      	bics	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a60:	6861      	ldr	r1, [r4, #4]
 8003a62:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <HAL_I2C_Init+0xa4>)
 8003a64:	400a      	ands	r2, r1
 8003a66:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	4002      	ands	r2, r0
 8003a6c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a6e:	68e2      	ldr	r2, [r4, #12]
 8003a70:	2a01      	cmp	r2, #1
 8003a72:	d121      	bne.n	8003ab8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a74:	2180      	movs	r1, #128	; 0x80
 8003a76:	0209      	lsls	r1, r1, #8
 8003a78:	4331      	orrs	r1, r6
 8003a7a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	4915      	ldr	r1, [pc, #84]	; (8003ad4 <HAL_I2C_Init+0xa8>)
 8003a80:	4311      	orrs	r1, r2
 8003a82:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a84:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a86:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a88:	4002      	ands	r2, r0
 8003a8a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a8c:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a8e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a90:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a92:	69a1      	ldr	r1, [r4, #24]
 8003a94:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a96:	430a      	orrs	r2, r1
 8003a98:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a9a:	6a21      	ldr	r1, [r4, #32]
 8003a9c:	69e2      	ldr	r2, [r4, #28]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	6819      	ldr	r1, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003aaa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aac:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003aae:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ab0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab2:	3442      	adds	r4, #66	; 0x42
 8003ab4:	7020      	strb	r0, [r4, #0]
}
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ab8:	2184      	movs	r1, #132	; 0x84
 8003aba:	0209      	lsls	r1, r1, #8
 8003abc:	4331      	orrs	r1, r6
 8003abe:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ac0:	2a02      	cmp	r2, #2
 8003ac2:	d1db      	bne.n	8003a7c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	0112      	lsls	r2, r2, #4
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	e7d7      	b.n	8003a7c <HAL_I2C_Init+0x50>
 8003acc:	ffff7fff 	.word	0xffff7fff
 8003ad0:	f0ffffff 	.word	0xf0ffffff
 8003ad4:	02008000 	.word	0x02008000

08003ad8 <HAL_I2C_Master_Transmit>:
{
 8003ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ada:	b087      	sub	sp, #28
 8003adc:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ade:	0003      	movs	r3, r0
 8003ae0:	3341      	adds	r3, #65	; 0x41
{
 8003ae2:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae4:	9303      	str	r3, [sp, #12]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
{
 8003ae8:	0004      	movs	r4, r0
 8003aea:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003aec:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d114      	bne.n	8003b1c <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 8003af2:	0023      	movs	r3, r4
 8003af4:	3340      	adds	r3, #64	; 0x40
 8003af6:	781a      	ldrb	r2, [r3, #0]
 8003af8:	2a01      	cmp	r2, #1
 8003afa:	d00f      	beq.n	8003b1c <HAL_I2C_Master_Transmit+0x44>
 8003afc:	2601      	movs	r6, #1
 8003afe:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003b00:	f7ff fcca 	bl	8003498 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b04:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003b06:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b08:	9000      	str	r0, [sp, #0]
 8003b0a:	2319      	movs	r3, #25
 8003b0c:	0032      	movs	r2, r6
 8003b0e:	0020      	movs	r0, r4
 8003b10:	0209      	lsls	r1, r1, #8
 8003b12:	f7ff fede 	bl	80038d2 <I2C_WaitOnFlagUntilTimeout>
 8003b16:	2800      	cmp	r0, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 8003b1a:	2001      	movs	r0, #1
}
 8003b1c:	b007      	add	sp, #28
 8003b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b20:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b22:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b24:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b26:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b28:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b2a:	3b11      	subs	r3, #17
 8003b2c:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8003b2e:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b30:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003b32:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b34:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8003b36:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003b38:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b3a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b3c:	4b2d      	ldr	r3, [pc, #180]	; (8003bf4 <HAL_I2C_Master_Transmit+0x11c>)
 8003b3e:	2aff      	cmp	r2, #255	; 0xff
 8003b40:	d920      	bls.n	8003b84 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b42:	22ff      	movs	r2, #255	; 0xff
 8003b44:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b4c:	0039      	movs	r1, r7
 8003b4e:	0020      	movs	r0, r4
 8003b50:	f7ff fdf8 	bl	8003744 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b56:	002a      	movs	r2, r5
 8003b58:	0020      	movs	r0, r4
 8003b5a:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d119      	bne.n	8003b94 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b60:	f7ff fee7 	bl	8003932 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b64:	2800      	cmp	r0, #0
 8003b66:	d1d8      	bne.n	8003b1a <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b68:	2120      	movs	r1, #32
 8003b6a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003b6c:	4d22      	ldr	r5, [pc, #136]	; (8003bf8 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b6e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	402a      	ands	r2, r5
 8003b74:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003b78:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003b7a:	3341      	adds	r3, #65	; 0x41
 8003b7c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b7e:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003b80:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003b82:	e7cb      	b.n	8003b1c <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8003b84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b86:	b292      	uxth	r2, r2
 8003b88:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	049b      	lsls	r3, r3, #18
 8003b92:	e7db      	b.n	8003b4c <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b94:	f7ff fe70 	bl	8003878 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	d1be      	bne.n	8003b1a <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b9e:	6822      	ldr	r2, [r4, #0]
 8003ba0:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003ba2:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ba4:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003ba6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003ba8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003baa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003bb2:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003bb6:	b292      	uxth	r2, r2
 8003bb8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0ca      	beq.n	8003b54 <HAL_I2C_Master_Transmit+0x7c>
 8003bbe:	2a00      	cmp	r2, #0
 8003bc0:	d1c8      	bne.n	8003b54 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	0020      	movs	r0, r4
 8003bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bc8:	9500      	str	r5, [sp, #0]
 8003bca:	f7ff fe82 	bl	80038d2 <I2C_WaitOnFlagUntilTimeout>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d1a3      	bne.n	8003b1a <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003bd4:	2bff      	cmp	r3, #255	; 0xff
 8003bd6:	d906      	bls.n	8003be6 <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bd8:	23ff      	movs	r3, #255	; 0xff
 8003bda:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	22ff      	movs	r2, #255	; 0xff
 8003be0:	9000      	str	r0, [sp, #0]
 8003be2:	045b      	lsls	r3, r3, #17
 8003be4:	e7b2      	b.n	8003b4c <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8003be6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003be8:	b292      	uxth	r2, r2
 8003bea:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	9000      	str	r0, [sp, #0]
 8003bf0:	e7cd      	b.n	8003b8e <HAL_I2C_Master_Transmit+0xb6>
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	80002000 	.word	0x80002000
 8003bf8:	fe00e800 	.word	0xfe00e800

08003bfc <HAL_I2C_Master_Receive>:
{
 8003bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c02:	0003      	movs	r3, r0
 8003c04:	3341      	adds	r3, #65	; 0x41
{
 8003c06:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c08:	9303      	str	r3, [sp, #12]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
{
 8003c0c:	0004      	movs	r4, r0
 8003c0e:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003c10:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d114      	bne.n	8003c40 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 8003c16:	0023      	movs	r3, r4
 8003c18:	3340      	adds	r3, #64	; 0x40
 8003c1a:	781a      	ldrb	r2, [r3, #0]
 8003c1c:	2a01      	cmp	r2, #1
 8003c1e:	d00f      	beq.n	8003c40 <HAL_I2C_Master_Receive+0x44>
 8003c20:	2601      	movs	r6, #1
 8003c22:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003c24:	f7ff fc38 	bl	8003498 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c28:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003c2a:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c2c:	9000      	str	r0, [sp, #0]
 8003c2e:	2319      	movs	r3, #25
 8003c30:	0032      	movs	r2, r6
 8003c32:	0020      	movs	r0, r4
 8003c34:	0209      	lsls	r1, r1, #8
 8003c36:	f7ff fe4c 	bl	80038d2 <I2C_WaitOnFlagUntilTimeout>
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 8003c3e:	2001      	movs	r0, #1
}
 8003c40:	b007      	add	sp, #28
 8003c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c44:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c46:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c48:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c4a:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c4c:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c4e:	3b12      	subs	r3, #18
 8003c50:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8003c52:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c54:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003c56:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c58:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8003c5a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003c5c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c5e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c60:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <HAL_I2C_Master_Receive+0x11c>)
 8003c62:	2aff      	cmp	r2, #255	; 0xff
 8003c64:	d920      	bls.n	8003ca8 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c66:	22ff      	movs	r2, #255	; 0xff
 8003c68:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	2380      	movs	r3, #128	; 0x80
 8003c6e:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c70:	0039      	movs	r1, r7
 8003c72:	0020      	movs	r0, r4
 8003c74:	f7ff fd66 	bl	8003744 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7a:	002a      	movs	r2, r5
 8003c7c:	0020      	movs	r0, r4
 8003c7e:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d119      	bne.n	8003cb8 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c84:	f7ff fe55 	bl	8003932 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	d1d8      	bne.n	8003c3e <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c8c:	2120      	movs	r1, #32
 8003c8e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003c90:	4d22      	ldr	r5, [pc, #136]	; (8003d1c <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c92:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	402a      	ands	r2, r5
 8003c98:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c9a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003c9c:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	3341      	adds	r3, #65	; 0x41
 8003ca0:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ca2:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003ca4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003ca6:	e7cb      	b.n	8003c40 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8003ca8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003caa:	b292      	uxth	r2, r2
 8003cac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cb2:	2380      	movs	r3, #128	; 0x80
 8003cb4:	049b      	lsls	r3, r3, #18
 8003cb6:	e7db      	b.n	8003c70 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb8:	f7ff fe66 	bl	8003988 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	d1be      	bne.n	8003c3e <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003cca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003ccc:	3301      	adds	r3, #1
 8003cce:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003cd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003cd2:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003cdc:	b292      	uxth	r2, r2
 8003cde:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0c9      	beq.n	8003c78 <HAL_I2C_Master_Receive+0x7c>
 8003ce4:	2a00      	cmp	r2, #0
 8003ce6:	d1c7      	bne.n	8003c78 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ce8:	2180      	movs	r1, #128	; 0x80
 8003cea:	0020      	movs	r0, r4
 8003cec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cee:	9500      	str	r5, [sp, #0]
 8003cf0:	f7ff fdef 	bl	80038d2 <I2C_WaitOnFlagUntilTimeout>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d1a2      	bne.n	8003c3e <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cf8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cfa:	2bff      	cmp	r3, #255	; 0xff
 8003cfc:	d906      	bls.n	8003d0c <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cfe:	23ff      	movs	r3, #255	; 0xff
 8003d00:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	22ff      	movs	r2, #255	; 0xff
 8003d06:	9000      	str	r0, [sp, #0]
 8003d08:	045b      	lsls	r3, r3, #17
 8003d0a:	e7b1      	b.n	8003c70 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8003d0c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d0e:	b292      	uxth	r2, r2
 8003d10:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	9000      	str	r0, [sp, #0]
 8003d16:	e7cc      	b.n	8003cb2 <HAL_I2C_Master_Receive+0xb6>
 8003d18:	80002400 	.word	0x80002400
 8003d1c:	fe00e800 	.word	0xfe00e800

08003d20 <HAL_I2C_Mem_Write>:
{
 8003d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d22:	b089      	sub	sp, #36	; 0x24
 8003d24:	9304      	str	r3, [sp, #16]
 8003d26:	ab0e      	add	r3, sp, #56	; 0x38
 8003d28:	9203      	str	r2, [sp, #12]
 8003d2a:	cb04      	ldmia	r3!, {r2}
 8003d2c:	0004      	movs	r4, r0
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	9205      	str	r2, [sp, #20]
 8003d32:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d34:	0003      	movs	r3, r0
 8003d36:	3341      	adds	r3, #65	; 0x41
 8003d38:	9307      	str	r3, [sp, #28]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
{
 8003d3c:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003d3e:	2002      	movs	r0, #2
{
 8003d40:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d108      	bne.n	8003d58 <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 8003d46:	2a00      	cmp	r2, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_I2C_Mem_Write+0x30>
 8003d4a:	9b06      	ldr	r3, [sp, #24]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003d56:	2001      	movs	r0, #1
}
 8003d58:	b009      	add	sp, #36	; 0x24
 8003d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003d5c:	0023      	movs	r3, r4
 8003d5e:	3340      	adds	r3, #64	; 0x40
 8003d60:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8003d62:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8003d64:	2a01      	cmp	r2, #1
 8003d66:	d0f7      	beq.n	8003d58 <HAL_I2C_Mem_Write+0x38>
 8003d68:	2201      	movs	r2, #1
 8003d6a:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003d6c:	f7ff fb94 	bl	8003498 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d70:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8003d72:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d74:	9000      	str	r0, [sp, #0]
 8003d76:	2319      	movs	r3, #25
 8003d78:	2201      	movs	r2, #1
 8003d7a:	0020      	movs	r0, r4
 8003d7c:	0209      	lsls	r1, r1, #8
 8003d7e:	f7ff fda8 	bl	80038d2 <I2C_WaitOnFlagUntilTimeout>
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d1e7      	bne.n	8003d56 <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d86:	2321      	movs	r3, #33	; 0x21
 8003d88:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d8a:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d8c:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d8e:	0023      	movs	r3, r4
 8003d90:	3342      	adds	r3, #66	; 0x42
 8003d92:	9307      	str	r3, [sp, #28]
 8003d94:	2340      	movs	r3, #64	; 0x40
 8003d96:	9a07      	ldr	r2, [sp, #28]
 8003d98:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8003d9a:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d9c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003d9e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003da0:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 8003da2:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003da4:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003da6:	466b      	mov	r3, sp
 8003da8:	7c1a      	ldrb	r2, [r3, #16]
 8003daa:	4b4a      	ldr	r3, [pc, #296]	; (8003ed4 <HAL_I2C_Mem_Write+0x1b4>)
 8003dac:	0020      	movs	r0, r4
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	045b      	lsls	r3, r3, #17
 8003db4:	f7ff fcc6 	bl	8003744 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db8:	002a      	movs	r2, r5
 8003dba:	0031      	movs	r1, r6
 8003dbc:	0020      	movs	r0, r4
 8003dbe:	f7ff fd5b 	bl	8003878 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	d126      	bne.n	8003e14 <HAL_I2C_Mem_Write+0xf4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dc6:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dca:	2a01      	cmp	r2, #1
 8003dcc:	d116      	bne.n	8003dfc <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dce:	466a      	mov	r2, sp
 8003dd0:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd2:	2180      	movs	r1, #128	; 0x80
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd4:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd6:	0020      	movs	r0, r4
 8003dd8:	0033      	movs	r3, r6
 8003dda:	2200      	movs	r2, #0
 8003ddc:	9500      	str	r5, [sp, #0]
 8003dde:	f7ff fd78 	bl	80038d2 <I2C_WaitOnFlagUntilTimeout>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d116      	bne.n	8003e14 <HAL_I2C_Mem_Write+0xf4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003de6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003de8:	2bff      	cmp	r3, #255	; 0xff
 8003dea:	d817      	bhi.n	8003e1c <HAL_I2C_Mem_Write+0xfc>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dec:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8003dee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003df0:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8003df2:	b292      	uxth	r2, r2
 8003df4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	9000      	str	r0, [sp, #0]
 8003dfa:	e014      	b.n	8003e26 <HAL_I2C_Mem_Write+0x106>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dfc:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dfe:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e00:	0a12      	lsrs	r2, r2, #8
 8003e02:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e04:	0020      	movs	r0, r4
 8003e06:	002a      	movs	r2, r5
 8003e08:	f7ff fd36 	bl	8003878 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	e7dc      	b.n	8003dce <HAL_I2C_Mem_Write+0xae>
      __HAL_UNLOCK(hi2c);
 8003e14:	2300      	movs	r3, #0
 8003e16:	3440      	adds	r4, #64	; 0x40
 8003e18:	7023      	strb	r3, [r4, #0]
 8003e1a:	e79c      	b.n	8003d56 <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e1c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e1e:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e20:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e22:	045b      	lsls	r3, r3, #17
 8003e24:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e26:	0039      	movs	r1, r7
 8003e28:	0020      	movs	r0, r4
 8003e2a:	f7ff fc8b 	bl	8003744 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e2e:	002a      	movs	r2, r5
 8003e30:	0031      	movs	r1, r6
 8003e32:	0020      	movs	r0, r4
 8003e34:	f7ff fd20 	bl	8003878 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	d000      	beq.n	8003e3e <HAL_I2C_Mem_Write+0x11e>
 8003e3c:	e78b      	b.n	8003d56 <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e40:	6822      	ldr	r2, [r4, #0]
 8003e42:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003e44:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e46:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003e48:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003e4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003e4c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003e54:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003e58:	b292      	uxth	r2, r2
 8003e5a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d017      	beq.n	8003e90 <HAL_I2C_Mem_Write+0x170>
 8003e60:	2a00      	cmp	r2, #0
 8003e62:	d115      	bne.n	8003e90 <HAL_I2C_Mem_Write+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e64:	0033      	movs	r3, r6
 8003e66:	2180      	movs	r1, #128	; 0x80
 8003e68:	0020      	movs	r0, r4
 8003e6a:	9500      	str	r5, [sp, #0]
 8003e6c:	f7ff fd31 	bl	80038d2 <I2C_WaitOnFlagUntilTimeout>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d000      	beq.n	8003e76 <HAL_I2C_Mem_Write+0x156>
 8003e74:	e76f      	b.n	8003d56 <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e78:	2bff      	cmp	r3, #255	; 0xff
 8003e7a:	d923      	bls.n	8003ec4 <HAL_I2C_Mem_Write+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e7c:	23ff      	movs	r3, #255	; 0xff
 8003e7e:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	22ff      	movs	r2, #255	; 0xff
 8003e84:	9000      	str	r0, [sp, #0]
 8003e86:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e88:	0039      	movs	r1, r7
 8003e8a:	0020      	movs	r0, r4
 8003e8c:	f7ff fc5a 	bl	8003744 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003e90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1cb      	bne.n	8003e2e <HAL_I2C_Mem_Write+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e96:	002a      	movs	r2, r5
 8003e98:	0031      	movs	r1, r6
 8003e9a:	0020      	movs	r0, r4
 8003e9c:	f7ff fd49 	bl	8003932 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	d000      	beq.n	8003ea6 <HAL_I2C_Mem_Write+0x186>
 8003ea4:	e757      	b.n	8003d56 <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea6:	2120      	movs	r1, #32
 8003ea8:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003eaa:	4d0b      	ldr	r5, [pc, #44]	; (8003ed8 <HAL_I2C_Mem_Write+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eac:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	402a      	ands	r2, r5
 8003eb2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	0023      	movs	r3, r4
 8003eb6:	3341      	adds	r3, #65	; 0x41
 8003eb8:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003eba:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8003ebc:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ebe:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003ec0:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003ec2:	e749      	b.n	8003d58 <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ec4:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8003ec6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ec8:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8003eca:	b292      	uxth	r2, r2
 8003ecc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	9000      	str	r0, [sp, #0]
 8003ed2:	e7d9      	b.n	8003e88 <HAL_I2C_Mem_Write+0x168>
 8003ed4:	80002000 	.word	0x80002000
 8003ed8:	fe00e800 	.word	0xfe00e800

08003edc <HAL_I2C_Mem_Read>:
{
 8003edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ede:	b089      	sub	sp, #36	; 0x24
 8003ee0:	9304      	str	r3, [sp, #16]
 8003ee2:	ab0e      	add	r3, sp, #56	; 0x38
 8003ee4:	9203      	str	r2, [sp, #12]
 8003ee6:	cb04      	ldmia	r3!, {r2}
 8003ee8:	0004      	movs	r4, r0
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	9205      	str	r2, [sp, #20]
 8003eee:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	3341      	adds	r3, #65	; 0x41
 8003ef4:	9307      	str	r3, [sp, #28]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
{
 8003ef8:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003efa:	2002      	movs	r0, #2
{
 8003efc:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d108      	bne.n	8003f14 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 8003f02:	2a00      	cmp	r2, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_I2C_Mem_Read+0x30>
 8003f06:	9b06      	ldr	r3, [sp, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d105      	bne.n	8003f18 <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003f12:	2001      	movs	r0, #1
}
 8003f14:	b009      	add	sp, #36	; 0x24
 8003f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003f18:	0023      	movs	r3, r4
 8003f1a:	3340      	adds	r3, #64	; 0x40
 8003f1c:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8003f1e:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8003f20:	2a01      	cmp	r2, #1
 8003f22:	d0f7      	beq.n	8003f14 <HAL_I2C_Mem_Read+0x38>
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003f28:	f7ff fab6 	bl	8003498 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f2c:	2180      	movs	r1, #128	; 0x80
 8003f2e:	2319      	movs	r3, #25
 8003f30:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8003f32:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f34:	2201      	movs	r2, #1
 8003f36:	0020      	movs	r0, r4
 8003f38:	0209      	lsls	r1, r1, #8
 8003f3a:	f7ff fcca 	bl	80038d2 <I2C_WaitOnFlagUntilTimeout>
 8003f3e:	1e03      	subs	r3, r0, #0
 8003f40:	d1e7      	bne.n	8003f12 <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f42:	2222      	movs	r2, #34	; 0x22
 8003f44:	9907      	ldr	r1, [sp, #28]
 8003f46:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f48:	0022      	movs	r2, r4
 8003f4a:	3242      	adds	r2, #66	; 0x42
 8003f4c:	9207      	str	r2, [sp, #28]
 8003f4e:	2240      	movs	r2, #64	; 0x40
 8003f50:	9907      	ldr	r1, [sp, #28]
 8003f52:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8003f54:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f56:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003f58:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f5a:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f5c:	494d      	ldr	r1, [pc, #308]	; (8004094 <HAL_I2C_Mem_Read+0x1b8>)
    hi2c->XferCount = Size;
 8003f5e:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f60:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8003f62:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f64:	7c12      	ldrb	r2, [r2, #16]
 8003f66:	0020      	movs	r0, r4
 8003f68:	9100      	str	r1, [sp, #0]
 8003f6a:	0039      	movs	r1, r7
 8003f6c:	f7ff fbea 	bl	8003744 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f70:	002a      	movs	r2, r5
 8003f72:	0031      	movs	r1, r6
 8003f74:	0020      	movs	r0, r4
 8003f76:	f7ff fc7f 	bl	8003878 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d127      	bne.n	8003fce <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f7e:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f80:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f82:	2a01      	cmp	r2, #1
 8003f84:	d117      	bne.n	8003fb6 <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f86:	466a      	mov	r2, sp
 8003f88:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f8a:	2140      	movs	r1, #64	; 0x40
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f8c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f8e:	0020      	movs	r0, r4
 8003f90:	0033      	movs	r3, r6
 8003f92:	2200      	movs	r2, #0
 8003f94:	9500      	str	r5, [sp, #0]
 8003f96:	f7ff fc9c 	bl	80038d2 <I2C_WaitOnFlagUntilTimeout>
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d117      	bne.n	8003fce <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f9e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003fa0:	4b3d      	ldr	r3, [pc, #244]	; (8004098 <HAL_I2C_Mem_Read+0x1bc>)
 8003fa2:	2aff      	cmp	r2, #255	; 0xff
 8003fa4:	d817      	bhi.n	8003fd6 <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 8003fa6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	2380      	movs	r3, #128	; 0x80
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	049b      	lsls	r3, r3, #18
 8003fb4:	e014      	b.n	8003fe0 <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fb6:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb8:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fba:	0a12      	lsrs	r2, r2, #8
 8003fbc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fbe:	0020      	movs	r0, r4
 8003fc0:	002a      	movs	r2, r5
 8003fc2:	f7ff fc59 	bl	8003878 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	e7db      	b.n	8003f86 <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	3440      	adds	r4, #64	; 0x40
 8003fd2:	7023      	strb	r3, [r4, #0]
 8003fd4:	e79d      	b.n	8003f12 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fd6:	22ff      	movs	r2, #255	; 0xff
 8003fd8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fe0:	0039      	movs	r1, r7
 8003fe2:	0020      	movs	r0, r4
 8003fe4:	f7ff fbae 	bl	8003744 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003fe8:	0033      	movs	r3, r6
 8003fea:	2200      	movs	r2, #0
 8003fec:	2104      	movs	r1, #4
 8003fee:	0020      	movs	r0, r4
 8003ff0:	9500      	str	r5, [sp, #0]
 8003ff2:	f7ff fc6e 	bl	80038d2 <I2C_WaitOnFlagUntilTimeout>
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d000      	beq.n	8003ffc <HAL_I2C_Mem_Read+0x120>
 8003ffa:	e78a      	b.n	8003f12 <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8004004:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004006:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004008:	3301      	adds	r3, #1
 800400a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800400c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800400e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004010:	3b01      	subs	r3, #1
 8004012:	b29b      	uxth	r3, r3
 8004014:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004016:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004018:	b292      	uxth	r2, r2
 800401a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800401c:	2b00      	cmp	r3, #0
 800401e:	d017      	beq.n	8004050 <HAL_I2C_Mem_Read+0x174>
 8004020:	2a00      	cmp	r2, #0
 8004022:	d115      	bne.n	8004050 <HAL_I2C_Mem_Read+0x174>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004024:	0033      	movs	r3, r6
 8004026:	2180      	movs	r1, #128	; 0x80
 8004028:	0020      	movs	r0, r4
 800402a:	9500      	str	r5, [sp, #0]
 800402c:	f7ff fc51 	bl	80038d2 <I2C_WaitOnFlagUntilTimeout>
 8004030:	2800      	cmp	r0, #0
 8004032:	d000      	beq.n	8004036 <HAL_I2C_Mem_Read+0x15a>
 8004034:	e76d      	b.n	8003f12 <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004036:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004038:	2bff      	cmp	r3, #255	; 0xff
 800403a:	d923      	bls.n	8004084 <HAL_I2C_Mem_Read+0x1a8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800403c:	23ff      	movs	r3, #255	; 0xff
 800403e:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	22ff      	movs	r2, #255	; 0xff
 8004044:	9000      	str	r0, [sp, #0]
 8004046:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004048:	0039      	movs	r1, r7
 800404a:	0020      	movs	r0, r4
 800404c:	f7ff fb7a 	bl	8003744 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004050:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1c8      	bne.n	8003fe8 <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004056:	002a      	movs	r2, r5
 8004058:	0031      	movs	r1, r6
 800405a:	0020      	movs	r0, r4
 800405c:	f7ff fc69 	bl	8003932 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004060:	2800      	cmp	r0, #0
 8004062:	d000      	beq.n	8004066 <HAL_I2C_Mem_Read+0x18a>
 8004064:	e755      	b.n	8003f12 <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004066:	2120      	movs	r1, #32
 8004068:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800406a:	4d0c      	ldr	r5, [pc, #48]	; (800409c <HAL_I2C_Mem_Read+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800406c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	402a      	ands	r2, r5
 8004072:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004074:	0023      	movs	r3, r4
 8004076:	3341      	adds	r3, #65	; 0x41
 8004078:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800407a:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 800407c:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800407e:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004080:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8004082:	e747      	b.n	8003f14 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004084:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8004086:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004088:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800408a:	b292      	uxth	r2, r2
 800408c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	9000      	str	r0, [sp, #0]
 8004092:	e7d9      	b.n	8004048 <HAL_I2C_Mem_Read+0x16c>
 8004094:	80002000 	.word	0x80002000
 8004098:	80002400 	.word	0x80002400
 800409c:	fe00e800 	.word	0xfe00e800

080040a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a2:	0004      	movs	r4, r0
 80040a4:	3441      	adds	r4, #65	; 0x41
 80040a6:	7822      	ldrb	r2, [r4, #0]
{
 80040a8:	0003      	movs	r3, r0
 80040aa:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80040ac:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ae:	b2d6      	uxtb	r6, r2
 80040b0:	2a20      	cmp	r2, #32
 80040b2:	d118      	bne.n	80040e6 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 80040b4:	001d      	movs	r5, r3
 80040b6:	3540      	adds	r5, #64	; 0x40
 80040b8:	782a      	ldrb	r2, [r5, #0]
 80040ba:	2a01      	cmp	r2, #1
 80040bc:	d013      	beq.n	80040e6 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040be:	2224      	movs	r2, #36	; 0x24
 80040c0:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3a23      	subs	r2, #35	; 0x23
 80040c6:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040c8:	4807      	ldr	r0, [pc, #28]	; (80040e8 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80040ca:	4391      	bics	r1, r2
 80040cc:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040ce:	6819      	ldr	r1, [r3, #0]
 80040d0:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 80040d2:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040d4:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80040d6:	6819      	ldr	r1, [r3, #0]
 80040d8:	4339      	orrs	r1, r7
 80040da:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80040dc:	6819      	ldr	r1, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 80040e4:	7028      	strb	r0, [r5, #0]
  }
}
 80040e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e8:	ffffefff 	.word	0xffffefff

080040ec <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ec:	0002      	movs	r2, r0
{
 80040ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f0:	3241      	adds	r2, #65	; 0x41
 80040f2:	7814      	ldrb	r4, [r2, #0]
{
 80040f4:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f6:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fa:	2c20      	cmp	r4, #32
 80040fc:	d117      	bne.n	800412e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 80040fe:	001c      	movs	r4, r3
 8004100:	3440      	adds	r4, #64	; 0x40
 8004102:	7826      	ldrb	r6, [r4, #0]
 8004104:	2e01      	cmp	r6, #1
 8004106:	d012      	beq.n	800412e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004108:	3022      	adds	r0, #34	; 0x22
 800410a:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3823      	subs	r0, #35	; 0x23
 8004110:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8004112:	4f07      	ldr	r7, [pc, #28]	; (8004130 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8004114:	4386      	bics	r6, r0
 8004116:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8004118:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 800411a:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 800411c:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800411e:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8004120:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004122:	6819      	ldr	r1, [r3, #0]
 8004124:	4308      	orrs	r0, r1
 8004126:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004128:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800412a:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800412c:	7020      	strb	r0, [r4, #0]
  }
}
 800412e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004130:	fffff0ff 	.word	0xfffff0ff

08004134 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004134:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004136:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <HAL_RCC_GetSysClockFreq+0x78>)
{
 8004138:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800413a:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800413c:	4022      	ands	r2, r4
 800413e:	2a08      	cmp	r2, #8
 8004140:	d031      	beq.n	80041a6 <HAL_RCC_GetSysClockFreq+0x72>
 8004142:	2a0c      	cmp	r2, #12
 8004144:	d009      	beq.n	800415a <HAL_RCC_GetSysClockFreq+0x26>
 8004146:	2a04      	cmp	r2, #4
 8004148:	d125      	bne.n	8004196 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800414a:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 800414c:	4b18      	ldr	r3, [pc, #96]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800414e:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8004150:	17c0      	asrs	r0, r0, #31
 8004152:	4018      	ands	r0, r3
 8004154:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x80>)
 8004156:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8004158:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800415a:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800415c:	4816      	ldr	r0, [pc, #88]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800415e:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004160:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004162:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004164:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004166:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004168:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800416a:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800416c:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800416e:	4211      	tst	r1, r2
 8004170:	d009      	beq.n	8004186 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004172:	4a12      	ldr	r2, [pc, #72]	; (80041bc <HAL_RCC_GetSysClockFreq+0x88>)
 8004174:	2300      	movs	r3, #0
 8004176:	2100      	movs	r1, #0
 8004178:	f7fc f978 	bl	800046c <__aeabi_lmul>
 800417c:	0022      	movs	r2, r4
 800417e:	2300      	movs	r3, #0
 8004180:	f7fc f954 	bl	800042c <__aeabi_uldivmod>
 8004184:	e7e8      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	2310      	movs	r3, #16
 800418a:	421a      	tst	r2, r3
 800418c:	d001      	beq.n	8004192 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800418e:	4a0c      	ldr	r2, [pc, #48]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8004190:	e7f0      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004192:	4a08      	ldr	r2, [pc, #32]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x80>)
 8004194:	e7ee      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004196:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004198:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800419a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800419c:	041b      	lsls	r3, r3, #16
 800419e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80041a0:	3301      	adds	r3, #1
 80041a2:	4098      	lsls	r0, r3
      break;
 80041a4:	e7d8      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 80041a6:	4805      	ldr	r0, [pc, #20]	; (80041bc <HAL_RCC_GetSysClockFreq+0x88>)
 80041a8:	e7d6      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x24>
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	40021000 	.word	0x40021000
 80041b0:	ff48e500 	.word	0xff48e500
 80041b4:	00f42400 	.word	0x00f42400
 80041b8:	080062d9 	.word	0x080062d9
 80041bc:	007a1200 	.word	0x007a1200
 80041c0:	003d0900 	.word	0x003d0900

080041c4 <HAL_RCC_OscConfig>:
{
 80041c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c6:	0005      	movs	r5, r0
 80041c8:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 80041ca:	2800      	cmp	r0, #0
 80041cc:	d05a      	beq.n	8004284 <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ce:	230c      	movs	r3, #12
 80041d0:	4cbe      	ldr	r4, [pc, #760]	; (80044cc <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d2:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d4:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d6:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d8:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041da:	2380      	movs	r3, #128	; 0x80
 80041dc:	025b      	lsls	r3, r3, #9
 80041de:	0019      	movs	r1, r3
 80041e0:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e2:	07d2      	lsls	r2, r2, #31
 80041e4:	d442      	bmi.n	800426c <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e6:	682b      	ldr	r3, [r5, #0]
 80041e8:	079b      	lsls	r3, r3, #30
 80041ea:	d500      	bpl.n	80041ee <HAL_RCC_OscConfig+0x2a>
 80041ec:	e08b      	b.n	8004306 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041ee:	682b      	ldr	r3, [r5, #0]
 80041f0:	06db      	lsls	r3, r3, #27
 80041f2:	d529      	bpl.n	8004248 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f4:	2e00      	cmp	r6, #0
 80041f6:	d000      	beq.n	80041fa <HAL_RCC_OscConfig+0x36>
 80041f8:	e0dc      	b.n	80043b4 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	059b      	lsls	r3, r3, #22
 80041fe:	d502      	bpl.n	8004206 <HAL_RCC_OscConfig+0x42>
 8004200:	69eb      	ldr	r3, [r5, #28]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d03e      	beq.n	8004284 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004206:	6862      	ldr	r2, [r4, #4]
 8004208:	49b1      	ldr	r1, [pc, #708]	; (80044d0 <HAL_RCC_OscConfig+0x30c>)
 800420a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800420c:	400a      	ands	r2, r1
 800420e:	431a      	orrs	r2, r3
 8004210:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004212:	6861      	ldr	r1, [r4, #4]
 8004214:	6a2a      	ldr	r2, [r5, #32]
 8004216:	0209      	lsls	r1, r1, #8
 8004218:	0a09      	lsrs	r1, r1, #8
 800421a:	0612      	lsls	r2, r2, #24
 800421c:	430a      	orrs	r2, r1
 800421e:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004220:	2280      	movs	r2, #128	; 0x80
 8004222:	0b5b      	lsrs	r3, r3, #13
 8004224:	3301      	adds	r3, #1
 8004226:	0212      	lsls	r2, r2, #8
 8004228:	409a      	lsls	r2, r3
 800422a:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800422c:	68e1      	ldr	r1, [r4, #12]
 800422e:	060a      	lsls	r2, r1, #24
 8004230:	49a8      	ldr	r1, [pc, #672]	; (80044d4 <HAL_RCC_OscConfig+0x310>)
 8004232:	0f12      	lsrs	r2, r2, #28
 8004234:	5c8a      	ldrb	r2, [r1, r2]
 8004236:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004238:	4aa7      	ldr	r2, [pc, #668]	; (80044d8 <HAL_RCC_OscConfig+0x314>)
 800423a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 800423c:	4ba7      	ldr	r3, [pc, #668]	; (80044dc <HAL_RCC_OscConfig+0x318>)
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	f7ff f8e6 	bl	8003410 <HAL_InitTick>
        if(status != HAL_OK)
 8004244:	2800      	cmp	r0, #0
 8004246:	d134      	bne.n	80042b2 <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	071b      	lsls	r3, r3, #28
 800424c:	d500      	bpl.n	8004250 <HAL_RCC_OscConfig+0x8c>
 800424e:	e0e8      	b.n	8004422 <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	075b      	lsls	r3, r3, #29
 8004254:	d500      	bpl.n	8004258 <HAL_RCC_OscConfig+0x94>
 8004256:	e10a      	b.n	800446e <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004258:	682b      	ldr	r3, [r5, #0]
 800425a:	069b      	lsls	r3, r3, #26
 800425c:	d500      	bpl.n	8004260 <HAL_RCC_OscConfig+0x9c>
 800425e:	e18e      	b.n	800457e <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004260:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004262:	2b00      	cmp	r3, #0
 8004264:	d000      	beq.n	8004268 <HAL_RCC_OscConfig+0xa4>
 8004266:	e1bd      	b.n	80045e4 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8004268:	2000      	movs	r0, #0
 800426a:	e022      	b.n	80042b2 <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800426c:	2e08      	cmp	r6, #8
 800426e:	d003      	beq.n	8004278 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004270:	2e0c      	cmp	r6, #12
 8004272:	d109      	bne.n	8004288 <HAL_RCC_OscConfig+0xc4>
 8004274:	2f00      	cmp	r7, #0
 8004276:	d007      	beq.n	8004288 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	039b      	lsls	r3, r3, #14
 800427c:	d5b3      	bpl.n	80041e6 <HAL_RCC_OscConfig+0x22>
 800427e:	686b      	ldr	r3, [r5, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1b0      	bne.n	80041e6 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8004284:	2001      	movs	r0, #1
 8004286:	e014      	b.n	80042b2 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004288:	686a      	ldr	r2, [r5, #4]
 800428a:	428a      	cmp	r2, r1
 800428c:	d113      	bne.n	80042b6 <HAL_RCC_OscConfig+0xf2>
 800428e:	6822      	ldr	r2, [r4, #0]
 8004290:	4313      	orrs	r3, r2
 8004292:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004294:	f7ff f900 	bl	8003498 <HAL_GetTick>
 8004298:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	0292      	lsls	r2, r2, #10
 80042a0:	4213      	tst	r3, r2
 80042a2:	d1a0      	bne.n	80041e6 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a4:	f7ff f8f8 	bl	8003498 <HAL_GetTick>
 80042a8:	9b00      	ldr	r3, [sp, #0]
 80042aa:	1ac0      	subs	r0, r0, r3
 80042ac:	2864      	cmp	r0, #100	; 0x64
 80042ae:	d9f4      	bls.n	800429a <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 80042b0:	2003      	movs	r0, #3
}
 80042b2:	b005      	add	sp, #20
 80042b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b6:	21a0      	movs	r1, #160	; 0xa0
 80042b8:	02c9      	lsls	r1, r1, #11
 80042ba:	428a      	cmp	r2, r1
 80042bc:	d105      	bne.n	80042ca <HAL_RCC_OscConfig+0x106>
 80042be:	2280      	movs	r2, #128	; 0x80
 80042c0:	6821      	ldr	r1, [r4, #0]
 80042c2:	02d2      	lsls	r2, r2, #11
 80042c4:	430a      	orrs	r2, r1
 80042c6:	6022      	str	r2, [r4, #0]
 80042c8:	e7e1      	b.n	800428e <HAL_RCC_OscConfig+0xca>
 80042ca:	6821      	ldr	r1, [r4, #0]
 80042cc:	4884      	ldr	r0, [pc, #528]	; (80044e0 <HAL_RCC_OscConfig+0x31c>)
 80042ce:	4001      	ands	r1, r0
 80042d0:	6021      	str	r1, [r4, #0]
 80042d2:	6821      	ldr	r1, [r4, #0]
 80042d4:	400b      	ands	r3, r1
 80042d6:	9303      	str	r3, [sp, #12]
 80042d8:	9b03      	ldr	r3, [sp, #12]
 80042da:	4982      	ldr	r1, [pc, #520]	; (80044e4 <HAL_RCC_OscConfig+0x320>)
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	400b      	ands	r3, r1
 80042e0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e2:	2a00      	cmp	r2, #0
 80042e4:	d1d6      	bne.n	8004294 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 80042e6:	f7ff f8d7 	bl	8003498 <HAL_GetTick>
 80042ea:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042ec:	2280      	movs	r2, #128	; 0x80
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	0292      	lsls	r2, r2, #10
 80042f2:	4213      	tst	r3, r2
 80042f4:	d100      	bne.n	80042f8 <HAL_RCC_OscConfig+0x134>
 80042f6:	e776      	b.n	80041e6 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f8:	f7ff f8ce 	bl	8003498 <HAL_GetTick>
 80042fc:	9b00      	ldr	r3, [sp, #0]
 80042fe:	1ac0      	subs	r0, r0, r3
 8004300:	2864      	cmp	r0, #100	; 0x64
 8004302:	d9f3      	bls.n	80042ec <HAL_RCC_OscConfig+0x128>
 8004304:	e7d4      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 8004306:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004308:	2e04      	cmp	r6, #4
 800430a:	d003      	beq.n	8004314 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800430c:	2e0c      	cmp	r6, #12
 800430e:	d124      	bne.n	800435a <HAL_RCC_OscConfig+0x196>
 8004310:	2f00      	cmp	r7, #0
 8004312:	d122      	bne.n	800435a <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	075b      	lsls	r3, r3, #29
 8004318:	d501      	bpl.n	800431e <HAL_RCC_OscConfig+0x15a>
 800431a:	2a00      	cmp	r2, #0
 800431c:	d0b2      	beq.n	8004284 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431e:	6861      	ldr	r1, [r4, #4]
 8004320:	692b      	ldr	r3, [r5, #16]
 8004322:	4871      	ldr	r0, [pc, #452]	; (80044e8 <HAL_RCC_OscConfig+0x324>)
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	4001      	ands	r1, r0
 8004328:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800432a:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	438b      	bics	r3, r1
 8004332:	4313      	orrs	r3, r2
 8004334:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004336:	f7ff fefd 	bl	8004134 <HAL_RCC_GetSysClockFreq>
 800433a:	68e3      	ldr	r3, [r4, #12]
 800433c:	4a65      	ldr	r2, [pc, #404]	; (80044d4 <HAL_RCC_OscConfig+0x310>)
 800433e:	061b      	lsls	r3, r3, #24
 8004340:	0f1b      	lsrs	r3, r3, #28
 8004342:	5cd3      	ldrb	r3, [r2, r3]
 8004344:	40d8      	lsrs	r0, r3
 8004346:	4b64      	ldr	r3, [pc, #400]	; (80044d8 <HAL_RCC_OscConfig+0x314>)
 8004348:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 800434a:	4b64      	ldr	r3, [pc, #400]	; (80044dc <HAL_RCC_OscConfig+0x318>)
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	f7ff f85f 	bl	8003410 <HAL_InitTick>
      if(status != HAL_OK)
 8004352:	2800      	cmp	r0, #0
 8004354:	d100      	bne.n	8004358 <HAL_RCC_OscConfig+0x194>
 8004356:	e74a      	b.n	80041ee <HAL_RCC_OscConfig+0x2a>
 8004358:	e7ab      	b.n	80042b2 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800435a:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 800435c:	2a00      	cmp	r2, #0
 800435e:	d018      	beq.n	8004392 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004360:	2109      	movs	r1, #9
 8004362:	438b      	bics	r3, r1
 8004364:	4313      	orrs	r3, r2
 8004366:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004368:	f7ff f896 	bl	8003498 <HAL_GetTick>
 800436c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800436e:	2204      	movs	r2, #4
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	4213      	tst	r3, r2
 8004374:	d007      	beq.n	8004386 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	692b      	ldr	r3, [r5, #16]
 800437a:	495b      	ldr	r1, [pc, #364]	; (80044e8 <HAL_RCC_OscConfig+0x324>)
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	400a      	ands	r2, r1
 8004380:	4313      	orrs	r3, r2
 8004382:	6063      	str	r3, [r4, #4]
 8004384:	e733      	b.n	80041ee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004386:	f7ff f887 	bl	8003498 <HAL_GetTick>
 800438a:	1bc0      	subs	r0, r0, r7
 800438c:	2802      	cmp	r0, #2
 800438e:	d9ee      	bls.n	800436e <HAL_RCC_OscConfig+0x1aa>
 8004390:	e78e      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8004392:	2201      	movs	r2, #1
 8004394:	4393      	bics	r3, r2
 8004396:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004398:	f7ff f87e 	bl	8003498 <HAL_GetTick>
 800439c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800439e:	2204      	movs	r2, #4
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	4213      	tst	r3, r2
 80043a4:	d100      	bne.n	80043a8 <HAL_RCC_OscConfig+0x1e4>
 80043a6:	e722      	b.n	80041ee <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a8:	f7ff f876 	bl	8003498 <HAL_GetTick>
 80043ac:	1bc0      	subs	r0, r0, r7
 80043ae:	2802      	cmp	r0, #2
 80043b0:	d9f5      	bls.n	800439e <HAL_RCC_OscConfig+0x1da>
 80043b2:	e77d      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043b4:	69eb      	ldr	r3, [r5, #28]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d020      	beq.n	80043fc <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 80043ba:	2380      	movs	r3, #128	; 0x80
 80043bc:	6822      	ldr	r2, [r4, #0]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	4313      	orrs	r3, r2
 80043c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043c4:	f7ff f868 	bl	8003498 <HAL_GetTick>
 80043c8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80043ca:	2280      	movs	r2, #128	; 0x80
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	0092      	lsls	r2, r2, #2
 80043d0:	4213      	tst	r3, r2
 80043d2:	d00d      	beq.n	80043f0 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043d4:	6863      	ldr	r3, [r4, #4]
 80043d6:	4a3e      	ldr	r2, [pc, #248]	; (80044d0 <HAL_RCC_OscConfig+0x30c>)
 80043d8:	4013      	ands	r3, r2
 80043da:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80043dc:	4313      	orrs	r3, r2
 80043de:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043e0:	6862      	ldr	r2, [r4, #4]
 80043e2:	6a2b      	ldr	r3, [r5, #32]
 80043e4:	0212      	lsls	r2, r2, #8
 80043e6:	061b      	lsls	r3, r3, #24
 80043e8:	0a12      	lsrs	r2, r2, #8
 80043ea:	4313      	orrs	r3, r2
 80043ec:	6063      	str	r3, [r4, #4]
 80043ee:	e72b      	b.n	8004248 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043f0:	f7ff f852 	bl	8003498 <HAL_GetTick>
 80043f4:	1bc0      	subs	r0, r0, r7
 80043f6:	2802      	cmp	r0, #2
 80043f8:	d9e7      	bls.n	80043ca <HAL_RCC_OscConfig+0x206>
 80043fa:	e759      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	4a3b      	ldr	r2, [pc, #236]	; (80044ec <HAL_RCC_OscConfig+0x328>)
 8004400:	4013      	ands	r3, r2
 8004402:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004404:	f7ff f848 	bl	8003498 <HAL_GetTick>
 8004408:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800440a:	2280      	movs	r2, #128	; 0x80
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	0092      	lsls	r2, r2, #2
 8004410:	4213      	tst	r3, r2
 8004412:	d100      	bne.n	8004416 <HAL_RCC_OscConfig+0x252>
 8004414:	e718      	b.n	8004248 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004416:	f7ff f83f 	bl	8003498 <HAL_GetTick>
 800441a:	1bc0      	subs	r0, r0, r7
 800441c:	2802      	cmp	r0, #2
 800441e:	d9f4      	bls.n	800440a <HAL_RCC_OscConfig+0x246>
 8004420:	e746      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004422:	696a      	ldr	r2, [r5, #20]
 8004424:	2301      	movs	r3, #1
 8004426:	2a00      	cmp	r2, #0
 8004428:	d010      	beq.n	800444c <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 800442a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800442c:	4313      	orrs	r3, r2
 800442e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004430:	f7ff f832 	bl	8003498 <HAL_GetTick>
 8004434:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004436:	2202      	movs	r2, #2
 8004438:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800443a:	4213      	tst	r3, r2
 800443c:	d000      	beq.n	8004440 <HAL_RCC_OscConfig+0x27c>
 800443e:	e707      	b.n	8004250 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004440:	f7ff f82a 	bl	8003498 <HAL_GetTick>
 8004444:	1bc0      	subs	r0, r0, r7
 8004446:	2802      	cmp	r0, #2
 8004448:	d9f5      	bls.n	8004436 <HAL_RCC_OscConfig+0x272>
 800444a:	e731      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 800444c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800444e:	439a      	bics	r2, r3
 8004450:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004452:	f7ff f821 	bl	8003498 <HAL_GetTick>
 8004456:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004458:	2202      	movs	r2, #2
 800445a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800445c:	4213      	tst	r3, r2
 800445e:	d100      	bne.n	8004462 <HAL_RCC_OscConfig+0x29e>
 8004460:	e6f6      	b.n	8004250 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004462:	f7ff f819 	bl	8003498 <HAL_GetTick>
 8004466:	1bc0      	subs	r0, r0, r7
 8004468:	2802      	cmp	r0, #2
 800446a:	d9f5      	bls.n	8004458 <HAL_RCC_OscConfig+0x294>
 800446c:	e720      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800446e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004470:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004472:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004474:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8004476:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004478:	421a      	tst	r2, r3
 800447a:	d104      	bne.n	8004486 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800447c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800447e:	4313      	orrs	r3, r2
 8004480:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004482:	2301      	movs	r3, #1
 8004484:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004486:	2280      	movs	r2, #128	; 0x80
 8004488:	4f19      	ldr	r7, [pc, #100]	; (80044f0 <HAL_RCC_OscConfig+0x32c>)
 800448a:	0052      	lsls	r2, r2, #1
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	4213      	tst	r3, r2
 8004490:	d008      	beq.n	80044a4 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004492:	2280      	movs	r2, #128	; 0x80
 8004494:	68ab      	ldr	r3, [r5, #8]
 8004496:	0052      	lsls	r2, r2, #1
 8004498:	4293      	cmp	r3, r2
 800449a:	d12b      	bne.n	80044f4 <HAL_RCC_OscConfig+0x330>
 800449c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800449e:	4313      	orrs	r3, r2
 80044a0:	6523      	str	r3, [r4, #80]	; 0x50
 80044a2:	e04c      	b.n	800453e <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a4:	2280      	movs	r2, #128	; 0x80
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	0052      	lsls	r2, r2, #1
 80044aa:	4313      	orrs	r3, r2
 80044ac:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80044ae:	f7fe fff3 	bl	8003498 <HAL_GetTick>
 80044b2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b4:	2280      	movs	r2, #128	; 0x80
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	0052      	lsls	r2, r2, #1
 80044ba:	4213      	tst	r3, r2
 80044bc:	d1e9      	bne.n	8004492 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044be:	f7fe ffeb 	bl	8003498 <HAL_GetTick>
 80044c2:	9b01      	ldr	r3, [sp, #4]
 80044c4:	1ac0      	subs	r0, r0, r3
 80044c6:	2864      	cmp	r0, #100	; 0x64
 80044c8:	d9f4      	bls.n	80044b4 <HAL_RCC_OscConfig+0x2f0>
 80044ca:	e6f1      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
 80044cc:	40021000 	.word	0x40021000
 80044d0:	ffff1fff 	.word	0xffff1fff
 80044d4:	080062c1 	.word	0x080062c1
 80044d8:	20000094 	.word	0x20000094
 80044dc:	2000009c 	.word	0x2000009c
 80044e0:	fffeffff 	.word	0xfffeffff
 80044e4:	fffbffff 	.word	0xfffbffff
 80044e8:	ffffe0ff 	.word	0xffffe0ff
 80044ec:	fffffeff 	.word	0xfffffeff
 80044f0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d116      	bne.n	8004526 <HAL_RCC_OscConfig+0x362>
 80044f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80044fa:	4a6b      	ldr	r2, [pc, #428]	; (80046a8 <HAL_RCC_OscConfig+0x4e4>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	6523      	str	r3, [r4, #80]	; 0x50
 8004500:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004502:	4a6a      	ldr	r2, [pc, #424]	; (80046ac <HAL_RCC_OscConfig+0x4e8>)
 8004504:	4013      	ands	r3, r2
 8004506:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004508:	f7fe ffc6 	bl	8003498 <HAL_GetTick>
 800450c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800450e:	2280      	movs	r2, #128	; 0x80
 8004510:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004512:	0092      	lsls	r2, r2, #2
 8004514:	4213      	tst	r3, r2
 8004516:	d01a      	beq.n	800454e <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004518:	f7fe ffbe 	bl	8003498 <HAL_GetTick>
 800451c:	4b64      	ldr	r3, [pc, #400]	; (80046b0 <HAL_RCC_OscConfig+0x4ec>)
 800451e:	1bc0      	subs	r0, r0, r7
 8004520:	4298      	cmp	r0, r3
 8004522:	d9f4      	bls.n	800450e <HAL_RCC_OscConfig+0x34a>
 8004524:	e6c4      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004526:	21a0      	movs	r1, #160	; 0xa0
 8004528:	00c9      	lsls	r1, r1, #3
 800452a:	428b      	cmp	r3, r1
 800452c:	d118      	bne.n	8004560 <HAL_RCC_OscConfig+0x39c>
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	430b      	orrs	r3, r1
 8004536:	6523      	str	r3, [r4, #80]	; 0x50
 8004538:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800453a:	431a      	orrs	r2, r3
 800453c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800453e:	f7fe ffab 	bl	8003498 <HAL_GetTick>
 8004542:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004544:	2280      	movs	r2, #128	; 0x80
 8004546:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004548:	0092      	lsls	r2, r2, #2
 800454a:	4213      	tst	r3, r2
 800454c:	d010      	beq.n	8004570 <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 800454e:	9b00      	ldr	r3, [sp, #0]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d000      	beq.n	8004556 <HAL_RCC_OscConfig+0x392>
 8004554:	e680      	b.n	8004258 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004558:	4a56      	ldr	r2, [pc, #344]	; (80046b4 <HAL_RCC_OscConfig+0x4f0>)
 800455a:	4013      	ands	r3, r2
 800455c:	63a3      	str	r3, [r4, #56]	; 0x38
 800455e:	e67b      	b.n	8004258 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004560:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004562:	4a51      	ldr	r2, [pc, #324]	; (80046a8 <HAL_RCC_OscConfig+0x4e4>)
 8004564:	4013      	ands	r3, r2
 8004566:	6523      	str	r3, [r4, #80]	; 0x50
 8004568:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800456a:	4a50      	ldr	r2, [pc, #320]	; (80046ac <HAL_RCC_OscConfig+0x4e8>)
 800456c:	4013      	ands	r3, r2
 800456e:	e797      	b.n	80044a0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004570:	f7fe ff92 	bl	8003498 <HAL_GetTick>
 8004574:	4b4e      	ldr	r3, [pc, #312]	; (80046b0 <HAL_RCC_OscConfig+0x4ec>)
 8004576:	1bc0      	subs	r0, r0, r7
 8004578:	4298      	cmp	r0, r3
 800457a:	d9e3      	bls.n	8004544 <HAL_RCC_OscConfig+0x380>
 800457c:	e698      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800457e:	69a9      	ldr	r1, [r5, #24]
 8004580:	2301      	movs	r3, #1
 8004582:	4a4d      	ldr	r2, [pc, #308]	; (80046b8 <HAL_RCC_OscConfig+0x4f4>)
 8004584:	2900      	cmp	r1, #0
 8004586:	d018      	beq.n	80045ba <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 8004588:	68a1      	ldr	r1, [r4, #8]
 800458a:	4319      	orrs	r1, r3
 800458c:	60a1      	str	r1, [r4, #8]
 800458e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004590:	430b      	orrs	r3, r1
 8004592:	6363      	str	r3, [r4, #52]	; 0x34
 8004594:	2380      	movs	r3, #128	; 0x80
 8004596:	6a11      	ldr	r1, [r2, #32]
 8004598:	019b      	lsls	r3, r3, #6
 800459a:	430b      	orrs	r3, r1
 800459c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800459e:	f7fe ff7b 	bl	8003498 <HAL_GetTick>
 80045a2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045a4:	2202      	movs	r2, #2
 80045a6:	68a3      	ldr	r3, [r4, #8]
 80045a8:	4213      	tst	r3, r2
 80045aa:	d000      	beq.n	80045ae <HAL_RCC_OscConfig+0x3ea>
 80045ac:	e658      	b.n	8004260 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ae:	f7fe ff73 	bl	8003498 <HAL_GetTick>
 80045b2:	1bc0      	subs	r0, r0, r7
 80045b4:	2802      	cmp	r0, #2
 80045b6:	d9f5      	bls.n	80045a4 <HAL_RCC_OscConfig+0x3e0>
 80045b8:	e67a      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 80045ba:	68a1      	ldr	r1, [r4, #8]
 80045bc:	4399      	bics	r1, r3
 80045be:	60a1      	str	r1, [r4, #8]
 80045c0:	6a13      	ldr	r3, [r2, #32]
 80045c2:	493e      	ldr	r1, [pc, #248]	; (80046bc <HAL_RCC_OscConfig+0x4f8>)
 80045c4:	400b      	ands	r3, r1
 80045c6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80045c8:	f7fe ff66 	bl	8003498 <HAL_GetTick>
 80045cc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045ce:	2202      	movs	r2, #2
 80045d0:	68a3      	ldr	r3, [r4, #8]
 80045d2:	4213      	tst	r3, r2
 80045d4:	d100      	bne.n	80045d8 <HAL_RCC_OscConfig+0x414>
 80045d6:	e643      	b.n	8004260 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045d8:	f7fe ff5e 	bl	8003498 <HAL_GetTick>
 80045dc:	1bc0      	subs	r0, r0, r7
 80045de:	2802      	cmp	r0, #2
 80045e0:	d9f5      	bls.n	80045ce <HAL_RCC_OscConfig+0x40a>
 80045e2:	e665      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045e4:	2e0c      	cmp	r6, #12
 80045e6:	d043      	beq.n	8004670 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e8:	4a35      	ldr	r2, [pc, #212]	; (80046c0 <HAL_RCC_OscConfig+0x4fc>)
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d12e      	bne.n	800464c <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 80045ee:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80045f0:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80045f2:	4013      	ands	r3, r2
 80045f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80045f6:	f7fe ff4f 	bl	8003498 <HAL_GetTick>
 80045fa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80045fc:	04bf      	lsls	r7, r7, #18
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	423b      	tst	r3, r7
 8004602:	d11d      	bne.n	8004640 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004604:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004606:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004608:	68e2      	ldr	r2, [r4, #12]
 800460a:	430b      	orrs	r3, r1
 800460c:	492d      	ldr	r1, [pc, #180]	; (80046c4 <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800460e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004610:	400a      	ands	r2, r1
 8004612:	4313      	orrs	r3, r2
 8004614:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004616:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004618:	4313      	orrs	r3, r2
 800461a:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	6822      	ldr	r2, [r4, #0]
 8004620:	045b      	lsls	r3, r3, #17
 8004622:	4313      	orrs	r3, r2
 8004624:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004626:	f7fe ff37 	bl	8003498 <HAL_GetTick>
 800462a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	4233      	tst	r3, r6
 8004630:	d000      	beq.n	8004634 <HAL_RCC_OscConfig+0x470>
 8004632:	e619      	b.n	8004268 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004634:	f7fe ff30 	bl	8003498 <HAL_GetTick>
 8004638:	1b40      	subs	r0, r0, r5
 800463a:	2802      	cmp	r0, #2
 800463c:	d9f6      	bls.n	800462c <HAL_RCC_OscConfig+0x468>
 800463e:	e637      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004640:	f7fe ff2a 	bl	8003498 <HAL_GetTick>
 8004644:	1b80      	subs	r0, r0, r6
 8004646:	2802      	cmp	r0, #2
 8004648:	d9d9      	bls.n	80045fe <HAL_RCC_OscConfig+0x43a>
 800464a:	e631      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 800464c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800464e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004650:	4013      	ands	r3, r2
 8004652:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004654:	f7fe ff20 	bl	8003498 <HAL_GetTick>
 8004658:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800465a:	04b6      	lsls	r6, r6, #18
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	4233      	tst	r3, r6
 8004660:	d100      	bne.n	8004664 <HAL_RCC_OscConfig+0x4a0>
 8004662:	e601      	b.n	8004268 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004664:	f7fe ff18 	bl	8003498 <HAL_GetTick>
 8004668:	1b40      	subs	r0, r0, r5
 800466a:	2802      	cmp	r0, #2
 800466c:	d9f6      	bls.n	800465c <HAL_RCC_OscConfig+0x498>
 800466e:	e61f      	b.n	80042b0 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8004670:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004672:	2b01      	cmp	r3, #1
 8004674:	d100      	bne.n	8004678 <HAL_RCC_OscConfig+0x4b4>
 8004676:	e61c      	b.n	80042b2 <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004678:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800467a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800467e:	0252      	lsls	r2, r2, #9
 8004680:	401a      	ands	r2, r3
 8004682:	428a      	cmp	r2, r1
 8004684:	d000      	beq.n	8004688 <HAL_RCC_OscConfig+0x4c4>
 8004686:	e5fd      	b.n	8004284 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004688:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800468c:	0392      	lsls	r2, r2, #14
 800468e:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004690:	428a      	cmp	r2, r1
 8004692:	d000      	beq.n	8004696 <HAL_RCC_OscConfig+0x4d2>
 8004694:	e5f6      	b.n	8004284 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004696:	22c0      	movs	r2, #192	; 0xc0
 8004698:	0412      	lsls	r2, r2, #16
 800469a:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800469c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800469e:	4293      	cmp	r3, r2
 80046a0:	d100      	bne.n	80046a4 <HAL_RCC_OscConfig+0x4e0>
 80046a2:	e5e1      	b.n	8004268 <HAL_RCC_OscConfig+0xa4>
 80046a4:	e5ee      	b.n	8004284 <HAL_RCC_OscConfig+0xc0>
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	fffffeff 	.word	0xfffffeff
 80046ac:	fffffbff 	.word	0xfffffbff
 80046b0:	00001388 	.word	0x00001388
 80046b4:	efffffff 	.word	0xefffffff
 80046b8:	40010000 	.word	0x40010000
 80046bc:	ffffdfff 	.word	0xffffdfff
 80046c0:	feffffff 	.word	0xfeffffff
 80046c4:	ff02ffff 	.word	0xff02ffff

080046c8 <HAL_RCC_ClockConfig>:
{
 80046c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ca:	1e04      	subs	r4, r0, #0
 80046cc:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80046d0:	2001      	movs	r0, #1
}
 80046d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046d4:	2501      	movs	r5, #1
 80046d6:	4e5b      	ldr	r6, [pc, #364]	; (8004844 <HAL_RCC_ClockConfig+0x17c>)
 80046d8:	9a01      	ldr	r2, [sp, #4]
 80046da:	6833      	ldr	r3, [r6, #0]
 80046dc:	402b      	ands	r3, r5
 80046de:	4293      	cmp	r3, r2
 80046e0:	d331      	bcc.n	8004746 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e2:	6822      	ldr	r2, [r4, #0]
 80046e4:	0793      	lsls	r3, r2, #30
 80046e6:	d443      	bmi.n	8004770 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e8:	07d3      	lsls	r3, r2, #31
 80046ea:	d449      	bmi.n	8004780 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046ec:	2501      	movs	r5, #1
 80046ee:	6833      	ldr	r3, [r6, #0]
 80046f0:	9a01      	ldr	r2, [sp, #4]
 80046f2:	402b      	ands	r3, r5
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d909      	bls.n	800470c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f8:	6833      	ldr	r3, [r6, #0]
 80046fa:	43ab      	bics	r3, r5
 80046fc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80046fe:	f7fe fecb 	bl	8003498 <HAL_GetTick>
 8004702:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004704:	6833      	ldr	r3, [r6, #0]
 8004706:	422b      	tst	r3, r5
 8004708:	d000      	beq.n	800470c <HAL_RCC_ClockConfig+0x44>
 800470a:	e08c      	b.n	8004826 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800470c:	6822      	ldr	r2, [r4, #0]
 800470e:	4d4e      	ldr	r5, [pc, #312]	; (8004848 <HAL_RCC_ClockConfig+0x180>)
 8004710:	0753      	lsls	r3, r2, #29
 8004712:	d500      	bpl.n	8004716 <HAL_RCC_ClockConfig+0x4e>
 8004714:	e08f      	b.n	8004836 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004716:	0713      	lsls	r3, r2, #28
 8004718:	d506      	bpl.n	8004728 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800471a:	68e9      	ldr	r1, [r5, #12]
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	4a4b      	ldr	r2, [pc, #300]	; (800484c <HAL_RCC_ClockConfig+0x184>)
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	400a      	ands	r2, r1
 8004724:	4313      	orrs	r3, r2
 8004726:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004728:	f7ff fd04 	bl	8004134 <HAL_RCC_GetSysClockFreq>
 800472c:	68eb      	ldr	r3, [r5, #12]
 800472e:	4a48      	ldr	r2, [pc, #288]	; (8004850 <HAL_RCC_ClockConfig+0x188>)
 8004730:	061b      	lsls	r3, r3, #24
 8004732:	0f1b      	lsrs	r3, r3, #28
 8004734:	5cd3      	ldrb	r3, [r2, r3]
 8004736:	40d8      	lsrs	r0, r3
 8004738:	4b46      	ldr	r3, [pc, #280]	; (8004854 <HAL_RCC_ClockConfig+0x18c>)
 800473a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800473c:	4b46      	ldr	r3, [pc, #280]	; (8004858 <HAL_RCC_ClockConfig+0x190>)
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	f7fe fe66 	bl	8003410 <HAL_InitTick>
  if(status != HAL_OK)
 8004744:	e7c5      	b.n	80046d2 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	6833      	ldr	r3, [r6, #0]
 8004748:	9a01      	ldr	r2, [sp, #4]
 800474a:	43ab      	bics	r3, r5
 800474c:	4313      	orrs	r3, r2
 800474e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004750:	f7fe fea2 	bl	8003498 <HAL_GetTick>
 8004754:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004756:	6833      	ldr	r3, [r6, #0]
 8004758:	9a01      	ldr	r2, [sp, #4]
 800475a:	402b      	ands	r3, r5
 800475c:	4293      	cmp	r3, r2
 800475e:	d0c0      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004760:	f7fe fe9a 	bl	8003498 <HAL_GetTick>
 8004764:	4b3d      	ldr	r3, [pc, #244]	; (800485c <HAL_RCC_ClockConfig+0x194>)
 8004766:	1bc0      	subs	r0, r0, r7
 8004768:	4298      	cmp	r0, r3
 800476a:	d9f4      	bls.n	8004756 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 800476c:	2003      	movs	r0, #3
 800476e:	e7b0      	b.n	80046d2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004770:	20f0      	movs	r0, #240	; 0xf0
 8004772:	4935      	ldr	r1, [pc, #212]	; (8004848 <HAL_RCC_ClockConfig+0x180>)
 8004774:	68cb      	ldr	r3, [r1, #12]
 8004776:	4383      	bics	r3, r0
 8004778:	68a0      	ldr	r0, [r4, #8]
 800477a:	4303      	orrs	r3, r0
 800477c:	60cb      	str	r3, [r1, #12]
 800477e:	e7b3      	b.n	80046e8 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004780:	4d31      	ldr	r5, [pc, #196]	; (8004848 <HAL_RCC_ClockConfig+0x180>)
 8004782:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004784:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004786:	2a02      	cmp	r2, #2
 8004788:	d118      	bne.n	80047bc <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800478a:	039b      	lsls	r3, r3, #14
 800478c:	d5a0      	bpl.n	80046d0 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478e:	2103      	movs	r1, #3
 8004790:	68eb      	ldr	r3, [r5, #12]
 8004792:	438b      	bics	r3, r1
 8004794:	4313      	orrs	r3, r2
 8004796:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8004798:	f7fe fe7e 	bl	8003498 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800479e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d118      	bne.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047a4:	220c      	movs	r2, #12
 80047a6:	68eb      	ldr	r3, [r5, #12]
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d09e      	beq.n	80046ec <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ae:	f7fe fe73 	bl	8003498 <HAL_GetTick>
 80047b2:	4b2a      	ldr	r3, [pc, #168]	; (800485c <HAL_RCC_ClockConfig+0x194>)
 80047b4:	1bc0      	subs	r0, r0, r7
 80047b6:	4298      	cmp	r0, r3
 80047b8:	d9f4      	bls.n	80047a4 <HAL_RCC_ClockConfig+0xdc>
 80047ba:	e7d7      	b.n	800476c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047bc:	2a03      	cmp	r2, #3
 80047be:	d102      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047c0:	019b      	lsls	r3, r3, #6
 80047c2:	d4e4      	bmi.n	800478e <HAL_RCC_ClockConfig+0xc6>
 80047c4:	e784      	b.n	80046d0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80047c6:	2a01      	cmp	r2, #1
 80047c8:	d102      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ca:	075b      	lsls	r3, r3, #29
 80047cc:	d4df      	bmi.n	800478e <HAL_RCC_ClockConfig+0xc6>
 80047ce:	e77f      	b.n	80046d0 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80047d0:	059b      	lsls	r3, r3, #22
 80047d2:	d4dc      	bmi.n	800478e <HAL_RCC_ClockConfig+0xc6>
 80047d4:	e77c      	b.n	80046d0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d10b      	bne.n	80047f2 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047da:	220c      	movs	r2, #12
 80047dc:	68eb      	ldr	r3, [r5, #12]
 80047de:	4013      	ands	r3, r2
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d083      	beq.n	80046ec <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e4:	f7fe fe58 	bl	8003498 <HAL_GetTick>
 80047e8:	4b1c      	ldr	r3, [pc, #112]	; (800485c <HAL_RCC_ClockConfig+0x194>)
 80047ea:	1bc0      	subs	r0, r0, r7
 80047ec:	4298      	cmp	r0, r3
 80047ee:	d9f4      	bls.n	80047da <HAL_RCC_ClockConfig+0x112>
 80047f0:	e7bc      	b.n	800476c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d011      	beq.n	800481a <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80047f6:	220c      	movs	r2, #12
 80047f8:	68eb      	ldr	r3, [r5, #12]
 80047fa:	4213      	tst	r3, r2
 80047fc:	d100      	bne.n	8004800 <HAL_RCC_ClockConfig+0x138>
 80047fe:	e775      	b.n	80046ec <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004800:	f7fe fe4a 	bl	8003498 <HAL_GetTick>
 8004804:	4b15      	ldr	r3, [pc, #84]	; (800485c <HAL_RCC_ClockConfig+0x194>)
 8004806:	1bc0      	subs	r0, r0, r7
 8004808:	4298      	cmp	r0, r3
 800480a:	d9f4      	bls.n	80047f6 <HAL_RCC_ClockConfig+0x12e>
 800480c:	e7ae      	b.n	800476c <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800480e:	f7fe fe43 	bl	8003498 <HAL_GetTick>
 8004812:	4b12      	ldr	r3, [pc, #72]	; (800485c <HAL_RCC_ClockConfig+0x194>)
 8004814:	1bc0      	subs	r0, r0, r7
 8004816:	4298      	cmp	r0, r3
 8004818:	d8a8      	bhi.n	800476c <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800481a:	220c      	movs	r2, #12
 800481c:	68eb      	ldr	r3, [r5, #12]
 800481e:	4013      	ands	r3, r2
 8004820:	2b04      	cmp	r3, #4
 8004822:	d1f4      	bne.n	800480e <HAL_RCC_ClockConfig+0x146>
 8004824:	e762      	b.n	80046ec <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004826:	f7fe fe37 	bl	8003498 <HAL_GetTick>
 800482a:	4b0c      	ldr	r3, [pc, #48]	; (800485c <HAL_RCC_ClockConfig+0x194>)
 800482c:	1bc0      	subs	r0, r0, r7
 800482e:	4298      	cmp	r0, r3
 8004830:	d800      	bhi.n	8004834 <HAL_RCC_ClockConfig+0x16c>
 8004832:	e767      	b.n	8004704 <HAL_RCC_ClockConfig+0x3c>
 8004834:	e79a      	b.n	800476c <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004836:	68eb      	ldr	r3, [r5, #12]
 8004838:	4909      	ldr	r1, [pc, #36]	; (8004860 <HAL_RCC_ClockConfig+0x198>)
 800483a:	400b      	ands	r3, r1
 800483c:	68e1      	ldr	r1, [r4, #12]
 800483e:	430b      	orrs	r3, r1
 8004840:	60eb      	str	r3, [r5, #12]
 8004842:	e768      	b.n	8004716 <HAL_RCC_ClockConfig+0x4e>
 8004844:	40022000 	.word	0x40022000
 8004848:	40021000 	.word	0x40021000
 800484c:	ffffc7ff 	.word	0xffffc7ff
 8004850:	080062c1 	.word	0x080062c1
 8004854:	20000094 	.word	0x20000094
 8004858:	2000009c 	.word	0x2000009c
 800485c:	00001388 	.word	0x00001388
 8004860:	fffff8ff 	.word	0xfffff8ff

08004864 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004864:	4b04      	ldr	r3, [pc, #16]	; (8004878 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004866:	4a05      	ldr	r2, [pc, #20]	; (800487c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	055b      	lsls	r3, r3, #21
 800486c:	0f5b      	lsrs	r3, r3, #29
 800486e:	5cd3      	ldrb	r3, [r2, r3]
 8004870:	4a03      	ldr	r2, [pc, #12]	; (8004880 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004872:	6810      	ldr	r0, [r2, #0]
 8004874:	40d8      	lsrs	r0, r3
}
 8004876:	4770      	bx	lr
 8004878:	40021000 	.word	0x40021000
 800487c:	080062d1 	.word	0x080062d1
 8004880:	20000094 	.word	0x20000094

08004884 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004884:	4b04      	ldr	r3, [pc, #16]	; (8004898 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004886:	4a05      	ldr	r2, [pc, #20]	; (800489c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	049b      	lsls	r3, r3, #18
 800488c:	0f5b      	lsrs	r3, r3, #29
 800488e:	5cd3      	ldrb	r3, [r2, r3]
 8004890:	4a03      	ldr	r2, [pc, #12]	; (80048a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004892:	6810      	ldr	r0, [r2, #0]
 8004894:	40d8      	lsrs	r0, r3
}
 8004896:	4770      	bx	lr
 8004898:	40021000 	.word	0x40021000
 800489c:	080062d1 	.word	0x080062d1
 80048a0:	20000094 	.word	0x20000094

080048a4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048a4:	6803      	ldr	r3, [r0, #0]
{
 80048a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048a8:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048aa:	069b      	lsls	r3, r3, #26
 80048ac:	d52d      	bpl.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x66>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ae:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 80048b0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b2:	4c5c      	ldr	r4, [pc, #368]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80048b4:	055b      	lsls	r3, r3, #21
 80048b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 80048b8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ba:	421a      	tst	r2, r3
 80048bc:	d104      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80048c0:	4313      	orrs	r3, r2
 80048c2:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80048c4:	2301      	movs	r3, #1
 80048c6:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c8:	2780      	movs	r7, #128	; 0x80
 80048ca:	4e57      	ldr	r6, [pc, #348]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80048cc:	007f      	lsls	r7, r7, #1
 80048ce:	6833      	ldr	r3, [r6, #0]
 80048d0:	423b      	tst	r3, r7
 80048d2:	d053      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80048d4:	686b      	ldr	r3, [r5, #4]
 80048d6:	21c0      	movs	r1, #192	; 0xc0
 80048d8:	0018      	movs	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80048da:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80048dc:	0389      	lsls	r1, r1, #14
 80048de:	4008      	ands	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80048e0:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80048e2:	4290      	cmp	r0, r2
 80048e4:	d15b      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xfa>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80048e6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80048e8:	22c0      	movs	r2, #192	; 0xc0
 80048ea:	0008      	movs	r0, r1
 80048ec:	0292      	lsls	r2, r2, #10
 80048ee:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80048f0:	4211      	tst	r1, r2
 80048f2:	d15f      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	069b      	lsls	r3, r3, #26
 80048f8:	d500      	bpl.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x58>
 80048fa:	e070      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048fc:	9b00      	ldr	r3, [sp, #0]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d103      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004902:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004904:	4a49      	ldr	r2, [pc, #292]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004906:	4013      	ands	r3, r2
 8004908:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800490a:	682b      	ldr	r3, [r5, #0]
 800490c:	07da      	lsls	r2, r3, #31
 800490e:	d506      	bpl.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004910:	2003      	movs	r0, #3
 8004912:	4944      	ldr	r1, [pc, #272]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004914:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004916:	4382      	bics	r2, r0
 8004918:	68a8      	ldr	r0, [r5, #8]
 800491a:	4302      	orrs	r2, r0
 800491c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800491e:	079a      	lsls	r2, r3, #30
 8004920:	d506      	bpl.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004922:	200c      	movs	r0, #12
 8004924:	493f      	ldr	r1, [pc, #252]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004926:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004928:	4382      	bics	r2, r0
 800492a:	68e8      	ldr	r0, [r5, #12]
 800492c:	4302      	orrs	r2, r0
 800492e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004930:	075a      	lsls	r2, r3, #29
 8004932:	d506      	bpl.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004934:	493b      	ldr	r1, [pc, #236]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004936:	483e      	ldr	r0, [pc, #248]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004938:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800493a:	4002      	ands	r2, r0
 800493c:	6928      	ldr	r0, [r5, #16]
 800493e:	4302      	orrs	r2, r0
 8004940:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004942:	071a      	lsls	r2, r3, #28
 8004944:	d506      	bpl.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004946:	4937      	ldr	r1, [pc, #220]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004948:	483a      	ldr	r0, [pc, #232]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800494a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800494c:	4002      	ands	r2, r0
 800494e:	6968      	ldr	r0, [r5, #20]
 8004950:	4302      	orrs	r2, r0
 8004952:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004954:	065a      	lsls	r2, r3, #25
 8004956:	d506      	bpl.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004958:	4932      	ldr	r1, [pc, #200]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800495a:	4837      	ldr	r0, [pc, #220]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800495c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800495e:	4002      	ands	r2, r0
 8004960:	69e8      	ldr	r0, [r5, #28]
 8004962:	4302      	orrs	r2, r0
 8004964:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8004966:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004968:	061b      	lsls	r3, r3, #24
 800496a:	d517      	bpl.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800496c:	4a2d      	ldr	r2, [pc, #180]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800496e:	4933      	ldr	r1, [pc, #204]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004970:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004972:	400b      	ands	r3, r1
 8004974:	69a9      	ldr	r1, [r5, #24]
 8004976:	430b      	orrs	r3, r1
 8004978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800497a:	e00f      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800497c:	6833      	ldr	r3, [r6, #0]
 800497e:	433b      	orrs	r3, r7
 8004980:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004982:	f7fe fd89 	bl	8003498 <HAL_GetTick>
 8004986:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004988:	6833      	ldr	r3, [r6, #0]
 800498a:	423b      	tst	r3, r7
 800498c:	d1a2      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498e:	f7fe fd83 	bl	8003498 <HAL_GetTick>
 8004992:	9b01      	ldr	r3, [sp, #4]
 8004994:	1ac0      	subs	r0, r0, r3
 8004996:	2864      	cmp	r0, #100	; 0x64
 8004998:	d9f6      	bls.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          return HAL_TIMEOUT;
 800499a:	2003      	movs	r0, #3
}
 800499c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800499e:	22c0      	movs	r2, #192	; 0xc0
 80049a0:	0019      	movs	r1, r3
 80049a2:	0292      	lsls	r2, r2, #10
 80049a4:	4011      	ands	r1, r2
 80049a6:	4291      	cmp	r1, r2
 80049a8:	d19d      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80049aa:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80049ac:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80049ae:	0392      	lsls	r2, r2, #14
 80049b0:	d599      	bpl.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80049b2:	e7f3      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80049b4:	4013      	ands	r3, r2
 80049b6:	4283      	cmp	r3, r0
 80049b8:	d09c      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049ba:	682b      	ldr	r3, [r5, #0]
 80049bc:	069b      	lsls	r3, r3, #26
 80049be:	d59d      	bpl.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 80049c0:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80049c2:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80049c4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80049c6:	0312      	lsls	r2, r2, #12
 80049c8:	4302      	orrs	r2, r0
 80049ca:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80049ce:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049d0:	481c      	ldr	r0, [pc, #112]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80049d2:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049d4:	4002      	ands	r2, r0
 80049d6:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 80049d8:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80049da:	05cb      	lsls	r3, r1, #23
 80049dc:	d412      	bmi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049de:	6869      	ldr	r1, [r5, #4]
 80049e0:	23c0      	movs	r3, #192	; 0xc0
 80049e2:	000a      	movs	r2, r1
 80049e4:	029b      	lsls	r3, r3, #10
 80049e6:	401a      	ands	r2, r3
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d107      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x158>
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	4816      	ldr	r0, [pc, #88]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80049f0:	4003      	ands	r3, r0
 80049f2:	20c0      	movs	r0, #192	; 0xc0
 80049f4:	0380      	lsls	r0, r0, #14
 80049f6:	4001      	ands	r1, r0
 80049f8:	430b      	orrs	r3, r1
 80049fa:	6023      	str	r3, [r4, #0]
 80049fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80049fe:	431a      	orrs	r2, r3
 8004a00:	6522      	str	r2, [r4, #80]	; 0x50
 8004a02:	e77b      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 8004a04:	f7fe fd48 	bl	8003498 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a08:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004a0a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a0c:	00bf      	lsls	r7, r7, #2
 8004a0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a10:	423b      	tst	r3, r7
 8004a12:	d000      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004a14:	e76e      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a16:	f7fe fd3f 	bl	8003498 <HAL_GetTick>
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a1c:	1b80      	subs	r0, r0, r6
 8004a1e:	4298      	cmp	r0, r3
 8004a20:	d9f5      	bls.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8004a22:	e7ba      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40007000 	.word	0x40007000
 8004a2c:	efffffff 	.word	0xefffffff
 8004a30:	fffff3ff 	.word	0xfffff3ff
 8004a34:	ffffcfff 	.word	0xffffcfff
 8004a38:	fbffffff 	.word	0xfbffffff
 8004a3c:	fff3ffff 	.word	0xfff3ffff
 8004a40:	fffcffff 	.word	0xfffcffff
 8004a44:	fff7ffff 	.word	0xfff7ffff
 8004a48:	ffcfffff 	.word	0xffcfffff
 8004a4c:	00001388 	.word	0x00001388

08004a50 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a50:	2280      	movs	r2, #128	; 0x80
{
 8004a52:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004a54:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a56:	05d2      	lsls	r2, r2, #23
 8004a58:	4290      	cmp	r0, r2
 8004a5a:	d005      	beq.n	8004a68 <TIM_Base_SetConfig+0x18>
 8004a5c:	4c10      	ldr	r4, [pc, #64]	; (8004aa0 <TIM_Base_SetConfig+0x50>)
 8004a5e:	42a0      	cmp	r0, r4
 8004a60:	d002      	beq.n	8004a68 <TIM_Base_SetConfig+0x18>
 8004a62:	4c10      	ldr	r4, [pc, #64]	; (8004aa4 <TIM_Base_SetConfig+0x54>)
 8004a64:	42a0      	cmp	r0, r4
 8004a66:	d10f      	bne.n	8004a88 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a68:	2470      	movs	r4, #112	; 0x70
 8004a6a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004a6c:	684c      	ldr	r4, [r1, #4]
 8004a6e:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a70:	4290      	cmp	r0, r2
 8004a72:	d005      	beq.n	8004a80 <TIM_Base_SetConfig+0x30>
 8004a74:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <TIM_Base_SetConfig+0x50>)
 8004a76:	4290      	cmp	r0, r2
 8004a78:	d002      	beq.n	8004a80 <TIM_Base_SetConfig+0x30>
 8004a7a:	4a0a      	ldr	r2, [pc, #40]	; (8004aa4 <TIM_Base_SetConfig+0x54>)
 8004a7c:	4290      	cmp	r0, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a80:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <TIM_Base_SetConfig+0x58>)
 8004a82:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a84:	68ca      	ldr	r2, [r1, #12]
 8004a86:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a88:	2280      	movs	r2, #128	; 0x80
 8004a8a:	4393      	bics	r3, r2
 8004a8c:	690a      	ldr	r2, [r1, #16]
 8004a8e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004a90:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a92:	688b      	ldr	r3, [r1, #8]
 8004a94:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a96:	680b      	ldr	r3, [r1, #0]
 8004a98:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	6143      	str	r3, [r0, #20]
}
 8004a9e:	bd10      	pop	{r4, pc}
 8004aa0:	40010800 	.word	0x40010800
 8004aa4:	40011400 	.word	0x40011400
 8004aa8:	fffffcff 	.word	0xfffffcff

08004aac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aac:	2201      	movs	r2, #1
{
 8004aae:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ab0:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ab2:	6a03      	ldr	r3, [r0, #32]
 8004ab4:	4393      	bics	r3, r2
 8004ab6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004ab8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004aba:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004abc:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004abe:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac0:	680d      	ldr	r5, [r1, #0]
 8004ac2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ac4:	2502      	movs	r5, #2
 8004ac6:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ac8:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004acc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ace:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8004ad0:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8004ad2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad4:	6203      	str	r3, [r0, #32]
}
 8004ad6:	bd30      	pop	{r4, r5, pc}

08004ad8 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad8:	2210      	movs	r2, #16
 8004ada:	6a03      	ldr	r3, [r0, #32]
{
 8004adc:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ade:	4393      	bics	r3, r2
 8004ae0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ae4:	4c09      	ldr	r4, [pc, #36]	; (8004b0c <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 8004ae6:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004ae8:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aea:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aec:	680a      	ldr	r2, [r1, #0]
 8004aee:	0212      	lsls	r2, r2, #8
 8004af0:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004af2:	2420      	movs	r4, #32
 8004af4:	43a3      	bics	r3, r4
 8004af6:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004af8:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afa:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004afc:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004afe:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b00:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b02:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8004b04:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b06:	6203      	str	r3, [r0, #32]
}
 8004b08:	bd30      	pop	{r4, r5, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	ffff8cff 	.word	0xffff8cff

08004b10 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b10:	231f      	movs	r3, #31
{
 8004b12:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b14:	2401      	movs	r4, #1
 8004b16:	4019      	ands	r1, r3
 8004b18:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b1a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8004b1c:	6a03      	ldr	r3, [r0, #32]
 8004b1e:	43a3      	bics	r3, r4
 8004b20:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b22:	6a03      	ldr	r3, [r0, #32]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	6202      	str	r2, [r0, #32]
}
 8004b28:	bd10      	pop	{r4, pc}
	...

08004b2c <HAL_TIM_OC_Start>:
{
 8004b2c:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b2e:	0003      	movs	r3, r0
{
 8004b30:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b32:	2900      	cmp	r1, #0
 8004b34:	d105      	bne.n	8004b42 <HAL_TIM_OC_Start+0x16>
 8004b36:	333a      	adds	r3, #58	; 0x3a
    return HAL_ERROR;
 8004b38:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b3a:	781a      	ldrb	r2, [r3, #0]
 8004b3c:	4282      	cmp	r2, r0
 8004b3e:	d00a      	beq.n	8004b56 <HAL_TIM_OC_Start+0x2a>
}
 8004b40:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b42:	2904      	cmp	r1, #4
 8004b44:	d101      	bne.n	8004b4a <HAL_TIM_OC_Start+0x1e>
 8004b46:	333b      	adds	r3, #59	; 0x3b
 8004b48:	e7f6      	b.n	8004b38 <HAL_TIM_OC_Start+0xc>
 8004b4a:	2908      	cmp	r1, #8
 8004b4c:	d101      	bne.n	8004b52 <HAL_TIM_OC_Start+0x26>
 8004b4e:	333c      	adds	r3, #60	; 0x3c
 8004b50:	e7f2      	b.n	8004b38 <HAL_TIM_OC_Start+0xc>
 8004b52:	333d      	adds	r3, #61	; 0x3d
 8004b54:	e7f0      	b.n	8004b38 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b56:	2202      	movs	r2, #2
 8004b58:	701a      	strb	r2, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b5a:	6820      	ldr	r0, [r4, #0]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f7ff ffd7 	bl	8004b10 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b62:	2280      	movs	r2, #128	; 0x80
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	05d2      	lsls	r2, r2, #23
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d005      	beq.n	8004b78 <HAL_TIM_OC_Start+0x4c>
 8004b6c:	4a0b      	ldr	r2, [pc, #44]	; (8004b9c <HAL_TIM_OC_Start+0x70>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d002      	beq.n	8004b78 <HAL_TIM_OC_Start+0x4c>
 8004b72:	4a0b      	ldr	r2, [pc, #44]	; (8004ba0 <HAL_TIM_OC_Start+0x74>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d10a      	bne.n	8004b8e <HAL_TIM_OC_Start+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b78:	2107      	movs	r1, #7
 8004b7a:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8004b7c:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b7e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b80:	2a06      	cmp	r2, #6
 8004b82:	d0dd      	beq.n	8004b40 <HAL_TIM_OC_Start+0x14>
      __HAL_TIM_ENABLE(htim);
 8004b84:	2201      	movs	r2, #1
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	e7d8      	b.n	8004b40 <HAL_TIM_OC_Start+0x14>
    __HAL_TIM_ENABLE(htim);
 8004b8e:	2201      	movs	r2, #1
 8004b90:	6819      	ldr	r1, [r3, #0]
  return HAL_OK;
 8004b92:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004b94:	430a      	orrs	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e7d2      	b.n	8004b40 <HAL_TIM_OC_Start+0x14>
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	40010800 	.word	0x40010800
 8004ba0:	40011400 	.word	0x40011400

08004ba4 <HAL_TIM_OC_Stop>:
{
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ba8:	2200      	movs	r2, #0
 8004baa:	6800      	ldr	r0, [r0, #0]
{
 8004bac:	000d      	movs	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004bae:	f7ff ffaf 	bl	8004b10 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	4a0c      	ldr	r2, [pc, #48]	; (8004be8 <HAL_TIM_OC_Stop+0x44>)
 8004bb6:	6a19      	ldr	r1, [r3, #32]
 8004bb8:	4211      	tst	r1, r2
 8004bba:	d103      	bne.n	8004bc4 <HAL_TIM_OC_Stop+0x20>
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	438a      	bics	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	2d00      	cmp	r5, #0
 8004bc8:	d103      	bne.n	8004bd2 <HAL_TIM_OC_Stop+0x2e>
 8004bca:	343a      	adds	r4, #58	; 0x3a
}
 8004bcc:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004bce:	7023      	strb	r3, [r4, #0]
}
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004bd2:	2d04      	cmp	r5, #4
 8004bd4:	d101      	bne.n	8004bda <HAL_TIM_OC_Stop+0x36>
 8004bd6:	343b      	adds	r4, #59	; 0x3b
 8004bd8:	e7f8      	b.n	8004bcc <HAL_TIM_OC_Stop+0x28>
 8004bda:	2d08      	cmp	r5, #8
 8004bdc:	d101      	bne.n	8004be2 <HAL_TIM_OC_Stop+0x3e>
 8004bde:	343c      	adds	r4, #60	; 0x3c
 8004be0:	e7f4      	b.n	8004bcc <HAL_TIM_OC_Stop+0x28>
 8004be2:	343d      	adds	r4, #61	; 0x3d
 8004be4:	e7f2      	b.n	8004bcc <HAL_TIM_OC_Stop+0x28>
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	00001111 	.word	0x00001111

08004bec <HAL_TIM_PWM_Init>:
{
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004bf0:	2001      	movs	r0, #1
  if (htim == NULL)
 8004bf2:	2c00      	cmp	r4, #0
 8004bf4:	d01d      	beq.n	8004c32 <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf6:	0025      	movs	r5, r4
 8004bf8:	3539      	adds	r5, #57	; 0x39
 8004bfa:	782b      	ldrb	r3, [r5, #0]
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d105      	bne.n	8004c0e <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004c02:	0023      	movs	r3, r4
 8004c04:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8004c06:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004c08:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8004c0a:	f7fe fb49 	bl	80032a0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c12:	6820      	ldr	r0, [r4, #0]
 8004c14:	1d21      	adds	r1, r4, #4
 8004c16:	f7ff ff1b 	bl	8004a50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c1a:	0022      	movs	r2, r4
 8004c1c:	2301      	movs	r3, #1
  return HAL_OK;
 8004c1e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c20:	323e      	adds	r2, #62	; 0x3e
 8004c22:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c24:	343d      	adds	r4, #61	; 0x3d
 8004c26:	3a04      	subs	r2, #4
 8004c28:	7013      	strb	r3, [r2, #0]
 8004c2a:	7053      	strb	r3, [r2, #1]
 8004c2c:	7093      	strb	r3, [r2, #2]
 8004c2e:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	702b      	strb	r3, [r5, #0]
}
 8004c32:	bd70      	pop	{r4, r5, r6, pc}

08004c34 <HAL_TIM_PWM_Start>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	f7ff ff79 	bl	8004b2c <HAL_TIM_OC_Start>
 8004c3a:	bd10      	pop	{r4, pc}

08004c3c <HAL_TIM_PWM_Stop>:
 8004c3c:	b510      	push	{r4, lr}
 8004c3e:	f7ff ffb1 	bl	8004ba4 <HAL_TIM_OC_Stop>
 8004c42:	bd10      	pop	{r4, pc}

08004c44 <HAL_TIM_PWM_ConfigChannel>:
{
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004c46:	0005      	movs	r5, r0
 8004c48:	3538      	adds	r5, #56	; 0x38
 8004c4a:	782b      	ldrb	r3, [r5, #0]
{
 8004c4c:	0007      	movs	r7, r0
 8004c4e:	000c      	movs	r4, r1
 8004c50:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 8004c52:	2002      	movs	r0, #2
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d00a      	beq.n	8004c6e <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004c58:	3801      	subs	r0, #1
 8004c5a:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 8004c5c:	2a08      	cmp	r2, #8
 8004c5e:	d050      	beq.n	8004d02 <HAL_TIM_PWM_ConfigChannel+0xbe>
 8004c60:	d806      	bhi.n	8004c70 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8004c62:	2a00      	cmp	r2, #0
 8004c64:	d02a      	beq.n	8004cbc <HAL_TIM_PWM_ConfigChannel+0x78>
 8004c66:	2a04      	cmp	r2, #4
 8004c68:	d03a      	beq.n	8004ce0 <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	702b      	strb	r3, [r5, #0]
}
 8004c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8004c70:	2a0c      	cmp	r2, #12
 8004c72:	d1fa      	bne.n	8004c6a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c74:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c76:	4934      	ldr	r1, [pc, #208]	; (8004d48 <HAL_TIM_PWM_ConfigChannel+0x104>)
 8004c78:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c7a:	4834      	ldr	r0, [pc, #208]	; (8004d4c <HAL_TIM_PWM_ConfigChannel+0x108>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c7c:	400a      	ands	r2, r1
 8004c7e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004c80:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004c82:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004c84:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c86:	4001      	ands	r1, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	0207      	lsls	r7, r0, #8
  tmpccer &= ~TIM_CCER_CC4P;
 8004c8c:	4830      	ldr	r0, [pc, #192]	; (8004d50 <HAL_TIM_PWM_ConfigChannel+0x10c>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c8e:	4339      	orrs	r1, r7
  tmpccer &= ~TIM_CCER_CC4P;
 8004c90:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c92:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8004c94:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c96:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8004c98:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004c9a:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c9c:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 8004c9e:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004ca0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ca2:	2280      	movs	r2, #128	; 0x80
 8004ca4:	69d9      	ldr	r1, [r3, #28]
 8004ca6:	0112      	lsls	r2, r2, #4
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	4929      	ldr	r1, [pc, #164]	; (8004d54 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cb4:	68e2      	ldr	r2, [r4, #12]
 8004cb6:	69d9      	ldr	r1, [r3, #28]
 8004cb8:	0212      	lsls	r2, r2, #8
 8004cba:	e041      	b.n	8004d40 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cbc:	6838      	ldr	r0, [r7, #0]
 8004cbe:	f7ff fef5 	bl	8004aac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	6999      	ldr	r1, [r3, #24]
 8004cc8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cca:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ccc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cce:	699a      	ldr	r2, [r3, #24]
 8004cd0:	438a      	bics	r2, r1
 8004cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004cdc:	2000      	movs	r0, #0
      break;
 8004cde:	e7c4      	b.n	8004c6a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce0:	6838      	ldr	r0, [r7, #0]
 8004ce2:	f7ff fef9 	bl	8004ad8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ce6:	2280      	movs	r2, #128	; 0x80
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	0112      	lsls	r2, r2, #4
 8004cec:	6999      	ldr	r1, [r3, #24]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cf2:	699a      	ldr	r2, [r3, #24]
 8004cf4:	4917      	ldr	r1, [pc, #92]	; (8004d54 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8004cf6:	400a      	ands	r2, r1
 8004cf8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cfa:	68e2      	ldr	r2, [r4, #12]
 8004cfc:	6999      	ldr	r1, [r3, #24]
 8004cfe:	0212      	lsls	r2, r2, #8
 8004d00:	e7ea      	b.n	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x94>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d02:	2073      	movs	r0, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d04:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d06:	4914      	ldr	r1, [pc, #80]	; (8004d58 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8004d08:	6a1a      	ldr	r2, [r3, #32]
 8004d0a:	400a      	ands	r2, r1
 8004d0c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004d0e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004d10:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004d12:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d14:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 8004d16:	6820      	ldr	r0, [r4, #0]
 8004d18:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8004d1a:	4810      	ldr	r0, [pc, #64]	; (8004d5c <HAL_TIM_PWM_ConfigChannel+0x118>)
 8004d1c:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d1e:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8004d20:	605f      	str	r7, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004d22:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004d24:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d26:	0212      	lsls	r2, r2, #8
  TIMx->CCR3 = OC_Config->Pulse;
 8004d28:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d2a:	2104      	movs	r1, #4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d2c:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8004d2e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d30:	69da      	ldr	r2, [r3, #28]
 8004d32:	4316      	orrs	r6, r2
 8004d34:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	438a      	bics	r2, r1
 8004d3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d40:	430a      	orrs	r2, r1
 8004d42:	61da      	str	r2, [r3, #28]
 8004d44:	e7ca      	b.n	8004cdc <HAL_TIM_PWM_ConfigChannel+0x98>
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	ffffefff 	.word	0xffffefff
 8004d4c:	ffff8cff 	.word	0xffff8cff
 8004d50:	ffffdfff 	.word	0xffffdfff
 8004d54:	fffffbff 	.word	0xfffffbff
 8004d58:	fffffeff 	.word	0xfffffeff
 8004d5c:	fffffdff 	.word	0xfffffdff

08004d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d60:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d62:	0004      	movs	r4, r0
 8004d64:	2202      	movs	r2, #2
 8004d66:	3438      	adds	r4, #56	; 0x38
 8004d68:	7825      	ldrb	r5, [r4, #0]
{
 8004d6a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004d6c:	0010      	movs	r0, r2
 8004d6e:	2d01      	cmp	r5, #1
 8004d70:	d01d      	beq.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d72:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d74:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004d76:	3539      	adds	r5, #57	; 0x39
 8004d78:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004d7e:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d80:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d82:	680e      	ldr	r6, [r1, #0]
 8004d84:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d86:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d88:	2080      	movs	r0, #128	; 0x80
 8004d8a:	05c0      	lsls	r0, r0, #23
 8004d8c:	4283      	cmp	r3, r0
 8004d8e:	d005      	beq.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004d90:	4807      	ldr	r0, [pc, #28]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8004d92:	4283      	cmp	r3, r0
 8004d94:	d002      	beq.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8004d96:	4807      	ldr	r0, [pc, #28]	; (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004d98:	4283      	cmp	r3, r0
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d9c:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d9e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004da0:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004da2:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004da4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da6:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004da8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004daa:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004dac:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004dae:	bd70      	pop	{r4, r5, r6, pc}
 8004db0:	40010800 	.word	0x40010800
 8004db4:	40011400 	.word	0x40011400

08004db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004db8:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc4:	6801      	ldr	r1, [r0, #0]
 8004dc6:	4d12      	ldr	r5, [pc, #72]	; (8004e10 <UART_EndRxTransfer+0x58>)
 8004dc8:	680b      	ldr	r3, [r1, #0]
 8004dca:	402b      	ands	r3, r5
 8004dcc:	600b      	str	r3, [r1, #0]
 8004dce:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dda:	6801      	ldr	r1, [r0, #0]
 8004ddc:	688b      	ldr	r3, [r1, #8]
 8004dde:	4393      	bics	r3, r2
 8004de0:	608b      	str	r3, [r1, #8]
 8004de2:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d10a      	bne.n	8004e02 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df0:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df4:	2410      	movs	r4, #16
 8004df6:	6802      	ldr	r2, [r0, #0]
 8004df8:	6813      	ldr	r3, [r2, #0]
 8004dfa:	43a3      	bics	r3, r4
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e02:	2220      	movs	r2, #32
 8004e04:	1d03      	adds	r3, r0, #4
 8004e06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e0c:	6683      	str	r3, [r0, #104]	; 0x68
}
 8004e0e:	bd30      	pop	{r4, r5, pc}
 8004e10:	fffffedf 	.word	0xfffffedf

08004e14 <UART_SetConfig>:
{
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e18:	6925      	ldr	r5, [r4, #16]
 8004e1a:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e1c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e1e:	4329      	orrs	r1, r5
 8004e20:	6965      	ldr	r5, [r4, #20]
 8004e22:	69c3      	ldr	r3, [r0, #28]
 8004e24:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e26:	6810      	ldr	r0, [r2, #0]
 8004e28:	4d72      	ldr	r5, [pc, #456]	; (8004ff4 <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e2a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e2c:	4028      	ands	r0, r5
 8004e2e:	4301      	orrs	r1, r0
 8004e30:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e32:	6851      	ldr	r1, [r2, #4]
 8004e34:	4870      	ldr	r0, [pc, #448]	; (8004ff8 <UART_SetConfig+0x1e4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e36:	4d71      	ldr	r5, [pc, #452]	; (8004ffc <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e38:	4001      	ands	r1, r0
 8004e3a:	68e0      	ldr	r0, [r4, #12]
 8004e3c:	4301      	orrs	r1, r0
 8004e3e:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e40:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e42:	42aa      	cmp	r2, r5
 8004e44:	d001      	beq.n	8004e4a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8004e46:	6a21      	ldr	r1, [r4, #32]
 8004e48:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e4a:	6891      	ldr	r1, [r2, #8]
 8004e4c:	4e6c      	ldr	r6, [pc, #432]	; (8005000 <UART_SetConfig+0x1ec>)
 8004e4e:	4031      	ands	r1, r6
 8004e50:	4301      	orrs	r1, r0
 8004e52:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e54:	496b      	ldr	r1, [pc, #428]	; (8005004 <UART_SetConfig+0x1f0>)
 8004e56:	428a      	cmp	r2, r1
 8004e58:	d10f      	bne.n	8004e7a <UART_SetConfig+0x66>
 8004e5a:	2103      	movs	r1, #3
 8004e5c:	4a6a      	ldr	r2, [pc, #424]	; (8005008 <UART_SetConfig+0x1f4>)
 8004e5e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004e60:	400a      	ands	r2, r1
 8004e62:	3a01      	subs	r2, #1
 8004e64:	4969      	ldr	r1, [pc, #420]	; (800500c <UART_SetConfig+0x1f8>)
 8004e66:	2a02      	cmp	r2, #2
 8004e68:	d90f      	bls.n	8004e8a <UART_SetConfig+0x76>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e6a:	2280      	movs	r2, #128	; 0x80
 8004e6c:	0212      	lsls	r2, r2, #8
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d100      	bne.n	8004e74 <UART_SetConfig+0x60>
 8004e72:	e069      	b.n	8004f48 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e74:	f7ff fd06 	bl	8004884 <HAL_RCC_GetPCLK2Freq>
        break;
 8004e78:	e09c      	b.n	8004fb4 <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e7a:	4965      	ldr	r1, [pc, #404]	; (8005010 <UART_SetConfig+0x1fc>)
 8004e7c:	428a      	cmp	r2, r1
 8004e7e:	d113      	bne.n	8004ea8 <UART_SetConfig+0x94>
 8004e80:	210c      	movs	r1, #12
 8004e82:	4a61      	ldr	r2, [pc, #388]	; (8005008 <UART_SetConfig+0x1f4>)
 8004e84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004e86:	400a      	ands	r2, r1
 8004e88:	4962      	ldr	r1, [pc, #392]	; (8005014 <UART_SetConfig+0x200>)
 8004e8a:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	0212      	lsls	r2, r2, #8
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d000      	beq.n	8004e96 <UART_SetConfig+0x82>
 8004e94:	e07f      	b.n	8004f96 <UART_SetConfig+0x182>
    switch (clocksource)
 8004e96:	2808      	cmp	r0, #8
 8004e98:	d818      	bhi.n	8004ecc <UART_SetConfig+0xb8>
 8004e9a:	f7fb f93d 	bl	8000118 <__gnu_thumb1_case_uqi>
 8004e9e:	5550      	.short	0x5550
 8004ea0:	17791758 	.word	0x17791758
 8004ea4:	1717      	.short	0x1717
 8004ea6:	63          	.byte	0x63
 8004ea7:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ea8:	42aa      	cmp	r2, r5
 8004eaa:	d10f      	bne.n	8004ecc <UART_SetConfig+0xb8>
 8004eac:	21c0      	movs	r1, #192	; 0xc0
 8004eae:	2080      	movs	r0, #128	; 0x80
 8004eb0:	4a55      	ldr	r2, [pc, #340]	; (8005008 <UART_SetConfig+0x1f4>)
 8004eb2:	0109      	lsls	r1, r1, #4
 8004eb4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004eb6:	0100      	lsls	r0, r0, #4
 8004eb8:	400b      	ands	r3, r1
 8004eba:	4283      	cmp	r3, r0
 8004ebc:	d016      	beq.n	8004eec <UART_SetConfig+0xd8>
 8004ebe:	d807      	bhi.n	8004ed0 <UART_SetConfig+0xbc>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <UART_SetConfig+0xc6>
 8004ec4:	2280      	movs	r2, #128	; 0x80
 8004ec6:	00d2      	lsls	r2, r2, #3
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d035      	beq.n	8004f38 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ecc:	2001      	movs	r0, #1
 8004ece:	e009      	b.n	8004ee4 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ed0:	428b      	cmp	r3, r1
 8004ed2:	d1fb      	bne.n	8004ecc <UART_SetConfig+0xb8>
 8004ed4:	2080      	movs	r0, #128	; 0x80
 8004ed6:	0200      	lsls	r0, r0, #8
 8004ed8:	e012      	b.n	8004f00 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eda:	f7ff fcc3 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d10e      	bne.n	8004f00 <UART_SetConfig+0xec>
 8004ee2:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004ee8:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8004eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eec:	2310      	movs	r3, #16
 8004eee:	6810      	ldr	r0, [r2, #0]
 8004ef0:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004ef2:	4243      	negs	r3, r0
 8004ef4:	4158      	adcs	r0, r3
 8004ef6:	4b48      	ldr	r3, [pc, #288]	; (8005018 <UART_SetConfig+0x204>)
 8004ef8:	4240      	negs	r0, r0
 8004efa:	4018      	ands	r0, r3
 8004efc:	4b47      	ldr	r3, [pc, #284]	; (800501c <UART_SetConfig+0x208>)
 8004efe:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f00:	2203      	movs	r2, #3
 8004f02:	6863      	ldr	r3, [r4, #4]
 8004f04:	435a      	muls	r2, r3
 8004f06:	4282      	cmp	r2, r0
 8004f08:	d8e0      	bhi.n	8004ecc <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f0a:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f0c:	4282      	cmp	r2, r0
 8004f0e:	d3dd      	bcc.n	8004ecc <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f10:	2700      	movs	r7, #0
 8004f12:	0e02      	lsrs	r2, r0, #24
 8004f14:	0201      	lsls	r1, r0, #8
 8004f16:	085e      	lsrs	r6, r3, #1
 8004f18:	1989      	adds	r1, r1, r6
 8004f1a:	417a      	adcs	r2, r7
 8004f1c:	0008      	movs	r0, r1
 8004f1e:	0011      	movs	r1, r2
 8004f20:	001a      	movs	r2, r3
 8004f22:	003b      	movs	r3, r7
 8004f24:	f7fb fa82 	bl	800042c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f28:	4b3d      	ldr	r3, [pc, #244]	; (8005020 <UART_SetConfig+0x20c>)
 8004f2a:	18c2      	adds	r2, r0, r3
 8004f2c:	4b3d      	ldr	r3, [pc, #244]	; (8005024 <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d8cc      	bhi.n	8004ecc <UART_SetConfig+0xb8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	60d8      	str	r0, [r3, #12]
 8004f36:	e7d4      	b.n	8004ee2 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8004f38:	f7ff f8fc 	bl	8004134 <HAL_RCC_GetSysClockFreq>
        break;
 8004f3c:	e7cf      	b.n	8004ede <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f3e:	f7ff fc91 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8004f42:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8004f44:	d0cd      	beq.n	8004ee2 <UART_SetConfig+0xce>
 8004f46:	e00d      	b.n	8004f64 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f48:	f7ff fc9c 	bl	8004884 <HAL_RCC_GetPCLK2Freq>
 8004f4c:	e7f9      	b.n	8004f42 <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f4e:	4b2e      	ldr	r3, [pc, #184]	; (8005008 <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f50:	4a32      	ldr	r2, [pc, #200]	; (800501c <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	2310      	movs	r3, #16
 8004f56:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f58:	4243      	negs	r3, r0
 8004f5a:	4158      	adcs	r0, r3
 8004f5c:	4b2e      	ldr	r3, [pc, #184]	; (8005018 <UART_SetConfig+0x204>)
 8004f5e:	4240      	negs	r0, r0
 8004f60:	4003      	ands	r3, r0
 8004f62:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f64:	0058      	lsls	r0, r3, #1
 8004f66:	6863      	ldr	r3, [r4, #4]
 8004f68:	6861      	ldr	r1, [r4, #4]
 8004f6a:	085b      	lsrs	r3, r3, #1
 8004f6c:	18c0      	adds	r0, r0, r3
 8004f6e:	f7fb f8e7 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f72:	0002      	movs	r2, r0
 8004f74:	4b2c      	ldr	r3, [pc, #176]	; (8005028 <UART_SetConfig+0x214>)
 8004f76:	3a10      	subs	r2, #16
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d8a7      	bhi.n	8004ecc <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f7c:	230f      	movs	r3, #15
 8004f7e:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f80:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f82:	439a      	bics	r2, r3
 8004f84:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f86:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8004f88:	6822      	ldr	r2, [r4, #0]
 8004f8a:	4318      	orrs	r0, r3
 8004f8c:	60d0      	str	r0, [r2, #12]
 8004f8e:	e7a8      	b.n	8004ee2 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8004f90:	f7ff f8d0 	bl	8004134 <HAL_RCC_GetSysClockFreq>
 8004f94:	e7d5      	b.n	8004f42 <UART_SetConfig+0x12e>
    switch (clocksource)
 8004f96:	2808      	cmp	r0, #8
 8004f98:	d898      	bhi.n	8004ecc <UART_SetConfig+0xb8>
 8004f9a:	f7fb f8c7 	bl	800012c <__gnu_thumb1_case_shi>
 8004f9e:	0009      	.short	0x0009
 8004fa0:	000fff6b 	.word	0x000fff6b
 8004fa4:	0024ff97 	.word	0x0024ff97
 8004fa8:	ff97ff97 	.word	0xff97ff97
 8004fac:	0027ff97 	.word	0x0027ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fb0:	f7ff fc58 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d100      	bne.n	8004fba <UART_SetConfig+0x1a6>
 8004fb8:	e793      	b.n	8004ee2 <UART_SetConfig+0xce>
 8004fba:	e00a      	b.n	8004fd2 <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fbc:	4b12      	ldr	r3, [pc, #72]	; (8005008 <UART_SetConfig+0x1f4>)
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004fc4:	4243      	negs	r3, r0
 8004fc6:	4158      	adcs	r0, r3
 8004fc8:	4b13      	ldr	r3, [pc, #76]	; (8005018 <UART_SetConfig+0x204>)
 8004fca:	4240      	negs	r0, r0
 8004fcc:	4018      	ands	r0, r3
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <UART_SetConfig+0x208>)
 8004fd0:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fd2:	6863      	ldr	r3, [r4, #4]
 8004fd4:	6861      	ldr	r1, [r4, #4]
 8004fd6:	085b      	lsrs	r3, r3, #1
 8004fd8:	1818      	adds	r0, r3, r0
 8004fda:	f7fb f8b1 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fde:	0002      	movs	r2, r0
 8004fe0:	4b11      	ldr	r3, [pc, #68]	; (8005028 <UART_SetConfig+0x214>)
 8004fe2:	3a10      	subs	r2, #16
 8004fe4:	e7a3      	b.n	8004f2e <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 8004fe6:	f7ff f8a5 	bl	8004134 <HAL_RCC_GetSysClockFreq>
        break;
 8004fea:	e7e3      	b.n	8004fb4 <UART_SetConfig+0x1a0>
    switch (clocksource)
 8004fec:	2080      	movs	r0, #128	; 0x80
 8004fee:	0200      	lsls	r0, r0, #8
 8004ff0:	e7ef      	b.n	8004fd2 <UART_SetConfig+0x1be>
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	efff69f3 	.word	0xefff69f3
 8004ff8:	ffffcfff 	.word	0xffffcfff
 8004ffc:	40004800 	.word	0x40004800
 8005000:	fffff4ff 	.word	0xfffff4ff
 8005004:	40013800 	.word	0x40013800
 8005008:	40021000 	.word	0x40021000
 800500c:	080062e2 	.word	0x080062e2
 8005010:	40004400 	.word	0x40004400
 8005014:	080062e5 	.word	0x080062e5
 8005018:	00b71b00 	.word	0x00b71b00
 800501c:	003d0900 	.word	0x003d0900
 8005020:	fffffd00 	.word	0xfffffd00
 8005024:	000ffcff 	.word	0x000ffcff
 8005028:	0000ffef 	.word	0x0000ffef

0800502c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800502c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800502e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005030:	07da      	lsls	r2, r3, #31
 8005032:	d506      	bpl.n	8005042 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005034:	6801      	ldr	r1, [r0, #0]
 8005036:	4c28      	ldr	r4, [pc, #160]	; (80050d8 <UART_AdvFeatureConfig+0xac>)
 8005038:	684a      	ldr	r2, [r1, #4]
 800503a:	4022      	ands	r2, r4
 800503c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800503e:	4322      	orrs	r2, r4
 8005040:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005042:	079a      	lsls	r2, r3, #30
 8005044:	d506      	bpl.n	8005054 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005046:	6801      	ldr	r1, [r0, #0]
 8005048:	4c24      	ldr	r4, [pc, #144]	; (80050dc <UART_AdvFeatureConfig+0xb0>)
 800504a:	684a      	ldr	r2, [r1, #4]
 800504c:	4022      	ands	r2, r4
 800504e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005050:	4322      	orrs	r2, r4
 8005052:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005054:	075a      	lsls	r2, r3, #29
 8005056:	d506      	bpl.n	8005066 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005058:	6801      	ldr	r1, [r0, #0]
 800505a:	4c21      	ldr	r4, [pc, #132]	; (80050e0 <UART_AdvFeatureConfig+0xb4>)
 800505c:	684a      	ldr	r2, [r1, #4]
 800505e:	4022      	ands	r2, r4
 8005060:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005062:	4322      	orrs	r2, r4
 8005064:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005066:	071a      	lsls	r2, r3, #28
 8005068:	d506      	bpl.n	8005078 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800506a:	6801      	ldr	r1, [r0, #0]
 800506c:	4c1d      	ldr	r4, [pc, #116]	; (80050e4 <UART_AdvFeatureConfig+0xb8>)
 800506e:	684a      	ldr	r2, [r1, #4]
 8005070:	4022      	ands	r2, r4
 8005072:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005074:	4322      	orrs	r2, r4
 8005076:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005078:	06da      	lsls	r2, r3, #27
 800507a:	d506      	bpl.n	800508a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800507c:	6801      	ldr	r1, [r0, #0]
 800507e:	4c1a      	ldr	r4, [pc, #104]	; (80050e8 <UART_AdvFeatureConfig+0xbc>)
 8005080:	688a      	ldr	r2, [r1, #8]
 8005082:	4022      	ands	r2, r4
 8005084:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005086:	4322      	orrs	r2, r4
 8005088:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800508a:	069a      	lsls	r2, r3, #26
 800508c:	d506      	bpl.n	800509c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800508e:	6801      	ldr	r1, [r0, #0]
 8005090:	4c16      	ldr	r4, [pc, #88]	; (80050ec <UART_AdvFeatureConfig+0xc0>)
 8005092:	688a      	ldr	r2, [r1, #8]
 8005094:	4022      	ands	r2, r4
 8005096:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005098:	4322      	orrs	r2, r4
 800509a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800509c:	065a      	lsls	r2, r3, #25
 800509e:	d510      	bpl.n	80050c2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050a0:	6801      	ldr	r1, [r0, #0]
 80050a2:	4d13      	ldr	r5, [pc, #76]	; (80050f0 <UART_AdvFeatureConfig+0xc4>)
 80050a4:	684a      	ldr	r2, [r1, #4]
 80050a6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80050a8:	402a      	ands	r2, r5
 80050aa:	4322      	orrs	r2, r4
 80050ac:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ae:	2280      	movs	r2, #128	; 0x80
 80050b0:	0352      	lsls	r2, r2, #13
 80050b2:	4294      	cmp	r4, r2
 80050b4:	d105      	bne.n	80050c2 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050b6:	684a      	ldr	r2, [r1, #4]
 80050b8:	4c0e      	ldr	r4, [pc, #56]	; (80050f4 <UART_AdvFeatureConfig+0xc8>)
 80050ba:	4022      	ands	r2, r4
 80050bc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80050be:	4322      	orrs	r2, r4
 80050c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050c2:	061b      	lsls	r3, r3, #24
 80050c4:	d506      	bpl.n	80050d4 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050c6:	6802      	ldr	r2, [r0, #0]
 80050c8:	490b      	ldr	r1, [pc, #44]	; (80050f8 <UART_AdvFeatureConfig+0xcc>)
 80050ca:	6853      	ldr	r3, [r2, #4]
 80050cc:	400b      	ands	r3, r1
 80050ce:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80050d0:	430b      	orrs	r3, r1
 80050d2:	6053      	str	r3, [r2, #4]
}
 80050d4:	bd30      	pop	{r4, r5, pc}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	fffdffff 	.word	0xfffdffff
 80050dc:	fffeffff 	.word	0xfffeffff
 80050e0:	fffbffff 	.word	0xfffbffff
 80050e4:	ffff7fff 	.word	0xffff7fff
 80050e8:	ffffefff 	.word	0xffffefff
 80050ec:	ffffdfff 	.word	0xffffdfff
 80050f0:	ffefffff 	.word	0xffefffff
 80050f4:	ff9fffff 	.word	0xff9fffff
 80050f8:	fff7ffff 	.word	0xfff7ffff

080050fc <UART_WaitOnFlagUntilTimeout>:
{
 80050fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050fe:	0004      	movs	r4, r0
 8005100:	000d      	movs	r5, r1
 8005102:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005104:	2608      	movs	r6, #8
{
 8005106:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005108:	6822      	ldr	r2, [r4, #0]
 800510a:	69d3      	ldr	r3, [r2, #28]
 800510c:	402b      	ands	r3, r5
 800510e:	1b5b      	subs	r3, r3, r5
 8005110:	4259      	negs	r1, r3
 8005112:	414b      	adcs	r3, r1
 8005114:	42bb      	cmp	r3, r7
 8005116:	d001      	beq.n	800511c <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 8005118:	2000      	movs	r0, #0
 800511a:	e021      	b.n	8005160 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 800511c:	9b08      	ldr	r3, [sp, #32]
 800511e:	3301      	adds	r3, #1
 8005120:	d0f3      	beq.n	800510a <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005122:	f7fe f9b9 	bl	8003498 <HAL_GetTick>
 8005126:	9b00      	ldr	r3, [sp, #0]
 8005128:	1ac0      	subs	r0, r0, r3
 800512a:	9b08      	ldr	r3, [sp, #32]
 800512c:	4298      	cmp	r0, r3
 800512e:	d828      	bhi.n	8005182 <UART_WaitOnFlagUntilTimeout+0x86>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d026      	beq.n	8005182 <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005134:	2104      	movs	r1, #4
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	420a      	tst	r2, r1
 800513c:	d0e4      	beq.n	8005108 <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	0011      	movs	r1, r2
 8005142:	4031      	ands	r1, r6
 8005144:	9101      	str	r1, [sp, #4]
 8005146:	4232      	tst	r2, r6
 8005148:	d00b      	beq.n	8005162 <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 800514a:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800514c:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 800514e:	f7ff fe33 	bl	8004db8 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005152:	0023      	movs	r3, r4
 8005154:	3308      	adds	r3, #8
 8005156:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8005158:	2300      	movs	r3, #0
           return HAL_ERROR;
 800515a:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 800515c:	3478      	adds	r4, #120	; 0x78
 800515e:	7023      	strb	r3, [r4, #0]
}
 8005160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005162:	2280      	movs	r2, #128	; 0x80
 8005164:	69d9      	ldr	r1, [r3, #28]
 8005166:	0112      	lsls	r2, r2, #4
 8005168:	4211      	tst	r1, r2
 800516a:	d0cd      	beq.n	8005108 <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800516c:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800516e:	0020      	movs	r0, r4
 8005170:	f7ff fe22 	bl	8004db8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005174:	0023      	movs	r3, r4
 8005176:	2220      	movs	r2, #32
 8005178:	3308      	adds	r3, #8
 800517a:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 800517c:	9b01      	ldr	r3, [sp, #4]
 800517e:	3478      	adds	r4, #120	; 0x78
 8005180:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8005182:	2003      	movs	r0, #3
 8005184:	e7ec      	b.n	8005160 <UART_WaitOnFlagUntilTimeout+0x64>

08005186 <HAL_UART_Transmit>:
{
 8005186:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005188:	b085      	sub	sp, #20
 800518a:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 800518c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 800518e:	0004      	movs	r4, r0
 8005190:	000d      	movs	r5, r1
 8005192:	0016      	movs	r6, r2
    return HAL_BUSY;
 8005194:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8005196:	2b20      	cmp	r3, #32
 8005198:	d139      	bne.n	800520e <HAL_UART_Transmit+0x88>
      return  HAL_ERROR;
 800519a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800519c:	2900      	cmp	r1, #0
 800519e:	d036      	beq.n	800520e <HAL_UART_Transmit+0x88>
 80051a0:	2a00      	cmp	r2, #0
 80051a2:	d034      	beq.n	800520e <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	68a2      	ldr	r2, [r4, #8]
 80051a8:	015b      	lsls	r3, r3, #5
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d104      	bne.n	80051b8 <HAL_UART_Transmit+0x32>
 80051ae:	6923      	ldr	r3, [r4, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80051b4:	4201      	tst	r1, r0
 80051b6:	d12a      	bne.n	800520e <HAL_UART_Transmit+0x88>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b8:	0023      	movs	r3, r4
 80051ba:	2200      	movs	r2, #0
 80051bc:	3308      	adds	r3, #8
 80051be:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051c0:	2321      	movs	r3, #33	; 0x21
 80051c2:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 80051c4:	f7fe f968 	bl	8003498 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80051c8:	0023      	movs	r3, r4
 80051ca:	3350      	adds	r3, #80	; 0x50
 80051cc:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 80051ce:	3302      	adds	r3, #2
 80051d0:	801e      	strh	r6, [r3, #0]
 80051d2:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d4:	2380      	movs	r3, #128	; 0x80
 80051d6:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80051d8:	0007      	movs	r7, r0
      pdata16bits = NULL;
 80051da:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051dc:	015b      	lsls	r3, r3, #5
 80051de:	429a      	cmp	r2, r3
 80051e0:	d104      	bne.n	80051ec <HAL_UART_Transmit+0x66>
 80051e2:	6923      	ldr	r3, [r4, #16]
 80051e4:	42b3      	cmp	r3, r6
 80051e6:	d101      	bne.n	80051ec <HAL_UART_Transmit+0x66>
 80051e8:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80051ea:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80051ec:	0023      	movs	r3, r4
 80051ee:	3352      	adds	r3, #82	; 0x52
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10c      	bne.n	8005212 <HAL_UART_Transmit+0x8c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051f8:	9b03      	ldr	r3, [sp, #12]
 80051fa:	2140      	movs	r1, #64	; 0x40
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	0020      	movs	r0, r4
 8005200:	003b      	movs	r3, r7
 8005202:	f7ff ff7b 	bl	80050fc <UART_WaitOnFlagUntilTimeout>
 8005206:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8005208:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800520a:	2800      	cmp	r0, #0
 800520c:	d10d      	bne.n	800522a <HAL_UART_Transmit+0xa4>
}
 800520e:	b005      	add	sp, #20
 8005210:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005212:	9b03      	ldr	r3, [sp, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	2180      	movs	r1, #128	; 0x80
 800521a:	003b      	movs	r3, r7
 800521c:	0020      	movs	r0, r4
 800521e:	f7ff ff6d 	bl	80050fc <UART_WaitOnFlagUntilTimeout>
 8005222:	2800      	cmp	r0, #0
 8005224:	d003      	beq.n	800522e <HAL_UART_Transmit+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 8005226:	2320      	movs	r3, #32
 8005228:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 800522a:	2003      	movs	r0, #3
 800522c:	e7ef      	b.n	800520e <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800522e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8005230:	2d00      	cmp	r5, #0
 8005232:	d10b      	bne.n	800524c <HAL_UART_Transmit+0xc6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005234:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8005236:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005238:	05db      	lsls	r3, r3, #23
 800523a:	0ddb      	lsrs	r3, r3, #23
 800523c:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800523e:	9b02      	ldr	r3, [sp, #8]
 8005240:	9a02      	ldr	r2, [sp, #8]
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	3b01      	subs	r3, #1
 8005246:	b29b      	uxth	r3, r3
 8005248:	8013      	strh	r3, [r2, #0]
 800524a:	e7cf      	b.n	80051ec <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800524c:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800524e:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005250:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8005252:	e7f4      	b.n	800523e <HAL_UART_Transmit+0xb8>

08005254 <HAL_UART_Receive>:
{
 8005254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005256:	0016      	movs	r6, r2
 8005258:	b087      	sub	sp, #28
  if (huart->RxState == HAL_UART_STATE_READY)
 800525a:	1d02      	adds	r2, r0, #4
{
 800525c:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 800525e:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
{
 8005260:	0004      	movs	r4, r0
 8005262:	000d      	movs	r5, r1
    return HAL_BUSY;
 8005264:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8005266:	2b20      	cmp	r3, #32
 8005268:	d160      	bne.n	800532c <HAL_UART_Receive+0xd8>
      return  HAL_ERROR;
 800526a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800526c:	2900      	cmp	r1, #0
 800526e:	d05d      	beq.n	800532c <HAL_UART_Receive+0xd8>
 8005270:	2e00      	cmp	r6, #0
 8005272:	d05b      	beq.n	800532c <HAL_UART_Receive+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005274:	2380      	movs	r3, #128	; 0x80
 8005276:	68a1      	ldr	r1, [r4, #8]
 8005278:	015b      	lsls	r3, r3, #5
 800527a:	4299      	cmp	r1, r3
 800527c:	d104      	bne.n	8005288 <HAL_UART_Receive+0x34>
 800527e:	6923      	ldr	r3, [r4, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_UART_Receive+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005284:	4205      	tst	r5, r0
 8005286:	d151      	bne.n	800532c <HAL_UART_Receive+0xd8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005288:	0023      	movs	r3, r4
 800528a:	2700      	movs	r7, #0
 800528c:	3308      	adds	r3, #8
 800528e:	67df      	str	r7, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005290:	2322      	movs	r3, #34	; 0x22
 8005292:	67d3      	str	r3, [r2, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005294:	6627      	str	r7, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 8005296:	f7fe f8ff 	bl	8003498 <HAL_GetTick>
    huart->RxXferSize  = Size;
 800529a:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 800529c:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 800529e:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 80052a0:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 80052a2:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 80052a4:	3302      	adds	r3, #2
 80052a6:	9303      	str	r3, [sp, #12]
 80052a8:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80052aa:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 80052ac:	0149      	lsls	r1, r1, #5
 80052ae:	3302      	adds	r3, #2
 80052b0:	428a      	cmp	r2, r1
 80052b2:	d11b      	bne.n	80052ec <HAL_UART_Receive+0x98>
 80052b4:	6921      	ldr	r1, [r4, #16]
 80052b6:	42b9      	cmp	r1, r7
 80052b8:	d116      	bne.n	80052e8 <HAL_UART_Receive+0x94>
 80052ba:	4926      	ldr	r1, [pc, #152]	; (8005354 <HAL_UART_Receive+0x100>)
 80052bc:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 80052be:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c0:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 80052c2:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c4:	015b      	lsls	r3, r3, #5
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d104      	bne.n	80052d4 <HAL_UART_Receive+0x80>
 80052ca:	6923      	ldr	r3, [r4, #16]
 80052cc:	42b3      	cmp	r3, r6
 80052ce:	d101      	bne.n	80052d4 <HAL_UART_Receive+0x80>
 80052d0:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80052d2:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 80052d4:	0023      	movs	r3, r4
 80052d6:	335a      	adds	r3, #90	; 0x5a
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b298      	uxth	r0, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d117      	bne.n	8005310 <HAL_UART_Receive+0xbc>
    huart->RxState = HAL_UART_STATE_READY;
 80052e0:	3404      	adds	r4, #4
 80052e2:	3320      	adds	r3, #32
 80052e4:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 80052e6:	e021      	b.n	800532c <HAL_UART_Receive+0xd8>
    UART_MASK_COMPUTATION(huart);
 80052e8:	21ff      	movs	r1, #255	; 0xff
 80052ea:	e7e7      	b.n	80052bc <HAL_UART_Receive+0x68>
 80052ec:	2a00      	cmp	r2, #0
 80052ee:	d104      	bne.n	80052fa <HAL_UART_Receive+0xa6>
 80052f0:	6921      	ldr	r1, [r4, #16]
 80052f2:	2900      	cmp	r1, #0
 80052f4:	d0f8      	beq.n	80052e8 <HAL_UART_Receive+0x94>
 80052f6:	217f      	movs	r1, #127	; 0x7f
 80052f8:	e7e0      	b.n	80052bc <HAL_UART_Receive+0x68>
 80052fa:	2180      	movs	r1, #128	; 0x80
 80052fc:	0549      	lsls	r1, r1, #21
 80052fe:	428a      	cmp	r2, r1
 8005300:	d104      	bne.n	800530c <HAL_UART_Receive+0xb8>
 8005302:	6921      	ldr	r1, [r4, #16]
 8005304:	2900      	cmp	r1, #0
 8005306:	d0f6      	beq.n	80052f6 <HAL_UART_Receive+0xa2>
 8005308:	213f      	movs	r1, #63	; 0x3f
 800530a:	e7d7      	b.n	80052bc <HAL_UART_Receive+0x68>
 800530c:	801f      	strh	r7, [r3, #0]
 800530e:	e7d6      	b.n	80052be <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005310:	9b05      	ldr	r3, [sp, #20]
 8005312:	2200      	movs	r2, #0
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	2120      	movs	r1, #32
 8005318:	0020      	movs	r0, r4
 800531a:	9b04      	ldr	r3, [sp, #16]
 800531c:	f7ff feee 	bl	80050fc <UART_WaitOnFlagUntilTimeout>
 8005320:	2800      	cmp	r0, #0
 8005322:	d005      	beq.n	8005330 <HAL_UART_Receive+0xdc>
        huart->RxState = HAL_UART_STATE_READY;
 8005324:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8005326:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8005328:	3404      	adds	r4, #4
 800532a:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800532c:	b007      	add	sp, #28
 800532e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8005336:	2d00      	cmp	r5, #0
 8005338:	d108      	bne.n	800534c <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800533a:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 800533c:	3602      	adds	r6, #2
      huart->RxXferCount--;
 800533e:	9b03      	ldr	r3, [sp, #12]
 8005340:	9a03      	ldr	r2, [sp, #12]
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	3b01      	subs	r3, #1
 8005346:	b29b      	uxth	r3, r3
 8005348:	8013      	strh	r3, [r2, #0]
 800534a:	e7c3      	b.n	80052d4 <HAL_UART_Receive+0x80>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800534c:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 800534e:	3501      	adds	r5, #1
 8005350:	e7f5      	b.n	800533e <HAL_UART_Receive+0xea>
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	000001ff 	.word	0x000001ff

08005358 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005358:	0003      	movs	r3, r0
{
 800535a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535c:	2500      	movs	r5, #0
{
 800535e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005360:	3308      	adds	r3, #8
 8005362:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005364:	f7fe f898 	bl	8003498 <HAL_GetTick>
 8005368:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800536a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800536c:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3678      	adds	r6, #120	; 0x78
 8005372:	071b      	lsls	r3, r3, #28
 8005374:	d51b      	bpl.n	80053ae <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005376:	2180      	movs	r1, #128	; 0x80
 8005378:	4b26      	ldr	r3, [pc, #152]	; (8005414 <UART_CheckIdleState+0xbc>)
 800537a:	002a      	movs	r2, r5
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	0389      	lsls	r1, r1, #14
 8005380:	0003      	movs	r3, r0
 8005382:	0020      	movs	r0, r4
 8005384:	f7ff feba 	bl	80050fc <UART_WaitOnFlagUntilTimeout>
 8005388:	42a8      	cmp	r0, r5
 800538a:	d010      	beq.n	80053ae <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005390:	2301      	movs	r3, #1
 8005392:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005396:	2080      	movs	r0, #128	; 0x80
 8005398:	6822      	ldr	r2, [r4, #0]
 800539a:	6813      	ldr	r3, [r2, #0]
 800539c:	4383      	bics	r3, r0
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80053a4:	2320      	movs	r3, #32
 80053a6:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 80053a8:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 80053aa:	2003      	movs	r0, #3
}
 80053ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053ae:	0025      	movs	r5, r4
 80053b0:	cd08      	ldmia	r5!, {r3}
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	075b      	lsls	r3, r3, #29
 80053b6:	d525      	bpl.n	8005404 <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b8:	2180      	movs	r1, #128	; 0x80
 80053ba:	4b16      	ldr	r3, [pc, #88]	; (8005414 <UART_CheckIdleState+0xbc>)
 80053bc:	2200      	movs	r2, #0
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	0020      	movs	r0, r4
 80053c2:	003b      	movs	r3, r7
 80053c4:	03c9      	lsls	r1, r1, #15
 80053c6:	f7ff fe99 	bl	80050fc <UART_WaitOnFlagUntilTimeout>
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d01a      	beq.n	8005404 <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ce:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d2:	2201      	movs	r2, #1
 80053d4:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053d8:	6821      	ldr	r1, [r4, #0]
 80053da:	4f0f      	ldr	r7, [pc, #60]	; (8005418 <UART_CheckIdleState+0xc0>)
 80053dc:	680b      	ldr	r3, [r1, #0]
 80053de:	403b      	ands	r3, r7
 80053e0:	600b      	str	r3, [r1, #0]
 80053e2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ea:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ee:	6821      	ldr	r1, [r4, #0]
 80053f0:	688b      	ldr	r3, [r1, #8]
 80053f2:	4393      	bics	r3, r2
 80053f4:	608b      	str	r3, [r1, #8]
 80053f6:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80053fa:	2320      	movs	r3, #32
 80053fc:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 80053fe:	2300      	movs	r3, #0
 8005400:	7033      	strb	r3, [r6, #0]
 8005402:	e7d2      	b.n	80053aa <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005404:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005406:	2320      	movs	r3, #32
 8005408:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800540a:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540c:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800540e:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8005410:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 8005412:	e7cb      	b.n	80053ac <UART_CheckIdleState+0x54>
 8005414:	01ffffff 	.word	0x01ffffff
 8005418:	fffffedf 	.word	0xfffffedf

0800541c <HAL_UART_Init>:
{
 800541c:	b510      	push	{r4, lr}
 800541e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005420:	d101      	bne.n	8005426 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8005422:	2001      	movs	r0, #1
}
 8005424:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005426:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800542c:	0002      	movs	r2, r0
 800542e:	3278      	adds	r2, #120	; 0x78
 8005430:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005432:	f7fd ff69 	bl	8003308 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005436:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005438:	2101      	movs	r1, #1
 800543a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800543c:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800543e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005440:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005442:	438b      	bics	r3, r1
 8005444:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005446:	f7ff fce5 	bl	8004e14 <UART_SetConfig>
 800544a:	2801      	cmp	r0, #1
 800544c:	d0e9      	beq.n	8005422 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800544e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8005454:	0020      	movs	r0, r4
 8005456:	f7ff fde9 	bl	800502c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	4907      	ldr	r1, [pc, #28]	; (800547c <HAL_UART_Init+0x60>)
 800545e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005460:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005462:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005464:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	438a      	bics	r2, r1
 800546c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800546e:	2201      	movs	r2, #1
 8005470:	6819      	ldr	r1, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005476:	f7ff ff6f 	bl	8005358 <UART_CheckIdleState>
 800547a:	e7d3      	b.n	8005424 <HAL_UART_Init+0x8>
 800547c:	ffffb7ff 	.word	0xffffb7ff

08005480 <__errno>:
 8005480:	4b01      	ldr	r3, [pc, #4]	; (8005488 <__errno+0x8>)
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	4770      	bx	lr
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	200000a0 	.word	0x200000a0

0800548c <__libc_init_array>:
 800548c:	b570      	push	{r4, r5, r6, lr}
 800548e:	2600      	movs	r6, #0
 8005490:	4d0c      	ldr	r5, [pc, #48]	; (80054c4 <__libc_init_array+0x38>)
 8005492:	4c0d      	ldr	r4, [pc, #52]	; (80054c8 <__libc_init_array+0x3c>)
 8005494:	1b64      	subs	r4, r4, r5
 8005496:	10a4      	asrs	r4, r4, #2
 8005498:	42a6      	cmp	r6, r4
 800549a:	d109      	bne.n	80054b0 <__libc_init_array+0x24>
 800549c:	2600      	movs	r6, #0
 800549e:	f000 fca7 	bl	8005df0 <_init>
 80054a2:	4d0a      	ldr	r5, [pc, #40]	; (80054cc <__libc_init_array+0x40>)
 80054a4:	4c0a      	ldr	r4, [pc, #40]	; (80054d0 <__libc_init_array+0x44>)
 80054a6:	1b64      	subs	r4, r4, r5
 80054a8:	10a4      	asrs	r4, r4, #2
 80054aa:	42a6      	cmp	r6, r4
 80054ac:	d105      	bne.n	80054ba <__libc_init_array+0x2e>
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
 80054b0:	00b3      	lsls	r3, r6, #2
 80054b2:	58eb      	ldr	r3, [r5, r3]
 80054b4:	4798      	blx	r3
 80054b6:	3601      	adds	r6, #1
 80054b8:	e7ee      	b.n	8005498 <__libc_init_array+0xc>
 80054ba:	00b3      	lsls	r3, r6, #2
 80054bc:	58eb      	ldr	r3, [r5, r3]
 80054be:	4798      	blx	r3
 80054c0:	3601      	adds	r6, #1
 80054c2:	e7f2      	b.n	80054aa <__libc_init_array+0x1e>
 80054c4:	08006330 	.word	0x08006330
 80054c8:	08006330 	.word	0x08006330
 80054cc:	08006330 	.word	0x08006330
 80054d0:	08006334 	.word	0x08006334

080054d4 <malloc>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <malloc+0x10>)
 80054d8:	0001      	movs	r1, r0
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	f000 f88c 	bl	80055f8 <_malloc_r>
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	200000a0 	.word	0x200000a0

080054e8 <free>:
 80054e8:	b510      	push	{r4, lr}
 80054ea:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <free+0x10>)
 80054ec:	0001      	movs	r1, r0
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	f000 f816 	bl	8005520 <_free_r>
 80054f4:	bd10      	pop	{r4, pc}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	200000a0 	.word	0x200000a0

080054fc <memcpy>:
 80054fc:	2300      	movs	r3, #0
 80054fe:	b510      	push	{r4, lr}
 8005500:	429a      	cmp	r2, r3
 8005502:	d100      	bne.n	8005506 <memcpy+0xa>
 8005504:	bd10      	pop	{r4, pc}
 8005506:	5ccc      	ldrb	r4, [r1, r3]
 8005508:	54c4      	strb	r4, [r0, r3]
 800550a:	3301      	adds	r3, #1
 800550c:	e7f8      	b.n	8005500 <memcpy+0x4>

0800550e <memset>:
 800550e:	0003      	movs	r3, r0
 8005510:	1882      	adds	r2, r0, r2
 8005512:	4293      	cmp	r3, r2
 8005514:	d100      	bne.n	8005518 <memset+0xa>
 8005516:	4770      	bx	lr
 8005518:	7019      	strb	r1, [r3, #0]
 800551a:	3301      	adds	r3, #1
 800551c:	e7f9      	b.n	8005512 <memset+0x4>
	...

08005520 <_free_r>:
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	0005      	movs	r5, r0
 8005524:	2900      	cmp	r1, #0
 8005526:	d010      	beq.n	800554a <_free_r+0x2a>
 8005528:	1f0c      	subs	r4, r1, #4
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	da00      	bge.n	8005532 <_free_r+0x12>
 8005530:	18e4      	adds	r4, r4, r3
 8005532:	0028      	movs	r0, r5
 8005534:	f000 f910 	bl	8005758 <__malloc_lock>
 8005538:	4a1d      	ldr	r2, [pc, #116]	; (80055b0 <_free_r+0x90>)
 800553a:	6813      	ldr	r3, [r2, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d105      	bne.n	800554c <_free_r+0x2c>
 8005540:	6063      	str	r3, [r4, #4]
 8005542:	6014      	str	r4, [r2, #0]
 8005544:	0028      	movs	r0, r5
 8005546:	f000 f90f 	bl	8005768 <__malloc_unlock>
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	42a3      	cmp	r3, r4
 800554e:	d908      	bls.n	8005562 <_free_r+0x42>
 8005550:	6821      	ldr	r1, [r4, #0]
 8005552:	1860      	adds	r0, r4, r1
 8005554:	4283      	cmp	r3, r0
 8005556:	d1f3      	bne.n	8005540 <_free_r+0x20>
 8005558:	6818      	ldr	r0, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	1841      	adds	r1, r0, r1
 800555e:	6021      	str	r1, [r4, #0]
 8005560:	e7ee      	b.n	8005540 <_free_r+0x20>
 8005562:	001a      	movs	r2, r3
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <_free_r+0x4e>
 800556a:	42a3      	cmp	r3, r4
 800556c:	d9f9      	bls.n	8005562 <_free_r+0x42>
 800556e:	6811      	ldr	r1, [r2, #0]
 8005570:	1850      	adds	r0, r2, r1
 8005572:	42a0      	cmp	r0, r4
 8005574:	d10b      	bne.n	800558e <_free_r+0x6e>
 8005576:	6820      	ldr	r0, [r4, #0]
 8005578:	1809      	adds	r1, r1, r0
 800557a:	1850      	adds	r0, r2, r1
 800557c:	6011      	str	r1, [r2, #0]
 800557e:	4283      	cmp	r3, r0
 8005580:	d1e0      	bne.n	8005544 <_free_r+0x24>
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	1841      	adds	r1, r0, r1
 8005588:	6011      	str	r1, [r2, #0]
 800558a:	6053      	str	r3, [r2, #4]
 800558c:	e7da      	b.n	8005544 <_free_r+0x24>
 800558e:	42a0      	cmp	r0, r4
 8005590:	d902      	bls.n	8005598 <_free_r+0x78>
 8005592:	230c      	movs	r3, #12
 8005594:	602b      	str	r3, [r5, #0]
 8005596:	e7d5      	b.n	8005544 <_free_r+0x24>
 8005598:	6821      	ldr	r1, [r4, #0]
 800559a:	1860      	adds	r0, r4, r1
 800559c:	4283      	cmp	r3, r0
 800559e:	d103      	bne.n	80055a8 <_free_r+0x88>
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	1841      	adds	r1, r0, r1
 80055a6:	6021      	str	r1, [r4, #0]
 80055a8:	6063      	str	r3, [r4, #4]
 80055aa:	6054      	str	r4, [r2, #4]
 80055ac:	e7ca      	b.n	8005544 <_free_r+0x24>
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	200002cc 	.word	0x200002cc

080055b4 <sbrk_aligned>:
 80055b4:	b570      	push	{r4, r5, r6, lr}
 80055b6:	4e0f      	ldr	r6, [pc, #60]	; (80055f4 <sbrk_aligned+0x40>)
 80055b8:	000d      	movs	r5, r1
 80055ba:	6831      	ldr	r1, [r6, #0]
 80055bc:	0004      	movs	r4, r0
 80055be:	2900      	cmp	r1, #0
 80055c0:	d102      	bne.n	80055c8 <sbrk_aligned+0x14>
 80055c2:	f000 f88f 	bl	80056e4 <_sbrk_r>
 80055c6:	6030      	str	r0, [r6, #0]
 80055c8:	0029      	movs	r1, r5
 80055ca:	0020      	movs	r0, r4
 80055cc:	f000 f88a 	bl	80056e4 <_sbrk_r>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d00a      	beq.n	80055ea <sbrk_aligned+0x36>
 80055d4:	2303      	movs	r3, #3
 80055d6:	1cc5      	adds	r5, r0, #3
 80055d8:	439d      	bics	r5, r3
 80055da:	42a8      	cmp	r0, r5
 80055dc:	d007      	beq.n	80055ee <sbrk_aligned+0x3a>
 80055de:	1a29      	subs	r1, r5, r0
 80055e0:	0020      	movs	r0, r4
 80055e2:	f000 f87f 	bl	80056e4 <_sbrk_r>
 80055e6:	1c43      	adds	r3, r0, #1
 80055e8:	d101      	bne.n	80055ee <sbrk_aligned+0x3a>
 80055ea:	2501      	movs	r5, #1
 80055ec:	426d      	negs	r5, r5
 80055ee:	0028      	movs	r0, r5
 80055f0:	bd70      	pop	{r4, r5, r6, pc}
 80055f2:	46c0      	nop			; (mov r8, r8)
 80055f4:	200002d0 	.word	0x200002d0

080055f8 <_malloc_r>:
 80055f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055fa:	2203      	movs	r2, #3
 80055fc:	1ccb      	adds	r3, r1, #3
 80055fe:	4393      	bics	r3, r2
 8005600:	3308      	adds	r3, #8
 8005602:	0006      	movs	r6, r0
 8005604:	001f      	movs	r7, r3
 8005606:	2b0c      	cmp	r3, #12
 8005608:	d232      	bcs.n	8005670 <_malloc_r+0x78>
 800560a:	270c      	movs	r7, #12
 800560c:	42b9      	cmp	r1, r7
 800560e:	d831      	bhi.n	8005674 <_malloc_r+0x7c>
 8005610:	0030      	movs	r0, r6
 8005612:	f000 f8a1 	bl	8005758 <__malloc_lock>
 8005616:	4d32      	ldr	r5, [pc, #200]	; (80056e0 <_malloc_r+0xe8>)
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	001c      	movs	r4, r3
 800561c:	2c00      	cmp	r4, #0
 800561e:	d12e      	bne.n	800567e <_malloc_r+0x86>
 8005620:	0039      	movs	r1, r7
 8005622:	0030      	movs	r0, r6
 8005624:	f7ff ffc6 	bl	80055b4 <sbrk_aligned>
 8005628:	0004      	movs	r4, r0
 800562a:	1c43      	adds	r3, r0, #1
 800562c:	d11e      	bne.n	800566c <_malloc_r+0x74>
 800562e:	682c      	ldr	r4, [r5, #0]
 8005630:	0025      	movs	r5, r4
 8005632:	2d00      	cmp	r5, #0
 8005634:	d14a      	bne.n	80056cc <_malloc_r+0xd4>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	0029      	movs	r1, r5
 800563a:	18e3      	adds	r3, r4, r3
 800563c:	0030      	movs	r0, r6
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	f000 f850 	bl	80056e4 <_sbrk_r>
 8005644:	9b01      	ldr	r3, [sp, #4]
 8005646:	4283      	cmp	r3, r0
 8005648:	d143      	bne.n	80056d2 <_malloc_r+0xda>
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	3703      	adds	r7, #3
 800564e:	1aff      	subs	r7, r7, r3
 8005650:	2303      	movs	r3, #3
 8005652:	439f      	bics	r7, r3
 8005654:	3708      	adds	r7, #8
 8005656:	2f0c      	cmp	r7, #12
 8005658:	d200      	bcs.n	800565c <_malloc_r+0x64>
 800565a:	270c      	movs	r7, #12
 800565c:	0039      	movs	r1, r7
 800565e:	0030      	movs	r0, r6
 8005660:	f7ff ffa8 	bl	80055b4 <sbrk_aligned>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d034      	beq.n	80056d2 <_malloc_r+0xda>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	19df      	adds	r7, r3, r7
 800566c:	6027      	str	r7, [r4, #0]
 800566e:	e013      	b.n	8005698 <_malloc_r+0xa0>
 8005670:	2b00      	cmp	r3, #0
 8005672:	dacb      	bge.n	800560c <_malloc_r+0x14>
 8005674:	230c      	movs	r3, #12
 8005676:	2500      	movs	r5, #0
 8005678:	6033      	str	r3, [r6, #0]
 800567a:	0028      	movs	r0, r5
 800567c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	1bd1      	subs	r1, r2, r7
 8005682:	d420      	bmi.n	80056c6 <_malloc_r+0xce>
 8005684:	290b      	cmp	r1, #11
 8005686:	d917      	bls.n	80056b8 <_malloc_r+0xc0>
 8005688:	19e2      	adds	r2, r4, r7
 800568a:	6027      	str	r7, [r4, #0]
 800568c:	42a3      	cmp	r3, r4
 800568e:	d111      	bne.n	80056b4 <_malloc_r+0xbc>
 8005690:	602a      	str	r2, [r5, #0]
 8005692:	6863      	ldr	r3, [r4, #4]
 8005694:	6011      	str	r1, [r2, #0]
 8005696:	6053      	str	r3, [r2, #4]
 8005698:	0030      	movs	r0, r6
 800569a:	0025      	movs	r5, r4
 800569c:	f000 f864 	bl	8005768 <__malloc_unlock>
 80056a0:	2207      	movs	r2, #7
 80056a2:	350b      	adds	r5, #11
 80056a4:	1d23      	adds	r3, r4, #4
 80056a6:	4395      	bics	r5, r2
 80056a8:	1aea      	subs	r2, r5, r3
 80056aa:	429d      	cmp	r5, r3
 80056ac:	d0e5      	beq.n	800567a <_malloc_r+0x82>
 80056ae:	1b5b      	subs	r3, r3, r5
 80056b0:	50a3      	str	r3, [r4, r2]
 80056b2:	e7e2      	b.n	800567a <_malloc_r+0x82>
 80056b4:	605a      	str	r2, [r3, #4]
 80056b6:	e7ec      	b.n	8005692 <_malloc_r+0x9a>
 80056b8:	6862      	ldr	r2, [r4, #4]
 80056ba:	42a3      	cmp	r3, r4
 80056bc:	d101      	bne.n	80056c2 <_malloc_r+0xca>
 80056be:	602a      	str	r2, [r5, #0]
 80056c0:	e7ea      	b.n	8005698 <_malloc_r+0xa0>
 80056c2:	605a      	str	r2, [r3, #4]
 80056c4:	e7e8      	b.n	8005698 <_malloc_r+0xa0>
 80056c6:	0023      	movs	r3, r4
 80056c8:	6864      	ldr	r4, [r4, #4]
 80056ca:	e7a7      	b.n	800561c <_malloc_r+0x24>
 80056cc:	002c      	movs	r4, r5
 80056ce:	686d      	ldr	r5, [r5, #4]
 80056d0:	e7af      	b.n	8005632 <_malloc_r+0x3a>
 80056d2:	230c      	movs	r3, #12
 80056d4:	0030      	movs	r0, r6
 80056d6:	6033      	str	r3, [r6, #0]
 80056d8:	f000 f846 	bl	8005768 <__malloc_unlock>
 80056dc:	e7cd      	b.n	800567a <_malloc_r+0x82>
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	200002cc 	.word	0x200002cc

080056e4 <_sbrk_r>:
 80056e4:	2300      	movs	r3, #0
 80056e6:	b570      	push	{r4, r5, r6, lr}
 80056e8:	4d06      	ldr	r5, [pc, #24]	; (8005704 <_sbrk_r+0x20>)
 80056ea:	0004      	movs	r4, r0
 80056ec:	0008      	movs	r0, r1
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	f7fd fe42 	bl	8003378 <_sbrk>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d103      	bne.n	8005700 <_sbrk_r+0x1c>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d000      	beq.n	8005700 <_sbrk_r+0x1c>
 80056fe:	6023      	str	r3, [r4, #0]
 8005700:	bd70      	pop	{r4, r5, r6, pc}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	200002d4 	.word	0x200002d4

08005708 <siprintf>:
 8005708:	b40e      	push	{r1, r2, r3}
 800570a:	b500      	push	{lr}
 800570c:	490b      	ldr	r1, [pc, #44]	; (800573c <siprintf+0x34>)
 800570e:	b09c      	sub	sp, #112	; 0x70
 8005710:	ab1d      	add	r3, sp, #116	; 0x74
 8005712:	9002      	str	r0, [sp, #8]
 8005714:	9006      	str	r0, [sp, #24]
 8005716:	9107      	str	r1, [sp, #28]
 8005718:	9104      	str	r1, [sp, #16]
 800571a:	4809      	ldr	r0, [pc, #36]	; (8005740 <siprintf+0x38>)
 800571c:	4909      	ldr	r1, [pc, #36]	; (8005744 <siprintf+0x3c>)
 800571e:	cb04      	ldmia	r3!, {r2}
 8005720:	9105      	str	r1, [sp, #20]
 8005722:	6800      	ldr	r0, [r0, #0]
 8005724:	a902      	add	r1, sp, #8
 8005726:	9301      	str	r3, [sp, #4]
 8005728:	f000 f888 	bl	800583c <_svfiprintf_r>
 800572c:	2300      	movs	r3, #0
 800572e:	9a02      	ldr	r2, [sp, #8]
 8005730:	7013      	strb	r3, [r2, #0]
 8005732:	b01c      	add	sp, #112	; 0x70
 8005734:	bc08      	pop	{r3}
 8005736:	b003      	add	sp, #12
 8005738:	4718      	bx	r3
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	7fffffff 	.word	0x7fffffff
 8005740:	200000a0 	.word	0x200000a0
 8005744:	ffff0208 	.word	0xffff0208

08005748 <strcpy>:
 8005748:	0003      	movs	r3, r0
 800574a:	780a      	ldrb	r2, [r1, #0]
 800574c:	3101      	adds	r1, #1
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	3301      	adds	r3, #1
 8005752:	2a00      	cmp	r2, #0
 8005754:	d1f9      	bne.n	800574a <strcpy+0x2>
 8005756:	4770      	bx	lr

08005758 <__malloc_lock>:
 8005758:	b510      	push	{r4, lr}
 800575a:	4802      	ldr	r0, [pc, #8]	; (8005764 <__malloc_lock+0xc>)
 800575c:	f000 faf0 	bl	8005d40 <__retarget_lock_acquire_recursive>
 8005760:	bd10      	pop	{r4, pc}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	200002d8 	.word	0x200002d8

08005768 <__malloc_unlock>:
 8005768:	b510      	push	{r4, lr}
 800576a:	4802      	ldr	r0, [pc, #8]	; (8005774 <__malloc_unlock+0xc>)
 800576c:	f000 fae9 	bl	8005d42 <__retarget_lock_release_recursive>
 8005770:	bd10      	pop	{r4, pc}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	200002d8 	.word	0x200002d8

08005778 <__ssputs_r>:
 8005778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800577a:	688e      	ldr	r6, [r1, #8]
 800577c:	b085      	sub	sp, #20
 800577e:	0007      	movs	r7, r0
 8005780:	000c      	movs	r4, r1
 8005782:	9203      	str	r2, [sp, #12]
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	429e      	cmp	r6, r3
 8005788:	d83c      	bhi.n	8005804 <__ssputs_r+0x8c>
 800578a:	2390      	movs	r3, #144	; 0x90
 800578c:	898a      	ldrh	r2, [r1, #12]
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	421a      	tst	r2, r3
 8005792:	d034      	beq.n	80057fe <__ssputs_r+0x86>
 8005794:	6909      	ldr	r1, [r1, #16]
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	6960      	ldr	r0, [r4, #20]
 800579a:	1a5b      	subs	r3, r3, r1
 800579c:	9302      	str	r3, [sp, #8]
 800579e:	2303      	movs	r3, #3
 80057a0:	4343      	muls	r3, r0
 80057a2:	0fdd      	lsrs	r5, r3, #31
 80057a4:	18ed      	adds	r5, r5, r3
 80057a6:	9b01      	ldr	r3, [sp, #4]
 80057a8:	9802      	ldr	r0, [sp, #8]
 80057aa:	3301      	adds	r3, #1
 80057ac:	181b      	adds	r3, r3, r0
 80057ae:	106d      	asrs	r5, r5, #1
 80057b0:	42ab      	cmp	r3, r5
 80057b2:	d900      	bls.n	80057b6 <__ssputs_r+0x3e>
 80057b4:	001d      	movs	r5, r3
 80057b6:	0553      	lsls	r3, r2, #21
 80057b8:	d532      	bpl.n	8005820 <__ssputs_r+0xa8>
 80057ba:	0029      	movs	r1, r5
 80057bc:	0038      	movs	r0, r7
 80057be:	f7ff ff1b 	bl	80055f8 <_malloc_r>
 80057c2:	1e06      	subs	r6, r0, #0
 80057c4:	d109      	bne.n	80057da <__ssputs_r+0x62>
 80057c6:	230c      	movs	r3, #12
 80057c8:	603b      	str	r3, [r7, #0]
 80057ca:	2340      	movs	r3, #64	; 0x40
 80057cc:	2001      	movs	r0, #1
 80057ce:	89a2      	ldrh	r2, [r4, #12]
 80057d0:	4240      	negs	r0, r0
 80057d2:	4313      	orrs	r3, r2
 80057d4:	81a3      	strh	r3, [r4, #12]
 80057d6:	b005      	add	sp, #20
 80057d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057da:	9a02      	ldr	r2, [sp, #8]
 80057dc:	6921      	ldr	r1, [r4, #16]
 80057de:	f7ff fe8d 	bl	80054fc <memcpy>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	4a14      	ldr	r2, [pc, #80]	; (8005838 <__ssputs_r+0xc0>)
 80057e6:	401a      	ands	r2, r3
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	4313      	orrs	r3, r2
 80057ec:	81a3      	strh	r3, [r4, #12]
 80057ee:	9b02      	ldr	r3, [sp, #8]
 80057f0:	6126      	str	r6, [r4, #16]
 80057f2:	18f6      	adds	r6, r6, r3
 80057f4:	6026      	str	r6, [r4, #0]
 80057f6:	6165      	str	r5, [r4, #20]
 80057f8:	9e01      	ldr	r6, [sp, #4]
 80057fa:	1aed      	subs	r5, r5, r3
 80057fc:	60a5      	str	r5, [r4, #8]
 80057fe:	9b01      	ldr	r3, [sp, #4]
 8005800:	429e      	cmp	r6, r3
 8005802:	d900      	bls.n	8005806 <__ssputs_r+0x8e>
 8005804:	9e01      	ldr	r6, [sp, #4]
 8005806:	0032      	movs	r2, r6
 8005808:	9903      	ldr	r1, [sp, #12]
 800580a:	6820      	ldr	r0, [r4, #0]
 800580c:	f000 faa5 	bl	8005d5a <memmove>
 8005810:	68a3      	ldr	r3, [r4, #8]
 8005812:	2000      	movs	r0, #0
 8005814:	1b9b      	subs	r3, r3, r6
 8005816:	60a3      	str	r3, [r4, #8]
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	199e      	adds	r6, r3, r6
 800581c:	6026      	str	r6, [r4, #0]
 800581e:	e7da      	b.n	80057d6 <__ssputs_r+0x5e>
 8005820:	002a      	movs	r2, r5
 8005822:	0038      	movs	r0, r7
 8005824:	f000 faac 	bl	8005d80 <_realloc_r>
 8005828:	1e06      	subs	r6, r0, #0
 800582a:	d1e0      	bne.n	80057ee <__ssputs_r+0x76>
 800582c:	0038      	movs	r0, r7
 800582e:	6921      	ldr	r1, [r4, #16]
 8005830:	f7ff fe76 	bl	8005520 <_free_r>
 8005834:	e7c7      	b.n	80057c6 <__ssputs_r+0x4e>
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	fffffb7f 	.word	0xfffffb7f

0800583c <_svfiprintf_r>:
 800583c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800583e:	b0a1      	sub	sp, #132	; 0x84
 8005840:	9003      	str	r0, [sp, #12]
 8005842:	001d      	movs	r5, r3
 8005844:	898b      	ldrh	r3, [r1, #12]
 8005846:	000f      	movs	r7, r1
 8005848:	0016      	movs	r6, r2
 800584a:	061b      	lsls	r3, r3, #24
 800584c:	d511      	bpl.n	8005872 <_svfiprintf_r+0x36>
 800584e:	690b      	ldr	r3, [r1, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10e      	bne.n	8005872 <_svfiprintf_r+0x36>
 8005854:	2140      	movs	r1, #64	; 0x40
 8005856:	f7ff fecf 	bl	80055f8 <_malloc_r>
 800585a:	6038      	str	r0, [r7, #0]
 800585c:	6138      	str	r0, [r7, #16]
 800585e:	2800      	cmp	r0, #0
 8005860:	d105      	bne.n	800586e <_svfiprintf_r+0x32>
 8005862:	230c      	movs	r3, #12
 8005864:	9a03      	ldr	r2, [sp, #12]
 8005866:	3801      	subs	r0, #1
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	b021      	add	sp, #132	; 0x84
 800586c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800586e:	2340      	movs	r3, #64	; 0x40
 8005870:	617b      	str	r3, [r7, #20]
 8005872:	2300      	movs	r3, #0
 8005874:	ac08      	add	r4, sp, #32
 8005876:	6163      	str	r3, [r4, #20]
 8005878:	3320      	adds	r3, #32
 800587a:	7663      	strb	r3, [r4, #25]
 800587c:	3310      	adds	r3, #16
 800587e:	76a3      	strb	r3, [r4, #26]
 8005880:	9507      	str	r5, [sp, #28]
 8005882:	0035      	movs	r5, r6
 8005884:	782b      	ldrb	r3, [r5, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <_svfiprintf_r+0x52>
 800588a:	2b25      	cmp	r3, #37	; 0x25
 800588c:	d147      	bne.n	800591e <_svfiprintf_r+0xe2>
 800588e:	1bab      	subs	r3, r5, r6
 8005890:	9305      	str	r3, [sp, #20]
 8005892:	42b5      	cmp	r5, r6
 8005894:	d00c      	beq.n	80058b0 <_svfiprintf_r+0x74>
 8005896:	0032      	movs	r2, r6
 8005898:	0039      	movs	r1, r7
 800589a:	9803      	ldr	r0, [sp, #12]
 800589c:	f7ff ff6c 	bl	8005778 <__ssputs_r>
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d100      	bne.n	80058a6 <_svfiprintf_r+0x6a>
 80058a4:	e0ae      	b.n	8005a04 <_svfiprintf_r+0x1c8>
 80058a6:	6962      	ldr	r2, [r4, #20]
 80058a8:	9b05      	ldr	r3, [sp, #20]
 80058aa:	4694      	mov	ip, r2
 80058ac:	4463      	add	r3, ip
 80058ae:	6163      	str	r3, [r4, #20]
 80058b0:	782b      	ldrb	r3, [r5, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d100      	bne.n	80058b8 <_svfiprintf_r+0x7c>
 80058b6:	e0a5      	b.n	8005a04 <_svfiprintf_r+0x1c8>
 80058b8:	2201      	movs	r2, #1
 80058ba:	2300      	movs	r3, #0
 80058bc:	4252      	negs	r2, r2
 80058be:	6062      	str	r2, [r4, #4]
 80058c0:	a904      	add	r1, sp, #16
 80058c2:	3254      	adds	r2, #84	; 0x54
 80058c4:	1852      	adds	r2, r2, r1
 80058c6:	1c6e      	adds	r6, r5, #1
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	60e3      	str	r3, [r4, #12]
 80058cc:	60a3      	str	r3, [r4, #8]
 80058ce:	7013      	strb	r3, [r2, #0]
 80058d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80058d2:	2205      	movs	r2, #5
 80058d4:	7831      	ldrb	r1, [r6, #0]
 80058d6:	4854      	ldr	r0, [pc, #336]	; (8005a28 <_svfiprintf_r+0x1ec>)
 80058d8:	f000 fa34 	bl	8005d44 <memchr>
 80058dc:	1c75      	adds	r5, r6, #1
 80058de:	2800      	cmp	r0, #0
 80058e0:	d11f      	bne.n	8005922 <_svfiprintf_r+0xe6>
 80058e2:	6822      	ldr	r2, [r4, #0]
 80058e4:	06d3      	lsls	r3, r2, #27
 80058e6:	d504      	bpl.n	80058f2 <_svfiprintf_r+0xb6>
 80058e8:	2353      	movs	r3, #83	; 0x53
 80058ea:	a904      	add	r1, sp, #16
 80058ec:	185b      	adds	r3, r3, r1
 80058ee:	2120      	movs	r1, #32
 80058f0:	7019      	strb	r1, [r3, #0]
 80058f2:	0713      	lsls	r3, r2, #28
 80058f4:	d504      	bpl.n	8005900 <_svfiprintf_r+0xc4>
 80058f6:	2353      	movs	r3, #83	; 0x53
 80058f8:	a904      	add	r1, sp, #16
 80058fa:	185b      	adds	r3, r3, r1
 80058fc:	212b      	movs	r1, #43	; 0x2b
 80058fe:	7019      	strb	r1, [r3, #0]
 8005900:	7833      	ldrb	r3, [r6, #0]
 8005902:	2b2a      	cmp	r3, #42	; 0x2a
 8005904:	d016      	beq.n	8005934 <_svfiprintf_r+0xf8>
 8005906:	0035      	movs	r5, r6
 8005908:	2100      	movs	r1, #0
 800590a:	200a      	movs	r0, #10
 800590c:	68e3      	ldr	r3, [r4, #12]
 800590e:	782a      	ldrb	r2, [r5, #0]
 8005910:	1c6e      	adds	r6, r5, #1
 8005912:	3a30      	subs	r2, #48	; 0x30
 8005914:	2a09      	cmp	r2, #9
 8005916:	d94e      	bls.n	80059b6 <_svfiprintf_r+0x17a>
 8005918:	2900      	cmp	r1, #0
 800591a:	d111      	bne.n	8005940 <_svfiprintf_r+0x104>
 800591c:	e017      	b.n	800594e <_svfiprintf_r+0x112>
 800591e:	3501      	adds	r5, #1
 8005920:	e7b0      	b.n	8005884 <_svfiprintf_r+0x48>
 8005922:	4b41      	ldr	r3, [pc, #260]	; (8005a28 <_svfiprintf_r+0x1ec>)
 8005924:	6822      	ldr	r2, [r4, #0]
 8005926:	1ac0      	subs	r0, r0, r3
 8005928:	2301      	movs	r3, #1
 800592a:	4083      	lsls	r3, r0
 800592c:	4313      	orrs	r3, r2
 800592e:	002e      	movs	r6, r5
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	e7ce      	b.n	80058d2 <_svfiprintf_r+0x96>
 8005934:	9b07      	ldr	r3, [sp, #28]
 8005936:	1d19      	adds	r1, r3, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	9107      	str	r1, [sp, #28]
 800593c:	2b00      	cmp	r3, #0
 800593e:	db01      	blt.n	8005944 <_svfiprintf_r+0x108>
 8005940:	930b      	str	r3, [sp, #44]	; 0x2c
 8005942:	e004      	b.n	800594e <_svfiprintf_r+0x112>
 8005944:	425b      	negs	r3, r3
 8005946:	60e3      	str	r3, [r4, #12]
 8005948:	2302      	movs	r3, #2
 800594a:	4313      	orrs	r3, r2
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	782b      	ldrb	r3, [r5, #0]
 8005950:	2b2e      	cmp	r3, #46	; 0x2e
 8005952:	d10a      	bne.n	800596a <_svfiprintf_r+0x12e>
 8005954:	786b      	ldrb	r3, [r5, #1]
 8005956:	2b2a      	cmp	r3, #42	; 0x2a
 8005958:	d135      	bne.n	80059c6 <_svfiprintf_r+0x18a>
 800595a:	9b07      	ldr	r3, [sp, #28]
 800595c:	3502      	adds	r5, #2
 800595e:	1d1a      	adds	r2, r3, #4
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	9207      	str	r2, [sp, #28]
 8005964:	2b00      	cmp	r3, #0
 8005966:	db2b      	blt.n	80059c0 <_svfiprintf_r+0x184>
 8005968:	9309      	str	r3, [sp, #36]	; 0x24
 800596a:	4e30      	ldr	r6, [pc, #192]	; (8005a2c <_svfiprintf_r+0x1f0>)
 800596c:	2203      	movs	r2, #3
 800596e:	0030      	movs	r0, r6
 8005970:	7829      	ldrb	r1, [r5, #0]
 8005972:	f000 f9e7 	bl	8005d44 <memchr>
 8005976:	2800      	cmp	r0, #0
 8005978:	d006      	beq.n	8005988 <_svfiprintf_r+0x14c>
 800597a:	2340      	movs	r3, #64	; 0x40
 800597c:	1b80      	subs	r0, r0, r6
 800597e:	4083      	lsls	r3, r0
 8005980:	6822      	ldr	r2, [r4, #0]
 8005982:	3501      	adds	r5, #1
 8005984:	4313      	orrs	r3, r2
 8005986:	6023      	str	r3, [r4, #0]
 8005988:	7829      	ldrb	r1, [r5, #0]
 800598a:	2206      	movs	r2, #6
 800598c:	4828      	ldr	r0, [pc, #160]	; (8005a30 <_svfiprintf_r+0x1f4>)
 800598e:	1c6e      	adds	r6, r5, #1
 8005990:	7621      	strb	r1, [r4, #24]
 8005992:	f000 f9d7 	bl	8005d44 <memchr>
 8005996:	2800      	cmp	r0, #0
 8005998:	d03c      	beq.n	8005a14 <_svfiprintf_r+0x1d8>
 800599a:	4b26      	ldr	r3, [pc, #152]	; (8005a34 <_svfiprintf_r+0x1f8>)
 800599c:	2b00      	cmp	r3, #0
 800599e:	d125      	bne.n	80059ec <_svfiprintf_r+0x1b0>
 80059a0:	2207      	movs	r2, #7
 80059a2:	9b07      	ldr	r3, [sp, #28]
 80059a4:	3307      	adds	r3, #7
 80059a6:	4393      	bics	r3, r2
 80059a8:	3308      	adds	r3, #8
 80059aa:	9307      	str	r3, [sp, #28]
 80059ac:	6963      	ldr	r3, [r4, #20]
 80059ae:	9a04      	ldr	r2, [sp, #16]
 80059b0:	189b      	adds	r3, r3, r2
 80059b2:	6163      	str	r3, [r4, #20]
 80059b4:	e765      	b.n	8005882 <_svfiprintf_r+0x46>
 80059b6:	4343      	muls	r3, r0
 80059b8:	0035      	movs	r5, r6
 80059ba:	2101      	movs	r1, #1
 80059bc:	189b      	adds	r3, r3, r2
 80059be:	e7a6      	b.n	800590e <_svfiprintf_r+0xd2>
 80059c0:	2301      	movs	r3, #1
 80059c2:	425b      	negs	r3, r3
 80059c4:	e7d0      	b.n	8005968 <_svfiprintf_r+0x12c>
 80059c6:	2300      	movs	r3, #0
 80059c8:	200a      	movs	r0, #10
 80059ca:	001a      	movs	r2, r3
 80059cc:	3501      	adds	r5, #1
 80059ce:	6063      	str	r3, [r4, #4]
 80059d0:	7829      	ldrb	r1, [r5, #0]
 80059d2:	1c6e      	adds	r6, r5, #1
 80059d4:	3930      	subs	r1, #48	; 0x30
 80059d6:	2909      	cmp	r1, #9
 80059d8:	d903      	bls.n	80059e2 <_svfiprintf_r+0x1a6>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0c5      	beq.n	800596a <_svfiprintf_r+0x12e>
 80059de:	9209      	str	r2, [sp, #36]	; 0x24
 80059e0:	e7c3      	b.n	800596a <_svfiprintf_r+0x12e>
 80059e2:	4342      	muls	r2, r0
 80059e4:	0035      	movs	r5, r6
 80059e6:	2301      	movs	r3, #1
 80059e8:	1852      	adds	r2, r2, r1
 80059ea:	e7f1      	b.n	80059d0 <_svfiprintf_r+0x194>
 80059ec:	ab07      	add	r3, sp, #28
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	003a      	movs	r2, r7
 80059f2:	0021      	movs	r1, r4
 80059f4:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <_svfiprintf_r+0x1fc>)
 80059f6:	9803      	ldr	r0, [sp, #12]
 80059f8:	e000      	b.n	80059fc <_svfiprintf_r+0x1c0>
 80059fa:	bf00      	nop
 80059fc:	9004      	str	r0, [sp, #16]
 80059fe:	9b04      	ldr	r3, [sp, #16]
 8005a00:	3301      	adds	r3, #1
 8005a02:	d1d3      	bne.n	80059ac <_svfiprintf_r+0x170>
 8005a04:	89bb      	ldrh	r3, [r7, #12]
 8005a06:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a08:	065b      	lsls	r3, r3, #25
 8005a0a:	d400      	bmi.n	8005a0e <_svfiprintf_r+0x1d2>
 8005a0c:	e72d      	b.n	800586a <_svfiprintf_r+0x2e>
 8005a0e:	2001      	movs	r0, #1
 8005a10:	4240      	negs	r0, r0
 8005a12:	e72a      	b.n	800586a <_svfiprintf_r+0x2e>
 8005a14:	ab07      	add	r3, sp, #28
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	003a      	movs	r2, r7
 8005a1a:	0021      	movs	r1, r4
 8005a1c:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <_svfiprintf_r+0x1fc>)
 8005a1e:	9803      	ldr	r0, [sp, #12]
 8005a20:	f000 f87c 	bl	8005b1c <_printf_i>
 8005a24:	e7ea      	b.n	80059fc <_svfiprintf_r+0x1c0>
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	080062f2 	.word	0x080062f2
 8005a2c:	080062f8 	.word	0x080062f8
 8005a30:	080062fc 	.word	0x080062fc
 8005a34:	00000000 	.word	0x00000000
 8005a38:	08005779 	.word	0x08005779

08005a3c <_printf_common>:
 8005a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a3e:	0015      	movs	r5, r2
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	688a      	ldr	r2, [r1, #8]
 8005a44:	690b      	ldr	r3, [r1, #16]
 8005a46:	000c      	movs	r4, r1
 8005a48:	9000      	str	r0, [sp, #0]
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	da00      	bge.n	8005a50 <_printf_common+0x14>
 8005a4e:	0013      	movs	r3, r2
 8005a50:	0022      	movs	r2, r4
 8005a52:	602b      	str	r3, [r5, #0]
 8005a54:	3243      	adds	r2, #67	; 0x43
 8005a56:	7812      	ldrb	r2, [r2, #0]
 8005a58:	2a00      	cmp	r2, #0
 8005a5a:	d001      	beq.n	8005a60 <_printf_common+0x24>
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	602b      	str	r3, [r5, #0]
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	069b      	lsls	r3, r3, #26
 8005a64:	d502      	bpl.n	8005a6c <_printf_common+0x30>
 8005a66:	682b      	ldr	r3, [r5, #0]
 8005a68:	3302      	adds	r3, #2
 8005a6a:	602b      	str	r3, [r5, #0]
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	2306      	movs	r3, #6
 8005a70:	0017      	movs	r7, r2
 8005a72:	401f      	ands	r7, r3
 8005a74:	421a      	tst	r2, r3
 8005a76:	d027      	beq.n	8005ac8 <_printf_common+0x8c>
 8005a78:	0023      	movs	r3, r4
 8005a7a:	3343      	adds	r3, #67	; 0x43
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	1e5a      	subs	r2, r3, #1
 8005a80:	4193      	sbcs	r3, r2
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	0692      	lsls	r2, r2, #26
 8005a86:	d430      	bmi.n	8005aea <_printf_common+0xae>
 8005a88:	0022      	movs	r2, r4
 8005a8a:	9901      	ldr	r1, [sp, #4]
 8005a8c:	9800      	ldr	r0, [sp, #0]
 8005a8e:	9e08      	ldr	r6, [sp, #32]
 8005a90:	3243      	adds	r2, #67	; 0x43
 8005a92:	47b0      	blx	r6
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d025      	beq.n	8005ae4 <_printf_common+0xa8>
 8005a98:	2306      	movs	r3, #6
 8005a9a:	6820      	ldr	r0, [r4, #0]
 8005a9c:	682a      	ldr	r2, [r5, #0]
 8005a9e:	68e1      	ldr	r1, [r4, #12]
 8005aa0:	2500      	movs	r5, #0
 8005aa2:	4003      	ands	r3, r0
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d103      	bne.n	8005ab0 <_printf_common+0x74>
 8005aa8:	1a8d      	subs	r5, r1, r2
 8005aaa:	43eb      	mvns	r3, r5
 8005aac:	17db      	asrs	r3, r3, #31
 8005aae:	401d      	ands	r5, r3
 8005ab0:	68a3      	ldr	r3, [r4, #8]
 8005ab2:	6922      	ldr	r2, [r4, #16]
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	dd01      	ble.n	8005abc <_printf_common+0x80>
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	18ed      	adds	r5, r5, r3
 8005abc:	2700      	movs	r7, #0
 8005abe:	42bd      	cmp	r5, r7
 8005ac0:	d120      	bne.n	8005b04 <_printf_common+0xc8>
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	e010      	b.n	8005ae8 <_printf_common+0xac>
 8005ac6:	3701      	adds	r7, #1
 8005ac8:	68e3      	ldr	r3, [r4, #12]
 8005aca:	682a      	ldr	r2, [r5, #0]
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	42bb      	cmp	r3, r7
 8005ad0:	ddd2      	ble.n	8005a78 <_printf_common+0x3c>
 8005ad2:	0022      	movs	r2, r4
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	9901      	ldr	r1, [sp, #4]
 8005ad8:	9800      	ldr	r0, [sp, #0]
 8005ada:	9e08      	ldr	r6, [sp, #32]
 8005adc:	3219      	adds	r2, #25
 8005ade:	47b0      	blx	r6
 8005ae0:	1c43      	adds	r3, r0, #1
 8005ae2:	d1f0      	bne.n	8005ac6 <_printf_common+0x8a>
 8005ae4:	2001      	movs	r0, #1
 8005ae6:	4240      	negs	r0, r0
 8005ae8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005aea:	2030      	movs	r0, #48	; 0x30
 8005aec:	18e1      	adds	r1, r4, r3
 8005aee:	3143      	adds	r1, #67	; 0x43
 8005af0:	7008      	strb	r0, [r1, #0]
 8005af2:	0021      	movs	r1, r4
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	3145      	adds	r1, #69	; 0x45
 8005af8:	7809      	ldrb	r1, [r1, #0]
 8005afa:	18a2      	adds	r2, r4, r2
 8005afc:	3243      	adds	r2, #67	; 0x43
 8005afe:	3302      	adds	r3, #2
 8005b00:	7011      	strb	r1, [r2, #0]
 8005b02:	e7c1      	b.n	8005a88 <_printf_common+0x4c>
 8005b04:	0022      	movs	r2, r4
 8005b06:	2301      	movs	r3, #1
 8005b08:	9901      	ldr	r1, [sp, #4]
 8005b0a:	9800      	ldr	r0, [sp, #0]
 8005b0c:	9e08      	ldr	r6, [sp, #32]
 8005b0e:	321a      	adds	r2, #26
 8005b10:	47b0      	blx	r6
 8005b12:	1c43      	adds	r3, r0, #1
 8005b14:	d0e6      	beq.n	8005ae4 <_printf_common+0xa8>
 8005b16:	3701      	adds	r7, #1
 8005b18:	e7d1      	b.n	8005abe <_printf_common+0x82>
	...

08005b1c <_printf_i>:
 8005b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b1e:	b08b      	sub	sp, #44	; 0x2c
 8005b20:	9206      	str	r2, [sp, #24]
 8005b22:	000a      	movs	r2, r1
 8005b24:	3243      	adds	r2, #67	; 0x43
 8005b26:	9307      	str	r3, [sp, #28]
 8005b28:	9005      	str	r0, [sp, #20]
 8005b2a:	9204      	str	r2, [sp, #16]
 8005b2c:	7e0a      	ldrb	r2, [r1, #24]
 8005b2e:	000c      	movs	r4, r1
 8005b30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b32:	2a78      	cmp	r2, #120	; 0x78
 8005b34:	d807      	bhi.n	8005b46 <_printf_i+0x2a>
 8005b36:	2a62      	cmp	r2, #98	; 0x62
 8005b38:	d809      	bhi.n	8005b4e <_printf_i+0x32>
 8005b3a:	2a00      	cmp	r2, #0
 8005b3c:	d100      	bne.n	8005b40 <_printf_i+0x24>
 8005b3e:	e0c1      	b.n	8005cc4 <_printf_i+0x1a8>
 8005b40:	2a58      	cmp	r2, #88	; 0x58
 8005b42:	d100      	bne.n	8005b46 <_printf_i+0x2a>
 8005b44:	e08c      	b.n	8005c60 <_printf_i+0x144>
 8005b46:	0026      	movs	r6, r4
 8005b48:	3642      	adds	r6, #66	; 0x42
 8005b4a:	7032      	strb	r2, [r6, #0]
 8005b4c:	e022      	b.n	8005b94 <_printf_i+0x78>
 8005b4e:	0010      	movs	r0, r2
 8005b50:	3863      	subs	r0, #99	; 0x63
 8005b52:	2815      	cmp	r0, #21
 8005b54:	d8f7      	bhi.n	8005b46 <_printf_i+0x2a>
 8005b56:	f7fa fae9 	bl	800012c <__gnu_thumb1_case_shi>
 8005b5a:	0016      	.short	0x0016
 8005b5c:	fff6001f 	.word	0xfff6001f
 8005b60:	fff6fff6 	.word	0xfff6fff6
 8005b64:	001ffff6 	.word	0x001ffff6
 8005b68:	fff6fff6 	.word	0xfff6fff6
 8005b6c:	fff6fff6 	.word	0xfff6fff6
 8005b70:	003600a8 	.word	0x003600a8
 8005b74:	fff6009a 	.word	0xfff6009a
 8005b78:	00b9fff6 	.word	0x00b9fff6
 8005b7c:	0036fff6 	.word	0x0036fff6
 8005b80:	fff6fff6 	.word	0xfff6fff6
 8005b84:	009e      	.short	0x009e
 8005b86:	0026      	movs	r6, r4
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	3642      	adds	r6, #66	; 0x42
 8005b8c:	1d11      	adds	r1, r2, #4
 8005b8e:	6019      	str	r1, [r3, #0]
 8005b90:	6813      	ldr	r3, [r2, #0]
 8005b92:	7033      	strb	r3, [r6, #0]
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0a7      	b.n	8005ce8 <_printf_i+0x1cc>
 8005b98:	6808      	ldr	r0, [r1, #0]
 8005b9a:	6819      	ldr	r1, [r3, #0]
 8005b9c:	1d0a      	adds	r2, r1, #4
 8005b9e:	0605      	lsls	r5, r0, #24
 8005ba0:	d50b      	bpl.n	8005bba <_printf_i+0x9e>
 8005ba2:	680d      	ldr	r5, [r1, #0]
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	2d00      	cmp	r5, #0
 8005ba8:	da03      	bge.n	8005bb2 <_printf_i+0x96>
 8005baa:	232d      	movs	r3, #45	; 0x2d
 8005bac:	9a04      	ldr	r2, [sp, #16]
 8005bae:	426d      	negs	r5, r5
 8005bb0:	7013      	strb	r3, [r2, #0]
 8005bb2:	4b61      	ldr	r3, [pc, #388]	; (8005d38 <_printf_i+0x21c>)
 8005bb4:	270a      	movs	r7, #10
 8005bb6:	9303      	str	r3, [sp, #12]
 8005bb8:	e01b      	b.n	8005bf2 <_printf_i+0xd6>
 8005bba:	680d      	ldr	r5, [r1, #0]
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	0641      	lsls	r1, r0, #25
 8005bc0:	d5f1      	bpl.n	8005ba6 <_printf_i+0x8a>
 8005bc2:	b22d      	sxth	r5, r5
 8005bc4:	e7ef      	b.n	8005ba6 <_printf_i+0x8a>
 8005bc6:	680d      	ldr	r5, [r1, #0]
 8005bc8:	6819      	ldr	r1, [r3, #0]
 8005bca:	1d08      	adds	r0, r1, #4
 8005bcc:	6018      	str	r0, [r3, #0]
 8005bce:	062e      	lsls	r6, r5, #24
 8005bd0:	d501      	bpl.n	8005bd6 <_printf_i+0xba>
 8005bd2:	680d      	ldr	r5, [r1, #0]
 8005bd4:	e003      	b.n	8005bde <_printf_i+0xc2>
 8005bd6:	066d      	lsls	r5, r5, #25
 8005bd8:	d5fb      	bpl.n	8005bd2 <_printf_i+0xb6>
 8005bda:	680d      	ldr	r5, [r1, #0]
 8005bdc:	b2ad      	uxth	r5, r5
 8005bde:	4b56      	ldr	r3, [pc, #344]	; (8005d38 <_printf_i+0x21c>)
 8005be0:	2708      	movs	r7, #8
 8005be2:	9303      	str	r3, [sp, #12]
 8005be4:	2a6f      	cmp	r2, #111	; 0x6f
 8005be6:	d000      	beq.n	8005bea <_printf_i+0xce>
 8005be8:	3702      	adds	r7, #2
 8005bea:	0023      	movs	r3, r4
 8005bec:	2200      	movs	r2, #0
 8005bee:	3343      	adds	r3, #67	; 0x43
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	6863      	ldr	r3, [r4, #4]
 8005bf4:	60a3      	str	r3, [r4, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	db03      	blt.n	8005c02 <_printf_i+0xe6>
 8005bfa:	2204      	movs	r2, #4
 8005bfc:	6821      	ldr	r1, [r4, #0]
 8005bfe:	4391      	bics	r1, r2
 8005c00:	6021      	str	r1, [r4, #0]
 8005c02:	2d00      	cmp	r5, #0
 8005c04:	d102      	bne.n	8005c0c <_printf_i+0xf0>
 8005c06:	9e04      	ldr	r6, [sp, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00c      	beq.n	8005c26 <_printf_i+0x10a>
 8005c0c:	9e04      	ldr	r6, [sp, #16]
 8005c0e:	0028      	movs	r0, r5
 8005c10:	0039      	movs	r1, r7
 8005c12:	f7fa fb1b 	bl	800024c <__aeabi_uidivmod>
 8005c16:	9b03      	ldr	r3, [sp, #12]
 8005c18:	3e01      	subs	r6, #1
 8005c1a:	5c5b      	ldrb	r3, [r3, r1]
 8005c1c:	7033      	strb	r3, [r6, #0]
 8005c1e:	002b      	movs	r3, r5
 8005c20:	0005      	movs	r5, r0
 8005c22:	429f      	cmp	r7, r3
 8005c24:	d9f3      	bls.n	8005c0e <_printf_i+0xf2>
 8005c26:	2f08      	cmp	r7, #8
 8005c28:	d109      	bne.n	8005c3e <_printf_i+0x122>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	07db      	lsls	r3, r3, #31
 8005c2e:	d506      	bpl.n	8005c3e <_printf_i+0x122>
 8005c30:	6863      	ldr	r3, [r4, #4]
 8005c32:	6922      	ldr	r2, [r4, #16]
 8005c34:	4293      	cmp	r3, r2
 8005c36:	dc02      	bgt.n	8005c3e <_printf_i+0x122>
 8005c38:	2330      	movs	r3, #48	; 0x30
 8005c3a:	3e01      	subs	r6, #1
 8005c3c:	7033      	strb	r3, [r6, #0]
 8005c3e:	9b04      	ldr	r3, [sp, #16]
 8005c40:	1b9b      	subs	r3, r3, r6
 8005c42:	6123      	str	r3, [r4, #16]
 8005c44:	9b07      	ldr	r3, [sp, #28]
 8005c46:	0021      	movs	r1, r4
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	9805      	ldr	r0, [sp, #20]
 8005c4c:	9b06      	ldr	r3, [sp, #24]
 8005c4e:	aa09      	add	r2, sp, #36	; 0x24
 8005c50:	f7ff fef4 	bl	8005a3c <_printf_common>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d14c      	bne.n	8005cf2 <_printf_i+0x1d6>
 8005c58:	2001      	movs	r0, #1
 8005c5a:	4240      	negs	r0, r0
 8005c5c:	b00b      	add	sp, #44	; 0x2c
 8005c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c60:	3145      	adds	r1, #69	; 0x45
 8005c62:	700a      	strb	r2, [r1, #0]
 8005c64:	4a34      	ldr	r2, [pc, #208]	; (8005d38 <_printf_i+0x21c>)
 8005c66:	9203      	str	r2, [sp, #12]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	6821      	ldr	r1, [r4, #0]
 8005c6c:	ca20      	ldmia	r2!, {r5}
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	0608      	lsls	r0, r1, #24
 8005c72:	d516      	bpl.n	8005ca2 <_printf_i+0x186>
 8005c74:	07cb      	lsls	r3, r1, #31
 8005c76:	d502      	bpl.n	8005c7e <_printf_i+0x162>
 8005c78:	2320      	movs	r3, #32
 8005c7a:	4319      	orrs	r1, r3
 8005c7c:	6021      	str	r1, [r4, #0]
 8005c7e:	2710      	movs	r7, #16
 8005c80:	2d00      	cmp	r5, #0
 8005c82:	d1b2      	bne.n	8005bea <_printf_i+0xce>
 8005c84:	2320      	movs	r3, #32
 8005c86:	6822      	ldr	r2, [r4, #0]
 8005c88:	439a      	bics	r2, r3
 8005c8a:	6022      	str	r2, [r4, #0]
 8005c8c:	e7ad      	b.n	8005bea <_printf_i+0xce>
 8005c8e:	2220      	movs	r2, #32
 8005c90:	6809      	ldr	r1, [r1, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	6022      	str	r2, [r4, #0]
 8005c96:	0022      	movs	r2, r4
 8005c98:	2178      	movs	r1, #120	; 0x78
 8005c9a:	3245      	adds	r2, #69	; 0x45
 8005c9c:	7011      	strb	r1, [r2, #0]
 8005c9e:	4a27      	ldr	r2, [pc, #156]	; (8005d3c <_printf_i+0x220>)
 8005ca0:	e7e1      	b.n	8005c66 <_printf_i+0x14a>
 8005ca2:	0648      	lsls	r0, r1, #25
 8005ca4:	d5e6      	bpl.n	8005c74 <_printf_i+0x158>
 8005ca6:	b2ad      	uxth	r5, r5
 8005ca8:	e7e4      	b.n	8005c74 <_printf_i+0x158>
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	680d      	ldr	r5, [r1, #0]
 8005cae:	1d10      	adds	r0, r2, #4
 8005cb0:	6949      	ldr	r1, [r1, #20]
 8005cb2:	6018      	str	r0, [r3, #0]
 8005cb4:	6813      	ldr	r3, [r2, #0]
 8005cb6:	062e      	lsls	r6, r5, #24
 8005cb8:	d501      	bpl.n	8005cbe <_printf_i+0x1a2>
 8005cba:	6019      	str	r1, [r3, #0]
 8005cbc:	e002      	b.n	8005cc4 <_printf_i+0x1a8>
 8005cbe:	066d      	lsls	r5, r5, #25
 8005cc0:	d5fb      	bpl.n	8005cba <_printf_i+0x19e>
 8005cc2:	8019      	strh	r1, [r3, #0]
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	9e04      	ldr	r6, [sp, #16]
 8005cc8:	6123      	str	r3, [r4, #16]
 8005cca:	e7bb      	b.n	8005c44 <_printf_i+0x128>
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	1d11      	adds	r1, r2, #4
 8005cd0:	6019      	str	r1, [r3, #0]
 8005cd2:	6816      	ldr	r6, [r2, #0]
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	0030      	movs	r0, r6
 8005cd8:	6862      	ldr	r2, [r4, #4]
 8005cda:	f000 f833 	bl	8005d44 <memchr>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d001      	beq.n	8005ce6 <_printf_i+0x1ca>
 8005ce2:	1b80      	subs	r0, r0, r6
 8005ce4:	6060      	str	r0, [r4, #4]
 8005ce6:	6863      	ldr	r3, [r4, #4]
 8005ce8:	6123      	str	r3, [r4, #16]
 8005cea:	2300      	movs	r3, #0
 8005cec:	9a04      	ldr	r2, [sp, #16]
 8005cee:	7013      	strb	r3, [r2, #0]
 8005cf0:	e7a8      	b.n	8005c44 <_printf_i+0x128>
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	0032      	movs	r2, r6
 8005cf6:	9906      	ldr	r1, [sp, #24]
 8005cf8:	9805      	ldr	r0, [sp, #20]
 8005cfa:	9d07      	ldr	r5, [sp, #28]
 8005cfc:	47a8      	blx	r5
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	d0aa      	beq.n	8005c58 <_printf_i+0x13c>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	079b      	lsls	r3, r3, #30
 8005d06:	d415      	bmi.n	8005d34 <_printf_i+0x218>
 8005d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d0a:	68e0      	ldr	r0, [r4, #12]
 8005d0c:	4298      	cmp	r0, r3
 8005d0e:	daa5      	bge.n	8005c5c <_printf_i+0x140>
 8005d10:	0018      	movs	r0, r3
 8005d12:	e7a3      	b.n	8005c5c <_printf_i+0x140>
 8005d14:	0022      	movs	r2, r4
 8005d16:	2301      	movs	r3, #1
 8005d18:	9906      	ldr	r1, [sp, #24]
 8005d1a:	9805      	ldr	r0, [sp, #20]
 8005d1c:	9e07      	ldr	r6, [sp, #28]
 8005d1e:	3219      	adds	r2, #25
 8005d20:	47b0      	blx	r6
 8005d22:	1c43      	adds	r3, r0, #1
 8005d24:	d098      	beq.n	8005c58 <_printf_i+0x13c>
 8005d26:	3501      	adds	r5, #1
 8005d28:	68e3      	ldr	r3, [r4, #12]
 8005d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d2c:	1a9b      	subs	r3, r3, r2
 8005d2e:	42ab      	cmp	r3, r5
 8005d30:	dcf0      	bgt.n	8005d14 <_printf_i+0x1f8>
 8005d32:	e7e9      	b.n	8005d08 <_printf_i+0x1ec>
 8005d34:	2500      	movs	r5, #0
 8005d36:	e7f7      	b.n	8005d28 <_printf_i+0x20c>
 8005d38:	08006303 	.word	0x08006303
 8005d3c:	08006314 	.word	0x08006314

08005d40 <__retarget_lock_acquire_recursive>:
 8005d40:	4770      	bx	lr

08005d42 <__retarget_lock_release_recursive>:
 8005d42:	4770      	bx	lr

08005d44 <memchr>:
 8005d44:	b2c9      	uxtb	r1, r1
 8005d46:	1882      	adds	r2, r0, r2
 8005d48:	4290      	cmp	r0, r2
 8005d4a:	d101      	bne.n	8005d50 <memchr+0xc>
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	4770      	bx	lr
 8005d50:	7803      	ldrb	r3, [r0, #0]
 8005d52:	428b      	cmp	r3, r1
 8005d54:	d0fb      	beq.n	8005d4e <memchr+0xa>
 8005d56:	3001      	adds	r0, #1
 8005d58:	e7f6      	b.n	8005d48 <memchr+0x4>

08005d5a <memmove>:
 8005d5a:	b510      	push	{r4, lr}
 8005d5c:	4288      	cmp	r0, r1
 8005d5e:	d902      	bls.n	8005d66 <memmove+0xc>
 8005d60:	188b      	adds	r3, r1, r2
 8005d62:	4298      	cmp	r0, r3
 8005d64:	d303      	bcc.n	8005d6e <memmove+0x14>
 8005d66:	2300      	movs	r3, #0
 8005d68:	e007      	b.n	8005d7a <memmove+0x20>
 8005d6a:	5c8b      	ldrb	r3, [r1, r2]
 8005d6c:	5483      	strb	r3, [r0, r2]
 8005d6e:	3a01      	subs	r2, #1
 8005d70:	d2fb      	bcs.n	8005d6a <memmove+0x10>
 8005d72:	bd10      	pop	{r4, pc}
 8005d74:	5ccc      	ldrb	r4, [r1, r3]
 8005d76:	54c4      	strb	r4, [r0, r3]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d1fa      	bne.n	8005d74 <memmove+0x1a>
 8005d7e:	e7f8      	b.n	8005d72 <memmove+0x18>

08005d80 <_realloc_r>:
 8005d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d82:	0007      	movs	r7, r0
 8005d84:	000e      	movs	r6, r1
 8005d86:	0014      	movs	r4, r2
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	d105      	bne.n	8005d98 <_realloc_r+0x18>
 8005d8c:	0011      	movs	r1, r2
 8005d8e:	f7ff fc33 	bl	80055f8 <_malloc_r>
 8005d92:	0005      	movs	r5, r0
 8005d94:	0028      	movs	r0, r5
 8005d96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d98:	2a00      	cmp	r2, #0
 8005d9a:	d103      	bne.n	8005da4 <_realloc_r+0x24>
 8005d9c:	f7ff fbc0 	bl	8005520 <_free_r>
 8005da0:	0025      	movs	r5, r4
 8005da2:	e7f7      	b.n	8005d94 <_realloc_r+0x14>
 8005da4:	f000 f81b 	bl	8005dde <_malloc_usable_size_r>
 8005da8:	9001      	str	r0, [sp, #4]
 8005daa:	4284      	cmp	r4, r0
 8005dac:	d803      	bhi.n	8005db6 <_realloc_r+0x36>
 8005dae:	0035      	movs	r5, r6
 8005db0:	0843      	lsrs	r3, r0, #1
 8005db2:	42a3      	cmp	r3, r4
 8005db4:	d3ee      	bcc.n	8005d94 <_realloc_r+0x14>
 8005db6:	0021      	movs	r1, r4
 8005db8:	0038      	movs	r0, r7
 8005dba:	f7ff fc1d 	bl	80055f8 <_malloc_r>
 8005dbe:	1e05      	subs	r5, r0, #0
 8005dc0:	d0e8      	beq.n	8005d94 <_realloc_r+0x14>
 8005dc2:	9b01      	ldr	r3, [sp, #4]
 8005dc4:	0022      	movs	r2, r4
 8005dc6:	429c      	cmp	r4, r3
 8005dc8:	d900      	bls.n	8005dcc <_realloc_r+0x4c>
 8005dca:	001a      	movs	r2, r3
 8005dcc:	0031      	movs	r1, r6
 8005dce:	0028      	movs	r0, r5
 8005dd0:	f7ff fb94 	bl	80054fc <memcpy>
 8005dd4:	0031      	movs	r1, r6
 8005dd6:	0038      	movs	r0, r7
 8005dd8:	f7ff fba2 	bl	8005520 <_free_r>
 8005ddc:	e7da      	b.n	8005d94 <_realloc_r+0x14>

08005dde <_malloc_usable_size_r>:
 8005dde:	1f0b      	subs	r3, r1, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	1f18      	subs	r0, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	da01      	bge.n	8005dec <_malloc_usable_size_r+0xe>
 8005de8:	580b      	ldr	r3, [r1, r0]
 8005dea:	18c0      	adds	r0, r0, r3
 8005dec:	4770      	bx	lr
	...

08005df0 <_init>:
 8005df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df6:	bc08      	pop	{r3}
 8005df8:	469e      	mov	lr, r3
 8005dfa:	4770      	bx	lr

08005dfc <_fini>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e02:	bc08      	pop	{r3}
 8005e04:	469e      	mov	lr, r3
 8005e06:	4770      	bx	lr
