
wash_machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006660  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08006720  08006720  00016720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ae8  08006ae8  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08006ae8  08006ae8  00016ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006af0  08006af0  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006af4  08006af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08006af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200001c8  08006cc0  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08006cc0  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010970  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002170  00000000  00000000  00030b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00032cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  00033b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000302c  00000000  00000000  00034928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012313  00000000  00000000  00037954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f43c  00000000  00000000  00049c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c90a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003940  00000000  00000000  000c90f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001c8 	.word	0x200001c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006708 	.word	0x08006708

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001cc 	.word	0x200001cc
 8000104:	08006708 	.word	0x08006708

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8d8 	bl	80004b4 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8d3 	bl	80004b4 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzsi2>:
 8000478:	211c      	movs	r1, #28
 800047a:	2301      	movs	r3, #1
 800047c:	041b      	lsls	r3, r3, #16
 800047e:	4298      	cmp	r0, r3
 8000480:	d301      	bcc.n	8000486 <__clzsi2+0xe>
 8000482:	0c00      	lsrs	r0, r0, #16
 8000484:	3910      	subs	r1, #16
 8000486:	0a1b      	lsrs	r3, r3, #8
 8000488:	4298      	cmp	r0, r3
 800048a:	d301      	bcc.n	8000490 <__clzsi2+0x18>
 800048c:	0a00      	lsrs	r0, r0, #8
 800048e:	3908      	subs	r1, #8
 8000490:	091b      	lsrs	r3, r3, #4
 8000492:	4298      	cmp	r0, r3
 8000494:	d301      	bcc.n	800049a <__clzsi2+0x22>
 8000496:	0900      	lsrs	r0, r0, #4
 8000498:	3904      	subs	r1, #4
 800049a:	a202      	add	r2, pc, #8	; (adr r2, 80004a4 <__clzsi2+0x2c>)
 800049c:	5c10      	ldrb	r0, [r2, r0]
 800049e:	1840      	adds	r0, r0, r1
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	02020304 	.word	0x02020304
 80004a8:	01010101 	.word	0x01010101
	...

080004b4 <__clzdi2>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	2900      	cmp	r1, #0
 80004b8:	d103      	bne.n	80004c2 <__clzdi2+0xe>
 80004ba:	f7ff ffdd 	bl	8000478 <__clzsi2>
 80004be:	3020      	adds	r0, #32
 80004c0:	e002      	b.n	80004c8 <__clzdi2+0x14>
 80004c2:	0008      	movs	r0, r1
 80004c4:	f7ff ffd8 	bl	8000478 <__clzsi2>
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <initDrv8830>:
#include "drv8830.h"

extern I2C_HandleTypeDef hi2c1;

uint8_t initDrv8830() {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af04      	add	r7, sp, #16
	uint8_t txData = 0x80;
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	2280      	movs	r2, #128	; 0x80
 80004d6:	701a      	strb	r2, [r3, #0]
	// clear fault
	return HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &txData, 1, 5);
 80004d8:	4808      	ldr	r0, [pc, #32]	; (80004fc <initDrv8830+0x30>)
 80004da:	2305      	movs	r3, #5
 80004dc:	9302      	str	r3, [sp, #8]
 80004de:	2301      	movs	r3, #1
 80004e0:	9301      	str	r3, [sp, #4]
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2301      	movs	r3, #1
 80004e8:	2201      	movs	r2, #1
 80004ea:	21c0      	movs	r1, #192	; 0xc0
 80004ec:	f002 fb8a 	bl	8002c04 <HAL_I2C_Mem_Write>
 80004f0:	0003      	movs	r3, r0
}
 80004f2:	0018      	movs	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b002      	add	sp, #8
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	200001e4 	.word	0x200001e4

08000500 <setMotor>:

// VSET[7:2] voltage 0x00~0x3F
// D1, D0 direction
uint8_t setMotor(int direction) {
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b089      	sub	sp, #36	; 0x24
 8000504:	af04      	add	r7, sp, #16
 8000506:	6078      	str	r0, [r7, #4]
	uint8_t txData;
	uint8_t	result;
	txData = 0x1f << 2 | direction;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	b25b      	sxtb	r3, r3
 800050c:	227c      	movs	r2, #124	; 0x7c
 800050e:	4313      	orrs	r3, r2
 8000510:	b25b      	sxtb	r3, r3
 8000512:	b2da      	uxtb	r2, r3
 8000514:	210b      	movs	r1, #11
 8000516:	187b      	adds	r3, r7, r1
 8000518:	701a      	strb	r2, [r3, #0]
	int status;
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 800051a:	4811      	ldr	r0, [pc, #68]	; (8000560 <setMotor+0x60>)
 800051c:	2305      	movs	r3, #5
 800051e:	9302      	str	r3, [sp, #8]
 8000520:	2301      	movs	r3, #1
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	187b      	adds	r3, r7, r1
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	2301      	movs	r3, #1
 800052a:	2200      	movs	r2, #0
 800052c:	21c0      	movs	r1, #192	; 0xc0
 800052e:	f002 fb69 	bl	8002c04 <HAL_I2C_Mem_Write>
 8000532:	0003      	movs	r3, r0
 8000534:	60fb      	str	r3, [r7, #12]
	status = HAL_I2C_Mem_Read(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &result, 1, 5);
 8000536:	480a      	ldr	r0, [pc, #40]	; (8000560 <setMotor+0x60>)
 8000538:	2305      	movs	r3, #5
 800053a:	9302      	str	r3, [sp, #8]
 800053c:	2301      	movs	r3, #1
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	240a      	movs	r4, #10
 8000542:	193b      	adds	r3, r7, r4
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2301      	movs	r3, #1
 8000548:	2201      	movs	r2, #1
 800054a:	21c0      	movs	r1, #192	; 0xc0
 800054c:	f002 fc88 	bl	8002e60 <HAL_I2C_Mem_Read>
 8000550:	0003      	movs	r3, r0
 8000552:	60fb      	str	r3, [r7, #12]
	return result;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	781b      	ldrb	r3, [r3, #0]
}
 8000558:	0018      	movs	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	b005      	add	sp, #20
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	200001e4 	.word	0x200001e4

08000564 <initEns160>:
#include "ens160.h"

extern I2C_HandleTypeDef hi2c1;

void initEns160() {
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af04      	add	r7, sp, #16
	uint8_t txData = ENS160_OpMode_Run;
 800056a:	1cfb      	adds	r3, r7, #3
 800056c:	2202      	movs	r2, #2
 800056e:	701a      	strb	r2, [r3, #0]
	int status = HAL_I2C_Mem_Write(&hi2c1, ENS160_DeviceAddress, ENS160_OpMode, 1, &txData, 1, 10);
 8000570:	4808      	ldr	r0, [pc, #32]	; (8000594 <initEns160+0x30>)
 8000572:	230a      	movs	r3, #10
 8000574:	9302      	str	r3, [sp, #8]
 8000576:	2301      	movs	r3, #1
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	1cfb      	adds	r3, r7, #3
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2301      	movs	r3, #1
 8000580:	2210      	movs	r2, #16
 8000582:	21a4      	movs	r1, #164	; 0xa4
 8000584:	f002 fb3e 	bl	8002c04 <HAL_I2C_Mem_Write>
 8000588:	0003      	movs	r3, r0
 800058a:	607b      	str	r3, [r7, #4]
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b002      	add	sp, #8
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200001e4 	.word	0x200001e4

08000598 <BUZ>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void BUZ(uint8_t state){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	0002      	movs	r2, r0
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	701a      	strb	r2, [r3, #0]
	if(state) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005a4:	1dfb      	adds	r3, r7, #7
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d005      	beq.n	80005b8 <BUZ+0x20>
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <BUZ+0x34>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	0018      	movs	r0, r3
 80005b2:	f004 f88f 	bl	80046d4 <HAL_TIM_PWM_Start>
	else      HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
}
 80005b6:	e004      	b.n	80005c2 <BUZ+0x2a>
	else      HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <BUZ+0x34>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	0018      	movs	r0, r3
 80005be:	f004 f915 	bl	80047ec <HAL_TIM_PWM_Stop>
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b002      	add	sp, #8
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	20000238 	.word	0x20000238

080005d0 <weight_compare>:

int weight_compare(const void* mem1, const void* mem2){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	LAUNDRY_Typedef** a = (LAUNDRY_Typedef**)mem1;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60fb      	str	r3, [r7, #12]
	LAUNDRY_Typedef** b = (LAUNDRY_Typedef**)mem2;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	60bb      	str	r3, [r7, #8]

	if((*a)->weight < (*b)->weight) return 1;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	7a5a      	ldrb	r2, [r3, #9]
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	7a5b      	ldrb	r3, [r3, #9]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d201      	bcs.n	80005f6 <weight_compare+0x26>
 80005f2:	2301      	movs	r3, #1
 80005f4:	e000      	b.n	80005f8 <weight_compare+0x28>
	else return 0;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b004      	add	sp, #16
 80005fe:	bd80      	pop	{r7, pc}

08000600 <color_compare>:

int color_compare(const void* mem1, const void* mem2){
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
	LAUNDRY_Typedef** a = (LAUNDRY_Typedef**)mem1;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	60fb      	str	r3, [r7, #12]
	LAUNDRY_Typedef** b = (LAUNDRY_Typedef**)mem2;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	60bb      	str	r3, [r7, #8]

	if((*a)->color > (*b)->color) return 1;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	7a1a      	ldrb	r2, [r3, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	7a1b      	ldrb	r3, [r3, #8]
 800061e:	429a      	cmp	r2, r3
 8000620:	d901      	bls.n	8000626 <color_compare+0x26>
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <color_compare+0x28>
	else return 0;
 8000626:	2300      	movs	r3, #0
}
 8000628:	0018      	movs	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	b004      	add	sp, #16
 800062e:	bd80      	pop	{r7, pc}

08000630 <nextion_inst_set>:

int (*compare_item[2])(const void* mem1, const void* mem2) = { weight_compare, color_compare, };

void nextion_inst_set(char* str){
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	uint8_t end_cmd[3] = { 0xFF, 0xFF, 0xFF };
 8000638:	240c      	movs	r4, #12
 800063a:	193b      	adds	r3, r7, r4
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <nextion_inst_set+0x40>)
 800063e:	8811      	ldrh	r1, [r2, #0]
 8000640:	8019      	strh	r1, [r3, #0]
 8000642:	7892      	ldrb	r2, [r2, #2]
 8000644:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff fd5d 	bl	8000108 <strlen>
 800064e:	0003      	movs	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	4807      	ldr	r0, [pc, #28]	; (8000674 <nextion_inst_set+0x44>)
 8000656:	2364      	movs	r3, #100	; 0x64
 8000658:	f004 fbf4 	bl	8004e44 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, end_cmd, 3, 100);
 800065c:	1939      	adds	r1, r7, r4
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <nextion_inst_set+0x44>)
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	2203      	movs	r2, #3
 8000664:	f004 fbee 	bl	8004e44 <HAL_UART_Transmit>
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b005      	add	sp, #20
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	0800674c 	.word	0x0800674c
 8000674:	20000278 	.word	0x20000278

08000678 <get_touch>:

void get_touch(POS_Typedef* buf){
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	b087      	sub	sp, #28
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef res = HAL_OK;
 8000680:	2617      	movs	r6, #23
 8000682:	19bb      	adds	r3, r7, r6
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data[8] = { 0, };
 8000688:	250c      	movs	r5, #12
 800068a:	197b      	adds	r3, r7, r5
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	2200      	movs	r2, #0
 8000692:	605a      	str	r2, [r3, #4]

	nextion_inst_set("get tch0");
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <get_touch+0xcc>)
 8000696:	0018      	movs	r0, r3
 8000698:	f7ff ffca 	bl	8000630 <nextion_inst_set>
	res = HAL_UART_Receive(&huart1, rx_data, 8, 100);
 800069c:	19bc      	adds	r4, r7, r6
 800069e:	1979      	adds	r1, r7, r5
 80006a0:	4829      	ldr	r0, [pc, #164]	; (8000748 <get_touch+0xd0>)
 80006a2:	2364      	movs	r3, #100	; 0x64
 80006a4:	2208      	movs	r2, #8
 80006a6:	f004 fc6d 	bl	8004f84 <HAL_UART_Receive>
 80006aa:	0003      	movs	r3, r0
 80006ac:	7023      	strb	r3, [r4, #0]
	if(res == HAL_OK) { if(rx_data[0] == 0x71) { buf->x = rx_data[2] << 8 | rx_data[1]; } }
 80006ae:	19bb      	adds	r3, r7, r6
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d10f      	bne.n	80006d6 <get_touch+0x5e>
 80006b6:	197b      	adds	r3, r7, r5
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b71      	cmp	r3, #113	; 0x71
 80006bc:	d10b      	bne.n	80006d6 <get_touch+0x5e>
 80006be:	197b      	adds	r3, r7, r5
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	021b      	lsls	r3, r3, #8
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	197b      	adds	r3, r7, r5
 80006c8:	785b      	ldrb	r3, [r3, #1]
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b21b      	sxth	r3, r3
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	801a      	strh	r2, [r3, #0]

	nextion_inst_set("get tch1");
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <get_touch+0xd4>)
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff ffa9 	bl	8000630 <nextion_inst_set>
	res = HAL_UART_Receive(&huart1, rx_data, 8, 100);
 80006de:	2617      	movs	r6, #23
 80006e0:	19bc      	adds	r4, r7, r6
 80006e2:	250c      	movs	r5, #12
 80006e4:	1979      	adds	r1, r7, r5
 80006e6:	4818      	ldr	r0, [pc, #96]	; (8000748 <get_touch+0xd0>)
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2208      	movs	r2, #8
 80006ec:	f004 fc4a 	bl	8004f84 <HAL_UART_Receive>
 80006f0:	0003      	movs	r3, r0
 80006f2:	7023      	strb	r3, [r4, #0]
	if(res == HAL_OK) { if(rx_data[0] == 0x71) { buf->y = rx_data[2] << 8 | rx_data[1]; } }
 80006f4:	19bb      	adds	r3, r7, r6
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d10f      	bne.n	800071c <get_touch+0xa4>
 80006fc:	197b      	adds	r3, r7, r5
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b71      	cmp	r3, #113	; 0x71
 8000702:	d10b      	bne.n	800071c <get_touch+0xa4>
 8000704:	197b      	adds	r3, r7, r5
 8000706:	789b      	ldrb	r3, [r3, #2]
 8000708:	021b      	lsls	r3, r3, #8
 800070a:	b21a      	sxth	r2, r3
 800070c:	197b      	adds	r3, r7, r5
 800070e:	785b      	ldrb	r3, [r3, #1]
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	b29a      	uxth	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	805a      	strh	r2, [r3, #2]

	if(buf->x > 0 && buf->y > 0) buf->touched = 1;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d007      	beq.n	8000734 <get_touch+0xbc>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	885b      	ldrh	r3, [r3, #2]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d003      	beq.n	8000734 <get_touch+0xbc>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2201      	movs	r2, #1
 8000730:	711a      	strb	r2, [r3, #4]
 8000732:	e003      	b.n	800073c <get_touch+0xc4>
	else buf->touched = 0;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	711a      	strb	r2, [r3, #4]
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b007      	add	sp, #28
 8000742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000744:	08006750 	.word	0x08006750
 8000748:	20000278 	.word	0x20000278
 800074c:	0800675c 	.word	0x0800675c

08000750 <get_slide>:

void get_slide(POS_Typedef* buf, SLIDE_Typedef* slide){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	static POS_Typedef touch_xy = { 0, 0, 0 };
	static POS_Typedef befo_xy = { 0, 0, 0 };

	if(befo_xy.touched != buf->touched){
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <get_slide+0x98>)
 800075c:	791a      	ldrb	r2, [r3, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	429a      	cmp	r2, r3
 8000764:	d030      	beq.n	80007c8 <get_slide+0x78>
		if(buf->touched == 0){
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	791b      	ldrb	r3, [r3, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d123      	bne.n	80007b6 <get_slide+0x66>
			if(befo_xy.y > touch_xy.y){
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <get_slide+0x98>)
 8000770:	885a      	ldrh	r2, [r3, #2]
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <get_slide+0x9c>)
 8000774:	885b      	ldrh	r3, [r3, #2]
 8000776:	429a      	cmp	r2, r3
 8000778:	d90b      	bls.n	8000792 <get_slide+0x42>
				if(befo_xy.y - touch_xy.y > 30) { *slide = down_slide; }
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <get_slide+0x98>)
 800077c:	885b      	ldrh	r3, [r3, #2]
 800077e:	001a      	movs	r2, r3
 8000780:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <get_slide+0x9c>)
 8000782:	885b      	ldrh	r3, [r3, #2]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	2b1e      	cmp	r3, #30
 8000788:	dd21      	ble.n	80007ce <get_slide+0x7e>
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	2202      	movs	r2, #2
 800078e:	701a      	strb	r2, [r3, #0]
 8000790:	e01d      	b.n	80007ce <get_slide+0x7e>
			}
			else if(touch_xy.y > befo_xy.y){
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <get_slide+0x9c>)
 8000794:	885a      	ldrh	r2, [r3, #2]
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <get_slide+0x98>)
 8000798:	885b      	ldrh	r3, [r3, #2]
 800079a:	429a      	cmp	r2, r3
 800079c:	d917      	bls.n	80007ce <get_slide+0x7e>
				if(touch_xy.y - befo_xy.y > 30) { *slide = up_slide; }
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <get_slide+0x9c>)
 80007a0:	885b      	ldrh	r3, [r3, #2]
 80007a2:	001a      	movs	r2, r3
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <get_slide+0x98>)
 80007a6:	885b      	ldrh	r3, [r3, #2]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	2b1e      	cmp	r3, #30
 80007ac:	dd0f      	ble.n	80007ce <get_slide+0x7e>
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
 80007b4:	e00b      	b.n	80007ce <get_slide+0x7e>
			}
		}
		else touch_xy = *buf;
 80007b6:	4a0d      	ldr	r2, [pc, #52]	; (80007ec <get_slide+0x9c>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	0010      	movs	r0, r2
 80007bc:	0019      	movs	r1, r3
 80007be:	2306      	movs	r3, #6
 80007c0:	001a      	movs	r2, r3
 80007c2:	f005 f99d 	bl	8005b00 <memcpy>
 80007c6:	e002      	b.n	80007ce <get_slide+0x7e>
	}
	else *slide = none;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]

	befo_xy = *buf;
 80007ce:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <get_slide+0x98>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	0010      	movs	r0, r2
 80007d4:	0019      	movs	r1, r3
 80007d6:	2306      	movs	r3, #6
 80007d8:	001a      	movs	r2, r3
 80007da:	f005 f991 	bl	8005b00 <memcpy>
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000374 	.word	0x20000374
 80007ec:	2000037c 	.word	0x2000037c

080007f0 <area_check>:

uint8_t area_check(POS_Typedef* xy, AREA_Typedef* area){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	if(xy->x >= area->x0 && xy->x <= area->x1){
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	881a      	ldrh	r2, [r3, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	429a      	cmp	r2, r3
 8000804:	d316      	bcc.n	8000834 <area_check+0x44>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	881a      	ldrh	r2, [r3, #0]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	889b      	ldrh	r3, [r3, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	d810      	bhi.n	8000834 <area_check+0x44>
		if(xy->y >= area->y0 && xy->y <= area->y1){
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	885a      	ldrh	r2, [r3, #2]
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	885b      	ldrh	r3, [r3, #2]
 800081a:	429a      	cmp	r2, r3
 800081c:	d30a      	bcc.n	8000834 <area_check+0x44>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	885a      	ldrh	r2, [r3, #2]
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	88db      	ldrh	r3, [r3, #6]
 8000826:	429a      	cmp	r2, r3
 8000828:	d804      	bhi.n	8000834 <area_check+0x44>
			screen_update = 0;
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <area_check+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
			return 1;
 8000830:	2301      	movs	r3, #1
 8000832:	e000      	b.n	8000836 <area_check+0x46>
		}
	}
	return 0;
 8000834:	2300      	movs	r3, #0
}
 8000836:	0018      	movs	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	b002      	add	sp, #8
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	20000364 	.word	0x20000364

08000844 <laundry_draw>:

void laundry_draw(LAUNDRY_Typedef* data){
 8000844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000846:	b087      	sub	sp, #28
 8000848:	af04      	add	r7, sp, #16
 800084a:	6078      	str	r0, [r7, #4]
	sprintf(bf, "xstr %d,%d,60,40,0,WHITE,%s,1,1,1,\"%dkg\"", data->area.x0, data->area.y0, color_item[data->color], data->weight);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	001c      	movs	r4, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	885b      	ldrh	r3, [r3, #2]
 8000856:	001d      	movs	r5, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7a1b      	ldrb	r3, [r3, #8]
 800085c:	001a      	movs	r2, r3
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <laundry_draw+0x84>)
 8000860:	0092      	lsls	r2, r2, #2
 8000862:	58d3      	ldr	r3, [r2, r3]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	7a52      	ldrb	r2, [r2, #9]
 8000868:	4918      	ldr	r1, [pc, #96]	; (80008cc <laundry_draw+0x88>)
 800086a:	4819      	ldr	r0, [pc, #100]	; (80008d0 <laundry_draw+0x8c>)
 800086c:	9201      	str	r2, [sp, #4]
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	002b      	movs	r3, r5
 8000872:	0022      	movs	r2, r4
 8000874:	f005 fae8 	bl	8005e48 <siprintf>
	nextion_inst_set(bf);
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <laundry_draw+0x8c>)
 800087a:	0018      	movs	r0, r3
 800087c:	f7ff fed8 	bl	8000630 <nextion_inst_set>
	sprintf(bf, "draw %d,%d,%d,%d,%s", data->area.x0, data->area.y0, data->area.x1, data->area.y1, data->selected == 1 ? "GRAY" : "BLACK");
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	001d      	movs	r5, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	885b      	ldrh	r3, [r3, #2]
 800088a:	001e      	movs	r6, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	889b      	ldrh	r3, [r3, #4]
 8000890:	001a      	movs	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	88db      	ldrh	r3, [r3, #6]
 8000896:	001c      	movs	r4, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7a9b      	ldrb	r3, [r3, #10]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d101      	bne.n	80008a4 <laundry_draw+0x60>
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <laundry_draw+0x90>)
 80008a2:	e000      	b.n	80008a6 <laundry_draw+0x62>
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <laundry_draw+0x94>)
 80008a6:	490d      	ldr	r1, [pc, #52]	; (80008dc <laundry_draw+0x98>)
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <laundry_draw+0x8c>)
 80008aa:	9302      	str	r3, [sp, #8]
 80008ac:	9401      	str	r4, [sp, #4]
 80008ae:	9200      	str	r2, [sp, #0]
 80008b0:	0033      	movs	r3, r6
 80008b2:	002a      	movs	r2, r5
 80008b4:	f005 fac8 	bl	8005e48 <siprintf>
	nextion_inst_set(bf);
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <laundry_draw+0x8c>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f7ff feb8 	bl	8000630 <nextion_inst_set>
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b003      	add	sp, #12
 80008c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c8:	20000000 	.word	0x20000000
 80008cc:	08006768 	.word	0x08006768
 80008d0:	20000300 	.word	0x20000300
 80008d4:	08006794 	.word	0x08006794
 80008d8:	08006720 	.word	0x08006720
 80008dc:	0800679c 	.word	0x0800679c

080008e0 <button_draw>:

void button_draw(BUTTON_Typedef* data){
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	6078      	str	r0, [r7, #4]
	if(area_check(&curXY, &data->area)){
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	4b46      	ldr	r3, [pc, #280]	; (8000a04 <button_draw+0x124>)
 80008ec:	0011      	movs	r1, r2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff ff7e 	bl	80007f0 <area_check>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d050      	beq.n	800099a <button_draw+0xba>
		uint16_t color = 0;
 80008f8:	230e      	movs	r3, #14
 80008fa:	18fb      	adds	r3, r7, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	801a      	strh	r2, [r3, #0]

		color |= data->color == red || data->color == yellow ? 31 << 11 : 10 << 11;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7a1b      	ldrb	r3, [r3, #8]
 8000904:	2b04      	cmp	r3, #4
 8000906:	d003      	beq.n	8000910 <button_draw+0x30>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	7a1b      	ldrb	r3, [r3, #8]
 800090c:	2b05      	cmp	r3, #5
 800090e:	d101      	bne.n	8000914 <button_draw+0x34>
 8000910:	4b3d      	ldr	r3, [pc, #244]	; (8000a08 <button_draw+0x128>)
 8000912:	e001      	b.n	8000918 <button_draw+0x38>
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	01db      	lsls	r3, r3, #7
 8000918:	210e      	movs	r1, #14
 800091a:	187a      	adds	r2, r7, r1
 800091c:	2000      	movs	r0, #0
 800091e:	5e12      	ldrsh	r2, [r2, r0]
 8000920:	4313      	orrs	r3, r2
 8000922:	b21a      	sxth	r2, r3
 8000924:	187b      	adds	r3, r7, r1
 8000926:	801a      	strh	r2, [r3, #0]
		color |= data->color == yellow ? 62 << 5 : 40 << 5;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	7a1b      	ldrb	r3, [r3, #8]
 800092c:	2b05      	cmp	r3, #5
 800092e:	d102      	bne.n	8000936 <button_draw+0x56>
 8000930:	23f8      	movs	r3, #248	; 0xf8
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	e001      	b.n	800093a <button_draw+0x5a>
 8000936:	23a0      	movs	r3, #160	; 0xa0
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	210e      	movs	r1, #14
 800093c:	187a      	adds	r2, r7, r1
 800093e:	2000      	movs	r0, #0
 8000940:	5e12      	ldrsh	r2, [r2, r0]
 8000942:	4313      	orrs	r3, r2
 8000944:	b21a      	sxth	r2, r3
 8000946:	187b      	adds	r3, r7, r1
 8000948:	801a      	strh	r2, [r3, #0]
		color |= data->color == blue ? 31 : 20;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	7a1b      	ldrb	r3, [r3, #8]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d101      	bne.n	8000956 <button_draw+0x76>
 8000952:	231f      	movs	r3, #31
 8000954:	e000      	b.n	8000958 <button_draw+0x78>
 8000956:	2314      	movs	r3, #20
 8000958:	210e      	movs	r1, #14
 800095a:	187a      	adds	r2, r7, r1
 800095c:	2000      	movs	r0, #0
 800095e:	5e12      	ldrsh	r2, [r2, r0]
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	187b      	adds	r3, r7, r1
 8000966:	801a      	strh	r2, [r3, #0]

		sprintf(bf, "cirs %d,%d,%d,%d", data->area.x0 + 20, data->area.y0 + 20, data->radius, color);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	3314      	adds	r3, #20
 800096e:	001a      	movs	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	885b      	ldrh	r3, [r3, #2]
 8000974:	3314      	adds	r3, #20
 8000976:	001c      	movs	r4, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7a5b      	ldrb	r3, [r3, #9]
 800097c:	001d      	movs	r5, r3
 800097e:	187b      	adds	r3, r7, r1
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	4922      	ldr	r1, [pc, #136]	; (8000a0c <button_draw+0x12c>)
 8000984:	4822      	ldr	r0, [pc, #136]	; (8000a10 <button_draw+0x130>)
 8000986:	9301      	str	r3, [sp, #4]
 8000988:	9500      	str	r5, [sp, #0]
 800098a:	0023      	movs	r3, r4
 800098c:	f005 fa5c 	bl	8005e48 <siprintf>
		nextion_inst_set(bf);
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <button_draw+0x130>)
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff fe4c 	bl	8000630 <nextion_inst_set>
 8000998:	e01c      	b.n	80009d4 <button_draw+0xf4>
	}
	else{
		sprintf(bf, "cirs %d,%d,%d,%s", data->area.x0 + 20, data->area.y0 + 20, data->radius, color_item[data->color]);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	3314      	adds	r3, #20
 80009a0:	001c      	movs	r4, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	885b      	ldrh	r3, [r3, #2]
 80009a6:	3314      	adds	r3, #20
 80009a8:	001d      	movs	r5, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	7a5b      	ldrb	r3, [r3, #9]
 80009ae:	001e      	movs	r6, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7a1b      	ldrb	r3, [r3, #8]
 80009b4:	001a      	movs	r2, r3
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <button_draw+0x134>)
 80009b8:	0092      	lsls	r2, r2, #2
 80009ba:	58d3      	ldr	r3, [r2, r3]
 80009bc:	4916      	ldr	r1, [pc, #88]	; (8000a18 <button_draw+0x138>)
 80009be:	4814      	ldr	r0, [pc, #80]	; (8000a10 <button_draw+0x130>)
 80009c0:	9301      	str	r3, [sp, #4]
 80009c2:	9600      	str	r6, [sp, #0]
 80009c4:	002b      	movs	r3, r5
 80009c6:	0022      	movs	r2, r4
 80009c8:	f005 fa3e 	bl	8005e48 <siprintf>
		nextion_inst_set(bf);
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <button_draw+0x130>)
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff fe2e 	bl	8000630 <nextion_inst_set>
	}
	sprintf(bf, "cir %d,%d,%d,BLACK", data->area.x0 + 20, data->area.y0 + 20, data->radius);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	3314      	adds	r3, #20
 80009da:	001a      	movs	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	885b      	ldrh	r3, [r3, #2]
 80009e0:	3314      	adds	r3, #20
 80009e2:	001c      	movs	r4, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7a5b      	ldrb	r3, [r3, #9]
 80009e8:	490c      	ldr	r1, [pc, #48]	; (8000a1c <button_draw+0x13c>)
 80009ea:	4809      	ldr	r0, [pc, #36]	; (8000a10 <button_draw+0x130>)
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	0023      	movs	r3, r4
 80009f0:	f005 fa2a 	bl	8005e48 <siprintf>
	nextion_inst_set(bf);
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <button_draw+0x130>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fe1a 	bl	8000630 <nextion_inst_set>
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b005      	add	sp, #20
 8000a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a04:	2000036c 	.word	0x2000036c
 8000a08:	fffff800 	.word	0xfffff800
 8000a0c:	080067b0 	.word	0x080067b0
 8000a10:	20000300 	.word	0x20000300
 8000a14:	20000000 	.word	0x20000000
 8000a18:	080067c4 	.word	0x080067c4
 8000a1c:	080067d8 	.word	0x080067d8

08000a20 <higher_menu_display>:

void higher_menu_display(HIGHER_MENU_Typedef* data){
 8000a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
	if(*data == basic_display){
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d000      	beq.n	8000a32 <higher_menu_display+0x12>
 8000a30:	e1ae      	b.n	8000d90 <higher_menu_display+0x370>
		for(uint8_t i = 0 ; i < 3 ; i++){
 8000a32:	230f      	movs	r3, #15
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e1a2      	b.n	8000d82 <higher_menu_display+0x362>
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", basket[i].area.x0, basket[i].area.y0, basket[i].area.x1, basket[i].area.y1);
 8000a3c:	200f      	movs	r0, #15
 8000a3e:	183b      	adds	r3, r7, r0
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	4bee      	ldr	r3, [pc, #952]	; (8000dfc <higher_menu_display+0x3dc>)
 8000a44:	2134      	movs	r1, #52	; 0x34
 8000a46:	434a      	muls	r2, r1
 8000a48:	5ad3      	ldrh	r3, [r2, r3]
 8000a4a:	001d      	movs	r5, r3
 8000a4c:	183b      	adds	r3, r7, r0
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4aea      	ldr	r2, [pc, #936]	; (8000dfc <higher_menu_display+0x3dc>)
 8000a52:	2134      	movs	r1, #52	; 0x34
 8000a54:	434b      	muls	r3, r1
 8000a56:	18d3      	adds	r3, r2, r3
 8000a58:	3302      	adds	r3, #2
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	001e      	movs	r6, r3
 8000a5e:	183b      	adds	r3, r7, r0
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4ae6      	ldr	r2, [pc, #920]	; (8000dfc <higher_menu_display+0x3dc>)
 8000a64:	2134      	movs	r1, #52	; 0x34
 8000a66:	434b      	muls	r3, r1
 8000a68:	18d3      	adds	r3, r2, r3
 8000a6a:	3304      	adds	r3, #4
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	001c      	movs	r4, r3
 8000a70:	183b      	adds	r3, r7, r0
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4ae1      	ldr	r2, [pc, #900]	; (8000dfc <higher_menu_display+0x3dc>)
 8000a76:	2134      	movs	r1, #52	; 0x34
 8000a78:	434b      	muls	r3, r1
 8000a7a:	18d3      	adds	r3, r2, r3
 8000a7c:	3306      	adds	r3, #6
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	49df      	ldr	r1, [pc, #892]	; (8000e00 <higher_menu_display+0x3e0>)
 8000a82:	48e0      	ldr	r0, [pc, #896]	; (8000e04 <higher_menu_display+0x3e4>)
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	9400      	str	r4, [sp, #0]
 8000a88:	0033      	movs	r3, r6
 8000a8a:	002a      	movs	r2, r5
 8000a8c:	f005 f9dc 	bl	8005e48 <siprintf>
			nextion_inst_set(bf);
 8000a90:	4bdc      	ldr	r3, [pc, #880]	; (8000e04 <higher_menu_display+0x3e4>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff fdcc 	bl	8000630 <nextion_inst_set>

			sprintf(bf, "xstr %d,1,158,30,0,BLACK,WHITE,1,1,1,\"Basket %d\"", basket[i].area.x0 + 1, i + 1);
 8000a98:	200f      	movs	r0, #15
 8000a9a:	183b      	adds	r3, r7, r0
 8000a9c:	781a      	ldrb	r2, [r3, #0]
 8000a9e:	4bd7      	ldr	r3, [pc, #860]	; (8000dfc <higher_menu_display+0x3dc>)
 8000aa0:	2134      	movs	r1, #52	; 0x34
 8000aa2:	434a      	muls	r2, r1
 8000aa4:	5ad3      	ldrh	r3, [r2, r3]
 8000aa6:	1c5a      	adds	r2, r3, #1
 8000aa8:	183b      	adds	r3, r7, r0
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	49d6      	ldr	r1, [pc, #856]	; (8000e08 <higher_menu_display+0x3e8>)
 8000ab0:	48d4      	ldr	r0, [pc, #848]	; (8000e04 <higher_menu_display+0x3e4>)
 8000ab2:	f005 f9c9 	bl	8005e48 <siprintf>
			nextion_inst_set(bf);
 8000ab6:	4bd3      	ldr	r3, [pc, #844]	; (8000e04 <higher_menu_display+0x3e4>)
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff fdb9 	bl	8000630 <nextion_inst_set>

			for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 8000abe:	230e      	movs	r3, #14
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e147      	b.n	8000d58 <higher_menu_display+0x338>
				basket[i].laundry[j]->area.x0 = j % 2 * 80;
 8000ac8:	250e      	movs	r5, #14
 8000aca:	197b      	adds	r3, r7, r5
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	b299      	uxth	r1, r3
 8000ad6:	260f      	movs	r6, #15
 8000ad8:	19bb      	adds	r3, r7, r6
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	197b      	adds	r3, r7, r5
 8000ade:	781c      	ldrb	r4, [r3, #0]
 8000ae0:	48c6      	ldr	r0, [pc, #792]	; (8000dfc <higher_menu_display+0x3dc>)
 8000ae2:	0013      	movs	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	189b      	adds	r3, r3, r2
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	189b      	adds	r3, r3, r2
 8000aec:	191b      	adds	r3, r3, r4
 8000aee:	3302      	adds	r3, #2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	581b      	ldr	r3, [r3, r0]
 8000af4:	2250      	movs	r2, #80	; 0x50
 8000af6:	434a      	muls	r2, r1
 8000af8:	b292      	uxth	r2, r2
 8000afa:	801a      	strh	r2, [r3, #0]
				basket[i].laundry[j]->area.x0 += i * 160;
 8000afc:	19bb      	adds	r3, r7, r6
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	002c      	movs	r4, r5
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	7818      	ldrb	r0, [r3, #0]
 8000b06:	49bd      	ldr	r1, [pc, #756]	; (8000dfc <higher_menu_display+0x3dc>)
 8000b08:	0013      	movs	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	189b      	adds	r3, r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	189b      	adds	r3, r3, r2
 8000b12:	181b      	adds	r3, r3, r0
 8000b14:	3302      	adds	r3, #2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	585b      	ldr	r3, [r3, r1]
 8000b1a:	8818      	ldrh	r0, [r3, #0]
 8000b1c:	19bb      	adds	r3, r7, r6
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	22a0      	movs	r2, #160	; 0xa0
 8000b24:	4353      	muls	r3, r2
 8000b26:	b299      	uxth	r1, r3
 8000b28:	19bb      	adds	r3, r7, r6
 8000b2a:	781a      	ldrb	r2, [r3, #0]
 8000b2c:	0026      	movs	r6, r4
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	781d      	ldrb	r5, [r3, #0]
 8000b32:	4cb2      	ldr	r4, [pc, #712]	; (8000dfc <higher_menu_display+0x3dc>)
 8000b34:	0013      	movs	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	189b      	adds	r3, r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	189b      	adds	r3, r3, r2
 8000b3e:	195b      	adds	r3, r3, r5
 8000b40:	3302      	adds	r3, #2
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	591b      	ldr	r3, [r3, r4]
 8000b46:	1842      	adds	r2, r0, r1
 8000b48:	b292      	uxth	r2, r2
 8000b4a:	801a      	strh	r2, [r3, #0]

				basket[i].laundry[j]->area.y0 = (9 - j) / 2 * 40;
 8000b4c:	19bb      	adds	r3, r7, r6
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2209      	movs	r2, #9
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	d500      	bpl.n	8000b58 <higher_menu_display+0x138>
 8000b56:	3301      	adds	r3, #1
 8000b58:	105b      	asrs	r3, r3, #1
 8000b5a:	b299      	uxth	r1, r3
 8000b5c:	260f      	movs	r6, #15
 8000b5e:	19bb      	adds	r3, r7, r6
 8000b60:	781a      	ldrb	r2, [r3, #0]
 8000b62:	250e      	movs	r5, #14
 8000b64:	197b      	adds	r3, r7, r5
 8000b66:	781c      	ldrb	r4, [r3, #0]
 8000b68:	48a4      	ldr	r0, [pc, #656]	; (8000dfc <higher_menu_display+0x3dc>)
 8000b6a:	0013      	movs	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	189b      	adds	r3, r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	189b      	adds	r3, r3, r2
 8000b74:	191b      	adds	r3, r3, r4
 8000b76:	3302      	adds	r3, #2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	581b      	ldr	r3, [r3, r0]
 8000b7c:	2228      	movs	r2, #40	; 0x28
 8000b7e:	434a      	muls	r2, r1
 8000b80:	b292      	uxth	r2, r2
 8000b82:	805a      	strh	r2, [r3, #2]

				basket[i].laundry[j]->area.x1 = basket[i].laundry[j]->area.x0 + 80;
 8000b84:	19bb      	adds	r3, r7, r6
 8000b86:	781a      	ldrb	r2, [r3, #0]
 8000b88:	197b      	adds	r3, r7, r5
 8000b8a:	7818      	ldrb	r0, [r3, #0]
 8000b8c:	499b      	ldr	r1, [pc, #620]	; (8000dfc <higher_menu_display+0x3dc>)
 8000b8e:	0013      	movs	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	189b      	adds	r3, r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	189b      	adds	r3, r3, r2
 8000b98:	181b      	adds	r3, r3, r0
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	585b      	ldr	r3, [r3, r1]
 8000ba0:	8819      	ldrh	r1, [r3, #0]
 8000ba2:	19bb      	adds	r3, r7, r6
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	197b      	adds	r3, r7, r5
 8000ba8:	781c      	ldrb	r4, [r3, #0]
 8000baa:	4894      	ldr	r0, [pc, #592]	; (8000dfc <higher_menu_display+0x3dc>)
 8000bac:	0013      	movs	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	189b      	adds	r3, r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	189b      	adds	r3, r3, r2
 8000bb6:	191b      	adds	r3, r3, r4
 8000bb8:	3302      	adds	r3, #2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	581b      	ldr	r3, [r3, r0]
 8000bbe:	000a      	movs	r2, r1
 8000bc0:	3250      	adds	r2, #80	; 0x50
 8000bc2:	b292      	uxth	r2, r2
 8000bc4:	809a      	strh	r2, [r3, #4]
				basket[i].laundry[j]->area.y1 = basket[i].laundry[j]->area.y0 + 40;
 8000bc6:	19bb      	adds	r3, r7, r6
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	197b      	adds	r3, r7, r5
 8000bcc:	7818      	ldrb	r0, [r3, #0]
 8000bce:	498b      	ldr	r1, [pc, #556]	; (8000dfc <higher_menu_display+0x3dc>)
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	189b      	adds	r3, r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	189b      	adds	r3, r3, r2
 8000bda:	181b      	adds	r3, r3, r0
 8000bdc:	3302      	adds	r3, #2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	585b      	ldr	r3, [r3, r1]
 8000be2:	8859      	ldrh	r1, [r3, #2]
 8000be4:	19bb      	adds	r3, r7, r6
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	197b      	adds	r3, r7, r5
 8000bea:	781c      	ldrb	r4, [r3, #0]
 8000bec:	4883      	ldr	r0, [pc, #524]	; (8000dfc <higher_menu_display+0x3dc>)
 8000bee:	0013      	movs	r3, r2
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	189b      	adds	r3, r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	189b      	adds	r3, r3, r2
 8000bf8:	191b      	adds	r3, r3, r4
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	581b      	ldr	r3, [r3, r0]
 8000c00:	000a      	movs	r2, r1
 8000c02:	3228      	adds	r2, #40	; 0x28
 8000c04:	b292      	uxth	r2, r2
 8000c06:	80da      	strh	r2, [r3, #6]

				sprintf(bf, "xstr %d,%d,80,40,0,WHITE,%s,1,1,1,\"%dkg\"", basket[i].laundry[j]->area.x0, basket[i].laundry[j]->area.y0, color_item[basket[i].laundry[j]->color], basket[i].laundry[j]->weight);
 8000c08:	19bb      	adds	r3, r7, r6
 8000c0a:	781a      	ldrb	r2, [r3, #0]
 8000c0c:	002c      	movs	r4, r5
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	7818      	ldrb	r0, [r3, #0]
 8000c12:	497a      	ldr	r1, [pc, #488]	; (8000dfc <higher_menu_display+0x3dc>)
 8000c14:	0013      	movs	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	189b      	adds	r3, r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	189b      	adds	r3, r3, r2
 8000c1e:	181b      	adds	r3, r3, r0
 8000c20:	3302      	adds	r3, #2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	585b      	ldr	r3, [r3, r1]
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	001d      	movs	r5, r3
 8000c2a:	19bb      	adds	r3, r7, r6
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	7818      	ldrb	r0, [r3, #0]
 8000c32:	4972      	ldr	r1, [pc, #456]	; (8000dfc <higher_menu_display+0x3dc>)
 8000c34:	0013      	movs	r3, r2
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	189b      	adds	r3, r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	189b      	adds	r3, r3, r2
 8000c3e:	181b      	adds	r3, r3, r0
 8000c40:	3302      	adds	r3, #2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	585b      	ldr	r3, [r3, r1]
 8000c46:	885b      	ldrh	r3, [r3, #2]
 8000c48:	001e      	movs	r6, r3
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	7818      	ldrb	r0, [r3, #0]
 8000c54:	4969      	ldr	r1, [pc, #420]	; (8000dfc <higher_menu_display+0x3dc>)
 8000c56:	0013      	movs	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	189b      	adds	r3, r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	189b      	adds	r3, r3, r2
 8000c60:	181b      	adds	r3, r3, r0
 8000c62:	3302      	adds	r3, #2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	585b      	ldr	r3, [r3, r1]
 8000c68:	7a1b      	ldrb	r3, [r3, #8]
 8000c6a:	001a      	movs	r2, r3
 8000c6c:	4b67      	ldr	r3, [pc, #412]	; (8000e0c <higher_menu_display+0x3ec>)
 8000c6e:	0092      	lsls	r2, r2, #2
 8000c70:	58d1      	ldr	r1, [r2, r3]
 8000c72:	230f      	movs	r3, #15
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	781a      	ldrb	r2, [r3, #0]
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	781c      	ldrb	r4, [r3, #0]
 8000c7c:	485f      	ldr	r0, [pc, #380]	; (8000dfc <higher_menu_display+0x3dc>)
 8000c7e:	0013      	movs	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	189b      	adds	r3, r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	189b      	adds	r3, r3, r2
 8000c88:	191b      	adds	r3, r3, r4
 8000c8a:	3302      	adds	r3, #2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	581b      	ldr	r3, [r3, r0]
 8000c90:	7a5b      	ldrb	r3, [r3, #9]
 8000c92:	4c5f      	ldr	r4, [pc, #380]	; (8000e10 <higher_menu_display+0x3f0>)
 8000c94:	485b      	ldr	r0, [pc, #364]	; (8000e04 <higher_menu_display+0x3e4>)
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	9100      	str	r1, [sp, #0]
 8000c9a:	0033      	movs	r3, r6
 8000c9c:	002a      	movs	r2, r5
 8000c9e:	0021      	movs	r1, r4
 8000ca0:	f005 f8d2 	bl	8005e48 <siprintf>
				nextion_inst_set(bf);
 8000ca4:	4b57      	ldr	r3, [pc, #348]	; (8000e04 <higher_menu_display+0x3e4>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff fcc2 	bl	8000630 <nextion_inst_set>
				sprintf(bf, "draw %d,%d,%d,%d,BLACK", basket[i].laundry[j]->area.x0, basket[i].laundry[j]->area.y0, basket[i].laundry[j]->area.x1, basket[i].laundry[j]->area.y1);
 8000cac:	260f      	movs	r6, #15
 8000cae:	19bb      	adds	r3, r7, r6
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	240e      	movs	r4, #14
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	7818      	ldrb	r0, [r3, #0]
 8000cb8:	4950      	ldr	r1, [pc, #320]	; (8000dfc <higher_menu_display+0x3dc>)
 8000cba:	0013      	movs	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	189b      	adds	r3, r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	189b      	adds	r3, r3, r2
 8000cc4:	181b      	adds	r3, r3, r0
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	585b      	ldr	r3, [r3, r1]
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	001d      	movs	r5, r3
 8000cd0:	19bb      	adds	r3, r7, r6
 8000cd2:	781a      	ldrb	r2, [r3, #0]
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	7818      	ldrb	r0, [r3, #0]
 8000cd8:	4948      	ldr	r1, [pc, #288]	; (8000dfc <higher_menu_display+0x3dc>)
 8000cda:	0013      	movs	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	189b      	adds	r3, r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	189b      	adds	r3, r3, r2
 8000ce4:	181b      	adds	r3, r3, r0
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	585b      	ldr	r3, [r3, r1]
 8000cec:	885b      	ldrh	r3, [r3, #2]
 8000cee:	001e      	movs	r6, r3
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	781a      	ldrb	r2, [r3, #0]
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	7818      	ldrb	r0, [r3, #0]
 8000cfa:	4940      	ldr	r1, [pc, #256]	; (8000dfc <higher_menu_display+0x3dc>)
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	189b      	adds	r3, r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	189b      	adds	r3, r3, r2
 8000d06:	181b      	adds	r3, r3, r0
 8000d08:	3302      	adds	r3, #2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	585b      	ldr	r3, [r3, r1]
 8000d0e:	889b      	ldrh	r3, [r3, #4]
 8000d10:	001c      	movs	r4, r3
 8000d12:	220f      	movs	r2, #15
 8000d14:	18bb      	adds	r3, r7, r2
 8000d16:	781a      	ldrb	r2, [r3, #0]
 8000d18:	230e      	movs	r3, #14
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	7818      	ldrb	r0, [r3, #0]
 8000d1e:	4937      	ldr	r1, [pc, #220]	; (8000dfc <higher_menu_display+0x3dc>)
 8000d20:	0013      	movs	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	189b      	adds	r3, r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	189b      	adds	r3, r3, r2
 8000d2a:	181b      	adds	r3, r3, r0
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	585b      	ldr	r3, [r3, r1]
 8000d32:	88db      	ldrh	r3, [r3, #6]
 8000d34:	4932      	ldr	r1, [pc, #200]	; (8000e00 <higher_menu_display+0x3e0>)
 8000d36:	4833      	ldr	r0, [pc, #204]	; (8000e04 <higher_menu_display+0x3e4>)
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	9400      	str	r4, [sp, #0]
 8000d3c:	0033      	movs	r3, r6
 8000d3e:	002a      	movs	r2, r5
 8000d40:	f005 f882 	bl	8005e48 <siprintf>
				nextion_inst_set(bf);
 8000d44:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <higher_menu_display+0x3e4>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff fc72 	bl	8000630 <nextion_inst_set>
			for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 8000d4c:	240e      	movs	r4, #14
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	781a      	ldrb	r2, [r3, #0]
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	3201      	adds	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	240f      	movs	r4, #15
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	4a27      	ldr	r2, [pc, #156]	; (8000dfc <higher_menu_display+0x3dc>)
 8000d60:	2130      	movs	r1, #48	; 0x30
 8000d62:	2034      	movs	r0, #52	; 0x34
 8000d64:	4343      	muls	r3, r0
 8000d66:	18d3      	adds	r3, r2, r3
 8000d68:	185b      	adds	r3, r3, r1
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	220e      	movs	r2, #14
 8000d6e:	18ba      	adds	r2, r7, r2
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d200      	bcs.n	8000d78 <higher_menu_display+0x358>
 8000d76:	e6a7      	b.n	8000ac8 <higher_menu_display+0xa8>
		for(uint8_t i = 0 ; i < 3 ; i++){
 8000d78:	193b      	adds	r3, r7, r4
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	3201      	adds	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	230f      	movs	r3, #15
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d800      	bhi.n	8000d8e <higher_menu_display+0x36e>
 8000d8c:	e656      	b.n	8000a3c <higher_menu_display+0x1c>
			nextion_inst_set(bf);
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", basket[wash_basket].laundry[i]->area.x0, basket[wash_basket].laundry[i]->area.y0, basket[wash_basket].laundry[i]->area.x1, basket[wash_basket].laundry[i]->area.y1);
			nextion_inst_set(bf);
		}
	}
}
 8000d8e:	e328      	b.n	80013e2 <higher_menu_display+0x9c2>
	else if(*data == add_display){
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d000      	beq.n	8000d9a <higher_menu_display+0x37a>
 8000d98:	e19b      	b.n	80010d2 <higher_menu_display+0x6b2>
		for(uint8_t i = 0 ; i < 3 ; i++){
 8000d9a:	230d      	movs	r3, #13
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e055      	b.n	8000e50 <higher_menu_display+0x430>
			sprintf(bf, "draw %d,0,%d,200,BLACK", i * 120, i * 120 + 120);
 8000da4:	250d      	movs	r5, #13
 8000da6:	197b      	adds	r3, r7, r5
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	0013      	movs	r3, r2
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	001c      	movs	r4, r3
 8000db4:	197b      	adds	r3, r7, r5
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	1c5a      	adds	r2, r3, #1
 8000dba:	0013      	movs	r3, r2
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	1a9b      	subs	r3, r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	4914      	ldr	r1, [pc, #80]	; (8000e14 <higher_menu_display+0x3f4>)
 8000dc4:	480f      	ldr	r0, [pc, #60]	; (8000e04 <higher_menu_display+0x3e4>)
 8000dc6:	0022      	movs	r2, r4
 8000dc8:	f005 f83e 	bl	8005e48 <siprintf>
			nextion_inst_set(bf);
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <higher_menu_display+0x3e4>)
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff fc2e 	bl	8000630 <nextion_inst_set>
			sprintf(bf, "xstr %d,1,118,30,0,%s,WHITE,1,1,1,\"%d/15kg\"", i * 120 + 1, basket[i].weight > 15 ? "RED" : "BLACK", basket[i].weight);
 8000dd4:	197b      	adds	r3, r7, r5
 8000dd6:	781a      	ldrb	r2, [r3, #0]
 8000dd8:	0013      	movs	r3, r2
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	1a9b      	subs	r3, r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	1c5c      	adds	r4, r3, #1
 8000de2:	197b      	adds	r3, r7, r5
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <higher_menu_display+0x3dc>)
 8000de8:	2131      	movs	r1, #49	; 0x31
 8000dea:	2034      	movs	r0, #52	; 0x34
 8000dec:	4343      	muls	r3, r0
 8000dee:	18d3      	adds	r3, r2, r3
 8000df0:	185b      	adds	r3, r3, r1
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d911      	bls.n	8000e1c <higher_menu_display+0x3fc>
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <higher_menu_display+0x3f8>)
 8000dfa:	e010      	b.n	8000e1e <higher_menu_display+0x3fe>
 8000dfc:	20000090 	.word	0x20000090
 8000e00:	080067ec 	.word	0x080067ec
 8000e04:	20000300 	.word	0x20000300
 8000e08:	08006804 	.word	0x08006804
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	08006838 	.word	0x08006838
 8000e14:	08006864 	.word	0x08006864
 8000e18:	08006740 	.word	0x08006740
 8000e1c:	4bc7      	ldr	r3, [pc, #796]	; (800113c <higher_menu_display+0x71c>)
 8000e1e:	260d      	movs	r6, #13
 8000e20:	19ba      	adds	r2, r7, r6
 8000e22:	7812      	ldrb	r2, [r2, #0]
 8000e24:	49c6      	ldr	r1, [pc, #792]	; (8001140 <higher_menu_display+0x720>)
 8000e26:	2031      	movs	r0, #49	; 0x31
 8000e28:	2534      	movs	r5, #52	; 0x34
 8000e2a:	436a      	muls	r2, r5
 8000e2c:	188a      	adds	r2, r1, r2
 8000e2e:	1812      	adds	r2, r2, r0
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	49c4      	ldr	r1, [pc, #784]	; (8001144 <higher_menu_display+0x724>)
 8000e34:	48c4      	ldr	r0, [pc, #784]	; (8001148 <higher_menu_display+0x728>)
 8000e36:	9200      	str	r2, [sp, #0]
 8000e38:	0022      	movs	r2, r4
 8000e3a:	f005 f805 	bl	8005e48 <siprintf>
			nextion_inst_set(bf);
 8000e3e:	4bc2      	ldr	r3, [pc, #776]	; (8001148 <higher_menu_display+0x728>)
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff fbf5 	bl	8000630 <nextion_inst_set>
		for(uint8_t i = 0 ; i < 3 ; i++){
 8000e46:	19bb      	adds	r3, r7, r6
 8000e48:	781a      	ldrb	r2, [r3, #0]
 8000e4a:	19bb      	adds	r3, r7, r6
 8000e4c:	3201      	adds	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	230d      	movs	r3, #13
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d9a4      	bls.n	8000da4 <higher_menu_display+0x384>
		nextion_inst_set("draw 360,0,360+120,200,BLACK");
 8000e5a:	4bbc      	ldr	r3, [pc, #752]	; (800114c <higher_menu_display+0x72c>)
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff fbe7 	bl	8000630 <nextion_inst_set>
		for(uint8_t i = 0 ; i < 3 ; i++){
 8000e62:	230c      	movs	r3, #12
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e0be      	b.n	8000fea <higher_menu_display+0x5ca>
			for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 8000e6c:	230b      	movs	r3, #11
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e0a4      	b.n	8000fc0 <higher_menu_display+0x5a0>
				basket[i].laundry[j]->area.x0 = j % 2 * 60;
 8000e76:	250b      	movs	r5, #11
 8000e78:	197b      	adds	r3, r7, r5
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4013      	ands	r3, r2
 8000e82:	b299      	uxth	r1, r3
 8000e84:	260c      	movs	r6, #12
 8000e86:	19bb      	adds	r3, r7, r6
 8000e88:	781a      	ldrb	r2, [r3, #0]
 8000e8a:	197b      	adds	r3, r7, r5
 8000e8c:	781c      	ldrb	r4, [r3, #0]
 8000e8e:	48ac      	ldr	r0, [pc, #688]	; (8001140 <higher_menu_display+0x720>)
 8000e90:	0013      	movs	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	189b      	adds	r3, r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	189b      	adds	r3, r3, r2
 8000e9a:	191b      	adds	r3, r3, r4
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	581b      	ldr	r3, [r3, r0]
 8000ea2:	223c      	movs	r2, #60	; 0x3c
 8000ea4:	434a      	muls	r2, r1
 8000ea6:	b292      	uxth	r2, r2
 8000ea8:	801a      	strh	r2, [r3, #0]
				basket[i].laundry[j]->area.x0 += i * 120;
 8000eaa:	19bb      	adds	r3, r7, r6
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	002c      	movs	r4, r5
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	7818      	ldrb	r0, [r3, #0]
 8000eb4:	49a2      	ldr	r1, [pc, #648]	; (8001140 <higher_menu_display+0x720>)
 8000eb6:	0013      	movs	r3, r2
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	189b      	adds	r3, r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	189b      	adds	r3, r3, r2
 8000ec0:	181b      	adds	r3, r3, r0
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	585b      	ldr	r3, [r3, r1]
 8000ec8:	8818      	ldrh	r0, [r3, #0]
 8000eca:	19bb      	adds	r3, r7, r6
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	2278      	movs	r2, #120	; 0x78
 8000ed2:	4353      	muls	r3, r2
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	19bb      	adds	r3, r7, r6
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	0026      	movs	r6, r4
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	781d      	ldrb	r5, [r3, #0]
 8000ee0:	4c97      	ldr	r4, [pc, #604]	; (8001140 <higher_menu_display+0x720>)
 8000ee2:	0013      	movs	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	189b      	adds	r3, r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	189b      	adds	r3, r3, r2
 8000eec:	195b      	adds	r3, r3, r5
 8000eee:	3302      	adds	r3, #2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	591b      	ldr	r3, [r3, r4]
 8000ef4:	1842      	adds	r2, r0, r1
 8000ef6:	b292      	uxth	r2, r2
 8000ef8:	801a      	strh	r2, [r3, #0]
				basket[i].laundry[j]->area.y0 = (9 - j) / 2* 40;
 8000efa:	19bb      	adds	r3, r7, r6
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2209      	movs	r2, #9
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	d500      	bpl.n	8000f06 <higher_menu_display+0x4e6>
 8000f04:	3301      	adds	r3, #1
 8000f06:	105b      	asrs	r3, r3, #1
 8000f08:	b299      	uxth	r1, r3
 8000f0a:	260c      	movs	r6, #12
 8000f0c:	19bb      	adds	r3, r7, r6
 8000f0e:	781a      	ldrb	r2, [r3, #0]
 8000f10:	250b      	movs	r5, #11
 8000f12:	197b      	adds	r3, r7, r5
 8000f14:	781c      	ldrb	r4, [r3, #0]
 8000f16:	488a      	ldr	r0, [pc, #552]	; (8001140 <higher_menu_display+0x720>)
 8000f18:	0013      	movs	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	189b      	adds	r3, r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	189b      	adds	r3, r3, r2
 8000f22:	191b      	adds	r3, r3, r4
 8000f24:	3302      	adds	r3, #2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	581b      	ldr	r3, [r3, r0]
 8000f2a:	2228      	movs	r2, #40	; 0x28
 8000f2c:	434a      	muls	r2, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	805a      	strh	r2, [r3, #2]
				basket[i].laundry[j]->area.x1 = basket[i].laundry[j]->area.x0 + 60;
 8000f32:	19bb      	adds	r3, r7, r6
 8000f34:	781a      	ldrb	r2, [r3, #0]
 8000f36:	197b      	adds	r3, r7, r5
 8000f38:	7818      	ldrb	r0, [r3, #0]
 8000f3a:	4981      	ldr	r1, [pc, #516]	; (8001140 <higher_menu_display+0x720>)
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	189b      	adds	r3, r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	189b      	adds	r3, r3, r2
 8000f46:	181b      	adds	r3, r3, r0
 8000f48:	3302      	adds	r3, #2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	585b      	ldr	r3, [r3, r1]
 8000f4e:	8819      	ldrh	r1, [r3, #0]
 8000f50:	19bb      	adds	r3, r7, r6
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	197b      	adds	r3, r7, r5
 8000f56:	781c      	ldrb	r4, [r3, #0]
 8000f58:	4879      	ldr	r0, [pc, #484]	; (8001140 <higher_menu_display+0x720>)
 8000f5a:	0013      	movs	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	189b      	adds	r3, r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	189b      	adds	r3, r3, r2
 8000f64:	191b      	adds	r3, r3, r4
 8000f66:	3302      	adds	r3, #2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	581b      	ldr	r3, [r3, r0]
 8000f6c:	000a      	movs	r2, r1
 8000f6e:	323c      	adds	r2, #60	; 0x3c
 8000f70:	b292      	uxth	r2, r2
 8000f72:	809a      	strh	r2, [r3, #4]
				basket[i].laundry[j]->area.y1 = basket[i].laundry[j]->area.y0 + 40;
 8000f74:	19bb      	adds	r3, r7, r6
 8000f76:	781a      	ldrb	r2, [r3, #0]
 8000f78:	197b      	adds	r3, r7, r5
 8000f7a:	7818      	ldrb	r0, [r3, #0]
 8000f7c:	4970      	ldr	r1, [pc, #448]	; (8001140 <higher_menu_display+0x720>)
 8000f7e:	0013      	movs	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	189b      	adds	r3, r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	189b      	adds	r3, r3, r2
 8000f88:	181b      	adds	r3, r3, r0
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	585b      	ldr	r3, [r3, r1]
 8000f90:	8859      	ldrh	r1, [r3, #2]
 8000f92:	19bb      	adds	r3, r7, r6
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	197b      	adds	r3, r7, r5
 8000f98:	781c      	ldrb	r4, [r3, #0]
 8000f9a:	4869      	ldr	r0, [pc, #420]	; (8001140 <higher_menu_display+0x720>)
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	189b      	adds	r3, r3, r2
 8000fa6:	191b      	adds	r3, r3, r4
 8000fa8:	3302      	adds	r3, #2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	581b      	ldr	r3, [r3, r0]
 8000fae:	000a      	movs	r2, r1
 8000fb0:	3228      	adds	r2, #40	; 0x28
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	80da      	strh	r2, [r3, #6]
			for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 8000fb6:	197b      	adds	r3, r7, r5
 8000fb8:	781a      	ldrb	r2, [r3, #0]
 8000fba:	197b      	adds	r3, r7, r5
 8000fbc:	3201      	adds	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	240c      	movs	r4, #12
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4a5e      	ldr	r2, [pc, #376]	; (8001140 <higher_menu_display+0x720>)
 8000fc8:	2130      	movs	r1, #48	; 0x30
 8000fca:	2034      	movs	r0, #52	; 0x34
 8000fcc:	4343      	muls	r3, r0
 8000fce:	18d3      	adds	r3, r2, r3
 8000fd0:	185b      	adds	r3, r3, r1
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	220b      	movs	r2, #11
 8000fd6:	18ba      	adds	r2, r7, r2
 8000fd8:	7812      	ldrb	r2, [r2, #0]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d200      	bcs.n	8000fe0 <higher_menu_display+0x5c0>
 8000fde:	e74a      	b.n	8000e76 <higher_menu_display+0x456>
		for(uint8_t i = 0 ; i < 3 ; i++){
 8000fe0:	193b      	adds	r3, r7, r4
 8000fe2:	781a      	ldrb	r2, [r3, #0]
 8000fe4:	193b      	adds	r3, r7, r4
 8000fe6:	3201      	adds	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	230c      	movs	r3, #12
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d800      	bhi.n	8000ff6 <higher_menu_display+0x5d6>
 8000ff4:	e73a      	b.n	8000e6c <higher_menu_display+0x44c>
		for(uint8_t i = 0 ; i < 10 ; i++) laundry_draw(&laundry[i]);
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	e010      	b.n	8001022 <higher_menu_display+0x602>
 8001000:	240a      	movs	r4, #10
 8001002:	193b      	adds	r3, r7, r4
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	0013      	movs	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	189b      	adds	r3, r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4a50      	ldr	r2, [pc, #320]	; (8001150 <higher_menu_display+0x730>)
 8001010:	189b      	adds	r3, r3, r2
 8001012:	0018      	movs	r0, r3
 8001014:	f7ff fc16 	bl	8000844 <laundry_draw>
 8001018:	193b      	adds	r3, r7, r4
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	193b      	adds	r3, r7, r4
 800101e:	3201      	adds	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	230a      	movs	r3, #10
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b09      	cmp	r3, #9
 800102a:	d9e9      	bls.n	8001000 <higher_menu_display+0x5e0>
		for(uint8_t i = 0 ; i < 10 ; i++){
 800102c:	2309      	movs	r3, #9
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	e047      	b.n	80010c6 <higher_menu_display+0x6a6>
			if(laundry[i].selected == 1){
 8001036:	2009      	movs	r0, #9
 8001038:	183b      	adds	r3, r7, r0
 800103a:	781a      	ldrb	r2, [r3, #0]
 800103c:	4944      	ldr	r1, [pc, #272]	; (8001150 <higher_menu_display+0x730>)
 800103e:	0013      	movs	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	189b      	adds	r3, r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	18cb      	adds	r3, r1, r3
 8001048:	330a      	adds	r3, #10
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d134      	bne.n	80010ba <higher_menu_display+0x69a>
				sprintf(bf, "draw %d,%d,%d,%d,GRAY", laundry[i].area.x0, laundry[i].area.y0, laundry[i].area.x1, laundry[i].area.y1);
 8001050:	183b      	adds	r3, r7, r0
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	493e      	ldr	r1, [pc, #248]	; (8001150 <higher_menu_display+0x730>)
 8001056:	0013      	movs	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	189b      	adds	r3, r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	5a5b      	ldrh	r3, [r3, r1]
 8001060:	001d      	movs	r5, r3
 8001062:	183b      	adds	r3, r7, r0
 8001064:	781a      	ldrb	r2, [r3, #0]
 8001066:	493a      	ldr	r1, [pc, #232]	; (8001150 <higher_menu_display+0x730>)
 8001068:	0013      	movs	r3, r2
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	189b      	adds	r3, r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	18cb      	adds	r3, r1, r3
 8001072:	3302      	adds	r3, #2
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	001e      	movs	r6, r3
 8001078:	183b      	adds	r3, r7, r0
 800107a:	781a      	ldrb	r2, [r3, #0]
 800107c:	4934      	ldr	r1, [pc, #208]	; (8001150 <higher_menu_display+0x730>)
 800107e:	0013      	movs	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	189b      	adds	r3, r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	18cb      	adds	r3, r1, r3
 8001088:	3304      	adds	r3, #4
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	001c      	movs	r4, r3
 800108e:	183b      	adds	r3, r7, r0
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	492f      	ldr	r1, [pc, #188]	; (8001150 <higher_menu_display+0x730>)
 8001094:	0013      	movs	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	189b      	adds	r3, r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	18cb      	adds	r3, r1, r3
 800109e:	3306      	adds	r3, #6
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	492c      	ldr	r1, [pc, #176]	; (8001154 <higher_menu_display+0x734>)
 80010a4:	4828      	ldr	r0, [pc, #160]	; (8001148 <higher_menu_display+0x728>)
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	9400      	str	r4, [sp, #0]
 80010aa:	0033      	movs	r3, r6
 80010ac:	002a      	movs	r2, r5
 80010ae:	f004 fecb 	bl	8005e48 <siprintf>
				nextion_inst_set(bf);
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <higher_menu_display+0x728>)
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff fabb 	bl	8000630 <nextion_inst_set>
		for(uint8_t i = 0 ; i < 10 ; i++){
 80010ba:	2109      	movs	r1, #9
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	3201      	adds	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	2309      	movs	r3, #9
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b09      	cmp	r3, #9
 80010ce:	d9b2      	bls.n	8001036 <higher_menu_display+0x616>
}
 80010d0:	e187      	b.n	80013e2 <higher_menu_display+0x9c2>
		sprintf(bf, "xstr 0,1,158,30,0,BLACK,WHITE,1,1,1,\"Basket %d\"", wash_basket + 1);
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <higher_menu_display+0x738>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	4920      	ldr	r1, [pc, #128]	; (800115c <higher_menu_display+0x73c>)
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <higher_menu_display+0x728>)
 80010dc:	0018      	movs	r0, r3
 80010de:	f004 feb3 	bl	8005e48 <siprintf>
		nextion_inst_set(bf);
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <higher_menu_display+0x728>)
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff faa3 	bl	8000630 <nextion_inst_set>
		sprintf(bf, "xstr 270,1,200,30,0,BLACK,WHITE,2,1,1,\"Time: %02ds\"", basket[wash_basket].cnt);
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <higher_menu_display+0x738>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	0018      	movs	r0, r3
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <higher_menu_display+0x720>)
 80010f2:	2132      	movs	r1, #50	; 0x32
 80010f4:	2334      	movs	r3, #52	; 0x34
 80010f6:	4343      	muls	r3, r0
 80010f8:	18d3      	adds	r3, r2, r3
 80010fa:	185b      	adds	r3, r3, r1
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	001a      	movs	r2, r3
 8001100:	4917      	ldr	r1, [pc, #92]	; (8001160 <higher_menu_display+0x740>)
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <higher_menu_display+0x728>)
 8001104:	0018      	movs	r0, r3
 8001106:	f004 fe9f 	bl	8005e48 <siprintf>
		nextion_inst_set(bf);
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <higher_menu_display+0x728>)
 800110c:	0018      	movs	r0, r3
 800110e:	f7ff fa8f 	bl	8000630 <nextion_inst_set>
		nextion_inst_set("cirs 320,110,60,BLUE");
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <higher_menu_display+0x744>)
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff fa8b 	bl	8000630 <nextion_inst_set>
		nextion_inst_set("cir 320,110,70,BLACK");
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <higher_menu_display+0x748>)
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff fa87 	bl	8000630 <nextion_inst_set>
		nextion_inst_set("draw 0,0,160,200,BLACK");
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <higher_menu_display+0x74c>)
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff fa83 	bl	8000630 <nextion_inst_set>
		nextion_inst_set("draw 160,0,480,200,BLACK");
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <higher_menu_display+0x750>)
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff fa7f 	bl	8000630 <nextion_inst_set>
		for(uint8_t i = 0  ; i < basket[wash_basket].laundry_num ; i++){
 8001132:	2308      	movs	r3, #8
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e142      	b.n	80013c2 <higher_menu_display+0x9a2>
 800113c:	08006720 	.word	0x08006720
 8001140:	20000090 	.word	0x20000090
 8001144:	0800687c 	.word	0x0800687c
 8001148:	20000300 	.word	0x20000300
 800114c:	080068a8 	.word	0x080068a8
 8001150:	20000018 	.word	0x20000018
 8001154:	080068c8 	.word	0x080068c8
 8001158:	20000365 	.word	0x20000365
 800115c:	080068e0 	.word	0x080068e0
 8001160:	08006910 	.word	0x08006910
 8001164:	08006944 	.word	0x08006944
 8001168:	0800695c 	.word	0x0800695c
 800116c:	08006974 	.word	0x08006974
 8001170:	0800698c 	.word	0x0800698c
			basket[wash_basket].laundry[i]->area.x0 = i % 2 * 80;
 8001174:	2508      	movs	r5, #8
 8001176:	197b      	adds	r3, r7, r5
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	2201      	movs	r2, #1
 800117e:	4013      	ands	r3, r2
 8001180:	b299      	uxth	r1, r3
 8001182:	4b9a      	ldr	r3, [pc, #616]	; (80013ec <higher_menu_display+0x9cc>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	001a      	movs	r2, r3
 8001188:	197b      	adds	r3, r7, r5
 800118a:	781c      	ldrb	r4, [r3, #0]
 800118c:	4898      	ldr	r0, [pc, #608]	; (80013f0 <higher_menu_display+0x9d0>)
 800118e:	0013      	movs	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	189b      	adds	r3, r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	189b      	adds	r3, r3, r2
 8001198:	191b      	adds	r3, r3, r4
 800119a:	3302      	adds	r3, #2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	581b      	ldr	r3, [r3, r0]
 80011a0:	2250      	movs	r2, #80	; 0x50
 80011a2:	434a      	muls	r2, r1
 80011a4:	b292      	uxth	r2, r2
 80011a6:	801a      	strh	r2, [r3, #0]
			basket[wash_basket].laundry[i]->area.y0 = (9 - i) / 2 * 40;
 80011a8:	197b      	adds	r3, r7, r5
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2209      	movs	r2, #9
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	d500      	bpl.n	80011b4 <higher_menu_display+0x794>
 80011b2:	3301      	adds	r3, #1
 80011b4:	105b      	asrs	r3, r3, #1
 80011b6:	b299      	uxth	r1, r3
 80011b8:	4b8c      	ldr	r3, [pc, #560]	; (80013ec <higher_menu_display+0x9cc>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	001a      	movs	r2, r3
 80011be:	2508      	movs	r5, #8
 80011c0:	197b      	adds	r3, r7, r5
 80011c2:	781c      	ldrb	r4, [r3, #0]
 80011c4:	488a      	ldr	r0, [pc, #552]	; (80013f0 <higher_menu_display+0x9d0>)
 80011c6:	0013      	movs	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	189b      	adds	r3, r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	189b      	adds	r3, r3, r2
 80011d0:	191b      	adds	r3, r3, r4
 80011d2:	3302      	adds	r3, #2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	581b      	ldr	r3, [r3, r0]
 80011d8:	2228      	movs	r2, #40	; 0x28
 80011da:	434a      	muls	r2, r1
 80011dc:	b292      	uxth	r2, r2
 80011de:	805a      	strh	r2, [r3, #2]
			basket[wash_basket].laundry[i]->area.x1 = basket[wash_basket].laundry[i]->area.x0 + 80;
 80011e0:	4b82      	ldr	r3, [pc, #520]	; (80013ec <higher_menu_display+0x9cc>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	001a      	movs	r2, r3
 80011e6:	197b      	adds	r3, r7, r5
 80011e8:	7818      	ldrb	r0, [r3, #0]
 80011ea:	4981      	ldr	r1, [pc, #516]	; (80013f0 <higher_menu_display+0x9d0>)
 80011ec:	0013      	movs	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	189b      	adds	r3, r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	189b      	adds	r3, r3, r2
 80011f6:	181b      	adds	r3, r3, r0
 80011f8:	3302      	adds	r3, #2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	585b      	ldr	r3, [r3, r1]
 80011fe:	8819      	ldrh	r1, [r3, #0]
 8001200:	4b7a      	ldr	r3, [pc, #488]	; (80013ec <higher_menu_display+0x9cc>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	001a      	movs	r2, r3
 8001206:	197b      	adds	r3, r7, r5
 8001208:	781c      	ldrb	r4, [r3, #0]
 800120a:	4879      	ldr	r0, [pc, #484]	; (80013f0 <higher_menu_display+0x9d0>)
 800120c:	0013      	movs	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	189b      	adds	r3, r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	189b      	adds	r3, r3, r2
 8001216:	191b      	adds	r3, r3, r4
 8001218:	3302      	adds	r3, #2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	581b      	ldr	r3, [r3, r0]
 800121e:	000a      	movs	r2, r1
 8001220:	3250      	adds	r2, #80	; 0x50
 8001222:	b292      	uxth	r2, r2
 8001224:	809a      	strh	r2, [r3, #4]
			basket[wash_basket].laundry[i]->area.y1 = basket[wash_basket].laundry[i]->area.y0 + 40;
 8001226:	4b71      	ldr	r3, [pc, #452]	; (80013ec <higher_menu_display+0x9cc>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	001a      	movs	r2, r3
 800122c:	197b      	adds	r3, r7, r5
 800122e:	7818      	ldrb	r0, [r3, #0]
 8001230:	496f      	ldr	r1, [pc, #444]	; (80013f0 <higher_menu_display+0x9d0>)
 8001232:	0013      	movs	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	189b      	adds	r3, r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	189b      	adds	r3, r3, r2
 800123c:	181b      	adds	r3, r3, r0
 800123e:	3302      	adds	r3, #2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	585b      	ldr	r3, [r3, r1]
 8001244:	8859      	ldrh	r1, [r3, #2]
 8001246:	4b69      	ldr	r3, [pc, #420]	; (80013ec <higher_menu_display+0x9cc>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	001a      	movs	r2, r3
 800124c:	197b      	adds	r3, r7, r5
 800124e:	781c      	ldrb	r4, [r3, #0]
 8001250:	4867      	ldr	r0, [pc, #412]	; (80013f0 <higher_menu_display+0x9d0>)
 8001252:	0013      	movs	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	189b      	adds	r3, r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	189b      	adds	r3, r3, r2
 800125c:	191b      	adds	r3, r3, r4
 800125e:	3302      	adds	r3, #2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	581b      	ldr	r3, [r3, r0]
 8001264:	000a      	movs	r2, r1
 8001266:	3228      	adds	r2, #40	; 0x28
 8001268:	b292      	uxth	r2, r2
 800126a:	80da      	strh	r2, [r3, #6]
			sprintf(bf, "xstr %d,%d,80,40,0,WHITE,%s,1,1,1,\"%dkg\"", basket[wash_basket].laundry[i]->area.x0, basket[wash_basket].laundry[i]->area.y0, color_item[basket[wash_basket].laundry[i]->color], basket[wash_basket].laundry[i]->weight);
 800126c:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <higher_menu_display+0x9cc>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	001a      	movs	r2, r3
 8001272:	002c      	movs	r4, r5
 8001274:	193b      	adds	r3, r7, r4
 8001276:	7818      	ldrb	r0, [r3, #0]
 8001278:	495d      	ldr	r1, [pc, #372]	; (80013f0 <higher_menu_display+0x9d0>)
 800127a:	0013      	movs	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	189b      	adds	r3, r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	189b      	adds	r3, r3, r2
 8001284:	181b      	adds	r3, r3, r0
 8001286:	3302      	adds	r3, #2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	585b      	ldr	r3, [r3, r1]
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	001d      	movs	r5, r3
 8001290:	4b56      	ldr	r3, [pc, #344]	; (80013ec <higher_menu_display+0x9cc>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	001a      	movs	r2, r3
 8001296:	193b      	adds	r3, r7, r4
 8001298:	7818      	ldrb	r0, [r3, #0]
 800129a:	4955      	ldr	r1, [pc, #340]	; (80013f0 <higher_menu_display+0x9d0>)
 800129c:	0013      	movs	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	189b      	adds	r3, r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	189b      	adds	r3, r3, r2
 80012a6:	181b      	adds	r3, r3, r0
 80012a8:	3302      	adds	r3, #2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	585b      	ldr	r3, [r3, r1]
 80012ae:	885b      	ldrh	r3, [r3, #2]
 80012b0:	001e      	movs	r6, r3
 80012b2:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <higher_menu_display+0x9cc>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	001a      	movs	r2, r3
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	7818      	ldrb	r0, [r3, #0]
 80012bc:	494c      	ldr	r1, [pc, #304]	; (80013f0 <higher_menu_display+0x9d0>)
 80012be:	0013      	movs	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	189b      	adds	r3, r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	189b      	adds	r3, r3, r2
 80012c8:	181b      	adds	r3, r3, r0
 80012ca:	3302      	adds	r3, #2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	585b      	ldr	r3, [r3, r1]
 80012d0:	7a1b      	ldrb	r3, [r3, #8]
 80012d2:	001a      	movs	r2, r3
 80012d4:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <higher_menu_display+0x9d4>)
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	58d1      	ldr	r1, [r2, r3]
 80012da:	4b44      	ldr	r3, [pc, #272]	; (80013ec <higher_menu_display+0x9cc>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	001a      	movs	r2, r3
 80012e0:	193b      	adds	r3, r7, r4
 80012e2:	781c      	ldrb	r4, [r3, #0]
 80012e4:	4842      	ldr	r0, [pc, #264]	; (80013f0 <higher_menu_display+0x9d0>)
 80012e6:	0013      	movs	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	189b      	adds	r3, r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	189b      	adds	r3, r3, r2
 80012f0:	191b      	adds	r3, r3, r4
 80012f2:	3302      	adds	r3, #2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	581b      	ldr	r3, [r3, r0]
 80012f8:	7a5b      	ldrb	r3, [r3, #9]
 80012fa:	4c3f      	ldr	r4, [pc, #252]	; (80013f8 <higher_menu_display+0x9d8>)
 80012fc:	483f      	ldr	r0, [pc, #252]	; (80013fc <higher_menu_display+0x9dc>)
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	9100      	str	r1, [sp, #0]
 8001302:	0033      	movs	r3, r6
 8001304:	002a      	movs	r2, r5
 8001306:	0021      	movs	r1, r4
 8001308:	f004 fd9e 	bl	8005e48 <siprintf>
			nextion_inst_set(bf);
 800130c:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <higher_menu_display+0x9dc>)
 800130e:	0018      	movs	r0, r3
 8001310:	f7ff f98e 	bl	8000630 <nextion_inst_set>
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", basket[wash_basket].laundry[i]->area.x0, basket[wash_basket].laundry[i]->area.y0, basket[wash_basket].laundry[i]->area.x1, basket[wash_basket].laundry[i]->area.y1);
 8001314:	4b35      	ldr	r3, [pc, #212]	; (80013ec <higher_menu_display+0x9cc>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	001a      	movs	r2, r3
 800131a:	2408      	movs	r4, #8
 800131c:	193b      	adds	r3, r7, r4
 800131e:	7818      	ldrb	r0, [r3, #0]
 8001320:	4933      	ldr	r1, [pc, #204]	; (80013f0 <higher_menu_display+0x9d0>)
 8001322:	0013      	movs	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	189b      	adds	r3, r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	189b      	adds	r3, r3, r2
 800132c:	181b      	adds	r3, r3, r0
 800132e:	3302      	adds	r3, #2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	585b      	ldr	r3, [r3, r1]
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	001d      	movs	r5, r3
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <higher_menu_display+0x9cc>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	001a      	movs	r2, r3
 800133e:	193b      	adds	r3, r7, r4
 8001340:	7818      	ldrb	r0, [r3, #0]
 8001342:	492b      	ldr	r1, [pc, #172]	; (80013f0 <higher_menu_display+0x9d0>)
 8001344:	0013      	movs	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	189b      	adds	r3, r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	189b      	adds	r3, r3, r2
 800134e:	181b      	adds	r3, r3, r0
 8001350:	3302      	adds	r3, #2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	585b      	ldr	r3, [r3, r1]
 8001356:	885b      	ldrh	r3, [r3, #2]
 8001358:	001e      	movs	r6, r3
 800135a:	4b24      	ldr	r3, [pc, #144]	; (80013ec <higher_menu_display+0x9cc>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	001a      	movs	r2, r3
 8001360:	193b      	adds	r3, r7, r4
 8001362:	7818      	ldrb	r0, [r3, #0]
 8001364:	4922      	ldr	r1, [pc, #136]	; (80013f0 <higher_menu_display+0x9d0>)
 8001366:	0013      	movs	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	189b      	adds	r3, r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	189b      	adds	r3, r3, r2
 8001370:	181b      	adds	r3, r3, r0
 8001372:	3302      	adds	r3, #2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	585b      	ldr	r3, [r3, r1]
 8001378:	889b      	ldrh	r3, [r3, #4]
 800137a:	001c      	movs	r4, r3
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <higher_menu_display+0x9cc>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	001a      	movs	r2, r3
 8001382:	2308      	movs	r3, #8
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	7818      	ldrb	r0, [r3, #0]
 8001388:	4919      	ldr	r1, [pc, #100]	; (80013f0 <higher_menu_display+0x9d0>)
 800138a:	0013      	movs	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	189b      	adds	r3, r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	189b      	adds	r3, r3, r2
 8001394:	181b      	adds	r3, r3, r0
 8001396:	3302      	adds	r3, #2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	585b      	ldr	r3, [r3, r1]
 800139c:	88db      	ldrh	r3, [r3, #6]
 800139e:	4918      	ldr	r1, [pc, #96]	; (8001400 <higher_menu_display+0x9e0>)
 80013a0:	4816      	ldr	r0, [pc, #88]	; (80013fc <higher_menu_display+0x9dc>)
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	9400      	str	r4, [sp, #0]
 80013a6:	0033      	movs	r3, r6
 80013a8:	002a      	movs	r2, r5
 80013aa:	f004 fd4d 	bl	8005e48 <siprintf>
			nextion_inst_set(bf);
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <higher_menu_display+0x9dc>)
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff f93d 	bl	8000630 <nextion_inst_set>
		for(uint8_t i = 0  ; i < basket[wash_basket].laundry_num ; i++){
 80013b6:	2408      	movs	r4, #8
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	781a      	ldrb	r2, [r3, #0]
 80013bc:	193b      	adds	r3, r7, r4
 80013be:	3201      	adds	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <higher_menu_display+0x9cc>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	0018      	movs	r0, r3
 80013c8:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <higher_menu_display+0x9d0>)
 80013ca:	2130      	movs	r1, #48	; 0x30
 80013cc:	2334      	movs	r3, #52	; 0x34
 80013ce:	4343      	muls	r3, r0
 80013d0:	18d3      	adds	r3, r2, r3
 80013d2:	185b      	adds	r3, r3, r1
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2208      	movs	r2, #8
 80013d8:	18ba      	adds	r2, r7, r2
 80013da:	7812      	ldrb	r2, [r2, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d200      	bcs.n	80013e2 <higher_menu_display+0x9c2>
 80013e0:	e6c8      	b.n	8001174 <higher_menu_display+0x754>
}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b005      	add	sp, #20
 80013e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	20000365 	.word	0x20000365
 80013f0:	20000090 	.word	0x20000090
 80013f4:	20000000 	.word	0x20000000
 80013f8:	08006838 	.word	0x08006838
 80013fc:	20000300 	.word	0x20000300
 8001400:	080067ec 	.word	0x080067ec

08001404 <lower_menu_display>:

void lower_menu_display(LOWER_MENU_Typedef* data){
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	b087      	sub	sp, #28
 8001408:	af02      	add	r7, sp, #8
 800140a:	6078      	str	r0, [r7, #4]
	if(*data == weight_display){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d139      	bne.n	8001488 <lower_menu_display+0x84>
		for(uint8_t i = 0 ; i < 3 ; i++){
 8001414:	230f      	movs	r3, #15
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	e02e      	b.n	800147c <lower_menu_display+0x78>
			sprintf(bf, "xstr %d,201,160,30,0,%s,WHITE,1,1,1,\"%d/15kg\"", basket[i].area.x0, basket[i].weight > 15 ? "RED" : "BLACK", basket[i].weight);
 800141e:	200f      	movs	r0, #15
 8001420:	183b      	adds	r3, r7, r0
 8001422:	781a      	ldrb	r2, [r3, #0]
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <lower_menu_display+0xcc>)
 8001426:	2134      	movs	r1, #52	; 0x34
 8001428:	434a      	muls	r2, r1
 800142a:	5ad3      	ldrh	r3, [r2, r3]
 800142c:	001d      	movs	r5, r3
 800142e:	183b      	adds	r3, r7, r0
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <lower_menu_display+0xcc>)
 8001434:	2131      	movs	r1, #49	; 0x31
 8001436:	2034      	movs	r0, #52	; 0x34
 8001438:	4343      	muls	r3, r0
 800143a:	18d3      	adds	r3, r2, r3
 800143c:	185b      	adds	r3, r3, r1
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d901      	bls.n	8001448 <lower_menu_display+0x44>
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <lower_menu_display+0xd0>)
 8001446:	e000      	b.n	800144a <lower_menu_display+0x46>
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <lower_menu_display+0xd4>)
 800144a:	260f      	movs	r6, #15
 800144c:	19ba      	adds	r2, r7, r6
 800144e:	7812      	ldrb	r2, [r2, #0]
 8001450:	491f      	ldr	r1, [pc, #124]	; (80014d0 <lower_menu_display+0xcc>)
 8001452:	2031      	movs	r0, #49	; 0x31
 8001454:	2434      	movs	r4, #52	; 0x34
 8001456:	4362      	muls	r2, r4
 8001458:	188a      	adds	r2, r1, r2
 800145a:	1812      	adds	r2, r2, r0
 800145c:	7812      	ldrb	r2, [r2, #0]
 800145e:	491f      	ldr	r1, [pc, #124]	; (80014dc <lower_menu_display+0xd8>)
 8001460:	481f      	ldr	r0, [pc, #124]	; (80014e0 <lower_menu_display+0xdc>)
 8001462:	9200      	str	r2, [sp, #0]
 8001464:	002a      	movs	r2, r5
 8001466:	f004 fcef 	bl	8005e48 <siprintf>
			nextion_inst_set(bf);
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <lower_menu_display+0xdc>)
 800146c:	0018      	movs	r0, r3
 800146e:	f7ff f8df 	bl	8000630 <nextion_inst_set>
		for(uint8_t i = 0 ; i < 3 ; i++){
 8001472:	19bb      	adds	r3, r7, r6
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	19bb      	adds	r3, r7, r6
 8001478:	3201      	adds	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
 800147c:	230f      	movs	r3, #15
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d9cb      	bls.n	800141e <lower_menu_display+0x1a>
	else if(*data == button_display){
		for(uint8_t i = 0 ; i < 3 ; i++){
			button_draw(&button_data[i]);
		}
	}
}
 8001486:	e01e      	b.n	80014c6 <lower_menu_display+0xc2>
	else if(*data == button_display){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d11a      	bne.n	80014c6 <lower_menu_display+0xc2>
		for(uint8_t i = 0 ; i < 3 ; i++){
 8001490:	230e      	movs	r3, #14
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	e010      	b.n	80014bc <lower_menu_display+0xb8>
			button_draw(&button_data[i]);
 800149a:	240e      	movs	r4, #14
 800149c:	193b      	adds	r3, r7, r4
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	0013      	movs	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	189b      	adds	r3, r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <lower_menu_display+0xe0>)
 80014aa:	189b      	adds	r3, r3, r2
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff fa17 	bl	80008e0 <button_draw>
		for(uint8_t i = 0 ; i < 3 ; i++){
 80014b2:	193b      	adds	r3, r7, r4
 80014b4:	781a      	ldrb	r2, [r3, #0]
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	3201      	adds	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	230e      	movs	r3, #14
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d9e9      	bls.n	800149a <lower_menu_display+0x96>
}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b005      	add	sp, #20
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	20000090 	.word	0x20000090
 80014d4:	08006740 	.word	0x08006740
 80014d8:	08006720 	.word	0x08006720
 80014dc:	080069a8 	.word	0x080069a8
 80014e0:	20000300 	.word	0x20000300
 80014e4:	2000012c 	.word	0x2000012c

080014e8 <task_fuc>:

void task_fuc(void){
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
	HIGHER_MENU_Typedef higher_menu = basic_display;
 80014ee:	2310      	movs	r3, #16
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
	LOWER_MENU_Typedef lower_menu   = weight_display;
 80014f6:	230f      	movs	r3, #15
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]

	uint8_t befo_touch = 0;
 80014fe:	231f      	movs	r3, #31
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]

	uint8_t  yellow_cnt = 0;
 8001506:	231e      	movs	r3, #30
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
	uint32_t yellow_tick = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]

	nextion_inst_set("cls WHITE");
 8001512:	4bd4      	ldr	r3, [pc, #848]	; (8001864 <task_fuc+0x37c>)
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff f88b 	bl	8000630 <nextion_inst_set>
	nextion_inst_set("cls WHITE");
 800151a:	4bd2      	ldr	r3, [pc, #840]	; (8001864 <task_fuc+0x37c>)
 800151c:	0018      	movs	r0, r3
 800151e:	f7ff f887 	bl	8000630 <nextion_inst_set>
	nextion_inst_set("cls WHITE");
 8001522:	4bd0      	ldr	r3, [pc, #832]	; (8001864 <task_fuc+0x37c>)
 8001524:	0018      	movs	r0, r3
 8001526:	f7ff f883 	bl	8000630 <nextion_inst_set>

	while(1){
		get_touch(&curXY);
 800152a:	4bcf      	ldr	r3, [pc, #828]	; (8001868 <task_fuc+0x380>)
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff f8a3 	bl	8000678 <get_touch>
		get_slide(&curXY, &slide);
 8001532:	4ace      	ldr	r2, [pc, #824]	; (800186c <task_fuc+0x384>)
 8001534:	4bcc      	ldr	r3, [pc, #816]	; (8001868 <task_fuc+0x380>)
 8001536:	0011      	movs	r1, r2
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff f909 	bl	8000750 <get_slide>

		if(slide != none){
 800153e:	4bcb      	ldr	r3, [pc, #812]	; (800186c <task_fuc+0x384>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d013      	beq.n	800156e <task_fuc+0x86>
			screen_update = 0;
 8001546:	4bca      	ldr	r3, [pc, #808]	; (8001870 <task_fuc+0x388>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]

			if(slide == up_slide)        lower_menu = button_display;
 800154c:	4bc7      	ldr	r3, [pc, #796]	; (800186c <task_fuc+0x384>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d104      	bne.n	800155e <task_fuc+0x76>
 8001554:	230f      	movs	r3, #15
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	e007      	b.n	800156e <task_fuc+0x86>
			else if(slide == down_slide) lower_menu = weight_display;
 800155e:	4bc3      	ldr	r3, [pc, #780]	; (800186c <task_fuc+0x384>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d103      	bne.n	800156e <task_fuc+0x86>
 8001566:	230f      	movs	r3, #15
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
		}

		if(screen_update == 0){
 800156e:	4bc0      	ldr	r3, [pc, #768]	; (8001870 <task_fuc+0x388>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d110      	bne.n	8001598 <task_fuc+0xb0>
			screen_update = 1;
 8001576:	4bbe      	ldr	r3, [pc, #760]	; (8001870 <task_fuc+0x388>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]

			nextion_inst_set("cls WHITE");
 800157c:	4bb9      	ldr	r3, [pc, #740]	; (8001864 <task_fuc+0x37c>)
 800157e:	0018      	movs	r0, r3
 8001580:	f7ff f856 	bl	8000630 <nextion_inst_set>

			higher_menu_display(&higher_menu);
 8001584:	2310      	movs	r3, #16
 8001586:	18fb      	adds	r3, r7, r3
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff fa49 	bl	8000a20 <higher_menu_display>
			lower_menu_display(&lower_menu);
 800158e:	230f      	movs	r3, #15
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	0018      	movs	r0, r3
 8001594:	f7ff ff36 	bl	8001404 <lower_menu_display>
		}

		if(befo_touch != curXY.touched && curXY.touched == 1){
 8001598:	4bb3      	ldr	r3, [pc, #716]	; (8001868 <task_fuc+0x380>)
 800159a:	791b      	ldrb	r3, [r3, #4]
 800159c:	221f      	movs	r2, #31
 800159e:	18ba      	adds	r2, r7, r2
 80015a0:	7812      	ldrb	r2, [r2, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d100      	bne.n	80015a8 <task_fuc+0xc0>
 80015a6:	e20c      	b.n	80019c2 <task_fuc+0x4da>
 80015a8:	4baf      	ldr	r3, [pc, #700]	; (8001868 <task_fuc+0x380>)
 80015aa:	791b      	ldrb	r3, [r3, #4]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d000      	beq.n	80015b2 <task_fuc+0xca>
 80015b0:	e207      	b.n	80019c2 <task_fuc+0x4da>
			if(higher_menu == add_display){
 80015b2:	2310      	movs	r3, #16
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d000      	beq.n	80015be <task_fuc+0xd6>
 80015bc:	e1b7      	b.n	800192e <task_fuc+0x446>
				if(curXY.x > 360){
 80015be:	4baa      	ldr	r3, [pc, #680]	; (8001868 <task_fuc+0x380>)
 80015c0:	881a      	ldrh	r2, [r3, #0]
 80015c2:	23b4      	movs	r3, #180	; 0xb4
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d93a      	bls.n	8001640 <task_fuc+0x158>
					for(uint8_t i = 0 ; i < 10 ; i++){
 80015ca:	2317      	movs	r3, #23
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e030      	b.n	8001636 <task_fuc+0x14e>
						if(area_check(&curXY, &laundry[i].area)){
 80015d4:	2417      	movs	r4, #23
 80015d6:	193b      	adds	r3, r7, r4
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	0013      	movs	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	189b      	adds	r3, r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4aa4      	ldr	r2, [pc, #656]	; (8001874 <task_fuc+0x38c>)
 80015e4:	189a      	adds	r2, r3, r2
 80015e6:	4ba0      	ldr	r3, [pc, #640]	; (8001868 <task_fuc+0x380>)
 80015e8:	0011      	movs	r1, r2
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7ff f900 	bl	80007f0 <area_check>
 80015f0:	1e03      	subs	r3, r0, #0
 80015f2:	d01a      	beq.n	800162a <task_fuc+0x142>
							laundry[i].selected = laundry[i].selected == 1 ? 0 : 1;
 80015f4:	0020      	movs	r0, r4
 80015f6:	183b      	adds	r3, r7, r0
 80015f8:	781a      	ldrb	r2, [r3, #0]
 80015fa:	499e      	ldr	r1, [pc, #632]	; (8001874 <task_fuc+0x38c>)
 80015fc:	0013      	movs	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	189b      	adds	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	18cb      	adds	r3, r1, r3
 8001606:	330a      	adds	r3, #10
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	3b01      	subs	r3, #1
 800160c:	1e5a      	subs	r2, r3, #1
 800160e:	4193      	sbcs	r3, r2
 8001610:	b2d9      	uxtb	r1, r3
 8001612:	183b      	adds	r3, r7, r0
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	0008      	movs	r0, r1
 8001618:	4996      	ldr	r1, [pc, #600]	; (8001874 <task_fuc+0x38c>)
 800161a:	0013      	movs	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	189b      	adds	r3, r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	18cb      	adds	r3, r1, r3
 8001624:	330a      	adds	r3, #10
 8001626:	1c02      	adds	r2, r0, #0
 8001628:	701a      	strb	r2, [r3, #0]
					for(uint8_t i = 0 ; i < 10 ; i++){
 800162a:	2117      	movs	r1, #23
 800162c:	187b      	adds	r3, r7, r1
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	187b      	adds	r3, r7, r1
 8001632:	3201      	adds	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	2317      	movs	r3, #23
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b09      	cmp	r3, #9
 800163e:	d9c9      	bls.n	80015d4 <task_fuc+0xec>
						}
					}
				}

				for(uint8_t i = 0 ; i < 3 ; i++){
 8001640:	2316      	movs	r3, #22
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
 8001648:	e16b      	b.n	8001922 <task_fuc+0x43a>
					AREA_Typedef basket_area = { i * 120, 0, i * 120 + 120, 200 };
 800164a:	2116      	movs	r1, #22
 800164c:	187b      	adds	r3, r7, r1
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b29b      	uxth	r3, r3
 8001652:	2278      	movs	r2, #120	; 0x78
 8001654:	4353      	muls	r3, r2
 8001656:	b29a      	uxth	r2, r3
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	801a      	strh	r2, [r3, #0]
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	805a      	strh	r2, [r3, #2]
 8001662:	187b      	adds	r3, r7, r1
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	b29b      	uxth	r3, r3
 800166a:	2278      	movs	r2, #120	; 0x78
 800166c:	4353      	muls	r3, r2
 800166e:	b29a      	uxth	r2, r3
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	809a      	strh	r2, [r3, #4]
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	22c8      	movs	r2, #200	; 0xc8
 8001678:	80da      	strh	r2, [r3, #6]
					if(area_check(&curXY, &basket_area)){
 800167a:	1d3a      	adds	r2, r7, #4
 800167c:	4b7a      	ldr	r3, [pc, #488]	; (8001868 <task_fuc+0x380>)
 800167e:	0011      	movs	r1, r2
 8001680:	0018      	movs	r0, r3
 8001682:	f7ff f8b5 	bl	80007f0 <area_check>
 8001686:	1e03      	subs	r3, r0, #0
 8001688:	d100      	bne.n	800168c <task_fuc+0x1a4>
 800168a:	e144      	b.n	8001916 <task_fuc+0x42e>
						for(uint8_t j = 0 ; j < 10 ; j++){
 800168c:	2315      	movs	r3, #21
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	e0cf      	b.n	8001836 <task_fuc+0x34e>
							if(laundry[j].selected == 1){
 8001696:	2615      	movs	r6, #21
 8001698:	19bb      	adds	r3, r7, r6
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	4975      	ldr	r1, [pc, #468]	; (8001874 <task_fuc+0x38c>)
 800169e:	0013      	movs	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	18cb      	adds	r3, r1, r3
 80016a8:	330a      	adds	r3, #10
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d000      	beq.n	80016b2 <task_fuc+0x1ca>
 80016b0:	e0bb      	b.n	800182a <task_fuc+0x342>
								basket[i].laundry[basket[i].laundry_num] = &laundry[j];
 80016b2:	19bb      	adds	r3, r7, r6
 80016b4:	7819      	ldrb	r1, [r3, #0]
 80016b6:	2416      	movs	r4, #22
 80016b8:	193b      	adds	r3, r7, r4
 80016ba:	781a      	ldrb	r2, [r3, #0]
 80016bc:	193b      	adds	r3, r7, r4
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	486d      	ldr	r0, [pc, #436]	; (8001878 <task_fuc+0x390>)
 80016c2:	2430      	movs	r4, #48	; 0x30
 80016c4:	2534      	movs	r5, #52	; 0x34
 80016c6:	436b      	muls	r3, r5
 80016c8:	18c3      	adds	r3, r0, r3
 80016ca:	191b      	adds	r3, r3, r4
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	001c      	movs	r4, r3
 80016d0:	000b      	movs	r3, r1
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	185b      	adds	r3, r3, r1
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4966      	ldr	r1, [pc, #408]	; (8001874 <task_fuc+0x38c>)
 80016da:	1858      	adds	r0, r3, r1
 80016dc:	4966      	ldr	r1, [pc, #408]	; (8001878 <task_fuc+0x390>)
 80016de:	0013      	movs	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	189b      	adds	r3, r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	189b      	adds	r3, r3, r2
 80016e8:	191b      	adds	r3, r3, r4
 80016ea:	3302      	adds	r3, #2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	5058      	str	r0, [r3, r1]

								laundry[j].area.x0 = basket[i].laundry_num % 2 * 60;
 80016f0:	2416      	movs	r4, #22
 80016f2:	193b      	adds	r3, r7, r4
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	4a60      	ldr	r2, [pc, #384]	; (8001878 <task_fuc+0x390>)
 80016f8:	2130      	movs	r1, #48	; 0x30
 80016fa:	2034      	movs	r0, #52	; 0x34
 80016fc:	4343      	muls	r3, r0
 80016fe:	18d3      	adds	r3, r2, r3
 8001700:	185b      	adds	r3, r3, r1
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b29b      	uxth	r3, r3
 8001706:	2201      	movs	r2, #1
 8001708:	4013      	ands	r3, r2
 800170a:	b29b      	uxth	r3, r3
 800170c:	19ba      	adds	r2, r7, r6
 800170e:	7812      	ldrb	r2, [r2, #0]
 8001710:	213c      	movs	r1, #60	; 0x3c
 8001712:	434b      	muls	r3, r1
 8001714:	b298      	uxth	r0, r3
 8001716:	4957      	ldr	r1, [pc, #348]	; (8001874 <task_fuc+0x38c>)
 8001718:	0013      	movs	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	189b      	adds	r3, r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	1c02      	adds	r2, r0, #0
 8001722:	525a      	strh	r2, [r3, r1]
								laundry[j].area.x0 += i * 120;
 8001724:	19bb      	adds	r3, r7, r6
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	4952      	ldr	r1, [pc, #328]	; (8001874 <task_fuc+0x38c>)
 800172a:	0013      	movs	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	189b      	adds	r3, r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	5a59      	ldrh	r1, [r3, r1]
 8001734:	193b      	adds	r3, r7, r4
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	2278      	movs	r2, #120	; 0x78
 800173c:	4353      	muls	r3, r2
 800173e:	b29b      	uxth	r3, r3
 8001740:	19ba      	adds	r2, r7, r6
 8001742:	7812      	ldrb	r2, [r2, #0]
 8001744:	18cb      	adds	r3, r1, r3
 8001746:	b298      	uxth	r0, r3
 8001748:	494a      	ldr	r1, [pc, #296]	; (8001874 <task_fuc+0x38c>)
 800174a:	0013      	movs	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	189b      	adds	r3, r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	1c02      	adds	r2, r0, #0
 8001754:	525a      	strh	r2, [r3, r1]

								laundry[j].area.y0 = (9 - basket[i].laundry_num) / 2 * 40;
 8001756:	193b      	adds	r3, r7, r4
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	4a47      	ldr	r2, [pc, #284]	; (8001878 <task_fuc+0x390>)
 800175c:	2130      	movs	r1, #48	; 0x30
 800175e:	2034      	movs	r0, #52	; 0x34
 8001760:	4343      	muls	r3, r0
 8001762:	18d3      	adds	r3, r2, r3
 8001764:	185b      	adds	r3, r3, r1
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	001a      	movs	r2, r3
 800176a:	2309      	movs	r3, #9
 800176c:	1a9b      	subs	r3, r3, r2
 800176e:	d500      	bpl.n	8001772 <task_fuc+0x28a>
 8001770:	3301      	adds	r3, #1
 8001772:	105b      	asrs	r3, r3, #1
 8001774:	b29b      	uxth	r3, r3
 8001776:	2415      	movs	r4, #21
 8001778:	193a      	adds	r2, r7, r4
 800177a:	7812      	ldrb	r2, [r2, #0]
 800177c:	2128      	movs	r1, #40	; 0x28
 800177e:	434b      	muls	r3, r1
 8001780:	b298      	uxth	r0, r3
 8001782:	493c      	ldr	r1, [pc, #240]	; (8001874 <task_fuc+0x38c>)
 8001784:	0013      	movs	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	189b      	adds	r3, r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	18cb      	adds	r3, r1, r3
 800178e:	3302      	adds	r3, #2
 8001790:	1c02      	adds	r2, r0, #0
 8001792:	801a      	strh	r2, [r3, #0]

								laundry[j].area.x1 = laundry[j].area.x0 + 60;
 8001794:	193b      	adds	r3, r7, r4
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	4936      	ldr	r1, [pc, #216]	; (8001874 <task_fuc+0x38c>)
 800179a:	0013      	movs	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	189b      	adds	r3, r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	5a5b      	ldrh	r3, [r3, r1]
 80017a4:	193a      	adds	r2, r7, r4
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	333c      	adds	r3, #60	; 0x3c
 80017aa:	b298      	uxth	r0, r3
 80017ac:	4931      	ldr	r1, [pc, #196]	; (8001874 <task_fuc+0x38c>)
 80017ae:	0013      	movs	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	189b      	adds	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	18cb      	adds	r3, r1, r3
 80017b8:	3304      	adds	r3, #4
 80017ba:	1c02      	adds	r2, r0, #0
 80017bc:	801a      	strh	r2, [r3, #0]
								laundry[j].area.y1 = laundry[j].area.y0 + 40;
 80017be:	193b      	adds	r3, r7, r4
 80017c0:	781a      	ldrb	r2, [r3, #0]
 80017c2:	492c      	ldr	r1, [pc, #176]	; (8001874 <task_fuc+0x38c>)
 80017c4:	0013      	movs	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	189b      	adds	r3, r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	18cb      	adds	r3, r1, r3
 80017ce:	3302      	adds	r3, #2
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	193a      	adds	r2, r7, r4
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	3328      	adds	r3, #40	; 0x28
 80017d8:	b298      	uxth	r0, r3
 80017da:	4926      	ldr	r1, [pc, #152]	; (8001874 <task_fuc+0x38c>)
 80017dc:	0013      	movs	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	189b      	adds	r3, r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	18cb      	adds	r3, r1, r3
 80017e6:	3306      	adds	r3, #6
 80017e8:	1c02      	adds	r2, r0, #0
 80017ea:	801a      	strh	r2, [r3, #0]

								laundry[j].selected = 0;
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	4920      	ldr	r1, [pc, #128]	; (8001874 <task_fuc+0x38c>)
 80017f2:	0013      	movs	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	189b      	adds	r3, r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	18cb      	adds	r3, r1, r3
 80017fc:	330a      	adds	r3, #10
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]

								basket[i].laundry_num++;
 8001802:	2316      	movs	r3, #22
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	491b      	ldr	r1, [pc, #108]	; (8001878 <task_fuc+0x390>)
 800180a:	2030      	movs	r0, #48	; 0x30
 800180c:	2234      	movs	r2, #52	; 0x34
 800180e:	435a      	muls	r2, r3
 8001810:	188a      	adds	r2, r1, r2
 8001812:	1812      	adds	r2, r2, r0
 8001814:	7812      	ldrb	r2, [r2, #0]
 8001816:	3201      	adds	r2, #1
 8001818:	b2d4      	uxtb	r4, r2
 800181a:	4a17      	ldr	r2, [pc, #92]	; (8001878 <task_fuc+0x390>)
 800181c:	2130      	movs	r1, #48	; 0x30
 800181e:	2034      	movs	r0, #52	; 0x34
 8001820:	4343      	muls	r3, r0
 8001822:	18d3      	adds	r3, r2, r3
 8001824:	185b      	adds	r3, r3, r1
 8001826:	1c22      	adds	r2, r4, #0
 8001828:	701a      	strb	r2, [r3, #0]
						for(uint8_t j = 0 ; j < 10 ; j++){
 800182a:	2115      	movs	r1, #21
 800182c:	187b      	adds	r3, r7, r1
 800182e:	781a      	ldrb	r2, [r3, #0]
 8001830:	187b      	adds	r3, r7, r1
 8001832:	3201      	adds	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	2315      	movs	r3, #21
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b09      	cmp	r3, #9
 800183e:	d800      	bhi.n	8001842 <task_fuc+0x35a>
 8001840:	e729      	b.n	8001696 <task_fuc+0x1ae>
							}
						}
						basket[i].weight = 0;
 8001842:	2316      	movs	r3, #22
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <task_fuc+0x390>)
 800184a:	2131      	movs	r1, #49	; 0x31
 800184c:	2034      	movs	r0, #52	; 0x34
 800184e:	4343      	muls	r3, r0
 8001850:	18d3      	adds	r3, r2, r3
 8001852:	185b      	adds	r3, r3, r1
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
						for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++) basket[i].weight += basket[i].laundry[j]->weight;
 8001858:	2314      	movs	r3, #20
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e037      	b.n	80018d2 <task_fuc+0x3ea>
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	080069d8 	.word	0x080069d8
 8001868:	2000036c 	.word	0x2000036c
 800186c:	20000372 	.word	0x20000372
 8001870:	20000364 	.word	0x20000364
 8001874:	20000018 	.word	0x20000018
 8001878:	20000090 	.word	0x20000090
 800187c:	2516      	movs	r5, #22
 800187e:	197b      	adds	r3, r7, r5
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4ab5      	ldr	r2, [pc, #724]	; (8001b58 <task_fuc+0x670>)
 8001884:	2131      	movs	r1, #49	; 0x31
 8001886:	2034      	movs	r0, #52	; 0x34
 8001888:	4343      	muls	r3, r0
 800188a:	18d3      	adds	r3, r2, r3
 800188c:	185b      	adds	r3, r3, r1
 800188e:	7819      	ldrb	r1, [r3, #0]
 8001890:	197b      	adds	r3, r7, r5
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	2614      	movs	r6, #20
 8001896:	19bb      	adds	r3, r7, r6
 8001898:	781c      	ldrb	r4, [r3, #0]
 800189a:	48af      	ldr	r0, [pc, #700]	; (8001b58 <task_fuc+0x670>)
 800189c:	0013      	movs	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	189b      	adds	r3, r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	189b      	adds	r3, r3, r2
 80018a6:	191b      	adds	r3, r3, r4
 80018a8:	3302      	adds	r3, #2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	581b      	ldr	r3, [r3, r0]
 80018ae:	7a5a      	ldrb	r2, [r3, #9]
 80018b0:	197b      	adds	r3, r7, r5
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	188a      	adds	r2, r1, r2
 80018b6:	b2d4      	uxtb	r4, r2
 80018b8:	4aa7      	ldr	r2, [pc, #668]	; (8001b58 <task_fuc+0x670>)
 80018ba:	2131      	movs	r1, #49	; 0x31
 80018bc:	2034      	movs	r0, #52	; 0x34
 80018be:	4343      	muls	r3, r0
 80018c0:	18d3      	adds	r3, r2, r3
 80018c2:	185b      	adds	r3, r3, r1
 80018c4:	1c22      	adds	r2, r4, #0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	19bb      	adds	r3, r7, r6
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	19bb      	adds	r3, r7, r6
 80018ce:	3201      	adds	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	2416      	movs	r4, #22
 80018d4:	193b      	adds	r3, r7, r4
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4a9f      	ldr	r2, [pc, #636]	; (8001b58 <task_fuc+0x670>)
 80018da:	2130      	movs	r1, #48	; 0x30
 80018dc:	2034      	movs	r0, #52	; 0x34
 80018de:	4343      	muls	r3, r0
 80018e0:	18d3      	adds	r3, r2, r3
 80018e2:	185b      	adds	r3, r3, r1
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2214      	movs	r2, #20
 80018e8:	18ba      	adds	r2, r7, r2
 80018ea:	7812      	ldrb	r2, [r2, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d3c5      	bcc.n	800187c <task_fuc+0x394>
						basket[i].cnt = basket[i].weight;
 80018f0:	193b      	adds	r3, r7, r4
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	193b      	adds	r3, r7, r4
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4997      	ldr	r1, [pc, #604]	; (8001b58 <task_fuc+0x670>)
 80018fa:	2031      	movs	r0, #49	; 0x31
 80018fc:	2434      	movs	r4, #52	; 0x34
 80018fe:	4362      	muls	r2, r4
 8001900:	188a      	adds	r2, r1, r2
 8001902:	1812      	adds	r2, r2, r0
 8001904:	7814      	ldrb	r4, [r2, #0]
 8001906:	4a94      	ldr	r2, [pc, #592]	; (8001b58 <task_fuc+0x670>)
 8001908:	2132      	movs	r1, #50	; 0x32
 800190a:	2034      	movs	r0, #52	; 0x34
 800190c:	4343      	muls	r3, r0
 800190e:	18d3      	adds	r3, r2, r3
 8001910:	185b      	adds	r3, r3, r1
 8001912:	1c22      	adds	r2, r4, #0
 8001914:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0 ; i < 3 ; i++){
 8001916:	2116      	movs	r1, #22
 8001918:	187b      	adds	r3, r7, r1
 800191a:	781a      	ldrb	r2, [r3, #0]
 800191c:	187b      	adds	r3, r7, r1
 800191e:	3201      	adds	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	2316      	movs	r3, #22
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d800      	bhi.n	800192e <task_fuc+0x446>
 800192c:	e68d      	b.n	800164a <task_fuc+0x162>
					}
				}
			}

			if(lower_menu == button_display){
 800192e:	230f      	movs	r3, #15
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d144      	bne.n	80019c2 <task_fuc+0x4da>
				if(area_check(&curXY, &button_data[0].area))      higher_menu = higher_menu == add_display ? basic_display : higher_menu == basic_display ? add_display : wash_display;
 8001938:	4a88      	ldr	r2, [pc, #544]	; (8001b5c <task_fuc+0x674>)
 800193a:	4b89      	ldr	r3, [pc, #548]	; (8001b60 <task_fuc+0x678>)
 800193c:	0011      	movs	r1, r2
 800193e:	0018      	movs	r0, r3
 8001940:	f7fe ff56 	bl	80007f0 <area_check>
 8001944:	1e03      	subs	r3, r0, #0
 8001946:	d011      	beq.n	800196c <task_fuc+0x484>
 8001948:	2210      	movs	r2, #16
 800194a:	18bb      	adds	r3, r7, r2
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d007      	beq.n	8001962 <task_fuc+0x47a>
 8001952:	18bb      	adds	r3, r7, r2
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <task_fuc+0x476>
 800195a:	2301      	movs	r3, #1
 800195c:	e002      	b.n	8001964 <task_fuc+0x47c>
 800195e:	2302      	movs	r3, #2
 8001960:	e000      	b.n	8001964 <task_fuc+0x47c>
 8001962:	2300      	movs	r3, #0
 8001964:	2210      	movs	r2, #16
 8001966:	18ba      	adds	r2, r7, r2
 8001968:	7013      	strb	r3, [r2, #0]
 800196a:	e02a      	b.n	80019c2 <task_fuc+0x4da>
				else if(area_check(&curXY, &button_data[1].area)) yellow_cnt = yellow_cnt < 2 ? yellow_cnt + 1 : yellow_cnt;
 800196c:	4a7d      	ldr	r2, [pc, #500]	; (8001b64 <task_fuc+0x67c>)
 800196e:	4b7c      	ldr	r3, [pc, #496]	; (8001b60 <task_fuc+0x678>)
 8001970:	0011      	movs	r1, r2
 8001972:	0018      	movs	r0, r3
 8001974:	f7fe ff3c 	bl	80007f0 <area_check>
 8001978:	1e03      	subs	r3, r0, #0
 800197a:	d010      	beq.n	800199e <task_fuc+0x4b6>
 800197c:	221e      	movs	r2, #30
 800197e:	18bb      	adds	r3, r7, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d804      	bhi.n	8001990 <task_fuc+0x4a8>
 8001986:	18bb      	adds	r3, r7, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	b2db      	uxtb	r3, r3
 800198e:	e002      	b.n	8001996 <task_fuc+0x4ae>
 8001990:	231e      	movs	r3, #30
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	221e      	movs	r2, #30
 8001998:	18ba      	adds	r2, r7, r2
 800199a:	7013      	strb	r3, [r2, #0]
 800199c:	e011      	b.n	80019c2 <task_fuc+0x4da>
				else if(area_check(&curXY, &button_data[2].area)){
 800199e:	4a72      	ldr	r2, [pc, #456]	; (8001b68 <task_fuc+0x680>)
 80019a0:	4b6f      	ldr	r3, [pc, #444]	; (8001b60 <task_fuc+0x678>)
 80019a2:	0011      	movs	r1, r2
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7fe ff23 	bl	80007f0 <area_check>
 80019aa:	1e03      	subs	r3, r0, #0
 80019ac:	d009      	beq.n	80019c2 <task_fuc+0x4da>
					setMotor(DRV8830_CW);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f7fe fda6 	bl	8000500 <setMotor>
					higher_menu = wash_display;
 80019b4:	2310      	movs	r3, #16
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	2202      	movs	r2, #2
 80019ba:	701a      	strb	r2, [r3, #0]
					wash_basket = 0;
 80019bc:	4b6b      	ldr	r3, [pc, #428]	; (8001b6c <task_fuc+0x684>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if(higher_menu == wash_display){
 80019c2:	2410      	movs	r4, #16
 80019c4:	193b      	adds	r3, r7, r4
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d000      	beq.n	80019ce <task_fuc+0x4e6>
 80019cc:	e174      	b.n	8001cb8 <task_fuc+0x7d0>
			if(wash_basket == 2 && basket[wash_basket].cnt == 0){
 80019ce:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <task_fuc+0x684>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d000      	beq.n	80019d8 <task_fuc+0x4f0>
 80019d6:	e0da      	b.n	8001b8e <task_fuc+0x6a6>
 80019d8:	4b64      	ldr	r3, [pc, #400]	; (8001b6c <task_fuc+0x684>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	0018      	movs	r0, r3
 80019de:	4a5e      	ldr	r2, [pc, #376]	; (8001b58 <task_fuc+0x670>)
 80019e0:	2132      	movs	r1, #50	; 0x32
 80019e2:	2334      	movs	r3, #52	; 0x34
 80019e4:	4343      	muls	r3, r0
 80019e6:	18d3      	adds	r3, r2, r3
 80019e8:	185b      	adds	r3, r3, r1
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d000      	beq.n	80019f2 <task_fuc+0x50a>
 80019f0:	e0cd      	b.n	8001b8e <task_fuc+0x6a6>
				screen_update = 0;
 80019f2:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <task_fuc+0x688>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]

				setMotor(DRV8830_STOP);
 80019f8:	2000      	movs	r0, #0
 80019fa:	f7fe fd81 	bl	8000500 <setMotor>
				BUZ(1);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7fe fdca 	bl	8000598 <BUZ>
				HAL_Delay(500);
 8001a04:	23fa      	movs	r3, #250	; 0xfa
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f000 fdf9 	bl	8002600 <HAL_Delay>
				BUZ(0);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7fe fdc2 	bl	8000598 <BUZ>
				HAL_Delay(500);
 8001a14:	23fa      	movs	r3, #250	; 0xfa
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f000 fdf1 	bl	8002600 <HAL_Delay>
				BUZ(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f7fe fdba 	bl	8000598 <BUZ>
				HAL_Delay(500);
 8001a24:	23fa      	movs	r3, #250	; 0xfa
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f000 fde9 	bl	8002600 <HAL_Delay>
				BUZ(0);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7fe fdb2 	bl	8000598 <BUZ>
				higher_menu = basic_display;
 8001a34:	193b      	adds	r3, r7, r4
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]

				for(uint8_t i = 0 ; i < 3 ; i++){
 8001a3a:	2313      	movs	r3, #19
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	e09e      	b.n	8001b82 <task_fuc+0x69a>
					if(basket[i].weight > 15) continue;
 8001a44:	2313      	movs	r3, #19
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4a43      	ldr	r2, [pc, #268]	; (8001b58 <task_fuc+0x670>)
 8001a4c:	2131      	movs	r1, #49	; 0x31
 8001a4e:	2034      	movs	r0, #52	; 0x34
 8001a50:	4343      	muls	r3, r0
 8001a52:	18d3      	adds	r3, r2, r3
 8001a54:	185b      	adds	r3, r3, r1
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d900      	bls.n	8001a5e <task_fuc+0x576>
 8001a5c:	e08a      	b.n	8001b74 <task_fuc+0x68c>

					for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 8001a5e:	2312      	movs	r3, #18
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	e03b      	b.n	8001ae0 <task_fuc+0x5f8>
						memset((LAUNDRY_Typedef*)basket[i].laundry[j], 0, sizeof(LAUNDRY_Typedef));
 8001a68:	2513      	movs	r5, #19
 8001a6a:	197b      	adds	r3, r7, r5
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	2412      	movs	r4, #18
 8001a70:	193b      	adds	r3, r7, r4
 8001a72:	7818      	ldrb	r0, [r3, #0]
 8001a74:	4938      	ldr	r1, [pc, #224]	; (8001b58 <task_fuc+0x670>)
 8001a76:	0013      	movs	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	189b      	adds	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	189b      	adds	r3, r3, r2
 8001a80:	181b      	adds	r3, r3, r0
 8001a82:	3302      	adds	r3, #2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	585b      	ldr	r3, [r3, r1]
 8001a88:	220c      	movs	r2, #12
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f004 f840 	bl	8005b12 <memset>
						basket[i].laundry[j]->area.x0 = 500;
 8001a92:	197b      	adds	r3, r7, r5
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	193b      	adds	r3, r7, r4
 8001a98:	7818      	ldrb	r0, [r3, #0]
 8001a9a:	492f      	ldr	r1, [pc, #188]	; (8001b58 <task_fuc+0x670>)
 8001a9c:	0013      	movs	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	189b      	adds	r3, r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	189b      	adds	r3, r3, r2
 8001aa6:	181b      	adds	r3, r3, r0
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	585b      	ldr	r3, [r3, r1]
 8001aae:	22fa      	movs	r2, #250	; 0xfa
 8001ab0:	0052      	lsls	r2, r2, #1
 8001ab2:	801a      	strh	r2, [r3, #0]
						basket[i].laundry[j]->area.y0 = 500;
 8001ab4:	197b      	adds	r3, r7, r5
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	193b      	adds	r3, r7, r4
 8001aba:	7818      	ldrb	r0, [r3, #0]
 8001abc:	4926      	ldr	r1, [pc, #152]	; (8001b58 <task_fuc+0x670>)
 8001abe:	0013      	movs	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	189b      	adds	r3, r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	189b      	adds	r3, r3, r2
 8001ac8:	181b      	adds	r3, r3, r0
 8001aca:	3302      	adds	r3, #2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	585b      	ldr	r3, [r3, r1]
 8001ad0:	22fa      	movs	r2, #250	; 0xfa
 8001ad2:	0052      	lsls	r2, r2, #1
 8001ad4:	805a      	strh	r2, [r3, #2]
					for(uint8_t j = 0 ; j < basket[i].laundry_num ; j++){
 8001ad6:	193b      	adds	r3, r7, r4
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	193b      	adds	r3, r7, r4
 8001adc:	3201      	adds	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]
 8001ae0:	2413      	movs	r4, #19
 8001ae2:	193b      	adds	r3, r7, r4
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <task_fuc+0x670>)
 8001ae8:	2130      	movs	r1, #48	; 0x30
 8001aea:	2034      	movs	r0, #52	; 0x34
 8001aec:	4343      	muls	r3, r0
 8001aee:	18d3      	adds	r3, r2, r3
 8001af0:	185b      	adds	r3, r3, r1
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2212      	movs	r2, #18
 8001af6:	18ba      	adds	r2, r7, r2
 8001af8:	7812      	ldrb	r2, [r2, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d3b4      	bcc.n	8001a68 <task_fuc+0x580>
					}
					basket[i].cnt = 0;
 8001afe:	193b      	adds	r3, r7, r4
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <task_fuc+0x670>)
 8001b04:	2132      	movs	r1, #50	; 0x32
 8001b06:	2034      	movs	r0, #52	; 0x34
 8001b08:	4343      	muls	r3, r0
 8001b0a:	18d3      	adds	r3, r2, r3
 8001b0c:	185b      	adds	r3, r3, r1
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
					basket[i].laundry_num = 0;
 8001b12:	193b      	adds	r3, r7, r4
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <task_fuc+0x670>)
 8001b18:	2130      	movs	r1, #48	; 0x30
 8001b1a:	2034      	movs	r0, #52	; 0x34
 8001b1c:	4343      	muls	r3, r0
 8001b1e:	18d3      	adds	r3, r2, r3
 8001b20:	185b      	adds	r3, r3, r1
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
					basket[i].weight = 0;
 8001b26:	193b      	adds	r3, r7, r4
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <task_fuc+0x670>)
 8001b2c:	2131      	movs	r1, #49	; 0x31
 8001b2e:	2034      	movs	r0, #52	; 0x34
 8001b30:	4343      	muls	r3, r0
 8001b32:	18d3      	adds	r3, r2, r3
 8001b34:	185b      	adds	r3, r3, r1
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
					memset((LAUNDRY_Typedef**)basket[i].laundry, 0, sizeof(LAUNDRY_Typedef*) * 10);
 8001b3a:	193b      	adds	r3, r7, r4
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2234      	movs	r2, #52	; 0x34
 8001b40:	4353      	muls	r3, r2
 8001b42:	3308      	adds	r3, #8
 8001b44:	001a      	movs	r2, r3
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <task_fuc+0x670>)
 8001b48:	18d3      	adds	r3, r2, r3
 8001b4a:	2228      	movs	r2, #40	; 0x28
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f003 ffdf 	bl	8005b12 <memset>
 8001b54:	e00f      	b.n	8001b76 <task_fuc+0x68e>
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	20000090 	.word	0x20000090
 8001b5c:	2000012c 	.word	0x2000012c
 8001b60:	2000036c 	.word	0x2000036c
 8001b64:	20000138 	.word	0x20000138
 8001b68:	20000144 	.word	0x20000144
 8001b6c:	20000365 	.word	0x20000365
 8001b70:	20000364 	.word	0x20000364
					if(basket[i].weight > 15) continue;
 8001b74:	46c0      	nop			; (mov r8, r8)
				for(uint8_t i = 0 ; i < 3 ; i++){
 8001b76:	2113      	movs	r1, #19
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	3201      	adds	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	2313      	movs	r3, #19
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d800      	bhi.n	8001b8e <task_fuc+0x6a6>
 8001b8c:	e75a      	b.n	8001a44 <task_fuc+0x55c>
				}
			}

			if(basket[wash_basket].cnt > 15 || basket[wash_basket].cnt == 0) {
 8001b8e:	4b80      	ldr	r3, [pc, #512]	; (8001d90 <task_fuc+0x8a8>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	0018      	movs	r0, r3
 8001b94:	4a7f      	ldr	r2, [pc, #508]	; (8001d94 <task_fuc+0x8ac>)
 8001b96:	2132      	movs	r1, #50	; 0x32
 8001b98:	2334      	movs	r3, #52	; 0x34
 8001b9a:	4343      	muls	r3, r0
 8001b9c:	18d3      	adds	r3, r2, r3
 8001b9e:	185b      	adds	r3, r3, r1
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b0f      	cmp	r3, #15
 8001ba4:	d80b      	bhi.n	8001bbe <task_fuc+0x6d6>
 8001ba6:	4b7a      	ldr	r3, [pc, #488]	; (8001d90 <task_fuc+0x8a8>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	0018      	movs	r0, r3
 8001bac:	4a79      	ldr	r2, [pc, #484]	; (8001d94 <task_fuc+0x8ac>)
 8001bae:	2132      	movs	r1, #50	; 0x32
 8001bb0:	2334      	movs	r3, #52	; 0x34
 8001bb2:	4343      	muls	r3, r0
 8001bb4:	18d3      	adds	r3, r2, r3
 8001bb6:	185b      	adds	r3, r3, r1
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d147      	bne.n	8001c4e <task_fuc+0x766>
				if(basket[wash_basket].cnt == 0 && basket[wash_basket].weight > 0){
 8001bbe:	4b74      	ldr	r3, [pc, #464]	; (8001d90 <task_fuc+0x8a8>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	4a73      	ldr	r2, [pc, #460]	; (8001d94 <task_fuc+0x8ac>)
 8001bc6:	2132      	movs	r1, #50	; 0x32
 8001bc8:	2334      	movs	r3, #52	; 0x34
 8001bca:	4343      	muls	r3, r0
 8001bcc:	18d3      	adds	r3, r2, r3
 8001bce:	185b      	adds	r3, r3, r1
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d12e      	bne.n	8001c34 <task_fuc+0x74c>
 8001bd6:	4b6e      	ldr	r3, [pc, #440]	; (8001d90 <task_fuc+0x8a8>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	0018      	movs	r0, r3
 8001bdc:	4a6d      	ldr	r2, [pc, #436]	; (8001d94 <task_fuc+0x8ac>)
 8001bde:	2131      	movs	r1, #49	; 0x31
 8001be0:	2334      	movs	r3, #52	; 0x34
 8001be2:	4343      	muls	r3, r0
 8001be4:	18d3      	adds	r3, r2, r3
 8001be6:	185b      	adds	r3, r3, r1
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d022      	beq.n	8001c34 <task_fuc+0x74c>
					setMotor(DRV8830_STOP);
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7fe fc86 	bl	8000500 <setMotor>
					HAL_Delay(1000);
 8001bf4:	23fa      	movs	r3, #250	; 0xfa
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f000 fd01 	bl	8002600 <HAL_Delay>
					wash_tick = HAL_GetTick();
 8001bfe:	f000 fcf5 	bl	80025ec <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	4b64      	ldr	r3, [pc, #400]	; (8001d98 <task_fuc+0x8b0>)
 8001c06:	601a      	str	r2, [r3, #0]
					if(wash_basket < 2) { if(basket[wash_basket + 1].cnt > 0) screen_update = 0; }
 8001c08:	4b61      	ldr	r3, [pc, #388]	; (8001d90 <task_fuc+0x8a8>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d80e      	bhi.n	8001c2e <task_fuc+0x746>
 8001c10:	4b5f      	ldr	r3, [pc, #380]	; (8001d90 <task_fuc+0x8a8>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	4a5f      	ldr	r2, [pc, #380]	; (8001d94 <task_fuc+0x8ac>)
 8001c18:	2132      	movs	r1, #50	; 0x32
 8001c1a:	2034      	movs	r0, #52	; 0x34
 8001c1c:	4343      	muls	r3, r0
 8001c1e:	18d3      	adds	r3, r2, r3
 8001c20:	185b      	adds	r3, r3, r1
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <task_fuc+0x746>
 8001c28:	4b5c      	ldr	r3, [pc, #368]	; (8001d9c <task_fuc+0x8b4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
					setMotor(DRV8830_CW);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f7fe fc66 	bl	8000500 <setMotor>
				}
				wash_basket = wash_basket < 2 ? wash_basket+ 1 : wash_basket;
 8001c34:	4b56      	ldr	r3, [pc, #344]	; (8001d90 <task_fuc+0x8a8>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d804      	bhi.n	8001c46 <task_fuc+0x75e>
 8001c3c:	4b54      	ldr	r3, [pc, #336]	; (8001d90 <task_fuc+0x8a8>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	e001      	b.n	8001c4a <task_fuc+0x762>
 8001c46:	4b52      	ldr	r3, [pc, #328]	; (8001d90 <task_fuc+0x8a8>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4a51      	ldr	r2, [pc, #324]	; (8001d90 <task_fuc+0x8a8>)
 8001c4c:	7013      	strb	r3, [r2, #0]
			}

			if(HAL_GetTick() - wash_tick >= 1000){
 8001c4e:	f000 fccd 	bl	80025ec <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	4b50      	ldr	r3, [pc, #320]	; (8001d98 <task_fuc+0x8b0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	1ad2      	subs	r2, r2, r3
 8001c5a:	23fa      	movs	r3, #250	; 0xfa
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d32f      	bcc.n	8001cc2 <task_fuc+0x7da>
				screen_update = 0;
 8001c62:	4b4e      	ldr	r3, [pc, #312]	; (8001d9c <task_fuc+0x8b4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
				wash_tick = HAL_GetTick();
 8001c68:	f000 fcc0 	bl	80025ec <HAL_GetTick>
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	4b4a      	ldr	r3, [pc, #296]	; (8001d98 <task_fuc+0x8b0>)
 8001c70:	601a      	str	r2, [r3, #0]
				if(basket[wash_basket].cnt > 0) { basket[wash_basket].cnt--; setMotor(DRV8830_CW); }
 8001c72:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <task_fuc+0x8a8>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	0018      	movs	r0, r3
 8001c78:	4a46      	ldr	r2, [pc, #280]	; (8001d94 <task_fuc+0x8ac>)
 8001c7a:	2132      	movs	r1, #50	; 0x32
 8001c7c:	2334      	movs	r3, #52	; 0x34
 8001c7e:	4343      	muls	r3, r0
 8001c80:	18d3      	adds	r3, r2, r3
 8001c82:	185b      	adds	r3, r3, r1
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01b      	beq.n	8001cc2 <task_fuc+0x7da>
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <task_fuc+0x8a8>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4941      	ldr	r1, [pc, #260]	; (8001d94 <task_fuc+0x8ac>)
 8001c90:	2032      	movs	r0, #50	; 0x32
 8001c92:	2234      	movs	r2, #52	; 0x34
 8001c94:	435a      	muls	r2, r3
 8001c96:	188a      	adds	r2, r1, r2
 8001c98:	1812      	adds	r2, r2, r0
 8001c9a:	7812      	ldrb	r2, [r2, #0]
 8001c9c:	3a01      	subs	r2, #1
 8001c9e:	b2d4      	uxtb	r4, r2
 8001ca0:	4a3c      	ldr	r2, [pc, #240]	; (8001d94 <task_fuc+0x8ac>)
 8001ca2:	2132      	movs	r1, #50	; 0x32
 8001ca4:	2034      	movs	r0, #52	; 0x34
 8001ca6:	4343      	muls	r3, r0
 8001ca8:	18d3      	adds	r3, r2, r3
 8001caa:	185b      	adds	r3, r3, r1
 8001cac:	1c22      	adds	r2, r4, #0
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f7fe fc25 	bl	8000500 <setMotor>
 8001cb6:	e004      	b.n	8001cc2 <task_fuc+0x7da>
			}
		}
		else wash_tick = HAL_GetTick();
 8001cb8:	f000 fc98 	bl	80025ec <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <task_fuc+0x8b0>)
 8001cc0:	601a      	str	r2, [r3, #0]

		if(yellow_cnt > 0){
 8001cc2:	231e      	movs	r3, #30
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d04b      	beq.n	8001d64 <task_fuc+0x87c>
			if(HAL_GetTick() - yellow_tick > 500){
 8001ccc:	f000 fc8e 	bl	80025ec <HAL_GetTick>
 8001cd0:	0002      	movs	r2, r0
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	1ad2      	subs	r2, r2, r3
 8001cd6:	23fa      	movs	r3, #250	; 0xfa
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d946      	bls.n	8001d6c <task_fuc+0x884>
				for(uint8_t i = 0 ; i < 3 ; i++){
 8001cde:	2311      	movs	r3, #17
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	e030      	b.n	8001d4a <task_fuc+0x862>
					if(basket[i].weight > 15) continue;
 8001ce8:	2411      	movs	r4, #17
 8001cea:	193b      	adds	r3, r7, r4
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <task_fuc+0x8ac>)
 8001cf0:	2131      	movs	r1, #49	; 0x31
 8001cf2:	2034      	movs	r0, #52	; 0x34
 8001cf4:	4343      	muls	r3, r0
 8001cf6:	18d3      	adds	r3, r2, r3
 8001cf8:	185b      	adds	r3, r3, r1
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b0f      	cmp	r3, #15
 8001cfe:	d81d      	bhi.n	8001d3c <task_fuc+0x854>
					qsort((LAUNDRY_Typedef**)&basket[i].laundry, basket[i].laundry_num, sizeof(LAUNDRY_Typedef*), compare_item[yellow_cnt - 1]);
 8001d00:	0021      	movs	r1, r4
 8001d02:	187b      	adds	r3, r7, r1
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2234      	movs	r2, #52	; 0x34
 8001d08:	4353      	muls	r3, r2
 8001d0a:	3308      	adds	r3, #8
 8001d0c:	001a      	movs	r2, r3
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <task_fuc+0x8ac>)
 8001d10:	18d0      	adds	r0, r2, r3
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <task_fuc+0x8ac>)
 8001d18:	2130      	movs	r1, #48	; 0x30
 8001d1a:	2434      	movs	r4, #52	; 0x34
 8001d1c:	4363      	muls	r3, r4
 8001d1e:	18d3      	adds	r3, r2, r3
 8001d20:	185b      	adds	r3, r3, r1
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	0019      	movs	r1, r3
 8001d26:	231e      	movs	r3, #30
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	1e5a      	subs	r2, r3, #1
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <task_fuc+0x8b8>)
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	58d3      	ldr	r3, [r2, r3]
 8001d34:	2204      	movs	r2, #4
 8001d36:	f003 ff2b 	bl	8005b90 <qsort>
 8001d3a:	e000      	b.n	8001d3e <task_fuc+0x856>
					if(basket[i].weight > 15) continue;
 8001d3c:	46c0      	nop			; (mov r8, r8)
				for(uint8_t i = 0 ; i < 3 ; i++){
 8001d3e:	2111      	movs	r1, #17
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	3201      	adds	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	2311      	movs	r3, #17
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d9c9      	bls.n	8001ce8 <task_fuc+0x800>
				}
				screen_update = 0;
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <task_fuc+0x8b4>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
				yellow_cnt = 0;
 8001d5a:	231e      	movs	r3, #30
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	e003      	b.n	8001d6c <task_fuc+0x884>
			}
		}
		else yellow_tick = HAL_GetTick();
 8001d64:	f000 fc42 	bl	80025ec <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	61bb      	str	r3, [r7, #24]

		if(befo_touch != curXY.touched) screen_update = 0;
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <task_fuc+0x8bc>)
 8001d6e:	791b      	ldrb	r3, [r3, #4]
 8001d70:	221f      	movs	r2, #31
 8001d72:	18ba      	adds	r2, r7, r2
 8001d74:	7812      	ldrb	r2, [r2, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d002      	beq.n	8001d80 <task_fuc+0x898>
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <task_fuc+0x8b4>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
		befo_touch = curXY.touched;
 8001d80:	231f      	movs	r3, #31
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <task_fuc+0x8bc>)
 8001d86:	7912      	ldrb	r2, [r2, #4]
 8001d88:	701a      	strb	r2, [r3, #0]
		get_touch(&curXY);
 8001d8a:	f7ff fbce 	bl	800152a <task_fuc+0x42>
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	20000365 	.word	0x20000365
 8001d94:	20000090 	.word	0x20000090
 8001d98:	20000368 	.word	0x20000368
 8001d9c:	20000364 	.word	0x20000364
 8001da0:	20000150 	.word	0x20000150
 8001da4:	2000036c 	.word	0x2000036c

08001da8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001dae:	f000 fbb7 	bl	8002520 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001db2:	f000 f89b 	bl	8001eec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001db6:	f000 f9dd 	bl	8002174 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001dba:	f000 f9ab 	bl	8002114 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8001dbe:	f000 f94b 	bl	8002058 <MX_TIM2_Init>
	MX_I2C1_Init();
 8001dc2:	f000 f909 	bl	8001fd8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	initEns160();
 8001dc6:	f7fe fbcd 	bl	8000564 <initEns160>
	initDrv8830();
 8001dca:	f7fe fb7f 	bl	80004cc <initDrv8830>

	LED(1,0);
 8001dce:	23a0      	movs	r3, #160	; 0xa0
 8001dd0:	05db      	lsls	r3, r3, #23
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	619a      	str	r2, [r3, #24]
	LED(2,0);
 8001dd6:	23a0      	movs	r3, #160	; 0xa0
 8001dd8:	05db      	lsls	r3, r3, #23
 8001dda:	2210      	movs	r2, #16
 8001ddc:	619a      	str	r2, [r3, #24]
	LED(3,0);
 8001dde:	23a0      	movs	r3, #160	; 0xa0
 8001de0:	05db      	lsls	r3, r3, #23
 8001de2:	2220      	movs	r2, #32
 8001de4:	619a      	str	r2, [r3, #24]

	setMotor(DRV8830_STOP);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7fe fb8a 	bl	8000500 <setMotor>

	nextion_inst_set("baud=921600");
 8001dec:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <main+0x124>)
 8001dee:	0018      	movs	r0, r3
 8001df0:	f7fe fc1e 	bl	8000630 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 8001df4:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <main+0x124>)
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7fe fc1a 	bl	8000630 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 8001dfc:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <main+0x124>)
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f7fe fc16 	bl	8000630 <nextion_inst_set>
	HAL_Delay(50);
 8001e04:	2032      	movs	r0, #50	; 0x32
 8001e06:	f000 fbfb 	bl	8002600 <HAL_Delay>
	USART1->CR1 &= (~USART_CR1_UE);
 8001e0a:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <main+0x128>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <main+0x128>)
 8001e10:	2101      	movs	r1, #1
 8001e12:	438a      	bics	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
	USART1->BRR = 0x23;
 8001e16:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <main+0x128>)
 8001e18:	2223      	movs	r2, #35	; 0x23
 8001e1a:	60da      	str	r2, [r3, #12]
	USART1->CR1 |= USART_CR1_UE;
 8001e1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <main+0x128>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <main+0x128>)
 8001e22:	2101      	movs	r1, #1
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
	HAL_Delay(1000);
 8001e28:	23fa      	movs	r3, #250	; 0xfa
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f000 fbe7 	bl	8002600 <HAL_Delay>

	nextion_inst_set("dp=0");
 8001e32:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <main+0x12c>)
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7fe fbfb 	bl	8000630 <nextion_inst_set>
	nextion_inst_set("dp=0");
 8001e3a:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <main+0x12c>)
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7fe fbf7 	bl	8000630 <nextion_inst_set>
	nextion_inst_set("dp=0");
 8001e42:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <main+0x12c>)
 8001e44:	0018      	movs	r0, r3
 8001e46:	f7fe fbf3 	bl	8000630 <nextion_inst_set>

	nextion_inst_set("door_button.txt=\"Unlocked Door\"");
 8001e4a:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <main+0x130>)
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f7fe fbef 	bl	8000630 <nextion_inst_set>
	nextion_inst_set("door_button.txt=\"Unlocked Door\"");
 8001e52:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <main+0x130>)
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7fe fbeb 	bl	8000630 <nextion_inst_set>
	nextion_inst_set("door_button.txt=\"Unlocked Door\"");
 8001e5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <main+0x130>)
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7fe fbe7 	bl	8000630 <nextion_inst_set>

	nextion_inst_set("car_t.txt=\"Waiting for car\"");
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <main+0x134>)
 8001e64:	0018      	movs	r0, r3
 8001e66:	f7fe fbe3 	bl	8000630 <nextion_inst_set>
	nextion_inst_set("car_t.txt=\"Waiting for car\"");
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <main+0x134>)
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7fe fbdf 	bl	8000630 <nextion_inst_set>
	nextion_inst_set("car_t.txt=\"Waiting for car\"");
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <main+0x134>)
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7fe fbdb 	bl	8000630 <nextion_inst_set>

	nextion_inst_set("post_t.txt=\"Empty\"");
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <main+0x138>)
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7fe fbd7 	bl	8000630 <nextion_inst_set>
	nextion_inst_set("post_t.txt=\"Empty\"");
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <main+0x138>)
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7fe fbd3 	bl	8000630 <nextion_inst_set>
	nextion_inst_set("post_t.txt=\"Empty\"");
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <main+0x138>)
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7fe fbcf 	bl	8000630 <nextion_inst_set>

	uint32_t tick = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(SW(2)){
 8001e96:	23a0      	movs	r3, #160	; 0xa0
 8001e98:	05db      	lsls	r3, r3, #23
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d10e      	bne.n	8001ec0 <main+0x118>
			if(HAL_GetTick() - tick > 3000){
 8001ea2:	f000 fba3 	bl	80025ec <HAL_GetTick>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <main+0x13c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d9f1      	bls.n	8001e96 <main+0xee>
				nextion_inst_set("cls WHITE");
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <main+0x140>)
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7fe fbbb 	bl	8000630 <nextion_inst_set>
				task_fuc();
 8001eba:	f7ff fb15 	bl	80014e8 <task_fuc>
 8001ebe:	e7ea      	b.n	8001e96 <main+0xee>
			}
		}
		else tick = HAL_GetTick();
 8001ec0:	f000 fb94 	bl	80025ec <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	607b      	str	r3, [r7, #4]
		if(SW(2)){
 8001ec8:	e7e5      	b.n	8001e96 <main+0xee>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	080069e4 	.word	0x080069e4
 8001ed0:	40013800 	.word	0x40013800
 8001ed4:	080069f0 	.word	0x080069f0
 8001ed8:	080069f8 	.word	0x080069f8
 8001edc:	08006a18 	.word	0x08006a18
 8001ee0:	08006a34 	.word	0x08006a34
 8001ee4:	00000bb8 	.word	0x00000bb8
 8001ee8:	080069d8 	.word	0x080069d8

08001eec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b09d      	sub	sp, #116	; 0x74
 8001ef0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef2:	2438      	movs	r4, #56	; 0x38
 8001ef4:	193b      	adds	r3, r7, r4
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	2338      	movs	r3, #56	; 0x38
 8001efa:	001a      	movs	r2, r3
 8001efc:	2100      	movs	r1, #0
 8001efe:	f003 fe08 	bl	8005b12 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f02:	2324      	movs	r3, #36	; 0x24
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	0018      	movs	r0, r3
 8001f08:	2314      	movs	r3, #20
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	f003 fe00 	bl	8005b12 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	0018      	movs	r0, r3
 8001f16:	2320      	movs	r3, #32
 8001f18:	001a      	movs	r2, r3
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	f003 fdf9 	bl	8005b12 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f20:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <SystemClock_Config+0xe4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a2b      	ldr	r2, [pc, #172]	; (8001fd4 <SystemClock_Config+0xe8>)
 8001f26:	401a      	ands	r2, r3
 8001f28:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <SystemClock_Config+0xe4>)
 8001f2a:	2180      	movs	r1, #128	; 0x80
 8001f2c:	0109      	lsls	r1, r1, #4
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f32:	0021      	movs	r1, r4
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	2202      	movs	r2, #2
 8001f38:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f3a:	187b      	adds	r3, r7, r1
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f40:	187b      	adds	r3, r7, r1
 8001f42:	2210      	movs	r2, #16
 8001f44:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f46:	187b      	adds	r3, r7, r1
 8001f48:	2202      	movs	r2, #2
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	2200      	movs	r2, #0
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001f52:	187b      	adds	r3, r7, r1
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	02d2      	lsls	r2, r2, #11
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001f5a:	187b      	adds	r3, r7, r1
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	03d2      	lsls	r2, r2, #15
 8001f60:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f62:	187b      	adds	r3, r7, r1
 8001f64:	0018      	movs	r0, r3
 8001f66:	f001 fc41 	bl	80037ec <HAL_RCC_OscConfig>
 8001f6a:	1e03      	subs	r3, r0, #0
 8001f6c:	d001      	beq.n	8001f72 <SystemClock_Config+0x86>
	{
		Error_Handler();
 8001f6e:	f000 f965 	bl	800223c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f72:	2124      	movs	r1, #36	; 0x24
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	220f      	movs	r2, #15
 8001f78:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f7a:	187b      	adds	r3, r7, r1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f86:	187b      	adds	r3, r7, r1
 8001f88:	2200      	movs	r2, #0
 8001f8a:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	2101      	movs	r1, #1
 8001f96:	0018      	movs	r0, r3
 8001f98:	f001 ffec 	bl	8003f74 <HAL_RCC_ClockConfig>
 8001f9c:	1e03      	subs	r3, r0, #0
 8001f9e:	d001      	beq.n	8001fa4 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8001fa0:	f000 f94c 	bl	800223c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	2209      	movs	r2, #9
 8001fa8:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f002 f9ff 	bl	80043bc <HAL_RCCEx_PeriphCLKConfig>
 8001fbe:	1e03      	subs	r3, r0, #0
 8001fc0:	d001      	beq.n	8001fc6 <SystemClock_Config+0xda>
	{
		Error_Handler();
 8001fc2:	f000 f93b 	bl	800223c <Error_Handler>
	}
}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b01d      	add	sp, #116	; 0x74
 8001fcc:	bd90      	pop	{r4, r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	ffffe7ff 	.word	0xffffe7ff

08001fd8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <MX_I2C1_Init+0x74>)
 8001fde:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <MX_I2C1_Init+0x78>)
 8001fe0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00300F38;
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <MX_I2C1_Init+0x74>)
 8001fe4:	4a1b      	ldr	r2, [pc, #108]	; (8002054 <MX_I2C1_Init+0x7c>)
 8001fe6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <MX_I2C1_Init+0x74>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <MX_I2C1_Init+0x74>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <MX_I2C1_Init+0x74>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_I2C1_Init+0x74>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <MX_I2C1_Init+0x74>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <MX_I2C1_Init+0x74>)
 8002008:	2200      	movs	r2, #0
 800200a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <MX_I2C1_Init+0x74>)
 800200e:	2200      	movs	r2, #0
 8002010:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_I2C1_Init+0x74>)
 8002014:	0018      	movs	r0, r3
 8002016:	f000 fd5f 	bl	8002ad8 <HAL_I2C_Init>
 800201a:	1e03      	subs	r3, r0, #0
 800201c:	d001      	beq.n	8002022 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 800201e:	f000 f90d 	bl	800223c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <MX_I2C1_Init+0x74>)
 8002024:	2100      	movs	r1, #0
 8002026:	0018      	movs	r0, r3
 8002028:	f001 fb48 	bl	80036bc <HAL_I2CEx_ConfigAnalogFilter>
 800202c:	1e03      	subs	r3, r0, #0
 800202e:	d001      	beq.n	8002034 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8002030:	f000 f904 	bl	800223c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <MX_I2C1_Init+0x74>)
 8002036:	2100      	movs	r1, #0
 8002038:	0018      	movs	r0, r3
 800203a:	f001 fb8b 	bl	8003754 <HAL_I2CEx_ConfigDigitalFilter>
 800203e:	1e03      	subs	r3, r0, #0
 8002040:	d001      	beq.n	8002046 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8002042:	f000 f8fb 	bl	800223c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	200001e4 	.word	0x200001e4
 8002050:	40005400 	.word	0x40005400
 8002054:	00300f38 	.word	0x00300f38

08002058 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205e:	2310      	movs	r3, #16
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	0018      	movs	r0, r3
 8002064:	2308      	movs	r3, #8
 8002066:	001a      	movs	r2, r3
 8002068:	2100      	movs	r1, #0
 800206a:	f003 fd52 	bl	8005b12 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 800206e:	003b      	movs	r3, r7
 8002070:	0018      	movs	r0, r3
 8002072:	2310      	movs	r3, #16
 8002074:	001a      	movs	r2, r3
 8002076:	2100      	movs	r1, #0
 8002078:	f003 fd4b 	bl	8005b12 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800207c:	4b24      	ldr	r3, [pc, #144]	; (8002110 <MX_TIM2_Init+0xb8>)
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	05d2      	lsls	r2, r2, #23
 8002082:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32-1;
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <MX_TIM2_Init+0xb8>)
 8002086:	221f      	movs	r2, #31
 8002088:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208a:	4b21      	ldr	r3, [pc, #132]	; (8002110 <MX_TIM2_Init+0xb8>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 250-1;
 8002090:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <MX_TIM2_Init+0xb8>)
 8002092:	22f9      	movs	r2, #249	; 0xf9
 8002094:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <MX_TIM2_Init+0xb8>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209c:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <MX_TIM2_Init+0xb8>)
 800209e:	2200      	movs	r2, #0
 80020a0:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <MX_TIM2_Init+0xb8>)
 80020a4:	0018      	movs	r0, r3
 80020a6:	f002 fad5 	bl	8004654 <HAL_TIM_PWM_Init>
 80020aa:	1e03      	subs	r3, r0, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 80020ae:	f000 f8c5 	bl	800223c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b2:	2110      	movs	r1, #16
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ba:	187b      	adds	r3, r7, r1
 80020bc:	2200      	movs	r2, #0
 80020be:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020c0:	187a      	adds	r2, r7, r1
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <MX_TIM2_Init+0xb8>)
 80020c4:	0011      	movs	r1, r2
 80020c6:	0018      	movs	r0, r3
 80020c8:	f002 fe10 	bl	8004cec <HAL_TIMEx_MasterConfigSynchronization>
 80020cc:	1e03      	subs	r3, r0, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM2_Init+0x7c>
	{
		Error_Handler();
 80020d0:	f000 f8b4 	bl	800223c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d4:	003b      	movs	r3, r7
 80020d6:	2260      	movs	r2, #96	; 0x60
 80020d8:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 125-1;
 80020da:	003b      	movs	r3, r7
 80020dc:	227c      	movs	r2, #124	; 0x7c
 80020de:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e0:	003b      	movs	r3, r7
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e6:	003b      	movs	r3, r7
 80020e8:	2200      	movs	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ec:	0039      	movs	r1, r7
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <MX_TIM2_Init+0xb8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	0018      	movs	r0, r3
 80020f4:	f002 fbb8 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 80020f8:	1e03      	subs	r3, r0, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM2_Init+0xa8>
	{
		Error_Handler();
 80020fc:	f000 f89e 	bl	800223c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <MX_TIM2_Init+0xb8>)
 8002102:	0018      	movs	r0, r3
 8002104:	f000 f90e 	bl	8002324 <HAL_TIM_MspPostInit>

}
 8002108:	46c0      	nop			; (mov r8, r8)
 800210a:	46bd      	mov	sp, r7
 800210c:	b006      	add	sp, #24
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000238 	.word	0x20000238

08002114 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002118:	4b14      	ldr	r3, [pc, #80]	; (800216c <MX_USART1_UART_Init+0x58>)
 800211a:	4a15      	ldr	r2, [pc, #84]	; (8002170 <MX_USART1_UART_Init+0x5c>)
 800211c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800211e:	4b13      	ldr	r3, [pc, #76]	; (800216c <MX_USART1_UART_Init+0x58>)
 8002120:	2296      	movs	r2, #150	; 0x96
 8002122:	0192      	lsls	r2, r2, #6
 8002124:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <MX_USART1_UART_Init+0x58>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <MX_USART1_UART_Init+0x58>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <MX_USART1_UART_Init+0x58>)
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MX_USART1_UART_Init+0x58>)
 800213a:	220c      	movs	r2, #12
 800213c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <MX_USART1_UART_Init+0x58>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <MX_USART1_UART_Init+0x58>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <MX_USART1_UART_Init+0x58>)
 800214c:	2200      	movs	r2, #0
 800214e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <MX_USART1_UART_Init+0x58>)
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <MX_USART1_UART_Init+0x58>)
 8002158:	0018      	movs	r0, r3
 800215a:	f002 fe1f 	bl	8004d9c <HAL_UART_Init>
 800215e:	1e03      	subs	r3, r0, #0
 8002160:	d001      	beq.n	8002166 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8002162:	f000 f86b 	bl	800223c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000278 	.word	0x20000278
 8002170:	40013800 	.word	0x40013800

08002174 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217a:	240c      	movs	r4, #12
 800217c:	193b      	adds	r3, r7, r4
 800217e:	0018      	movs	r0, r3
 8002180:	2314      	movs	r3, #20
 8002182:	001a      	movs	r2, r3
 8002184:	2100      	movs	r1, #0
 8002186:	f003 fcc4 	bl	8005b12 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <MX_GPIO_Init+0xc0>)
 800218c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218e:	4b29      	ldr	r3, [pc, #164]	; (8002234 <MX_GPIO_Init+0xc0>)
 8002190:	2101      	movs	r1, #1
 8002192:	430a      	orrs	r2, r1
 8002194:	62da      	str	r2, [r3, #44]	; 0x2c
 8002196:	4b27      	ldr	r3, [pc, #156]	; (8002234 <MX_GPIO_Init+0xc0>)
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	2201      	movs	r2, #1
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <MX_GPIO_Init+0xc0>)
 80021a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a6:	4b23      	ldr	r3, [pc, #140]	; (8002234 <MX_GPIO_Init+0xc0>)
 80021a8:	2102      	movs	r1, #2
 80021aa:	430a      	orrs	r2, r1
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <MX_GPIO_Init+0xc0>)
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	2202      	movs	r2, #2
 80021b4:	4013      	ands	r3, r2
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80021ba:	23a0      	movs	r3, #160	; 0xa0
 80021bc:	05db      	lsls	r3, r3, #23
 80021be:	2200      	movs	r2, #0
 80021c0:	2138      	movs	r1, #56	; 0x38
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 fc6a 	bl	8002a9c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin */
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 80021c8:	193b      	adds	r3, r7, r4
 80021ca:	2207      	movs	r2, #7
 80021cc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ce:	193b      	adds	r3, r7, r4
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d4:	193b      	adds	r3, r7, r4
 80021d6:	2201      	movs	r2, #1
 80021d8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	193a      	adds	r2, r7, r4
 80021dc:	23a0      	movs	r3, #160	; 0xa0
 80021de:	05db      	lsls	r3, r3, #23
 80021e0:	0011      	movs	r1, r2
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 fae4 	bl	80027b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80021e8:	193b      	adds	r3, r7, r4
 80021ea:	2238      	movs	r2, #56	; 0x38
 80021ec:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ee:	193b      	adds	r3, r7, r4
 80021f0:	2201      	movs	r2, #1
 80021f2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	193b      	adds	r3, r7, r4
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	193a      	adds	r2, r7, r4
 8002202:	23a0      	movs	r3, #160	; 0xa0
 8002204:	05db      	lsls	r3, r3, #23
 8002206:	0011      	movs	r1, r2
 8002208:	0018      	movs	r0, r3
 800220a:	f000 fad1 	bl	80027b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 800220e:	193b      	adds	r3, r7, r4
 8002210:	220a      	movs	r2, #10
 8002212:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002214:	193b      	adds	r3, r7, r4
 8002216:	2200      	movs	r2, #0
 8002218:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	193b      	adds	r3, r7, r4
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002220:	193b      	adds	r3, r7, r4
 8002222:	4a05      	ldr	r2, [pc, #20]	; (8002238 <MX_GPIO_Init+0xc4>)
 8002224:	0019      	movs	r1, r3
 8002226:	0010      	movs	r0, r2
 8002228:	f000 fac2 	bl	80027b0 <HAL_GPIO_Init>

}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b009      	add	sp, #36	; 0x24
 8002232:	bd90      	pop	{r4, r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	50000400 	.word	0x50000400

0800223c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002240:	b672      	cpsid	i
}
 8002242:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002244:	e7fe      	b.n	8002244 <Error_Handler+0x8>
	...

08002248 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <HAL_MspInit+0x24>)
 800224e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_MspInit+0x24>)
 8002252:	2101      	movs	r1, #1
 8002254:	430a      	orrs	r2, r1
 8002256:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <HAL_MspInit+0x24>)
 800225a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_MspInit+0x24>)
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	0549      	lsls	r1, r1, #21
 8002262:	430a      	orrs	r2, r1
 8002264:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000

08002270 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	240c      	movs	r4, #12
 800227a:	193b      	adds	r3, r7, r4
 800227c:	0018      	movs	r0, r3
 800227e:	2314      	movs	r3, #20
 8002280:	001a      	movs	r2, r3
 8002282:	2100      	movs	r1, #0
 8002284:	f003 fc45 	bl	8005b12 <memset>
  if(hi2c->Instance==I2C1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a17      	ldr	r2, [pc, #92]	; (80022ec <HAL_I2C_MspInit+0x7c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d128      	bne.n	80022e4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_I2C_MspInit+0x80>)
 8002294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002296:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_I2C_MspInit+0x80>)
 8002298:	2102      	movs	r1, #2
 800229a:	430a      	orrs	r2, r1
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
 800229e:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <HAL_I2C_MspInit+0x80>)
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	2202      	movs	r2, #2
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022aa:	0021      	movs	r1, r4
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	22c0      	movs	r2, #192	; 0xc0
 80022b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b2:	187b      	adds	r3, r7, r1
 80022b4:	2212      	movs	r2, #18
 80022b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	187b      	adds	r3, r7, r1
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022be:	187b      	adds	r3, r7, r1
 80022c0:	2203      	movs	r2, #3
 80022c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	2201      	movs	r2, #1
 80022c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <HAL_I2C_MspInit+0x84>)
 80022ce:	0019      	movs	r1, r3
 80022d0:	0010      	movs	r0, r2
 80022d2:	f000 fa6d 	bl	80027b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_I2C_MspInit+0x80>)
 80022d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_I2C_MspInit+0x80>)
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	0389      	lsls	r1, r1, #14
 80022e0:	430a      	orrs	r2, r1
 80022e2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b009      	add	sp, #36	; 0x24
 80022ea:	bd90      	pop	{r4, r7, pc}
 80022ec:	40005400 	.word	0x40005400
 80022f0:	40021000 	.word	0x40021000
 80022f4:	50000400 	.word	0x50000400

080022f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	05db      	lsls	r3, r3, #23
 8002308:	429a      	cmp	r2, r3
 800230a:	d105      	bne.n	8002318 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <HAL_TIM_PWM_MspInit+0x28>)
 800230e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_TIM_PWM_MspInit+0x28>)
 8002312:	2101      	movs	r1, #1
 8002314:	430a      	orrs	r2, r1
 8002316:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b002      	add	sp, #8
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	240c      	movs	r4, #12
 800232e:	193b      	adds	r3, r7, r4
 8002330:	0018      	movs	r0, r3
 8002332:	2314      	movs	r3, #20
 8002334:	001a      	movs	r2, r3
 8002336:	2100      	movs	r1, #0
 8002338:	f003 fbeb 	bl	8005b12 <memset>
  if(htim->Instance==TIM2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	05db      	lsls	r3, r3, #23
 8002344:	429a      	cmp	r2, r3
 8002346:	d123      	bne.n	8002390 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_TIM_MspPostInit+0x74>)
 800234a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_TIM_MspPostInit+0x74>)
 800234e:	2101      	movs	r1, #1
 8002350:	430a      	orrs	r2, r1
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
 8002354:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_TIM_MspPostInit+0x74>)
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	2201      	movs	r2, #1
 800235a:	4013      	ands	r3, r2
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002360:	193b      	adds	r3, r7, r4
 8002362:	2280      	movs	r2, #128	; 0x80
 8002364:	0212      	lsls	r2, r2, #8
 8002366:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	0021      	movs	r1, r4
 800236a:	187b      	adds	r3, r7, r1
 800236c:	2202      	movs	r2, #2
 800236e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	187b      	adds	r3, r7, r1
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	187b      	adds	r3, r7, r1
 8002378:	2200      	movs	r2, #0
 800237a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800237c:	187b      	adds	r3, r7, r1
 800237e:	2205      	movs	r2, #5
 8002380:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002382:	187a      	adds	r2, r7, r1
 8002384:	23a0      	movs	r3, #160	; 0xa0
 8002386:	05db      	lsls	r3, r3, #23
 8002388:	0011      	movs	r1, r2
 800238a:	0018      	movs	r0, r3
 800238c:	f000 fa10 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b009      	add	sp, #36	; 0x24
 8002396:	bd90      	pop	{r4, r7, pc}
 8002398:	40021000 	.word	0x40021000

0800239c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	240c      	movs	r4, #12
 80023a6:	193b      	adds	r3, r7, r4
 80023a8:	0018      	movs	r0, r3
 80023aa:	2314      	movs	r3, #20
 80023ac:	001a      	movs	r2, r3
 80023ae:	2100      	movs	r1, #0
 80023b0:	f003 fbaf 	bl	8005b12 <memset>
  if(huart->Instance==USART1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a18      	ldr	r2, [pc, #96]	; (800241c <HAL_UART_MspInit+0x80>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d12a      	bne.n	8002414 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_UART_MspInit+0x84>)
 80023c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <HAL_UART_MspInit+0x84>)
 80023c4:	2180      	movs	r1, #128	; 0x80
 80023c6:	01c9      	lsls	r1, r1, #7
 80023c8:	430a      	orrs	r2, r1
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <HAL_UART_MspInit+0x84>)
 80023ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <HAL_UART_MspInit+0x84>)
 80023d2:	2101      	movs	r1, #1
 80023d4:	430a      	orrs	r2, r1
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_UART_MspInit+0x84>)
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	2201      	movs	r2, #1
 80023de:	4013      	ands	r3, r2
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80023e4:	193b      	adds	r3, r7, r4
 80023e6:	22c0      	movs	r2, #192	; 0xc0
 80023e8:	00d2      	lsls	r2, r2, #3
 80023ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	0021      	movs	r1, r4
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	2202      	movs	r2, #2
 80023f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fa:	187b      	adds	r3, r7, r1
 80023fc:	2203      	movs	r2, #3
 80023fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002400:	187b      	adds	r3, r7, r1
 8002402:	2204      	movs	r2, #4
 8002404:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	187a      	adds	r2, r7, r1
 8002408:	23a0      	movs	r3, #160	; 0xa0
 800240a:	05db      	lsls	r3, r3, #23
 800240c:	0011      	movs	r1, r2
 800240e:	0018      	movs	r0, r3
 8002410:	f000 f9ce 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b009      	add	sp, #36	; 0x24
 800241a:	bd90      	pop	{r4, r7, pc}
 800241c:	40013800 	.word	0x40013800
 8002420:	40021000 	.word	0x40021000

08002424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <NMI_Handler+0x4>

0800242a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <HardFault_Handler+0x4>

08002430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002448:	f000 f8be 	bl	80025c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800244c:	46c0      	nop			; (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <_sbrk+0x5c>)
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <_sbrk+0x60>)
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <_sbrk+0x64>)
 8002472:	4a12      	ldr	r2, [pc, #72]	; (80024bc <_sbrk+0x68>)
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	18d3      	adds	r3, r2, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d207      	bcs.n	8002494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002484:	f003 fb12 	bl	8005aac <__errno>
 8002488:	0003      	movs	r3, r0
 800248a:	220c      	movs	r2, #12
 800248c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800248e:	2301      	movs	r3, #1
 8002490:	425b      	negs	r3, r3
 8002492:	e009      	b.n	80024a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	18d2      	adds	r2, r2, r3
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <_sbrk+0x64>)
 80024a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80024a6:	68fb      	ldr	r3, [r7, #12]
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b006      	add	sp, #24
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20002000 	.word	0x20002000
 80024b4:	00000400 	.word	0x00000400
 80024b8:	20000384 	.word	0x20000384
 80024bc:	200003a0 	.word	0x200003a0

080024c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c4:	46c0      	nop			; (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80024ce:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80024d0:	f7ff fff6 	bl	80024c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d4:	480c      	ldr	r0, [pc, #48]	; (8002508 <LoopForever+0x6>)
  ldr r1, =_edata
 80024d6:	490d      	ldr	r1, [pc, #52]	; (800250c <LoopForever+0xa>)
  ldr r2, =_sidata
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <LoopForever+0xe>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024dc:	e002      	b.n	80024e4 <LoopCopyDataInit>

080024de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e2:	3304      	adds	r3, #4

080024e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e8:	d3f9      	bcc.n	80024de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024ec:	4c0a      	ldr	r4, [pc, #40]	; (8002518 <LoopForever+0x16>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f0:	e001      	b.n	80024f6 <LoopFillZerobss>

080024f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f4:	3204      	adds	r2, #4

080024f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f8:	d3fb      	bcc.n	80024f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024fa:	f003 fadd 	bl	8005ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024fe:	f7ff fc53 	bl	8001da8 <main>

08002502 <LoopForever>:

LoopForever:
    b LoopForever
 8002502:	e7fe      	b.n	8002502 <LoopForever>
   ldr   r0, =_estack
 8002504:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800250c:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8002510:	08006af8 	.word	0x08006af8
  ldr r2, =_sbss
 8002514:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8002518:	2000039c 	.word	0x2000039c

0800251c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800251c:	e7fe      	b.n	800251c <ADC1_COMP_IRQHandler>
	...

08002520 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002526:	1dfb      	adds	r3, r7, #7
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_Init+0x3c>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_Init+0x3c>)
 8002532:	2140      	movs	r1, #64	; 0x40
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002538:	2003      	movs	r0, #3
 800253a:	f000 f811 	bl	8002560 <HAL_InitTick>
 800253e:	1e03      	subs	r3, r0, #0
 8002540:	d003      	beq.n	800254a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002542:	1dfb      	adds	r3, r7, #7
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	e001      	b.n	800254e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800254a:	f7ff fe7d 	bl	8002248 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800254e:	1dfb      	adds	r3, r7, #7
 8002550:	781b      	ldrb	r3, [r3, #0]
}
 8002552:	0018      	movs	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	b002      	add	sp, #8
 8002558:	bd80      	pop	{r7, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	40022000 	.word	0x40022000

08002560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_InitTick+0x5c>)
 800256a:	681c      	ldr	r4, [r3, #0]
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_InitTick+0x60>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	0019      	movs	r1, r3
 8002572:	23fa      	movs	r3, #250	; 0xfa
 8002574:	0098      	lsls	r0, r3, #2
 8002576:	f7fd fdd9 	bl	800012c <__udivsi3>
 800257a:	0003      	movs	r3, r0
 800257c:	0019      	movs	r1, r3
 800257e:	0020      	movs	r0, r4
 8002580:	f7fd fdd4 	bl	800012c <__udivsi3>
 8002584:	0003      	movs	r3, r0
 8002586:	0018      	movs	r0, r3
 8002588:	f000 f905 	bl	8002796 <HAL_SYSTICK_Config>
 800258c:	1e03      	subs	r3, r0, #0
 800258e:	d001      	beq.n	8002594 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e00f      	b.n	80025b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d80b      	bhi.n	80025b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	2301      	movs	r3, #1
 800259e:	425b      	negs	r3, r3
 80025a0:	2200      	movs	r2, #0
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 f8e2 	bl	800276c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_InitTick+0x64>)
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b003      	add	sp, #12
 80025ba:	bd90      	pop	{r4, r7, pc}
 80025bc:	20000158 	.word	0x20000158
 80025c0:	20000160 	.word	0x20000160
 80025c4:	2000015c 	.word	0x2000015c

080025c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_IncTick+0x1c>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	001a      	movs	r2, r3
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_IncTick+0x20>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	18d2      	adds	r2, r2, r3
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_IncTick+0x20>)
 80025da:	601a      	str	r2, [r3, #0]
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	20000160 	.word	0x20000160
 80025e8:	20000388 	.word	0x20000388

080025ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  return uwTick;
 80025f0:	4b02      	ldr	r3, [pc, #8]	; (80025fc <HAL_GetTick+0x10>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	20000388 	.word	0x20000388

08002600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002608:	f7ff fff0 	bl	80025ec <HAL_GetTick>
 800260c:	0003      	movs	r3, r0
 800260e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3301      	adds	r3, #1
 8002618:	d005      	beq.n	8002626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_Delay+0x44>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	001a      	movs	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	189b      	adds	r3, r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	f7ff ffe0 	bl	80025ec <HAL_GetTick>
 800262c:	0002      	movs	r2, r0
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	429a      	cmp	r2, r3
 8002636:	d8f7      	bhi.n	8002628 <HAL_Delay+0x28>
  {
  }
}
 8002638:	46c0      	nop			; (mov r8, r8)
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	20000160 	.word	0x20000160

08002648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	0002      	movs	r2, r0
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	1dfb      	adds	r3, r7, #7
 8002654:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002656:	1dfb      	adds	r3, r7, #7
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b7f      	cmp	r3, #127	; 0x7f
 800265c:	d828      	bhi.n	80026b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800265e:	4a2f      	ldr	r2, [pc, #188]	; (800271c <__NVIC_SetPriority+0xd4>)
 8002660:	1dfb      	adds	r3, r7, #7
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	b25b      	sxtb	r3, r3
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	33c0      	adds	r3, #192	; 0xc0
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	589b      	ldr	r3, [r3, r2]
 800266e:	1dfa      	adds	r2, r7, #7
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	0011      	movs	r1, r2
 8002674:	2203      	movs	r2, #3
 8002676:	400a      	ands	r2, r1
 8002678:	00d2      	lsls	r2, r2, #3
 800267a:	21ff      	movs	r1, #255	; 0xff
 800267c:	4091      	lsls	r1, r2
 800267e:	000a      	movs	r2, r1
 8002680:	43d2      	mvns	r2, r2
 8002682:	401a      	ands	r2, r3
 8002684:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	019b      	lsls	r3, r3, #6
 800268a:	22ff      	movs	r2, #255	; 0xff
 800268c:	401a      	ands	r2, r3
 800268e:	1dfb      	adds	r3, r7, #7
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	0018      	movs	r0, r3
 8002694:	2303      	movs	r3, #3
 8002696:	4003      	ands	r3, r0
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800269c:	481f      	ldr	r0, [pc, #124]	; (800271c <__NVIC_SetPriority+0xd4>)
 800269e:	1dfb      	adds	r3, r7, #7
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	b25b      	sxtb	r3, r3
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	430a      	orrs	r2, r1
 80026a8:	33c0      	adds	r3, #192	; 0xc0
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80026ae:	e031      	b.n	8002714 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026b0:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <__NVIC_SetPriority+0xd8>)
 80026b2:	1dfb      	adds	r3, r7, #7
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	0019      	movs	r1, r3
 80026b8:	230f      	movs	r3, #15
 80026ba:	400b      	ands	r3, r1
 80026bc:	3b08      	subs	r3, #8
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3306      	adds	r3, #6
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	18d3      	adds	r3, r2, r3
 80026c6:	3304      	adds	r3, #4
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	1dfa      	adds	r2, r7, #7
 80026cc:	7812      	ldrb	r2, [r2, #0]
 80026ce:	0011      	movs	r1, r2
 80026d0:	2203      	movs	r2, #3
 80026d2:	400a      	ands	r2, r1
 80026d4:	00d2      	lsls	r2, r2, #3
 80026d6:	21ff      	movs	r1, #255	; 0xff
 80026d8:	4091      	lsls	r1, r2
 80026da:	000a      	movs	r2, r1
 80026dc:	43d2      	mvns	r2, r2
 80026de:	401a      	ands	r2, r3
 80026e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	019b      	lsls	r3, r3, #6
 80026e6:	22ff      	movs	r2, #255	; 0xff
 80026e8:	401a      	ands	r2, r3
 80026ea:	1dfb      	adds	r3, r7, #7
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	0018      	movs	r0, r3
 80026f0:	2303      	movs	r3, #3
 80026f2:	4003      	ands	r3, r0
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026f8:	4809      	ldr	r0, [pc, #36]	; (8002720 <__NVIC_SetPriority+0xd8>)
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	001c      	movs	r4, r3
 8002700:	230f      	movs	r3, #15
 8002702:	4023      	ands	r3, r4
 8002704:	3b08      	subs	r3, #8
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	430a      	orrs	r2, r1
 800270a:	3306      	adds	r3, #6
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	18c3      	adds	r3, r0, r3
 8002710:	3304      	adds	r3, #4
 8002712:	601a      	str	r2, [r3, #0]
}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b003      	add	sp, #12
 800271a:	bd90      	pop	{r4, r7, pc}
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	1e5a      	subs	r2, r3, #1
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	045b      	lsls	r3, r3, #17
 8002734:	429a      	cmp	r2, r3
 8002736:	d301      	bcc.n	800273c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002738:	2301      	movs	r3, #1
 800273a:	e010      	b.n	800275e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <SysTick_Config+0x44>)
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	3a01      	subs	r2, #1
 8002742:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002744:	2301      	movs	r3, #1
 8002746:	425b      	negs	r3, r3
 8002748:	2103      	movs	r1, #3
 800274a:	0018      	movs	r0, r3
 800274c:	f7ff ff7c 	bl	8002648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <SysTick_Config+0x44>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <SysTick_Config+0x44>)
 8002758:	2207      	movs	r2, #7
 800275a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800275c:	2300      	movs	r3, #0
}
 800275e:	0018      	movs	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	b002      	add	sp, #8
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	e000e010 	.word	0xe000e010

0800276c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	210f      	movs	r1, #15
 8002778:	187b      	adds	r3, r7, r1
 800277a:	1c02      	adds	r2, r0, #0
 800277c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	187b      	adds	r3, r7, r1
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b25b      	sxtb	r3, r3
 8002786:	0011      	movs	r1, r2
 8002788:	0018      	movs	r0, r3
 800278a:	f7ff ff5d 	bl	8002648 <__NVIC_SetPriority>
}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	b004      	add	sp, #16
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f7ff ffbf 	bl	8002724 <SysTick_Config>
 80027a6:	0003      	movs	r3, r0
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80027c6:	e14f      	b.n	8002a68 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2101      	movs	r1, #1
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4091      	lsls	r1, r2
 80027d2:	000a      	movs	r2, r1
 80027d4:	4013      	ands	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d100      	bne.n	80027e0 <HAL_GPIO_Init+0x30>
 80027de:	e140      	b.n	8002a62 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2203      	movs	r2, #3
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d005      	beq.n	80027f8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2203      	movs	r2, #3
 80027f2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d130      	bne.n	800285a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	409a      	lsls	r2, r3
 8002806:	0013      	movs	r3, r2
 8002808:	43da      	mvns	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	409a      	lsls	r2, r3
 800281a:	0013      	movs	r3, r2
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800282e:	2201      	movs	r2, #1
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	409a      	lsls	r2, r3
 8002834:	0013      	movs	r3, r2
 8002836:	43da      	mvns	r2, r3
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	2201      	movs	r2, #1
 8002846:	401a      	ands	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	409a      	lsls	r2, r3
 800284c:	0013      	movs	r3, r2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2203      	movs	r2, #3
 8002860:	4013      	ands	r3, r2
 8002862:	2b03      	cmp	r3, #3
 8002864:	d017      	beq.n	8002896 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	2203      	movs	r2, #3
 8002872:	409a      	lsls	r2, r3
 8002874:	0013      	movs	r3, r2
 8002876:	43da      	mvns	r2, r3
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	409a      	lsls	r2, r3
 8002888:	0013      	movs	r3, r2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2203      	movs	r2, #3
 800289c:	4013      	ands	r3, r2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d123      	bne.n	80028ea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	08da      	lsrs	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3208      	adds	r2, #8
 80028aa:	0092      	lsls	r2, r2, #2
 80028ac:	58d3      	ldr	r3, [r2, r3]
 80028ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2207      	movs	r2, #7
 80028b4:	4013      	ands	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	220f      	movs	r2, #15
 80028ba:	409a      	lsls	r2, r3
 80028bc:	0013      	movs	r3, r2
 80028be:	43da      	mvns	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2107      	movs	r1, #7
 80028ce:	400b      	ands	r3, r1
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	409a      	lsls	r2, r3
 80028d4:	0013      	movs	r3, r2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	08da      	lsrs	r2, r3, #3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3208      	adds	r2, #8
 80028e4:	0092      	lsls	r2, r2, #2
 80028e6:	6939      	ldr	r1, [r7, #16]
 80028e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	409a      	lsls	r2, r3
 80028f8:	0013      	movs	r3, r2
 80028fa:	43da      	mvns	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2203      	movs	r2, #3
 8002908:	401a      	ands	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	409a      	lsls	r2, r3
 8002910:	0013      	movs	r3, r2
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	23c0      	movs	r3, #192	; 0xc0
 8002924:	029b      	lsls	r3, r3, #10
 8002926:	4013      	ands	r3, r2
 8002928:	d100      	bne.n	800292c <HAL_GPIO_Init+0x17c>
 800292a:	e09a      	b.n	8002a62 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292c:	4b54      	ldr	r3, [pc, #336]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 800292e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_GPIO_Init+0x2d0>)
 8002932:	2101      	movs	r1, #1
 8002934:	430a      	orrs	r2, r1
 8002936:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002938:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_GPIO_Init+0x2d4>)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	3302      	adds	r3, #2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	589b      	ldr	r3, [r3, r2]
 8002944:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2203      	movs	r2, #3
 800294a:	4013      	ands	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	220f      	movs	r2, #15
 8002950:	409a      	lsls	r2, r3
 8002952:	0013      	movs	r3, r2
 8002954:	43da      	mvns	r2, r3
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	23a0      	movs	r3, #160	; 0xa0
 8002960:	05db      	lsls	r3, r3, #23
 8002962:	429a      	cmp	r2, r3
 8002964:	d019      	beq.n	800299a <HAL_GPIO_Init+0x1ea>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a47      	ldr	r2, [pc, #284]	; (8002a88 <HAL_GPIO_Init+0x2d8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d013      	beq.n	8002996 <HAL_GPIO_Init+0x1e6>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a46      	ldr	r2, [pc, #280]	; (8002a8c <HAL_GPIO_Init+0x2dc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00d      	beq.n	8002992 <HAL_GPIO_Init+0x1e2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a45      	ldr	r2, [pc, #276]	; (8002a90 <HAL_GPIO_Init+0x2e0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d007      	beq.n	800298e <HAL_GPIO_Init+0x1de>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a44      	ldr	r2, [pc, #272]	; (8002a94 <HAL_GPIO_Init+0x2e4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d101      	bne.n	800298a <HAL_GPIO_Init+0x1da>
 8002986:	2305      	movs	r3, #5
 8002988:	e008      	b.n	800299c <HAL_GPIO_Init+0x1ec>
 800298a:	2306      	movs	r3, #6
 800298c:	e006      	b.n	800299c <HAL_GPIO_Init+0x1ec>
 800298e:	2303      	movs	r3, #3
 8002990:	e004      	b.n	800299c <HAL_GPIO_Init+0x1ec>
 8002992:	2302      	movs	r3, #2
 8002994:	e002      	b.n	800299c <HAL_GPIO_Init+0x1ec>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_GPIO_Init+0x1ec>
 800299a:	2300      	movs	r3, #0
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	2103      	movs	r1, #3
 80029a0:	400a      	ands	r2, r1
 80029a2:	0092      	lsls	r2, r2, #2
 80029a4:	4093      	lsls	r3, r2
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029ac:	4935      	ldr	r1, [pc, #212]	; (8002a84 <HAL_GPIO_Init+0x2d4>)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ba:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <HAL_GPIO_Init+0x2e8>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	43da      	mvns	r2, r3
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	035b      	lsls	r3, r3, #13
 80029d2:	4013      	ands	r3, r2
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029de:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <HAL_GPIO_Init+0x2e8>)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80029e4:	4b2c      	ldr	r3, [pc, #176]	; (8002a98 <HAL_GPIO_Init+0x2e8>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	43da      	mvns	r2, r3
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4013      	ands	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	039b      	lsls	r3, r3, #14
 80029fc:	4013      	ands	r3, r2
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a08:	4b23      	ldr	r3, [pc, #140]	; (8002a98 <HAL_GPIO_Init+0x2e8>)
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_GPIO_Init+0x2e8>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43da      	mvns	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	029b      	lsls	r3, r3, #10
 8002a26:	4013      	ands	r3, r2
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_GPIO_Init+0x2e8>)
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a38:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <HAL_GPIO_Init+0x2e8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43da      	mvns	r2, r3
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	025b      	lsls	r3, r3, #9
 8002a50:	4013      	ands	r3, r2
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_GPIO_Init+0x2e8>)
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3301      	adds	r3, #1
 8002a66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	40da      	lsrs	r2, r3
 8002a70:	1e13      	subs	r3, r2, #0
 8002a72:	d000      	beq.n	8002a76 <HAL_GPIO_Init+0x2c6>
 8002a74:	e6a8      	b.n	80027c8 <HAL_GPIO_Init+0x18>
  }
}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b006      	add	sp, #24
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40010000 	.word	0x40010000
 8002a88:	50000400 	.word	0x50000400
 8002a8c:	50000800 	.word	0x50000800
 8002a90:	50000c00 	.word	0x50000c00
 8002a94:	50001c00 	.word	0x50001c00
 8002a98:	40010400 	.word	0x40010400

08002a9c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	0008      	movs	r0, r1
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	1cbb      	adds	r3, r7, #2
 8002aaa:	1c02      	adds	r2, r0, #0
 8002aac:	801a      	strh	r2, [r3, #0]
 8002aae:	1c7b      	adds	r3, r7, #1
 8002ab0:	1c0a      	adds	r2, r1, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ab4:	1c7b      	adds	r3, r7, #1
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d004      	beq.n	8002ac6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002abc:	1cbb      	adds	r3, r7, #2
 8002abe:	881a      	ldrh	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002ac4:	e003      	b.n	8002ace <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002ac6:	1cbb      	adds	r3, r7, #2
 8002ac8:	881a      	ldrh	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b002      	add	sp, #8
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e082      	b.n	8002bf0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2241      	movs	r2, #65	; 0x41
 8002aee:	5c9b      	ldrb	r3, [r3, r2]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d107      	bne.n	8002b06 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2240      	movs	r2, #64	; 0x40
 8002afa:	2100      	movs	r1, #0
 8002afc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7ff fbb5 	bl	8002270 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2241      	movs	r2, #65	; 0x41
 8002b0a:	2124      	movs	r1, #36	; 0x24
 8002b0c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	438a      	bics	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4934      	ldr	r1, [pc, #208]	; (8002bf8 <HAL_I2C_Init+0x120>)
 8002b28:	400a      	ands	r2, r1
 8002b2a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4931      	ldr	r1, [pc, #196]	; (8002bfc <HAL_I2C_Init+0x124>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d108      	bne.n	8002b56 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	0209      	lsls	r1, r1, #8
 8002b50:	430a      	orrs	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	e007      	b.n	8002b66 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2184      	movs	r1, #132	; 0x84
 8002b60:	0209      	lsls	r1, r1, #8
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d104      	bne.n	8002b78 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	0112      	lsls	r2, r2, #4
 8002b76:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	491f      	ldr	r1, [pc, #124]	; (8002c00 <HAL_I2C_Init+0x128>)
 8002b84:	430a      	orrs	r2, r1
 8002b86:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	491a      	ldr	r1, [pc, #104]	; (8002bfc <HAL_I2C_Init+0x124>)
 8002b94:	400a      	ands	r2, r1
 8002b96:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69d9      	ldr	r1, [r3, #28]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1a      	ldr	r2, [r3, #32]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2241      	movs	r2, #65	; 0x41
 8002bdc:	2120      	movs	r1, #32
 8002bde:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2242      	movs	r2, #66	; 0x42
 8002bea:	2100      	movs	r1, #0
 8002bec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	f0ffffff 	.word	0xf0ffffff
 8002bfc:	ffff7fff 	.word	0xffff7fff
 8002c00:	02008000 	.word	0x02008000

08002c04 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	000c      	movs	r4, r1
 8002c0e:	0010      	movs	r0, r2
 8002c10:	0019      	movs	r1, r3
 8002c12:	230a      	movs	r3, #10
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	1c22      	adds	r2, r4, #0
 8002c18:	801a      	strh	r2, [r3, #0]
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	1c02      	adds	r2, r0, #0
 8002c20:	801a      	strh	r2, [r3, #0]
 8002c22:	1dbb      	adds	r3, r7, #6
 8002c24:	1c0a      	adds	r2, r1, #0
 8002c26:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2241      	movs	r2, #65	; 0x41
 8002c2c:	5c9b      	ldrb	r3, [r3, r2]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d000      	beq.n	8002c36 <HAL_I2C_Mem_Write+0x32>
 8002c34:	e10c      	b.n	8002e50 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d004      	beq.n	8002c46 <HAL_I2C_Mem_Write+0x42>
 8002c3c:	232c      	movs	r3, #44	; 0x2c
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2280      	movs	r2, #128	; 0x80
 8002c4a:	0092      	lsls	r2, r2, #2
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e0ff      	b.n	8002e52 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2240      	movs	r2, #64	; 0x40
 8002c56:	5c9b      	ldrb	r3, [r3, r2]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_I2C_Mem_Write+0x5c>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e0f8      	b.n	8002e52 <HAL_I2C_Mem_Write+0x24e>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2240      	movs	r2, #64	; 0x40
 8002c64:	2101      	movs	r1, #1
 8002c66:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c68:	f7ff fcc0 	bl	80025ec <HAL_GetTick>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	0219      	lsls	r1, r3, #8
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2319      	movs	r3, #25
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f000 fb0b 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002c82:	1e03      	subs	r3, r0, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0e3      	b.n	8002e52 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2241      	movs	r2, #65	; 0x41
 8002c8e:	2121      	movs	r1, #33	; 0x21
 8002c90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2242      	movs	r2, #66	; 0x42
 8002c96:	2140      	movs	r1, #64	; 0x40
 8002c98:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	222c      	movs	r2, #44	; 0x2c
 8002caa:	18ba      	adds	r2, r7, r2
 8002cac:	8812      	ldrh	r2, [r2, #0]
 8002cae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cb6:	1dbb      	adds	r3, r7, #6
 8002cb8:	881c      	ldrh	r4, [r3, #0]
 8002cba:	2308      	movs	r3, #8
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	881a      	ldrh	r2, [r3, #0]
 8002cc0:	230a      	movs	r3, #10
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	8819      	ldrh	r1, [r3, #0]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	9301      	str	r3, [sp, #4]
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	0023      	movs	r3, r4
 8002cd2:	f000 f9f9 	bl	80030c8 <I2C_RequestMemoryWrite>
 8002cd6:	1e03      	subs	r3, r0, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2240      	movs	r2, #64	; 0x40
 8002cde:	2100      	movs	r1, #0
 8002ce0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e0b5      	b.n	8002e52 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2bff      	cmp	r3, #255	; 0xff
 8002cee:	d911      	bls.n	8002d14 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	22ff      	movs	r2, #255	; 0xff
 8002cf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	045c      	lsls	r4, r3, #17
 8002d00:	230a      	movs	r3, #10
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	8819      	ldrh	r1, [r3, #0]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	0023      	movs	r3, r4
 8002d0e:	f000 fc9b 	bl	8003648 <I2C_TransferConfig>
 8002d12:	e012      	b.n	8002d3a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	049c      	lsls	r4, r3, #18
 8002d28:	230a      	movs	r3, #10
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	8819      	ldrh	r1, [r3, #0]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	2300      	movs	r3, #0
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	0023      	movs	r3, r4
 8002d36:	f000 fc87 	bl	8003648 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f000 faf7 	bl	8003334 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d46:	1e03      	subs	r3, r0, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e081      	b.n	8002e52 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d03a      	beq.n	8002dfe <HAL_I2C_Mem_Write+0x1fa>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d136      	bne.n	8002dfe <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	0013      	movs	r3, r2
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	f000 fa7b 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e053      	b.n	8002e52 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2bff      	cmp	r3, #255	; 0xff
 8002db2:	d911      	bls.n	8002dd8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	22ff      	movs	r2, #255	; 0xff
 8002db8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	045c      	lsls	r4, r3, #17
 8002dc4:	230a      	movs	r3, #10
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	8819      	ldrh	r1, [r3, #0]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	0023      	movs	r3, r4
 8002dd2:	f000 fc39 	bl	8003648 <I2C_TransferConfig>
 8002dd6:	e012      	b.n	8002dfe <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	049c      	lsls	r4, r3, #18
 8002dec:	230a      	movs	r3, #10
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	8819      	ldrh	r1, [r3, #0]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	2300      	movs	r3, #0
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	0023      	movs	r3, r4
 8002dfa:	f000 fc25 	bl	8003648 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d198      	bne.n	8002d3a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 fad6 	bl	80033c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e14:	1e03      	subs	r3, r0, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e01a      	b.n	8002e52 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2220      	movs	r2, #32
 8002e22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	490b      	ldr	r1, [pc, #44]	; (8002e5c <HAL_I2C_Mem_Write+0x258>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2241      	movs	r2, #65	; 0x41
 8002e38:	2120      	movs	r1, #32
 8002e3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2242      	movs	r2, #66	; 0x42
 8002e40:	2100      	movs	r1, #0
 8002e42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2240      	movs	r2, #64	; 0x40
 8002e48:	2100      	movs	r1, #0
 8002e4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e000      	b.n	8002e52 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
  }
}
 8002e52:	0018      	movs	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b007      	add	sp, #28
 8002e58:	bd90      	pop	{r4, r7, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	fe00e800 	.word	0xfe00e800

08002e60 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	000c      	movs	r4, r1
 8002e6a:	0010      	movs	r0, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	230a      	movs	r3, #10
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	1c22      	adds	r2, r4, #0
 8002e74:	801a      	strh	r2, [r3, #0]
 8002e76:	2308      	movs	r3, #8
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	1c02      	adds	r2, r0, #0
 8002e7c:	801a      	strh	r2, [r3, #0]
 8002e7e:	1dbb      	adds	r3, r7, #6
 8002e80:	1c0a      	adds	r2, r1, #0
 8002e82:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2241      	movs	r2, #65	; 0x41
 8002e88:	5c9b      	ldrb	r3, [r3, r2]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d000      	beq.n	8002e92 <HAL_I2C_Mem_Read+0x32>
 8002e90:	e110      	b.n	80030b4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d004      	beq.n	8002ea2 <HAL_I2C_Mem_Read+0x42>
 8002e98:	232c      	movs	r3, #44	; 0x2c
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d105      	bne.n	8002eae <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e103      	b.n	80030b6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2240      	movs	r2, #64	; 0x40
 8002eb2:	5c9b      	ldrb	r3, [r3, r2]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_I2C_Mem_Read+0x5c>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e0fc      	b.n	80030b6 <HAL_I2C_Mem_Read+0x256>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2240      	movs	r2, #64	; 0x40
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ec4:	f7ff fb92 	bl	80025ec <HAL_GetTick>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	0219      	lsls	r1, r3, #8
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2319      	movs	r3, #25
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f000 f9dd 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002ede:	1e03      	subs	r3, r0, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0e7      	b.n	80030b6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2241      	movs	r2, #65	; 0x41
 8002eea:	2122      	movs	r1, #34	; 0x22
 8002eec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2242      	movs	r2, #66	; 0x42
 8002ef2:	2140      	movs	r1, #64	; 0x40
 8002ef4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	222c      	movs	r2, #44	; 0x2c
 8002f06:	18ba      	adds	r2, r7, r2
 8002f08:	8812      	ldrh	r2, [r2, #0]
 8002f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f12:	1dbb      	adds	r3, r7, #6
 8002f14:	881c      	ldrh	r4, [r3, #0]
 8002f16:	2308      	movs	r3, #8
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	881a      	ldrh	r2, [r3, #0]
 8002f1c:	230a      	movs	r3, #10
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	8819      	ldrh	r1, [r3, #0]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	0023      	movs	r3, r4
 8002f2e:	f000 f92f 	bl	8003190 <I2C_RequestMemoryRead>
 8002f32:	1e03      	subs	r3, r0, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2240      	movs	r2, #64	; 0x40
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0b9      	b.n	80030b6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2bff      	cmp	r3, #255	; 0xff
 8002f4a:	d911      	bls.n	8002f70 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	22ff      	movs	r2, #255	; 0xff
 8002f50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	045c      	lsls	r4, r3, #17
 8002f5c:	230a      	movs	r3, #10
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	8819      	ldrh	r1, [r3, #0]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	4b56      	ldr	r3, [pc, #344]	; (80030c0 <HAL_I2C_Mem_Read+0x260>)
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	0023      	movs	r3, r4
 8002f6a:	f000 fb6d 	bl	8003648 <I2C_TransferConfig>
 8002f6e:	e012      	b.n	8002f96 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	049c      	lsls	r4, r3, #18
 8002f84:	230a      	movs	r3, #10
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	8819      	ldrh	r1, [r3, #0]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	4b4c      	ldr	r3, [pc, #304]	; (80030c0 <HAL_I2C_Mem_Read+0x260>)
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	0023      	movs	r3, r4
 8002f92:	f000 fb59 	bl	8003648 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	0013      	movs	r3, r2
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2104      	movs	r1, #4
 8002fa4:	f000 f978 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	1e03      	subs	r3, r0, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e082      	b.n	80030b6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d03a      	beq.n	8003062 <HAL_I2C_Mem_Read+0x202>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d136      	bne.n	8003062 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	0013      	movs	r3, r2
 8002ffe:	2200      	movs	r2, #0
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	f000 f949 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8003006:	1e03      	subs	r3, r0, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e053      	b.n	80030b6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	2bff      	cmp	r3, #255	; 0xff
 8003016:	d911      	bls.n	800303c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	22ff      	movs	r2, #255	; 0xff
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	b2da      	uxtb	r2, r3
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	045c      	lsls	r4, r3, #17
 8003028:	230a      	movs	r3, #10
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	8819      	ldrh	r1, [r3, #0]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	2300      	movs	r3, #0
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	0023      	movs	r3, r4
 8003036:	f000 fb07 	bl	8003648 <I2C_TransferConfig>
 800303a:	e012      	b.n	8003062 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	b2da      	uxtb	r2, r3
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	049c      	lsls	r4, r3, #18
 8003050:	230a      	movs	r3, #10
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	8819      	ldrh	r1, [r3, #0]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	2300      	movs	r3, #0
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	0023      	movs	r3, r4
 800305e:	f000 faf3 	bl	8003648 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d194      	bne.n	8002f96 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	0018      	movs	r0, r3
 8003074:	f000 f9a4 	bl	80033c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003078:	1e03      	subs	r3, r0, #0
 800307a:	d001      	beq.n	8003080 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e01a      	b.n	80030b6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2220      	movs	r2, #32
 8003086:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	490c      	ldr	r1, [pc, #48]	; (80030c4 <HAL_I2C_Mem_Read+0x264>)
 8003094:	400a      	ands	r2, r1
 8003096:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2241      	movs	r2, #65	; 0x41
 800309c:	2120      	movs	r1, #32
 800309e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2242      	movs	r2, #66	; 0x42
 80030a4:	2100      	movs	r1, #0
 80030a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2240      	movs	r2, #64	; 0x40
 80030ac:	2100      	movs	r1, #0
 80030ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e000      	b.n	80030b6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
  }
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b007      	add	sp, #28
 80030bc:	bd90      	pop	{r4, r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	80002400 	.word	0x80002400
 80030c4:	fe00e800 	.word	0xfe00e800

080030c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80030c8:	b5b0      	push	{r4, r5, r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	000c      	movs	r4, r1
 80030d2:	0010      	movs	r0, r2
 80030d4:	0019      	movs	r1, r3
 80030d6:	250a      	movs	r5, #10
 80030d8:	197b      	adds	r3, r7, r5
 80030da:	1c22      	adds	r2, r4, #0
 80030dc:	801a      	strh	r2, [r3, #0]
 80030de:	2308      	movs	r3, #8
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	1c02      	adds	r2, r0, #0
 80030e4:	801a      	strh	r2, [r3, #0]
 80030e6:	1dbb      	adds	r3, r7, #6
 80030e8:	1c0a      	adds	r2, r1, #0
 80030ea:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030ec:	1dbb      	adds	r3, r7, #6
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	045c      	lsls	r4, r3, #17
 80030f6:	197b      	adds	r3, r7, r5
 80030f8:	8819      	ldrh	r1, [r3, #0]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	4b23      	ldr	r3, [pc, #140]	; (800318c <I2C_RequestMemoryWrite+0xc4>)
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	0023      	movs	r3, r4
 8003102:	f000 faa1 	bl	8003648 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003108:	6a39      	ldr	r1, [r7, #32]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	0018      	movs	r0, r3
 800310e:	f000 f911 	bl	8003334 <I2C_WaitOnTXISFlagUntilTimeout>
 8003112:	1e03      	subs	r3, r0, #0
 8003114:	d001      	beq.n	800311a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e033      	b.n	8003182 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800311a:	1dbb      	adds	r3, r7, #6
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003122:	2308      	movs	r3, #8
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
 8003130:	e019      	b.n	8003166 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003132:	2308      	movs	r3, #8
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	0a1b      	lsrs	r3, r3, #8
 800313a:	b29b      	uxth	r3, r3
 800313c:	b2da      	uxtb	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003146:	6a39      	ldr	r1, [r7, #32]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	0018      	movs	r0, r3
 800314c:	f000 f8f2 	bl	8003334 <I2C_WaitOnTXISFlagUntilTimeout>
 8003150:	1e03      	subs	r3, r0, #0
 8003152:	d001      	beq.n	8003158 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e014      	b.n	8003182 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003158:	2308      	movs	r3, #8
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003166:	6a3a      	ldr	r2, [r7, #32]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	0013      	movs	r3, r2
 8003170:	2200      	movs	r2, #0
 8003172:	2180      	movs	r1, #128	; 0x80
 8003174:	f000 f890 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8003178:	1e03      	subs	r3, r0, #0
 800317a:	d001      	beq.n	8003180 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b004      	add	sp, #16
 8003188:	bdb0      	pop	{r4, r5, r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	80002000 	.word	0x80002000

08003190 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003190:	b5b0      	push	{r4, r5, r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	000c      	movs	r4, r1
 800319a:	0010      	movs	r0, r2
 800319c:	0019      	movs	r1, r3
 800319e:	250a      	movs	r5, #10
 80031a0:	197b      	adds	r3, r7, r5
 80031a2:	1c22      	adds	r2, r4, #0
 80031a4:	801a      	strh	r2, [r3, #0]
 80031a6:	2308      	movs	r3, #8
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	1c02      	adds	r2, r0, #0
 80031ac:	801a      	strh	r2, [r3, #0]
 80031ae:	1dbb      	adds	r3, r7, #6
 80031b0:	1c0a      	adds	r2, r1, #0
 80031b2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80031b4:	1dbb      	adds	r3, r7, #6
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	197b      	adds	r3, r7, r5
 80031bc:	8819      	ldrh	r1, [r3, #0]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	4b23      	ldr	r3, [pc, #140]	; (8003250 <I2C_RequestMemoryRead+0xc0>)
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	2300      	movs	r3, #0
 80031c6:	f000 fa3f 	bl	8003648 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	6a39      	ldr	r1, [r7, #32]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f000 f8af 	bl	8003334 <I2C_WaitOnTXISFlagUntilTimeout>
 80031d6:	1e03      	subs	r3, r0, #0
 80031d8:	d001      	beq.n	80031de <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e033      	b.n	8003246 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031de:	1dbb      	adds	r3, r7, #6
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d107      	bne.n	80031f6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031e6:	2308      	movs	r3, #8
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
 80031f4:	e019      	b.n	800322a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031f6:	2308      	movs	r3, #8
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	b29b      	uxth	r3, r3
 8003200:	b2da      	uxtb	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320a:	6a39      	ldr	r1, [r7, #32]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	0018      	movs	r0, r3
 8003210:	f000 f890 	bl	8003334 <I2C_WaitOnTXISFlagUntilTimeout>
 8003214:	1e03      	subs	r3, r0, #0
 8003216:	d001      	beq.n	800321c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e014      	b.n	8003246 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800321c:	2308      	movs	r3, #8
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800322a:	6a3a      	ldr	r2, [r7, #32]
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	0013      	movs	r3, r2
 8003234:	2200      	movs	r2, #0
 8003236:	2140      	movs	r1, #64	; 0x40
 8003238:	f000 f82e 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 800323c:	1e03      	subs	r3, r0, #0
 800323e:	d001      	beq.n	8003244 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	0018      	movs	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	b004      	add	sp, #16
 800324c:	bdb0      	pop	{r4, r5, r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	80002000 	.word	0x80002000

08003254 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2202      	movs	r2, #2
 8003264:	4013      	ands	r3, r2
 8003266:	2b02      	cmp	r3, #2
 8003268:	d103      	bne.n	8003272 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2201      	movs	r2, #1
 800327a:	4013      	ands	r3, r2
 800327c:	2b01      	cmp	r3, #1
 800327e:	d007      	beq.n	8003290 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2101      	movs	r1, #1
 800328c:	430a      	orrs	r2, r1
 800328e:	619a      	str	r2, [r3, #24]
  }
}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b002      	add	sp, #8
 8003296:	bd80      	pop	{r7, pc}

08003298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	1dfb      	adds	r3, r7, #7
 80032a6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a8:	e030      	b.n	800330c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	d02d      	beq.n	800330c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b0:	f7ff f99c 	bl	80025ec <HAL_GetTick>
 80032b4:	0002      	movs	r2, r0
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d302      	bcc.n	80032c6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d122      	bne.n	800330c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	4013      	ands	r3, r2
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	425a      	negs	r2, r3
 80032d6:	4153      	adcs	r3, r2
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	001a      	movs	r2, r3
 80032dc:	1dfb      	adds	r3, r7, #7
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d113      	bne.n	800330c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	2220      	movs	r2, #32
 80032ea:	431a      	orrs	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2241      	movs	r2, #65	; 0x41
 80032f4:	2120      	movs	r1, #32
 80032f6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2242      	movs	r2, #66	; 0x42
 80032fc:	2100      	movs	r1, #0
 80032fe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2240      	movs	r2, #64	; 0x40
 8003304:	2100      	movs	r1, #0
 8003306:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e00f      	b.n	800332c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	4013      	ands	r3, r2
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	425a      	negs	r2, r3
 800331c:	4153      	adcs	r3, r2
 800331e:	b2db      	uxtb	r3, r3
 8003320:	001a      	movs	r2, r3
 8003322:	1dfb      	adds	r3, r7, #7
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d0bf      	beq.n	80032aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	0018      	movs	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	b004      	add	sp, #16
 8003332:	bd80      	pop	{r7, pc}

08003334 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003340:	e032      	b.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	0018      	movs	r0, r3
 800334a:	f000 f87d 	bl	8003448 <I2C_IsErrorOccurred>
 800334e:	1e03      	subs	r3, r0, #0
 8003350:	d001      	beq.n	8003356 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e030      	b.n	80033b8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	3301      	adds	r3, #1
 800335a:	d025      	beq.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335c:	f7ff f946 	bl	80025ec <HAL_GetTick>
 8003360:	0002      	movs	r2, r0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	d302      	bcc.n	8003372 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d11a      	bne.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	2202      	movs	r2, #2
 800337a:	4013      	ands	r3, r2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d013      	beq.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	2220      	movs	r2, #32
 8003386:	431a      	orrs	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2241      	movs	r2, #65	; 0x41
 8003390:	2120      	movs	r1, #32
 8003392:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2242      	movs	r2, #66	; 0x42
 8003398:	2100      	movs	r1, #0
 800339a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2240      	movs	r2, #64	; 0x40
 80033a0:	2100      	movs	r1, #0
 80033a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e007      	b.n	80033b8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2202      	movs	r2, #2
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d1c5      	bne.n	8003342 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	0018      	movs	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b004      	add	sp, #16
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033cc:	e02f      	b.n	800342e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f000 f837 	bl	8003448 <I2C_IsErrorOccurred>
 80033da:	1e03      	subs	r3, r0, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e02d      	b.n	800343e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7ff f903 	bl	80025ec <HAL_GetTick>
 80033e6:	0002      	movs	r2, r0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d11a      	bne.n	800342e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2220      	movs	r2, #32
 8003400:	4013      	ands	r3, r2
 8003402:	2b20      	cmp	r3, #32
 8003404:	d013      	beq.n	800342e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	2220      	movs	r2, #32
 800340c:	431a      	orrs	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2241      	movs	r2, #65	; 0x41
 8003416:	2120      	movs	r1, #32
 8003418:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2242      	movs	r2, #66	; 0x42
 800341e:	2100      	movs	r1, #0
 8003420:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2240      	movs	r2, #64	; 0x40
 8003426:	2100      	movs	r1, #0
 8003428:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e007      	b.n	800343e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2220      	movs	r2, #32
 8003436:	4013      	ands	r3, r2
 8003438:	2b20      	cmp	r3, #32
 800343a:	d1c8      	bne.n	80033ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	0018      	movs	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	b004      	add	sp, #16
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003454:	2327      	movs	r3, #39	; 0x27
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2210      	movs	r2, #16
 8003470:	4013      	ands	r3, r2
 8003472:	d100      	bne.n	8003476 <I2C_IsErrorOccurred+0x2e>
 8003474:	e082      	b.n	800357c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2210      	movs	r2, #16
 800347c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800347e:	e060      	b.n	8003542 <I2C_IsErrorOccurred+0xfa>
 8003480:	2427      	movs	r4, #39	; 0x27
 8003482:	193b      	adds	r3, r7, r4
 8003484:	193a      	adds	r2, r7, r4
 8003486:	7812      	ldrb	r2, [r2, #0]
 8003488:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	3301      	adds	r3, #1
 800348e:	d058      	beq.n	8003542 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003490:	f7ff f8ac 	bl	80025ec <HAL_GetTick>
 8003494:	0002      	movs	r2, r0
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	429a      	cmp	r2, r3
 800349e:	d306      	bcc.n	80034ae <I2C_IsErrorOccurred+0x66>
 80034a0:	193b      	adds	r3, r7, r4
 80034a2:	193a      	adds	r2, r7, r4
 80034a4:	7812      	ldrb	r2, [r2, #0]
 80034a6:	701a      	strb	r2, [r3, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d149      	bne.n	8003542 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	01db      	lsls	r3, r3, #7
 80034b8:	4013      	ands	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034bc:	2013      	movs	r0, #19
 80034be:	183b      	adds	r3, r7, r0
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	2142      	movs	r1, #66	; 0x42
 80034c4:	5c52      	ldrb	r2, [r2, r1]
 80034c6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	401a      	ands	r2, r3
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	429a      	cmp	r2, r3
 80034da:	d126      	bne.n	800352a <I2C_IsErrorOccurred+0xe2>
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	01db      	lsls	r3, r3, #7
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d021      	beq.n	800352a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80034e6:	183b      	adds	r3, r7, r0
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d01d      	beq.n	800352a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2180      	movs	r1, #128	; 0x80
 80034fa:	01c9      	lsls	r1, r1, #7
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003500:	f7ff f874 	bl	80025ec <HAL_GetTick>
 8003504:	0003      	movs	r3, r0
 8003506:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003508:	e00f      	b.n	800352a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800350a:	f7ff f86f 	bl	80025ec <HAL_GetTick>
 800350e:	0002      	movs	r2, r0
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b19      	cmp	r3, #25
 8003516:	d908      	bls.n	800352a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	2220      	movs	r2, #32
 800351c:	4313      	orrs	r3, r2
 800351e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003520:	2327      	movs	r3, #39	; 0x27
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]

              break;
 8003528:	e00b      	b.n	8003542 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2220      	movs	r2, #32
 8003532:	4013      	ands	r3, r2
 8003534:	2127      	movs	r1, #39	; 0x27
 8003536:	187a      	adds	r2, r7, r1
 8003538:	1879      	adds	r1, r7, r1
 800353a:	7809      	ldrb	r1, [r1, #0]
 800353c:	7011      	strb	r1, [r2, #0]
 800353e:	2b20      	cmp	r3, #32
 8003540:	d1e3      	bne.n	800350a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2220      	movs	r2, #32
 800354a:	4013      	ands	r3, r2
 800354c:	2b20      	cmp	r3, #32
 800354e:	d004      	beq.n	800355a <I2C_IsErrorOccurred+0x112>
 8003550:	2327      	movs	r3, #39	; 0x27
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d092      	beq.n	8003480 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800355a:	2327      	movs	r3, #39	; 0x27
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d103      	bne.n	800356c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2220      	movs	r2, #32
 800356a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	2204      	movs	r2, #4
 8003570:	4313      	orrs	r3, r2
 8003572:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003574:	2327      	movs	r3, #39	; 0x27
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	2380      	movs	r3, #128	; 0x80
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4013      	ands	r3, r2
 800358c:	d00c      	beq.n	80035a8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	2201      	movs	r2, #1
 8003592:	4313      	orrs	r3, r2
 8003594:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	0052      	lsls	r2, r2, #1
 800359e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035a0:	2327      	movs	r3, #39	; 0x27
 80035a2:	18fb      	adds	r3, r7, r3
 80035a4:	2201      	movs	r2, #1
 80035a6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4013      	ands	r3, r2
 80035b0:	d00c      	beq.n	80035cc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	2208      	movs	r2, #8
 80035b6:	4313      	orrs	r3, r2
 80035b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2280      	movs	r2, #128	; 0x80
 80035c0:	00d2      	lsls	r2, r2, #3
 80035c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035c4:	2327      	movs	r3, #39	; 0x27
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4013      	ands	r3, r2
 80035d4:	d00c      	beq.n	80035f0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	2202      	movs	r2, #2
 80035da:	4313      	orrs	r3, r2
 80035dc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2280      	movs	r2, #128	; 0x80
 80035e4:	0092      	lsls	r2, r2, #2
 80035e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035e8:	2327      	movs	r3, #39	; 0x27
 80035ea:	18fb      	adds	r3, r7, r3
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80035f0:	2327      	movs	r3, #39	; 0x27
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01d      	beq.n	8003636 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	0018      	movs	r0, r3
 80035fe:	f7ff fe29 	bl	8003254 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	490d      	ldr	r1, [pc, #52]	; (8003644 <I2C_IsErrorOccurred+0x1fc>)
 800360e:	400a      	ands	r2, r1
 8003610:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	431a      	orrs	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2241      	movs	r2, #65	; 0x41
 8003622:	2120      	movs	r1, #32
 8003624:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2242      	movs	r2, #66	; 0x42
 800362a:	2100      	movs	r1, #0
 800362c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2240      	movs	r2, #64	; 0x40
 8003632:	2100      	movs	r1, #0
 8003634:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003636:	2327      	movs	r3, #39	; 0x27
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	781b      	ldrb	r3, [r3, #0]
}
 800363c:	0018      	movs	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	b00b      	add	sp, #44	; 0x2c
 8003642:	bd90      	pop	{r4, r7, pc}
 8003644:	fe00e800 	.word	0xfe00e800

08003648 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	0008      	movs	r0, r1
 8003652:	0011      	movs	r1, r2
 8003654:	607b      	str	r3, [r7, #4]
 8003656:	240a      	movs	r4, #10
 8003658:	193b      	adds	r3, r7, r4
 800365a:	1c02      	adds	r2, r0, #0
 800365c:	801a      	strh	r2, [r3, #0]
 800365e:	2009      	movs	r0, #9
 8003660:	183b      	adds	r3, r7, r0
 8003662:	1c0a      	adds	r2, r1, #0
 8003664:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003666:	193b      	adds	r3, r7, r4
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	059b      	lsls	r3, r3, #22
 800366c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800366e:	183b      	adds	r3, r7, r0
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	0419      	lsls	r1, r3, #16
 8003674:	23ff      	movs	r3, #255	; 0xff
 8003676:	041b      	lsls	r3, r3, #16
 8003678:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800367a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	4313      	orrs	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003692:	0d51      	lsrs	r1, r2, #21
 8003694:	2280      	movs	r2, #128	; 0x80
 8003696:	00d2      	lsls	r2, r2, #3
 8003698:	400a      	ands	r2, r1
 800369a:	4907      	ldr	r1, [pc, #28]	; (80036b8 <I2C_TransferConfig+0x70>)
 800369c:	430a      	orrs	r2, r1
 800369e:	43d2      	mvns	r2, r2
 80036a0:	401a      	ands	r2, r3
 80036a2:	0011      	movs	r1, r2
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b007      	add	sp, #28
 80036b4:	bd90      	pop	{r4, r7, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	03ff63ff 	.word	0x03ff63ff

080036bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2241      	movs	r2, #65	; 0x41
 80036ca:	5c9b      	ldrb	r3, [r3, r2]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d138      	bne.n	8003744 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2240      	movs	r2, #64	; 0x40
 80036d6:	5c9b      	ldrb	r3, [r3, r2]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036dc:	2302      	movs	r3, #2
 80036de:	e032      	b.n	8003746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2240      	movs	r2, #64	; 0x40
 80036e4:	2101      	movs	r1, #1
 80036e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2241      	movs	r2, #65	; 0x41
 80036ec:	2124      	movs	r1, #36	; 0x24
 80036ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2101      	movs	r1, #1
 80036fc:	438a      	bics	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4911      	ldr	r1, [pc, #68]	; (8003750 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800370c:	400a      	ands	r2, r1
 800370e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2101      	movs	r1, #1
 800372c:	430a      	orrs	r2, r1
 800372e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2241      	movs	r2, #65	; 0x41
 8003734:	2120      	movs	r1, #32
 8003736:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2240      	movs	r2, #64	; 0x40
 800373c:	2100      	movs	r1, #0
 800373e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e000      	b.n	8003746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003744:	2302      	movs	r3, #2
  }
}
 8003746:	0018      	movs	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	b002      	add	sp, #8
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	ffffefff 	.word	0xffffefff

08003754 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2241      	movs	r2, #65	; 0x41
 8003762:	5c9b      	ldrb	r3, [r3, r2]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b20      	cmp	r3, #32
 8003768:	d139      	bne.n	80037de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2240      	movs	r2, #64	; 0x40
 800376e:	5c9b      	ldrb	r3, [r3, r2]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003774:	2302      	movs	r3, #2
 8003776:	e033      	b.n	80037e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2240      	movs	r2, #64	; 0x40
 800377c:	2101      	movs	r1, #1
 800377e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2241      	movs	r2, #65	; 0x41
 8003784:	2124      	movs	r1, #36	; 0x24
 8003786:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2101      	movs	r1, #1
 8003794:	438a      	bics	r2, r1
 8003796:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4a11      	ldr	r2, [pc, #68]	; (80037e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2101      	movs	r1, #1
 80037c6:	430a      	orrs	r2, r1
 80037c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2241      	movs	r2, #65	; 0x41
 80037ce:	2120      	movs	r1, #32
 80037d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2240      	movs	r2, #64	; 0x40
 80037d6:	2100      	movs	r1, #0
 80037d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
  }
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b004      	add	sp, #16
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	fffff0ff 	.word	0xfffff0ff

080037ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ec:	b5b0      	push	{r4, r5, r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d102      	bne.n	8003800 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f000 fbaf 	bl	8003f5e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003800:	4bcf      	ldr	r3, [pc, #828]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	220c      	movs	r2, #12
 8003806:	4013      	ands	r3, r2
 8003808:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800380a:	4bcd      	ldr	r3, [pc, #820]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	025b      	lsls	r3, r3, #9
 8003812:	4013      	ands	r3, r2
 8003814:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2201      	movs	r2, #1
 800381c:	4013      	ands	r3, r2
 800381e:	d100      	bne.n	8003822 <HAL_RCC_OscConfig+0x36>
 8003820:	e07e      	b.n	8003920 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	2b08      	cmp	r3, #8
 8003826:	d007      	beq.n	8003838 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	2b0c      	cmp	r3, #12
 800382c:	d112      	bne.n	8003854 <HAL_RCC_OscConfig+0x68>
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	025b      	lsls	r3, r3, #9
 8003834:	429a      	cmp	r2, r3
 8003836:	d10d      	bne.n	8003854 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003838:	4bc1      	ldr	r3, [pc, #772]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	029b      	lsls	r3, r3, #10
 8003840:	4013      	ands	r3, r2
 8003842:	d100      	bne.n	8003846 <HAL_RCC_OscConfig+0x5a>
 8003844:	e06b      	b.n	800391e <HAL_RCC_OscConfig+0x132>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d167      	bne.n	800391e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f000 fb85 	bl	8003f5e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	025b      	lsls	r3, r3, #9
 800385c:	429a      	cmp	r2, r3
 800385e:	d107      	bne.n	8003870 <HAL_RCC_OscConfig+0x84>
 8003860:	4bb7      	ldr	r3, [pc, #732]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4bb6      	ldr	r3, [pc, #728]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003866:	2180      	movs	r1, #128	; 0x80
 8003868:	0249      	lsls	r1, r1, #9
 800386a:	430a      	orrs	r2, r1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e027      	b.n	80038c0 <HAL_RCC_OscConfig+0xd4>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	23a0      	movs	r3, #160	; 0xa0
 8003876:	02db      	lsls	r3, r3, #11
 8003878:	429a      	cmp	r2, r3
 800387a:	d10e      	bne.n	800389a <HAL_RCC_OscConfig+0xae>
 800387c:	4bb0      	ldr	r3, [pc, #704]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4baf      	ldr	r3, [pc, #700]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003882:	2180      	movs	r1, #128	; 0x80
 8003884:	02c9      	lsls	r1, r1, #11
 8003886:	430a      	orrs	r2, r1
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	4bad      	ldr	r3, [pc, #692]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4bac      	ldr	r3, [pc, #688]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003890:	2180      	movs	r1, #128	; 0x80
 8003892:	0249      	lsls	r1, r1, #9
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	e012      	b.n	80038c0 <HAL_RCC_OscConfig+0xd4>
 800389a:	4ba9      	ldr	r3, [pc, #676]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4ba8      	ldr	r3, [pc, #672]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 80038a0:	49a8      	ldr	r1, [pc, #672]	; (8003b44 <HAL_RCC_OscConfig+0x358>)
 80038a2:	400a      	ands	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	4ba6      	ldr	r3, [pc, #664]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	025b      	lsls	r3, r3, #9
 80038ae:	4013      	ands	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4ba2      	ldr	r3, [pc, #648]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4ba1      	ldr	r3, [pc, #644]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 80038ba:	49a3      	ldr	r1, [pc, #652]	; (8003b48 <HAL_RCC_OscConfig+0x35c>)
 80038bc:	400a      	ands	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fe fe90 	bl	80025ec <HAL_GetTick>
 80038cc:	0003      	movs	r3, r0
 80038ce:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038d0:	e009      	b.n	80038e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d2:	f7fe fe8b 	bl	80025ec <HAL_GetTick>
 80038d6:	0002      	movs	r2, r0
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b64      	cmp	r3, #100	; 0x64
 80038de:	d902      	bls.n	80038e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	f000 fb3c 	bl	8003f5e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038e6:	4b96      	ldr	r3, [pc, #600]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	029b      	lsls	r3, r3, #10
 80038ee:	4013      	ands	r3, r2
 80038f0:	d0ef      	beq.n	80038d2 <HAL_RCC_OscConfig+0xe6>
 80038f2:	e015      	b.n	8003920 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fe fe7a 	bl	80025ec <HAL_GetTick>
 80038f8:	0003      	movs	r3, r0
 80038fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038fe:	f7fe fe75 	bl	80025ec <HAL_GetTick>
 8003902:	0002      	movs	r2, r0
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b64      	cmp	r3, #100	; 0x64
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e326      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003910:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	029b      	lsls	r3, r3, #10
 8003918:	4013      	ands	r3, r2
 800391a:	d1f0      	bne.n	80038fe <HAL_RCC_OscConfig+0x112>
 800391c:	e000      	b.n	8003920 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800391e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2202      	movs	r2, #2
 8003926:	4013      	ands	r3, r2
 8003928:	d100      	bne.n	800392c <HAL_RCC_OscConfig+0x140>
 800392a:	e08b      	b.n	8003a44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	2b04      	cmp	r3, #4
 8003936:	d005      	beq.n	8003944 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	2b0c      	cmp	r3, #12
 800393c:	d13e      	bne.n	80039bc <HAL_RCC_OscConfig+0x1d0>
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d13b      	bne.n	80039bc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003944:	4b7e      	ldr	r3, [pc, #504]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2204      	movs	r2, #4
 800394a:	4013      	ands	r3, r2
 800394c:	d004      	beq.n	8003958 <HAL_RCC_OscConfig+0x16c>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e302      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003958:	4b79      	ldr	r3, [pc, #484]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4a7b      	ldr	r2, [pc, #492]	; (8003b4c <HAL_RCC_OscConfig+0x360>)
 800395e:	4013      	ands	r3, r2
 8003960:	0019      	movs	r1, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	021a      	lsls	r2, r3, #8
 8003968:	4b75      	ldr	r3, [pc, #468]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800396e:	4b74      	ldr	r3, [pc, #464]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2209      	movs	r2, #9
 8003974:	4393      	bics	r3, r2
 8003976:	0019      	movs	r1, r3
 8003978:	4b71      	ldr	r3, [pc, #452]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	430a      	orrs	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003980:	f000 fc40 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 8003984:	0001      	movs	r1, r0
 8003986:	4b6e      	ldr	r3, [pc, #440]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	220f      	movs	r2, #15
 800398e:	4013      	ands	r3, r2
 8003990:	4a6f      	ldr	r2, [pc, #444]	; (8003b50 <HAL_RCC_OscConfig+0x364>)
 8003992:	5cd3      	ldrb	r3, [r2, r3]
 8003994:	000a      	movs	r2, r1
 8003996:	40da      	lsrs	r2, r3
 8003998:	4b6e      	ldr	r3, [pc, #440]	; (8003b54 <HAL_RCC_OscConfig+0x368>)
 800399a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800399c:	4b6e      	ldr	r3, [pc, #440]	; (8003b58 <HAL_RCC_OscConfig+0x36c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2513      	movs	r5, #19
 80039a2:	197c      	adds	r4, r7, r5
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7fe fddb 	bl	8002560 <HAL_InitTick>
 80039aa:	0003      	movs	r3, r0
 80039ac:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80039ae:	197b      	adds	r3, r7, r5
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d046      	beq.n	8003a44 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80039b6:	197b      	adds	r3, r7, r5
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	e2d0      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d027      	beq.n	8003a12 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80039c2:	4b5f      	ldr	r3, [pc, #380]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2209      	movs	r2, #9
 80039c8:	4393      	bics	r3, r2
 80039ca:	0019      	movs	r1, r3
 80039cc:	4b5c      	ldr	r3, [pc, #368]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fe fe0a 	bl	80025ec <HAL_GetTick>
 80039d8:	0003      	movs	r3, r0
 80039da:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039de:	f7fe fe05 	bl	80025ec <HAL_GetTick>
 80039e2:	0002      	movs	r2, r0
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e2b6      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039f0:	4b53      	ldr	r3, [pc, #332]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2204      	movs	r2, #4
 80039f6:	4013      	ands	r3, r2
 80039f8:	d0f1      	beq.n	80039de <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fa:	4b51      	ldr	r3, [pc, #324]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4a53      	ldr	r2, [pc, #332]	; (8003b4c <HAL_RCC_OscConfig+0x360>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	0019      	movs	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	021a      	lsls	r2, r3, #8
 8003a0a:	4b4d      	ldr	r3, [pc, #308]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]
 8003a10:	e018      	b.n	8003a44 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a12:	4b4b      	ldr	r3, [pc, #300]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b4a      	ldr	r3, [pc, #296]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003a18:	2101      	movs	r1, #1
 8003a1a:	438a      	bics	r2, r1
 8003a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1e:	f7fe fde5 	bl	80025ec <HAL_GetTick>
 8003a22:	0003      	movs	r3, r0
 8003a24:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a28:	f7fe fde0 	bl	80025ec <HAL_GetTick>
 8003a2c:	0002      	movs	r2, r0
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e291      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a3a:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2204      	movs	r2, #4
 8003a40:	4013      	ands	r3, r2
 8003a42:	d1f1      	bne.n	8003a28 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2210      	movs	r2, #16
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d100      	bne.n	8003a50 <HAL_RCC_OscConfig+0x264>
 8003a4e:	e0a1      	b.n	8003b94 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d140      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a56:	4b3a      	ldr	r3, [pc, #232]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d005      	beq.n	8003a6e <HAL_RCC_OscConfig+0x282>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e277      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a6e:	4b34      	ldr	r3, [pc, #208]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4a3a      	ldr	r2, [pc, #232]	; (8003b5c <HAL_RCC_OscConfig+0x370>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a7c:	4b30      	ldr	r3, [pc, #192]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a82:	4b2f      	ldr	r3, [pc, #188]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	0a19      	lsrs	r1, r3, #8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	061a      	lsls	r2, r3, #24
 8003a90:	4b2b      	ldr	r3, [pc, #172]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	0b5b      	lsrs	r3, r3, #13
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	2280      	movs	r2, #128	; 0x80
 8003aa0:	0212      	lsls	r2, r2, #8
 8003aa2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003aa4:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	210f      	movs	r1, #15
 8003aac:	400b      	ands	r3, r1
 8003aae:	4928      	ldr	r1, [pc, #160]	; (8003b50 <HAL_RCC_OscConfig+0x364>)
 8003ab0:	5ccb      	ldrb	r3, [r1, r3]
 8003ab2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ab4:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <HAL_RCC_OscConfig+0x368>)
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_OscConfig+0x36c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2513      	movs	r5, #19
 8003abe:	197c      	adds	r4, r7, r5
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f7fe fd4d 	bl	8002560 <HAL_InitTick>
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003aca:	197b      	adds	r3, r7, r5
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d060      	beq.n	8003b94 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003ad2:	197b      	adds	r3, r7, r5
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	e242      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d03f      	beq.n	8003b60 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ae0:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003ae6:	2180      	movs	r1, #128	; 0x80
 8003ae8:	0049      	lsls	r1, r1, #1
 8003aea:	430a      	orrs	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7fe fd7d 	bl	80025ec <HAL_GetTick>
 8003af2:	0003      	movs	r3, r0
 8003af4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003af8:	f7fe fd78 	bl	80025ec <HAL_GetTick>
 8003afc:	0002      	movs	r2, r0
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e229      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4013      	ands	r3, r2
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4a10      	ldr	r2, [pc, #64]	; (8003b5c <HAL_RCC_OscConfig+0x370>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	0019      	movs	r1, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	0a19      	lsrs	r1, r3, #8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	061a      	lsls	r2, r3, #24
 8003b38:	4b01      	ldr	r3, [pc, #4]	; (8003b40 <HAL_RCC_OscConfig+0x354>)
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	e029      	b.n	8003b94 <HAL_RCC_OscConfig+0x3a8>
 8003b40:	40021000 	.word	0x40021000
 8003b44:	fffeffff 	.word	0xfffeffff
 8003b48:	fffbffff 	.word	0xfffbffff
 8003b4c:	ffffe0ff 	.word	0xffffe0ff
 8003b50:	08006a48 	.word	0x08006a48
 8003b54:	20000158 	.word	0x20000158
 8003b58:	2000015c 	.word	0x2000015c
 8003b5c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b60:	4bbd      	ldr	r3, [pc, #756]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4bbc      	ldr	r3, [pc, #752]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003b66:	49bd      	ldr	r1, [pc, #756]	; (8003e5c <HAL_RCC_OscConfig+0x670>)
 8003b68:	400a      	ands	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fe fd3e 	bl	80025ec <HAL_GetTick>
 8003b70:	0003      	movs	r3, r0
 8003b72:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b76:	f7fe fd39 	bl	80025ec <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e1ea      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003b88:	4bb3      	ldr	r3, [pc, #716]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4013      	ands	r3, r2
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2208      	movs	r2, #8
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d036      	beq.n	8003c0c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d019      	beq.n	8003bda <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba6:	4bac      	ldr	r3, [pc, #688]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003ba8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003baa:	4bab      	ldr	r3, [pc, #684]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003bac:	2101      	movs	r1, #1
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7fe fd1b 	bl	80025ec <HAL_GetTick>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fe fd16 	bl	80025ec <HAL_GetTick>
 8003bc0:	0002      	movs	r2, r0
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e1c7      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bce:	4ba2      	ldr	r3, [pc, #648]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d0f1      	beq.n	8003bbc <HAL_RCC_OscConfig+0x3d0>
 8003bd8:	e018      	b.n	8003c0c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bda:	4b9f      	ldr	r3, [pc, #636]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003bdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bde:	4b9e      	ldr	r3, [pc, #632]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003be0:	2101      	movs	r1, #1
 8003be2:	438a      	bics	r2, r1
 8003be4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be6:	f7fe fd01 	bl	80025ec <HAL_GetTick>
 8003bea:	0003      	movs	r3, r0
 8003bec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf0:	f7fe fcfc 	bl	80025ec <HAL_GetTick>
 8003bf4:	0002      	movs	r2, r0
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e1ad      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c02:	4b95      	ldr	r3, [pc, #596]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c06:	2202      	movs	r2, #2
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d1f1      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2204      	movs	r2, #4
 8003c12:	4013      	ands	r3, r2
 8003c14:	d100      	bne.n	8003c18 <HAL_RCC_OscConfig+0x42c>
 8003c16:	e0ae      	b.n	8003d76 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c18:	2027      	movs	r0, #39	; 0x27
 8003c1a:	183b      	adds	r3, r7, r0
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c20:	4b8d      	ldr	r3, [pc, #564]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	055b      	lsls	r3, r3, #21
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d109      	bne.n	8003c40 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2c:	4b8a      	ldr	r3, [pc, #552]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c30:	4b89      	ldr	r3, [pc, #548]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003c32:	2180      	movs	r1, #128	; 0x80
 8003c34:	0549      	lsls	r1, r1, #21
 8003c36:	430a      	orrs	r2, r1
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003c3a:	183b      	adds	r3, r7, r0
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	4b87      	ldr	r3, [pc, #540]	; (8003e60 <HAL_RCC_OscConfig+0x674>)
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	2380      	movs	r3, #128	; 0x80
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d11a      	bne.n	8003c82 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c4c:	4b84      	ldr	r3, [pc, #528]	; (8003e60 <HAL_RCC_OscConfig+0x674>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b83      	ldr	r3, [pc, #524]	; (8003e60 <HAL_RCC_OscConfig+0x674>)
 8003c52:	2180      	movs	r1, #128	; 0x80
 8003c54:	0049      	lsls	r1, r1, #1
 8003c56:	430a      	orrs	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c5a:	f7fe fcc7 	bl	80025ec <HAL_GetTick>
 8003c5e:	0003      	movs	r3, r0
 8003c60:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c64:	f7fe fcc2 	bl	80025ec <HAL_GetTick>
 8003c68:	0002      	movs	r2, r0
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e173      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c76:	4b7a      	ldr	r3, [pc, #488]	; (8003e60 <HAL_RCC_OscConfig+0x674>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d107      	bne.n	8003c9e <HAL_RCC_OscConfig+0x4b2>
 8003c8e:	4b72      	ldr	r3, [pc, #456]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c92:	4b71      	ldr	r3, [pc, #452]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003c94:	2180      	movs	r1, #128	; 0x80
 8003c96:	0049      	lsls	r1, r1, #1
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	651a      	str	r2, [r3, #80]	; 0x50
 8003c9c:	e031      	b.n	8003d02 <HAL_RCC_OscConfig+0x516>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x4d4>
 8003ca6:	4b6c      	ldr	r3, [pc, #432]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003ca8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003caa:	4b6b      	ldr	r3, [pc, #428]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003cac:	496b      	ldr	r1, [pc, #428]	; (8003e5c <HAL_RCC_OscConfig+0x670>)
 8003cae:	400a      	ands	r2, r1
 8003cb0:	651a      	str	r2, [r3, #80]	; 0x50
 8003cb2:	4b69      	ldr	r3, [pc, #420]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003cb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cb6:	4b68      	ldr	r3, [pc, #416]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003cb8:	496a      	ldr	r1, [pc, #424]	; (8003e64 <HAL_RCC_OscConfig+0x678>)
 8003cba:	400a      	ands	r2, r1
 8003cbc:	651a      	str	r2, [r3, #80]	; 0x50
 8003cbe:	e020      	b.n	8003d02 <HAL_RCC_OscConfig+0x516>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	23a0      	movs	r3, #160	; 0xa0
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d10e      	bne.n	8003cea <HAL_RCC_OscConfig+0x4fe>
 8003ccc:	4b62      	ldr	r3, [pc, #392]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003cce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cd0:	4b61      	ldr	r3, [pc, #388]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	00c9      	lsls	r1, r1, #3
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	651a      	str	r2, [r3, #80]	; 0x50
 8003cda:	4b5f      	ldr	r3, [pc, #380]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003cdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cde:	4b5e      	ldr	r3, [pc, #376]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003ce0:	2180      	movs	r1, #128	; 0x80
 8003ce2:	0049      	lsls	r1, r1, #1
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ce8:	e00b      	b.n	8003d02 <HAL_RCC_OscConfig+0x516>
 8003cea:	4b5b      	ldr	r3, [pc, #364]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003cec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cee:	4b5a      	ldr	r3, [pc, #360]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003cf0:	495a      	ldr	r1, [pc, #360]	; (8003e5c <HAL_RCC_OscConfig+0x670>)
 8003cf2:	400a      	ands	r2, r1
 8003cf4:	651a      	str	r2, [r3, #80]	; 0x50
 8003cf6:	4b58      	ldr	r3, [pc, #352]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003cf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cfa:	4b57      	ldr	r3, [pc, #348]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003cfc:	4959      	ldr	r1, [pc, #356]	; (8003e64 <HAL_RCC_OscConfig+0x678>)
 8003cfe:	400a      	ands	r2, r1
 8003d00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d015      	beq.n	8003d36 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0a:	f7fe fc6f 	bl	80025ec <HAL_GetTick>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d12:	e009      	b.n	8003d28 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d14:	f7fe fc6a 	bl	80025ec <HAL_GetTick>
 8003d18:	0002      	movs	r2, r0
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	4a52      	ldr	r2, [pc, #328]	; (8003e68 <HAL_RCC_OscConfig+0x67c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e11a      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d28:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4013      	ands	r3, r2
 8003d32:	d0ef      	beq.n	8003d14 <HAL_RCC_OscConfig+0x528>
 8003d34:	e014      	b.n	8003d60 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d36:	f7fe fc59 	bl	80025ec <HAL_GetTick>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d3e:	e009      	b.n	8003d54 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d40:	f7fe fc54 	bl	80025ec <HAL_GetTick>
 8003d44:	0002      	movs	r2, r0
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	4a47      	ldr	r2, [pc, #284]	; (8003e68 <HAL_RCC_OscConfig+0x67c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e104      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d54:	4b40      	ldr	r3, [pc, #256]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003d56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d1ef      	bne.n	8003d40 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d60:	2327      	movs	r3, #39	; 0x27
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d105      	bne.n	8003d76 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d6e:	4b3a      	ldr	r3, [pc, #232]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003d70:	493e      	ldr	r1, [pc, #248]	; (8003e6c <HAL_RCC_OscConfig+0x680>)
 8003d72:	400a      	ands	r2, r1
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d049      	beq.n	8003e14 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d026      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003d88:	4b33      	ldr	r3, [pc, #204]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	4b32      	ldr	r3, [pc, #200]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003d8e:	2101      	movs	r1, #1
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d98:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	635a      	str	r2, [r3, #52]	; 0x34
 8003da0:	4b33      	ldr	r3, [pc, #204]	; (8003e70 <HAL_RCC_OscConfig+0x684>)
 8003da2:	6a1a      	ldr	r2, [r3, #32]
 8003da4:	4b32      	ldr	r3, [pc, #200]	; (8003e70 <HAL_RCC_OscConfig+0x684>)
 8003da6:	2180      	movs	r1, #128	; 0x80
 8003da8:	0189      	lsls	r1, r1, #6
 8003daa:	430a      	orrs	r2, r1
 8003dac:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fe fc1d 	bl	80025ec <HAL_GetTick>
 8003db2:	0003      	movs	r3, r0
 8003db4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003db8:	f7fe fc18 	bl	80025ec <HAL_GetTick>
 8003dbc:	0002      	movs	r2, r0
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e0c9      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003dca:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d0f1      	beq.n	8003db8 <HAL_RCC_OscConfig+0x5cc>
 8003dd4:	e01e      	b.n	8003e14 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003dd6:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003ddc:	2101      	movs	r1, #1
 8003dde:	438a      	bics	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]
 8003de2:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <HAL_RCC_OscConfig+0x684>)
 8003de4:	6a1a      	ldr	r2, [r3, #32]
 8003de6:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <HAL_RCC_OscConfig+0x684>)
 8003de8:	4922      	ldr	r1, [pc, #136]	; (8003e74 <HAL_RCC_OscConfig+0x688>)
 8003dea:	400a      	ands	r2, r1
 8003dec:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dee:	f7fe fbfd 	bl	80025ec <HAL_GetTick>
 8003df2:	0003      	movs	r3, r0
 8003df4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003df8:	f7fe fbf8 	bl	80025ec <HAL_GetTick>
 8003dfc:	0002      	movs	r2, r0
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e0a9      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e0a:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	4013      	ands	r3, r2
 8003e12:	d1f1      	bne.n	8003df8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d100      	bne.n	8003e1e <HAL_RCC_OscConfig+0x632>
 8003e1c:	e09e      	b.n	8003f5c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	2b0c      	cmp	r3, #12
 8003e22:	d100      	bne.n	8003e26 <HAL_RCC_OscConfig+0x63a>
 8003e24:	e077      	b.n	8003f16 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d158      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_OscConfig+0x66c>)
 8003e34:	4910      	ldr	r1, [pc, #64]	; (8003e78 <HAL_RCC_OscConfig+0x68c>)
 8003e36:	400a      	ands	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7fe fbd7 	bl	80025ec <HAL_GetTick>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e42:	e01b      	b.n	8003e7c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fe fbd2 	bl	80025ec <HAL_GetTick>
 8003e48:	0002      	movs	r2, r0
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d914      	bls.n	8003e7c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e083      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	fffffeff 	.word	0xfffffeff
 8003e60:	40007000 	.word	0x40007000
 8003e64:	fffffbff 	.word	0xfffffbff
 8003e68:	00001388 	.word	0x00001388
 8003e6c:	efffffff 	.word	0xefffffff
 8003e70:	40010000 	.word	0x40010000
 8003e74:	ffffdfff 	.word	0xffffdfff
 8003e78:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e7c:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <HAL_RCC_OscConfig+0x77c>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	049b      	lsls	r3, r3, #18
 8003e84:	4013      	ands	r3, r2
 8003e86:	d1dd      	bne.n	8003e44 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e88:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <HAL_RCC_OscConfig+0x77c>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a37      	ldr	r2, [pc, #220]	; (8003f6c <HAL_RCC_OscConfig+0x780>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	0019      	movs	r1, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	4b31      	ldr	r3, [pc, #196]	; (8003f68 <HAL_RCC_OscConfig+0x77c>)
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea8:	4b2f      	ldr	r3, [pc, #188]	; (8003f68 <HAL_RCC_OscConfig+0x77c>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <HAL_RCC_OscConfig+0x77c>)
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	0449      	lsls	r1, r1, #17
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb6:	f7fe fb99 	bl	80025ec <HAL_GetTick>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fe fb94 	bl	80025ec <HAL_GetTick>
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e045      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003ed2:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <HAL_RCC_OscConfig+0x77c>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	2380      	movs	r3, #128	; 0x80
 8003ed8:	049b      	lsls	r3, r3, #18
 8003eda:	4013      	ands	r3, r2
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x6d4>
 8003ede:	e03d      	b.n	8003f5c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee0:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <HAL_RCC_OscConfig+0x77c>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <HAL_RCC_OscConfig+0x77c>)
 8003ee6:	4922      	ldr	r1, [pc, #136]	; (8003f70 <HAL_RCC_OscConfig+0x784>)
 8003ee8:	400a      	ands	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fe fb7e 	bl	80025ec <HAL_GetTick>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fe fb79 	bl	80025ec <HAL_GetTick>
 8003efa:	0002      	movs	r2, r0
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e02a      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f08:	4b17      	ldr	r3, [pc, #92]	; (8003f68 <HAL_RCC_OscConfig+0x77c>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	049b      	lsls	r3, r3, #18
 8003f10:	4013      	ands	r3, r2
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x70a>
 8003f14:	e022      	b.n	8003f5c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e01d      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f22:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <HAL_RCC_OscConfig+0x77c>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	025b      	lsls	r3, r3, #9
 8003f2e:	401a      	ands	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d10f      	bne.n	8003f58 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	23f0      	movs	r3, #240	; 0xf0
 8003f3c:	039b      	lsls	r3, r3, #14
 8003f3e:	401a      	ands	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d107      	bne.n	8003f58 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003f48:	69fa      	ldr	r2, [r7, #28]
 8003f4a:	23c0      	movs	r3, #192	; 0xc0
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	401a      	ands	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b00a      	add	sp, #40	; 0x28
 8003f64:	bdb0      	pop	{r4, r5, r7, pc}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	ff02ffff 	.word	0xff02ffff
 8003f70:	feffffff 	.word	0xfeffffff

08003f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f74:	b5b0      	push	{r4, r5, r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e128      	b.n	80041da <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f88:	4b96      	ldr	r3, [pc, #600]	; (80041e4 <HAL_RCC_ClockConfig+0x270>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	4013      	ands	r3, r2
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d91e      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b93      	ldr	r3, [pc, #588]	; (80041e4 <HAL_RCC_ClockConfig+0x270>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4393      	bics	r3, r2
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	4b90      	ldr	r3, [pc, #576]	; (80041e4 <HAL_RCC_ClockConfig+0x270>)
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fa8:	f7fe fb20 	bl	80025ec <HAL_GetTick>
 8003fac:	0003      	movs	r3, r0
 8003fae:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb0:	e009      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb2:	f7fe fb1b 	bl	80025ec <HAL_GetTick>
 8003fb6:	0002      	movs	r2, r0
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	4a8a      	ldr	r2, [pc, #552]	; (80041e8 <HAL_RCC_ClockConfig+0x274>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e109      	b.n	80041da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b87      	ldr	r3, [pc, #540]	; (80041e4 <HAL_RCC_ClockConfig+0x270>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	4013      	ands	r3, r2
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d1ee      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fde:	4b83      	ldr	r3, [pc, #524]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	22f0      	movs	r2, #240	; 0xf0
 8003fe4:	4393      	bics	r3, r2
 8003fe6:	0019      	movs	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	4b7f      	ldr	r3, [pc, #508]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d100      	bne.n	8003ffe <HAL_RCC_ClockConfig+0x8a>
 8003ffc:	e089      	b.n	8004112 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d107      	bne.n	8004016 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004006:	4b79      	ldr	r3, [pc, #484]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	029b      	lsls	r3, r3, #10
 800400e:	4013      	ands	r3, r2
 8004010:	d120      	bne.n	8004054 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e0e1      	b.n	80041da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b03      	cmp	r3, #3
 800401c:	d107      	bne.n	800402e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800401e:	4b73      	ldr	r3, [pc, #460]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	049b      	lsls	r3, r3, #18
 8004026:	4013      	ands	r3, r2
 8004028:	d114      	bne.n	8004054 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e0d5      	b.n	80041da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d106      	bne.n	8004044 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004036:	4b6d      	ldr	r3, [pc, #436]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2204      	movs	r2, #4
 800403c:	4013      	ands	r3, r2
 800403e:	d109      	bne.n	8004054 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0ca      	b.n	80041da <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004044:	4b69      	ldr	r3, [pc, #420]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4013      	ands	r3, r2
 800404e:	d101      	bne.n	8004054 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0c2      	b.n	80041da <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004054:	4b65      	ldr	r3, [pc, #404]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	2203      	movs	r2, #3
 800405a:	4393      	bics	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	4b62      	ldr	r3, [pc, #392]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 8004064:	430a      	orrs	r2, r1
 8004066:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004068:	f7fe fac0 	bl	80025ec <HAL_GetTick>
 800406c:	0003      	movs	r3, r0
 800406e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d111      	bne.n	800409c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004078:	e009      	b.n	800408e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407a:	f7fe fab7 	bl	80025ec <HAL_GetTick>
 800407e:	0002      	movs	r2, r0
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	4a58      	ldr	r2, [pc, #352]	; (80041e8 <HAL_RCC_ClockConfig+0x274>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e0a5      	b.n	80041da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800408e:	4b57      	ldr	r3, [pc, #348]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	220c      	movs	r2, #12
 8004094:	4013      	ands	r3, r2
 8004096:	2b08      	cmp	r3, #8
 8004098:	d1ef      	bne.n	800407a <HAL_RCC_ClockConfig+0x106>
 800409a:	e03a      	b.n	8004112 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d111      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040a4:	e009      	b.n	80040ba <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a6:	f7fe faa1 	bl	80025ec <HAL_GetTick>
 80040aa:	0002      	movs	r2, r0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	4a4d      	ldr	r2, [pc, #308]	; (80041e8 <HAL_RCC_ClockConfig+0x274>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e08f      	b.n	80041da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ba:	4b4c      	ldr	r3, [pc, #304]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	220c      	movs	r2, #12
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b0c      	cmp	r3, #12
 80040c4:	d1ef      	bne.n	80040a6 <HAL_RCC_ClockConfig+0x132>
 80040c6:	e024      	b.n	8004112 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d11b      	bne.n	8004108 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80040d0:	e009      	b.n	80040e6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d2:	f7fe fa8b 	bl	80025ec <HAL_GetTick>
 80040d6:	0002      	movs	r2, r0
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	4a42      	ldr	r2, [pc, #264]	; (80041e8 <HAL_RCC_ClockConfig+0x274>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e079      	b.n	80041da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80040e6:	4b41      	ldr	r3, [pc, #260]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	220c      	movs	r2, #12
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d1ef      	bne.n	80040d2 <HAL_RCC_ClockConfig+0x15e>
 80040f2:	e00e      	b.n	8004112 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f4:	f7fe fa7a 	bl	80025ec <HAL_GetTick>
 80040f8:	0002      	movs	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	4a3a      	ldr	r2, [pc, #232]	; (80041e8 <HAL_RCC_ClockConfig+0x274>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e068      	b.n	80041da <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004108:	4b38      	ldr	r3, [pc, #224]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	220c      	movs	r2, #12
 800410e:	4013      	ands	r3, r2
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004112:	4b34      	ldr	r3, [pc, #208]	; (80041e4 <HAL_RCC_ClockConfig+0x270>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2201      	movs	r2, #1
 8004118:	4013      	ands	r3, r2
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d21e      	bcs.n	800415e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004120:	4b30      	ldr	r3, [pc, #192]	; (80041e4 <HAL_RCC_ClockConfig+0x270>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2201      	movs	r2, #1
 8004126:	4393      	bics	r3, r2
 8004128:	0019      	movs	r1, r3
 800412a:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <HAL_RCC_ClockConfig+0x270>)
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004132:	f7fe fa5b 	bl	80025ec <HAL_GetTick>
 8004136:	0003      	movs	r3, r0
 8004138:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800413a:	e009      	b.n	8004150 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413c:	f7fe fa56 	bl	80025ec <HAL_GetTick>
 8004140:	0002      	movs	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	4a28      	ldr	r2, [pc, #160]	; (80041e8 <HAL_RCC_ClockConfig+0x274>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e044      	b.n	80041da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004150:	4b24      	ldr	r3, [pc, #144]	; (80041e4 <HAL_RCC_ClockConfig+0x270>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	4013      	ands	r3, r2
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d1ee      	bne.n	800413c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2204      	movs	r2, #4
 8004164:	4013      	ands	r3, r2
 8004166:	d009      	beq.n	800417c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004168:	4b20      	ldr	r3, [pc, #128]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a20      	ldr	r2, [pc, #128]	; (80041f0 <HAL_RCC_ClockConfig+0x27c>)
 800416e:	4013      	ands	r3, r2
 8004170:	0019      	movs	r1, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 8004178:	430a      	orrs	r2, r1
 800417a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2208      	movs	r2, #8
 8004182:	4013      	ands	r3, r2
 8004184:	d00a      	beq.n	800419c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004186:	4b19      	ldr	r3, [pc, #100]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	4a1a      	ldr	r2, [pc, #104]	; (80041f4 <HAL_RCC_ClockConfig+0x280>)
 800418c:	4013      	ands	r3, r2
 800418e:	0019      	movs	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	00da      	lsls	r2, r3, #3
 8004196:	4b15      	ldr	r3, [pc, #84]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 8004198:	430a      	orrs	r2, r1
 800419a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800419c:	f000 f832 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80041a0:	0001      	movs	r1, r0
 80041a2:	4b12      	ldr	r3, [pc, #72]	; (80041ec <HAL_RCC_ClockConfig+0x278>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	220f      	movs	r2, #15
 80041aa:	4013      	ands	r3, r2
 80041ac:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <HAL_RCC_ClockConfig+0x284>)
 80041ae:	5cd3      	ldrb	r3, [r2, r3]
 80041b0:	000a      	movs	r2, r1
 80041b2:	40da      	lsrs	r2, r3
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <HAL_RCC_ClockConfig+0x288>)
 80041b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041b8:	4b11      	ldr	r3, [pc, #68]	; (8004200 <HAL_RCC_ClockConfig+0x28c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	250b      	movs	r5, #11
 80041be:	197c      	adds	r4, r7, r5
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7fe f9cd 	bl	8002560 <HAL_InitTick>
 80041c6:	0003      	movs	r3, r0
 80041c8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80041ca:	197b      	adds	r3, r7, r5
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80041d2:	197b      	adds	r3, r7, r5
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	e000      	b.n	80041da <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b004      	add	sp, #16
 80041e0:	bdb0      	pop	{r4, r5, r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	40022000 	.word	0x40022000
 80041e8:	00001388 	.word	0x00001388
 80041ec:	40021000 	.word	0x40021000
 80041f0:	fffff8ff 	.word	0xfffff8ff
 80041f4:	ffffc7ff 	.word	0xffffc7ff
 80041f8:	08006a48 	.word	0x08006a48
 80041fc:	20000158 	.word	0x20000158
 8004200:	2000015c 	.word	0x2000015c

08004204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004204:	b5b0      	push	{r4, r5, r7, lr}
 8004206:	b08e      	sub	sp, #56	; 0x38
 8004208:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800420a:	4b4c      	ldr	r3, [pc, #304]	; (800433c <HAL_RCC_GetSysClockFreq+0x138>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004212:	230c      	movs	r3, #12
 8004214:	4013      	ands	r3, r2
 8004216:	2b0c      	cmp	r3, #12
 8004218:	d014      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0x40>
 800421a:	d900      	bls.n	800421e <HAL_RCC_GetSysClockFreq+0x1a>
 800421c:	e07b      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x112>
 800421e:	2b04      	cmp	r3, #4
 8004220:	d002      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x24>
 8004222:	2b08      	cmp	r3, #8
 8004224:	d00b      	beq.n	800423e <HAL_RCC_GetSysClockFreq+0x3a>
 8004226:	e076      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004228:	4b44      	ldr	r3, [pc, #272]	; (800433c <HAL_RCC_GetSysClockFreq+0x138>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2210      	movs	r2, #16
 800422e:	4013      	ands	r3, r2
 8004230:	d002      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004232:	4b43      	ldr	r3, [pc, #268]	; (8004340 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004234:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004236:	e07c      	b.n	8004332 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004238:	4b42      	ldr	r3, [pc, #264]	; (8004344 <HAL_RCC_GetSysClockFreq+0x140>)
 800423a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800423c:	e079      	b.n	8004332 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800423e:	4b42      	ldr	r3, [pc, #264]	; (8004348 <HAL_RCC_GetSysClockFreq+0x144>)
 8004240:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004242:	e076      	b.n	8004332 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	0c9a      	lsrs	r2, r3, #18
 8004248:	230f      	movs	r3, #15
 800424a:	401a      	ands	r2, r3
 800424c:	4b3f      	ldr	r3, [pc, #252]	; (800434c <HAL_RCC_GetSysClockFreq+0x148>)
 800424e:	5c9b      	ldrb	r3, [r3, r2]
 8004250:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004254:	0d9a      	lsrs	r2, r3, #22
 8004256:	2303      	movs	r3, #3
 8004258:	4013      	ands	r3, r2
 800425a:	3301      	adds	r3, #1
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800425e:	4b37      	ldr	r3, [pc, #220]	; (800433c <HAL_RCC_GetSysClockFreq+0x138>)
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	025b      	lsls	r3, r3, #9
 8004266:	4013      	ands	r3, r2
 8004268:	d01a      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
 8004272:	4a35      	ldr	r2, [pc, #212]	; (8004348 <HAL_RCC_GetSysClockFreq+0x144>)
 8004274:	2300      	movs	r3, #0
 8004276:	69b8      	ldr	r0, [r7, #24]
 8004278:	69f9      	ldr	r1, [r7, #28]
 800427a:	f7fc f803 	bl	8000284 <__aeabi_lmul>
 800427e:	0002      	movs	r2, r0
 8004280:	000b      	movs	r3, r1
 8004282:	0010      	movs	r0, r2
 8004284:	0019      	movs	r1, r3
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f7fb ffd7 	bl	8000244 <__aeabi_uldivmod>
 8004296:	0002      	movs	r2, r0
 8004298:	000b      	movs	r3, r1
 800429a:	0013      	movs	r3, r2
 800429c:	637b      	str	r3, [r7, #52]	; 0x34
 800429e:	e037      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80042a0:	4b26      	ldr	r3, [pc, #152]	; (800433c <HAL_RCC_GetSysClockFreq+0x138>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2210      	movs	r2, #16
 80042a6:	4013      	ands	r3, r2
 80042a8:	d01a      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	4a23      	ldr	r2, [pc, #140]	; (8004340 <HAL_RCC_GetSysClockFreq+0x13c>)
 80042b4:	2300      	movs	r3, #0
 80042b6:	68b8      	ldr	r0, [r7, #8]
 80042b8:	68f9      	ldr	r1, [r7, #12]
 80042ba:	f7fb ffe3 	bl	8000284 <__aeabi_lmul>
 80042be:	0002      	movs	r2, r0
 80042c0:	000b      	movs	r3, r1
 80042c2:	0010      	movs	r0, r2
 80042c4:	0019      	movs	r1, r3
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	603b      	str	r3, [r7, #0]
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f7fb ffb7 	bl	8000244 <__aeabi_uldivmod>
 80042d6:	0002      	movs	r2, r0
 80042d8:	000b      	movs	r3, r1
 80042da:	0013      	movs	r3, r2
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
 80042de:	e017      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	0018      	movs	r0, r3
 80042e4:	2300      	movs	r3, #0
 80042e6:	0019      	movs	r1, r3
 80042e8:	4a16      	ldr	r2, [pc, #88]	; (8004344 <HAL_RCC_GetSysClockFreq+0x140>)
 80042ea:	2300      	movs	r3, #0
 80042ec:	f7fb ffca 	bl	8000284 <__aeabi_lmul>
 80042f0:	0002      	movs	r2, r0
 80042f2:	000b      	movs	r3, r1
 80042f4:	0010      	movs	r0, r2
 80042f6:	0019      	movs	r1, r3
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	001c      	movs	r4, r3
 80042fc:	2300      	movs	r3, #0
 80042fe:	001d      	movs	r5, r3
 8004300:	0022      	movs	r2, r4
 8004302:	002b      	movs	r3, r5
 8004304:	f7fb ff9e 	bl	8000244 <__aeabi_uldivmod>
 8004308:	0002      	movs	r2, r0
 800430a:	000b      	movs	r3, r1
 800430c:	0013      	movs	r3, r2
 800430e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004312:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004314:	e00d      	b.n	8004332 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_RCC_GetSysClockFreq+0x138>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	0b5b      	lsrs	r3, r3, #13
 800431c:	2207      	movs	r2, #7
 800431e:	4013      	ands	r3, r2
 8004320:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	3301      	adds	r3, #1
 8004326:	2280      	movs	r2, #128	; 0x80
 8004328:	0212      	lsls	r2, r2, #8
 800432a:	409a      	lsls	r2, r3
 800432c:	0013      	movs	r3, r2
 800432e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004330:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004334:	0018      	movs	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	b00e      	add	sp, #56	; 0x38
 800433a:	bdb0      	pop	{r4, r5, r7, pc}
 800433c:	40021000 	.word	0x40021000
 8004340:	003d0900 	.word	0x003d0900
 8004344:	00f42400 	.word	0x00f42400
 8004348:	007a1200 	.word	0x007a1200
 800434c:	08006a60 	.word	0x08006a60

08004350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004354:	4b02      	ldr	r3, [pc, #8]	; (8004360 <HAL_RCC_GetHCLKFreq+0x10>)
 8004356:	681b      	ldr	r3, [r3, #0]
}
 8004358:	0018      	movs	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	20000158 	.word	0x20000158

08004364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004368:	f7ff fff2 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 800436c:	0001      	movs	r1, r0
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	0a1b      	lsrs	r3, r3, #8
 8004374:	2207      	movs	r2, #7
 8004376:	4013      	ands	r3, r2
 8004378:	4a04      	ldr	r2, [pc, #16]	; (800438c <HAL_RCC_GetPCLK1Freq+0x28>)
 800437a:	5cd3      	ldrb	r3, [r2, r3]
 800437c:	40d9      	lsrs	r1, r3
 800437e:	000b      	movs	r3, r1
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	40021000 	.word	0x40021000
 800438c:	08006a58 	.word	0x08006a58

08004390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004394:	f7ff ffdc 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 8004398:	0001      	movs	r1, r0
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	0adb      	lsrs	r3, r3, #11
 80043a0:	2207      	movs	r2, #7
 80043a2:	4013      	ands	r3, r2
 80043a4:	4a04      	ldr	r2, [pc, #16]	; (80043b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043a6:	5cd3      	ldrb	r3, [r2, r3]
 80043a8:	40d9      	lsrs	r1, r3
 80043aa:	000b      	movs	r3, r1
}
 80043ac:	0018      	movs	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	40021000 	.word	0x40021000
 80043b8:	08006a58 	.word	0x08006a58

080043bc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80043c4:	2017      	movs	r0, #23
 80043c6:	183b      	adds	r3, r7, r0
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2220      	movs	r2, #32
 80043d2:	4013      	ands	r3, r2
 80043d4:	d100      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80043d6:	e0c7      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d8:	4b93      	ldr	r3, [pc, #588]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80043da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	055b      	lsls	r3, r3, #21
 80043e0:	4013      	ands	r3, r2
 80043e2:	d109      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e4:	4b90      	ldr	r3, [pc, #576]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80043e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e8:	4b8f      	ldr	r3, [pc, #572]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80043ea:	2180      	movs	r1, #128	; 0x80
 80043ec:	0549      	lsls	r1, r1, #21
 80043ee:	430a      	orrs	r2, r1
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80043f2:	183b      	adds	r3, r7, r0
 80043f4:	2201      	movs	r2, #1
 80043f6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f8:	4b8c      	ldr	r3, [pc, #560]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	4013      	ands	r3, r2
 8004402:	d11a      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004404:	4b89      	ldr	r3, [pc, #548]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4b88      	ldr	r3, [pc, #544]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800440a:	2180      	movs	r1, #128	; 0x80
 800440c:	0049      	lsls	r1, r1, #1
 800440e:	430a      	orrs	r2, r1
 8004410:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004412:	f7fe f8eb 	bl	80025ec <HAL_GetTick>
 8004416:	0003      	movs	r3, r0
 8004418:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441a:	e008      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441c:	f7fe f8e6 	bl	80025ec <HAL_GetTick>
 8004420:	0002      	movs	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e0f7      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x262>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442e:	4b7f      	ldr	r3, [pc, #508]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	4013      	ands	r3, r2
 8004438:	d0f0      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800443a:	4b7b      	ldr	r3, [pc, #492]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	23c0      	movs	r3, #192	; 0xc0
 8004440:	039b      	lsls	r3, r3, #14
 8004442:	4013      	ands	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	23c0      	movs	r3, #192	; 0xc0
 800444c:	039b      	lsls	r3, r3, #14
 800444e:	4013      	ands	r3, r2
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	429a      	cmp	r2, r3
 8004454:	d013      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	23c0      	movs	r3, #192	; 0xc0
 800445c:	029b      	lsls	r3, r3, #10
 800445e:	401a      	ands	r2, r3
 8004460:	23c0      	movs	r3, #192	; 0xc0
 8004462:	029b      	lsls	r3, r3, #10
 8004464:	429a      	cmp	r2, r3
 8004466:	d10a      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004468:	4b6f      	ldr	r3, [pc, #444]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	029b      	lsls	r3, r3, #10
 8004470:	401a      	ands	r2, r3
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	029b      	lsls	r3, r3, #10
 8004476:	429a      	cmp	r2, r3
 8004478:	d101      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e0cf      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x262>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800447e:	4b6a      	ldr	r3, [pc, #424]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004482:	23c0      	movs	r3, #192	; 0xc0
 8004484:	029b      	lsls	r3, r3, #10
 8004486:	4013      	ands	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d03b      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	23c0      	movs	r3, #192	; 0xc0
 8004496:	029b      	lsls	r3, r3, #10
 8004498:	4013      	ands	r3, r2
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	429a      	cmp	r2, r3
 800449e:	d033      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2220      	movs	r2, #32
 80044a6:	4013      	ands	r3, r2
 80044a8:	d02e      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80044aa:	4b5f      	ldr	r3, [pc, #380]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ae:	4a60      	ldr	r2, [pc, #384]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044b4:	4b5c      	ldr	r3, [pc, #368]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044b8:	4b5b      	ldr	r3, [pc, #364]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044ba:	2180      	movs	r1, #128	; 0x80
 80044bc:	0309      	lsls	r1, r1, #12
 80044be:	430a      	orrs	r2, r1
 80044c0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044c2:	4b59      	ldr	r3, [pc, #356]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044c6:	4b58      	ldr	r3, [pc, #352]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044c8:	495a      	ldr	r1, [pc, #360]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80044ca:	400a      	ands	r2, r1
 80044cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80044ce:	4b56      	ldr	r3, [pc, #344]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	4013      	ands	r3, r2
 80044dc:	d014      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044de:	f7fe f885 	bl	80025ec <HAL_GetTick>
 80044e2:	0003      	movs	r3, r0
 80044e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044e6:	e009      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e8:	f7fe f880 	bl	80025ec <HAL_GetTick>
 80044ec:	0002      	movs	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	4a51      	ldr	r2, [pc, #324]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d901      	bls.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e090      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x262>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044fc:	4b4a      	ldr	r3, [pc, #296]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004500:	2380      	movs	r3, #128	; 0x80
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4013      	ands	r3, r2
 8004506:	d0ef      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2220      	movs	r2, #32
 800450e:	4013      	ands	r3, r2
 8004510:	d01f      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	23c0      	movs	r3, #192	; 0xc0
 8004518:	029b      	lsls	r3, r3, #10
 800451a:	401a      	ands	r2, r3
 800451c:	23c0      	movs	r3, #192	; 0xc0
 800451e:	029b      	lsls	r3, r3, #10
 8004520:	429a      	cmp	r2, r3
 8004522:	d10c      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004524:	4b40      	ldr	r3, [pc, #256]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a44      	ldr	r2, [pc, #272]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800452a:	4013      	ands	r3, r2
 800452c:	0019      	movs	r1, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	23c0      	movs	r3, #192	; 0xc0
 8004534:	039b      	lsls	r3, r3, #14
 8004536:	401a      	ands	r2, r3
 8004538:	4b3b      	ldr	r3, [pc, #236]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800453a:	430a      	orrs	r2, r1
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	4b3a      	ldr	r3, [pc, #232]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004540:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	23c0      	movs	r3, #192	; 0xc0
 8004548:	029b      	lsls	r3, r3, #10
 800454a:	401a      	ands	r2, r3
 800454c:	4b36      	ldr	r3, [pc, #216]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800454e:	430a      	orrs	r2, r1
 8004550:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004552:	2317      	movs	r3, #23
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d105      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455c:	4b32      	ldr	r3, [pc, #200]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800455e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004560:	4b31      	ldr	r3, [pc, #196]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004562:	4937      	ldr	r1, [pc, #220]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004564:	400a      	ands	r2, r1
 8004566:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2201      	movs	r2, #1
 800456e:	4013      	ands	r3, r2
 8004570:	d009      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004572:	4b2d      	ldr	r3, [pc, #180]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	2203      	movs	r2, #3
 8004578:	4393      	bics	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	4b29      	ldr	r3, [pc, #164]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004582:	430a      	orrs	r2, r1
 8004584:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2202      	movs	r2, #2
 800458c:	4013      	ands	r3, r2
 800458e:	d009      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004590:	4b25      	ldr	r3, [pc, #148]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004594:	220c      	movs	r2, #12
 8004596:	4393      	bics	r3, r2
 8004598:	0019      	movs	r1, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	4b22      	ldr	r3, [pc, #136]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045a0:	430a      	orrs	r2, r1
 80045a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2204      	movs	r2, #4
 80045aa:	4013      	ands	r3, r2
 80045ac:	d009      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045ae:	4b1e      	ldr	r3, [pc, #120]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b2:	4a24      	ldr	r2, [pc, #144]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	0019      	movs	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045be:	430a      	orrs	r2, r1
 80045c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2208      	movs	r2, #8
 80045c8:	4013      	ands	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045cc:	4b16      	ldr	r3, [pc, #88]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d0:	4a1d      	ldr	r2, [pc, #116]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	0019      	movs	r1, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	4b13      	ldr	r3, [pc, #76]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045dc:	430a      	orrs	r2, r1
 80045de:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2240      	movs	r2, #64	; 0x40
 80045e6:	4013      	ands	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ea:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ee:	4a17      	ldr	r2, [pc, #92]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	0019      	movs	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045fa:	430a      	orrs	r2, r1
 80045fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2280      	movs	r2, #128	; 0x80
 8004604:	4013      	ands	r3, r2
 8004606:	d009      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004608:	4b07      	ldr	r3, [pc, #28]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800460a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460c:	4a10      	ldr	r2, [pc, #64]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800460e:	4013      	ands	r3, r2
 8004610:	0019      	movs	r1, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	4b04      	ldr	r3, [pc, #16]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004618:	430a      	orrs	r2, r1
 800461a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	0018      	movs	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	b006      	add	sp, #24
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	40021000 	.word	0x40021000
 800462c:	40007000 	.word	0x40007000
 8004630:	fffcffff 	.word	0xfffcffff
 8004634:	fff7ffff 	.word	0xfff7ffff
 8004638:	00001388 	.word	0x00001388
 800463c:	ffcfffff 	.word	0xffcfffff
 8004640:	efffffff 	.word	0xefffffff
 8004644:	fffff3ff 	.word	0xfffff3ff
 8004648:	ffffcfff 	.word	0xffffcfff
 800464c:	fbffffff 	.word	0xfbffffff
 8004650:	fff3ffff 	.word	0xfff3ffff

08004654 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e032      	b.n	80046cc <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2239      	movs	r2, #57	; 0x39
 800466a:	5c9b      	ldrb	r3, [r3, r2]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d107      	bne.n	8004682 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2238      	movs	r2, #56	; 0x38
 8004676:	2100      	movs	r1, #0
 8004678:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	0018      	movs	r0, r3
 800467e:	f7fd fe3b 	bl	80022f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2239      	movs	r2, #57	; 0x39
 8004686:	2102      	movs	r1, #2
 8004688:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3304      	adds	r3, #4
 8004692:	0019      	movs	r1, r3
 8004694:	0010      	movs	r0, r2
 8004696:	f000 f9ad 	bl	80049f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	223e      	movs	r2, #62	; 0x3e
 800469e:	2101      	movs	r1, #1
 80046a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	223a      	movs	r2, #58	; 0x3a
 80046a6:	2101      	movs	r1, #1
 80046a8:	5499      	strb	r1, [r3, r2]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	223b      	movs	r2, #59	; 0x3b
 80046ae:	2101      	movs	r1, #1
 80046b0:	5499      	strb	r1, [r3, r2]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	223c      	movs	r2, #60	; 0x3c
 80046b6:	2101      	movs	r1, #1
 80046b8:	5499      	strb	r1, [r3, r2]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	223d      	movs	r2, #61	; 0x3d
 80046be:	2101      	movs	r1, #1
 80046c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2239      	movs	r2, #57	; 0x39
 80046c6:	2101      	movs	r1, #1
 80046c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b002      	add	sp, #8
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d108      	bne.n	80046f6 <HAL_TIM_PWM_Start+0x22>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	223a      	movs	r2, #58	; 0x3a
 80046e8:	5c9b      	ldrb	r3, [r3, r2]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	1e5a      	subs	r2, r3, #1
 80046f0:	4193      	sbcs	r3, r2
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	e01f      	b.n	8004736 <HAL_TIM_PWM_Start+0x62>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d108      	bne.n	800470e <HAL_TIM_PWM_Start+0x3a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	223b      	movs	r2, #59	; 0x3b
 8004700:	5c9b      	ldrb	r3, [r3, r2]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	1e5a      	subs	r2, r3, #1
 8004708:	4193      	sbcs	r3, r2
 800470a:	b2db      	uxtb	r3, r3
 800470c:	e013      	b.n	8004736 <HAL_TIM_PWM_Start+0x62>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b08      	cmp	r3, #8
 8004712:	d108      	bne.n	8004726 <HAL_TIM_PWM_Start+0x52>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	223c      	movs	r2, #60	; 0x3c
 8004718:	5c9b      	ldrb	r3, [r3, r2]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	1e5a      	subs	r2, r3, #1
 8004720:	4193      	sbcs	r3, r2
 8004722:	b2db      	uxtb	r3, r3
 8004724:	e007      	b.n	8004736 <HAL_TIM_PWM_Start+0x62>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	223d      	movs	r2, #61	; 0x3d
 800472a:	5c9b      	ldrb	r3, [r3, r2]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	1e5a      	subs	r2, r3, #1
 8004732:	4193      	sbcs	r3, r2
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e04d      	b.n	80047da <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d104      	bne.n	800474e <HAL_TIM_PWM_Start+0x7a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	223a      	movs	r2, #58	; 0x3a
 8004748:	2102      	movs	r1, #2
 800474a:	5499      	strb	r1, [r3, r2]
 800474c:	e013      	b.n	8004776 <HAL_TIM_PWM_Start+0xa2>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Start+0x8a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	223b      	movs	r2, #59	; 0x3b
 8004758:	2102      	movs	r1, #2
 800475a:	5499      	strb	r1, [r3, r2]
 800475c:	e00b      	b.n	8004776 <HAL_TIM_PWM_Start+0xa2>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Start+0x9a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	223c      	movs	r2, #60	; 0x3c
 8004768:	2102      	movs	r1, #2
 800476a:	5499      	strb	r1, [r3, r2]
 800476c:	e003      	b.n	8004776 <HAL_TIM_PWM_Start+0xa2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	223d      	movs	r2, #61	; 0x3d
 8004772:	2102      	movs	r1, #2
 8004774:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6839      	ldr	r1, [r7, #0]
 800477c:	2201      	movs	r2, #1
 800477e:	0018      	movs	r0, r3
 8004780:	f000 fa90 	bl	8004ca4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	05db      	lsls	r3, r3, #23
 800478c:	429a      	cmp	r2, r3
 800478e:	d009      	beq.n	80047a4 <HAL_TIM_PWM_Start+0xd0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <HAL_TIM_PWM_Start+0x110>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <HAL_TIM_PWM_Start+0xd0>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a12      	ldr	r2, [pc, #72]	; (80047e8 <HAL_TIM_PWM_Start+0x114>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d111      	bne.n	80047c8 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2207      	movs	r2, #7
 80047ac:	4013      	ands	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b06      	cmp	r3, #6
 80047b4:	d010      	beq.n	80047d8 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2101      	movs	r1, #1
 80047c2:	430a      	orrs	r2, r1
 80047c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c6:	e007      	b.n	80047d8 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2101      	movs	r1, #1
 80047d4:	430a      	orrs	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	0018      	movs	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	b004      	add	sp, #16
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	40010800 	.word	0x40010800
 80047e8:	40011400 	.word	0x40011400

080047ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6839      	ldr	r1, [r7, #0]
 80047fc:	2200      	movs	r2, #0
 80047fe:	0018      	movs	r0, r3
 8004800:	f000 fa50 	bl	8004ca4 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	4a16      	ldr	r2, [pc, #88]	; (8004864 <HAL_TIM_PWM_Stop+0x78>)
 800480c:	4013      	ands	r3, r2
 800480e:	d107      	bne.n	8004820 <HAL_TIM_PWM_Stop+0x34>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2101      	movs	r1, #1
 800481c:	438a      	bics	r2, r1
 800481e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d104      	bne.n	8004830 <HAL_TIM_PWM_Stop+0x44>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	223a      	movs	r2, #58	; 0x3a
 800482a:	2101      	movs	r1, #1
 800482c:	5499      	strb	r1, [r3, r2]
 800482e:	e013      	b.n	8004858 <HAL_TIM_PWM_Stop+0x6c>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b04      	cmp	r3, #4
 8004834:	d104      	bne.n	8004840 <HAL_TIM_PWM_Stop+0x54>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	223b      	movs	r2, #59	; 0x3b
 800483a:	2101      	movs	r1, #1
 800483c:	5499      	strb	r1, [r3, r2]
 800483e:	e00b      	b.n	8004858 <HAL_TIM_PWM_Stop+0x6c>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b08      	cmp	r3, #8
 8004844:	d104      	bne.n	8004850 <HAL_TIM_PWM_Stop+0x64>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	223c      	movs	r2, #60	; 0x3c
 800484a:	2101      	movs	r1, #1
 800484c:	5499      	strb	r1, [r3, r2]
 800484e:	e003      	b.n	8004858 <HAL_TIM_PWM_Stop+0x6c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	223d      	movs	r2, #61	; 0x3d
 8004854:	2101      	movs	r1, #1
 8004856:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	0018      	movs	r0, r3
 800485c:	46bd      	mov	sp, r7
 800485e:	b002      	add	sp, #8
 8004860:	bd80      	pop	{r7, pc}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	00001111 	.word	0x00001111

08004868 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004874:	2317      	movs	r3, #23
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2238      	movs	r2, #56	; 0x38
 8004880:	5c9b      	ldrb	r3, [r3, r2]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004886:	2302      	movs	r3, #2
 8004888:	e0ad      	b.n	80049e6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2238      	movs	r2, #56	; 0x38
 800488e:	2101      	movs	r1, #1
 8004890:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b0c      	cmp	r3, #12
 8004896:	d100      	bne.n	800489a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004898:	e076      	b.n	8004988 <HAL_TIM_PWM_ConfigChannel+0x120>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b0c      	cmp	r3, #12
 800489e:	d900      	bls.n	80048a2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80048a0:	e095      	b.n	80049ce <HAL_TIM_PWM_ConfigChannel+0x166>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d04e      	beq.n	8004946 <HAL_TIM_PWM_ConfigChannel+0xde>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d900      	bls.n	80048b0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80048ae:	e08e      	b.n	80049ce <HAL_TIM_PWM_ConfigChannel+0x166>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_PWM_ConfigChannel+0x56>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d021      	beq.n	8004900 <HAL_TIM_PWM_ConfigChannel+0x98>
 80048bc:	e087      	b.n	80049ce <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	0011      	movs	r1, r2
 80048c6:	0018      	movs	r0, r3
 80048c8:	f000 f8e8 	bl	8004a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2108      	movs	r1, #8
 80048d8:	430a      	orrs	r2, r1
 80048da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2104      	movs	r1, #4
 80048e8:	438a      	bics	r2, r1
 80048ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6999      	ldr	r1, [r3, #24]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	619a      	str	r2, [r3, #24]
      break;
 80048fe:	e06b      	b.n	80049d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	0011      	movs	r1, r2
 8004908:	0018      	movs	r0, r3
 800490a:	f000 f903 	bl	8004b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2180      	movs	r1, #128	; 0x80
 800491a:	0109      	lsls	r1, r1, #4
 800491c:	430a      	orrs	r2, r1
 800491e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4931      	ldr	r1, [pc, #196]	; (80049f0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800492c:	400a      	ands	r2, r1
 800492e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6999      	ldr	r1, [r3, #24]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	021a      	lsls	r2, r3, #8
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	619a      	str	r2, [r3, #24]
      break;
 8004944:	e048      	b.n	80049d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	0011      	movs	r1, r2
 800494e:	0018      	movs	r0, r3
 8004950:	f000 f922 	bl	8004b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69da      	ldr	r2, [r3, #28]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2108      	movs	r1, #8
 8004960:	430a      	orrs	r2, r1
 8004962:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2104      	movs	r1, #4
 8004970:	438a      	bics	r2, r1
 8004972:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69d9      	ldr	r1, [r3, #28]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	61da      	str	r2, [r3, #28]
      break;
 8004986:	e027      	b.n	80049d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	0011      	movs	r1, r2
 8004990:	0018      	movs	r0, r3
 8004992:	f000 f941 	bl	8004c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69da      	ldr	r2, [r3, #28]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2180      	movs	r1, #128	; 0x80
 80049a2:	0109      	lsls	r1, r1, #4
 80049a4:	430a      	orrs	r2, r1
 80049a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	490f      	ldr	r1, [pc, #60]	; (80049f0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80049b4:	400a      	ands	r2, r1
 80049b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69d9      	ldr	r1, [r3, #28]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	021a      	lsls	r2, r3, #8
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	61da      	str	r2, [r3, #28]
      break;
 80049cc:	e004      	b.n	80049d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80049ce:	2317      	movs	r3, #23
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	2201      	movs	r2, #1
 80049d4:	701a      	strb	r2, [r3, #0]
      break;
 80049d6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2238      	movs	r2, #56	; 0x38
 80049dc:	2100      	movs	r1, #0
 80049de:	5499      	strb	r1, [r3, r2]

  return status;
 80049e0:	2317      	movs	r3, #23
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	781b      	ldrb	r3, [r3, #0]
}
 80049e6:	0018      	movs	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b006      	add	sp, #24
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	46c0      	nop			; (mov r8, r8)
 80049f0:	fffffbff 	.word	0xfffffbff

080049f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	05db      	lsls	r3, r3, #23
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d007      	beq.n	8004a1e <TIM_Base_SetConfig+0x2a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a1f      	ldr	r2, [pc, #124]	; (8004a90 <TIM_Base_SetConfig+0x9c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <TIM_Base_SetConfig+0x2a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a1e      	ldr	r2, [pc, #120]	; (8004a94 <TIM_Base_SetConfig+0xa0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d108      	bne.n	8004a30 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2270      	movs	r2, #112	; 0x70
 8004a22:	4393      	bics	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	05db      	lsls	r3, r3, #23
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d007      	beq.n	8004a4a <TIM_Base_SetConfig+0x56>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a14      	ldr	r2, [pc, #80]	; (8004a90 <TIM_Base_SetConfig+0x9c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d003      	beq.n	8004a4a <TIM_Base_SetConfig+0x56>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <TIM_Base_SetConfig+0xa0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d108      	bne.n	8004a5c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4a12      	ldr	r2, [pc, #72]	; (8004a98 <TIM_Base_SetConfig+0xa4>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2280      	movs	r2, #128	; 0x80
 8004a60:	4393      	bics	r3, r2
 8004a62:	001a      	movs	r2, r3
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	615a      	str	r2, [r3, #20]
}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b004      	add	sp, #16
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40010800 	.word	0x40010800
 8004a94:	40011400 	.word	0x40011400
 8004a98:	fffffcff 	.word	0xfffffcff

08004a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4393      	bics	r3, r2
 8004aae:	001a      	movs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2270      	movs	r2, #112	; 0x70
 8004aca:	4393      	bics	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	4393      	bics	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	4393      	bics	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	621a      	str	r2, [r3, #32]
}
 8004b0c:	46c0      	nop			; (mov r8, r8)
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b006      	add	sp, #24
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	2210      	movs	r2, #16
 8004b24:	4393      	bics	r3, r2
 8004b26:	001a      	movs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4a13      	ldr	r2, [pc, #76]	; (8004b90 <TIM_OC2_SetConfig+0x7c>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a12      	ldr	r2, [pc, #72]	; (8004b94 <TIM_OC2_SetConfig+0x80>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	4393      	bics	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	621a      	str	r2, [r3, #32]
}
 8004b88:	46c0      	nop			; (mov r8, r8)
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b006      	add	sp, #24
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	ffff8fff 	.word	0xffff8fff
 8004b94:	fffffcff 	.word	0xfffffcff

08004b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	4a1a      	ldr	r2, [pc, #104]	; (8004c10 <TIM_OC3_SetConfig+0x78>)
 8004ba8:	401a      	ands	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2270      	movs	r2, #112	; 0x70
 8004bc4:	4393      	bics	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2203      	movs	r2, #3
 8004bcc:	4393      	bics	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	4a0d      	ldr	r2, [pc, #52]	; (8004c14 <TIM_OC3_SetConfig+0x7c>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	621a      	str	r2, [r3, #32]
}
 8004c08:	46c0      	nop			; (mov r8, r8)
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b006      	add	sp, #24
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	fffffeff 	.word	0xfffffeff
 8004c14:	fffffdff 	.word	0xfffffdff

08004c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <TIM_OC4_SetConfig+0x7c>)
 8004c28:	401a      	ands	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4a15      	ldr	r2, [pc, #84]	; (8004c98 <TIM_OC4_SetConfig+0x80>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <TIM_OC4_SetConfig+0x84>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	4a10      	ldr	r2, [pc, #64]	; (8004ca0 <TIM_OC4_SetConfig+0x88>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	031b      	lsls	r3, r3, #12
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	621a      	str	r2, [r3, #32]
}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b006      	add	sp, #24
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	ffffefff 	.word	0xffffefff
 8004c98:	ffff8fff 	.word	0xffff8fff
 8004c9c:	fffffcff 	.word	0xfffffcff
 8004ca0:	ffffdfff 	.word	0xffffdfff

08004ca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	221f      	movs	r2, #31
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	0013      	movs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	43d2      	mvns	r2, r2
 8004cc6:	401a      	ands	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a1a      	ldr	r2, [r3, #32]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	211f      	movs	r1, #31
 8004cd4:	400b      	ands	r3, r1
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4099      	lsls	r1, r3
 8004cda:	000b      	movs	r3, r1
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	b006      	add	sp, #24
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2238      	movs	r2, #56	; 0x38
 8004cfa:	5c9b      	ldrb	r3, [r3, r2]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e042      	b.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2238      	movs	r2, #56	; 0x38
 8004d08:	2101      	movs	r1, #1
 8004d0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2239      	movs	r2, #57	; 0x39
 8004d10:	2102      	movs	r1, #2
 8004d12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2270      	movs	r2, #112	; 0x70
 8004d28:	4393      	bics	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	2380      	movs	r3, #128	; 0x80
 8004d44:	05db      	lsls	r3, r3, #23
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d009      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a11      	ldr	r2, [pc, #68]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a0f      	ldr	r2, [pc, #60]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d10c      	bne.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2280      	movs	r2, #128	; 0x80
 8004d62:	4393      	bics	r3, r2
 8004d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2239      	movs	r2, #57	; 0x39
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2238      	movs	r2, #56	; 0x38
 8004d84:	2100      	movs	r1, #0
 8004d86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b004      	add	sp, #16
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	40010800 	.word	0x40010800
 8004d98:	40011400 	.word	0x40011400

08004d9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e044      	b.n	8004e38 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d107      	bne.n	8004dc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2278      	movs	r2, #120	; 0x78
 8004dba:	2100      	movs	r1, #0
 8004dbc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f7fd faeb 	bl	800239c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2224      	movs	r2, #36	; 0x24
 8004dca:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	438a      	bics	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	0018      	movs	r0, r3
 8004de0:	f000 f9b6 	bl	8005150 <UART_SetConfig>
 8004de4:	0003      	movs	r3, r0
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e024      	b.n	8004e38 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f000 fc2d 	bl	8005658 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	490d      	ldr	r1, [pc, #52]	; (8004e40 <HAL_UART_Init+0xa4>)
 8004e0a:	400a      	ands	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	212a      	movs	r1, #42	; 0x2a
 8004e1a:	438a      	bics	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2101      	movs	r1, #1
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	0018      	movs	r0, r3
 8004e32:	f000 fcc5 	bl	80057c0 <UART_CheckIdleState>
 8004e36:	0003      	movs	r3, r0
}
 8004e38:	0018      	movs	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b002      	add	sp, #8
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	ffffb7ff 	.word	0xffffb7ff

08004e44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08a      	sub	sp, #40	; 0x28
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	1dbb      	adds	r3, r7, #6
 8004e52:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d000      	beq.n	8004e5e <HAL_UART_Transmit+0x1a>
 8004e5c:	e08c      	b.n	8004f78 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_UART_Transmit+0x28>
 8004e64:	1dbb      	adds	r3, r7, #6
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e084      	b.n	8004f7a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	015b      	lsls	r3, r3, #5
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d109      	bne.n	8004e90 <HAL_UART_Transmit+0x4c>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2201      	movs	r2, #1
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d001      	beq.n	8004e90 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e074      	b.n	8004f7a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2284      	movs	r2, #132	; 0x84
 8004e94:	2100      	movs	r1, #0
 8004e96:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2221      	movs	r2, #33	; 0x21
 8004e9c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e9e:	f7fd fba5 	bl	80025ec <HAL_GetTick>
 8004ea2:	0003      	movs	r3, r0
 8004ea4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1dba      	adds	r2, r7, #6
 8004eaa:	2150      	movs	r1, #80	; 0x50
 8004eac:	8812      	ldrh	r2, [r2, #0]
 8004eae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	1dba      	adds	r2, r7, #6
 8004eb4:	2152      	movs	r1, #82	; 0x52
 8004eb6:	8812      	ldrh	r2, [r2, #0]
 8004eb8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	015b      	lsls	r3, r3, #5
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d108      	bne.n	8004ed8 <HAL_UART_Transmit+0x94>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d104      	bne.n	8004ed8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	e003      	b.n	8004ee0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ee0:	e02f      	b.n	8004f42 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	0013      	movs	r3, r2
 8004eec:	2200      	movs	r2, #0
 8004eee:	2180      	movs	r1, #128	; 0x80
 8004ef0:	f000 fd0e 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 8004ef4:	1e03      	subs	r3, r0, #0
 8004ef6:	d004      	beq.n	8004f02 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e03b      	b.n	8004f7a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	001a      	movs	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	05d2      	lsls	r2, r2, #23
 8004f14:	0dd2      	lsrs	r2, r2, #23
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	e007      	b.n	8004f30 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	781a      	ldrb	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2252      	movs	r2, #82	; 0x52
 8004f34:	5a9b      	ldrh	r3, [r3, r2]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b299      	uxth	r1, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2252      	movs	r2, #82	; 0x52
 8004f40:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2252      	movs	r2, #82	; 0x52
 8004f46:	5a9b      	ldrh	r3, [r3, r2]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1c9      	bne.n	8004ee2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	0013      	movs	r3, r2
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2140      	movs	r1, #64	; 0x40
 8004f5c:	f000 fcd8 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 8004f60:	1e03      	subs	r3, r0, #0
 8004f62:	d004      	beq.n	8004f6e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e005      	b.n	8004f7a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	e000      	b.n	8004f7a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004f78:	2302      	movs	r3, #2
  }
}
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b008      	add	sp, #32
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08a      	sub	sp, #40	; 0x28
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	1dbb      	adds	r3, r7, #6
 8004f92:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2280      	movs	r2, #128	; 0x80
 8004f98:	589b      	ldr	r3, [r3, r2]
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d000      	beq.n	8004fa0 <HAL_UART_Receive+0x1c>
 8004f9e:	e0d0      	b.n	8005142 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_UART_Receive+0x2a>
 8004fa6:	1dbb      	adds	r3, r7, #6
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e0c8      	b.n	8005144 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	2380      	movs	r3, #128	; 0x80
 8004fb8:	015b      	lsls	r3, r3, #5
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d109      	bne.n	8004fd2 <HAL_UART_Receive+0x4e>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d105      	bne.n	8004fd2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d001      	beq.n	8004fd2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e0b8      	b.n	8005144 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2284      	movs	r2, #132	; 0x84
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2280      	movs	r2, #128	; 0x80
 8004fde:	2122      	movs	r1, #34	; 0x22
 8004fe0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fe8:	f7fd fb00 	bl	80025ec <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	1dba      	adds	r2, r7, #6
 8004ff4:	2158      	movs	r1, #88	; 0x58
 8004ff6:	8812      	ldrh	r2, [r2, #0]
 8004ff8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1dba      	adds	r2, r7, #6
 8004ffe:	215a      	movs	r1, #90	; 0x5a
 8005000:	8812      	ldrh	r2, [r2, #0]
 8005002:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	2380      	movs	r3, #128	; 0x80
 800500a:	015b      	lsls	r3, r3, #5
 800500c:	429a      	cmp	r2, r3
 800500e:	d10d      	bne.n	800502c <HAL_UART_Receive+0xa8>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <HAL_UART_Receive+0x9e>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	225c      	movs	r2, #92	; 0x5c
 800501c:	494b      	ldr	r1, [pc, #300]	; (800514c <HAL_UART_Receive+0x1c8>)
 800501e:	5299      	strh	r1, [r3, r2]
 8005020:	e02e      	b.n	8005080 <HAL_UART_Receive+0xfc>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	225c      	movs	r2, #92	; 0x5c
 8005026:	21ff      	movs	r1, #255	; 0xff
 8005028:	5299      	strh	r1, [r3, r2]
 800502a:	e029      	b.n	8005080 <HAL_UART_Receive+0xfc>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10d      	bne.n	8005050 <HAL_UART_Receive+0xcc>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <HAL_UART_Receive+0xc2>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	225c      	movs	r2, #92	; 0x5c
 8005040:	21ff      	movs	r1, #255	; 0xff
 8005042:	5299      	strh	r1, [r3, r2]
 8005044:	e01c      	b.n	8005080 <HAL_UART_Receive+0xfc>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	225c      	movs	r2, #92	; 0x5c
 800504a:	217f      	movs	r1, #127	; 0x7f
 800504c:	5299      	strh	r1, [r3, r2]
 800504e:	e017      	b.n	8005080 <HAL_UART_Receive+0xfc>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	055b      	lsls	r3, r3, #21
 8005058:	429a      	cmp	r2, r3
 800505a:	d10d      	bne.n	8005078 <HAL_UART_Receive+0xf4>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d104      	bne.n	800506e <HAL_UART_Receive+0xea>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	225c      	movs	r2, #92	; 0x5c
 8005068:	217f      	movs	r1, #127	; 0x7f
 800506a:	5299      	strh	r1, [r3, r2]
 800506c:	e008      	b.n	8005080 <HAL_UART_Receive+0xfc>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	225c      	movs	r2, #92	; 0x5c
 8005072:	213f      	movs	r1, #63	; 0x3f
 8005074:	5299      	strh	r1, [r3, r2]
 8005076:	e003      	b.n	8005080 <HAL_UART_Receive+0xfc>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	225c      	movs	r2, #92	; 0x5c
 800507c:	2100      	movs	r1, #0
 800507e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005080:	2312      	movs	r3, #18
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	215c      	movs	r1, #92	; 0x5c
 8005088:	5a52      	ldrh	r2, [r2, r1]
 800508a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	015b      	lsls	r3, r3, #5
 8005094:	429a      	cmp	r2, r3
 8005096:	d108      	bne.n	80050aa <HAL_UART_Receive+0x126>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	e003      	b.n	80050b2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80050b2:	e03a      	b.n	800512a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	0013      	movs	r3, r2
 80050be:	2200      	movs	r2, #0
 80050c0:	2120      	movs	r1, #32
 80050c2:	f000 fc25 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 80050c6:	1e03      	subs	r3, r0, #0
 80050c8:	d005      	beq.n	80050d6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2280      	movs	r2, #128	; 0x80
 80050ce:	2120      	movs	r1, #32
 80050d0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e036      	b.n	8005144 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10e      	bne.n	80050fa <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2212      	movs	r2, #18
 80050e6:	18ba      	adds	r2, r7, r2
 80050e8:	8812      	ldrh	r2, [r2, #0]
 80050ea:	4013      	ands	r3, r2
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	3302      	adds	r3, #2
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	e00e      	b.n	8005118 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2212      	movs	r2, #18
 8005104:	18ba      	adds	r2, r7, r2
 8005106:	8812      	ldrh	r2, [r2, #0]
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	4013      	ands	r3, r2
 800510c:	b2da      	uxtb	r2, r3
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	3301      	adds	r3, #1
 8005116:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	225a      	movs	r2, #90	; 0x5a
 800511c:	5a9b      	ldrh	r3, [r3, r2]
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b299      	uxth	r1, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	225a      	movs	r2, #90	; 0x5a
 8005128:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	225a      	movs	r2, #90	; 0x5a
 800512e:	5a9b      	ldrh	r3, [r3, r2]
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1be      	bne.n	80050b4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2280      	movs	r2, #128	; 0x80
 800513a:	2120      	movs	r1, #32
 800513c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	e000      	b.n	8005144 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005142:	2302      	movs	r3, #2
  }
}
 8005144:	0018      	movs	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	b008      	add	sp, #32
 800514a:	bd80      	pop	{r7, pc}
 800514c:	000001ff 	.word	0x000001ff

08005150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005150:	b5b0      	push	{r4, r5, r7, lr}
 8005152:	b08e      	sub	sp, #56	; 0x38
 8005154:	af00      	add	r7, sp, #0
 8005156:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005158:	231a      	movs	r3, #26
 800515a:	2218      	movs	r2, #24
 800515c:	189b      	adds	r3, r3, r2
 800515e:	19db      	adds	r3, r3, r7
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	431a      	orrs	r2, r3
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	431a      	orrs	r2, r3
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	4313      	orrs	r3, r2
 800517a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4ac6      	ldr	r2, [pc, #792]	; (800549c <UART_SetConfig+0x34c>)
 8005184:	4013      	ands	r3, r2
 8005186:	0019      	movs	r1, r3
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800518e:	430a      	orrs	r2, r1
 8005190:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	4ac1      	ldr	r2, [pc, #772]	; (80054a0 <UART_SetConfig+0x350>)
 800519a:	4013      	ands	r3, r2
 800519c:	0019      	movs	r1, r3
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4abb      	ldr	r2, [pc, #748]	; (80054a4 <UART_SetConfig+0x354>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051c0:	4313      	orrs	r3, r2
 80051c2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	4ab7      	ldr	r2, [pc, #732]	; (80054a8 <UART_SetConfig+0x358>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	0019      	movs	r1, r3
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d6:	430a      	orrs	r2, r1
 80051d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4ab3      	ldr	r2, [pc, #716]	; (80054ac <UART_SetConfig+0x35c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d131      	bne.n	8005248 <UART_SetConfig+0xf8>
 80051e4:	4bb2      	ldr	r3, [pc, #712]	; (80054b0 <UART_SetConfig+0x360>)
 80051e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e8:	2203      	movs	r2, #3
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d01d      	beq.n	800522c <UART_SetConfig+0xdc>
 80051f0:	d823      	bhi.n	800523a <UART_SetConfig+0xea>
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d00c      	beq.n	8005210 <UART_SetConfig+0xc0>
 80051f6:	d820      	bhi.n	800523a <UART_SetConfig+0xea>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <UART_SetConfig+0xb2>
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d00e      	beq.n	800521e <UART_SetConfig+0xce>
 8005200:	e01b      	b.n	800523a <UART_SetConfig+0xea>
 8005202:	231b      	movs	r3, #27
 8005204:	2218      	movs	r2, #24
 8005206:	189b      	adds	r3, r3, r2
 8005208:	19db      	adds	r3, r3, r7
 800520a:	2201      	movs	r2, #1
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	e09c      	b.n	800534a <UART_SetConfig+0x1fa>
 8005210:	231b      	movs	r3, #27
 8005212:	2218      	movs	r2, #24
 8005214:	189b      	adds	r3, r3, r2
 8005216:	19db      	adds	r3, r3, r7
 8005218:	2202      	movs	r2, #2
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e095      	b.n	800534a <UART_SetConfig+0x1fa>
 800521e:	231b      	movs	r3, #27
 8005220:	2218      	movs	r2, #24
 8005222:	189b      	adds	r3, r3, r2
 8005224:	19db      	adds	r3, r3, r7
 8005226:	2204      	movs	r2, #4
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	e08e      	b.n	800534a <UART_SetConfig+0x1fa>
 800522c:	231b      	movs	r3, #27
 800522e:	2218      	movs	r2, #24
 8005230:	189b      	adds	r3, r3, r2
 8005232:	19db      	adds	r3, r3, r7
 8005234:	2208      	movs	r2, #8
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	e087      	b.n	800534a <UART_SetConfig+0x1fa>
 800523a:	231b      	movs	r3, #27
 800523c:	2218      	movs	r2, #24
 800523e:	189b      	adds	r3, r3, r2
 8005240:	19db      	adds	r3, r3, r7
 8005242:	2210      	movs	r2, #16
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e080      	b.n	800534a <UART_SetConfig+0x1fa>
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a99      	ldr	r2, [pc, #612]	; (80054b4 <UART_SetConfig+0x364>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d131      	bne.n	80052b6 <UART_SetConfig+0x166>
 8005252:	4b97      	ldr	r3, [pc, #604]	; (80054b0 <UART_SetConfig+0x360>)
 8005254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005256:	220c      	movs	r2, #12
 8005258:	4013      	ands	r3, r2
 800525a:	2b0c      	cmp	r3, #12
 800525c:	d01d      	beq.n	800529a <UART_SetConfig+0x14a>
 800525e:	d823      	bhi.n	80052a8 <UART_SetConfig+0x158>
 8005260:	2b08      	cmp	r3, #8
 8005262:	d00c      	beq.n	800527e <UART_SetConfig+0x12e>
 8005264:	d820      	bhi.n	80052a8 <UART_SetConfig+0x158>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <UART_SetConfig+0x120>
 800526a:	2b04      	cmp	r3, #4
 800526c:	d00e      	beq.n	800528c <UART_SetConfig+0x13c>
 800526e:	e01b      	b.n	80052a8 <UART_SetConfig+0x158>
 8005270:	231b      	movs	r3, #27
 8005272:	2218      	movs	r2, #24
 8005274:	189b      	adds	r3, r3, r2
 8005276:	19db      	adds	r3, r3, r7
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	e065      	b.n	800534a <UART_SetConfig+0x1fa>
 800527e:	231b      	movs	r3, #27
 8005280:	2218      	movs	r2, #24
 8005282:	189b      	adds	r3, r3, r2
 8005284:	19db      	adds	r3, r3, r7
 8005286:	2202      	movs	r2, #2
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	e05e      	b.n	800534a <UART_SetConfig+0x1fa>
 800528c:	231b      	movs	r3, #27
 800528e:	2218      	movs	r2, #24
 8005290:	189b      	adds	r3, r3, r2
 8005292:	19db      	adds	r3, r3, r7
 8005294:	2204      	movs	r2, #4
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	e057      	b.n	800534a <UART_SetConfig+0x1fa>
 800529a:	231b      	movs	r3, #27
 800529c:	2218      	movs	r2, #24
 800529e:	189b      	adds	r3, r3, r2
 80052a0:	19db      	adds	r3, r3, r7
 80052a2:	2208      	movs	r2, #8
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	e050      	b.n	800534a <UART_SetConfig+0x1fa>
 80052a8:	231b      	movs	r3, #27
 80052aa:	2218      	movs	r2, #24
 80052ac:	189b      	adds	r3, r3, r2
 80052ae:	19db      	adds	r3, r3, r7
 80052b0:	2210      	movs	r2, #16
 80052b2:	701a      	strb	r2, [r3, #0]
 80052b4:	e049      	b.n	800534a <UART_SetConfig+0x1fa>
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a7a      	ldr	r2, [pc, #488]	; (80054a4 <UART_SetConfig+0x354>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d13e      	bne.n	800533e <UART_SetConfig+0x1ee>
 80052c0:	4b7b      	ldr	r3, [pc, #492]	; (80054b0 <UART_SetConfig+0x360>)
 80052c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052c4:	23c0      	movs	r3, #192	; 0xc0
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	4013      	ands	r3, r2
 80052ca:	22c0      	movs	r2, #192	; 0xc0
 80052cc:	0112      	lsls	r2, r2, #4
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d027      	beq.n	8005322 <UART_SetConfig+0x1d2>
 80052d2:	22c0      	movs	r2, #192	; 0xc0
 80052d4:	0112      	lsls	r2, r2, #4
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d82a      	bhi.n	8005330 <UART_SetConfig+0x1e0>
 80052da:	2280      	movs	r2, #128	; 0x80
 80052dc:	0112      	lsls	r2, r2, #4
 80052de:	4293      	cmp	r3, r2
 80052e0:	d011      	beq.n	8005306 <UART_SetConfig+0x1b6>
 80052e2:	2280      	movs	r2, #128	; 0x80
 80052e4:	0112      	lsls	r2, r2, #4
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d822      	bhi.n	8005330 <UART_SetConfig+0x1e0>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <UART_SetConfig+0x1a8>
 80052ee:	2280      	movs	r2, #128	; 0x80
 80052f0:	00d2      	lsls	r2, r2, #3
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00e      	beq.n	8005314 <UART_SetConfig+0x1c4>
 80052f6:	e01b      	b.n	8005330 <UART_SetConfig+0x1e0>
 80052f8:	231b      	movs	r3, #27
 80052fa:	2218      	movs	r2, #24
 80052fc:	189b      	adds	r3, r3, r2
 80052fe:	19db      	adds	r3, r3, r7
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	e021      	b.n	800534a <UART_SetConfig+0x1fa>
 8005306:	231b      	movs	r3, #27
 8005308:	2218      	movs	r2, #24
 800530a:	189b      	adds	r3, r3, r2
 800530c:	19db      	adds	r3, r3, r7
 800530e:	2202      	movs	r2, #2
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	e01a      	b.n	800534a <UART_SetConfig+0x1fa>
 8005314:	231b      	movs	r3, #27
 8005316:	2218      	movs	r2, #24
 8005318:	189b      	adds	r3, r3, r2
 800531a:	19db      	adds	r3, r3, r7
 800531c:	2204      	movs	r2, #4
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	e013      	b.n	800534a <UART_SetConfig+0x1fa>
 8005322:	231b      	movs	r3, #27
 8005324:	2218      	movs	r2, #24
 8005326:	189b      	adds	r3, r3, r2
 8005328:	19db      	adds	r3, r3, r7
 800532a:	2208      	movs	r2, #8
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e00c      	b.n	800534a <UART_SetConfig+0x1fa>
 8005330:	231b      	movs	r3, #27
 8005332:	2218      	movs	r2, #24
 8005334:	189b      	adds	r3, r3, r2
 8005336:	19db      	adds	r3, r3, r7
 8005338:	2210      	movs	r2, #16
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	e005      	b.n	800534a <UART_SetConfig+0x1fa>
 800533e:	231b      	movs	r3, #27
 8005340:	2218      	movs	r2, #24
 8005342:	189b      	adds	r3, r3, r2
 8005344:	19db      	adds	r3, r3, r7
 8005346:	2210      	movs	r2, #16
 8005348:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a55      	ldr	r2, [pc, #340]	; (80054a4 <UART_SetConfig+0x354>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d000      	beq.n	8005356 <UART_SetConfig+0x206>
 8005354:	e084      	b.n	8005460 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005356:	231b      	movs	r3, #27
 8005358:	2218      	movs	r2, #24
 800535a:	189b      	adds	r3, r3, r2
 800535c:	19db      	adds	r3, r3, r7
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b08      	cmp	r3, #8
 8005362:	d01d      	beq.n	80053a0 <UART_SetConfig+0x250>
 8005364:	dc20      	bgt.n	80053a8 <UART_SetConfig+0x258>
 8005366:	2b04      	cmp	r3, #4
 8005368:	d015      	beq.n	8005396 <UART_SetConfig+0x246>
 800536a:	dc1d      	bgt.n	80053a8 <UART_SetConfig+0x258>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <UART_SetConfig+0x226>
 8005370:	2b02      	cmp	r3, #2
 8005372:	d005      	beq.n	8005380 <UART_SetConfig+0x230>
 8005374:	e018      	b.n	80053a8 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005376:	f7fe fff5 	bl	8004364 <HAL_RCC_GetPCLK1Freq>
 800537a:	0003      	movs	r3, r0
 800537c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800537e:	e01c      	b.n	80053ba <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005380:	4b4b      	ldr	r3, [pc, #300]	; (80054b0 <UART_SetConfig+0x360>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2210      	movs	r2, #16
 8005386:	4013      	ands	r3, r2
 8005388:	d002      	beq.n	8005390 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800538a:	4b4b      	ldr	r3, [pc, #300]	; (80054b8 <UART_SetConfig+0x368>)
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800538e:	e014      	b.n	80053ba <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8005390:	4b4a      	ldr	r3, [pc, #296]	; (80054bc <UART_SetConfig+0x36c>)
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005394:	e011      	b.n	80053ba <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005396:	f7fe ff35 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 800539a:	0003      	movs	r3, r0
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800539e:	e00c      	b.n	80053ba <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053a0:	2380      	movs	r3, #128	; 0x80
 80053a2:	021b      	lsls	r3, r3, #8
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80053a6:	e008      	b.n	80053ba <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80053ac:	231a      	movs	r3, #26
 80053ae:	2218      	movs	r2, #24
 80053b0:	189b      	adds	r3, r3, r2
 80053b2:	19db      	adds	r3, r3, r7
 80053b4:	2201      	movs	r2, #1
 80053b6:	701a      	strb	r2, [r3, #0]
        break;
 80053b8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d100      	bne.n	80053c2 <UART_SetConfig+0x272>
 80053c0:	e132      	b.n	8005628 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	0013      	movs	r3, r2
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	189b      	adds	r3, r3, r2
 80053cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d305      	bcc.n	80053de <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053da:	429a      	cmp	r2, r3
 80053dc:	d906      	bls.n	80053ec <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80053de:	231a      	movs	r3, #26
 80053e0:	2218      	movs	r2, #24
 80053e2:	189b      	adds	r3, r3, r2
 80053e4:	19db      	adds	r3, r3, r7
 80053e6:	2201      	movs	r2, #1
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	e11d      	b.n	8005628 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	6939      	ldr	r1, [r7, #16]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	000b      	movs	r3, r1
 80053fa:	0e1b      	lsrs	r3, r3, #24
 80053fc:	0010      	movs	r0, r2
 80053fe:	0205      	lsls	r5, r0, #8
 8005400:	431d      	orrs	r5, r3
 8005402:	000b      	movs	r3, r1
 8005404:	021c      	lsls	r4, r3, #8
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	085b      	lsrs	r3, r3, #1
 800540c:	60bb      	str	r3, [r7, #8]
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	68b8      	ldr	r0, [r7, #8]
 8005414:	68f9      	ldr	r1, [r7, #12]
 8005416:	1900      	adds	r0, r0, r4
 8005418:	4169      	adcs	r1, r5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	2300      	movs	r3, #0
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f7fa ff0c 	bl	8000244 <__aeabi_uldivmod>
 800542c:	0002      	movs	r2, r0
 800542e:	000b      	movs	r3, r1
 8005430:	0013      	movs	r3, r2
 8005432:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005436:	23c0      	movs	r3, #192	; 0xc0
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	429a      	cmp	r2, r3
 800543c:	d309      	bcc.n	8005452 <UART_SetConfig+0x302>
 800543e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005440:	2380      	movs	r3, #128	; 0x80
 8005442:	035b      	lsls	r3, r3, #13
 8005444:	429a      	cmp	r2, r3
 8005446:	d204      	bcs.n	8005452 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800544e:	60da      	str	r2, [r3, #12]
 8005450:	e0ea      	b.n	8005628 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8005452:	231a      	movs	r3, #26
 8005454:	2218      	movs	r2, #24
 8005456:	189b      	adds	r3, r3, r2
 8005458:	19db      	adds	r3, r3, r7
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	e0e3      	b.n	8005628 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	429a      	cmp	r2, r3
 800546a:	d000      	beq.n	800546e <UART_SetConfig+0x31e>
 800546c:	e085      	b.n	800557a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800546e:	231b      	movs	r3, #27
 8005470:	2218      	movs	r2, #24
 8005472:	189b      	adds	r3, r3, r2
 8005474:	19db      	adds	r3, r3, r7
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b08      	cmp	r3, #8
 800547a:	d837      	bhi.n	80054ec <UART_SetConfig+0x39c>
 800547c:	009a      	lsls	r2, r3, #2
 800547e:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <UART_SetConfig+0x370>)
 8005480:	18d3      	adds	r3, r2, r3
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005486:	f7fe ff6d 	bl	8004364 <HAL_RCC_GetPCLK1Freq>
 800548a:	0003      	movs	r3, r0
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800548e:	e036      	b.n	80054fe <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005490:	f7fe ff7e 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 8005494:	0003      	movs	r3, r0
 8005496:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005498:	e031      	b.n	80054fe <UART_SetConfig+0x3ae>
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	efff69f3 	.word	0xefff69f3
 80054a0:	ffffcfff 	.word	0xffffcfff
 80054a4:	40004800 	.word	0x40004800
 80054a8:	fffff4ff 	.word	0xfffff4ff
 80054ac:	40013800 	.word	0x40013800
 80054b0:	40021000 	.word	0x40021000
 80054b4:	40004400 	.word	0x40004400
 80054b8:	003d0900 	.word	0x003d0900
 80054bc:	00f42400 	.word	0x00f42400
 80054c0:	08006a6c 	.word	0x08006a6c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054c4:	4b60      	ldr	r3, [pc, #384]	; (8005648 <UART_SetConfig+0x4f8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2210      	movs	r2, #16
 80054ca:	4013      	ands	r3, r2
 80054cc:	d002      	beq.n	80054d4 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80054ce:	4b5f      	ldr	r3, [pc, #380]	; (800564c <UART_SetConfig+0x4fc>)
 80054d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054d2:	e014      	b.n	80054fe <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80054d4:	4b5e      	ldr	r3, [pc, #376]	; (8005650 <UART_SetConfig+0x500>)
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054d8:	e011      	b.n	80054fe <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054da:	f7fe fe93 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80054de:	0003      	movs	r3, r0
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054e2:	e00c      	b.n	80054fe <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	021b      	lsls	r3, r3, #8
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054ea:	e008      	b.n	80054fe <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80054f0:	231a      	movs	r3, #26
 80054f2:	2218      	movs	r2, #24
 80054f4:	189b      	adds	r3, r3, r2
 80054f6:	19db      	adds	r3, r3, r7
 80054f8:	2201      	movs	r2, #1
 80054fa:	701a      	strb	r2, [r3, #0]
        break;
 80054fc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d100      	bne.n	8005506 <UART_SetConfig+0x3b6>
 8005504:	e090      	b.n	8005628 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005508:	005a      	lsls	r2, r3, #1
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	085b      	lsrs	r3, r3, #1
 8005510:	18d2      	adds	r2, r2, r3
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	0019      	movs	r1, r3
 8005518:	0010      	movs	r0, r2
 800551a:	f7fa fe07 	bl	800012c <__udivsi3>
 800551e:	0003      	movs	r3, r0
 8005520:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	2b0f      	cmp	r3, #15
 8005526:	d921      	bls.n	800556c <UART_SetConfig+0x41c>
 8005528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800552a:	2380      	movs	r3, #128	; 0x80
 800552c:	025b      	lsls	r3, r3, #9
 800552e:	429a      	cmp	r2, r3
 8005530:	d21c      	bcs.n	800556c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	b29a      	uxth	r2, r3
 8005536:	200e      	movs	r0, #14
 8005538:	2418      	movs	r4, #24
 800553a:	1903      	adds	r3, r0, r4
 800553c:	19db      	adds	r3, r3, r7
 800553e:	210f      	movs	r1, #15
 8005540:	438a      	bics	r2, r1
 8005542:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	085b      	lsrs	r3, r3, #1
 8005548:	b29b      	uxth	r3, r3
 800554a:	2207      	movs	r2, #7
 800554c:	4013      	ands	r3, r2
 800554e:	b299      	uxth	r1, r3
 8005550:	1903      	adds	r3, r0, r4
 8005552:	19db      	adds	r3, r3, r7
 8005554:	1902      	adds	r2, r0, r4
 8005556:	19d2      	adds	r2, r2, r7
 8005558:	8812      	ldrh	r2, [r2, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	1902      	adds	r2, r0, r4
 8005564:	19d2      	adds	r2, r2, r7
 8005566:	8812      	ldrh	r2, [r2, #0]
 8005568:	60da      	str	r2, [r3, #12]
 800556a:	e05d      	b.n	8005628 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800556c:	231a      	movs	r3, #26
 800556e:	2218      	movs	r2, #24
 8005570:	189b      	adds	r3, r3, r2
 8005572:	19db      	adds	r3, r3, r7
 8005574:	2201      	movs	r2, #1
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	e056      	b.n	8005628 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800557a:	231b      	movs	r3, #27
 800557c:	2218      	movs	r2, #24
 800557e:	189b      	adds	r3, r3, r2
 8005580:	19db      	adds	r3, r3, r7
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b08      	cmp	r3, #8
 8005586:	d822      	bhi.n	80055ce <UART_SetConfig+0x47e>
 8005588:	009a      	lsls	r2, r3, #2
 800558a:	4b32      	ldr	r3, [pc, #200]	; (8005654 <UART_SetConfig+0x504>)
 800558c:	18d3      	adds	r3, r2, r3
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005592:	f7fe fee7 	bl	8004364 <HAL_RCC_GetPCLK1Freq>
 8005596:	0003      	movs	r3, r0
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800559a:	e021      	b.n	80055e0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800559c:	f7fe fef8 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 80055a0:	0003      	movs	r3, r0
 80055a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055a4:	e01c      	b.n	80055e0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055a6:	4b28      	ldr	r3, [pc, #160]	; (8005648 <UART_SetConfig+0x4f8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2210      	movs	r2, #16
 80055ac:	4013      	ands	r3, r2
 80055ae:	d002      	beq.n	80055b6 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80055b0:	4b26      	ldr	r3, [pc, #152]	; (800564c <UART_SetConfig+0x4fc>)
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055b4:	e014      	b.n	80055e0 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80055b6:	4b26      	ldr	r3, [pc, #152]	; (8005650 <UART_SetConfig+0x500>)
 80055b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055ba:	e011      	b.n	80055e0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055bc:	f7fe fe22 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80055c0:	0003      	movs	r3, r0
 80055c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055c4:	e00c      	b.n	80055e0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c6:	2380      	movs	r3, #128	; 0x80
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055cc:	e008      	b.n	80055e0 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80055d2:	231a      	movs	r3, #26
 80055d4:	2218      	movs	r2, #24
 80055d6:	189b      	adds	r3, r3, r2
 80055d8:	19db      	adds	r3, r3, r7
 80055da:	2201      	movs	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
        break;
 80055de:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80055e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d020      	beq.n	8005628 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	085a      	lsrs	r2, r3, #1
 80055ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ee:	18d2      	adds	r2, r2, r3
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	0019      	movs	r1, r3
 80055f6:	0010      	movs	r0, r2
 80055f8:	f7fa fd98 	bl	800012c <__udivsi3>
 80055fc:	0003      	movs	r3, r0
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	2b0f      	cmp	r3, #15
 8005604:	d90a      	bls.n	800561c <UART_SetConfig+0x4cc>
 8005606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005608:	2380      	movs	r3, #128	; 0x80
 800560a:	025b      	lsls	r3, r3, #9
 800560c:	429a      	cmp	r2, r3
 800560e:	d205      	bcs.n	800561c <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	b29a      	uxth	r2, r3
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	e005      	b.n	8005628 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800561c:	231a      	movs	r3, #26
 800561e:	2218      	movs	r2, #24
 8005620:	189b      	adds	r3, r3, r2
 8005622:	19db      	adds	r3, r3, r7
 8005624:	2201      	movs	r2, #1
 8005626:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2200      	movs	r2, #0
 800562c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	2200      	movs	r2, #0
 8005632:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005634:	231a      	movs	r3, #26
 8005636:	2218      	movs	r2, #24
 8005638:	189b      	adds	r3, r3, r2
 800563a:	19db      	adds	r3, r3, r7
 800563c:	781b      	ldrb	r3, [r3, #0]
}
 800563e:	0018      	movs	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	b00e      	add	sp, #56	; 0x38
 8005644:	bdb0      	pop	{r4, r5, r7, pc}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	40021000 	.word	0x40021000
 800564c:	003d0900 	.word	0x003d0900
 8005650:	00f42400 	.word	0x00f42400
 8005654:	08006a90 	.word	0x08006a90

08005658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	2201      	movs	r2, #1
 8005666:	4013      	ands	r3, r2
 8005668:	d00b      	beq.n	8005682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4a4a      	ldr	r2, [pc, #296]	; (800579c <UART_AdvFeatureConfig+0x144>)
 8005672:	4013      	ands	r3, r2
 8005674:	0019      	movs	r1, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	2202      	movs	r2, #2
 8005688:	4013      	ands	r3, r2
 800568a:	d00b      	beq.n	80056a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	4a43      	ldr	r2, [pc, #268]	; (80057a0 <UART_AdvFeatureConfig+0x148>)
 8005694:	4013      	ands	r3, r2
 8005696:	0019      	movs	r1, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	2204      	movs	r2, #4
 80056aa:	4013      	ands	r3, r2
 80056ac:	d00b      	beq.n	80056c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4a3b      	ldr	r2, [pc, #236]	; (80057a4 <UART_AdvFeatureConfig+0x14c>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	0019      	movs	r1, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	2208      	movs	r2, #8
 80056cc:	4013      	ands	r3, r2
 80056ce:	d00b      	beq.n	80056e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	4a34      	ldr	r2, [pc, #208]	; (80057a8 <UART_AdvFeatureConfig+0x150>)
 80056d8:	4013      	ands	r3, r2
 80056da:	0019      	movs	r1, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	2210      	movs	r2, #16
 80056ee:	4013      	ands	r3, r2
 80056f0:	d00b      	beq.n	800570a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	4a2c      	ldr	r2, [pc, #176]	; (80057ac <UART_AdvFeatureConfig+0x154>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	0019      	movs	r1, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	2220      	movs	r2, #32
 8005710:	4013      	ands	r3, r2
 8005712:	d00b      	beq.n	800572c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	4a25      	ldr	r2, [pc, #148]	; (80057b0 <UART_AdvFeatureConfig+0x158>)
 800571c:	4013      	ands	r3, r2
 800571e:	0019      	movs	r1, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	2240      	movs	r2, #64	; 0x40
 8005732:	4013      	ands	r3, r2
 8005734:	d01d      	beq.n	8005772 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	4a1d      	ldr	r2, [pc, #116]	; (80057b4 <UART_AdvFeatureConfig+0x15c>)
 800573e:	4013      	ands	r3, r2
 8005740:	0019      	movs	r1, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005752:	2380      	movs	r3, #128	; 0x80
 8005754:	035b      	lsls	r3, r3, #13
 8005756:	429a      	cmp	r2, r3
 8005758:	d10b      	bne.n	8005772 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <UART_AdvFeatureConfig+0x160>)
 8005762:	4013      	ands	r3, r2
 8005764:	0019      	movs	r1, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2280      	movs	r2, #128	; 0x80
 8005778:	4013      	ands	r3, r2
 800577a:	d00b      	beq.n	8005794 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	4a0e      	ldr	r2, [pc, #56]	; (80057bc <UART_AdvFeatureConfig+0x164>)
 8005784:	4013      	ands	r3, r2
 8005786:	0019      	movs	r1, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	605a      	str	r2, [r3, #4]
  }
}
 8005794:	46c0      	nop			; (mov r8, r8)
 8005796:	46bd      	mov	sp, r7
 8005798:	b002      	add	sp, #8
 800579a:	bd80      	pop	{r7, pc}
 800579c:	fffdffff 	.word	0xfffdffff
 80057a0:	fffeffff 	.word	0xfffeffff
 80057a4:	fffbffff 	.word	0xfffbffff
 80057a8:	ffff7fff 	.word	0xffff7fff
 80057ac:	ffffefff 	.word	0xffffefff
 80057b0:	ffffdfff 	.word	0xffffdfff
 80057b4:	ffefffff 	.word	0xffefffff
 80057b8:	ff9fffff 	.word	0xff9fffff
 80057bc:	fff7ffff 	.word	0xfff7ffff

080057c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b092      	sub	sp, #72	; 0x48
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2284      	movs	r2, #132	; 0x84
 80057cc:	2100      	movs	r1, #0
 80057ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057d0:	f7fc ff0c 	bl	80025ec <HAL_GetTick>
 80057d4:	0003      	movs	r3, r0
 80057d6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2208      	movs	r2, #8
 80057e0:	4013      	ands	r3, r2
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d12c      	bne.n	8005840 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e8:	2280      	movs	r2, #128	; 0x80
 80057ea:	0391      	lsls	r1, r2, #14
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	4a46      	ldr	r2, [pc, #280]	; (8005908 <UART_CheckIdleState+0x148>)
 80057f0:	9200      	str	r2, [sp, #0]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f000 f88c 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 80057f8:	1e03      	subs	r3, r0, #0
 80057fa:	d021      	beq.n	8005840 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005804:	63bb      	str	r3, [r7, #56]	; 0x38
 8005806:	2301      	movs	r3, #1
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	f383 8810 	msr	PRIMASK, r3
}
 8005810:	46c0      	nop			; (mov r8, r8)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2180      	movs	r1, #128	; 0x80
 800581e:	438a      	bics	r2, r1
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005824:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005828:	f383 8810 	msr	PRIMASK, r3
}
 800582c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2220      	movs	r2, #32
 8005832:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2278      	movs	r2, #120	; 0x78
 8005838:	2100      	movs	r1, #0
 800583a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e05f      	b.n	8005900 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2204      	movs	r2, #4
 8005848:	4013      	ands	r3, r2
 800584a:	2b04      	cmp	r3, #4
 800584c:	d146      	bne.n	80058dc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800584e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005850:	2280      	movs	r2, #128	; 0x80
 8005852:	03d1      	lsls	r1, r2, #15
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	4a2c      	ldr	r2, [pc, #176]	; (8005908 <UART_CheckIdleState+0x148>)
 8005858:	9200      	str	r2, [sp, #0]
 800585a:	2200      	movs	r2, #0
 800585c:	f000 f858 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 8005860:	1e03      	subs	r3, r0, #0
 8005862:	d03b      	beq.n	80058dc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005864:	f3ef 8310 	mrs	r3, PRIMASK
 8005868:	60fb      	str	r3, [r7, #12]
  return(result);
 800586a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
 800586e:	2301      	movs	r3, #1
 8005870:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f383 8810 	msr	PRIMASK, r3
}
 8005878:	46c0      	nop			; (mov r8, r8)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4921      	ldr	r1, [pc, #132]	; (800590c <UART_CheckIdleState+0x14c>)
 8005886:	400a      	ands	r2, r1
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f383 8810 	msr	PRIMASK, r3
}
 8005894:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005896:	f3ef 8310 	mrs	r3, PRIMASK
 800589a:	61bb      	str	r3, [r7, #24]
  return(result);
 800589c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589e:	633b      	str	r3, [r7, #48]	; 0x30
 80058a0:	2301      	movs	r3, #1
 80058a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f383 8810 	msr	PRIMASK, r3
}
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2101      	movs	r1, #1
 80058b8:	438a      	bics	r2, r1
 80058ba:	609a      	str	r2, [r3, #8]
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	f383 8810 	msr	PRIMASK, r3
}
 80058c6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2280      	movs	r2, #128	; 0x80
 80058cc:	2120      	movs	r1, #32
 80058ce:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2278      	movs	r2, #120	; 0x78
 80058d4:	2100      	movs	r1, #0
 80058d6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e011      	b.n	8005900 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2220      	movs	r2, #32
 80058e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2280      	movs	r2, #128	; 0x80
 80058e6:	2120      	movs	r1, #32
 80058e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2278      	movs	r2, #120	; 0x78
 80058fa:	2100      	movs	r1, #0
 80058fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	0018      	movs	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	b010      	add	sp, #64	; 0x40
 8005906:	bd80      	pop	{r7, pc}
 8005908:	01ffffff 	.word	0x01ffffff
 800590c:	fffffedf 	.word	0xfffffedf

08005910 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	1dfb      	adds	r3, r7, #7
 800591e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005920:	e04b      	b.n	80059ba <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	3301      	adds	r3, #1
 8005926:	d048      	beq.n	80059ba <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005928:	f7fc fe60 	bl	80025ec <HAL_GetTick>
 800592c:	0002      	movs	r2, r0
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	429a      	cmp	r2, r3
 8005936:	d302      	bcc.n	800593e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e04b      	b.n	80059da <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2204      	movs	r2, #4
 800594a:	4013      	ands	r3, r2
 800594c:	d035      	beq.n	80059ba <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	2208      	movs	r2, #8
 8005956:	4013      	ands	r3, r2
 8005958:	2b08      	cmp	r3, #8
 800595a:	d111      	bne.n	8005980 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2208      	movs	r2, #8
 8005962:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	0018      	movs	r0, r3
 8005968:	f000 f83c 	bl	80059e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2284      	movs	r2, #132	; 0x84
 8005970:	2108      	movs	r1, #8
 8005972:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2278      	movs	r2, #120	; 0x78
 8005978:	2100      	movs	r1, #0
 800597a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e02c      	b.n	80059da <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69da      	ldr	r2, [r3, #28]
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	401a      	ands	r2, r3
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	429a      	cmp	r2, r3
 8005992:	d112      	bne.n	80059ba <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2280      	movs	r2, #128	; 0x80
 800599a:	0112      	lsls	r2, r2, #4
 800599c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f000 f81f 	bl	80059e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2284      	movs	r2, #132	; 0x84
 80059aa:	2120      	movs	r1, #32
 80059ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2278      	movs	r2, #120	; 0x78
 80059b2:	2100      	movs	r1, #0
 80059b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e00f      	b.n	80059da <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	4013      	ands	r3, r2
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	425a      	negs	r2, r3
 80059ca:	4153      	adcs	r3, r2
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	001a      	movs	r2, r3
 80059d0:	1dfb      	adds	r3, r7, #7
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d0a4      	beq.n	8005922 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	0018      	movs	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	b004      	add	sp, #16
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08e      	sub	sp, #56	; 0x38
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ec:	f3ef 8310 	mrs	r3, PRIMASK
 80059f0:	617b      	str	r3, [r7, #20]
  return(result);
 80059f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059f4:	637b      	str	r3, [r7, #52]	; 0x34
 80059f6:	2301      	movs	r3, #1
 80059f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	f383 8810 	msr	PRIMASK, r3
}
 8005a00:	46c0      	nop			; (mov r8, r8)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4926      	ldr	r1, [pc, #152]	; (8005aa8 <UART_EndRxTransfer+0xc4>)
 8005a0e:	400a      	ands	r2, r1
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f383 8810 	msr	PRIMASK, r3
}
 8005a1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a22:	623b      	str	r3, [r7, #32]
  return(result);
 8005a24:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	633b      	str	r3, [r7, #48]	; 0x30
 8005a28:	2301      	movs	r3, #1
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	f383 8810 	msr	PRIMASK, r3
}
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2101      	movs	r1, #1
 8005a40:	438a      	bics	r2, r1
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	f383 8810 	msr	PRIMASK, r3
}
 8005a4e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d118      	bne.n	8005a8a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a58:	f3ef 8310 	mrs	r3, PRIMASK
 8005a5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a62:	2301      	movs	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f383 8810 	msr	PRIMASK, r3
}
 8005a6c:	46c0      	nop			; (mov r8, r8)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2110      	movs	r1, #16
 8005a7a:	438a      	bics	r2, r1
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f383 8810 	msr	PRIMASK, r3
}
 8005a88:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2280      	movs	r2, #128	; 0x80
 8005a8e:	2120      	movs	r1, #32
 8005a90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	b00e      	add	sp, #56	; 0x38
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	fffffedf 	.word	0xfffffedf

08005aac <__errno>:
 8005aac:	4b01      	ldr	r3, [pc, #4]	; (8005ab4 <__errno+0x8>)
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	4770      	bx	lr
 8005ab2:	46c0      	nop			; (mov r8, r8)
 8005ab4:	20000164 	.word	0x20000164

08005ab8 <__libc_init_array>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	2600      	movs	r6, #0
 8005abc:	4d0c      	ldr	r5, [pc, #48]	; (8005af0 <__libc_init_array+0x38>)
 8005abe:	4c0d      	ldr	r4, [pc, #52]	; (8005af4 <__libc_init_array+0x3c>)
 8005ac0:	1b64      	subs	r4, r4, r5
 8005ac2:	10a4      	asrs	r4, r4, #2
 8005ac4:	42a6      	cmp	r6, r4
 8005ac6:	d109      	bne.n	8005adc <__libc_init_array+0x24>
 8005ac8:	2600      	movs	r6, #0
 8005aca:	f000 fe1d 	bl	8006708 <_init>
 8005ace:	4d0a      	ldr	r5, [pc, #40]	; (8005af8 <__libc_init_array+0x40>)
 8005ad0:	4c0a      	ldr	r4, [pc, #40]	; (8005afc <__libc_init_array+0x44>)
 8005ad2:	1b64      	subs	r4, r4, r5
 8005ad4:	10a4      	asrs	r4, r4, #2
 8005ad6:	42a6      	cmp	r6, r4
 8005ad8:	d105      	bne.n	8005ae6 <__libc_init_array+0x2e>
 8005ada:	bd70      	pop	{r4, r5, r6, pc}
 8005adc:	00b3      	lsls	r3, r6, #2
 8005ade:	58eb      	ldr	r3, [r5, r3]
 8005ae0:	4798      	blx	r3
 8005ae2:	3601      	adds	r6, #1
 8005ae4:	e7ee      	b.n	8005ac4 <__libc_init_array+0xc>
 8005ae6:	00b3      	lsls	r3, r6, #2
 8005ae8:	58eb      	ldr	r3, [r5, r3]
 8005aea:	4798      	blx	r3
 8005aec:	3601      	adds	r6, #1
 8005aee:	e7f2      	b.n	8005ad6 <__libc_init_array+0x1e>
 8005af0:	08006af0 	.word	0x08006af0
 8005af4:	08006af0 	.word	0x08006af0
 8005af8:	08006af0 	.word	0x08006af0
 8005afc:	08006af4 	.word	0x08006af4

08005b00 <memcpy>:
 8005b00:	2300      	movs	r3, #0
 8005b02:	b510      	push	{r4, lr}
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d100      	bne.n	8005b0a <memcpy+0xa>
 8005b08:	bd10      	pop	{r4, pc}
 8005b0a:	5ccc      	ldrb	r4, [r1, r3]
 8005b0c:	54c4      	strb	r4, [r0, r3]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	e7f8      	b.n	8005b04 <memcpy+0x4>

08005b12 <memset>:
 8005b12:	0003      	movs	r3, r0
 8005b14:	1882      	adds	r2, r0, r2
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d100      	bne.n	8005b1c <memset+0xa>
 8005b1a:	4770      	bx	lr
 8005b1c:	7019      	strb	r1, [r3, #0]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	e7f9      	b.n	8005b16 <memset+0x4>

08005b22 <swapfunc>:
 8005b22:	b530      	push	{r4, r5, lr}
 8005b24:	2400      	movs	r4, #0
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d009      	beq.n	8005b3e <swapfunc+0x1c>
 8005b2a:	0892      	lsrs	r2, r2, #2
 8005b2c:	5903      	ldr	r3, [r0, r4]
 8005b2e:	590d      	ldr	r5, [r1, r4]
 8005b30:	3a01      	subs	r2, #1
 8005b32:	5105      	str	r5, [r0, r4]
 8005b34:	510b      	str	r3, [r1, r4]
 8005b36:	3404      	adds	r4, #4
 8005b38:	2a00      	cmp	r2, #0
 8005b3a:	dcf7      	bgt.n	8005b2c <swapfunc+0xa>
 8005b3c:	bd30      	pop	{r4, r5, pc}
 8005b3e:	5d03      	ldrb	r3, [r0, r4]
 8005b40:	5d0d      	ldrb	r5, [r1, r4]
 8005b42:	5505      	strb	r5, [r0, r4]
 8005b44:	550b      	strb	r3, [r1, r4]
 8005b46:	3401      	adds	r4, #1
 8005b48:	1b13      	subs	r3, r2, r4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	dcf7      	bgt.n	8005b3e <swapfunc+0x1c>
 8005b4e:	e7f5      	b.n	8005b3c <swapfunc+0x1a>

08005b50 <med3.constprop.0>:
 8005b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b52:	000c      	movs	r4, r1
 8005b54:	0015      	movs	r5, r2
 8005b56:	0007      	movs	r7, r0
 8005b58:	001e      	movs	r6, r3
 8005b5a:	4798      	blx	r3
 8005b5c:	0029      	movs	r1, r5
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	da0b      	bge.n	8005b7a <med3.constprop.0+0x2a>
 8005b62:	0020      	movs	r0, r4
 8005b64:	47b0      	blx	r6
 8005b66:	2800      	cmp	r0, #0
 8005b68:	db05      	blt.n	8005b76 <med3.constprop.0+0x26>
 8005b6a:	0029      	movs	r1, r5
 8005b6c:	0038      	movs	r0, r7
 8005b6e:	47b0      	blx	r6
 8005b70:	2800      	cmp	r0, #0
 8005b72:	db0b      	blt.n	8005b8c <med3.constprop.0+0x3c>
 8005b74:	003c      	movs	r4, r7
 8005b76:	0020      	movs	r0, r4
 8005b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b7a:	0020      	movs	r0, r4
 8005b7c:	47b0      	blx	r6
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	dcf9      	bgt.n	8005b76 <med3.constprop.0+0x26>
 8005b82:	0029      	movs	r1, r5
 8005b84:	0038      	movs	r0, r7
 8005b86:	47b0      	blx	r6
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	dbf3      	blt.n	8005b74 <med3.constprop.0+0x24>
 8005b8c:	002c      	movs	r4, r5
 8005b8e:	e7f2      	b.n	8005b76 <med3.constprop.0+0x26>

08005b90 <qsort>:
 8005b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b92:	b099      	sub	sp, #100	; 0x64
 8005b94:	9000      	str	r0, [sp, #0]
 8005b96:	9303      	str	r3, [sp, #12]
 8005b98:	9b00      	ldr	r3, [sp, #0]
 8005b9a:	0016      	movs	r6, r2
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	0008      	movs	r0, r1
 8005ba2:	9201      	str	r2, [sp, #4]
 8005ba4:	079b      	lsls	r3, r3, #30
 8005ba6:	d104      	bne.n	8005bb2 <qsort+0x22>
 8005ba8:	1f33      	subs	r3, r6, #4
 8005baa:	001a      	movs	r2, r3
 8005bac:	1e53      	subs	r3, r2, #1
 8005bae:	419a      	sbcs	r2, r3
 8005bb0:	9201      	str	r2, [sp, #4]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9304      	str	r3, [sp, #16]
 8005bb6:	0037      	movs	r7, r6
 8005bb8:	9b00      	ldr	r3, [sp, #0]
 8005bba:	4347      	muls	r7, r0
 8005bbc:	199b      	adds	r3, r3, r6
 8005bbe:	9302      	str	r3, [sp, #8]
 8005bc0:	9b00      	ldr	r3, [sp, #0]
 8005bc2:	19db      	adds	r3, r3, r7
 8005bc4:	9306      	str	r3, [sp, #24]
 8005bc6:	2806      	cmp	r0, #6
 8005bc8:	d828      	bhi.n	8005c1c <qsort+0x8c>
 8005bca:	9b02      	ldr	r3, [sp, #8]
 8005bcc:	9a06      	ldr	r2, [sp, #24]
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d30c      	bcc.n	8005bec <qsort+0x5c>
 8005bd2:	9b04      	ldr	r3, [sp, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d000      	beq.n	8005bda <qsort+0x4a>
 8005bd8:	e123      	b.n	8005e22 <qsort+0x292>
 8005bda:	b019      	add	sp, #100	; 0x64
 8005bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bde:	0032      	movs	r2, r6
 8005be0:	0029      	movs	r1, r5
 8005be2:	0020      	movs	r0, r4
 8005be4:	9b01      	ldr	r3, [sp, #4]
 8005be6:	f7ff ff9c 	bl	8005b22 <swapfunc>
 8005bea:	e00f      	b.n	8005c0c <qsort+0x7c>
 8005bec:	9c02      	ldr	r4, [sp, #8]
 8005bee:	e00e      	b.n	8005c0e <qsort+0x7e>
 8005bf0:	1ba5      	subs	r5, r4, r6
 8005bf2:	0021      	movs	r1, r4
 8005bf4:	0028      	movs	r0, r5
 8005bf6:	9b03      	ldr	r3, [sp, #12]
 8005bf8:	4798      	blx	r3
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	dd0a      	ble.n	8005c14 <qsort+0x84>
 8005bfe:	9b01      	ldr	r3, [sp, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1ec      	bne.n	8005bde <qsort+0x4e>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	682a      	ldr	r2, [r5, #0]
 8005c08:	6022      	str	r2, [r4, #0]
 8005c0a:	602b      	str	r3, [r5, #0]
 8005c0c:	002c      	movs	r4, r5
 8005c0e:	9b00      	ldr	r3, [sp, #0]
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	d3ed      	bcc.n	8005bf0 <qsort+0x60>
 8005c14:	9b02      	ldr	r3, [sp, #8]
 8005c16:	199b      	adds	r3, r3, r6
 8005c18:	9302      	str	r3, [sp, #8]
 8005c1a:	e7d6      	b.n	8005bca <qsort+0x3a>
 8005c1c:	0845      	lsrs	r5, r0, #1
 8005c1e:	4375      	muls	r5, r6
 8005c20:	9b00      	ldr	r3, [sp, #0]
 8005c22:	1bbf      	subs	r7, r7, r6
 8005c24:	195d      	adds	r5, r3, r5
 8005c26:	19df      	adds	r7, r3, r7
 8005c28:	2807      	cmp	r0, #7
 8005c2a:	d021      	beq.n	8005c70 <qsort+0xe0>
 8005c2c:	003a      	movs	r2, r7
 8005c2e:	9305      	str	r3, [sp, #20]
 8005c30:	2828      	cmp	r0, #40	; 0x28
 8005c32:	d917      	bls.n	8005c64 <qsort+0xd4>
 8005c34:	08c4      	lsrs	r4, r0, #3
 8005c36:	4374      	muls	r4, r6
 8005c38:	1919      	adds	r1, r3, r4
 8005c3a:	190a      	adds	r2, r1, r4
 8005c3c:	9b03      	ldr	r3, [sp, #12]
 8005c3e:	9800      	ldr	r0, [sp, #0]
 8005c40:	f7ff ff86 	bl	8005b50 <med3.constprop.0>
 8005c44:	0029      	movs	r1, r5
 8005c46:	192a      	adds	r2, r5, r4
 8005c48:	9b03      	ldr	r3, [sp, #12]
 8005c4a:	9005      	str	r0, [sp, #20]
 8005c4c:	1b28      	subs	r0, r5, r4
 8005c4e:	f7ff ff7f 	bl	8005b50 <med3.constprop.0>
 8005c52:	0005      	movs	r5, r0
 8005c54:	0060      	lsls	r0, r4, #1
 8005c56:	1a38      	subs	r0, r7, r0
 8005c58:	003a      	movs	r2, r7
 8005c5a:	9b03      	ldr	r3, [sp, #12]
 8005c5c:	1901      	adds	r1, r0, r4
 8005c5e:	f7ff ff77 	bl	8005b50 <med3.constprop.0>
 8005c62:	0002      	movs	r2, r0
 8005c64:	0029      	movs	r1, r5
 8005c66:	9b03      	ldr	r3, [sp, #12]
 8005c68:	9805      	ldr	r0, [sp, #20]
 8005c6a:	f7ff ff71 	bl	8005b50 <med3.constprop.0>
 8005c6e:	0005      	movs	r5, r0
 8005c70:	9b01      	ldr	r3, [sp, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d11f      	bne.n	8005cb6 <qsort+0x126>
 8005c76:	9b00      	ldr	r3, [sp, #0]
 8005c78:	6829      	ldr	r1, [r5, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	9a00      	ldr	r2, [sp, #0]
 8005c7e:	6011      	str	r1, [r2, #0]
 8005c80:	602b      	str	r3, [r5, #0]
 8005c82:	9d02      	ldr	r5, [sp, #8]
 8005c84:	2300      	movs	r3, #0
 8005c86:	002c      	movs	r4, r5
 8005c88:	9705      	str	r7, [sp, #20]
 8005c8a:	9307      	str	r3, [sp, #28]
 8005c8c:	42bd      	cmp	r5, r7
 8005c8e:	d834      	bhi.n	8005cfa <qsort+0x16a>
 8005c90:	0028      	movs	r0, r5
 8005c92:	9900      	ldr	r1, [sp, #0]
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	4798      	blx	r3
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	dc3f      	bgt.n	8005d1c <qsort+0x18c>
 8005c9c:	d109      	bne.n	8005cb2 <qsort+0x122>
 8005c9e:	9b01      	ldr	r3, [sp, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10f      	bne.n	8005cc4 <qsort+0x134>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	682a      	ldr	r2, [r5, #0]
 8005ca8:	6022      	str	r2, [r4, #0]
 8005caa:	602b      	str	r3, [r5, #0]
 8005cac:	19a4      	adds	r4, r4, r6
 8005cae:	2301      	movs	r3, #1
 8005cb0:	9307      	str	r3, [sp, #28]
 8005cb2:	19ad      	adds	r5, r5, r6
 8005cb4:	e7ea      	b.n	8005c8c <qsort+0xfc>
 8005cb6:	0032      	movs	r2, r6
 8005cb8:	0029      	movs	r1, r5
 8005cba:	9b01      	ldr	r3, [sp, #4]
 8005cbc:	9800      	ldr	r0, [sp, #0]
 8005cbe:	f7ff ff30 	bl	8005b22 <swapfunc>
 8005cc2:	e7de      	b.n	8005c82 <qsort+0xf2>
 8005cc4:	0032      	movs	r2, r6
 8005cc6:	0029      	movs	r1, r5
 8005cc8:	0020      	movs	r0, r4
 8005cca:	9b01      	ldr	r3, [sp, #4]
 8005ccc:	f7ff ff29 	bl	8005b22 <swapfunc>
 8005cd0:	e7ec      	b.n	8005cac <qsort+0x11c>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d10e      	bne.n	8005cf4 <qsort+0x164>
 8005cd6:	9b01      	ldr	r3, [sp, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d118      	bne.n	8005d0e <qsort+0x17e>
 8005cdc:	9a05      	ldr	r2, [sp, #20]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6812      	ldr	r2, [r2, #0]
 8005ce2:	603a      	str	r2, [r7, #0]
 8005ce4:	9207      	str	r2, [sp, #28]
 8005ce6:	9a05      	ldr	r2, [sp, #20]
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	9b05      	ldr	r3, [sp, #20]
 8005cec:	1b9b      	subs	r3, r3, r6
 8005cee:	9305      	str	r3, [sp, #20]
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	9307      	str	r3, [sp, #28]
 8005cf4:	1bbf      	subs	r7, r7, r6
 8005cf6:	42af      	cmp	r7, r5
 8005cf8:	d210      	bcs.n	8005d1c <qsort+0x18c>
 8005cfa:	9b07      	ldr	r3, [sp, #28]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d140      	bne.n	8005d82 <qsort+0x1f2>
 8005d00:	9b02      	ldr	r3, [sp, #8]
 8005d02:	9a06      	ldr	r2, [sp, #24]
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d300      	bcc.n	8005d0a <qsort+0x17a>
 8005d08:	e763      	b.n	8005bd2 <qsort+0x42>
 8005d0a:	9c02      	ldr	r4, [sp, #8]
 8005d0c:	e032      	b.n	8005d74 <qsort+0x1e4>
 8005d0e:	0032      	movs	r2, r6
 8005d10:	0038      	movs	r0, r7
 8005d12:	9b01      	ldr	r3, [sp, #4]
 8005d14:	9905      	ldr	r1, [sp, #20]
 8005d16:	f7ff ff04 	bl	8005b22 <swapfunc>
 8005d1a:	e7e6      	b.n	8005cea <qsort+0x15a>
 8005d1c:	0038      	movs	r0, r7
 8005d1e:	9900      	ldr	r1, [sp, #0]
 8005d20:	9b03      	ldr	r3, [sp, #12]
 8005d22:	4798      	blx	r3
 8005d24:	2800      	cmp	r0, #0
 8005d26:	dad4      	bge.n	8005cd2 <qsort+0x142>
 8005d28:	9b01      	ldr	r3, [sp, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d006      	beq.n	8005d3c <qsort+0x1ac>
 8005d2e:	0032      	movs	r2, r6
 8005d30:	0039      	movs	r1, r7
 8005d32:	0028      	movs	r0, r5
 8005d34:	9b01      	ldr	r3, [sp, #4]
 8005d36:	f7ff fef4 	bl	8005b22 <swapfunc>
 8005d3a:	e003      	b.n	8005d44 <qsort+0x1b4>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	602a      	str	r2, [r5, #0]
 8005d42:	603b      	str	r3, [r7, #0]
 8005d44:	1bbf      	subs	r7, r7, r6
 8005d46:	e7b2      	b.n	8005cae <qsort+0x11e>
 8005d48:	0032      	movs	r2, r6
 8005d4a:	0029      	movs	r1, r5
 8005d4c:	0020      	movs	r0, r4
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	f7ff fee7 	bl	8005b22 <swapfunc>
 8005d54:	e00d      	b.n	8005d72 <qsort+0x1e2>
 8005d56:	1ba5      	subs	r5, r4, r6
 8005d58:	0021      	movs	r1, r4
 8005d5a:	0028      	movs	r0, r5
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	4798      	blx	r3
 8005d60:	2800      	cmp	r0, #0
 8005d62:	dd0a      	ble.n	8005d7a <qsort+0x1ea>
 8005d64:	9b01      	ldr	r3, [sp, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1ee      	bne.n	8005d48 <qsort+0x1b8>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	682a      	ldr	r2, [r5, #0]
 8005d6e:	6022      	str	r2, [r4, #0]
 8005d70:	602b      	str	r3, [r5, #0]
 8005d72:	002c      	movs	r4, r5
 8005d74:	9b00      	ldr	r3, [sp, #0]
 8005d76:	42a3      	cmp	r3, r4
 8005d78:	d3ed      	bcc.n	8005d56 <qsort+0x1c6>
 8005d7a:	9b02      	ldr	r3, [sp, #8]
 8005d7c:	199b      	adds	r3, r3, r6
 8005d7e:	9302      	str	r3, [sp, #8]
 8005d80:	e7be      	b.n	8005d00 <qsort+0x170>
 8005d82:	1b2b      	subs	r3, r5, r4
 8005d84:	9302      	str	r3, [sp, #8]
 8005d86:	9b00      	ldr	r3, [sp, #0]
 8005d88:	1ae2      	subs	r2, r4, r3
 8005d8a:	9b02      	ldr	r3, [sp, #8]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	dd00      	ble.n	8005d92 <qsort+0x202>
 8005d90:	001a      	movs	r2, r3
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	d004      	beq.n	8005da0 <qsort+0x210>
 8005d96:	9b01      	ldr	r3, [sp, #4]
 8005d98:	9800      	ldr	r0, [sp, #0]
 8005d9a:	1aa9      	subs	r1, r5, r2
 8005d9c:	f7ff fec1 	bl	8005b22 <swapfunc>
 8005da0:	9b05      	ldr	r3, [sp, #20]
 8005da2:	9a05      	ldr	r2, [sp, #20]
 8005da4:	1bdc      	subs	r4, r3, r7
 8005da6:	9b06      	ldr	r3, [sp, #24]
 8005da8:	1a9a      	subs	r2, r3, r2
 8005daa:	1b92      	subs	r2, r2, r6
 8005dac:	42a2      	cmp	r2, r4
 8005dae:	d900      	bls.n	8005db2 <qsort+0x222>
 8005db0:	0022      	movs	r2, r4
 8005db2:	2a00      	cmp	r2, #0
 8005db4:	d005      	beq.n	8005dc2 <qsort+0x232>
 8005db6:	9b06      	ldr	r3, [sp, #24]
 8005db8:	0028      	movs	r0, r5
 8005dba:	1a99      	subs	r1, r3, r2
 8005dbc:	9b01      	ldr	r3, [sp, #4]
 8005dbe:	f7ff feb0 	bl	8005b22 <swapfunc>
 8005dc2:	9b06      	ldr	r3, [sp, #24]
 8005dc4:	9d02      	ldr	r5, [sp, #8]
 8005dc6:	1b1f      	subs	r7, r3, r4
 8005dc8:	42ac      	cmp	r4, r5
 8005dca:	d904      	bls.n	8005dd6 <qsort+0x246>
 8005dcc:	9b00      	ldr	r3, [sp, #0]
 8005dce:	9700      	str	r7, [sp, #0]
 8005dd0:	001f      	movs	r7, r3
 8005dd2:	0025      	movs	r5, r4
 8005dd4:	9c02      	ldr	r4, [sp, #8]
 8005dd6:	42b4      	cmp	r4, r6
 8005dd8:	d92c      	bls.n	8005e34 <qsort+0x2a4>
 8005dda:	9b04      	ldr	r3, [sp, #16]
 8005ddc:	2b07      	cmp	r3, #7
 8005dde:	d814      	bhi.n	8005e0a <qsort+0x27a>
 8005de0:	9900      	ldr	r1, [sp, #0]
 8005de2:	aa08      	add	r2, sp, #32
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	5099      	str	r1, [r3, r2]
 8005de8:	0028      	movs	r0, r5
 8005dea:	189b      	adds	r3, r3, r2
 8005dec:	0031      	movs	r1, r6
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	f7fa f99c 	bl	800012c <__udivsi3>
 8005df4:	9b00      	ldr	r3, [sp, #0]
 8005df6:	0031      	movs	r1, r6
 8005df8:	6058      	str	r0, [r3, #4]
 8005dfa:	9b04      	ldr	r3, [sp, #16]
 8005dfc:	0020      	movs	r0, r4
 8005dfe:	3301      	adds	r3, #1
 8005e00:	9304      	str	r3, [sp, #16]
 8005e02:	f7fa f993 	bl	800012c <__udivsi3>
 8005e06:	9700      	str	r7, [sp, #0]
 8005e08:	e6d5      	b.n	8005bb6 <qsort+0x26>
 8005e0a:	0031      	movs	r1, r6
 8005e0c:	0020      	movs	r0, r4
 8005e0e:	f7fa f98d 	bl	800012c <__udivsi3>
 8005e12:	0032      	movs	r2, r6
 8005e14:	0001      	movs	r1, r0
 8005e16:	9b03      	ldr	r3, [sp, #12]
 8005e18:	0038      	movs	r0, r7
 8005e1a:	f7ff feb9 	bl	8005b90 <qsort>
 8005e1e:	42b5      	cmp	r5, r6
 8005e20:	d80b      	bhi.n	8005e3a <qsort+0x2aa>
 8005e22:	9b04      	ldr	r3, [sp, #16]
 8005e24:	aa08      	add	r2, sp, #32
 8005e26:	3b01      	subs	r3, #1
 8005e28:	9304      	str	r3, [sp, #16]
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	589f      	ldr	r7, [r3, r2]
 8005e2e:	189b      	adds	r3, r3, r2
 8005e30:	6858      	ldr	r0, [r3, #4]
 8005e32:	e7e8      	b.n	8005e06 <qsort+0x276>
 8005e34:	42b5      	cmp	r5, r6
 8005e36:	d800      	bhi.n	8005e3a <qsort+0x2aa>
 8005e38:	e6cb      	b.n	8005bd2 <qsort+0x42>
 8005e3a:	0031      	movs	r1, r6
 8005e3c:	0028      	movs	r0, r5
 8005e3e:	f7fa f975 	bl	800012c <__udivsi3>
 8005e42:	9f00      	ldr	r7, [sp, #0]
 8005e44:	e7df      	b.n	8005e06 <qsort+0x276>
	...

08005e48 <siprintf>:
 8005e48:	b40e      	push	{r1, r2, r3}
 8005e4a:	b500      	push	{lr}
 8005e4c:	490b      	ldr	r1, [pc, #44]	; (8005e7c <siprintf+0x34>)
 8005e4e:	b09c      	sub	sp, #112	; 0x70
 8005e50:	ab1d      	add	r3, sp, #116	; 0x74
 8005e52:	9002      	str	r0, [sp, #8]
 8005e54:	9006      	str	r0, [sp, #24]
 8005e56:	9107      	str	r1, [sp, #28]
 8005e58:	9104      	str	r1, [sp, #16]
 8005e5a:	4809      	ldr	r0, [pc, #36]	; (8005e80 <siprintf+0x38>)
 8005e5c:	4909      	ldr	r1, [pc, #36]	; (8005e84 <siprintf+0x3c>)
 8005e5e:	cb04      	ldmia	r3!, {r2}
 8005e60:	9105      	str	r1, [sp, #20]
 8005e62:	6800      	ldr	r0, [r0, #0]
 8005e64:	a902      	add	r1, sp, #8
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	f000 f870 	bl	8005f4c <_svfiprintf_r>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	9a02      	ldr	r2, [sp, #8]
 8005e70:	7013      	strb	r3, [r2, #0]
 8005e72:	b01c      	add	sp, #112	; 0x70
 8005e74:	bc08      	pop	{r3}
 8005e76:	b003      	add	sp, #12
 8005e78:	4718      	bx	r3
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	7fffffff 	.word	0x7fffffff
 8005e80:	20000164 	.word	0x20000164
 8005e84:	ffff0208 	.word	0xffff0208

08005e88 <__ssputs_r>:
 8005e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8a:	688e      	ldr	r6, [r1, #8]
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	0007      	movs	r7, r0
 8005e90:	000c      	movs	r4, r1
 8005e92:	9203      	str	r2, [sp, #12]
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	429e      	cmp	r6, r3
 8005e98:	d83c      	bhi.n	8005f14 <__ssputs_r+0x8c>
 8005e9a:	2390      	movs	r3, #144	; 0x90
 8005e9c:	898a      	ldrh	r2, [r1, #12]
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	421a      	tst	r2, r3
 8005ea2:	d034      	beq.n	8005f0e <__ssputs_r+0x86>
 8005ea4:	6909      	ldr	r1, [r1, #16]
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	6960      	ldr	r0, [r4, #20]
 8005eaa:	1a5b      	subs	r3, r3, r1
 8005eac:	9302      	str	r3, [sp, #8]
 8005eae:	2303      	movs	r3, #3
 8005eb0:	4343      	muls	r3, r0
 8005eb2:	0fdd      	lsrs	r5, r3, #31
 8005eb4:	18ed      	adds	r5, r5, r3
 8005eb6:	9b01      	ldr	r3, [sp, #4]
 8005eb8:	9802      	ldr	r0, [sp, #8]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	181b      	adds	r3, r3, r0
 8005ebe:	106d      	asrs	r5, r5, #1
 8005ec0:	42ab      	cmp	r3, r5
 8005ec2:	d900      	bls.n	8005ec6 <__ssputs_r+0x3e>
 8005ec4:	001d      	movs	r5, r3
 8005ec6:	0553      	lsls	r3, r2, #21
 8005ec8:	d532      	bpl.n	8005f30 <__ssputs_r+0xa8>
 8005eca:	0029      	movs	r1, r5
 8005ecc:	0038      	movs	r0, r7
 8005ece:	f000 fb49 	bl	8006564 <_malloc_r>
 8005ed2:	1e06      	subs	r6, r0, #0
 8005ed4:	d109      	bne.n	8005eea <__ssputs_r+0x62>
 8005ed6:	230c      	movs	r3, #12
 8005ed8:	603b      	str	r3, [r7, #0]
 8005eda:	2340      	movs	r3, #64	; 0x40
 8005edc:	2001      	movs	r0, #1
 8005ede:	89a2      	ldrh	r2, [r4, #12]
 8005ee0:	4240      	negs	r0, r0
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	81a3      	strh	r3, [r4, #12]
 8005ee6:	b005      	add	sp, #20
 8005ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eea:	9a02      	ldr	r2, [sp, #8]
 8005eec:	6921      	ldr	r1, [r4, #16]
 8005eee:	f7ff fe07 	bl	8005b00 <memcpy>
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	4a14      	ldr	r2, [pc, #80]	; (8005f48 <__ssputs_r+0xc0>)
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	2380      	movs	r3, #128	; 0x80
 8005efa:	4313      	orrs	r3, r2
 8005efc:	81a3      	strh	r3, [r4, #12]
 8005efe:	9b02      	ldr	r3, [sp, #8]
 8005f00:	6126      	str	r6, [r4, #16]
 8005f02:	18f6      	adds	r6, r6, r3
 8005f04:	6026      	str	r6, [r4, #0]
 8005f06:	6165      	str	r5, [r4, #20]
 8005f08:	9e01      	ldr	r6, [sp, #4]
 8005f0a:	1aed      	subs	r5, r5, r3
 8005f0c:	60a5      	str	r5, [r4, #8]
 8005f0e:	9b01      	ldr	r3, [sp, #4]
 8005f10:	429e      	cmp	r6, r3
 8005f12:	d900      	bls.n	8005f16 <__ssputs_r+0x8e>
 8005f14:	9e01      	ldr	r6, [sp, #4]
 8005f16:	0032      	movs	r2, r6
 8005f18:	9903      	ldr	r1, [sp, #12]
 8005f1a:	6820      	ldr	r0, [r4, #0]
 8005f1c:	f000 faa3 	bl	8006466 <memmove>
 8005f20:	68a3      	ldr	r3, [r4, #8]
 8005f22:	2000      	movs	r0, #0
 8005f24:	1b9b      	subs	r3, r3, r6
 8005f26:	60a3      	str	r3, [r4, #8]
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	199e      	adds	r6, r3, r6
 8005f2c:	6026      	str	r6, [r4, #0]
 8005f2e:	e7da      	b.n	8005ee6 <__ssputs_r+0x5e>
 8005f30:	002a      	movs	r2, r5
 8005f32:	0038      	movs	r0, r7
 8005f34:	f000 fb8c 	bl	8006650 <_realloc_r>
 8005f38:	1e06      	subs	r6, r0, #0
 8005f3a:	d1e0      	bne.n	8005efe <__ssputs_r+0x76>
 8005f3c:	0038      	movs	r0, r7
 8005f3e:	6921      	ldr	r1, [r4, #16]
 8005f40:	f000 faa4 	bl	800648c <_free_r>
 8005f44:	e7c7      	b.n	8005ed6 <__ssputs_r+0x4e>
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	fffffb7f 	.word	0xfffffb7f

08005f4c <_svfiprintf_r>:
 8005f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4e:	b0a1      	sub	sp, #132	; 0x84
 8005f50:	9003      	str	r0, [sp, #12]
 8005f52:	001d      	movs	r5, r3
 8005f54:	898b      	ldrh	r3, [r1, #12]
 8005f56:	000f      	movs	r7, r1
 8005f58:	0016      	movs	r6, r2
 8005f5a:	061b      	lsls	r3, r3, #24
 8005f5c:	d511      	bpl.n	8005f82 <_svfiprintf_r+0x36>
 8005f5e:	690b      	ldr	r3, [r1, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10e      	bne.n	8005f82 <_svfiprintf_r+0x36>
 8005f64:	2140      	movs	r1, #64	; 0x40
 8005f66:	f000 fafd 	bl	8006564 <_malloc_r>
 8005f6a:	6038      	str	r0, [r7, #0]
 8005f6c:	6138      	str	r0, [r7, #16]
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d105      	bne.n	8005f7e <_svfiprintf_r+0x32>
 8005f72:	230c      	movs	r3, #12
 8005f74:	9a03      	ldr	r2, [sp, #12]
 8005f76:	3801      	subs	r0, #1
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	b021      	add	sp, #132	; 0x84
 8005f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f7e:	2340      	movs	r3, #64	; 0x40
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	2300      	movs	r3, #0
 8005f84:	ac08      	add	r4, sp, #32
 8005f86:	6163      	str	r3, [r4, #20]
 8005f88:	3320      	adds	r3, #32
 8005f8a:	7663      	strb	r3, [r4, #25]
 8005f8c:	3310      	adds	r3, #16
 8005f8e:	76a3      	strb	r3, [r4, #26]
 8005f90:	9507      	str	r5, [sp, #28]
 8005f92:	0035      	movs	r5, r6
 8005f94:	782b      	ldrb	r3, [r5, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <_svfiprintf_r+0x52>
 8005f9a:	2b25      	cmp	r3, #37	; 0x25
 8005f9c:	d147      	bne.n	800602e <_svfiprintf_r+0xe2>
 8005f9e:	1bab      	subs	r3, r5, r6
 8005fa0:	9305      	str	r3, [sp, #20]
 8005fa2:	42b5      	cmp	r5, r6
 8005fa4:	d00c      	beq.n	8005fc0 <_svfiprintf_r+0x74>
 8005fa6:	0032      	movs	r2, r6
 8005fa8:	0039      	movs	r1, r7
 8005faa:	9803      	ldr	r0, [sp, #12]
 8005fac:	f7ff ff6c 	bl	8005e88 <__ssputs_r>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d100      	bne.n	8005fb6 <_svfiprintf_r+0x6a>
 8005fb4:	e0ae      	b.n	8006114 <_svfiprintf_r+0x1c8>
 8005fb6:	6962      	ldr	r2, [r4, #20]
 8005fb8:	9b05      	ldr	r3, [sp, #20]
 8005fba:	4694      	mov	ip, r2
 8005fbc:	4463      	add	r3, ip
 8005fbe:	6163      	str	r3, [r4, #20]
 8005fc0:	782b      	ldrb	r3, [r5, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d100      	bne.n	8005fc8 <_svfiprintf_r+0x7c>
 8005fc6:	e0a5      	b.n	8006114 <_svfiprintf_r+0x1c8>
 8005fc8:	2201      	movs	r2, #1
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4252      	negs	r2, r2
 8005fce:	6062      	str	r2, [r4, #4]
 8005fd0:	a904      	add	r1, sp, #16
 8005fd2:	3254      	adds	r2, #84	; 0x54
 8005fd4:	1852      	adds	r2, r2, r1
 8005fd6:	1c6e      	adds	r6, r5, #1
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	60e3      	str	r3, [r4, #12]
 8005fdc:	60a3      	str	r3, [r4, #8]
 8005fde:	7013      	strb	r3, [r2, #0]
 8005fe0:	65a3      	str	r3, [r4, #88]	; 0x58
 8005fe2:	2205      	movs	r2, #5
 8005fe4:	7831      	ldrb	r1, [r6, #0]
 8005fe6:	4854      	ldr	r0, [pc, #336]	; (8006138 <_svfiprintf_r+0x1ec>)
 8005fe8:	f000 fa32 	bl	8006450 <memchr>
 8005fec:	1c75      	adds	r5, r6, #1
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d11f      	bne.n	8006032 <_svfiprintf_r+0xe6>
 8005ff2:	6822      	ldr	r2, [r4, #0]
 8005ff4:	06d3      	lsls	r3, r2, #27
 8005ff6:	d504      	bpl.n	8006002 <_svfiprintf_r+0xb6>
 8005ff8:	2353      	movs	r3, #83	; 0x53
 8005ffa:	a904      	add	r1, sp, #16
 8005ffc:	185b      	adds	r3, r3, r1
 8005ffe:	2120      	movs	r1, #32
 8006000:	7019      	strb	r1, [r3, #0]
 8006002:	0713      	lsls	r3, r2, #28
 8006004:	d504      	bpl.n	8006010 <_svfiprintf_r+0xc4>
 8006006:	2353      	movs	r3, #83	; 0x53
 8006008:	a904      	add	r1, sp, #16
 800600a:	185b      	adds	r3, r3, r1
 800600c:	212b      	movs	r1, #43	; 0x2b
 800600e:	7019      	strb	r1, [r3, #0]
 8006010:	7833      	ldrb	r3, [r6, #0]
 8006012:	2b2a      	cmp	r3, #42	; 0x2a
 8006014:	d016      	beq.n	8006044 <_svfiprintf_r+0xf8>
 8006016:	0035      	movs	r5, r6
 8006018:	2100      	movs	r1, #0
 800601a:	200a      	movs	r0, #10
 800601c:	68e3      	ldr	r3, [r4, #12]
 800601e:	782a      	ldrb	r2, [r5, #0]
 8006020:	1c6e      	adds	r6, r5, #1
 8006022:	3a30      	subs	r2, #48	; 0x30
 8006024:	2a09      	cmp	r2, #9
 8006026:	d94e      	bls.n	80060c6 <_svfiprintf_r+0x17a>
 8006028:	2900      	cmp	r1, #0
 800602a:	d111      	bne.n	8006050 <_svfiprintf_r+0x104>
 800602c:	e017      	b.n	800605e <_svfiprintf_r+0x112>
 800602e:	3501      	adds	r5, #1
 8006030:	e7b0      	b.n	8005f94 <_svfiprintf_r+0x48>
 8006032:	4b41      	ldr	r3, [pc, #260]	; (8006138 <_svfiprintf_r+0x1ec>)
 8006034:	6822      	ldr	r2, [r4, #0]
 8006036:	1ac0      	subs	r0, r0, r3
 8006038:	2301      	movs	r3, #1
 800603a:	4083      	lsls	r3, r0
 800603c:	4313      	orrs	r3, r2
 800603e:	002e      	movs	r6, r5
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	e7ce      	b.n	8005fe2 <_svfiprintf_r+0x96>
 8006044:	9b07      	ldr	r3, [sp, #28]
 8006046:	1d19      	adds	r1, r3, #4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	9107      	str	r1, [sp, #28]
 800604c:	2b00      	cmp	r3, #0
 800604e:	db01      	blt.n	8006054 <_svfiprintf_r+0x108>
 8006050:	930b      	str	r3, [sp, #44]	; 0x2c
 8006052:	e004      	b.n	800605e <_svfiprintf_r+0x112>
 8006054:	425b      	negs	r3, r3
 8006056:	60e3      	str	r3, [r4, #12]
 8006058:	2302      	movs	r3, #2
 800605a:	4313      	orrs	r3, r2
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	782b      	ldrb	r3, [r5, #0]
 8006060:	2b2e      	cmp	r3, #46	; 0x2e
 8006062:	d10a      	bne.n	800607a <_svfiprintf_r+0x12e>
 8006064:	786b      	ldrb	r3, [r5, #1]
 8006066:	2b2a      	cmp	r3, #42	; 0x2a
 8006068:	d135      	bne.n	80060d6 <_svfiprintf_r+0x18a>
 800606a:	9b07      	ldr	r3, [sp, #28]
 800606c:	3502      	adds	r5, #2
 800606e:	1d1a      	adds	r2, r3, #4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	9207      	str	r2, [sp, #28]
 8006074:	2b00      	cmp	r3, #0
 8006076:	db2b      	blt.n	80060d0 <_svfiprintf_r+0x184>
 8006078:	9309      	str	r3, [sp, #36]	; 0x24
 800607a:	4e30      	ldr	r6, [pc, #192]	; (800613c <_svfiprintf_r+0x1f0>)
 800607c:	2203      	movs	r2, #3
 800607e:	0030      	movs	r0, r6
 8006080:	7829      	ldrb	r1, [r5, #0]
 8006082:	f000 f9e5 	bl	8006450 <memchr>
 8006086:	2800      	cmp	r0, #0
 8006088:	d006      	beq.n	8006098 <_svfiprintf_r+0x14c>
 800608a:	2340      	movs	r3, #64	; 0x40
 800608c:	1b80      	subs	r0, r0, r6
 800608e:	4083      	lsls	r3, r0
 8006090:	6822      	ldr	r2, [r4, #0]
 8006092:	3501      	adds	r5, #1
 8006094:	4313      	orrs	r3, r2
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	7829      	ldrb	r1, [r5, #0]
 800609a:	2206      	movs	r2, #6
 800609c:	4828      	ldr	r0, [pc, #160]	; (8006140 <_svfiprintf_r+0x1f4>)
 800609e:	1c6e      	adds	r6, r5, #1
 80060a0:	7621      	strb	r1, [r4, #24]
 80060a2:	f000 f9d5 	bl	8006450 <memchr>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d03c      	beq.n	8006124 <_svfiprintf_r+0x1d8>
 80060aa:	4b26      	ldr	r3, [pc, #152]	; (8006144 <_svfiprintf_r+0x1f8>)
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d125      	bne.n	80060fc <_svfiprintf_r+0x1b0>
 80060b0:	2207      	movs	r2, #7
 80060b2:	9b07      	ldr	r3, [sp, #28]
 80060b4:	3307      	adds	r3, #7
 80060b6:	4393      	bics	r3, r2
 80060b8:	3308      	adds	r3, #8
 80060ba:	9307      	str	r3, [sp, #28]
 80060bc:	6963      	ldr	r3, [r4, #20]
 80060be:	9a04      	ldr	r2, [sp, #16]
 80060c0:	189b      	adds	r3, r3, r2
 80060c2:	6163      	str	r3, [r4, #20]
 80060c4:	e765      	b.n	8005f92 <_svfiprintf_r+0x46>
 80060c6:	4343      	muls	r3, r0
 80060c8:	0035      	movs	r5, r6
 80060ca:	2101      	movs	r1, #1
 80060cc:	189b      	adds	r3, r3, r2
 80060ce:	e7a6      	b.n	800601e <_svfiprintf_r+0xd2>
 80060d0:	2301      	movs	r3, #1
 80060d2:	425b      	negs	r3, r3
 80060d4:	e7d0      	b.n	8006078 <_svfiprintf_r+0x12c>
 80060d6:	2300      	movs	r3, #0
 80060d8:	200a      	movs	r0, #10
 80060da:	001a      	movs	r2, r3
 80060dc:	3501      	adds	r5, #1
 80060de:	6063      	str	r3, [r4, #4]
 80060e0:	7829      	ldrb	r1, [r5, #0]
 80060e2:	1c6e      	adds	r6, r5, #1
 80060e4:	3930      	subs	r1, #48	; 0x30
 80060e6:	2909      	cmp	r1, #9
 80060e8:	d903      	bls.n	80060f2 <_svfiprintf_r+0x1a6>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0c5      	beq.n	800607a <_svfiprintf_r+0x12e>
 80060ee:	9209      	str	r2, [sp, #36]	; 0x24
 80060f0:	e7c3      	b.n	800607a <_svfiprintf_r+0x12e>
 80060f2:	4342      	muls	r2, r0
 80060f4:	0035      	movs	r5, r6
 80060f6:	2301      	movs	r3, #1
 80060f8:	1852      	adds	r2, r2, r1
 80060fa:	e7f1      	b.n	80060e0 <_svfiprintf_r+0x194>
 80060fc:	ab07      	add	r3, sp, #28
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	003a      	movs	r2, r7
 8006102:	0021      	movs	r1, r4
 8006104:	4b10      	ldr	r3, [pc, #64]	; (8006148 <_svfiprintf_r+0x1fc>)
 8006106:	9803      	ldr	r0, [sp, #12]
 8006108:	e000      	b.n	800610c <_svfiprintf_r+0x1c0>
 800610a:	bf00      	nop
 800610c:	9004      	str	r0, [sp, #16]
 800610e:	9b04      	ldr	r3, [sp, #16]
 8006110:	3301      	adds	r3, #1
 8006112:	d1d3      	bne.n	80060bc <_svfiprintf_r+0x170>
 8006114:	89bb      	ldrh	r3, [r7, #12]
 8006116:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006118:	065b      	lsls	r3, r3, #25
 800611a:	d400      	bmi.n	800611e <_svfiprintf_r+0x1d2>
 800611c:	e72d      	b.n	8005f7a <_svfiprintf_r+0x2e>
 800611e:	2001      	movs	r0, #1
 8006120:	4240      	negs	r0, r0
 8006122:	e72a      	b.n	8005f7a <_svfiprintf_r+0x2e>
 8006124:	ab07      	add	r3, sp, #28
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	003a      	movs	r2, r7
 800612a:	0021      	movs	r1, r4
 800612c:	4b06      	ldr	r3, [pc, #24]	; (8006148 <_svfiprintf_r+0x1fc>)
 800612e:	9803      	ldr	r0, [sp, #12]
 8006130:	f000 f87c 	bl	800622c <_printf_i>
 8006134:	e7ea      	b.n	800610c <_svfiprintf_r+0x1c0>
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	08006ab4 	.word	0x08006ab4
 800613c:	08006aba 	.word	0x08006aba
 8006140:	08006abe 	.word	0x08006abe
 8006144:	00000000 	.word	0x00000000
 8006148:	08005e89 	.word	0x08005e89

0800614c <_printf_common>:
 800614c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800614e:	0015      	movs	r5, r2
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	688a      	ldr	r2, [r1, #8]
 8006154:	690b      	ldr	r3, [r1, #16]
 8006156:	000c      	movs	r4, r1
 8006158:	9000      	str	r0, [sp, #0]
 800615a:	4293      	cmp	r3, r2
 800615c:	da00      	bge.n	8006160 <_printf_common+0x14>
 800615e:	0013      	movs	r3, r2
 8006160:	0022      	movs	r2, r4
 8006162:	602b      	str	r3, [r5, #0]
 8006164:	3243      	adds	r2, #67	; 0x43
 8006166:	7812      	ldrb	r2, [r2, #0]
 8006168:	2a00      	cmp	r2, #0
 800616a:	d001      	beq.n	8006170 <_printf_common+0x24>
 800616c:	3301      	adds	r3, #1
 800616e:	602b      	str	r3, [r5, #0]
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	069b      	lsls	r3, r3, #26
 8006174:	d502      	bpl.n	800617c <_printf_common+0x30>
 8006176:	682b      	ldr	r3, [r5, #0]
 8006178:	3302      	adds	r3, #2
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	6822      	ldr	r2, [r4, #0]
 800617e:	2306      	movs	r3, #6
 8006180:	0017      	movs	r7, r2
 8006182:	401f      	ands	r7, r3
 8006184:	421a      	tst	r2, r3
 8006186:	d027      	beq.n	80061d8 <_printf_common+0x8c>
 8006188:	0023      	movs	r3, r4
 800618a:	3343      	adds	r3, #67	; 0x43
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	1e5a      	subs	r2, r3, #1
 8006190:	4193      	sbcs	r3, r2
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	0692      	lsls	r2, r2, #26
 8006196:	d430      	bmi.n	80061fa <_printf_common+0xae>
 8006198:	0022      	movs	r2, r4
 800619a:	9901      	ldr	r1, [sp, #4]
 800619c:	9800      	ldr	r0, [sp, #0]
 800619e:	9e08      	ldr	r6, [sp, #32]
 80061a0:	3243      	adds	r2, #67	; 0x43
 80061a2:	47b0      	blx	r6
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d025      	beq.n	80061f4 <_printf_common+0xa8>
 80061a8:	2306      	movs	r3, #6
 80061aa:	6820      	ldr	r0, [r4, #0]
 80061ac:	682a      	ldr	r2, [r5, #0]
 80061ae:	68e1      	ldr	r1, [r4, #12]
 80061b0:	2500      	movs	r5, #0
 80061b2:	4003      	ands	r3, r0
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d103      	bne.n	80061c0 <_printf_common+0x74>
 80061b8:	1a8d      	subs	r5, r1, r2
 80061ba:	43eb      	mvns	r3, r5
 80061bc:	17db      	asrs	r3, r3, #31
 80061be:	401d      	ands	r5, r3
 80061c0:	68a3      	ldr	r3, [r4, #8]
 80061c2:	6922      	ldr	r2, [r4, #16]
 80061c4:	4293      	cmp	r3, r2
 80061c6:	dd01      	ble.n	80061cc <_printf_common+0x80>
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	18ed      	adds	r5, r5, r3
 80061cc:	2700      	movs	r7, #0
 80061ce:	42bd      	cmp	r5, r7
 80061d0:	d120      	bne.n	8006214 <_printf_common+0xc8>
 80061d2:	2000      	movs	r0, #0
 80061d4:	e010      	b.n	80061f8 <_printf_common+0xac>
 80061d6:	3701      	adds	r7, #1
 80061d8:	68e3      	ldr	r3, [r4, #12]
 80061da:	682a      	ldr	r2, [r5, #0]
 80061dc:	1a9b      	subs	r3, r3, r2
 80061de:	42bb      	cmp	r3, r7
 80061e0:	ddd2      	ble.n	8006188 <_printf_common+0x3c>
 80061e2:	0022      	movs	r2, r4
 80061e4:	2301      	movs	r3, #1
 80061e6:	9901      	ldr	r1, [sp, #4]
 80061e8:	9800      	ldr	r0, [sp, #0]
 80061ea:	9e08      	ldr	r6, [sp, #32]
 80061ec:	3219      	adds	r2, #25
 80061ee:	47b0      	blx	r6
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d1f0      	bne.n	80061d6 <_printf_common+0x8a>
 80061f4:	2001      	movs	r0, #1
 80061f6:	4240      	negs	r0, r0
 80061f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061fa:	2030      	movs	r0, #48	; 0x30
 80061fc:	18e1      	adds	r1, r4, r3
 80061fe:	3143      	adds	r1, #67	; 0x43
 8006200:	7008      	strb	r0, [r1, #0]
 8006202:	0021      	movs	r1, r4
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	3145      	adds	r1, #69	; 0x45
 8006208:	7809      	ldrb	r1, [r1, #0]
 800620a:	18a2      	adds	r2, r4, r2
 800620c:	3243      	adds	r2, #67	; 0x43
 800620e:	3302      	adds	r3, #2
 8006210:	7011      	strb	r1, [r2, #0]
 8006212:	e7c1      	b.n	8006198 <_printf_common+0x4c>
 8006214:	0022      	movs	r2, r4
 8006216:	2301      	movs	r3, #1
 8006218:	9901      	ldr	r1, [sp, #4]
 800621a:	9800      	ldr	r0, [sp, #0]
 800621c:	9e08      	ldr	r6, [sp, #32]
 800621e:	321a      	adds	r2, #26
 8006220:	47b0      	blx	r6
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	d0e6      	beq.n	80061f4 <_printf_common+0xa8>
 8006226:	3701      	adds	r7, #1
 8006228:	e7d1      	b.n	80061ce <_printf_common+0x82>
	...

0800622c <_printf_i>:
 800622c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800622e:	b08b      	sub	sp, #44	; 0x2c
 8006230:	9206      	str	r2, [sp, #24]
 8006232:	000a      	movs	r2, r1
 8006234:	3243      	adds	r2, #67	; 0x43
 8006236:	9307      	str	r3, [sp, #28]
 8006238:	9005      	str	r0, [sp, #20]
 800623a:	9204      	str	r2, [sp, #16]
 800623c:	7e0a      	ldrb	r2, [r1, #24]
 800623e:	000c      	movs	r4, r1
 8006240:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006242:	2a78      	cmp	r2, #120	; 0x78
 8006244:	d807      	bhi.n	8006256 <_printf_i+0x2a>
 8006246:	2a62      	cmp	r2, #98	; 0x62
 8006248:	d809      	bhi.n	800625e <_printf_i+0x32>
 800624a:	2a00      	cmp	r2, #0
 800624c:	d100      	bne.n	8006250 <_printf_i+0x24>
 800624e:	e0c1      	b.n	80063d4 <_printf_i+0x1a8>
 8006250:	2a58      	cmp	r2, #88	; 0x58
 8006252:	d100      	bne.n	8006256 <_printf_i+0x2a>
 8006254:	e08c      	b.n	8006370 <_printf_i+0x144>
 8006256:	0026      	movs	r6, r4
 8006258:	3642      	adds	r6, #66	; 0x42
 800625a:	7032      	strb	r2, [r6, #0]
 800625c:	e022      	b.n	80062a4 <_printf_i+0x78>
 800625e:	0010      	movs	r0, r2
 8006260:	3863      	subs	r0, #99	; 0x63
 8006262:	2815      	cmp	r0, #21
 8006264:	d8f7      	bhi.n	8006256 <_printf_i+0x2a>
 8006266:	f7f9 ff57 	bl	8000118 <__gnu_thumb1_case_shi>
 800626a:	0016      	.short	0x0016
 800626c:	fff6001f 	.word	0xfff6001f
 8006270:	fff6fff6 	.word	0xfff6fff6
 8006274:	001ffff6 	.word	0x001ffff6
 8006278:	fff6fff6 	.word	0xfff6fff6
 800627c:	fff6fff6 	.word	0xfff6fff6
 8006280:	003600a8 	.word	0x003600a8
 8006284:	fff6009a 	.word	0xfff6009a
 8006288:	00b9fff6 	.word	0x00b9fff6
 800628c:	0036fff6 	.word	0x0036fff6
 8006290:	fff6fff6 	.word	0xfff6fff6
 8006294:	009e      	.short	0x009e
 8006296:	0026      	movs	r6, r4
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	3642      	adds	r6, #66	; 0x42
 800629c:	1d11      	adds	r1, r2, #4
 800629e:	6019      	str	r1, [r3, #0]
 80062a0:	6813      	ldr	r3, [r2, #0]
 80062a2:	7033      	strb	r3, [r6, #0]
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0a7      	b.n	80063f8 <_printf_i+0x1cc>
 80062a8:	6808      	ldr	r0, [r1, #0]
 80062aa:	6819      	ldr	r1, [r3, #0]
 80062ac:	1d0a      	adds	r2, r1, #4
 80062ae:	0605      	lsls	r5, r0, #24
 80062b0:	d50b      	bpl.n	80062ca <_printf_i+0x9e>
 80062b2:	680d      	ldr	r5, [r1, #0]
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	2d00      	cmp	r5, #0
 80062b8:	da03      	bge.n	80062c2 <_printf_i+0x96>
 80062ba:	232d      	movs	r3, #45	; 0x2d
 80062bc:	9a04      	ldr	r2, [sp, #16]
 80062be:	426d      	negs	r5, r5
 80062c0:	7013      	strb	r3, [r2, #0]
 80062c2:	4b61      	ldr	r3, [pc, #388]	; (8006448 <_printf_i+0x21c>)
 80062c4:	270a      	movs	r7, #10
 80062c6:	9303      	str	r3, [sp, #12]
 80062c8:	e01b      	b.n	8006302 <_printf_i+0xd6>
 80062ca:	680d      	ldr	r5, [r1, #0]
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	0641      	lsls	r1, r0, #25
 80062d0:	d5f1      	bpl.n	80062b6 <_printf_i+0x8a>
 80062d2:	b22d      	sxth	r5, r5
 80062d4:	e7ef      	b.n	80062b6 <_printf_i+0x8a>
 80062d6:	680d      	ldr	r5, [r1, #0]
 80062d8:	6819      	ldr	r1, [r3, #0]
 80062da:	1d08      	adds	r0, r1, #4
 80062dc:	6018      	str	r0, [r3, #0]
 80062de:	062e      	lsls	r6, r5, #24
 80062e0:	d501      	bpl.n	80062e6 <_printf_i+0xba>
 80062e2:	680d      	ldr	r5, [r1, #0]
 80062e4:	e003      	b.n	80062ee <_printf_i+0xc2>
 80062e6:	066d      	lsls	r5, r5, #25
 80062e8:	d5fb      	bpl.n	80062e2 <_printf_i+0xb6>
 80062ea:	680d      	ldr	r5, [r1, #0]
 80062ec:	b2ad      	uxth	r5, r5
 80062ee:	4b56      	ldr	r3, [pc, #344]	; (8006448 <_printf_i+0x21c>)
 80062f0:	2708      	movs	r7, #8
 80062f2:	9303      	str	r3, [sp, #12]
 80062f4:	2a6f      	cmp	r2, #111	; 0x6f
 80062f6:	d000      	beq.n	80062fa <_printf_i+0xce>
 80062f8:	3702      	adds	r7, #2
 80062fa:	0023      	movs	r3, r4
 80062fc:	2200      	movs	r2, #0
 80062fe:	3343      	adds	r3, #67	; 0x43
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	6863      	ldr	r3, [r4, #4]
 8006304:	60a3      	str	r3, [r4, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	db03      	blt.n	8006312 <_printf_i+0xe6>
 800630a:	2204      	movs	r2, #4
 800630c:	6821      	ldr	r1, [r4, #0]
 800630e:	4391      	bics	r1, r2
 8006310:	6021      	str	r1, [r4, #0]
 8006312:	2d00      	cmp	r5, #0
 8006314:	d102      	bne.n	800631c <_printf_i+0xf0>
 8006316:	9e04      	ldr	r6, [sp, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00c      	beq.n	8006336 <_printf_i+0x10a>
 800631c:	9e04      	ldr	r6, [sp, #16]
 800631e:	0028      	movs	r0, r5
 8006320:	0039      	movs	r1, r7
 8006322:	f7f9 ff89 	bl	8000238 <__aeabi_uidivmod>
 8006326:	9b03      	ldr	r3, [sp, #12]
 8006328:	3e01      	subs	r6, #1
 800632a:	5c5b      	ldrb	r3, [r3, r1]
 800632c:	7033      	strb	r3, [r6, #0]
 800632e:	002b      	movs	r3, r5
 8006330:	0005      	movs	r5, r0
 8006332:	429f      	cmp	r7, r3
 8006334:	d9f3      	bls.n	800631e <_printf_i+0xf2>
 8006336:	2f08      	cmp	r7, #8
 8006338:	d109      	bne.n	800634e <_printf_i+0x122>
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	07db      	lsls	r3, r3, #31
 800633e:	d506      	bpl.n	800634e <_printf_i+0x122>
 8006340:	6863      	ldr	r3, [r4, #4]
 8006342:	6922      	ldr	r2, [r4, #16]
 8006344:	4293      	cmp	r3, r2
 8006346:	dc02      	bgt.n	800634e <_printf_i+0x122>
 8006348:	2330      	movs	r3, #48	; 0x30
 800634a:	3e01      	subs	r6, #1
 800634c:	7033      	strb	r3, [r6, #0]
 800634e:	9b04      	ldr	r3, [sp, #16]
 8006350:	1b9b      	subs	r3, r3, r6
 8006352:	6123      	str	r3, [r4, #16]
 8006354:	9b07      	ldr	r3, [sp, #28]
 8006356:	0021      	movs	r1, r4
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	9805      	ldr	r0, [sp, #20]
 800635c:	9b06      	ldr	r3, [sp, #24]
 800635e:	aa09      	add	r2, sp, #36	; 0x24
 8006360:	f7ff fef4 	bl	800614c <_printf_common>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d14c      	bne.n	8006402 <_printf_i+0x1d6>
 8006368:	2001      	movs	r0, #1
 800636a:	4240      	negs	r0, r0
 800636c:	b00b      	add	sp, #44	; 0x2c
 800636e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006370:	3145      	adds	r1, #69	; 0x45
 8006372:	700a      	strb	r2, [r1, #0]
 8006374:	4a34      	ldr	r2, [pc, #208]	; (8006448 <_printf_i+0x21c>)
 8006376:	9203      	str	r2, [sp, #12]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	6821      	ldr	r1, [r4, #0]
 800637c:	ca20      	ldmia	r2!, {r5}
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	0608      	lsls	r0, r1, #24
 8006382:	d516      	bpl.n	80063b2 <_printf_i+0x186>
 8006384:	07cb      	lsls	r3, r1, #31
 8006386:	d502      	bpl.n	800638e <_printf_i+0x162>
 8006388:	2320      	movs	r3, #32
 800638a:	4319      	orrs	r1, r3
 800638c:	6021      	str	r1, [r4, #0]
 800638e:	2710      	movs	r7, #16
 8006390:	2d00      	cmp	r5, #0
 8006392:	d1b2      	bne.n	80062fa <_printf_i+0xce>
 8006394:	2320      	movs	r3, #32
 8006396:	6822      	ldr	r2, [r4, #0]
 8006398:	439a      	bics	r2, r3
 800639a:	6022      	str	r2, [r4, #0]
 800639c:	e7ad      	b.n	80062fa <_printf_i+0xce>
 800639e:	2220      	movs	r2, #32
 80063a0:	6809      	ldr	r1, [r1, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	6022      	str	r2, [r4, #0]
 80063a6:	0022      	movs	r2, r4
 80063a8:	2178      	movs	r1, #120	; 0x78
 80063aa:	3245      	adds	r2, #69	; 0x45
 80063ac:	7011      	strb	r1, [r2, #0]
 80063ae:	4a27      	ldr	r2, [pc, #156]	; (800644c <_printf_i+0x220>)
 80063b0:	e7e1      	b.n	8006376 <_printf_i+0x14a>
 80063b2:	0648      	lsls	r0, r1, #25
 80063b4:	d5e6      	bpl.n	8006384 <_printf_i+0x158>
 80063b6:	b2ad      	uxth	r5, r5
 80063b8:	e7e4      	b.n	8006384 <_printf_i+0x158>
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	680d      	ldr	r5, [r1, #0]
 80063be:	1d10      	adds	r0, r2, #4
 80063c0:	6949      	ldr	r1, [r1, #20]
 80063c2:	6018      	str	r0, [r3, #0]
 80063c4:	6813      	ldr	r3, [r2, #0]
 80063c6:	062e      	lsls	r6, r5, #24
 80063c8:	d501      	bpl.n	80063ce <_printf_i+0x1a2>
 80063ca:	6019      	str	r1, [r3, #0]
 80063cc:	e002      	b.n	80063d4 <_printf_i+0x1a8>
 80063ce:	066d      	lsls	r5, r5, #25
 80063d0:	d5fb      	bpl.n	80063ca <_printf_i+0x19e>
 80063d2:	8019      	strh	r1, [r3, #0]
 80063d4:	2300      	movs	r3, #0
 80063d6:	9e04      	ldr	r6, [sp, #16]
 80063d8:	6123      	str	r3, [r4, #16]
 80063da:	e7bb      	b.n	8006354 <_printf_i+0x128>
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	1d11      	adds	r1, r2, #4
 80063e0:	6019      	str	r1, [r3, #0]
 80063e2:	6816      	ldr	r6, [r2, #0]
 80063e4:	2100      	movs	r1, #0
 80063e6:	0030      	movs	r0, r6
 80063e8:	6862      	ldr	r2, [r4, #4]
 80063ea:	f000 f831 	bl	8006450 <memchr>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d001      	beq.n	80063f6 <_printf_i+0x1ca>
 80063f2:	1b80      	subs	r0, r0, r6
 80063f4:	6060      	str	r0, [r4, #4]
 80063f6:	6863      	ldr	r3, [r4, #4]
 80063f8:	6123      	str	r3, [r4, #16]
 80063fa:	2300      	movs	r3, #0
 80063fc:	9a04      	ldr	r2, [sp, #16]
 80063fe:	7013      	strb	r3, [r2, #0]
 8006400:	e7a8      	b.n	8006354 <_printf_i+0x128>
 8006402:	6923      	ldr	r3, [r4, #16]
 8006404:	0032      	movs	r2, r6
 8006406:	9906      	ldr	r1, [sp, #24]
 8006408:	9805      	ldr	r0, [sp, #20]
 800640a:	9d07      	ldr	r5, [sp, #28]
 800640c:	47a8      	blx	r5
 800640e:	1c43      	adds	r3, r0, #1
 8006410:	d0aa      	beq.n	8006368 <_printf_i+0x13c>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	079b      	lsls	r3, r3, #30
 8006416:	d415      	bmi.n	8006444 <_printf_i+0x218>
 8006418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800641a:	68e0      	ldr	r0, [r4, #12]
 800641c:	4298      	cmp	r0, r3
 800641e:	daa5      	bge.n	800636c <_printf_i+0x140>
 8006420:	0018      	movs	r0, r3
 8006422:	e7a3      	b.n	800636c <_printf_i+0x140>
 8006424:	0022      	movs	r2, r4
 8006426:	2301      	movs	r3, #1
 8006428:	9906      	ldr	r1, [sp, #24]
 800642a:	9805      	ldr	r0, [sp, #20]
 800642c:	9e07      	ldr	r6, [sp, #28]
 800642e:	3219      	adds	r2, #25
 8006430:	47b0      	blx	r6
 8006432:	1c43      	adds	r3, r0, #1
 8006434:	d098      	beq.n	8006368 <_printf_i+0x13c>
 8006436:	3501      	adds	r5, #1
 8006438:	68e3      	ldr	r3, [r4, #12]
 800643a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800643c:	1a9b      	subs	r3, r3, r2
 800643e:	42ab      	cmp	r3, r5
 8006440:	dcf0      	bgt.n	8006424 <_printf_i+0x1f8>
 8006442:	e7e9      	b.n	8006418 <_printf_i+0x1ec>
 8006444:	2500      	movs	r5, #0
 8006446:	e7f7      	b.n	8006438 <_printf_i+0x20c>
 8006448:	08006ac5 	.word	0x08006ac5
 800644c:	08006ad6 	.word	0x08006ad6

08006450 <memchr>:
 8006450:	b2c9      	uxtb	r1, r1
 8006452:	1882      	adds	r2, r0, r2
 8006454:	4290      	cmp	r0, r2
 8006456:	d101      	bne.n	800645c <memchr+0xc>
 8006458:	2000      	movs	r0, #0
 800645a:	4770      	bx	lr
 800645c:	7803      	ldrb	r3, [r0, #0]
 800645e:	428b      	cmp	r3, r1
 8006460:	d0fb      	beq.n	800645a <memchr+0xa>
 8006462:	3001      	adds	r0, #1
 8006464:	e7f6      	b.n	8006454 <memchr+0x4>

08006466 <memmove>:
 8006466:	b510      	push	{r4, lr}
 8006468:	4288      	cmp	r0, r1
 800646a:	d902      	bls.n	8006472 <memmove+0xc>
 800646c:	188b      	adds	r3, r1, r2
 800646e:	4298      	cmp	r0, r3
 8006470:	d303      	bcc.n	800647a <memmove+0x14>
 8006472:	2300      	movs	r3, #0
 8006474:	e007      	b.n	8006486 <memmove+0x20>
 8006476:	5c8b      	ldrb	r3, [r1, r2]
 8006478:	5483      	strb	r3, [r0, r2]
 800647a:	3a01      	subs	r2, #1
 800647c:	d2fb      	bcs.n	8006476 <memmove+0x10>
 800647e:	bd10      	pop	{r4, pc}
 8006480:	5ccc      	ldrb	r4, [r1, r3]
 8006482:	54c4      	strb	r4, [r0, r3]
 8006484:	3301      	adds	r3, #1
 8006486:	429a      	cmp	r2, r3
 8006488:	d1fa      	bne.n	8006480 <memmove+0x1a>
 800648a:	e7f8      	b.n	800647e <memmove+0x18>

0800648c <_free_r>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	0005      	movs	r5, r0
 8006490:	2900      	cmp	r1, #0
 8006492:	d010      	beq.n	80064b6 <_free_r+0x2a>
 8006494:	1f0c      	subs	r4, r1, #4
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	da00      	bge.n	800649e <_free_r+0x12>
 800649c:	18e4      	adds	r4, r4, r3
 800649e:	0028      	movs	r0, r5
 80064a0:	f000 f918 	bl	80066d4 <__malloc_lock>
 80064a4:	4a1d      	ldr	r2, [pc, #116]	; (800651c <_free_r+0x90>)
 80064a6:	6813      	ldr	r3, [r2, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d105      	bne.n	80064b8 <_free_r+0x2c>
 80064ac:	6063      	str	r3, [r4, #4]
 80064ae:	6014      	str	r4, [r2, #0]
 80064b0:	0028      	movs	r0, r5
 80064b2:	f000 f917 	bl	80066e4 <__malloc_unlock>
 80064b6:	bd70      	pop	{r4, r5, r6, pc}
 80064b8:	42a3      	cmp	r3, r4
 80064ba:	d908      	bls.n	80064ce <_free_r+0x42>
 80064bc:	6821      	ldr	r1, [r4, #0]
 80064be:	1860      	adds	r0, r4, r1
 80064c0:	4283      	cmp	r3, r0
 80064c2:	d1f3      	bne.n	80064ac <_free_r+0x20>
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	1841      	adds	r1, r0, r1
 80064ca:	6021      	str	r1, [r4, #0]
 80064cc:	e7ee      	b.n	80064ac <_free_r+0x20>
 80064ce:	001a      	movs	r2, r3
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <_free_r+0x4e>
 80064d6:	42a3      	cmp	r3, r4
 80064d8:	d9f9      	bls.n	80064ce <_free_r+0x42>
 80064da:	6811      	ldr	r1, [r2, #0]
 80064dc:	1850      	adds	r0, r2, r1
 80064de:	42a0      	cmp	r0, r4
 80064e0:	d10b      	bne.n	80064fa <_free_r+0x6e>
 80064e2:	6820      	ldr	r0, [r4, #0]
 80064e4:	1809      	adds	r1, r1, r0
 80064e6:	1850      	adds	r0, r2, r1
 80064e8:	6011      	str	r1, [r2, #0]
 80064ea:	4283      	cmp	r3, r0
 80064ec:	d1e0      	bne.n	80064b0 <_free_r+0x24>
 80064ee:	6818      	ldr	r0, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	1841      	adds	r1, r0, r1
 80064f4:	6011      	str	r1, [r2, #0]
 80064f6:	6053      	str	r3, [r2, #4]
 80064f8:	e7da      	b.n	80064b0 <_free_r+0x24>
 80064fa:	42a0      	cmp	r0, r4
 80064fc:	d902      	bls.n	8006504 <_free_r+0x78>
 80064fe:	230c      	movs	r3, #12
 8006500:	602b      	str	r3, [r5, #0]
 8006502:	e7d5      	b.n	80064b0 <_free_r+0x24>
 8006504:	6821      	ldr	r1, [r4, #0]
 8006506:	1860      	adds	r0, r4, r1
 8006508:	4283      	cmp	r3, r0
 800650a:	d103      	bne.n	8006514 <_free_r+0x88>
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	1841      	adds	r1, r0, r1
 8006512:	6021      	str	r1, [r4, #0]
 8006514:	6063      	str	r3, [r4, #4]
 8006516:	6054      	str	r4, [r2, #4]
 8006518:	e7ca      	b.n	80064b0 <_free_r+0x24>
 800651a:	46c0      	nop			; (mov r8, r8)
 800651c:	2000038c 	.word	0x2000038c

08006520 <sbrk_aligned>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	4e0f      	ldr	r6, [pc, #60]	; (8006560 <sbrk_aligned+0x40>)
 8006524:	000d      	movs	r5, r1
 8006526:	6831      	ldr	r1, [r6, #0]
 8006528:	0004      	movs	r4, r0
 800652a:	2900      	cmp	r1, #0
 800652c:	d102      	bne.n	8006534 <sbrk_aligned+0x14>
 800652e:	f000 f8bf 	bl	80066b0 <_sbrk_r>
 8006532:	6030      	str	r0, [r6, #0]
 8006534:	0029      	movs	r1, r5
 8006536:	0020      	movs	r0, r4
 8006538:	f000 f8ba 	bl	80066b0 <_sbrk_r>
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	d00a      	beq.n	8006556 <sbrk_aligned+0x36>
 8006540:	2303      	movs	r3, #3
 8006542:	1cc5      	adds	r5, r0, #3
 8006544:	439d      	bics	r5, r3
 8006546:	42a8      	cmp	r0, r5
 8006548:	d007      	beq.n	800655a <sbrk_aligned+0x3a>
 800654a:	1a29      	subs	r1, r5, r0
 800654c:	0020      	movs	r0, r4
 800654e:	f000 f8af 	bl	80066b0 <_sbrk_r>
 8006552:	1c43      	adds	r3, r0, #1
 8006554:	d101      	bne.n	800655a <sbrk_aligned+0x3a>
 8006556:	2501      	movs	r5, #1
 8006558:	426d      	negs	r5, r5
 800655a:	0028      	movs	r0, r5
 800655c:	bd70      	pop	{r4, r5, r6, pc}
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	20000390 	.word	0x20000390

08006564 <_malloc_r>:
 8006564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006566:	2203      	movs	r2, #3
 8006568:	1ccb      	adds	r3, r1, #3
 800656a:	4393      	bics	r3, r2
 800656c:	3308      	adds	r3, #8
 800656e:	0006      	movs	r6, r0
 8006570:	001f      	movs	r7, r3
 8006572:	2b0c      	cmp	r3, #12
 8006574:	d232      	bcs.n	80065dc <_malloc_r+0x78>
 8006576:	270c      	movs	r7, #12
 8006578:	42b9      	cmp	r1, r7
 800657a:	d831      	bhi.n	80065e0 <_malloc_r+0x7c>
 800657c:	0030      	movs	r0, r6
 800657e:	f000 f8a9 	bl	80066d4 <__malloc_lock>
 8006582:	4d32      	ldr	r5, [pc, #200]	; (800664c <_malloc_r+0xe8>)
 8006584:	682b      	ldr	r3, [r5, #0]
 8006586:	001c      	movs	r4, r3
 8006588:	2c00      	cmp	r4, #0
 800658a:	d12e      	bne.n	80065ea <_malloc_r+0x86>
 800658c:	0039      	movs	r1, r7
 800658e:	0030      	movs	r0, r6
 8006590:	f7ff ffc6 	bl	8006520 <sbrk_aligned>
 8006594:	0004      	movs	r4, r0
 8006596:	1c43      	adds	r3, r0, #1
 8006598:	d11e      	bne.n	80065d8 <_malloc_r+0x74>
 800659a:	682c      	ldr	r4, [r5, #0]
 800659c:	0025      	movs	r5, r4
 800659e:	2d00      	cmp	r5, #0
 80065a0:	d14a      	bne.n	8006638 <_malloc_r+0xd4>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	0029      	movs	r1, r5
 80065a6:	18e3      	adds	r3, r4, r3
 80065a8:	0030      	movs	r0, r6
 80065aa:	9301      	str	r3, [sp, #4]
 80065ac:	f000 f880 	bl	80066b0 <_sbrk_r>
 80065b0:	9b01      	ldr	r3, [sp, #4]
 80065b2:	4283      	cmp	r3, r0
 80065b4:	d143      	bne.n	800663e <_malloc_r+0xda>
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	3703      	adds	r7, #3
 80065ba:	1aff      	subs	r7, r7, r3
 80065bc:	2303      	movs	r3, #3
 80065be:	439f      	bics	r7, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	2f0c      	cmp	r7, #12
 80065c4:	d200      	bcs.n	80065c8 <_malloc_r+0x64>
 80065c6:	270c      	movs	r7, #12
 80065c8:	0039      	movs	r1, r7
 80065ca:	0030      	movs	r0, r6
 80065cc:	f7ff ffa8 	bl	8006520 <sbrk_aligned>
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	d034      	beq.n	800663e <_malloc_r+0xda>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	19df      	adds	r7, r3, r7
 80065d8:	6027      	str	r7, [r4, #0]
 80065da:	e013      	b.n	8006604 <_malloc_r+0xa0>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dacb      	bge.n	8006578 <_malloc_r+0x14>
 80065e0:	230c      	movs	r3, #12
 80065e2:	2500      	movs	r5, #0
 80065e4:	6033      	str	r3, [r6, #0]
 80065e6:	0028      	movs	r0, r5
 80065e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	1bd1      	subs	r1, r2, r7
 80065ee:	d420      	bmi.n	8006632 <_malloc_r+0xce>
 80065f0:	290b      	cmp	r1, #11
 80065f2:	d917      	bls.n	8006624 <_malloc_r+0xc0>
 80065f4:	19e2      	adds	r2, r4, r7
 80065f6:	6027      	str	r7, [r4, #0]
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	d111      	bne.n	8006620 <_malloc_r+0xbc>
 80065fc:	602a      	str	r2, [r5, #0]
 80065fe:	6863      	ldr	r3, [r4, #4]
 8006600:	6011      	str	r1, [r2, #0]
 8006602:	6053      	str	r3, [r2, #4]
 8006604:	0030      	movs	r0, r6
 8006606:	0025      	movs	r5, r4
 8006608:	f000 f86c 	bl	80066e4 <__malloc_unlock>
 800660c:	2207      	movs	r2, #7
 800660e:	350b      	adds	r5, #11
 8006610:	1d23      	adds	r3, r4, #4
 8006612:	4395      	bics	r5, r2
 8006614:	1aea      	subs	r2, r5, r3
 8006616:	429d      	cmp	r5, r3
 8006618:	d0e5      	beq.n	80065e6 <_malloc_r+0x82>
 800661a:	1b5b      	subs	r3, r3, r5
 800661c:	50a3      	str	r3, [r4, r2]
 800661e:	e7e2      	b.n	80065e6 <_malloc_r+0x82>
 8006620:	605a      	str	r2, [r3, #4]
 8006622:	e7ec      	b.n	80065fe <_malloc_r+0x9a>
 8006624:	6862      	ldr	r2, [r4, #4]
 8006626:	42a3      	cmp	r3, r4
 8006628:	d101      	bne.n	800662e <_malloc_r+0xca>
 800662a:	602a      	str	r2, [r5, #0]
 800662c:	e7ea      	b.n	8006604 <_malloc_r+0xa0>
 800662e:	605a      	str	r2, [r3, #4]
 8006630:	e7e8      	b.n	8006604 <_malloc_r+0xa0>
 8006632:	0023      	movs	r3, r4
 8006634:	6864      	ldr	r4, [r4, #4]
 8006636:	e7a7      	b.n	8006588 <_malloc_r+0x24>
 8006638:	002c      	movs	r4, r5
 800663a:	686d      	ldr	r5, [r5, #4]
 800663c:	e7af      	b.n	800659e <_malloc_r+0x3a>
 800663e:	230c      	movs	r3, #12
 8006640:	0030      	movs	r0, r6
 8006642:	6033      	str	r3, [r6, #0]
 8006644:	f000 f84e 	bl	80066e4 <__malloc_unlock>
 8006648:	e7cd      	b.n	80065e6 <_malloc_r+0x82>
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	2000038c 	.word	0x2000038c

08006650 <_realloc_r>:
 8006650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006652:	0007      	movs	r7, r0
 8006654:	000e      	movs	r6, r1
 8006656:	0014      	movs	r4, r2
 8006658:	2900      	cmp	r1, #0
 800665a:	d105      	bne.n	8006668 <_realloc_r+0x18>
 800665c:	0011      	movs	r1, r2
 800665e:	f7ff ff81 	bl	8006564 <_malloc_r>
 8006662:	0005      	movs	r5, r0
 8006664:	0028      	movs	r0, r5
 8006666:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006668:	2a00      	cmp	r2, #0
 800666a:	d103      	bne.n	8006674 <_realloc_r+0x24>
 800666c:	f7ff ff0e 	bl	800648c <_free_r>
 8006670:	0025      	movs	r5, r4
 8006672:	e7f7      	b.n	8006664 <_realloc_r+0x14>
 8006674:	f000 f83e 	bl	80066f4 <_malloc_usable_size_r>
 8006678:	9001      	str	r0, [sp, #4]
 800667a:	4284      	cmp	r4, r0
 800667c:	d803      	bhi.n	8006686 <_realloc_r+0x36>
 800667e:	0035      	movs	r5, r6
 8006680:	0843      	lsrs	r3, r0, #1
 8006682:	42a3      	cmp	r3, r4
 8006684:	d3ee      	bcc.n	8006664 <_realloc_r+0x14>
 8006686:	0021      	movs	r1, r4
 8006688:	0038      	movs	r0, r7
 800668a:	f7ff ff6b 	bl	8006564 <_malloc_r>
 800668e:	1e05      	subs	r5, r0, #0
 8006690:	d0e8      	beq.n	8006664 <_realloc_r+0x14>
 8006692:	9b01      	ldr	r3, [sp, #4]
 8006694:	0022      	movs	r2, r4
 8006696:	429c      	cmp	r4, r3
 8006698:	d900      	bls.n	800669c <_realloc_r+0x4c>
 800669a:	001a      	movs	r2, r3
 800669c:	0031      	movs	r1, r6
 800669e:	0028      	movs	r0, r5
 80066a0:	f7ff fa2e 	bl	8005b00 <memcpy>
 80066a4:	0031      	movs	r1, r6
 80066a6:	0038      	movs	r0, r7
 80066a8:	f7ff fef0 	bl	800648c <_free_r>
 80066ac:	e7da      	b.n	8006664 <_realloc_r+0x14>
	...

080066b0 <_sbrk_r>:
 80066b0:	2300      	movs	r3, #0
 80066b2:	b570      	push	{r4, r5, r6, lr}
 80066b4:	4d06      	ldr	r5, [pc, #24]	; (80066d0 <_sbrk_r+0x20>)
 80066b6:	0004      	movs	r4, r0
 80066b8:	0008      	movs	r0, r1
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	f7fb feca 	bl	8002454 <_sbrk>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d103      	bne.n	80066cc <_sbrk_r+0x1c>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d000      	beq.n	80066cc <_sbrk_r+0x1c>
 80066ca:	6023      	str	r3, [r4, #0]
 80066cc:	bd70      	pop	{r4, r5, r6, pc}
 80066ce:	46c0      	nop			; (mov r8, r8)
 80066d0:	20000394 	.word	0x20000394

080066d4 <__malloc_lock>:
 80066d4:	b510      	push	{r4, lr}
 80066d6:	4802      	ldr	r0, [pc, #8]	; (80066e0 <__malloc_lock+0xc>)
 80066d8:	f000 f814 	bl	8006704 <__retarget_lock_acquire_recursive>
 80066dc:	bd10      	pop	{r4, pc}
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	20000398 	.word	0x20000398

080066e4 <__malloc_unlock>:
 80066e4:	b510      	push	{r4, lr}
 80066e6:	4802      	ldr	r0, [pc, #8]	; (80066f0 <__malloc_unlock+0xc>)
 80066e8:	f000 f80d 	bl	8006706 <__retarget_lock_release_recursive>
 80066ec:	bd10      	pop	{r4, pc}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	20000398 	.word	0x20000398

080066f4 <_malloc_usable_size_r>:
 80066f4:	1f0b      	subs	r3, r1, #4
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	1f18      	subs	r0, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	da01      	bge.n	8006702 <_malloc_usable_size_r+0xe>
 80066fe:	580b      	ldr	r3, [r1, r0]
 8006700:	18c0      	adds	r0, r0, r3
 8006702:	4770      	bx	lr

08006704 <__retarget_lock_acquire_recursive>:
 8006704:	4770      	bx	lr

08006706 <__retarget_lock_release_recursive>:
 8006706:	4770      	bx	lr

08006708 <_init>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670e:	bc08      	pop	{r3}
 8006710:	469e      	mov	lr, r3
 8006712:	4770      	bx	lr

08006714 <_fini>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671a:	bc08      	pop	{r3}
 800671c:	469e      	mov	lr, r3
 800671e:	4770      	bx	lr
