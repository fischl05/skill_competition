
elevator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005660  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08005720  08005720  00015720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c5c  08005c5c  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08005c5c  08005c5c  00015c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c64  08005c64  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c68  08005c68  00015c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08005c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200000ac  08005d18  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08005d18  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ba2  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d11  00000000  00000000  00037c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000f523  00000000  00000000  0003a987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  00049eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001580  00000000  00000000  0004ab68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003c8d  00000000  00000000  0004c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000190d5  00000000  00000000  0004fd75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000807e5  00000000  00000000  00068e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e962f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003564  00000000  00000000  000e9680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  000ecbe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  000ecc08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000ac 	.word	0x200000ac
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005708 	.word	0x08005708

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000b0 	.word	0x200000b0
 8000104:	08005708 	.word	0x08005708

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_uldivmod>:
 800042c:	2b00      	cmp	r3, #0
 800042e:	d111      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000430:	2a00      	cmp	r2, #0
 8000432:	d10f      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000434:	2900      	cmp	r1, #0
 8000436:	d100      	bne.n	800043a <__aeabi_uldivmod+0xe>
 8000438:	2800      	cmp	r0, #0
 800043a:	d002      	beq.n	8000442 <__aeabi_uldivmod+0x16>
 800043c:	2100      	movs	r1, #0
 800043e:	43c9      	mvns	r1, r1
 8000440:	0008      	movs	r0, r1
 8000442:	b407      	push	{r0, r1, r2}
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <__aeabi_uldivmod+0x24>)
 8000446:	a102      	add	r1, pc, #8	; (adr r1, 8000450 <__aeabi_uldivmod+0x24>)
 8000448:	1840      	adds	r0, r0, r1
 800044a:	9002      	str	r0, [sp, #8]
 800044c:	bd03      	pop	{r0, r1, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	ffffffd9 	.word	0xffffffd9
 8000454:	b403      	push	{r0, r1}
 8000456:	4668      	mov	r0, sp
 8000458:	b501      	push	{r0, lr}
 800045a:	9802      	ldr	r0, [sp, #8]
 800045c:	f000 f84c 	bl	80004f8 <__udivmoddi4>
 8000460:	9b01      	ldr	r3, [sp, #4]
 8000462:	469e      	mov	lr, r3
 8000464:	b002      	add	sp, #8
 8000466:	bc0c      	pop	{r2, r3}
 8000468:	4770      	bx	lr
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_lmul>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	46ce      	mov	lr, r9
 8000470:	4647      	mov	r7, r8
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	4699      	mov	r9, r3
 8000478:	0c3b      	lsrs	r3, r7, #16
 800047a:	469c      	mov	ip, r3
 800047c:	0413      	lsls	r3, r2, #16
 800047e:	0c1b      	lsrs	r3, r3, #16
 8000480:	001d      	movs	r5, r3
 8000482:	000e      	movs	r6, r1
 8000484:	4661      	mov	r1, ip
 8000486:	0400      	lsls	r0, r0, #16
 8000488:	0c14      	lsrs	r4, r2, #16
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	4345      	muls	r5, r0
 800048e:	434b      	muls	r3, r1
 8000490:	4360      	muls	r0, r4
 8000492:	4361      	muls	r1, r4
 8000494:	18c0      	adds	r0, r0, r3
 8000496:	0c2c      	lsrs	r4, r5, #16
 8000498:	1820      	adds	r0, r4, r0
 800049a:	468c      	mov	ip, r1
 800049c:	4283      	cmp	r3, r0
 800049e:	d903      	bls.n	80004a8 <__aeabi_lmul+0x3c>
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	025b      	lsls	r3, r3, #9
 80004a4:	4698      	mov	r8, r3
 80004a6:	44c4      	add	ip, r8
 80004a8:	4649      	mov	r1, r9
 80004aa:	4379      	muls	r1, r7
 80004ac:	4372      	muls	r2, r6
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	4463      	add	r3, ip
 80004b2:	042d      	lsls	r5, r5, #16
 80004b4:	0c2d      	lsrs	r5, r5, #16
 80004b6:	18c9      	adds	r1, r1, r3
 80004b8:	0400      	lsls	r0, r0, #16
 80004ba:	1940      	adds	r0, r0, r5
 80004bc:	1889      	adds	r1, r1, r2
 80004be:	bcc0      	pop	{r6, r7}
 80004c0:	46b9      	mov	r9, r7
 80004c2:	46b0      	mov	r8, r6
 80004c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_f2uiz>:
 80004c8:	219e      	movs	r1, #158	; 0x9e
 80004ca:	b510      	push	{r4, lr}
 80004cc:	05c9      	lsls	r1, r1, #23
 80004ce:	1c04      	adds	r4, r0, #0
 80004d0:	f000 fd5c 	bl	8000f8c <__aeabi_fcmpge>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d103      	bne.n	80004e0 <__aeabi_f2uiz+0x18>
 80004d8:	1c20      	adds	r0, r4, #0
 80004da:	f000 fcc5 	bl	8000e68 <__aeabi_f2iz>
 80004de:	bd10      	pop	{r4, pc}
 80004e0:	219e      	movs	r1, #158	; 0x9e
 80004e2:	1c20      	adds	r0, r4, #0
 80004e4:	05c9      	lsls	r1, r1, #23
 80004e6:	f000 fb11 	bl	8000b0c <__aeabi_fsub>
 80004ea:	f000 fcbd 	bl	8000e68 <__aeabi_f2iz>
 80004ee:	2380      	movs	r3, #128	; 0x80
 80004f0:	061b      	lsls	r3, r3, #24
 80004f2:	469c      	mov	ip, r3
 80004f4:	4460      	add	r0, ip
 80004f6:	e7f2      	b.n	80004de <__aeabi_f2uiz+0x16>

080004f8 <__udivmoddi4>:
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	4657      	mov	r7, sl
 80004fc:	464e      	mov	r6, r9
 80004fe:	4645      	mov	r5, r8
 8000500:	46de      	mov	lr, fp
 8000502:	b5e0      	push	{r5, r6, r7, lr}
 8000504:	0004      	movs	r4, r0
 8000506:	000d      	movs	r5, r1
 8000508:	4692      	mov	sl, r2
 800050a:	4699      	mov	r9, r3
 800050c:	b083      	sub	sp, #12
 800050e:	428b      	cmp	r3, r1
 8000510:	d830      	bhi.n	8000574 <__udivmoddi4+0x7c>
 8000512:	d02d      	beq.n	8000570 <__udivmoddi4+0x78>
 8000514:	4649      	mov	r1, r9
 8000516:	4650      	mov	r0, sl
 8000518:	f000 fd60 	bl	8000fdc <__clzdi2>
 800051c:	0029      	movs	r1, r5
 800051e:	0006      	movs	r6, r0
 8000520:	0020      	movs	r0, r4
 8000522:	f000 fd5b 	bl	8000fdc <__clzdi2>
 8000526:	1a33      	subs	r3, r6, r0
 8000528:	4698      	mov	r8, r3
 800052a:	3b20      	subs	r3, #32
 800052c:	469b      	mov	fp, r3
 800052e:	d433      	bmi.n	8000598 <__udivmoddi4+0xa0>
 8000530:	465a      	mov	r2, fp
 8000532:	4653      	mov	r3, sl
 8000534:	4093      	lsls	r3, r2
 8000536:	4642      	mov	r2, r8
 8000538:	001f      	movs	r7, r3
 800053a:	4653      	mov	r3, sl
 800053c:	4093      	lsls	r3, r2
 800053e:	001e      	movs	r6, r3
 8000540:	42af      	cmp	r7, r5
 8000542:	d83a      	bhi.n	80005ba <__udivmoddi4+0xc2>
 8000544:	42af      	cmp	r7, r5
 8000546:	d100      	bne.n	800054a <__udivmoddi4+0x52>
 8000548:	e078      	b.n	800063c <__udivmoddi4+0x144>
 800054a:	465b      	mov	r3, fp
 800054c:	1ba4      	subs	r4, r4, r6
 800054e:	41bd      	sbcs	r5, r7
 8000550:	2b00      	cmp	r3, #0
 8000552:	da00      	bge.n	8000556 <__udivmoddi4+0x5e>
 8000554:	e075      	b.n	8000642 <__udivmoddi4+0x14a>
 8000556:	2200      	movs	r2, #0
 8000558:	2300      	movs	r3, #0
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	2301      	movs	r3, #1
 8000560:	465a      	mov	r2, fp
 8000562:	4093      	lsls	r3, r2
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	4642      	mov	r2, r8
 800056a:	4093      	lsls	r3, r2
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	e028      	b.n	80005c2 <__udivmoddi4+0xca>
 8000570:	4282      	cmp	r2, r0
 8000572:	d9cf      	bls.n	8000514 <__udivmoddi4+0x1c>
 8000574:	2200      	movs	r2, #0
 8000576:	2300      	movs	r3, #0
 8000578:	9200      	str	r2, [sp, #0]
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <__udivmoddi4+0x8e>
 8000582:	601c      	str	r4, [r3, #0]
 8000584:	605d      	str	r5, [r3, #4]
 8000586:	9800      	ldr	r0, [sp, #0]
 8000588:	9901      	ldr	r1, [sp, #4]
 800058a:	b003      	add	sp, #12
 800058c:	bcf0      	pop	{r4, r5, r6, r7}
 800058e:	46bb      	mov	fp, r7
 8000590:	46b2      	mov	sl, r6
 8000592:	46a9      	mov	r9, r5
 8000594:	46a0      	mov	r8, r4
 8000596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000598:	4642      	mov	r2, r8
 800059a:	2320      	movs	r3, #32
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	4652      	mov	r2, sl
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	4641      	mov	r1, r8
 80005a4:	0013      	movs	r3, r2
 80005a6:	464a      	mov	r2, r9
 80005a8:	408a      	lsls	r2, r1
 80005aa:	0017      	movs	r7, r2
 80005ac:	4642      	mov	r2, r8
 80005ae:	431f      	orrs	r7, r3
 80005b0:	4653      	mov	r3, sl
 80005b2:	4093      	lsls	r3, r2
 80005b4:	001e      	movs	r6, r3
 80005b6:	42af      	cmp	r7, r5
 80005b8:	d9c4      	bls.n	8000544 <__udivmoddi4+0x4c>
 80005ba:	2200      	movs	r2, #0
 80005bc:	2300      	movs	r3, #0
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	4643      	mov	r3, r8
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0d9      	beq.n	800057c <__udivmoddi4+0x84>
 80005c8:	07fb      	lsls	r3, r7, #31
 80005ca:	0872      	lsrs	r2, r6, #1
 80005cc:	431a      	orrs	r2, r3
 80005ce:	4646      	mov	r6, r8
 80005d0:	087b      	lsrs	r3, r7, #1
 80005d2:	e00e      	b.n	80005f2 <__udivmoddi4+0xfa>
 80005d4:	42ab      	cmp	r3, r5
 80005d6:	d101      	bne.n	80005dc <__udivmoddi4+0xe4>
 80005d8:	42a2      	cmp	r2, r4
 80005da:	d80c      	bhi.n	80005f6 <__udivmoddi4+0xfe>
 80005dc:	1aa4      	subs	r4, r4, r2
 80005de:	419d      	sbcs	r5, r3
 80005e0:	2001      	movs	r0, #1
 80005e2:	1924      	adds	r4, r4, r4
 80005e4:	416d      	adcs	r5, r5
 80005e6:	2100      	movs	r1, #0
 80005e8:	3e01      	subs	r6, #1
 80005ea:	1824      	adds	r4, r4, r0
 80005ec:	414d      	adcs	r5, r1
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d006      	beq.n	8000600 <__udivmoddi4+0x108>
 80005f2:	42ab      	cmp	r3, r5
 80005f4:	d9ee      	bls.n	80005d4 <__udivmoddi4+0xdc>
 80005f6:	3e01      	subs	r6, #1
 80005f8:	1924      	adds	r4, r4, r4
 80005fa:	416d      	adcs	r5, r5
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d1f8      	bne.n	80005f2 <__udivmoddi4+0xfa>
 8000600:	9800      	ldr	r0, [sp, #0]
 8000602:	9901      	ldr	r1, [sp, #4]
 8000604:	465b      	mov	r3, fp
 8000606:	1900      	adds	r0, r0, r4
 8000608:	4169      	adcs	r1, r5
 800060a:	2b00      	cmp	r3, #0
 800060c:	db24      	blt.n	8000658 <__udivmoddi4+0x160>
 800060e:	002b      	movs	r3, r5
 8000610:	465a      	mov	r2, fp
 8000612:	4644      	mov	r4, r8
 8000614:	40d3      	lsrs	r3, r2
 8000616:	002a      	movs	r2, r5
 8000618:	40e2      	lsrs	r2, r4
 800061a:	001c      	movs	r4, r3
 800061c:	465b      	mov	r3, fp
 800061e:	0015      	movs	r5, r2
 8000620:	2b00      	cmp	r3, #0
 8000622:	db2a      	blt.n	800067a <__udivmoddi4+0x182>
 8000624:	0026      	movs	r6, r4
 8000626:	409e      	lsls	r6, r3
 8000628:	0033      	movs	r3, r6
 800062a:	0026      	movs	r6, r4
 800062c:	4647      	mov	r7, r8
 800062e:	40be      	lsls	r6, r7
 8000630:	0032      	movs	r2, r6
 8000632:	1a80      	subs	r0, r0, r2
 8000634:	4199      	sbcs	r1, r3
 8000636:	9000      	str	r0, [sp, #0]
 8000638:	9101      	str	r1, [sp, #4]
 800063a:	e79f      	b.n	800057c <__udivmoddi4+0x84>
 800063c:	42a3      	cmp	r3, r4
 800063e:	d8bc      	bhi.n	80005ba <__udivmoddi4+0xc2>
 8000640:	e783      	b.n	800054a <__udivmoddi4+0x52>
 8000642:	4642      	mov	r2, r8
 8000644:	2320      	movs	r3, #32
 8000646:	2100      	movs	r1, #0
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	9100      	str	r1, [sp, #0]
 800064e:	9201      	str	r2, [sp, #4]
 8000650:	2201      	movs	r2, #1
 8000652:	40da      	lsrs	r2, r3
 8000654:	9201      	str	r2, [sp, #4]
 8000656:	e786      	b.n	8000566 <__udivmoddi4+0x6e>
 8000658:	4642      	mov	r2, r8
 800065a:	2320      	movs	r3, #32
 800065c:	1a9b      	subs	r3, r3, r2
 800065e:	002a      	movs	r2, r5
 8000660:	4646      	mov	r6, r8
 8000662:	409a      	lsls	r2, r3
 8000664:	0023      	movs	r3, r4
 8000666:	40f3      	lsrs	r3, r6
 8000668:	4644      	mov	r4, r8
 800066a:	4313      	orrs	r3, r2
 800066c:	002a      	movs	r2, r5
 800066e:	40e2      	lsrs	r2, r4
 8000670:	001c      	movs	r4, r3
 8000672:	465b      	mov	r3, fp
 8000674:	0015      	movs	r5, r2
 8000676:	2b00      	cmp	r3, #0
 8000678:	dad4      	bge.n	8000624 <__udivmoddi4+0x12c>
 800067a:	4642      	mov	r2, r8
 800067c:	002f      	movs	r7, r5
 800067e:	2320      	movs	r3, #32
 8000680:	0026      	movs	r6, r4
 8000682:	4097      	lsls	r7, r2
 8000684:	1a9b      	subs	r3, r3, r2
 8000686:	40de      	lsrs	r6, r3
 8000688:	003b      	movs	r3, r7
 800068a:	4333      	orrs	r3, r6
 800068c:	e7cd      	b.n	800062a <__udivmoddi4+0x132>
 800068e:	46c0      	nop			; (mov r8, r8)

08000690 <__aeabi_fdiv>:
 8000690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000692:	464f      	mov	r7, r9
 8000694:	4646      	mov	r6, r8
 8000696:	46d6      	mov	lr, sl
 8000698:	0245      	lsls	r5, r0, #9
 800069a:	b5c0      	push	{r6, r7, lr}
 800069c:	0047      	lsls	r7, r0, #1
 800069e:	1c0c      	adds	r4, r1, #0
 80006a0:	0a6d      	lsrs	r5, r5, #9
 80006a2:	0e3f      	lsrs	r7, r7, #24
 80006a4:	0fc6      	lsrs	r6, r0, #31
 80006a6:	2f00      	cmp	r7, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fdiv+0x1c>
 80006aa:	e070      	b.n	800078e <__aeabi_fdiv+0xfe>
 80006ac:	2fff      	cmp	r7, #255	; 0xff
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fdiv+0x22>
 80006b0:	e075      	b.n	800079e <__aeabi_fdiv+0x10e>
 80006b2:	00eb      	lsls	r3, r5, #3
 80006b4:	2580      	movs	r5, #128	; 0x80
 80006b6:	04ed      	lsls	r5, r5, #19
 80006b8:	431d      	orrs	r5, r3
 80006ba:	2300      	movs	r3, #0
 80006bc:	4699      	mov	r9, r3
 80006be:	469a      	mov	sl, r3
 80006c0:	3f7f      	subs	r7, #127	; 0x7f
 80006c2:	0260      	lsls	r0, r4, #9
 80006c4:	0a43      	lsrs	r3, r0, #9
 80006c6:	4698      	mov	r8, r3
 80006c8:	0063      	lsls	r3, r4, #1
 80006ca:	0e1b      	lsrs	r3, r3, #24
 80006cc:	0fe4      	lsrs	r4, r4, #31
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d04e      	beq.n	8000770 <__aeabi_fdiv+0xe0>
 80006d2:	2bff      	cmp	r3, #255	; 0xff
 80006d4:	d046      	beq.n	8000764 <__aeabi_fdiv+0xd4>
 80006d6:	4642      	mov	r2, r8
 80006d8:	00d0      	lsls	r0, r2, #3
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	04d2      	lsls	r2, r2, #19
 80006de:	4302      	orrs	r2, r0
 80006e0:	4690      	mov	r8, r2
 80006e2:	2200      	movs	r2, #0
 80006e4:	3b7f      	subs	r3, #127	; 0x7f
 80006e6:	0031      	movs	r1, r6
 80006e8:	1aff      	subs	r7, r7, r3
 80006ea:	464b      	mov	r3, r9
 80006ec:	4061      	eors	r1, r4
 80006ee:	b2c9      	uxtb	r1, r1
 80006f0:	4313      	orrs	r3, r2
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d900      	bls.n	80006f8 <__aeabi_fdiv+0x68>
 80006f6:	e0b5      	b.n	8000864 <__aeabi_fdiv+0x1d4>
 80006f8:	486e      	ldr	r0, [pc, #440]	; (80008b4 <__aeabi_fdiv+0x224>)
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	58c3      	ldr	r3, [r0, r3]
 80006fe:	469f      	mov	pc, r3
 8000700:	2300      	movs	r3, #0
 8000702:	4698      	mov	r8, r3
 8000704:	0026      	movs	r6, r4
 8000706:	4645      	mov	r5, r8
 8000708:	4692      	mov	sl, r2
 800070a:	4653      	mov	r3, sl
 800070c:	2b02      	cmp	r3, #2
 800070e:	d100      	bne.n	8000712 <__aeabi_fdiv+0x82>
 8000710:	e089      	b.n	8000826 <__aeabi_fdiv+0x196>
 8000712:	2b03      	cmp	r3, #3
 8000714:	d100      	bne.n	8000718 <__aeabi_fdiv+0x88>
 8000716:	e09e      	b.n	8000856 <__aeabi_fdiv+0x1c6>
 8000718:	2b01      	cmp	r3, #1
 800071a:	d018      	beq.n	800074e <__aeabi_fdiv+0xbe>
 800071c:	003b      	movs	r3, r7
 800071e:	337f      	adds	r3, #127	; 0x7f
 8000720:	2b00      	cmp	r3, #0
 8000722:	dd69      	ble.n	80007f8 <__aeabi_fdiv+0x168>
 8000724:	076a      	lsls	r2, r5, #29
 8000726:	d004      	beq.n	8000732 <__aeabi_fdiv+0xa2>
 8000728:	220f      	movs	r2, #15
 800072a:	402a      	ands	r2, r5
 800072c:	2a04      	cmp	r2, #4
 800072e:	d000      	beq.n	8000732 <__aeabi_fdiv+0xa2>
 8000730:	3504      	adds	r5, #4
 8000732:	012a      	lsls	r2, r5, #4
 8000734:	d503      	bpl.n	800073e <__aeabi_fdiv+0xae>
 8000736:	4b60      	ldr	r3, [pc, #384]	; (80008b8 <__aeabi_fdiv+0x228>)
 8000738:	401d      	ands	r5, r3
 800073a:	003b      	movs	r3, r7
 800073c:	3380      	adds	r3, #128	; 0x80
 800073e:	2bfe      	cmp	r3, #254	; 0xfe
 8000740:	dd00      	ble.n	8000744 <__aeabi_fdiv+0xb4>
 8000742:	e070      	b.n	8000826 <__aeabi_fdiv+0x196>
 8000744:	01ad      	lsls	r5, r5, #6
 8000746:	0a6d      	lsrs	r5, r5, #9
 8000748:	b2d8      	uxtb	r0, r3
 800074a:	e002      	b.n	8000752 <__aeabi_fdiv+0xc2>
 800074c:	000e      	movs	r6, r1
 800074e:	2000      	movs	r0, #0
 8000750:	2500      	movs	r5, #0
 8000752:	05c0      	lsls	r0, r0, #23
 8000754:	4328      	orrs	r0, r5
 8000756:	07f6      	lsls	r6, r6, #31
 8000758:	4330      	orrs	r0, r6
 800075a:	bce0      	pop	{r5, r6, r7}
 800075c:	46ba      	mov	sl, r7
 800075e:	46b1      	mov	r9, r6
 8000760:	46a8      	mov	r8, r5
 8000762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000764:	4643      	mov	r3, r8
 8000766:	2b00      	cmp	r3, #0
 8000768:	d13f      	bne.n	80007ea <__aeabi_fdiv+0x15a>
 800076a:	2202      	movs	r2, #2
 800076c:	3fff      	subs	r7, #255	; 0xff
 800076e:	e003      	b.n	8000778 <__aeabi_fdiv+0xe8>
 8000770:	4643      	mov	r3, r8
 8000772:	2b00      	cmp	r3, #0
 8000774:	d12d      	bne.n	80007d2 <__aeabi_fdiv+0x142>
 8000776:	2201      	movs	r2, #1
 8000778:	0031      	movs	r1, r6
 800077a:	464b      	mov	r3, r9
 800077c:	4061      	eors	r1, r4
 800077e:	b2c9      	uxtb	r1, r1
 8000780:	4313      	orrs	r3, r2
 8000782:	2b0f      	cmp	r3, #15
 8000784:	d834      	bhi.n	80007f0 <__aeabi_fdiv+0x160>
 8000786:	484d      	ldr	r0, [pc, #308]	; (80008bc <__aeabi_fdiv+0x22c>)
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	58c3      	ldr	r3, [r0, r3]
 800078c:	469f      	mov	pc, r3
 800078e:	2d00      	cmp	r5, #0
 8000790:	d113      	bne.n	80007ba <__aeabi_fdiv+0x12a>
 8000792:	2304      	movs	r3, #4
 8000794:	4699      	mov	r9, r3
 8000796:	3b03      	subs	r3, #3
 8000798:	2700      	movs	r7, #0
 800079a:	469a      	mov	sl, r3
 800079c:	e791      	b.n	80006c2 <__aeabi_fdiv+0x32>
 800079e:	2d00      	cmp	r5, #0
 80007a0:	d105      	bne.n	80007ae <__aeabi_fdiv+0x11e>
 80007a2:	2308      	movs	r3, #8
 80007a4:	4699      	mov	r9, r3
 80007a6:	3b06      	subs	r3, #6
 80007a8:	27ff      	movs	r7, #255	; 0xff
 80007aa:	469a      	mov	sl, r3
 80007ac:	e789      	b.n	80006c2 <__aeabi_fdiv+0x32>
 80007ae:	230c      	movs	r3, #12
 80007b0:	4699      	mov	r9, r3
 80007b2:	3b09      	subs	r3, #9
 80007b4:	27ff      	movs	r7, #255	; 0xff
 80007b6:	469a      	mov	sl, r3
 80007b8:	e783      	b.n	80006c2 <__aeabi_fdiv+0x32>
 80007ba:	0028      	movs	r0, r5
 80007bc:	f000 fbf0 	bl	8000fa0 <__clzsi2>
 80007c0:	2776      	movs	r7, #118	; 0x76
 80007c2:	1f43      	subs	r3, r0, #5
 80007c4:	409d      	lsls	r5, r3
 80007c6:	2300      	movs	r3, #0
 80007c8:	427f      	negs	r7, r7
 80007ca:	4699      	mov	r9, r3
 80007cc:	469a      	mov	sl, r3
 80007ce:	1a3f      	subs	r7, r7, r0
 80007d0:	e777      	b.n	80006c2 <__aeabi_fdiv+0x32>
 80007d2:	4640      	mov	r0, r8
 80007d4:	f000 fbe4 	bl	8000fa0 <__clzsi2>
 80007d8:	4642      	mov	r2, r8
 80007da:	1f43      	subs	r3, r0, #5
 80007dc:	409a      	lsls	r2, r3
 80007de:	2376      	movs	r3, #118	; 0x76
 80007e0:	425b      	negs	r3, r3
 80007e2:	4690      	mov	r8, r2
 80007e4:	1a1b      	subs	r3, r3, r0
 80007e6:	2200      	movs	r2, #0
 80007e8:	e77d      	b.n	80006e6 <__aeabi_fdiv+0x56>
 80007ea:	23ff      	movs	r3, #255	; 0xff
 80007ec:	2203      	movs	r2, #3
 80007ee:	e77a      	b.n	80006e6 <__aeabi_fdiv+0x56>
 80007f0:	000e      	movs	r6, r1
 80007f2:	20ff      	movs	r0, #255	; 0xff
 80007f4:	2500      	movs	r5, #0
 80007f6:	e7ac      	b.n	8000752 <__aeabi_fdiv+0xc2>
 80007f8:	2001      	movs	r0, #1
 80007fa:	1ac0      	subs	r0, r0, r3
 80007fc:	281b      	cmp	r0, #27
 80007fe:	dca6      	bgt.n	800074e <__aeabi_fdiv+0xbe>
 8000800:	379e      	adds	r7, #158	; 0x9e
 8000802:	002a      	movs	r2, r5
 8000804:	40bd      	lsls	r5, r7
 8000806:	40c2      	lsrs	r2, r0
 8000808:	1e6b      	subs	r3, r5, #1
 800080a:	419d      	sbcs	r5, r3
 800080c:	4315      	orrs	r5, r2
 800080e:	076b      	lsls	r3, r5, #29
 8000810:	d004      	beq.n	800081c <__aeabi_fdiv+0x18c>
 8000812:	230f      	movs	r3, #15
 8000814:	402b      	ands	r3, r5
 8000816:	2b04      	cmp	r3, #4
 8000818:	d000      	beq.n	800081c <__aeabi_fdiv+0x18c>
 800081a:	3504      	adds	r5, #4
 800081c:	016b      	lsls	r3, r5, #5
 800081e:	d544      	bpl.n	80008aa <__aeabi_fdiv+0x21a>
 8000820:	2001      	movs	r0, #1
 8000822:	2500      	movs	r5, #0
 8000824:	e795      	b.n	8000752 <__aeabi_fdiv+0xc2>
 8000826:	20ff      	movs	r0, #255	; 0xff
 8000828:	2500      	movs	r5, #0
 800082a:	e792      	b.n	8000752 <__aeabi_fdiv+0xc2>
 800082c:	2580      	movs	r5, #128	; 0x80
 800082e:	2600      	movs	r6, #0
 8000830:	20ff      	movs	r0, #255	; 0xff
 8000832:	03ed      	lsls	r5, r5, #15
 8000834:	e78d      	b.n	8000752 <__aeabi_fdiv+0xc2>
 8000836:	2300      	movs	r3, #0
 8000838:	4698      	mov	r8, r3
 800083a:	2080      	movs	r0, #128	; 0x80
 800083c:	03c0      	lsls	r0, r0, #15
 800083e:	4205      	tst	r5, r0
 8000840:	d009      	beq.n	8000856 <__aeabi_fdiv+0x1c6>
 8000842:	4643      	mov	r3, r8
 8000844:	4203      	tst	r3, r0
 8000846:	d106      	bne.n	8000856 <__aeabi_fdiv+0x1c6>
 8000848:	4645      	mov	r5, r8
 800084a:	4305      	orrs	r5, r0
 800084c:	026d      	lsls	r5, r5, #9
 800084e:	0026      	movs	r6, r4
 8000850:	20ff      	movs	r0, #255	; 0xff
 8000852:	0a6d      	lsrs	r5, r5, #9
 8000854:	e77d      	b.n	8000752 <__aeabi_fdiv+0xc2>
 8000856:	2080      	movs	r0, #128	; 0x80
 8000858:	03c0      	lsls	r0, r0, #15
 800085a:	4305      	orrs	r5, r0
 800085c:	026d      	lsls	r5, r5, #9
 800085e:	20ff      	movs	r0, #255	; 0xff
 8000860:	0a6d      	lsrs	r5, r5, #9
 8000862:	e776      	b.n	8000752 <__aeabi_fdiv+0xc2>
 8000864:	4642      	mov	r2, r8
 8000866:	016b      	lsls	r3, r5, #5
 8000868:	0150      	lsls	r0, r2, #5
 800086a:	4283      	cmp	r3, r0
 800086c:	d219      	bcs.n	80008a2 <__aeabi_fdiv+0x212>
 800086e:	221b      	movs	r2, #27
 8000870:	2500      	movs	r5, #0
 8000872:	3f01      	subs	r7, #1
 8000874:	2601      	movs	r6, #1
 8000876:	001c      	movs	r4, r3
 8000878:	006d      	lsls	r5, r5, #1
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	2c00      	cmp	r4, #0
 800087e:	db01      	blt.n	8000884 <__aeabi_fdiv+0x1f4>
 8000880:	4298      	cmp	r0, r3
 8000882:	d801      	bhi.n	8000888 <__aeabi_fdiv+0x1f8>
 8000884:	1a1b      	subs	r3, r3, r0
 8000886:	4335      	orrs	r5, r6
 8000888:	3a01      	subs	r2, #1
 800088a:	2a00      	cmp	r2, #0
 800088c:	d1f3      	bne.n	8000876 <__aeabi_fdiv+0x1e6>
 800088e:	1e5a      	subs	r2, r3, #1
 8000890:	4193      	sbcs	r3, r2
 8000892:	431d      	orrs	r5, r3
 8000894:	003b      	movs	r3, r7
 8000896:	337f      	adds	r3, #127	; 0x7f
 8000898:	000e      	movs	r6, r1
 800089a:	2b00      	cmp	r3, #0
 800089c:	dd00      	ble.n	80008a0 <__aeabi_fdiv+0x210>
 800089e:	e741      	b.n	8000724 <__aeabi_fdiv+0x94>
 80008a0:	e7aa      	b.n	80007f8 <__aeabi_fdiv+0x168>
 80008a2:	221a      	movs	r2, #26
 80008a4:	2501      	movs	r5, #1
 80008a6:	1a1b      	subs	r3, r3, r0
 80008a8:	e7e4      	b.n	8000874 <__aeabi_fdiv+0x1e4>
 80008aa:	01ad      	lsls	r5, r5, #6
 80008ac:	2000      	movs	r0, #0
 80008ae:	0a6d      	lsrs	r5, r5, #9
 80008b0:	e74f      	b.n	8000752 <__aeabi_fdiv+0xc2>
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	08005728 	.word	0x08005728
 80008b8:	f7ffffff 	.word	0xf7ffffff
 80008bc:	08005768 	.word	0x08005768

080008c0 <__aeabi_fmul>:
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	464f      	mov	r7, r9
 80008c4:	4646      	mov	r6, r8
 80008c6:	46d6      	mov	lr, sl
 80008c8:	0244      	lsls	r4, r0, #9
 80008ca:	0045      	lsls	r5, r0, #1
 80008cc:	b5c0      	push	{r6, r7, lr}
 80008ce:	0a64      	lsrs	r4, r4, #9
 80008d0:	1c0f      	adds	r7, r1, #0
 80008d2:	0e2d      	lsrs	r5, r5, #24
 80008d4:	0fc6      	lsrs	r6, r0, #31
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d100      	bne.n	80008dc <__aeabi_fmul+0x1c>
 80008da:	e08d      	b.n	80009f8 <__aeabi_fmul+0x138>
 80008dc:	2dff      	cmp	r5, #255	; 0xff
 80008de:	d100      	bne.n	80008e2 <__aeabi_fmul+0x22>
 80008e0:	e092      	b.n	8000a08 <__aeabi_fmul+0x148>
 80008e2:	2300      	movs	r3, #0
 80008e4:	2080      	movs	r0, #128	; 0x80
 80008e6:	4699      	mov	r9, r3
 80008e8:	469a      	mov	sl, r3
 80008ea:	00e4      	lsls	r4, r4, #3
 80008ec:	04c0      	lsls	r0, r0, #19
 80008ee:	4304      	orrs	r4, r0
 80008f0:	3d7f      	subs	r5, #127	; 0x7f
 80008f2:	0278      	lsls	r0, r7, #9
 80008f4:	0a43      	lsrs	r3, r0, #9
 80008f6:	4698      	mov	r8, r3
 80008f8:	007b      	lsls	r3, r7, #1
 80008fa:	0e1b      	lsrs	r3, r3, #24
 80008fc:	0fff      	lsrs	r7, r7, #31
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d100      	bne.n	8000904 <__aeabi_fmul+0x44>
 8000902:	e070      	b.n	80009e6 <__aeabi_fmul+0x126>
 8000904:	2bff      	cmp	r3, #255	; 0xff
 8000906:	d100      	bne.n	800090a <__aeabi_fmul+0x4a>
 8000908:	e086      	b.n	8000a18 <__aeabi_fmul+0x158>
 800090a:	4642      	mov	r2, r8
 800090c:	00d0      	lsls	r0, r2, #3
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	3b7f      	subs	r3, #127	; 0x7f
 8000912:	18ed      	adds	r5, r5, r3
 8000914:	2300      	movs	r3, #0
 8000916:	04d2      	lsls	r2, r2, #19
 8000918:	4302      	orrs	r2, r0
 800091a:	4690      	mov	r8, r2
 800091c:	469c      	mov	ip, r3
 800091e:	0031      	movs	r1, r6
 8000920:	464b      	mov	r3, r9
 8000922:	4079      	eors	r1, r7
 8000924:	1c68      	adds	r0, r5, #1
 8000926:	2b0f      	cmp	r3, #15
 8000928:	d81c      	bhi.n	8000964 <__aeabi_fmul+0xa4>
 800092a:	4a76      	ldr	r2, [pc, #472]	; (8000b04 <__aeabi_fmul+0x244>)
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	58d3      	ldr	r3, [r2, r3]
 8000930:	469f      	mov	pc, r3
 8000932:	0039      	movs	r1, r7
 8000934:	4644      	mov	r4, r8
 8000936:	46e2      	mov	sl, ip
 8000938:	4653      	mov	r3, sl
 800093a:	2b02      	cmp	r3, #2
 800093c:	d00f      	beq.n	800095e <__aeabi_fmul+0x9e>
 800093e:	2b03      	cmp	r3, #3
 8000940:	d100      	bne.n	8000944 <__aeabi_fmul+0x84>
 8000942:	e0d7      	b.n	8000af4 <__aeabi_fmul+0x234>
 8000944:	2b01      	cmp	r3, #1
 8000946:	d137      	bne.n	80009b8 <__aeabi_fmul+0xf8>
 8000948:	2000      	movs	r0, #0
 800094a:	2400      	movs	r4, #0
 800094c:	05c0      	lsls	r0, r0, #23
 800094e:	4320      	orrs	r0, r4
 8000950:	07c9      	lsls	r1, r1, #31
 8000952:	4308      	orrs	r0, r1
 8000954:	bce0      	pop	{r5, r6, r7}
 8000956:	46ba      	mov	sl, r7
 8000958:	46b1      	mov	r9, r6
 800095a:	46a8      	mov	r8, r5
 800095c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095e:	20ff      	movs	r0, #255	; 0xff
 8000960:	2400      	movs	r4, #0
 8000962:	e7f3      	b.n	800094c <__aeabi_fmul+0x8c>
 8000964:	0c26      	lsrs	r6, r4, #16
 8000966:	0424      	lsls	r4, r4, #16
 8000968:	0c22      	lsrs	r2, r4, #16
 800096a:	4644      	mov	r4, r8
 800096c:	0424      	lsls	r4, r4, #16
 800096e:	0c24      	lsrs	r4, r4, #16
 8000970:	4643      	mov	r3, r8
 8000972:	0027      	movs	r7, r4
 8000974:	0c1b      	lsrs	r3, r3, #16
 8000976:	4357      	muls	r7, r2
 8000978:	4374      	muls	r4, r6
 800097a:	435a      	muls	r2, r3
 800097c:	435e      	muls	r6, r3
 800097e:	1912      	adds	r2, r2, r4
 8000980:	0c3b      	lsrs	r3, r7, #16
 8000982:	189b      	adds	r3, r3, r2
 8000984:	429c      	cmp	r4, r3
 8000986:	d903      	bls.n	8000990 <__aeabi_fmul+0xd0>
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	0252      	lsls	r2, r2, #9
 800098c:	4694      	mov	ip, r2
 800098e:	4466      	add	r6, ip
 8000990:	043f      	lsls	r7, r7, #16
 8000992:	041a      	lsls	r2, r3, #16
 8000994:	0c3f      	lsrs	r7, r7, #16
 8000996:	19d2      	adds	r2, r2, r7
 8000998:	0194      	lsls	r4, r2, #6
 800099a:	1e67      	subs	r7, r4, #1
 800099c:	41bc      	sbcs	r4, r7
 800099e:	0c1b      	lsrs	r3, r3, #16
 80009a0:	0e92      	lsrs	r2, r2, #26
 80009a2:	199b      	adds	r3, r3, r6
 80009a4:	4314      	orrs	r4, r2
 80009a6:	019b      	lsls	r3, r3, #6
 80009a8:	431c      	orrs	r4, r3
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	d400      	bmi.n	80009b0 <__aeabi_fmul+0xf0>
 80009ae:	e09b      	b.n	8000ae8 <__aeabi_fmul+0x228>
 80009b0:	2301      	movs	r3, #1
 80009b2:	0862      	lsrs	r2, r4, #1
 80009b4:	401c      	ands	r4, r3
 80009b6:	4314      	orrs	r4, r2
 80009b8:	0002      	movs	r2, r0
 80009ba:	327f      	adds	r2, #127	; 0x7f
 80009bc:	2a00      	cmp	r2, #0
 80009be:	dd64      	ble.n	8000a8a <__aeabi_fmul+0x1ca>
 80009c0:	0763      	lsls	r3, r4, #29
 80009c2:	d004      	beq.n	80009ce <__aeabi_fmul+0x10e>
 80009c4:	230f      	movs	r3, #15
 80009c6:	4023      	ands	r3, r4
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x10e>
 80009cc:	3404      	adds	r4, #4
 80009ce:	0123      	lsls	r3, r4, #4
 80009d0:	d503      	bpl.n	80009da <__aeabi_fmul+0x11a>
 80009d2:	0002      	movs	r2, r0
 80009d4:	4b4c      	ldr	r3, [pc, #304]	; (8000b08 <__aeabi_fmul+0x248>)
 80009d6:	3280      	adds	r2, #128	; 0x80
 80009d8:	401c      	ands	r4, r3
 80009da:	2afe      	cmp	r2, #254	; 0xfe
 80009dc:	dcbf      	bgt.n	800095e <__aeabi_fmul+0x9e>
 80009de:	01a4      	lsls	r4, r4, #6
 80009e0:	0a64      	lsrs	r4, r4, #9
 80009e2:	b2d0      	uxtb	r0, r2
 80009e4:	e7b2      	b.n	800094c <__aeabi_fmul+0x8c>
 80009e6:	4643      	mov	r3, r8
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d13d      	bne.n	8000a68 <__aeabi_fmul+0x1a8>
 80009ec:	464a      	mov	r2, r9
 80009ee:	3301      	adds	r3, #1
 80009f0:	431a      	orrs	r2, r3
 80009f2:	4691      	mov	r9, r2
 80009f4:	469c      	mov	ip, r3
 80009f6:	e792      	b.n	800091e <__aeabi_fmul+0x5e>
 80009f8:	2c00      	cmp	r4, #0
 80009fa:	d129      	bne.n	8000a50 <__aeabi_fmul+0x190>
 80009fc:	2304      	movs	r3, #4
 80009fe:	4699      	mov	r9, r3
 8000a00:	3b03      	subs	r3, #3
 8000a02:	2500      	movs	r5, #0
 8000a04:	469a      	mov	sl, r3
 8000a06:	e774      	b.n	80008f2 <__aeabi_fmul+0x32>
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	d11b      	bne.n	8000a44 <__aeabi_fmul+0x184>
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	4699      	mov	r9, r3
 8000a10:	3b06      	subs	r3, #6
 8000a12:	25ff      	movs	r5, #255	; 0xff
 8000a14:	469a      	mov	sl, r3
 8000a16:	e76c      	b.n	80008f2 <__aeabi_fmul+0x32>
 8000a18:	4643      	mov	r3, r8
 8000a1a:	35ff      	adds	r5, #255	; 0xff
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10b      	bne.n	8000a38 <__aeabi_fmul+0x178>
 8000a20:	2302      	movs	r3, #2
 8000a22:	464a      	mov	r2, r9
 8000a24:	431a      	orrs	r2, r3
 8000a26:	4691      	mov	r9, r2
 8000a28:	469c      	mov	ip, r3
 8000a2a:	e778      	b.n	800091e <__aeabi_fmul+0x5e>
 8000a2c:	4653      	mov	r3, sl
 8000a2e:	0031      	movs	r1, r6
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d000      	beq.n	8000a36 <__aeabi_fmul+0x176>
 8000a34:	e783      	b.n	800093e <__aeabi_fmul+0x7e>
 8000a36:	e792      	b.n	800095e <__aeabi_fmul+0x9e>
 8000a38:	2303      	movs	r3, #3
 8000a3a:	464a      	mov	r2, r9
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	4691      	mov	r9, r2
 8000a40:	469c      	mov	ip, r3
 8000a42:	e76c      	b.n	800091e <__aeabi_fmul+0x5e>
 8000a44:	230c      	movs	r3, #12
 8000a46:	4699      	mov	r9, r3
 8000a48:	3b09      	subs	r3, #9
 8000a4a:	25ff      	movs	r5, #255	; 0xff
 8000a4c:	469a      	mov	sl, r3
 8000a4e:	e750      	b.n	80008f2 <__aeabi_fmul+0x32>
 8000a50:	0020      	movs	r0, r4
 8000a52:	f000 faa5 	bl	8000fa0 <__clzsi2>
 8000a56:	2576      	movs	r5, #118	; 0x76
 8000a58:	1f43      	subs	r3, r0, #5
 8000a5a:	409c      	lsls	r4, r3
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	426d      	negs	r5, r5
 8000a60:	4699      	mov	r9, r3
 8000a62:	469a      	mov	sl, r3
 8000a64:	1a2d      	subs	r5, r5, r0
 8000a66:	e744      	b.n	80008f2 <__aeabi_fmul+0x32>
 8000a68:	4640      	mov	r0, r8
 8000a6a:	f000 fa99 	bl	8000fa0 <__clzsi2>
 8000a6e:	4642      	mov	r2, r8
 8000a70:	1f43      	subs	r3, r0, #5
 8000a72:	409a      	lsls	r2, r3
 8000a74:	2300      	movs	r3, #0
 8000a76:	1a2d      	subs	r5, r5, r0
 8000a78:	4690      	mov	r8, r2
 8000a7a:	469c      	mov	ip, r3
 8000a7c:	3d76      	subs	r5, #118	; 0x76
 8000a7e:	e74e      	b.n	800091e <__aeabi_fmul+0x5e>
 8000a80:	2480      	movs	r4, #128	; 0x80
 8000a82:	2100      	movs	r1, #0
 8000a84:	20ff      	movs	r0, #255	; 0xff
 8000a86:	03e4      	lsls	r4, r4, #15
 8000a88:	e760      	b.n	800094c <__aeabi_fmul+0x8c>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	1a9b      	subs	r3, r3, r2
 8000a8e:	2b1b      	cmp	r3, #27
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_fmul+0x1d4>
 8000a92:	e759      	b.n	8000948 <__aeabi_fmul+0x88>
 8000a94:	0022      	movs	r2, r4
 8000a96:	309e      	adds	r0, #158	; 0x9e
 8000a98:	40da      	lsrs	r2, r3
 8000a9a:	4084      	lsls	r4, r0
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	1e62      	subs	r2, r4, #1
 8000aa0:	4194      	sbcs	r4, r2
 8000aa2:	431c      	orrs	r4, r3
 8000aa4:	0763      	lsls	r3, r4, #29
 8000aa6:	d004      	beq.n	8000ab2 <__aeabi_fmul+0x1f2>
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	4023      	ands	r3, r4
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_fmul+0x1f2>
 8000ab0:	3404      	adds	r4, #4
 8000ab2:	0163      	lsls	r3, r4, #5
 8000ab4:	d51a      	bpl.n	8000aec <__aeabi_fmul+0x22c>
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	2400      	movs	r4, #0
 8000aba:	e747      	b.n	800094c <__aeabi_fmul+0x8c>
 8000abc:	2080      	movs	r0, #128	; 0x80
 8000abe:	03c0      	lsls	r0, r0, #15
 8000ac0:	4204      	tst	r4, r0
 8000ac2:	d009      	beq.n	8000ad8 <__aeabi_fmul+0x218>
 8000ac4:	4643      	mov	r3, r8
 8000ac6:	4203      	tst	r3, r0
 8000ac8:	d106      	bne.n	8000ad8 <__aeabi_fmul+0x218>
 8000aca:	4644      	mov	r4, r8
 8000acc:	4304      	orrs	r4, r0
 8000ace:	0264      	lsls	r4, r4, #9
 8000ad0:	0039      	movs	r1, r7
 8000ad2:	20ff      	movs	r0, #255	; 0xff
 8000ad4:	0a64      	lsrs	r4, r4, #9
 8000ad6:	e739      	b.n	800094c <__aeabi_fmul+0x8c>
 8000ad8:	2080      	movs	r0, #128	; 0x80
 8000ada:	03c0      	lsls	r0, r0, #15
 8000adc:	4304      	orrs	r4, r0
 8000ade:	0264      	lsls	r4, r4, #9
 8000ae0:	0031      	movs	r1, r6
 8000ae2:	20ff      	movs	r0, #255	; 0xff
 8000ae4:	0a64      	lsrs	r4, r4, #9
 8000ae6:	e731      	b.n	800094c <__aeabi_fmul+0x8c>
 8000ae8:	0028      	movs	r0, r5
 8000aea:	e765      	b.n	80009b8 <__aeabi_fmul+0xf8>
 8000aec:	01a4      	lsls	r4, r4, #6
 8000aee:	2000      	movs	r0, #0
 8000af0:	0a64      	lsrs	r4, r4, #9
 8000af2:	e72b      	b.n	800094c <__aeabi_fmul+0x8c>
 8000af4:	2080      	movs	r0, #128	; 0x80
 8000af6:	03c0      	lsls	r0, r0, #15
 8000af8:	4304      	orrs	r4, r0
 8000afa:	0264      	lsls	r4, r4, #9
 8000afc:	20ff      	movs	r0, #255	; 0xff
 8000afe:	0a64      	lsrs	r4, r4, #9
 8000b00:	e724      	b.n	800094c <__aeabi_fmul+0x8c>
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	080057a8 	.word	0x080057a8
 8000b08:	f7ffffff 	.word	0xf7ffffff

08000b0c <__aeabi_fsub>:
 8000b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0e:	46ce      	mov	lr, r9
 8000b10:	4647      	mov	r7, r8
 8000b12:	0243      	lsls	r3, r0, #9
 8000b14:	0a5b      	lsrs	r3, r3, #9
 8000b16:	024e      	lsls	r6, r1, #9
 8000b18:	00da      	lsls	r2, r3, #3
 8000b1a:	4694      	mov	ip, r2
 8000b1c:	0a72      	lsrs	r2, r6, #9
 8000b1e:	4691      	mov	r9, r2
 8000b20:	0045      	lsls	r5, r0, #1
 8000b22:	004a      	lsls	r2, r1, #1
 8000b24:	b580      	push	{r7, lr}
 8000b26:	0e2d      	lsrs	r5, r5, #24
 8000b28:	001f      	movs	r7, r3
 8000b2a:	0fc4      	lsrs	r4, r0, #31
 8000b2c:	0e12      	lsrs	r2, r2, #24
 8000b2e:	0fc9      	lsrs	r1, r1, #31
 8000b30:	09b6      	lsrs	r6, r6, #6
 8000b32:	2aff      	cmp	r2, #255	; 0xff
 8000b34:	d05b      	beq.n	8000bee <__aeabi_fsub+0xe2>
 8000b36:	2001      	movs	r0, #1
 8000b38:	4041      	eors	r1, r0
 8000b3a:	428c      	cmp	r4, r1
 8000b3c:	d039      	beq.n	8000bb2 <__aeabi_fsub+0xa6>
 8000b3e:	1aa8      	subs	r0, r5, r2
 8000b40:	2800      	cmp	r0, #0
 8000b42:	dd5a      	ble.n	8000bfa <__aeabi_fsub+0xee>
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d06a      	beq.n	8000c1e <__aeabi_fsub+0x112>
 8000b48:	2dff      	cmp	r5, #255	; 0xff
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_fsub+0x42>
 8000b4c:	e0d9      	b.n	8000d02 <__aeabi_fsub+0x1f6>
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	04d2      	lsls	r2, r2, #19
 8000b52:	4316      	orrs	r6, r2
 8000b54:	281b      	cmp	r0, #27
 8000b56:	dc00      	bgt.n	8000b5a <__aeabi_fsub+0x4e>
 8000b58:	e0e9      	b.n	8000d2e <__aeabi_fsub+0x222>
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4663      	mov	r3, ip
 8000b5e:	1a18      	subs	r0, r3, r0
 8000b60:	0143      	lsls	r3, r0, #5
 8000b62:	d400      	bmi.n	8000b66 <__aeabi_fsub+0x5a>
 8000b64:	e0b4      	b.n	8000cd0 <__aeabi_fsub+0x1c4>
 8000b66:	0180      	lsls	r0, r0, #6
 8000b68:	0987      	lsrs	r7, r0, #6
 8000b6a:	0038      	movs	r0, r7
 8000b6c:	f000 fa18 	bl	8000fa0 <__clzsi2>
 8000b70:	3805      	subs	r0, #5
 8000b72:	4087      	lsls	r7, r0
 8000b74:	4285      	cmp	r5, r0
 8000b76:	dc00      	bgt.n	8000b7a <__aeabi_fsub+0x6e>
 8000b78:	e0cc      	b.n	8000d14 <__aeabi_fsub+0x208>
 8000b7a:	1a2d      	subs	r5, r5, r0
 8000b7c:	48b5      	ldr	r0, [pc, #724]	; (8000e54 <__aeabi_fsub+0x348>)
 8000b7e:	4038      	ands	r0, r7
 8000b80:	0743      	lsls	r3, r0, #29
 8000b82:	d004      	beq.n	8000b8e <__aeabi_fsub+0x82>
 8000b84:	230f      	movs	r3, #15
 8000b86:	4003      	ands	r3, r0
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_fsub+0x82>
 8000b8c:	3004      	adds	r0, #4
 8000b8e:	0143      	lsls	r3, r0, #5
 8000b90:	d400      	bmi.n	8000b94 <__aeabi_fsub+0x88>
 8000b92:	e0a0      	b.n	8000cd6 <__aeabi_fsub+0x1ca>
 8000b94:	1c6a      	adds	r2, r5, #1
 8000b96:	2dfe      	cmp	r5, #254	; 0xfe
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x90>
 8000b9a:	e08d      	b.n	8000cb8 <__aeabi_fsub+0x1ac>
 8000b9c:	0180      	lsls	r0, r0, #6
 8000b9e:	0a47      	lsrs	r7, r0, #9
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	05d0      	lsls	r0, r2, #23
 8000ba4:	4338      	orrs	r0, r7
 8000ba6:	07e4      	lsls	r4, r4, #31
 8000ba8:	4320      	orrs	r0, r4
 8000baa:	bcc0      	pop	{r6, r7}
 8000bac:	46b9      	mov	r9, r7
 8000bae:	46b0      	mov	r8, r6
 8000bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bb2:	1aa8      	subs	r0, r5, r2
 8000bb4:	4680      	mov	r8, r0
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	dd45      	ble.n	8000c46 <__aeabi_fsub+0x13a>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	d070      	beq.n	8000ca0 <__aeabi_fsub+0x194>
 8000bbe:	2dff      	cmp	r5, #255	; 0xff
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0xb8>
 8000bc2:	e09e      	b.n	8000d02 <__aeabi_fsub+0x1f6>
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	04db      	lsls	r3, r3, #19
 8000bc8:	431e      	orrs	r6, r3
 8000bca:	4643      	mov	r3, r8
 8000bcc:	2b1b      	cmp	r3, #27
 8000bce:	dc00      	bgt.n	8000bd2 <__aeabi_fsub+0xc6>
 8000bd0:	e0d2      	b.n	8000d78 <__aeabi_fsub+0x26c>
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4460      	add	r0, ip
 8000bd6:	0143      	lsls	r3, r0, #5
 8000bd8:	d57a      	bpl.n	8000cd0 <__aeabi_fsub+0x1c4>
 8000bda:	3501      	adds	r5, #1
 8000bdc:	2dff      	cmp	r5, #255	; 0xff
 8000bde:	d06b      	beq.n	8000cb8 <__aeabi_fsub+0x1ac>
 8000be0:	2301      	movs	r3, #1
 8000be2:	4a9d      	ldr	r2, [pc, #628]	; (8000e58 <__aeabi_fsub+0x34c>)
 8000be4:	4003      	ands	r3, r0
 8000be6:	0840      	lsrs	r0, r0, #1
 8000be8:	4010      	ands	r0, r2
 8000bea:	4318      	orrs	r0, r3
 8000bec:	e7c8      	b.n	8000b80 <__aeabi_fsub+0x74>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d020      	beq.n	8000c34 <__aeabi_fsub+0x128>
 8000bf2:	428c      	cmp	r4, r1
 8000bf4:	d023      	beq.n	8000c3e <__aeabi_fsub+0x132>
 8000bf6:	0028      	movs	r0, r5
 8000bf8:	38ff      	subs	r0, #255	; 0xff
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	d039      	beq.n	8000c72 <__aeabi_fsub+0x166>
 8000bfe:	1b57      	subs	r7, r2, r5
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d000      	beq.n	8000c06 <__aeabi_fsub+0xfa>
 8000c04:	e09d      	b.n	8000d42 <__aeabi_fsub+0x236>
 8000c06:	4663      	mov	r3, ip
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_fsub+0x102>
 8000c0c:	e0db      	b.n	8000dc6 <__aeabi_fsub+0x2ba>
 8000c0e:	1e7b      	subs	r3, r7, #1
 8000c10:	2f01      	cmp	r7, #1
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x10a>
 8000c14:	e10d      	b.n	8000e32 <__aeabi_fsub+0x326>
 8000c16:	2fff      	cmp	r7, #255	; 0xff
 8000c18:	d071      	beq.n	8000cfe <__aeabi_fsub+0x1f2>
 8000c1a:	001f      	movs	r7, r3
 8000c1c:	e098      	b.n	8000d50 <__aeabi_fsub+0x244>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fsub+0x118>
 8000c22:	e0a7      	b.n	8000d74 <__aeabi_fsub+0x268>
 8000c24:	1e42      	subs	r2, r0, #1
 8000c26:	2801      	cmp	r0, #1
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fsub+0x120>
 8000c2a:	e0e6      	b.n	8000dfa <__aeabi_fsub+0x2ee>
 8000c2c:	28ff      	cmp	r0, #255	; 0xff
 8000c2e:	d068      	beq.n	8000d02 <__aeabi_fsub+0x1f6>
 8000c30:	0010      	movs	r0, r2
 8000c32:	e78f      	b.n	8000b54 <__aeabi_fsub+0x48>
 8000c34:	2001      	movs	r0, #1
 8000c36:	4041      	eors	r1, r0
 8000c38:	42a1      	cmp	r1, r4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x132>
 8000c3c:	e77f      	b.n	8000b3e <__aeabi_fsub+0x32>
 8000c3e:	20ff      	movs	r0, #255	; 0xff
 8000c40:	4240      	negs	r0, r0
 8000c42:	4680      	mov	r8, r0
 8000c44:	44a8      	add	r8, r5
 8000c46:	4640      	mov	r0, r8
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	d038      	beq.n	8000cbe <__aeabi_fsub+0x1b2>
 8000c4c:	1b51      	subs	r1, r2, r5
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d100      	bne.n	8000c54 <__aeabi_fsub+0x148>
 8000c52:	e0ae      	b.n	8000db2 <__aeabi_fsub+0x2a6>
 8000c54:	2aff      	cmp	r2, #255	; 0xff
 8000c56:	d100      	bne.n	8000c5a <__aeabi_fsub+0x14e>
 8000c58:	e0df      	b.n	8000e1a <__aeabi_fsub+0x30e>
 8000c5a:	2380      	movs	r3, #128	; 0x80
 8000c5c:	4660      	mov	r0, ip
 8000c5e:	04db      	lsls	r3, r3, #19
 8000c60:	4318      	orrs	r0, r3
 8000c62:	4684      	mov	ip, r0
 8000c64:	291b      	cmp	r1, #27
 8000c66:	dc00      	bgt.n	8000c6a <__aeabi_fsub+0x15e>
 8000c68:	e0d9      	b.n	8000e1e <__aeabi_fsub+0x312>
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	0015      	movs	r5, r2
 8000c6e:	1980      	adds	r0, r0, r6
 8000c70:	e7b1      	b.n	8000bd6 <__aeabi_fsub+0xca>
 8000c72:	20fe      	movs	r0, #254	; 0xfe
 8000c74:	1c6a      	adds	r2, r5, #1
 8000c76:	4210      	tst	r0, r2
 8000c78:	d171      	bne.n	8000d5e <__aeabi_fsub+0x252>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d000      	beq.n	8000c80 <__aeabi_fsub+0x174>
 8000c7e:	e0a6      	b.n	8000dce <__aeabi_fsub+0x2c2>
 8000c80:	4663      	mov	r3, ip
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d100      	bne.n	8000c88 <__aeabi_fsub+0x17c>
 8000c86:	e0d9      	b.n	8000e3c <__aeabi_fsub+0x330>
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_fsub+0x184>
 8000c8e:	e788      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000c90:	1b98      	subs	r0, r3, r6
 8000c92:	0143      	lsls	r3, r0, #5
 8000c94:	d400      	bmi.n	8000c98 <__aeabi_fsub+0x18c>
 8000c96:	e0e1      	b.n	8000e5c <__aeabi_fsub+0x350>
 8000c98:	4663      	mov	r3, ip
 8000c9a:	000c      	movs	r4, r1
 8000c9c:	1af0      	subs	r0, r6, r3
 8000c9e:	e76f      	b.n	8000b80 <__aeabi_fsub+0x74>
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_fsub+0x19a>
 8000ca4:	e0b7      	b.n	8000e16 <__aeabi_fsub+0x30a>
 8000ca6:	0002      	movs	r2, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	2801      	cmp	r0, #1
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fsub+0x1a4>
 8000cae:	e09c      	b.n	8000dea <__aeabi_fsub+0x2de>
 8000cb0:	28ff      	cmp	r0, #255	; 0xff
 8000cb2:	d026      	beq.n	8000d02 <__aeabi_fsub+0x1f6>
 8000cb4:	4690      	mov	r8, r2
 8000cb6:	e788      	b.n	8000bca <__aeabi_fsub+0xbe>
 8000cb8:	22ff      	movs	r2, #255	; 0xff
 8000cba:	2700      	movs	r7, #0
 8000cbc:	e771      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000cbe:	20fe      	movs	r0, #254	; 0xfe
 8000cc0:	1c6a      	adds	r2, r5, #1
 8000cc2:	4210      	tst	r0, r2
 8000cc4:	d064      	beq.n	8000d90 <__aeabi_fsub+0x284>
 8000cc6:	2aff      	cmp	r2, #255	; 0xff
 8000cc8:	d0f6      	beq.n	8000cb8 <__aeabi_fsub+0x1ac>
 8000cca:	0015      	movs	r5, r2
 8000ccc:	4466      	add	r6, ip
 8000cce:	0870      	lsrs	r0, r6, #1
 8000cd0:	0743      	lsls	r3, r0, #29
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_fsub+0x1ca>
 8000cd4:	e756      	b.n	8000b84 <__aeabi_fsub+0x78>
 8000cd6:	08c3      	lsrs	r3, r0, #3
 8000cd8:	2dff      	cmp	r5, #255	; 0xff
 8000cda:	d012      	beq.n	8000d02 <__aeabi_fsub+0x1f6>
 8000cdc:	025b      	lsls	r3, r3, #9
 8000cde:	0a5f      	lsrs	r7, r3, #9
 8000ce0:	b2ea      	uxtb	r2, r5
 8000ce2:	e75e      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000ce4:	4662      	mov	r2, ip
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fsub+0x1e0>
 8000cea:	e096      	b.n	8000e1a <__aeabi_fsub+0x30e>
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d008      	beq.n	8000d02 <__aeabi_fsub+0x1f6>
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	03d2      	lsls	r2, r2, #15
 8000cf4:	4213      	tst	r3, r2
 8000cf6:	d004      	beq.n	8000d02 <__aeabi_fsub+0x1f6>
 8000cf8:	4648      	mov	r0, r9
 8000cfa:	4210      	tst	r0, r2
 8000cfc:	d101      	bne.n	8000d02 <__aeabi_fsub+0x1f6>
 8000cfe:	000c      	movs	r4, r1
 8000d00:	464b      	mov	r3, r9
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0d8      	beq.n	8000cb8 <__aeabi_fsub+0x1ac>
 8000d06:	2780      	movs	r7, #128	; 0x80
 8000d08:	03ff      	lsls	r7, r7, #15
 8000d0a:	431f      	orrs	r7, r3
 8000d0c:	027f      	lsls	r7, r7, #9
 8000d0e:	22ff      	movs	r2, #255	; 0xff
 8000d10:	0a7f      	lsrs	r7, r7, #9
 8000d12:	e746      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000d14:	2320      	movs	r3, #32
 8000d16:	003a      	movs	r2, r7
 8000d18:	1b45      	subs	r5, r0, r5
 8000d1a:	0038      	movs	r0, r7
 8000d1c:	3501      	adds	r5, #1
 8000d1e:	40ea      	lsrs	r2, r5
 8000d20:	1b5d      	subs	r5, r3, r5
 8000d22:	40a8      	lsls	r0, r5
 8000d24:	1e43      	subs	r3, r0, #1
 8000d26:	4198      	sbcs	r0, r3
 8000d28:	2500      	movs	r5, #0
 8000d2a:	4310      	orrs	r0, r2
 8000d2c:	e728      	b.n	8000b80 <__aeabi_fsub+0x74>
 8000d2e:	2320      	movs	r3, #32
 8000d30:	1a1b      	subs	r3, r3, r0
 8000d32:	0032      	movs	r2, r6
 8000d34:	409e      	lsls	r6, r3
 8000d36:	40c2      	lsrs	r2, r0
 8000d38:	0030      	movs	r0, r6
 8000d3a:	1e43      	subs	r3, r0, #1
 8000d3c:	4198      	sbcs	r0, r3
 8000d3e:	4310      	orrs	r0, r2
 8000d40:	e70c      	b.n	8000b5c <__aeabi_fsub+0x50>
 8000d42:	2aff      	cmp	r2, #255	; 0xff
 8000d44:	d0db      	beq.n	8000cfe <__aeabi_fsub+0x1f2>
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	4660      	mov	r0, ip
 8000d4a:	04db      	lsls	r3, r3, #19
 8000d4c:	4318      	orrs	r0, r3
 8000d4e:	4684      	mov	ip, r0
 8000d50:	2f1b      	cmp	r7, #27
 8000d52:	dd56      	ble.n	8000e02 <__aeabi_fsub+0x2f6>
 8000d54:	2001      	movs	r0, #1
 8000d56:	000c      	movs	r4, r1
 8000d58:	0015      	movs	r5, r2
 8000d5a:	1a30      	subs	r0, r6, r0
 8000d5c:	e700      	b.n	8000b60 <__aeabi_fsub+0x54>
 8000d5e:	4663      	mov	r3, ip
 8000d60:	1b9f      	subs	r7, r3, r6
 8000d62:	017b      	lsls	r3, r7, #5
 8000d64:	d43d      	bmi.n	8000de2 <__aeabi_fsub+0x2d6>
 8000d66:	2f00      	cmp	r7, #0
 8000d68:	d000      	beq.n	8000d6c <__aeabi_fsub+0x260>
 8000d6a:	e6fe      	b.n	8000b6a <__aeabi_fsub+0x5e>
 8000d6c:	2400      	movs	r4, #0
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2700      	movs	r7, #0
 8000d72:	e716      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000d74:	0005      	movs	r5, r0
 8000d76:	e7af      	b.n	8000cd8 <__aeabi_fsub+0x1cc>
 8000d78:	0032      	movs	r2, r6
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	40da      	lsrs	r2, r3
 8000d80:	2320      	movs	r3, #32
 8000d82:	1a5b      	subs	r3, r3, r1
 8000d84:	409e      	lsls	r6, r3
 8000d86:	0030      	movs	r0, r6
 8000d88:	1e43      	subs	r3, r0, #1
 8000d8a:	4198      	sbcs	r0, r3
 8000d8c:	4310      	orrs	r0, r2
 8000d8e:	e721      	b.n	8000bd4 <__aeabi_fsub+0xc8>
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d1a7      	bne.n	8000ce4 <__aeabi_fsub+0x1d8>
 8000d94:	4663      	mov	r3, ip
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d059      	beq.n	8000e4e <__aeabi_fsub+0x342>
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_fsub+0x296>
 8000da0:	e6ff      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000da2:	0030      	movs	r0, r6
 8000da4:	4460      	add	r0, ip
 8000da6:	0143      	lsls	r3, r0, #5
 8000da8:	d592      	bpl.n	8000cd0 <__aeabi_fsub+0x1c4>
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <__aeabi_fsub+0x348>)
 8000dac:	3501      	adds	r5, #1
 8000dae:	4018      	ands	r0, r3
 8000db0:	e78e      	b.n	8000cd0 <__aeabi_fsub+0x1c4>
 8000db2:	4663      	mov	r3, ip
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d047      	beq.n	8000e48 <__aeabi_fsub+0x33c>
 8000db8:	1e4b      	subs	r3, r1, #1
 8000dba:	2901      	cmp	r1, #1
 8000dbc:	d015      	beq.n	8000dea <__aeabi_fsub+0x2de>
 8000dbe:	29ff      	cmp	r1, #255	; 0xff
 8000dc0:	d02b      	beq.n	8000e1a <__aeabi_fsub+0x30e>
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	e74e      	b.n	8000c64 <__aeabi_fsub+0x158>
 8000dc6:	000c      	movs	r4, r1
 8000dc8:	464b      	mov	r3, r9
 8000dca:	003d      	movs	r5, r7
 8000dcc:	e784      	b.n	8000cd8 <__aeabi_fsub+0x1cc>
 8000dce:	4662      	mov	r2, ip
 8000dd0:	2a00      	cmp	r2, #0
 8000dd2:	d18b      	bne.n	8000cec <__aeabi_fsub+0x1e0>
 8000dd4:	2e00      	cmp	r6, #0
 8000dd6:	d192      	bne.n	8000cfe <__aeabi_fsub+0x1f2>
 8000dd8:	2780      	movs	r7, #128	; 0x80
 8000dda:	2400      	movs	r4, #0
 8000ddc:	22ff      	movs	r2, #255	; 0xff
 8000dde:	03ff      	lsls	r7, r7, #15
 8000de0:	e6df      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000de2:	4663      	mov	r3, ip
 8000de4:	000c      	movs	r4, r1
 8000de6:	1af7      	subs	r7, r6, r3
 8000de8:	e6bf      	b.n	8000b6a <__aeabi_fsub+0x5e>
 8000dea:	0030      	movs	r0, r6
 8000dec:	4460      	add	r0, ip
 8000dee:	2501      	movs	r5, #1
 8000df0:	0143      	lsls	r3, r0, #5
 8000df2:	d400      	bmi.n	8000df6 <__aeabi_fsub+0x2ea>
 8000df4:	e76c      	b.n	8000cd0 <__aeabi_fsub+0x1c4>
 8000df6:	2502      	movs	r5, #2
 8000df8:	e6f2      	b.n	8000be0 <__aeabi_fsub+0xd4>
 8000dfa:	4663      	mov	r3, ip
 8000dfc:	2501      	movs	r5, #1
 8000dfe:	1b98      	subs	r0, r3, r6
 8000e00:	e6ae      	b.n	8000b60 <__aeabi_fsub+0x54>
 8000e02:	2320      	movs	r3, #32
 8000e04:	4664      	mov	r4, ip
 8000e06:	4660      	mov	r0, ip
 8000e08:	40fc      	lsrs	r4, r7
 8000e0a:	1bdf      	subs	r7, r3, r7
 8000e0c:	40b8      	lsls	r0, r7
 8000e0e:	1e43      	subs	r3, r0, #1
 8000e10:	4198      	sbcs	r0, r3
 8000e12:	4320      	orrs	r0, r4
 8000e14:	e79f      	b.n	8000d56 <__aeabi_fsub+0x24a>
 8000e16:	0005      	movs	r5, r0
 8000e18:	e75e      	b.n	8000cd8 <__aeabi_fsub+0x1cc>
 8000e1a:	464b      	mov	r3, r9
 8000e1c:	e771      	b.n	8000d02 <__aeabi_fsub+0x1f6>
 8000e1e:	2320      	movs	r3, #32
 8000e20:	4665      	mov	r5, ip
 8000e22:	4660      	mov	r0, ip
 8000e24:	40cd      	lsrs	r5, r1
 8000e26:	1a59      	subs	r1, r3, r1
 8000e28:	4088      	lsls	r0, r1
 8000e2a:	1e43      	subs	r3, r0, #1
 8000e2c:	4198      	sbcs	r0, r3
 8000e2e:	4328      	orrs	r0, r5
 8000e30:	e71c      	b.n	8000c6c <__aeabi_fsub+0x160>
 8000e32:	4663      	mov	r3, ip
 8000e34:	000c      	movs	r4, r1
 8000e36:	2501      	movs	r5, #1
 8000e38:	1af0      	subs	r0, r6, r3
 8000e3a:	e691      	b.n	8000b60 <__aeabi_fsub+0x54>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d095      	beq.n	8000d6c <__aeabi_fsub+0x260>
 8000e40:	000c      	movs	r4, r1
 8000e42:	464f      	mov	r7, r9
 8000e44:	2200      	movs	r2, #0
 8000e46:	e6ac      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000e48:	464b      	mov	r3, r9
 8000e4a:	000d      	movs	r5, r1
 8000e4c:	e744      	b.n	8000cd8 <__aeabi_fsub+0x1cc>
 8000e4e:	464f      	mov	r7, r9
 8000e50:	2200      	movs	r2, #0
 8000e52:	e6a6      	b.n	8000ba2 <__aeabi_fsub+0x96>
 8000e54:	fbffffff 	.word	0xfbffffff
 8000e58:	7dffffff 	.word	0x7dffffff
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	d000      	beq.n	8000e62 <__aeabi_fsub+0x356>
 8000e60:	e736      	b.n	8000cd0 <__aeabi_fsub+0x1c4>
 8000e62:	2400      	movs	r4, #0
 8000e64:	2700      	movs	r7, #0
 8000e66:	e69c      	b.n	8000ba2 <__aeabi_fsub+0x96>

08000e68 <__aeabi_f2iz>:
 8000e68:	0241      	lsls	r1, r0, #9
 8000e6a:	0042      	lsls	r2, r0, #1
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0a49      	lsrs	r1, r1, #9
 8000e70:	2000      	movs	r0, #0
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	2a7e      	cmp	r2, #126	; 0x7e
 8000e76:	dd03      	ble.n	8000e80 <__aeabi_f2iz+0x18>
 8000e78:	2a9d      	cmp	r2, #157	; 0x9d
 8000e7a:	dd02      	ble.n	8000e82 <__aeabi_f2iz+0x1a>
 8000e7c:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <__aeabi_f2iz+0x3c>)
 8000e7e:	1898      	adds	r0, r3, r2
 8000e80:	4770      	bx	lr
 8000e82:	2080      	movs	r0, #128	; 0x80
 8000e84:	0400      	lsls	r0, r0, #16
 8000e86:	4301      	orrs	r1, r0
 8000e88:	2a95      	cmp	r2, #149	; 0x95
 8000e8a:	dc07      	bgt.n	8000e9c <__aeabi_f2iz+0x34>
 8000e8c:	2096      	movs	r0, #150	; 0x96
 8000e8e:	1a82      	subs	r2, r0, r2
 8000e90:	40d1      	lsrs	r1, r2
 8000e92:	4248      	negs	r0, r1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1f3      	bne.n	8000e80 <__aeabi_f2iz+0x18>
 8000e98:	0008      	movs	r0, r1
 8000e9a:	e7f1      	b.n	8000e80 <__aeabi_f2iz+0x18>
 8000e9c:	3a96      	subs	r2, #150	; 0x96
 8000e9e:	4091      	lsls	r1, r2
 8000ea0:	e7f7      	b.n	8000e92 <__aeabi_f2iz+0x2a>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	7fffffff 	.word	0x7fffffff

08000ea8 <__aeabi_ui2f>:
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	1e05      	subs	r5, r0, #0
 8000eac:	d00e      	beq.n	8000ecc <__aeabi_ui2f+0x24>
 8000eae:	f000 f877 	bl	8000fa0 <__clzsi2>
 8000eb2:	239e      	movs	r3, #158	; 0x9e
 8000eb4:	0004      	movs	r4, r0
 8000eb6:	1a1b      	subs	r3, r3, r0
 8000eb8:	2b96      	cmp	r3, #150	; 0x96
 8000eba:	dc0c      	bgt.n	8000ed6 <__aeabi_ui2f+0x2e>
 8000ebc:	2808      	cmp	r0, #8
 8000ebe:	dd01      	ble.n	8000ec4 <__aeabi_ui2f+0x1c>
 8000ec0:	3c08      	subs	r4, #8
 8000ec2:	40a5      	lsls	r5, r4
 8000ec4:	026d      	lsls	r5, r5, #9
 8000ec6:	0a6d      	lsrs	r5, r5, #9
 8000ec8:	b2d8      	uxtb	r0, r3
 8000eca:	e001      	b.n	8000ed0 <__aeabi_ui2f+0x28>
 8000ecc:	2000      	movs	r0, #0
 8000ece:	2500      	movs	r5, #0
 8000ed0:	05c0      	lsls	r0, r0, #23
 8000ed2:	4328      	orrs	r0, r5
 8000ed4:	bd70      	pop	{r4, r5, r6, pc}
 8000ed6:	2b99      	cmp	r3, #153	; 0x99
 8000ed8:	dd09      	ble.n	8000eee <__aeabi_ui2f+0x46>
 8000eda:	0002      	movs	r2, r0
 8000edc:	0029      	movs	r1, r5
 8000ede:	321b      	adds	r2, #27
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	1e4a      	subs	r2, r1, #1
 8000ee4:	4191      	sbcs	r1, r2
 8000ee6:	2205      	movs	r2, #5
 8000ee8:	1a12      	subs	r2, r2, r0
 8000eea:	40d5      	lsrs	r5, r2
 8000eec:	430d      	orrs	r5, r1
 8000eee:	2c05      	cmp	r4, #5
 8000ef0:	dc12      	bgt.n	8000f18 <__aeabi_ui2f+0x70>
 8000ef2:	0029      	movs	r1, r5
 8000ef4:	4e0c      	ldr	r6, [pc, #48]	; (8000f28 <__aeabi_ui2f+0x80>)
 8000ef6:	4031      	ands	r1, r6
 8000ef8:	076a      	lsls	r2, r5, #29
 8000efa:	d009      	beq.n	8000f10 <__aeabi_ui2f+0x68>
 8000efc:	200f      	movs	r0, #15
 8000efe:	4028      	ands	r0, r5
 8000f00:	2804      	cmp	r0, #4
 8000f02:	d005      	beq.n	8000f10 <__aeabi_ui2f+0x68>
 8000f04:	3104      	adds	r1, #4
 8000f06:	014a      	lsls	r2, r1, #5
 8000f08:	d502      	bpl.n	8000f10 <__aeabi_ui2f+0x68>
 8000f0a:	239f      	movs	r3, #159	; 0x9f
 8000f0c:	4031      	ands	r1, r6
 8000f0e:	1b1b      	subs	r3, r3, r4
 8000f10:	0189      	lsls	r1, r1, #6
 8000f12:	0a4d      	lsrs	r5, r1, #9
 8000f14:	b2d8      	uxtb	r0, r3
 8000f16:	e7db      	b.n	8000ed0 <__aeabi_ui2f+0x28>
 8000f18:	1f62      	subs	r2, r4, #5
 8000f1a:	4095      	lsls	r5, r2
 8000f1c:	0029      	movs	r1, r5
 8000f1e:	4e02      	ldr	r6, [pc, #8]	; (8000f28 <__aeabi_ui2f+0x80>)
 8000f20:	4031      	ands	r1, r6
 8000f22:	076a      	lsls	r2, r5, #29
 8000f24:	d0f4      	beq.n	8000f10 <__aeabi_ui2f+0x68>
 8000f26:	e7e9      	b.n	8000efc <__aeabi_ui2f+0x54>
 8000f28:	fbffffff 	.word	0xfbffffff

08000f2c <__aeabi_cfrcmple>:
 8000f2c:	4684      	mov	ip, r0
 8000f2e:	0008      	movs	r0, r1
 8000f30:	4661      	mov	r1, ip
 8000f32:	e7ff      	b.n	8000f34 <__aeabi_cfcmpeq>

08000f34 <__aeabi_cfcmpeq>:
 8000f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f36:	f000 f8c9 	bl	80010cc <__lesf2>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d401      	bmi.n	8000f42 <__aeabi_cfcmpeq+0xe>
 8000f3e:	2100      	movs	r1, #0
 8000f40:	42c8      	cmn	r0, r1
 8000f42:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f44 <__aeabi_fcmpeq>:
 8000f44:	b510      	push	{r4, lr}
 8000f46:	f000 f855 	bl	8000ff4 <__eqsf2>
 8000f4a:	4240      	negs	r0, r0
 8000f4c:	3001      	adds	r0, #1
 8000f4e:	bd10      	pop	{r4, pc}

08000f50 <__aeabi_fcmplt>:
 8000f50:	b510      	push	{r4, lr}
 8000f52:	f000 f8bb 	bl	80010cc <__lesf2>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	db01      	blt.n	8000f5e <__aeabi_fcmplt+0xe>
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	bd10      	pop	{r4, pc}
 8000f5e:	2001      	movs	r0, #1
 8000f60:	bd10      	pop	{r4, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)

08000f64 <__aeabi_fcmple>:
 8000f64:	b510      	push	{r4, lr}
 8000f66:	f000 f8b1 	bl	80010cc <__lesf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	dd01      	ble.n	8000f72 <__aeabi_fcmple+0xe>
 8000f6e:	2000      	movs	r0, #0
 8000f70:	bd10      	pop	{r4, pc}
 8000f72:	2001      	movs	r0, #1
 8000f74:	bd10      	pop	{r4, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)

08000f78 <__aeabi_fcmpgt>:
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	f000 f861 	bl	8001040 <__gesf2>
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	dc01      	bgt.n	8000f86 <__aeabi_fcmpgt+0xe>
 8000f82:	2000      	movs	r0, #0
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	2001      	movs	r0, #1
 8000f88:	bd10      	pop	{r4, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)

08000f8c <__aeabi_fcmpge>:
 8000f8c:	b510      	push	{r4, lr}
 8000f8e:	f000 f857 	bl	8001040 <__gesf2>
 8000f92:	2800      	cmp	r0, #0
 8000f94:	da01      	bge.n	8000f9a <__aeabi_fcmpge+0xe>
 8000f96:	2000      	movs	r0, #0
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	bd10      	pop	{r4, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)

08000fa0 <__clzsi2>:
 8000fa0:	211c      	movs	r1, #28
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	041b      	lsls	r3, r3, #16
 8000fa6:	4298      	cmp	r0, r3
 8000fa8:	d301      	bcc.n	8000fae <__clzsi2+0xe>
 8000faa:	0c00      	lsrs	r0, r0, #16
 8000fac:	3910      	subs	r1, #16
 8000fae:	0a1b      	lsrs	r3, r3, #8
 8000fb0:	4298      	cmp	r0, r3
 8000fb2:	d301      	bcc.n	8000fb8 <__clzsi2+0x18>
 8000fb4:	0a00      	lsrs	r0, r0, #8
 8000fb6:	3908      	subs	r1, #8
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	4298      	cmp	r0, r3
 8000fbc:	d301      	bcc.n	8000fc2 <__clzsi2+0x22>
 8000fbe:	0900      	lsrs	r0, r0, #4
 8000fc0:	3904      	subs	r1, #4
 8000fc2:	a202      	add	r2, pc, #8	; (adr r2, 8000fcc <__clzsi2+0x2c>)
 8000fc4:	5c10      	ldrb	r0, [r2, r0]
 8000fc6:	1840      	adds	r0, r0, r1
 8000fc8:	4770      	bx	lr
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	02020304 	.word	0x02020304
 8000fd0:	01010101 	.word	0x01010101
	...

08000fdc <__clzdi2>:
 8000fdc:	b510      	push	{r4, lr}
 8000fde:	2900      	cmp	r1, #0
 8000fe0:	d103      	bne.n	8000fea <__clzdi2+0xe>
 8000fe2:	f7ff ffdd 	bl	8000fa0 <__clzsi2>
 8000fe6:	3020      	adds	r0, #32
 8000fe8:	e002      	b.n	8000ff0 <__clzdi2+0x14>
 8000fea:	0008      	movs	r0, r1
 8000fec:	f7ff ffd8 	bl	8000fa0 <__clzsi2>
 8000ff0:	bd10      	pop	{r4, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)

08000ff4 <__eqsf2>:
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	0042      	lsls	r2, r0, #1
 8000ff8:	0245      	lsls	r5, r0, #9
 8000ffa:	024e      	lsls	r6, r1, #9
 8000ffc:	004c      	lsls	r4, r1, #1
 8000ffe:	0fc3      	lsrs	r3, r0, #31
 8001000:	0a6d      	lsrs	r5, r5, #9
 8001002:	2001      	movs	r0, #1
 8001004:	0e12      	lsrs	r2, r2, #24
 8001006:	0a76      	lsrs	r6, r6, #9
 8001008:	0e24      	lsrs	r4, r4, #24
 800100a:	0fc9      	lsrs	r1, r1, #31
 800100c:	2aff      	cmp	r2, #255	; 0xff
 800100e:	d006      	beq.n	800101e <__eqsf2+0x2a>
 8001010:	2cff      	cmp	r4, #255	; 0xff
 8001012:	d003      	beq.n	800101c <__eqsf2+0x28>
 8001014:	42a2      	cmp	r2, r4
 8001016:	d101      	bne.n	800101c <__eqsf2+0x28>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d006      	beq.n	800102a <__eqsf2+0x36>
 800101c:	bd70      	pop	{r4, r5, r6, pc}
 800101e:	2d00      	cmp	r5, #0
 8001020:	d1fc      	bne.n	800101c <__eqsf2+0x28>
 8001022:	2cff      	cmp	r4, #255	; 0xff
 8001024:	d1fa      	bne.n	800101c <__eqsf2+0x28>
 8001026:	2e00      	cmp	r6, #0
 8001028:	d1f8      	bne.n	800101c <__eqsf2+0x28>
 800102a:	428b      	cmp	r3, r1
 800102c:	d006      	beq.n	800103c <__eqsf2+0x48>
 800102e:	2001      	movs	r0, #1
 8001030:	2a00      	cmp	r2, #0
 8001032:	d1f3      	bne.n	800101c <__eqsf2+0x28>
 8001034:	0028      	movs	r0, r5
 8001036:	1e43      	subs	r3, r0, #1
 8001038:	4198      	sbcs	r0, r3
 800103a:	e7ef      	b.n	800101c <__eqsf2+0x28>
 800103c:	2000      	movs	r0, #0
 800103e:	e7ed      	b.n	800101c <__eqsf2+0x28>

08001040 <__gesf2>:
 8001040:	b570      	push	{r4, r5, r6, lr}
 8001042:	0042      	lsls	r2, r0, #1
 8001044:	0245      	lsls	r5, r0, #9
 8001046:	024e      	lsls	r6, r1, #9
 8001048:	004c      	lsls	r4, r1, #1
 800104a:	0fc3      	lsrs	r3, r0, #31
 800104c:	0a6d      	lsrs	r5, r5, #9
 800104e:	0e12      	lsrs	r2, r2, #24
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc8      	lsrs	r0, r1, #31
 8001056:	2aff      	cmp	r2, #255	; 0xff
 8001058:	d01b      	beq.n	8001092 <__gesf2+0x52>
 800105a:	2cff      	cmp	r4, #255	; 0xff
 800105c:	d00e      	beq.n	800107c <__gesf2+0x3c>
 800105e:	2a00      	cmp	r2, #0
 8001060:	d11b      	bne.n	800109a <__gesf2+0x5a>
 8001062:	2c00      	cmp	r4, #0
 8001064:	d101      	bne.n	800106a <__gesf2+0x2a>
 8001066:	2e00      	cmp	r6, #0
 8001068:	d01c      	beq.n	80010a4 <__gesf2+0x64>
 800106a:	2d00      	cmp	r5, #0
 800106c:	d00c      	beq.n	8001088 <__gesf2+0x48>
 800106e:	4283      	cmp	r3, r0
 8001070:	d01c      	beq.n	80010ac <__gesf2+0x6c>
 8001072:	2102      	movs	r1, #2
 8001074:	1e58      	subs	r0, r3, #1
 8001076:	4008      	ands	r0, r1
 8001078:	3801      	subs	r0, #1
 800107a:	bd70      	pop	{r4, r5, r6, pc}
 800107c:	2e00      	cmp	r6, #0
 800107e:	d122      	bne.n	80010c6 <__gesf2+0x86>
 8001080:	2a00      	cmp	r2, #0
 8001082:	d1f4      	bne.n	800106e <__gesf2+0x2e>
 8001084:	2d00      	cmp	r5, #0
 8001086:	d1f2      	bne.n	800106e <__gesf2+0x2e>
 8001088:	2800      	cmp	r0, #0
 800108a:	d1f6      	bne.n	800107a <__gesf2+0x3a>
 800108c:	2001      	movs	r0, #1
 800108e:	4240      	negs	r0, r0
 8001090:	e7f3      	b.n	800107a <__gesf2+0x3a>
 8001092:	2d00      	cmp	r5, #0
 8001094:	d117      	bne.n	80010c6 <__gesf2+0x86>
 8001096:	2cff      	cmp	r4, #255	; 0xff
 8001098:	d0f0      	beq.n	800107c <__gesf2+0x3c>
 800109a:	2c00      	cmp	r4, #0
 800109c:	d1e7      	bne.n	800106e <__gesf2+0x2e>
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d1e5      	bne.n	800106e <__gesf2+0x2e>
 80010a2:	e7e6      	b.n	8001072 <__gesf2+0x32>
 80010a4:	2000      	movs	r0, #0
 80010a6:	2d00      	cmp	r5, #0
 80010a8:	d0e7      	beq.n	800107a <__gesf2+0x3a>
 80010aa:	e7e2      	b.n	8001072 <__gesf2+0x32>
 80010ac:	42a2      	cmp	r2, r4
 80010ae:	dc05      	bgt.n	80010bc <__gesf2+0x7c>
 80010b0:	dbea      	blt.n	8001088 <__gesf2+0x48>
 80010b2:	42b5      	cmp	r5, r6
 80010b4:	d802      	bhi.n	80010bc <__gesf2+0x7c>
 80010b6:	d3e7      	bcc.n	8001088 <__gesf2+0x48>
 80010b8:	2000      	movs	r0, #0
 80010ba:	e7de      	b.n	800107a <__gesf2+0x3a>
 80010bc:	4243      	negs	r3, r0
 80010be:	4158      	adcs	r0, r3
 80010c0:	0040      	lsls	r0, r0, #1
 80010c2:	3801      	subs	r0, #1
 80010c4:	e7d9      	b.n	800107a <__gesf2+0x3a>
 80010c6:	2002      	movs	r0, #2
 80010c8:	4240      	negs	r0, r0
 80010ca:	e7d6      	b.n	800107a <__gesf2+0x3a>

080010cc <__lesf2>:
 80010cc:	b570      	push	{r4, r5, r6, lr}
 80010ce:	0042      	lsls	r2, r0, #1
 80010d0:	0245      	lsls	r5, r0, #9
 80010d2:	024e      	lsls	r6, r1, #9
 80010d4:	004c      	lsls	r4, r1, #1
 80010d6:	0fc3      	lsrs	r3, r0, #31
 80010d8:	0a6d      	lsrs	r5, r5, #9
 80010da:	0e12      	lsrs	r2, r2, #24
 80010dc:	0a76      	lsrs	r6, r6, #9
 80010de:	0e24      	lsrs	r4, r4, #24
 80010e0:	0fc8      	lsrs	r0, r1, #31
 80010e2:	2aff      	cmp	r2, #255	; 0xff
 80010e4:	d00b      	beq.n	80010fe <__lesf2+0x32>
 80010e6:	2cff      	cmp	r4, #255	; 0xff
 80010e8:	d00d      	beq.n	8001106 <__lesf2+0x3a>
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d11f      	bne.n	800112e <__lesf2+0x62>
 80010ee:	2c00      	cmp	r4, #0
 80010f0:	d116      	bne.n	8001120 <__lesf2+0x54>
 80010f2:	2e00      	cmp	r6, #0
 80010f4:	d114      	bne.n	8001120 <__lesf2+0x54>
 80010f6:	2000      	movs	r0, #0
 80010f8:	2d00      	cmp	r5, #0
 80010fa:	d010      	beq.n	800111e <__lesf2+0x52>
 80010fc:	e009      	b.n	8001112 <__lesf2+0x46>
 80010fe:	2d00      	cmp	r5, #0
 8001100:	d10c      	bne.n	800111c <__lesf2+0x50>
 8001102:	2cff      	cmp	r4, #255	; 0xff
 8001104:	d113      	bne.n	800112e <__lesf2+0x62>
 8001106:	2e00      	cmp	r6, #0
 8001108:	d108      	bne.n	800111c <__lesf2+0x50>
 800110a:	2a00      	cmp	r2, #0
 800110c:	d008      	beq.n	8001120 <__lesf2+0x54>
 800110e:	4283      	cmp	r3, r0
 8001110:	d012      	beq.n	8001138 <__lesf2+0x6c>
 8001112:	2102      	movs	r1, #2
 8001114:	1e58      	subs	r0, r3, #1
 8001116:	4008      	ands	r0, r1
 8001118:	3801      	subs	r0, #1
 800111a:	e000      	b.n	800111e <__lesf2+0x52>
 800111c:	2002      	movs	r0, #2
 800111e:	bd70      	pop	{r4, r5, r6, pc}
 8001120:	2d00      	cmp	r5, #0
 8001122:	d1f4      	bne.n	800110e <__lesf2+0x42>
 8001124:	2800      	cmp	r0, #0
 8001126:	d1fa      	bne.n	800111e <__lesf2+0x52>
 8001128:	2001      	movs	r0, #1
 800112a:	4240      	negs	r0, r0
 800112c:	e7f7      	b.n	800111e <__lesf2+0x52>
 800112e:	2c00      	cmp	r4, #0
 8001130:	d1ed      	bne.n	800110e <__lesf2+0x42>
 8001132:	2e00      	cmp	r6, #0
 8001134:	d1eb      	bne.n	800110e <__lesf2+0x42>
 8001136:	e7ec      	b.n	8001112 <__lesf2+0x46>
 8001138:	42a2      	cmp	r2, r4
 800113a:	dc05      	bgt.n	8001148 <__lesf2+0x7c>
 800113c:	dbf2      	blt.n	8001124 <__lesf2+0x58>
 800113e:	42b5      	cmp	r5, r6
 8001140:	d802      	bhi.n	8001148 <__lesf2+0x7c>
 8001142:	d3ef      	bcc.n	8001124 <__lesf2+0x58>
 8001144:	2000      	movs	r0, #0
 8001146:	e7ea      	b.n	800111e <__lesf2+0x52>
 8001148:	4243      	negs	r3, r0
 800114a:	4158      	adcs	r0, r3
 800114c:	0040      	lsls	r0, r0, #1
 800114e:	3801      	subs	r0, #1
 8001150:	e7e5      	b.n	800111e <__lesf2+0x52>
 8001152:	46c0      	nop			; (mov r8, r8)

08001154 <initDrv8830>:
#include "drv8830.h"

extern I2C_HandleTypeDef hi2c1;

uint8_t initDrv8830() {
 8001154:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t txData = 0x80;
 8001156:	2317      	movs	r3, #23
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	446b      	add	r3, sp
 800115c:	701a      	strb	r2, [r3, #0]
	// clear fault
	return HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &txData, 1, 5);
 800115e:	3a7b      	subs	r2, #123	; 0x7b
 8001160:	9202      	str	r2, [sp, #8]
 8001162:	3a04      	subs	r2, #4
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	21c0      	movs	r1, #192	; 0xc0
 8001168:	0013      	movs	r3, r2
 800116a:	9201      	str	r2, [sp, #4]
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <initDrv8830+0x24>)
 800116e:	f001 fc1f 	bl	80029b0 <HAL_I2C_Mem_Write>
}
 8001172:	b007      	add	sp, #28
 8001174:	bd00      	pop	{pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	20000134 	.word	0x20000134

0800117c <setMotor>:
// VSET[7:2] voltage 0x00~0x3F
// D1, D0 direction
uint8_t setMotor(int direction) {
	uint8_t txData;
	uint8_t	result;
	txData = 0x1f << 2 | direction;
 800117c:	2216      	movs	r2, #22
 800117e:	237c      	movs	r3, #124	; 0x7c
uint8_t setMotor(int direction) {
 8001180:	b570      	push	{r4, r5, r6, lr}
	int status;
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 8001182:	2401      	movs	r4, #1
 8001184:	2505      	movs	r5, #5
uint8_t setMotor(int direction) {
 8001186:	b086      	sub	sp, #24
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 8001188:	4e0d      	ldr	r6, [pc, #52]	; (80011c0 <setMotor+0x44>)
	txData = 0x1f << 2 | direction;
 800118a:	446a      	add	r2, sp
 800118c:	4303      	orrs	r3, r0
 800118e:	7013      	strb	r3, [r2, #0]
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 8001190:	21c0      	movs	r1, #192	; 0xc0
 8001192:	0023      	movs	r3, r4
 8001194:	9502      	str	r5, [sp, #8]
 8001196:	9200      	str	r2, [sp, #0]
 8001198:	0030      	movs	r0, r6
 800119a:	2200      	movs	r2, #0
 800119c:	9401      	str	r4, [sp, #4]
 800119e:	f001 fc07 	bl	80029b0 <HAL_I2C_Mem_Write>
	status = HAL_I2C_Mem_Read(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &result, 1, 5);
 80011a2:	9502      	str	r5, [sp, #8]
 80011a4:	3512      	adds	r5, #18
 80011a6:	446d      	add	r5, sp
 80011a8:	0023      	movs	r3, r4
 80011aa:	0022      	movs	r2, r4
 80011ac:	21c0      	movs	r1, #192	; 0xc0
 80011ae:	0030      	movs	r0, r6
 80011b0:	9401      	str	r4, [sp, #4]
 80011b2:	9500      	str	r5, [sp, #0]
 80011b4:	f001 fcda 	bl	8002b6c <HAL_I2C_Mem_Read>
	return result;
 80011b8:	7828      	ldrb	r0, [r5, #0]
}
 80011ba:	b006      	add	sp, #24
 80011bc:	bd70      	pop	{r4, r5, r6, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	20000134 	.word	0x20000134

080011c4 <initEns160>:
#include "ens160.h"

extern I2C_HandleTypeDef hi2c1;

void initEns160() {
 80011c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t txData = ENS160_OpMode_Run;
 80011c6:	2217      	movs	r2, #23
 80011c8:	2302      	movs	r3, #2
 80011ca:	446a      	add	r2, sp
 80011cc:	7013      	strb	r3, [r2, #0]
	int status = HAL_I2C_Mem_Write(&hi2c1, ENS160_DeviceAddress, ENS160_OpMode, 1, &txData, 1, 10);
 80011ce:	3308      	adds	r3, #8
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	3b09      	subs	r3, #9
 80011d4:	9200      	str	r2, [sp, #0]
 80011d6:	21a4      	movs	r1, #164	; 0xa4
 80011d8:	2210      	movs	r2, #16
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <initEns160+0x24>)
 80011de:	f001 fbe7 	bl	80029b0 <HAL_I2C_Mem_Write>
}
 80011e2:	b007      	add	sp, #28
 80011e4:	bd00      	pop	{pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	20000134 	.word	0x20000134

080011ec <getCO2>:
	txData[0]= writeValue;
	txData[1]= writeValue >> 8;
	int status = HAL_I2C_Mem_Write(&hi2c1, ENS160_DeviceAddress, ENS160_HumidityIn, 1, txData, 2, 10);
}

int	getCO2() {
 80011ec:	b530      	push	{r4, r5, lr}
	HAL_I2C_Init(&hi2c1);
 80011ee:	4d0a      	ldr	r5, [pc, #40]	; (8001218 <getCO2+0x2c>)
int	getCO2() {
 80011f0:	b087      	sub	sp, #28
	HAL_I2C_Init(&hi2c1);
 80011f2:	0028      	movs	r0, r5
 80011f4:	f001 fa62 	bl	80026bc <HAL_I2C_Init>
	uint8_t rxData[2];
	int status = HAL_I2C_Mem_Read(&hi2c1, ENS160_DeviceAddress, ENS160_DataECO2, 1, rxData, 2, 10);
 80011f8:	230a      	movs	r3, #10
 80011fa:	ac05      	add	r4, sp, #20
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	3b08      	subs	r3, #8
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	2224      	movs	r2, #36	; 0x24
 8001204:	21a4      	movs	r1, #164	; 0xa4
 8001206:	0028      	movs	r0, r5
 8001208:	9400      	str	r4, [sp, #0]
 800120a:	3b01      	subs	r3, #1
 800120c:	f001 fcae 	bl	8002b6c <HAL_I2C_Mem_Read>
	return rxData[1] << 8 | rxData[0];
 8001210:	8820      	ldrh	r0, [r4, #0]
}
 8001212:	b007      	add	sp, #28
 8001214:	bd30      	pop	{r4, r5, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	20000134 	.word	0x20000134

0800121c <BUZ.part.0>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void BUZ(uint8_t state){
 800121c:	b510      	push	{r4, lr}
	if(state) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800121e:	2100      	movs	r1, #0
 8001220:	4801      	ldr	r0, [pc, #4]	; (8001228 <BUZ.part.0+0xc>)
 8001222:	f002 fb4f 	bl	80038c4 <HAL_TIM_PWM_Start>
	else      HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
}
 8001226:	bd10      	pop	{r4, pc}
 8001228:	20000188 	.word	0x20000188

0800122c <BUZ>:
void BUZ(uint8_t state){
 800122c:	0001      	movs	r1, r0
 800122e:	b510      	push	{r4, lr}
	if(state) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001230:	2800      	cmp	r0, #0
 8001232:	d002      	beq.n	800123a <BUZ+0xe>
 8001234:	f7ff fff2 	bl	800121c <BUZ.part.0>
}
 8001238:	bd10      	pop	{r4, pc}
	else      HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800123a:	4802      	ldr	r0, [pc, #8]	; (8001244 <BUZ+0x18>)
 800123c:	f002 fb46 	bl	80038cc <HAL_TIM_PWM_Stop>
}
 8001240:	e7fa      	b.n	8001238 <BUZ+0xc>
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	20000188 	.word	0x20000188

08001248 <BUZ_hz_set>:

void BUZ_hz_set(uint16_t hz){
 8001248:	0001      	movs	r1, r0
 800124a:	b510      	push	{r4, lr}
	TIM2->ARR = 1000000 / hz - 1;
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <BUZ_hz_set+0x1c>)
 800124e:	f7ff f801 	bl	8000254 <__divsi3>
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	3801      	subs	r0, #1
 8001256:	05db      	lsls	r3, r3, #23
 8001258:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM2->CCR1 = TIM2->ARR / 2;
 800125a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800125c:	0852      	lsrs	r2, r2, #1
 800125e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001260:	bd10      	pop	{r4, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	000f4240 	.word	0x000f4240

08001268 <get_sensor>:

void* get_sensor(SENSOR_ADDR_Typedef data){
 8001268:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(data == sht41_temp || data == sht41_hum){
 800126a:	2801      	cmp	r0, #1
 800126c:	d80c      	bhi.n	8001288 <get_sensor+0x20>
		SHT41_t* buf = (SHT41_t*)malloc(sizeof(SHT41_t));
 800126e:	2008      	movs	r0, #8
 8001270:	f002 ff78 	bl	8004164 <malloc>
		*buf = getTempSht41();
 8001274:	466d      	mov	r5, sp
		SHT41_t* buf = (SHT41_t*)malloc(sizeof(SHT41_t));
 8001276:	0004      	movs	r4, r0
		*buf = getTempSht41();
 8001278:	0028      	movs	r0, r5
 800127a:	f000 fdb7 	bl	8001dec <getTempSht41>
 800127e:	0023      	movs	r3, r4
 8001280:	cd06      	ldmia	r5!, {r1, r2}
 8001282:	c306      	stmia	r3!, {r1, r2}
	else{
		uint16_t* buf = (uint16_t*)malloc(sizeof(uint16_t));
		*buf = getCO2();
		return buf;
	}
}
 8001284:	0020      	movs	r0, r4
 8001286:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		uint16_t* buf = (uint16_t*)malloc(sizeof(uint16_t));
 8001288:	2002      	movs	r0, #2
 800128a:	f002 ff6b 	bl	8004164 <malloc>
 800128e:	0004      	movs	r4, r0
		*buf = getCO2();
 8001290:	f7ff ffac 	bl	80011ec <getCO2>
 8001294:	8020      	strh	r0, [r4, #0]
		return buf;
 8001296:	e7f5      	b.n	8001284 <get_sensor+0x1c>

08001298 <free_reset>:

void free_reset(void** addr){
 8001298:	b510      	push	{r4, lr}
 800129a:	0004      	movs	r4, r0
	free(*addr);
 800129c:	6800      	ldr	r0, [r0, #0]
 800129e:	f002 ff6b 	bl	8004178 <free>
	*addr = NULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	6023      	str	r3, [r4, #0]
}
 80012a6:	bd10      	pop	{r4, pc}

080012a8 <nextion_inst_set>:

void nextion_inst_set(char* str){
 80012a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t end_cmd[3] = { 0xFF, 0xFF, 0xFF };
 80012aa:	2503      	movs	r5, #3
void nextion_inst_set(char* str){
 80012ac:	0004      	movs	r4, r0
	uint8_t end_cmd[3] = { 0xFF, 0xFF, 0xFF };
 80012ae:	002a      	movs	r2, r5
 80012b0:	490a      	ldr	r1, [pc, #40]	; (80012dc <nextion_inst_set+0x34>)
 80012b2:	a801      	add	r0, sp, #4
 80012b4:	f002 ff6a 	bl	800418c <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 80012b8:	0020      	movs	r0, r4
 80012ba:	f7fe ff25 	bl	8000108 <strlen>
 80012be:	4e08      	ldr	r6, [pc, #32]	; (80012e0 <nextion_inst_set+0x38>)
 80012c0:	0021      	movs	r1, r4
 80012c2:	b282      	uxth	r2, r0
 80012c4:	2364      	movs	r3, #100	; 0x64
 80012c6:	0030      	movs	r0, r6
 80012c8:	f002 fda5 	bl	8003e16 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, end_cmd, 3, 100);
 80012cc:	002a      	movs	r2, r5
 80012ce:	0030      	movs	r0, r6
 80012d0:	2364      	movs	r3, #100	; 0x64
 80012d2:	a901      	add	r1, sp, #4
 80012d4:	f002 fd9f 	bl	8003e16 <HAL_UART_Transmit>
}
 80012d8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	080057e8 	.word	0x080057e8
 80012e0:	200001c8 	.word	0x200001c8

080012e4 <get_touch>:

void get_touch(POS_Typedef* buf){
	HAL_StatusTypeDef res = HAL_OK;
	uint8_t rx_data[8] = { 0, };
 80012e4:	2300      	movs	r3, #0
void get_touch(POS_Typedef* buf){
 80012e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012e8:	0004      	movs	r4, r0

	nextion_inst_set("get tch0");
 80012ea:	481b      	ldr	r0, [pc, #108]	; (8001358 <get_touch+0x74>)
	uint8_t rx_data[8] = { 0, };
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	9301      	str	r3, [sp, #4]
	nextion_inst_set("get tch0");
 80012f0:	f7ff ffda 	bl	80012a8 <nextion_inst_set>
	res = HAL_UART_Receive(&huart1, rx_data, 8, 100);
 80012f4:	4d19      	ldr	r5, [pc, #100]	; (800135c <get_touch+0x78>)
 80012f6:	2364      	movs	r3, #100	; 0x64
 80012f8:	2208      	movs	r2, #8
 80012fa:	4669      	mov	r1, sp
 80012fc:	0028      	movs	r0, r5
 80012fe:	f002 fdf1 	bl	8003ee4 <HAL_UART_Receive>
	if(res == HAL_OK) { if(rx_data[0] == 0x71) { buf->x = rx_data[2] << 8 | rx_data[1]; } }
 8001302:	2800      	cmp	r0, #0
 8001304:	d109      	bne.n	800131a <get_touch+0x36>
 8001306:	466b      	mov	r3, sp
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b71      	cmp	r3, #113	; 0x71
 800130c:	d105      	bne.n	800131a <get_touch+0x36>
 800130e:	466b      	mov	r3, sp
 8001310:	7859      	ldrb	r1, [r3, #1]
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	430b      	orrs	r3, r1
 8001318:	8023      	strh	r3, [r4, #0]

	nextion_inst_set("get tch1");
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <get_touch+0x7c>)
 800131c:	f7ff ffc4 	bl	80012a8 <nextion_inst_set>
	res = HAL_UART_Receive(&huart1, rx_data, 8, 100);
 8001320:	2364      	movs	r3, #100	; 0x64
 8001322:	2208      	movs	r2, #8
 8001324:	4669      	mov	r1, sp
 8001326:	0028      	movs	r0, r5
 8001328:	f002 fddc 	bl	8003ee4 <HAL_UART_Receive>
	if(res == HAL_OK) { if(rx_data[0] == 0x71) { buf->y = rx_data[2] << 8 | rx_data[1]; } }
 800132c:	2800      	cmp	r0, #0
 800132e:	d109      	bne.n	8001344 <get_touch+0x60>
 8001330:	466b      	mov	r3, sp
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b71      	cmp	r3, #113	; 0x71
 8001336:	d105      	bne.n	8001344 <get_touch+0x60>
 8001338:	466b      	mov	r3, sp
 800133a:	7859      	ldrb	r1, [r3, #1]
 800133c:	789b      	ldrb	r3, [r3, #2]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	430b      	orrs	r3, r1
 8001342:	8063      	strh	r3, [r4, #2]

	if(buf->x > 0 && buf->y > 0) buf->touched = 1;
	else buf->touched = 0;
 8001344:	2300      	movs	r3, #0
	if(buf->x > 0 && buf->y > 0) buf->touched = 1;
 8001346:	8822      	ldrh	r2, [r4, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d003      	beq.n	8001354 <get_touch+0x70>
 800134c:	8863      	ldrh	r3, [r4, #2]
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
	else buf->touched = 0;
 8001352:	b2db      	uxtb	r3, r3
 8001354:	7123      	strb	r3, [r4, #4]
}
 8001356:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8001358:	080057ec 	.word	0x080057ec
 800135c:	200001c8 	.word	0x200001c8
 8001360:	080057f5 	.word	0x080057f5

08001364 <area_check>:

uint8_t area_check(POS_Typedef* xy, AREA_Typedef* area){
 8001364:	b510      	push	{r4, lr}
	if(xy->x >= area->x0 && xy->x <= area->x1){
 8001366:	8802      	ldrh	r2, [r0, #0]
 8001368:	880c      	ldrh	r4, [r1, #0]
uint8_t area_check(POS_Typedef* xy, AREA_Typedef* area){
 800136a:	0003      	movs	r3, r0
		if(xy->y >= area->y0 && xy->y <= area->y1){
			return 1;
		}
	}
	return 0;
 800136c:	2000      	movs	r0, #0
	if(xy->x >= area->x0 && xy->x <= area->x1){
 800136e:	4294      	cmp	r4, r2
 8001370:	d80a      	bhi.n	8001388 <area_check+0x24>
 8001372:	888c      	ldrh	r4, [r1, #4]
 8001374:	4294      	cmp	r4, r2
 8001376:	d307      	bcc.n	8001388 <area_check+0x24>
 8001378:	885b      	ldrh	r3, [r3, #2]
		if(xy->y >= area->y0 && xy->y <= area->y1){
 800137a:	884a      	ldrh	r2, [r1, #2]
 800137c:	429a      	cmp	r2, r3
 800137e:	d803      	bhi.n	8001388 <area_check+0x24>
 8001380:	88ca      	ldrh	r2, [r1, #6]
 8001382:	429a      	cmp	r2, r3
 8001384:	4140      	adcs	r0, r0
	return 0;
 8001386:	b2c0      	uxtb	r0, r0
}
 8001388:	bd10      	pop	{r4, pc}
	...

0800138c <main_dis>:

void main_dis(ELEVATOR_Typedef* data, uint8_t* door_x){
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	b08d      	sub	sp, #52	; 0x34
 8001390:	9004      	str	r0, [sp, #16]
		SHT41_t* buf = (SHT41_t*)malloc(sizeof(SHT41_t));
 8001392:	2008      	movs	r0, #8
void main_dis(ELEVATOR_Typedef* data, uint8_t* door_x){
 8001394:	9106      	str	r1, [sp, #24]
		SHT41_t* buf = (SHT41_t*)malloc(sizeof(SHT41_t));
 8001396:	f002 fee5 	bl	8004164 <malloc>
 800139a:	0004      	movs	r4, r0
		*buf = getTempSht41();
 800139c:	ad08      	add	r5, sp, #32
 800139e:	0028      	movs	r0, r5
 80013a0:	f000 fd24 	bl	8001dec <getTempSht41>
 80013a4:	0023      	movs	r3, r4
	/* get sensor value */
	SHT41_t*  sht41_value  = get_sensor(sht41_temp);
	uint16_t* ens160_value = get_sensor(ens160_co2);
 80013a6:	2002      	movs	r0, #2
		*buf = getTempSht41();
 80013a8:	cd06      	ldmia	r5!, {r1, r2}
 80013aa:	c306      	stmia	r3!, {r1, r2}
	SHT41_t*  sht41_value  = get_sensor(sht41_temp);
 80013ac:	940a      	str	r4, [sp, #40]	; 0x28
	uint16_t* ens160_value = get_sensor(ens160_co2);
 80013ae:	f7ff ff5b 	bl	8001268 <get_sensor>

	sensor[sht41_temp].value = (uint16_t)(sht41_value->temperature * 10.0f);
 80013b2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80013b4:	49bd      	ldr	r1, [pc, #756]	; (80016ac <main_dis+0x320>)
	uint16_t* ens160_value = get_sensor(ens160_co2);
 80013b6:	0005      	movs	r5, r0
 80013b8:	900b      	str	r0, [sp, #44]	; 0x2c
	sensor[sht41_temp].value = (uint16_t)(sht41_value->temperature * 10.0f);
 80013ba:	6830      	ldr	r0, [r6, #0]
 80013bc:	f7ff fa80 	bl	80008c0 <__aeabi_fmul>
 80013c0:	f7ff f882 	bl	80004c8 <__aeabi_f2uiz>
 80013c4:	4fba      	ldr	r7, [pc, #744]	; (80016b0 <main_dis+0x324>)
	sensor[sht41_hum].value  = (uint16_t)(sht41_value->humidity    * 10.0f);
 80013c6:	49b9      	ldr	r1, [pc, #740]	; (80016ac <main_dis+0x320>)
	sensor[sht41_temp].value = (uint16_t)(sht41_value->temperature * 10.0f);
 80013c8:	8138      	strh	r0, [r7, #8]
	sensor[sht41_hum].value  = (uint16_t)(sht41_value->humidity    * 10.0f);
 80013ca:	6870      	ldr	r0, [r6, #4]
 80013cc:	f7ff fa78 	bl	80008c0 <__aeabi_fmul>
 80013d0:	f7ff f87a 	bl	80004c8 <__aeabi_f2uiz>
 80013d4:	8338      	strh	r0, [r7, #24]
	sensor[ens160_co2].value = *ens160_value;
 80013d6:	882b      	ldrh	r3, [r5, #0]

	free_reset((void*)&sht41_value);
 80013d8:	a80a      	add	r0, sp, #40	; 0x28
	sensor[ens160_co2].value = *ens160_value;
 80013da:	853b      	strh	r3, [r7, #40]	; 0x28
	free_reset((void*)&sht41_value);
 80013dc:	f7ff ff5c 	bl	8001298 <free_reset>
	free_reset((void*)&ens160_value);
 80013e0:	a80b      	add	r0, sp, #44	; 0x2c
 80013e2:	f7ff ff59 	bl	8001298 <free_reset>

	/* sensor values draw */
	for(SENSOR_ADDR_Typedef i = sht41_temp ; i < max_addr ; i++){
 80013e6:	2300      	movs	r3, #0
 80013e8:	9305      	str	r3, [sp, #20]
		if(i == sht41_temp)      sprintf(bf, "xstr %d,%d,160,30,0,WHITE,%s,1,1,1,\"%02d.%d%cC\"", sensor[i].area.x0, sensor[i].area.y0, sensor[i].color, sensor[i].value / 10, sensor[i].value % 10, 0xb0);
 80013ea:	9b05      	ldr	r3, [sp, #20]
 80013ec:	4cb0      	ldr	r4, [pc, #704]	; (80016b0 <main_dis+0x324>)
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d000      	beq.n	80013f4 <main_dis+0x68>
 80013f2:	e12c      	b.n	800164e <main_dis+0x2c2>
 80013f4:	8823      	ldrh	r3, [r4, #0]
 80013f6:	8925      	ldrh	r5, [r4, #8]
 80013f8:	8866      	ldrh	r6, [r4, #2]
 80013fa:	9307      	str	r3, [sp, #28]
 80013fc:	23b0      	movs	r3, #176	; 0xb0
 80013fe:	210a      	movs	r1, #10
 8001400:	0028      	movs	r0, r5
 8001402:	9303      	str	r3, [sp, #12]
 8001404:	f7fe ff22 	bl	800024c <__aeabi_uidivmod>
 8001408:	b289      	uxth	r1, r1
 800140a:	9102      	str	r1, [sp, #8]
 800140c:	0028      	movs	r0, r5
 800140e:	210a      	movs	r1, #10
 8001410:	f7fe fe96 	bl	8000140 <__udivsi3>
 8001414:	b280      	uxth	r0, r0
 8001416:	9001      	str	r0, [sp, #4]
 8001418:	68e3      	ldr	r3, [r4, #12]
 800141a:	9a07      	ldr	r2, [sp, #28]
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	49a5      	ldr	r1, [pc, #660]	; (80016b4 <main_dis+0x328>)
 8001420:	0033      	movs	r3, r6
 8001422:	48a5      	ldr	r0, [pc, #660]	; (80016b8 <main_dis+0x32c>)
 8001424:	f003 f826 	bl	8004474 <siprintf>
		else if(i == sht41_hum)  sprintf(bf, "xstr %d,%d,160,30,0,WHITE,%s,1,1,1,\"%02d.%d%%\"", sensor[i].area.x0, sensor[i].area.y0, sensor[i].color, sensor[i].value / 10, sensor[i].value % 10);
		else if(i == ens160_co2) sprintf(bf, "xstr %d,%d,160,30,0,WHITE,%s,1,1,1,\"%d\"", sensor[i].area.x0, sensor[i].area.y0, sensor[i].color, sensor[i].value);
		nextion_inst_set(bf);
 8001428:	4ca3      	ldr	r4, [pc, #652]	; (80016b8 <main_dis+0x32c>)
 800142a:	0020      	movs	r0, r4
 800142c:	f7ff ff3c 	bl	80012a8 <nextion_inst_set>

		sprintf(bf, "draw %d,%d,%d,%d,BLACK", sensor[i].area.x0, sensor[i].area.y0, sensor[i].area.x1, sensor[i].area.y1);
 8001430:	88f9      	ldrh	r1, [r7, #6]
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	883a      	ldrh	r2, [r7, #0]
 8001436:	9101      	str	r1, [sp, #4]
 8001438:	88b9      	ldrh	r1, [r7, #4]
 800143a:	4ea0      	ldr	r6, [pc, #640]	; (80016bc <main_dis+0x330>)
 800143c:	9100      	str	r1, [sp, #0]
 800143e:	0020      	movs	r0, r4
 8001440:	0031      	movs	r1, r6
 8001442:	f003 f817 	bl	8004474 <siprintf>
		nextion_inst_set(bf);
 8001446:	0020      	movs	r0, r4
 8001448:	f7ff ff2e 	bl	80012a8 <nextion_inst_set>
	for(SENSOR_ADDR_Typedef i = sht41_temp ; i < max_addr ; i++){
 800144c:	9b05      	ldr	r3, [sp, #20]
 800144e:	3710      	adds	r7, #16
 8001450:	3301      	adds	r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	9305      	str	r3, [sp, #20]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d1c7      	bne.n	80013ea <main_dis+0x5e>
 800145a:	2564      	movs	r5, #100	; 0x64
	}

	/* floor draw */
	for(uint8_t i = 0 ; i < 10 ; i++){
		sprintf(bf, "fill 60,%d,45,15,WHITE", 100 + i * 15);
 800145c:	002a      	movs	r2, r5
 800145e:	4998      	ldr	r1, [pc, #608]	; (80016c0 <main_dis+0x334>)
 8001460:	0020      	movs	r0, r4
 8001462:	f003 f807 	bl	8004474 <siprintf>
		nextion_inst_set(bf);
 8001466:	0020      	movs	r0, r4
 8001468:	f7ff ff1e 	bl	80012a8 <nextion_inst_set>
		sprintf(bf, "fill 60,%d,45,15,WHITE", 100 + i * 15);
 800146c:	002f      	movs	r7, r5

		sprintf(bf, "draw %d,%d,%d,%d,BLACK", 60, 100 + i * 15, 60 + 45, 100 + (i + 1) * 15);
 800146e:	2369      	movs	r3, #105	; 0x69
 8001470:	350f      	adds	r5, #15
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	223c      	movs	r2, #60	; 0x3c
 8001476:	003b      	movs	r3, r7
 8001478:	0020      	movs	r0, r4
 800147a:	4990      	ldr	r1, [pc, #576]	; (80016bc <main_dis+0x330>)
 800147c:	9501      	str	r5, [sp, #4]
 800147e:	f002 fff9 	bl	8004474 <siprintf>
		nextion_inst_set(bf);
 8001482:	0020      	movs	r0, r4
 8001484:	f7ff ff10 	bl	80012a8 <nextion_inst_set>
	for(uint8_t i = 0 ; i < 10 ; i++){
 8001488:	2dfa      	cmp	r5, #250	; 0xfa
 800148a:	d1e7      	bne.n	800145c <main_dis+0xd0>
	}

	/* floor unit draw */
	uint8_t cnt = 0;
 800148c:	2296      	movs	r2, #150	; 0x96

	if(sensor[sht41_temp].value > 300)  cnt++;
 800148e:	4988      	ldr	r1, [pc, #544]	; (80016b0 <main_dis+0x324>)
	uint8_t cnt = 0;
 8001490:	0052      	lsls	r2, r2, #1
	if(sensor[sht41_temp].value > 300)  cnt++;
 8001492:	890b      	ldrh	r3, [r1, #8]
	if(sensor[sht41_hum].value  > 700)  cnt++;
 8001494:	8b08      	ldrh	r0, [r1, #24]
	uint8_t cnt = 0;
 8001496:	429a      	cmp	r2, r3
 8001498:	4192      	sbcs	r2, r2
	if(sensor[sht41_hum].value  > 700)  cnt++;
 800149a:	23af      	movs	r3, #175	; 0xaf
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4283      	cmp	r3, r0
 80014a0:	419b      	sbcs	r3, r3
	uint8_t cnt = 0;
 80014a2:	4252      	negs	r2, r2
	if(sensor[sht41_hum].value  > 700)  cnt++;
 80014a4:	425b      	negs	r3, r3
 80014a6:	18d2      	adds	r2, r2, r3
	if(sensor[ens160_co2].value > 1000) cnt++;
 80014a8:	23fa      	movs	r3, #250	; 0xfa
 80014aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4299      	cmp	r1, r3
 80014b0:	d901      	bls.n	80014b6 <main_dis+0x12a>
 80014b2:	3201      	adds	r2, #1
 80014b4:	b2d2      	uxtb	r2, r2

	sprintf(bf, "fill %d,%d,15,15,%s", 75, 100 + (9 - data->now_floor) * 15, cnt < 1 ? "GREEN" : cnt < 3 ? "YELLOW" : "RED");
 80014b6:	9b04      	ldr	r3, [sp, #16]
 80014b8:	7819      	ldrb	r1, [r3, #0]
 80014ba:	2309      	movs	r3, #9
 80014bc:	1a59      	subs	r1, r3, r1
 80014be:	3306      	adds	r3, #6
 80014c0:	434b      	muls	r3, r1
 80014c2:	4980      	ldr	r1, [pc, #512]	; (80016c4 <main_dis+0x338>)
 80014c4:	3364      	adds	r3, #100	; 0x64
 80014c6:	2a00      	cmp	r2, #0
 80014c8:	d003      	beq.n	80014d2 <main_dis+0x146>
 80014ca:	497f      	ldr	r1, [pc, #508]	; (80016c8 <main_dis+0x33c>)
 80014cc:	2a03      	cmp	r2, #3
 80014ce:	d100      	bne.n	80014d2 <main_dis+0x146>
 80014d0:	497e      	ldr	r1, [pc, #504]	; (80016cc <main_dis+0x340>)
 80014d2:	224b      	movs	r2, #75	; 0x4b
 80014d4:	9100      	str	r1, [sp, #0]
 80014d6:	0020      	movs	r0, r4
 80014d8:	497d      	ldr	r1, [pc, #500]	; (80016d0 <main_dis+0x344>)
 80014da:	f002 ffcb 	bl	8004474 <siprintf>
	nextion_inst_set(bf);
 80014de:	0020      	movs	r0, r4
 80014e0:	f7ff fee2 	bl	80012a8 <nextion_inst_set>
	sprintf(bf, "draw %d,%d,%d,%d,BLACK", 75, 100 + (9 - data->now_floor) * 15, 75 + 15, 115 + (9 - data->now_floor) * 15);
 80014e4:	2209      	movs	r2, #9
 80014e6:	9b04      	ldr	r3, [sp, #16]
 80014e8:	0031      	movs	r1, r6
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	0020      	movs	r0, r4
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	3206      	adds	r2, #6
 80014f2:	435a      	muls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	3273      	adds	r2, #115	; 0x73
 80014f8:	9201      	str	r2, [sp, #4]
 80014fa:	225a      	movs	r2, #90	; 0x5a
 80014fc:	3364      	adds	r3, #100	; 0x64
 80014fe:	9200      	str	r2, [sp, #0]
 8001500:	3a0f      	subs	r2, #15
 8001502:	f002 ffb7 	bl	8004474 <siprintf>
	nextion_inst_set(bf);
 8001506:	0020      	movs	r0, r4
 8001508:	f7ff fece 	bl	80012a8 <nextion_inst_set>

	/* elevator draw */
	sprintf(bf, "xstr 190,60,100,30,0,RED,BLACK,1,1,1,\"%dF\"", data->now_floor + 1);
 800150c:	9b04      	ldr	r3, [sp, #16]
 800150e:	4971      	ldr	r1, [pc, #452]	; (80016d4 <main_dis+0x348>)
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	0020      	movs	r0, r4
 8001514:	3201      	adds	r2, #1
 8001516:	f002 ffad 	bl	8004474 <siprintf>
	nextion_inst_set(bf);
 800151a:	0020      	movs	r0, r4
 800151c:	f7ff fec4 	bl	80012a8 <nextion_inst_set>

	if(data->move_state == 1){
 8001520:	9b04      	ldr	r3, [sp, #16]
 8001522:	78db      	ldrb	r3, [r3, #3]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d10b      	bne.n	8001540 <main_dis+0x1b4>
		if(data->now_floor > data->goal_floor){
 8001528:	9b04      	ldr	r3, [sp, #16]
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	429a      	cmp	r2, r3
 8001530:	d800      	bhi.n	8001534 <main_dis+0x1a8>
 8001532:	e0b3      	b.n	800169c <main_dis+0x310>
			nextion_inst_set("line 200,70,205,80,RED");
 8001534:	4868      	ldr	r0, [pc, #416]	; (80016d8 <main_dis+0x34c>)
 8001536:	f7ff feb7 	bl	80012a8 <nextion_inst_set>
			nextion_inst_set("line 205,80,210,70,RED");
 800153a:	4868      	ldr	r0, [pc, #416]	; (80016dc <main_dis+0x350>)
		}
		else if(data->goal_floor > data->now_floor){
			nextion_inst_set("line 200,80,205,70,RED");
			nextion_inst_set("line 205,70,210,80,RED");
 800153c:	f7ff feb4 	bl	80012a8 <nextion_inst_set>
	nextion_inst_set("draw 160,95,320,95+30,BLACK");

	/* left door */
	sprintf(bf, "fill 160,125,%d,140,WHITE", *door_x);
	nextion_inst_set(bf);
	sprintf(bf, "draw %d,%d,%d,%d,BLACK", 160, 125, 160 + *door_x, 125 + 140);
 8001540:	270a      	movs	r7, #10
	nextion_inst_set(bf);

	/* right door */
	sprintf(bf, "fill %d,125,%d,140,WHITE", 240 + (80 - *door_x), *door_x);
 8001542:	25a0      	movs	r5, #160	; 0xa0
	nextion_inst_set("fill 160,95,160,170,GRAY");
 8001544:	4866      	ldr	r0, [pc, #408]	; (80016e0 <main_dis+0x354>)
 8001546:	f7ff feaf 	bl	80012a8 <nextion_inst_set>
	nextion_inst_set("draw 160,95,160+160,95+170,BLACK");
 800154a:	4866      	ldr	r0, [pc, #408]	; (80016e4 <main_dis+0x358>)
 800154c:	f7ff feac 	bl	80012a8 <nextion_inst_set>
	nextion_inst_set("fill 160,95,160,30,WHITE");
 8001550:	4865      	ldr	r0, [pc, #404]	; (80016e8 <main_dis+0x35c>)
 8001552:	f7ff fea9 	bl	80012a8 <nextion_inst_set>
	nextion_inst_set("draw 160,95,320,95+30,BLACK");
 8001556:	4865      	ldr	r0, [pc, #404]	; (80016ec <main_dis+0x360>)
 8001558:	f7ff fea6 	bl	80012a8 <nextion_inst_set>
	sprintf(bf, "fill 160,125,%d,140,WHITE", *door_x);
 800155c:	4c56      	ldr	r4, [pc, #344]	; (80016b8 <main_dis+0x32c>)
 800155e:	9b06      	ldr	r3, [sp, #24]
 8001560:	4963      	ldr	r1, [pc, #396]	; (80016f0 <main_dis+0x364>)
 8001562:	781a      	ldrb	r2, [r3, #0]
 8001564:	0020      	movs	r0, r4
 8001566:	f002 ff85 	bl	8004474 <siprintf>
	nextion_inst_set(bf);
 800156a:	0020      	movs	r0, r4
 800156c:	f7ff fe9c 	bl	80012a8 <nextion_inst_set>
	sprintf(bf, "draw %d,%d,%d,%d,BLACK", 160, 125, 160 + *door_x, 125 + 140);
 8001570:	37ff      	adds	r7, #255	; 0xff
 8001572:	9b06      	ldr	r3, [sp, #24]
 8001574:	9701      	str	r7, [sp, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4e50      	ldr	r6, [pc, #320]	; (80016bc <main_dis+0x330>)
 800157a:	33a0      	adds	r3, #160	; 0xa0
 800157c:	22a0      	movs	r2, #160	; 0xa0
 800157e:	0031      	movs	r1, r6
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	0020      	movs	r0, r4
 8001584:	237d      	movs	r3, #125	; 0x7d
 8001586:	f002 ff75 	bl	8004474 <siprintf>
	nextion_inst_set(bf);
 800158a:	0020      	movs	r0, r4
 800158c:	f7ff fe8c 	bl	80012a8 <nextion_inst_set>
	sprintf(bf, "fill %d,125,%d,140,WHITE", 240 + (80 - *door_x), *door_x);
 8001590:	9b06      	ldr	r3, [sp, #24]
 8001592:	006d      	lsls	r5, r5, #1
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4957      	ldr	r1, [pc, #348]	; (80016f4 <main_dis+0x368>)
 8001598:	1aea      	subs	r2, r5, r3
 800159a:	0020      	movs	r0, r4
 800159c:	f002 ff6a 	bl	8004474 <siprintf>
	nextion_inst_set(bf);
 80015a0:	0020      	movs	r0, r4
 80015a2:	f7ff fe81 	bl	80012a8 <nextion_inst_set>
	sprintf(bf, "draw %d,%d,%d,%d,BLACK", 240 + (80 - *door_x), 125, 320, 125 + 140);
 80015a6:	9b06      	ldr	r3, [sp, #24]
 80015a8:	0031      	movs	r1, r6
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	0020      	movs	r0, r4
 80015ae:	237d      	movs	r3, #125	; 0x7d
 80015b0:	1aaa      	subs	r2, r5, r2
 80015b2:	9701      	str	r7, [sp, #4]
 80015b4:	9500      	str	r5, [sp, #0]
 80015b6:	f002 ff5d 	bl	8004474 <siprintf>
	nextion_inst_set(bf);
 80015ba:	0020      	movs	r0, r4
 80015bc:	f7ff fe74 	bl	80012a8 <nextion_inst_set>

	nextion_inst_set("fill 321,31,160,241,WHITE");
 80015c0:	484d      	ldr	r0, [pc, #308]	; (80016f8 <main_dis+0x36c>)
 80015c2:	f7ff fe71 	bl	80012a8 <nextion_inst_set>

	if(data->human == out_human){
 80015c6:	9b04      	ldr	r3, [sp, #16]
 80015c8:	789b      	ldrb	r3, [r3, #2]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d000      	beq.n	80015d0 <main_dis+0x244>
 80015ce:	e0af      	b.n	8001730 <main_dis+0x3a4>
		sprintf(bf, "xstr 350,110,100,30,0,BLACK,WHITE,1,1,1,\"%dF\"", user_floor + 1);
 80015d0:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <main_dis+0x370>)
 80015d2:	494b      	ldr	r1, [pc, #300]	; (8001700 <main_dis+0x374>)
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	0020      	movs	r0, r4
 80015d8:	3201      	adds	r2, #1
 80015da:	f002 ff4b 	bl	8004474 <siprintf>
		nextion_inst_set(bf);
 80015de:	0020      	movs	r0, r4
 80015e0:	f7ff fe62 	bl	80012a8 <nextion_inst_set>
		nextion_inst_set("draw 350,110,350+100,110+30,BLACK");
 80015e4:	4847      	ldr	r0, [pc, #284]	; (8001704 <main_dis+0x378>)
 80015e6:	f7ff fe5f 	bl	80012a8 <nextion_inst_set>

		sprintf(bf, "fill %d,%d,100,40,GRAY", call_button_area.x0, call_button_area.y0);
 80015ea:	4d47      	ldr	r5, [pc, #284]	; (8001708 <main_dis+0x37c>)
 80015ec:	4947      	ldr	r1, [pc, #284]	; (800170c <main_dis+0x380>)
 80015ee:	886b      	ldrh	r3, [r5, #2]
 80015f0:	882a      	ldrh	r2, [r5, #0]
 80015f2:	0020      	movs	r0, r4
 80015f4:	f002 ff3e 	bl	8004474 <siprintf>
		nextion_inst_set(bf);
 80015f8:	0020      	movs	r0, r4
 80015fa:	f7ff fe55 	bl	80012a8 <nextion_inst_set>
		sprintf(bf, "draw %d,%d,%d,%d,%s", call_button_area.x0, call_button_area.y0, call_button_area.x1, call_button_area.y1, call_state == 0 ? "BLACK" : "RED");
 80015fe:	4944      	ldr	r1, [pc, #272]	; (8001710 <main_dis+0x384>)
 8001600:	882a      	ldrh	r2, [r5, #0]
 8001602:	780f      	ldrb	r7, [r1, #0]
 8001604:	886b      	ldrh	r3, [r5, #2]
 8001606:	88a8      	ldrh	r0, [r5, #4]
 8001608:	88ee      	ldrh	r6, [r5, #6]
 800160a:	4942      	ldr	r1, [pc, #264]	; (8001714 <main_dis+0x388>)
 800160c:	2f00      	cmp	r7, #0
 800160e:	d000      	beq.n	8001612 <main_dis+0x286>
 8001610:	492e      	ldr	r1, [pc, #184]	; (80016cc <main_dis+0x340>)
 8001612:	9102      	str	r1, [sp, #8]
 8001614:	9000      	str	r0, [sp, #0]
 8001616:	4940      	ldr	r1, [pc, #256]	; (8001718 <main_dis+0x38c>)
 8001618:	0020      	movs	r0, r4
 800161a:	9601      	str	r6, [sp, #4]
 800161c:	f002 ff2a 	bl	8004474 <siprintf>
		nextion_inst_set(bf);
 8001620:	0020      	movs	r0, r4
 8001622:	f7ff fe41 	bl	80012a8 <nextion_inst_set>

		sprintf(bf, "cir %d,%d,15,%s", call_button_area.x0 + 50, call_button_area.y0 + 20, call_state == 0 ? "BLACK" : "RED");
 8001626:	493a      	ldr	r1, [pc, #232]	; (8001710 <main_dis+0x384>)
 8001628:	882a      	ldrh	r2, [r5, #0]
 800162a:	886b      	ldrh	r3, [r5, #2]
 800162c:	7808      	ldrb	r0, [r1, #0]
 800162e:	3232      	adds	r2, #50	; 0x32
 8001630:	4938      	ldr	r1, [pc, #224]	; (8001714 <main_dis+0x388>)
 8001632:	3314      	adds	r3, #20
 8001634:	2800      	cmp	r0, #0
 8001636:	d000      	beq.n	800163a <main_dis+0x2ae>
 8001638:	4924      	ldr	r1, [pc, #144]	; (80016cc <main_dis+0x340>)
 800163a:	9100      	str	r1, [sp, #0]
 800163c:	0020      	movs	r0, r4
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <main_dis+0x390>)
 8001640:	f002 ff18 	bl	8004474 <siprintf>
		nextion_inst_set(bf);
 8001644:	0020      	movs	r0, r4
 8001646:	f7ff fe2f 	bl	80012a8 <nextion_inst_set>

			sprintf(bf, "draw %d,%d,%d,%d,%s", keypad[i].x0, keypad[i].y0, keypad[i].x1, keypad[i].y1, (i == data->goal_floor && data->move_state == 1) ? "RED" : "BLACK");
			nextion_inst_set(bf);
		}
	}
}
 800164a:	b00d      	add	sp, #52	; 0x34
 800164c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if(i == sht41_hum)  sprintf(bf, "xstr %d,%d,160,30,0,WHITE,%s,1,1,1,\"%02d.%d%%\"", sensor[i].area.x0, sensor[i].area.y0, sensor[i].color, sensor[i].value / 10, sensor[i].value % 10);
 800164e:	9b05      	ldr	r3, [sp, #20]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d118      	bne.n	8001686 <main_dis+0x2fa>
 8001654:	8b25      	ldrh	r5, [r4, #24]
 8001656:	8a23      	ldrh	r3, [r4, #16]
 8001658:	0028      	movs	r0, r5
 800165a:	210a      	movs	r1, #10
 800165c:	8a66      	ldrh	r6, [r4, #18]
 800165e:	9307      	str	r3, [sp, #28]
 8001660:	f7fe fdf4 	bl	800024c <__aeabi_uidivmod>
 8001664:	b289      	uxth	r1, r1
 8001666:	9102      	str	r1, [sp, #8]
 8001668:	0028      	movs	r0, r5
 800166a:	210a      	movs	r1, #10
 800166c:	f7fe fd68 	bl	8000140 <__udivsi3>
 8001670:	b280      	uxth	r0, r0
 8001672:	9001      	str	r0, [sp, #4]
 8001674:	69e3      	ldr	r3, [r4, #28]
 8001676:	9a07      	ldr	r2, [sp, #28]
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	4929      	ldr	r1, [pc, #164]	; (8001720 <main_dis+0x394>)
 800167c:	0033      	movs	r3, r6
 800167e:	480e      	ldr	r0, [pc, #56]	; (80016b8 <main_dis+0x32c>)
 8001680:	f002 fef8 	bl	8004474 <siprintf>
 8001684:	e6d0      	b.n	8001428 <main_dis+0x9c>
		else if(i == ens160_co2) sprintf(bf, "xstr %d,%d,160,30,0,WHITE,%s,1,1,1,\"%d\"", sensor[i].area.x0, sensor[i].area.y0, sensor[i].color, sensor[i].value);
 8001686:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8001688:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800168a:	8c22      	ldrh	r2, [r4, #32]
 800168c:	9101      	str	r1, [sp, #4]
 800168e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001690:	4809      	ldr	r0, [pc, #36]	; (80016b8 <main_dis+0x32c>)
 8001692:	9100      	str	r1, [sp, #0]
 8001694:	4923      	ldr	r1, [pc, #140]	; (8001724 <main_dis+0x398>)
 8001696:	f002 feed 	bl	8004474 <siprintf>
 800169a:	e6c5      	b.n	8001428 <main_dis+0x9c>
		else if(data->goal_floor > data->now_floor){
 800169c:	429a      	cmp	r2, r3
 800169e:	d300      	bcc.n	80016a2 <main_dis+0x316>
 80016a0:	e74e      	b.n	8001540 <main_dis+0x1b4>
			nextion_inst_set("line 200,80,205,70,RED");
 80016a2:	4821      	ldr	r0, [pc, #132]	; (8001728 <main_dis+0x39c>)
 80016a4:	f7ff fe00 	bl	80012a8 <nextion_inst_set>
			nextion_inst_set("line 205,70,210,80,RED");
 80016a8:	4820      	ldr	r0, [pc, #128]	; (800172c <main_dis+0x3a0>)
 80016aa:	e747      	b.n	800153c <main_dis+0x1b0>
 80016ac:	41200000 	.word	0x41200000
 80016b0:	2000000c 	.word	0x2000000c
 80016b4:	0800580b 	.word	0x0800580b
 80016b8:	200000c8 	.word	0x200000c8
 80016bc:	08005892 	.word	0x08005892
 80016c0:	080058a9 	.word	0x080058a9
 80016c4:	080057fe 	.word	0x080057fe
 80016c8:	08005804 	.word	0x08005804
 80016cc:	08005929 	.word	0x08005929
 80016d0:	080058c0 	.word	0x080058c0
 80016d4:	080058d4 	.word	0x080058d4
 80016d8:	080058ff 	.word	0x080058ff
 80016dc:	08005916 	.word	0x08005916
 80016e0:	0800595b 	.word	0x0800595b
 80016e4:	08005974 	.word	0x08005974
 80016e8:	08005995 	.word	0x08005995
 80016ec:	080059ae 	.word	0x080059ae
 80016f0:	080059ca 	.word	0x080059ca
 80016f4:	080059e4 	.word	0x080059e4
 80016f8:	080059fd 	.word	0x080059fd
 80016fc:	200002b2 	.word	0x200002b2
 8001700:	08005a17 	.word	0x08005a17
 8001704:	08005a45 	.word	0x08005a45
 8001708:	20000002 	.word	0x20000002
 800170c:	08005a67 	.word	0x08005a67
 8001710:	2000012c 	.word	0x2000012c
 8001714:	08005a61 	.word	0x08005a61
 8001718:	08005a7e 	.word	0x08005a7e
 800171c:	08005a92 	.word	0x08005a92
 8001720:	0800583b 	.word	0x0800583b
 8001724:	0800586a 	.word	0x0800586a
 8001728:	0800592d 	.word	0x0800592d
 800172c:	08005944 	.word	0x08005944
	if(data->human == out_human){
 8001730:	2500      	movs	r5, #0
 8001732:	4c1c      	ldr	r4, [pc, #112]	; (80017a4 <main_dis+0x418>)
			sprintf(bf, "xstr %d,%d,30,30,0,%s,GRAY,1,1,1,\"%d\"", keypad[i].x0, keypad[i].y0, (i == data->goal_floor && data->move_state == 1) ? "RED" : "BLACK", i + 1);
 8001734:	9904      	ldr	r1, [sp, #16]
 8001736:	b2ef      	uxtb	r7, r5
 8001738:	7848      	ldrb	r0, [r1, #1]
 800173a:	8822      	ldrh	r2, [r4, #0]
 800173c:	8863      	ldrh	r3, [r4, #2]
 800173e:	491a      	ldr	r1, [pc, #104]	; (80017a8 <main_dis+0x41c>)
 8001740:	42b8      	cmp	r0, r7
 8001742:	d104      	bne.n	800174e <main_dis+0x3c2>
 8001744:	9804      	ldr	r0, [sp, #16]
 8001746:	78c0      	ldrb	r0, [r0, #3]
 8001748:	2801      	cmp	r0, #1
 800174a:	d100      	bne.n	800174e <main_dis+0x3c2>
 800174c:	4917      	ldr	r1, [pc, #92]	; (80017ac <main_dis+0x420>)
 800174e:	4e18      	ldr	r6, [pc, #96]	; (80017b0 <main_dis+0x424>)
 8001750:	3501      	adds	r5, #1
 8001752:	9100      	str	r1, [sp, #0]
 8001754:	0030      	movs	r0, r6
 8001756:	4917      	ldr	r1, [pc, #92]	; (80017b4 <main_dis+0x428>)
 8001758:	9501      	str	r5, [sp, #4]
 800175a:	f002 fe8b 	bl	8004474 <siprintf>
			nextion_inst_set(bf);
 800175e:	0030      	movs	r0, r6
 8001760:	f7ff fda2 	bl	80012a8 <nextion_inst_set>
			sprintf(bf, "draw %d,%d,%d,%d,%s", keypad[i].x0, keypad[i].y0, keypad[i].x1, keypad[i].y1, (i == data->goal_floor && data->move_state == 1) ? "RED" : "BLACK");
 8001764:	88a1      	ldrh	r1, [r4, #4]
 8001766:	8822      	ldrh	r2, [r4, #0]
 8001768:	9105      	str	r1, [sp, #20]
 800176a:	9904      	ldr	r1, [sp, #16]
 800176c:	8863      	ldrh	r3, [r4, #2]
 800176e:	7849      	ldrb	r1, [r1, #1]
 8001770:	88e0      	ldrh	r0, [r4, #6]
 8001772:	468c      	mov	ip, r1
 8001774:	490c      	ldr	r1, [pc, #48]	; (80017a8 <main_dis+0x41c>)
 8001776:	45bc      	cmp	ip, r7
 8001778:	d104      	bne.n	8001784 <main_dis+0x3f8>
 800177a:	9f04      	ldr	r7, [sp, #16]
 800177c:	78ff      	ldrb	r7, [r7, #3]
 800177e:	2f01      	cmp	r7, #1
 8001780:	d100      	bne.n	8001784 <main_dis+0x3f8>
 8001782:	490a      	ldr	r1, [pc, #40]	; (80017ac <main_dis+0x420>)
 8001784:	9102      	str	r1, [sp, #8]
 8001786:	9905      	ldr	r1, [sp, #20]
 8001788:	9001      	str	r0, [sp, #4]
 800178a:	9100      	str	r1, [sp, #0]
 800178c:	0030      	movs	r0, r6
 800178e:	490a      	ldr	r1, [pc, #40]	; (80017b8 <main_dis+0x42c>)
 8001790:	f002 fe70 	bl	8004474 <siprintf>
			nextion_inst_set(bf);
 8001794:	0030      	movs	r0, r6
 8001796:	f7ff fd87 	bl	80012a8 <nextion_inst_set>
		for(uint8_t i = 0 ; i < 10 ; i++){
 800179a:	3408      	adds	r4, #8
 800179c:	2d0a      	cmp	r5, #10
 800179e:	d1c9      	bne.n	8001734 <main_dis+0x3a8>
 80017a0:	e753      	b.n	800164a <main_dis+0x2be>
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	20000250 	.word	0x20000250
 80017a8:	08005a61 	.word	0x08005a61
 80017ac:	08005929 	.word	0x08005929
 80017b0:	200000c8 	.word	0x200000c8
 80017b4:	08005aa2 	.word	0x08005aa2
 80017b8:	08005a7e 	.word	0x08005a7e

080017bc <task_fuc>:
void task_fuc(void){
	uint32_t sensor_tick = 0;

	DOOR_Typedef now_door_state = close;
	uint32_t door_tick = 0;
	uint8_t door_x = 80;
 80017bc:	2250      	movs	r2, #80	; 0x50
void task_fuc(void){
 80017be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c0:	b08f      	sub	sp, #60	; 0x3c
	uint8_t door_x = 80;
 80017c2:	ab08      	add	r3, sp, #32
	uint32_t buz_tick = 0;
	uint8_t buzM = 0;

	uint8_t befo_touch = 0;

	ELEVATOR_Typedef elevator = { floor_1, elevator.now_floor, out_human, 0, 0, 0 };
 80017c4:	2600      	movs	r6, #0
	uint8_t door_x = 80;
 80017c6:	70da      	strb	r2, [r3, #3]
	ELEVATOR_Typedef elevator = { floor_1, elevator.now_floor, out_human, 0, 0, 0 };
 80017c8:	2380      	movs	r3, #128	; 0x80

	srand((unsigned)time(NULL));
 80017ca:	0030      	movs	r0, r6
	ELEVATOR_Typedef elevator = { floor_1, elevator.now_floor, out_human, 0, 0, 0 };
 80017cc:	025b      	lsls	r3, r3, #9
 80017ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80017d0:	960c      	str	r6, [sp, #48]	; 0x30
 80017d2:	960d      	str	r6, [sp, #52]	; 0x34
	srand((unsigned)time(NULL));
 80017d4:	f002 fe6e 	bl	80044b4 <time>
 80017d8:	f002 fdcc 	bl	8004374 <srand>

	nextion_inst_set("cls WHITE");
 80017dc:	4dc4      	ldr	r5, [pc, #784]	; (8001af0 <task_fuc+0x334>)
	ELEVATOR_Typedef elevator = { floor_1, elevator.now_floor, out_human, 0, 0, 0 };
 80017de:	ac0b      	add	r4, sp, #44	; 0x2c
	nextion_inst_set("cls WHITE");
 80017e0:	0028      	movs	r0, r5
 80017e2:	f7ff fd61 	bl	80012a8 <nextion_inst_set>
	nextion_inst_set("cls WHITE");
 80017e6:	0028      	movs	r0, r5
 80017e8:	f7ff fd5e 	bl	80012a8 <nextion_inst_set>
	nextion_inst_set("cls WHITE");
 80017ec:	0028      	movs	r0, r5
	DOOR_Typedef now_door_state = close;
 80017ee:	2501      	movs	r5, #1
	nextion_inst_set("cls WHITE");
 80017f0:	f7ff fd5a 	bl	80012a8 <nextion_inst_set>
	uint8_t buzM = 0;
 80017f4:	9604      	str	r6, [sp, #16]
	uint32_t buz_tick = 0;
 80017f6:	9603      	str	r6, [sp, #12]
	uint32_t door_tick = 0;
 80017f8:	9606      	str	r6, [sp, #24]
	uint32_t sensor_tick = 0;
 80017fa:	9605      	str	r6, [sp, #20]

	while(1){
		get_touch(&curXY);
 80017fc:	48bd      	ldr	r0, [pc, #756]	; (8001af4 <task_fuc+0x338>)
 80017fe:	f7ff fd71 	bl	80012e4 <get_touch>

		if(screen_update == 0){
 8001802:	4fbd      	ldr	r7, [pc, #756]	; (8001af8 <task_fuc+0x33c>)
 8001804:	783b      	ldrb	r3, [r7, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <task_fuc+0x5c>
			main_dis(&elevator, &door_x);
 800180a:	ab08      	add	r3, sp, #32
 800180c:	1cd9      	adds	r1, r3, #3
 800180e:	0020      	movs	r0, r4
 8001810:	f7ff fdbc 	bl	800138c <main_dis>

			screen_update = 1;
 8001814:	2301      	movs	r3, #1
 8001816:	703b      	strb	r3, [r7, #0]
		}

		if(befo_touch != curXY.touched && curXY.touched == 1){
 8001818:	4fb6      	ldr	r7, [pc, #728]	; (8001af4 <task_fuc+0x338>)
 800181a:	793b      	ldrb	r3, [r7, #4]
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	42b3      	cmp	r3, r6
 8001820:	d030      	beq.n	8001884 <task_fuc+0xc8>
 8001822:	2b01      	cmp	r3, #1
 8001824:	d12e      	bne.n	8001884 <task_fuc+0xc8>
			AREA_Typedef elevator_area = { 160, 95, 320, 95 + 170 };
 8001826:	2208      	movs	r2, #8
 8001828:	49b4      	ldr	r1, [pc, #720]	; (8001afc <task_fuc+0x340>)
 800182a:	a809      	add	r0, sp, #36	; 0x24
 800182c:	f002 fcae 	bl	800418c <memcpy>

			if(elevator.human == out_human){
 8001830:	78a3      	ldrb	r3, [r4, #2]
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d000      	beq.n	800183a <task_fuc+0x7e>
 8001838:	e0bd      	b.n	80019b6 <task_fuc+0x1fa>
				if(area_check(&curXY, &call_button_area)){
 800183a:	0038      	movs	r0, r7
 800183c:	49b0      	ldr	r1, [pc, #704]	; (8001b00 <task_fuc+0x344>)
 800183e:	f7ff fd91 	bl	8001364 <area_check>
 8001842:	2800      	cmp	r0, #0
 8001844:	d00f      	beq.n	8001866 <task_fuc+0xaa>
					screen_update = 0;
 8001846:	2200      	movs	r2, #0
 8001848:	4bab      	ldr	r3, [pc, #684]	; (8001af8 <task_fuc+0x33c>)
 800184a:	701a      	strb	r2, [r3, #0]

					call_state = call_state == 0 ? 1 : call_state;
 800184c:	4bad      	ldr	r3, [pc, #692]	; (8001b04 <task_fuc+0x348>)
 800184e:	7819      	ldrb	r1, [r3, #0]
 8001850:	1c0a      	adds	r2, r1, #0
 8001852:	2900      	cmp	r1, #0
 8001854:	d101      	bne.n	800185a <task_fuc+0x9e>
 8001856:	466a      	mov	r2, sp
 8001858:	7a12      	ldrb	r2, [r2, #8]
 800185a:	701a      	strb	r2, [r3, #0]

					elevator.goal_floor = user_floor;
 800185c:	4baa      	ldr	r3, [pc, #680]	; (8001b08 <task_fuc+0x34c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	7063      	strb	r3, [r4, #1]
					elevator.move_state = 1;
 8001862:	2301      	movs	r3, #1
 8001864:	70e3      	strb	r3, [r4, #3]
						break;
					}
				}
			}

			if(area_check(&curXY, &elevator_area) && now_door_state == open){
 8001866:	48a3      	ldr	r0, [pc, #652]	; (8001af4 <task_fuc+0x338>)
 8001868:	a909      	add	r1, sp, #36	; 0x24
 800186a:	f7ff fd7b 	bl	8001364 <area_check>
 800186e:	2800      	cmp	r0, #0
 8001870:	d008      	beq.n	8001884 <task_fuc+0xc8>
 8001872:	2d00      	cmp	r5, #0
 8001874:	d106      	bne.n	8001884 <task_fuc+0xc8>
				screen_update = 0;
 8001876:	4ba0      	ldr	r3, [pc, #640]	; (8001af8 <task_fuc+0x33c>)
 8001878:	701d      	strb	r5, [r3, #0]

				elevator.human = elevator.human == out_human ? in_human : out_human;
 800187a:	9b02      	ldr	r3, [sp, #8]
 800187c:	3b01      	subs	r3, #1
 800187e:	1e5a      	subs	r2, r3, #1
 8001880:	4193      	sbcs	r3, r2
 8001882:	70a3      	strb	r3, [r4, #2]
			}
		}

		if(HAL_GetTick() - sensor_tick >= 500){
 8001884:	f000 fc70 	bl	8002168 <HAL_GetTick>
 8001888:	9b05      	ldr	r3, [sp, #20]
 800188a:	1ac0      	subs	r0, r0, r3
 800188c:	23fa      	movs	r3, #250	; 0xfa
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4298      	cmp	r0, r3
 8001892:	d305      	bcc.n	80018a0 <task_fuc+0xe4>
			sensor_tick = HAL_GetTick();
 8001894:	f000 fc68 	bl	8002168 <HAL_GetTick>

			screen_update = 0;
 8001898:	2200      	movs	r2, #0
 800189a:	4b97      	ldr	r3, [pc, #604]	; (8001af8 <task_fuc+0x33c>)
			sensor_tick = HAL_GetTick();
 800189c:	9005      	str	r0, [sp, #20]
			screen_update = 0;
 800189e:	701a      	strb	r2, [r3, #0]
		}

		if(elevator.human == out_human && call_state == 0 && now_door_state == close){
 80018a0:	78a3      	ldrb	r3, [r4, #2]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d000      	beq.n	80018a8 <task_fuc+0xec>
 80018a6:	e0a7      	b.n	80019f8 <task_fuc+0x23c>
 80018a8:	4b96      	ldr	r3, [pc, #600]	; (8001b04 <task_fuc+0x348>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d000      	beq.n	80018b2 <task_fuc+0xf6>
 80018b0:	e0a2      	b.n	80019f8 <task_fuc+0x23c>
 80018b2:	2d01      	cmp	r5, #1
 80018b4:	d000      	beq.n	80018b8 <task_fuc+0xfc>
 80018b6:	e09f      	b.n	80019f8 <task_fuc+0x23c>
			if(elevator.move_state == 0){
 80018b8:	78e3      	ldrb	r3, [r4, #3]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d000      	beq.n	80018c0 <task_fuc+0x104>
 80018be:	e09e      	b.n	80019fe <task_fuc+0x242>
				if(HAL_GetTick() - elevator.floor_tick >= 10000){
 80018c0:	f000 fc52 	bl	8002168 <HAL_GetTick>
 80018c4:	68a3      	ldr	r3, [r4, #8]
 80018c6:	1ac0      	subs	r0, r0, r3
 80018c8:	4b90      	ldr	r3, [pc, #576]	; (8001b0c <task_fuc+0x350>)
 80018ca:	4298      	cmp	r0, r3
 80018cc:	d800      	bhi.n	80018d0 <task_fuc+0x114>
 80018ce:	e096      	b.n	80019fe <task_fuc+0x242>
					elevator.floor_tick = HAL_GetTick();
 80018d0:	f000 fc4a 	bl	8002168 <HAL_GetTick>
 80018d4:	60a0      	str	r0, [r4, #8]

					while(elevator.now_floor == elevator.goal_floor) elevator.goal_floor = rand() % max_floor;
 80018d6:	7822      	ldrb	r2, [r4, #0]
 80018d8:	7863      	ldrb	r3, [r4, #1]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d100      	bne.n	80018e0 <task_fuc+0x124>
 80018de:	e084      	b.n	80019ea <task_fuc+0x22e>
					elevator.move_state = 1;
 80018e0:	2301      	movs	r3, #1
 80018e2:	70e3      	strb	r3, [r4, #3]
			}
		}
		else elevator.floor_tick = HAL_GetTick();

		if(elevator.move_state == 1){
			if(HAL_GetTick() - elevator.move_tick >= 1000){
 80018e4:	f000 fc40 	bl	8002168 <HAL_GetTick>
 80018e8:	6863      	ldr	r3, [r4, #4]
 80018ea:	1ac0      	subs	r0, r0, r3
 80018ec:	23fa      	movs	r3, #250	; 0xfa
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4298      	cmp	r0, r3
 80018f2:	d321      	bcc.n	8001938 <task_fuc+0x17c>
				elevator.move_tick = HAL_GetTick();
 80018f4:	f000 fc38 	bl	8002168 <HAL_GetTick>

				screen_update = 0;
 80018f8:	2200      	movs	r2, #0
 80018fa:	4b7f      	ldr	r3, [pc, #508]	; (8001af8 <task_fuc+0x33c>)
				elevator.move_tick = HAL_GetTick();
 80018fc:	6060      	str	r0, [r4, #4]
				screen_update = 0;
 80018fe:	701a      	strb	r2, [r3, #0]

				if(door_x == 80) elevator.now_floor = elevator.now_floor > elevator.goal_floor ? elevator.now_floor - 1 : elevator.now_floor < elevator.goal_floor ? elevator.now_floor + 1 : elevator.now_floor;
 8001900:	ab08      	add	r3, sp, #32
 8001902:	3303      	adds	r3, #3
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b50      	cmp	r3, #80	; 0x50
 8001908:	d106      	bne.n	8001918 <task_fuc+0x15c>
 800190a:	7823      	ldrb	r3, [r4, #0]
 800190c:	7862      	ldrb	r2, [r4, #1]
 800190e:	4293      	cmp	r3, r2
 8001910:	d97d      	bls.n	8001a0e <task_fuc+0x252>
 8001912:	3b01      	subs	r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	7023      	strb	r3, [r4, #0]

				if(elevator.now_floor == elevator.goal_floor) {
 8001918:	7823      	ldrb	r3, [r4, #0]
 800191a:	7862      	ldrb	r2, [r4, #1]
 800191c:	429a      	cmp	r2, r3
 800191e:	d10b      	bne.n	8001938 <task_fuc+0x17c>
					if(call_state == 1){
 8001920:	4978      	ldr	r1, [pc, #480]	; (8001b04 <task_fuc+0x348>)
 8001922:	780b      	ldrb	r3, [r1, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <task_fuc+0x178>
						buzM = 1;

						now_door_state = now_door_state == close ? open : close;
						call_state = 0;
 8001928:	2000      	movs	r0, #0
 800192a:	7008      	strb	r0, [r1, #0]
						user_floor = elevator.now_floor;
 800192c:	4976      	ldr	r1, [pc, #472]	; (8001b08 <task_fuc+0x34c>)
 800192e:	405d      	eors	r5, r3
 8001930:	700a      	strb	r2, [r1, #0]
						buzM = 1;
 8001932:	9304      	str	r3, [sp, #16]
					}
					elevator.move_state = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	70e3      	strb	r3, [r4, #3]
				}
			}
		}
		else elevator.move_tick = HAL_GetTick();

		if(HAL_GetTick() - door_tick > 30){
 8001938:	f000 fc16 	bl	8002168 <HAL_GetTick>
 800193c:	9b06      	ldr	r3, [sp, #24]
 800193e:	1ac0      	subs	r0, r0, r3
 8001940:	281e      	cmp	r0, #30
 8001942:	d96e      	bls.n	8001a22 <task_fuc+0x266>
			static uint8_t sensing_pir = 0;

			door_tick = HAL_GetTick();
 8001944:	f000 fc10 	bl	8002168 <HAL_GetTick>
 8001948:	ab08      	add	r3, sp, #32
 800194a:	3303      	adds	r3, #3
 800194c:	9006      	str	r0, [sp, #24]

			if(now_door_state == open && door_x > 0){
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	2d00      	cmp	r5, #0
 8001952:	d000      	beq.n	8001956 <task_fuc+0x19a>
 8001954:	e08a      	b.n	8001a6c <task_fuc+0x2b0>
 8001956:	2a00      	cmp	r2, #0
 8001958:	d100      	bne.n	800195c <task_fuc+0x1a0>
 800195a:	e0bd      	b.n	8001ad8 <task_fuc+0x31c>
				screen_update = 0;
 800195c:	4966      	ldr	r1, [pc, #408]	; (8001af8 <task_fuc+0x33c>)
				door_x--;
 800195e:	3a01      	subs	r2, #1
				setMotor(DRV8830_CW);
 8001960:	2001      	movs	r0, #1
				screen_update = 0;
 8001962:	700d      	strb	r5, [r1, #0]
				door_x--;
 8001964:	701a      	strb	r2, [r3, #0]
				setMotor(DRV8830_CW);
 8001966:	f7ff fc09 	bl	800117c <setMotor>

				if((PIR_LEFT || PIR_RIGHT) && sensing_pir == 0){
 800196a:	2102      	movs	r1, #2
 800196c:	4868      	ldr	r0, [pc, #416]	; (8001b10 <task_fuc+0x354>)
 800196e:	f000 fd17 	bl	80023a0 <HAL_GPIO_ReadPin>
 8001972:	2800      	cmp	r0, #0
 8001974:	d04f      	beq.n	8001a16 <task_fuc+0x25a>
 8001976:	4b67      	ldr	r3, [pc, #412]	; (8001b14 <task_fuc+0x358>)
 8001978:	781e      	ldrb	r6, [r3, #0]
 800197a:	2e00      	cmp	r6, #0
 800197c:	d151      	bne.n	8001a22 <task_fuc+0x266>
					sensing_pir = 1;

					BUZ_hz_set(4000);
 800197e:	20fa      	movs	r0, #250	; 0xfa
					sensing_pir = 1;
 8001980:	2201      	movs	r2, #1
					BUZ_hz_set(4000);
 8001982:	0100      	lsls	r0, r0, #4
					sensing_pir = 1;
 8001984:	701a      	strb	r2, [r3, #0]
					BUZ_hz_set(4000);
 8001986:	f7ff fc5f 	bl	8001248 <BUZ_hz_set>

					setMotor(DRV8830_STOP);
 800198a:	0030      	movs	r0, r6
 800198c:	f7ff fbf6 	bl	800117c <setMotor>
 8001990:	2505      	movs	r5, #5

					for(uint8_t i = 0 ; i < 5 ; i++){
						BUZ(1);
						HAL_Delay(50);
 8001992:	2632      	movs	r6, #50	; 0x32
	if(state) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001994:	f7ff fc42 	bl	800121c <BUZ.part.0>
						HAL_Delay(50);
 8001998:	0030      	movs	r0, r6
 800199a:	f000 fbeb 	bl	8002174 <HAL_Delay>
					for(uint8_t i = 0 ; i < 5 ; i++){
 800199e:	3d01      	subs	r5, #1
						BUZ(0);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff fc43 	bl	800122c <BUZ>
					for(uint8_t i = 0 ; i < 5 ; i++){
 80019a6:	b2ed      	uxtb	r5, r5
						HAL_Delay(50);
 80019a8:	0030      	movs	r0, r6
 80019aa:	f000 fbe3 	bl	8002174 <HAL_Delay>
					for(uint8_t i = 0 ; i < 5 ; i++){
 80019ae:	2d00      	cmp	r5, #0
 80019b0:	d1f0      	bne.n	8001994 <task_fuc+0x1d8>
					}

					now_door_state = close;
 80019b2:	3501      	adds	r5, #1
 80019b4:	e035      	b.n	8001a22 <task_fuc+0x266>
 80019b6:	2600      	movs	r6, #0
 80019b8:	b2f3      	uxtb	r3, r6
 80019ba:	9307      	str	r3, [sp, #28]
					if(area_check(&curXY, &keypad[i])){
 80019bc:	4b56      	ldr	r3, [pc, #344]	; (8001b18 <task_fuc+0x35c>)
 80019be:	00f1      	lsls	r1, r6, #3
 80019c0:	0038      	movs	r0, r7
 80019c2:	1859      	adds	r1, r3, r1
 80019c4:	f7ff fcce 	bl	8001364 <area_check>
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d00a      	beq.n	80019e2 <task_fuc+0x226>
						screen_update = 0;
 80019cc:	2200      	movs	r2, #0
 80019ce:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <task_fuc+0x33c>)
						now_door_state = close;
 80019d0:	9d01      	ldr	r5, [sp, #4]
						screen_update = 0;
 80019d2:	701a      	strb	r2, [r3, #0]
						call_state = 1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <task_fuc+0x348>)
						elevator.move_state = 1;
 80019d8:	70e3      	strb	r3, [r4, #3]
						call_state = 1;
 80019da:	7013      	strb	r3, [r2, #0]
						elevator.goal_floor = i;
 80019dc:	9b07      	ldr	r3, [sp, #28]
 80019de:	7063      	strb	r3, [r4, #1]
						break;
 80019e0:	e741      	b.n	8001866 <task_fuc+0xaa>
				for(FLOOR_Typedef i = 0 ; i < max_floor ; i++){
 80019e2:	3601      	adds	r6, #1
 80019e4:	2e0a      	cmp	r6, #10
 80019e6:	d1e7      	bne.n	80019b8 <task_fuc+0x1fc>
 80019e8:	e73d      	b.n	8001866 <task_fuc+0xaa>
					while(elevator.now_floor == elevator.goal_floor) elevator.goal_floor = rand() % max_floor;
 80019ea:	f002 fcf3 	bl	80043d4 <rand>
 80019ee:	210a      	movs	r1, #10
 80019f0:	f7fe fd16 	bl	8000420 <__aeabi_idivmod>
 80019f4:	7061      	strb	r1, [r4, #1]
 80019f6:	e76e      	b.n	80018d6 <task_fuc+0x11a>
		else elevator.floor_tick = HAL_GetTick();
 80019f8:	f000 fbb6 	bl	8002168 <HAL_GetTick>
 80019fc:	60a0      	str	r0, [r4, #8]
		if(elevator.move_state == 1){
 80019fe:	78e3      	ldrb	r3, [r4, #3]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d100      	bne.n	8001a06 <task_fuc+0x24a>
 8001a04:	e76e      	b.n	80018e4 <task_fuc+0x128>
		else elevator.move_tick = HAL_GetTick();
 8001a06:	f000 fbaf 	bl	8002168 <HAL_GetTick>
 8001a0a:	6060      	str	r0, [r4, #4]
 8001a0c:	e794      	b.n	8001938 <task_fuc+0x17c>
				if(door_x == 80) elevator.now_floor = elevator.now_floor > elevator.goal_floor ? elevator.now_floor - 1 : elevator.now_floor < elevator.goal_floor ? elevator.now_floor + 1 : elevator.now_floor;
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d281      	bcs.n	8001916 <task_fuc+0x15a>
 8001a12:	3301      	adds	r3, #1
 8001a14:	e77e      	b.n	8001914 <task_fuc+0x158>
				if((PIR_LEFT || PIR_RIGHT) && sensing_pir == 0){
 8001a16:	2108      	movs	r1, #8
 8001a18:	483d      	ldr	r0, [pc, #244]	; (8001b10 <task_fuc+0x354>)
 8001a1a:	f000 fcc1 	bl	80023a0 <HAL_GPIO_ReadPin>
 8001a1e:	2800      	cmp	r0, #0
 8001a20:	d1a9      	bne.n	8001976 <task_fuc+0x1ba>
				}
			}
			else { setMotor(DRV8830_STOP); sensing_pir = 0; }
		}

		if(buzM == 1){
 8001a22:	9b04      	ldr	r3, [sp, #16]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d15e      	bne.n	8001ae6 <task_fuc+0x32a>
	if(state) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a28:	f7ff fbf8 	bl	800121c <BUZ.part.0>
			static uint16_t buz_hz = 600;

			BUZ(1);
			BUZ_hz_set(buz_hz);
 8001a2c:	4e3b      	ldr	r6, [pc, #236]	; (8001b1c <task_fuc+0x360>)
 8001a2e:	8830      	ldrh	r0, [r6, #0]
 8001a30:	f7ff fc0a 	bl	8001248 <BUZ_hz_set>

			if(HAL_GetTick() - buz_tick >= 200){
 8001a34:	f000 fb98 	bl	8002168 <HAL_GetTick>
 8001a38:	9b03      	ldr	r3, [sp, #12]
 8001a3a:	1ac0      	subs	r0, r0, r3
 8001a3c:	28c7      	cmp	r0, #199	; 0xc7
 8001a3e:	d905      	bls.n	8001a4c <task_fuc+0x290>
				buz_tick = HAL_GetTick();
 8001a40:	f000 fb92 	bl	8002168 <HAL_GetTick>

				buz_hz += 200;
 8001a44:	8833      	ldrh	r3, [r6, #0]
				buz_tick = HAL_GetTick();
 8001a46:	9003      	str	r0, [sp, #12]
				buz_hz += 200;
 8001a48:	33c8      	adds	r3, #200	; 0xc8
 8001a4a:	8033      	strh	r3, [r6, #0]
			}

			if(buz_hz >= 1400) { BUZ(0); buzM = 0; buz_hz = 600; }
 8001a4c:	23af      	movs	r3, #175	; 0xaf
 8001a4e:	8832      	ldrh	r2, [r6, #0]
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d307      	bcc.n	8001a66 <task_fuc+0x2aa>
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff fbe8 	bl	800122c <BUZ>
 8001a5c:	2396      	movs	r3, #150	; 0x96
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	8033      	strh	r3, [r6, #0]
 8001a62:	2300      	movs	r3, #0
 8001a64:	9304      	str	r3, [sp, #16]
		}
		else buz_tick = HAL_GetTick();

		befo_touch = curXY.touched;
 8001a66:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <task_fuc+0x338>)
 8001a68:	791e      	ldrb	r6, [r3, #4]
		get_touch(&curXY);
 8001a6a:	e6c7      	b.n	80017fc <task_fuc+0x40>
			else if(now_door_state == close && door_x < 80){
 8001a6c:	2a4f      	cmp	r2, #79	; 0x4f
 8001a6e:	d833      	bhi.n	8001ad8 <task_fuc+0x31c>
				screen_update = 0;
 8001a70:	2000      	movs	r0, #0
 8001a72:	4921      	ldr	r1, [pc, #132]	; (8001af8 <task_fuc+0x33c>)
				door_x++;
 8001a74:	3201      	adds	r2, #1
				screen_update = 0;
 8001a76:	7008      	strb	r0, [r1, #0]
				setMotor(DRV8830_CCW);
 8001a78:	3002      	adds	r0, #2
				door_x++;
 8001a7a:	701a      	strb	r2, [r3, #0]
				setMotor(DRV8830_CCW);
 8001a7c:	f7ff fb7e 	bl	800117c <setMotor>
				if((PIR_LEFT || PIR_RIGHT) && sensing_pir == 0){
 8001a80:	2102      	movs	r1, #2
 8001a82:	4823      	ldr	r0, [pc, #140]	; (8001b10 <task_fuc+0x354>)
 8001a84:	f000 fc8c 	bl	80023a0 <HAL_GPIO_ReadPin>
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	d01e      	beq.n	8001aca <task_fuc+0x30e>
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <task_fuc+0x358>)
 8001a8e:	781e      	ldrb	r6, [r3, #0]
 8001a90:	2e00      	cmp	r6, #0
 8001a92:	d1c6      	bne.n	8001a22 <task_fuc+0x266>
					BUZ_hz_set(4000);
 8001a94:	20fa      	movs	r0, #250	; 0xfa
					sensing_pir = 1;
 8001a96:	2201      	movs	r2, #1
					BUZ_hz_set(4000);
 8001a98:	0100      	lsls	r0, r0, #4
					sensing_pir = 1;
 8001a9a:	701a      	strb	r2, [r3, #0]
					BUZ_hz_set(4000);
 8001a9c:	f7ff fbd4 	bl	8001248 <BUZ_hz_set>
					setMotor(DRV8830_STOP);
 8001aa0:	0030      	movs	r0, r6
 8001aa2:	f7ff fb6b 	bl	800117c <setMotor>
 8001aa6:	2505      	movs	r5, #5
						HAL_Delay(50);
 8001aa8:	2632      	movs	r6, #50	; 0x32
	if(state) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001aaa:	f7ff fbb7 	bl	800121c <BUZ.part.0>
						HAL_Delay(50);
 8001aae:	0030      	movs	r0, r6
 8001ab0:	f000 fb60 	bl	8002174 <HAL_Delay>
					for(uint8_t i = 0 ; i < 5 ; i++){
 8001ab4:	3d01      	subs	r5, #1
						BUZ(0);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff fbb8 	bl	800122c <BUZ>
					for(uint8_t i = 0 ; i < 5 ; i++){
 8001abc:	b2ed      	uxtb	r5, r5
						HAL_Delay(50);
 8001abe:	0030      	movs	r0, r6
 8001ac0:	f000 fb58 	bl	8002174 <HAL_Delay>
					for(uint8_t i = 0 ; i < 5 ; i++){
 8001ac4:	2d00      	cmp	r5, #0
 8001ac6:	d1f0      	bne.n	8001aaa <task_fuc+0x2ee>
 8001ac8:	e7ab      	b.n	8001a22 <task_fuc+0x266>
				if((PIR_LEFT || PIR_RIGHT) && sensing_pir == 0){
 8001aca:	2108      	movs	r1, #8
 8001acc:	4810      	ldr	r0, [pc, #64]	; (8001b10 <task_fuc+0x354>)
 8001ace:	f000 fc67 	bl	80023a0 <HAL_GPIO_ReadPin>
 8001ad2:	2800      	cmp	r0, #0
 8001ad4:	d1da      	bne.n	8001a8c <task_fuc+0x2d0>
 8001ad6:	e7a4      	b.n	8001a22 <task_fuc+0x266>
			else { setMotor(DRV8830_STOP); sensing_pir = 0; }
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff fb4f 	bl	800117c <setMotor>
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <task_fuc+0x358>)
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	e79d      	b.n	8001a22 <task_fuc+0x266>
		else buz_tick = HAL_GetTick();
 8001ae6:	f000 fb3f 	bl	8002168 <HAL_GetTick>
 8001aea:	9003      	str	r0, [sp, #12]
 8001aec:	e7bb      	b.n	8001a66 <task_fuc+0x2aa>
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	08005ac8 	.word	0x08005ac8
 8001af4:	2000012e 	.word	0x2000012e
 8001af8:	200002b0 	.word	0x200002b0
 8001afc:	08005720 	.word	0x08005720
 8001b00:	20000002 	.word	0x20000002
 8001b04:	2000012c 	.word	0x2000012c
 8001b08:	200002b2 	.word	0x200002b2
 8001b0c:	0000270f 	.word	0x0000270f
 8001b10:	50000400 	.word	0x50000400
 8001b14:	200002b1 	.word	0x200002b1
 8001b18:	20000250 	.word	0x20000250
 8001b1c:	20000000 	.word	0x20000000

08001b20 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001b20:	b510      	push	{r4, lr}
 8001b22:	b09c      	sub	sp, #112	; 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b24:	2224      	movs	r2, #36	; 0x24
 8001b26:	2100      	movs	r1, #0
 8001b28:	a80f      	add	r0, sp, #60	; 0x3c
 8001b2a:	f002 fb38 	bl	800419e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b2e:	2214      	movs	r2, #20
 8001b30:	2100      	movs	r1, #0
 8001b32:	a801      	add	r0, sp, #4
 8001b34:	f002 fb33 	bl	800419e <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b38:	2220      	movs	r2, #32
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	a806      	add	r0, sp, #24
 8001b3e:	f002 fb2e 	bl	800419e <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b42:	491d      	ldr	r1, [pc, #116]	; (8001bb8 <SystemClock_Config+0x98>)
 8001b44:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <SystemClock_Config+0x9c>)
 8001b46:	680b      	ldr	r3, [r1, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b48:	2401      	movs	r4, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b54:	2302      	movs	r3, #2
 8001b56:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b58:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	02db      	lsls	r3, r3, #11
 8001b62:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001b64:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b66:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001b68:	03db      	lsls	r3, r3, #15
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b6a:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b6c:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b6e:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001b70:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b72:	f001 f96f 	bl	8002e54 <HAL_RCC_OscConfig>
 8001b76:	2800      	cmp	r0, #0
 8001b78:	d001      	beq.n	8001b7e <SystemClock_Config+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7a:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b7c:	e7fe      	b.n	8001b7c <SystemClock_Config+0x5c>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b7e:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b80:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b82:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b84:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b86:	3b0c      	subs	r3, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b88:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b8a:	0021      	movs	r1, r4
 8001b8c:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b8e:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b90:	f001 fbe2 	bl	8003358 <HAL_RCC_ClockConfig>
 8001b94:	2800      	cmp	r0, #0
 8001b96:	d001      	beq.n	8001b9c <SystemClock_Config+0x7c>
 8001b98:	b672      	cpsid	i
	while (1)
 8001b9a:	e7fe      	b.n	8001b9a <SystemClock_Config+0x7a>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001b9c:	2309      	movs	r3, #9
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b9e:	9008      	str	r0, [sp, #32]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ba0:	900b      	str	r0, [sp, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba2:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001ba4:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba6:	f001 fcc5 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d001      	beq.n	8001bb2 <SystemClock_Config+0x92>
 8001bae:	b672      	cpsid	i
	while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <SystemClock_Config+0x90>
}
 8001bb2:	b01c      	add	sp, #112	; 0x70
 8001bb4:	bd10      	pop	{r4, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	40007000 	.word	0x40007000
 8001bbc:	ffffe7ff 	.word	0xffffe7ff

08001bc0 <main>:
{
 8001bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	2501      	movs	r5, #1
{
 8001bc4:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 8001bc6:	f000 faaf 	bl	8002128 <HAL_Init>
	SystemClock_Config();
 8001bca:	f7ff ffa9 	bl	8001b20 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bce:	2214      	movs	r2, #20
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	a805      	add	r0, sp, #20
 8001bd4:	f002 fae3 	bl	800419e <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd8:	2102      	movs	r1, #2
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001bda:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b79      	ldr	r3, [pc, #484]	; (8001dc4 <main+0x204>)
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001bde:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be2:	2400      	movs	r4, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	432a      	orrs	r2, r5
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	huart1.Instance = USART1;
 8001bea:	4e77      	ldr	r6, [pc, #476]	; (8001dc8 <main+0x208>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	402a      	ands	r2, r5
 8001bee:	9201      	str	r2, [sp, #4]
 8001bf0:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfc:	400b      	ands	r3, r1
 8001bfe:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001c00:	3136      	adds	r1, #54	; 0x36
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001c04:	f000 fbd2 	bl	80023ac <HAL_GPIO_WritePin>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8001c0a:	2307      	movs	r3, #7
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0c:	a905      	add	r1, sp, #20
 8001c0e:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8001c10:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c12:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c14:	9507      	str	r5, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f000 fb03 	bl	8002220 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001c1c:	2338      	movs	r3, #56	; 0x38
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	a905      	add	r1, sp, #20
 8001c20:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001c22:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f000 faf9 	bl	8002220 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8001c2e:	230a      	movs	r3, #10
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	4866      	ldr	r0, [pc, #408]	; (8001dcc <main+0x20c>)
 8001c32:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8001c34:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c36:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f000 faf1 	bl	8002220 <HAL_GPIO_Init>
	huart1.Init.BaudRate = 9600;
 8001c3e:	2396      	movs	r3, #150	; 0x96
	huart1.Instance = USART1;
 8001c40:	4863      	ldr	r0, [pc, #396]	; (8001dd0 <main+0x210>)
	huart1.Init.BaudRate = 9600;
 8001c42:	019b      	lsls	r3, r3, #6
 8001c44:	6043      	str	r3, [r0, #4]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c46:	230c      	movs	r3, #12
	huart1.Instance = USART1;
 8001c48:	6006      	str	r6, [r0, #0]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4a:	6084      	str	r4, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c4c:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c4e:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c50:	6143      	str	r3, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c52:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	61c4      	str	r4, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c56:	6204      	str	r4, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c58:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c5a:	f002 fa27 	bl	80040ac <HAL_UART_Init>
 8001c5e:	0007      	movs	r7, r0
 8001c60:	42a0      	cmp	r0, r4
 8001c62:	d001      	beq.n	8001c68 <main+0xa8>
 8001c64:	b672      	cpsid	i
	while (1)
 8001c66:	e7fe      	b.n	8001c66 <main+0xa6>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c68:	0001      	movs	r1, r0
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	a803      	add	r0, sp, #12
 8001c6e:	f002 fa96 	bl	800419e <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001c72:	2210      	movs	r2, #16
 8001c74:	0039      	movs	r1, r7
 8001c76:	a805      	add	r0, sp, #20
 8001c78:	f002 fa91 	bl	800419e <memset>
	htim2.Instance = TIM2;
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	4c55      	ldr	r4, [pc, #340]	; (8001dd4 <main+0x214>)
 8001c80:	05db      	lsls	r3, r3, #23
 8001c82:	6023      	str	r3, [r4, #0]
	htim2.Init.Prescaler = 32-1;
 8001c84:	231f      	movs	r3, #31
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c86:	0020      	movs	r0, r4
	htim2.Init.Prescaler = 32-1;
 8001c88:	6063      	str	r3, [r4, #4]
	htim2.Init.Period = 250-1;
 8001c8a:	33da      	adds	r3, #218	; 0xda
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8c:	60a7      	str	r7, [r4, #8]
	htim2.Init.Period = 250-1;
 8001c8e:	60e3      	str	r3, [r4, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c90:	6127      	str	r7, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c92:	6167      	str	r7, [r4, #20]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c94:	f001 fdf2 	bl	800387c <HAL_TIM_PWM_Init>
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	d001      	beq.n	8001ca0 <main+0xe0>
 8001c9c:	b672      	cpsid	i
	while (1)
 8001c9e:	e7fe      	b.n	8001c9e <main+0xde>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca0:	9003      	str	r0, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca2:	9004      	str	r0, [sp, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca4:	a903      	add	r1, sp, #12
 8001ca6:	0020      	movs	r0, r4
 8001ca8:	f001 fea2 	bl	80039f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	1e02      	subs	r2, r0, #0
 8001cae:	d001      	beq.n	8001cb4 <main+0xf4>
 8001cb0:	b672      	cpsid	i
	while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <main+0xf2>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb4:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb6:	9007      	str	r0, [sp, #28]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb8:	9305      	str	r3, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cba:	9008      	str	r0, [sp, #32]
	sConfigOC.Pulse = 125-1;
 8001cbc:	331c      	adds	r3, #28
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cbe:	0020      	movs	r0, r4
 8001cc0:	a905      	add	r1, sp, #20
	sConfigOC.Pulse = 125-1;
 8001cc2:	9306      	str	r3, [sp, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc4:	f001 fe06 	bl	80038d4 <HAL_TIM_PWM_ConfigChannel>
 8001cc8:	1e07      	subs	r7, r0, #0
 8001cca:	d001      	beq.n	8001cd0 <main+0x110>
 8001ccc:	b672      	cpsid	i
	while (1)
 8001cce:	e7fe      	b.n	8001cce <main+0x10e>
	HAL_TIM_MspPostInit(&htim2);
 8001cd0:	0020      	movs	r0, r4
 8001cd2:	f000 f927 	bl	8001f24 <HAL_TIM_MspPostInit>
	hi2c1.Instance = I2C1;
 8001cd6:	4c40      	ldr	r4, [pc, #256]	; (8001dd8 <main+0x218>)
 8001cd8:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <main+0x21c>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cda:	0020      	movs	r0, r4
	hi2c1.Instance = I2C1;
 8001cdc:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x00300F38;
 8001cde:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <main+0x220>)
	hi2c1.Init.OwnAddress1 = 0;
 8001ce0:	60a7      	str	r7, [r4, #8]
	hi2c1.Init.Timing = 0x00300F38;
 8001ce2:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce4:	60e5      	str	r5, [r4, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce6:	6127      	str	r7, [r4, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001ce8:	6167      	str	r7, [r4, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cea:	61a7      	str	r7, [r4, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cec:	61e7      	str	r7, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cee:	6227      	str	r7, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cf0:	f000 fce4 	bl	80026bc <HAL_I2C_Init>
 8001cf4:	1e01      	subs	r1, r0, #0
 8001cf6:	d001      	beq.n	8001cfc <main+0x13c>
 8001cf8:	b672      	cpsid	i
	while (1)
 8001cfa:	e7fe      	b.n	8001cfa <main+0x13a>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cfc:	0020      	movs	r0, r4
 8001cfe:	f001 f817 	bl	8002d30 <HAL_I2CEx_ConfigAnalogFilter>
 8001d02:	1e01      	subs	r1, r0, #0
 8001d04:	d001      	beq.n	8001d0a <main+0x14a>
 8001d06:	b672      	cpsid	i
	while (1)
 8001d08:	e7fe      	b.n	8001d08 <main+0x148>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d0a:	0020      	movs	r0, r4
 8001d0c:	f001 f836 	bl	8002d7c <HAL_I2CEx_ConfigDigitalFilter>
 8001d10:	1e04      	subs	r4, r0, #0
 8001d12:	d001      	beq.n	8001d18 <main+0x158>
 8001d14:	b672      	cpsid	i
	while (1)
 8001d16:	e7fe      	b.n	8001d16 <main+0x156>
	initEns160();
 8001d18:	f7ff fa54 	bl	80011c4 <initEns160>
	initDrv8830();
 8001d1c:	f7ff fa1a 	bl	8001154 <initDrv8830>
	LED1(0);
 8001d20:	20a0      	movs	r0, #160	; 0xa0
 8001d22:	002a      	movs	r2, r5
 8001d24:	2108      	movs	r1, #8
 8001d26:	05c0      	lsls	r0, r0, #23
 8001d28:	f000 fb40 	bl	80023ac <HAL_GPIO_WritePin>
	LED2(0);
 8001d2c:	20a0      	movs	r0, #160	; 0xa0
 8001d2e:	002a      	movs	r2, r5
 8001d30:	2110      	movs	r1, #16
 8001d32:	05c0      	lsls	r0, r0, #23
 8001d34:	f000 fb3a 	bl	80023ac <HAL_GPIO_WritePin>
	LED3(0);
 8001d38:	20a0      	movs	r0, #160	; 0xa0
 8001d3a:	002a      	movs	r2, r5
 8001d3c:	2120      	movs	r1, #32
 8001d3e:	05c0      	lsls	r0, r0, #23
 8001d40:	f000 fb34 	bl	80023ac <HAL_GPIO_WritePin>
	setMotor(DRV8830_STOP);
 8001d44:	0020      	movs	r0, r4
 8001d46:	f7ff fa19 	bl	800117c <setMotor>
	nextion_inst_set("baud=921600");
 8001d4a:	4f26      	ldr	r7, [pc, #152]	; (8001de4 <main+0x224>)
 8001d4c:	0038      	movs	r0, r7
 8001d4e:	f7ff faab 	bl	80012a8 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 8001d52:	0038      	movs	r0, r7
 8001d54:	f7ff faa8 	bl	80012a8 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 8001d58:	0038      	movs	r0, r7
 8001d5a:	f7ff faa5 	bl	80012a8 <nextion_inst_set>
	HAL_Delay(50);
 8001d5e:	2032      	movs	r0, #50	; 0x32
 8001d60:	f000 fa08 	bl	8002174 <HAL_Delay>
	USART1->CR1 &= (~USART_CR1_UE);
 8001d64:	6833      	ldr	r3, [r6, #0]
	HAL_Delay(1000);
 8001d66:	20fa      	movs	r0, #250	; 0xfa
	USART1->CR1 &= (~USART_CR1_UE);
 8001d68:	43ab      	bics	r3, r5
 8001d6a:	6033      	str	r3, [r6, #0]
	USART1->BRR = 0x23;
 8001d6c:	2323      	movs	r3, #35	; 0x23
		keypad[i].x0 = (i / 5) * 70 + 350;
 8001d6e:	2705      	movs	r7, #5
	USART1->BRR = 0x23;
 8001d70:	60f3      	str	r3, [r6, #12]
	USART1->CR1 |= USART_CR1_UE;
 8001d72:	6833      	ldr	r3, [r6, #0]
	HAL_Delay(1000);
 8001d74:	0080      	lsls	r0, r0, #2
	USART1->CR1 |= USART_CR1_UE;
 8001d76:	431d      	orrs	r5, r3
 8001d78:	6035      	str	r5, [r6, #0]
	HAL_Delay(1000);
 8001d7a:	f000 f9fb 	bl	8002174 <HAL_Delay>
	for(uint8_t i = 0 ; i < 10 ; i++){
 8001d7e:	4e1a      	ldr	r6, [pc, #104]	; (8001de8 <main+0x228>)
		keypad[i].x0 = (i / 5) * 70 + 350;
 8001d80:	0039      	movs	r1, r7
 8001d82:	0020      	movs	r0, r4
 8001d84:	f7fe f9dc 	bl	8000140 <__udivsi3>
 8001d88:	2346      	movs	r3, #70	; 0x46
 8001d8a:	b2c5      	uxtb	r5, r0
 8001d8c:	435d      	muls	r5, r3
 8001d8e:	002b      	movs	r3, r5
 8001d90:	335f      	adds	r3, #95	; 0x5f
 8001d92:	33ff      	adds	r3, #255	; 0xff
 8001d94:	8033      	strh	r3, [r6, #0]
		keypad[i].y0 = (i % 5) * 40 + 60;
 8001d96:	0020      	movs	r0, r4
 8001d98:	0039      	movs	r1, r7
 8001d9a:	f7fe fa57 	bl	800024c <__aeabi_uidivmod>
 8001d9e:	2328      	movs	r3, #40	; 0x28
 8001da0:	b2c9      	uxtb	r1, r1
 8001da2:	4359      	muls	r1, r3
 8001da4:	000b      	movs	r3, r1
		keypad[i].x1 = keypad[i].x0 + 30;
 8001da6:	357d      	adds	r5, #125	; 0x7d
	for(uint8_t i = 0 ; i < 10 ; i++){
 8001da8:	3401      	adds	r4, #1
		keypad[i].y0 = (i % 5) * 40 + 60;
 8001daa:	333c      	adds	r3, #60	; 0x3c
		keypad[i].x1 = keypad[i].x0 + 30;
 8001dac:	35ff      	adds	r5, #255	; 0xff
		keypad[i].y1 = keypad[i].y0 + 30;
 8001dae:	315a      	adds	r1, #90	; 0x5a
	for(uint8_t i = 0 ; i < 10 ; i++){
 8001db0:	b2e4      	uxtb	r4, r4
		keypad[i].y0 = (i % 5) * 40 + 60;
 8001db2:	8073      	strh	r3, [r6, #2]
		keypad[i].x1 = keypad[i].x0 + 30;
 8001db4:	80b5      	strh	r5, [r6, #4]
		keypad[i].y1 = keypad[i].y0 + 30;
 8001db6:	80f1      	strh	r1, [r6, #6]
	for(uint8_t i = 0 ; i < 10 ; i++){
 8001db8:	3608      	adds	r6, #8
 8001dba:	2c0a      	cmp	r4, #10
 8001dbc:	d1e0      	bne.n	8001d80 <main+0x1c0>
	task_fuc();
 8001dbe:	f7ff fcfd 	bl	80017bc <task_fuc>
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40013800 	.word	0x40013800
 8001dcc:	50000400 	.word	0x50000400
 8001dd0:	200001c8 	.word	0x200001c8
 8001dd4:	20000188 	.word	0x20000188
 8001dd8:	20000134 	.word	0x20000134
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	00300f38 	.word	0x00300f38
 8001de4:	08005ad2 	.word	0x08005ad2
 8001de8:	20000250 	.word	0x20000250

08001dec <getTempSht41>:
#include "sht41.h"

extern I2C_HandleTypeDef hi2c1;

SHT41_t	getTempSht41() {
 8001dec:	b570      	push	{r4, r5, r6, lr}
	uint8_t txData = SHT41_MeasureHigh;
 8001dee:	250f      	movs	r5, #15
 8001df0:	23fd      	movs	r3, #253	; 0xfd
	uint8_t	rxData[6];
	SHT41_t result;
	uint16_t buf[2];

	HAL_I2C_Init(&hi2c1);
 8001df2:	4e21      	ldr	r6, [pc, #132]	; (8001e78 <getTempSht41+0x8c>)
SHT41_t	getTempSht41() {
 8001df4:	b086      	sub	sp, #24
 8001df6:	0004      	movs	r4, r0
	uint8_t txData = SHT41_MeasureHigh;
 8001df8:	446d      	add	r5, sp
	HAL_I2C_Init(&hi2c1);
 8001dfa:	0030      	movs	r0, r6
	uint8_t txData = SHT41_MeasureHigh;
 8001dfc:	702b      	strb	r3, [r5, #0]
	HAL_I2C_Init(&hi2c1);
 8001dfe:	f000 fc5d 	bl	80026bc <HAL_I2C_Init>
	int status = HAL_I2C_Master_Transmit(&hi2c1, SHT41_DeviceAddress, &txData, 1, 1);
 8001e02:	2301      	movs	r3, #1
 8001e04:	002a      	movs	r2, r5
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2189      	movs	r1, #137	; 0x89
 8001e0a:	0030      	movs	r0, r6
 8001e0c:	f000 fcac 	bl	8002768 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001e10:	2014      	movs	r0, #20
 8001e12:	f000 f9af 	bl	8002174 <HAL_Delay>
	status = HAL_I2C_Master_Receive(&hi2c1, SHT41_DeviceAddress, rxData, 6, 10);
 8001e16:	230a      	movs	r3, #10
 8001e18:	ad04      	add	r5, sp, #16
 8001e1a:	002a      	movs	r2, r5
 8001e1c:	2189      	movs	r1, #137	; 0x89
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	0030      	movs	r0, r6
 8001e22:	3b04      	subs	r3, #4
 8001e24:	f000 fd32 	bl	800288c <HAL_I2C_Master_Receive>
	buf[0] = rxData[0] << 8 | rxData[1];
	buf[1] = rxData[3] << 8 | rxData[4];
	result.temperature = -45.0f + (175.0f * ((float)buf[0] / 65535.0f));
	result.humidity = -6.0f + (125.0f * ((float)buf[1] / 65535.0f));
 8001e28:	2213      	movs	r2, #19
 8001e2a:	446a      	add	r2, sp
 8001e2c:	7850      	ldrb	r0, [r2, #1]
 8001e2e:	7813      	ldrb	r3, [r2, #0]
 8001e30:	0200      	lsls	r0, r0, #8
 8001e32:	4318      	orrs	r0, r3
 8001e34:	ba40      	rev16	r0, r0
 8001e36:	b280      	uxth	r0, r0
 8001e38:	f7ff f836 	bl	8000ea8 <__aeabi_ui2f>
 8001e3c:	490f      	ldr	r1, [pc, #60]	; (8001e7c <getTempSht41+0x90>)
 8001e3e:	f7fe fc27 	bl	8000690 <__aeabi_fdiv>
 8001e42:	490f      	ldr	r1, [pc, #60]	; (8001e80 <getTempSht41+0x94>)
 8001e44:	f7fe fd3c 	bl	80008c0 <__aeabi_fmul>
 8001e48:	490e      	ldr	r1, [pc, #56]	; (8001e84 <getTempSht41+0x98>)
 8001e4a:	f7fe fe5f 	bl	8000b0c <__aeabi_fsub>
 8001e4e:	1c06      	adds	r6, r0, #0
	result.temperature = -45.0f + (175.0f * ((float)buf[0] / 65535.0f));
 8001e50:	8828      	ldrh	r0, [r5, #0]
 8001e52:	ba40      	rev16	r0, r0
 8001e54:	b280      	uxth	r0, r0
 8001e56:	f7ff f827 	bl	8000ea8 <__aeabi_ui2f>
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <getTempSht41+0x90>)
 8001e5c:	f7fe fc18 	bl	8000690 <__aeabi_fdiv>
 8001e60:	4909      	ldr	r1, [pc, #36]	; (8001e88 <getTempSht41+0x9c>)
 8001e62:	f7fe fd2d 	bl	80008c0 <__aeabi_fmul>
 8001e66:	4909      	ldr	r1, [pc, #36]	; (8001e8c <getTempSht41+0xa0>)
 8001e68:	f7fe fe50 	bl	8000b0c <__aeabi_fsub>
	return result;
 8001e6c:	6020      	str	r0, [r4, #0]
}
 8001e6e:	0020      	movs	r0, r4
	return result;
 8001e70:	6066      	str	r6, [r4, #4]
}
 8001e72:	b006      	add	sp, #24
 8001e74:	bd70      	pop	{r4, r5, r6, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	20000134 	.word	0x20000134
 8001e7c:	477fff00 	.word	0x477fff00
 8001e80:	42fa0000 	.word	0x42fa0000
 8001e84:	40c00000 	.word	0x40c00000
 8001e88:	432f0000 	.word	0x432f0000
 8001e8c:	42340000 	.word	0x42340000

08001e90 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e90:	2201      	movs	r2, #1
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_MspInit+0x18>)
 8001e94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e96:	430a      	orrs	r2, r1
 8001e98:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	2280      	movs	r2, #128	; 0x80
 8001e9c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e9e:	0552      	lsls	r2, r2, #21
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea4:	4770      	bx	lr
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eac:	b510      	push	{r4, lr}
 8001eae:	0004      	movs	r4, r0
 8001eb0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb2:	2214      	movs	r2, #20
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	a801      	add	r0, sp, #4
 8001eb8:	f002 f971 	bl	800419e <memset>
  if(hi2c->Instance==I2C1)
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_I2C_MspInit+0x50>)
 8001ebe:	6822      	ldr	r2, [r4, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d119      	bne.n	8001ef8 <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	4c0e      	ldr	r4, [pc, #56]	; (8001f00 <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec8:	480e      	ldr	r0, [pc, #56]	; (8001f04 <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001ed0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ed2:	400b      	ands	r3, r1
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ed8:	23c0      	movs	r3, #192	; 0xc0
 8001eda:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001edc:	3bae      	subs	r3, #174	; 0xae
 8001ede:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	3b0f      	subs	r3, #15
 8001ee2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001ee6:	3b02      	subs	r3, #2
 8001ee8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f000 f999 	bl	8002220 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ef2:	039b      	lsls	r3, r3, #14
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ef8:	b006      	add	sp, #24
 8001efa:	bd10      	pop	{r4, pc}
 8001efc:	40005400 	.word	0x40005400
 8001f00:	40021000 	.word	0x40021000
 8001f04:	50000400 	.word	0x50000400

08001f08 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	6802      	ldr	r2, [r0, #0]
 8001f0c:	05db      	lsls	r3, r3, #23
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d104      	bne.n	8001f1c <HAL_TIM_PWM_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f12:	2301      	movs	r3, #1
 8001f14:	4a02      	ldr	r2, [pc, #8]	; (8001f20 <HAL_TIM_PWM_MspInit+0x18>)
 8001f16:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f1c:	4770      	bx	lr
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	40021000 	.word	0x40021000

08001f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f24:	b510      	push	{r4, lr}
 8001f26:	0004      	movs	r4, r0
 8001f28:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2a:	2214      	movs	r2, #20
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	a801      	add	r0, sp, #4
 8001f30:	f002 f935 	bl	800419e <memset>
  if(htim->Instance==TIM2)
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	6822      	ldr	r2, [r4, #0]
 8001f38:	05db      	lsls	r3, r3, #23
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d114      	bne.n	8001f68 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2001      	movs	r0, #1
 8001f40:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_TIM_MspPostInit+0x48>)
 8001f42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f44:	4301      	orrs	r1, r0
 8001f46:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001f48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4c:	4003      	ands	r3, r0
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	021b      	lsls	r3, r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f58:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8001f60:	3303      	adds	r3, #3
 8001f62:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f000 f95c 	bl	8002220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f68:	b006      	add	sp, #24
 8001f6a:	bd10      	pop	{r4, pc}
 8001f6c:	40021000 	.word	0x40021000

08001f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f70:	b510      	push	{r4, lr}
 8001f72:	0004      	movs	r4, r0
 8001f74:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	2214      	movs	r2, #20
 8001f78:	2100      	movs	r1, #0
 8001f7a:	a801      	add	r0, sp, #4
 8001f7c:	f002 f90f 	bl	800419e <memset>
  if(huart->Instance==USART1)
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_UART_MspInit+0x54>)
 8001f82:	6822      	ldr	r2, [r4, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d11b      	bne.n	8001fc0 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_UART_MspInit+0x58>)
 8001f8c:	01d2      	lsls	r2, r2, #7
 8001f8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f90:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f92:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	400b      	ands	r3, r1
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001fa8:	23c0      	movs	r3, #192	; 0xc0
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb2:	185b      	adds	r3, r3, r1
 8001fb4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001fb6:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001fba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	f000 f930 	bl	8002220 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fc0:	b006      	add	sp, #24
 8001fc2:	bd10      	pop	{r4, pc}
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	40021000 	.word	0x40021000

08001fcc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <NMI_Handler>

08001fce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <HardFault_Handler>

08001fd0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001fd0:	4770      	bx	lr

08001fd2 <PendSV_Handler>:
 8001fd2:	4770      	bx	lr

08001fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd6:	f000 f8bb 	bl	8002150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fda:	bd10      	pop	{r4, pc}

08001fdc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001fdc:	2001      	movs	r0, #1
 8001fde:	4770      	bx	lr

08001fe0 <_kill>:

int _kill(int pid, int sig)
{
 8001fe0:	b510      	push	{r4, lr}
	errno = EINVAL;
 8001fe2:	f002 f895 	bl	8004110 <__errno>
 8001fe6:	2316      	movs	r3, #22
 8001fe8:	6003      	str	r3, [r0, #0]
	return -1;
 8001fea:	2001      	movs	r0, #1
}
 8001fec:	4240      	negs	r0, r0
 8001fee:	bd10      	pop	{r4, pc}

08001ff0 <_exit>:

void _exit (int status)
{
 8001ff0:	b510      	push	{r4, lr}
	errno = EINVAL;
 8001ff2:	f002 f88d 	bl	8004110 <__errno>
 8001ff6:	2316      	movs	r3, #22
 8001ff8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001ffa:	e7fe      	b.n	8001ffa <_exit+0xa>

08001ffc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ffc:	b570      	push	{r4, r5, r6, lr}
 8001ffe:	000e      	movs	r6, r1
 8002000:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	2500      	movs	r5, #0
 8002004:	42a5      	cmp	r5, r4
 8002006:	db01      	blt.n	800200c <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002008:	0020      	movs	r0, r4
 800200a:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800200c:	e000      	b.n	8002010 <_read+0x14>
 800200e:	bf00      	nop
 8002010:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002012:	3501      	adds	r5, #1
 8002014:	e7f6      	b.n	8002004 <_read+0x8>

08002016 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002016:	b570      	push	{r4, r5, r6, lr}
 8002018:	000e      	movs	r6, r1
 800201a:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	2500      	movs	r5, #0
 800201e:	42a5      	cmp	r5, r4
 8002020:	db01      	blt.n	8002026 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002022:	0020      	movs	r0, r4
 8002024:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002026:	5d70      	ldrb	r0, [r6, r5]
 8002028:	e000      	b.n	800202c <_write+0x16>
 800202a:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202c:	3501      	adds	r5, #1
 800202e:	e7f6      	b.n	800201e <_write+0x8>

08002030 <_close>:

int _close(int file)
{
	return -1;
 8002030:	2001      	movs	r0, #1
}
 8002032:	4240      	negs	r0, r0
 8002034:	4770      	bx	lr

08002036 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	019b      	lsls	r3, r3, #6
	return 0;
}
 800203a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800203c:	604b      	str	r3, [r1, #4]
}
 800203e:	4770      	bx	lr

08002040 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002040:	2001      	movs	r0, #1
 8002042:	4770      	bx	lr

08002044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002044:	2000      	movs	r0, #0
 8002046:	4770      	bx	lr

08002048 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002048:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <_sbrk+0x30>)
 800204a:	490c      	ldr	r1, [pc, #48]	; (800207c <_sbrk+0x34>)
{
 800204c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800204e:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002050:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <_sbrk+0x38>)
{
 8002052:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002054:	6810      	ldr	r0, [r2, #0]
 8002056:	2800      	cmp	r0, #0
 8002058:	d101      	bne.n	800205e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800205a:	480a      	ldr	r0, [pc, #40]	; (8002084 <_sbrk+0x3c>)
 800205c:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205e:	6810      	ldr	r0, [r2, #0]
 8002060:	18c3      	adds	r3, r0, r3
 8002062:	428b      	cmp	r3, r1
 8002064:	d906      	bls.n	8002074 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8002066:	f002 f853 	bl	8004110 <__errno>
 800206a:	230c      	movs	r3, #12
 800206c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800206e:	2001      	movs	r0, #1
 8002070:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002072:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002074:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002076:	e7fc      	b.n	8002072 <_sbrk+0x2a>
 8002078:	00000400 	.word	0x00000400
 800207c:	20002000 	.word	0x20002000
 8002080:	200002b4 	.word	0x200002b4
 8002084:	200002d0 	.word	0x200002d0

08002088 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002088:	4770      	bx	lr
	...

0800208c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800208e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002090:	f7ff fffa 	bl	8002088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002094:	480c      	ldr	r0, [pc, #48]	; (80020c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002096:	490d      	ldr	r1, [pc, #52]	; (80020cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <LoopForever+0xe>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800209c:	e002      	b.n	80020a4 <LoopCopyDataInit>

0800209e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a2:	3304      	adds	r3, #4

080020a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a8:	d3f9      	bcc.n	800209e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020ac:	4c0a      	ldr	r4, [pc, #40]	; (80020d8 <LoopForever+0x16>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b0:	e001      	b.n	80020b6 <LoopFillZerobss>

080020b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b4:	3204      	adds	r2, #4

080020b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b8:	d3fb      	bcc.n	80020b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ba:	f002 f82f 	bl	800411c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020be:	f7ff fd7f 	bl	8001bc0 <main>

080020c2 <LoopForever>:

LoopForever:
    b LoopForever
 80020c2:	e7fe      	b.n	80020c2 <LoopForever>
   ldr   r0, =_estack
 80020c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80020c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020cc:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80020d0:	08005c6c 	.word	0x08005c6c
  ldr r2, =_sbss
 80020d4:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80020d8:	200002cc 	.word	0x200002cc

080020dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020dc:	e7fe      	b.n	80020dc <ADC1_COMP_IRQHandler>
	...

080020e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e4:	20fa      	movs	r0, #250	; 0xfa
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_InitTick+0x3c>)
 80020e8:	0080      	lsls	r0, r0, #2
 80020ea:	7819      	ldrb	r1, [r3, #0]
 80020ec:	f7fe f828 	bl	8000140 <__udivsi3>
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_InitTick+0x40>)
 80020f2:	0001      	movs	r1, r0
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	f7fe f823 	bl	8000140 <__udivsi3>
 80020fa:	f000 f877 	bl	80021ec <HAL_SYSTICK_Config>
 80020fe:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002100:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002102:	2c00      	cmp	r4, #0
 8002104:	d109      	bne.n	800211a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002106:	2d03      	cmp	r5, #3
 8002108:	d807      	bhi.n	800211a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800210a:	3802      	subs	r0, #2
 800210c:	0022      	movs	r2, r4
 800210e:	0029      	movs	r1, r5
 8002110:	f000 f842 	bl	8002198 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002114:	0020      	movs	r0, r4
 8002116:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_InitTick+0x44>)
 8002118:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800211a:	bd70      	pop	{r4, r5, r6, pc}
 800211c:	20000040 	.word	0x20000040
 8002120:	2000003c 	.word	0x2000003c
 8002124:	20000044 	.word	0x20000044

08002128 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002128:	2340      	movs	r3, #64	; 0x40
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <HAL_Init+0x24>)
{
 800212c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800212e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002130:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002132:	430b      	orrs	r3, r1
 8002134:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002136:	f7ff ffd3 	bl	80020e0 <HAL_InitTick>
 800213a:	1e04      	subs	r4, r0, #0
 800213c:	d103      	bne.n	8002146 <HAL_Init+0x1e>
    HAL_MspInit();
 800213e:	f7ff fea7 	bl	8001e90 <HAL_MspInit>
}
 8002142:	0020      	movs	r0, r4
 8002144:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002146:	2401      	movs	r4, #1
 8002148:	e7fb      	b.n	8002142 <HAL_Init+0x1a>
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	40022000 	.word	0x40022000

08002150 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002150:	4a03      	ldr	r2, [pc, #12]	; (8002160 <HAL_IncTick+0x10>)
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_IncTick+0x14>)
 8002154:	6811      	ldr	r1, [r2, #0]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	185b      	adds	r3, r3, r1
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	4770      	bx	lr
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	200002b8 	.word	0x200002b8
 8002164:	20000040 	.word	0x20000040

08002168 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002168:	4b01      	ldr	r3, [pc, #4]	; (8002170 <HAL_GetTick+0x8>)
 800216a:	6818      	ldr	r0, [r3, #0]
}
 800216c:	4770      	bx	lr
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	200002b8 	.word	0x200002b8

08002174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff fff6 	bl	8002168 <HAL_GetTick>
 800217c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217e:	1c63      	adds	r3, r4, #1
 8002180:	d002      	beq.n	8002188 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_Delay+0x20>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002188:	f7ff ffee 	bl	8002168 <HAL_GetTick>
 800218c:	1b40      	subs	r0, r0, r5
 800218e:	42a0      	cmp	r0, r4
 8002190:	d3fa      	bcc.n	8002188 <HAL_Delay+0x14>
  {
  }
}
 8002192:	bd70      	pop	{r4, r5, r6, pc}
 8002194:	20000040 	.word	0x20000040

08002198 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002198:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800219a:	25ff      	movs	r5, #255	; 0xff
 800219c:	2403      	movs	r4, #3
 800219e:	002a      	movs	r2, r5
 80021a0:	4004      	ands	r4, r0
 80021a2:	00e4      	lsls	r4, r4, #3
 80021a4:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021a6:	0189      	lsls	r1, r1, #6
 80021a8:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021aa:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021ac:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021ae:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80021b0:	2800      	cmp	r0, #0
 80021b2:	db0a      	blt.n	80021ca <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021b4:	24c0      	movs	r4, #192	; 0xc0
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_NVIC_SetPriority+0x4c>)
 80021b8:	0880      	lsrs	r0, r0, #2
 80021ba:	0080      	lsls	r0, r0, #2
 80021bc:	18c0      	adds	r0, r0, r3
 80021be:	00a4      	lsls	r4, r4, #2
 80021c0:	5903      	ldr	r3, [r0, r4]
 80021c2:	401a      	ands	r2, r3
 80021c4:	4311      	orrs	r1, r2
 80021c6:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80021c8:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021ca:	200f      	movs	r0, #15
 80021cc:	4003      	ands	r3, r0
 80021ce:	3b08      	subs	r3, #8
 80021d0:	4805      	ldr	r0, [pc, #20]	; (80021e8 <HAL_NVIC_SetPriority+0x50>)
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	181b      	adds	r3, r3, r0
 80021d8:	69d8      	ldr	r0, [r3, #28]
 80021da:	4002      	ands	r2, r0
 80021dc:	4311      	orrs	r1, r2
 80021de:	61d9      	str	r1, [r3, #28]
 80021e0:	e7f2      	b.n	80021c8 <HAL_NVIC_SetPriority+0x30>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	e000e100 	.word	0xe000e100
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ec:	2280      	movs	r2, #128	; 0x80
 80021ee:	1e43      	subs	r3, r0, #1
 80021f0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d20d      	bcs.n	8002214 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021f8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fa:	4a07      	ldr	r2, [pc, #28]	; (8002218 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021fc:	4807      	ldr	r0, [pc, #28]	; (800221c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fe:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002200:	6a03      	ldr	r3, [r0, #32]
 8002202:	0609      	lsls	r1, r1, #24
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	430b      	orrs	r3, r1
 800220a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800220c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002210:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002212:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002214:	4770      	bx	lr
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	e000e010 	.word	0xe000e010
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002220:	4a58      	ldr	r2, [pc, #352]	; (8002384 <HAL_GPIO_Init+0x164>)
{
 8002222:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002224:	1882      	adds	r2, r0, r2
 8002226:	1e54      	subs	r4, r2, #1
 8002228:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800222a:	2300      	movs	r3, #0
{
 800222c:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800222e:	3205      	adds	r2, #5
{
 8002230:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002232:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002234:	9a03      	ldr	r2, [sp, #12]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	0014      	movs	r4, r2
 800223a:	40dc      	lsrs	r4, r3
 800223c:	d101      	bne.n	8002242 <HAL_GPIO_Init+0x22>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 800223e:	b007      	add	sp, #28
 8002240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002242:	2101      	movs	r1, #1
 8002244:	000d      	movs	r5, r1
 8002246:	0014      	movs	r4, r2
 8002248:	409d      	lsls	r5, r3
 800224a:	402c      	ands	r4, r5
 800224c:	468c      	mov	ip, r1
 800224e:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8002250:	422a      	tst	r2, r5
 8002252:	d100      	bne.n	8002256 <HAL_GPIO_Init+0x36>
 8002254:	e094      	b.n	8002380 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002256:	2403      	movs	r4, #3
 8002258:	9a03      	ldr	r2, [sp, #12]
 800225a:	005e      	lsls	r6, r3, #1
 800225c:	6852      	ldr	r2, [r2, #4]
 800225e:	9201      	str	r2, [sp, #4]
 8002260:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002262:	40b4      	lsls	r4, r6
 8002264:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002266:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002268:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800226a:	4564      	cmp	r4, ip
 800226c:	d82a      	bhi.n	80022c4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 800226e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002270:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002272:	9903      	ldr	r1, [sp, #12]
 8002274:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002276:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002278:	40b4      	lsls	r4, r6
 800227a:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 800227c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800227e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002280:	43ac      	bics	r4, r5
 8002282:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002284:	090c      	lsrs	r4, r1, #4
 8002286:	4661      	mov	r1, ip
 8002288:	400c      	ands	r4, r1
 800228a:	409c      	lsls	r4, r3
 800228c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800228e:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8002290:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002292:	9904      	ldr	r1, [sp, #16]
 8002294:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002296:	9903      	ldr	r1, [sp, #12]
 8002298:	688c      	ldr	r4, [r1, #8]
 800229a:	40b4      	lsls	r4, r6
 800229c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800229e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a0:	2a02      	cmp	r2, #2
 80022a2:	d111      	bne.n	80022c8 <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80022a4:	2507      	movs	r5, #7
 80022a6:	210f      	movs	r1, #15
 80022a8:	401d      	ands	r5, r3
 80022aa:	00ad      	lsls	r5, r5, #2
 80022ac:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 80022ae:	08dc      	lsrs	r4, r3, #3
 80022b0:	00a4      	lsls	r4, r4, #2
 80022b2:	1904      	adds	r4, r0, r4
 80022b4:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80022b6:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80022b8:	9903      	ldr	r1, [sp, #12]
 80022ba:	6909      	ldr	r1, [r1, #16]
 80022bc:	40a9      	lsls	r1, r5
 80022be:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80022c0:	6227      	str	r7, [r4, #32]
 80022c2:	e001      	b.n	80022c8 <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c4:	2a03      	cmp	r2, #3
 80022c6:	d1e3      	bne.n	8002290 <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c8:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 80022ca:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022cc:	9904      	ldr	r1, [sp, #16]
 80022ce:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d0:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 80022d2:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d4:	22c0      	movs	r2, #192	; 0xc0
 80022d6:	9901      	ldr	r1, [sp, #4]
 80022d8:	0292      	lsls	r2, r2, #10
 80022da:	4211      	tst	r1, r2
 80022dc:	d050      	beq.n	8002380 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	2701      	movs	r7, #1
 80022e0:	4c29      	ldr	r4, [pc, #164]	; (8002388 <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80022e2:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e4:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80022e6:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e8:	433a      	orrs	r2, r7
 80022ea:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80022ec:	4a27      	ldr	r2, [pc, #156]	; (800238c <HAL_GPIO_Init+0x16c>)
 80022ee:	089c      	lsrs	r4, r3, #2
 80022f0:	00a4      	lsls	r4, r4, #2
 80022f2:	18a4      	adds	r4, r4, r2
 80022f4:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80022f6:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80022f8:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80022fa:	220f      	movs	r2, #15
 80022fc:	00ad      	lsls	r5, r5, #2
 80022fe:	40aa      	lsls	r2, r5
 8002300:	4661      	mov	r1, ip
 8002302:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002304:	22a0      	movs	r2, #160	; 0xa0
 8002306:	05d2      	lsls	r2, r2, #23
 8002308:	4694      	mov	ip, r2
 800230a:	2200      	movs	r2, #0
 800230c:	4560      	cmp	r0, ip
 800230e:	d00d      	beq.n	800232c <HAL_GPIO_Init+0x10c>
 8002310:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <HAL_GPIO_Init+0x170>)
 8002312:	4694      	mov	ip, r2
 8002314:	003a      	movs	r2, r7
 8002316:	4560      	cmp	r0, ip
 8002318:	d008      	beq.n	800232c <HAL_GPIO_Init+0x10c>
 800231a:	4f1e      	ldr	r7, [pc, #120]	; (8002394 <HAL_GPIO_Init+0x174>)
 800231c:	1892      	adds	r2, r2, r2
 800231e:	42b8      	cmp	r0, r7
 8002320:	d004      	beq.n	800232c <HAL_GPIO_Init+0x10c>
 8002322:	4f1d      	ldr	r7, [pc, #116]	; (8002398 <HAL_GPIO_Init+0x178>)
 8002324:	0032      	movs	r2, r6
 8002326:	42b8      	cmp	r0, r7
 8002328:	d000      	beq.n	800232c <HAL_GPIO_Init+0x10c>
 800232a:	9a05      	ldr	r2, [sp, #20]
 800232c:	40aa      	lsls	r2, r5
 800232e:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8002330:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002332:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8002334:	000d      	movs	r5, r1
        temp = EXTI->RTSR;
 8002336:	4a19      	ldr	r2, [pc, #100]	; (800239c <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 8002338:	43cc      	mvns	r4, r1
        temp = EXTI->RTSR;
 800233a:	6896      	ldr	r6, [r2, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800233c:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800233e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002340:	02c9      	lsls	r1, r1, #11
 8002342:	d401      	bmi.n	8002348 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8002344:	0035      	movs	r5, r6
 8002346:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8002348:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800234a:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800234c:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800234e:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8002350:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002352:	0289      	lsls	r1, r1, #10
 8002354:	d401      	bmi.n	800235a <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8002356:	0035      	movs	r5, r6
 8002358:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 800235a:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 800235c:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800235e:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002360:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8002362:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002364:	0389      	lsls	r1, r1, #14
 8002366:	d401      	bmi.n	800236c <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8002368:	0035      	movs	r5, r6
 800236a:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800236c:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 800236e:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8002370:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002372:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8002374:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002376:	03c9      	lsls	r1, r1, #15
 8002378:	d401      	bmi.n	800237e <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 800237a:	4025      	ands	r5, r4
 800237c:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 800237e:	6016      	str	r6, [r2, #0]
    position++;
 8002380:	3301      	adds	r3, #1
 8002382:	e757      	b.n	8002234 <HAL_GPIO_Init+0x14>
 8002384:	afffe400 	.word	0xafffe400
 8002388:	40021000 	.word	0x40021000
 800238c:	40010000 	.word	0x40010000
 8002390:	50000400 	.word	0x50000400
 8002394:	50000800 	.word	0x50000800
 8002398:	50000c00 	.word	0x50000c00
 800239c:	40010400 	.word	0x40010400

080023a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023a0:	6900      	ldr	r0, [r0, #16]
 80023a2:	4008      	ands	r0, r1
 80023a4:	1e43      	subs	r3, r0, #1
 80023a6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80023a8:	b2c0      	uxtb	r0, r0
}
 80023aa:	4770      	bx	lr

080023ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ac:	2a00      	cmp	r2, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80023b2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80023b4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80023b6:	e7fc      	b.n	80023b2 <HAL_GPIO_WritePin+0x6>

080023b8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023b8:	6803      	ldr	r3, [r0, #0]
 80023ba:	699a      	ldr	r2, [r3, #24]
 80023bc:	0792      	lsls	r2, r2, #30
 80023be:	d501      	bpl.n	80023c4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023c0:	2200      	movs	r2, #0
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023c4:	2201      	movs	r2, #1
 80023c6:	6999      	ldr	r1, [r3, #24]
 80023c8:	4211      	tst	r1, r2
 80023ca:	d102      	bne.n	80023d2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023cc:	6999      	ldr	r1, [r3, #24]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	619a      	str	r2, [r3, #24]
  }
}
 80023d2:	4770      	bx	lr

080023d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023d4:	b530      	push	{r4, r5, lr}
 80023d6:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023d8:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023da:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023dc:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023de:	0589      	lsls	r1, r1, #22
 80023e0:	431a      	orrs	r2, r3
 80023e2:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <I2C_TransferConfig+0x28>)
 80023e6:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023e8:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80023ea:	0d64      	lsrs	r4, r4, #21
 80023ec:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023ee:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80023f0:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023f2:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80023f4:	432a      	orrs	r2, r5
 80023f6:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023f8:	bd30      	pop	{r4, r5, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	03ff63ff 	.word	0x03ff63ff

08002400 <I2C_IsErrorOccurred>:
{
 8002400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002402:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8002404:	6802      	ldr	r2, [r0, #0]
{
 8002406:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8002408:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800240a:	2310      	movs	r3, #16
 800240c:	000f      	movs	r7, r1
{
 800240e:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002410:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8002412:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002414:	4219      	tst	r1, r3
 8002416:	d00e      	beq.n	8002436 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002418:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241a:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 800241c:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800241e:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	423a      	tst	r2, r7
 8002426:	d164      	bne.n	80024f2 <I2C_IsErrorOccurred+0xf2>
 8002428:	9a01      	ldr	r2, [sp, #4]
 800242a:	2a00      	cmp	r2, #0
 800242c:	d032      	beq.n	8002494 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 800242e:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8002430:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8002432:	9b00      	ldr	r3, [sp, #0]
 8002434:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002436:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8002438:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800243a:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 800243c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800243e:	420a      	tst	r2, r1
 8002440:	d002      	beq.n	8002448 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 8002442:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002444:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002446:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002448:	2180      	movs	r1, #128	; 0x80
 800244a:	00c9      	lsls	r1, r1, #3
 800244c:	420a      	tst	r2, r1
 800244e:	d003      	beq.n	8002458 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8002450:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002452:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002454:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 8002456:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	0089      	lsls	r1, r1, #2
 800245c:	420a      	tst	r2, r1
 800245e:	d04d      	beq.n	80024fc <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002460:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002462:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8002464:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 8002466:	0020      	movs	r0, r4
 8002468:	f7ff ffa6 	bl	80023b8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800246c:	6822      	ldr	r2, [r4, #0]
 800246e:	4925      	ldr	r1, [pc, #148]	; (8002504 <I2C_IsErrorOccurred+0x104>)
 8002470:	6853      	ldr	r3, [r2, #4]
 8002472:	400b      	ands	r3, r1
 8002474:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002476:	0023      	movs	r3, r4
 8002478:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 800247a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800247c:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 800247e:	4307      	orrs	r7, r0
 8002480:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002482:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002484:	0022      	movs	r2, r4
 8002486:	2300      	movs	r3, #0
 8002488:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800248a:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800248c:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800248e:	2001      	movs	r0, #1
 8002490:	7023      	strb	r3, [r4, #0]
 8002492:	e035      	b.n	8002500 <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 8002494:	1c72      	adds	r2, r6, #1
 8002496:	d0c4      	beq.n	8002422 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002498:	f7ff fe66 	bl	8002168 <HAL_GetTick>
 800249c:	1b40      	subs	r0, r0, r5
 800249e:	42b0      	cmp	r0, r6
 80024a0:	d801      	bhi.n	80024a6 <I2C_IsErrorOccurred+0xa6>
 80024a2:	2e00      	cmp	r6, #0
 80024a4:	d1bc      	bne.n	8002420 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 80024a6:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024a8:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 80024aa:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024ac:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80024ae:	7811      	ldrb	r1, [r2, #0]
 80024b0:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024b2:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 80024b4:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024b6:	699a      	ldr	r2, [r3, #24]
 80024b8:	0209      	lsls	r1, r1, #8
 80024ba:	420a      	tst	r2, r1
 80024bc:	d00c      	beq.n	80024d8 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024be:	2280      	movs	r2, #128	; 0x80
 80024c0:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024c2:	4210      	tst	r0, r2
 80024c4:	d108      	bne.n	80024d8 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 80024c6:	4661      	mov	r1, ip
 80024c8:	2920      	cmp	r1, #32
 80024ca:	d005      	beq.n	80024d8 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80024d2:	f7ff fe49 	bl	8002168 <HAL_GetTick>
 80024d6:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	423b      	tst	r3, r7
 80024de:	d19f      	bne.n	8002420 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024e0:	f7ff fe42 	bl	8002168 <HAL_GetTick>
 80024e4:	1b40      	subs	r0, r0, r5
 80024e6:	2819      	cmp	r0, #25
 80024e8:	d9f6      	bls.n	80024d8 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024ec:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	e796      	b.n	8002420 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 80024f2:	9a01      	ldr	r2, [sp, #4]
 80024f4:	2a00      	cmp	r2, #0
 80024f6:	d19a      	bne.n	800242e <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f8:	61df      	str	r7, [r3, #28]
 80024fa:	e798      	b.n	800242e <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 80024fc:	2800      	cmp	r0, #0
 80024fe:	d1b2      	bne.n	8002466 <I2C_IsErrorOccurred+0x66>
}
 8002500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	fe00e800 	.word	0xfe00e800

08002508 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250a:	0004      	movs	r4, r0
 800250c:	000d      	movs	r5, r1
 800250e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002510:	2702      	movs	r7, #2
 8002512:	6823      	ldr	r3, [r4, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	423b      	tst	r3, r7
 8002518:	d001      	beq.n	800251e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800251a:	2000      	movs	r0, #0
}
 800251c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800251e:	0032      	movs	r2, r6
 8002520:	0029      	movs	r1, r5
 8002522:	0020      	movs	r0, r4
 8002524:	f7ff ff6c 	bl	8002400 <I2C_IsErrorOccurred>
 8002528:	2800      	cmp	r0, #0
 800252a:	d118      	bne.n	800255e <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800252c:	1c6b      	adds	r3, r5, #1
 800252e:	d0f0      	beq.n	8002512 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002530:	f7ff fe1a 	bl	8002168 <HAL_GetTick>
 8002534:	1b80      	subs	r0, r0, r6
 8002536:	42a8      	cmp	r0, r5
 8002538:	d801      	bhi.n	800253e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800253a:	2d00      	cmp	r5, #0
 800253c:	d1e9      	bne.n	8002512 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	001a      	movs	r2, r3
 8002544:	403a      	ands	r2, r7
 8002546:	423b      	tst	r3, r7
 8002548:	d1e3      	bne.n	8002512 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800254a:	2120      	movs	r1, #32
 800254c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800254e:	430b      	orrs	r3, r1
 8002550:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002552:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8002554:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8002556:	3341      	adds	r3, #65	; 0x41
 8002558:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800255a:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 800255c:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 800255e:	2001      	movs	r0, #1
 8002560:	e7dc      	b.n	800251c <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08002562 <I2C_WaitOnFlagUntilTimeout>:
{
 8002562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002564:	0004      	movs	r4, r0
 8002566:	000d      	movs	r5, r1
 8002568:	0017      	movs	r7, r2
 800256a:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800256c:	6822      	ldr	r2, [r4, #0]
 800256e:	6993      	ldr	r3, [r2, #24]
 8002570:	402b      	ands	r3, r5
 8002572:	1b5b      	subs	r3, r3, r5
 8002574:	4259      	negs	r1, r3
 8002576:	414b      	adcs	r3, r1
 8002578:	42bb      	cmp	r3, r7
 800257a:	d001      	beq.n	8002580 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800257c:	2000      	movs	r0, #0
 800257e:	e01f      	b.n	80025c0 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8002580:	1c73      	adds	r3, r6, #1
 8002582:	d0f4      	beq.n	800256e <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002584:	f7ff fdf0 	bl	8002168 <HAL_GetTick>
 8002588:	9b06      	ldr	r3, [sp, #24]
 800258a:	1ac0      	subs	r0, r0, r3
 800258c:	42b0      	cmp	r0, r6
 800258e:	d801      	bhi.n	8002594 <I2C_WaitOnFlagUntilTimeout+0x32>
 8002590:	2e00      	cmp	r6, #0
 8002592:	d1eb      	bne.n	800256c <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	402b      	ands	r3, r5
 800259a:	1b5b      	subs	r3, r3, r5
 800259c:	425a      	negs	r2, r3
 800259e:	4153      	adcs	r3, r2
 80025a0:	42bb      	cmp	r3, r7
 80025a2:	d1e3      	bne.n	800256c <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025a4:	2220      	movs	r2, #32
 80025a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80025a8:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025aa:	4313      	orrs	r3, r2
 80025ac:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	0023      	movs	r3, r4
 80025b0:	3341      	adds	r3, #65	; 0x41
 80025b2:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b4:	0022      	movs	r2, r4
 80025b6:	2300      	movs	r3, #0
 80025b8:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80025ba:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80025be:	7023      	strb	r3, [r4, #0]
}
 80025c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080025c2 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80025c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c4:	0004      	movs	r4, r0
 80025c6:	000e      	movs	r6, r1
 80025c8:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ca:	2520      	movs	r5, #32
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	422b      	tst	r3, r5
 80025d2:	d001      	beq.n	80025d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80025d4:	2000      	movs	r0, #0
}
 80025d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d8:	003a      	movs	r2, r7
 80025da:	0031      	movs	r1, r6
 80025dc:	0020      	movs	r0, r4
 80025de:	f7ff ff0f 	bl	8002400 <I2C_IsErrorOccurred>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	d115      	bne.n	8002612 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e6:	f7ff fdbf 	bl	8002168 <HAL_GetTick>
 80025ea:	1bc0      	subs	r0, r0, r7
 80025ec:	42b0      	cmp	r0, r6
 80025ee:	d801      	bhi.n	80025f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80025f0:	2e00      	cmp	r6, #0
 80025f2:	d1eb      	bne.n	80025cc <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	001a      	movs	r2, r3
 80025fa:	402a      	ands	r2, r5
 80025fc:	422b      	tst	r3, r5
 80025fe:	d1e5      	bne.n	80025cc <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002600:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002602:	432b      	orrs	r3, r5
 8002604:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002606:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8002608:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800260a:	3341      	adds	r3, #65	; 0x41
 800260c:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800260e:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8002610:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8002612:	2001      	movs	r0, #1
 8002614:	e7df      	b.n	80025d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

08002618 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	0004      	movs	r4, r0
 800261c:	000d      	movs	r5, r1
 800261e:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002620:	2604      	movs	r6, #4
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	4233      	tst	r3, r6
 8002628:	d111      	bne.n	800264e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800262a:	003a      	movs	r2, r7
 800262c:	0029      	movs	r1, r5
 800262e:	0020      	movs	r0, r4
 8002630:	f7ff fee6 	bl	8002400 <I2C_IsErrorOccurred>
 8002634:	2800      	cmp	r0, #0
 8002636:	d124      	bne.n	8002682 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002638:	2120      	movs	r1, #32
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	420a      	tst	r2, r1
 8002640:	d023      	beq.n	800268a <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002642:	699a      	ldr	r2, [r3, #24]
 8002644:	4232      	tst	r2, r6
 8002646:	d004      	beq.n	8002652 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8002648:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800264a:	2a00      	cmp	r2, #0
 800264c:	d001      	beq.n	8002652 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 800264e:	2000      	movs	r0, #0
}
 8002650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002652:	6999      	ldr	r1, [r3, #24]
 8002654:	2210      	movs	r2, #16
 8002656:	0008      	movs	r0, r1
 8002658:	4010      	ands	r0, r2
 800265a:	4211      	tst	r1, r2
 800265c:	d013      	beq.n	8002686 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800265e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002660:	3a0c      	subs	r2, #12
 8002662:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002664:	2120      	movs	r1, #32
 8002666:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	4813      	ldr	r0, [pc, #76]	; (80026b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>)
 800266c:	4002      	ands	r2, r0
 800266e:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8002670:	0023      	movs	r3, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002672:	0022      	movs	r2, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8002674:	3341      	adds	r3, #65	; 0x41
 8002676:	7019      	strb	r1, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002678:	2300      	movs	r3, #0
 800267a:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800267c:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800267e:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8002680:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002682:	2001      	movs	r0, #1
 8002684:	e7e4      	b.n	8002650 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002686:	6460      	str	r0, [r4, #68]	; 0x44
 8002688:	e7ec      	b.n	8002664 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268a:	f7ff fd6d 	bl	8002168 <HAL_GetTick>
 800268e:	1bc0      	subs	r0, r0, r7
 8002690:	42a8      	cmp	r0, r5
 8002692:	d801      	bhi.n	8002698 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8002694:	2d00      	cmp	r5, #0
 8002696:	d1c4      	bne.n	8002622 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	0019      	movs	r1, r3
 800269e:	4031      	ands	r1, r6
 80026a0:	4233      	tst	r3, r6
 80026a2:	d1be      	bne.n	8002622 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a4:	2220      	movs	r2, #32
 80026a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026a8:	4313      	orrs	r3, r2
 80026aa:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026ac:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 80026ae:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	3341      	adds	r3, #65	; 0x41
 80026b2:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 80026b4:	7021      	strb	r1, [r4, #0]
        return HAL_ERROR;
 80026b6:	e7e4      	b.n	8002682 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
 80026b8:	fe00e800 	.word	0xfe00e800

080026bc <HAL_I2C_Init>:
{
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	0004      	movs	r4, r0
    return HAL_ERROR;
 80026c0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80026c2:	2c00      	cmp	r4, #0
 80026c4:	d03f      	beq.n	8002746 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c6:	0025      	movs	r5, r4
 80026c8:	3541      	adds	r5, #65	; 0x41
 80026ca:	782b      	ldrb	r3, [r5, #0]
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80026d2:	0023      	movs	r3, r4
 80026d4:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 80026d6:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 80026d8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 80026da:	f7ff fbe7 	bl	8001eac <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026de:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80026e0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e2:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80026e4:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026e6:	481d      	ldr	r0, [pc, #116]	; (800275c <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026ea:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80026ec:	438a      	bics	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026f0:	6861      	ldr	r1, [r4, #4]
 80026f2:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <HAL_I2C_Init+0xa4>)
 80026f4:	400a      	ands	r2, r1
 80026f6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	4002      	ands	r2, r0
 80026fc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026fe:	68e2      	ldr	r2, [r4, #12]
 8002700:	2a01      	cmp	r2, #1
 8002702:	d121      	bne.n	8002748 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	0209      	lsls	r1, r1, #8
 8002708:	4331      	orrs	r1, r6
 800270a:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	4915      	ldr	r1, [pc, #84]	; (8002764 <HAL_I2C_Init+0xa8>)
 8002710:	4311      	orrs	r1, r2
 8002712:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002714:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002716:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002718:	4002      	ands	r2, r0
 800271a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800271c:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800271e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002720:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002722:	69a1      	ldr	r1, [r4, #24]
 8002724:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002726:	430a      	orrs	r2, r1
 8002728:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800272a:	6a21      	ldr	r1, [r4, #32]
 800272c:	69e2      	ldr	r2, [r4, #28]
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002732:	2201      	movs	r2, #1
 8002734:	6819      	ldr	r1, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800273a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800273c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800273e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002740:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002742:	3442      	adds	r4, #66	; 0x42
 8002744:	7020      	strb	r0, [r4, #0]
}
 8002746:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002748:	2184      	movs	r1, #132	; 0x84
 800274a:	0209      	lsls	r1, r1, #8
 800274c:	4331      	orrs	r1, r6
 800274e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002750:	2a02      	cmp	r2, #2
 8002752:	d1db      	bne.n	800270c <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	0112      	lsls	r2, r2, #4
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	e7d7      	b.n	800270c <HAL_I2C_Init+0x50>
 800275c:	ffff7fff 	.word	0xffff7fff
 8002760:	f0ffffff 	.word	0xf0ffffff
 8002764:	02008000 	.word	0x02008000

08002768 <HAL_I2C_Master_Transmit>:
{
 8002768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800276a:	b087      	sub	sp, #28
 800276c:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800276e:	0003      	movs	r3, r0
 8002770:	3341      	adds	r3, #65	; 0x41
{
 8002772:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002774:	9303      	str	r3, [sp, #12]
 8002776:	781b      	ldrb	r3, [r3, #0]
{
 8002778:	0004      	movs	r4, r0
 800277a:	000f      	movs	r7, r1
    return HAL_BUSY;
 800277c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800277e:	2b20      	cmp	r3, #32
 8002780:	d114      	bne.n	80027ac <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 8002782:	0023      	movs	r3, r4
 8002784:	3340      	adds	r3, #64	; 0x40
 8002786:	781a      	ldrb	r2, [r3, #0]
 8002788:	2a01      	cmp	r2, #1
 800278a:	d00f      	beq.n	80027ac <HAL_I2C_Master_Transmit+0x44>
 800278c:	2601      	movs	r6, #1
 800278e:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8002790:	f7ff fcea 	bl	8002168 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002794:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8002796:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002798:	9000      	str	r0, [sp, #0]
 800279a:	2319      	movs	r3, #25
 800279c:	0032      	movs	r2, r6
 800279e:	0020      	movs	r0, r4
 80027a0:	0209      	lsls	r1, r1, #8
 80027a2:	f7ff fede 	bl	8002562 <I2C_WaitOnFlagUntilTimeout>
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 80027aa:	2001      	movs	r0, #1
}
 80027ac:	b007      	add	sp, #28
 80027ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027b0:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027b2:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027b4:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027b6:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027b8:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027ba:	3b11      	subs	r3, #17
 80027bc:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 80027be:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80027c2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80027c4:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 80027c6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80027c8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80027cc:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_I2C_Master_Transmit+0x11c>)
 80027ce:	2aff      	cmp	r2, #255	; 0xff
 80027d0:	d920      	bls.n	8002814 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d2:	22ff      	movs	r2, #255	; 0xff
 80027d4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027dc:	0039      	movs	r1, r7
 80027de:	0020      	movs	r0, r4
 80027e0:	f7ff fdf8 	bl	80023d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e6:	002a      	movs	r2, r5
 80027e8:	0020      	movs	r0, r4
 80027ea:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d119      	bne.n	8002824 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f0:	f7ff fee7 	bl	80025c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d1d8      	bne.n	80027aa <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f8:	2120      	movs	r1, #32
 80027fa:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80027fc:	4d22      	ldr	r5, [pc, #136]	; (8002888 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027fe:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	402a      	ands	r2, r5
 8002804:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002806:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002808:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800280a:	3341      	adds	r3, #65	; 0x41
 800280c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800280e:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8002810:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002812:	e7cb      	b.n	80027ac <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8002814:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002816:	b292      	uxth	r2, r2
 8002818:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	049b      	lsls	r3, r3, #18
 8002822:	e7db      	b.n	80027dc <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002824:	f7ff fe70 	bl	8002508 <I2C_WaitOnTXISFlagUntilTimeout>
 8002828:	2800      	cmp	r0, #0
 800282a:	d1be      	bne.n	80027aa <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800282c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800282e:	6822      	ldr	r2, [r4, #0]
 8002830:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002832:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002834:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002836:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002838:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800283a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800283c:	3b01      	subs	r3, #1
 800283e:	b29b      	uxth	r3, r3
 8002840:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002842:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002844:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002846:	b292      	uxth	r2, r2
 8002848:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0ca      	beq.n	80027e4 <HAL_I2C_Master_Transmit+0x7c>
 800284e:	2a00      	cmp	r2, #0
 8002850:	d1c8      	bne.n	80027e4 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	0020      	movs	r0, r4
 8002856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002858:	9500      	str	r5, [sp, #0]
 800285a:	f7ff fe82 	bl	8002562 <I2C_WaitOnFlagUntilTimeout>
 800285e:	2800      	cmp	r0, #0
 8002860:	d1a3      	bne.n	80027aa <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002862:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002864:	2bff      	cmp	r3, #255	; 0xff
 8002866:	d906      	bls.n	8002876 <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002868:	23ff      	movs	r3, #255	; 0xff
 800286a:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	22ff      	movs	r2, #255	; 0xff
 8002870:	9000      	str	r0, [sp, #0]
 8002872:	045b      	lsls	r3, r3, #17
 8002874:	e7b2      	b.n	80027dc <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8002876:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002878:	b292      	uxth	r2, r2
 800287a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	9000      	str	r0, [sp, #0]
 8002880:	e7cd      	b.n	800281e <HAL_I2C_Master_Transmit+0xb6>
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	80002000 	.word	0x80002000
 8002888:	fe00e800 	.word	0xfe00e800

0800288c <HAL_I2C_Master_Receive>:
{
 800288c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288e:	b087      	sub	sp, #28
 8002890:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002892:	0003      	movs	r3, r0
 8002894:	3341      	adds	r3, #65	; 0x41
{
 8002896:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002898:	9303      	str	r3, [sp, #12]
 800289a:	781b      	ldrb	r3, [r3, #0]
{
 800289c:	0004      	movs	r4, r0
 800289e:	000f      	movs	r7, r1
    return HAL_BUSY;
 80028a0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d114      	bne.n	80028d0 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 80028a6:	0023      	movs	r3, r4
 80028a8:	3340      	adds	r3, #64	; 0x40
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	2a01      	cmp	r2, #1
 80028ae:	d00f      	beq.n	80028d0 <HAL_I2C_Master_Receive+0x44>
 80028b0:	2601      	movs	r6, #1
 80028b2:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80028b4:	f7ff fc58 	bl	8002168 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028b8:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80028ba:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028bc:	9000      	str	r0, [sp, #0]
 80028be:	2319      	movs	r3, #25
 80028c0:	0032      	movs	r2, r6
 80028c2:	0020      	movs	r0, r4
 80028c4:	0209      	lsls	r1, r1, #8
 80028c6:	f7ff fe4c 	bl	8002562 <I2C_WaitOnFlagUntilTimeout>
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 80028ce:	2001      	movs	r0, #1
}
 80028d0:	b007      	add	sp, #28
 80028d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028d4:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028d6:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028d8:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028da:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028dc:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028de:	3b12      	subs	r3, #18
 80028e0:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 80028e2:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80028e6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80028e8:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 80028ea:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80028ec:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <HAL_I2C_Master_Receive+0x11c>)
 80028f2:	2aff      	cmp	r2, #255	; 0xff
 80028f4:	d920      	bls.n	8002938 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028f6:	22ff      	movs	r2, #255	; 0xff
 80028f8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002900:	0039      	movs	r1, r7
 8002902:	0020      	movs	r0, r4
 8002904:	f7ff fd66 	bl	80023d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002908:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290a:	002a      	movs	r2, r5
 800290c:	0020      	movs	r0, r4
 800290e:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8002910:	2b00      	cmp	r3, #0
 8002912:	d119      	bne.n	8002948 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002914:	f7ff fe55 	bl	80025c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002918:	2800      	cmp	r0, #0
 800291a:	d1d8      	bne.n	80028ce <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800291c:	2120      	movs	r1, #32
 800291e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002920:	4d22      	ldr	r5, [pc, #136]	; (80029ac <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002922:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	402a      	ands	r2, r5
 8002928:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800292a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800292c:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800292e:	3341      	adds	r3, #65	; 0x41
 8002930:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002932:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8002934:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002936:	e7cb      	b.n	80028d0 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8002938:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800293a:	b292      	uxth	r2, r2
 800293c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	049b      	lsls	r3, r3, #18
 8002946:	e7db      	b.n	8002900 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002948:	f7ff fe66 	bl	8002618 <I2C_WaitOnRXNEFlagUntilTimeout>
 800294c:	2800      	cmp	r0, #0
 800294e:	d1be      	bne.n	80028ce <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002958:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800295a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800295c:	3301      	adds	r3, #1
 800295e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002960:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002962:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002964:	3b01      	subs	r3, #1
 8002966:	b29b      	uxth	r3, r3
 8002968:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800296a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800296c:	b292      	uxth	r2, r2
 800296e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0c9      	beq.n	8002908 <HAL_I2C_Master_Receive+0x7c>
 8002974:	2a00      	cmp	r2, #0
 8002976:	d1c7      	bne.n	8002908 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	0020      	movs	r0, r4
 800297c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800297e:	9500      	str	r5, [sp, #0]
 8002980:	f7ff fdef 	bl	8002562 <I2C_WaitOnFlagUntilTimeout>
 8002984:	2800      	cmp	r0, #0
 8002986:	d1a2      	bne.n	80028ce <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002988:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800298a:	2bff      	cmp	r3, #255	; 0xff
 800298c:	d906      	bls.n	800299c <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800298e:	23ff      	movs	r3, #255	; 0xff
 8002990:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	22ff      	movs	r2, #255	; 0xff
 8002996:	9000      	str	r0, [sp, #0]
 8002998:	045b      	lsls	r3, r3, #17
 800299a:	e7b1      	b.n	8002900 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 800299c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800299e:	b292      	uxth	r2, r2
 80029a0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	9000      	str	r0, [sp, #0]
 80029a6:	e7cc      	b.n	8002942 <HAL_I2C_Master_Receive+0xb6>
 80029a8:	80002400 	.word	0x80002400
 80029ac:	fe00e800 	.word	0xfe00e800

080029b0 <HAL_I2C_Mem_Write>:
{
 80029b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	9304      	str	r3, [sp, #16]
 80029b6:	ab0e      	add	r3, sp, #56	; 0x38
 80029b8:	9203      	str	r2, [sp, #12]
 80029ba:	cb04      	ldmia	r3!, {r2}
 80029bc:	0004      	movs	r4, r0
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	9205      	str	r2, [sp, #20]
 80029c2:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c4:	0003      	movs	r3, r0
 80029c6:	3341      	adds	r3, #65	; 0x41
 80029c8:	9307      	str	r3, [sp, #28]
 80029ca:	781b      	ldrb	r3, [r3, #0]
{
 80029cc:	000f      	movs	r7, r1
    return HAL_BUSY;
 80029ce:	2002      	movs	r0, #2
{
 80029d0:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d108      	bne.n	80029e8 <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 80029d6:	2a00      	cmp	r2, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_I2C_Mem_Write+0x30>
 80029da:	9b06      	ldr	r3, [sp, #24]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d105      	bne.n	80029ec <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80029e6:	2001      	movs	r0, #1
}
 80029e8:	b009      	add	sp, #36	; 0x24
 80029ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80029ec:	0023      	movs	r3, r4
 80029ee:	3340      	adds	r3, #64	; 0x40
 80029f0:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80029f2:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 80029f4:	2a01      	cmp	r2, #1
 80029f6:	d0f7      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x38>
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80029fc:	f7ff fbb4 	bl	8002168 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a00:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8002a02:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a04:	9000      	str	r0, [sp, #0]
 8002a06:	2319      	movs	r3, #25
 8002a08:	2201      	movs	r2, #1
 8002a0a:	0020      	movs	r0, r4
 8002a0c:	0209      	lsls	r1, r1, #8
 8002a0e:	f7ff fda8 	bl	8002562 <I2C_WaitOnFlagUntilTimeout>
 8002a12:	2800      	cmp	r0, #0
 8002a14:	d1e7      	bne.n	80029e6 <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a16:	2321      	movs	r3, #33	; 0x21
 8002a18:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a1a:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a1c:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a1e:	0023      	movs	r3, r4
 8002a20:	3342      	adds	r3, #66	; 0x42
 8002a22:	9307      	str	r3, [sp, #28]
 8002a24:	2340      	movs	r3, #64	; 0x40
 8002a26:	9a07      	ldr	r2, [sp, #28]
 8002a28:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8002a2a:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002a2e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a30:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 8002a32:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002a34:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a36:	466b      	mov	r3, sp
 8002a38:	7c1a      	ldrb	r2, [r3, #16]
 8002a3a:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <HAL_I2C_Mem_Write+0x1b4>)
 8002a3c:	0020      	movs	r0, r4
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	045b      	lsls	r3, r3, #17
 8002a44:	f7ff fcc6 	bl	80023d4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a48:	002a      	movs	r2, r5
 8002a4a:	0031      	movs	r1, r6
 8002a4c:	0020      	movs	r0, r4
 8002a4e:	f7ff fd5b 	bl	8002508 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a52:	2800      	cmp	r0, #0
 8002a54:	d126      	bne.n	8002aa4 <HAL_I2C_Mem_Write+0xf4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a56:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a58:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a5a:	2a01      	cmp	r2, #1
 8002a5c:	d116      	bne.n	8002a8c <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a5e:	466a      	mov	r2, sp
 8002a60:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a62:	2180      	movs	r1, #128	; 0x80
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a66:	0020      	movs	r0, r4
 8002a68:	0033      	movs	r3, r6
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	9500      	str	r5, [sp, #0]
 8002a6e:	f7ff fd78 	bl	8002562 <I2C_WaitOnFlagUntilTimeout>
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d116      	bne.n	8002aa4 <HAL_I2C_Mem_Write+0xf4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a78:	2bff      	cmp	r3, #255	; 0xff
 8002a7a:	d817      	bhi.n	8002aac <HAL_I2C_Mem_Write+0xfc>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a7c:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8002a7e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a80:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8002a82:	b292      	uxth	r2, r2
 8002a84:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	9000      	str	r0, [sp, #0]
 8002a8a:	e014      	b.n	8002ab6 <HAL_I2C_Mem_Write+0x106>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a8c:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a8e:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a90:	0a12      	lsrs	r2, r2, #8
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a94:	0020      	movs	r0, r4
 8002a96:	002a      	movs	r2, r5
 8002a98:	f7ff fd36 	bl	8002508 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a9c:	2800      	cmp	r0, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa0:	6823      	ldr	r3, [r4, #0]
 8002aa2:	e7dc      	b.n	8002a5e <HAL_I2C_Mem_Write+0xae>
      __HAL_UNLOCK(hi2c);
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	3440      	adds	r4, #64	; 0x40
 8002aa8:	7023      	strb	r3, [r4, #0]
 8002aaa:	e79c      	b.n	80029e6 <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aac:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002aae:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ab2:	045b      	lsls	r3, r3, #17
 8002ab4:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ab6:	0039      	movs	r1, r7
 8002ab8:	0020      	movs	r0, r4
 8002aba:	f7ff fc8b 	bl	80023d4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abe:	002a      	movs	r2, r5
 8002ac0:	0031      	movs	r1, r6
 8002ac2:	0020      	movs	r0, r4
 8002ac4:	f7ff fd20 	bl	8002508 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d000      	beq.n	8002ace <HAL_I2C_Mem_Write+0x11e>
 8002acc:	e78b      	b.n	80029e6 <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ad0:	6822      	ldr	r2, [r4, #0]
 8002ad2:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002ad4:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ad6:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002ad8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002ada:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002adc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002ae4:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ae6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002ae8:	b292      	uxth	r2, r2
 8002aea:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d017      	beq.n	8002b20 <HAL_I2C_Mem_Write+0x170>
 8002af0:	2a00      	cmp	r2, #0
 8002af2:	d115      	bne.n	8002b20 <HAL_I2C_Mem_Write+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002af4:	0033      	movs	r3, r6
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	0020      	movs	r0, r4
 8002afa:	9500      	str	r5, [sp, #0]
 8002afc:	f7ff fd31 	bl	8002562 <I2C_WaitOnFlagUntilTimeout>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d000      	beq.n	8002b06 <HAL_I2C_Mem_Write+0x156>
 8002b04:	e76f      	b.n	80029e6 <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b08:	2bff      	cmp	r3, #255	; 0xff
 8002b0a:	d923      	bls.n	8002b54 <HAL_I2C_Mem_Write+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b0c:	23ff      	movs	r3, #255	; 0xff
 8002b0e:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	22ff      	movs	r2, #255	; 0xff
 8002b14:	9000      	str	r0, [sp, #0]
 8002b16:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b18:	0039      	movs	r1, r7
 8002b1a:	0020      	movs	r0, r4
 8002b1c:	f7ff fc5a 	bl	80023d4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002b20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1cb      	bne.n	8002abe <HAL_I2C_Mem_Write+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b26:	002a      	movs	r2, r5
 8002b28:	0031      	movs	r1, r6
 8002b2a:	0020      	movs	r0, r4
 8002b2c:	f7ff fd49 	bl	80025c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d000      	beq.n	8002b36 <HAL_I2C_Mem_Write+0x186>
 8002b34:	e757      	b.n	80029e6 <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b36:	2120      	movs	r1, #32
 8002b38:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002b3a:	4d0b      	ldr	r5, [pc, #44]	; (8002b68 <HAL_I2C_Mem_Write+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b3c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	402a      	ands	r2, r5
 8002b42:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b44:	0023      	movs	r3, r4
 8002b46:	3341      	adds	r3, #65	; 0x41
 8002b48:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b4a:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8002b4c:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b4e:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002b50:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002b52:	e749      	b.n	80029e8 <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b54:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8002b56:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b58:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002b5a:	b292      	uxth	r2, r2
 8002b5c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	9000      	str	r0, [sp, #0]
 8002b62:	e7d9      	b.n	8002b18 <HAL_I2C_Mem_Write+0x168>
 8002b64:	80002000 	.word	0x80002000
 8002b68:	fe00e800 	.word	0xfe00e800

08002b6c <HAL_I2C_Mem_Read>:
{
 8002b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	9304      	str	r3, [sp, #16]
 8002b72:	ab0e      	add	r3, sp, #56	; 0x38
 8002b74:	9203      	str	r2, [sp, #12]
 8002b76:	cb04      	ldmia	r3!, {r2}
 8002b78:	0004      	movs	r4, r0
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	9205      	str	r2, [sp, #20]
 8002b7e:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b80:	0003      	movs	r3, r0
 8002b82:	3341      	adds	r3, #65	; 0x41
 8002b84:	9307      	str	r3, [sp, #28]
 8002b86:	781b      	ldrb	r3, [r3, #0]
{
 8002b88:	000f      	movs	r7, r1
    return HAL_BUSY;
 8002b8a:	2002      	movs	r0, #2
{
 8002b8c:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d108      	bne.n	8002ba4 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 8002b92:	2a00      	cmp	r2, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_I2C_Mem_Read+0x30>
 8002b96:	9b06      	ldr	r3, [sp, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002ba2:	2001      	movs	r0, #1
}
 8002ba4:	b009      	add	sp, #36	; 0x24
 8002ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002ba8:	0023      	movs	r3, r4
 8002baa:	3340      	adds	r3, #64	; 0x40
 8002bac:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8002bae:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8002bb0:	2a01      	cmp	r2, #1
 8002bb2:	d0f7      	beq.n	8002ba4 <HAL_I2C_Mem_Read+0x38>
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002bb8:	f7ff fad6 	bl	8002168 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	2319      	movs	r3, #25
 8002bc0:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002bc2:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	0020      	movs	r0, r4
 8002bc8:	0209      	lsls	r1, r1, #8
 8002bca:	f7ff fcca 	bl	8002562 <I2C_WaitOnFlagUntilTimeout>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d1e7      	bne.n	8002ba2 <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bd2:	2222      	movs	r2, #34	; 0x22
 8002bd4:	9907      	ldr	r1, [sp, #28]
 8002bd6:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bd8:	0022      	movs	r2, r4
 8002bda:	3242      	adds	r2, #66	; 0x42
 8002bdc:	9207      	str	r2, [sp, #28]
 8002bde:	2240      	movs	r2, #64	; 0x40
 8002be0:	9907      	ldr	r1, [sp, #28]
 8002be2:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8002be4:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be6:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002be8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bea:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002bec:	494d      	ldr	r1, [pc, #308]	; (8002d24 <HAL_I2C_Mem_Read+0x1b8>)
    hi2c->XferCount = Size;
 8002bee:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002bf0:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8002bf2:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002bf4:	7c12      	ldrb	r2, [r2, #16]
 8002bf6:	0020      	movs	r0, r4
 8002bf8:	9100      	str	r1, [sp, #0]
 8002bfa:	0039      	movs	r1, r7
 8002bfc:	f7ff fbea 	bl	80023d4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c00:	002a      	movs	r2, r5
 8002c02:	0031      	movs	r1, r6
 8002c04:	0020      	movs	r0, r4
 8002c06:	f7ff fc7f 	bl	8002508 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	d127      	bne.n	8002c5e <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c0e:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c10:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c12:	2a01      	cmp	r2, #1
 8002c14:	d117      	bne.n	8002c46 <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c16:	466a      	mov	r2, sp
 8002c18:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c1a:	2140      	movs	r1, #64	; 0x40
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c1c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c1e:	0020      	movs	r0, r4
 8002c20:	0033      	movs	r3, r6
 8002c22:	2200      	movs	r2, #0
 8002c24:	9500      	str	r5, [sp, #0]
 8002c26:	f7ff fc9c 	bl	8002562 <I2C_WaitOnFlagUntilTimeout>
 8002c2a:	2800      	cmp	r0, #0
 8002c2c:	d117      	bne.n	8002c5e <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c2e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c30:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <HAL_I2C_Mem_Read+0x1bc>)
 8002c32:	2aff      	cmp	r2, #255	; 0xff
 8002c34:	d817      	bhi.n	8002c66 <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 8002c36:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c38:	b292      	uxth	r2, r2
 8002c3a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	049b      	lsls	r3, r3, #18
 8002c44:	e014      	b.n	8002c70 <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c46:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c48:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c4a:	0a12      	lsrs	r2, r2, #8
 8002c4c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c4e:	0020      	movs	r0, r4
 8002c50:	002a      	movs	r2, r5
 8002c52:	f7ff fc59 	bl	8002508 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c56:	2800      	cmp	r0, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	e7db      	b.n	8002c16 <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	3440      	adds	r4, #64	; 0x40
 8002c62:	7023      	strb	r3, [r4, #0]
 8002c64:	e79d      	b.n	8002ba2 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c66:	22ff      	movs	r2, #255	; 0xff
 8002c68:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c70:	0039      	movs	r1, r7
 8002c72:	0020      	movs	r0, r4
 8002c74:	f7ff fbae 	bl	80023d4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c78:	0033      	movs	r3, r6
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2104      	movs	r1, #4
 8002c7e:	0020      	movs	r0, r4
 8002c80:	9500      	str	r5, [sp, #0]
 8002c82:	f7ff fc6e 	bl	8002562 <I2C_WaitOnFlagUntilTimeout>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d000      	beq.n	8002c8c <HAL_I2C_Mem_Read+0x120>
 8002c8a:	e78a      	b.n	8002ba2 <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002c96:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002c98:	3301      	adds	r3, #1
 8002c9a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002c9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002c9e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ca6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002ca8:	b292      	uxth	r2, r2
 8002caa:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d017      	beq.n	8002ce0 <HAL_I2C_Mem_Read+0x174>
 8002cb0:	2a00      	cmp	r2, #0
 8002cb2:	d115      	bne.n	8002ce0 <HAL_I2C_Mem_Read+0x174>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cb4:	0033      	movs	r3, r6
 8002cb6:	2180      	movs	r1, #128	; 0x80
 8002cb8:	0020      	movs	r0, r4
 8002cba:	9500      	str	r5, [sp, #0]
 8002cbc:	f7ff fc51 	bl	8002562 <I2C_WaitOnFlagUntilTimeout>
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	d000      	beq.n	8002cc6 <HAL_I2C_Mem_Read+0x15a>
 8002cc4:	e76d      	b.n	8002ba2 <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002cc8:	2bff      	cmp	r3, #255	; 0xff
 8002cca:	d923      	bls.n	8002d14 <HAL_I2C_Mem_Read+0x1a8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ccc:	23ff      	movs	r3, #255	; 0xff
 8002cce:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	22ff      	movs	r2, #255	; 0xff
 8002cd4:	9000      	str	r0, [sp, #0]
 8002cd6:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cd8:	0039      	movs	r1, r7
 8002cda:	0020      	movs	r0, r4
 8002cdc:	f7ff fb7a 	bl	80023d4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002ce0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1c8      	bne.n	8002c78 <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce6:	002a      	movs	r2, r5
 8002ce8:	0031      	movs	r1, r6
 8002cea:	0020      	movs	r0, r4
 8002cec:	f7ff fc69 	bl	80025c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d000      	beq.n	8002cf6 <HAL_I2C_Mem_Read+0x18a>
 8002cf4:	e755      	b.n	8002ba2 <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf6:	2120      	movs	r1, #32
 8002cf8:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002cfa:	4d0c      	ldr	r5, [pc, #48]	; (8002d2c <HAL_I2C_Mem_Read+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cfc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	402a      	ands	r2, r5
 8002d02:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d04:	0023      	movs	r3, r4
 8002d06:	3341      	adds	r3, #65	; 0x41
 8002d08:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d0a:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8002d0c:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d0e:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002d10:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002d12:	e747      	b.n	8002ba4 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d14:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8002d16:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d18:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002d1a:	b292      	uxth	r2, r2
 8002d1c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	9000      	str	r0, [sp, #0]
 8002d22:	e7d9      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x16c>
 8002d24:	80002000 	.word	0x80002000
 8002d28:	80002400 	.word	0x80002400
 8002d2c:	fe00e800 	.word	0xfe00e800

08002d30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d30:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d32:	0004      	movs	r4, r0
 8002d34:	3441      	adds	r4, #65	; 0x41
 8002d36:	7822      	ldrb	r2, [r4, #0]
{
 8002d38:	0003      	movs	r3, r0
 8002d3a:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002d3c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3e:	b2d6      	uxtb	r6, r2
 8002d40:	2a20      	cmp	r2, #32
 8002d42:	d118      	bne.n	8002d76 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8002d44:	001d      	movs	r5, r3
 8002d46:	3540      	adds	r5, #64	; 0x40
 8002d48:	782a      	ldrb	r2, [r5, #0]
 8002d4a:	2a01      	cmp	r2, #1
 8002d4c:	d013      	beq.n	8002d76 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4e:	2224      	movs	r2, #36	; 0x24
 8002d50:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3a23      	subs	r2, #35	; 0x23
 8002d56:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d58:	4807      	ldr	r0, [pc, #28]	; (8002d78 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8002d5a:	4391      	bics	r1, r2
 8002d5c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d5e:	6819      	ldr	r1, [r3, #0]
 8002d60:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8002d62:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d64:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d66:	6819      	ldr	r1, [r3, #0]
 8002d68:	4339      	orrs	r1, r7
 8002d6a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002d6c:	6819      	ldr	r1, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002d74:	7028      	strb	r0, [r5, #0]
  }
}
 8002d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d78:	ffffefff 	.word	0xffffefff

08002d7c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d7c:	0002      	movs	r2, r0
{
 8002d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d80:	3241      	adds	r2, #65	; 0x41
 8002d82:	7814      	ldrb	r4, [r2, #0]
{
 8002d84:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d86:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002d88:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8a:	2c20      	cmp	r4, #32
 8002d8c:	d117      	bne.n	8002dbe <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002d8e:	001c      	movs	r4, r3
 8002d90:	3440      	adds	r4, #64	; 0x40
 8002d92:	7826      	ldrb	r6, [r4, #0]
 8002d94:	2e01      	cmp	r6, #1
 8002d96:	d012      	beq.n	8002dbe <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d98:	3022      	adds	r0, #34	; 0x22
 8002d9a:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3823      	subs	r0, #35	; 0x23
 8002da0:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002da2:	4f07      	ldr	r7, [pc, #28]	; (8002dc0 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8002da4:	4386      	bics	r6, r0
 8002da6:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002da8:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8002daa:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002dac:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002dae:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002db0:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	4308      	orrs	r0, r1
 8002db6:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002db8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002dba:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002dbc:	7020      	strb	r0, [r4, #0]
  }
}
 8002dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dc0:	fffff0ff 	.word	0xfffff0ff

08002dc4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dc4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x78>)
{
 8002dc8:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8002dca:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002dcc:	4022      	ands	r2, r4
 8002dce:	2a08      	cmp	r2, #8
 8002dd0:	d031      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x72>
 8002dd2:	2a0c      	cmp	r2, #12
 8002dd4:	d009      	beq.n	8002dea <HAL_RCC_GetSysClockFreq+0x26>
 8002dd6:	2a04      	cmp	r2, #4
 8002dd8:	d125      	bne.n	8002e26 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002dda:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8002ddc:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002dde:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8002de0:	17c0      	asrs	r0, r0, #31
 8002de2:	4018      	ands	r0, r3
 8002de4:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x80>)
 8002de6:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8002de8:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002dea:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002dec:	4816      	ldr	r0, [pc, #88]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002dee:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002df0:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002df2:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002df4:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002df6:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002df8:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dfa:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002dfc:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dfe:	4211      	tst	r1, r2
 8002e00:	d009      	beq.n	8002e16 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e02:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x88>)
 8002e04:	2300      	movs	r3, #0
 8002e06:	2100      	movs	r1, #0
 8002e08:	f7fd fb30 	bl	800046c <__aeabi_lmul>
 8002e0c:	0022      	movs	r2, r4
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f7fd fb0c 	bl	800042c <__aeabi_uldivmod>
 8002e14:	e7e8      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2310      	movs	r3, #16
 8002e1a:	421a      	tst	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002e1e:	4a0c      	ldr	r2, [pc, #48]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002e20:	e7f0      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e22:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x80>)
 8002e24:	e7ee      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002e26:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002e28:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002e2a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002e30:	3301      	adds	r3, #1
 8002e32:	4098      	lsls	r0, r3
      break;
 8002e34:	e7d8      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8002e36:	4805      	ldr	r0, [pc, #20]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x88>)
 8002e38:	e7d6      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x24>
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	ff48e500 	.word	0xff48e500
 8002e44:	00f42400 	.word	0x00f42400
 8002e48:	08005afb 	.word	0x08005afb
 8002e4c:	007a1200 	.word	0x007a1200
 8002e50:	003d0900 	.word	0x003d0900

08002e54 <HAL_RCC_OscConfig>:
{
 8002e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e56:	0005      	movs	r5, r0
 8002e58:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	d05a      	beq.n	8002f14 <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5e:	230c      	movs	r3, #12
 8002e60:	4cbe      	ldr	r4, [pc, #760]	; (800315c <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e64:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e66:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e68:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	025b      	lsls	r3, r3, #9
 8002e6e:	0019      	movs	r1, r3
 8002e70:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e72:	07d2      	lsls	r2, r2, #31
 8002e74:	d442      	bmi.n	8002efc <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e76:	682b      	ldr	r3, [r5, #0]
 8002e78:	079b      	lsls	r3, r3, #30
 8002e7a:	d500      	bpl.n	8002e7e <HAL_RCC_OscConfig+0x2a>
 8002e7c:	e08b      	b.n	8002f96 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e7e:	682b      	ldr	r3, [r5, #0]
 8002e80:	06db      	lsls	r3, r3, #27
 8002e82:	d529      	bpl.n	8002ed8 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e84:	2e00      	cmp	r6, #0
 8002e86:	d000      	beq.n	8002e8a <HAL_RCC_OscConfig+0x36>
 8002e88:	e0dc      	b.n	8003044 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	059b      	lsls	r3, r3, #22
 8002e8e:	d502      	bpl.n	8002e96 <HAL_RCC_OscConfig+0x42>
 8002e90:	69eb      	ldr	r3, [r5, #28]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d03e      	beq.n	8002f14 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e96:	6862      	ldr	r2, [r4, #4]
 8002e98:	49b1      	ldr	r1, [pc, #708]	; (8003160 <HAL_RCC_OscConfig+0x30c>)
 8002e9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ea2:	6861      	ldr	r1, [r4, #4]
 8002ea4:	6a2a      	ldr	r2, [r5, #32]
 8002ea6:	0209      	lsls	r1, r1, #8
 8002ea8:	0a09      	lsrs	r1, r1, #8
 8002eaa:	0612      	lsls	r2, r2, #24
 8002eac:	430a      	orrs	r2, r1
 8002eae:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	0b5b      	lsrs	r3, r3, #13
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	0212      	lsls	r2, r2, #8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002ebc:	68e1      	ldr	r1, [r4, #12]
 8002ebe:	060a      	lsls	r2, r1, #24
 8002ec0:	49a8      	ldr	r1, [pc, #672]	; (8003164 <HAL_RCC_OscConfig+0x310>)
 8002ec2:	0f12      	lsrs	r2, r2, #28
 8002ec4:	5c8a      	ldrb	r2, [r1, r2]
 8002ec6:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ec8:	4aa7      	ldr	r2, [pc, #668]	; (8003168 <HAL_RCC_OscConfig+0x314>)
 8002eca:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8002ecc:	4ba7      	ldr	r3, [pc, #668]	; (800316c <HAL_RCC_OscConfig+0x318>)
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	f7ff f906 	bl	80020e0 <HAL_InitTick>
        if(status != HAL_OK)
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d134      	bne.n	8002f42 <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed8:	682b      	ldr	r3, [r5, #0]
 8002eda:	071b      	lsls	r3, r3, #28
 8002edc:	d500      	bpl.n	8002ee0 <HAL_RCC_OscConfig+0x8c>
 8002ede:	e0e8      	b.n	80030b2 <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee0:	682b      	ldr	r3, [r5, #0]
 8002ee2:	075b      	lsls	r3, r3, #29
 8002ee4:	d500      	bpl.n	8002ee8 <HAL_RCC_OscConfig+0x94>
 8002ee6:	e10a      	b.n	80030fe <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ee8:	682b      	ldr	r3, [r5, #0]
 8002eea:	069b      	lsls	r3, r3, #26
 8002eec:	d500      	bpl.n	8002ef0 <HAL_RCC_OscConfig+0x9c>
 8002eee:	e18e      	b.n	800320e <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d000      	beq.n	8002ef8 <HAL_RCC_OscConfig+0xa4>
 8002ef6:	e1bd      	b.n	8003274 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8002ef8:	2000      	movs	r0, #0
 8002efa:	e022      	b.n	8002f42 <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002efc:	2e08      	cmp	r6, #8
 8002efe:	d003      	beq.n	8002f08 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f00:	2e0c      	cmp	r6, #12
 8002f02:	d109      	bne.n	8002f18 <HAL_RCC_OscConfig+0xc4>
 8002f04:	2f00      	cmp	r7, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	039b      	lsls	r3, r3, #14
 8002f0c:	d5b3      	bpl.n	8002e76 <HAL_RCC_OscConfig+0x22>
 8002f0e:	686b      	ldr	r3, [r5, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1b0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8002f14:	2001      	movs	r0, #1
 8002f16:	e014      	b.n	8002f42 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f18:	686a      	ldr	r2, [r5, #4]
 8002f1a:	428a      	cmp	r2, r1
 8002f1c:	d113      	bne.n	8002f46 <HAL_RCC_OscConfig+0xf2>
 8002f1e:	6822      	ldr	r2, [r4, #0]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f24:	f7ff f920 	bl	8002168 <HAL_GetTick>
 8002f28:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f2a:	2280      	movs	r2, #128	; 0x80
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	0292      	lsls	r2, r2, #10
 8002f30:	4213      	tst	r3, r2
 8002f32:	d1a0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f34:	f7ff f918 	bl	8002168 <HAL_GetTick>
 8002f38:	9b00      	ldr	r3, [sp, #0]
 8002f3a:	1ac0      	subs	r0, r0, r3
 8002f3c:	2864      	cmp	r0, #100	; 0x64
 8002f3e:	d9f4      	bls.n	8002f2a <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 8002f40:	2003      	movs	r0, #3
}
 8002f42:	b005      	add	sp, #20
 8002f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f46:	21a0      	movs	r1, #160	; 0xa0
 8002f48:	02c9      	lsls	r1, r1, #11
 8002f4a:	428a      	cmp	r2, r1
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCC_OscConfig+0x106>
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	6821      	ldr	r1, [r4, #0]
 8002f52:	02d2      	lsls	r2, r2, #11
 8002f54:	430a      	orrs	r2, r1
 8002f56:	6022      	str	r2, [r4, #0]
 8002f58:	e7e1      	b.n	8002f1e <HAL_RCC_OscConfig+0xca>
 8002f5a:	6821      	ldr	r1, [r4, #0]
 8002f5c:	4884      	ldr	r0, [pc, #528]	; (8003170 <HAL_RCC_OscConfig+0x31c>)
 8002f5e:	4001      	ands	r1, r0
 8002f60:	6021      	str	r1, [r4, #0]
 8002f62:	6821      	ldr	r1, [r4, #0]
 8002f64:	400b      	ands	r3, r1
 8002f66:	9303      	str	r3, [sp, #12]
 8002f68:	9b03      	ldr	r3, [sp, #12]
 8002f6a:	4982      	ldr	r1, [pc, #520]	; (8003174 <HAL_RCC_OscConfig+0x320>)
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	400b      	ands	r3, r1
 8002f70:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f72:	2a00      	cmp	r2, #0
 8002f74:	d1d6      	bne.n	8002f24 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 8002f76:	f7ff f8f7 	bl	8002168 <HAL_GetTick>
 8002f7a:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f7c:	2280      	movs	r2, #128	; 0x80
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	0292      	lsls	r2, r2, #10
 8002f82:	4213      	tst	r3, r2
 8002f84:	d100      	bne.n	8002f88 <HAL_RCC_OscConfig+0x134>
 8002f86:	e776      	b.n	8002e76 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f88:	f7ff f8ee 	bl	8002168 <HAL_GetTick>
 8002f8c:	9b00      	ldr	r3, [sp, #0]
 8002f8e:	1ac0      	subs	r0, r0, r3
 8002f90:	2864      	cmp	r0, #100	; 0x64
 8002f92:	d9f3      	bls.n	8002f7c <HAL_RCC_OscConfig+0x128>
 8002f94:	e7d4      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 8002f96:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f98:	2e04      	cmp	r6, #4
 8002f9a:	d003      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f9c:	2e0c      	cmp	r6, #12
 8002f9e:	d124      	bne.n	8002fea <HAL_RCC_OscConfig+0x196>
 8002fa0:	2f00      	cmp	r7, #0
 8002fa2:	d122      	bne.n	8002fea <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	075b      	lsls	r3, r3, #29
 8002fa8:	d501      	bpl.n	8002fae <HAL_RCC_OscConfig+0x15a>
 8002faa:	2a00      	cmp	r2, #0
 8002fac:	d0b2      	beq.n	8002f14 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fae:	6861      	ldr	r1, [r4, #4]
 8002fb0:	692b      	ldr	r3, [r5, #16]
 8002fb2:	4871      	ldr	r0, [pc, #452]	; (8003178 <HAL_RCC_OscConfig+0x324>)
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	4001      	ands	r1, r0
 8002fb8:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002fba:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	438b      	bics	r3, r1
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fc6:	f7ff fefd 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8002fca:	68e3      	ldr	r3, [r4, #12]
 8002fcc:	4a65      	ldr	r2, [pc, #404]	; (8003164 <HAL_RCC_OscConfig+0x310>)
 8002fce:	061b      	lsls	r3, r3, #24
 8002fd0:	0f1b      	lsrs	r3, r3, #28
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	40d8      	lsrs	r0, r3
 8002fd6:	4b64      	ldr	r3, [pc, #400]	; (8003168 <HAL_RCC_OscConfig+0x314>)
 8002fd8:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8002fda:	4b64      	ldr	r3, [pc, #400]	; (800316c <HAL_RCC_OscConfig+0x318>)
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	f7ff f87f 	bl	80020e0 <HAL_InitTick>
      if(status != HAL_OK)
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d100      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x194>
 8002fe6:	e74a      	b.n	8002e7e <HAL_RCC_OscConfig+0x2a>
 8002fe8:	e7ab      	b.n	8002f42 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002fea:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8002fec:	2a00      	cmp	r2, #0
 8002fee:	d018      	beq.n	8003022 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002ff0:	2109      	movs	r1, #9
 8002ff2:	438b      	bics	r3, r1
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002ff8:	f7ff f8b6 	bl	8002168 <HAL_GetTick>
 8002ffc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ffe:	2204      	movs	r2, #4
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	4213      	tst	r3, r2
 8003004:	d007      	beq.n	8003016 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003006:	6862      	ldr	r2, [r4, #4]
 8003008:	692b      	ldr	r3, [r5, #16]
 800300a:	495b      	ldr	r1, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x324>)
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	400a      	ands	r2, r1
 8003010:	4313      	orrs	r3, r2
 8003012:	6063      	str	r3, [r4, #4]
 8003014:	e733      	b.n	8002e7e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003016:	f7ff f8a7 	bl	8002168 <HAL_GetTick>
 800301a:	1bc0      	subs	r0, r0, r7
 800301c:	2802      	cmp	r0, #2
 800301e:	d9ee      	bls.n	8002ffe <HAL_RCC_OscConfig+0x1aa>
 8003020:	e78e      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8003022:	2201      	movs	r2, #1
 8003024:	4393      	bics	r3, r2
 8003026:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003028:	f7ff f89e 	bl	8002168 <HAL_GetTick>
 800302c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800302e:	2204      	movs	r2, #4
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	4213      	tst	r3, r2
 8003034:	d100      	bne.n	8003038 <HAL_RCC_OscConfig+0x1e4>
 8003036:	e722      	b.n	8002e7e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003038:	f7ff f896 	bl	8002168 <HAL_GetTick>
 800303c:	1bc0      	subs	r0, r0, r7
 800303e:	2802      	cmp	r0, #2
 8003040:	d9f5      	bls.n	800302e <HAL_RCC_OscConfig+0x1da>
 8003042:	e77d      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003044:	69eb      	ldr	r3, [r5, #28]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d020      	beq.n	800308c <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	6822      	ldr	r2, [r4, #0]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4313      	orrs	r3, r2
 8003052:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003054:	f7ff f888 	bl	8002168 <HAL_GetTick>
 8003058:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800305a:	2280      	movs	r2, #128	; 0x80
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	0092      	lsls	r2, r2, #2
 8003060:	4213      	tst	r3, r2
 8003062:	d00d      	beq.n	8003080 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003064:	6863      	ldr	r3, [r4, #4]
 8003066:	4a3e      	ldr	r2, [pc, #248]	; (8003160 <HAL_RCC_OscConfig+0x30c>)
 8003068:	4013      	ands	r3, r2
 800306a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800306c:	4313      	orrs	r3, r2
 800306e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003070:	6862      	ldr	r2, [r4, #4]
 8003072:	6a2b      	ldr	r3, [r5, #32]
 8003074:	0212      	lsls	r2, r2, #8
 8003076:	061b      	lsls	r3, r3, #24
 8003078:	0a12      	lsrs	r2, r2, #8
 800307a:	4313      	orrs	r3, r2
 800307c:	6063      	str	r3, [r4, #4]
 800307e:	e72b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003080:	f7ff f872 	bl	8002168 <HAL_GetTick>
 8003084:	1bc0      	subs	r0, r0, r7
 8003086:	2802      	cmp	r0, #2
 8003088:	d9e7      	bls.n	800305a <HAL_RCC_OscConfig+0x206>
 800308a:	e759      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	4a3b      	ldr	r2, [pc, #236]	; (800317c <HAL_RCC_OscConfig+0x328>)
 8003090:	4013      	ands	r3, r2
 8003092:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003094:	f7ff f868 	bl	8002168 <HAL_GetTick>
 8003098:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800309a:	2280      	movs	r2, #128	; 0x80
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	0092      	lsls	r2, r2, #2
 80030a0:	4213      	tst	r3, r2
 80030a2:	d100      	bne.n	80030a6 <HAL_RCC_OscConfig+0x252>
 80030a4:	e718      	b.n	8002ed8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030a6:	f7ff f85f 	bl	8002168 <HAL_GetTick>
 80030aa:	1bc0      	subs	r0, r0, r7
 80030ac:	2802      	cmp	r0, #2
 80030ae:	d9f4      	bls.n	800309a <HAL_RCC_OscConfig+0x246>
 80030b0:	e746      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b2:	696a      	ldr	r2, [r5, #20]
 80030b4:	2301      	movs	r3, #1
 80030b6:	2a00      	cmp	r2, #0
 80030b8:	d010      	beq.n	80030dc <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 80030ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80030bc:	4313      	orrs	r3, r2
 80030be:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80030c0:	f7ff f852 	bl	8002168 <HAL_GetTick>
 80030c4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030c6:	2202      	movs	r2, #2
 80030c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80030ca:	4213      	tst	r3, r2
 80030cc:	d000      	beq.n	80030d0 <HAL_RCC_OscConfig+0x27c>
 80030ce:	e707      	b.n	8002ee0 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d0:	f7ff f84a 	bl	8002168 <HAL_GetTick>
 80030d4:	1bc0      	subs	r0, r0, r7
 80030d6:	2802      	cmp	r0, #2
 80030d8:	d9f5      	bls.n	80030c6 <HAL_RCC_OscConfig+0x272>
 80030da:	e731      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 80030dc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80030de:	439a      	bics	r2, r3
 80030e0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80030e2:	f7ff f841 	bl	8002168 <HAL_GetTick>
 80030e6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030e8:	2202      	movs	r2, #2
 80030ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80030ec:	4213      	tst	r3, r2
 80030ee:	d100      	bne.n	80030f2 <HAL_RCC_OscConfig+0x29e>
 80030f0:	e6f6      	b.n	8002ee0 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f2:	f7ff f839 	bl	8002168 <HAL_GetTick>
 80030f6:	1bc0      	subs	r0, r0, r7
 80030f8:	2802      	cmp	r0, #2
 80030fa:	d9f5      	bls.n	80030e8 <HAL_RCC_OscConfig+0x294>
 80030fc:	e720      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030fe:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003100:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003102:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003104:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003106:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003108:	421a      	tst	r2, r3
 800310a:	d104      	bne.n	8003116 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800310c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800310e:	4313      	orrs	r3, r2
 8003110:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003112:	2301      	movs	r3, #1
 8003114:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	2280      	movs	r2, #128	; 0x80
 8003118:	4f19      	ldr	r7, [pc, #100]	; (8003180 <HAL_RCC_OscConfig+0x32c>)
 800311a:	0052      	lsls	r2, r2, #1
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4213      	tst	r3, r2
 8003120:	d008      	beq.n	8003134 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003122:	2280      	movs	r2, #128	; 0x80
 8003124:	68ab      	ldr	r3, [r5, #8]
 8003126:	0052      	lsls	r2, r2, #1
 8003128:	4293      	cmp	r3, r2
 800312a:	d12b      	bne.n	8003184 <HAL_RCC_OscConfig+0x330>
 800312c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800312e:	4313      	orrs	r3, r2
 8003130:	6523      	str	r3, [r4, #80]	; 0x50
 8003132:	e04c      	b.n	80031ce <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003134:	2280      	movs	r2, #128	; 0x80
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	0052      	lsls	r2, r2, #1
 800313a:	4313      	orrs	r3, r2
 800313c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800313e:	f7ff f813 	bl	8002168 <HAL_GetTick>
 8003142:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	2280      	movs	r2, #128	; 0x80
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	0052      	lsls	r2, r2, #1
 800314a:	4213      	tst	r3, r2
 800314c:	d1e9      	bne.n	8003122 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7ff f80b 	bl	8002168 <HAL_GetTick>
 8003152:	9b01      	ldr	r3, [sp, #4]
 8003154:	1ac0      	subs	r0, r0, r3
 8003156:	2864      	cmp	r0, #100	; 0x64
 8003158:	d9f4      	bls.n	8003144 <HAL_RCC_OscConfig+0x2f0>
 800315a:	e6f1      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
 800315c:	40021000 	.word	0x40021000
 8003160:	ffff1fff 	.word	0xffff1fff
 8003164:	08005ae3 	.word	0x08005ae3
 8003168:	2000003c 	.word	0x2000003c
 800316c:	20000044 	.word	0x20000044
 8003170:	fffeffff 	.word	0xfffeffff
 8003174:	fffbffff 	.word	0xfffbffff
 8003178:	ffffe0ff 	.word	0xffffe0ff
 800317c:	fffffeff 	.word	0xfffffeff
 8003180:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003184:	2b00      	cmp	r3, #0
 8003186:	d116      	bne.n	80031b6 <HAL_RCC_OscConfig+0x362>
 8003188:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800318a:	4a6b      	ldr	r2, [pc, #428]	; (8003338 <HAL_RCC_OscConfig+0x4e4>)
 800318c:	4013      	ands	r3, r2
 800318e:	6523      	str	r3, [r4, #80]	; 0x50
 8003190:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003192:	4a6a      	ldr	r2, [pc, #424]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 8003194:	4013      	ands	r3, r2
 8003196:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003198:	f7fe ffe6 	bl	8002168 <HAL_GetTick>
 800319c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800319e:	2280      	movs	r2, #128	; 0x80
 80031a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80031a2:	0092      	lsls	r2, r2, #2
 80031a4:	4213      	tst	r3, r2
 80031a6:	d01a      	beq.n	80031de <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7fe ffde 	bl	8002168 <HAL_GetTick>
 80031ac:	4b64      	ldr	r3, [pc, #400]	; (8003340 <HAL_RCC_OscConfig+0x4ec>)
 80031ae:	1bc0      	subs	r0, r0, r7
 80031b0:	4298      	cmp	r0, r3
 80031b2:	d9f4      	bls.n	800319e <HAL_RCC_OscConfig+0x34a>
 80031b4:	e6c4      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b6:	21a0      	movs	r1, #160	; 0xa0
 80031b8:	00c9      	lsls	r1, r1, #3
 80031ba:	428b      	cmp	r3, r1
 80031bc:	d118      	bne.n	80031f0 <HAL_RCC_OscConfig+0x39c>
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6523      	str	r3, [r4, #80]	; 0x50
 80031c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80031ca:	431a      	orrs	r2, r3
 80031cc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80031ce:	f7fe ffcb 	bl	8002168 <HAL_GetTick>
 80031d2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031d4:	2280      	movs	r2, #128	; 0x80
 80031d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80031d8:	0092      	lsls	r2, r2, #2
 80031da:	4213      	tst	r3, r2
 80031dc:	d010      	beq.n	8003200 <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 80031de:	9b00      	ldr	r3, [sp, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d000      	beq.n	80031e6 <HAL_RCC_OscConfig+0x392>
 80031e4:	e680      	b.n	8002ee8 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031e8:	4a56      	ldr	r2, [pc, #344]	; (8003344 <HAL_RCC_OscConfig+0x4f0>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80031ee:	e67b      	b.n	8002ee8 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80031f2:	4a51      	ldr	r2, [pc, #324]	; (8003338 <HAL_RCC_OscConfig+0x4e4>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	6523      	str	r3, [r4, #80]	; 0x50
 80031f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80031fa:	4a50      	ldr	r2, [pc, #320]	; (800333c <HAL_RCC_OscConfig+0x4e8>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	e797      	b.n	8003130 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003200:	f7fe ffb2 	bl	8002168 <HAL_GetTick>
 8003204:	4b4e      	ldr	r3, [pc, #312]	; (8003340 <HAL_RCC_OscConfig+0x4ec>)
 8003206:	1bc0      	subs	r0, r0, r7
 8003208:	4298      	cmp	r0, r3
 800320a:	d9e3      	bls.n	80031d4 <HAL_RCC_OscConfig+0x380>
 800320c:	e698      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800320e:	69a9      	ldr	r1, [r5, #24]
 8003210:	2301      	movs	r3, #1
 8003212:	4a4d      	ldr	r2, [pc, #308]	; (8003348 <HAL_RCC_OscConfig+0x4f4>)
 8003214:	2900      	cmp	r1, #0
 8003216:	d018      	beq.n	800324a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 8003218:	68a1      	ldr	r1, [r4, #8]
 800321a:	4319      	orrs	r1, r3
 800321c:	60a1      	str	r1, [r4, #8]
 800321e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003220:	430b      	orrs	r3, r1
 8003222:	6363      	str	r3, [r4, #52]	; 0x34
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	6a11      	ldr	r1, [r2, #32]
 8003228:	019b      	lsls	r3, r3, #6
 800322a:	430b      	orrs	r3, r1
 800322c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800322e:	f7fe ff9b 	bl	8002168 <HAL_GetTick>
 8003232:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003234:	2202      	movs	r2, #2
 8003236:	68a3      	ldr	r3, [r4, #8]
 8003238:	4213      	tst	r3, r2
 800323a:	d000      	beq.n	800323e <HAL_RCC_OscConfig+0x3ea>
 800323c:	e658      	b.n	8002ef0 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800323e:	f7fe ff93 	bl	8002168 <HAL_GetTick>
 8003242:	1bc0      	subs	r0, r0, r7
 8003244:	2802      	cmp	r0, #2
 8003246:	d9f5      	bls.n	8003234 <HAL_RCC_OscConfig+0x3e0>
 8003248:	e67a      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 800324a:	68a1      	ldr	r1, [r4, #8]
 800324c:	4399      	bics	r1, r3
 800324e:	60a1      	str	r1, [r4, #8]
 8003250:	6a13      	ldr	r3, [r2, #32]
 8003252:	493e      	ldr	r1, [pc, #248]	; (800334c <HAL_RCC_OscConfig+0x4f8>)
 8003254:	400b      	ands	r3, r1
 8003256:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003258:	f7fe ff86 	bl	8002168 <HAL_GetTick>
 800325c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800325e:	2202      	movs	r2, #2
 8003260:	68a3      	ldr	r3, [r4, #8]
 8003262:	4213      	tst	r3, r2
 8003264:	d100      	bne.n	8003268 <HAL_RCC_OscConfig+0x414>
 8003266:	e643      	b.n	8002ef0 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003268:	f7fe ff7e 	bl	8002168 <HAL_GetTick>
 800326c:	1bc0      	subs	r0, r0, r7
 800326e:	2802      	cmp	r0, #2
 8003270:	d9f5      	bls.n	800325e <HAL_RCC_OscConfig+0x40a>
 8003272:	e665      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003274:	2e0c      	cmp	r6, #12
 8003276:	d043      	beq.n	8003300 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003278:	4a35      	ldr	r2, [pc, #212]	; (8003350 <HAL_RCC_OscConfig+0x4fc>)
 800327a:	2b02      	cmp	r3, #2
 800327c:	d12e      	bne.n	80032dc <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 800327e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003280:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003282:	4013      	ands	r3, r2
 8003284:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003286:	f7fe ff6f 	bl	8002168 <HAL_GetTick>
 800328a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800328c:	04bf      	lsls	r7, r7, #18
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	423b      	tst	r3, r7
 8003292:	d11d      	bne.n	80032d0 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003294:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8003296:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003298:	68e2      	ldr	r2, [r4, #12]
 800329a:	430b      	orrs	r3, r1
 800329c:	492d      	ldr	r1, [pc, #180]	; (8003354 <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800329e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a0:	400a      	ands	r2, r1
 80032a2:	4313      	orrs	r3, r2
 80032a4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032a6:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	6822      	ldr	r2, [r4, #0]
 80032b0:	045b      	lsls	r3, r3, #17
 80032b2:	4313      	orrs	r3, r2
 80032b4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80032b6:	f7fe ff57 	bl	8002168 <HAL_GetTick>
 80032ba:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	4233      	tst	r3, r6
 80032c0:	d000      	beq.n	80032c4 <HAL_RCC_OscConfig+0x470>
 80032c2:	e619      	b.n	8002ef8 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fe ff50 	bl	8002168 <HAL_GetTick>
 80032c8:	1b40      	subs	r0, r0, r5
 80032ca:	2802      	cmp	r0, #2
 80032cc:	d9f6      	bls.n	80032bc <HAL_RCC_OscConfig+0x468>
 80032ce:	e637      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fe ff4a 	bl	8002168 <HAL_GetTick>
 80032d4:	1b80      	subs	r0, r0, r6
 80032d6:	2802      	cmp	r0, #2
 80032d8:	d9d9      	bls.n	800328e <HAL_RCC_OscConfig+0x43a>
 80032da:	e631      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 80032dc:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032de:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80032e0:	4013      	ands	r3, r2
 80032e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80032e4:	f7fe ff40 	bl	8002168 <HAL_GetTick>
 80032e8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032ea:	04b6      	lsls	r6, r6, #18
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	4233      	tst	r3, r6
 80032f0:	d100      	bne.n	80032f4 <HAL_RCC_OscConfig+0x4a0>
 80032f2:	e601      	b.n	8002ef8 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f4:	f7fe ff38 	bl	8002168 <HAL_GetTick>
 80032f8:	1b40      	subs	r0, r0, r5
 80032fa:	2802      	cmp	r0, #2
 80032fc:	d9f6      	bls.n	80032ec <HAL_RCC_OscConfig+0x498>
 80032fe:	e61f      	b.n	8002f40 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8003300:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003302:	2b01      	cmp	r3, #1
 8003304:	d100      	bne.n	8003308 <HAL_RCC_OscConfig+0x4b4>
 8003306:	e61c      	b.n	8002f42 <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003308:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800330a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800330e:	0252      	lsls	r2, r2, #9
 8003310:	401a      	ands	r2, r3
 8003312:	428a      	cmp	r2, r1
 8003314:	d000      	beq.n	8003318 <HAL_RCC_OscConfig+0x4c4>
 8003316:	e5fd      	b.n	8002f14 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003318:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800331c:	0392      	lsls	r2, r2, #14
 800331e:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003320:	428a      	cmp	r2, r1
 8003322:	d000      	beq.n	8003326 <HAL_RCC_OscConfig+0x4d2>
 8003324:	e5f6      	b.n	8002f14 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003326:	22c0      	movs	r2, #192	; 0xc0
 8003328:	0412      	lsls	r2, r2, #16
 800332a:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800332c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800332e:	4293      	cmp	r3, r2
 8003330:	d100      	bne.n	8003334 <HAL_RCC_OscConfig+0x4e0>
 8003332:	e5e1      	b.n	8002ef8 <HAL_RCC_OscConfig+0xa4>
 8003334:	e5ee      	b.n	8002f14 <HAL_RCC_OscConfig+0xc0>
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	fffffeff 	.word	0xfffffeff
 800333c:	fffffbff 	.word	0xfffffbff
 8003340:	00001388 	.word	0x00001388
 8003344:	efffffff 	.word	0xefffffff
 8003348:	40010000 	.word	0x40010000
 800334c:	ffffdfff 	.word	0xffffdfff
 8003350:	feffffff 	.word	0xfeffffff
 8003354:	ff02ffff 	.word	0xff02ffff

08003358 <HAL_RCC_ClockConfig>:
{
 8003358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800335a:	1e04      	subs	r4, r0, #0
 800335c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800335e:	d101      	bne.n	8003364 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8003360:	2001      	movs	r0, #1
}
 8003362:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003364:	2501      	movs	r5, #1
 8003366:	4e5b      	ldr	r6, [pc, #364]	; (80034d4 <HAL_RCC_ClockConfig+0x17c>)
 8003368:	9a01      	ldr	r2, [sp, #4]
 800336a:	6833      	ldr	r3, [r6, #0]
 800336c:	402b      	ands	r3, r5
 800336e:	4293      	cmp	r3, r2
 8003370:	d331      	bcc.n	80033d6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	0793      	lsls	r3, r2, #30
 8003376:	d443      	bmi.n	8003400 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003378:	07d3      	lsls	r3, r2, #31
 800337a:	d449      	bmi.n	8003410 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800337c:	2501      	movs	r5, #1
 800337e:	6833      	ldr	r3, [r6, #0]
 8003380:	9a01      	ldr	r2, [sp, #4]
 8003382:	402b      	ands	r3, r5
 8003384:	4293      	cmp	r3, r2
 8003386:	d909      	bls.n	800339c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003388:	6833      	ldr	r3, [r6, #0]
 800338a:	43ab      	bics	r3, r5
 800338c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800338e:	f7fe feeb 	bl	8002168 <HAL_GetTick>
 8003392:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003394:	6833      	ldr	r3, [r6, #0]
 8003396:	422b      	tst	r3, r5
 8003398:	d000      	beq.n	800339c <HAL_RCC_ClockConfig+0x44>
 800339a:	e08c      	b.n	80034b6 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	6822      	ldr	r2, [r4, #0]
 800339e:	4d4e      	ldr	r5, [pc, #312]	; (80034d8 <HAL_RCC_ClockConfig+0x180>)
 80033a0:	0753      	lsls	r3, r2, #29
 80033a2:	d500      	bpl.n	80033a6 <HAL_RCC_ClockConfig+0x4e>
 80033a4:	e08f      	b.n	80034c6 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a6:	0713      	lsls	r3, r2, #28
 80033a8:	d506      	bpl.n	80033b8 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033aa:	68e9      	ldr	r1, [r5, #12]
 80033ac:	6923      	ldr	r3, [r4, #16]
 80033ae:	4a4b      	ldr	r2, [pc, #300]	; (80034dc <HAL_RCC_ClockConfig+0x184>)
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	400a      	ands	r2, r1
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033b8:	f7ff fd04 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 80033bc:	68eb      	ldr	r3, [r5, #12]
 80033be:	4a48      	ldr	r2, [pc, #288]	; (80034e0 <HAL_RCC_ClockConfig+0x188>)
 80033c0:	061b      	lsls	r3, r3, #24
 80033c2:	0f1b      	lsrs	r3, r3, #28
 80033c4:	5cd3      	ldrb	r3, [r2, r3]
 80033c6:	40d8      	lsrs	r0, r3
 80033c8:	4b46      	ldr	r3, [pc, #280]	; (80034e4 <HAL_RCC_ClockConfig+0x18c>)
 80033ca:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80033cc:	4b46      	ldr	r3, [pc, #280]	; (80034e8 <HAL_RCC_ClockConfig+0x190>)
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	f7fe fe86 	bl	80020e0 <HAL_InitTick>
  if(status != HAL_OK)
 80033d4:	e7c5      	b.n	8003362 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	6833      	ldr	r3, [r6, #0]
 80033d8:	9a01      	ldr	r2, [sp, #4]
 80033da:	43ab      	bics	r3, r5
 80033dc:	4313      	orrs	r3, r2
 80033de:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80033e0:	f7fe fec2 	bl	8002168 <HAL_GetTick>
 80033e4:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	6833      	ldr	r3, [r6, #0]
 80033e8:	9a01      	ldr	r2, [sp, #4]
 80033ea:	402b      	ands	r3, r5
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d0c0      	beq.n	8003372 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f0:	f7fe feba 	bl	8002168 <HAL_GetTick>
 80033f4:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <HAL_RCC_ClockConfig+0x194>)
 80033f6:	1bc0      	subs	r0, r0, r7
 80033f8:	4298      	cmp	r0, r3
 80033fa:	d9f4      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80033fc:	2003      	movs	r0, #3
 80033fe:	e7b0      	b.n	8003362 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003400:	20f0      	movs	r0, #240	; 0xf0
 8003402:	4935      	ldr	r1, [pc, #212]	; (80034d8 <HAL_RCC_ClockConfig+0x180>)
 8003404:	68cb      	ldr	r3, [r1, #12]
 8003406:	4383      	bics	r3, r0
 8003408:	68a0      	ldr	r0, [r4, #8]
 800340a:	4303      	orrs	r3, r0
 800340c:	60cb      	str	r3, [r1, #12]
 800340e:	e7b3      	b.n	8003378 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003410:	4d31      	ldr	r5, [pc, #196]	; (80034d8 <HAL_RCC_ClockConfig+0x180>)
 8003412:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003414:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003416:	2a02      	cmp	r2, #2
 8003418:	d118      	bne.n	800344c <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800341a:	039b      	lsls	r3, r3, #14
 800341c:	d5a0      	bpl.n	8003360 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341e:	2103      	movs	r1, #3
 8003420:	68eb      	ldr	r3, [r5, #12]
 8003422:	438b      	bics	r3, r1
 8003424:	4313      	orrs	r3, r2
 8003426:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8003428:	f7fe fe9e 	bl	8002168 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800342e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003430:	2b02      	cmp	r3, #2
 8003432:	d118      	bne.n	8003466 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003434:	220c      	movs	r2, #12
 8003436:	68eb      	ldr	r3, [r5, #12]
 8003438:	4013      	ands	r3, r2
 800343a:	2b08      	cmp	r3, #8
 800343c:	d09e      	beq.n	800337c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343e:	f7fe fe93 	bl	8002168 <HAL_GetTick>
 8003442:	4b2a      	ldr	r3, [pc, #168]	; (80034ec <HAL_RCC_ClockConfig+0x194>)
 8003444:	1bc0      	subs	r0, r0, r7
 8003446:	4298      	cmp	r0, r3
 8003448:	d9f4      	bls.n	8003434 <HAL_RCC_ClockConfig+0xdc>
 800344a:	e7d7      	b.n	80033fc <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344c:	2a03      	cmp	r2, #3
 800344e:	d102      	bne.n	8003456 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003450:	019b      	lsls	r3, r3, #6
 8003452:	d4e4      	bmi.n	800341e <HAL_RCC_ClockConfig+0xc6>
 8003454:	e784      	b.n	8003360 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003456:	2a01      	cmp	r2, #1
 8003458:	d102      	bne.n	8003460 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800345a:	075b      	lsls	r3, r3, #29
 800345c:	d4df      	bmi.n	800341e <HAL_RCC_ClockConfig+0xc6>
 800345e:	e77f      	b.n	8003360 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003460:	059b      	lsls	r3, r3, #22
 8003462:	d4dc      	bmi.n	800341e <HAL_RCC_ClockConfig+0xc6>
 8003464:	e77c      	b.n	8003360 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003466:	2b03      	cmp	r3, #3
 8003468:	d10b      	bne.n	8003482 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800346a:	220c      	movs	r2, #12
 800346c:	68eb      	ldr	r3, [r5, #12]
 800346e:	4013      	ands	r3, r2
 8003470:	4293      	cmp	r3, r2
 8003472:	d083      	beq.n	800337c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003474:	f7fe fe78 	bl	8002168 <HAL_GetTick>
 8003478:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <HAL_RCC_ClockConfig+0x194>)
 800347a:	1bc0      	subs	r0, r0, r7
 800347c:	4298      	cmp	r0, r3
 800347e:	d9f4      	bls.n	800346a <HAL_RCC_ClockConfig+0x112>
 8003480:	e7bc      	b.n	80033fc <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003482:	2b01      	cmp	r3, #1
 8003484:	d011      	beq.n	80034aa <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003486:	220c      	movs	r2, #12
 8003488:	68eb      	ldr	r3, [r5, #12]
 800348a:	4213      	tst	r3, r2
 800348c:	d100      	bne.n	8003490 <HAL_RCC_ClockConfig+0x138>
 800348e:	e775      	b.n	800337c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003490:	f7fe fe6a 	bl	8002168 <HAL_GetTick>
 8003494:	4b15      	ldr	r3, [pc, #84]	; (80034ec <HAL_RCC_ClockConfig+0x194>)
 8003496:	1bc0      	subs	r0, r0, r7
 8003498:	4298      	cmp	r0, r3
 800349a:	d9f4      	bls.n	8003486 <HAL_RCC_ClockConfig+0x12e>
 800349c:	e7ae      	b.n	80033fc <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349e:	f7fe fe63 	bl	8002168 <HAL_GetTick>
 80034a2:	4b12      	ldr	r3, [pc, #72]	; (80034ec <HAL_RCC_ClockConfig+0x194>)
 80034a4:	1bc0      	subs	r0, r0, r7
 80034a6:	4298      	cmp	r0, r3
 80034a8:	d8a8      	bhi.n	80033fc <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034aa:	220c      	movs	r2, #12
 80034ac:	68eb      	ldr	r3, [r5, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d1f4      	bne.n	800349e <HAL_RCC_ClockConfig+0x146>
 80034b4:	e762      	b.n	800337c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b6:	f7fe fe57 	bl	8002168 <HAL_GetTick>
 80034ba:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <HAL_RCC_ClockConfig+0x194>)
 80034bc:	1bc0      	subs	r0, r0, r7
 80034be:	4298      	cmp	r0, r3
 80034c0:	d800      	bhi.n	80034c4 <HAL_RCC_ClockConfig+0x16c>
 80034c2:	e767      	b.n	8003394 <HAL_RCC_ClockConfig+0x3c>
 80034c4:	e79a      	b.n	80033fc <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c6:	68eb      	ldr	r3, [r5, #12]
 80034c8:	4909      	ldr	r1, [pc, #36]	; (80034f0 <HAL_RCC_ClockConfig+0x198>)
 80034ca:	400b      	ands	r3, r1
 80034cc:	68e1      	ldr	r1, [r4, #12]
 80034ce:	430b      	orrs	r3, r1
 80034d0:	60eb      	str	r3, [r5, #12]
 80034d2:	e768      	b.n	80033a6 <HAL_RCC_ClockConfig+0x4e>
 80034d4:	40022000 	.word	0x40022000
 80034d8:	40021000 	.word	0x40021000
 80034dc:	ffffc7ff 	.word	0xffffc7ff
 80034e0:	08005ae3 	.word	0x08005ae3
 80034e4:	2000003c 	.word	0x2000003c
 80034e8:	20000044 	.word	0x20000044
 80034ec:	00001388 	.word	0x00001388
 80034f0:	fffff8ff 	.word	0xfffff8ff

080034f4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <HAL_RCC_GetPCLK1Freq+0x14>)
 80034f6:	4a05      	ldr	r2, [pc, #20]	; (800350c <HAL_RCC_GetPCLK1Freq+0x18>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	055b      	lsls	r3, r3, #21
 80034fc:	0f5b      	lsrs	r3, r3, #29
 80034fe:	5cd3      	ldrb	r3, [r2, r3]
 8003500:	4a03      	ldr	r2, [pc, #12]	; (8003510 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003502:	6810      	ldr	r0, [r2, #0]
 8003504:	40d8      	lsrs	r0, r3
}
 8003506:	4770      	bx	lr
 8003508:	40021000 	.word	0x40021000
 800350c:	08005af3 	.word	0x08005af3
 8003510:	2000003c 	.word	0x2000003c

08003514 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003516:	4a05      	ldr	r2, [pc, #20]	; (800352c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	049b      	lsls	r3, r3, #18
 800351c:	0f5b      	lsrs	r3, r3, #29
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	4a03      	ldr	r2, [pc, #12]	; (8003530 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003522:	6810      	ldr	r0, [r2, #0]
 8003524:	40d8      	lsrs	r0, r3
}
 8003526:	4770      	bx	lr
 8003528:	40021000 	.word	0x40021000
 800352c:	08005af3 	.word	0x08005af3
 8003530:	2000003c 	.word	0x2000003c

08003534 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003534:	6803      	ldr	r3, [r0, #0]
{
 8003536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003538:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800353a:	069b      	lsls	r3, r3, #26
 800353c:	d52d      	bpl.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x66>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353e:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8003540:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003542:	4c5c      	ldr	r4, [pc, #368]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8003544:	055b      	lsls	r3, r3, #21
 8003546:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8003548:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354a:	421a      	tst	r2, r3
 800354c:	d104      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003550:	4313      	orrs	r3, r2
 8003552:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003554:	2301      	movs	r3, #1
 8003556:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	2780      	movs	r7, #128	; 0x80
 800355a:	4e57      	ldr	r6, [pc, #348]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800355c:	007f      	lsls	r7, r7, #1
 800355e:	6833      	ldr	r3, [r6, #0]
 8003560:	423b      	tst	r3, r7
 8003562:	d053      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003564:	686b      	ldr	r3, [r5, #4]
 8003566:	21c0      	movs	r1, #192	; 0xc0
 8003568:	0018      	movs	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800356a:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800356c:	0389      	lsls	r1, r1, #14
 800356e:	4008      	ands	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003570:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003572:	4290      	cmp	r0, r2
 8003574:	d15b      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xfa>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003576:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003578:	22c0      	movs	r2, #192	; 0xc0
 800357a:	0008      	movs	r0, r1
 800357c:	0292      	lsls	r2, r2, #10
 800357e:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003580:	4211      	tst	r1, r2
 8003582:	d15f      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003584:	682b      	ldr	r3, [r5, #0]
 8003586:	069b      	lsls	r3, r3, #26
 8003588:	d500      	bpl.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x58>
 800358a:	e070      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800358c:	9b00      	ldr	r3, [sp, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d103      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003594:	4a49      	ldr	r2, [pc, #292]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003596:	4013      	ands	r3, r2
 8003598:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800359a:	682b      	ldr	r3, [r5, #0]
 800359c:	07da      	lsls	r2, r3, #31
 800359e:	d506      	bpl.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035a0:	2003      	movs	r0, #3
 80035a2:	4944      	ldr	r1, [pc, #272]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80035a4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80035a6:	4382      	bics	r2, r0
 80035a8:	68a8      	ldr	r0, [r5, #8]
 80035aa:	4302      	orrs	r2, r0
 80035ac:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ae:	079a      	lsls	r2, r3, #30
 80035b0:	d506      	bpl.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035b2:	200c      	movs	r0, #12
 80035b4:	493f      	ldr	r1, [pc, #252]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80035b6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80035b8:	4382      	bics	r2, r0
 80035ba:	68e8      	ldr	r0, [r5, #12]
 80035bc:	4302      	orrs	r2, r0
 80035be:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035c0:	075a      	lsls	r2, r3, #29
 80035c2:	d506      	bpl.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035c4:	493b      	ldr	r1, [pc, #236]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80035c6:	483e      	ldr	r0, [pc, #248]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80035c8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80035ca:	4002      	ands	r2, r0
 80035cc:	6928      	ldr	r0, [r5, #16]
 80035ce:	4302      	orrs	r2, r0
 80035d0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035d2:	071a      	lsls	r2, r3, #28
 80035d4:	d506      	bpl.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035d6:	4937      	ldr	r1, [pc, #220]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80035d8:	483a      	ldr	r0, [pc, #232]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80035da:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80035dc:	4002      	ands	r2, r0
 80035de:	6968      	ldr	r0, [r5, #20]
 80035e0:	4302      	orrs	r2, r0
 80035e2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035e4:	065a      	lsls	r2, r3, #25
 80035e6:	d506      	bpl.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035e8:	4932      	ldr	r1, [pc, #200]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80035ea:	4837      	ldr	r0, [pc, #220]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80035ec:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80035ee:	4002      	ands	r2, r0
 80035f0:	69e8      	ldr	r0, [r5, #28]
 80035f2:	4302      	orrs	r2, r0
 80035f4:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80035f6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035f8:	061b      	lsls	r3, r3, #24
 80035fa:	d517      	bpl.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80035fc:	4a2d      	ldr	r2, [pc, #180]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80035fe:	4933      	ldr	r1, [pc, #204]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003600:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003602:	400b      	ands	r3, r1
 8003604:	69a9      	ldr	r1, [r5, #24]
 8003606:	430b      	orrs	r3, r1
 8003608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800360a:	e00f      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360c:	6833      	ldr	r3, [r6, #0]
 800360e:	433b      	orrs	r3, r7
 8003610:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003612:	f7fe fda9 	bl	8002168 <HAL_GetTick>
 8003616:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	6833      	ldr	r3, [r6, #0]
 800361a:	423b      	tst	r3, r7
 800361c:	d1a2      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361e:	f7fe fda3 	bl	8002168 <HAL_GetTick>
 8003622:	9b01      	ldr	r3, [sp, #4]
 8003624:	1ac0      	subs	r0, r0, r3
 8003626:	2864      	cmp	r0, #100	; 0x64
 8003628:	d9f6      	bls.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          return HAL_TIMEOUT;
 800362a:	2003      	movs	r0, #3
}
 800362c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800362e:	22c0      	movs	r2, #192	; 0xc0
 8003630:	0019      	movs	r1, r3
 8003632:	0292      	lsls	r2, r2, #10
 8003634:	4011      	ands	r1, r2
 8003636:	4291      	cmp	r1, r2
 8003638:	d19d      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800363a:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 800363c:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800363e:	0392      	lsls	r2, r2, #14
 8003640:	d599      	bpl.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003642:	e7f3      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003644:	4013      	ands	r3, r2
 8003646:	4283      	cmp	r3, r0
 8003648:	d09c      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800364a:	682b      	ldr	r3, [r5, #0]
 800364c:	069b      	lsls	r3, r3, #26
 800364e:	d59d      	bpl.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003650:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003652:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8003654:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003656:	0312      	lsls	r2, r2, #12
 8003658:	4302      	orrs	r2, r0
 800365a:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800365c:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800365e:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003660:	481c      	ldr	r0, [pc, #112]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003662:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003664:	4002      	ands	r2, r0
 8003666:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8003668:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800366a:	05cb      	lsls	r3, r1, #23
 800366c:	d412      	bmi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800366e:	6869      	ldr	r1, [r5, #4]
 8003670:	23c0      	movs	r3, #192	; 0xc0
 8003672:	000a      	movs	r2, r1
 8003674:	029b      	lsls	r3, r3, #10
 8003676:	401a      	ands	r2, r3
 8003678:	429a      	cmp	r2, r3
 800367a:	d107      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x158>
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	4816      	ldr	r0, [pc, #88]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003680:	4003      	ands	r3, r0
 8003682:	20c0      	movs	r0, #192	; 0xc0
 8003684:	0380      	lsls	r0, r0, #14
 8003686:	4001      	ands	r1, r0
 8003688:	430b      	orrs	r3, r1
 800368a:	6023      	str	r3, [r4, #0]
 800368c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800368e:	431a      	orrs	r2, r3
 8003690:	6522      	str	r2, [r4, #80]	; 0x50
 8003692:	e77b      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 8003694:	f7fe fd68 	bl	8002168 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003698:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800369a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800369c:	00bf      	lsls	r7, r7, #2
 800369e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80036a0:	423b      	tst	r3, r7
 80036a2:	d000      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80036a4:	e76e      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a6:	f7fe fd5f 	bl	8002168 <HAL_GetTick>
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036ac:	1b80      	subs	r0, r0, r6
 80036ae:	4298      	cmp	r0, r3
 80036b0:	d9f5      	bls.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80036b2:	e7ba      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40007000 	.word	0x40007000
 80036bc:	efffffff 	.word	0xefffffff
 80036c0:	fffff3ff 	.word	0xfffff3ff
 80036c4:	ffffcfff 	.word	0xffffcfff
 80036c8:	fbffffff 	.word	0xfbffffff
 80036cc:	fff3ffff 	.word	0xfff3ffff
 80036d0:	fffcffff 	.word	0xfffcffff
 80036d4:	fff7ffff 	.word	0xfff7ffff
 80036d8:	ffcfffff 	.word	0xffcfffff
 80036dc:	00001388 	.word	0x00001388

080036e0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e0:	2280      	movs	r2, #128	; 0x80
{
 80036e2:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80036e4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e6:	05d2      	lsls	r2, r2, #23
 80036e8:	4290      	cmp	r0, r2
 80036ea:	d005      	beq.n	80036f8 <TIM_Base_SetConfig+0x18>
 80036ec:	4c10      	ldr	r4, [pc, #64]	; (8003730 <TIM_Base_SetConfig+0x50>)
 80036ee:	42a0      	cmp	r0, r4
 80036f0:	d002      	beq.n	80036f8 <TIM_Base_SetConfig+0x18>
 80036f2:	4c10      	ldr	r4, [pc, #64]	; (8003734 <TIM_Base_SetConfig+0x54>)
 80036f4:	42a0      	cmp	r0, r4
 80036f6:	d10f      	bne.n	8003718 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036f8:	2470      	movs	r4, #112	; 0x70
 80036fa:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80036fc:	684c      	ldr	r4, [r1, #4]
 80036fe:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003700:	4290      	cmp	r0, r2
 8003702:	d005      	beq.n	8003710 <TIM_Base_SetConfig+0x30>
 8003704:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <TIM_Base_SetConfig+0x50>)
 8003706:	4290      	cmp	r0, r2
 8003708:	d002      	beq.n	8003710 <TIM_Base_SetConfig+0x30>
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <TIM_Base_SetConfig+0x54>)
 800370c:	4290      	cmp	r0, r2
 800370e:	d103      	bne.n	8003718 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003710:	4a09      	ldr	r2, [pc, #36]	; (8003738 <TIM_Base_SetConfig+0x58>)
 8003712:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003714:	68ca      	ldr	r2, [r1, #12]
 8003716:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003718:	2280      	movs	r2, #128	; 0x80
 800371a:	4393      	bics	r3, r2
 800371c:	690a      	ldr	r2, [r1, #16]
 800371e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003720:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003722:	688b      	ldr	r3, [r1, #8]
 8003724:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003726:	680b      	ldr	r3, [r1, #0]
 8003728:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800372a:	2301      	movs	r3, #1
 800372c:	6143      	str	r3, [r0, #20]
}
 800372e:	bd10      	pop	{r4, pc}
 8003730:	40010800 	.word	0x40010800
 8003734:	40011400 	.word	0x40011400
 8003738:	fffffcff 	.word	0xfffffcff

0800373c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800373c:	2201      	movs	r2, #1
{
 800373e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003740:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003742:	6a03      	ldr	r3, [r0, #32]
 8003744:	4393      	bics	r3, r2
 8003746:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003748:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800374a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800374c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800374e:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003750:	680d      	ldr	r5, [r1, #0]
 8003752:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003754:	2502      	movs	r5, #2
 8003756:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003758:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800375c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800375e:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8003760:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8003762:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003764:	6203      	str	r3, [r0, #32]
}
 8003766:	bd30      	pop	{r4, r5, pc}

08003768 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003768:	2210      	movs	r2, #16
 800376a:	6a03      	ldr	r3, [r0, #32]
{
 800376c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800376e:	4393      	bics	r3, r2
 8003770:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003774:	4c09      	ldr	r4, [pc, #36]	; (800379c <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 8003776:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003778:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800377a:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800377c:	680a      	ldr	r2, [r1, #0]
 800377e:	0212      	lsls	r2, r2, #8
 8003780:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003782:	2420      	movs	r4, #32
 8003784:	43a3      	bics	r3, r4
 8003786:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003788:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378a:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800378c:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800378e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003790:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003792:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8003794:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003796:	6203      	str	r3, [r0, #32]
}
 8003798:	bd30      	pop	{r4, r5, pc}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	ffff8cff 	.word	0xffff8cff

080037a0 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037a0:	231f      	movs	r3, #31
{
 80037a2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037a4:	2401      	movs	r4, #1
 80037a6:	4019      	ands	r1, r3
 80037a8:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037aa:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80037ac:	6a03      	ldr	r3, [r0, #32]
 80037ae:	43a3      	bics	r3, r4
 80037b0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037b2:	6a03      	ldr	r3, [r0, #32]
 80037b4:	431a      	orrs	r2, r3
 80037b6:	6202      	str	r2, [r0, #32]
}
 80037b8:	bd10      	pop	{r4, pc}
	...

080037bc <HAL_TIM_OC_Start>:
{
 80037bc:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037be:	0003      	movs	r3, r0
{
 80037c0:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037c2:	2900      	cmp	r1, #0
 80037c4:	d105      	bne.n	80037d2 <HAL_TIM_OC_Start+0x16>
 80037c6:	333a      	adds	r3, #58	; 0x3a
    return HAL_ERROR;
 80037c8:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037ca:	781a      	ldrb	r2, [r3, #0]
 80037cc:	4282      	cmp	r2, r0
 80037ce:	d00a      	beq.n	80037e6 <HAL_TIM_OC_Start+0x2a>
}
 80037d0:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037d2:	2904      	cmp	r1, #4
 80037d4:	d101      	bne.n	80037da <HAL_TIM_OC_Start+0x1e>
 80037d6:	333b      	adds	r3, #59	; 0x3b
 80037d8:	e7f6      	b.n	80037c8 <HAL_TIM_OC_Start+0xc>
 80037da:	2908      	cmp	r1, #8
 80037dc:	d101      	bne.n	80037e2 <HAL_TIM_OC_Start+0x26>
 80037de:	333c      	adds	r3, #60	; 0x3c
 80037e0:	e7f2      	b.n	80037c8 <HAL_TIM_OC_Start+0xc>
 80037e2:	333d      	adds	r3, #61	; 0x3d
 80037e4:	e7f0      	b.n	80037c8 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e6:	2202      	movs	r2, #2
 80037e8:	701a      	strb	r2, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037ea:	6820      	ldr	r0, [r4, #0]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f7ff ffd7 	bl	80037a0 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f2:	2280      	movs	r2, #128	; 0x80
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	05d2      	lsls	r2, r2, #23
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d005      	beq.n	8003808 <HAL_TIM_OC_Start+0x4c>
 80037fc:	4a0b      	ldr	r2, [pc, #44]	; (800382c <HAL_TIM_OC_Start+0x70>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d002      	beq.n	8003808 <HAL_TIM_OC_Start+0x4c>
 8003802:	4a0b      	ldr	r2, [pc, #44]	; (8003830 <HAL_TIM_OC_Start+0x74>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d10a      	bne.n	800381e <HAL_TIM_OC_Start+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003808:	2107      	movs	r1, #7
 800380a:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 800380c:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800380e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003810:	2a06      	cmp	r2, #6
 8003812:	d0dd      	beq.n	80037d0 <HAL_TIM_OC_Start+0x14>
      __HAL_TIM_ENABLE(htim);
 8003814:	2201      	movs	r2, #1
 8003816:	6819      	ldr	r1, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e7d8      	b.n	80037d0 <HAL_TIM_OC_Start+0x14>
    __HAL_TIM_ENABLE(htim);
 800381e:	2201      	movs	r2, #1
 8003820:	6819      	ldr	r1, [r3, #0]
  return HAL_OK;
 8003822:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e7d2      	b.n	80037d0 <HAL_TIM_OC_Start+0x14>
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	40010800 	.word	0x40010800
 8003830:	40011400 	.word	0x40011400

08003834 <HAL_TIM_OC_Stop>:
{
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003838:	2200      	movs	r2, #0
 800383a:	6800      	ldr	r0, [r0, #0]
{
 800383c:	000d      	movs	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800383e:	f7ff ffaf 	bl	80037a0 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	4a0c      	ldr	r2, [pc, #48]	; (8003878 <HAL_TIM_OC_Stop+0x44>)
 8003846:	6a19      	ldr	r1, [r3, #32]
 8003848:	4211      	tst	r1, r2
 800384a:	d103      	bne.n	8003854 <HAL_TIM_OC_Stop+0x20>
 800384c:	2101      	movs	r1, #1
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	438a      	bics	r2, r1
 8003852:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	2301      	movs	r3, #1
 8003856:	2d00      	cmp	r5, #0
 8003858:	d103      	bne.n	8003862 <HAL_TIM_OC_Stop+0x2e>
 800385a:	343a      	adds	r4, #58	; 0x3a
}
 800385c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800385e:	7023      	strb	r3, [r4, #0]
}
 8003860:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003862:	2d04      	cmp	r5, #4
 8003864:	d101      	bne.n	800386a <HAL_TIM_OC_Stop+0x36>
 8003866:	343b      	adds	r4, #59	; 0x3b
 8003868:	e7f8      	b.n	800385c <HAL_TIM_OC_Stop+0x28>
 800386a:	2d08      	cmp	r5, #8
 800386c:	d101      	bne.n	8003872 <HAL_TIM_OC_Stop+0x3e>
 800386e:	343c      	adds	r4, #60	; 0x3c
 8003870:	e7f4      	b.n	800385c <HAL_TIM_OC_Stop+0x28>
 8003872:	343d      	adds	r4, #61	; 0x3d
 8003874:	e7f2      	b.n	800385c <HAL_TIM_OC_Stop+0x28>
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	00001111 	.word	0x00001111

0800387c <HAL_TIM_PWM_Init>:
{
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003880:	2001      	movs	r0, #1
  if (htim == NULL)
 8003882:	2c00      	cmp	r4, #0
 8003884:	d01d      	beq.n	80038c2 <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003886:	0025      	movs	r5, r4
 8003888:	3539      	adds	r5, #57	; 0x39
 800388a:	782b      	ldrb	r3, [r5, #0]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d105      	bne.n	800389e <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003892:	0023      	movs	r3, r4
 8003894:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8003896:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003898:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 800389a:	f7fe fb35 	bl	8001f08 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800389e:	2302      	movs	r3, #2
 80038a0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a2:	6820      	ldr	r0, [r4, #0]
 80038a4:	1d21      	adds	r1, r4, #4
 80038a6:	f7ff ff1b 	bl	80036e0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038aa:	0022      	movs	r2, r4
 80038ac:	2301      	movs	r3, #1
  return HAL_OK;
 80038ae:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b0:	323e      	adds	r2, #62	; 0x3e
 80038b2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b4:	343d      	adds	r4, #61	; 0x3d
 80038b6:	3a04      	subs	r2, #4
 80038b8:	7013      	strb	r3, [r2, #0]
 80038ba:	7053      	strb	r3, [r2, #1]
 80038bc:	7093      	strb	r3, [r2, #2]
 80038be:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	702b      	strb	r3, [r5, #0]
}
 80038c2:	bd70      	pop	{r4, r5, r6, pc}

080038c4 <HAL_TIM_PWM_Start>:
 80038c4:	b510      	push	{r4, lr}
 80038c6:	f7ff ff79 	bl	80037bc <HAL_TIM_OC_Start>
 80038ca:	bd10      	pop	{r4, pc}

080038cc <HAL_TIM_PWM_Stop>:
 80038cc:	b510      	push	{r4, lr}
 80038ce:	f7ff ffb1 	bl	8003834 <HAL_TIM_OC_Stop>
 80038d2:	bd10      	pop	{r4, pc}

080038d4 <HAL_TIM_PWM_ConfigChannel>:
{
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80038d6:	0005      	movs	r5, r0
 80038d8:	3538      	adds	r5, #56	; 0x38
 80038da:	782b      	ldrb	r3, [r5, #0]
{
 80038dc:	0007      	movs	r7, r0
 80038de:	000c      	movs	r4, r1
 80038e0:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 80038e2:	2002      	movs	r0, #2
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d00a      	beq.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x2a>
 80038e8:	3801      	subs	r0, #1
 80038ea:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 80038ec:	2a08      	cmp	r2, #8
 80038ee:	d050      	beq.n	8003992 <HAL_TIM_PWM_ConfigChannel+0xbe>
 80038f0:	d806      	bhi.n	8003900 <HAL_TIM_PWM_ConfigChannel+0x2c>
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	d02a      	beq.n	800394c <HAL_TIM_PWM_ConfigChannel+0x78>
 80038f6:	2a04      	cmp	r2, #4
 80038f8:	d03a      	beq.n	8003970 <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 80038fa:	2300      	movs	r3, #0
 80038fc:	702b      	strb	r3, [r5, #0]
}
 80038fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8003900:	2a0c      	cmp	r2, #12
 8003902:	d1fa      	bne.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003904:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003906:	4934      	ldr	r1, [pc, #208]	; (80039d8 <HAL_TIM_PWM_ConfigChannel+0x104>)
 8003908:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800390a:	4834      	ldr	r0, [pc, #208]	; (80039dc <HAL_TIM_PWM_ConfigChannel+0x108>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800390c:	400a      	ands	r2, r1
 800390e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003910:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003912:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003914:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003916:	4001      	ands	r1, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003918:	6820      	ldr	r0, [r4, #0]
 800391a:	0207      	lsls	r7, r0, #8
  tmpccer &= ~TIM_CCER_CC4P;
 800391c:	4830      	ldr	r0, [pc, #192]	; (80039e0 <HAL_TIM_PWM_ConfigChannel+0x10c>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800391e:	4339      	orrs	r1, r7
  tmpccer &= ~TIM_CCER_CC4P;
 8003920:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003922:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8003924:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003926:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8003928:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800392a:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800392c:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 800392e:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003930:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003932:	2280      	movs	r2, #128	; 0x80
 8003934:	69d9      	ldr	r1, [r3, #28]
 8003936:	0112      	lsls	r2, r2, #4
 8003938:	430a      	orrs	r2, r1
 800393a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	4929      	ldr	r1, [pc, #164]	; (80039e4 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8003940:	400a      	ands	r2, r1
 8003942:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003944:	68e2      	ldr	r2, [r4, #12]
 8003946:	69d9      	ldr	r1, [r3, #28]
 8003948:	0212      	lsls	r2, r2, #8
 800394a:	e041      	b.n	80039d0 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800394c:	6838      	ldr	r0, [r7, #0]
 800394e:	f7ff fef5 	bl	800373c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003952:	2208      	movs	r2, #8
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6999      	ldr	r1, [r3, #24]
 8003958:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800395a:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800395c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800395e:	699a      	ldr	r2, [r3, #24]
 8003960:	438a      	bics	r2, r1
 8003962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003968:	430a      	orrs	r2, r1
 800396a:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2000      	movs	r0, #0
      break;
 800396e:	e7c4      	b.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003970:	6838      	ldr	r0, [r7, #0]
 8003972:	f7ff fef9 	bl	8003768 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003976:	2280      	movs	r2, #128	; 0x80
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	6999      	ldr	r1, [r3, #24]
 800397e:	430a      	orrs	r2, r1
 8003980:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	4917      	ldr	r1, [pc, #92]	; (80039e4 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8003986:	400a      	ands	r2, r1
 8003988:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800398a:	68e2      	ldr	r2, [r4, #12]
 800398c:	6999      	ldr	r1, [r3, #24]
 800398e:	0212      	lsls	r2, r2, #8
 8003990:	e7ea      	b.n	8003968 <HAL_TIM_PWM_ConfigChannel+0x94>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003992:	2073      	movs	r0, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003994:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003996:	4914      	ldr	r1, [pc, #80]	; (80039e8 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8003998:	6a1a      	ldr	r2, [r3, #32]
 800399a:	400a      	ands	r2, r1
 800399c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800399e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80039a0:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80039a2:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039a4:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 80039a6:	6820      	ldr	r0, [r4, #0]
 80039a8:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 80039aa:	4810      	ldr	r0, [pc, #64]	; (80039ec <HAL_TIM_PWM_ConfigChannel+0x118>)
 80039ac:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ae:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 80039b0:	605f      	str	r7, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80039b2:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80039b4:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039b6:	0212      	lsls	r2, r2, #8
  TIMx->CCR3 = OC_Config->Pulse;
 80039b8:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039ba:	2104      	movs	r1, #4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039bc:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 80039be:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	4316      	orrs	r6, r2
 80039c4:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039c6:	69da      	ldr	r2, [r3, #28]
 80039c8:	438a      	bics	r2, r1
 80039ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039cc:	69da      	ldr	r2, [r3, #28]
 80039ce:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039d0:	430a      	orrs	r2, r1
 80039d2:	61da      	str	r2, [r3, #28]
 80039d4:	e7ca      	b.n	800396c <HAL_TIM_PWM_ConfigChannel+0x98>
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	ffffefff 	.word	0xffffefff
 80039dc:	ffff8cff 	.word	0xffff8cff
 80039e0:	ffffdfff 	.word	0xffffdfff
 80039e4:	fffffbff 	.word	0xfffffbff
 80039e8:	fffffeff 	.word	0xfffffeff
 80039ec:	fffffdff 	.word	0xfffffdff

080039f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039f2:	0004      	movs	r4, r0
 80039f4:	2202      	movs	r2, #2
 80039f6:	3438      	adds	r4, #56	; 0x38
 80039f8:	7825      	ldrb	r5, [r4, #0]
{
 80039fa:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80039fc:	0010      	movs	r0, r2
 80039fe:	2d01      	cmp	r5, #1
 8003a00:	d01d      	beq.n	8003a3e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a02:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a04:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8003a06:	3539      	adds	r5, #57	; 0x39
 8003a08:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003a0e:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a10:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a12:	680e      	ldr	r6, [r1, #0]
 8003a14:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a16:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a18:	2080      	movs	r0, #128	; 0x80
 8003a1a:	05c0      	lsls	r0, r0, #23
 8003a1c:	4283      	cmp	r3, r0
 8003a1e:	d005      	beq.n	8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003a20:	4807      	ldr	r0, [pc, #28]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8003a22:	4283      	cmp	r3, r0
 8003a24:	d002      	beq.n	8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003a26:	4807      	ldr	r0, [pc, #28]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8003a28:	4283      	cmp	r3, r0
 8003a2a:	d104      	bne.n	8003a36 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a2c:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a2e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a30:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a32:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a36:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003a38:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a3a:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003a3c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	40010800 	.word	0x40010800
 8003a44:	40011400 	.word	0x40011400

08003a48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a48:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4a:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a54:	6801      	ldr	r1, [r0, #0]
 8003a56:	4d12      	ldr	r5, [pc, #72]	; (8003aa0 <UART_EndRxTransfer+0x58>)
 8003a58:	680b      	ldr	r3, [r1, #0]
 8003a5a:	402b      	ands	r3, r5
 8003a5c:	600b      	str	r3, [r1, #0]
 8003a5e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a62:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a66:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6a:	6801      	ldr	r1, [r0, #0]
 8003a6c:	688b      	ldr	r3, [r1, #8]
 8003a6e:	4393      	bics	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
 8003a72:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a76:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d10a      	bne.n	8003a92 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a80:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a84:	2410      	movs	r4, #16
 8003a86:	6802      	ldr	r2, [r0, #0]
 8003a88:	6813      	ldr	r3, [r2, #0]
 8003a8a:	43a3      	bics	r3, r4
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a92:	2220      	movs	r2, #32
 8003a94:	1d03      	adds	r3, r0, #4
 8003a96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a9c:	6683      	str	r3, [r0, #104]	; 0x68
}
 8003a9e:	bd30      	pop	{r4, r5, pc}
 8003aa0:	fffffedf 	.word	0xfffffedf

08003aa4 <UART_SetConfig>:
{
 8003aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003aa8:	6925      	ldr	r5, [r4, #16]
 8003aaa:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003aac:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003aae:	4329      	orrs	r1, r5
 8003ab0:	6965      	ldr	r5, [r4, #20]
 8003ab2:	69c3      	ldr	r3, [r0, #28]
 8003ab4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ab6:	6810      	ldr	r0, [r2, #0]
 8003ab8:	4d72      	ldr	r5, [pc, #456]	; (8003c84 <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003aba:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003abc:	4028      	ands	r0, r5
 8003abe:	4301      	orrs	r1, r0
 8003ac0:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac2:	6851      	ldr	r1, [r2, #4]
 8003ac4:	4870      	ldr	r0, [pc, #448]	; (8003c88 <UART_SetConfig+0x1e4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ac6:	4d71      	ldr	r5, [pc, #452]	; (8003c8c <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac8:	4001      	ands	r1, r0
 8003aca:	68e0      	ldr	r0, [r4, #12]
 8003acc:	4301      	orrs	r1, r0
 8003ace:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ad0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ad2:	42aa      	cmp	r2, r5
 8003ad4:	d001      	beq.n	8003ada <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8003ad6:	6a21      	ldr	r1, [r4, #32]
 8003ad8:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ada:	6891      	ldr	r1, [r2, #8]
 8003adc:	4e6c      	ldr	r6, [pc, #432]	; (8003c90 <UART_SetConfig+0x1ec>)
 8003ade:	4031      	ands	r1, r6
 8003ae0:	4301      	orrs	r1, r0
 8003ae2:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ae4:	496b      	ldr	r1, [pc, #428]	; (8003c94 <UART_SetConfig+0x1f0>)
 8003ae6:	428a      	cmp	r2, r1
 8003ae8:	d10f      	bne.n	8003b0a <UART_SetConfig+0x66>
 8003aea:	2103      	movs	r1, #3
 8003aec:	4a6a      	ldr	r2, [pc, #424]	; (8003c98 <UART_SetConfig+0x1f4>)
 8003aee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003af0:	400a      	ands	r2, r1
 8003af2:	3a01      	subs	r2, #1
 8003af4:	4969      	ldr	r1, [pc, #420]	; (8003c9c <UART_SetConfig+0x1f8>)
 8003af6:	2a02      	cmp	r2, #2
 8003af8:	d90f      	bls.n	8003b1a <UART_SetConfig+0x76>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003afa:	2280      	movs	r2, #128	; 0x80
 8003afc:	0212      	lsls	r2, r2, #8
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d100      	bne.n	8003b04 <UART_SetConfig+0x60>
 8003b02:	e069      	b.n	8003bd8 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b04:	f7ff fd06 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
        break;
 8003b08:	e09c      	b.n	8003c44 <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b0a:	4965      	ldr	r1, [pc, #404]	; (8003ca0 <UART_SetConfig+0x1fc>)
 8003b0c:	428a      	cmp	r2, r1
 8003b0e:	d113      	bne.n	8003b38 <UART_SetConfig+0x94>
 8003b10:	210c      	movs	r1, #12
 8003b12:	4a61      	ldr	r2, [pc, #388]	; (8003c98 <UART_SetConfig+0x1f4>)
 8003b14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b16:	400a      	ands	r2, r1
 8003b18:	4962      	ldr	r1, [pc, #392]	; (8003ca4 <UART_SetConfig+0x200>)
 8003b1a:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b1c:	2280      	movs	r2, #128	; 0x80
 8003b1e:	0212      	lsls	r2, r2, #8
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d000      	beq.n	8003b26 <UART_SetConfig+0x82>
 8003b24:	e07f      	b.n	8003c26 <UART_SetConfig+0x182>
    switch (clocksource)
 8003b26:	2808      	cmp	r0, #8
 8003b28:	d818      	bhi.n	8003b5c <UART_SetConfig+0xb8>
 8003b2a:	f7fc faf5 	bl	8000118 <__gnu_thumb1_case_uqi>
 8003b2e:	5550      	.short	0x5550
 8003b30:	17791758 	.word	0x17791758
 8003b34:	1717      	.short	0x1717
 8003b36:	63          	.byte	0x63
 8003b37:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b38:	42aa      	cmp	r2, r5
 8003b3a:	d10f      	bne.n	8003b5c <UART_SetConfig+0xb8>
 8003b3c:	21c0      	movs	r1, #192	; 0xc0
 8003b3e:	2080      	movs	r0, #128	; 0x80
 8003b40:	4a55      	ldr	r2, [pc, #340]	; (8003c98 <UART_SetConfig+0x1f4>)
 8003b42:	0109      	lsls	r1, r1, #4
 8003b44:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003b46:	0100      	lsls	r0, r0, #4
 8003b48:	400b      	ands	r3, r1
 8003b4a:	4283      	cmp	r3, r0
 8003b4c:	d016      	beq.n	8003b7c <UART_SetConfig+0xd8>
 8003b4e:	d807      	bhi.n	8003b60 <UART_SetConfig+0xbc>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <UART_SetConfig+0xc6>
 8003b54:	2280      	movs	r2, #128	; 0x80
 8003b56:	00d2      	lsls	r2, r2, #3
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d035      	beq.n	8003bc8 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	e009      	b.n	8003b74 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b60:	428b      	cmp	r3, r1
 8003b62:	d1fb      	bne.n	8003b5c <UART_SetConfig+0xb8>
 8003b64:	2080      	movs	r0, #128	; 0x80
 8003b66:	0200      	lsls	r0, r0, #8
 8003b68:	e012      	b.n	8003b90 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b6a:	f7ff fcc3 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	d10e      	bne.n	8003b90 <UART_SetConfig+0xec>
 8003b72:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8003b78:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8003b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	6810      	ldr	r0, [r2, #0]
 8003b80:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b82:	4243      	negs	r3, r0
 8003b84:	4158      	adcs	r0, r3
 8003b86:	4b48      	ldr	r3, [pc, #288]	; (8003ca8 <UART_SetConfig+0x204>)
 8003b88:	4240      	negs	r0, r0
 8003b8a:	4018      	ands	r0, r3
 8003b8c:	4b47      	ldr	r3, [pc, #284]	; (8003cac <UART_SetConfig+0x208>)
 8003b8e:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b90:	2203      	movs	r2, #3
 8003b92:	6863      	ldr	r3, [r4, #4]
 8003b94:	435a      	muls	r2, r3
 8003b96:	4282      	cmp	r2, r0
 8003b98:	d8e0      	bhi.n	8003b5c <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b9a:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b9c:	4282      	cmp	r2, r0
 8003b9e:	d3dd      	bcc.n	8003b5c <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ba0:	2700      	movs	r7, #0
 8003ba2:	0e02      	lsrs	r2, r0, #24
 8003ba4:	0201      	lsls	r1, r0, #8
 8003ba6:	085e      	lsrs	r6, r3, #1
 8003ba8:	1989      	adds	r1, r1, r6
 8003baa:	417a      	adcs	r2, r7
 8003bac:	0008      	movs	r0, r1
 8003bae:	0011      	movs	r1, r2
 8003bb0:	001a      	movs	r2, r3
 8003bb2:	003b      	movs	r3, r7
 8003bb4:	f7fc fc3a 	bl	800042c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bb8:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <UART_SetConfig+0x20c>)
 8003bba:	18c2      	adds	r2, r0, r3
 8003bbc:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d8cc      	bhi.n	8003b5c <UART_SetConfig+0xb8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	60d8      	str	r0, [r3, #12]
 8003bc6:	e7d4      	b.n	8003b72 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc8:	f7ff f8fc 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
        break;
 8003bcc:	e7cf      	b.n	8003b6e <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bce:	f7ff fc91 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8003bd2:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8003bd4:	d0cd      	beq.n	8003b72 <UART_SetConfig+0xce>
 8003bd6:	e00d      	b.n	8003bf4 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd8:	f7ff fc9c 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
 8003bdc:	e7f9      	b.n	8003bd2 <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bde:	4b2e      	ldr	r3, [pc, #184]	; (8003c98 <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003be0:	4a32      	ldr	r2, [pc, #200]	; (8003cac <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	2310      	movs	r3, #16
 8003be6:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003be8:	4243      	negs	r3, r0
 8003bea:	4158      	adcs	r0, r3
 8003bec:	4b2e      	ldr	r3, [pc, #184]	; (8003ca8 <UART_SetConfig+0x204>)
 8003bee:	4240      	negs	r0, r0
 8003bf0:	4003      	ands	r3, r0
 8003bf2:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bf4:	0058      	lsls	r0, r3, #1
 8003bf6:	6863      	ldr	r3, [r4, #4]
 8003bf8:	6861      	ldr	r1, [r4, #4]
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	18c0      	adds	r0, r0, r3
 8003bfe:	f7fc fa9f 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c02:	0002      	movs	r2, r0
 8003c04:	4b2c      	ldr	r3, [pc, #176]	; (8003cb8 <UART_SetConfig+0x214>)
 8003c06:	3a10      	subs	r2, #16
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d8a7      	bhi.n	8003b5c <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c0c:	230f      	movs	r3, #15
 8003c0e:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c10:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c12:	439a      	bics	r2, r3
 8003c14:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c16:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8003c18:	6822      	ldr	r2, [r4, #0]
 8003c1a:	4318      	orrs	r0, r3
 8003c1c:	60d0      	str	r0, [r2, #12]
 8003c1e:	e7a8      	b.n	8003b72 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8003c20:	f7ff f8d0 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8003c24:	e7d5      	b.n	8003bd2 <UART_SetConfig+0x12e>
    switch (clocksource)
 8003c26:	2808      	cmp	r0, #8
 8003c28:	d898      	bhi.n	8003b5c <UART_SetConfig+0xb8>
 8003c2a:	f7fc fa7f 	bl	800012c <__gnu_thumb1_case_shi>
 8003c2e:	0009      	.short	0x0009
 8003c30:	000fff6b 	.word	0x000fff6b
 8003c34:	0024ff97 	.word	0x0024ff97
 8003c38:	ff97ff97 	.word	0xff97ff97
 8003c3c:	0027ff97 	.word	0x0027ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c40:	f7ff fc58 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d100      	bne.n	8003c4a <UART_SetConfig+0x1a6>
 8003c48:	e793      	b.n	8003b72 <UART_SetConfig+0xce>
 8003c4a:	e00a      	b.n	8003c62 <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c4c:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <UART_SetConfig+0x1f4>)
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	2310      	movs	r3, #16
 8003c52:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c54:	4243      	negs	r3, r0
 8003c56:	4158      	adcs	r0, r3
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <UART_SetConfig+0x204>)
 8003c5a:	4240      	negs	r0, r0
 8003c5c:	4018      	ands	r0, r3
 8003c5e:	4b13      	ldr	r3, [pc, #76]	; (8003cac <UART_SetConfig+0x208>)
 8003c60:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c62:	6863      	ldr	r3, [r4, #4]
 8003c64:	6861      	ldr	r1, [r4, #4]
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	1818      	adds	r0, r3, r0
 8003c6a:	f7fc fa69 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c6e:	0002      	movs	r2, r0
 8003c70:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <UART_SetConfig+0x214>)
 8003c72:	3a10      	subs	r2, #16
 8003c74:	e7a3      	b.n	8003bbe <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003c76:	f7ff f8a5 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
        break;
 8003c7a:	e7e3      	b.n	8003c44 <UART_SetConfig+0x1a0>
    switch (clocksource)
 8003c7c:	2080      	movs	r0, #128	; 0x80
 8003c7e:	0200      	lsls	r0, r0, #8
 8003c80:	e7ef      	b.n	8003c62 <UART_SetConfig+0x1be>
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	efff69f3 	.word	0xefff69f3
 8003c88:	ffffcfff 	.word	0xffffcfff
 8003c8c:	40004800 	.word	0x40004800
 8003c90:	fffff4ff 	.word	0xfffff4ff
 8003c94:	40013800 	.word	0x40013800
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	08005b04 	.word	0x08005b04
 8003ca0:	40004400 	.word	0x40004400
 8003ca4:	08005b07 	.word	0x08005b07
 8003ca8:	00b71b00 	.word	0x00b71b00
 8003cac:	003d0900 	.word	0x003d0900
 8003cb0:	fffffd00 	.word	0xfffffd00
 8003cb4:	000ffcff 	.word	0x000ffcff
 8003cb8:	0000ffef 	.word	0x0000ffef

08003cbc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003cbe:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cc0:	07da      	lsls	r2, r3, #31
 8003cc2:	d506      	bpl.n	8003cd2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cc4:	6801      	ldr	r1, [r0, #0]
 8003cc6:	4c28      	ldr	r4, [pc, #160]	; (8003d68 <UART_AdvFeatureConfig+0xac>)
 8003cc8:	684a      	ldr	r2, [r1, #4]
 8003cca:	4022      	ands	r2, r4
 8003ccc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003cce:	4322      	orrs	r2, r4
 8003cd0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cd2:	079a      	lsls	r2, r3, #30
 8003cd4:	d506      	bpl.n	8003ce4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cd6:	6801      	ldr	r1, [r0, #0]
 8003cd8:	4c24      	ldr	r4, [pc, #144]	; (8003d6c <UART_AdvFeatureConfig+0xb0>)
 8003cda:	684a      	ldr	r2, [r1, #4]
 8003cdc:	4022      	ands	r2, r4
 8003cde:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003ce0:	4322      	orrs	r2, r4
 8003ce2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ce4:	075a      	lsls	r2, r3, #29
 8003ce6:	d506      	bpl.n	8003cf6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ce8:	6801      	ldr	r1, [r0, #0]
 8003cea:	4c21      	ldr	r4, [pc, #132]	; (8003d70 <UART_AdvFeatureConfig+0xb4>)
 8003cec:	684a      	ldr	r2, [r1, #4]
 8003cee:	4022      	ands	r2, r4
 8003cf0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003cf2:	4322      	orrs	r2, r4
 8003cf4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cf6:	071a      	lsls	r2, r3, #28
 8003cf8:	d506      	bpl.n	8003d08 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cfa:	6801      	ldr	r1, [r0, #0]
 8003cfc:	4c1d      	ldr	r4, [pc, #116]	; (8003d74 <UART_AdvFeatureConfig+0xb8>)
 8003cfe:	684a      	ldr	r2, [r1, #4]
 8003d00:	4022      	ands	r2, r4
 8003d02:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003d04:	4322      	orrs	r2, r4
 8003d06:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d08:	06da      	lsls	r2, r3, #27
 8003d0a:	d506      	bpl.n	8003d1a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d0c:	6801      	ldr	r1, [r0, #0]
 8003d0e:	4c1a      	ldr	r4, [pc, #104]	; (8003d78 <UART_AdvFeatureConfig+0xbc>)
 8003d10:	688a      	ldr	r2, [r1, #8]
 8003d12:	4022      	ands	r2, r4
 8003d14:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003d16:	4322      	orrs	r2, r4
 8003d18:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d1a:	069a      	lsls	r2, r3, #26
 8003d1c:	d506      	bpl.n	8003d2c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d1e:	6801      	ldr	r1, [r0, #0]
 8003d20:	4c16      	ldr	r4, [pc, #88]	; (8003d7c <UART_AdvFeatureConfig+0xc0>)
 8003d22:	688a      	ldr	r2, [r1, #8]
 8003d24:	4022      	ands	r2, r4
 8003d26:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003d28:	4322      	orrs	r2, r4
 8003d2a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d2c:	065a      	lsls	r2, r3, #25
 8003d2e:	d510      	bpl.n	8003d52 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d30:	6801      	ldr	r1, [r0, #0]
 8003d32:	4d13      	ldr	r5, [pc, #76]	; (8003d80 <UART_AdvFeatureConfig+0xc4>)
 8003d34:	684a      	ldr	r2, [r1, #4]
 8003d36:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003d38:	402a      	ands	r2, r5
 8003d3a:	4322      	orrs	r2, r4
 8003d3c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	0352      	lsls	r2, r2, #13
 8003d42:	4294      	cmp	r4, r2
 8003d44:	d105      	bne.n	8003d52 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d46:	684a      	ldr	r2, [r1, #4]
 8003d48:	4c0e      	ldr	r4, [pc, #56]	; (8003d84 <UART_AdvFeatureConfig+0xc8>)
 8003d4a:	4022      	ands	r2, r4
 8003d4c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003d4e:	4322      	orrs	r2, r4
 8003d50:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d52:	061b      	lsls	r3, r3, #24
 8003d54:	d506      	bpl.n	8003d64 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d56:	6802      	ldr	r2, [r0, #0]
 8003d58:	490b      	ldr	r1, [pc, #44]	; (8003d88 <UART_AdvFeatureConfig+0xcc>)
 8003d5a:	6853      	ldr	r3, [r2, #4]
 8003d5c:	400b      	ands	r3, r1
 8003d5e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6053      	str	r3, [r2, #4]
}
 8003d64:	bd30      	pop	{r4, r5, pc}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	fffdffff 	.word	0xfffdffff
 8003d6c:	fffeffff 	.word	0xfffeffff
 8003d70:	fffbffff 	.word	0xfffbffff
 8003d74:	ffff7fff 	.word	0xffff7fff
 8003d78:	ffffefff 	.word	0xffffefff
 8003d7c:	ffffdfff 	.word	0xffffdfff
 8003d80:	ffefffff 	.word	0xffefffff
 8003d84:	ff9fffff 	.word	0xff9fffff
 8003d88:	fff7ffff 	.word	0xfff7ffff

08003d8c <UART_WaitOnFlagUntilTimeout>:
{
 8003d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d8e:	0004      	movs	r4, r0
 8003d90:	000d      	movs	r5, r1
 8003d92:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d94:	2608      	movs	r6, #8
{
 8003d96:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d98:	6822      	ldr	r2, [r4, #0]
 8003d9a:	69d3      	ldr	r3, [r2, #28]
 8003d9c:	402b      	ands	r3, r5
 8003d9e:	1b5b      	subs	r3, r3, r5
 8003da0:	4259      	negs	r1, r3
 8003da2:	414b      	adcs	r3, r1
 8003da4:	42bb      	cmp	r3, r7
 8003da6:	d001      	beq.n	8003dac <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 8003da8:	2000      	movs	r0, #0
 8003daa:	e021      	b.n	8003df0 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8003dac:	9b08      	ldr	r3, [sp, #32]
 8003dae:	3301      	adds	r3, #1
 8003db0:	d0f3      	beq.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db2:	f7fe f9d9 	bl	8002168 <HAL_GetTick>
 8003db6:	9b00      	ldr	r3, [sp, #0]
 8003db8:	1ac0      	subs	r0, r0, r3
 8003dba:	9b08      	ldr	r3, [sp, #32]
 8003dbc:	4298      	cmp	r0, r3
 8003dbe:	d828      	bhi.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x86>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d026      	beq.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dc4:	2104      	movs	r1, #4
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	420a      	tst	r2, r1
 8003dcc:	d0e4      	beq.n	8003d98 <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	0011      	movs	r1, r2
 8003dd2:	4031      	ands	r1, r6
 8003dd4:	9101      	str	r1, [sp, #4]
 8003dd6:	4232      	tst	r2, r6
 8003dd8:	d00b      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 8003dda:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ddc:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8003dde:	f7ff fe33 	bl	8003a48 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003de2:	0023      	movs	r3, r4
 8003de4:	3308      	adds	r3, #8
 8003de6:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8003de8:	2300      	movs	r3, #0
           return HAL_ERROR;
 8003dea:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8003dec:	3478      	adds	r4, #120	; 0x78
 8003dee:	7023      	strb	r3, [r4, #0]
}
 8003df0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003df2:	2280      	movs	r2, #128	; 0x80
 8003df4:	69d9      	ldr	r1, [r3, #28]
 8003df6:	0112      	lsls	r2, r2, #4
 8003df8:	4211      	tst	r1, r2
 8003dfa:	d0cd      	beq.n	8003d98 <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dfc:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8003dfe:	0020      	movs	r0, r4
 8003e00:	f7ff fe22 	bl	8003a48 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e04:	0023      	movs	r3, r4
 8003e06:	2220      	movs	r2, #32
 8003e08:	3308      	adds	r3, #8
 8003e0a:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8003e0c:	9b01      	ldr	r3, [sp, #4]
 8003e0e:	3478      	adds	r4, #120	; 0x78
 8003e10:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003e12:	2003      	movs	r0, #3
 8003e14:	e7ec      	b.n	8003df0 <UART_WaitOnFlagUntilTimeout+0x64>

08003e16 <HAL_UART_Transmit>:
{
 8003e16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8003e1c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8003e1e:	0004      	movs	r4, r0
 8003e20:	000d      	movs	r5, r1
 8003e22:	0016      	movs	r6, r2
    return HAL_BUSY;
 8003e24:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d139      	bne.n	8003e9e <HAL_UART_Transmit+0x88>
      return  HAL_ERROR;
 8003e2a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	d036      	beq.n	8003e9e <HAL_UART_Transmit+0x88>
 8003e30:	2a00      	cmp	r2, #0
 8003e32:	d034      	beq.n	8003e9e <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	68a2      	ldr	r2, [r4, #8]
 8003e38:	015b      	lsls	r3, r3, #5
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d104      	bne.n	8003e48 <HAL_UART_Transmit+0x32>
 8003e3e:	6923      	ldr	r3, [r4, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e44:	4201      	tst	r1, r0
 8003e46:	d12a      	bne.n	8003e9e <HAL_UART_Transmit+0x88>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e48:	0023      	movs	r3, r4
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e50:	2321      	movs	r3, #33	; 0x21
 8003e52:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8003e54:	f7fe f988 	bl	8002168 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8003e58:	0023      	movs	r3, r4
 8003e5a:	3350      	adds	r3, #80	; 0x50
 8003e5c:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8003e5e:	3302      	adds	r3, #2
 8003e60:	801e      	strh	r6, [r3, #0]
 8003e62:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8003e68:	0007      	movs	r7, r0
      pdata16bits = NULL;
 8003e6a:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6c:	015b      	lsls	r3, r3, #5
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d104      	bne.n	8003e7c <HAL_UART_Transmit+0x66>
 8003e72:	6923      	ldr	r3, [r4, #16]
 8003e74:	42b3      	cmp	r3, r6
 8003e76:	d101      	bne.n	8003e7c <HAL_UART_Transmit+0x66>
 8003e78:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8003e7a:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8003e7c:	0023      	movs	r3, r4
 8003e7e:	3352      	adds	r3, #82	; 0x52
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10c      	bne.n	8003ea2 <HAL_UART_Transmit+0x8c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e88:	9b03      	ldr	r3, [sp, #12]
 8003e8a:	2140      	movs	r1, #64	; 0x40
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	0020      	movs	r0, r4
 8003e90:	003b      	movs	r3, r7
 8003e92:	f7ff ff7b 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 8003e96:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8003e98:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d10d      	bne.n	8003eba <HAL_UART_Transmit+0xa4>
}
 8003e9e:	b005      	add	sp, #20
 8003ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ea2:	9b03      	ldr	r3, [sp, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	2180      	movs	r1, #128	; 0x80
 8003eaa:	003b      	movs	r3, r7
 8003eac:	0020      	movs	r0, r4
 8003eae:	f7ff ff6d 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_UART_Transmit+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8003eba:	2003      	movs	r0, #3
 8003ebc:	e7ef      	b.n	8003e9e <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ebe:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003ec0:	2d00      	cmp	r5, #0
 8003ec2:	d10b      	bne.n	8003edc <HAL_UART_Transmit+0xc6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ec4:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8003ec6:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ec8:	05db      	lsls	r3, r3, #23
 8003eca:	0ddb      	lsrs	r3, r3, #23
 8003ecc:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003ece:	9b02      	ldr	r3, [sp, #8]
 8003ed0:	9a02      	ldr	r2, [sp, #8]
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	8013      	strh	r3, [r2, #0]
 8003eda:	e7cf      	b.n	8003e7c <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003edc:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8003ede:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ee0:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8003ee2:	e7f4      	b.n	8003ece <HAL_UART_Transmit+0xb8>

08003ee4 <HAL_UART_Receive>:
{
 8003ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee6:	0016      	movs	r6, r2
 8003ee8:	b087      	sub	sp, #28
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eea:	1d02      	adds	r2, r0, #4
{
 8003eec:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eee:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
{
 8003ef0:	0004      	movs	r4, r0
 8003ef2:	000d      	movs	r5, r1
    return HAL_BUSY;
 8003ef4:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d160      	bne.n	8003fbc <HAL_UART_Receive+0xd8>
      return  HAL_ERROR;
 8003efa:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003efc:	2900      	cmp	r1, #0
 8003efe:	d05d      	beq.n	8003fbc <HAL_UART_Receive+0xd8>
 8003f00:	2e00      	cmp	r6, #0
 8003f02:	d05b      	beq.n	8003fbc <HAL_UART_Receive+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	68a1      	ldr	r1, [r4, #8]
 8003f08:	015b      	lsls	r3, r3, #5
 8003f0a:	4299      	cmp	r1, r3
 8003f0c:	d104      	bne.n	8003f18 <HAL_UART_Receive+0x34>
 8003f0e:	6923      	ldr	r3, [r4, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_UART_Receive+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f14:	4205      	tst	r5, r0
 8003f16:	d151      	bne.n	8003fbc <HAL_UART_Receive+0xd8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f18:	0023      	movs	r3, r4
 8003f1a:	2700      	movs	r7, #0
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	67df      	str	r7, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f20:	2322      	movs	r3, #34	; 0x22
 8003f22:	67d3      	str	r3, [r2, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f24:	6627      	str	r7, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 8003f26:	f7fe f91f 	bl	8002168 <HAL_GetTick>
    huart->RxXferSize  = Size;
 8003f2a:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8003f2c:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 8003f2e:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 8003f30:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 8003f32:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 8003f34:	3302      	adds	r3, #2
 8003f36:	9303      	str	r3, [sp, #12]
 8003f38:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003f3a:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 8003f3c:	0149      	lsls	r1, r1, #5
 8003f3e:	3302      	adds	r3, #2
 8003f40:	428a      	cmp	r2, r1
 8003f42:	d11b      	bne.n	8003f7c <HAL_UART_Receive+0x98>
 8003f44:	6921      	ldr	r1, [r4, #16]
 8003f46:	42b9      	cmp	r1, r7
 8003f48:	d116      	bne.n	8003f78 <HAL_UART_Receive+0x94>
 8003f4a:	4926      	ldr	r1, [pc, #152]	; (8003fe4 <HAL_UART_Receive+0x100>)
 8003f4c:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 8003f4e:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f50:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 8003f52:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f54:	015b      	lsls	r3, r3, #5
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d104      	bne.n	8003f64 <HAL_UART_Receive+0x80>
 8003f5a:	6923      	ldr	r3, [r4, #16]
 8003f5c:	42b3      	cmp	r3, r6
 8003f5e:	d101      	bne.n	8003f64 <HAL_UART_Receive+0x80>
 8003f60:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8003f62:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 8003f64:	0023      	movs	r3, r4
 8003f66:	335a      	adds	r3, #90	; 0x5a
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b298      	uxth	r0, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d117      	bne.n	8003fa0 <HAL_UART_Receive+0xbc>
    huart->RxState = HAL_UART_STATE_READY;
 8003f70:	3404      	adds	r4, #4
 8003f72:	3320      	adds	r3, #32
 8003f74:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8003f76:	e021      	b.n	8003fbc <HAL_UART_Receive+0xd8>
    UART_MASK_COMPUTATION(huart);
 8003f78:	21ff      	movs	r1, #255	; 0xff
 8003f7a:	e7e7      	b.n	8003f4c <HAL_UART_Receive+0x68>
 8003f7c:	2a00      	cmp	r2, #0
 8003f7e:	d104      	bne.n	8003f8a <HAL_UART_Receive+0xa6>
 8003f80:	6921      	ldr	r1, [r4, #16]
 8003f82:	2900      	cmp	r1, #0
 8003f84:	d0f8      	beq.n	8003f78 <HAL_UART_Receive+0x94>
 8003f86:	217f      	movs	r1, #127	; 0x7f
 8003f88:	e7e0      	b.n	8003f4c <HAL_UART_Receive+0x68>
 8003f8a:	2180      	movs	r1, #128	; 0x80
 8003f8c:	0549      	lsls	r1, r1, #21
 8003f8e:	428a      	cmp	r2, r1
 8003f90:	d104      	bne.n	8003f9c <HAL_UART_Receive+0xb8>
 8003f92:	6921      	ldr	r1, [r4, #16]
 8003f94:	2900      	cmp	r1, #0
 8003f96:	d0f6      	beq.n	8003f86 <HAL_UART_Receive+0xa2>
 8003f98:	213f      	movs	r1, #63	; 0x3f
 8003f9a:	e7d7      	b.n	8003f4c <HAL_UART_Receive+0x68>
 8003f9c:	801f      	strh	r7, [r3, #0]
 8003f9e:	e7d6      	b.n	8003f4e <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003fa0:	9b05      	ldr	r3, [sp, #20]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2120      	movs	r1, #32
 8003fa8:	0020      	movs	r0, r4
 8003faa:	9b04      	ldr	r3, [sp, #16]
 8003fac:	f7ff feee 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_UART_Receive+0xdc>
        huart->RxState = HAL_UART_STATE_READY;
 8003fb4:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8003fb6:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	3404      	adds	r4, #4
 8003fba:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8003fbc:	b007      	add	sp, #28
 8003fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8003fc6:	2d00      	cmp	r5, #0
 8003fc8:	d108      	bne.n	8003fdc <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003fca:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 8003fcc:	3602      	adds	r6, #2
      huart->RxXferCount--;
 8003fce:	9b03      	ldr	r3, [sp, #12]
 8003fd0:	9a03      	ldr	r2, [sp, #12]
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	8013      	strh	r3, [r2, #0]
 8003fda:	e7c3      	b.n	8003f64 <HAL_UART_Receive+0x80>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003fdc:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8003fde:	3501      	adds	r5, #1
 8003fe0:	e7f5      	b.n	8003fce <HAL_UART_Receive+0xea>
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	000001ff 	.word	0x000001ff

08003fe8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	0003      	movs	r3, r0
{
 8003fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fec:	2500      	movs	r5, #0
{
 8003fee:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003ff4:	f7fe f8b8 	bl	8002168 <HAL_GetTick>
 8003ff8:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ffa:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003ffc:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3678      	adds	r6, #120	; 0x78
 8004002:	071b      	lsls	r3, r3, #28
 8004004:	d51b      	bpl.n	800403e <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004006:	2180      	movs	r1, #128	; 0x80
 8004008:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <UART_CheckIdleState+0xbc>)
 800400a:	002a      	movs	r2, r5
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	0389      	lsls	r1, r1, #14
 8004010:	0003      	movs	r3, r0
 8004012:	0020      	movs	r0, r4
 8004014:	f7ff feba 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 8004018:	42a8      	cmp	r0, r5
 800401a:	d010      	beq.n	800403e <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800401c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004020:	2301      	movs	r3, #1
 8004022:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004026:	2080      	movs	r0, #128	; 0x80
 8004028:	6822      	ldr	r2, [r4, #0]
 800402a:	6813      	ldr	r3, [r2, #0]
 800402c:	4383      	bics	r3, r0
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004034:	2320      	movs	r3, #32
 8004036:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8004038:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 800403a:	2003      	movs	r0, #3
}
 800403c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800403e:	0025      	movs	r5, r4
 8004040:	cd08      	ldmia	r5!, {r3}
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	075b      	lsls	r3, r3, #29
 8004046:	d525      	bpl.n	8004094 <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004048:	2180      	movs	r1, #128	; 0x80
 800404a:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <UART_CheckIdleState+0xbc>)
 800404c:	2200      	movs	r2, #0
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	0020      	movs	r0, r4
 8004052:	003b      	movs	r3, r7
 8004054:	03c9      	lsls	r1, r1, #15
 8004056:	f7ff fe99 	bl	8003d8c <UART_WaitOnFlagUntilTimeout>
 800405a:	2800      	cmp	r0, #0
 800405c:	d01a      	beq.n	8004094 <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800405e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004062:	2201      	movs	r2, #1
 8004064:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004068:	6821      	ldr	r1, [r4, #0]
 800406a:	4f0f      	ldr	r7, [pc, #60]	; (80040a8 <UART_CheckIdleState+0xc0>)
 800406c:	680b      	ldr	r3, [r1, #0]
 800406e:	403b      	ands	r3, r7
 8004070:	600b      	str	r3, [r1, #0]
 8004072:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004076:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407a:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407e:	6821      	ldr	r1, [r4, #0]
 8004080:	688b      	ldr	r3, [r1, #8]
 8004082:	4393      	bics	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
 8004086:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800408a:	2320      	movs	r3, #32
 800408c:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 800408e:	2300      	movs	r3, #0
 8004090:	7033      	strb	r3, [r6, #0]
 8004092:	e7d2      	b.n	800403a <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004094:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004096:	2320      	movs	r3, #32
 8004098:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800409a:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409c:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800409e:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80040a0:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 80040a2:	e7cb      	b.n	800403c <UART_CheckIdleState+0x54>
 80040a4:	01ffffff 	.word	0x01ffffff
 80040a8:	fffffedf 	.word	0xfffffedf

080040ac <HAL_UART_Init>:
{
 80040ac:	b510      	push	{r4, lr}
 80040ae:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80040b2:	2001      	movs	r0, #1
}
 80040b4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80040b6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80040bc:	0002      	movs	r2, r0
 80040be:	3278      	adds	r2, #120	; 0x78
 80040c0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80040c2:	f7fd ff55 	bl	8001f70 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80040c6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80040c8:	2101      	movs	r1, #1
 80040ca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80040cc:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80040ce:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040d0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80040d2:	438b      	bics	r3, r1
 80040d4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040d6:	f7ff fce5 	bl	8003aa4 <UART_SetConfig>
 80040da:	2801      	cmp	r0, #1
 80040dc:	d0e9      	beq.n	80040b2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80040e4:	0020      	movs	r0, r4
 80040e6:	f7ff fde9 	bl	8003cbc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	4907      	ldr	r1, [pc, #28]	; (800410c <HAL_UART_Init+0x60>)
 80040ee:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80040f0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	438a      	bics	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80040fe:	2201      	movs	r2, #1
 8004100:	6819      	ldr	r1, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004106:	f7ff ff6f 	bl	8003fe8 <UART_CheckIdleState>
 800410a:	e7d3      	b.n	80040b4 <HAL_UART_Init+0x8>
 800410c:	ffffb7ff 	.word	0xffffb7ff

08004110 <__errno>:
 8004110:	4b01      	ldr	r3, [pc, #4]	; (8004118 <__errno+0x8>)
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	4770      	bx	lr
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	20000048 	.word	0x20000048

0800411c <__libc_init_array>:
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	2600      	movs	r6, #0
 8004120:	4d0c      	ldr	r5, [pc, #48]	; (8004154 <__libc_init_array+0x38>)
 8004122:	4c0d      	ldr	r4, [pc, #52]	; (8004158 <__libc_init_array+0x3c>)
 8004124:	1b64      	subs	r4, r4, r5
 8004126:	10a4      	asrs	r4, r4, #2
 8004128:	42a6      	cmp	r6, r4
 800412a:	d109      	bne.n	8004140 <__libc_init_array+0x24>
 800412c:	2600      	movs	r6, #0
 800412e:	f001 faeb 	bl	8005708 <_init>
 8004132:	4d0a      	ldr	r5, [pc, #40]	; (800415c <__libc_init_array+0x40>)
 8004134:	4c0a      	ldr	r4, [pc, #40]	; (8004160 <__libc_init_array+0x44>)
 8004136:	1b64      	subs	r4, r4, r5
 8004138:	10a4      	asrs	r4, r4, #2
 800413a:	42a6      	cmp	r6, r4
 800413c:	d105      	bne.n	800414a <__libc_init_array+0x2e>
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	00b3      	lsls	r3, r6, #2
 8004142:	58eb      	ldr	r3, [r5, r3]
 8004144:	4798      	blx	r3
 8004146:	3601      	adds	r6, #1
 8004148:	e7ee      	b.n	8004128 <__libc_init_array+0xc>
 800414a:	00b3      	lsls	r3, r6, #2
 800414c:	58eb      	ldr	r3, [r5, r3]
 800414e:	4798      	blx	r3
 8004150:	3601      	adds	r6, #1
 8004152:	e7f2      	b.n	800413a <__libc_init_array+0x1e>
 8004154:	08005c64 	.word	0x08005c64
 8004158:	08005c64 	.word	0x08005c64
 800415c:	08005c64 	.word	0x08005c64
 8004160:	08005c68 	.word	0x08005c68

08004164 <malloc>:
 8004164:	b510      	push	{r4, lr}
 8004166:	4b03      	ldr	r3, [pc, #12]	; (8004174 <malloc+0x10>)
 8004168:	0001      	movs	r1, r0
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	f000 f88c 	bl	8004288 <_malloc_r>
 8004170:	bd10      	pop	{r4, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	20000048 	.word	0x20000048

08004178 <free>:
 8004178:	b510      	push	{r4, lr}
 800417a:	4b03      	ldr	r3, [pc, #12]	; (8004188 <free+0x10>)
 800417c:	0001      	movs	r1, r0
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	f000 f816 	bl	80041b0 <_free_r>
 8004184:	bd10      	pop	{r4, pc}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	20000048 	.word	0x20000048

0800418c <memcpy>:
 800418c:	2300      	movs	r3, #0
 800418e:	b510      	push	{r4, lr}
 8004190:	429a      	cmp	r2, r3
 8004192:	d100      	bne.n	8004196 <memcpy+0xa>
 8004194:	bd10      	pop	{r4, pc}
 8004196:	5ccc      	ldrb	r4, [r1, r3]
 8004198:	54c4      	strb	r4, [r0, r3]
 800419a:	3301      	adds	r3, #1
 800419c:	e7f8      	b.n	8004190 <memcpy+0x4>

0800419e <memset>:
 800419e:	0003      	movs	r3, r0
 80041a0:	1882      	adds	r2, r0, r2
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d100      	bne.n	80041a8 <memset+0xa>
 80041a6:	4770      	bx	lr
 80041a8:	7019      	strb	r1, [r3, #0]
 80041aa:	3301      	adds	r3, #1
 80041ac:	e7f9      	b.n	80041a2 <memset+0x4>
	...

080041b0 <_free_r>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	0005      	movs	r5, r0
 80041b4:	2900      	cmp	r1, #0
 80041b6:	d010      	beq.n	80041da <_free_r+0x2a>
 80041b8:	1f0c      	subs	r4, r1, #4
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	da00      	bge.n	80041c2 <_free_r+0x12>
 80041c0:	18e4      	adds	r4, r4, r3
 80041c2:	0028      	movs	r0, r5
 80041c4:	f000 f9d0 	bl	8004568 <__malloc_lock>
 80041c8:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <_free_r+0x90>)
 80041ca:	6813      	ldr	r3, [r2, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d105      	bne.n	80041dc <_free_r+0x2c>
 80041d0:	6063      	str	r3, [r4, #4]
 80041d2:	6014      	str	r4, [r2, #0]
 80041d4:	0028      	movs	r0, r5
 80041d6:	f000 f9cf 	bl	8004578 <__malloc_unlock>
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	42a3      	cmp	r3, r4
 80041de:	d908      	bls.n	80041f2 <_free_r+0x42>
 80041e0:	6821      	ldr	r1, [r4, #0]
 80041e2:	1860      	adds	r0, r4, r1
 80041e4:	4283      	cmp	r3, r0
 80041e6:	d1f3      	bne.n	80041d0 <_free_r+0x20>
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	1841      	adds	r1, r0, r1
 80041ee:	6021      	str	r1, [r4, #0]
 80041f0:	e7ee      	b.n	80041d0 <_free_r+0x20>
 80041f2:	001a      	movs	r2, r3
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <_free_r+0x4e>
 80041fa:	42a3      	cmp	r3, r4
 80041fc:	d9f9      	bls.n	80041f2 <_free_r+0x42>
 80041fe:	6811      	ldr	r1, [r2, #0]
 8004200:	1850      	adds	r0, r2, r1
 8004202:	42a0      	cmp	r0, r4
 8004204:	d10b      	bne.n	800421e <_free_r+0x6e>
 8004206:	6820      	ldr	r0, [r4, #0]
 8004208:	1809      	adds	r1, r1, r0
 800420a:	1850      	adds	r0, r2, r1
 800420c:	6011      	str	r1, [r2, #0]
 800420e:	4283      	cmp	r3, r0
 8004210:	d1e0      	bne.n	80041d4 <_free_r+0x24>
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	1841      	adds	r1, r0, r1
 8004218:	6011      	str	r1, [r2, #0]
 800421a:	6053      	str	r3, [r2, #4]
 800421c:	e7da      	b.n	80041d4 <_free_r+0x24>
 800421e:	42a0      	cmp	r0, r4
 8004220:	d902      	bls.n	8004228 <_free_r+0x78>
 8004222:	230c      	movs	r3, #12
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	e7d5      	b.n	80041d4 <_free_r+0x24>
 8004228:	6821      	ldr	r1, [r4, #0]
 800422a:	1860      	adds	r0, r4, r1
 800422c:	4283      	cmp	r3, r0
 800422e:	d103      	bne.n	8004238 <_free_r+0x88>
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	1841      	adds	r1, r0, r1
 8004236:	6021      	str	r1, [r4, #0]
 8004238:	6063      	str	r3, [r4, #4]
 800423a:	6054      	str	r4, [r2, #4]
 800423c:	e7ca      	b.n	80041d4 <_free_r+0x24>
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	200002bc 	.word	0x200002bc

08004244 <sbrk_aligned>:
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	4e0f      	ldr	r6, [pc, #60]	; (8004284 <sbrk_aligned+0x40>)
 8004248:	000d      	movs	r5, r1
 800424a:	6831      	ldr	r1, [r6, #0]
 800424c:	0004      	movs	r4, r0
 800424e:	2900      	cmp	r1, #0
 8004250:	d102      	bne.n	8004258 <sbrk_aligned+0x14>
 8004252:	f000 f8fd 	bl	8004450 <_sbrk_r>
 8004256:	6030      	str	r0, [r6, #0]
 8004258:	0029      	movs	r1, r5
 800425a:	0020      	movs	r0, r4
 800425c:	f000 f8f8 	bl	8004450 <_sbrk_r>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d00a      	beq.n	800427a <sbrk_aligned+0x36>
 8004264:	2303      	movs	r3, #3
 8004266:	1cc5      	adds	r5, r0, #3
 8004268:	439d      	bics	r5, r3
 800426a:	42a8      	cmp	r0, r5
 800426c:	d007      	beq.n	800427e <sbrk_aligned+0x3a>
 800426e:	1a29      	subs	r1, r5, r0
 8004270:	0020      	movs	r0, r4
 8004272:	f000 f8ed 	bl	8004450 <_sbrk_r>
 8004276:	1c43      	adds	r3, r0, #1
 8004278:	d101      	bne.n	800427e <sbrk_aligned+0x3a>
 800427a:	2501      	movs	r5, #1
 800427c:	426d      	negs	r5, r5
 800427e:	0028      	movs	r0, r5
 8004280:	bd70      	pop	{r4, r5, r6, pc}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	200002c0 	.word	0x200002c0

08004288 <_malloc_r>:
 8004288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800428a:	2203      	movs	r2, #3
 800428c:	1ccb      	adds	r3, r1, #3
 800428e:	4393      	bics	r3, r2
 8004290:	3308      	adds	r3, #8
 8004292:	0006      	movs	r6, r0
 8004294:	001f      	movs	r7, r3
 8004296:	2b0c      	cmp	r3, #12
 8004298:	d232      	bcs.n	8004300 <_malloc_r+0x78>
 800429a:	270c      	movs	r7, #12
 800429c:	42b9      	cmp	r1, r7
 800429e:	d831      	bhi.n	8004304 <_malloc_r+0x7c>
 80042a0:	0030      	movs	r0, r6
 80042a2:	f000 f961 	bl	8004568 <__malloc_lock>
 80042a6:	4d32      	ldr	r5, [pc, #200]	; (8004370 <_malloc_r+0xe8>)
 80042a8:	682b      	ldr	r3, [r5, #0]
 80042aa:	001c      	movs	r4, r3
 80042ac:	2c00      	cmp	r4, #0
 80042ae:	d12e      	bne.n	800430e <_malloc_r+0x86>
 80042b0:	0039      	movs	r1, r7
 80042b2:	0030      	movs	r0, r6
 80042b4:	f7ff ffc6 	bl	8004244 <sbrk_aligned>
 80042b8:	0004      	movs	r4, r0
 80042ba:	1c43      	adds	r3, r0, #1
 80042bc:	d11e      	bne.n	80042fc <_malloc_r+0x74>
 80042be:	682c      	ldr	r4, [r5, #0]
 80042c0:	0025      	movs	r5, r4
 80042c2:	2d00      	cmp	r5, #0
 80042c4:	d14a      	bne.n	800435c <_malloc_r+0xd4>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	0029      	movs	r1, r5
 80042ca:	18e3      	adds	r3, r4, r3
 80042cc:	0030      	movs	r0, r6
 80042ce:	9301      	str	r3, [sp, #4]
 80042d0:	f000 f8be 	bl	8004450 <_sbrk_r>
 80042d4:	9b01      	ldr	r3, [sp, #4]
 80042d6:	4283      	cmp	r3, r0
 80042d8:	d143      	bne.n	8004362 <_malloc_r+0xda>
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	3703      	adds	r7, #3
 80042de:	1aff      	subs	r7, r7, r3
 80042e0:	2303      	movs	r3, #3
 80042e2:	439f      	bics	r7, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	2f0c      	cmp	r7, #12
 80042e8:	d200      	bcs.n	80042ec <_malloc_r+0x64>
 80042ea:	270c      	movs	r7, #12
 80042ec:	0039      	movs	r1, r7
 80042ee:	0030      	movs	r0, r6
 80042f0:	f7ff ffa8 	bl	8004244 <sbrk_aligned>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d034      	beq.n	8004362 <_malloc_r+0xda>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	19df      	adds	r7, r3, r7
 80042fc:	6027      	str	r7, [r4, #0]
 80042fe:	e013      	b.n	8004328 <_malloc_r+0xa0>
 8004300:	2b00      	cmp	r3, #0
 8004302:	dacb      	bge.n	800429c <_malloc_r+0x14>
 8004304:	230c      	movs	r3, #12
 8004306:	2500      	movs	r5, #0
 8004308:	6033      	str	r3, [r6, #0]
 800430a:	0028      	movs	r0, r5
 800430c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800430e:	6822      	ldr	r2, [r4, #0]
 8004310:	1bd1      	subs	r1, r2, r7
 8004312:	d420      	bmi.n	8004356 <_malloc_r+0xce>
 8004314:	290b      	cmp	r1, #11
 8004316:	d917      	bls.n	8004348 <_malloc_r+0xc0>
 8004318:	19e2      	adds	r2, r4, r7
 800431a:	6027      	str	r7, [r4, #0]
 800431c:	42a3      	cmp	r3, r4
 800431e:	d111      	bne.n	8004344 <_malloc_r+0xbc>
 8004320:	602a      	str	r2, [r5, #0]
 8004322:	6863      	ldr	r3, [r4, #4]
 8004324:	6011      	str	r1, [r2, #0]
 8004326:	6053      	str	r3, [r2, #4]
 8004328:	0030      	movs	r0, r6
 800432a:	0025      	movs	r5, r4
 800432c:	f000 f924 	bl	8004578 <__malloc_unlock>
 8004330:	2207      	movs	r2, #7
 8004332:	350b      	adds	r5, #11
 8004334:	1d23      	adds	r3, r4, #4
 8004336:	4395      	bics	r5, r2
 8004338:	1aea      	subs	r2, r5, r3
 800433a:	429d      	cmp	r5, r3
 800433c:	d0e5      	beq.n	800430a <_malloc_r+0x82>
 800433e:	1b5b      	subs	r3, r3, r5
 8004340:	50a3      	str	r3, [r4, r2]
 8004342:	e7e2      	b.n	800430a <_malloc_r+0x82>
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	e7ec      	b.n	8004322 <_malloc_r+0x9a>
 8004348:	6862      	ldr	r2, [r4, #4]
 800434a:	42a3      	cmp	r3, r4
 800434c:	d101      	bne.n	8004352 <_malloc_r+0xca>
 800434e:	602a      	str	r2, [r5, #0]
 8004350:	e7ea      	b.n	8004328 <_malloc_r+0xa0>
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	e7e8      	b.n	8004328 <_malloc_r+0xa0>
 8004356:	0023      	movs	r3, r4
 8004358:	6864      	ldr	r4, [r4, #4]
 800435a:	e7a7      	b.n	80042ac <_malloc_r+0x24>
 800435c:	002c      	movs	r4, r5
 800435e:	686d      	ldr	r5, [r5, #4]
 8004360:	e7af      	b.n	80042c2 <_malloc_r+0x3a>
 8004362:	230c      	movs	r3, #12
 8004364:	0030      	movs	r0, r6
 8004366:	6033      	str	r3, [r6, #0]
 8004368:	f000 f906 	bl	8004578 <__malloc_unlock>
 800436c:	e7cd      	b.n	800430a <_malloc_r+0x82>
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	200002bc 	.word	0x200002bc

08004374 <srand>:
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <srand+0x48>)
 8004376:	b570      	push	{r4, r5, r6, lr}
 8004378:	681d      	ldr	r5, [r3, #0]
 800437a:	0004      	movs	r4, r0
 800437c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800437e:	2b00      	cmp	r3, #0
 8004380:	d116      	bne.n	80043b0 <srand+0x3c>
 8004382:	2018      	movs	r0, #24
 8004384:	f7ff feee 	bl	8004164 <malloc>
 8004388:	1e02      	subs	r2, r0, #0
 800438a:	63a8      	str	r0, [r5, #56]	; 0x38
 800438c:	d104      	bne.n	8004398 <srand+0x24>
 800438e:	2142      	movs	r1, #66	; 0x42
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <srand+0x4c>)
 8004392:	480c      	ldr	r0, [pc, #48]	; (80043c4 <srand+0x50>)
 8004394:	f000 f8a8 	bl	80044e8 <__assert_func>
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <srand+0x54>)
 800439a:	2100      	movs	r1, #0
 800439c:	6003      	str	r3, [r0, #0]
 800439e:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <srand+0x58>)
 80043a0:	6043      	str	r3, [r0, #4]
 80043a2:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <srand+0x5c>)
 80043a4:	6083      	str	r3, [r0, #8]
 80043a6:	230b      	movs	r3, #11
 80043a8:	8183      	strh	r3, [r0, #12]
 80043aa:	2001      	movs	r0, #1
 80043ac:	6110      	str	r0, [r2, #16]
 80043ae:	6151      	str	r1, [r2, #20]
 80043b0:	2200      	movs	r2, #0
 80043b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80043b4:	611c      	str	r4, [r3, #16]
 80043b6:	615a      	str	r2, [r3, #20]
 80043b8:	bd70      	pop	{r4, r5, r6, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	20000048 	.word	0x20000048
 80043c0:	08005b18 	.word	0x08005b18
 80043c4:	08005b2f 	.word	0x08005b2f
 80043c8:	abcd330e 	.word	0xabcd330e
 80043cc:	e66d1234 	.word	0xe66d1234
 80043d0:	0005deec 	.word	0x0005deec

080043d4 <rand>:
 80043d4:	4b16      	ldr	r3, [pc, #88]	; (8004430 <rand+0x5c>)
 80043d6:	b510      	push	{r4, lr}
 80043d8:	681c      	ldr	r4, [r3, #0]
 80043da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d116      	bne.n	800440e <rand+0x3a>
 80043e0:	2018      	movs	r0, #24
 80043e2:	f7ff febf 	bl	8004164 <malloc>
 80043e6:	1e02      	subs	r2, r0, #0
 80043e8:	63a0      	str	r0, [r4, #56]	; 0x38
 80043ea:	d104      	bne.n	80043f6 <rand+0x22>
 80043ec:	214e      	movs	r1, #78	; 0x4e
 80043ee:	4b11      	ldr	r3, [pc, #68]	; (8004434 <rand+0x60>)
 80043f0:	4811      	ldr	r0, [pc, #68]	; (8004438 <rand+0x64>)
 80043f2:	f000 f879 	bl	80044e8 <__assert_func>
 80043f6:	4b11      	ldr	r3, [pc, #68]	; (800443c <rand+0x68>)
 80043f8:	2100      	movs	r1, #0
 80043fa:	6003      	str	r3, [r0, #0]
 80043fc:	4b10      	ldr	r3, [pc, #64]	; (8004440 <rand+0x6c>)
 80043fe:	6043      	str	r3, [r0, #4]
 8004400:	4b10      	ldr	r3, [pc, #64]	; (8004444 <rand+0x70>)
 8004402:	6083      	str	r3, [r0, #8]
 8004404:	230b      	movs	r3, #11
 8004406:	8183      	strh	r3, [r0, #12]
 8004408:	2001      	movs	r0, #1
 800440a:	6110      	str	r0, [r2, #16]
 800440c:	6151      	str	r1, [r2, #20]
 800440e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004410:	4a0d      	ldr	r2, [pc, #52]	; (8004448 <rand+0x74>)
 8004412:	6920      	ldr	r0, [r4, #16]
 8004414:	6961      	ldr	r1, [r4, #20]
 8004416:	4b0d      	ldr	r3, [pc, #52]	; (800444c <rand+0x78>)
 8004418:	f7fc f828 	bl	800046c <__aeabi_lmul>
 800441c:	2201      	movs	r2, #1
 800441e:	2300      	movs	r3, #0
 8004420:	1880      	adds	r0, r0, r2
 8004422:	4159      	adcs	r1, r3
 8004424:	6120      	str	r0, [r4, #16]
 8004426:	6161      	str	r1, [r4, #20]
 8004428:	0048      	lsls	r0, r1, #1
 800442a:	0840      	lsrs	r0, r0, #1
 800442c:	bd10      	pop	{r4, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	20000048 	.word	0x20000048
 8004434:	08005b18 	.word	0x08005b18
 8004438:	08005b2f 	.word	0x08005b2f
 800443c:	abcd330e 	.word	0xabcd330e
 8004440:	e66d1234 	.word	0xe66d1234
 8004444:	0005deec 	.word	0x0005deec
 8004448:	4c957f2d 	.word	0x4c957f2d
 800444c:	5851f42d 	.word	0x5851f42d

08004450 <_sbrk_r>:
 8004450:	2300      	movs	r3, #0
 8004452:	b570      	push	{r4, r5, r6, lr}
 8004454:	4d06      	ldr	r5, [pc, #24]	; (8004470 <_sbrk_r+0x20>)
 8004456:	0004      	movs	r4, r0
 8004458:	0008      	movs	r0, r1
 800445a:	602b      	str	r3, [r5, #0]
 800445c:	f7fd fdf4 	bl	8002048 <_sbrk>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d103      	bne.n	800446c <_sbrk_r+0x1c>
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d000      	beq.n	800446c <_sbrk_r+0x1c>
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	bd70      	pop	{r4, r5, r6, pc}
 800446e:	46c0      	nop			; (mov r8, r8)
 8004470:	200002c4 	.word	0x200002c4

08004474 <siprintf>:
 8004474:	b40e      	push	{r1, r2, r3}
 8004476:	b500      	push	{lr}
 8004478:	490b      	ldr	r1, [pc, #44]	; (80044a8 <siprintf+0x34>)
 800447a:	b09c      	sub	sp, #112	; 0x70
 800447c:	ab1d      	add	r3, sp, #116	; 0x74
 800447e:	9002      	str	r0, [sp, #8]
 8004480:	9006      	str	r0, [sp, #24]
 8004482:	9107      	str	r1, [sp, #28]
 8004484:	9104      	str	r1, [sp, #16]
 8004486:	4809      	ldr	r0, [pc, #36]	; (80044ac <siprintf+0x38>)
 8004488:	4909      	ldr	r1, [pc, #36]	; (80044b0 <siprintf+0x3c>)
 800448a:	cb04      	ldmia	r3!, {r2}
 800448c:	9105      	str	r1, [sp, #20]
 800448e:	6800      	ldr	r0, [r0, #0]
 8004490:	a902      	add	r1, sp, #8
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	f000 f8da 	bl	800464c <_svfiprintf_r>
 8004498:	2300      	movs	r3, #0
 800449a:	9a02      	ldr	r2, [sp, #8]
 800449c:	7013      	strb	r3, [r2, #0]
 800449e:	b01c      	add	sp, #112	; 0x70
 80044a0:	bc08      	pop	{r3}
 80044a2:	b003      	add	sp, #12
 80044a4:	4718      	bx	r3
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	7fffffff 	.word	0x7fffffff
 80044ac:	20000048 	.word	0x20000048
 80044b0:	ffff0208 	.word	0xffff0208

080044b4 <time>:
 80044b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <time+0x30>)
 80044b8:	0004      	movs	r4, r0
 80044ba:	2200      	movs	r2, #0
 80044bc:	4669      	mov	r1, sp
 80044be:	6818      	ldr	r0, [r3, #0]
 80044c0:	f000 f840 	bl	8004544 <_gettimeofday_r>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	da04      	bge.n	80044d2 <time+0x1e>
 80044c8:	2201      	movs	r2, #1
 80044ca:	4252      	negs	r2, r2
 80044cc:	17d3      	asrs	r3, r2, #31
 80044ce:	9200      	str	r2, [sp, #0]
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	9800      	ldr	r0, [sp, #0]
 80044d4:	9901      	ldr	r1, [sp, #4]
 80044d6:	2c00      	cmp	r4, #0
 80044d8:	d001      	beq.n	80044de <time+0x2a>
 80044da:	6020      	str	r0, [r4, #0]
 80044dc:	6061      	str	r1, [r4, #4]
 80044de:	b004      	add	sp, #16
 80044e0:	bd10      	pop	{r4, pc}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	20000048 	.word	0x20000048

080044e8 <__assert_func>:
 80044e8:	b530      	push	{r4, r5, lr}
 80044ea:	0014      	movs	r4, r2
 80044ec:	001a      	movs	r2, r3
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <__assert_func+0x2c>)
 80044f0:	0005      	movs	r5, r0
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	b085      	sub	sp, #20
 80044f6:	68d8      	ldr	r0, [r3, #12]
 80044f8:	4b07      	ldr	r3, [pc, #28]	; (8004518 <__assert_func+0x30>)
 80044fa:	2c00      	cmp	r4, #0
 80044fc:	d101      	bne.n	8004502 <__assert_func+0x1a>
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <__assert_func+0x34>)
 8004500:	001c      	movs	r4, r3
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	9100      	str	r1, [sp, #0]
 8004506:	002b      	movs	r3, r5
 8004508:	4905      	ldr	r1, [pc, #20]	; (8004520 <__assert_func+0x38>)
 800450a:	9402      	str	r4, [sp, #8]
 800450c:	f000 f80a 	bl	8004524 <fiprintf>
 8004510:	f000 fd4e 	bl	8004fb0 <abort>
 8004514:	20000048 	.word	0x20000048
 8004518:	08005b8a 	.word	0x08005b8a
 800451c:	08005bc5 	.word	0x08005bc5
 8004520:	08005b97 	.word	0x08005b97

08004524 <fiprintf>:
 8004524:	b40e      	push	{r1, r2, r3}
 8004526:	b503      	push	{r0, r1, lr}
 8004528:	0001      	movs	r1, r0
 800452a:	ab03      	add	r3, sp, #12
 800452c:	4804      	ldr	r0, [pc, #16]	; (8004540 <fiprintf+0x1c>)
 800452e:	cb04      	ldmia	r3!, {r2}
 8004530:	6800      	ldr	r0, [r0, #0]
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	f000 f9b2 	bl	800489c <_vfiprintf_r>
 8004538:	b002      	add	sp, #8
 800453a:	bc08      	pop	{r3}
 800453c:	b003      	add	sp, #12
 800453e:	4718      	bx	r3
 8004540:	20000048 	.word	0x20000048

08004544 <_gettimeofday_r>:
 8004544:	2300      	movs	r3, #0
 8004546:	b570      	push	{r4, r5, r6, lr}
 8004548:	4d06      	ldr	r5, [pc, #24]	; (8004564 <_gettimeofday_r+0x20>)
 800454a:	0004      	movs	r4, r0
 800454c:	0008      	movs	r0, r1
 800454e:	0011      	movs	r1, r2
 8004550:	602b      	str	r3, [r5, #0]
 8004552:	f001 f8d1 	bl	80056f8 <_gettimeofday>
 8004556:	1c43      	adds	r3, r0, #1
 8004558:	d103      	bne.n	8004562 <_gettimeofday_r+0x1e>
 800455a:	682b      	ldr	r3, [r5, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d000      	beq.n	8004562 <_gettimeofday_r+0x1e>
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	200002c4 	.word	0x200002c4

08004568 <__malloc_lock>:
 8004568:	b510      	push	{r4, lr}
 800456a:	4802      	ldr	r0, [pc, #8]	; (8004574 <__malloc_lock+0xc>)
 800456c:	f000 fef7 	bl	800535e <__retarget_lock_acquire_recursive>
 8004570:	bd10      	pop	{r4, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	200002c8 	.word	0x200002c8

08004578 <__malloc_unlock>:
 8004578:	b510      	push	{r4, lr}
 800457a:	4802      	ldr	r0, [pc, #8]	; (8004584 <__malloc_unlock+0xc>)
 800457c:	f000 fef0 	bl	8005360 <__retarget_lock_release_recursive>
 8004580:	bd10      	pop	{r4, pc}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	200002c8 	.word	0x200002c8

08004588 <__ssputs_r>:
 8004588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800458a:	688e      	ldr	r6, [r1, #8]
 800458c:	b085      	sub	sp, #20
 800458e:	0007      	movs	r7, r0
 8004590:	000c      	movs	r4, r1
 8004592:	9203      	str	r2, [sp, #12]
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	429e      	cmp	r6, r3
 8004598:	d83c      	bhi.n	8004614 <__ssputs_r+0x8c>
 800459a:	2390      	movs	r3, #144	; 0x90
 800459c:	898a      	ldrh	r2, [r1, #12]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	421a      	tst	r2, r3
 80045a2:	d034      	beq.n	800460e <__ssputs_r+0x86>
 80045a4:	6909      	ldr	r1, [r1, #16]
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	6960      	ldr	r0, [r4, #20]
 80045aa:	1a5b      	subs	r3, r3, r1
 80045ac:	9302      	str	r3, [sp, #8]
 80045ae:	2303      	movs	r3, #3
 80045b0:	4343      	muls	r3, r0
 80045b2:	0fdd      	lsrs	r5, r3, #31
 80045b4:	18ed      	adds	r5, r5, r3
 80045b6:	9b01      	ldr	r3, [sp, #4]
 80045b8:	9802      	ldr	r0, [sp, #8]
 80045ba:	3301      	adds	r3, #1
 80045bc:	181b      	adds	r3, r3, r0
 80045be:	106d      	asrs	r5, r5, #1
 80045c0:	42ab      	cmp	r3, r5
 80045c2:	d900      	bls.n	80045c6 <__ssputs_r+0x3e>
 80045c4:	001d      	movs	r5, r3
 80045c6:	0553      	lsls	r3, r2, #21
 80045c8:	d532      	bpl.n	8004630 <__ssputs_r+0xa8>
 80045ca:	0029      	movs	r1, r5
 80045cc:	0038      	movs	r0, r7
 80045ce:	f7ff fe5b 	bl	8004288 <_malloc_r>
 80045d2:	1e06      	subs	r6, r0, #0
 80045d4:	d109      	bne.n	80045ea <__ssputs_r+0x62>
 80045d6:	230c      	movs	r3, #12
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	2340      	movs	r3, #64	; 0x40
 80045dc:	2001      	movs	r0, #1
 80045de:	89a2      	ldrh	r2, [r4, #12]
 80045e0:	4240      	negs	r0, r0
 80045e2:	4313      	orrs	r3, r2
 80045e4:	81a3      	strh	r3, [r4, #12]
 80045e6:	b005      	add	sp, #20
 80045e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ea:	9a02      	ldr	r2, [sp, #8]
 80045ec:	6921      	ldr	r1, [r4, #16]
 80045ee:	f7ff fdcd 	bl	800418c <memcpy>
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	4a14      	ldr	r2, [pc, #80]	; (8004648 <__ssputs_r+0xc0>)
 80045f6:	401a      	ands	r2, r3
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	4313      	orrs	r3, r2
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	9b02      	ldr	r3, [sp, #8]
 8004600:	6126      	str	r6, [r4, #16]
 8004602:	18f6      	adds	r6, r6, r3
 8004604:	6026      	str	r6, [r4, #0]
 8004606:	6165      	str	r5, [r4, #20]
 8004608:	9e01      	ldr	r6, [sp, #4]
 800460a:	1aed      	subs	r5, r5, r3
 800460c:	60a5      	str	r5, [r4, #8]
 800460e:	9b01      	ldr	r3, [sp, #4]
 8004610:	429e      	cmp	r6, r3
 8004612:	d900      	bls.n	8004616 <__ssputs_r+0x8e>
 8004614:	9e01      	ldr	r6, [sp, #4]
 8004616:	0032      	movs	r2, r6
 8004618:	9903      	ldr	r1, [sp, #12]
 800461a:	6820      	ldr	r0, [r4, #0]
 800461c:	f000 ff19 	bl	8005452 <memmove>
 8004620:	68a3      	ldr	r3, [r4, #8]
 8004622:	2000      	movs	r0, #0
 8004624:	1b9b      	subs	r3, r3, r6
 8004626:	60a3      	str	r3, [r4, #8]
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	199e      	adds	r6, r3, r6
 800462c:	6026      	str	r6, [r4, #0]
 800462e:	e7da      	b.n	80045e6 <__ssputs_r+0x5e>
 8004630:	002a      	movs	r2, r5
 8004632:	0038      	movs	r0, r7
 8004634:	f000 ff20 	bl	8005478 <_realloc_r>
 8004638:	1e06      	subs	r6, r0, #0
 800463a:	d1e0      	bne.n	80045fe <__ssputs_r+0x76>
 800463c:	0038      	movs	r0, r7
 800463e:	6921      	ldr	r1, [r4, #16]
 8004640:	f7ff fdb6 	bl	80041b0 <_free_r>
 8004644:	e7c7      	b.n	80045d6 <__ssputs_r+0x4e>
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	fffffb7f 	.word	0xfffffb7f

0800464c <_svfiprintf_r>:
 800464c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800464e:	b0a1      	sub	sp, #132	; 0x84
 8004650:	9003      	str	r0, [sp, #12]
 8004652:	001d      	movs	r5, r3
 8004654:	898b      	ldrh	r3, [r1, #12]
 8004656:	000f      	movs	r7, r1
 8004658:	0016      	movs	r6, r2
 800465a:	061b      	lsls	r3, r3, #24
 800465c:	d511      	bpl.n	8004682 <_svfiprintf_r+0x36>
 800465e:	690b      	ldr	r3, [r1, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10e      	bne.n	8004682 <_svfiprintf_r+0x36>
 8004664:	2140      	movs	r1, #64	; 0x40
 8004666:	f7ff fe0f 	bl	8004288 <_malloc_r>
 800466a:	6038      	str	r0, [r7, #0]
 800466c:	6138      	str	r0, [r7, #16]
 800466e:	2800      	cmp	r0, #0
 8004670:	d105      	bne.n	800467e <_svfiprintf_r+0x32>
 8004672:	230c      	movs	r3, #12
 8004674:	9a03      	ldr	r2, [sp, #12]
 8004676:	3801      	subs	r0, #1
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	b021      	add	sp, #132	; 0x84
 800467c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467e:	2340      	movs	r3, #64	; 0x40
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	2300      	movs	r3, #0
 8004684:	ac08      	add	r4, sp, #32
 8004686:	6163      	str	r3, [r4, #20]
 8004688:	3320      	adds	r3, #32
 800468a:	7663      	strb	r3, [r4, #25]
 800468c:	3310      	adds	r3, #16
 800468e:	76a3      	strb	r3, [r4, #26]
 8004690:	9507      	str	r5, [sp, #28]
 8004692:	0035      	movs	r5, r6
 8004694:	782b      	ldrb	r3, [r5, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <_svfiprintf_r+0x52>
 800469a:	2b25      	cmp	r3, #37	; 0x25
 800469c:	d147      	bne.n	800472e <_svfiprintf_r+0xe2>
 800469e:	1bab      	subs	r3, r5, r6
 80046a0:	9305      	str	r3, [sp, #20]
 80046a2:	42b5      	cmp	r5, r6
 80046a4:	d00c      	beq.n	80046c0 <_svfiprintf_r+0x74>
 80046a6:	0032      	movs	r2, r6
 80046a8:	0039      	movs	r1, r7
 80046aa:	9803      	ldr	r0, [sp, #12]
 80046ac:	f7ff ff6c 	bl	8004588 <__ssputs_r>
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	d100      	bne.n	80046b6 <_svfiprintf_r+0x6a>
 80046b4:	e0ae      	b.n	8004814 <_svfiprintf_r+0x1c8>
 80046b6:	6962      	ldr	r2, [r4, #20]
 80046b8:	9b05      	ldr	r3, [sp, #20]
 80046ba:	4694      	mov	ip, r2
 80046bc:	4463      	add	r3, ip
 80046be:	6163      	str	r3, [r4, #20]
 80046c0:	782b      	ldrb	r3, [r5, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d100      	bne.n	80046c8 <_svfiprintf_r+0x7c>
 80046c6:	e0a5      	b.n	8004814 <_svfiprintf_r+0x1c8>
 80046c8:	2201      	movs	r2, #1
 80046ca:	2300      	movs	r3, #0
 80046cc:	4252      	negs	r2, r2
 80046ce:	6062      	str	r2, [r4, #4]
 80046d0:	a904      	add	r1, sp, #16
 80046d2:	3254      	adds	r2, #84	; 0x54
 80046d4:	1852      	adds	r2, r2, r1
 80046d6:	1c6e      	adds	r6, r5, #1
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	60e3      	str	r3, [r4, #12]
 80046dc:	60a3      	str	r3, [r4, #8]
 80046de:	7013      	strb	r3, [r2, #0]
 80046e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80046e2:	2205      	movs	r2, #5
 80046e4:	7831      	ldrb	r1, [r6, #0]
 80046e6:	4854      	ldr	r0, [pc, #336]	; (8004838 <_svfiprintf_r+0x1ec>)
 80046e8:	f000 fea8 	bl	800543c <memchr>
 80046ec:	1c75      	adds	r5, r6, #1
 80046ee:	2800      	cmp	r0, #0
 80046f0:	d11f      	bne.n	8004732 <_svfiprintf_r+0xe6>
 80046f2:	6822      	ldr	r2, [r4, #0]
 80046f4:	06d3      	lsls	r3, r2, #27
 80046f6:	d504      	bpl.n	8004702 <_svfiprintf_r+0xb6>
 80046f8:	2353      	movs	r3, #83	; 0x53
 80046fa:	a904      	add	r1, sp, #16
 80046fc:	185b      	adds	r3, r3, r1
 80046fe:	2120      	movs	r1, #32
 8004700:	7019      	strb	r1, [r3, #0]
 8004702:	0713      	lsls	r3, r2, #28
 8004704:	d504      	bpl.n	8004710 <_svfiprintf_r+0xc4>
 8004706:	2353      	movs	r3, #83	; 0x53
 8004708:	a904      	add	r1, sp, #16
 800470a:	185b      	adds	r3, r3, r1
 800470c:	212b      	movs	r1, #43	; 0x2b
 800470e:	7019      	strb	r1, [r3, #0]
 8004710:	7833      	ldrb	r3, [r6, #0]
 8004712:	2b2a      	cmp	r3, #42	; 0x2a
 8004714:	d016      	beq.n	8004744 <_svfiprintf_r+0xf8>
 8004716:	0035      	movs	r5, r6
 8004718:	2100      	movs	r1, #0
 800471a:	200a      	movs	r0, #10
 800471c:	68e3      	ldr	r3, [r4, #12]
 800471e:	782a      	ldrb	r2, [r5, #0]
 8004720:	1c6e      	adds	r6, r5, #1
 8004722:	3a30      	subs	r2, #48	; 0x30
 8004724:	2a09      	cmp	r2, #9
 8004726:	d94e      	bls.n	80047c6 <_svfiprintf_r+0x17a>
 8004728:	2900      	cmp	r1, #0
 800472a:	d111      	bne.n	8004750 <_svfiprintf_r+0x104>
 800472c:	e017      	b.n	800475e <_svfiprintf_r+0x112>
 800472e:	3501      	adds	r5, #1
 8004730:	e7b0      	b.n	8004694 <_svfiprintf_r+0x48>
 8004732:	4b41      	ldr	r3, [pc, #260]	; (8004838 <_svfiprintf_r+0x1ec>)
 8004734:	6822      	ldr	r2, [r4, #0]
 8004736:	1ac0      	subs	r0, r0, r3
 8004738:	2301      	movs	r3, #1
 800473a:	4083      	lsls	r3, r0
 800473c:	4313      	orrs	r3, r2
 800473e:	002e      	movs	r6, r5
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	e7ce      	b.n	80046e2 <_svfiprintf_r+0x96>
 8004744:	9b07      	ldr	r3, [sp, #28]
 8004746:	1d19      	adds	r1, r3, #4
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	9107      	str	r1, [sp, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	db01      	blt.n	8004754 <_svfiprintf_r+0x108>
 8004750:	930b      	str	r3, [sp, #44]	; 0x2c
 8004752:	e004      	b.n	800475e <_svfiprintf_r+0x112>
 8004754:	425b      	negs	r3, r3
 8004756:	60e3      	str	r3, [r4, #12]
 8004758:	2302      	movs	r3, #2
 800475a:	4313      	orrs	r3, r2
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	782b      	ldrb	r3, [r5, #0]
 8004760:	2b2e      	cmp	r3, #46	; 0x2e
 8004762:	d10a      	bne.n	800477a <_svfiprintf_r+0x12e>
 8004764:	786b      	ldrb	r3, [r5, #1]
 8004766:	2b2a      	cmp	r3, #42	; 0x2a
 8004768:	d135      	bne.n	80047d6 <_svfiprintf_r+0x18a>
 800476a:	9b07      	ldr	r3, [sp, #28]
 800476c:	3502      	adds	r5, #2
 800476e:	1d1a      	adds	r2, r3, #4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	9207      	str	r2, [sp, #28]
 8004774:	2b00      	cmp	r3, #0
 8004776:	db2b      	blt.n	80047d0 <_svfiprintf_r+0x184>
 8004778:	9309      	str	r3, [sp, #36]	; 0x24
 800477a:	4e30      	ldr	r6, [pc, #192]	; (800483c <_svfiprintf_r+0x1f0>)
 800477c:	2203      	movs	r2, #3
 800477e:	0030      	movs	r0, r6
 8004780:	7829      	ldrb	r1, [r5, #0]
 8004782:	f000 fe5b 	bl	800543c <memchr>
 8004786:	2800      	cmp	r0, #0
 8004788:	d006      	beq.n	8004798 <_svfiprintf_r+0x14c>
 800478a:	2340      	movs	r3, #64	; 0x40
 800478c:	1b80      	subs	r0, r0, r6
 800478e:	4083      	lsls	r3, r0
 8004790:	6822      	ldr	r2, [r4, #0]
 8004792:	3501      	adds	r5, #1
 8004794:	4313      	orrs	r3, r2
 8004796:	6023      	str	r3, [r4, #0]
 8004798:	7829      	ldrb	r1, [r5, #0]
 800479a:	2206      	movs	r2, #6
 800479c:	4828      	ldr	r0, [pc, #160]	; (8004840 <_svfiprintf_r+0x1f4>)
 800479e:	1c6e      	adds	r6, r5, #1
 80047a0:	7621      	strb	r1, [r4, #24]
 80047a2:	f000 fe4b 	bl	800543c <memchr>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d03c      	beq.n	8004824 <_svfiprintf_r+0x1d8>
 80047aa:	4b26      	ldr	r3, [pc, #152]	; (8004844 <_svfiprintf_r+0x1f8>)
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d125      	bne.n	80047fc <_svfiprintf_r+0x1b0>
 80047b0:	2207      	movs	r2, #7
 80047b2:	9b07      	ldr	r3, [sp, #28]
 80047b4:	3307      	adds	r3, #7
 80047b6:	4393      	bics	r3, r2
 80047b8:	3308      	adds	r3, #8
 80047ba:	9307      	str	r3, [sp, #28]
 80047bc:	6963      	ldr	r3, [r4, #20]
 80047be:	9a04      	ldr	r2, [sp, #16]
 80047c0:	189b      	adds	r3, r3, r2
 80047c2:	6163      	str	r3, [r4, #20]
 80047c4:	e765      	b.n	8004692 <_svfiprintf_r+0x46>
 80047c6:	4343      	muls	r3, r0
 80047c8:	0035      	movs	r5, r6
 80047ca:	2101      	movs	r1, #1
 80047cc:	189b      	adds	r3, r3, r2
 80047ce:	e7a6      	b.n	800471e <_svfiprintf_r+0xd2>
 80047d0:	2301      	movs	r3, #1
 80047d2:	425b      	negs	r3, r3
 80047d4:	e7d0      	b.n	8004778 <_svfiprintf_r+0x12c>
 80047d6:	2300      	movs	r3, #0
 80047d8:	200a      	movs	r0, #10
 80047da:	001a      	movs	r2, r3
 80047dc:	3501      	adds	r5, #1
 80047de:	6063      	str	r3, [r4, #4]
 80047e0:	7829      	ldrb	r1, [r5, #0]
 80047e2:	1c6e      	adds	r6, r5, #1
 80047e4:	3930      	subs	r1, #48	; 0x30
 80047e6:	2909      	cmp	r1, #9
 80047e8:	d903      	bls.n	80047f2 <_svfiprintf_r+0x1a6>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0c5      	beq.n	800477a <_svfiprintf_r+0x12e>
 80047ee:	9209      	str	r2, [sp, #36]	; 0x24
 80047f0:	e7c3      	b.n	800477a <_svfiprintf_r+0x12e>
 80047f2:	4342      	muls	r2, r0
 80047f4:	0035      	movs	r5, r6
 80047f6:	2301      	movs	r3, #1
 80047f8:	1852      	adds	r2, r2, r1
 80047fa:	e7f1      	b.n	80047e0 <_svfiprintf_r+0x194>
 80047fc:	ab07      	add	r3, sp, #28
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	003a      	movs	r2, r7
 8004802:	0021      	movs	r1, r4
 8004804:	4b10      	ldr	r3, [pc, #64]	; (8004848 <_svfiprintf_r+0x1fc>)
 8004806:	9803      	ldr	r0, [sp, #12]
 8004808:	e000      	b.n	800480c <_svfiprintf_r+0x1c0>
 800480a:	bf00      	nop
 800480c:	9004      	str	r0, [sp, #16]
 800480e:	9b04      	ldr	r3, [sp, #16]
 8004810:	3301      	adds	r3, #1
 8004812:	d1d3      	bne.n	80047bc <_svfiprintf_r+0x170>
 8004814:	89bb      	ldrh	r3, [r7, #12]
 8004816:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004818:	065b      	lsls	r3, r3, #25
 800481a:	d400      	bmi.n	800481e <_svfiprintf_r+0x1d2>
 800481c:	e72d      	b.n	800467a <_svfiprintf_r+0x2e>
 800481e:	2001      	movs	r0, #1
 8004820:	4240      	negs	r0, r0
 8004822:	e72a      	b.n	800467a <_svfiprintf_r+0x2e>
 8004824:	ab07      	add	r3, sp, #28
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	003a      	movs	r2, r7
 800482a:	0021      	movs	r1, r4
 800482c:	4b06      	ldr	r3, [pc, #24]	; (8004848 <_svfiprintf_r+0x1fc>)
 800482e:	9803      	ldr	r0, [sp, #12]
 8004830:	f000 f9de 	bl	8004bf0 <_printf_i>
 8004834:	e7ea      	b.n	800480c <_svfiprintf_r+0x1c0>
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	08005bc6 	.word	0x08005bc6
 800483c:	08005bcc 	.word	0x08005bcc
 8004840:	08005bd0 	.word	0x08005bd0
 8004844:	00000000 	.word	0x00000000
 8004848:	08004589 	.word	0x08004589

0800484c <__sfputc_r>:
 800484c:	6893      	ldr	r3, [r2, #8]
 800484e:	b510      	push	{r4, lr}
 8004850:	3b01      	subs	r3, #1
 8004852:	6093      	str	r3, [r2, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	da04      	bge.n	8004862 <__sfputc_r+0x16>
 8004858:	6994      	ldr	r4, [r2, #24]
 800485a:	42a3      	cmp	r3, r4
 800485c:	db07      	blt.n	800486e <__sfputc_r+0x22>
 800485e:	290a      	cmp	r1, #10
 8004860:	d005      	beq.n	800486e <__sfputc_r+0x22>
 8004862:	6813      	ldr	r3, [r2, #0]
 8004864:	1c58      	adds	r0, r3, #1
 8004866:	6010      	str	r0, [r2, #0]
 8004868:	7019      	strb	r1, [r3, #0]
 800486a:	0008      	movs	r0, r1
 800486c:	bd10      	pop	{r4, pc}
 800486e:	f000 fad1 	bl	8004e14 <__swbuf_r>
 8004872:	0001      	movs	r1, r0
 8004874:	e7f9      	b.n	800486a <__sfputc_r+0x1e>

08004876 <__sfputs_r>:
 8004876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004878:	0006      	movs	r6, r0
 800487a:	000f      	movs	r7, r1
 800487c:	0014      	movs	r4, r2
 800487e:	18d5      	adds	r5, r2, r3
 8004880:	42ac      	cmp	r4, r5
 8004882:	d101      	bne.n	8004888 <__sfputs_r+0x12>
 8004884:	2000      	movs	r0, #0
 8004886:	e007      	b.n	8004898 <__sfputs_r+0x22>
 8004888:	7821      	ldrb	r1, [r4, #0]
 800488a:	003a      	movs	r2, r7
 800488c:	0030      	movs	r0, r6
 800488e:	f7ff ffdd 	bl	800484c <__sfputc_r>
 8004892:	3401      	adds	r4, #1
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d1f3      	bne.n	8004880 <__sfputs_r+0xa>
 8004898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800489c <_vfiprintf_r>:
 800489c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800489e:	b0a1      	sub	sp, #132	; 0x84
 80048a0:	0006      	movs	r6, r0
 80048a2:	000c      	movs	r4, r1
 80048a4:	001f      	movs	r7, r3
 80048a6:	9203      	str	r2, [sp, #12]
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d004      	beq.n	80048b6 <_vfiprintf_r+0x1a>
 80048ac:	6983      	ldr	r3, [r0, #24]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <_vfiprintf_r+0x1a>
 80048b2:	f000 fcb3 	bl	800521c <__sinit>
 80048b6:	4b8e      	ldr	r3, [pc, #568]	; (8004af0 <_vfiprintf_r+0x254>)
 80048b8:	429c      	cmp	r4, r3
 80048ba:	d11c      	bne.n	80048f6 <_vfiprintf_r+0x5a>
 80048bc:	6874      	ldr	r4, [r6, #4]
 80048be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048c0:	07db      	lsls	r3, r3, #31
 80048c2:	d405      	bmi.n	80048d0 <_vfiprintf_r+0x34>
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	059b      	lsls	r3, r3, #22
 80048c8:	d402      	bmi.n	80048d0 <_vfiprintf_r+0x34>
 80048ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048cc:	f000 fd47 	bl	800535e <__retarget_lock_acquire_recursive>
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	071b      	lsls	r3, r3, #28
 80048d4:	d502      	bpl.n	80048dc <_vfiprintf_r+0x40>
 80048d6:	6923      	ldr	r3, [r4, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d11d      	bne.n	8004918 <_vfiprintf_r+0x7c>
 80048dc:	0021      	movs	r1, r4
 80048de:	0030      	movs	r0, r6
 80048e0:	f000 faee 	bl	8004ec0 <__swsetup_r>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d017      	beq.n	8004918 <_vfiprintf_r+0x7c>
 80048e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048ea:	07db      	lsls	r3, r3, #31
 80048ec:	d50d      	bpl.n	800490a <_vfiprintf_r+0x6e>
 80048ee:	2001      	movs	r0, #1
 80048f0:	4240      	negs	r0, r0
 80048f2:	b021      	add	sp, #132	; 0x84
 80048f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048f6:	4b7f      	ldr	r3, [pc, #508]	; (8004af4 <_vfiprintf_r+0x258>)
 80048f8:	429c      	cmp	r4, r3
 80048fa:	d101      	bne.n	8004900 <_vfiprintf_r+0x64>
 80048fc:	68b4      	ldr	r4, [r6, #8]
 80048fe:	e7de      	b.n	80048be <_vfiprintf_r+0x22>
 8004900:	4b7d      	ldr	r3, [pc, #500]	; (8004af8 <_vfiprintf_r+0x25c>)
 8004902:	429c      	cmp	r4, r3
 8004904:	d1db      	bne.n	80048be <_vfiprintf_r+0x22>
 8004906:	68f4      	ldr	r4, [r6, #12]
 8004908:	e7d9      	b.n	80048be <_vfiprintf_r+0x22>
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	059b      	lsls	r3, r3, #22
 800490e:	d4ee      	bmi.n	80048ee <_vfiprintf_r+0x52>
 8004910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004912:	f000 fd25 	bl	8005360 <__retarget_lock_release_recursive>
 8004916:	e7ea      	b.n	80048ee <_vfiprintf_r+0x52>
 8004918:	2300      	movs	r3, #0
 800491a:	ad08      	add	r5, sp, #32
 800491c:	616b      	str	r3, [r5, #20]
 800491e:	3320      	adds	r3, #32
 8004920:	766b      	strb	r3, [r5, #25]
 8004922:	3310      	adds	r3, #16
 8004924:	76ab      	strb	r3, [r5, #26]
 8004926:	9707      	str	r7, [sp, #28]
 8004928:	9f03      	ldr	r7, [sp, #12]
 800492a:	783b      	ldrb	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <_vfiprintf_r+0x98>
 8004930:	2b25      	cmp	r3, #37	; 0x25
 8004932:	d14e      	bne.n	80049d2 <_vfiprintf_r+0x136>
 8004934:	9b03      	ldr	r3, [sp, #12]
 8004936:	1afb      	subs	r3, r7, r3
 8004938:	9305      	str	r3, [sp, #20]
 800493a:	9b03      	ldr	r3, [sp, #12]
 800493c:	429f      	cmp	r7, r3
 800493e:	d00d      	beq.n	800495c <_vfiprintf_r+0xc0>
 8004940:	9b05      	ldr	r3, [sp, #20]
 8004942:	0021      	movs	r1, r4
 8004944:	0030      	movs	r0, r6
 8004946:	9a03      	ldr	r2, [sp, #12]
 8004948:	f7ff ff95 	bl	8004876 <__sfputs_r>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d100      	bne.n	8004952 <_vfiprintf_r+0xb6>
 8004950:	e0b5      	b.n	8004abe <_vfiprintf_r+0x222>
 8004952:	696a      	ldr	r2, [r5, #20]
 8004954:	9b05      	ldr	r3, [sp, #20]
 8004956:	4694      	mov	ip, r2
 8004958:	4463      	add	r3, ip
 800495a:	616b      	str	r3, [r5, #20]
 800495c:	783b      	ldrb	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d100      	bne.n	8004964 <_vfiprintf_r+0xc8>
 8004962:	e0ac      	b.n	8004abe <_vfiprintf_r+0x222>
 8004964:	2201      	movs	r2, #1
 8004966:	1c7b      	adds	r3, r7, #1
 8004968:	9303      	str	r3, [sp, #12]
 800496a:	2300      	movs	r3, #0
 800496c:	4252      	negs	r2, r2
 800496e:	606a      	str	r2, [r5, #4]
 8004970:	a904      	add	r1, sp, #16
 8004972:	3254      	adds	r2, #84	; 0x54
 8004974:	1852      	adds	r2, r2, r1
 8004976:	602b      	str	r3, [r5, #0]
 8004978:	60eb      	str	r3, [r5, #12]
 800497a:	60ab      	str	r3, [r5, #8]
 800497c:	7013      	strb	r3, [r2, #0]
 800497e:	65ab      	str	r3, [r5, #88]	; 0x58
 8004980:	9b03      	ldr	r3, [sp, #12]
 8004982:	2205      	movs	r2, #5
 8004984:	7819      	ldrb	r1, [r3, #0]
 8004986:	485d      	ldr	r0, [pc, #372]	; (8004afc <_vfiprintf_r+0x260>)
 8004988:	f000 fd58 	bl	800543c <memchr>
 800498c:	9b03      	ldr	r3, [sp, #12]
 800498e:	1c5f      	adds	r7, r3, #1
 8004990:	2800      	cmp	r0, #0
 8004992:	d120      	bne.n	80049d6 <_vfiprintf_r+0x13a>
 8004994:	682a      	ldr	r2, [r5, #0]
 8004996:	06d3      	lsls	r3, r2, #27
 8004998:	d504      	bpl.n	80049a4 <_vfiprintf_r+0x108>
 800499a:	2353      	movs	r3, #83	; 0x53
 800499c:	a904      	add	r1, sp, #16
 800499e:	185b      	adds	r3, r3, r1
 80049a0:	2120      	movs	r1, #32
 80049a2:	7019      	strb	r1, [r3, #0]
 80049a4:	0713      	lsls	r3, r2, #28
 80049a6:	d504      	bpl.n	80049b2 <_vfiprintf_r+0x116>
 80049a8:	2353      	movs	r3, #83	; 0x53
 80049aa:	a904      	add	r1, sp, #16
 80049ac:	185b      	adds	r3, r3, r1
 80049ae:	212b      	movs	r1, #43	; 0x2b
 80049b0:	7019      	strb	r1, [r3, #0]
 80049b2:	9b03      	ldr	r3, [sp, #12]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b2a      	cmp	r3, #42	; 0x2a
 80049b8:	d016      	beq.n	80049e8 <_vfiprintf_r+0x14c>
 80049ba:	2100      	movs	r1, #0
 80049bc:	68eb      	ldr	r3, [r5, #12]
 80049be:	9f03      	ldr	r7, [sp, #12]
 80049c0:	783a      	ldrb	r2, [r7, #0]
 80049c2:	1c78      	adds	r0, r7, #1
 80049c4:	3a30      	subs	r2, #48	; 0x30
 80049c6:	4684      	mov	ip, r0
 80049c8:	2a09      	cmp	r2, #9
 80049ca:	d94f      	bls.n	8004a6c <_vfiprintf_r+0x1d0>
 80049cc:	2900      	cmp	r1, #0
 80049ce:	d111      	bne.n	80049f4 <_vfiprintf_r+0x158>
 80049d0:	e017      	b.n	8004a02 <_vfiprintf_r+0x166>
 80049d2:	3701      	adds	r7, #1
 80049d4:	e7a9      	b.n	800492a <_vfiprintf_r+0x8e>
 80049d6:	4b49      	ldr	r3, [pc, #292]	; (8004afc <_vfiprintf_r+0x260>)
 80049d8:	682a      	ldr	r2, [r5, #0]
 80049da:	1ac0      	subs	r0, r0, r3
 80049dc:	2301      	movs	r3, #1
 80049de:	4083      	lsls	r3, r0
 80049e0:	4313      	orrs	r3, r2
 80049e2:	602b      	str	r3, [r5, #0]
 80049e4:	9703      	str	r7, [sp, #12]
 80049e6:	e7cb      	b.n	8004980 <_vfiprintf_r+0xe4>
 80049e8:	9b07      	ldr	r3, [sp, #28]
 80049ea:	1d19      	adds	r1, r3, #4
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	9107      	str	r1, [sp, #28]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	db01      	blt.n	80049f8 <_vfiprintf_r+0x15c>
 80049f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80049f6:	e004      	b.n	8004a02 <_vfiprintf_r+0x166>
 80049f8:	425b      	negs	r3, r3
 80049fa:	60eb      	str	r3, [r5, #12]
 80049fc:	2302      	movs	r3, #2
 80049fe:	4313      	orrs	r3, r2
 8004a00:	602b      	str	r3, [r5, #0]
 8004a02:	783b      	ldrb	r3, [r7, #0]
 8004a04:	2b2e      	cmp	r3, #46	; 0x2e
 8004a06:	d10a      	bne.n	8004a1e <_vfiprintf_r+0x182>
 8004a08:	787b      	ldrb	r3, [r7, #1]
 8004a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a0c:	d137      	bne.n	8004a7e <_vfiprintf_r+0x1e2>
 8004a0e:	9b07      	ldr	r3, [sp, #28]
 8004a10:	3702      	adds	r7, #2
 8004a12:	1d1a      	adds	r2, r3, #4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	9207      	str	r2, [sp, #28]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	db2d      	blt.n	8004a78 <_vfiprintf_r+0x1dc>
 8004a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a1e:	2203      	movs	r2, #3
 8004a20:	7839      	ldrb	r1, [r7, #0]
 8004a22:	4837      	ldr	r0, [pc, #220]	; (8004b00 <_vfiprintf_r+0x264>)
 8004a24:	f000 fd0a 	bl	800543c <memchr>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d007      	beq.n	8004a3c <_vfiprintf_r+0x1a0>
 8004a2c:	4b34      	ldr	r3, [pc, #208]	; (8004b00 <_vfiprintf_r+0x264>)
 8004a2e:	682a      	ldr	r2, [r5, #0]
 8004a30:	1ac0      	subs	r0, r0, r3
 8004a32:	2340      	movs	r3, #64	; 0x40
 8004a34:	4083      	lsls	r3, r0
 8004a36:	4313      	orrs	r3, r2
 8004a38:	3701      	adds	r7, #1
 8004a3a:	602b      	str	r3, [r5, #0]
 8004a3c:	7839      	ldrb	r1, [r7, #0]
 8004a3e:	1c7b      	adds	r3, r7, #1
 8004a40:	2206      	movs	r2, #6
 8004a42:	4830      	ldr	r0, [pc, #192]	; (8004b04 <_vfiprintf_r+0x268>)
 8004a44:	9303      	str	r3, [sp, #12]
 8004a46:	7629      	strb	r1, [r5, #24]
 8004a48:	f000 fcf8 	bl	800543c <memchr>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d045      	beq.n	8004adc <_vfiprintf_r+0x240>
 8004a50:	4b2d      	ldr	r3, [pc, #180]	; (8004b08 <_vfiprintf_r+0x26c>)
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d127      	bne.n	8004aa6 <_vfiprintf_r+0x20a>
 8004a56:	2207      	movs	r2, #7
 8004a58:	9b07      	ldr	r3, [sp, #28]
 8004a5a:	3307      	adds	r3, #7
 8004a5c:	4393      	bics	r3, r2
 8004a5e:	3308      	adds	r3, #8
 8004a60:	9307      	str	r3, [sp, #28]
 8004a62:	696b      	ldr	r3, [r5, #20]
 8004a64:	9a04      	ldr	r2, [sp, #16]
 8004a66:	189b      	adds	r3, r3, r2
 8004a68:	616b      	str	r3, [r5, #20]
 8004a6a:	e75d      	b.n	8004928 <_vfiprintf_r+0x8c>
 8004a6c:	210a      	movs	r1, #10
 8004a6e:	434b      	muls	r3, r1
 8004a70:	4667      	mov	r7, ip
 8004a72:	189b      	adds	r3, r3, r2
 8004a74:	3909      	subs	r1, #9
 8004a76:	e7a3      	b.n	80049c0 <_vfiprintf_r+0x124>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	425b      	negs	r3, r3
 8004a7c:	e7ce      	b.n	8004a1c <_vfiprintf_r+0x180>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	001a      	movs	r2, r3
 8004a82:	3701      	adds	r7, #1
 8004a84:	606b      	str	r3, [r5, #4]
 8004a86:	7839      	ldrb	r1, [r7, #0]
 8004a88:	1c78      	adds	r0, r7, #1
 8004a8a:	3930      	subs	r1, #48	; 0x30
 8004a8c:	4684      	mov	ip, r0
 8004a8e:	2909      	cmp	r1, #9
 8004a90:	d903      	bls.n	8004a9a <_vfiprintf_r+0x1fe>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0c3      	beq.n	8004a1e <_vfiprintf_r+0x182>
 8004a96:	9209      	str	r2, [sp, #36]	; 0x24
 8004a98:	e7c1      	b.n	8004a1e <_vfiprintf_r+0x182>
 8004a9a:	230a      	movs	r3, #10
 8004a9c:	435a      	muls	r2, r3
 8004a9e:	4667      	mov	r7, ip
 8004aa0:	1852      	adds	r2, r2, r1
 8004aa2:	3b09      	subs	r3, #9
 8004aa4:	e7ef      	b.n	8004a86 <_vfiprintf_r+0x1ea>
 8004aa6:	ab07      	add	r3, sp, #28
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	0022      	movs	r2, r4
 8004aac:	0029      	movs	r1, r5
 8004aae:	0030      	movs	r0, r6
 8004ab0:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <_vfiprintf_r+0x270>)
 8004ab2:	e000      	b.n	8004ab6 <_vfiprintf_r+0x21a>
 8004ab4:	bf00      	nop
 8004ab6:	9004      	str	r0, [sp, #16]
 8004ab8:	9b04      	ldr	r3, [sp, #16]
 8004aba:	3301      	adds	r3, #1
 8004abc:	d1d1      	bne.n	8004a62 <_vfiprintf_r+0x1c6>
 8004abe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ac0:	07db      	lsls	r3, r3, #31
 8004ac2:	d405      	bmi.n	8004ad0 <_vfiprintf_r+0x234>
 8004ac4:	89a3      	ldrh	r3, [r4, #12]
 8004ac6:	059b      	lsls	r3, r3, #22
 8004ac8:	d402      	bmi.n	8004ad0 <_vfiprintf_r+0x234>
 8004aca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004acc:	f000 fc48 	bl	8005360 <__retarget_lock_release_recursive>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	065b      	lsls	r3, r3, #25
 8004ad4:	d500      	bpl.n	8004ad8 <_vfiprintf_r+0x23c>
 8004ad6:	e70a      	b.n	80048ee <_vfiprintf_r+0x52>
 8004ad8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004ada:	e70a      	b.n	80048f2 <_vfiprintf_r+0x56>
 8004adc:	ab07      	add	r3, sp, #28
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	0022      	movs	r2, r4
 8004ae2:	0029      	movs	r1, r5
 8004ae4:	0030      	movs	r0, r6
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <_vfiprintf_r+0x270>)
 8004ae8:	f000 f882 	bl	8004bf0 <_printf_i>
 8004aec:	e7e3      	b.n	8004ab6 <_vfiprintf_r+0x21a>
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	08005c1c 	.word	0x08005c1c
 8004af4:	08005c3c 	.word	0x08005c3c
 8004af8:	08005bfc 	.word	0x08005bfc
 8004afc:	08005bc6 	.word	0x08005bc6
 8004b00:	08005bcc 	.word	0x08005bcc
 8004b04:	08005bd0 	.word	0x08005bd0
 8004b08:	00000000 	.word	0x00000000
 8004b0c:	08004877 	.word	0x08004877

08004b10 <_printf_common>:
 8004b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b12:	0015      	movs	r5, r2
 8004b14:	9301      	str	r3, [sp, #4]
 8004b16:	688a      	ldr	r2, [r1, #8]
 8004b18:	690b      	ldr	r3, [r1, #16]
 8004b1a:	000c      	movs	r4, r1
 8004b1c:	9000      	str	r0, [sp, #0]
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	da00      	bge.n	8004b24 <_printf_common+0x14>
 8004b22:	0013      	movs	r3, r2
 8004b24:	0022      	movs	r2, r4
 8004b26:	602b      	str	r3, [r5, #0]
 8004b28:	3243      	adds	r2, #67	; 0x43
 8004b2a:	7812      	ldrb	r2, [r2, #0]
 8004b2c:	2a00      	cmp	r2, #0
 8004b2e:	d001      	beq.n	8004b34 <_printf_common+0x24>
 8004b30:	3301      	adds	r3, #1
 8004b32:	602b      	str	r3, [r5, #0]
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	069b      	lsls	r3, r3, #26
 8004b38:	d502      	bpl.n	8004b40 <_printf_common+0x30>
 8004b3a:	682b      	ldr	r3, [r5, #0]
 8004b3c:	3302      	adds	r3, #2
 8004b3e:	602b      	str	r3, [r5, #0]
 8004b40:	6822      	ldr	r2, [r4, #0]
 8004b42:	2306      	movs	r3, #6
 8004b44:	0017      	movs	r7, r2
 8004b46:	401f      	ands	r7, r3
 8004b48:	421a      	tst	r2, r3
 8004b4a:	d027      	beq.n	8004b9c <_printf_common+0x8c>
 8004b4c:	0023      	movs	r3, r4
 8004b4e:	3343      	adds	r3, #67	; 0x43
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	1e5a      	subs	r2, r3, #1
 8004b54:	4193      	sbcs	r3, r2
 8004b56:	6822      	ldr	r2, [r4, #0]
 8004b58:	0692      	lsls	r2, r2, #26
 8004b5a:	d430      	bmi.n	8004bbe <_printf_common+0xae>
 8004b5c:	0022      	movs	r2, r4
 8004b5e:	9901      	ldr	r1, [sp, #4]
 8004b60:	9800      	ldr	r0, [sp, #0]
 8004b62:	9e08      	ldr	r6, [sp, #32]
 8004b64:	3243      	adds	r2, #67	; 0x43
 8004b66:	47b0      	blx	r6
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d025      	beq.n	8004bb8 <_printf_common+0xa8>
 8004b6c:	2306      	movs	r3, #6
 8004b6e:	6820      	ldr	r0, [r4, #0]
 8004b70:	682a      	ldr	r2, [r5, #0]
 8004b72:	68e1      	ldr	r1, [r4, #12]
 8004b74:	2500      	movs	r5, #0
 8004b76:	4003      	ands	r3, r0
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d103      	bne.n	8004b84 <_printf_common+0x74>
 8004b7c:	1a8d      	subs	r5, r1, r2
 8004b7e:	43eb      	mvns	r3, r5
 8004b80:	17db      	asrs	r3, r3, #31
 8004b82:	401d      	ands	r5, r3
 8004b84:	68a3      	ldr	r3, [r4, #8]
 8004b86:	6922      	ldr	r2, [r4, #16]
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	dd01      	ble.n	8004b90 <_printf_common+0x80>
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	18ed      	adds	r5, r5, r3
 8004b90:	2700      	movs	r7, #0
 8004b92:	42bd      	cmp	r5, r7
 8004b94:	d120      	bne.n	8004bd8 <_printf_common+0xc8>
 8004b96:	2000      	movs	r0, #0
 8004b98:	e010      	b.n	8004bbc <_printf_common+0xac>
 8004b9a:	3701      	adds	r7, #1
 8004b9c:	68e3      	ldr	r3, [r4, #12]
 8004b9e:	682a      	ldr	r2, [r5, #0]
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	42bb      	cmp	r3, r7
 8004ba4:	ddd2      	ble.n	8004b4c <_printf_common+0x3c>
 8004ba6:	0022      	movs	r2, r4
 8004ba8:	2301      	movs	r3, #1
 8004baa:	9901      	ldr	r1, [sp, #4]
 8004bac:	9800      	ldr	r0, [sp, #0]
 8004bae:	9e08      	ldr	r6, [sp, #32]
 8004bb0:	3219      	adds	r2, #25
 8004bb2:	47b0      	blx	r6
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d1f0      	bne.n	8004b9a <_printf_common+0x8a>
 8004bb8:	2001      	movs	r0, #1
 8004bba:	4240      	negs	r0, r0
 8004bbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004bbe:	2030      	movs	r0, #48	; 0x30
 8004bc0:	18e1      	adds	r1, r4, r3
 8004bc2:	3143      	adds	r1, #67	; 0x43
 8004bc4:	7008      	strb	r0, [r1, #0]
 8004bc6:	0021      	movs	r1, r4
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	3145      	adds	r1, #69	; 0x45
 8004bcc:	7809      	ldrb	r1, [r1, #0]
 8004bce:	18a2      	adds	r2, r4, r2
 8004bd0:	3243      	adds	r2, #67	; 0x43
 8004bd2:	3302      	adds	r3, #2
 8004bd4:	7011      	strb	r1, [r2, #0]
 8004bd6:	e7c1      	b.n	8004b5c <_printf_common+0x4c>
 8004bd8:	0022      	movs	r2, r4
 8004bda:	2301      	movs	r3, #1
 8004bdc:	9901      	ldr	r1, [sp, #4]
 8004bde:	9800      	ldr	r0, [sp, #0]
 8004be0:	9e08      	ldr	r6, [sp, #32]
 8004be2:	321a      	adds	r2, #26
 8004be4:	47b0      	blx	r6
 8004be6:	1c43      	adds	r3, r0, #1
 8004be8:	d0e6      	beq.n	8004bb8 <_printf_common+0xa8>
 8004bea:	3701      	adds	r7, #1
 8004bec:	e7d1      	b.n	8004b92 <_printf_common+0x82>
	...

08004bf0 <_printf_i>:
 8004bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf2:	b08b      	sub	sp, #44	; 0x2c
 8004bf4:	9206      	str	r2, [sp, #24]
 8004bf6:	000a      	movs	r2, r1
 8004bf8:	3243      	adds	r2, #67	; 0x43
 8004bfa:	9307      	str	r3, [sp, #28]
 8004bfc:	9005      	str	r0, [sp, #20]
 8004bfe:	9204      	str	r2, [sp, #16]
 8004c00:	7e0a      	ldrb	r2, [r1, #24]
 8004c02:	000c      	movs	r4, r1
 8004c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c06:	2a78      	cmp	r2, #120	; 0x78
 8004c08:	d807      	bhi.n	8004c1a <_printf_i+0x2a>
 8004c0a:	2a62      	cmp	r2, #98	; 0x62
 8004c0c:	d809      	bhi.n	8004c22 <_printf_i+0x32>
 8004c0e:	2a00      	cmp	r2, #0
 8004c10:	d100      	bne.n	8004c14 <_printf_i+0x24>
 8004c12:	e0c1      	b.n	8004d98 <_printf_i+0x1a8>
 8004c14:	2a58      	cmp	r2, #88	; 0x58
 8004c16:	d100      	bne.n	8004c1a <_printf_i+0x2a>
 8004c18:	e08c      	b.n	8004d34 <_printf_i+0x144>
 8004c1a:	0026      	movs	r6, r4
 8004c1c:	3642      	adds	r6, #66	; 0x42
 8004c1e:	7032      	strb	r2, [r6, #0]
 8004c20:	e022      	b.n	8004c68 <_printf_i+0x78>
 8004c22:	0010      	movs	r0, r2
 8004c24:	3863      	subs	r0, #99	; 0x63
 8004c26:	2815      	cmp	r0, #21
 8004c28:	d8f7      	bhi.n	8004c1a <_printf_i+0x2a>
 8004c2a:	f7fb fa7f 	bl	800012c <__gnu_thumb1_case_shi>
 8004c2e:	0016      	.short	0x0016
 8004c30:	fff6001f 	.word	0xfff6001f
 8004c34:	fff6fff6 	.word	0xfff6fff6
 8004c38:	001ffff6 	.word	0x001ffff6
 8004c3c:	fff6fff6 	.word	0xfff6fff6
 8004c40:	fff6fff6 	.word	0xfff6fff6
 8004c44:	003600a8 	.word	0x003600a8
 8004c48:	fff6009a 	.word	0xfff6009a
 8004c4c:	00b9fff6 	.word	0x00b9fff6
 8004c50:	0036fff6 	.word	0x0036fff6
 8004c54:	fff6fff6 	.word	0xfff6fff6
 8004c58:	009e      	.short	0x009e
 8004c5a:	0026      	movs	r6, r4
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	3642      	adds	r6, #66	; 0x42
 8004c60:	1d11      	adds	r1, r2, #4
 8004c62:	6019      	str	r1, [r3, #0]
 8004c64:	6813      	ldr	r3, [r2, #0]
 8004c66:	7033      	strb	r3, [r6, #0]
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0a7      	b.n	8004dbc <_printf_i+0x1cc>
 8004c6c:	6808      	ldr	r0, [r1, #0]
 8004c6e:	6819      	ldr	r1, [r3, #0]
 8004c70:	1d0a      	adds	r2, r1, #4
 8004c72:	0605      	lsls	r5, r0, #24
 8004c74:	d50b      	bpl.n	8004c8e <_printf_i+0x9e>
 8004c76:	680d      	ldr	r5, [r1, #0]
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	da03      	bge.n	8004c86 <_printf_i+0x96>
 8004c7e:	232d      	movs	r3, #45	; 0x2d
 8004c80:	9a04      	ldr	r2, [sp, #16]
 8004c82:	426d      	negs	r5, r5
 8004c84:	7013      	strb	r3, [r2, #0]
 8004c86:	4b61      	ldr	r3, [pc, #388]	; (8004e0c <_printf_i+0x21c>)
 8004c88:	270a      	movs	r7, #10
 8004c8a:	9303      	str	r3, [sp, #12]
 8004c8c:	e01b      	b.n	8004cc6 <_printf_i+0xd6>
 8004c8e:	680d      	ldr	r5, [r1, #0]
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	0641      	lsls	r1, r0, #25
 8004c94:	d5f1      	bpl.n	8004c7a <_printf_i+0x8a>
 8004c96:	b22d      	sxth	r5, r5
 8004c98:	e7ef      	b.n	8004c7a <_printf_i+0x8a>
 8004c9a:	680d      	ldr	r5, [r1, #0]
 8004c9c:	6819      	ldr	r1, [r3, #0]
 8004c9e:	1d08      	adds	r0, r1, #4
 8004ca0:	6018      	str	r0, [r3, #0]
 8004ca2:	062e      	lsls	r6, r5, #24
 8004ca4:	d501      	bpl.n	8004caa <_printf_i+0xba>
 8004ca6:	680d      	ldr	r5, [r1, #0]
 8004ca8:	e003      	b.n	8004cb2 <_printf_i+0xc2>
 8004caa:	066d      	lsls	r5, r5, #25
 8004cac:	d5fb      	bpl.n	8004ca6 <_printf_i+0xb6>
 8004cae:	680d      	ldr	r5, [r1, #0]
 8004cb0:	b2ad      	uxth	r5, r5
 8004cb2:	4b56      	ldr	r3, [pc, #344]	; (8004e0c <_printf_i+0x21c>)
 8004cb4:	2708      	movs	r7, #8
 8004cb6:	9303      	str	r3, [sp, #12]
 8004cb8:	2a6f      	cmp	r2, #111	; 0x6f
 8004cba:	d000      	beq.n	8004cbe <_printf_i+0xce>
 8004cbc:	3702      	adds	r7, #2
 8004cbe:	0023      	movs	r3, r4
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	3343      	adds	r3, #67	; 0x43
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	6863      	ldr	r3, [r4, #4]
 8004cc8:	60a3      	str	r3, [r4, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	db03      	blt.n	8004cd6 <_printf_i+0xe6>
 8004cce:	2204      	movs	r2, #4
 8004cd0:	6821      	ldr	r1, [r4, #0]
 8004cd2:	4391      	bics	r1, r2
 8004cd4:	6021      	str	r1, [r4, #0]
 8004cd6:	2d00      	cmp	r5, #0
 8004cd8:	d102      	bne.n	8004ce0 <_printf_i+0xf0>
 8004cda:	9e04      	ldr	r6, [sp, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00c      	beq.n	8004cfa <_printf_i+0x10a>
 8004ce0:	9e04      	ldr	r6, [sp, #16]
 8004ce2:	0028      	movs	r0, r5
 8004ce4:	0039      	movs	r1, r7
 8004ce6:	f7fb fab1 	bl	800024c <__aeabi_uidivmod>
 8004cea:	9b03      	ldr	r3, [sp, #12]
 8004cec:	3e01      	subs	r6, #1
 8004cee:	5c5b      	ldrb	r3, [r3, r1]
 8004cf0:	7033      	strb	r3, [r6, #0]
 8004cf2:	002b      	movs	r3, r5
 8004cf4:	0005      	movs	r5, r0
 8004cf6:	429f      	cmp	r7, r3
 8004cf8:	d9f3      	bls.n	8004ce2 <_printf_i+0xf2>
 8004cfa:	2f08      	cmp	r7, #8
 8004cfc:	d109      	bne.n	8004d12 <_printf_i+0x122>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	07db      	lsls	r3, r3, #31
 8004d02:	d506      	bpl.n	8004d12 <_printf_i+0x122>
 8004d04:	6863      	ldr	r3, [r4, #4]
 8004d06:	6922      	ldr	r2, [r4, #16]
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	dc02      	bgt.n	8004d12 <_printf_i+0x122>
 8004d0c:	2330      	movs	r3, #48	; 0x30
 8004d0e:	3e01      	subs	r6, #1
 8004d10:	7033      	strb	r3, [r6, #0]
 8004d12:	9b04      	ldr	r3, [sp, #16]
 8004d14:	1b9b      	subs	r3, r3, r6
 8004d16:	6123      	str	r3, [r4, #16]
 8004d18:	9b07      	ldr	r3, [sp, #28]
 8004d1a:	0021      	movs	r1, r4
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	9805      	ldr	r0, [sp, #20]
 8004d20:	9b06      	ldr	r3, [sp, #24]
 8004d22:	aa09      	add	r2, sp, #36	; 0x24
 8004d24:	f7ff fef4 	bl	8004b10 <_printf_common>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d14c      	bne.n	8004dc6 <_printf_i+0x1d6>
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	4240      	negs	r0, r0
 8004d30:	b00b      	add	sp, #44	; 0x2c
 8004d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d34:	3145      	adds	r1, #69	; 0x45
 8004d36:	700a      	strb	r2, [r1, #0]
 8004d38:	4a34      	ldr	r2, [pc, #208]	; (8004e0c <_printf_i+0x21c>)
 8004d3a:	9203      	str	r2, [sp, #12]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	6821      	ldr	r1, [r4, #0]
 8004d40:	ca20      	ldmia	r2!, {r5}
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	0608      	lsls	r0, r1, #24
 8004d46:	d516      	bpl.n	8004d76 <_printf_i+0x186>
 8004d48:	07cb      	lsls	r3, r1, #31
 8004d4a:	d502      	bpl.n	8004d52 <_printf_i+0x162>
 8004d4c:	2320      	movs	r3, #32
 8004d4e:	4319      	orrs	r1, r3
 8004d50:	6021      	str	r1, [r4, #0]
 8004d52:	2710      	movs	r7, #16
 8004d54:	2d00      	cmp	r5, #0
 8004d56:	d1b2      	bne.n	8004cbe <_printf_i+0xce>
 8004d58:	2320      	movs	r3, #32
 8004d5a:	6822      	ldr	r2, [r4, #0]
 8004d5c:	439a      	bics	r2, r3
 8004d5e:	6022      	str	r2, [r4, #0]
 8004d60:	e7ad      	b.n	8004cbe <_printf_i+0xce>
 8004d62:	2220      	movs	r2, #32
 8004d64:	6809      	ldr	r1, [r1, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	6022      	str	r2, [r4, #0]
 8004d6a:	0022      	movs	r2, r4
 8004d6c:	2178      	movs	r1, #120	; 0x78
 8004d6e:	3245      	adds	r2, #69	; 0x45
 8004d70:	7011      	strb	r1, [r2, #0]
 8004d72:	4a27      	ldr	r2, [pc, #156]	; (8004e10 <_printf_i+0x220>)
 8004d74:	e7e1      	b.n	8004d3a <_printf_i+0x14a>
 8004d76:	0648      	lsls	r0, r1, #25
 8004d78:	d5e6      	bpl.n	8004d48 <_printf_i+0x158>
 8004d7a:	b2ad      	uxth	r5, r5
 8004d7c:	e7e4      	b.n	8004d48 <_printf_i+0x158>
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	680d      	ldr	r5, [r1, #0]
 8004d82:	1d10      	adds	r0, r2, #4
 8004d84:	6949      	ldr	r1, [r1, #20]
 8004d86:	6018      	str	r0, [r3, #0]
 8004d88:	6813      	ldr	r3, [r2, #0]
 8004d8a:	062e      	lsls	r6, r5, #24
 8004d8c:	d501      	bpl.n	8004d92 <_printf_i+0x1a2>
 8004d8e:	6019      	str	r1, [r3, #0]
 8004d90:	e002      	b.n	8004d98 <_printf_i+0x1a8>
 8004d92:	066d      	lsls	r5, r5, #25
 8004d94:	d5fb      	bpl.n	8004d8e <_printf_i+0x19e>
 8004d96:	8019      	strh	r1, [r3, #0]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9e04      	ldr	r6, [sp, #16]
 8004d9c:	6123      	str	r3, [r4, #16]
 8004d9e:	e7bb      	b.n	8004d18 <_printf_i+0x128>
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	1d11      	adds	r1, r2, #4
 8004da4:	6019      	str	r1, [r3, #0]
 8004da6:	6816      	ldr	r6, [r2, #0]
 8004da8:	2100      	movs	r1, #0
 8004daa:	0030      	movs	r0, r6
 8004dac:	6862      	ldr	r2, [r4, #4]
 8004dae:	f000 fb45 	bl	800543c <memchr>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d001      	beq.n	8004dba <_printf_i+0x1ca>
 8004db6:	1b80      	subs	r0, r0, r6
 8004db8:	6060      	str	r0, [r4, #4]
 8004dba:	6863      	ldr	r3, [r4, #4]
 8004dbc:	6123      	str	r3, [r4, #16]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	9a04      	ldr	r2, [sp, #16]
 8004dc2:	7013      	strb	r3, [r2, #0]
 8004dc4:	e7a8      	b.n	8004d18 <_printf_i+0x128>
 8004dc6:	6923      	ldr	r3, [r4, #16]
 8004dc8:	0032      	movs	r2, r6
 8004dca:	9906      	ldr	r1, [sp, #24]
 8004dcc:	9805      	ldr	r0, [sp, #20]
 8004dce:	9d07      	ldr	r5, [sp, #28]
 8004dd0:	47a8      	blx	r5
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	d0aa      	beq.n	8004d2c <_printf_i+0x13c>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	079b      	lsls	r3, r3, #30
 8004dda:	d415      	bmi.n	8004e08 <_printf_i+0x218>
 8004ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dde:	68e0      	ldr	r0, [r4, #12]
 8004de0:	4298      	cmp	r0, r3
 8004de2:	daa5      	bge.n	8004d30 <_printf_i+0x140>
 8004de4:	0018      	movs	r0, r3
 8004de6:	e7a3      	b.n	8004d30 <_printf_i+0x140>
 8004de8:	0022      	movs	r2, r4
 8004dea:	2301      	movs	r3, #1
 8004dec:	9906      	ldr	r1, [sp, #24]
 8004dee:	9805      	ldr	r0, [sp, #20]
 8004df0:	9e07      	ldr	r6, [sp, #28]
 8004df2:	3219      	adds	r2, #25
 8004df4:	47b0      	blx	r6
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	d098      	beq.n	8004d2c <_printf_i+0x13c>
 8004dfa:	3501      	adds	r5, #1
 8004dfc:	68e3      	ldr	r3, [r4, #12]
 8004dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e00:	1a9b      	subs	r3, r3, r2
 8004e02:	42ab      	cmp	r3, r5
 8004e04:	dcf0      	bgt.n	8004de8 <_printf_i+0x1f8>
 8004e06:	e7e9      	b.n	8004ddc <_printf_i+0x1ec>
 8004e08:	2500      	movs	r5, #0
 8004e0a:	e7f7      	b.n	8004dfc <_printf_i+0x20c>
 8004e0c:	08005bd7 	.word	0x08005bd7
 8004e10:	08005be8 	.word	0x08005be8

08004e14 <__swbuf_r>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	0005      	movs	r5, r0
 8004e18:	000e      	movs	r6, r1
 8004e1a:	0014      	movs	r4, r2
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d004      	beq.n	8004e2a <__swbuf_r+0x16>
 8004e20:	6983      	ldr	r3, [r0, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <__swbuf_r+0x16>
 8004e26:	f000 f9f9 	bl	800521c <__sinit>
 8004e2a:	4b22      	ldr	r3, [pc, #136]	; (8004eb4 <__swbuf_r+0xa0>)
 8004e2c:	429c      	cmp	r4, r3
 8004e2e:	d12e      	bne.n	8004e8e <__swbuf_r+0x7a>
 8004e30:	686c      	ldr	r4, [r5, #4]
 8004e32:	69a3      	ldr	r3, [r4, #24]
 8004e34:	60a3      	str	r3, [r4, #8]
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	071b      	lsls	r3, r3, #28
 8004e3a:	d532      	bpl.n	8004ea2 <__swbuf_r+0x8e>
 8004e3c:	6923      	ldr	r3, [r4, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d02f      	beq.n	8004ea2 <__swbuf_r+0x8e>
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	6922      	ldr	r2, [r4, #16]
 8004e46:	b2f7      	uxtb	r7, r6
 8004e48:	1a98      	subs	r0, r3, r2
 8004e4a:	6963      	ldr	r3, [r4, #20]
 8004e4c:	b2f6      	uxtb	r6, r6
 8004e4e:	4283      	cmp	r3, r0
 8004e50:	dc05      	bgt.n	8004e5e <__swbuf_r+0x4a>
 8004e52:	0021      	movs	r1, r4
 8004e54:	0028      	movs	r0, r5
 8004e56:	f000 f93f 	bl	80050d8 <_fflush_r>
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d127      	bne.n	8004eae <__swbuf_r+0x9a>
 8004e5e:	68a3      	ldr	r3, [r4, #8]
 8004e60:	3001      	adds	r0, #1
 8004e62:	3b01      	subs	r3, #1
 8004e64:	60a3      	str	r3, [r4, #8]
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	6022      	str	r2, [r4, #0]
 8004e6c:	701f      	strb	r7, [r3, #0]
 8004e6e:	6963      	ldr	r3, [r4, #20]
 8004e70:	4283      	cmp	r3, r0
 8004e72:	d004      	beq.n	8004e7e <__swbuf_r+0x6a>
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	07db      	lsls	r3, r3, #31
 8004e78:	d507      	bpl.n	8004e8a <__swbuf_r+0x76>
 8004e7a:	2e0a      	cmp	r6, #10
 8004e7c:	d105      	bne.n	8004e8a <__swbuf_r+0x76>
 8004e7e:	0021      	movs	r1, r4
 8004e80:	0028      	movs	r0, r5
 8004e82:	f000 f929 	bl	80050d8 <_fflush_r>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d111      	bne.n	8004eae <__swbuf_r+0x9a>
 8004e8a:	0030      	movs	r0, r6
 8004e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <__swbuf_r+0xa4>)
 8004e90:	429c      	cmp	r4, r3
 8004e92:	d101      	bne.n	8004e98 <__swbuf_r+0x84>
 8004e94:	68ac      	ldr	r4, [r5, #8]
 8004e96:	e7cc      	b.n	8004e32 <__swbuf_r+0x1e>
 8004e98:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <__swbuf_r+0xa8>)
 8004e9a:	429c      	cmp	r4, r3
 8004e9c:	d1c9      	bne.n	8004e32 <__swbuf_r+0x1e>
 8004e9e:	68ec      	ldr	r4, [r5, #12]
 8004ea0:	e7c7      	b.n	8004e32 <__swbuf_r+0x1e>
 8004ea2:	0021      	movs	r1, r4
 8004ea4:	0028      	movs	r0, r5
 8004ea6:	f000 f80b 	bl	8004ec0 <__swsetup_r>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d0c9      	beq.n	8004e42 <__swbuf_r+0x2e>
 8004eae:	2601      	movs	r6, #1
 8004eb0:	4276      	negs	r6, r6
 8004eb2:	e7ea      	b.n	8004e8a <__swbuf_r+0x76>
 8004eb4:	08005c1c 	.word	0x08005c1c
 8004eb8:	08005c3c 	.word	0x08005c3c
 8004ebc:	08005bfc 	.word	0x08005bfc

08004ec0 <__swsetup_r>:
 8004ec0:	4b37      	ldr	r3, [pc, #220]	; (8004fa0 <__swsetup_r+0xe0>)
 8004ec2:	b570      	push	{r4, r5, r6, lr}
 8004ec4:	681d      	ldr	r5, [r3, #0]
 8004ec6:	0006      	movs	r6, r0
 8004ec8:	000c      	movs	r4, r1
 8004eca:	2d00      	cmp	r5, #0
 8004ecc:	d005      	beq.n	8004eda <__swsetup_r+0x1a>
 8004ece:	69ab      	ldr	r3, [r5, #24]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <__swsetup_r+0x1a>
 8004ed4:	0028      	movs	r0, r5
 8004ed6:	f000 f9a1 	bl	800521c <__sinit>
 8004eda:	4b32      	ldr	r3, [pc, #200]	; (8004fa4 <__swsetup_r+0xe4>)
 8004edc:	429c      	cmp	r4, r3
 8004ede:	d10f      	bne.n	8004f00 <__swsetup_r+0x40>
 8004ee0:	686c      	ldr	r4, [r5, #4]
 8004ee2:	230c      	movs	r3, #12
 8004ee4:	5ee2      	ldrsh	r2, [r4, r3]
 8004ee6:	b293      	uxth	r3, r2
 8004ee8:	0711      	lsls	r1, r2, #28
 8004eea:	d42d      	bmi.n	8004f48 <__swsetup_r+0x88>
 8004eec:	06d9      	lsls	r1, r3, #27
 8004eee:	d411      	bmi.n	8004f14 <__swsetup_r+0x54>
 8004ef0:	2309      	movs	r3, #9
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	6033      	str	r3, [r6, #0]
 8004ef6:	3337      	adds	r3, #55	; 0x37
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	81a3      	strh	r3, [r4, #12]
 8004efc:	4240      	negs	r0, r0
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	4b29      	ldr	r3, [pc, #164]	; (8004fa8 <__swsetup_r+0xe8>)
 8004f02:	429c      	cmp	r4, r3
 8004f04:	d101      	bne.n	8004f0a <__swsetup_r+0x4a>
 8004f06:	68ac      	ldr	r4, [r5, #8]
 8004f08:	e7eb      	b.n	8004ee2 <__swsetup_r+0x22>
 8004f0a:	4b28      	ldr	r3, [pc, #160]	; (8004fac <__swsetup_r+0xec>)
 8004f0c:	429c      	cmp	r4, r3
 8004f0e:	d1e8      	bne.n	8004ee2 <__swsetup_r+0x22>
 8004f10:	68ec      	ldr	r4, [r5, #12]
 8004f12:	e7e6      	b.n	8004ee2 <__swsetup_r+0x22>
 8004f14:	075b      	lsls	r3, r3, #29
 8004f16:	d513      	bpl.n	8004f40 <__swsetup_r+0x80>
 8004f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f1a:	2900      	cmp	r1, #0
 8004f1c:	d008      	beq.n	8004f30 <__swsetup_r+0x70>
 8004f1e:	0023      	movs	r3, r4
 8004f20:	3344      	adds	r3, #68	; 0x44
 8004f22:	4299      	cmp	r1, r3
 8004f24:	d002      	beq.n	8004f2c <__swsetup_r+0x6c>
 8004f26:	0030      	movs	r0, r6
 8004f28:	f7ff f942 	bl	80041b0 <_free_r>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	6363      	str	r3, [r4, #52]	; 0x34
 8004f30:	2224      	movs	r2, #36	; 0x24
 8004f32:	89a3      	ldrh	r3, [r4, #12]
 8004f34:	4393      	bics	r3, r2
 8004f36:	81a3      	strh	r3, [r4, #12]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	6063      	str	r3, [r4, #4]
 8004f3c:	6923      	ldr	r3, [r4, #16]
 8004f3e:	6023      	str	r3, [r4, #0]
 8004f40:	2308      	movs	r3, #8
 8004f42:	89a2      	ldrh	r2, [r4, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	81a3      	strh	r3, [r4, #12]
 8004f48:	6923      	ldr	r3, [r4, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <__swsetup_r+0xa6>
 8004f4e:	21a0      	movs	r1, #160	; 0xa0
 8004f50:	2280      	movs	r2, #128	; 0x80
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	0089      	lsls	r1, r1, #2
 8004f56:	0092      	lsls	r2, r2, #2
 8004f58:	400b      	ands	r3, r1
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d003      	beq.n	8004f66 <__swsetup_r+0xa6>
 8004f5e:	0021      	movs	r1, r4
 8004f60:	0030      	movs	r0, r6
 8004f62:	f000 fa27 	bl	80053b4 <__smakebuf_r>
 8004f66:	220c      	movs	r2, #12
 8004f68:	5ea3      	ldrsh	r3, [r4, r2]
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	001a      	movs	r2, r3
 8004f6e:	b299      	uxth	r1, r3
 8004f70:	4002      	ands	r2, r0
 8004f72:	4203      	tst	r3, r0
 8004f74:	d00f      	beq.n	8004f96 <__swsetup_r+0xd6>
 8004f76:	2200      	movs	r2, #0
 8004f78:	60a2      	str	r2, [r4, #8]
 8004f7a:	6962      	ldr	r2, [r4, #20]
 8004f7c:	4252      	negs	r2, r2
 8004f7e:	61a2      	str	r2, [r4, #24]
 8004f80:	2000      	movs	r0, #0
 8004f82:	6922      	ldr	r2, [r4, #16]
 8004f84:	4282      	cmp	r2, r0
 8004f86:	d1ba      	bne.n	8004efe <__swsetup_r+0x3e>
 8004f88:	060a      	lsls	r2, r1, #24
 8004f8a:	d5b8      	bpl.n	8004efe <__swsetup_r+0x3e>
 8004f8c:	2240      	movs	r2, #64	; 0x40
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	81a3      	strh	r3, [r4, #12]
 8004f92:	3801      	subs	r0, #1
 8004f94:	e7b3      	b.n	8004efe <__swsetup_r+0x3e>
 8004f96:	0788      	lsls	r0, r1, #30
 8004f98:	d400      	bmi.n	8004f9c <__swsetup_r+0xdc>
 8004f9a:	6962      	ldr	r2, [r4, #20]
 8004f9c:	60a2      	str	r2, [r4, #8]
 8004f9e:	e7ef      	b.n	8004f80 <__swsetup_r+0xc0>
 8004fa0:	20000048 	.word	0x20000048
 8004fa4:	08005c1c 	.word	0x08005c1c
 8004fa8:	08005c3c 	.word	0x08005c3c
 8004fac:	08005bfc 	.word	0x08005bfc

08004fb0 <abort>:
 8004fb0:	2006      	movs	r0, #6
 8004fb2:	b510      	push	{r4, lr}
 8004fb4:	f000 faba 	bl	800552c <raise>
 8004fb8:	2001      	movs	r0, #1
 8004fba:	f7fd f819 	bl	8001ff0 <_exit>
	...

08004fc0 <__sflush_r>:
 8004fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fc2:	898b      	ldrh	r3, [r1, #12]
 8004fc4:	0005      	movs	r5, r0
 8004fc6:	000c      	movs	r4, r1
 8004fc8:	071a      	lsls	r2, r3, #28
 8004fca:	d45f      	bmi.n	800508c <__sflush_r+0xcc>
 8004fcc:	684a      	ldr	r2, [r1, #4]
 8004fce:	2a00      	cmp	r2, #0
 8004fd0:	dc04      	bgt.n	8004fdc <__sflush_r+0x1c>
 8004fd2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004fd4:	2a00      	cmp	r2, #0
 8004fd6:	dc01      	bgt.n	8004fdc <__sflush_r+0x1c>
 8004fd8:	2000      	movs	r0, #0
 8004fda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fdc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004fde:	2f00      	cmp	r7, #0
 8004fe0:	d0fa      	beq.n	8004fd8 <__sflush_r+0x18>
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2180      	movs	r1, #128	; 0x80
 8004fe6:	682e      	ldr	r6, [r5, #0]
 8004fe8:	602a      	str	r2, [r5, #0]
 8004fea:	001a      	movs	r2, r3
 8004fec:	0149      	lsls	r1, r1, #5
 8004fee:	400a      	ands	r2, r1
 8004ff0:	420b      	tst	r3, r1
 8004ff2:	d034      	beq.n	800505e <__sflush_r+0x9e>
 8004ff4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	075b      	lsls	r3, r3, #29
 8004ffa:	d506      	bpl.n	800500a <__sflush_r+0x4a>
 8004ffc:	6863      	ldr	r3, [r4, #4]
 8004ffe:	1ac0      	subs	r0, r0, r3
 8005000:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <__sflush_r+0x4a>
 8005006:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005008:	1ac0      	subs	r0, r0, r3
 800500a:	0002      	movs	r2, r0
 800500c:	6a21      	ldr	r1, [r4, #32]
 800500e:	2300      	movs	r3, #0
 8005010:	0028      	movs	r0, r5
 8005012:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005014:	47b8      	blx	r7
 8005016:	89a1      	ldrh	r1, [r4, #12]
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d106      	bne.n	800502a <__sflush_r+0x6a>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	2b1d      	cmp	r3, #29
 8005020:	d831      	bhi.n	8005086 <__sflush_r+0xc6>
 8005022:	4a2c      	ldr	r2, [pc, #176]	; (80050d4 <__sflush_r+0x114>)
 8005024:	40da      	lsrs	r2, r3
 8005026:	07d3      	lsls	r3, r2, #31
 8005028:	d52d      	bpl.n	8005086 <__sflush_r+0xc6>
 800502a:	2300      	movs	r3, #0
 800502c:	6063      	str	r3, [r4, #4]
 800502e:	6923      	ldr	r3, [r4, #16]
 8005030:	6023      	str	r3, [r4, #0]
 8005032:	04cb      	lsls	r3, r1, #19
 8005034:	d505      	bpl.n	8005042 <__sflush_r+0x82>
 8005036:	1c43      	adds	r3, r0, #1
 8005038:	d102      	bne.n	8005040 <__sflush_r+0x80>
 800503a:	682b      	ldr	r3, [r5, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d100      	bne.n	8005042 <__sflush_r+0x82>
 8005040:	6560      	str	r0, [r4, #84]	; 0x54
 8005042:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005044:	602e      	str	r6, [r5, #0]
 8005046:	2900      	cmp	r1, #0
 8005048:	d0c6      	beq.n	8004fd8 <__sflush_r+0x18>
 800504a:	0023      	movs	r3, r4
 800504c:	3344      	adds	r3, #68	; 0x44
 800504e:	4299      	cmp	r1, r3
 8005050:	d002      	beq.n	8005058 <__sflush_r+0x98>
 8005052:	0028      	movs	r0, r5
 8005054:	f7ff f8ac 	bl	80041b0 <_free_r>
 8005058:	2000      	movs	r0, #0
 800505a:	6360      	str	r0, [r4, #52]	; 0x34
 800505c:	e7bd      	b.n	8004fda <__sflush_r+0x1a>
 800505e:	2301      	movs	r3, #1
 8005060:	0028      	movs	r0, r5
 8005062:	6a21      	ldr	r1, [r4, #32]
 8005064:	47b8      	blx	r7
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	d1c5      	bne.n	8004ff6 <__sflush_r+0x36>
 800506a:	682b      	ldr	r3, [r5, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0c2      	beq.n	8004ff6 <__sflush_r+0x36>
 8005070:	2b1d      	cmp	r3, #29
 8005072:	d001      	beq.n	8005078 <__sflush_r+0xb8>
 8005074:	2b16      	cmp	r3, #22
 8005076:	d101      	bne.n	800507c <__sflush_r+0xbc>
 8005078:	602e      	str	r6, [r5, #0]
 800507a:	e7ad      	b.n	8004fd8 <__sflush_r+0x18>
 800507c:	2340      	movs	r3, #64	; 0x40
 800507e:	89a2      	ldrh	r2, [r4, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	81a3      	strh	r3, [r4, #12]
 8005084:	e7a9      	b.n	8004fda <__sflush_r+0x1a>
 8005086:	2340      	movs	r3, #64	; 0x40
 8005088:	430b      	orrs	r3, r1
 800508a:	e7fa      	b.n	8005082 <__sflush_r+0xc2>
 800508c:	690f      	ldr	r7, [r1, #16]
 800508e:	2f00      	cmp	r7, #0
 8005090:	d0a2      	beq.n	8004fd8 <__sflush_r+0x18>
 8005092:	680a      	ldr	r2, [r1, #0]
 8005094:	600f      	str	r7, [r1, #0]
 8005096:	1bd2      	subs	r2, r2, r7
 8005098:	9201      	str	r2, [sp, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	079b      	lsls	r3, r3, #30
 800509e:	d100      	bne.n	80050a2 <__sflush_r+0xe2>
 80050a0:	694a      	ldr	r2, [r1, #20]
 80050a2:	60a2      	str	r2, [r4, #8]
 80050a4:	9b01      	ldr	r3, [sp, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	dc00      	bgt.n	80050ac <__sflush_r+0xec>
 80050aa:	e795      	b.n	8004fd8 <__sflush_r+0x18>
 80050ac:	003a      	movs	r2, r7
 80050ae:	0028      	movs	r0, r5
 80050b0:	9b01      	ldr	r3, [sp, #4]
 80050b2:	6a21      	ldr	r1, [r4, #32]
 80050b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050b6:	47b0      	blx	r6
 80050b8:	2800      	cmp	r0, #0
 80050ba:	dc06      	bgt.n	80050ca <__sflush_r+0x10a>
 80050bc:	2340      	movs	r3, #64	; 0x40
 80050be:	2001      	movs	r0, #1
 80050c0:	89a2      	ldrh	r2, [r4, #12]
 80050c2:	4240      	negs	r0, r0
 80050c4:	4313      	orrs	r3, r2
 80050c6:	81a3      	strh	r3, [r4, #12]
 80050c8:	e787      	b.n	8004fda <__sflush_r+0x1a>
 80050ca:	9b01      	ldr	r3, [sp, #4]
 80050cc:	183f      	adds	r7, r7, r0
 80050ce:	1a1b      	subs	r3, r3, r0
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	e7e7      	b.n	80050a4 <__sflush_r+0xe4>
 80050d4:	20400001 	.word	0x20400001

080050d8 <_fflush_r>:
 80050d8:	690b      	ldr	r3, [r1, #16]
 80050da:	b570      	push	{r4, r5, r6, lr}
 80050dc:	0005      	movs	r5, r0
 80050de:	000c      	movs	r4, r1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <_fflush_r+0x12>
 80050e4:	2500      	movs	r5, #0
 80050e6:	0028      	movs	r0, r5
 80050e8:	bd70      	pop	{r4, r5, r6, pc}
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d004      	beq.n	80050f8 <_fflush_r+0x20>
 80050ee:	6983      	ldr	r3, [r0, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <_fflush_r+0x20>
 80050f4:	f000 f892 	bl	800521c <__sinit>
 80050f8:	4b14      	ldr	r3, [pc, #80]	; (800514c <_fflush_r+0x74>)
 80050fa:	429c      	cmp	r4, r3
 80050fc:	d11b      	bne.n	8005136 <_fflush_r+0x5e>
 80050fe:	686c      	ldr	r4, [r5, #4]
 8005100:	220c      	movs	r2, #12
 8005102:	5ea3      	ldrsh	r3, [r4, r2]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0ed      	beq.n	80050e4 <_fflush_r+0xc>
 8005108:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800510a:	07d2      	lsls	r2, r2, #31
 800510c:	d404      	bmi.n	8005118 <_fflush_r+0x40>
 800510e:	059b      	lsls	r3, r3, #22
 8005110:	d402      	bmi.n	8005118 <_fflush_r+0x40>
 8005112:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005114:	f000 f923 	bl	800535e <__retarget_lock_acquire_recursive>
 8005118:	0028      	movs	r0, r5
 800511a:	0021      	movs	r1, r4
 800511c:	f7ff ff50 	bl	8004fc0 <__sflush_r>
 8005120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005122:	0005      	movs	r5, r0
 8005124:	07db      	lsls	r3, r3, #31
 8005126:	d4de      	bmi.n	80050e6 <_fflush_r+0xe>
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	059b      	lsls	r3, r3, #22
 800512c:	d4db      	bmi.n	80050e6 <_fflush_r+0xe>
 800512e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005130:	f000 f916 	bl	8005360 <__retarget_lock_release_recursive>
 8005134:	e7d7      	b.n	80050e6 <_fflush_r+0xe>
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <_fflush_r+0x78>)
 8005138:	429c      	cmp	r4, r3
 800513a:	d101      	bne.n	8005140 <_fflush_r+0x68>
 800513c:	68ac      	ldr	r4, [r5, #8]
 800513e:	e7df      	b.n	8005100 <_fflush_r+0x28>
 8005140:	4b04      	ldr	r3, [pc, #16]	; (8005154 <_fflush_r+0x7c>)
 8005142:	429c      	cmp	r4, r3
 8005144:	d1dc      	bne.n	8005100 <_fflush_r+0x28>
 8005146:	68ec      	ldr	r4, [r5, #12]
 8005148:	e7da      	b.n	8005100 <_fflush_r+0x28>
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	08005c1c 	.word	0x08005c1c
 8005150:	08005c3c 	.word	0x08005c3c
 8005154:	08005bfc 	.word	0x08005bfc

08005158 <std>:
 8005158:	2300      	movs	r3, #0
 800515a:	b510      	push	{r4, lr}
 800515c:	0004      	movs	r4, r0
 800515e:	6003      	str	r3, [r0, #0]
 8005160:	6043      	str	r3, [r0, #4]
 8005162:	6083      	str	r3, [r0, #8]
 8005164:	8181      	strh	r1, [r0, #12]
 8005166:	6643      	str	r3, [r0, #100]	; 0x64
 8005168:	0019      	movs	r1, r3
 800516a:	81c2      	strh	r2, [r0, #14]
 800516c:	6103      	str	r3, [r0, #16]
 800516e:	6143      	str	r3, [r0, #20]
 8005170:	6183      	str	r3, [r0, #24]
 8005172:	2208      	movs	r2, #8
 8005174:	305c      	adds	r0, #92	; 0x5c
 8005176:	f7ff f812 	bl	800419e <memset>
 800517a:	4b05      	ldr	r3, [pc, #20]	; (8005190 <std+0x38>)
 800517c:	6224      	str	r4, [r4, #32]
 800517e:	6263      	str	r3, [r4, #36]	; 0x24
 8005180:	4b04      	ldr	r3, [pc, #16]	; (8005194 <std+0x3c>)
 8005182:	62a3      	str	r3, [r4, #40]	; 0x28
 8005184:	4b04      	ldr	r3, [pc, #16]	; (8005198 <std+0x40>)
 8005186:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005188:	4b04      	ldr	r3, [pc, #16]	; (800519c <std+0x44>)
 800518a:	6323      	str	r3, [r4, #48]	; 0x30
 800518c:	bd10      	pop	{r4, pc}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	0800556d 	.word	0x0800556d
 8005194:	08005595 	.word	0x08005595
 8005198:	080055cd 	.word	0x080055cd
 800519c:	080055f9 	.word	0x080055f9

080051a0 <_cleanup_r>:
 80051a0:	b510      	push	{r4, lr}
 80051a2:	4902      	ldr	r1, [pc, #8]	; (80051ac <_cleanup_r+0xc>)
 80051a4:	f000 f8ba 	bl	800531c <_fwalk_reent>
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	080050d9 	.word	0x080050d9

080051b0 <__sfmoreglue>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	2568      	movs	r5, #104	; 0x68
 80051b4:	1e4a      	subs	r2, r1, #1
 80051b6:	4355      	muls	r5, r2
 80051b8:	000e      	movs	r6, r1
 80051ba:	0029      	movs	r1, r5
 80051bc:	3174      	adds	r1, #116	; 0x74
 80051be:	f7ff f863 	bl	8004288 <_malloc_r>
 80051c2:	1e04      	subs	r4, r0, #0
 80051c4:	d008      	beq.n	80051d8 <__sfmoreglue+0x28>
 80051c6:	2100      	movs	r1, #0
 80051c8:	002a      	movs	r2, r5
 80051ca:	6001      	str	r1, [r0, #0]
 80051cc:	6046      	str	r6, [r0, #4]
 80051ce:	300c      	adds	r0, #12
 80051d0:	60a0      	str	r0, [r4, #8]
 80051d2:	3268      	adds	r2, #104	; 0x68
 80051d4:	f7fe ffe3 	bl	800419e <memset>
 80051d8:	0020      	movs	r0, r4
 80051da:	bd70      	pop	{r4, r5, r6, pc}

080051dc <__sfp_lock_acquire>:
 80051dc:	b510      	push	{r4, lr}
 80051de:	4802      	ldr	r0, [pc, #8]	; (80051e8 <__sfp_lock_acquire+0xc>)
 80051e0:	f000 f8bd 	bl	800535e <__retarget_lock_acquire_recursive>
 80051e4:	bd10      	pop	{r4, pc}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	200002c9 	.word	0x200002c9

080051ec <__sfp_lock_release>:
 80051ec:	b510      	push	{r4, lr}
 80051ee:	4802      	ldr	r0, [pc, #8]	; (80051f8 <__sfp_lock_release+0xc>)
 80051f0:	f000 f8b6 	bl	8005360 <__retarget_lock_release_recursive>
 80051f4:	bd10      	pop	{r4, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	200002c9 	.word	0x200002c9

080051fc <__sinit_lock_acquire>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	4802      	ldr	r0, [pc, #8]	; (8005208 <__sinit_lock_acquire+0xc>)
 8005200:	f000 f8ad 	bl	800535e <__retarget_lock_acquire_recursive>
 8005204:	bd10      	pop	{r4, pc}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	200002ca 	.word	0x200002ca

0800520c <__sinit_lock_release>:
 800520c:	b510      	push	{r4, lr}
 800520e:	4802      	ldr	r0, [pc, #8]	; (8005218 <__sinit_lock_release+0xc>)
 8005210:	f000 f8a6 	bl	8005360 <__retarget_lock_release_recursive>
 8005214:	bd10      	pop	{r4, pc}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	200002ca 	.word	0x200002ca

0800521c <__sinit>:
 800521c:	b513      	push	{r0, r1, r4, lr}
 800521e:	0004      	movs	r4, r0
 8005220:	f7ff ffec 	bl	80051fc <__sinit_lock_acquire>
 8005224:	69a3      	ldr	r3, [r4, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <__sinit+0x14>
 800522a:	f7ff ffef 	bl	800520c <__sinit_lock_release>
 800522e:	bd13      	pop	{r0, r1, r4, pc}
 8005230:	64a3      	str	r3, [r4, #72]	; 0x48
 8005232:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005234:	6523      	str	r3, [r4, #80]	; 0x50
 8005236:	4b13      	ldr	r3, [pc, #76]	; (8005284 <__sinit+0x68>)
 8005238:	4a13      	ldr	r2, [pc, #76]	; (8005288 <__sinit+0x6c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	62a2      	str	r2, [r4, #40]	; 0x28
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	42a3      	cmp	r3, r4
 8005242:	d101      	bne.n	8005248 <__sinit+0x2c>
 8005244:	2301      	movs	r3, #1
 8005246:	61a3      	str	r3, [r4, #24]
 8005248:	0020      	movs	r0, r4
 800524a:	f000 f81f 	bl	800528c <__sfp>
 800524e:	6060      	str	r0, [r4, #4]
 8005250:	0020      	movs	r0, r4
 8005252:	f000 f81b 	bl	800528c <__sfp>
 8005256:	60a0      	str	r0, [r4, #8]
 8005258:	0020      	movs	r0, r4
 800525a:	f000 f817 	bl	800528c <__sfp>
 800525e:	2200      	movs	r2, #0
 8005260:	2104      	movs	r1, #4
 8005262:	60e0      	str	r0, [r4, #12]
 8005264:	6860      	ldr	r0, [r4, #4]
 8005266:	f7ff ff77 	bl	8005158 <std>
 800526a:	2201      	movs	r2, #1
 800526c:	2109      	movs	r1, #9
 800526e:	68a0      	ldr	r0, [r4, #8]
 8005270:	f7ff ff72 	bl	8005158 <std>
 8005274:	2202      	movs	r2, #2
 8005276:	2112      	movs	r1, #18
 8005278:	68e0      	ldr	r0, [r4, #12]
 800527a:	f7ff ff6d 	bl	8005158 <std>
 800527e:	2301      	movs	r3, #1
 8005280:	61a3      	str	r3, [r4, #24]
 8005282:	e7d2      	b.n	800522a <__sinit+0xe>
 8005284:	08005b14 	.word	0x08005b14
 8005288:	080051a1 	.word	0x080051a1

0800528c <__sfp>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	0007      	movs	r7, r0
 8005290:	f7ff ffa4 	bl	80051dc <__sfp_lock_acquire>
 8005294:	4b1f      	ldr	r3, [pc, #124]	; (8005314 <__sfp+0x88>)
 8005296:	681e      	ldr	r6, [r3, #0]
 8005298:	69b3      	ldr	r3, [r6, #24]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d102      	bne.n	80052a4 <__sfp+0x18>
 800529e:	0030      	movs	r0, r6
 80052a0:	f7ff ffbc 	bl	800521c <__sinit>
 80052a4:	3648      	adds	r6, #72	; 0x48
 80052a6:	68b4      	ldr	r4, [r6, #8]
 80052a8:	6873      	ldr	r3, [r6, #4]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	d504      	bpl.n	80052b8 <__sfp+0x2c>
 80052ae:	6833      	ldr	r3, [r6, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d022      	beq.n	80052fa <__sfp+0x6e>
 80052b4:	6836      	ldr	r6, [r6, #0]
 80052b6:	e7f6      	b.n	80052a6 <__sfp+0x1a>
 80052b8:	220c      	movs	r2, #12
 80052ba:	5ea5      	ldrsh	r5, [r4, r2]
 80052bc:	2d00      	cmp	r5, #0
 80052be:	d11a      	bne.n	80052f6 <__sfp+0x6a>
 80052c0:	0020      	movs	r0, r4
 80052c2:	4b15      	ldr	r3, [pc, #84]	; (8005318 <__sfp+0x8c>)
 80052c4:	3058      	adds	r0, #88	; 0x58
 80052c6:	60e3      	str	r3, [r4, #12]
 80052c8:	6665      	str	r5, [r4, #100]	; 0x64
 80052ca:	f000 f847 	bl	800535c <__retarget_lock_init_recursive>
 80052ce:	f7ff ff8d 	bl	80051ec <__sfp_lock_release>
 80052d2:	0020      	movs	r0, r4
 80052d4:	2208      	movs	r2, #8
 80052d6:	0029      	movs	r1, r5
 80052d8:	6025      	str	r5, [r4, #0]
 80052da:	60a5      	str	r5, [r4, #8]
 80052dc:	6065      	str	r5, [r4, #4]
 80052de:	6125      	str	r5, [r4, #16]
 80052e0:	6165      	str	r5, [r4, #20]
 80052e2:	61a5      	str	r5, [r4, #24]
 80052e4:	305c      	adds	r0, #92	; 0x5c
 80052e6:	f7fe ff5a 	bl	800419e <memset>
 80052ea:	6365      	str	r5, [r4, #52]	; 0x34
 80052ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80052ee:	64a5      	str	r5, [r4, #72]	; 0x48
 80052f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80052f2:	0020      	movs	r0, r4
 80052f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052f6:	3468      	adds	r4, #104	; 0x68
 80052f8:	e7d7      	b.n	80052aa <__sfp+0x1e>
 80052fa:	2104      	movs	r1, #4
 80052fc:	0038      	movs	r0, r7
 80052fe:	f7ff ff57 	bl	80051b0 <__sfmoreglue>
 8005302:	1e04      	subs	r4, r0, #0
 8005304:	6030      	str	r0, [r6, #0]
 8005306:	d1d5      	bne.n	80052b4 <__sfp+0x28>
 8005308:	f7ff ff70 	bl	80051ec <__sfp_lock_release>
 800530c:	230c      	movs	r3, #12
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	e7ef      	b.n	80052f2 <__sfp+0x66>
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	08005b14 	.word	0x08005b14
 8005318:	ffff0001 	.word	0xffff0001

0800531c <_fwalk_reent>:
 800531c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800531e:	0004      	movs	r4, r0
 8005320:	0006      	movs	r6, r0
 8005322:	2700      	movs	r7, #0
 8005324:	9101      	str	r1, [sp, #4]
 8005326:	3448      	adds	r4, #72	; 0x48
 8005328:	6863      	ldr	r3, [r4, #4]
 800532a:	68a5      	ldr	r5, [r4, #8]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	9b00      	ldr	r3, [sp, #0]
 8005330:	3b01      	subs	r3, #1
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	d504      	bpl.n	8005340 <_fwalk_reent+0x24>
 8005336:	6824      	ldr	r4, [r4, #0]
 8005338:	2c00      	cmp	r4, #0
 800533a:	d1f5      	bne.n	8005328 <_fwalk_reent+0xc>
 800533c:	0038      	movs	r0, r7
 800533e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005340:	89ab      	ldrh	r3, [r5, #12]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d908      	bls.n	8005358 <_fwalk_reent+0x3c>
 8005346:	220e      	movs	r2, #14
 8005348:	5eab      	ldrsh	r3, [r5, r2]
 800534a:	3301      	adds	r3, #1
 800534c:	d004      	beq.n	8005358 <_fwalk_reent+0x3c>
 800534e:	0029      	movs	r1, r5
 8005350:	0030      	movs	r0, r6
 8005352:	9b01      	ldr	r3, [sp, #4]
 8005354:	4798      	blx	r3
 8005356:	4307      	orrs	r7, r0
 8005358:	3568      	adds	r5, #104	; 0x68
 800535a:	e7e8      	b.n	800532e <_fwalk_reent+0x12>

0800535c <__retarget_lock_init_recursive>:
 800535c:	4770      	bx	lr

0800535e <__retarget_lock_acquire_recursive>:
 800535e:	4770      	bx	lr

08005360 <__retarget_lock_release_recursive>:
 8005360:	4770      	bx	lr
	...

08005364 <__swhatbuf_r>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	000e      	movs	r6, r1
 8005368:	001d      	movs	r5, r3
 800536a:	230e      	movs	r3, #14
 800536c:	5ec9      	ldrsh	r1, [r1, r3]
 800536e:	0014      	movs	r4, r2
 8005370:	b096      	sub	sp, #88	; 0x58
 8005372:	2900      	cmp	r1, #0
 8005374:	da08      	bge.n	8005388 <__swhatbuf_r+0x24>
 8005376:	220c      	movs	r2, #12
 8005378:	5eb3      	ldrsh	r3, [r6, r2]
 800537a:	2200      	movs	r2, #0
 800537c:	602a      	str	r2, [r5, #0]
 800537e:	061b      	lsls	r3, r3, #24
 8005380:	d411      	bmi.n	80053a6 <__swhatbuf_r+0x42>
 8005382:	2380      	movs	r3, #128	; 0x80
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	e00f      	b.n	80053a8 <__swhatbuf_r+0x44>
 8005388:	466a      	mov	r2, sp
 800538a:	f000 f961 	bl	8005650 <_fstat_r>
 800538e:	2800      	cmp	r0, #0
 8005390:	dbf1      	blt.n	8005376 <__swhatbuf_r+0x12>
 8005392:	23f0      	movs	r3, #240	; 0xf0
 8005394:	9901      	ldr	r1, [sp, #4]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	4019      	ands	r1, r3
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <__swhatbuf_r+0x4c>)
 800539c:	18c9      	adds	r1, r1, r3
 800539e:	424b      	negs	r3, r1
 80053a0:	4159      	adcs	r1, r3
 80053a2:	6029      	str	r1, [r5, #0]
 80053a4:	e7ed      	b.n	8005382 <__swhatbuf_r+0x1e>
 80053a6:	2340      	movs	r3, #64	; 0x40
 80053a8:	2000      	movs	r0, #0
 80053aa:	6023      	str	r3, [r4, #0]
 80053ac:	b016      	add	sp, #88	; 0x58
 80053ae:	bd70      	pop	{r4, r5, r6, pc}
 80053b0:	ffffe000 	.word	0xffffe000

080053b4 <__smakebuf_r>:
 80053b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053b6:	2602      	movs	r6, #2
 80053b8:	898b      	ldrh	r3, [r1, #12]
 80053ba:	0005      	movs	r5, r0
 80053bc:	000c      	movs	r4, r1
 80053be:	4233      	tst	r3, r6
 80053c0:	d006      	beq.n	80053d0 <__smakebuf_r+0x1c>
 80053c2:	0023      	movs	r3, r4
 80053c4:	3347      	adds	r3, #71	; 0x47
 80053c6:	6023      	str	r3, [r4, #0]
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	2301      	movs	r3, #1
 80053cc:	6163      	str	r3, [r4, #20]
 80053ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80053d0:	466a      	mov	r2, sp
 80053d2:	ab01      	add	r3, sp, #4
 80053d4:	f7ff ffc6 	bl	8005364 <__swhatbuf_r>
 80053d8:	9900      	ldr	r1, [sp, #0]
 80053da:	0007      	movs	r7, r0
 80053dc:	0028      	movs	r0, r5
 80053de:	f7fe ff53 	bl	8004288 <_malloc_r>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d108      	bne.n	80053f8 <__smakebuf_r+0x44>
 80053e6:	220c      	movs	r2, #12
 80053e8:	5ea3      	ldrsh	r3, [r4, r2]
 80053ea:	059a      	lsls	r2, r3, #22
 80053ec:	d4ef      	bmi.n	80053ce <__smakebuf_r+0x1a>
 80053ee:	2203      	movs	r2, #3
 80053f0:	4393      	bics	r3, r2
 80053f2:	431e      	orrs	r6, r3
 80053f4:	81a6      	strh	r6, [r4, #12]
 80053f6:	e7e4      	b.n	80053c2 <__smakebuf_r+0xe>
 80053f8:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <__smakebuf_r+0x84>)
 80053fa:	62ab      	str	r3, [r5, #40]	; 0x28
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	89a2      	ldrh	r2, [r4, #12]
 8005400:	6020      	str	r0, [r4, #0]
 8005402:	4313      	orrs	r3, r2
 8005404:	81a3      	strh	r3, [r4, #12]
 8005406:	9b00      	ldr	r3, [sp, #0]
 8005408:	6120      	str	r0, [r4, #16]
 800540a:	6163      	str	r3, [r4, #20]
 800540c:	9b01      	ldr	r3, [sp, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00d      	beq.n	800542e <__smakebuf_r+0x7a>
 8005412:	0028      	movs	r0, r5
 8005414:	230e      	movs	r3, #14
 8005416:	5ee1      	ldrsh	r1, [r4, r3]
 8005418:	f000 f92c 	bl	8005674 <_isatty_r>
 800541c:	2800      	cmp	r0, #0
 800541e:	d006      	beq.n	800542e <__smakebuf_r+0x7a>
 8005420:	2203      	movs	r2, #3
 8005422:	89a3      	ldrh	r3, [r4, #12]
 8005424:	4393      	bics	r3, r2
 8005426:	001a      	movs	r2, r3
 8005428:	2301      	movs	r3, #1
 800542a:	4313      	orrs	r3, r2
 800542c:	81a3      	strh	r3, [r4, #12]
 800542e:	89a0      	ldrh	r0, [r4, #12]
 8005430:	4307      	orrs	r7, r0
 8005432:	81a7      	strh	r7, [r4, #12]
 8005434:	e7cb      	b.n	80053ce <__smakebuf_r+0x1a>
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	080051a1 	.word	0x080051a1

0800543c <memchr>:
 800543c:	b2c9      	uxtb	r1, r1
 800543e:	1882      	adds	r2, r0, r2
 8005440:	4290      	cmp	r0, r2
 8005442:	d101      	bne.n	8005448 <memchr+0xc>
 8005444:	2000      	movs	r0, #0
 8005446:	4770      	bx	lr
 8005448:	7803      	ldrb	r3, [r0, #0]
 800544a:	428b      	cmp	r3, r1
 800544c:	d0fb      	beq.n	8005446 <memchr+0xa>
 800544e:	3001      	adds	r0, #1
 8005450:	e7f6      	b.n	8005440 <memchr+0x4>

08005452 <memmove>:
 8005452:	b510      	push	{r4, lr}
 8005454:	4288      	cmp	r0, r1
 8005456:	d902      	bls.n	800545e <memmove+0xc>
 8005458:	188b      	adds	r3, r1, r2
 800545a:	4298      	cmp	r0, r3
 800545c:	d303      	bcc.n	8005466 <memmove+0x14>
 800545e:	2300      	movs	r3, #0
 8005460:	e007      	b.n	8005472 <memmove+0x20>
 8005462:	5c8b      	ldrb	r3, [r1, r2]
 8005464:	5483      	strb	r3, [r0, r2]
 8005466:	3a01      	subs	r2, #1
 8005468:	d2fb      	bcs.n	8005462 <memmove+0x10>
 800546a:	bd10      	pop	{r4, pc}
 800546c:	5ccc      	ldrb	r4, [r1, r3]
 800546e:	54c4      	strb	r4, [r0, r3]
 8005470:	3301      	adds	r3, #1
 8005472:	429a      	cmp	r2, r3
 8005474:	d1fa      	bne.n	800546c <memmove+0x1a>
 8005476:	e7f8      	b.n	800546a <memmove+0x18>

08005478 <_realloc_r>:
 8005478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800547a:	0007      	movs	r7, r0
 800547c:	000e      	movs	r6, r1
 800547e:	0014      	movs	r4, r2
 8005480:	2900      	cmp	r1, #0
 8005482:	d105      	bne.n	8005490 <_realloc_r+0x18>
 8005484:	0011      	movs	r1, r2
 8005486:	f7fe feff 	bl	8004288 <_malloc_r>
 800548a:	0005      	movs	r5, r0
 800548c:	0028      	movs	r0, r5
 800548e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005490:	2a00      	cmp	r2, #0
 8005492:	d103      	bne.n	800549c <_realloc_r+0x24>
 8005494:	f7fe fe8c 	bl	80041b0 <_free_r>
 8005498:	0025      	movs	r5, r4
 800549a:	e7f7      	b.n	800548c <_realloc_r+0x14>
 800549c:	f000 f910 	bl	80056c0 <_malloc_usable_size_r>
 80054a0:	9001      	str	r0, [sp, #4]
 80054a2:	4284      	cmp	r4, r0
 80054a4:	d803      	bhi.n	80054ae <_realloc_r+0x36>
 80054a6:	0035      	movs	r5, r6
 80054a8:	0843      	lsrs	r3, r0, #1
 80054aa:	42a3      	cmp	r3, r4
 80054ac:	d3ee      	bcc.n	800548c <_realloc_r+0x14>
 80054ae:	0021      	movs	r1, r4
 80054b0:	0038      	movs	r0, r7
 80054b2:	f7fe fee9 	bl	8004288 <_malloc_r>
 80054b6:	1e05      	subs	r5, r0, #0
 80054b8:	d0e8      	beq.n	800548c <_realloc_r+0x14>
 80054ba:	9b01      	ldr	r3, [sp, #4]
 80054bc:	0022      	movs	r2, r4
 80054be:	429c      	cmp	r4, r3
 80054c0:	d900      	bls.n	80054c4 <_realloc_r+0x4c>
 80054c2:	001a      	movs	r2, r3
 80054c4:	0031      	movs	r1, r6
 80054c6:	0028      	movs	r0, r5
 80054c8:	f7fe fe60 	bl	800418c <memcpy>
 80054cc:	0031      	movs	r1, r6
 80054ce:	0038      	movs	r0, r7
 80054d0:	f7fe fe6e 	bl	80041b0 <_free_r>
 80054d4:	e7da      	b.n	800548c <_realloc_r+0x14>

080054d6 <_raise_r>:
 80054d6:	b570      	push	{r4, r5, r6, lr}
 80054d8:	0004      	movs	r4, r0
 80054da:	000d      	movs	r5, r1
 80054dc:	291f      	cmp	r1, #31
 80054de:	d904      	bls.n	80054ea <_raise_r+0x14>
 80054e0:	2316      	movs	r3, #22
 80054e2:	6003      	str	r3, [r0, #0]
 80054e4:	2001      	movs	r0, #1
 80054e6:	4240      	negs	r0, r0
 80054e8:	bd70      	pop	{r4, r5, r6, pc}
 80054ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <_raise_r+0x24>
 80054f0:	008a      	lsls	r2, r1, #2
 80054f2:	189b      	adds	r3, r3, r2
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	d108      	bne.n	800550c <_raise_r+0x36>
 80054fa:	0020      	movs	r0, r4
 80054fc:	f000 f832 	bl	8005564 <_getpid_r>
 8005500:	002a      	movs	r2, r5
 8005502:	0001      	movs	r1, r0
 8005504:	0020      	movs	r0, r4
 8005506:	f000 f81b 	bl	8005540 <_kill_r>
 800550a:	e7ed      	b.n	80054e8 <_raise_r+0x12>
 800550c:	2000      	movs	r0, #0
 800550e:	2a01      	cmp	r2, #1
 8005510:	d0ea      	beq.n	80054e8 <_raise_r+0x12>
 8005512:	1c51      	adds	r1, r2, #1
 8005514:	d103      	bne.n	800551e <_raise_r+0x48>
 8005516:	2316      	movs	r3, #22
 8005518:	3001      	adds	r0, #1
 800551a:	6023      	str	r3, [r4, #0]
 800551c:	e7e4      	b.n	80054e8 <_raise_r+0x12>
 800551e:	2400      	movs	r4, #0
 8005520:	0028      	movs	r0, r5
 8005522:	601c      	str	r4, [r3, #0]
 8005524:	4790      	blx	r2
 8005526:	0020      	movs	r0, r4
 8005528:	e7de      	b.n	80054e8 <_raise_r+0x12>
	...

0800552c <raise>:
 800552c:	b510      	push	{r4, lr}
 800552e:	4b03      	ldr	r3, [pc, #12]	; (800553c <raise+0x10>)
 8005530:	0001      	movs	r1, r0
 8005532:	6818      	ldr	r0, [r3, #0]
 8005534:	f7ff ffcf 	bl	80054d6 <_raise_r>
 8005538:	bd10      	pop	{r4, pc}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	20000048 	.word	0x20000048

08005540 <_kill_r>:
 8005540:	2300      	movs	r3, #0
 8005542:	b570      	push	{r4, r5, r6, lr}
 8005544:	4d06      	ldr	r5, [pc, #24]	; (8005560 <_kill_r+0x20>)
 8005546:	0004      	movs	r4, r0
 8005548:	0008      	movs	r0, r1
 800554a:	0011      	movs	r1, r2
 800554c:	602b      	str	r3, [r5, #0]
 800554e:	f7fc fd47 	bl	8001fe0 <_kill>
 8005552:	1c43      	adds	r3, r0, #1
 8005554:	d103      	bne.n	800555e <_kill_r+0x1e>
 8005556:	682b      	ldr	r3, [r5, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d000      	beq.n	800555e <_kill_r+0x1e>
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	200002c4 	.word	0x200002c4

08005564 <_getpid_r>:
 8005564:	b510      	push	{r4, lr}
 8005566:	f7fc fd39 	bl	8001fdc <_getpid>
 800556a:	bd10      	pop	{r4, pc}

0800556c <__sread>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	000c      	movs	r4, r1
 8005570:	250e      	movs	r5, #14
 8005572:	5f49      	ldrsh	r1, [r1, r5]
 8005574:	f000 f8ac 	bl	80056d0 <_read_r>
 8005578:	2800      	cmp	r0, #0
 800557a:	db03      	blt.n	8005584 <__sread+0x18>
 800557c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800557e:	181b      	adds	r3, r3, r0
 8005580:	6563      	str	r3, [r4, #84]	; 0x54
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	4a02      	ldr	r2, [pc, #8]	; (8005590 <__sread+0x24>)
 8005588:	4013      	ands	r3, r2
 800558a:	81a3      	strh	r3, [r4, #12]
 800558c:	e7f9      	b.n	8005582 <__sread+0x16>
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	ffffefff 	.word	0xffffefff

08005594 <__swrite>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	001f      	movs	r7, r3
 8005598:	898b      	ldrh	r3, [r1, #12]
 800559a:	0005      	movs	r5, r0
 800559c:	000c      	movs	r4, r1
 800559e:	0016      	movs	r6, r2
 80055a0:	05db      	lsls	r3, r3, #23
 80055a2:	d505      	bpl.n	80055b0 <__swrite+0x1c>
 80055a4:	230e      	movs	r3, #14
 80055a6:	5ec9      	ldrsh	r1, [r1, r3]
 80055a8:	2200      	movs	r2, #0
 80055aa:	2302      	movs	r3, #2
 80055ac:	f000 f874 	bl	8005698 <_lseek_r>
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	4a05      	ldr	r2, [pc, #20]	; (80055c8 <__swrite+0x34>)
 80055b4:	0028      	movs	r0, r5
 80055b6:	4013      	ands	r3, r2
 80055b8:	81a3      	strh	r3, [r4, #12]
 80055ba:	0032      	movs	r2, r6
 80055bc:	230e      	movs	r3, #14
 80055be:	5ee1      	ldrsh	r1, [r4, r3]
 80055c0:	003b      	movs	r3, r7
 80055c2:	f000 f81f 	bl	8005604 <_write_r>
 80055c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c8:	ffffefff 	.word	0xffffefff

080055cc <__sseek>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	000c      	movs	r4, r1
 80055d0:	250e      	movs	r5, #14
 80055d2:	5f49      	ldrsh	r1, [r1, r5]
 80055d4:	f000 f860 	bl	8005698 <_lseek_r>
 80055d8:	89a3      	ldrh	r3, [r4, #12]
 80055da:	1c42      	adds	r2, r0, #1
 80055dc:	d103      	bne.n	80055e6 <__sseek+0x1a>
 80055de:	4a05      	ldr	r2, [pc, #20]	; (80055f4 <__sseek+0x28>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	81a3      	strh	r3, [r4, #12]
 80055e4:	bd70      	pop	{r4, r5, r6, pc}
 80055e6:	2280      	movs	r2, #128	; 0x80
 80055e8:	0152      	lsls	r2, r2, #5
 80055ea:	4313      	orrs	r3, r2
 80055ec:	81a3      	strh	r3, [r4, #12]
 80055ee:	6560      	str	r0, [r4, #84]	; 0x54
 80055f0:	e7f8      	b.n	80055e4 <__sseek+0x18>
 80055f2:	46c0      	nop			; (mov r8, r8)
 80055f4:	ffffefff 	.word	0xffffefff

080055f8 <__sclose>:
 80055f8:	b510      	push	{r4, lr}
 80055fa:	230e      	movs	r3, #14
 80055fc:	5ec9      	ldrsh	r1, [r1, r3]
 80055fe:	f000 f815 	bl	800562c <_close_r>
 8005602:	bd10      	pop	{r4, pc}

08005604 <_write_r>:
 8005604:	b570      	push	{r4, r5, r6, lr}
 8005606:	0004      	movs	r4, r0
 8005608:	0008      	movs	r0, r1
 800560a:	0011      	movs	r1, r2
 800560c:	001a      	movs	r2, r3
 800560e:	2300      	movs	r3, #0
 8005610:	4d05      	ldr	r5, [pc, #20]	; (8005628 <_write_r+0x24>)
 8005612:	602b      	str	r3, [r5, #0]
 8005614:	f7fc fcff 	bl	8002016 <_write>
 8005618:	1c43      	adds	r3, r0, #1
 800561a:	d103      	bne.n	8005624 <_write_r+0x20>
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d000      	beq.n	8005624 <_write_r+0x20>
 8005622:	6023      	str	r3, [r4, #0]
 8005624:	bd70      	pop	{r4, r5, r6, pc}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	200002c4 	.word	0x200002c4

0800562c <_close_r>:
 800562c:	2300      	movs	r3, #0
 800562e:	b570      	push	{r4, r5, r6, lr}
 8005630:	4d06      	ldr	r5, [pc, #24]	; (800564c <_close_r+0x20>)
 8005632:	0004      	movs	r4, r0
 8005634:	0008      	movs	r0, r1
 8005636:	602b      	str	r3, [r5, #0]
 8005638:	f7fc fcfa 	bl	8002030 <_close>
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	d103      	bne.n	8005648 <_close_r+0x1c>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d000      	beq.n	8005648 <_close_r+0x1c>
 8005646:	6023      	str	r3, [r4, #0]
 8005648:	bd70      	pop	{r4, r5, r6, pc}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	200002c4 	.word	0x200002c4

08005650 <_fstat_r>:
 8005650:	2300      	movs	r3, #0
 8005652:	b570      	push	{r4, r5, r6, lr}
 8005654:	4d06      	ldr	r5, [pc, #24]	; (8005670 <_fstat_r+0x20>)
 8005656:	0004      	movs	r4, r0
 8005658:	0008      	movs	r0, r1
 800565a:	0011      	movs	r1, r2
 800565c:	602b      	str	r3, [r5, #0]
 800565e:	f7fc fcea 	bl	8002036 <_fstat>
 8005662:	1c43      	adds	r3, r0, #1
 8005664:	d103      	bne.n	800566e <_fstat_r+0x1e>
 8005666:	682b      	ldr	r3, [r5, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d000      	beq.n	800566e <_fstat_r+0x1e>
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	bd70      	pop	{r4, r5, r6, pc}
 8005670:	200002c4 	.word	0x200002c4

08005674 <_isatty_r>:
 8005674:	2300      	movs	r3, #0
 8005676:	b570      	push	{r4, r5, r6, lr}
 8005678:	4d06      	ldr	r5, [pc, #24]	; (8005694 <_isatty_r+0x20>)
 800567a:	0004      	movs	r4, r0
 800567c:	0008      	movs	r0, r1
 800567e:	602b      	str	r3, [r5, #0]
 8005680:	f7fc fcde 	bl	8002040 <_isatty>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d103      	bne.n	8005690 <_isatty_r+0x1c>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d000      	beq.n	8005690 <_isatty_r+0x1c>
 800568e:	6023      	str	r3, [r4, #0]
 8005690:	bd70      	pop	{r4, r5, r6, pc}
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	200002c4 	.word	0x200002c4

08005698 <_lseek_r>:
 8005698:	b570      	push	{r4, r5, r6, lr}
 800569a:	0004      	movs	r4, r0
 800569c:	0008      	movs	r0, r1
 800569e:	0011      	movs	r1, r2
 80056a0:	001a      	movs	r2, r3
 80056a2:	2300      	movs	r3, #0
 80056a4:	4d05      	ldr	r5, [pc, #20]	; (80056bc <_lseek_r+0x24>)
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	f7fc fccc 	bl	8002044 <_lseek>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d103      	bne.n	80056b8 <_lseek_r+0x20>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d000      	beq.n	80056b8 <_lseek_r+0x20>
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	bd70      	pop	{r4, r5, r6, pc}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	200002c4 	.word	0x200002c4

080056c0 <_malloc_usable_size_r>:
 80056c0:	1f0b      	subs	r3, r1, #4
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	1f18      	subs	r0, r3, #4
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	da01      	bge.n	80056ce <_malloc_usable_size_r+0xe>
 80056ca:	580b      	ldr	r3, [r1, r0]
 80056cc:	18c0      	adds	r0, r0, r3
 80056ce:	4770      	bx	lr

080056d0 <_read_r>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	0004      	movs	r4, r0
 80056d4:	0008      	movs	r0, r1
 80056d6:	0011      	movs	r1, r2
 80056d8:	001a      	movs	r2, r3
 80056da:	2300      	movs	r3, #0
 80056dc:	4d05      	ldr	r5, [pc, #20]	; (80056f4 <_read_r+0x24>)
 80056de:	602b      	str	r3, [r5, #0]
 80056e0:	f7fc fc8c 	bl	8001ffc <_read>
 80056e4:	1c43      	adds	r3, r0, #1
 80056e6:	d103      	bne.n	80056f0 <_read_r+0x20>
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d000      	beq.n	80056f0 <_read_r+0x20>
 80056ee:	6023      	str	r3, [r4, #0]
 80056f0:	bd70      	pop	{r4, r5, r6, pc}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	200002c4 	.word	0x200002c4

080056f8 <_gettimeofday>:
 80056f8:	2258      	movs	r2, #88	; 0x58
 80056fa:	2001      	movs	r0, #1
 80056fc:	4b01      	ldr	r3, [pc, #4]	; (8005704 <_gettimeofday+0xc>)
 80056fe:	4240      	negs	r0, r0
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	4770      	bx	lr
 8005704:	200002c4 	.word	0x200002c4

08005708 <_init>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570e:	bc08      	pop	{r3}
 8005710:	469e      	mov	lr, r3
 8005712:	4770      	bx	lr

08005714 <_fini>:
 8005714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571a:	bc08      	pop	{r3}
 800571c:	469e      	mov	lr, r3
 800571e:	4770      	bx	lr
