
digital_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cbc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  08003d7c  08003d7c  00013d7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f8  080040f8  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  080040f8  080040f8  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004100  08004100  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08004108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000178  08004280  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08004280  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bbf  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002902  00000000  00000000  00036d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000efa8  00000000  00000000  00039661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  00048610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001468  00000000  00000000  00049208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000302c  00000000  00000000  0004a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001860c  00000000  00000000  0004d69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f4ec  00000000  00000000  00065ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e5194  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a44  00000000  00000000  000e51e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000178 	.word	0x20000178
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d64 	.word	0x08003d64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000017c 	.word	0x2000017c
 8000104:	08003d64 	.word	0x08003d64

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uldivmod>:
 8000258:	2b00      	cmp	r3, #0
 800025a:	d111      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 800025c:	2a00      	cmp	r2, #0
 800025e:	d10f      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 8000260:	2900      	cmp	r1, #0
 8000262:	d100      	bne.n	8000266 <__aeabi_uldivmod+0xe>
 8000264:	2800      	cmp	r0, #0
 8000266:	d002      	beq.n	800026e <__aeabi_uldivmod+0x16>
 8000268:	2100      	movs	r1, #0
 800026a:	43c9      	mvns	r1, r1
 800026c:	0008      	movs	r0, r1
 800026e:	b407      	push	{r0, r1, r2}
 8000270:	4802      	ldr	r0, [pc, #8]	; (800027c <__aeabi_uldivmod+0x24>)
 8000272:	a102      	add	r1, pc, #8	; (adr r1, 800027c <__aeabi_uldivmod+0x24>)
 8000274:	1840      	adds	r0, r0, r1
 8000276:	9002      	str	r0, [sp, #8]
 8000278:	bd03      	pop	{r0, r1, pc}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	ffffffd9 	.word	0xffffffd9
 8000280:	b403      	push	{r0, r1}
 8000282:	4668      	mov	r0, sp
 8000284:	b501      	push	{r0, lr}
 8000286:	9802      	ldr	r0, [sp, #8]
 8000288:	f000 f834 	bl	80002f4 <__udivmoddi4>
 800028c:	9b01      	ldr	r3, [sp, #4]
 800028e:	469e      	mov	lr, r3
 8000290:	b002      	add	sp, #8
 8000292:	bc0c      	pop	{r2, r3}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_lmul>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	46ce      	mov	lr, r9
 800029c:	4647      	mov	r7, r8
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	4699      	mov	r9, r3
 80002a4:	0c3b      	lsrs	r3, r7, #16
 80002a6:	469c      	mov	ip, r3
 80002a8:	0413      	lsls	r3, r2, #16
 80002aa:	0c1b      	lsrs	r3, r3, #16
 80002ac:	001d      	movs	r5, r3
 80002ae:	000e      	movs	r6, r1
 80002b0:	4661      	mov	r1, ip
 80002b2:	0400      	lsls	r0, r0, #16
 80002b4:	0c14      	lsrs	r4, r2, #16
 80002b6:	0c00      	lsrs	r0, r0, #16
 80002b8:	4345      	muls	r5, r0
 80002ba:	434b      	muls	r3, r1
 80002bc:	4360      	muls	r0, r4
 80002be:	4361      	muls	r1, r4
 80002c0:	18c0      	adds	r0, r0, r3
 80002c2:	0c2c      	lsrs	r4, r5, #16
 80002c4:	1820      	adds	r0, r4, r0
 80002c6:	468c      	mov	ip, r1
 80002c8:	4283      	cmp	r3, r0
 80002ca:	d903      	bls.n	80002d4 <__aeabi_lmul+0x3c>
 80002cc:	2380      	movs	r3, #128	; 0x80
 80002ce:	025b      	lsls	r3, r3, #9
 80002d0:	4698      	mov	r8, r3
 80002d2:	44c4      	add	ip, r8
 80002d4:	4649      	mov	r1, r9
 80002d6:	4379      	muls	r1, r7
 80002d8:	4372      	muls	r2, r6
 80002da:	0c03      	lsrs	r3, r0, #16
 80002dc:	4463      	add	r3, ip
 80002de:	042d      	lsls	r5, r5, #16
 80002e0:	0c2d      	lsrs	r5, r5, #16
 80002e2:	18c9      	adds	r1, r1, r3
 80002e4:	0400      	lsls	r0, r0, #16
 80002e6:	1940      	adds	r0, r0, r5
 80002e8:	1889      	adds	r1, r1, r2
 80002ea:	bcc0      	pop	{r6, r7}
 80002ec:	46b9      	mov	r9, r7
 80002ee:	46b0      	mov	r8, r6
 80002f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f2:	46c0      	nop			; (mov r8, r8)

080002f4 <__udivmoddi4>:
 80002f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f6:	4657      	mov	r7, sl
 80002f8:	464e      	mov	r6, r9
 80002fa:	4645      	mov	r5, r8
 80002fc:	46de      	mov	lr, fp
 80002fe:	b5e0      	push	{r5, r6, r7, lr}
 8000300:	0004      	movs	r4, r0
 8000302:	000d      	movs	r5, r1
 8000304:	4692      	mov	sl, r2
 8000306:	4699      	mov	r9, r3
 8000308:	b083      	sub	sp, #12
 800030a:	428b      	cmp	r3, r1
 800030c:	d830      	bhi.n	8000370 <__udivmoddi4+0x7c>
 800030e:	d02d      	beq.n	800036c <__udivmoddi4+0x78>
 8000310:	4649      	mov	r1, r9
 8000312:	4650      	mov	r0, sl
 8000314:	f000 f8d8 	bl	80004c8 <__clzdi2>
 8000318:	0029      	movs	r1, r5
 800031a:	0006      	movs	r6, r0
 800031c:	0020      	movs	r0, r4
 800031e:	f000 f8d3 	bl	80004c8 <__clzdi2>
 8000322:	1a33      	subs	r3, r6, r0
 8000324:	4698      	mov	r8, r3
 8000326:	3b20      	subs	r3, #32
 8000328:	469b      	mov	fp, r3
 800032a:	d433      	bmi.n	8000394 <__udivmoddi4+0xa0>
 800032c:	465a      	mov	r2, fp
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	4642      	mov	r2, r8
 8000334:	001f      	movs	r7, r3
 8000336:	4653      	mov	r3, sl
 8000338:	4093      	lsls	r3, r2
 800033a:	001e      	movs	r6, r3
 800033c:	42af      	cmp	r7, r5
 800033e:	d83a      	bhi.n	80003b6 <__udivmoddi4+0xc2>
 8000340:	42af      	cmp	r7, r5
 8000342:	d100      	bne.n	8000346 <__udivmoddi4+0x52>
 8000344:	e078      	b.n	8000438 <__udivmoddi4+0x144>
 8000346:	465b      	mov	r3, fp
 8000348:	1ba4      	subs	r4, r4, r6
 800034a:	41bd      	sbcs	r5, r7
 800034c:	2b00      	cmp	r3, #0
 800034e:	da00      	bge.n	8000352 <__udivmoddi4+0x5e>
 8000350:	e075      	b.n	800043e <__udivmoddi4+0x14a>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2301      	movs	r3, #1
 800035c:	465a      	mov	r2, fp
 800035e:	4093      	lsls	r3, r2
 8000360:	9301      	str	r3, [sp, #4]
 8000362:	2301      	movs	r3, #1
 8000364:	4642      	mov	r2, r8
 8000366:	4093      	lsls	r3, r2
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	e028      	b.n	80003be <__udivmoddi4+0xca>
 800036c:	4282      	cmp	r2, r0
 800036e:	d9cf      	bls.n	8000310 <__udivmoddi4+0x1c>
 8000370:	2200      	movs	r2, #0
 8000372:	2300      	movs	r3, #0
 8000374:	9200      	str	r2, [sp, #0]
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <__udivmoddi4+0x8e>
 800037e:	601c      	str	r4, [r3, #0]
 8000380:	605d      	str	r5, [r3, #4]
 8000382:	9800      	ldr	r0, [sp, #0]
 8000384:	9901      	ldr	r1, [sp, #4]
 8000386:	b003      	add	sp, #12
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	46bb      	mov	fp, r7
 800038c:	46b2      	mov	sl, r6
 800038e:	46a9      	mov	r9, r5
 8000390:	46a0      	mov	r8, r4
 8000392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000394:	4642      	mov	r2, r8
 8000396:	2320      	movs	r3, #32
 8000398:	1a9b      	subs	r3, r3, r2
 800039a:	4652      	mov	r2, sl
 800039c:	40da      	lsrs	r2, r3
 800039e:	4641      	mov	r1, r8
 80003a0:	0013      	movs	r3, r2
 80003a2:	464a      	mov	r2, r9
 80003a4:	408a      	lsls	r2, r1
 80003a6:	0017      	movs	r7, r2
 80003a8:	4642      	mov	r2, r8
 80003aa:	431f      	orrs	r7, r3
 80003ac:	4653      	mov	r3, sl
 80003ae:	4093      	lsls	r3, r2
 80003b0:	001e      	movs	r6, r3
 80003b2:	42af      	cmp	r7, r5
 80003b4:	d9c4      	bls.n	8000340 <__udivmoddi4+0x4c>
 80003b6:	2200      	movs	r2, #0
 80003b8:	2300      	movs	r3, #0
 80003ba:	9200      	str	r2, [sp, #0]
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	4643      	mov	r3, r8
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d0d9      	beq.n	8000378 <__udivmoddi4+0x84>
 80003c4:	07fb      	lsls	r3, r7, #31
 80003c6:	0872      	lsrs	r2, r6, #1
 80003c8:	431a      	orrs	r2, r3
 80003ca:	4646      	mov	r6, r8
 80003cc:	087b      	lsrs	r3, r7, #1
 80003ce:	e00e      	b.n	80003ee <__udivmoddi4+0xfa>
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d101      	bne.n	80003d8 <__udivmoddi4+0xe4>
 80003d4:	42a2      	cmp	r2, r4
 80003d6:	d80c      	bhi.n	80003f2 <__udivmoddi4+0xfe>
 80003d8:	1aa4      	subs	r4, r4, r2
 80003da:	419d      	sbcs	r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	1924      	adds	r4, r4, r4
 80003e0:	416d      	adcs	r5, r5
 80003e2:	2100      	movs	r1, #0
 80003e4:	3e01      	subs	r6, #1
 80003e6:	1824      	adds	r4, r4, r0
 80003e8:	414d      	adcs	r5, r1
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d006      	beq.n	80003fc <__udivmoddi4+0x108>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d9ee      	bls.n	80003d0 <__udivmoddi4+0xdc>
 80003f2:	3e01      	subs	r6, #1
 80003f4:	1924      	adds	r4, r4, r4
 80003f6:	416d      	adcs	r5, r5
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d1f8      	bne.n	80003ee <__udivmoddi4+0xfa>
 80003fc:	9800      	ldr	r0, [sp, #0]
 80003fe:	9901      	ldr	r1, [sp, #4]
 8000400:	465b      	mov	r3, fp
 8000402:	1900      	adds	r0, r0, r4
 8000404:	4169      	adcs	r1, r5
 8000406:	2b00      	cmp	r3, #0
 8000408:	db24      	blt.n	8000454 <__udivmoddi4+0x160>
 800040a:	002b      	movs	r3, r5
 800040c:	465a      	mov	r2, fp
 800040e:	4644      	mov	r4, r8
 8000410:	40d3      	lsrs	r3, r2
 8000412:	002a      	movs	r2, r5
 8000414:	40e2      	lsrs	r2, r4
 8000416:	001c      	movs	r4, r3
 8000418:	465b      	mov	r3, fp
 800041a:	0015      	movs	r5, r2
 800041c:	2b00      	cmp	r3, #0
 800041e:	db2a      	blt.n	8000476 <__udivmoddi4+0x182>
 8000420:	0026      	movs	r6, r4
 8000422:	409e      	lsls	r6, r3
 8000424:	0033      	movs	r3, r6
 8000426:	0026      	movs	r6, r4
 8000428:	4647      	mov	r7, r8
 800042a:	40be      	lsls	r6, r7
 800042c:	0032      	movs	r2, r6
 800042e:	1a80      	subs	r0, r0, r2
 8000430:	4199      	sbcs	r1, r3
 8000432:	9000      	str	r0, [sp, #0]
 8000434:	9101      	str	r1, [sp, #4]
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x84>
 8000438:	42a3      	cmp	r3, r4
 800043a:	d8bc      	bhi.n	80003b6 <__udivmoddi4+0xc2>
 800043c:	e783      	b.n	8000346 <__udivmoddi4+0x52>
 800043e:	4642      	mov	r2, r8
 8000440:	2320      	movs	r3, #32
 8000442:	2100      	movs	r1, #0
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	2200      	movs	r2, #0
 8000448:	9100      	str	r1, [sp, #0]
 800044a:	9201      	str	r2, [sp, #4]
 800044c:	2201      	movs	r2, #1
 800044e:	40da      	lsrs	r2, r3
 8000450:	9201      	str	r2, [sp, #4]
 8000452:	e786      	b.n	8000362 <__udivmoddi4+0x6e>
 8000454:	4642      	mov	r2, r8
 8000456:	2320      	movs	r3, #32
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	002a      	movs	r2, r5
 800045c:	4646      	mov	r6, r8
 800045e:	409a      	lsls	r2, r3
 8000460:	0023      	movs	r3, r4
 8000462:	40f3      	lsrs	r3, r6
 8000464:	4644      	mov	r4, r8
 8000466:	4313      	orrs	r3, r2
 8000468:	002a      	movs	r2, r5
 800046a:	40e2      	lsrs	r2, r4
 800046c:	001c      	movs	r4, r3
 800046e:	465b      	mov	r3, fp
 8000470:	0015      	movs	r5, r2
 8000472:	2b00      	cmp	r3, #0
 8000474:	dad4      	bge.n	8000420 <__udivmoddi4+0x12c>
 8000476:	4642      	mov	r2, r8
 8000478:	002f      	movs	r7, r5
 800047a:	2320      	movs	r3, #32
 800047c:	0026      	movs	r6, r4
 800047e:	4097      	lsls	r7, r2
 8000480:	1a9b      	subs	r3, r3, r2
 8000482:	40de      	lsrs	r6, r3
 8000484:	003b      	movs	r3, r7
 8000486:	4333      	orrs	r3, r6
 8000488:	e7cd      	b.n	8000426 <__udivmoddi4+0x132>
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__clzsi2>:
 800048c:	211c      	movs	r1, #28
 800048e:	2301      	movs	r3, #1
 8000490:	041b      	lsls	r3, r3, #16
 8000492:	4298      	cmp	r0, r3
 8000494:	d301      	bcc.n	800049a <__clzsi2+0xe>
 8000496:	0c00      	lsrs	r0, r0, #16
 8000498:	3910      	subs	r1, #16
 800049a:	0a1b      	lsrs	r3, r3, #8
 800049c:	4298      	cmp	r0, r3
 800049e:	d301      	bcc.n	80004a4 <__clzsi2+0x18>
 80004a0:	0a00      	lsrs	r0, r0, #8
 80004a2:	3908      	subs	r1, #8
 80004a4:	091b      	lsrs	r3, r3, #4
 80004a6:	4298      	cmp	r0, r3
 80004a8:	d301      	bcc.n	80004ae <__clzsi2+0x22>
 80004aa:	0900      	lsrs	r0, r0, #4
 80004ac:	3904      	subs	r1, #4
 80004ae:	a202      	add	r2, pc, #8	; (adr r2, 80004b8 <__clzsi2+0x2c>)
 80004b0:	5c10      	ldrb	r0, [r2, r0]
 80004b2:	1840      	adds	r0, r0, r1
 80004b4:	4770      	bx	lr
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	02020304 	.word	0x02020304
 80004bc:	01010101 	.word	0x01010101
	...

080004c8 <__clzdi2>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d103      	bne.n	80004d6 <__clzdi2+0xe>
 80004ce:	f7ff ffdd 	bl	800048c <__clzsi2>
 80004d2:	3020      	adds	r0, #32
 80004d4:	e002      	b.n	80004dc <__clzdi2+0x14>
 80004d6:	0008      	movs	r0, r1
 80004d8:	f7ff ffd8 	bl	800048c <__clzsi2>
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <initDrv8830>:
#include "drv8830.h"

extern I2C_HandleTypeDef hi2c1;

uint8_t initDrv8830() {
 80004e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t txData = 0x80;
 80004e2:	2317      	movs	r3, #23
 80004e4:	2280      	movs	r2, #128	; 0x80
 80004e6:	446b      	add	r3, sp
 80004e8:	701a      	strb	r2, [r3, #0]
	// clear fault
	return HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &txData, 1, 5);
 80004ea:	3a7b      	subs	r2, #123	; 0x7b
 80004ec:	9202      	str	r2, [sp, #8]
 80004ee:	3a04      	subs	r2, #4
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	21c0      	movs	r1, #192	; 0xc0
 80004f4:	0013      	movs	r3, r2
 80004f6:	9201      	str	r2, [sp, #4]
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <initDrv8830+0x24>)
 80004fa:	f001 fbdf 	bl	8001cbc <HAL_I2C_Mem_Write>
}
 80004fe:	b007      	add	sp, #28
 8000500:	bd00      	pop	{pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	20000200 	.word	0x20000200

08000508 <setMotor>:
// VSET[7:2] voltage 0x00~0x3F
// D1, D0 direction
uint8_t setMotor(int direction) {
	uint8_t txData;
	uint8_t	result;
	txData = 0x1f << 2 | direction;
 8000508:	2216      	movs	r2, #22
 800050a:	237c      	movs	r3, #124	; 0x7c
uint8_t setMotor(int direction) {
 800050c:	b570      	push	{r4, r5, r6, lr}
	int status;
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 800050e:	2401      	movs	r4, #1
 8000510:	2505      	movs	r5, #5
uint8_t setMotor(int direction) {
 8000512:	b086      	sub	sp, #24
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 8000514:	4e0d      	ldr	r6, [pc, #52]	; (800054c <setMotor+0x44>)
	txData = 0x1f << 2 | direction;
 8000516:	446a      	add	r2, sp
 8000518:	4303      	orrs	r3, r0
 800051a:	7013      	strb	r3, [r2, #0]
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 800051c:	21c0      	movs	r1, #192	; 0xc0
 800051e:	0023      	movs	r3, r4
 8000520:	9502      	str	r5, [sp, #8]
 8000522:	9200      	str	r2, [sp, #0]
 8000524:	0030      	movs	r0, r6
 8000526:	2200      	movs	r2, #0
 8000528:	9401      	str	r4, [sp, #4]
 800052a:	f001 fbc7 	bl	8001cbc <HAL_I2C_Mem_Write>
	status = HAL_I2C_Mem_Read(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &result, 1, 5);
 800052e:	9502      	str	r5, [sp, #8]
 8000530:	3512      	adds	r5, #18
 8000532:	446d      	add	r5, sp
 8000534:	0023      	movs	r3, r4
 8000536:	0022      	movs	r2, r4
 8000538:	21c0      	movs	r1, #192	; 0xc0
 800053a:	0030      	movs	r0, r6
 800053c:	9401      	str	r4, [sp, #4]
 800053e:	9500      	str	r5, [sp, #0]
 8000540:	f001 fc9a 	bl	8001e78 <HAL_I2C_Mem_Read>
	return result;
 8000544:	7828      	ldrb	r0, [r5, #0]
}
 8000546:	b006      	add	sp, #24
 8000548:	bd70      	pop	{r4, r5, r6, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	20000200 	.word	0x20000200

08000550 <initEns160>:
#include "ens160.h"

extern I2C_HandleTypeDef hi2c1;

void initEns160() {
 8000550:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t txData = ENS160_OpMode_Run;
 8000552:	2217      	movs	r2, #23
 8000554:	2302      	movs	r3, #2
 8000556:	446a      	add	r2, sp
 8000558:	7013      	strb	r3, [r2, #0]
	int status = HAL_I2C_Mem_Write(&hi2c1, ENS160_DeviceAddress, ENS160_OpMode, 1, &txData, 1, 10);
 800055a:	3308      	adds	r3, #8
 800055c:	9302      	str	r3, [sp, #8]
 800055e:	3b09      	subs	r3, #9
 8000560:	9200      	str	r2, [sp, #0]
 8000562:	21a4      	movs	r1, #164	; 0xa4
 8000564:	2210      	movs	r2, #16
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <initEns160+0x24>)
 800056a:	f001 fba7 	bl	8001cbc <HAL_I2C_Mem_Write>
}
 800056e:	b007      	add	sp, #28
 8000570:	bd00      	pop	{pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	20000200 	.word	0x20000200

08000578 <BUZ>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void BUZ(uint8_t x){
 8000578:	0001      	movs	r1, r0
 800057a:	b510      	push	{r4, lr}
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <BUZ+0x18>)
	if(x) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800057e:	2900      	cmp	r1, #0
 8000580:	d003      	beq.n	800058a <BUZ+0x12>
 8000582:	2100      	movs	r1, #0
 8000584:	f002 fb24 	bl	8002bd0 <HAL_TIM_PWM_Start>
	else  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
}
 8000588:	bd10      	pop	{r4, pc}
	else  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800058a:	f002 fb25 	bl	8002bd8 <HAL_TIM_PWM_Stop>
}
 800058e:	e7fb      	b.n	8000588 <BUZ+0x10>
 8000590:	20000254 	.word	0x20000254

08000594 <nextion_inst_set>:
void nextion_inst_set(char* str){
 8000594:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t end_cmd[3] = { 0xFF, 0xFF, 0xFF };
 8000596:	2503      	movs	r5, #3
void nextion_inst_set(char* str){
 8000598:	0004      	movs	r4, r0
	uint8_t end_cmd[3] = { 0xFF, 0xFF, 0xFF };
 800059a:	002a      	movs	r2, r5
 800059c:	490a      	ldr	r1, [pc, #40]	; (80005c8 <nextion_inst_set+0x34>)
 800059e:	a801      	add	r0, sp, #4
 80005a0:	f002 ff66 	bl	8003470 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 80005a4:	0020      	movs	r0, r4
 80005a6:	f7ff fdaf 	bl	8000108 <strlen>
 80005aa:	4e08      	ldr	r6, [pc, #32]	; (80005cc <nextion_inst_set+0x38>)
 80005ac:	0021      	movs	r1, r4
 80005ae:	b282      	uxth	r2, r0
 80005b0:	2364      	movs	r3, #100	; 0x64
 80005b2:	0030      	movs	r0, r6
 80005b4:	f002 fdb5 	bl	8003122 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, end_cmd, 3, 100);
 80005b8:	002a      	movs	r2, r5
 80005ba:	0030      	movs	r0, r6
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	a901      	add	r1, sp, #4
 80005c0:	f002 fdaf 	bl	8003122 <HAL_UART_Transmit>
}
 80005c4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	08003d92 	.word	0x08003d92
 80005cc:	20000294 	.word	0x20000294

080005d0 <get_touch>:

void get_touch(POS_Typedef* buf){
	HAL_StatusTypeDef res = HAL_OK;
	uint8_t rx_dat[8] = { 0, };
 80005d0:	2300      	movs	r3, #0
void get_touch(POS_Typedef* buf){
 80005d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80005d4:	0004      	movs	r4, r0

	nextion_inst_set("get tch0");
 80005d6:	4819      	ldr	r0, [pc, #100]	; (800063c <get_touch+0x6c>)
	uint8_t rx_dat[8] = { 0, };
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	9301      	str	r3, [sp, #4]
	nextion_inst_set("get tch0");
 80005dc:	f7ff ffda 	bl	8000594 <nextion_inst_set>
	HAL_UART_Receive(&huart1, rx_dat, 8, 100);
 80005e0:	4d17      	ldr	r5, [pc, #92]	; (8000640 <get_touch+0x70>)
 80005e2:	2364      	movs	r3, #100	; 0x64
 80005e4:	2208      	movs	r2, #8
 80005e6:	4669      	mov	r1, sp
 80005e8:	0028      	movs	r0, r5
 80005ea:	f002 fe01 	bl	80031f0 <HAL_UART_Receive>
	if(res == HAL_OK) { if(rx_dat[0] == 0x71) buf->x = rx_dat[2] << 8 | rx_dat[1]; }
 80005ee:	466b      	mov	r3, sp
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b71      	cmp	r3, #113	; 0x71
 80005f4:	d105      	bne.n	8000602 <get_touch+0x32>
 80005f6:	466b      	mov	r3, sp
 80005f8:	7859      	ldrb	r1, [r3, #1]
 80005fa:	789b      	ldrb	r3, [r3, #2]
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	430b      	orrs	r3, r1
 8000600:	8023      	strh	r3, [r4, #0]

	nextion_inst_set("get tch1");
 8000602:	4810      	ldr	r0, [pc, #64]	; (8000644 <get_touch+0x74>)
 8000604:	f7ff ffc6 	bl	8000594 <nextion_inst_set>
	HAL_UART_Receive(&huart1, rx_dat, 8, 100);
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	2208      	movs	r2, #8
 800060c:	4669      	mov	r1, sp
 800060e:	0028      	movs	r0, r5
 8000610:	f002 fdee 	bl	80031f0 <HAL_UART_Receive>
	if(res == HAL_OK) { if(rx_dat[0] == 0x71) buf->y = rx_dat[2] << 8 | rx_dat[1]; }
 8000614:	466b      	mov	r3, sp
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b71      	cmp	r3, #113	; 0x71
 800061a:	d105      	bne.n	8000628 <get_touch+0x58>
 800061c:	466b      	mov	r3, sp
 800061e:	7859      	ldrb	r1, [r3, #1]
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	430b      	orrs	r3, r1
 8000626:	8063      	strh	r3, [r4, #2]

	if(buf->x > 0 && buf->y > 0) buf->touched = 1;
	else buf->touched = 0;
 8000628:	2300      	movs	r3, #0
	if(buf->x > 0 && buf->y > 0) buf->touched = 1;
 800062a:	8822      	ldrh	r2, [r4, #0]
 800062c:	429a      	cmp	r2, r3
 800062e:	d003      	beq.n	8000638 <get_touch+0x68>
 8000630:	8863      	ldrh	r3, [r4, #2]
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	4193      	sbcs	r3, r2
	else buf->touched = 0;
 8000636:	b2db      	uxtb	r3, r3
 8000638:	7123      	strb	r3, [r4, #4]
}
 800063a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800063c:	08003d96 	.word	0x08003d96
 8000640:	20000294 	.word	0x20000294
 8000644:	08003d9f 	.word	0x08003d9f

08000648 <area_check>:

uint8_t area_check(POS_Typedef* pos, AREA_Typedef* area){
 8000648:	b510      	push	{r4, lr}
	if(pos->x >= area->x0 && pos->x <= area->x1){
 800064a:	8802      	ldrh	r2, [r0, #0]
 800064c:	880c      	ldrh	r4, [r1, #0]
uint8_t area_check(POS_Typedef* pos, AREA_Typedef* area){
 800064e:	0003      	movs	r3, r0
		if(pos->y >= area->y0 && pos->y <= area->y1){
			return 1;
		}
	}
	return 0;
 8000650:	2000      	movs	r0, #0
	if(pos->x >= area->x0 && pos->x <= area->x1){
 8000652:	4294      	cmp	r4, r2
 8000654:	d80a      	bhi.n	800066c <area_check+0x24>
 8000656:	888c      	ldrh	r4, [r1, #4]
 8000658:	4294      	cmp	r4, r2
 800065a:	d307      	bcc.n	800066c <area_check+0x24>
 800065c:	885b      	ldrh	r3, [r3, #2]
		if(pos->y >= area->y0 && pos->y <= area->y1){
 800065e:	884a      	ldrh	r2, [r1, #2]
 8000660:	429a      	cmp	r2, r3
 8000662:	d803      	bhi.n	800066c <area_check+0x24>
 8000664:	88ca      	ldrh	r2, [r1, #6]
 8000666:	429a      	cmp	r2, r3
 8000668:	4140      	adcs	r0, r0
	return 0;
 800066a:	b2c0      	uxtb	r0, r0
}
 800066c:	bd10      	pop	{r4, pc}
	...

08000670 <keypad_read>:

uint8_t keypad_read(void){
 8000670:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i = 0 ; i < 10 ; i++){
 8000672:	2400      	movs	r4, #0
 8000674:	4d08      	ldr	r5, [pc, #32]	; (8000698 <keypad_read+0x28>)
		if(area_check(&curXY, &keypad[i].area)){
 8000676:	4e09      	ldr	r6, [pc, #36]	; (800069c <keypad_read+0x2c>)
 8000678:	3502      	adds	r5, #2
 800067a:	0029      	movs	r1, r5
 800067c:	0030      	movs	r0, r6
 800067e:	f7ff ffe3 	bl	8000648 <area_check>
			return i + 1;
 8000682:	3401      	adds	r4, #1
 8000684:	b2e4      	uxtb	r4, r4
		if(area_check(&curXY, &keypad[i].area)){
 8000686:	2800      	cmp	r0, #0
 8000688:	d103      	bne.n	8000692 <keypad_read+0x22>
	for(uint8_t i = 0 ; i < 10 ; i++){
 800068a:	350a      	adds	r5, #10
 800068c:	2c0a      	cmp	r4, #10
 800068e:	d1f4      	bne.n	800067a <keypad_read+0xa>
		}
	}
	return 0;
 8000690:	0004      	movs	r4, r0
}
 8000692:	0020      	movs	r0, r4
 8000694:	bd70      	pop	{r4, r5, r6, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	200000a0 	.word	0x200000a0
 800069c:	200001fa 	.word	0x200001fa

080006a0 <number_print>:

void number_print(POS_Typedef* print_xy, uint8_t* data){
 80006a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* 'a' box draw */
	sprintf(bf, "fill %d,%d,30,10,%s", print_xy->x + 10, print_xy->y, data[a] == 1 ? "BLACK" : "WHITE");
 80006a2:	8802      	ldrh	r2, [r0, #0]
void number_print(POS_Typedef* print_xy, uint8_t* data){
 80006a4:	0004      	movs	r4, r0
	sprintf(bf, "fill %d,%d,30,10,%s", print_xy->x + 10, print_xy->y, data[a] == 1 ? "BLACK" : "WHITE");
 80006a6:	8843      	ldrh	r3, [r0, #2]
 80006a8:	7808      	ldrb	r0, [r1, #0]
void number_print(POS_Typedef* print_xy, uint8_t* data){
 80006aa:	000e      	movs	r6, r1
	sprintf(bf, "fill %d,%d,30,10,%s", print_xy->x + 10, print_xy->y, data[a] == 1 ? "BLACK" : "WHITE");
 80006ac:	320a      	adds	r2, #10
 80006ae:	4975      	ldr	r1, [pc, #468]	; (8000884 <number_print+0x1e4>)
 80006b0:	2801      	cmp	r0, #1
 80006b2:	d000      	beq.n	80006b6 <number_print+0x16>
 80006b4:	4974      	ldr	r1, [pc, #464]	; (8000888 <number_print+0x1e8>)
 80006b6:	4d75      	ldr	r5, [pc, #468]	; (800088c <number_print+0x1ec>)
 80006b8:	9100      	str	r1, [sp, #0]
 80006ba:	0028      	movs	r0, r5
 80006bc:	4974      	ldr	r1, [pc, #464]	; (8000890 <number_print+0x1f0>)
 80006be:	f002 fee9 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 80006c2:	0028      	movs	r0, r5
 80006c4:	f7ff ff66 	bl	8000594 <nextion_inst_set>
	sprintf(bf, "draw %d,%d,%d,%d,BLACK", print_xy->x + 10, print_xy->y, print_xy->x + 10 + 30, print_xy->y + 10);
 80006c8:	8863      	ldrh	r3, [r4, #2]
 80006ca:	8821      	ldrh	r1, [r4, #0]
 80006cc:	0018      	movs	r0, r3
 80006ce:	000a      	movs	r2, r1
 80006d0:	300a      	adds	r0, #10
 80006d2:	3128      	adds	r1, #40	; 0x28
 80006d4:	320a      	adds	r2, #10
 80006d6:	9001      	str	r0, [sp, #4]
 80006d8:	9100      	str	r1, [sp, #0]
 80006da:	0028      	movs	r0, r5
 80006dc:	496d      	ldr	r1, [pc, #436]	; (8000894 <number_print+0x1f4>)
 80006de:	f002 fed9 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 80006e2:	0028      	movs	r0, r5
 80006e4:	f7ff ff56 	bl	8000594 <nextion_inst_set>

	/* 'b' box draw */
	sprintf(bf, "fill %d,%d,10,30,%s", print_xy->x + 40, print_xy->y + 10, data[b] == 1 ? "BLACK" : "WHITE");
 80006e8:	8822      	ldrh	r2, [r4, #0]
 80006ea:	8863      	ldrh	r3, [r4, #2]
 80006ec:	7870      	ldrb	r0, [r6, #1]
 80006ee:	4965      	ldr	r1, [pc, #404]	; (8000884 <number_print+0x1e4>)
 80006f0:	3228      	adds	r2, #40	; 0x28
 80006f2:	330a      	adds	r3, #10
 80006f4:	2801      	cmp	r0, #1
 80006f6:	d000      	beq.n	80006fa <number_print+0x5a>
 80006f8:	4963      	ldr	r1, [pc, #396]	; (8000888 <number_print+0x1e8>)
 80006fa:	4f67      	ldr	r7, [pc, #412]	; (8000898 <number_print+0x1f8>)
 80006fc:	9100      	str	r1, [sp, #0]
 80006fe:	0028      	movs	r0, r5
 8000700:	0039      	movs	r1, r7
 8000702:	f002 fec7 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 8000706:	0028      	movs	r0, r5
 8000708:	f7ff ff44 	bl	8000594 <nextion_inst_set>
	sprintf(bf, "draw %d,%d,%d,%d,BLACK", print_xy->x + 40, print_xy->y + 10, print_xy->x + 40 + 10, print_xy->y + 10 + 30);
 800070c:	8821      	ldrh	r1, [r4, #0]
 800070e:	8860      	ldrh	r0, [r4, #2]
 8000710:	000a      	movs	r2, r1
 8000712:	0003      	movs	r3, r0
 8000714:	3132      	adds	r1, #50	; 0x32
 8000716:	3028      	adds	r0, #40	; 0x28
 8000718:	330a      	adds	r3, #10
 800071a:	3228      	adds	r2, #40	; 0x28
 800071c:	9001      	str	r0, [sp, #4]
 800071e:	9100      	str	r1, [sp, #0]
 8000720:	0028      	movs	r0, r5
 8000722:	495c      	ldr	r1, [pc, #368]	; (8000894 <number_print+0x1f4>)
 8000724:	f002 feb6 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 8000728:	0028      	movs	r0, r5
 800072a:	f7ff ff33 	bl	8000594 <nextion_inst_set>

	/* 'c' box draw */
	sprintf(bf, "fill %d,%d,10,30,%s", print_xy->x + 40, print_xy->y + 50, data[c] == 1 ? "BLACK" : "WHITE");
 800072e:	8822      	ldrh	r2, [r4, #0]
 8000730:	8863      	ldrh	r3, [r4, #2]
 8000732:	78b0      	ldrb	r0, [r6, #2]
 8000734:	4953      	ldr	r1, [pc, #332]	; (8000884 <number_print+0x1e4>)
 8000736:	3228      	adds	r2, #40	; 0x28
 8000738:	3332      	adds	r3, #50	; 0x32
 800073a:	2801      	cmp	r0, #1
 800073c:	d000      	beq.n	8000740 <number_print+0xa0>
 800073e:	4952      	ldr	r1, [pc, #328]	; (8000888 <number_print+0x1e8>)
 8000740:	4d52      	ldr	r5, [pc, #328]	; (800088c <number_print+0x1ec>)
 8000742:	9100      	str	r1, [sp, #0]
 8000744:	0028      	movs	r0, r5
 8000746:	0039      	movs	r1, r7
 8000748:	f002 fea4 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 800074c:	0028      	movs	r0, r5
 800074e:	f7ff ff21 	bl	8000594 <nextion_inst_set>
	sprintf(bf, "draw %d,%d,%d,%d,BLACK", print_xy->x + 40, print_xy->y + 50, print_xy->x + 40 + 10, print_xy->y + 50 + 30);
 8000752:	8821      	ldrh	r1, [r4, #0]
 8000754:	8860      	ldrh	r0, [r4, #2]
 8000756:	000a      	movs	r2, r1
 8000758:	0003      	movs	r3, r0
 800075a:	3132      	adds	r1, #50	; 0x32
 800075c:	3050      	adds	r0, #80	; 0x50
 800075e:	3332      	adds	r3, #50	; 0x32
 8000760:	3228      	adds	r2, #40	; 0x28
 8000762:	9001      	str	r0, [sp, #4]
 8000764:	9100      	str	r1, [sp, #0]
 8000766:	0028      	movs	r0, r5
 8000768:	494a      	ldr	r1, [pc, #296]	; (8000894 <number_print+0x1f4>)
 800076a:	f002 fe93 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 800076e:	0028      	movs	r0, r5
 8000770:	f7ff ff10 	bl	8000594 <nextion_inst_set>

	/* 'd' box draw */
	sprintf(bf, "fill %d,%d,30,10,%s", print_xy->x + 10, print_xy->y + 80, data[d] == 1 ? "BLACK" : "WHITE");
 8000774:	8822      	ldrh	r2, [r4, #0]
 8000776:	8863      	ldrh	r3, [r4, #2]
 8000778:	78f0      	ldrb	r0, [r6, #3]
 800077a:	4942      	ldr	r1, [pc, #264]	; (8000884 <number_print+0x1e4>)
 800077c:	320a      	adds	r2, #10
 800077e:	3350      	adds	r3, #80	; 0x50
 8000780:	2801      	cmp	r0, #1
 8000782:	d000      	beq.n	8000786 <number_print+0xe6>
 8000784:	4940      	ldr	r1, [pc, #256]	; (8000888 <number_print+0x1e8>)
 8000786:	9100      	str	r1, [sp, #0]
 8000788:	0028      	movs	r0, r5
 800078a:	4941      	ldr	r1, [pc, #260]	; (8000890 <number_print+0x1f0>)
 800078c:	f002 fe82 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 8000790:	0028      	movs	r0, r5
 8000792:	f7ff feff 	bl	8000594 <nextion_inst_set>
	sprintf(bf, "draw %d,%d,%d,%d,BLACK", print_xy->x + 10, print_xy->y + 80, print_xy->x + 40, print_xy->y + 80 + 10);
 8000796:	8821      	ldrh	r1, [r4, #0]
 8000798:	8860      	ldrh	r0, [r4, #2]
 800079a:	000a      	movs	r2, r1
 800079c:	0003      	movs	r3, r0
 800079e:	3128      	adds	r1, #40	; 0x28
 80007a0:	305a      	adds	r0, #90	; 0x5a
 80007a2:	3350      	adds	r3, #80	; 0x50
 80007a4:	320a      	adds	r2, #10
 80007a6:	9001      	str	r0, [sp, #4]
 80007a8:	9100      	str	r1, [sp, #0]
 80007aa:	0028      	movs	r0, r5
 80007ac:	4939      	ldr	r1, [pc, #228]	; (8000894 <number_print+0x1f4>)
 80007ae:	f002 fe71 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 80007b2:	0028      	movs	r0, r5
 80007b4:	f7ff feee 	bl	8000594 <nextion_inst_set>

	/* 'e' box draw */
	sprintf(bf, "fill %d,%d,10,30,%s", print_xy->x, print_xy->y + 50, data[e] == 1 ? "BLACK" : "WHITE");
 80007b8:	8863      	ldrh	r3, [r4, #2]
 80007ba:	7930      	ldrb	r0, [r6, #4]
 80007bc:	8822      	ldrh	r2, [r4, #0]
 80007be:	4931      	ldr	r1, [pc, #196]	; (8000884 <number_print+0x1e4>)
 80007c0:	3332      	adds	r3, #50	; 0x32
 80007c2:	2801      	cmp	r0, #1
 80007c4:	d000      	beq.n	80007c8 <number_print+0x128>
 80007c6:	4930      	ldr	r1, [pc, #192]	; (8000888 <number_print+0x1e8>)
 80007c8:	4f33      	ldr	r7, [pc, #204]	; (8000898 <number_print+0x1f8>)
 80007ca:	9100      	str	r1, [sp, #0]
 80007cc:	0028      	movs	r0, r5
 80007ce:	0039      	movs	r1, r7
 80007d0:	f002 fe60 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 80007d4:	0028      	movs	r0, r5
 80007d6:	f7ff fedd 	bl	8000594 <nextion_inst_set>
	sprintf(bf, "draw %d,%d,%d,%d,BLACK", print_xy->x, print_xy->y + 50, print_xy->x + 10, print_xy->y + 50 + 30);
 80007da:	8861      	ldrh	r1, [r4, #2]
 80007dc:	8822      	ldrh	r2, [r4, #0]
 80007de:	000b      	movs	r3, r1
 80007e0:	3150      	adds	r1, #80	; 0x50
 80007e2:	9101      	str	r1, [sp, #4]
 80007e4:	0011      	movs	r1, r2
 80007e6:	310a      	adds	r1, #10
 80007e8:	3332      	adds	r3, #50	; 0x32
 80007ea:	9100      	str	r1, [sp, #0]
 80007ec:	0028      	movs	r0, r5
 80007ee:	4929      	ldr	r1, [pc, #164]	; (8000894 <number_print+0x1f4>)
 80007f0:	f002 fe50 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 80007f4:	0028      	movs	r0, r5
 80007f6:	f7ff fecd 	bl	8000594 <nextion_inst_set>

	/* 'f' box draw */
	sprintf(bf, "fill %d,%d,10,30,%s", print_xy->x, print_xy->y + 10, data[f] == 1 ? "BLACK" : "WHITE");
 80007fa:	8863      	ldrh	r3, [r4, #2]
 80007fc:	7970      	ldrb	r0, [r6, #5]
 80007fe:	8822      	ldrh	r2, [r4, #0]
 8000800:	4920      	ldr	r1, [pc, #128]	; (8000884 <number_print+0x1e4>)
 8000802:	330a      	adds	r3, #10
 8000804:	2801      	cmp	r0, #1
 8000806:	d000      	beq.n	800080a <number_print+0x16a>
 8000808:	491f      	ldr	r1, [pc, #124]	; (8000888 <number_print+0x1e8>)
 800080a:	9100      	str	r1, [sp, #0]
 800080c:	0028      	movs	r0, r5
 800080e:	0039      	movs	r1, r7
 8000810:	f002 fe40 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 8000814:	0028      	movs	r0, r5
 8000816:	f7ff febd 	bl	8000594 <nextion_inst_set>
	sprintf(bf, "draw %d,%d,%d,%d,BLACK", print_xy->x, print_xy->y + 10, print_xy->x + 10, print_xy->y + 10 + 30);
 800081a:	8861      	ldrh	r1, [r4, #2]
 800081c:	8822      	ldrh	r2, [r4, #0]
 800081e:	000b      	movs	r3, r1
 8000820:	3128      	adds	r1, #40	; 0x28
 8000822:	9101      	str	r1, [sp, #4]
 8000824:	0011      	movs	r1, r2
 8000826:	4f1b      	ldr	r7, [pc, #108]	; (8000894 <number_print+0x1f4>)
 8000828:	310a      	adds	r1, #10
 800082a:	330a      	adds	r3, #10
 800082c:	9100      	str	r1, [sp, #0]
 800082e:	0028      	movs	r0, r5
 8000830:	0039      	movs	r1, r7
 8000832:	f002 fe2f 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 8000836:	0028      	movs	r0, r5
 8000838:	f7ff feac 	bl	8000594 <nextion_inst_set>

	/* 'g' box draw */
	sprintf(bf, "fill %d,%d,30,10,%s", print_xy->x + 10, print_xy->y + 40, data[g] == 1 ? "BLACK" : "WHITE");
 800083c:	8822      	ldrh	r2, [r4, #0]
 800083e:	8863      	ldrh	r3, [r4, #2]
 8000840:	79b0      	ldrb	r0, [r6, #6]
 8000842:	4910      	ldr	r1, [pc, #64]	; (8000884 <number_print+0x1e4>)
 8000844:	320a      	adds	r2, #10
 8000846:	3328      	adds	r3, #40	; 0x28
 8000848:	2801      	cmp	r0, #1
 800084a:	d000      	beq.n	800084e <number_print+0x1ae>
 800084c:	490e      	ldr	r1, [pc, #56]	; (8000888 <number_print+0x1e8>)
 800084e:	4d0f      	ldr	r5, [pc, #60]	; (800088c <number_print+0x1ec>)
 8000850:	9100      	str	r1, [sp, #0]
 8000852:	0028      	movs	r0, r5
 8000854:	490e      	ldr	r1, [pc, #56]	; (8000890 <number_print+0x1f0>)
 8000856:	f002 fe1d 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 800085a:	0028      	movs	r0, r5
 800085c:	f7ff fe9a 	bl	8000594 <nextion_inst_set>
	sprintf(bf, "draw %d,%d,%d,%d,BLACK", print_xy->x + 10, print_xy->y + 40, print_xy->x + 10 + 30, print_xy->y + 40 + 10);
 8000860:	8821      	ldrh	r1, [r4, #0]
 8000862:	8860      	ldrh	r0, [r4, #2]
 8000864:	000a      	movs	r2, r1
 8000866:	0003      	movs	r3, r0
 8000868:	3128      	adds	r1, #40	; 0x28
 800086a:	3032      	adds	r0, #50	; 0x32
 800086c:	3328      	adds	r3, #40	; 0x28
 800086e:	320a      	adds	r2, #10
 8000870:	9001      	str	r0, [sp, #4]
 8000872:	9100      	str	r1, [sp, #0]
 8000874:	0028      	movs	r0, r5
 8000876:	0039      	movs	r1, r7
 8000878:	f002 fe0c 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 800087c:	0028      	movs	r0, r5
 800087e:	f7ff fe89 	bl	8000594 <nextion_inst_set>
}
 8000882:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000884:	08003e3d 	.word	0x08003e3d
 8000888:	0800407b 	.word	0x0800407b
 800088c:	20000194 	.word	0x20000194
 8000890:	08003da8 	.word	0x08003da8
 8000894:	08003dbc 	.word	0x08003dbc
 8000898:	08003dd3 	.word	0x08003dd3

0800089c <main_dis>:

void main_dis(TIME_Typedef* display_time, uint8_t* dot_state){
	uint8_t i = 0 ;

	while(i++ < 3){
 800089c:	2304      	movs	r3, #4
void main_dis(TIME_Typedef* display_time, uint8_t* dot_state){
 800089e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a0:	0004      	movs	r4, r0
 80008a2:	b087      	sub	sp, #28
 80008a4:	9103      	str	r1, [sp, #12]
	while(i++ < 3){
 80008a6:	9302      	str	r3, [sp, #8]
 80008a8:	9b02      	ldr	r3, [sp, #8]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d101      	bne.n	80008b8 <main_dis+0x1c>
		sprintf(bf, "fill 300,85,10,10,%s", *dot_state == 0 ? "WHITE" : "BLACK"); // second dot point
		nextion_inst_set(bf);
		sprintf(bf, "draw 300,85,300+10,85+10,BLACK");
		nextion_inst_set(bf);
	}
}
 80008b4:	b007      	add	sp, #28
 80008b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b8:	4ea9      	ldr	r6, [pc, #676]	; (8000b60 <main_dis+0x2c4>)
			sprintf(bf, "xstr %d,%d,100,30,0,WHITE,%s,1,1,1,\"%s\"", button_data[i].area.x0, button_data[i].area.y0, button_data[i].color, button_data[i].name);
 80008ba:	68f1      	ldr	r1, [r6, #12]
 80008bc:	8873      	ldrh	r3, [r6, #2]
 80008be:	8832      	ldrh	r2, [r6, #0]
 80008c0:	9101      	str	r1, [sp, #4]
 80008c2:	4da8      	ldr	r5, [pc, #672]	; (8000b64 <main_dis+0x2c8>)
 80008c4:	68b1      	ldr	r1, [r6, #8]
 80008c6:	0028      	movs	r0, r5
 80008c8:	9100      	str	r1, [sp, #0]
 80008ca:	49a7      	ldr	r1, [pc, #668]	; (8000b68 <main_dis+0x2cc>)
 80008cc:	f002 fde2 	bl	8003494 <siprintf>
			nextion_inst_set(bf);
 80008d0:	0028      	movs	r0, r5
 80008d2:	f7ff fe5f 	bl	8000594 <nextion_inst_set>
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", button_data[i].area.x0, button_data[i].area.y0, button_data[i].area.x1, button_data[i].area.y1);
 80008d6:	88f1      	ldrh	r1, [r6, #6]
 80008d8:	8873      	ldrh	r3, [r6, #2]
 80008da:	8832      	ldrh	r2, [r6, #0]
 80008dc:	9101      	str	r1, [sp, #4]
 80008de:	88b1      	ldrh	r1, [r6, #4]
 80008e0:	4fa2      	ldr	r7, [pc, #648]	; (8000b6c <main_dis+0x2d0>)
 80008e2:	9100      	str	r1, [sp, #0]
 80008e4:	0028      	movs	r0, r5
 80008e6:	0039      	movs	r1, r7
 80008e8:	f002 fdd4 	bl	8003494 <siprintf>
			nextion_inst_set(bf);
 80008ec:	0028      	movs	r0, r5
 80008ee:	f7ff fe51 	bl	8000594 <nextion_inst_set>
		for(uint8_t i = 0 ; i < 2 ; i++){
 80008f2:	4b9f      	ldr	r3, [pc, #636]	; (8000b70 <main_dis+0x2d4>)
 80008f4:	3610      	adds	r6, #16
 80008f6:	42b3      	cmp	r3, r6
 80008f8:	d1df      	bne.n	80008ba <main_dis+0x1e>
		POS_Typedef print_xy = { 180, 25, 0 };
 80008fa:	2206      	movs	r2, #6
 80008fc:	499d      	ldr	r1, [pc, #628]	; (8000b74 <main_dis+0x2d8>)
 80008fe:	a804      	add	r0, sp, #16
 8000900:	f002 fdb6 	bl	8003470 <memcpy>
		sprintf(bf, "draw %d,%d,%d,%d,BLACK", print_xy.x - 20, print_xy.y - 5, print_xy.x + 270, print_xy.y + 95);
 8000904:	2378      	movs	r3, #120	; 0x78
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	334b      	adds	r3, #75	; 0x4b
 800090a:	33ff      	adds	r3, #255	; 0xff
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	3baf      	subs	r3, #175	; 0xaf
 8000910:	3bff      	subs	r3, #255	; 0xff
 8000912:	22a0      	movs	r2, #160	; 0xa0
 8000914:	0039      	movs	r1, r7
 8000916:	0028      	movs	r0, r5
 8000918:	f002 fdbc 	bl	8003494 <siprintf>
		nextion_inst_set(bf);
 800091c:	0028      	movs	r0, r5
 800091e:	f7ff fe39 	bl	8000594 <nextion_inst_set>
		number_print(&print_xy, big_num_font[input_state == hour_input ? set_time.time1 : (display_time->time1 / 10) > 0 ? display_time->time1 / 10 : 10]);  // time1 left number
 8000922:	4e95      	ldr	r6, [pc, #596]	; (8000b78 <main_dis+0x2dc>)
 8000924:	7833      	ldrb	r3, [r6, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d000      	beq.n	800092c <main_dis+0x90>
 800092a:	e0c8      	b.n	8000abe <main_dis+0x222>
 800092c:	4b93      	ldr	r3, [pc, #588]	; (8000b7c <main_dis+0x2e0>)
 800092e:	7819      	ldrb	r1, [r3, #0]
 8000930:	2007      	movs	r0, #7
 8000932:	4341      	muls	r1, r0
 8000934:	4f92      	ldr	r7, [pc, #584]	; (8000b80 <main_dis+0x2e4>)
 8000936:	a804      	add	r0, sp, #16
 8000938:	1879      	adds	r1, r7, r1
 800093a:	f7ff feb1 	bl	80006a0 <number_print>
		number_print(&print_xy, big_num_font[input_state == hour_input ? set_time.time1 : (display_time->time1 / 10) > 0 ? display_time->time1 / 10 : 10]);
 800093e:	7833      	ldrb	r3, [r6, #0]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d000      	beq.n	8000946 <main_dis+0xaa>
 8000944:	e0c4      	b.n	8000ad0 <main_dis+0x234>
 8000946:	4b8d      	ldr	r3, [pc, #564]	; (8000b7c <main_dis+0x2e0>)
 8000948:	7819      	ldrb	r1, [r3, #0]
 800094a:	2007      	movs	r0, #7
 800094c:	4341      	muls	r1, r0
 800094e:	a804      	add	r0, sp, #16
 8000950:	1879      	adds	r1, r7, r1
 8000952:	f7ff fea5 	bl	80006a0 <number_print>
		number_print(&print_xy, big_num_font[input_state == hour_input ? set_time.time1 : (display_time->time1 / 10) > 0 ? display_time->time1 / 10 : 10]);
 8000956:	7833      	ldrb	r3, [r6, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d000      	beq.n	800095e <main_dis+0xc2>
 800095c:	e0c1      	b.n	8000ae2 <main_dis+0x246>
 800095e:	4b87      	ldr	r3, [pc, #540]	; (8000b7c <main_dis+0x2e0>)
 8000960:	7819      	ldrb	r1, [r3, #0]
 8000962:	2007      	movs	r0, #7
 8000964:	4341      	muls	r1, r0
 8000966:	4f86      	ldr	r7, [pc, #536]	; (8000b80 <main_dis+0x2e4>)
 8000968:	a804      	add	r0, sp, #16
 800096a:	1879      	adds	r1, r7, r1
 800096c:	f7ff fe98 	bl	80006a0 <number_print>
		print_xy.x +=60;
 8000970:	ab02      	add	r3, sp, #8
 8000972:	891b      	ldrh	r3, [r3, #8]
 8000974:	aa02      	add	r2, sp, #8
 8000976:	333c      	adds	r3, #60	; 0x3c
 8000978:	8113      	strh	r3, [r2, #8]
		number_print(&print_xy, big_num_font[input_state == hour_input ? set_time.time2 : display_time->time1 % 10]);  // time1 right number
 800097a:	7833      	ldrb	r3, [r6, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d000      	beq.n	8000982 <main_dis+0xe6>
 8000980:	e0b8      	b.n	8000af4 <main_dis+0x258>
 8000982:	4b7e      	ldr	r3, [pc, #504]	; (8000b7c <main_dis+0x2e0>)
 8000984:	7859      	ldrb	r1, [r3, #1]
 8000986:	2307      	movs	r3, #7
 8000988:	4359      	muls	r1, r3
 800098a:	a804      	add	r0, sp, #16
 800098c:	1879      	adds	r1, r7, r1
 800098e:	f7ff fe87 	bl	80006a0 <number_print>
		number_print(&print_xy, big_num_font[input_state == hour_input ? set_time.time2 : display_time->time1 % 10]);
 8000992:	7833      	ldrb	r3, [r6, #0]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d000      	beq.n	800099a <main_dis+0xfe>
 8000998:	e0b2      	b.n	8000b00 <main_dis+0x264>
 800099a:	4b78      	ldr	r3, [pc, #480]	; (8000b7c <main_dis+0x2e0>)
 800099c:	785b      	ldrb	r3, [r3, #1]
 800099e:	2107      	movs	r1, #7
 80009a0:	4359      	muls	r1, r3
 80009a2:	4f77      	ldr	r7, [pc, #476]	; (8000b80 <main_dis+0x2e4>)
 80009a4:	a804      	add	r0, sp, #16
 80009a6:	1879      	adds	r1, r7, r1
 80009a8:	f7ff fe7a 	bl	80006a0 <number_print>
		number_print(&print_xy, big_num_font[input_state == hour_input ? set_time.time2 : display_time->time1 % 10]);
 80009ac:	7833      	ldrb	r3, [r6, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d000      	beq.n	80009b4 <main_dis+0x118>
 80009b2:	e0ab      	b.n	8000b0c <main_dis+0x270>
 80009b4:	4b71      	ldr	r3, [pc, #452]	; (8000b7c <main_dis+0x2e0>)
 80009b6:	7859      	ldrb	r1, [r3, #1]
 80009b8:	2307      	movs	r3, #7
 80009ba:	4359      	muls	r1, r3
 80009bc:	a804      	add	r0, sp, #16
 80009be:	1879      	adds	r1, r7, r1
 80009c0:	f7ff fe6e 	bl	80006a0 <number_print>
		print_xy.x += 80;
 80009c4:	ab02      	add	r3, sp, #8
 80009c6:	891b      	ldrh	r3, [r3, #8]
 80009c8:	aa02      	add	r2, sp, #8
 80009ca:	3350      	adds	r3, #80	; 0x50
 80009cc:	8113      	strh	r3, [r2, #8]
		number_print(&print_xy, big_num_font[input_state == min_input ? set_time.time1 : display_time->time2 / 10]);  // time2 left number
 80009ce:	7833      	ldrb	r3, [r6, #0]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d000      	beq.n	80009d6 <main_dis+0x13a>
 80009d4:	e0a0      	b.n	8000b18 <main_dis+0x27c>
 80009d6:	4b69      	ldr	r3, [pc, #420]	; (8000b7c <main_dis+0x2e0>)
 80009d8:	7818      	ldrb	r0, [r3, #0]
 80009da:	2107      	movs	r1, #7
 80009dc:	4341      	muls	r1, r0
 80009de:	4f68      	ldr	r7, [pc, #416]	; (8000b80 <main_dis+0x2e4>)
 80009e0:	a804      	add	r0, sp, #16
 80009e2:	1879      	adds	r1, r7, r1
 80009e4:	f7ff fe5c 	bl	80006a0 <number_print>
		number_print(&print_xy, big_num_font[input_state == min_input ? set_time.time1 : display_time->time2 / 10]);
 80009e8:	7833      	ldrb	r3, [r6, #0]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d000      	beq.n	80009f0 <main_dis+0x154>
 80009ee:	e099      	b.n	8000b24 <main_dis+0x288>
 80009f0:	4b62      	ldr	r3, [pc, #392]	; (8000b7c <main_dis+0x2e0>)
 80009f2:	7818      	ldrb	r0, [r3, #0]
 80009f4:	2107      	movs	r1, #7
 80009f6:	4341      	muls	r1, r0
 80009f8:	a804      	add	r0, sp, #16
 80009fa:	1879      	adds	r1, r7, r1
 80009fc:	f7ff fe50 	bl	80006a0 <number_print>
		number_print(&print_xy, big_num_font[input_state == min_input ? set_time.time1 : display_time->time2 / 10]);
 8000a00:	7833      	ldrb	r3, [r6, #0]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d000      	beq.n	8000a08 <main_dis+0x16c>
 8000a06:	e093      	b.n	8000b30 <main_dis+0x294>
 8000a08:	4b5c      	ldr	r3, [pc, #368]	; (8000b7c <main_dis+0x2e0>)
 8000a0a:	7818      	ldrb	r0, [r3, #0]
 8000a0c:	2107      	movs	r1, #7
 8000a0e:	4341      	muls	r1, r0
 8000a10:	4f5b      	ldr	r7, [pc, #364]	; (8000b80 <main_dis+0x2e4>)
 8000a12:	a804      	add	r0, sp, #16
 8000a14:	1879      	adds	r1, r7, r1
 8000a16:	f7ff fe43 	bl	80006a0 <number_print>
		print_xy.x += 60;
 8000a1a:	ab02      	add	r3, sp, #8
 8000a1c:	891b      	ldrh	r3, [r3, #8]
 8000a1e:	aa02      	add	r2, sp, #8
 8000a20:	333c      	adds	r3, #60	; 0x3c
 8000a22:	8113      	strh	r3, [r2, #8]
		number_print(&print_xy, big_num_font[input_state == min_input ? set_time.time2 : display_time->time2 % 10]);  // time2 right number
 8000a24:	7833      	ldrb	r3, [r6, #0]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d000      	beq.n	8000a2c <main_dis+0x190>
 8000a2a:	e087      	b.n	8000b3c <main_dis+0x2a0>
 8000a2c:	4b53      	ldr	r3, [pc, #332]	; (8000b7c <main_dis+0x2e0>)
 8000a2e:	7859      	ldrb	r1, [r3, #1]
 8000a30:	2307      	movs	r3, #7
 8000a32:	4359      	muls	r1, r3
 8000a34:	a804      	add	r0, sp, #16
 8000a36:	1879      	adds	r1, r7, r1
 8000a38:	f7ff fe32 	bl	80006a0 <number_print>
		number_print(&print_xy, big_num_font[input_state == min_input ? set_time.time2 : display_time->time2 % 10]);
 8000a3c:	7833      	ldrb	r3, [r6, #0]
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d000      	beq.n	8000a44 <main_dis+0x1a8>
 8000a42:	e081      	b.n	8000b48 <main_dis+0x2ac>
 8000a44:	4b4d      	ldr	r3, [pc, #308]	; (8000b7c <main_dis+0x2e0>)
 8000a46:	785b      	ldrb	r3, [r3, #1]
 8000a48:	2107      	movs	r1, #7
 8000a4a:	4359      	muls	r1, r3
 8000a4c:	4f4c      	ldr	r7, [pc, #304]	; (8000b80 <main_dis+0x2e4>)
 8000a4e:	a804      	add	r0, sp, #16
 8000a50:	1879      	adds	r1, r7, r1
 8000a52:	f7ff fe25 	bl	80006a0 <number_print>
		number_print(&print_xy, big_num_font[input_state == min_input ? set_time.time2 : display_time->time2 % 10]);
 8000a56:	7833      	ldrb	r3, [r6, #0]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d17b      	bne.n	8000b54 <main_dis+0x2b8>
 8000a5c:	4b47      	ldr	r3, [pc, #284]	; (8000b7c <main_dis+0x2e0>)
 8000a5e:	7859      	ldrb	r1, [r3, #1]
 8000a60:	2307      	movs	r3, #7
 8000a62:	4359      	muls	r1, r3
 8000a64:	a804      	add	r0, sp, #16
 8000a66:	1879      	adds	r1, r7, r1
 8000a68:	f7ff fe1a 	bl	80006a0 <number_print>
		sprintf(bf, "fill 300,45,10,10,%s", *dot_state == 0 ? "WHITE" : "BLACK"); // first dot point
 8000a6c:	9b03      	ldr	r3, [sp, #12]
 8000a6e:	4a45      	ldr	r2, [pc, #276]	; (8000b84 <main_dis+0x2e8>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d000      	beq.n	8000a78 <main_dis+0x1dc>
 8000a76:	4a44      	ldr	r2, [pc, #272]	; (8000b88 <main_dis+0x2ec>)
 8000a78:	4944      	ldr	r1, [pc, #272]	; (8000b8c <main_dis+0x2f0>)
 8000a7a:	0028      	movs	r0, r5
 8000a7c:	f002 fd0a 	bl	8003494 <siprintf>
		nextion_inst_set(bf);
 8000a80:	0028      	movs	r0, r5
 8000a82:	f7ff fd87 	bl	8000594 <nextion_inst_set>
		sprintf(bf, "draw 300,45,300+10,45+10,BLACK");
 8000a86:	4942      	ldr	r1, [pc, #264]	; (8000b90 <main_dis+0x2f4>)
 8000a88:	0028      	movs	r0, r5
 8000a8a:	f002 fd23 	bl	80034d4 <strcpy>
		nextion_inst_set(bf);
 8000a8e:	0028      	movs	r0, r5
 8000a90:	f7ff fd80 	bl	8000594 <nextion_inst_set>
		sprintf(bf, "fill 300,85,10,10,%s", *dot_state == 0 ? "WHITE" : "BLACK"); // second dot point
 8000a94:	9b03      	ldr	r3, [sp, #12]
 8000a96:	4a3b      	ldr	r2, [pc, #236]	; (8000b84 <main_dis+0x2e8>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d000      	beq.n	8000aa0 <main_dis+0x204>
 8000a9e:	4a3a      	ldr	r2, [pc, #232]	; (8000b88 <main_dis+0x2ec>)
 8000aa0:	493c      	ldr	r1, [pc, #240]	; (8000b94 <main_dis+0x2f8>)
 8000aa2:	0028      	movs	r0, r5
 8000aa4:	f002 fcf6 	bl	8003494 <siprintf>
		nextion_inst_set(bf);
 8000aa8:	0028      	movs	r0, r5
 8000aaa:	f7ff fd73 	bl	8000594 <nextion_inst_set>
		sprintf(bf, "draw 300,85,300+10,85+10,BLACK");
 8000aae:	0028      	movs	r0, r5
 8000ab0:	4939      	ldr	r1, [pc, #228]	; (8000b98 <main_dis+0x2fc>)
 8000ab2:	f002 fd0f 	bl	80034d4 <strcpy>
		nextion_inst_set(bf);
 8000ab6:	0028      	movs	r0, r5
 8000ab8:	f7ff fd6c 	bl	8000594 <nextion_inst_set>
 8000abc:	e6f4      	b.n	80008a8 <main_dis+0xc>
		number_print(&print_xy, big_num_font[input_state == hour_input ? set_time.time1 : (display_time->time1 / 10) > 0 ? display_time->time1 / 10 : 10]);  // time1 left number
 8000abe:	7820      	ldrb	r0, [r4, #0]
 8000ac0:	210a      	movs	r1, #10
 8000ac2:	2809      	cmp	r0, #9
 8000ac4:	d800      	bhi.n	8000ac8 <main_dis+0x22c>
 8000ac6:	e733      	b.n	8000930 <main_dis+0x94>
 8000ac8:	f7ff fb3a 	bl	8000140 <__udivsi3>
 8000acc:	b2c1      	uxtb	r1, r0
 8000ace:	e72f      	b.n	8000930 <main_dis+0x94>
		number_print(&print_xy, big_num_font[input_state == hour_input ? set_time.time1 : (display_time->time1 / 10) > 0 ? display_time->time1 / 10 : 10]);
 8000ad0:	7820      	ldrb	r0, [r4, #0]
 8000ad2:	210a      	movs	r1, #10
 8000ad4:	2809      	cmp	r0, #9
 8000ad6:	d800      	bhi.n	8000ada <main_dis+0x23e>
 8000ad8:	e737      	b.n	800094a <main_dis+0xae>
 8000ada:	f7ff fb31 	bl	8000140 <__udivsi3>
 8000ade:	b2c1      	uxtb	r1, r0
 8000ae0:	e733      	b.n	800094a <main_dis+0xae>
		number_print(&print_xy, big_num_font[input_state == hour_input ? set_time.time1 : (display_time->time1 / 10) > 0 ? display_time->time1 / 10 : 10]);
 8000ae2:	7820      	ldrb	r0, [r4, #0]
 8000ae4:	210a      	movs	r1, #10
 8000ae6:	2809      	cmp	r0, #9
 8000ae8:	d800      	bhi.n	8000aec <main_dis+0x250>
 8000aea:	e73a      	b.n	8000962 <main_dis+0xc6>
 8000aec:	f7ff fb28 	bl	8000140 <__udivsi3>
 8000af0:	b2c1      	uxtb	r1, r0
 8000af2:	e736      	b.n	8000962 <main_dis+0xc6>
		number_print(&print_xy, big_num_font[input_state == hour_input ? set_time.time2 : display_time->time1 % 10]);  // time1 right number
 8000af4:	210a      	movs	r1, #10
 8000af6:	7820      	ldrb	r0, [r4, #0]
 8000af8:	f7ff fba8 	bl	800024c <__aeabi_uidivmod>
 8000afc:	b2c9      	uxtb	r1, r1
 8000afe:	e742      	b.n	8000986 <main_dis+0xea>
		number_print(&print_xy, big_num_font[input_state == hour_input ? set_time.time2 : display_time->time1 % 10]);
 8000b00:	210a      	movs	r1, #10
 8000b02:	7820      	ldrb	r0, [r4, #0]
 8000b04:	f7ff fba2 	bl	800024c <__aeabi_uidivmod>
 8000b08:	b2cb      	uxtb	r3, r1
 8000b0a:	e748      	b.n	800099e <main_dis+0x102>
		number_print(&print_xy, big_num_font[input_state == hour_input ? set_time.time2 : display_time->time1 % 10]);
 8000b0c:	210a      	movs	r1, #10
 8000b0e:	7820      	ldrb	r0, [r4, #0]
 8000b10:	f7ff fb9c 	bl	800024c <__aeabi_uidivmod>
 8000b14:	b2c9      	uxtb	r1, r1
 8000b16:	e74f      	b.n	80009b8 <main_dis+0x11c>
		number_print(&print_xy, big_num_font[input_state == min_input ? set_time.time1 : display_time->time2 / 10]);  // time2 left number
 8000b18:	210a      	movs	r1, #10
 8000b1a:	7860      	ldrb	r0, [r4, #1]
 8000b1c:	f7ff fb10 	bl	8000140 <__udivsi3>
 8000b20:	b2c0      	uxtb	r0, r0
 8000b22:	e75a      	b.n	80009da <main_dis+0x13e>
		number_print(&print_xy, big_num_font[input_state == min_input ? set_time.time1 : display_time->time2 / 10]);
 8000b24:	210a      	movs	r1, #10
 8000b26:	7860      	ldrb	r0, [r4, #1]
 8000b28:	f7ff fb0a 	bl	8000140 <__udivsi3>
 8000b2c:	b2c0      	uxtb	r0, r0
 8000b2e:	e761      	b.n	80009f4 <main_dis+0x158>
		number_print(&print_xy, big_num_font[input_state == min_input ? set_time.time1 : display_time->time2 / 10]);
 8000b30:	210a      	movs	r1, #10
 8000b32:	7860      	ldrb	r0, [r4, #1]
 8000b34:	f7ff fb04 	bl	8000140 <__udivsi3>
 8000b38:	b2c0      	uxtb	r0, r0
 8000b3a:	e767      	b.n	8000a0c <main_dis+0x170>
		number_print(&print_xy, big_num_font[input_state == min_input ? set_time.time2 : display_time->time2 % 10]);  // time2 right number
 8000b3c:	210a      	movs	r1, #10
 8000b3e:	7860      	ldrb	r0, [r4, #1]
 8000b40:	f7ff fb84 	bl	800024c <__aeabi_uidivmod>
 8000b44:	b2c9      	uxtb	r1, r1
 8000b46:	e773      	b.n	8000a30 <main_dis+0x194>
		number_print(&print_xy, big_num_font[input_state == min_input ? set_time.time2 : display_time->time2 % 10]);
 8000b48:	210a      	movs	r1, #10
 8000b4a:	7860      	ldrb	r0, [r4, #1]
 8000b4c:	f7ff fb7e 	bl	800024c <__aeabi_uidivmod>
 8000b50:	b2cb      	uxtb	r3, r1
 8000b52:	e779      	b.n	8000a48 <main_dis+0x1ac>
		number_print(&print_xy, big_num_font[input_state == min_input ? set_time.time2 : display_time->time2 % 10]);
 8000b54:	210a      	movs	r1, #10
 8000b56:	7860      	ldrb	r0, [r4, #1]
 8000b58:	f7ff fb78 	bl	800024c <__aeabi_uidivmod>
 8000b5c:	b2c9      	uxtb	r1, r1
 8000b5e:	e77f      	b.n	8000a60 <main_dis+0x1c4>
 8000b60:	20000050 	.word	0x20000050
 8000b64:	20000194 	.word	0x20000194
 8000b68:	08003de7 	.word	0x08003de7
 8000b6c:	08003dbc 	.word	0x08003dbc
 8000b70:	20000070 	.word	0x20000070
 8000b74:	08003d7c 	.word	0x08003d7c
 8000b78:	2000031c 	.word	0x2000031c
 8000b7c:	20000104 	.word	0x20000104
 8000b80:	20000000 	.word	0x20000000
 8000b84:	0800407b 	.word	0x0800407b
 8000b88:	08003e3d 	.word	0x08003e3d
 8000b8c:	08003e0f 	.word	0x08003e0f
 8000b90:	08003e24 	.word	0x08003e24
 8000b94:	08003e43 	.word	0x08003e43
 8000b98:	08003e58 	.word	0x08003e58

08000b9c <button_draw>:

void button_draw(AREA_Typedef* print_xy, char* color, char* name){
 8000b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9e:	0004      	movs	r4, r0
 8000ba0:	000e      	movs	r6, r1
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	9203      	str	r2, [sp, #12]
	/* circle draw */
	sprintf(bf, "cirs %d,%d,15,%s", print_xy->x0, print_xy->y0 + 15, color);
 8000ba6:	4d13      	ldr	r5, [pc, #76]	; (8000bf4 <button_draw+0x58>)
 8000ba8:	8843      	ldrh	r3, [r0, #2]
 8000baa:	4f13      	ldr	r7, [pc, #76]	; (8000bf8 <button_draw+0x5c>)
 8000bac:	8802      	ldrh	r2, [r0, #0]
 8000bae:	330f      	adds	r3, #15
 8000bb0:	9100      	str	r1, [sp, #0]
 8000bb2:	0028      	movs	r0, r5
 8000bb4:	0039      	movs	r1, r7
 8000bb6:	f002 fc6d 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 8000bba:	0028      	movs	r0, r5
 8000bbc:	f7ff fcea 	bl	8000594 <nextion_inst_set>
	sprintf(bf, "cirs %d,%d,15,%s", print_xy->x0 + 80, print_xy->y0 + 15, color);
 8000bc0:	8863      	ldrh	r3, [r4, #2]
 8000bc2:	8822      	ldrh	r2, [r4, #0]
 8000bc4:	0039      	movs	r1, r7
 8000bc6:	330f      	adds	r3, #15
 8000bc8:	3250      	adds	r2, #80	; 0x50
 8000bca:	0028      	movs	r0, r5
 8000bcc:	9600      	str	r6, [sp, #0]
 8000bce:	f002 fc61 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 8000bd2:	0028      	movs	r0, r5
 8000bd4:	f7ff fcde 	bl	8000594 <nextion_inst_set>

	/* rectangle draw */
	sprintf(bf, "xstr %d,%d,80,30,0,WHITE,%s,1,1,1,\"%s\"", print_xy->x0, print_xy->y0, color, name);
 8000bd8:	9903      	ldr	r1, [sp, #12]
 8000bda:	8863      	ldrh	r3, [r4, #2]
 8000bdc:	8822      	ldrh	r2, [r4, #0]
 8000bde:	9101      	str	r1, [sp, #4]
 8000be0:	0028      	movs	r0, r5
 8000be2:	4906      	ldr	r1, [pc, #24]	; (8000bfc <button_draw+0x60>)
 8000be4:	9600      	str	r6, [sp, #0]
 8000be6:	f002 fc55 	bl	8003494 <siprintf>
	nextion_inst_set(bf);
 8000bea:	0028      	movs	r0, r5
 8000bec:	f7ff fcd2 	bl	8000594 <nextion_inst_set>
}
 8000bf0:	b005      	add	sp, #20
 8000bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf4:	20000194 	.word	0x20000194
 8000bf8:	08003e77 	.word	0x08003e77
 8000bfc:	08003e88 	.word	0x08003e88

08000c00 <swap>:

void swap(LOG_Typedef* a, LOG_Typedef* b){
 8000c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c02:	000c      	movs	r4, r1
	LOG_Typedef temp = *a;
 8000c04:	78c3      	ldrb	r3, [r0, #3]
 8000c06:	7846      	ldrb	r6, [r0, #1]
 8000c08:	7885      	ldrb	r5, [r0, #2]
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	7903      	ldrb	r3, [r0, #4]
	*a = *b;
 8000c0e:	2205      	movs	r2, #5
	LOG_Typedef temp = *a;
 8000c10:	7807      	ldrb	r7, [r0, #0]
 8000c12:	9301      	str	r3, [sp, #4]
	*a = *b;
 8000c14:	f002 fc2c 	bl	8003470 <memcpy>
	*b = temp;
 8000c18:	9b00      	ldr	r3, [sp, #0]
 8000c1a:	7027      	strb	r7, [r4, #0]
 8000c1c:	70e3      	strb	r3, [r4, #3]
 8000c1e:	9b01      	ldr	r3, [sp, #4]
 8000c20:	7066      	strb	r6, [r4, #1]
 8000c22:	70a5      	strb	r5, [r4, #2]
 8000c24:	7123      	strb	r3, [r4, #4]
}
 8000c26:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08000c28 <log_save>:

void log_save(STOP_WATCH_Typedef* buf){
 8000c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2a:	4e18      	ldr	r6, [pc, #96]	; (8000c8c <log_save+0x64>)
 8000c2c:	0004      	movs	r4, r0
 8000c2e:	0035      	movs	r5, r6
 8000c30:	360a      	adds	r6, #10
 8000c32:	3519      	adds	r5, #25
	static uint8_t cnt = 0;

	for(uint8_t i = 3 ; i > 0 ; i--){
		swap(&stop_watch_mode.log[i], &stop_watch_mode.log[i - 1]);
 8000c34:	002f      	movs	r7, r5
 8000c36:	3d05      	subs	r5, #5
 8000c38:	0029      	movs	r1, r5
 8000c3a:	0038      	movs	r0, r7
 8000c3c:	f7ff ffe0 	bl	8000c00 <swap>
		if(cnt == 3) stop_watch_mode.log[i].laps--;
 8000c40:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <log_save+0x68>)
 8000c42:	7813      	ldrb	r3, [r2, #0]
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d102      	bne.n	8000c4e <log_save+0x26>
 8000c48:	7839      	ldrb	r1, [r7, #0]
 8000c4a:	3901      	subs	r1, #1
 8000c4c:	7039      	strb	r1, [r7, #0]
	for(uint8_t i = 3 ; i > 0 ; i--){
 8000c4e:	42b5      	cmp	r5, r6
 8000c50:	d1f0      	bne.n	8000c34 <log_save+0xc>
	}

	if(cnt < 3) cnt++;
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d801      	bhi.n	8000c5a <log_save+0x32>
 8000c56:	3301      	adds	r3, #1
 8000c58:	7013      	strb	r3, [r2, #0]
	buf->log[0].laps = cnt;

	buf->log[0].total = buf->time;
 8000c5a:	0021      	movs	r1, r4
 8000c5c:	0020      	movs	r0, r4
	buf->log[0].laps = cnt;
 8000c5e:	7813      	ldrb	r3, [r2, #0]
	buf->log[0].total = buf->time;
 8000c60:	3108      	adds	r1, #8
 8000c62:	2202      	movs	r2, #2
	buf->log[0].laps = cnt;
 8000c64:	72a3      	strb	r3, [r4, #10]
	buf->log[0].total = buf->time;
 8000c66:	300d      	adds	r0, #13
 8000c68:	f002 fc02 	bl	8003470 <memcpy>
	buf->log[0].time.time1 = buf->log[0].total.time1 - buf->log[1].total.time1;
 8000c6c:	7ca3      	ldrb	r3, [r4, #18]
 8000c6e:	7b62      	ldrb	r2, [r4, #13]
	if(buf->log[1].total.time2 > buf->log[0].total.time2){
 8000c70:	7ce1      	ldrb	r1, [r4, #19]
	buf->log[0].time.time1 = buf->log[0].total.time1 - buf->log[1].total.time1;
 8000c72:	1ad2      	subs	r2, r2, r3
	if(buf->log[1].total.time2 > buf->log[0].total.time2){
 8000c74:	7ba3      	ldrb	r3, [r4, #14]
	buf->log[0].time.time1 = buf->log[0].total.time1 - buf->log[1].total.time1;
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	72e2      	strb	r2, [r4, #11]
	if(buf->log[1].total.time2 > buf->log[0].total.time2){
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	d902      	bls.n	8000c84 <log_save+0x5c>
		buf->log[0].time.time1--;
 8000c7e:	3a01      	subs	r2, #1
 8000c80:	72e2      	strb	r2, [r4, #11]
		buf->log[0].time.time2 = (60 + buf->log[0].total.time2) - buf->log[1].total.time2;
 8000c82:	333c      	adds	r3, #60	; 0x3c
	}
	else{
		buf->log[0].time.time2 = buf->log[0].total.time2 - buf->log[1].total.time2;
 8000c84:	1a5b      	subs	r3, r3, r1
 8000c86:	7323      	strb	r3, [r4, #12]
	}
}
 8000c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	20000320 	.word	0x20000320
 8000c90:	200001f8 	.word	0x200001f8

08000c94 <task_fuc>:

void task_fuc(void){
 8000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t screen_update = 0;
	uint8_t dot_state = 0;
 8000c96:	240f      	movs	r4, #15
 8000c98:	2500      	movs	r5, #0
void task_fuc(void){
 8000c9a:	b08f      	sub	sp, #60	; 0x3c
	uint8_t dot_state = 0;
 8000c9c:	ab06      	add	r3, sp, #24
 8000c9e:	18e4      	adds	r4, r4, r3

	uint8_t befo_touch = curXY.touched;
 8000ca0:	4bcc      	ldr	r3, [pc, #816]	; (8000fd4 <task_fuc+0x340>)

	uint32_t flash_dot = 0;
	uint32_t sw1_tick = 0;
	uint32_t time_tick = 0;

	main_dis(&time, &dot_state);
 8000ca2:	4ecd      	ldr	r6, [pc, #820]	; (8000fd8 <task_fuc+0x344>)
	uint8_t dot_state = 0;
 8000ca4:	7025      	strb	r5, [r4, #0]
	uint8_t befo_touch = curXY.touched;
 8000ca6:	791b      	ldrb	r3, [r3, #4]
	main_dis(&time, &dot_state);
 8000ca8:	0021      	movs	r1, r4
 8000caa:	0030      	movs	r0, r6
	uint8_t befo_touch = curXY.touched;
 8000cac:	9303      	str	r3, [sp, #12]
	main_dis(&time, &dot_state);
 8000cae:	f7ff fdf5 	bl	800089c <main_dis>
	main_dis(&time, &dot_state);
 8000cb2:	0021      	movs	r1, r4
 8000cb4:	0030      	movs	r0, r6
 8000cb6:	f7ff fdf1 	bl	800089c <main_dis>
	main_dis(&time, &dot_state);
 8000cba:	0021      	movs	r1, r4
 8000cbc:	0030      	movs	r0, r6
 8000cbe:	f7ff fded 	bl	800089c <main_dis>

	AREA_Typedef hour_area = { 180, 25, 180 + 110, 25 + 90 };
 8000cc2:	4cc6      	ldr	r4, [pc, #792]	; (8000fdc <task_fuc+0x348>)
 8000cc4:	2208      	movs	r2, #8
 8000cc6:	1da1      	adds	r1, r4, #6
 8000cc8:	a80a      	add	r0, sp, #40	; 0x28
 8000cca:	f002 fbd1 	bl	8003470 <memcpy>
	AREA_Typedef min_area  = { 320, 25, 320 + 110, 25 + 90 };
 8000cce:	0021      	movs	r1, r4
	uint8_t screen_update = 0;
 8000cd0:	002e      	movs	r6, r5
	AREA_Typedef min_area  = { 320, 25, 320 + 110, 25 + 90 };
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	310e      	adds	r1, #14
 8000cd6:	a80c      	add	r0, sp, #48	; 0x30
 8000cd8:	f002 fbca 	bl	8003470 <memcpy>
	uint32_t time_tick = 0;
 8000cdc:	9504      	str	r5, [sp, #16]
	uint32_t sw1_tick = 0;
 8000cde:	9505      	str	r5, [sp, #20]
	uint32_t flash_dot = 0;
 8000ce0:	9507      	str	r5, [sp, #28]

	while(1){
		get_touch(&curXY);
 8000ce2:	48bc      	ldr	r0, [pc, #752]	; (8000fd4 <task_fuc+0x340>)
 8000ce4:	f7ff fc74 	bl	80005d0 <get_touch>

		/* screen update */
		if(screen_update == 0) {
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	d00c      	beq.n	8000d06 <task_fuc+0x72>
				}
			}
		}

		/* Switch control */
		if(SW(1)){
 8000cec:	23a0      	movs	r3, #160	; 0xa0
 8000cee:	05db      	lsls	r3, r3, #23
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	2601      	movs	r6, #1
 8000cf4:	001c      	movs	r4, r3
 8000cf6:	4034      	ands	r4, r6
 8000cf8:	4233      	tst	r3, r6
 8000cfa:	d100      	bne.n	8000cfe <task_fuc+0x6a>
 8000cfc:	e09b      	b.n	8000e36 <task_fuc+0x1a2>
				}

				screen_update = 0;
			}
		}
		else sw1_tick = HAL_GetTick();
 8000cfe:	f000 fd35 	bl	800176c <HAL_GetTick>
 8000d02:	9005      	str	r0, [sp, #20]
 8000d04:	e0aa      	b.n	8000e5c <task_fuc+0x1c8>
			if(mode == timer_menu) button_data[timer_button].color = "GRAY";
 8000d06:	4db6      	ldr	r5, [pc, #728]	; (8000fe0 <task_fuc+0x34c>)
 8000d08:	4cb6      	ldr	r4, [pc, #728]	; (8000fe4 <task_fuc+0x350>)
 8000d0a:	782b      	ldrb	r3, [r5, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d10c      	bne.n	8000d2a <task_fuc+0x96>
 8000d10:	4ab5      	ldr	r2, [pc, #724]	; (8000fe8 <task_fuc+0x354>)
 8000d12:	60a2      	str	r2, [r4, #8]
			else button_data[watch_button].color = "BLACK";
 8000d14:	4ab5      	ldr	r2, [pc, #724]	; (8000fec <task_fuc+0x358>)
 8000d16:	61a2      	str	r2, [r4, #24]
			if(mode == main_menu)            main_dis(&time, &dot_state);
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d112      	bne.n	8000d42 <task_fuc+0xae>
 8000d1c:	210f      	movs	r1, #15
 8000d1e:	ab06      	add	r3, sp, #24
 8000d20:	48ad      	ldr	r0, [pc, #692]	; (8000fd8 <task_fuc+0x344>)
 8000d22:	18c9      	adds	r1, r1, r3
			else if(mode == stop_watch_menu) main_dis(&stop_watch_mode.time, &dot_state);
 8000d24:	f7ff fdba 	bl	800089c <main_dis>
 8000d28:	e014      	b.n	8000d54 <task_fuc+0xc0>
			else button_data[timer_button].color = "BLACK";
 8000d2a:	4ab0      	ldr	r2, [pc, #704]	; (8000fec <task_fuc+0x358>)
 8000d2c:	60a2      	str	r2, [r4, #8]
			if(mode == stop_watch_menu) button_data[watch_button].color = "GRAY";
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d1f0      	bne.n	8000d14 <task_fuc+0x80>
 8000d32:	4bad      	ldr	r3, [pc, #692]	; (8000fe8 <task_fuc+0x354>)
 8000d34:	61a3      	str	r3, [r4, #24]
			else if(mode == stop_watch_menu) main_dis(&stop_watch_mode.time, &dot_state);
 8000d36:	210f      	movs	r1, #15
 8000d38:	48ad      	ldr	r0, [pc, #692]	; (8000ff0 <task_fuc+0x35c>)
 8000d3a:	ab06      	add	r3, sp, #24
 8000d3c:	18c9      	adds	r1, r1, r3
 8000d3e:	3008      	adds	r0, #8
 8000d40:	e7f0      	b.n	8000d24 <task_fuc+0x90>
			else if(mode == timer_menu)      main_dis(&timer_mode.time, &dot_state);
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d104      	bne.n	8000d50 <task_fuc+0xbc>
 8000d46:	210f      	movs	r1, #15
 8000d48:	ab06      	add	r3, sp, #24
 8000d4a:	48aa      	ldr	r0, [pc, #680]	; (8000ff4 <task_fuc+0x360>)
 8000d4c:	18c9      	adds	r1, r1, r3
 8000d4e:	e7e9      	b.n	8000d24 <task_fuc+0x90>
			else if(mode == stop_watch_menu) main_dis(&stop_watch_mode.time, &dot_state);
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d0f0      	beq.n	8000d36 <task_fuc+0xa2>
			nextion_inst_set("fill 155,130,320,280,WHITE");
 8000d54:	48a8      	ldr	r0, [pc, #672]	; (8000ff8 <task_fuc+0x364>)
 8000d56:	f7ff fc1d 	bl	8000594 <nextion_inst_set>
			if(mode == timer_menu && input_state == none)
 8000d5a:	782a      	ldrb	r2, [r5, #0]
 8000d5c:	4ba7      	ldr	r3, [pc, #668]	; (8000ffc <task_fuc+0x368>)
 8000d5e:	2a01      	cmp	r2, #1
 8000d60:	d123      	bne.n	8000daa <task_fuc+0x116>
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d015      	beq.n	8000d94 <task_fuc+0x100>
				nextion_inst_set("draw 155,140,455,260,BLACK");
 8000d68:	48a5      	ldr	r0, [pc, #660]	; (8001000 <task_fuc+0x36c>)
 8000d6a:	f7ff fc13 	bl	8000594 <nextion_inst_set>
				for(uint8_t i = 0 ; i < 10 ; i++){
 8000d6e:	4ca5      	ldr	r4, [pc, #660]	; (8001004 <task_fuc+0x370>)
 8000d70:	0026      	movs	r6, r4
 8000d72:	3664      	adds	r6, #100	; 0x64
					sprintf(bf, "xstr %d,%d,40,40,0,BLACK,GRAY,1,1,1,\"%c\"", keypad[i].area.x0, keypad[i].area.y0, keypad[i].pad_num);
 8000d74:	7821      	ldrb	r1, [r4, #0]
 8000d76:	4da4      	ldr	r5, [pc, #656]	; (8001008 <task_fuc+0x374>)
 8000d78:	88a3      	ldrh	r3, [r4, #4]
 8000d7a:	8862      	ldrh	r2, [r4, #2]
 8000d7c:	0028      	movs	r0, r5
 8000d7e:	9100      	str	r1, [sp, #0]
 8000d80:	49a2      	ldr	r1, [pc, #648]	; (800100c <task_fuc+0x378>)
 8000d82:	f002 fb87 	bl	8003494 <siprintf>
				for(uint8_t i = 0 ; i < 10 ; i++){
 8000d86:	340a      	adds	r4, #10
					nextion_inst_set(bf);
 8000d88:	0028      	movs	r0, r5
 8000d8a:	f7ff fc03 	bl	8000594 <nextion_inst_set>
				for(uint8_t i = 0 ; i < 10 ; i++){
 8000d8e:	42b4      	cmp	r4, r6
 8000d90:	d1f0      	bne.n	8000d74 <task_fuc+0xe0>
 8000d92:	e7ab      	b.n	8000cec <task_fuc+0x58>
				button_draw(&button_data[timer_start_button].area, button_data[timer_start_button].color, button_data[timer_start_button].name);
 8000d94:	0020      	movs	r0, r4
 8000d96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d98:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000d9a:	3020      	adds	r0, #32
 8000d9c:	f7ff fefe 	bl	8000b9c <button_draw>
			if(input_state != none){
 8000da0:	4b96      	ldr	r3, [pc, #600]	; (8000ffc <task_fuc+0x368>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0a1      	beq.n	8000cec <task_fuc+0x58>
 8000da8:	e7de      	b.n	8000d68 <task_fuc+0xd4>
			else if(mode == stop_watch_menu && input_state == none){
 8000daa:	2a02      	cmp	r2, #2
 8000dac:	d1f8      	bne.n	8000da0 <task_fuc+0x10c>
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1d9      	bne.n	8000d68 <task_fuc+0xd4>
				button_draw(&button_data[stop_watch_reset_button].area, button_data[stop_watch_reset_button].color, button_data[stop_watch_reset_button].name);
 8000db4:	0020      	movs	r0, r4
 8000db6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000db8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000dba:	3030      	adds	r0, #48	; 0x30
 8000dbc:	f7ff feee 	bl	8000b9c <button_draw>
				button_draw(&button_data[stop_watch_start_button].area, button_data[stop_watch_start_button].color, button_data[stop_watch_start_button].name);
 8000dc0:	0020      	movs	r0, r4
				nextion_inst_set("line 160,160,450,160,BLACK");
 8000dc2:	25a1      	movs	r5, #161	; 0xa1
				button_draw(&button_data[stop_watch_start_button].area, button_data[stop_watch_start_button].color, button_data[stop_watch_start_button].name);
 8000dc4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8000dc6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000dc8:	3040      	adds	r0, #64	; 0x40
 8000dca:	f7ff fee7 	bl	8000b9c <button_draw>
				nextion_inst_set("xstr 160,130,100,30,0,BLACK,WHITE,1,1,1,\"Laps\"");
 8000dce:	4890      	ldr	r0, [pc, #576]	; (8001010 <task_fuc+0x37c>)
 8000dd0:	f7ff fbe0 	bl	8000594 <nextion_inst_set>
				nextion_inst_set("xstr 260,130,100,30,0,BLACK,WHITE,1,1,1,\"Time\"");
 8000dd4:	488f      	ldr	r0, [pc, #572]	; (8001014 <task_fuc+0x380>)
 8000dd6:	f7ff fbdd 	bl	8000594 <nextion_inst_set>
				nextion_inst_set("xstr 360,130,100,30,0,BLACK,WHITE,1,1,1,\"Total\"");
 8000dda:	488f      	ldr	r0, [pc, #572]	; (8001018 <task_fuc+0x384>)
 8000ddc:	f7ff fbda 	bl	8000594 <nextion_inst_set>
				nextion_inst_set("line 160,160,450,160,BLACK");
 8000de0:	488e      	ldr	r0, [pc, #568]	; (800101c <task_fuc+0x388>)
 8000de2:	f7ff fbd7 	bl	8000594 <nextion_inst_set>
				for(uint8_t i = 0 ; i < 3 ; i++){
 8000de6:	4c82      	ldr	r4, [pc, #520]	; (8000ff0 <task_fuc+0x35c>)
					if(stop_watch_mode.log[i].laps == 0) break;
 8000de8:	7aa3      	ldrb	r3, [r4, #10]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0d8      	beq.n	8000da0 <task_fuc+0x10c>
					sprintf(bf, "xstr 160,%d,100,17,0,BLACK,WHITE,1,1,1,\"%d\"", 161 + (i * 17), stop_watch_mode.log[i].laps);
 8000dee:	4e86      	ldr	r6, [pc, #536]	; (8001008 <task_fuc+0x374>)
 8000df0:	002a      	movs	r2, r5
 8000df2:	498b      	ldr	r1, [pc, #556]	; (8001020 <task_fuc+0x38c>)
 8000df4:	0030      	movs	r0, r6
 8000df6:	f002 fb4d 	bl	8003494 <siprintf>
					nextion_inst_set(bf);
 8000dfa:	0030      	movs	r0, r6
 8000dfc:	f7ff fbca 	bl	8000594 <nextion_inst_set>
					sprintf(bf, "xstr 260,%d,100,17,0,BLACK,WHITE,1,1,1,\"%d:%02d\"", 161 + (i * 17), stop_watch_mode.log[i].time.time1, stop_watch_mode.log[i].time.time2);
 8000e00:	7b22      	ldrb	r2, [r4, #12]
 8000e02:	7ae3      	ldrb	r3, [r4, #11]
 8000e04:	4987      	ldr	r1, [pc, #540]	; (8001024 <task_fuc+0x390>)
 8000e06:	9200      	str	r2, [sp, #0]
 8000e08:	0030      	movs	r0, r6
 8000e0a:	002a      	movs	r2, r5
 8000e0c:	f002 fb42 	bl	8003494 <siprintf>
					nextion_inst_set(bf);
 8000e10:	0030      	movs	r0, r6
 8000e12:	f7ff fbbf 	bl	8000594 <nextion_inst_set>
					sprintf(bf, "xstr 360,%d,100,17,0,BLACK,WHITE,1,1,1,\"%d:%02d\"", 161 + (i * 17), stop_watch_mode.log[i].total.time1, stop_watch_mode.log[i].total.time2);
 8000e16:	7ba2      	ldrb	r2, [r4, #14]
 8000e18:	7b63      	ldrb	r3, [r4, #13]
 8000e1a:	4983      	ldr	r1, [pc, #524]	; (8001028 <task_fuc+0x394>)
 8000e1c:	9200      	str	r2, [sp, #0]
 8000e1e:	0030      	movs	r0, r6
 8000e20:	002a      	movs	r2, r5
 8000e22:	f002 fb37 	bl	8003494 <siprintf>
				for(uint8_t i = 0 ; i < 3 ; i++){
 8000e26:	3511      	adds	r5, #17
					nextion_inst_set(bf);
 8000e28:	0030      	movs	r0, r6
 8000e2a:	f7ff fbb3 	bl	8000594 <nextion_inst_set>
				for(uint8_t i = 0 ; i < 3 ; i++){
 8000e2e:	3405      	adds	r4, #5
 8000e30:	2dd4      	cmp	r5, #212	; 0xd4
 8000e32:	d1d9      	bne.n	8000de8 <task_fuc+0x154>
 8000e34:	e7b4      	b.n	8000da0 <task_fuc+0x10c>
			if(HAL_GetTick() - sw1_tick > 1000){
 8000e36:	f000 fc99 	bl	800176c <HAL_GetTick>
 8000e3a:	9b05      	ldr	r3, [sp, #20]
 8000e3c:	1ac0      	subs	r0, r0, r3
 8000e3e:	23fa      	movs	r3, #250	; 0xfa
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4298      	cmp	r0, r3
 8000e44:	d90a      	bls.n	8000e5c <task_fuc+0x1c8>
				sw1_tick = HAL_GetTick();
 8000e46:	f000 fc91 	bl	800176c <HAL_GetTick>
				time.time2++;
 8000e4a:	4b63      	ldr	r3, [pc, #396]	; (8000fd8 <task_fuc+0x344>)
				sw1_tick = HAL_GetTick();
 8000e4c:	9005      	str	r0, [sp, #20]
				time.time2++;
 8000e4e:	785a      	ldrb	r2, [r3, #1]
 8000e50:	3201      	adds	r2, #1
 8000e52:	b2d2      	uxtb	r2, r2
				if(time.time2 >= 60){
 8000e54:	2a3b      	cmp	r2, #59	; 0x3b
 8000e56:	d874      	bhi.n	8000f42 <task_fuc+0x2ae>
				time.time2++;
 8000e58:	705a      	strb	r2, [r3, #1]
				screen_update = 0;
 8000e5a:	0026      	movs	r6, r4

		/* dot point state reverse */
		if(HAL_GetTick() - flash_dot > 1000){
 8000e5c:	f000 fc86 	bl	800176c <HAL_GetTick>
 8000e60:	9b07      	ldr	r3, [sp, #28]
 8000e62:	1ac0      	subs	r0, r0, r3
 8000e64:	23fa      	movs	r3, #250	; 0xfa
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	d90a      	bls.n	8000e82 <task_fuc+0x1ee>
			flash_dot = HAL_GetTick();
 8000e6c:	f000 fc7e 	bl	800176c <HAL_GetTick>
			dot_state ^= 1;
 8000e70:	220f      	movs	r2, #15
 8000e72:	ab06      	add	r3, sp, #24
 8000e74:	18d2      	adds	r2, r2, r3
 8000e76:	2301      	movs	r3, #1
			screen_update = 0;
 8000e78:	2600      	movs	r6, #0
			dot_state ^= 1;
 8000e7a:	7811      	ldrb	r1, [r2, #0]
			flash_dot = HAL_GetTick();
 8000e7c:	9007      	str	r0, [sp, #28]
			dot_state ^= 1;
 8000e7e:	404b      	eors	r3, r1
 8000e80:	7013      	strb	r3, [r2, #0]
		}

		/* hour input mode */
		if(area_check(&curXY, &hour_area) && input_state != hour_input && mode != stop_watch_menu){
 8000e82:	4d54      	ldr	r5, [pc, #336]	; (8000fd4 <task_fuc+0x340>)
 8000e84:	a90a      	add	r1, sp, #40	; 0x28
 8000e86:	0028      	movs	r0, r5
 8000e88:	f7ff fbde 	bl	8000648 <area_check>
 8000e8c:	4b54      	ldr	r3, [pc, #336]	; (8000fe0 <task_fuc+0x34c>)
 8000e8e:	781c      	ldrb	r4, [r3, #0]
 8000e90:	2800      	cmp	r0, #0
 8000e92:	d060      	beq.n	8000f56 <task_fuc+0x2c2>
 8000e94:	4b59      	ldr	r3, [pc, #356]	; (8000ffc <task_fuc+0x368>)
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	2a01      	cmp	r2, #1
 8000e9a:	d05c      	beq.n	8000f56 <task_fuc+0x2c2>
 8000e9c:	2c02      	cmp	r4, #2
 8000e9e:	d05a      	beq.n	8000f56 <task_fuc+0x2c2>
			input_state = hour_input;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]

			set_time.time1 = set_time.time2 = 10;
 8000ea4:	4b61      	ldr	r3, [pc, #388]	; (800102c <task_fuc+0x398>)
 8000ea6:	3209      	adds	r2, #9
		}
		/* minute input mode */
		else if(area_check(&curXY, &min_area) && input_state != min_input && mode != stop_watch_menu){
			input_state = min_input;

			set_time.time1 = set_time.time2 = 10;
 8000ea8:	705a      	strb	r2, [r3, #1]
 8000eaa:	701a      	strb	r2, [r3, #0]
			screen_update = 0;
		}
		/* stop watch mode */
		else if(area_check(&curXY, &button_data[watch_button].area) && befo_touch != curXY.touched && curXY.touched == 1){
			mode = mode == stop_watch_menu ? main_menu : stop_watch_menu;
			screen_update = 0;
 8000eac:	2600      	movs	r6, #0
		}

		if(mode == timer_menu){
 8000eae:	4b4c      	ldr	r3, [pc, #304]	; (8000fe0 <task_fuc+0x34c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d000      	beq.n	8000eb8 <task_fuc+0x224>
 8000eb6:	e0c3      	b.n	8001040 <task_fuc+0x3ac>
			if(area_check(&curXY, &button_data[timer_start_button].area) && befo_touch != curXY.touched && curXY.touched == 1){
 8000eb8:	4c4a      	ldr	r4, [pc, #296]	; (8000fe4 <task_fuc+0x350>)
 8000eba:	0028      	movs	r0, r5
 8000ebc:	0021      	movs	r1, r4
 8000ebe:	3120      	adds	r1, #32
 8000ec0:	f7ff fbc2 	bl	8000648 <area_check>
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <task_fuc+0x360>)
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d00f      	beq.n	8000eea <task_fuc+0x256>
		else if(area_check(&curXY, &button_data[timer_button].area) && befo_touch != curXY.touched && curXY.touched == 1){
 8000eca:	792a      	ldrb	r2, [r5, #4]
			if(area_check(&curXY, &button_data[timer_start_button].area) && befo_touch != curXY.touched && curXY.touched == 1){
 8000ecc:	9903      	ldr	r1, [sp, #12]
 8000ece:	4291      	cmp	r1, r2
 8000ed0:	d00b      	beq.n	8000eea <task_fuc+0x256>
 8000ed2:	2a01      	cmp	r2, #1
 8000ed4:	d109      	bne.n	8000eea <task_fuc+0x256>
				timer_mode.state ^= 1;
 8000ed6:	7919      	ldrb	r1, [r3, #4]
 8000ed8:	404a      	eors	r2, r1
 8000eda:	711a      	strb	r2, [r3, #4]

				if(timer_mode.state == 0 && timer_mode.time.time1 == 0 && timer_mode.time.time2 == 0) timer_mode.time = timer_mode.buf_time;
 8000edc:	2901      	cmp	r1, #1
 8000ede:	d174      	bne.n	8000fca <task_fuc+0x336>
 8000ee0:	881e      	ldrh	r6, [r3, #0]
 8000ee2:	2e00      	cmp	r6, #0
 8000ee4:	d171      	bne.n	8000fca <task_fuc+0x336>
 8000ee6:	8859      	ldrh	r1, [r3, #2]
 8000ee8:	8019      	strh	r1, [r3, #0]
				else timer_mode.buf_time = timer_mode.time;

				screen_update = 0;
			}

			if(timer_mode.state == 0){
 8000eea:	791b      	ldrb	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d000      	beq.n	8000ef2 <task_fuc+0x25e>
 8000ef0:	e0a2      	b.n	8001038 <task_fuc+0x3a4>
				button_data[timer_start_button].color = "BLUE";
 8000ef2:	4b4f      	ldr	r3, [pc, #316]	; (8001030 <task_fuc+0x39c>)
 8000ef4:	62a3      	str	r3, [r4, #40]	; 0x28
				button_data[timer_start_button].name  = "Start";
 8000ef6:	4b4f      	ldr	r3, [pc, #316]	; (8001034 <task_fuc+0x3a0>)
			}
			else{
				button_data[timer_start_button].color = "RED";
				button_data[timer_start_button].name  = "Stop";
 8000ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
				button_data[stop_watch_start_button].name = "Stop";
			}
		}

		/* keypad control */
		if(input_state != none){
 8000efa:	4d40      	ldr	r5, [pc, #256]	; (8000ffc <task_fuc+0x368>)
			uint8_t touched_pad = keypad_read();

			if(touched_pad && befo_touch != curXY.touched && curXY.touched == 1){
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <task_fuc+0x340>)
		if(input_state != none){
 8000efe:	782c      	ldrb	r4, [r5, #0]
			if(touched_pad && befo_touch != curXY.touched && curXY.touched == 1){
 8000f00:	791b      	ldrb	r3, [r3, #4]
 8000f02:	9306      	str	r3, [sp, #24]
		if(input_state != none){
 8000f04:	2c00      	cmp	r4, #0
 8000f06:	d100      	bne.n	8000f0a <task_fuc+0x276>
 8000f08:	e0fa      	b.n	8001100 <task_fuc+0x46c>
			uint8_t touched_pad = keypad_read();
 8000f0a:	f7ff fbb1 	bl	8000670 <keypad_read>
			if(touched_pad && befo_touch != curXY.touched && curXY.touched == 1){
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	d100      	bne.n	8000f14 <task_fuc+0x280>
 8000f12:	e0f5      	b.n	8001100 <task_fuc+0x46c>
 8000f14:	9b03      	ldr	r3, [sp, #12]
 8000f16:	9a06      	ldr	r2, [sp, #24]
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d100      	bne.n	8000f1e <task_fuc+0x28a>
 8000f1c:	e0f0      	b.n	8001100 <task_fuc+0x46c>
 8000f1e:	2a01      	cmp	r2, #1
 8000f20:	d000      	beq.n	8000f24 <task_fuc+0x290>
 8000f22:	e0ed      	b.n	8001100 <task_fuc+0x46c>
				screen_update = 0;

				if(set_time.time2 == 10) set_time.time2 = keypad[touched_pad - 1].pad_num - '0';
 8000f24:	220a      	movs	r2, #10
 8000f26:	3801      	subs	r0, #1
 8000f28:	4350      	muls	r0, r2
 8000f2a:	4b36      	ldr	r3, [pc, #216]	; (8001004 <task_fuc+0x370>)
 8000f2c:	4f3f      	ldr	r7, [pc, #252]	; (800102c <task_fuc+0x398>)
 8000f2e:	5cc3      	ldrb	r3, [r0, r3]
 8000f30:	7879      	ldrb	r1, [r7, #1]
 8000f32:	3b30      	subs	r3, #48	; 0x30
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4291      	cmp	r1, r2
 8000f38:	d000      	beq.n	8000f3c <task_fuc+0x2a8>
 8000f3a:	e0c5      	b.n	80010c8 <task_fuc+0x434>
 8000f3c:	707b      	strb	r3, [r7, #1]
				screen_update = 0;
 8000f3e:	2600      	movs	r6, #0
 8000f40:	e0de      	b.n	8001100 <task_fuc+0x46c>
					time.time1++;
 8000f42:	781a      	ldrb	r2, [r3, #0]
					time.time2 = 0;
 8000f44:	705c      	strb	r4, [r3, #1]
					time.time1++;
 8000f46:	3201      	adds	r2, #1
 8000f48:	b2d2      	uxtb	r2, r2
					if(time.time1 >= 24) time.time1 = 0;
 8000f4a:	2a17      	cmp	r2, #23
 8000f4c:	d801      	bhi.n	8000f52 <task_fuc+0x2be>
					time.time1++;
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e783      	b.n	8000e5a <task_fuc+0x1c6>
					if(time.time1 >= 24) time.time1 = 0;
 8000f52:	701c      	strb	r4, [r3, #0]
 8000f54:	e781      	b.n	8000e5a <task_fuc+0x1c6>
		else if(area_check(&curXY, &min_area) && input_state != min_input && mode != stop_watch_menu){
 8000f56:	0028      	movs	r0, r5
 8000f58:	a90c      	add	r1, sp, #48	; 0x30
 8000f5a:	f7ff fb75 	bl	8000648 <area_check>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d00a      	beq.n	8000f78 <task_fuc+0x2e4>
 8000f62:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <task_fuc+0x368>)
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	2a02      	cmp	r2, #2
 8000f68:	d006      	beq.n	8000f78 <task_fuc+0x2e4>
 8000f6a:	2c02      	cmp	r4, #2
 8000f6c:	d004      	beq.n	8000f78 <task_fuc+0x2e4>
			input_state = min_input;
 8000f6e:	2202      	movs	r2, #2
 8000f70:	701a      	strb	r2, [r3, #0]
			set_time.time1 = set_time.time2 = 10;
 8000f72:	4b2e      	ldr	r3, [pc, #184]	; (800102c <task_fuc+0x398>)
 8000f74:	3208      	adds	r2, #8
 8000f76:	e797      	b.n	8000ea8 <task_fuc+0x214>
		else if(area_check(&curXY, &button_data[timer_button].area) && befo_touch != curXY.touched && curXY.touched == 1){
 8000f78:	4f1a      	ldr	r7, [pc, #104]	; (8000fe4 <task_fuc+0x350>)
 8000f7a:	0028      	movs	r0, r5
 8000f7c:	0039      	movs	r1, r7
 8000f7e:	f7ff fb63 	bl	8000648 <area_check>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d00b      	beq.n	8000f9e <task_fuc+0x30a>
 8000f86:	792b      	ldrb	r3, [r5, #4]
 8000f88:	9a03      	ldr	r2, [sp, #12]
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d007      	beq.n	8000f9e <task_fuc+0x30a>
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d105      	bne.n	8000f9e <task_fuc+0x30a>
			mode = mode == timer_menu ? main_menu : timer_menu;
 8000f92:	3c01      	subs	r4, #1
 8000f94:	1e63      	subs	r3, r4, #1
 8000f96:	419c      	sbcs	r4, r3
			mode = mode == stop_watch_menu ? main_menu : stop_watch_menu;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <task_fuc+0x34c>)
 8000f9a:	701c      	strb	r4, [r3, #0]
 8000f9c:	e786      	b.n	8000eac <task_fuc+0x218>
		else if(area_check(&curXY, &button_data[watch_button].area) && befo_touch != curXY.touched && curXY.touched == 1){
 8000f9e:	0039      	movs	r1, r7
 8000fa0:	4f0c      	ldr	r7, [pc, #48]	; (8000fd4 <task_fuc+0x340>)
 8000fa2:	3110      	adds	r1, #16
 8000fa4:	0038      	movs	r0, r7
 8000fa6:	f7ff fb4f 	bl	8000648 <area_check>
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d100      	bne.n	8000fb0 <task_fuc+0x31c>
 8000fae:	e77e      	b.n	8000eae <task_fuc+0x21a>
 8000fb0:	793b      	ldrb	r3, [r7, #4]
 8000fb2:	9a03      	ldr	r2, [sp, #12]
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d100      	bne.n	8000fba <task_fuc+0x326>
 8000fb8:	e779      	b.n	8000eae <task_fuc+0x21a>
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d000      	beq.n	8000fc0 <task_fuc+0x32c>
 8000fbe:	e776      	b.n	8000eae <task_fuc+0x21a>
			mode = mode == stop_watch_menu ? main_menu : stop_watch_menu;
 8000fc0:	3c02      	subs	r4, #2
 8000fc2:	1e63      	subs	r3, r4, #1
 8000fc4:	419c      	sbcs	r4, r3
 8000fc6:	0064      	lsls	r4, r4, #1
 8000fc8:	e7e6      	b.n	8000f98 <task_fuc+0x304>
				else timer_mode.buf_time = timer_mode.time;
 8000fca:	881a      	ldrh	r2, [r3, #0]
				screen_update = 0;
 8000fcc:	2600      	movs	r6, #0
				else timer_mode.buf_time = timer_mode.time;
 8000fce:	805a      	strh	r2, [r3, #2]
 8000fd0:	e78b      	b.n	8000eea <task_fuc+0x256>
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	200001fa 	.word	0x200001fa
 8000fd8:	20000106 	.word	0x20000106
 8000fdc:	08003d7c 	.word	0x08003d7c
 8000fe0:	2000031d 	.word	0x2000031d
 8000fe4:	20000050 	.word	0x20000050
 8000fe8:	08003eaf 	.word	0x08003eaf
 8000fec:	08003e3d 	.word	0x08003e3d
 8000ff0:	20000320 	.word	0x20000320
 8000ff4:	2000033c 	.word	0x2000033c
 8000ff8:	08003eb4 	.word	0x08003eb4
 8000ffc:	2000031c 	.word	0x2000031c
 8001000:	08003ecf 	.word	0x08003ecf
 8001004:	200000a0 	.word	0x200000a0
 8001008:	20000194 	.word	0x20000194
 800100c:	08004021 	.word	0x08004021
 8001010:	08003eea 	.word	0x08003eea
 8001014:	08003f19 	.word	0x08003f19
 8001018:	08003f48 	.word	0x08003f48
 800101c:	08003f78 	.word	0x08003f78
 8001020:	08003f93 	.word	0x08003f93
 8001024:	08003fbf 	.word	0x08003fbf
 8001028:	08003ff0 	.word	0x08003ff0
 800102c:	20000104 	.word	0x20000104
 8001030:	0800404a 	.word	0x0800404a
 8001034:	0800404f 	.word	0x0800404f
				button_data[timer_start_button].color = "RED";
 8001038:	4b80      	ldr	r3, [pc, #512]	; (800123c <task_fuc+0x5a8>)
 800103a:	62a3      	str	r3, [r4, #40]	; 0x28
				button_data[timer_start_button].name  = "Stop";
 800103c:	4b80      	ldr	r3, [pc, #512]	; (8001240 <task_fuc+0x5ac>)
 800103e:	e75b      	b.n	8000ef8 <task_fuc+0x264>
		else if(mode == stop_watch_menu){
 8001040:	2b02      	cmp	r3, #2
 8001042:	d000      	beq.n	8001046 <task_fuc+0x3b2>
 8001044:	e759      	b.n	8000efa <task_fuc+0x266>
			if(area_check(&curXY, &button_data[stop_watch_reset_button].area) && befo_touch != curXY.touched && curXY.touched == 1){
 8001046:	4c7f      	ldr	r4, [pc, #508]	; (8001244 <task_fuc+0x5b0>)
 8001048:	4f7f      	ldr	r7, [pc, #508]	; (8001248 <task_fuc+0x5b4>)
 800104a:	0021      	movs	r1, r4
 800104c:	0038      	movs	r0, r7
 800104e:	3130      	adds	r1, #48	; 0x30
 8001050:	f7ff fafa 	bl	8000648 <area_check>
				if(stop_watch_mode.state == 0){
 8001054:	4b7d      	ldr	r3, [pc, #500]	; (800124c <task_fuc+0x5b8>)
 8001056:	781d      	ldrb	r5, [r3, #0]
			if(area_check(&curXY, &button_data[stop_watch_reset_button].area) && befo_touch != curXY.touched && curXY.touched == 1){
 8001058:	2800      	cmp	r0, #0
 800105a:	d01e      	beq.n	800109a <task_fuc+0x406>
 800105c:	793b      	ldrb	r3, [r7, #4]
 800105e:	9a03      	ldr	r2, [sp, #12]
 8001060:	4293      	cmp	r3, r2
 8001062:	d01a      	beq.n	800109a <task_fuc+0x406>
 8001064:	2b01      	cmp	r3, #1
 8001066:	d118      	bne.n	800109a <task_fuc+0x406>
					memset((LOG_Typedef*)stop_watch_mode.log, 0, sizeof(LOG_Typedef) * 3);
 8001068:	4878      	ldr	r0, [pc, #480]	; (800124c <task_fuc+0x5b8>)
				if(stop_watch_mode.state == 0){
 800106a:	2d00      	cmp	r5, #0
 800106c:	d112      	bne.n	8001094 <task_fuc+0x400>
					memset((LOG_Typedef*)stop_watch_mode.log, 0, sizeof(LOG_Typedef) * 3);
 800106e:	220f      	movs	r2, #15
 8001070:	0029      	movs	r1, r5
 8001072:	300a      	adds	r0, #10
 8001074:	f002 fa05 	bl	8003482 <memset>
					stop_watch_mode.time.time1 = stop_watch_mode.time.time2 = 0;
 8001078:	4b74      	ldr	r3, [pc, #464]	; (800124c <task_fuc+0x5b8>)
 800107a:	811d      	strh	r5, [r3, #8]
				screen_update = 0;
 800107c:	2600      	movs	r6, #0
			if(stop_watch_mode.state == 0){
 800107e:	4b73      	ldr	r3, [pc, #460]	; (800124c <task_fuc+0x5b8>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d11a      	bne.n	80010bc <task_fuc+0x428>
				button_data[stop_watch_reset_button].name = "Reset";
 8001086:	4b72      	ldr	r3, [pc, #456]	; (8001250 <task_fuc+0x5bc>)
 8001088:	63e3      	str	r3, [r4, #60]	; 0x3c
				button_data[stop_watch_start_button].color = "BLUE";
 800108a:	4b72      	ldr	r3, [pc, #456]	; (8001254 <task_fuc+0x5c0>)
 800108c:	64a3      	str	r3, [r4, #72]	; 0x48
				button_data[stop_watch_start_button].name = "Start";
 800108e:	4b72      	ldr	r3, [pc, #456]	; (8001258 <task_fuc+0x5c4>)
				button_data[stop_watch_start_button].name = "Stop";
 8001090:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001092:	e732      	b.n	8000efa <task_fuc+0x266>
					log_save(&stop_watch_mode);
 8001094:	f7ff fdc8 	bl	8000c28 <log_save>
					screen_update = 0;
 8001098:	e7f0      	b.n	800107c <task_fuc+0x3e8>
			else if(area_check(&curXY, &button_data[stop_watch_start_button].area) && befo_touch != curXY.touched && curXY.touched == 1){
 800109a:	0021      	movs	r1, r4
 800109c:	0038      	movs	r0, r7
 800109e:	3140      	adds	r1, #64	; 0x40
 80010a0:	f7ff fad2 	bl	8000648 <area_check>
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d0ea      	beq.n	800107e <task_fuc+0x3ea>
 80010a8:	793b      	ldrb	r3, [r7, #4]
 80010aa:	9a03      	ldr	r2, [sp, #12]
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d0e6      	beq.n	800107e <task_fuc+0x3ea>
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d1e4      	bne.n	800107e <task_fuc+0x3ea>
				stop_watch_mode.state ^= 1;
 80010b4:	4a65      	ldr	r2, [pc, #404]	; (800124c <task_fuc+0x5b8>)
 80010b6:	406b      	eors	r3, r5
 80010b8:	7013      	strb	r3, [r2, #0]
 80010ba:	e7df      	b.n	800107c <task_fuc+0x3e8>
				button_data[stop_watch_reset_button].name = "Record";
 80010bc:	4b67      	ldr	r3, [pc, #412]	; (800125c <task_fuc+0x5c8>)
 80010be:	63e3      	str	r3, [r4, #60]	; 0x3c
				button_data[stop_watch_start_button].color = "RED";
 80010c0:	4b5e      	ldr	r3, [pc, #376]	; (800123c <task_fuc+0x5a8>)
 80010c2:	64a3      	str	r3, [r4, #72]	; 0x48
				button_data[stop_watch_start_button].name = "Stop";
 80010c4:	4b5e      	ldr	r3, [pc, #376]	; (8001240 <task_fuc+0x5ac>)
 80010c6:	e7e3      	b.n	8001090 <task_fuc+0x3fc>
				else{
					set_time.time1 = set_time.time2;
 80010c8:	7039      	strb	r1, [r7, #0]
					set_time.time2 = keypad[touched_pad - 1].pad_num - '0';
 80010ca:	707b      	strb	r3, [r7, #1]
					if(input_state == hour_input){
 80010cc:	2c01      	cmp	r4, #1
 80010ce:	d168      	bne.n	80011a2 <task_fuc+0x50e>
						if(set_time.time1 * 10 + set_time.time2 > ((mode == main_menu) ? 23 : 59)) { set_time.time1 = set_time.time2 = 10; }
 80010d0:	4863      	ldr	r0, [pc, #396]	; (8001260 <task_fuc+0x5cc>)
 80010d2:	434a      	muls	r2, r1
 80010d4:	7806      	ldrb	r6, [r0, #0]
 80010d6:	18d2      	adds	r2, r2, r3
 80010d8:	2017      	movs	r0, #23
 80010da:	2e00      	cmp	r6, #0
 80010dc:	d000      	beq.n	80010e0 <task_fuc+0x44c>
 80010de:	3024      	adds	r0, #36	; 0x24
 80010e0:	4282      	cmp	r2, r0
 80010e2:	dd03      	ble.n	80010ec <task_fuc+0x458>
 80010e4:	230a      	movs	r3, #10
 80010e6:	707b      	strb	r3, [r7, #1]
 80010e8:	703b      	strb	r3, [r7, #0]
 80010ea:	e728      	b.n	8000f3e <task_fuc+0x2aa>
						else{
							input_state = none;
 80010ec:	2200      	movs	r2, #0
 80010ee:	485d      	ldr	r0, [pc, #372]	; (8001264 <task_fuc+0x5d0>)
 80010f0:	7002      	strb	r2, [r0, #0]
							if(mode == main_menu)       { time.time1 = set_time.time1 * 10 + set_time.time2; }
 80010f2:	4296      	cmp	r6, r2
 80010f4:	d14c      	bne.n	8001190 <task_fuc+0x4fc>
 80010f6:	320a      	adds	r2, #10
 80010f8:	4351      	muls	r1, r2
 80010fa:	4a5b      	ldr	r2, [pc, #364]	; (8001268 <task_fuc+0x5d4>)
 80010fc:	185b      	adds	r3, r3, r1
 80010fe:	7013      	strb	r3, [r2, #0]
			}
		}

		befo_touch = curXY.touched;

		if(HAL_GetTick() - time_tick >= 60000){
 8001100:	f000 fb34 	bl	800176c <HAL_GetTick>
 8001104:	9b04      	ldr	r3, [sp, #16]
 8001106:	1ac0      	subs	r0, r0, r3
 8001108:	4b58      	ldr	r3, [pc, #352]	; (800126c <task_fuc+0x5d8>)
 800110a:	4298      	cmp	r0, r3
 800110c:	d909      	bls.n	8001122 <task_fuc+0x48e>
			time_tick = HAL_GetTick();
 800110e:	f000 fb2d 	bl	800176c <HAL_GetTick>

			time.time2++;
 8001112:	4b55      	ldr	r3, [pc, #340]	; (8001268 <task_fuc+0x5d4>)
			time_tick = HAL_GetTick();
 8001114:	9004      	str	r0, [sp, #16]
			time.time2++;
 8001116:	785a      	ldrb	r2, [r3, #1]
 8001118:	3201      	adds	r2, #1
 800111a:	b2d2      	uxtb	r2, r2
			if(time.time2 > 59){
 800111c:	2a3b      	cmp	r2, #59	; 0x3b
 800111e:	d859      	bhi.n	80011d4 <task_fuc+0x540>
			time.time2++;
 8001120:	705a      	strb	r2, [r3, #1]
				time.time1++;
				if(time.time1 > 23) time.time1 = 0;
			}
		}

		if(timer_mode.state == 1){
 8001122:	4c53      	ldr	r4, [pc, #332]	; (8001270 <task_fuc+0x5dc>)
 8001124:	7925      	ldrb	r5, [r4, #4]
 8001126:	2d01      	cmp	r5, #1
 8001128:	d174      	bne.n	8001214 <task_fuc+0x580>
			if(timer_mode.time.time1 > 0 || timer_mode.time.time2 > 0){
 800112a:	8823      	ldrh	r3, [r4, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d05c      	beq.n	80011ea <task_fuc+0x556>
				if(HAL_GetTick() - timer_mode.tick >= 1000){
 8001130:	f000 fb1c 	bl	800176c <HAL_GetTick>
 8001134:	68a3      	ldr	r3, [r4, #8]
 8001136:	1ac0      	subs	r0, r0, r3
 8001138:	23fa      	movs	r3, #250	; 0xfa
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4298      	cmp	r0, r3
 800113e:	d30e      	bcc.n	800115e <task_fuc+0x4ca>
					timer_mode.tick = HAL_GetTick();
 8001140:	f000 fb14 	bl	800176c <HAL_GetTick>
					if(timer_mode.time.time2 == 0){
 8001144:	7863      	ldrb	r3, [r4, #1]
					timer_mode.tick = HAL_GetTick();
 8001146:	60a0      	str	r0, [r4, #8]
					if(timer_mode.time.time2 == 0){
 8001148:	2b00      	cmp	r3, #0
 800114a:	d104      	bne.n	8001156 <task_fuc+0x4c2>
						timer_mode.time.time2 = 60;
 800114c:	333c      	adds	r3, #60	; 0x3c
 800114e:	7063      	strb	r3, [r4, #1]
						timer_mode.time.time1--;
 8001150:	7823      	ldrb	r3, [r4, #0]
 8001152:	3b01      	subs	r3, #1
 8001154:	7023      	strb	r3, [r4, #0]
					}
					timer_mode.time.time2--;
					screen_update = 0;
 8001156:	2600      	movs	r6, #0
					timer_mode.time.time2--;
 8001158:	7863      	ldrb	r3, [r4, #1]
 800115a:	3b01      	subs	r3, #1
 800115c:	7063      	strb	r3, [r4, #1]
				}
			}
		}
		else { timer_mode.tick = HAL_GetTick(); setMotor(DRV8830_STOP); BUZ(0); }

		if(stop_watch_mode.state == 1){
 800115e:	4c3b      	ldr	r4, [pc, #236]	; (800124c <task_fuc+0x5b8>)
 8001160:	7823      	ldrb	r3, [r4, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d165      	bne.n	8001232 <task_fuc+0x59e>
			if(HAL_GetTick() - stop_watch_mode.tick > 1000){
 8001166:	f000 fb01 	bl	800176c <HAL_GetTick>
 800116a:	6863      	ldr	r3, [r4, #4]
 800116c:	1ac0      	subs	r0, r0, r3
 800116e:	23fa      	movs	r3, #250	; 0xfa
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4298      	cmp	r0, r3
 8001174:	d909      	bls.n	800118a <task_fuc+0x4f6>
				stop_watch_mode.tick = HAL_GetTick();
 8001176:	f000 faf9 	bl	800176c <HAL_GetTick>

				screen_update = 0;

				stop_watch_mode.time.time2++;
 800117a:	7a63      	ldrb	r3, [r4, #9]
 800117c:	2600      	movs	r6, #0
 800117e:	3301      	adds	r3, #1
 8001180:	b2db      	uxtb	r3, r3
				stop_watch_mode.tick = HAL_GetTick();
 8001182:	6060      	str	r0, [r4, #4]
				if(stop_watch_mode.time.time2 > 59){
 8001184:	2b3b      	cmp	r3, #59	; 0x3b
 8001186:	d84f      	bhi.n	8001228 <task_fuc+0x594>
				stop_watch_mode.time.time2++;
 8001188:	7263      	strb	r3, [r4, #9]
			if(touched_pad && befo_touch != curXY.touched && curXY.touched == 1){
 800118a:	9b06      	ldr	r3, [sp, #24]
 800118c:	9303      	str	r3, [sp, #12]
 800118e:	e5a8      	b.n	8000ce2 <task_fuc+0x4e>
							else if(mode == timer_menu) { timer_mode.time.time1 = set_time.time1 * 10 + set_time.time2; }
 8001190:	2e01      	cmp	r6, #1
 8001192:	d000      	beq.n	8001196 <task_fuc+0x502>
 8001194:	e6d3      	b.n	8000f3e <task_fuc+0x2aa>
 8001196:	200a      	movs	r0, #10
 8001198:	4341      	muls	r1, r0
 800119a:	185b      	adds	r3, r3, r1
 800119c:	4934      	ldr	r1, [pc, #208]	; (8001270 <task_fuc+0x5dc>)
 800119e:	700b      	strb	r3, [r1, #0]
 80011a0:	e6cd      	b.n	8000f3e <task_fuc+0x2aa>
					else if(input_state == min_input){
 80011a2:	2c02      	cmp	r4, #2
 80011a4:	d000      	beq.n	80011a8 <task_fuc+0x514>
 80011a6:	e6ca      	b.n	8000f3e <task_fuc+0x2aa>
						if(set_time.time1 * 10 + set_time.time2 > 59) { set_time.time1 = set_time.time2 = 10; }
 80011a8:	434a      	muls	r2, r1
 80011aa:	18d2      	adds	r2, r2, r3
 80011ac:	2a3b      	cmp	r2, #59	; 0x3b
 80011ae:	dc99      	bgt.n	80010e4 <task_fuc+0x450>
							input_state = none;
 80011b0:	2000      	movs	r0, #0
 80011b2:	7028      	strb	r0, [r5, #0]
							if(mode == main_menu)       { time.time2 = set_time.time1 * 10 + set_time.time2; }
 80011b4:	482a      	ldr	r0, [pc, #168]	; (8001260 <task_fuc+0x5cc>)
 80011b6:	7806      	ldrb	r6, [r0, #0]
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	d102      	bne.n	80011c2 <task_fuc+0x52e>
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <task_fuc+0x5d4>)
 80011be:	705a      	strb	r2, [r3, #1]
 80011c0:	e79e      	b.n	8001100 <task_fuc+0x46c>
							else if(mode == timer_menu) { timer_mode.time.time2 = set_time.time1 * 10 + set_time.time2; }
 80011c2:	2e01      	cmp	r6, #1
 80011c4:	d000      	beq.n	80011c8 <task_fuc+0x534>
 80011c6:	e6ba      	b.n	8000f3e <task_fuc+0x2aa>
 80011c8:	220a      	movs	r2, #10
 80011ca:	4351      	muls	r1, r2
 80011cc:	4a28      	ldr	r2, [pc, #160]	; (8001270 <task_fuc+0x5dc>)
 80011ce:	185b      	adds	r3, r3, r1
 80011d0:	7053      	strb	r3, [r2, #1]
 80011d2:	e6b4      	b.n	8000f3e <task_fuc+0x2aa>
				time.time2 = 0;
 80011d4:	2100      	movs	r1, #0
				time.time1++;
 80011d6:	781a      	ldrb	r2, [r3, #0]
				time.time2 = 0;
 80011d8:	7059      	strb	r1, [r3, #1]
				time.time1++;
 80011da:	3201      	adds	r2, #1
 80011dc:	b2d2      	uxtb	r2, r2
				if(time.time1 > 23) time.time1 = 0;
 80011de:	2a17      	cmp	r2, #23
 80011e0:	d801      	bhi.n	80011e6 <task_fuc+0x552>
				time.time1++;
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e79d      	b.n	8001122 <task_fuc+0x48e>
				if(time.time1 > 23) time.time1 = 0;
 80011e6:	7019      	strb	r1, [r3, #0]
 80011e8:	e79b      	b.n	8001122 <task_fuc+0x48e>
				if(HAL_GetTick() - timer_mode.tick >= 500){
 80011ea:	f000 fabf 	bl	800176c <HAL_GetTick>
 80011ee:	68a3      	ldr	r3, [r4, #8]
 80011f0:	1ac0      	subs	r0, r0, r3
 80011f2:	23fa      	movs	r3, #250	; 0xfa
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4298      	cmp	r0, r3
 80011f8:	d3b1      	bcc.n	800115e <task_fuc+0x4ca>
					timer_mode.tick = HAL_GetTick();
 80011fa:	f000 fab7 	bl	800176c <HAL_GetTick>
					state ^= 1;
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <task_fuc+0x5e0>)
					timer_mode.tick = HAL_GetTick();
 8001200:	60a0      	str	r0, [r4, #8]
					state ^= 1;
 8001202:	7818      	ldrb	r0, [r3, #0]
 8001204:	4068      	eors	r0, r5
 8001206:	7018      	strb	r0, [r3, #0]
					BUZ(state);
 8001208:	f7ff f9b6 	bl	8000578 <BUZ>
					setMotor(DRV8830_CW);
 800120c:	0028      	movs	r0, r5
 800120e:	f7ff f97b 	bl	8000508 <setMotor>
 8001212:	e7a4      	b.n	800115e <task_fuc+0x4ca>
		else { timer_mode.tick = HAL_GetTick(); setMotor(DRV8830_STOP); BUZ(0); }
 8001214:	f000 faaa 	bl	800176c <HAL_GetTick>
 8001218:	60a0      	str	r0, [r4, #8]
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff f974 	bl	8000508 <setMotor>
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff f9a9 	bl	8000578 <BUZ>
 8001226:	e79a      	b.n	800115e <task_fuc+0x4ca>
					stop_watch_mode.time.time2 = 0;
					stop_watch_mode.time.time1++;
 8001228:	7a23      	ldrb	r3, [r4, #8]
					stop_watch_mode.time.time2 = 0;
 800122a:	7266      	strb	r6, [r4, #9]
					stop_watch_mode.time.time1++;
 800122c:	3301      	adds	r3, #1
 800122e:	7223      	strb	r3, [r4, #8]
 8001230:	e7ab      	b.n	800118a <task_fuc+0x4f6>
				}
			}
		}
		else stop_watch_mode.tick = HAL_GetTick();
 8001232:	f000 fa9b 	bl	800176c <HAL_GetTick>
 8001236:	6060      	str	r0, [r4, #4]
 8001238:	e7a7      	b.n	800118a <task_fuc+0x4f6>
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	08004055 	.word	0x08004055
 8001240:	08004059 	.word	0x08004059
 8001244:	20000050 	.word	0x20000050
 8001248:	200001fa 	.word	0x200001fa
 800124c:	20000320 	.word	0x20000320
 8001250:	0800405e 	.word	0x0800405e
 8001254:	0800404a 	.word	0x0800404a
 8001258:	0800404f 	.word	0x0800404f
 800125c:	08004064 	.word	0x08004064
 8001260:	2000031d 	.word	0x2000031d
 8001264:	2000031c 	.word	0x2000031c
 8001268:	20000106 	.word	0x20000106
 800126c:	0000ea5f 	.word	0x0000ea5f
 8001270:	2000033c 	.word	0x2000033c
 8001274:	2000031e 	.word	0x2000031e

08001278 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001278:	b510      	push	{r4, lr}
 800127a:	b09c      	sub	sp, #112	; 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127c:	2224      	movs	r2, #36	; 0x24
 800127e:	2100      	movs	r1, #0
 8001280:	a80f      	add	r0, sp, #60	; 0x3c
 8001282:	f002 f8fe 	bl	8003482 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001286:	2214      	movs	r2, #20
 8001288:	2100      	movs	r1, #0
 800128a:	a801      	add	r0, sp, #4
 800128c:	f002 f8f9 	bl	8003482 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001290:	2220      	movs	r2, #32
 8001292:	2100      	movs	r1, #0
 8001294:	a806      	add	r0, sp, #24
 8001296:	f002 f8f4 	bl	8003482 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800129a:	491d      	ldr	r1, [pc, #116]	; (8001310 <SystemClock_Config+0x98>)
 800129c:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <SystemClock_Config+0x9c>)
 800129e:	680b      	ldr	r3, [r1, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a0:	2401      	movs	r4, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a2:	401a      	ands	r2, r3
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ac:	2302      	movs	r3, #2
 80012ae:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b0:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012b2:	2300      	movs	r3, #0
 80012b4:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	02db      	lsls	r3, r3, #11
 80012ba:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80012bc:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012be:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80012c0:	03db      	lsls	r3, r3, #15
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c2:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c4:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c6:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80012c8:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ca:	f000 ff49 	bl	8002160 <HAL_RCC_OscConfig>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d2:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012d4:	e7fe      	b.n	80012d4 <SystemClock_Config+0x5c>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d6:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d8:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012dc:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	3b0c      	subs	r3, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e0:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012e2:	0021      	movs	r1, r4
 80012e4:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e6:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012e8:	f001 f9bc 	bl	8002664 <HAL_RCC_ClockConfig>
 80012ec:	2800      	cmp	r0, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x7c>
 80012f0:	b672      	cpsid	i
	while (1)
 80012f2:	e7fe      	b.n	80012f2 <SystemClock_Config+0x7a>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80012f4:	2309      	movs	r3, #9
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012f6:	9008      	str	r0, [sp, #32]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012f8:	900b      	str	r0, [sp, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fa:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80012fc:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fe:	f001 fa9f 	bl	8002840 <HAL_RCCEx_PeriphCLKConfig>
 8001302:	2800      	cmp	r0, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0x92>
 8001306:	b672      	cpsid	i
	while (1)
 8001308:	e7fe      	b.n	8001308 <SystemClock_Config+0x90>
}
 800130a:	b01c      	add	sp, #112	; 0x70
 800130c:	bd10      	pop	{r4, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	40007000 	.word	0x40007000
 8001314:	ffffe7ff 	.word	0xffffe7ff

08001318 <main>:
{
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2501      	movs	r5, #1
{
 800131c:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 800131e:	f000 fa05 	bl	800172c <HAL_Init>
	SystemClock_Config();
 8001322:	f7ff ffa9 	bl	8001278 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	2214      	movs	r2, #20
 8001328:	2100      	movs	r1, #0
 800132a:	a805      	add	r0, sp, #20
 800132c:	f002 f8a9 	bl	8003482 <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	2102      	movs	r1, #2
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001332:	27a0      	movs	r7, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <main+0x1c0>)
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001336:	05ff      	lsls	r7, r7, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800133a:	0038      	movs	r0, r7
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	432a      	orrs	r2, r5
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001342:	2400      	movs	r4, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	402a      	ands	r2, r5
 8001346:	9201      	str	r2, [sp, #4]
 8001348:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	huart1.Instance = USART1;
 800134c:	4e63      	ldr	r6, [pc, #396]	; (80014dc <main+0x1c4>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	430a      	orrs	r2, r1
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	400b      	ands	r3, r1
 8001358:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800135a:	3136      	adds	r1, #54	; 0x36
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800135c:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800135e:	f000 fb21 	bl	80019a4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8001362:	2307      	movs	r3, #7
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	0038      	movs	r0, r7
 8001366:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8001368:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136a:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136c:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f000 fa59 	bl	8001824 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001372:	2338      	movs	r3, #56	; 0x38
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	0038      	movs	r0, r7
 8001376:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001378:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f000 fa50 	bl	8001824 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8001384:	230a      	movs	r3, #10
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	4856      	ldr	r0, [pc, #344]	; (80014e0 <main+0x1c8>)
 8001388:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 800138a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138c:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f000 fa48 	bl	8001824 <HAL_GPIO_Init>
	huart1.Init.BaudRate = 9600;
 8001394:	2396      	movs	r3, #150	; 0x96
	huart1.Instance = USART1;
 8001396:	4853      	ldr	r0, [pc, #332]	; (80014e4 <main+0x1cc>)
	huart1.Init.BaudRate = 9600;
 8001398:	019b      	lsls	r3, r3, #6
 800139a:	6043      	str	r3, [r0, #4]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800139c:	230c      	movs	r3, #12
	huart1.Instance = USART1;
 800139e:	6006      	str	r6, [r0, #0]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a0:	6084      	str	r4, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80013a2:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80013a4:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80013a6:	6143      	str	r3, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a8:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013aa:	61c4      	str	r4, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ac:	6204      	str	r4, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ae:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80013b0:	f002 f802 	bl	80033b8 <HAL_UART_Init>
 80013b4:	0005      	movs	r5, r0
 80013b6:	42a0      	cmp	r0, r4
 80013b8:	d001      	beq.n	80013be <main+0xa6>
 80013ba:	b672      	cpsid	i
	while (1)
 80013bc:	e7fe      	b.n	80013bc <main+0xa4>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013be:	0001      	movs	r1, r0
 80013c0:	2208      	movs	r2, #8
 80013c2:	a803      	add	r0, sp, #12
 80013c4:	f002 f85d 	bl	8003482 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 80013c8:	2210      	movs	r2, #16
 80013ca:	0029      	movs	r1, r5
 80013cc:	a805      	add	r0, sp, #20
 80013ce:	f002 f858 	bl	8003482 <memset>
	htim2.Instance = TIM2;
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	4c44      	ldr	r4, [pc, #272]	; (80014e8 <main+0x1d0>)
 80013d6:	05db      	lsls	r3, r3, #23
 80013d8:	6023      	str	r3, [r4, #0]
	htim2.Init.Prescaler = 32-1;
 80013da:	231f      	movs	r3, #31
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013dc:	0020      	movs	r0, r4
	htim2.Init.Prescaler = 32-1;
 80013de:	6063      	str	r3, [r4, #4]
	htim2.Init.Period = 250-1;
 80013e0:	33da      	adds	r3, #218	; 0xda
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	60a5      	str	r5, [r4, #8]
	htim2.Init.Period = 250-1;
 80013e4:	60e3      	str	r3, [r4, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	6125      	str	r5, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	6165      	str	r5, [r4, #20]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013ea:	f001 fbcd 	bl	8002b88 <HAL_TIM_PWM_Init>
 80013ee:	2800      	cmp	r0, #0
 80013f0:	d001      	beq.n	80013f6 <main+0xde>
 80013f2:	b672      	cpsid	i
	while (1)
 80013f4:	e7fe      	b.n	80013f4 <main+0xdc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	9003      	str	r0, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f8:	9004      	str	r0, [sp, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013fa:	a903      	add	r1, sp, #12
 80013fc:	0020      	movs	r0, r4
 80013fe:	f001 fc7d 	bl	8002cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001402:	1e02      	subs	r2, r0, #0
 8001404:	d001      	beq.n	800140a <main+0xf2>
 8001406:	b672      	cpsid	i
	while (1)
 8001408:	e7fe      	b.n	8001408 <main+0xf0>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140a:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140c:	9007      	str	r0, [sp, #28]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140e:	9305      	str	r3, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001410:	9008      	str	r0, [sp, #32]
	sConfigOC.Pulse = 125-1;
 8001412:	331c      	adds	r3, #28
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001414:	0020      	movs	r0, r4
 8001416:	a905      	add	r1, sp, #20
	sConfigOC.Pulse = 125-1;
 8001418:	9306      	str	r3, [sp, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800141a:	f001 fbe1 	bl	8002be0 <HAL_TIM_PWM_ConfigChannel>
 800141e:	1e05      	subs	r5, r0, #0
 8001420:	d001      	beq.n	8001426 <main+0x10e>
 8001422:	b672      	cpsid	i
	while (1)
 8001424:	e7fe      	b.n	8001424 <main+0x10c>
	HAL_TIM_MspPostInit(&htim2);
 8001426:	0020      	movs	r0, r4
 8001428:	f000 f8b4 	bl	8001594 <HAL_TIM_MspPostInit>
	hi2c1.Instance = I2C1;
 800142c:	4c2f      	ldr	r4, [pc, #188]	; (80014ec <main+0x1d4>)
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <main+0x1d8>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001430:	0020      	movs	r0, r4
	hi2c1.Instance = I2C1;
 8001432:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x00300F38;
 8001434:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <main+0x1dc>)
	hi2c1.Init.OwnAddress1 = 0;
 8001436:	60a5      	str	r5, [r4, #8]
	hi2c1.Init.Timing = 0x00300F38;
 8001438:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143a:	2301      	movs	r3, #1
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	6125      	str	r5, [r4, #16]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143e:	60e3      	str	r3, [r4, #12]
	hi2c1.Init.OwnAddress2 = 0;
 8001440:	6165      	str	r5, [r4, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001442:	61a5      	str	r5, [r4, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001444:	61e5      	str	r5, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001446:	6225      	str	r5, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001448:	f000 fbe2 	bl	8001c10 <HAL_I2C_Init>
 800144c:	1e01      	subs	r1, r0, #0
 800144e:	d001      	beq.n	8001454 <main+0x13c>
 8001450:	b672      	cpsid	i
	while (1)
 8001452:	e7fe      	b.n	8001452 <main+0x13a>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001454:	0020      	movs	r0, r4
 8001456:	f000 fdf1 	bl	800203c <HAL_I2CEx_ConfigAnalogFilter>
 800145a:	1e01      	subs	r1, r0, #0
 800145c:	d001      	beq.n	8001462 <main+0x14a>
 800145e:	b672      	cpsid	i
	while (1)
 8001460:	e7fe      	b.n	8001460 <main+0x148>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001462:	0020      	movs	r0, r4
 8001464:	f000 fe10 	bl	8002088 <HAL_I2CEx_ConfigDigitalFilter>
 8001468:	1e04      	subs	r4, r0, #0
 800146a:	d001      	beq.n	8001470 <main+0x158>
 800146c:	b672      	cpsid	i
	while (1)
 800146e:	e7fe      	b.n	800146e <main+0x156>
	initEns160();
 8001470:	f7ff f86e 	bl	8000550 <initEns160>
	initDrv8830();
 8001474:	f7ff f834 	bl	80004e0 <initDrv8830>
	LED(1, 0);
 8001478:	2308      	movs	r3, #8
 800147a:	61bb      	str	r3, [r7, #24]
	LED(2, 0);
 800147c:	18db      	adds	r3, r3, r3
 800147e:	61bb      	str	r3, [r7, #24]
	LED(3, 0);
 8001480:	3310      	adds	r3, #16
 8001482:	61bb      	str	r3, [r7, #24]
	setMotor(DRV8830_STOP);
 8001484:	0020      	movs	r0, r4
 8001486:	f7ff f83f 	bl	8000508 <setMotor>
	nextion_inst_set("baud=921600");
 800148a:	4c1b      	ldr	r4, [pc, #108]	; (80014f8 <main+0x1e0>)
 800148c:	0020      	movs	r0, r4
 800148e:	f7ff f881 	bl	8000594 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 8001492:	0020      	movs	r0, r4
 8001494:	f7ff f87e 	bl	8000594 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 8001498:	0020      	movs	r0, r4
 800149a:	f7ff f87b 	bl	8000594 <nextion_inst_set>
	HAL_Delay(50);
 800149e:	2032      	movs	r0, #50	; 0x32
 80014a0:	f000 f96a 	bl	8001778 <HAL_Delay>
	USART1->CR1 &= (~USART_CR1_UE);
 80014a4:	2201      	movs	r2, #1
 80014a6:	6833      	ldr	r3, [r6, #0]
	HAL_Delay(1000);
 80014a8:	20fa      	movs	r0, #250	; 0xfa
	USART1->CR1 &= (~USART_CR1_UE);
 80014aa:	4393      	bics	r3, r2
 80014ac:	6033      	str	r3, [r6, #0]
	USART1->BRR = 0x23;
 80014ae:	2323      	movs	r3, #35	; 0x23
 80014b0:	60f3      	str	r3, [r6, #12]
	USART1->CR1 |= USART_CR1_UE;
 80014b2:	6833      	ldr	r3, [r6, #0]
	HAL_Delay(1000);
 80014b4:	0080      	lsls	r0, r0, #2
	USART1->CR1 |= USART_CR1_UE;
 80014b6:	4313      	orrs	r3, r2
 80014b8:	6033      	str	r3, [r6, #0]
	HAL_Delay(1000);
 80014ba:	f000 f95d 	bl	8001778 <HAL_Delay>
	nextion_inst_set("cls WHITE");
 80014be:	4c0f      	ldr	r4, [pc, #60]	; (80014fc <main+0x1e4>)
 80014c0:	0020      	movs	r0, r4
 80014c2:	f7ff f867 	bl	8000594 <nextion_inst_set>
	nextion_inst_set("cls WHITE");
 80014c6:	0020      	movs	r0, r4
 80014c8:	f7ff f864 	bl	8000594 <nextion_inst_set>
	nextion_inst_set("cls WHITE");
 80014cc:	0020      	movs	r0, r4
 80014ce:	f7ff f861 	bl	8000594 <nextion_inst_set>
	task_fuc();
 80014d2:	f7ff fbdf 	bl	8000c94 <task_fuc>
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40013800 	.word	0x40013800
 80014e0:	50000400 	.word	0x50000400
 80014e4:	20000294 	.word	0x20000294
 80014e8:	20000254 	.word	0x20000254
 80014ec:	20000200 	.word	0x20000200
 80014f0:	40005400 	.word	0x40005400
 80014f4:	00300f38 	.word	0x00300f38
 80014f8:	0800406b 	.word	0x0800406b
 80014fc:	08004077 	.word	0x08004077

08001500 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001500:	2201      	movs	r2, #1
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_MspInit+0x18>)
 8001504:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001506:	430a      	orrs	r2, r1
 8001508:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800150e:	0552      	lsls	r2, r2, #21
 8001510:	430a      	orrs	r2, r1
 8001512:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001514:	4770      	bx	lr
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	40021000 	.word	0x40021000

0800151c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800151c:	b510      	push	{r4, lr}
 800151e:	0004      	movs	r4, r0
 8001520:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	2214      	movs	r2, #20
 8001524:	2100      	movs	r1, #0
 8001526:	a801      	add	r0, sp, #4
 8001528:	f001 ffab 	bl	8003482 <memset>
  if(hi2c->Instance==I2C1)
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_I2C_MspInit+0x50>)
 800152e:	6822      	ldr	r2, [r4, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d119      	bne.n	8001568 <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	2102      	movs	r1, #2
 8001536:	4c0e      	ldr	r4, [pc, #56]	; (8001570 <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	480e      	ldr	r0, [pc, #56]	; (8001574 <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800153c:	430a      	orrs	r2, r1
 800153e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001540:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001542:	400b      	ands	r3, r1
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001548:	23c0      	movs	r3, #192	; 0xc0
 800154a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154c:	3bae      	subs	r3, #174	; 0xae
 800154e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	3b0f      	subs	r3, #15
 8001552:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001556:	3b02      	subs	r3, #2
 8001558:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	f000 f963 	bl	8001824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001562:	039b      	lsls	r3, r3, #14
 8001564:	4313      	orrs	r3, r2
 8001566:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001568:	b006      	add	sp, #24
 800156a:	bd10      	pop	{r4, pc}
 800156c:	40005400 	.word	0x40005400
 8001570:	40021000 	.word	0x40021000
 8001574:	50000400 	.word	0x50000400

08001578 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	6802      	ldr	r2, [r0, #0]
 800157c:	05db      	lsls	r3, r3, #23
 800157e:	429a      	cmp	r2, r3
 8001580:	d104      	bne.n	800158c <HAL_TIM_PWM_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001582:	2301      	movs	r3, #1
 8001584:	4a02      	ldr	r2, [pc, #8]	; (8001590 <HAL_TIM_PWM_MspInit+0x18>)
 8001586:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001588:	430b      	orrs	r3, r1
 800158a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800158c:	4770      	bx	lr
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	40021000 	.word	0x40021000

08001594 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001594:	b510      	push	{r4, lr}
 8001596:	0004      	movs	r4, r0
 8001598:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	2214      	movs	r2, #20
 800159c:	2100      	movs	r1, #0
 800159e:	a801      	add	r0, sp, #4
 80015a0:	f001 ff6f 	bl	8003482 <memset>
  if(htim->Instance==TIM2)
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	6822      	ldr	r2, [r4, #0]
 80015a8:	05db      	lsls	r3, r3, #23
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d114      	bne.n	80015d8 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2001      	movs	r0, #1
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_TIM_MspPostInit+0x48>)
 80015b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80015b4:	4301      	orrs	r1, r0
 80015b6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80015b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4003      	ands	r3, r0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	021b      	lsls	r3, r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015c8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 80015d0:	3303      	adds	r3, #3
 80015d2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f000 f926 	bl	8001824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015d8:	b006      	add	sp, #24
 80015da:	bd10      	pop	{r4, pc}
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e0:	b510      	push	{r4, lr}
 80015e2:	0004      	movs	r4, r0
 80015e4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	2214      	movs	r2, #20
 80015e8:	2100      	movs	r1, #0
 80015ea:	a801      	add	r0, sp, #4
 80015ec:	f001 ff49 	bl	8003482 <memset>
  if(huart->Instance==USART1)
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_UART_MspInit+0x54>)
 80015f2:	6822      	ldr	r2, [r4, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d11b      	bne.n	8001630 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_UART_MspInit+0x58>)
 80015fc:	01d2      	lsls	r2, r2, #7
 80015fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001602:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001604:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 8001606:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	430a      	orrs	r2, r1
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	400b      	ands	r3, r1
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001618:	23c0      	movs	r3, #192	; 0xc0
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	185b      	adds	r3, r3, r1
 8001624:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001626:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800162a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f000 f8fa 	bl	8001824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001630:	b006      	add	sp, #24
 8001632:	bd10      	pop	{r4, pc}
 8001634:	40013800 	.word	0x40013800
 8001638:	40021000 	.word	0x40021000

0800163c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800163c:	e7fe      	b.n	800163c <NMI_Handler>

0800163e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler>

08001640 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001640:	4770      	bx	lr

08001642 <PendSV_Handler>:
 8001642:	4770      	bx	lr

08001644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001644:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001646:	f000 f885 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164a:	bd10      	pop	{r4, pc}

0800164c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800164c:	4a0b      	ldr	r2, [pc, #44]	; (800167c <_sbrk+0x30>)
 800164e:	490c      	ldr	r1, [pc, #48]	; (8001680 <_sbrk+0x34>)
{
 8001650:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001652:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <_sbrk+0x38>)
{
 8001656:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001658:	6810      	ldr	r0, [r2, #0]
 800165a:	2800      	cmp	r0, #0
 800165c:	d101      	bne.n	8001662 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800165e:	480a      	ldr	r0, [pc, #40]	; (8001688 <_sbrk+0x3c>)
 8001660:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	6810      	ldr	r0, [r2, #0]
 8001664:	18c3      	adds	r3, r0, r3
 8001666:	428b      	cmp	r3, r1
 8001668:	d906      	bls.n	8001678 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800166a:	f001 fed7 	bl	800341c <__errno>
 800166e:	230c      	movs	r3, #12
 8001670:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001672:	2001      	movs	r0, #1
 8001674:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001676:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001678:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800167a:	e7fc      	b.n	8001676 <_sbrk+0x2a>
 800167c:	00000400 	.word	0x00000400
 8001680:	20002000 	.word	0x20002000
 8001684:	20000348 	.word	0x20000348
 8001688:	20000360 	.word	0x20000360

0800168c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	4770      	bx	lr
	...

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001692:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001694:	f7ff fffa 	bl	800168c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001698:	480c      	ldr	r0, [pc, #48]	; (80016cc <LoopForever+0x6>)
  ldr r1, =_edata
 800169a:	490d      	ldr	r1, [pc, #52]	; (80016d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <LoopForever+0xe>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b0:	4c0a      	ldr	r4, [pc, #40]	; (80016dc <LoopForever+0x16>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016be:	f001 feb3 	bl	8003428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff fe29 	bl	8001318 <main>

080016c6 <LoopForever>:

LoopForever:
    b LoopForever
 80016c6:	e7fe      	b.n	80016c6 <LoopForever>
   ldr   r0, =_estack
 80016c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 80016d4:	08004108 	.word	0x08004108
  ldr r2, =_sbss
 80016d8:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 80016dc:	20000360 	.word	0x20000360

080016e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC1_COMP_IRQHandler>
	...

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b570      	push	{r4, r5, r6, lr}
 80016e6:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	20fa      	movs	r0, #250	; 0xfa
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <HAL_InitTick+0x3c>)
 80016ec:	0080      	lsls	r0, r0, #2
 80016ee:	7819      	ldrb	r1, [r3, #0]
 80016f0:	f7fe fd26 	bl	8000140 <__udivsi3>
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_InitTick+0x40>)
 80016f6:	0001      	movs	r1, r0
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	f7fe fd21 	bl	8000140 <__udivsi3>
 80016fe:	f000 f877 	bl	80017f0 <HAL_SYSTICK_Config>
 8001702:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001704:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001706:	2c00      	cmp	r4, #0
 8001708:	d109      	bne.n	800171e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170a:	2d03      	cmp	r5, #3
 800170c:	d807      	bhi.n	800171e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170e:	3802      	subs	r0, #2
 8001710:	0022      	movs	r2, r4
 8001712:	0029      	movs	r1, r5
 8001714:	f000 f842 	bl	800179c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	0020      	movs	r0, r4
 800171a:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_InitTick+0x44>)
 800171c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800171e:	bd70      	pop	{r4, r5, r6, pc}
 8001720:	2000010c 	.word	0x2000010c
 8001724:	20000108 	.word	0x20000108
 8001728:	20000110 	.word	0x20000110

0800172c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800172c:	2340      	movs	r3, #64	; 0x40
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <HAL_Init+0x24>)
{
 8001730:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001732:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001734:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001736:	430b      	orrs	r3, r1
 8001738:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800173a:	f7ff ffd3 	bl	80016e4 <HAL_InitTick>
 800173e:	1e04      	subs	r4, r0, #0
 8001740:	d103      	bne.n	800174a <HAL_Init+0x1e>
    HAL_MspInit();
 8001742:	f7ff fedd 	bl	8001500 <HAL_MspInit>
}
 8001746:	0020      	movs	r0, r4
 8001748:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800174a:	2401      	movs	r4, #1
 800174c:	e7fb      	b.n	8001746 <HAL_Init+0x1a>
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	40022000 	.word	0x40022000

08001754 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001754:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_IncTick+0x10>)
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <HAL_IncTick+0x14>)
 8001758:	6811      	ldr	r1, [r2, #0]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	185b      	adds	r3, r3, r1
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	4770      	bx	lr
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	2000034c 	.word	0x2000034c
 8001768:	2000010c 	.word	0x2000010c

0800176c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800176c:	4b01      	ldr	r3, [pc, #4]	; (8001774 <HAL_GetTick+0x8>)
 800176e:	6818      	ldr	r0, [r3, #0]
}
 8001770:	4770      	bx	lr
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	2000034c 	.word	0x2000034c

08001778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001778:	b570      	push	{r4, r5, r6, lr}
 800177a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff fff6 	bl	800176c <HAL_GetTick>
 8001780:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	1c63      	adds	r3, r4, #1
 8001784:	d002      	beq.n	800178c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <HAL_Delay+0x20>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800178c:	f7ff ffee 	bl	800176c <HAL_GetTick>
 8001790:	1b40      	subs	r0, r0, r5
 8001792:	42a0      	cmp	r0, r4
 8001794:	d3fa      	bcc.n	800178c <HAL_Delay+0x14>
  {
  }
}
 8001796:	bd70      	pop	{r4, r5, r6, pc}
 8001798:	2000010c 	.word	0x2000010c

0800179c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800179e:	25ff      	movs	r5, #255	; 0xff
 80017a0:	2403      	movs	r4, #3
 80017a2:	002a      	movs	r2, r5
 80017a4:	4004      	ands	r4, r0
 80017a6:	00e4      	lsls	r4, r4, #3
 80017a8:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017aa:	0189      	lsls	r1, r1, #6
 80017ac:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ae:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017b0:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b2:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80017b4:	2800      	cmp	r0, #0
 80017b6:	db0a      	blt.n	80017ce <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b8:	24c0      	movs	r4, #192	; 0xc0
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_NVIC_SetPriority+0x4c>)
 80017bc:	0880      	lsrs	r0, r0, #2
 80017be:	0080      	lsls	r0, r0, #2
 80017c0:	18c0      	adds	r0, r0, r3
 80017c2:	00a4      	lsls	r4, r4, #2
 80017c4:	5903      	ldr	r3, [r0, r4]
 80017c6:	401a      	ands	r2, r3
 80017c8:	4311      	orrs	r1, r2
 80017ca:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80017cc:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ce:	200f      	movs	r0, #15
 80017d0:	4003      	ands	r3, r0
 80017d2:	3b08      	subs	r3, #8
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_NVIC_SetPriority+0x50>)
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	181b      	adds	r3, r3, r0
 80017dc:	69d8      	ldr	r0, [r3, #28]
 80017de:	4002      	ands	r2, r0
 80017e0:	4311      	orrs	r1, r2
 80017e2:	61d9      	str	r1, [r3, #28]
 80017e4:	e7f2      	b.n	80017cc <HAL_NVIC_SetPriority+0x30>
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	1e43      	subs	r3, r0, #1
 80017f4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d20d      	bcs.n	8001818 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017fc:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001800:	4807      	ldr	r0, [pc, #28]	; (8001820 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001802:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001804:	6a03      	ldr	r3, [r0, #32]
 8001806:	0609      	lsls	r1, r1, #24
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	430b      	orrs	r3, r1
 800180e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001812:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001814:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001818:	4770      	bx	lr
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	e000e010 	.word	0xe000e010
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001824:	4a58      	ldr	r2, [pc, #352]	; (8001988 <HAL_GPIO_Init+0x164>)
{
 8001826:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001828:	1882      	adds	r2, r0, r2
 800182a:	1e54      	subs	r4, r2, #1
 800182c:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800182e:	2300      	movs	r3, #0
{
 8001830:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001832:	3205      	adds	r2, #5
{
 8001834:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001836:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001838:	9a03      	ldr	r2, [sp, #12]
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	0014      	movs	r4, r2
 800183e:	40dc      	lsrs	r4, r3
 8001840:	d101      	bne.n	8001846 <HAL_GPIO_Init+0x22>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 8001842:	b007      	add	sp, #28
 8001844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001846:	2101      	movs	r1, #1
 8001848:	000d      	movs	r5, r1
 800184a:	0014      	movs	r4, r2
 800184c:	409d      	lsls	r5, r3
 800184e:	402c      	ands	r4, r5
 8001850:	468c      	mov	ip, r1
 8001852:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8001854:	422a      	tst	r2, r5
 8001856:	d100      	bne.n	800185a <HAL_GPIO_Init+0x36>
 8001858:	e094      	b.n	8001984 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800185a:	2403      	movs	r4, #3
 800185c:	9a03      	ldr	r2, [sp, #12]
 800185e:	005e      	lsls	r6, r3, #1
 8001860:	6852      	ldr	r2, [r2, #4]
 8001862:	9201      	str	r2, [sp, #4]
 8001864:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001866:	40b4      	lsls	r4, r6
 8001868:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800186a:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800186c:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800186e:	4564      	cmp	r4, ip
 8001870:	d82a      	bhi.n	80018c8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8001872:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001874:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001876:	9903      	ldr	r1, [sp, #12]
 8001878:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187a:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800187c:	40b4      	lsls	r4, r6
 800187e:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8001880:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001882:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001884:	43ac      	bics	r4, r5
 8001886:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001888:	090c      	lsrs	r4, r1, #4
 800188a:	4661      	mov	r1, ip
 800188c:	400c      	ands	r4, r1
 800188e:	409c      	lsls	r4, r3
 8001890:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001892:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8001894:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001896:	9904      	ldr	r1, [sp, #16]
 8001898:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800189a:	9903      	ldr	r1, [sp, #12]
 800189c:	688c      	ldr	r4, [r1, #8]
 800189e:	40b4      	lsls	r4, r6
 80018a0:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80018a2:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a4:	2a02      	cmp	r2, #2
 80018a6:	d111      	bne.n	80018cc <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80018a8:	2507      	movs	r5, #7
 80018aa:	210f      	movs	r1, #15
 80018ac:	401d      	ands	r5, r3
 80018ae:	00ad      	lsls	r5, r5, #2
 80018b0:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 80018b2:	08dc      	lsrs	r4, r3, #3
 80018b4:	00a4      	lsls	r4, r4, #2
 80018b6:	1904      	adds	r4, r0, r4
 80018b8:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80018ba:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80018bc:	9903      	ldr	r1, [sp, #12]
 80018be:	6909      	ldr	r1, [r1, #16]
 80018c0:	40a9      	lsls	r1, r5
 80018c2:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80018c4:	6227      	str	r7, [r4, #32]
 80018c6:	e001      	b.n	80018cc <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c8:	2a03      	cmp	r2, #3
 80018ca:	d1e3      	bne.n	8001894 <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018cc:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 80018ce:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018d0:	9904      	ldr	r1, [sp, #16]
 80018d2:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d4:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 80018d6:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d8:	22c0      	movs	r2, #192	; 0xc0
 80018da:	9901      	ldr	r1, [sp, #4]
 80018dc:	0292      	lsls	r2, r2, #10
 80018de:	4211      	tst	r1, r2
 80018e0:	d050      	beq.n	8001984 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	2701      	movs	r7, #1
 80018e4:	4c29      	ldr	r4, [pc, #164]	; (800198c <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018e6:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018ea:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ec:	433a      	orrs	r2, r7
 80018ee:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80018f0:	4a27      	ldr	r2, [pc, #156]	; (8001990 <HAL_GPIO_Init+0x16c>)
 80018f2:	089c      	lsrs	r4, r3, #2
 80018f4:	00a4      	lsls	r4, r4, #2
 80018f6:	18a4      	adds	r4, r4, r2
 80018f8:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018fa:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80018fc:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018fe:	220f      	movs	r2, #15
 8001900:	00ad      	lsls	r5, r5, #2
 8001902:	40aa      	lsls	r2, r5
 8001904:	4661      	mov	r1, ip
 8001906:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001908:	22a0      	movs	r2, #160	; 0xa0
 800190a:	05d2      	lsls	r2, r2, #23
 800190c:	4694      	mov	ip, r2
 800190e:	2200      	movs	r2, #0
 8001910:	4560      	cmp	r0, ip
 8001912:	d00d      	beq.n	8001930 <HAL_GPIO_Init+0x10c>
 8001914:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <HAL_GPIO_Init+0x170>)
 8001916:	4694      	mov	ip, r2
 8001918:	003a      	movs	r2, r7
 800191a:	4560      	cmp	r0, ip
 800191c:	d008      	beq.n	8001930 <HAL_GPIO_Init+0x10c>
 800191e:	4f1e      	ldr	r7, [pc, #120]	; (8001998 <HAL_GPIO_Init+0x174>)
 8001920:	1892      	adds	r2, r2, r2
 8001922:	42b8      	cmp	r0, r7
 8001924:	d004      	beq.n	8001930 <HAL_GPIO_Init+0x10c>
 8001926:	4f1d      	ldr	r7, [pc, #116]	; (800199c <HAL_GPIO_Init+0x178>)
 8001928:	0032      	movs	r2, r6
 800192a:	42b8      	cmp	r0, r7
 800192c:	d000      	beq.n	8001930 <HAL_GPIO_Init+0x10c>
 800192e:	9a05      	ldr	r2, [sp, #20]
 8001930:	40aa      	lsls	r2, r5
 8001932:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8001934:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001936:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8001938:	000d      	movs	r5, r1
        temp = EXTI->RTSR;
 800193a:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 800193c:	43cc      	mvns	r4, r1
        temp = EXTI->RTSR;
 800193e:	6896      	ldr	r6, [r2, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001940:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8001942:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001944:	02c9      	lsls	r1, r1, #11
 8001946:	d401      	bmi.n	800194c <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8001948:	0035      	movs	r5, r6
 800194a:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 800194c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800194e:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8001950:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001952:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8001954:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001956:	0289      	lsls	r1, r1, #10
 8001958:	d401      	bmi.n	800195e <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 800195a:	0035      	movs	r5, r6
 800195c:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 800195e:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8001960:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001962:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001964:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8001966:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001968:	0389      	lsls	r1, r1, #14
 800196a:	d401      	bmi.n	8001970 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 800196c:	0035      	movs	r5, r6
 800196e:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8001970:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8001972:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8001974:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001976:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8001978:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800197a:	03c9      	lsls	r1, r1, #15
 800197c:	d401      	bmi.n	8001982 <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 800197e:	4025      	ands	r5, r4
 8001980:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8001982:	6016      	str	r6, [r2, #0]
    position++;
 8001984:	3301      	adds	r3, #1
 8001986:	e757      	b.n	8001838 <HAL_GPIO_Init+0x14>
 8001988:	afffe400 	.word	0xafffe400
 800198c:	40021000 	.word	0x40021000
 8001990:	40010000 	.word	0x40010000
 8001994:	50000400 	.word	0x50000400
 8001998:	50000800 	.word	0x50000800
 800199c:	50000c00 	.word	0x50000c00
 80019a0:	40010400 	.word	0x40010400

080019a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a4:	2a00      	cmp	r2, #0
 80019a6:	d001      	beq.n	80019ac <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80019aa:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80019ac:	6281      	str	r1, [r0, #40]	; 0x28
}
 80019ae:	e7fc      	b.n	80019aa <HAL_GPIO_WritePin+0x6>

080019b0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019b0:	6803      	ldr	r3, [r0, #0]
 80019b2:	699a      	ldr	r2, [r3, #24]
 80019b4:	0792      	lsls	r2, r2, #30
 80019b6:	d501      	bpl.n	80019bc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019b8:	2200      	movs	r2, #0
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019bc:	2201      	movs	r2, #1
 80019be:	6999      	ldr	r1, [r3, #24]
 80019c0:	4211      	tst	r1, r2
 80019c2:	d102      	bne.n	80019ca <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019c4:	6999      	ldr	r1, [r3, #24]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	619a      	str	r2, [r3, #24]
  }
}
 80019ca:	4770      	bx	lr

080019cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019cc:	b530      	push	{r4, r5, lr}
 80019ce:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019d0:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019d2:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019d4:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019d6:	0589      	lsls	r1, r1, #22
 80019d8:	431a      	orrs	r2, r3
 80019da:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <I2C_TransferConfig+0x28>)
 80019de:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019e0:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80019e2:	0d64      	lsrs	r4, r4, #21
 80019e4:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019e6:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80019e8:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019ea:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80019ec:	432a      	orrs	r2, r5
 80019ee:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80019f0:	bd30      	pop	{r4, r5, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	03ff63ff 	.word	0x03ff63ff

080019f8 <I2C_IsErrorOccurred>:
{
 80019f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019fa:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80019fc:	6802      	ldr	r2, [r0, #0]
{
 80019fe:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a00:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a02:	2310      	movs	r3, #16
 8001a04:	000f      	movs	r7, r1
{
 8001a06:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a08:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8001a0a:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a0c:	4219      	tst	r1, r3
 8001a0e:	d00e      	beq.n	8001a2e <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a10:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a12:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8001a14:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a16:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	699a      	ldr	r2, [r3, #24]
 8001a1c:	423a      	tst	r2, r7
 8001a1e:	d164      	bne.n	8001aea <I2C_IsErrorOccurred+0xf2>
 8001a20:	9a01      	ldr	r2, [sp, #4]
 8001a22:	2a00      	cmp	r2, #0
 8001a24:	d032      	beq.n	8001a8c <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 8001a26:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8001a28:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8001a2a:	9b00      	ldr	r3, [sp, #0]
 8001a2c:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a2e:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8001a30:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a32:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 8001a34:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a36:	420a      	tst	r2, r1
 8001a38:	d002      	beq.n	8001a40 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 8001a3a:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a3c:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8001a3e:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a40:	2180      	movs	r1, #128	; 0x80
 8001a42:	00c9      	lsls	r1, r1, #3
 8001a44:	420a      	tst	r2, r1
 8001a46:	d003      	beq.n	8001a50 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8001a48:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a4a:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8001a4c:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 8001a4e:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	0089      	lsls	r1, r1, #2
 8001a54:	420a      	tst	r2, r1
 8001a56:	d04d      	beq.n	8001af4 <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001a58:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a5a:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8001a5c:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 8001a5e:	0020      	movs	r0, r4
 8001a60:	f7ff ffa6 	bl	80019b0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001a64:	6822      	ldr	r2, [r4, #0]
 8001a66:	4925      	ldr	r1, [pc, #148]	; (8001afc <I2C_IsErrorOccurred+0x104>)
 8001a68:	6853      	ldr	r3, [r2, #4]
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a6e:	0023      	movs	r3, r4
 8001a70:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8001a72:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a74:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 8001a76:	4307      	orrs	r7, r0
 8001a78:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a7a:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7c:	0022      	movs	r2, r4
 8001a7e:	2300      	movs	r3, #0
 8001a80:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8001a82:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a84:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001a86:	2001      	movs	r0, #1
 8001a88:	7023      	strb	r3, [r4, #0]
 8001a8a:	e035      	b.n	8001af8 <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 8001a8c:	1c72      	adds	r2, r6, #1
 8001a8e:	d0c4      	beq.n	8001a1a <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a90:	f7ff fe6c 	bl	800176c <HAL_GetTick>
 8001a94:	1b40      	subs	r0, r0, r5
 8001a96:	42b0      	cmp	r0, r6
 8001a98:	d801      	bhi.n	8001a9e <I2C_IsErrorOccurred+0xa6>
 8001a9a:	2e00      	cmp	r6, #0
 8001a9c:	d1bc      	bne.n	8001a18 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8001a9e:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001aa0:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8001aa2:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001aa4:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8001aa6:	7811      	ldrb	r1, [r2, #0]
 8001aa8:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001aaa:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8001aac:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001aae:	699a      	ldr	r2, [r3, #24]
 8001ab0:	0209      	lsls	r1, r1, #8
 8001ab2:	420a      	tst	r2, r1
 8001ab4:	d00c      	beq.n	8001ad0 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001aba:	4210      	tst	r0, r2
 8001abc:	d108      	bne.n	8001ad0 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 8001abe:	4661      	mov	r1, ip
 8001ac0:	2920      	cmp	r1, #32
 8001ac2:	d005      	beq.n	8001ad0 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8001aca:	f7ff fe4f 	bl	800176c <HAL_GetTick>
 8001ace:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	423b      	tst	r3, r7
 8001ad6:	d19f      	bne.n	8001a18 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ad8:	f7ff fe48 	bl	800176c <HAL_GetTick>
 8001adc:	1b40      	subs	r0, r0, r5
 8001ade:	2819      	cmp	r0, #25
 8001ae0:	d9f6      	bls.n	8001ad0 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ae4:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	e796      	b.n	8001a18 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 8001aea:	9a01      	ldr	r2, [sp, #4]
 8001aec:	2a00      	cmp	r2, #0
 8001aee:	d19a      	bne.n	8001a26 <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001af0:	61df      	str	r7, [r3, #28]
 8001af2:	e798      	b.n	8001a26 <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d1b2      	bne.n	8001a5e <I2C_IsErrorOccurred+0x66>
}
 8001af8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	fe00e800 	.word	0xfe00e800

08001b00 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b02:	0004      	movs	r4, r0
 8001b04:	000d      	movs	r5, r1
 8001b06:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b08:	2702      	movs	r7, #2
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	423b      	tst	r3, r7
 8001b10:	d001      	beq.n	8001b16 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8001b12:	2000      	movs	r0, #0
}
 8001b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b16:	0032      	movs	r2, r6
 8001b18:	0029      	movs	r1, r5
 8001b1a:	0020      	movs	r0, r4
 8001b1c:	f7ff ff6c 	bl	80019f8 <I2C_IsErrorOccurred>
 8001b20:	2800      	cmp	r0, #0
 8001b22:	d118      	bne.n	8001b56 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8001b24:	1c6b      	adds	r3, r5, #1
 8001b26:	d0f0      	beq.n	8001b0a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b28:	f7ff fe20 	bl	800176c <HAL_GetTick>
 8001b2c:	1b80      	subs	r0, r0, r6
 8001b2e:	42a8      	cmp	r0, r5
 8001b30:	d801      	bhi.n	8001b36 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8001b32:	2d00      	cmp	r5, #0
 8001b34:	d1e9      	bne.n	8001b0a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	403a      	ands	r2, r7
 8001b3e:	423b      	tst	r3, r7
 8001b40:	d1e3      	bne.n	8001b0a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b42:	2120      	movs	r1, #32
 8001b44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b46:	430b      	orrs	r3, r1
 8001b48:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b4a:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8001b4c:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8001b4e:	3341      	adds	r3, #65	; 0x41
 8001b50:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b52:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8001b54:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8001b56:	2001      	movs	r0, #1
 8001b58:	e7dc      	b.n	8001b14 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08001b5a <I2C_WaitOnFlagUntilTimeout>:
{
 8001b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b5c:	0004      	movs	r4, r0
 8001b5e:	000d      	movs	r5, r1
 8001b60:	0017      	movs	r7, r2
 8001b62:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b64:	6822      	ldr	r2, [r4, #0]
 8001b66:	6993      	ldr	r3, [r2, #24]
 8001b68:	402b      	ands	r3, r5
 8001b6a:	1b5b      	subs	r3, r3, r5
 8001b6c:	4259      	negs	r1, r3
 8001b6e:	414b      	adcs	r3, r1
 8001b70:	42bb      	cmp	r3, r7
 8001b72:	d001      	beq.n	8001b78 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001b74:	2000      	movs	r0, #0
 8001b76:	e01f      	b.n	8001bb8 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8001b78:	1c73      	adds	r3, r6, #1
 8001b7a:	d0f4      	beq.n	8001b66 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b7c:	f7ff fdf6 	bl	800176c <HAL_GetTick>
 8001b80:	9b06      	ldr	r3, [sp, #24]
 8001b82:	1ac0      	subs	r0, r0, r3
 8001b84:	42b0      	cmp	r0, r6
 8001b86:	d801      	bhi.n	8001b8c <I2C_WaitOnFlagUntilTimeout+0x32>
 8001b88:	2e00      	cmp	r6, #0
 8001b8a:	d1eb      	bne.n	8001b64 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	402b      	ands	r3, r5
 8001b92:	1b5b      	subs	r3, r3, r5
 8001b94:	425a      	negs	r2, r3
 8001b96:	4153      	adcs	r3, r2
 8001b98:	42bb      	cmp	r3, r7
 8001b9a:	d1e3      	bne.n	8001b64 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8001ba0:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ba6:	0023      	movs	r3, r4
 8001ba8:	3341      	adds	r3, #65	; 0x41
 8001baa:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bac:	0022      	movs	r2, r4
 8001bae:	2300      	movs	r3, #0
 8001bb0:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8001bb2:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb4:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8001bb6:	7023      	strb	r3, [r4, #0]
}
 8001bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001bba <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bbc:	0004      	movs	r4, r0
 8001bbe:	000e      	movs	r6, r1
 8001bc0:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bc2:	2520      	movs	r5, #32
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	422b      	tst	r3, r5
 8001bca:	d001      	beq.n	8001bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8001bcc:	2000      	movs	r0, #0
}
 8001bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd0:	003a      	movs	r2, r7
 8001bd2:	0031      	movs	r1, r6
 8001bd4:	0020      	movs	r0, r4
 8001bd6:	f7ff ff0f 	bl	80019f8 <I2C_IsErrorOccurred>
 8001bda:	2800      	cmp	r0, #0
 8001bdc:	d115      	bne.n	8001c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bde:	f7ff fdc5 	bl	800176c <HAL_GetTick>
 8001be2:	1bc0      	subs	r0, r0, r7
 8001be4:	42b0      	cmp	r0, r6
 8001be6:	d801      	bhi.n	8001bec <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8001be8:	2e00      	cmp	r6, #0
 8001bea:	d1eb      	bne.n	8001bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	402a      	ands	r2, r5
 8001bf4:	422b      	tst	r3, r5
 8001bf6:	d1e5      	bne.n	8001bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bf8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bfa:	432b      	orrs	r3, r5
 8001bfc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bfe:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8001c00:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8001c02:	3341      	adds	r3, #65	; 0x41
 8001c04:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c06:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8001c08:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	e7df      	b.n	8001bce <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

08001c10 <HAL_I2C_Init>:
{
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001c14:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001c16:	2c00      	cmp	r4, #0
 8001c18:	d03f      	beq.n	8001c9a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c1a:	0025      	movs	r5, r4
 8001c1c:	3541      	adds	r5, #65	; 0x41
 8001c1e:	782b      	ldrb	r3, [r5, #0]
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d105      	bne.n	8001c32 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8001c26:	0023      	movs	r3, r4
 8001c28:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001c2a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8001c2c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8001c2e:	f7ff fc75 	bl	800151c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c32:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001c34:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c36:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001c38:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c3a:	481d      	ldr	r0, [pc, #116]	; (8001cb0 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8001c3c:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c3e:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8001c40:	438a      	bics	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c44:	6861      	ldr	r1, [r4, #4]
 8001c46:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <HAL_I2C_Init+0xa4>)
 8001c48:	400a      	ands	r2, r1
 8001c4a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	4002      	ands	r2, r0
 8001c50:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c52:	68e2      	ldr	r2, [r4, #12]
 8001c54:	2a01      	cmp	r2, #1
 8001c56:	d121      	bne.n	8001c9c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	0209      	lsls	r1, r1, #8
 8001c5c:	4331      	orrs	r1, r6
 8001c5e:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4915      	ldr	r1, [pc, #84]	; (8001cb8 <HAL_I2C_Init+0xa8>)
 8001c64:	4311      	orrs	r1, r2
 8001c66:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c68:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c6a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c6c:	4002      	ands	r2, r0
 8001c6e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c70:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c72:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c74:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c76:	69a1      	ldr	r1, [r4, #24]
 8001c78:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c7e:	6a21      	ldr	r1, [r4, #32]
 8001c80:	69e2      	ldr	r2, [r4, #28]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001c86:	2201      	movs	r2, #1
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001c8e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c90:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c92:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c94:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c96:	3442      	adds	r4, #66	; 0x42
 8001c98:	7020      	strb	r0, [r4, #0]
}
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c9c:	2184      	movs	r1, #132	; 0x84
 8001c9e:	0209      	lsls	r1, r1, #8
 8001ca0:	4331      	orrs	r1, r6
 8001ca2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ca4:	2a02      	cmp	r2, #2
 8001ca6:	d1db      	bne.n	8001c60 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ca8:	2280      	movs	r2, #128	; 0x80
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	e7d7      	b.n	8001c60 <HAL_I2C_Init+0x50>
 8001cb0:	ffff7fff 	.word	0xffff7fff
 8001cb4:	f0ffffff 	.word	0xf0ffffff
 8001cb8:	02008000 	.word	0x02008000

08001cbc <HAL_I2C_Mem_Write>:
{
 8001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	9304      	str	r3, [sp, #16]
 8001cc2:	ab0e      	add	r3, sp, #56	; 0x38
 8001cc4:	9203      	str	r2, [sp, #12]
 8001cc6:	cb04      	ldmia	r3!, {r2}
 8001cc8:	0004      	movs	r4, r0
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	9205      	str	r2, [sp, #20]
 8001cce:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	3341      	adds	r3, #65	; 0x41
 8001cd4:	9307      	str	r3, [sp, #28]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
{
 8001cd8:	000f      	movs	r7, r1
    return HAL_BUSY;
 8001cda:	2002      	movs	r0, #2
{
 8001cdc:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d108      	bne.n	8001cf4 <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 8001ce2:	2a00      	cmp	r2, #0
 8001ce4:	d002      	beq.n	8001cec <HAL_I2C_Mem_Write+0x30>
 8001ce6:	9b06      	ldr	r3, [sp, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001cf2:	2001      	movs	r0, #1
}
 8001cf4:	b009      	add	sp, #36	; 0x24
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001cf8:	0023      	movs	r3, r4
 8001cfa:	3340      	adds	r3, #64	; 0x40
 8001cfc:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001cfe:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8001d00:	2a01      	cmp	r2, #1
 8001d02:	d0f7      	beq.n	8001cf4 <HAL_I2C_Mem_Write+0x38>
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001d08:	f7ff fd30 	bl	800176c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d0c:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8001d0e:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d10:	9000      	str	r0, [sp, #0]
 8001d12:	2319      	movs	r3, #25
 8001d14:	2201      	movs	r2, #1
 8001d16:	0020      	movs	r0, r4
 8001d18:	0209      	lsls	r1, r1, #8
 8001d1a:	f7ff ff1e 	bl	8001b5a <I2C_WaitOnFlagUntilTimeout>
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	d1e7      	bne.n	8001cf2 <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d22:	2321      	movs	r3, #33	; 0x21
 8001d24:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d26:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d28:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d2a:	0023      	movs	r3, r4
 8001d2c:	3342      	adds	r3, #66	; 0x42
 8001d2e:	9307      	str	r3, [sp, #28]
 8001d30:	2340      	movs	r3, #64	; 0x40
 8001d32:	9a07      	ldr	r2, [sp, #28]
 8001d34:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8001d36:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d38:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001d3a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d3c:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 8001d3e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001d40:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d42:	466b      	mov	r3, sp
 8001d44:	7c1a      	ldrb	r2, [r3, #16]
 8001d46:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <HAL_I2C_Mem_Write+0x1b4>)
 8001d48:	0020      	movs	r0, r4
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	045b      	lsls	r3, r3, #17
 8001d50:	f7ff fe3c 	bl	80019cc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d54:	002a      	movs	r2, r5
 8001d56:	0031      	movs	r1, r6
 8001d58:	0020      	movs	r0, r4
 8001d5a:	f7ff fed1 	bl	8001b00 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	d126      	bne.n	8001db0 <HAL_I2C_Mem_Write+0xf4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d62:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d64:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d66:	2a01      	cmp	r2, #1
 8001d68:	d116      	bne.n	8001d98 <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d6a:	466a      	mov	r2, sp
 8001d6c:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d6e:	2180      	movs	r1, #128	; 0x80
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d72:	0020      	movs	r0, r4
 8001d74:	0033      	movs	r3, r6
 8001d76:	2200      	movs	r2, #0
 8001d78:	9500      	str	r5, [sp, #0]
 8001d7a:	f7ff feee 	bl	8001b5a <I2C_WaitOnFlagUntilTimeout>
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	d116      	bne.n	8001db0 <HAL_I2C_Mem_Write+0xf4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d84:	2bff      	cmp	r3, #255	; 0xff
 8001d86:	d817      	bhi.n	8001db8 <HAL_I2C_Mem_Write+0xfc>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d88:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8001d8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d8c:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8001d8e:	b292      	uxth	r2, r2
 8001d90:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	9000      	str	r0, [sp, #0]
 8001d96:	e014      	b.n	8001dc2 <HAL_I2C_Mem_Write+0x106>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d98:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d9a:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d9c:	0a12      	lsrs	r2, r2, #8
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da0:	0020      	movs	r0, r4
 8001da2:	002a      	movs	r2, r5
 8001da4:	f7ff feac 	bl	8001b00 <I2C_WaitOnTXISFlagUntilTimeout>
 8001da8:	2800      	cmp	r0, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	e7dc      	b.n	8001d6a <HAL_I2C_Mem_Write+0xae>
      __HAL_UNLOCK(hi2c);
 8001db0:	2300      	movs	r3, #0
 8001db2:	3440      	adds	r4, #64	; 0x40
 8001db4:	7023      	strb	r3, [r4, #0]
 8001db6:	e79c      	b.n	8001cf2 <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001db8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001dba:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dbc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001dbe:	045b      	lsls	r3, r3, #17
 8001dc0:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001dc2:	0039      	movs	r1, r7
 8001dc4:	0020      	movs	r0, r4
 8001dc6:	f7ff fe01 	bl	80019cc <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dca:	002a      	movs	r2, r5
 8001dcc:	0031      	movs	r1, r6
 8001dce:	0020      	movs	r0, r4
 8001dd0:	f7ff fe96 	bl	8001b00 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d000      	beq.n	8001dda <HAL_I2C_Mem_Write+0x11e>
 8001dd8:	e78b      	b.n	8001cf2 <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ddc:	6822      	ldr	r2, [r4, #0]
 8001dde:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001de0:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001de2:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001de4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001de6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001de8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001df0:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001df2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001df4:	b292      	uxth	r2, r2
 8001df6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d017      	beq.n	8001e2c <HAL_I2C_Mem_Write+0x170>
 8001dfc:	2a00      	cmp	r2, #0
 8001dfe:	d115      	bne.n	8001e2c <HAL_I2C_Mem_Write+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e00:	0033      	movs	r3, r6
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	0020      	movs	r0, r4
 8001e06:	9500      	str	r5, [sp, #0]
 8001e08:	f7ff fea7 	bl	8001b5a <I2C_WaitOnFlagUntilTimeout>
 8001e0c:	2800      	cmp	r0, #0
 8001e0e:	d000      	beq.n	8001e12 <HAL_I2C_Mem_Write+0x156>
 8001e10:	e76f      	b.n	8001cf2 <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e14:	2bff      	cmp	r3, #255	; 0xff
 8001e16:	d923      	bls.n	8001e60 <HAL_I2C_Mem_Write+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e18:	23ff      	movs	r3, #255	; 0xff
 8001e1a:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	22ff      	movs	r2, #255	; 0xff
 8001e20:	9000      	str	r0, [sp, #0]
 8001e22:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e24:	0039      	movs	r1, r7
 8001e26:	0020      	movs	r0, r4
 8001e28:	f7ff fdd0 	bl	80019cc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001e2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1cb      	bne.n	8001dca <HAL_I2C_Mem_Write+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e32:	002a      	movs	r2, r5
 8001e34:	0031      	movs	r1, r6
 8001e36:	0020      	movs	r0, r4
 8001e38:	f7ff febf 	bl	8001bba <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d000      	beq.n	8001e42 <HAL_I2C_Mem_Write+0x186>
 8001e40:	e757      	b.n	8001cf2 <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e42:	2120      	movs	r1, #32
 8001e44:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001e46:	4d0b      	ldr	r5, [pc, #44]	; (8001e74 <HAL_I2C_Mem_Write+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e48:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	402a      	ands	r2, r5
 8001e4e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e50:	0023      	movs	r3, r4
 8001e52:	3341      	adds	r3, #65	; 0x41
 8001e54:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e56:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8001e58:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e5a:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001e5c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001e5e:	e749      	b.n	8001cf4 <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e60:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8001e62:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e64:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8001e66:	b292      	uxth	r2, r2
 8001e68:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	9000      	str	r0, [sp, #0]
 8001e6e:	e7d9      	b.n	8001e24 <HAL_I2C_Mem_Write+0x168>
 8001e70:	80002000 	.word	0x80002000
 8001e74:	fe00e800 	.word	0xfe00e800

08001e78 <HAL_I2C_Mem_Read>:
{
 8001e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	9304      	str	r3, [sp, #16]
 8001e7e:	ab0e      	add	r3, sp, #56	; 0x38
 8001e80:	9203      	str	r2, [sp, #12]
 8001e82:	cb04      	ldmia	r3!, {r2}
 8001e84:	0004      	movs	r4, r0
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	9205      	str	r2, [sp, #20]
 8001e8a:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	3341      	adds	r3, #65	; 0x41
 8001e90:	9307      	str	r3, [sp, #28]
 8001e92:	781b      	ldrb	r3, [r3, #0]
{
 8001e94:	000f      	movs	r7, r1
    return HAL_BUSY;
 8001e96:	2002      	movs	r0, #2
{
 8001e98:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d108      	bne.n	8001eb0 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 8001e9e:	2a00      	cmp	r2, #0
 8001ea0:	d002      	beq.n	8001ea8 <HAL_I2C_Mem_Read+0x30>
 8001ea2:	9b06      	ldr	r3, [sp, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001eae:	2001      	movs	r0, #1
}
 8001eb0:	b009      	add	sp, #36	; 0x24
 8001eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001eb4:	0023      	movs	r3, r4
 8001eb6:	3340      	adds	r3, #64	; 0x40
 8001eb8:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001eba:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8001ebc:	2a01      	cmp	r2, #1
 8001ebe:	d0f7      	beq.n	8001eb0 <HAL_I2C_Mem_Read+0x38>
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001ec4:	f7ff fc52 	bl	800176c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ec8:	2180      	movs	r1, #128	; 0x80
 8001eca:	2319      	movs	r3, #25
 8001ecc:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001ece:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	0020      	movs	r0, r4
 8001ed4:	0209      	lsls	r1, r1, #8
 8001ed6:	f7ff fe40 	bl	8001b5a <I2C_WaitOnFlagUntilTimeout>
 8001eda:	1e03      	subs	r3, r0, #0
 8001edc:	d1e7      	bne.n	8001eae <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ede:	2222      	movs	r2, #34	; 0x22
 8001ee0:	9907      	ldr	r1, [sp, #28]
 8001ee2:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ee4:	0022      	movs	r2, r4
 8001ee6:	3242      	adds	r2, #66	; 0x42
 8001ee8:	9207      	str	r2, [sp, #28]
 8001eea:	2240      	movs	r2, #64	; 0x40
 8001eec:	9907      	ldr	r1, [sp, #28]
 8001eee:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8001ef0:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001ef4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ef6:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ef8:	494d      	ldr	r1, [pc, #308]	; (8002030 <HAL_I2C_Mem_Read+0x1b8>)
    hi2c->XferCount = Size;
 8001efa:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001efc:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8001efe:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f00:	7c12      	ldrb	r2, [r2, #16]
 8001f02:	0020      	movs	r0, r4
 8001f04:	9100      	str	r1, [sp, #0]
 8001f06:	0039      	movs	r1, r7
 8001f08:	f7ff fd60 	bl	80019cc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f0c:	002a      	movs	r2, r5
 8001f0e:	0031      	movs	r1, r6
 8001f10:	0020      	movs	r0, r4
 8001f12:	f7ff fdf5 	bl	8001b00 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f16:	2800      	cmp	r0, #0
 8001f18:	d127      	bne.n	8001f6a <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f1a:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f1c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f1e:	2a01      	cmp	r2, #1
 8001f20:	d117      	bne.n	8001f52 <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f22:	466a      	mov	r2, sp
 8001f24:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001f26:	2140      	movs	r1, #64	; 0x40
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001f2a:	0020      	movs	r0, r4
 8001f2c:	0033      	movs	r3, r6
 8001f2e:	2200      	movs	r2, #0
 8001f30:	9500      	str	r5, [sp, #0]
 8001f32:	f7ff fe12 	bl	8001b5a <I2C_WaitOnFlagUntilTimeout>
 8001f36:	2800      	cmp	r0, #0
 8001f38:	d117      	bne.n	8001f6a <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f3a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f3c:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <HAL_I2C_Mem_Read+0x1bc>)
 8001f3e:	2aff      	cmp	r2, #255	; 0xff
 8001f40:	d817      	bhi.n	8001f72 <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 8001f42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f44:	b292      	uxth	r2, r2
 8001f46:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	049b      	lsls	r3, r3, #18
 8001f50:	e014      	b.n	8001f7c <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f52:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f54:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f56:	0a12      	lsrs	r2, r2, #8
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f5a:	0020      	movs	r0, r4
 8001f5c:	002a      	movs	r2, r5
 8001f5e:	f7ff fdcf 	bl	8001b00 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f62:	2800      	cmp	r0, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	e7db      	b.n	8001f22 <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	3440      	adds	r4, #64	; 0x40
 8001f6e:	7023      	strb	r3, [r4, #0]
 8001f70:	e79d      	b.n	8001eae <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f72:	22ff      	movs	r2, #255	; 0xff
 8001f74:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f7c:	0039      	movs	r1, r7
 8001f7e:	0020      	movs	r0, r4
 8001f80:	f7ff fd24 	bl	80019cc <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f84:	0033      	movs	r3, r6
 8001f86:	2200      	movs	r2, #0
 8001f88:	2104      	movs	r1, #4
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	9500      	str	r5, [sp, #0]
 8001f8e:	f7ff fde4 	bl	8001b5a <I2C_WaitOnFlagUntilTimeout>
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d000      	beq.n	8001f98 <HAL_I2C_Mem_Read+0x120>
 8001f96:	e78a      	b.n	8001eae <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001fa2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001fa8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001faa:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fb2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001fb4:	b292      	uxth	r2, r2
 8001fb6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d017      	beq.n	8001fec <HAL_I2C_Mem_Read+0x174>
 8001fbc:	2a00      	cmp	r2, #0
 8001fbe:	d115      	bne.n	8001fec <HAL_I2C_Mem_Read+0x174>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fc0:	0033      	movs	r3, r6
 8001fc2:	2180      	movs	r1, #128	; 0x80
 8001fc4:	0020      	movs	r0, r4
 8001fc6:	9500      	str	r5, [sp, #0]
 8001fc8:	f7ff fdc7 	bl	8001b5a <I2C_WaitOnFlagUntilTimeout>
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d000      	beq.n	8001fd2 <HAL_I2C_Mem_Read+0x15a>
 8001fd0:	e76d      	b.n	8001eae <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fd4:	2bff      	cmp	r3, #255	; 0xff
 8001fd6:	d923      	bls.n	8002020 <HAL_I2C_Mem_Read+0x1a8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fd8:	23ff      	movs	r3, #255	; 0xff
 8001fda:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	22ff      	movs	r2, #255	; 0xff
 8001fe0:	9000      	str	r0, [sp, #0]
 8001fe2:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fe4:	0039      	movs	r1, r7
 8001fe6:	0020      	movs	r0, r4
 8001fe8:	f7ff fcf0 	bl	80019cc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001fec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1c8      	bne.n	8001f84 <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff2:	002a      	movs	r2, r5
 8001ff4:	0031      	movs	r1, r6
 8001ff6:	0020      	movs	r0, r4
 8001ff8:	f7ff fddf 	bl	8001bba <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d000      	beq.n	8002002 <HAL_I2C_Mem_Read+0x18a>
 8002000:	e755      	b.n	8001eae <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002002:	2120      	movs	r1, #32
 8002004:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002006:	4d0c      	ldr	r5, [pc, #48]	; (8002038 <HAL_I2C_Mem_Read+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002008:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	402a      	ands	r2, r5
 800200e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002010:	0023      	movs	r3, r4
 8002012:	3341      	adds	r3, #65	; 0x41
 8002014:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002016:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8002018:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800201a:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800201c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800201e:	e747      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002020:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8002022:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002024:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002026:	b292      	uxth	r2, r2
 8002028:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	9000      	str	r0, [sp, #0]
 800202e:	e7d9      	b.n	8001fe4 <HAL_I2C_Mem_Read+0x16c>
 8002030:	80002000 	.word	0x80002000
 8002034:	80002400 	.word	0x80002400
 8002038:	fe00e800 	.word	0xfe00e800

0800203c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800203c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203e:	0004      	movs	r4, r0
 8002040:	3441      	adds	r4, #65	; 0x41
 8002042:	7822      	ldrb	r2, [r4, #0]
{
 8002044:	0003      	movs	r3, r0
 8002046:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002048:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800204a:	b2d6      	uxtb	r6, r2
 800204c:	2a20      	cmp	r2, #32
 800204e:	d118      	bne.n	8002082 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8002050:	001d      	movs	r5, r3
 8002052:	3540      	adds	r5, #64	; 0x40
 8002054:	782a      	ldrb	r2, [r5, #0]
 8002056:	2a01      	cmp	r2, #1
 8002058:	d013      	beq.n	8002082 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800205a:	2224      	movs	r2, #36	; 0x24
 800205c:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3a23      	subs	r2, #35	; 0x23
 8002062:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002064:	4807      	ldr	r0, [pc, #28]	; (8002084 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8002066:	4391      	bics	r1, r2
 8002068:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800206a:	6819      	ldr	r1, [r3, #0]
 800206c:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 800206e:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002070:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002072:	6819      	ldr	r1, [r3, #0]
 8002074:	4339      	orrs	r1, r7
 8002076:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002078:	6819      	ldr	r1, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800207e:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002080:	7028      	strb	r0, [r5, #0]
  }
}
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002084:	ffffefff 	.word	0xffffefff

08002088 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002088:	0002      	movs	r2, r0
{
 800208a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800208c:	3241      	adds	r2, #65	; 0x41
 800208e:	7814      	ldrb	r4, [r2, #0]
{
 8002090:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002092:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002094:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002096:	2c20      	cmp	r4, #32
 8002098:	d117      	bne.n	80020ca <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800209a:	001c      	movs	r4, r3
 800209c:	3440      	adds	r4, #64	; 0x40
 800209e:	7826      	ldrb	r6, [r4, #0]
 80020a0:	2e01      	cmp	r6, #1
 80020a2:	d012      	beq.n	80020ca <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020a4:	3022      	adds	r0, #34	; 0x22
 80020a6:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3823      	subs	r0, #35	; 0x23
 80020ac:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80020ae:	4f07      	ldr	r7, [pc, #28]	; (80020cc <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 80020b0:	4386      	bics	r6, r0
 80020b2:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80020b4:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80020b6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80020b8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80020ba:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80020bc:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80020be:	6819      	ldr	r1, [r3, #0]
 80020c0:	4308      	orrs	r0, r1
 80020c2:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80020c4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80020c8:	7020      	strb	r0, [r4, #0]
  }
}
 80020ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020cc:	fffff0ff 	.word	0xfffff0ff

080020d0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d0:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCC_GetSysClockFreq+0x78>)
{
 80020d4:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80020d6:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80020d8:	4022      	ands	r2, r4
 80020da:	2a08      	cmp	r2, #8
 80020dc:	d031      	beq.n	8002142 <HAL_RCC_GetSysClockFreq+0x72>
 80020de:	2a0c      	cmp	r2, #12
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x26>
 80020e2:	2a04      	cmp	r2, #4
 80020e4:	d125      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020e6:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020ea:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80020ec:	17c0      	asrs	r0, r0, #31
 80020ee:	4018      	ands	r0, r3
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_RCC_GetSysClockFreq+0x80>)
 80020f2:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80020f4:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020f6:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020f8:	4816      	ldr	r0, [pc, #88]	; (8002154 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020fa:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020fc:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020fe:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002100:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002102:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002104:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002106:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002108:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800210a:	4211      	tst	r1, r2
 800210c:	d009      	beq.n	8002122 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <HAL_RCC_GetSysClockFreq+0x88>)
 8002110:	2300      	movs	r3, #0
 8002112:	2100      	movs	r1, #0
 8002114:	f7fe f8c0 	bl	8000298 <__aeabi_lmul>
 8002118:	0022      	movs	r2, r4
 800211a:	2300      	movs	r3, #0
 800211c:	f7fe f89c 	bl	8000258 <__aeabi_uldivmod>
 8002120:	e7e8      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2310      	movs	r3, #16
 8002126:	421a      	tst	r2, r3
 8002128:	d001      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800212a:	4a0c      	ldr	r2, [pc, #48]	; (800215c <HAL_RCC_GetSysClockFreq+0x8c>)
 800212c:	e7f0      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800212e:	4a08      	ldr	r2, [pc, #32]	; (8002150 <HAL_RCC_GetSysClockFreq+0x80>)
 8002130:	e7ee      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002132:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002134:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002136:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002138:	041b      	lsls	r3, r3, #16
 800213a:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800213c:	3301      	adds	r3, #1
 800213e:	4098      	lsls	r0, r3
      break;
 8002140:	e7d8      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <HAL_RCC_GetSysClockFreq+0x88>)
 8002144:	e7d6      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x24>
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	40021000 	.word	0x40021000
 800214c:	ff48e500 	.word	0xff48e500
 8002150:	00f42400 	.word	0x00f42400
 8002154:	080040aa 	.word	0x080040aa
 8002158:	007a1200 	.word	0x007a1200
 800215c:	003d0900 	.word	0x003d0900

08002160 <HAL_RCC_OscConfig>:
{
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002162:	0005      	movs	r5, r0
 8002164:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8002166:	2800      	cmp	r0, #0
 8002168:	d05a      	beq.n	8002220 <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800216a:	230c      	movs	r3, #12
 800216c:	4cbe      	ldr	r4, [pc, #760]	; (8002468 <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216e:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002170:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002172:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002174:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	025b      	lsls	r3, r3, #9
 800217a:	0019      	movs	r1, r3
 800217c:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217e:	07d2      	lsls	r2, r2, #31
 8002180:	d442      	bmi.n	8002208 <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002182:	682b      	ldr	r3, [r5, #0]
 8002184:	079b      	lsls	r3, r3, #30
 8002186:	d500      	bpl.n	800218a <HAL_RCC_OscConfig+0x2a>
 8002188:	e08b      	b.n	80022a2 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800218a:	682b      	ldr	r3, [r5, #0]
 800218c:	06db      	lsls	r3, r3, #27
 800218e:	d529      	bpl.n	80021e4 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002190:	2e00      	cmp	r6, #0
 8002192:	d000      	beq.n	8002196 <HAL_RCC_OscConfig+0x36>
 8002194:	e0dc      	b.n	8002350 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	059b      	lsls	r3, r3, #22
 800219a:	d502      	bpl.n	80021a2 <HAL_RCC_OscConfig+0x42>
 800219c:	69eb      	ldr	r3, [r5, #28]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d03e      	beq.n	8002220 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021a2:	6862      	ldr	r2, [r4, #4]
 80021a4:	49b1      	ldr	r1, [pc, #708]	; (800246c <HAL_RCC_OscConfig+0x30c>)
 80021a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80021a8:	400a      	ands	r2, r1
 80021aa:	431a      	orrs	r2, r3
 80021ac:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ae:	6861      	ldr	r1, [r4, #4]
 80021b0:	6a2a      	ldr	r2, [r5, #32]
 80021b2:	0209      	lsls	r1, r1, #8
 80021b4:	0a09      	lsrs	r1, r1, #8
 80021b6:	0612      	lsls	r2, r2, #24
 80021b8:	430a      	orrs	r2, r1
 80021ba:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	0b5b      	lsrs	r3, r3, #13
 80021c0:	3301      	adds	r3, #1
 80021c2:	0212      	lsls	r2, r2, #8
 80021c4:	409a      	lsls	r2, r3
 80021c6:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021c8:	68e1      	ldr	r1, [r4, #12]
 80021ca:	060a      	lsls	r2, r1, #24
 80021cc:	49a8      	ldr	r1, [pc, #672]	; (8002470 <HAL_RCC_OscConfig+0x310>)
 80021ce:	0f12      	lsrs	r2, r2, #28
 80021d0:	5c8a      	ldrb	r2, [r1, r2]
 80021d2:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021d4:	4aa7      	ldr	r2, [pc, #668]	; (8002474 <HAL_RCC_OscConfig+0x314>)
 80021d6:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80021d8:	4ba7      	ldr	r3, [pc, #668]	; (8002478 <HAL_RCC_OscConfig+0x318>)
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	f7ff fa82 	bl	80016e4 <HAL_InitTick>
        if(status != HAL_OK)
 80021e0:	2800      	cmp	r0, #0
 80021e2:	d134      	bne.n	800224e <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e4:	682b      	ldr	r3, [r5, #0]
 80021e6:	071b      	lsls	r3, r3, #28
 80021e8:	d500      	bpl.n	80021ec <HAL_RCC_OscConfig+0x8c>
 80021ea:	e0e8      	b.n	80023be <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ec:	682b      	ldr	r3, [r5, #0]
 80021ee:	075b      	lsls	r3, r3, #29
 80021f0:	d500      	bpl.n	80021f4 <HAL_RCC_OscConfig+0x94>
 80021f2:	e10a      	b.n	800240a <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021f4:	682b      	ldr	r3, [r5, #0]
 80021f6:	069b      	lsls	r3, r3, #26
 80021f8:	d500      	bpl.n	80021fc <HAL_RCC_OscConfig+0x9c>
 80021fa:	e18e      	b.n	800251a <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d000      	beq.n	8002204 <HAL_RCC_OscConfig+0xa4>
 8002202:	e1bd      	b.n	8002580 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8002204:	2000      	movs	r0, #0
 8002206:	e022      	b.n	800224e <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002208:	2e08      	cmp	r6, #8
 800220a:	d003      	beq.n	8002214 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800220c:	2e0c      	cmp	r6, #12
 800220e:	d109      	bne.n	8002224 <HAL_RCC_OscConfig+0xc4>
 8002210:	2f00      	cmp	r7, #0
 8002212:	d007      	beq.n	8002224 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	039b      	lsls	r3, r3, #14
 8002218:	d5b3      	bpl.n	8002182 <HAL_RCC_OscConfig+0x22>
 800221a:	686b      	ldr	r3, [r5, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1b0      	bne.n	8002182 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8002220:	2001      	movs	r0, #1
 8002222:	e014      	b.n	800224e <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002224:	686a      	ldr	r2, [r5, #4]
 8002226:	428a      	cmp	r2, r1
 8002228:	d113      	bne.n	8002252 <HAL_RCC_OscConfig+0xf2>
 800222a:	6822      	ldr	r2, [r4, #0]
 800222c:	4313      	orrs	r3, r2
 800222e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002230:	f7ff fa9c 	bl	800176c <HAL_GetTick>
 8002234:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	0292      	lsls	r2, r2, #10
 800223c:	4213      	tst	r3, r2
 800223e:	d1a0      	bne.n	8002182 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff fa94 	bl	800176c <HAL_GetTick>
 8002244:	9b00      	ldr	r3, [sp, #0]
 8002246:	1ac0      	subs	r0, r0, r3
 8002248:	2864      	cmp	r0, #100	; 0x64
 800224a:	d9f4      	bls.n	8002236 <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 800224c:	2003      	movs	r0, #3
}
 800224e:	b005      	add	sp, #20
 8002250:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002252:	21a0      	movs	r1, #160	; 0xa0
 8002254:	02c9      	lsls	r1, r1, #11
 8002256:	428a      	cmp	r2, r1
 8002258:	d105      	bne.n	8002266 <HAL_RCC_OscConfig+0x106>
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	6821      	ldr	r1, [r4, #0]
 800225e:	02d2      	lsls	r2, r2, #11
 8002260:	430a      	orrs	r2, r1
 8002262:	6022      	str	r2, [r4, #0]
 8002264:	e7e1      	b.n	800222a <HAL_RCC_OscConfig+0xca>
 8002266:	6821      	ldr	r1, [r4, #0]
 8002268:	4884      	ldr	r0, [pc, #528]	; (800247c <HAL_RCC_OscConfig+0x31c>)
 800226a:	4001      	ands	r1, r0
 800226c:	6021      	str	r1, [r4, #0]
 800226e:	6821      	ldr	r1, [r4, #0]
 8002270:	400b      	ands	r3, r1
 8002272:	9303      	str	r3, [sp, #12]
 8002274:	9b03      	ldr	r3, [sp, #12]
 8002276:	4982      	ldr	r1, [pc, #520]	; (8002480 <HAL_RCC_OscConfig+0x320>)
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	400b      	ands	r3, r1
 800227c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800227e:	2a00      	cmp	r2, #0
 8002280:	d1d6      	bne.n	8002230 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 8002282:	f7ff fa73 	bl	800176c <HAL_GetTick>
 8002286:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002288:	2280      	movs	r2, #128	; 0x80
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	0292      	lsls	r2, r2, #10
 800228e:	4213      	tst	r3, r2
 8002290:	d100      	bne.n	8002294 <HAL_RCC_OscConfig+0x134>
 8002292:	e776      	b.n	8002182 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002294:	f7ff fa6a 	bl	800176c <HAL_GetTick>
 8002298:	9b00      	ldr	r3, [sp, #0]
 800229a:	1ac0      	subs	r0, r0, r3
 800229c:	2864      	cmp	r0, #100	; 0x64
 800229e:	d9f3      	bls.n	8002288 <HAL_RCC_OscConfig+0x128>
 80022a0:	e7d4      	b.n	800224c <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 80022a2:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022a4:	2e04      	cmp	r6, #4
 80022a6:	d003      	beq.n	80022b0 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022a8:	2e0c      	cmp	r6, #12
 80022aa:	d124      	bne.n	80022f6 <HAL_RCC_OscConfig+0x196>
 80022ac:	2f00      	cmp	r7, #0
 80022ae:	d122      	bne.n	80022f6 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	075b      	lsls	r3, r3, #29
 80022b4:	d501      	bpl.n	80022ba <HAL_RCC_OscConfig+0x15a>
 80022b6:	2a00      	cmp	r2, #0
 80022b8:	d0b2      	beq.n	8002220 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ba:	6861      	ldr	r1, [r4, #4]
 80022bc:	692b      	ldr	r3, [r5, #16]
 80022be:	4871      	ldr	r0, [pc, #452]	; (8002484 <HAL_RCC_OscConfig+0x324>)
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	4001      	ands	r1, r0
 80022c4:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022c6:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	438b      	bics	r3, r1
 80022ce:	4313      	orrs	r3, r2
 80022d0:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022d2:	f7ff fefd 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 80022d6:	68e3      	ldr	r3, [r4, #12]
 80022d8:	4a65      	ldr	r2, [pc, #404]	; (8002470 <HAL_RCC_OscConfig+0x310>)
 80022da:	061b      	lsls	r3, r3, #24
 80022dc:	0f1b      	lsrs	r3, r3, #28
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	40d8      	lsrs	r0, r3
 80022e2:	4b64      	ldr	r3, [pc, #400]	; (8002474 <HAL_RCC_OscConfig+0x314>)
 80022e4:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 80022e6:	4b64      	ldr	r3, [pc, #400]	; (8002478 <HAL_RCC_OscConfig+0x318>)
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	f7ff f9fb 	bl	80016e4 <HAL_InitTick>
      if(status != HAL_OK)
 80022ee:	2800      	cmp	r0, #0
 80022f0:	d100      	bne.n	80022f4 <HAL_RCC_OscConfig+0x194>
 80022f2:	e74a      	b.n	800218a <HAL_RCC_OscConfig+0x2a>
 80022f4:	e7ab      	b.n	800224e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022f6:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 80022f8:	2a00      	cmp	r2, #0
 80022fa:	d018      	beq.n	800232e <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022fc:	2109      	movs	r1, #9
 80022fe:	438b      	bics	r3, r1
 8002300:	4313      	orrs	r3, r2
 8002302:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002304:	f7ff fa32 	bl	800176c <HAL_GetTick>
 8002308:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800230a:	2204      	movs	r2, #4
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	4213      	tst	r3, r2
 8002310:	d007      	beq.n	8002322 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	6862      	ldr	r2, [r4, #4]
 8002314:	692b      	ldr	r3, [r5, #16]
 8002316:	495b      	ldr	r1, [pc, #364]	; (8002484 <HAL_RCC_OscConfig+0x324>)
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	400a      	ands	r2, r1
 800231c:	4313      	orrs	r3, r2
 800231e:	6063      	str	r3, [r4, #4]
 8002320:	e733      	b.n	800218a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002322:	f7ff fa23 	bl	800176c <HAL_GetTick>
 8002326:	1bc0      	subs	r0, r0, r7
 8002328:	2802      	cmp	r0, #2
 800232a:	d9ee      	bls.n	800230a <HAL_RCC_OscConfig+0x1aa>
 800232c:	e78e      	b.n	800224c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 800232e:	2201      	movs	r2, #1
 8002330:	4393      	bics	r3, r2
 8002332:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002334:	f7ff fa1a 	bl	800176c <HAL_GetTick>
 8002338:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800233a:	2204      	movs	r2, #4
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	4213      	tst	r3, r2
 8002340:	d100      	bne.n	8002344 <HAL_RCC_OscConfig+0x1e4>
 8002342:	e722      	b.n	800218a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002344:	f7ff fa12 	bl	800176c <HAL_GetTick>
 8002348:	1bc0      	subs	r0, r0, r7
 800234a:	2802      	cmp	r0, #2
 800234c:	d9f5      	bls.n	800233a <HAL_RCC_OscConfig+0x1da>
 800234e:	e77d      	b.n	800224c <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002350:	69eb      	ldr	r3, [r5, #28]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d020      	beq.n	8002398 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	6822      	ldr	r2, [r4, #0]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4313      	orrs	r3, r2
 800235e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002360:	f7ff fa04 	bl	800176c <HAL_GetTick>
 8002364:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002366:	2280      	movs	r2, #128	; 0x80
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	0092      	lsls	r2, r2, #2
 800236c:	4213      	tst	r3, r2
 800236e:	d00d      	beq.n	800238c <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002370:	6863      	ldr	r3, [r4, #4]
 8002372:	4a3e      	ldr	r2, [pc, #248]	; (800246c <HAL_RCC_OscConfig+0x30c>)
 8002374:	4013      	ands	r3, r2
 8002376:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002378:	4313      	orrs	r3, r2
 800237a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237c:	6862      	ldr	r2, [r4, #4]
 800237e:	6a2b      	ldr	r3, [r5, #32]
 8002380:	0212      	lsls	r2, r2, #8
 8002382:	061b      	lsls	r3, r3, #24
 8002384:	0a12      	lsrs	r2, r2, #8
 8002386:	4313      	orrs	r3, r2
 8002388:	6063      	str	r3, [r4, #4]
 800238a:	e72b      	b.n	80021e4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800238c:	f7ff f9ee 	bl	800176c <HAL_GetTick>
 8002390:	1bc0      	subs	r0, r0, r7
 8002392:	2802      	cmp	r0, #2
 8002394:	d9e7      	bls.n	8002366 <HAL_RCC_OscConfig+0x206>
 8002396:	e759      	b.n	800224c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	4a3b      	ldr	r2, [pc, #236]	; (8002488 <HAL_RCC_OscConfig+0x328>)
 800239c:	4013      	ands	r3, r2
 800239e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023a0:	f7ff f9e4 	bl	800176c <HAL_GetTick>
 80023a4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023a6:	2280      	movs	r2, #128	; 0x80
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	0092      	lsls	r2, r2, #2
 80023ac:	4213      	tst	r3, r2
 80023ae:	d100      	bne.n	80023b2 <HAL_RCC_OscConfig+0x252>
 80023b0:	e718      	b.n	80021e4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b2:	f7ff f9db 	bl	800176c <HAL_GetTick>
 80023b6:	1bc0      	subs	r0, r0, r7
 80023b8:	2802      	cmp	r0, #2
 80023ba:	d9f4      	bls.n	80023a6 <HAL_RCC_OscConfig+0x246>
 80023bc:	e746      	b.n	800224c <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023be:	696a      	ldr	r2, [r5, #20]
 80023c0:	2301      	movs	r3, #1
 80023c2:	2a00      	cmp	r2, #0
 80023c4:	d010      	beq.n	80023e8 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 80023c6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80023c8:	4313      	orrs	r3, r2
 80023ca:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80023cc:	f7ff f9ce 	bl	800176c <HAL_GetTick>
 80023d0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023d2:	2202      	movs	r2, #2
 80023d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80023d6:	4213      	tst	r3, r2
 80023d8:	d000      	beq.n	80023dc <HAL_RCC_OscConfig+0x27c>
 80023da:	e707      	b.n	80021ec <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023dc:	f7ff f9c6 	bl	800176c <HAL_GetTick>
 80023e0:	1bc0      	subs	r0, r0, r7
 80023e2:	2802      	cmp	r0, #2
 80023e4:	d9f5      	bls.n	80023d2 <HAL_RCC_OscConfig+0x272>
 80023e6:	e731      	b.n	800224c <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 80023e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80023ea:	439a      	bics	r2, r3
 80023ec:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80023ee:	f7ff f9bd 	bl	800176c <HAL_GetTick>
 80023f2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023f4:	2202      	movs	r2, #2
 80023f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80023f8:	4213      	tst	r3, r2
 80023fa:	d100      	bne.n	80023fe <HAL_RCC_OscConfig+0x29e>
 80023fc:	e6f6      	b.n	80021ec <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023fe:	f7ff f9b5 	bl	800176c <HAL_GetTick>
 8002402:	1bc0      	subs	r0, r0, r7
 8002404:	2802      	cmp	r0, #2
 8002406:	d9f5      	bls.n	80023f4 <HAL_RCC_OscConfig+0x294>
 8002408:	e720      	b.n	800224c <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800240c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002410:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8002412:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002414:	421a      	tst	r2, r3
 8002416:	d104      	bne.n	8002422 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002418:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800241a:	4313      	orrs	r3, r2
 800241c:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800241e:	2301      	movs	r3, #1
 8002420:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	4f19      	ldr	r7, [pc, #100]	; (800248c <HAL_RCC_OscConfig+0x32c>)
 8002426:	0052      	lsls	r2, r2, #1
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	4213      	tst	r3, r2
 800242c:	d008      	beq.n	8002440 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	68ab      	ldr	r3, [r5, #8]
 8002432:	0052      	lsls	r2, r2, #1
 8002434:	4293      	cmp	r3, r2
 8002436:	d12b      	bne.n	8002490 <HAL_RCC_OscConfig+0x330>
 8002438:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800243a:	4313      	orrs	r3, r2
 800243c:	6523      	str	r3, [r4, #80]	; 0x50
 800243e:	e04c      	b.n	80024da <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002440:	2280      	movs	r2, #128	; 0x80
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	0052      	lsls	r2, r2, #1
 8002446:	4313      	orrs	r3, r2
 8002448:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800244a:	f7ff f98f 	bl	800176c <HAL_GetTick>
 800244e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	0052      	lsls	r2, r2, #1
 8002456:	4213      	tst	r3, r2
 8002458:	d1e9      	bne.n	800242e <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245a:	f7ff f987 	bl	800176c <HAL_GetTick>
 800245e:	9b01      	ldr	r3, [sp, #4]
 8002460:	1ac0      	subs	r0, r0, r3
 8002462:	2864      	cmp	r0, #100	; 0x64
 8002464:	d9f4      	bls.n	8002450 <HAL_RCC_OscConfig+0x2f0>
 8002466:	e6f1      	b.n	800224c <HAL_RCC_OscConfig+0xec>
 8002468:	40021000 	.word	0x40021000
 800246c:	ffff1fff 	.word	0xffff1fff
 8002470:	08004092 	.word	0x08004092
 8002474:	20000108 	.word	0x20000108
 8002478:	20000110 	.word	0x20000110
 800247c:	fffeffff 	.word	0xfffeffff
 8002480:	fffbffff 	.word	0xfffbffff
 8002484:	ffffe0ff 	.word	0xffffe0ff
 8002488:	fffffeff 	.word	0xfffffeff
 800248c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002490:	2b00      	cmp	r3, #0
 8002492:	d116      	bne.n	80024c2 <HAL_RCC_OscConfig+0x362>
 8002494:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002496:	4a6b      	ldr	r2, [pc, #428]	; (8002644 <HAL_RCC_OscConfig+0x4e4>)
 8002498:	4013      	ands	r3, r2
 800249a:	6523      	str	r3, [r4, #80]	; 0x50
 800249c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800249e:	4a6a      	ldr	r2, [pc, #424]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80024a4:	f7ff f962 	bl	800176c <HAL_GetTick>
 80024a8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024aa:	2280      	movs	r2, #128	; 0x80
 80024ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024ae:	0092      	lsls	r2, r2, #2
 80024b0:	4213      	tst	r3, r2
 80024b2:	d01a      	beq.n	80024ea <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7ff f95a 	bl	800176c <HAL_GetTick>
 80024b8:	4b64      	ldr	r3, [pc, #400]	; (800264c <HAL_RCC_OscConfig+0x4ec>)
 80024ba:	1bc0      	subs	r0, r0, r7
 80024bc:	4298      	cmp	r0, r3
 80024be:	d9f4      	bls.n	80024aa <HAL_RCC_OscConfig+0x34a>
 80024c0:	e6c4      	b.n	800224c <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c2:	21a0      	movs	r1, #160	; 0xa0
 80024c4:	00c9      	lsls	r1, r1, #3
 80024c6:	428b      	cmp	r3, r1
 80024c8:	d118      	bne.n	80024fc <HAL_RCC_OscConfig+0x39c>
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	430b      	orrs	r3, r1
 80024d2:	6523      	str	r3, [r4, #80]	; 0x50
 80024d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024d6:	431a      	orrs	r2, r3
 80024d8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80024da:	f7ff f947 	bl	800176c <HAL_GetTick>
 80024de:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024e0:	2280      	movs	r2, #128	; 0x80
 80024e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024e4:	0092      	lsls	r2, r2, #2
 80024e6:	4213      	tst	r3, r2
 80024e8:	d010      	beq.n	800250c <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 80024ea:	9b00      	ldr	r3, [sp, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d000      	beq.n	80024f2 <HAL_RCC_OscConfig+0x392>
 80024f0:	e680      	b.n	80021f4 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024f4:	4a56      	ldr	r2, [pc, #344]	; (8002650 <HAL_RCC_OscConfig+0x4f0>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80024fa:	e67b      	b.n	80021f4 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024fe:	4a51      	ldr	r2, [pc, #324]	; (8002644 <HAL_RCC_OscConfig+0x4e4>)
 8002500:	4013      	ands	r3, r2
 8002502:	6523      	str	r3, [r4, #80]	; 0x50
 8002504:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002506:	4a50      	ldr	r2, [pc, #320]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 8002508:	4013      	ands	r3, r2
 800250a:	e797      	b.n	800243c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250c:	f7ff f92e 	bl	800176c <HAL_GetTick>
 8002510:	4b4e      	ldr	r3, [pc, #312]	; (800264c <HAL_RCC_OscConfig+0x4ec>)
 8002512:	1bc0      	subs	r0, r0, r7
 8002514:	4298      	cmp	r0, r3
 8002516:	d9e3      	bls.n	80024e0 <HAL_RCC_OscConfig+0x380>
 8002518:	e698      	b.n	800224c <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800251a:	69a9      	ldr	r1, [r5, #24]
 800251c:	2301      	movs	r3, #1
 800251e:	4a4d      	ldr	r2, [pc, #308]	; (8002654 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	2900      	cmp	r1, #0
 8002522:	d018      	beq.n	8002556 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 8002524:	68a1      	ldr	r1, [r4, #8]
 8002526:	4319      	orrs	r1, r3
 8002528:	60a1      	str	r1, [r4, #8]
 800252a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800252c:	430b      	orrs	r3, r1
 800252e:	6363      	str	r3, [r4, #52]	; 0x34
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	6a11      	ldr	r1, [r2, #32]
 8002534:	019b      	lsls	r3, r3, #6
 8002536:	430b      	orrs	r3, r1
 8002538:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800253a:	f7ff f917 	bl	800176c <HAL_GetTick>
 800253e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002540:	2202      	movs	r2, #2
 8002542:	68a3      	ldr	r3, [r4, #8]
 8002544:	4213      	tst	r3, r2
 8002546:	d000      	beq.n	800254a <HAL_RCC_OscConfig+0x3ea>
 8002548:	e658      	b.n	80021fc <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800254a:	f7ff f90f 	bl	800176c <HAL_GetTick>
 800254e:	1bc0      	subs	r0, r0, r7
 8002550:	2802      	cmp	r0, #2
 8002552:	d9f5      	bls.n	8002540 <HAL_RCC_OscConfig+0x3e0>
 8002554:	e67a      	b.n	800224c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 8002556:	68a1      	ldr	r1, [r4, #8]
 8002558:	4399      	bics	r1, r3
 800255a:	60a1      	str	r1, [r4, #8]
 800255c:	6a13      	ldr	r3, [r2, #32]
 800255e:	493e      	ldr	r1, [pc, #248]	; (8002658 <HAL_RCC_OscConfig+0x4f8>)
 8002560:	400b      	ands	r3, r1
 8002562:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8002564:	f7ff f902 	bl	800176c <HAL_GetTick>
 8002568:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800256a:	2202      	movs	r2, #2
 800256c:	68a3      	ldr	r3, [r4, #8]
 800256e:	4213      	tst	r3, r2
 8002570:	d100      	bne.n	8002574 <HAL_RCC_OscConfig+0x414>
 8002572:	e643      	b.n	80021fc <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002574:	f7ff f8fa 	bl	800176c <HAL_GetTick>
 8002578:	1bc0      	subs	r0, r0, r7
 800257a:	2802      	cmp	r0, #2
 800257c:	d9f5      	bls.n	800256a <HAL_RCC_OscConfig+0x40a>
 800257e:	e665      	b.n	800224c <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002580:	2e0c      	cmp	r6, #12
 8002582:	d043      	beq.n	800260c <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002584:	4a35      	ldr	r2, [pc, #212]	; (800265c <HAL_RCC_OscConfig+0x4fc>)
 8002586:	2b02      	cmp	r3, #2
 8002588:	d12e      	bne.n	80025e8 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 800258a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800258c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800258e:	4013      	ands	r3, r2
 8002590:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002592:	f7ff f8eb 	bl	800176c <HAL_GetTick>
 8002596:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002598:	04bf      	lsls	r7, r7, #18
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	423b      	tst	r3, r7
 800259e:	d11d      	bne.n	80025dc <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80025a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80025a4:	68e2      	ldr	r2, [r4, #12]
 80025a6:	430b      	orrs	r3, r1
 80025a8:	492d      	ldr	r1, [pc, #180]	; (8002660 <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025aa:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ac:	400a      	ands	r2, r1
 80025ae:	4313      	orrs	r3, r2
 80025b0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025b2:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	6822      	ldr	r2, [r4, #0]
 80025bc:	045b      	lsls	r3, r3, #17
 80025be:	4313      	orrs	r3, r2
 80025c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80025c2:	f7ff f8d3 	bl	800176c <HAL_GetTick>
 80025c6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	4233      	tst	r3, r6
 80025cc:	d000      	beq.n	80025d0 <HAL_RCC_OscConfig+0x470>
 80025ce:	e619      	b.n	8002204 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d0:	f7ff f8cc 	bl	800176c <HAL_GetTick>
 80025d4:	1b40      	subs	r0, r0, r5
 80025d6:	2802      	cmp	r0, #2
 80025d8:	d9f6      	bls.n	80025c8 <HAL_RCC_OscConfig+0x468>
 80025da:	e637      	b.n	800224c <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025dc:	f7ff f8c6 	bl	800176c <HAL_GetTick>
 80025e0:	1b80      	subs	r0, r0, r6
 80025e2:	2802      	cmp	r0, #2
 80025e4:	d9d9      	bls.n	800259a <HAL_RCC_OscConfig+0x43a>
 80025e6:	e631      	b.n	800224c <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 80025e8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025ea:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80025ec:	4013      	ands	r3, r2
 80025ee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80025f0:	f7ff f8bc 	bl	800176c <HAL_GetTick>
 80025f4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025f6:	04b6      	lsls	r6, r6, #18
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	4233      	tst	r3, r6
 80025fc:	d100      	bne.n	8002600 <HAL_RCC_OscConfig+0x4a0>
 80025fe:	e601      	b.n	8002204 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002600:	f7ff f8b4 	bl	800176c <HAL_GetTick>
 8002604:	1b40      	subs	r0, r0, r5
 8002606:	2802      	cmp	r0, #2
 8002608:	d9f6      	bls.n	80025f8 <HAL_RCC_OscConfig+0x498>
 800260a:	e61f      	b.n	800224c <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 800260c:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800260e:	2b01      	cmp	r3, #1
 8002610:	d100      	bne.n	8002614 <HAL_RCC_OscConfig+0x4b4>
 8002612:	e61c      	b.n	800224e <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002614:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8002616:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002618:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800261a:	0252      	lsls	r2, r2, #9
 800261c:	401a      	ands	r2, r3
 800261e:	428a      	cmp	r2, r1
 8002620:	d000      	beq.n	8002624 <HAL_RCC_OscConfig+0x4c4>
 8002622:	e5fd      	b.n	8002220 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002624:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002628:	0392      	lsls	r2, r2, #14
 800262a:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262c:	428a      	cmp	r2, r1
 800262e:	d000      	beq.n	8002632 <HAL_RCC_OscConfig+0x4d2>
 8002630:	e5f6      	b.n	8002220 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002632:	22c0      	movs	r2, #192	; 0xc0
 8002634:	0412      	lsls	r2, r2, #16
 8002636:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002638:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800263a:	4293      	cmp	r3, r2
 800263c:	d100      	bne.n	8002640 <HAL_RCC_OscConfig+0x4e0>
 800263e:	e5e1      	b.n	8002204 <HAL_RCC_OscConfig+0xa4>
 8002640:	e5ee      	b.n	8002220 <HAL_RCC_OscConfig+0xc0>
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	fffffeff 	.word	0xfffffeff
 8002648:	fffffbff 	.word	0xfffffbff
 800264c:	00001388 	.word	0x00001388
 8002650:	efffffff 	.word	0xefffffff
 8002654:	40010000 	.word	0x40010000
 8002658:	ffffdfff 	.word	0xffffdfff
 800265c:	feffffff 	.word	0xfeffffff
 8002660:	ff02ffff 	.word	0xff02ffff

08002664 <HAL_RCC_ClockConfig>:
{
 8002664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002666:	1e04      	subs	r4, r0, #0
 8002668:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800266c:	2001      	movs	r0, #1
}
 800266e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	2501      	movs	r5, #1
 8002672:	4e5b      	ldr	r6, [pc, #364]	; (80027e0 <HAL_RCC_ClockConfig+0x17c>)
 8002674:	9a01      	ldr	r2, [sp, #4]
 8002676:	6833      	ldr	r3, [r6, #0]
 8002678:	402b      	ands	r3, r5
 800267a:	4293      	cmp	r3, r2
 800267c:	d331      	bcc.n	80026e2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	0793      	lsls	r3, r2, #30
 8002682:	d443      	bmi.n	800270c <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002684:	07d3      	lsls	r3, r2, #31
 8002686:	d449      	bmi.n	800271c <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002688:	2501      	movs	r5, #1
 800268a:	6833      	ldr	r3, [r6, #0]
 800268c:	9a01      	ldr	r2, [sp, #4]
 800268e:	402b      	ands	r3, r5
 8002690:	4293      	cmp	r3, r2
 8002692:	d909      	bls.n	80026a8 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002694:	6833      	ldr	r3, [r6, #0]
 8002696:	43ab      	bics	r3, r5
 8002698:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800269a:	f7ff f867 	bl	800176c <HAL_GetTick>
 800269e:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a0:	6833      	ldr	r3, [r6, #0]
 80026a2:	422b      	tst	r3, r5
 80026a4:	d000      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x44>
 80026a6:	e08c      	b.n	80027c2 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	6822      	ldr	r2, [r4, #0]
 80026aa:	4d4e      	ldr	r5, [pc, #312]	; (80027e4 <HAL_RCC_ClockConfig+0x180>)
 80026ac:	0753      	lsls	r3, r2, #29
 80026ae:	d500      	bpl.n	80026b2 <HAL_RCC_ClockConfig+0x4e>
 80026b0:	e08f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	0713      	lsls	r3, r2, #28
 80026b4:	d506      	bpl.n	80026c4 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026b6:	68e9      	ldr	r1, [r5, #12]
 80026b8:	6923      	ldr	r3, [r4, #16]
 80026ba:	4a4b      	ldr	r2, [pc, #300]	; (80027e8 <HAL_RCC_ClockConfig+0x184>)
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	400a      	ands	r2, r1
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026c4:	f7ff fd04 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 80026c8:	68eb      	ldr	r3, [r5, #12]
 80026ca:	4a48      	ldr	r2, [pc, #288]	; (80027ec <HAL_RCC_ClockConfig+0x188>)
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	0f1b      	lsrs	r3, r3, #28
 80026d0:	5cd3      	ldrb	r3, [r2, r3]
 80026d2:	40d8      	lsrs	r0, r3
 80026d4:	4b46      	ldr	r3, [pc, #280]	; (80027f0 <HAL_RCC_ClockConfig+0x18c>)
 80026d6:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80026d8:	4b46      	ldr	r3, [pc, #280]	; (80027f4 <HAL_RCC_ClockConfig+0x190>)
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	f7ff f802 	bl	80016e4 <HAL_InitTick>
  if(status != HAL_OK)
 80026e0:	e7c5      	b.n	800266e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	6833      	ldr	r3, [r6, #0]
 80026e4:	9a01      	ldr	r2, [sp, #4]
 80026e6:	43ab      	bics	r3, r5
 80026e8:	4313      	orrs	r3, r2
 80026ea:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80026ec:	f7ff f83e 	bl	800176c <HAL_GetTick>
 80026f0:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	6833      	ldr	r3, [r6, #0]
 80026f4:	9a01      	ldr	r2, [sp, #4]
 80026f6:	402b      	ands	r3, r5
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d0c0      	beq.n	800267e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7ff f836 	bl	800176c <HAL_GetTick>
 8002700:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_RCC_ClockConfig+0x194>)
 8002702:	1bc0      	subs	r0, r0, r7
 8002704:	4298      	cmp	r0, r3
 8002706:	d9f4      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8002708:	2003      	movs	r0, #3
 800270a:	e7b0      	b.n	800266e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270c:	20f0      	movs	r0, #240	; 0xf0
 800270e:	4935      	ldr	r1, [pc, #212]	; (80027e4 <HAL_RCC_ClockConfig+0x180>)
 8002710:	68cb      	ldr	r3, [r1, #12]
 8002712:	4383      	bics	r3, r0
 8002714:	68a0      	ldr	r0, [r4, #8]
 8002716:	4303      	orrs	r3, r0
 8002718:	60cb      	str	r3, [r1, #12]
 800271a:	e7b3      	b.n	8002684 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271c:	4d31      	ldr	r5, [pc, #196]	; (80027e4 <HAL_RCC_ClockConfig+0x180>)
 800271e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002720:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002722:	2a02      	cmp	r2, #2
 8002724:	d118      	bne.n	8002758 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002726:	039b      	lsls	r3, r3, #14
 8002728:	d5a0      	bpl.n	800266c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272a:	2103      	movs	r1, #3
 800272c:	68eb      	ldr	r3, [r5, #12]
 800272e:	438b      	bics	r3, r1
 8002730:	4313      	orrs	r3, r2
 8002732:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8002734:	f7ff f81a 	bl	800176c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002738:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800273a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273c:	2b02      	cmp	r3, #2
 800273e:	d118      	bne.n	8002772 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002740:	220c      	movs	r2, #12
 8002742:	68eb      	ldr	r3, [r5, #12]
 8002744:	4013      	ands	r3, r2
 8002746:	2b08      	cmp	r3, #8
 8002748:	d09e      	beq.n	8002688 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274a:	f7ff f80f 	bl	800176c <HAL_GetTick>
 800274e:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <HAL_RCC_ClockConfig+0x194>)
 8002750:	1bc0      	subs	r0, r0, r7
 8002752:	4298      	cmp	r0, r3
 8002754:	d9f4      	bls.n	8002740 <HAL_RCC_ClockConfig+0xdc>
 8002756:	e7d7      	b.n	8002708 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002758:	2a03      	cmp	r2, #3
 800275a:	d102      	bne.n	8002762 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800275c:	019b      	lsls	r3, r3, #6
 800275e:	d4e4      	bmi.n	800272a <HAL_RCC_ClockConfig+0xc6>
 8002760:	e784      	b.n	800266c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002762:	2a01      	cmp	r2, #1
 8002764:	d102      	bne.n	800276c <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002766:	075b      	lsls	r3, r3, #29
 8002768:	d4df      	bmi.n	800272a <HAL_RCC_ClockConfig+0xc6>
 800276a:	e77f      	b.n	800266c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800276c:	059b      	lsls	r3, r3, #22
 800276e:	d4dc      	bmi.n	800272a <HAL_RCC_ClockConfig+0xc6>
 8002770:	e77c      	b.n	800266c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002772:	2b03      	cmp	r3, #3
 8002774:	d10b      	bne.n	800278e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002776:	220c      	movs	r2, #12
 8002778:	68eb      	ldr	r3, [r5, #12]
 800277a:	4013      	ands	r3, r2
 800277c:	4293      	cmp	r3, r2
 800277e:	d083      	beq.n	8002688 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002780:	f7fe fff4 	bl	800176c <HAL_GetTick>
 8002784:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <HAL_RCC_ClockConfig+0x194>)
 8002786:	1bc0      	subs	r0, r0, r7
 8002788:	4298      	cmp	r0, r3
 800278a:	d9f4      	bls.n	8002776 <HAL_RCC_ClockConfig+0x112>
 800278c:	e7bc      	b.n	8002708 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800278e:	2b01      	cmp	r3, #1
 8002790:	d011      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002792:	220c      	movs	r2, #12
 8002794:	68eb      	ldr	r3, [r5, #12]
 8002796:	4213      	tst	r3, r2
 8002798:	d100      	bne.n	800279c <HAL_RCC_ClockConfig+0x138>
 800279a:	e775      	b.n	8002688 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279c:	f7fe ffe6 	bl	800176c <HAL_GetTick>
 80027a0:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_RCC_ClockConfig+0x194>)
 80027a2:	1bc0      	subs	r0, r0, r7
 80027a4:	4298      	cmp	r0, r3
 80027a6:	d9f4      	bls.n	8002792 <HAL_RCC_ClockConfig+0x12e>
 80027a8:	e7ae      	b.n	8002708 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027aa:	f7fe ffdf 	bl	800176c <HAL_GetTick>
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_RCC_ClockConfig+0x194>)
 80027b0:	1bc0      	subs	r0, r0, r7
 80027b2:	4298      	cmp	r0, r3
 80027b4:	d8a8      	bhi.n	8002708 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027b6:	220c      	movs	r2, #12
 80027b8:	68eb      	ldr	r3, [r5, #12]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d1f4      	bne.n	80027aa <HAL_RCC_ClockConfig+0x146>
 80027c0:	e762      	b.n	8002688 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c2:	f7fe ffd3 	bl	800176c <HAL_GetTick>
 80027c6:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <HAL_RCC_ClockConfig+0x194>)
 80027c8:	1bc0      	subs	r0, r0, r7
 80027ca:	4298      	cmp	r0, r3
 80027cc:	d800      	bhi.n	80027d0 <HAL_RCC_ClockConfig+0x16c>
 80027ce:	e767      	b.n	80026a0 <HAL_RCC_ClockConfig+0x3c>
 80027d0:	e79a      	b.n	8002708 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d2:	68eb      	ldr	r3, [r5, #12]
 80027d4:	4909      	ldr	r1, [pc, #36]	; (80027fc <HAL_RCC_ClockConfig+0x198>)
 80027d6:	400b      	ands	r3, r1
 80027d8:	68e1      	ldr	r1, [r4, #12]
 80027da:	430b      	orrs	r3, r1
 80027dc:	60eb      	str	r3, [r5, #12]
 80027de:	e768      	b.n	80026b2 <HAL_RCC_ClockConfig+0x4e>
 80027e0:	40022000 	.word	0x40022000
 80027e4:	40021000 	.word	0x40021000
 80027e8:	ffffc7ff 	.word	0xffffc7ff
 80027ec:	08004092 	.word	0x08004092
 80027f0:	20000108 	.word	0x20000108
 80027f4:	20000110 	.word	0x20000110
 80027f8:	00001388 	.word	0x00001388
 80027fc:	fffff8ff 	.word	0xfffff8ff

08002800 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	055b      	lsls	r3, r3, #21
 8002808:	0f5b      	lsrs	r3, r3, #29
 800280a:	5cd3      	ldrb	r3, [r2, r3]
 800280c:	4a03      	ldr	r2, [pc, #12]	; (800281c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800280e:	6810      	ldr	r0, [r2, #0]
 8002810:	40d8      	lsrs	r0, r3
}
 8002812:	4770      	bx	lr
 8002814:	40021000 	.word	0x40021000
 8002818:	080040a2 	.word	0x080040a2
 800281c:	20000108 	.word	0x20000108

08002820 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002822:	4a05      	ldr	r2, [pc, #20]	; (8002838 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	049b      	lsls	r3, r3, #18
 8002828:	0f5b      	lsrs	r3, r3, #29
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	4a03      	ldr	r2, [pc, #12]	; (800283c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800282e:	6810      	ldr	r0, [r2, #0]
 8002830:	40d8      	lsrs	r0, r3
}
 8002832:	4770      	bx	lr
 8002834:	40021000 	.word	0x40021000
 8002838:	080040a2 	.word	0x080040a2
 800283c:	20000108 	.word	0x20000108

08002840 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002840:	6803      	ldr	r3, [r0, #0]
{
 8002842:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002844:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002846:	069b      	lsls	r3, r3, #26
 8002848:	d52d      	bpl.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x66>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284a:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 800284c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284e:	4c5c      	ldr	r4, [pc, #368]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002850:	055b      	lsls	r3, r3, #21
 8002852:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8002854:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002856:	421a      	tst	r2, r3
 8002858:	d104      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800285c:	4313      	orrs	r3, r2
 800285e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8002860:	2301      	movs	r3, #1
 8002862:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	2780      	movs	r7, #128	; 0x80
 8002866:	4e57      	ldr	r6, [pc, #348]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002868:	007f      	lsls	r7, r7, #1
 800286a:	6833      	ldr	r3, [r6, #0]
 800286c:	423b      	tst	r3, r7
 800286e:	d053      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002870:	686b      	ldr	r3, [r5, #4]
 8002872:	21c0      	movs	r1, #192	; 0xc0
 8002874:	0018      	movs	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002876:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002878:	0389      	lsls	r1, r1, #14
 800287a:	4008      	ands	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800287c:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800287e:	4290      	cmp	r0, r2
 8002880:	d15b      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0xfa>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002882:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002884:	22c0      	movs	r2, #192	; 0xc0
 8002886:	0008      	movs	r0, r1
 8002888:	0292      	lsls	r2, r2, #10
 800288a:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800288c:	4211      	tst	r1, r2
 800288e:	d15f      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002890:	682b      	ldr	r3, [r5, #0]
 8002892:	069b      	lsls	r3, r3, #26
 8002894:	d500      	bpl.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002896:	e070      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002898:	9b00      	ldr	r3, [sp, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d103      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028a0:	4a49      	ldr	r2, [pc, #292]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a6:	682b      	ldr	r3, [r5, #0]
 80028a8:	07da      	lsls	r2, r3, #31
 80028aa:	d506      	bpl.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ac:	2003      	movs	r0, #3
 80028ae:	4944      	ldr	r1, [pc, #272]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80028b0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80028b2:	4382      	bics	r2, r0
 80028b4:	68a8      	ldr	r0, [r5, #8]
 80028b6:	4302      	orrs	r2, r0
 80028b8:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028ba:	079a      	lsls	r2, r3, #30
 80028bc:	d506      	bpl.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028be:	200c      	movs	r0, #12
 80028c0:	493f      	ldr	r1, [pc, #252]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80028c2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80028c4:	4382      	bics	r2, r0
 80028c6:	68e8      	ldr	r0, [r5, #12]
 80028c8:	4302      	orrs	r2, r0
 80028ca:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028cc:	075a      	lsls	r2, r3, #29
 80028ce:	d506      	bpl.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028d0:	493b      	ldr	r1, [pc, #236]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80028d2:	483e      	ldr	r0, [pc, #248]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80028d4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80028d6:	4002      	ands	r2, r0
 80028d8:	6928      	ldr	r0, [r5, #16]
 80028da:	4302      	orrs	r2, r0
 80028dc:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028de:	071a      	lsls	r2, r3, #28
 80028e0:	d506      	bpl.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028e2:	4937      	ldr	r1, [pc, #220]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80028e4:	483a      	ldr	r0, [pc, #232]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80028e6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80028e8:	4002      	ands	r2, r0
 80028ea:	6968      	ldr	r0, [r5, #20]
 80028ec:	4302      	orrs	r2, r0
 80028ee:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028f0:	065a      	lsls	r2, r3, #25
 80028f2:	d506      	bpl.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028f4:	4932      	ldr	r1, [pc, #200]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80028f6:	4837      	ldr	r0, [pc, #220]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80028f8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80028fa:	4002      	ands	r2, r0
 80028fc:	69e8      	ldr	r0, [r5, #28]
 80028fe:	4302      	orrs	r2, r0
 8002900:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8002902:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002904:	061b      	lsls	r3, r3, #24
 8002906:	d517      	bpl.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002908:	4a2d      	ldr	r2, [pc, #180]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800290a:	4933      	ldr	r1, [pc, #204]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800290c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800290e:	400b      	ands	r3, r1
 8002910:	69a9      	ldr	r1, [r5, #24]
 8002912:	430b      	orrs	r3, r1
 8002914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002916:	e00f      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002918:	6833      	ldr	r3, [r6, #0]
 800291a:	433b      	orrs	r3, r7
 800291c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800291e:	f7fe ff25 	bl	800176c <HAL_GetTick>
 8002922:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	6833      	ldr	r3, [r6, #0]
 8002926:	423b      	tst	r3, r7
 8002928:	d1a2      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fe ff1f 	bl	800176c <HAL_GetTick>
 800292e:	9b01      	ldr	r3, [sp, #4]
 8002930:	1ac0      	subs	r0, r0, r3
 8002932:	2864      	cmp	r0, #100	; 0x64
 8002934:	d9f6      	bls.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          return HAL_TIMEOUT;
 8002936:	2003      	movs	r0, #3
}
 8002938:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800293a:	22c0      	movs	r2, #192	; 0xc0
 800293c:	0019      	movs	r1, r3
 800293e:	0292      	lsls	r2, r2, #10
 8002940:	4011      	ands	r1, r2
 8002942:	4291      	cmp	r1, r2
 8002944:	d19d      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002946:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8002948:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800294a:	0392      	lsls	r2, r2, #14
 800294c:	d599      	bpl.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800294e:	e7f3      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002950:	4013      	ands	r3, r2
 8002952:	4283      	cmp	r3, r0
 8002954:	d09c      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002956:	682b      	ldr	r3, [r5, #0]
 8002958:	069b      	lsls	r3, r3, #26
 800295a:	d59d      	bpl.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 800295c:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800295e:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8002960:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002962:	0312      	lsls	r2, r2, #12
 8002964:	4302      	orrs	r2, r0
 8002966:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002968:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800296a:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800296c:	481c      	ldr	r0, [pc, #112]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800296e:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002970:	4002      	ands	r2, r0
 8002972:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8002974:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002976:	05cb      	lsls	r3, r1, #23
 8002978:	d412      	bmi.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800297a:	6869      	ldr	r1, [r5, #4]
 800297c:	23c0      	movs	r3, #192	; 0xc0
 800297e:	000a      	movs	r2, r1
 8002980:	029b      	lsls	r3, r3, #10
 8002982:	401a      	ands	r2, r3
 8002984:	429a      	cmp	r2, r3
 8002986:	d107      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	4816      	ldr	r0, [pc, #88]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800298c:	4003      	ands	r3, r0
 800298e:	20c0      	movs	r0, #192	; 0xc0
 8002990:	0380      	lsls	r0, r0, #14
 8002992:	4001      	ands	r1, r0
 8002994:	430b      	orrs	r3, r1
 8002996:	6023      	str	r3, [r4, #0]
 8002998:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800299a:	431a      	orrs	r2, r3
 800299c:	6522      	str	r2, [r4, #80]	; 0x50
 800299e:	e77b      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 80029a0:	f7fe fee4 	bl	800176c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029a4:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80029a6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029a8:	00bf      	lsls	r7, r7, #2
 80029aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80029ac:	423b      	tst	r3, r7
 80029ae:	d000      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80029b0:	e76e      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b2:	f7fe fedb 	bl	800176c <HAL_GetTick>
 80029b6:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80029b8:	1b80      	subs	r0, r0, r6
 80029ba:	4298      	cmp	r0, r3
 80029bc:	d9f5      	bls.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80029be:	e7ba      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40007000 	.word	0x40007000
 80029c8:	efffffff 	.word	0xefffffff
 80029cc:	fffff3ff 	.word	0xfffff3ff
 80029d0:	ffffcfff 	.word	0xffffcfff
 80029d4:	fbffffff 	.word	0xfbffffff
 80029d8:	fff3ffff 	.word	0xfff3ffff
 80029dc:	fffcffff 	.word	0xfffcffff
 80029e0:	fff7ffff 	.word	0xfff7ffff
 80029e4:	ffcfffff 	.word	0xffcfffff
 80029e8:	00001388 	.word	0x00001388

080029ec <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ec:	2280      	movs	r2, #128	; 0x80
{
 80029ee:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80029f0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029f2:	05d2      	lsls	r2, r2, #23
 80029f4:	4290      	cmp	r0, r2
 80029f6:	d005      	beq.n	8002a04 <TIM_Base_SetConfig+0x18>
 80029f8:	4c10      	ldr	r4, [pc, #64]	; (8002a3c <TIM_Base_SetConfig+0x50>)
 80029fa:	42a0      	cmp	r0, r4
 80029fc:	d002      	beq.n	8002a04 <TIM_Base_SetConfig+0x18>
 80029fe:	4c10      	ldr	r4, [pc, #64]	; (8002a40 <TIM_Base_SetConfig+0x54>)
 8002a00:	42a0      	cmp	r0, r4
 8002a02:	d10f      	bne.n	8002a24 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a04:	2470      	movs	r4, #112	; 0x70
 8002a06:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002a08:	684c      	ldr	r4, [r1, #4]
 8002a0a:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a0c:	4290      	cmp	r0, r2
 8002a0e:	d005      	beq.n	8002a1c <TIM_Base_SetConfig+0x30>
 8002a10:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <TIM_Base_SetConfig+0x50>)
 8002a12:	4290      	cmp	r0, r2
 8002a14:	d002      	beq.n	8002a1c <TIM_Base_SetConfig+0x30>
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <TIM_Base_SetConfig+0x54>)
 8002a18:	4290      	cmp	r0, r2
 8002a1a:	d103      	bne.n	8002a24 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a1c:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <TIM_Base_SetConfig+0x58>)
 8002a1e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a20:	68ca      	ldr	r2, [r1, #12]
 8002a22:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	4393      	bics	r3, r2
 8002a28:	690a      	ldr	r2, [r1, #16]
 8002a2a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002a2c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a2e:	688b      	ldr	r3, [r1, #8]
 8002a30:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a32:	680b      	ldr	r3, [r1, #0]
 8002a34:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a36:	2301      	movs	r3, #1
 8002a38:	6143      	str	r3, [r0, #20]
}
 8002a3a:	bd10      	pop	{r4, pc}
 8002a3c:	40010800 	.word	0x40010800
 8002a40:	40011400 	.word	0x40011400
 8002a44:	fffffcff 	.word	0xfffffcff

08002a48 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a48:	2201      	movs	r2, #1
{
 8002a4a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a4c:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a4e:	6a03      	ldr	r3, [r0, #32]
 8002a50:	4393      	bics	r3, r2
 8002a52:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002a54:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002a56:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002a58:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a5a:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a5c:	680d      	ldr	r5, [r1, #0]
 8002a5e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a60:	2502      	movs	r5, #2
 8002a62:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a64:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a66:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a68:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a6a:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8002a6c:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8002a6e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a70:	6203      	str	r3, [r0, #32]
}
 8002a72:	bd30      	pop	{r4, r5, pc}

08002a74 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a74:	2210      	movs	r2, #16
 8002a76:	6a03      	ldr	r3, [r0, #32]
{
 8002a78:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a7a:	4393      	bics	r3, r2
 8002a7c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a7e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a80:	4c09      	ldr	r4, [pc, #36]	; (8002aa8 <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 8002a82:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002a84:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a86:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a88:	680a      	ldr	r2, [r1, #0]
 8002a8a:	0212      	lsls	r2, r2, #8
 8002a8c:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a8e:	2420      	movs	r4, #32
 8002a90:	43a3      	bics	r3, r4
 8002a92:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a94:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a96:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a98:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a9a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a9c:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a9e:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8002aa0:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa2:	6203      	str	r3, [r0, #32]
}
 8002aa4:	bd30      	pop	{r4, r5, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	ffff8cff 	.word	0xffff8cff

08002aac <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002aac:	231f      	movs	r3, #31
{
 8002aae:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ab0:	2401      	movs	r4, #1
 8002ab2:	4019      	ands	r1, r3
 8002ab4:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ab6:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002ab8:	6a03      	ldr	r3, [r0, #32]
 8002aba:	43a3      	bics	r3, r4
 8002abc:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002abe:	6a03      	ldr	r3, [r0, #32]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	6202      	str	r2, [r0, #32]
}
 8002ac4:	bd10      	pop	{r4, pc}
	...

08002ac8 <HAL_TIM_OC_Start>:
{
 8002ac8:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aca:	0003      	movs	r3, r0
{
 8002acc:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ace:	2900      	cmp	r1, #0
 8002ad0:	d105      	bne.n	8002ade <HAL_TIM_OC_Start+0x16>
 8002ad2:	333a      	adds	r3, #58	; 0x3a
    return HAL_ERROR;
 8002ad4:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ad6:	781a      	ldrb	r2, [r3, #0]
 8002ad8:	4282      	cmp	r2, r0
 8002ada:	d00a      	beq.n	8002af2 <HAL_TIM_OC_Start+0x2a>
}
 8002adc:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ade:	2904      	cmp	r1, #4
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_OC_Start+0x1e>
 8002ae2:	333b      	adds	r3, #59	; 0x3b
 8002ae4:	e7f6      	b.n	8002ad4 <HAL_TIM_OC_Start+0xc>
 8002ae6:	2908      	cmp	r1, #8
 8002ae8:	d101      	bne.n	8002aee <HAL_TIM_OC_Start+0x26>
 8002aea:	333c      	adds	r3, #60	; 0x3c
 8002aec:	e7f2      	b.n	8002ad4 <HAL_TIM_OC_Start+0xc>
 8002aee:	333d      	adds	r3, #61	; 0x3d
 8002af0:	e7f0      	b.n	8002ad4 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002af2:	2202      	movs	r2, #2
 8002af4:	701a      	strb	r2, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002af6:	6820      	ldr	r0, [r4, #0]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f7ff ffd7 	bl	8002aac <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afe:	2280      	movs	r2, #128	; 0x80
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	05d2      	lsls	r2, r2, #23
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d005      	beq.n	8002b14 <HAL_TIM_OC_Start+0x4c>
 8002b08:	4a0b      	ldr	r2, [pc, #44]	; (8002b38 <HAL_TIM_OC_Start+0x70>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d002      	beq.n	8002b14 <HAL_TIM_OC_Start+0x4c>
 8002b0e:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <HAL_TIM_OC_Start+0x74>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d10a      	bne.n	8002b2a <HAL_TIM_OC_Start+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b14:	2107      	movs	r1, #7
 8002b16:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8002b18:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b1a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1c:	2a06      	cmp	r2, #6
 8002b1e:	d0dd      	beq.n	8002adc <HAL_TIM_OC_Start+0x14>
      __HAL_TIM_ENABLE(htim);
 8002b20:	2201      	movs	r2, #1
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e7d8      	b.n	8002adc <HAL_TIM_OC_Start+0x14>
    __HAL_TIM_ENABLE(htim);
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	6819      	ldr	r1, [r3, #0]
  return HAL_OK;
 8002b2e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e7d2      	b.n	8002adc <HAL_TIM_OC_Start+0x14>
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	40010800 	.word	0x40010800
 8002b3c:	40011400 	.word	0x40011400

08002b40 <HAL_TIM_OC_Stop>:
{
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b44:	2200      	movs	r2, #0
 8002b46:	6800      	ldr	r0, [r0, #0]
{
 8002b48:	000d      	movs	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b4a:	f7ff ffaf 	bl	8002aac <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	4a0c      	ldr	r2, [pc, #48]	; (8002b84 <HAL_TIM_OC_Stop+0x44>)
 8002b52:	6a19      	ldr	r1, [r3, #32]
 8002b54:	4211      	tst	r1, r2
 8002b56:	d103      	bne.n	8002b60 <HAL_TIM_OC_Stop+0x20>
 8002b58:	2101      	movs	r1, #1
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b60:	2301      	movs	r3, #1
 8002b62:	2d00      	cmp	r5, #0
 8002b64:	d103      	bne.n	8002b6e <HAL_TIM_OC_Stop+0x2e>
 8002b66:	343a      	adds	r4, #58	; 0x3a
}
 8002b68:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b6a:	7023      	strb	r3, [r4, #0]
}
 8002b6c:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b6e:	2d04      	cmp	r5, #4
 8002b70:	d101      	bne.n	8002b76 <HAL_TIM_OC_Stop+0x36>
 8002b72:	343b      	adds	r4, #59	; 0x3b
 8002b74:	e7f8      	b.n	8002b68 <HAL_TIM_OC_Stop+0x28>
 8002b76:	2d08      	cmp	r5, #8
 8002b78:	d101      	bne.n	8002b7e <HAL_TIM_OC_Stop+0x3e>
 8002b7a:	343c      	adds	r4, #60	; 0x3c
 8002b7c:	e7f4      	b.n	8002b68 <HAL_TIM_OC_Stop+0x28>
 8002b7e:	343d      	adds	r4, #61	; 0x3d
 8002b80:	e7f2      	b.n	8002b68 <HAL_TIM_OC_Stop+0x28>
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	00001111 	.word	0x00001111

08002b88 <HAL_TIM_PWM_Init>:
{
 8002b88:	b570      	push	{r4, r5, r6, lr}
 8002b8a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002b8c:	2001      	movs	r0, #1
  if (htim == NULL)
 8002b8e:	2c00      	cmp	r4, #0
 8002b90:	d01d      	beq.n	8002bce <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b92:	0025      	movs	r5, r4
 8002b94:	3539      	adds	r5, #57	; 0x39
 8002b96:	782b      	ldrb	r3, [r5, #0]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d105      	bne.n	8002baa <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002b9e:	0023      	movs	r3, r4
 8002ba0:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002ba2:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002ba4:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8002ba6:	f7fe fce7 	bl	8001578 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002baa:	2302      	movs	r3, #2
 8002bac:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bae:	6820      	ldr	r0, [r4, #0]
 8002bb0:	1d21      	adds	r1, r4, #4
 8002bb2:	f7ff ff1b 	bl	80029ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb6:	0022      	movs	r2, r4
 8002bb8:	2301      	movs	r3, #1
  return HAL_OK;
 8002bba:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bbc:	323e      	adds	r2, #62	; 0x3e
 8002bbe:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc0:	343d      	adds	r4, #61	; 0x3d
 8002bc2:	3a04      	subs	r2, #4
 8002bc4:	7013      	strb	r3, [r2, #0]
 8002bc6:	7053      	strb	r3, [r2, #1]
 8002bc8:	7093      	strb	r3, [r2, #2]
 8002bca:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002bcc:	702b      	strb	r3, [r5, #0]
}
 8002bce:	bd70      	pop	{r4, r5, r6, pc}

08002bd0 <HAL_TIM_PWM_Start>:
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	f7ff ff79 	bl	8002ac8 <HAL_TIM_OC_Start>
 8002bd6:	bd10      	pop	{r4, pc}

08002bd8 <HAL_TIM_PWM_Stop>:
 8002bd8:	b510      	push	{r4, lr}
 8002bda:	f7ff ffb1 	bl	8002b40 <HAL_TIM_OC_Stop>
 8002bde:	bd10      	pop	{r4, pc}

08002be0 <HAL_TIM_PWM_ConfigChannel>:
{
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002be2:	0005      	movs	r5, r0
 8002be4:	3538      	adds	r5, #56	; 0x38
 8002be6:	782b      	ldrb	r3, [r5, #0]
{
 8002be8:	0007      	movs	r7, r0
 8002bea:	000c      	movs	r4, r1
 8002bec:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 8002bee:	2002      	movs	r0, #2
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d00a      	beq.n	8002c0a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002bf4:	3801      	subs	r0, #1
 8002bf6:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 8002bf8:	2a08      	cmp	r2, #8
 8002bfa:	d050      	beq.n	8002c9e <HAL_TIM_PWM_ConfigChannel+0xbe>
 8002bfc:	d806      	bhi.n	8002c0c <HAL_TIM_PWM_ConfigChannel+0x2c>
 8002bfe:	2a00      	cmp	r2, #0
 8002c00:	d02a      	beq.n	8002c58 <HAL_TIM_PWM_ConfigChannel+0x78>
 8002c02:	2a04      	cmp	r2, #4
 8002c04:	d03a      	beq.n	8002c7c <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 8002c06:	2300      	movs	r3, #0
 8002c08:	702b      	strb	r3, [r5, #0]
}
 8002c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8002c0c:	2a0c      	cmp	r2, #12
 8002c0e:	d1fa      	bne.n	8002c06 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c10:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c12:	4934      	ldr	r1, [pc, #208]	; (8002ce4 <HAL_TIM_PWM_ConfigChannel+0x104>)
 8002c14:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c16:	4834      	ldr	r0, [pc, #208]	; (8002ce8 <HAL_TIM_PWM_ConfigChannel+0x108>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c18:	400a      	ands	r2, r1
 8002c1a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8002c1c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002c1e:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002c20:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c22:	4001      	ands	r1, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c24:	6820      	ldr	r0, [r4, #0]
 8002c26:	0207      	lsls	r7, r0, #8
  tmpccer &= ~TIM_CCER_CC4P;
 8002c28:	4830      	ldr	r0, [pc, #192]	; (8002cec <HAL_TIM_PWM_ConfigChannel+0x10c>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c2a:	4339      	orrs	r1, r7
  tmpccer &= ~TIM_CCER_CC4P;
 8002c2c:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c2e:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8002c30:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c32:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8002c34:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002c36:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c38:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 8002c3a:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002c3c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	69d9      	ldr	r1, [r3, #28]
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	430a      	orrs	r2, r1
 8002c46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	4929      	ldr	r1, [pc, #164]	; (8002cf0 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c50:	68e2      	ldr	r2, [r4, #12]
 8002c52:	69d9      	ldr	r1, [r3, #28]
 8002c54:	0212      	lsls	r2, r2, #8
 8002c56:	e041      	b.n	8002cdc <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c58:	6838      	ldr	r0, [r7, #0]
 8002c5a:	f7ff fef5 	bl	8002a48 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c5e:	2208      	movs	r2, #8
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6999      	ldr	r1, [r3, #24]
 8002c64:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c66:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c6a:	699a      	ldr	r2, [r3, #24]
 8002c6c:	438a      	bics	r2, r1
 8002c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c74:	430a      	orrs	r2, r1
 8002c76:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002c78:	2000      	movs	r0, #0
      break;
 8002c7a:	e7c4      	b.n	8002c06 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c7c:	6838      	ldr	r0, [r7, #0]
 8002c7e:	f7ff fef9 	bl	8002a74 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	0112      	lsls	r2, r2, #4
 8002c88:	6999      	ldr	r1, [r3, #24]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	4917      	ldr	r1, [pc, #92]	; (8002cf0 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8002c92:	400a      	ands	r2, r1
 8002c94:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c96:	68e2      	ldr	r2, [r4, #12]
 8002c98:	6999      	ldr	r1, [r3, #24]
 8002c9a:	0212      	lsls	r2, r2, #8
 8002c9c:	e7ea      	b.n	8002c74 <HAL_TIM_PWM_ConfigChannel+0x94>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c9e:	2073      	movs	r0, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ca0:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ca2:	4914      	ldr	r1, [pc, #80]	; (8002cf4 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8002ca4:	6a1a      	ldr	r2, [r3, #32]
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8002caa:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002cac:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002cae:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cb0:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 8002cb2:	6820      	ldr	r0, [r4, #0]
 8002cb4:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8002cb6:	4810      	ldr	r0, [pc, #64]	; (8002cf8 <HAL_TIM_PWM_ConfigChannel+0x118>)
 8002cb8:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cba:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8002cbc:	605f      	str	r7, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002cbe:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002cc0:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cc2:	0212      	lsls	r2, r2, #8
  TIMx->CCR3 = OC_Config->Pulse;
 8002cc4:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cc6:	2104      	movs	r1, #4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cc8:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8002cca:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	4316      	orrs	r6, r2
 8002cd0:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cd8:	69da      	ldr	r2, [r3, #28]
 8002cda:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	61da      	str	r2, [r3, #28]
 8002ce0:	e7ca      	b.n	8002c78 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	ffffefff 	.word	0xffffefff
 8002ce8:	ffff8cff 	.word	0xffff8cff
 8002cec:	ffffdfff 	.word	0xffffdfff
 8002cf0:	fffffbff 	.word	0xfffffbff
 8002cf4:	fffffeff 	.word	0xfffffeff
 8002cf8:	fffffdff 	.word	0xfffffdff

08002cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cfc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cfe:	0004      	movs	r4, r0
 8002d00:	2202      	movs	r2, #2
 8002d02:	3438      	adds	r4, #56	; 0x38
 8002d04:	7825      	ldrb	r5, [r4, #0]
{
 8002d06:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002d08:	0010      	movs	r0, r2
 8002d0a:	2d01      	cmp	r5, #1
 8002d0c:	d01d      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d10:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8002d12:	3539      	adds	r5, #57	; 0x39
 8002d14:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002d1a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d1c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d1e:	680e      	ldr	r6, [r1, #0]
 8002d20:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d22:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d24:	2080      	movs	r0, #128	; 0x80
 8002d26:	05c0      	lsls	r0, r0, #23
 8002d28:	4283      	cmp	r3, r0
 8002d2a:	d005      	beq.n	8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002d2c:	4807      	ldr	r0, [pc, #28]	; (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8002d2e:	4283      	cmp	r3, r0
 8002d30:	d002      	beq.n	8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002d32:	4807      	ldr	r0, [pc, #28]	; (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8002d34:	4283      	cmp	r3, r0
 8002d36:	d104      	bne.n	8002d42 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d38:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d3a:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d3c:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d3e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d42:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002d44:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d46:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002d48:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	40010800 	.word	0x40010800
 8002d50:	40011400 	.word	0x40011400

08002d54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d54:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d56:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d60:	6801      	ldr	r1, [r0, #0]
 8002d62:	4d12      	ldr	r5, [pc, #72]	; (8002dac <UART_EndRxTransfer+0x58>)
 8002d64:	680b      	ldr	r3, [r1, #0]
 8002d66:	402b      	ands	r3, r5
 8002d68:	600b      	str	r3, [r1, #0]
 8002d6a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d72:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d76:	6801      	ldr	r1, [r0, #0]
 8002d78:	688b      	ldr	r3, [r1, #8]
 8002d7a:	4393      	bics	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
 8002d7e:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d82:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d10a      	bne.n	8002d9e <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d88:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8c:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d90:	2410      	movs	r4, #16
 8002d92:	6802      	ldr	r2, [r0, #0]
 8002d94:	6813      	ldr	r3, [r2, #0]
 8002d96:	43a3      	bics	r3, r4
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d9e:	2220      	movs	r2, #32
 8002da0:	1d03      	adds	r3, r0, #4
 8002da2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da4:	2300      	movs	r3, #0
 8002da6:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002da8:	6683      	str	r3, [r0, #104]	; 0x68
}
 8002daa:	bd30      	pop	{r4, r5, pc}
 8002dac:	fffffedf 	.word	0xfffffedf

08002db0 <UART_SetConfig>:
{
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002db4:	6925      	ldr	r5, [r4, #16]
 8002db6:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002db8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dba:	4329      	orrs	r1, r5
 8002dbc:	6965      	ldr	r5, [r4, #20]
 8002dbe:	69c3      	ldr	r3, [r0, #28]
 8002dc0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dc2:	6810      	ldr	r0, [r2, #0]
 8002dc4:	4d72      	ldr	r5, [pc, #456]	; (8002f90 <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dc6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dc8:	4028      	ands	r0, r5
 8002dca:	4301      	orrs	r1, r0
 8002dcc:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dce:	6851      	ldr	r1, [r2, #4]
 8002dd0:	4870      	ldr	r0, [pc, #448]	; (8002f94 <UART_SetConfig+0x1e4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dd2:	4d71      	ldr	r5, [pc, #452]	; (8002f98 <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd4:	4001      	ands	r1, r0
 8002dd6:	68e0      	ldr	r0, [r4, #12]
 8002dd8:	4301      	orrs	r1, r0
 8002dda:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ddc:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dde:	42aa      	cmp	r2, r5
 8002de0:	d001      	beq.n	8002de6 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8002de2:	6a21      	ldr	r1, [r4, #32]
 8002de4:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002de6:	6891      	ldr	r1, [r2, #8]
 8002de8:	4e6c      	ldr	r6, [pc, #432]	; (8002f9c <UART_SetConfig+0x1ec>)
 8002dea:	4031      	ands	r1, r6
 8002dec:	4301      	orrs	r1, r0
 8002dee:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002df0:	496b      	ldr	r1, [pc, #428]	; (8002fa0 <UART_SetConfig+0x1f0>)
 8002df2:	428a      	cmp	r2, r1
 8002df4:	d10f      	bne.n	8002e16 <UART_SetConfig+0x66>
 8002df6:	2103      	movs	r1, #3
 8002df8:	4a6a      	ldr	r2, [pc, #424]	; (8002fa4 <UART_SetConfig+0x1f4>)
 8002dfa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	3a01      	subs	r2, #1
 8002e00:	4969      	ldr	r1, [pc, #420]	; (8002fa8 <UART_SetConfig+0x1f8>)
 8002e02:	2a02      	cmp	r2, #2
 8002e04:	d90f      	bls.n	8002e26 <UART_SetConfig+0x76>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e06:	2280      	movs	r2, #128	; 0x80
 8002e08:	0212      	lsls	r2, r2, #8
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d100      	bne.n	8002e10 <UART_SetConfig+0x60>
 8002e0e:	e069      	b.n	8002ee4 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e10:	f7ff fd06 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
        break;
 8002e14:	e09c      	b.n	8002f50 <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e16:	4965      	ldr	r1, [pc, #404]	; (8002fac <UART_SetConfig+0x1fc>)
 8002e18:	428a      	cmp	r2, r1
 8002e1a:	d113      	bne.n	8002e44 <UART_SetConfig+0x94>
 8002e1c:	210c      	movs	r1, #12
 8002e1e:	4a61      	ldr	r2, [pc, #388]	; (8002fa4 <UART_SetConfig+0x1f4>)
 8002e20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e22:	400a      	ands	r2, r1
 8002e24:	4962      	ldr	r1, [pc, #392]	; (8002fb0 <UART_SetConfig+0x200>)
 8002e26:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	0212      	lsls	r2, r2, #8
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d000      	beq.n	8002e32 <UART_SetConfig+0x82>
 8002e30:	e07f      	b.n	8002f32 <UART_SetConfig+0x182>
    switch (clocksource)
 8002e32:	2808      	cmp	r0, #8
 8002e34:	d818      	bhi.n	8002e68 <UART_SetConfig+0xb8>
 8002e36:	f7fd f96f 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002e3a:	5550      	.short	0x5550
 8002e3c:	17791758 	.word	0x17791758
 8002e40:	1717      	.short	0x1717
 8002e42:	63          	.byte	0x63
 8002e43:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e44:	42aa      	cmp	r2, r5
 8002e46:	d10f      	bne.n	8002e68 <UART_SetConfig+0xb8>
 8002e48:	21c0      	movs	r1, #192	; 0xc0
 8002e4a:	2080      	movs	r0, #128	; 0x80
 8002e4c:	4a55      	ldr	r2, [pc, #340]	; (8002fa4 <UART_SetConfig+0x1f4>)
 8002e4e:	0109      	lsls	r1, r1, #4
 8002e50:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002e52:	0100      	lsls	r0, r0, #4
 8002e54:	400b      	ands	r3, r1
 8002e56:	4283      	cmp	r3, r0
 8002e58:	d016      	beq.n	8002e88 <UART_SetConfig+0xd8>
 8002e5a:	d807      	bhi.n	8002e6c <UART_SetConfig+0xbc>
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <UART_SetConfig+0xc6>
 8002e60:	2280      	movs	r2, #128	; 0x80
 8002e62:	00d2      	lsls	r2, r2, #3
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d035      	beq.n	8002ed4 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e68:	2001      	movs	r0, #1
 8002e6a:	e009      	b.n	8002e80 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e6c:	428b      	cmp	r3, r1
 8002e6e:	d1fb      	bne.n	8002e68 <UART_SetConfig+0xb8>
 8002e70:	2080      	movs	r0, #128	; 0x80
 8002e72:	0200      	lsls	r0, r0, #8
 8002e74:	e012      	b.n	8002e9c <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e76:	f7ff fcc3 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	d10e      	bne.n	8002e9c <UART_SetConfig+0xec>
 8002e7e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8002e84:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8002e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e88:	2310      	movs	r3, #16
 8002e8a:	6810      	ldr	r0, [r2, #0]
 8002e8c:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e8e:	4243      	negs	r3, r0
 8002e90:	4158      	adcs	r0, r3
 8002e92:	4b48      	ldr	r3, [pc, #288]	; (8002fb4 <UART_SetConfig+0x204>)
 8002e94:	4240      	negs	r0, r0
 8002e96:	4018      	ands	r0, r3
 8002e98:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <UART_SetConfig+0x208>)
 8002e9a:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	6863      	ldr	r3, [r4, #4]
 8002ea0:	435a      	muls	r2, r3
 8002ea2:	4282      	cmp	r2, r0
 8002ea4:	d8e0      	bhi.n	8002e68 <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ea6:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ea8:	4282      	cmp	r2, r0
 8002eaa:	d3dd      	bcc.n	8002e68 <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002eac:	2700      	movs	r7, #0
 8002eae:	0e02      	lsrs	r2, r0, #24
 8002eb0:	0201      	lsls	r1, r0, #8
 8002eb2:	085e      	lsrs	r6, r3, #1
 8002eb4:	1989      	adds	r1, r1, r6
 8002eb6:	417a      	adcs	r2, r7
 8002eb8:	0008      	movs	r0, r1
 8002eba:	0011      	movs	r1, r2
 8002ebc:	001a      	movs	r2, r3
 8002ebe:	003b      	movs	r3, r7
 8002ec0:	f7fd f9ca 	bl	8000258 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ec4:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <UART_SetConfig+0x20c>)
 8002ec6:	18c2      	adds	r2, r0, r3
 8002ec8:	4b3d      	ldr	r3, [pc, #244]	; (8002fc0 <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d8cc      	bhi.n	8002e68 <UART_SetConfig+0xb8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	60d8      	str	r0, [r3, #12]
 8002ed2:	e7d4      	b.n	8002e7e <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ed4:	f7ff f8fc 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
        break;
 8002ed8:	e7cf      	b.n	8002e7a <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eda:	f7ff fc91 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ede:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002ee0:	d0cd      	beq.n	8002e7e <UART_SetConfig+0xce>
 8002ee2:	e00d      	b.n	8002f00 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ee4:	f7ff fc9c 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
 8002ee8:	e7f9      	b.n	8002ede <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002eea:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002eec:	4a32      	ldr	r2, [pc, #200]	; (8002fb8 <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	2310      	movs	r3, #16
 8002ef2:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ef4:	4243      	negs	r3, r0
 8002ef6:	4158      	adcs	r0, r3
 8002ef8:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <UART_SetConfig+0x204>)
 8002efa:	4240      	negs	r0, r0
 8002efc:	4003      	ands	r3, r0
 8002efe:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f00:	0058      	lsls	r0, r3, #1
 8002f02:	6863      	ldr	r3, [r4, #4]
 8002f04:	6861      	ldr	r1, [r4, #4]
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	18c0      	adds	r0, r0, r3
 8002f0a:	f7fd f919 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f0e:	0002      	movs	r2, r0
 8002f10:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <UART_SetConfig+0x214>)
 8002f12:	3a10      	subs	r2, #16
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d8a7      	bhi.n	8002e68 <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f18:	230f      	movs	r3, #15
 8002f1a:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f1c:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f1e:	439a      	bics	r2, r3
 8002f20:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f22:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002f24:	6822      	ldr	r2, [r4, #0]
 8002f26:	4318      	orrs	r0, r3
 8002f28:	60d0      	str	r0, [r2, #12]
 8002f2a:	e7a8      	b.n	8002e7e <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f2c:	f7ff f8d0 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 8002f30:	e7d5      	b.n	8002ede <UART_SetConfig+0x12e>
    switch (clocksource)
 8002f32:	2808      	cmp	r0, #8
 8002f34:	d898      	bhi.n	8002e68 <UART_SetConfig+0xb8>
 8002f36:	f7fd f8f9 	bl	800012c <__gnu_thumb1_case_shi>
 8002f3a:	0009      	.short	0x0009
 8002f3c:	000fff6b 	.word	0x000fff6b
 8002f40:	0024ff97 	.word	0x0024ff97
 8002f44:	ff97ff97 	.word	0xff97ff97
 8002f48:	0027ff97 	.word	0x0027ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f4c:	f7ff fc58 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002f50:	2800      	cmp	r0, #0
 8002f52:	d100      	bne.n	8002f56 <UART_SetConfig+0x1a6>
 8002f54:	e793      	b.n	8002e7e <UART_SetConfig+0xce>
 8002f56:	e00a      	b.n	8002f6e <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <UART_SetConfig+0x1f4>)
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f60:	4243      	negs	r3, r0
 8002f62:	4158      	adcs	r0, r3
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <UART_SetConfig+0x204>)
 8002f66:	4240      	negs	r0, r0
 8002f68:	4018      	ands	r0, r3
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <UART_SetConfig+0x208>)
 8002f6c:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f6e:	6863      	ldr	r3, [r4, #4]
 8002f70:	6861      	ldr	r1, [r4, #4]
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	1818      	adds	r0, r3, r0
 8002f76:	f7fd f8e3 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <UART_SetConfig+0x214>)
 8002f7e:	3a10      	subs	r2, #16
 8002f80:	e7a3      	b.n	8002eca <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f82:	f7ff f8a5 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
        break;
 8002f86:	e7e3      	b.n	8002f50 <UART_SetConfig+0x1a0>
    switch (clocksource)
 8002f88:	2080      	movs	r0, #128	; 0x80
 8002f8a:	0200      	lsls	r0, r0, #8
 8002f8c:	e7ef      	b.n	8002f6e <UART_SetConfig+0x1be>
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	efff69f3 	.word	0xefff69f3
 8002f94:	ffffcfff 	.word	0xffffcfff
 8002f98:	40004800 	.word	0x40004800
 8002f9c:	fffff4ff 	.word	0xfffff4ff
 8002fa0:	40013800 	.word	0x40013800
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	080040b3 	.word	0x080040b3
 8002fac:	40004400 	.word	0x40004400
 8002fb0:	080040b6 	.word	0x080040b6
 8002fb4:	00b71b00 	.word	0x00b71b00
 8002fb8:	003d0900 	.word	0x003d0900
 8002fbc:	fffffd00 	.word	0xfffffd00
 8002fc0:	000ffcff 	.word	0x000ffcff
 8002fc4:	0000ffef 	.word	0x0000ffef

08002fc8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002fca:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fcc:	07da      	lsls	r2, r3, #31
 8002fce:	d506      	bpl.n	8002fde <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fd0:	6801      	ldr	r1, [r0, #0]
 8002fd2:	4c28      	ldr	r4, [pc, #160]	; (8003074 <UART_AdvFeatureConfig+0xac>)
 8002fd4:	684a      	ldr	r2, [r1, #4]
 8002fd6:	4022      	ands	r2, r4
 8002fd8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002fda:	4322      	orrs	r2, r4
 8002fdc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fde:	079a      	lsls	r2, r3, #30
 8002fe0:	d506      	bpl.n	8002ff0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fe2:	6801      	ldr	r1, [r0, #0]
 8002fe4:	4c24      	ldr	r4, [pc, #144]	; (8003078 <UART_AdvFeatureConfig+0xb0>)
 8002fe6:	684a      	ldr	r2, [r1, #4]
 8002fe8:	4022      	ands	r2, r4
 8002fea:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002fec:	4322      	orrs	r2, r4
 8002fee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ff0:	075a      	lsls	r2, r3, #29
 8002ff2:	d506      	bpl.n	8003002 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ff4:	6801      	ldr	r1, [r0, #0]
 8002ff6:	4c21      	ldr	r4, [pc, #132]	; (800307c <UART_AdvFeatureConfig+0xb4>)
 8002ff8:	684a      	ldr	r2, [r1, #4]
 8002ffa:	4022      	ands	r2, r4
 8002ffc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002ffe:	4322      	orrs	r2, r4
 8003000:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003002:	071a      	lsls	r2, r3, #28
 8003004:	d506      	bpl.n	8003014 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003006:	6801      	ldr	r1, [r0, #0]
 8003008:	4c1d      	ldr	r4, [pc, #116]	; (8003080 <UART_AdvFeatureConfig+0xb8>)
 800300a:	684a      	ldr	r2, [r1, #4]
 800300c:	4022      	ands	r2, r4
 800300e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003010:	4322      	orrs	r2, r4
 8003012:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003014:	06da      	lsls	r2, r3, #27
 8003016:	d506      	bpl.n	8003026 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003018:	6801      	ldr	r1, [r0, #0]
 800301a:	4c1a      	ldr	r4, [pc, #104]	; (8003084 <UART_AdvFeatureConfig+0xbc>)
 800301c:	688a      	ldr	r2, [r1, #8]
 800301e:	4022      	ands	r2, r4
 8003020:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003022:	4322      	orrs	r2, r4
 8003024:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003026:	069a      	lsls	r2, r3, #26
 8003028:	d506      	bpl.n	8003038 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800302a:	6801      	ldr	r1, [r0, #0]
 800302c:	4c16      	ldr	r4, [pc, #88]	; (8003088 <UART_AdvFeatureConfig+0xc0>)
 800302e:	688a      	ldr	r2, [r1, #8]
 8003030:	4022      	ands	r2, r4
 8003032:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003034:	4322      	orrs	r2, r4
 8003036:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003038:	065a      	lsls	r2, r3, #25
 800303a:	d510      	bpl.n	800305e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800303c:	6801      	ldr	r1, [r0, #0]
 800303e:	4d13      	ldr	r5, [pc, #76]	; (800308c <UART_AdvFeatureConfig+0xc4>)
 8003040:	684a      	ldr	r2, [r1, #4]
 8003042:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003044:	402a      	ands	r2, r5
 8003046:	4322      	orrs	r2, r4
 8003048:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800304a:	2280      	movs	r2, #128	; 0x80
 800304c:	0352      	lsls	r2, r2, #13
 800304e:	4294      	cmp	r4, r2
 8003050:	d105      	bne.n	800305e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003052:	684a      	ldr	r2, [r1, #4]
 8003054:	4c0e      	ldr	r4, [pc, #56]	; (8003090 <UART_AdvFeatureConfig+0xc8>)
 8003056:	4022      	ands	r2, r4
 8003058:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800305a:	4322      	orrs	r2, r4
 800305c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800305e:	061b      	lsls	r3, r3, #24
 8003060:	d506      	bpl.n	8003070 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003062:	6802      	ldr	r2, [r0, #0]
 8003064:	490b      	ldr	r1, [pc, #44]	; (8003094 <UART_AdvFeatureConfig+0xcc>)
 8003066:	6853      	ldr	r3, [r2, #4]
 8003068:	400b      	ands	r3, r1
 800306a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800306c:	430b      	orrs	r3, r1
 800306e:	6053      	str	r3, [r2, #4]
}
 8003070:	bd30      	pop	{r4, r5, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	fffdffff 	.word	0xfffdffff
 8003078:	fffeffff 	.word	0xfffeffff
 800307c:	fffbffff 	.word	0xfffbffff
 8003080:	ffff7fff 	.word	0xffff7fff
 8003084:	ffffefff 	.word	0xffffefff
 8003088:	ffffdfff 	.word	0xffffdfff
 800308c:	ffefffff 	.word	0xffefffff
 8003090:	ff9fffff 	.word	0xff9fffff
 8003094:	fff7ffff 	.word	0xfff7ffff

08003098 <UART_WaitOnFlagUntilTimeout>:
{
 8003098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800309a:	0004      	movs	r4, r0
 800309c:	000d      	movs	r5, r1
 800309e:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030a0:	2608      	movs	r6, #8
{
 80030a2:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a4:	6822      	ldr	r2, [r4, #0]
 80030a6:	69d3      	ldr	r3, [r2, #28]
 80030a8:	402b      	ands	r3, r5
 80030aa:	1b5b      	subs	r3, r3, r5
 80030ac:	4259      	negs	r1, r3
 80030ae:	414b      	adcs	r3, r1
 80030b0:	42bb      	cmp	r3, r7
 80030b2:	d001      	beq.n	80030b8 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 80030b4:	2000      	movs	r0, #0
 80030b6:	e021      	b.n	80030fc <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 80030b8:	9b08      	ldr	r3, [sp, #32]
 80030ba:	3301      	adds	r3, #1
 80030bc:	d0f3      	beq.n	80030a6 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030be:	f7fe fb55 	bl	800176c <HAL_GetTick>
 80030c2:	9b00      	ldr	r3, [sp, #0]
 80030c4:	1ac0      	subs	r0, r0, r3
 80030c6:	9b08      	ldr	r3, [sp, #32]
 80030c8:	4298      	cmp	r0, r3
 80030ca:	d828      	bhi.n	800311e <UART_WaitOnFlagUntilTimeout+0x86>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d026      	beq.n	800311e <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030d0:	2104      	movs	r1, #4
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	420a      	tst	r2, r1
 80030d8:	d0e4      	beq.n	80030a4 <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	0011      	movs	r1, r2
 80030de:	4031      	ands	r1, r6
 80030e0:	9101      	str	r1, [sp, #4]
 80030e2:	4232      	tst	r2, r6
 80030e4:	d00b      	beq.n	80030fe <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 80030e6:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030e8:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 80030ea:	f7ff fe33 	bl	8002d54 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030ee:	0023      	movs	r3, r4
 80030f0:	3308      	adds	r3, #8
 80030f2:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 80030f4:	2300      	movs	r3, #0
           return HAL_ERROR;
 80030f6:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 80030f8:	3478      	adds	r4, #120	; 0x78
 80030fa:	7023      	strb	r3, [r4, #0]
}
 80030fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	69d9      	ldr	r1, [r3, #28]
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	4211      	tst	r1, r2
 8003106:	d0cd      	beq.n	80030a4 <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003108:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800310a:	0020      	movs	r0, r4
 800310c:	f7ff fe22 	bl	8002d54 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003110:	0023      	movs	r3, r4
 8003112:	2220      	movs	r2, #32
 8003114:	3308      	adds	r3, #8
 8003116:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8003118:	9b01      	ldr	r3, [sp, #4]
 800311a:	3478      	adds	r4, #120	; 0x78
 800311c:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800311e:	2003      	movs	r0, #3
 8003120:	e7ec      	b.n	80030fc <UART_WaitOnFlagUntilTimeout+0x64>

08003122 <HAL_UART_Transmit>:
{
 8003122:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003124:	b085      	sub	sp, #20
 8003126:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8003128:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 800312a:	0004      	movs	r4, r0
 800312c:	000d      	movs	r5, r1
 800312e:	0016      	movs	r6, r2
    return HAL_BUSY;
 8003130:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003132:	2b20      	cmp	r3, #32
 8003134:	d139      	bne.n	80031aa <HAL_UART_Transmit+0x88>
      return  HAL_ERROR;
 8003136:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003138:	2900      	cmp	r1, #0
 800313a:	d036      	beq.n	80031aa <HAL_UART_Transmit+0x88>
 800313c:	2a00      	cmp	r2, #0
 800313e:	d034      	beq.n	80031aa <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003140:	2380      	movs	r3, #128	; 0x80
 8003142:	68a2      	ldr	r2, [r4, #8]
 8003144:	015b      	lsls	r3, r3, #5
 8003146:	429a      	cmp	r2, r3
 8003148:	d104      	bne.n	8003154 <HAL_UART_Transmit+0x32>
 800314a:	6923      	ldr	r3, [r4, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003150:	4201      	tst	r1, r0
 8003152:	d12a      	bne.n	80031aa <HAL_UART_Transmit+0x88>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003154:	0023      	movs	r3, r4
 8003156:	2200      	movs	r2, #0
 8003158:	3308      	adds	r3, #8
 800315a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800315c:	2321      	movs	r3, #33	; 0x21
 800315e:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8003160:	f7fe fb04 	bl	800176c <HAL_GetTick>
    huart->TxXferSize  = Size;
 8003164:	0023      	movs	r3, r4
 8003166:	3350      	adds	r3, #80	; 0x50
 8003168:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 800316a:	3302      	adds	r3, #2
 800316c:	801e      	strh	r6, [r3, #0]
 800316e:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8003174:	0007      	movs	r7, r0
      pdata16bits = NULL;
 8003176:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003178:	015b      	lsls	r3, r3, #5
 800317a:	429a      	cmp	r2, r3
 800317c:	d104      	bne.n	8003188 <HAL_UART_Transmit+0x66>
 800317e:	6923      	ldr	r3, [r4, #16]
 8003180:	42b3      	cmp	r3, r6
 8003182:	d101      	bne.n	8003188 <HAL_UART_Transmit+0x66>
 8003184:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8003186:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8003188:	0023      	movs	r3, r4
 800318a:	3352      	adds	r3, #82	; 0x52
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	b29a      	uxth	r2, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10c      	bne.n	80031ae <HAL_UART_Transmit+0x8c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003194:	9b03      	ldr	r3, [sp, #12]
 8003196:	2140      	movs	r1, #64	; 0x40
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	0020      	movs	r0, r4
 800319c:	003b      	movs	r3, r7
 800319e:	f7ff ff7b 	bl	8003098 <UART_WaitOnFlagUntilTimeout>
 80031a2:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 80031a4:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031a6:	2800      	cmp	r0, #0
 80031a8:	d10d      	bne.n	80031c6 <HAL_UART_Transmit+0xa4>
}
 80031aa:	b005      	add	sp, #20
 80031ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ae:	9b03      	ldr	r3, [sp, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	003b      	movs	r3, r7
 80031b8:	0020      	movs	r0, r4
 80031ba:	f7ff ff6d 	bl	8003098 <UART_WaitOnFlagUntilTimeout>
 80031be:	2800      	cmp	r0, #0
 80031c0:	d003      	beq.n	80031ca <HAL_UART_Transmit+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 80031c2:	2320      	movs	r3, #32
 80031c4:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80031c6:	2003      	movs	r0, #3
 80031c8:	e7ef      	b.n	80031aa <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031ca:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80031cc:	2d00      	cmp	r5, #0
 80031ce:	d10b      	bne.n	80031e8 <HAL_UART_Transmit+0xc6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031d0:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80031d2:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031d4:	05db      	lsls	r3, r3, #23
 80031d6:	0ddb      	lsrs	r3, r3, #23
 80031d8:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80031da:	9b02      	ldr	r3, [sp, #8]
 80031dc:	9a02      	ldr	r2, [sp, #8]
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	8013      	strh	r3, [r2, #0]
 80031e6:	e7cf      	b.n	8003188 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031e8:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80031ea:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ec:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 80031ee:	e7f4      	b.n	80031da <HAL_UART_Transmit+0xb8>

080031f0 <HAL_UART_Receive>:
{
 80031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f2:	0016      	movs	r6, r2
 80031f4:	b087      	sub	sp, #28
  if (huart->RxState == HAL_UART_STATE_READY)
 80031f6:	1d02      	adds	r2, r0, #4
{
 80031f8:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 80031fa:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
{
 80031fc:	0004      	movs	r4, r0
 80031fe:	000d      	movs	r5, r1
    return HAL_BUSY;
 8003200:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003202:	2b20      	cmp	r3, #32
 8003204:	d160      	bne.n	80032c8 <HAL_UART_Receive+0xd8>
      return  HAL_ERROR;
 8003206:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003208:	2900      	cmp	r1, #0
 800320a:	d05d      	beq.n	80032c8 <HAL_UART_Receive+0xd8>
 800320c:	2e00      	cmp	r6, #0
 800320e:	d05b      	beq.n	80032c8 <HAL_UART_Receive+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	68a1      	ldr	r1, [r4, #8]
 8003214:	015b      	lsls	r3, r3, #5
 8003216:	4299      	cmp	r1, r3
 8003218:	d104      	bne.n	8003224 <HAL_UART_Receive+0x34>
 800321a:	6923      	ldr	r3, [r4, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_UART_Receive+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003220:	4205      	tst	r5, r0
 8003222:	d151      	bne.n	80032c8 <HAL_UART_Receive+0xd8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003224:	0023      	movs	r3, r4
 8003226:	2700      	movs	r7, #0
 8003228:	3308      	adds	r3, #8
 800322a:	67df      	str	r7, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800322c:	2322      	movs	r3, #34	; 0x22
 800322e:	67d3      	str	r3, [r2, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003230:	6627      	str	r7, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 8003232:	f7fe fa9b 	bl	800176c <HAL_GetTick>
    huart->RxXferSize  = Size;
 8003236:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8003238:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 800323a:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 800323c:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 800323e:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 8003240:	3302      	adds	r3, #2
 8003242:	9303      	str	r3, [sp, #12]
 8003244:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8003246:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 8003248:	0149      	lsls	r1, r1, #5
 800324a:	3302      	adds	r3, #2
 800324c:	428a      	cmp	r2, r1
 800324e:	d11b      	bne.n	8003288 <HAL_UART_Receive+0x98>
 8003250:	6921      	ldr	r1, [r4, #16]
 8003252:	42b9      	cmp	r1, r7
 8003254:	d116      	bne.n	8003284 <HAL_UART_Receive+0x94>
 8003256:	4926      	ldr	r1, [pc, #152]	; (80032f0 <HAL_UART_Receive+0x100>)
 8003258:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 800325a:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325c:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 800325e:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003260:	015b      	lsls	r3, r3, #5
 8003262:	429a      	cmp	r2, r3
 8003264:	d104      	bne.n	8003270 <HAL_UART_Receive+0x80>
 8003266:	6923      	ldr	r3, [r4, #16]
 8003268:	42b3      	cmp	r3, r6
 800326a:	d101      	bne.n	8003270 <HAL_UART_Receive+0x80>
 800326c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800326e:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 8003270:	0023      	movs	r3, r4
 8003272:	335a      	adds	r3, #90	; 0x5a
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b298      	uxth	r0, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d117      	bne.n	80032ac <HAL_UART_Receive+0xbc>
    huart->RxState = HAL_UART_STATE_READY;
 800327c:	3404      	adds	r4, #4
 800327e:	3320      	adds	r3, #32
 8003280:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8003282:	e021      	b.n	80032c8 <HAL_UART_Receive+0xd8>
    UART_MASK_COMPUTATION(huart);
 8003284:	21ff      	movs	r1, #255	; 0xff
 8003286:	e7e7      	b.n	8003258 <HAL_UART_Receive+0x68>
 8003288:	2a00      	cmp	r2, #0
 800328a:	d104      	bne.n	8003296 <HAL_UART_Receive+0xa6>
 800328c:	6921      	ldr	r1, [r4, #16]
 800328e:	2900      	cmp	r1, #0
 8003290:	d0f8      	beq.n	8003284 <HAL_UART_Receive+0x94>
 8003292:	217f      	movs	r1, #127	; 0x7f
 8003294:	e7e0      	b.n	8003258 <HAL_UART_Receive+0x68>
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	0549      	lsls	r1, r1, #21
 800329a:	428a      	cmp	r2, r1
 800329c:	d104      	bne.n	80032a8 <HAL_UART_Receive+0xb8>
 800329e:	6921      	ldr	r1, [r4, #16]
 80032a0:	2900      	cmp	r1, #0
 80032a2:	d0f6      	beq.n	8003292 <HAL_UART_Receive+0xa2>
 80032a4:	213f      	movs	r1, #63	; 0x3f
 80032a6:	e7d7      	b.n	8003258 <HAL_UART_Receive+0x68>
 80032a8:	801f      	strh	r7, [r3, #0]
 80032aa:	e7d6      	b.n	800325a <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032ac:	9b05      	ldr	r3, [sp, #20]
 80032ae:	2200      	movs	r2, #0
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	2120      	movs	r1, #32
 80032b4:	0020      	movs	r0, r4
 80032b6:	9b04      	ldr	r3, [sp, #16]
 80032b8:	f7ff feee 	bl	8003098 <UART_WaitOnFlagUntilTimeout>
 80032bc:	2800      	cmp	r0, #0
 80032be:	d005      	beq.n	80032cc <HAL_UART_Receive+0xdc>
        huart->RxState = HAL_UART_STATE_READY;
 80032c0:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80032c2:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80032c4:	3404      	adds	r4, #4
 80032c6:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 80032c8:	b007      	add	sp, #28
 80032ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 80032d2:	2d00      	cmp	r5, #0
 80032d4:	d108      	bne.n	80032e8 <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80032d6:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 80032d8:	3602      	adds	r6, #2
      huart->RxXferCount--;
 80032da:	9b03      	ldr	r3, [sp, #12]
 80032dc:	9a03      	ldr	r2, [sp, #12]
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	8013      	strh	r3, [r2, #0]
 80032e6:	e7c3      	b.n	8003270 <HAL_UART_Receive+0x80>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80032e8:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 80032ea:	3501      	adds	r5, #1
 80032ec:	e7f5      	b.n	80032da <HAL_UART_Receive+0xea>
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	000001ff 	.word	0x000001ff

080032f4 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f4:	0003      	movs	r3, r0
{
 80032f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f8:	2500      	movs	r5, #0
{
 80032fa:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fc:	3308      	adds	r3, #8
 80032fe:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003300:	f7fe fa34 	bl	800176c <HAL_GetTick>
 8003304:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003306:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003308:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3678      	adds	r6, #120	; 0x78
 800330e:	071b      	lsls	r3, r3, #28
 8003310:	d51b      	bpl.n	800334a <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003312:	2180      	movs	r1, #128	; 0x80
 8003314:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <UART_CheckIdleState+0xbc>)
 8003316:	002a      	movs	r2, r5
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	0389      	lsls	r1, r1, #14
 800331c:	0003      	movs	r3, r0
 800331e:	0020      	movs	r0, r4
 8003320:	f7ff feba 	bl	8003098 <UART_WaitOnFlagUntilTimeout>
 8003324:	42a8      	cmp	r0, r5
 8003326:	d010      	beq.n	800334a <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003328:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332c:	2301      	movs	r3, #1
 800332e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003332:	2080      	movs	r0, #128	; 0x80
 8003334:	6822      	ldr	r2, [r4, #0]
 8003336:	6813      	ldr	r3, [r2, #0]
 8003338:	4383      	bics	r3, r0
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8003340:	2320      	movs	r3, #32
 8003342:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8003344:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 8003346:	2003      	movs	r0, #3
}
 8003348:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800334a:	0025      	movs	r5, r4
 800334c:	cd08      	ldmia	r5!, {r3}
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	075b      	lsls	r3, r3, #29
 8003352:	d525      	bpl.n	80033a0 <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003354:	2180      	movs	r1, #128	; 0x80
 8003356:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <UART_CheckIdleState+0xbc>)
 8003358:	2200      	movs	r2, #0
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	0020      	movs	r0, r4
 800335e:	003b      	movs	r3, r7
 8003360:	03c9      	lsls	r1, r1, #15
 8003362:	f7ff fe99 	bl	8003098 <UART_WaitOnFlagUntilTimeout>
 8003366:	2800      	cmp	r0, #0
 8003368:	d01a      	beq.n	80033a0 <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336e:	2201      	movs	r2, #1
 8003370:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003374:	6821      	ldr	r1, [r4, #0]
 8003376:	4f0f      	ldr	r7, [pc, #60]	; (80033b4 <UART_CheckIdleState+0xc0>)
 8003378:	680b      	ldr	r3, [r1, #0]
 800337a:	403b      	ands	r3, r7
 800337c:	600b      	str	r3, [r1, #0]
 800337e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003382:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003386:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338a:	6821      	ldr	r1, [r4, #0]
 800338c:	688b      	ldr	r3, [r1, #8]
 800338e:	4393      	bics	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
 8003392:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8003396:	2320      	movs	r3, #32
 8003398:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 800339a:	2300      	movs	r3, #0
 800339c:	7033      	strb	r3, [r6, #0]
 800339e:	e7d2      	b.n	8003346 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80033a2:	2320      	movs	r3, #32
 80033a4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033a6:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a8:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033aa:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80033ac:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 80033ae:	e7cb      	b.n	8003348 <UART_CheckIdleState+0x54>
 80033b0:	01ffffff 	.word	0x01ffffff
 80033b4:	fffffedf 	.word	0xfffffedf

080033b8 <HAL_UART_Init>:
{
 80033b8:	b510      	push	{r4, lr}
 80033ba:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80033bc:	d101      	bne.n	80033c2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80033be:	2001      	movs	r0, #1
}
 80033c0:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80033c2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d104      	bne.n	80033d2 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80033c8:	0002      	movs	r2, r0
 80033ca:	3278      	adds	r2, #120	; 0x78
 80033cc:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80033ce:	f7fe f907 	bl	80015e0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80033d2:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80033d4:	2101      	movs	r1, #1
 80033d6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80033d8:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80033da:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033dc:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80033de:	438b      	bics	r3, r1
 80033e0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033e2:	f7ff fce5 	bl	8002db0 <UART_SetConfig>
 80033e6:	2801      	cmp	r0, #1
 80033e8:	d0e9      	beq.n	80033be <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80033f0:	0020      	movs	r0, r4
 80033f2:	f7ff fde9 	bl	8002fc8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	4907      	ldr	r1, [pc, #28]	; (8003418 <HAL_UART_Init+0x60>)
 80033fa:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80033fc:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033fe:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003400:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	438a      	bics	r2, r1
 8003408:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800340a:	2201      	movs	r2, #1
 800340c:	6819      	ldr	r1, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003412:	f7ff ff6f 	bl	80032f4 <UART_CheckIdleState>
 8003416:	e7d3      	b.n	80033c0 <HAL_UART_Init+0x8>
 8003418:	ffffb7ff 	.word	0xffffb7ff

0800341c <__errno>:
 800341c:	4b01      	ldr	r3, [pc, #4]	; (8003424 <__errno+0x8>)
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	4770      	bx	lr
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	20000114 	.word	0x20000114

08003428 <__libc_init_array>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	2600      	movs	r6, #0
 800342c:	4d0c      	ldr	r5, [pc, #48]	; (8003460 <__libc_init_array+0x38>)
 800342e:	4c0d      	ldr	r4, [pc, #52]	; (8003464 <__libc_init_array+0x3c>)
 8003430:	1b64      	subs	r4, r4, r5
 8003432:	10a4      	asrs	r4, r4, #2
 8003434:	42a6      	cmp	r6, r4
 8003436:	d109      	bne.n	800344c <__libc_init_array+0x24>
 8003438:	2600      	movs	r6, #0
 800343a:	f000 fc93 	bl	8003d64 <_init>
 800343e:	4d0a      	ldr	r5, [pc, #40]	; (8003468 <__libc_init_array+0x40>)
 8003440:	4c0a      	ldr	r4, [pc, #40]	; (800346c <__libc_init_array+0x44>)
 8003442:	1b64      	subs	r4, r4, r5
 8003444:	10a4      	asrs	r4, r4, #2
 8003446:	42a6      	cmp	r6, r4
 8003448:	d105      	bne.n	8003456 <__libc_init_array+0x2e>
 800344a:	bd70      	pop	{r4, r5, r6, pc}
 800344c:	00b3      	lsls	r3, r6, #2
 800344e:	58eb      	ldr	r3, [r5, r3]
 8003450:	4798      	blx	r3
 8003452:	3601      	adds	r6, #1
 8003454:	e7ee      	b.n	8003434 <__libc_init_array+0xc>
 8003456:	00b3      	lsls	r3, r6, #2
 8003458:	58eb      	ldr	r3, [r5, r3]
 800345a:	4798      	blx	r3
 800345c:	3601      	adds	r6, #1
 800345e:	e7f2      	b.n	8003446 <__libc_init_array+0x1e>
 8003460:	08004100 	.word	0x08004100
 8003464:	08004100 	.word	0x08004100
 8003468:	08004100 	.word	0x08004100
 800346c:	08004104 	.word	0x08004104

08003470 <memcpy>:
 8003470:	2300      	movs	r3, #0
 8003472:	b510      	push	{r4, lr}
 8003474:	429a      	cmp	r2, r3
 8003476:	d100      	bne.n	800347a <memcpy+0xa>
 8003478:	bd10      	pop	{r4, pc}
 800347a:	5ccc      	ldrb	r4, [r1, r3]
 800347c:	54c4      	strb	r4, [r0, r3]
 800347e:	3301      	adds	r3, #1
 8003480:	e7f8      	b.n	8003474 <memcpy+0x4>

08003482 <memset>:
 8003482:	0003      	movs	r3, r0
 8003484:	1882      	adds	r2, r0, r2
 8003486:	4293      	cmp	r3, r2
 8003488:	d100      	bne.n	800348c <memset+0xa>
 800348a:	4770      	bx	lr
 800348c:	7019      	strb	r1, [r3, #0]
 800348e:	3301      	adds	r3, #1
 8003490:	e7f9      	b.n	8003486 <memset+0x4>
	...

08003494 <siprintf>:
 8003494:	b40e      	push	{r1, r2, r3}
 8003496:	b500      	push	{lr}
 8003498:	490b      	ldr	r1, [pc, #44]	; (80034c8 <siprintf+0x34>)
 800349a:	b09c      	sub	sp, #112	; 0x70
 800349c:	ab1d      	add	r3, sp, #116	; 0x74
 800349e:	9002      	str	r0, [sp, #8]
 80034a0:	9006      	str	r0, [sp, #24]
 80034a2:	9107      	str	r1, [sp, #28]
 80034a4:	9104      	str	r1, [sp, #16]
 80034a6:	4809      	ldr	r0, [pc, #36]	; (80034cc <siprintf+0x38>)
 80034a8:	4909      	ldr	r1, [pc, #36]	; (80034d0 <siprintf+0x3c>)
 80034aa:	cb04      	ldmia	r3!, {r2}
 80034ac:	9105      	str	r1, [sp, #20]
 80034ae:	6800      	ldr	r0, [r0, #0]
 80034b0:	a902      	add	r1, sp, #8
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	f000 f878 	bl	80035a8 <_svfiprintf_r>
 80034b8:	2300      	movs	r3, #0
 80034ba:	9a02      	ldr	r2, [sp, #8]
 80034bc:	7013      	strb	r3, [r2, #0]
 80034be:	b01c      	add	sp, #112	; 0x70
 80034c0:	bc08      	pop	{r3}
 80034c2:	b003      	add	sp, #12
 80034c4:	4718      	bx	r3
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	7fffffff 	.word	0x7fffffff
 80034cc:	20000114 	.word	0x20000114
 80034d0:	ffff0208 	.word	0xffff0208

080034d4 <strcpy>:
 80034d4:	0003      	movs	r3, r0
 80034d6:	780a      	ldrb	r2, [r1, #0]
 80034d8:	3101      	adds	r1, #1
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	2a00      	cmp	r2, #0
 80034e0:	d1f9      	bne.n	80034d6 <strcpy+0x2>
 80034e2:	4770      	bx	lr

080034e4 <__ssputs_r>:
 80034e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e6:	688e      	ldr	r6, [r1, #8]
 80034e8:	b085      	sub	sp, #20
 80034ea:	0007      	movs	r7, r0
 80034ec:	000c      	movs	r4, r1
 80034ee:	9203      	str	r2, [sp, #12]
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	429e      	cmp	r6, r3
 80034f4:	d83c      	bhi.n	8003570 <__ssputs_r+0x8c>
 80034f6:	2390      	movs	r3, #144	; 0x90
 80034f8:	898a      	ldrh	r2, [r1, #12]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	421a      	tst	r2, r3
 80034fe:	d034      	beq.n	800356a <__ssputs_r+0x86>
 8003500:	6909      	ldr	r1, [r1, #16]
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	6960      	ldr	r0, [r4, #20]
 8003506:	1a5b      	subs	r3, r3, r1
 8003508:	9302      	str	r3, [sp, #8]
 800350a:	2303      	movs	r3, #3
 800350c:	4343      	muls	r3, r0
 800350e:	0fdd      	lsrs	r5, r3, #31
 8003510:	18ed      	adds	r5, r5, r3
 8003512:	9b01      	ldr	r3, [sp, #4]
 8003514:	9802      	ldr	r0, [sp, #8]
 8003516:	3301      	adds	r3, #1
 8003518:	181b      	adds	r3, r3, r0
 800351a:	106d      	asrs	r5, r5, #1
 800351c:	42ab      	cmp	r3, r5
 800351e:	d900      	bls.n	8003522 <__ssputs_r+0x3e>
 8003520:	001d      	movs	r5, r3
 8003522:	0553      	lsls	r3, r2, #21
 8003524:	d532      	bpl.n	800358c <__ssputs_r+0xa8>
 8003526:	0029      	movs	r1, r5
 8003528:	0038      	movs	r0, r7
 800352a:	f000 fb49 	bl	8003bc0 <_malloc_r>
 800352e:	1e06      	subs	r6, r0, #0
 8003530:	d109      	bne.n	8003546 <__ssputs_r+0x62>
 8003532:	230c      	movs	r3, #12
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	2340      	movs	r3, #64	; 0x40
 8003538:	2001      	movs	r0, #1
 800353a:	89a2      	ldrh	r2, [r4, #12]
 800353c:	4240      	negs	r0, r0
 800353e:	4313      	orrs	r3, r2
 8003540:	81a3      	strh	r3, [r4, #12]
 8003542:	b005      	add	sp, #20
 8003544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003546:	9a02      	ldr	r2, [sp, #8]
 8003548:	6921      	ldr	r1, [r4, #16]
 800354a:	f7ff ff91 	bl	8003470 <memcpy>
 800354e:	89a3      	ldrh	r3, [r4, #12]
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <__ssputs_r+0xc0>)
 8003552:	401a      	ands	r2, r3
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	4313      	orrs	r3, r2
 8003558:	81a3      	strh	r3, [r4, #12]
 800355a:	9b02      	ldr	r3, [sp, #8]
 800355c:	6126      	str	r6, [r4, #16]
 800355e:	18f6      	adds	r6, r6, r3
 8003560:	6026      	str	r6, [r4, #0]
 8003562:	6165      	str	r5, [r4, #20]
 8003564:	9e01      	ldr	r6, [sp, #4]
 8003566:	1aed      	subs	r5, r5, r3
 8003568:	60a5      	str	r5, [r4, #8]
 800356a:	9b01      	ldr	r3, [sp, #4]
 800356c:	429e      	cmp	r6, r3
 800356e:	d900      	bls.n	8003572 <__ssputs_r+0x8e>
 8003570:	9e01      	ldr	r6, [sp, #4]
 8003572:	0032      	movs	r2, r6
 8003574:	9903      	ldr	r1, [sp, #12]
 8003576:	6820      	ldr	r0, [r4, #0]
 8003578:	f000 faa3 	bl	8003ac2 <memmove>
 800357c:	68a3      	ldr	r3, [r4, #8]
 800357e:	2000      	movs	r0, #0
 8003580:	1b9b      	subs	r3, r3, r6
 8003582:	60a3      	str	r3, [r4, #8]
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	199e      	adds	r6, r3, r6
 8003588:	6026      	str	r6, [r4, #0]
 800358a:	e7da      	b.n	8003542 <__ssputs_r+0x5e>
 800358c:	002a      	movs	r2, r5
 800358e:	0038      	movs	r0, r7
 8003590:	f000 fb8c 	bl	8003cac <_realloc_r>
 8003594:	1e06      	subs	r6, r0, #0
 8003596:	d1e0      	bne.n	800355a <__ssputs_r+0x76>
 8003598:	0038      	movs	r0, r7
 800359a:	6921      	ldr	r1, [r4, #16]
 800359c:	f000 faa4 	bl	8003ae8 <_free_r>
 80035a0:	e7c7      	b.n	8003532 <__ssputs_r+0x4e>
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	fffffb7f 	.word	0xfffffb7f

080035a8 <_svfiprintf_r>:
 80035a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035aa:	b0a1      	sub	sp, #132	; 0x84
 80035ac:	9003      	str	r0, [sp, #12]
 80035ae:	001d      	movs	r5, r3
 80035b0:	898b      	ldrh	r3, [r1, #12]
 80035b2:	000f      	movs	r7, r1
 80035b4:	0016      	movs	r6, r2
 80035b6:	061b      	lsls	r3, r3, #24
 80035b8:	d511      	bpl.n	80035de <_svfiprintf_r+0x36>
 80035ba:	690b      	ldr	r3, [r1, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10e      	bne.n	80035de <_svfiprintf_r+0x36>
 80035c0:	2140      	movs	r1, #64	; 0x40
 80035c2:	f000 fafd 	bl	8003bc0 <_malloc_r>
 80035c6:	6038      	str	r0, [r7, #0]
 80035c8:	6138      	str	r0, [r7, #16]
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d105      	bne.n	80035da <_svfiprintf_r+0x32>
 80035ce:	230c      	movs	r3, #12
 80035d0:	9a03      	ldr	r2, [sp, #12]
 80035d2:	3801      	subs	r0, #1
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	b021      	add	sp, #132	; 0x84
 80035d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035da:	2340      	movs	r3, #64	; 0x40
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	2300      	movs	r3, #0
 80035e0:	ac08      	add	r4, sp, #32
 80035e2:	6163      	str	r3, [r4, #20]
 80035e4:	3320      	adds	r3, #32
 80035e6:	7663      	strb	r3, [r4, #25]
 80035e8:	3310      	adds	r3, #16
 80035ea:	76a3      	strb	r3, [r4, #26]
 80035ec:	9507      	str	r5, [sp, #28]
 80035ee:	0035      	movs	r5, r6
 80035f0:	782b      	ldrb	r3, [r5, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <_svfiprintf_r+0x52>
 80035f6:	2b25      	cmp	r3, #37	; 0x25
 80035f8:	d147      	bne.n	800368a <_svfiprintf_r+0xe2>
 80035fa:	1bab      	subs	r3, r5, r6
 80035fc:	9305      	str	r3, [sp, #20]
 80035fe:	42b5      	cmp	r5, r6
 8003600:	d00c      	beq.n	800361c <_svfiprintf_r+0x74>
 8003602:	0032      	movs	r2, r6
 8003604:	0039      	movs	r1, r7
 8003606:	9803      	ldr	r0, [sp, #12]
 8003608:	f7ff ff6c 	bl	80034e4 <__ssputs_r>
 800360c:	1c43      	adds	r3, r0, #1
 800360e:	d100      	bne.n	8003612 <_svfiprintf_r+0x6a>
 8003610:	e0ae      	b.n	8003770 <_svfiprintf_r+0x1c8>
 8003612:	6962      	ldr	r2, [r4, #20]
 8003614:	9b05      	ldr	r3, [sp, #20]
 8003616:	4694      	mov	ip, r2
 8003618:	4463      	add	r3, ip
 800361a:	6163      	str	r3, [r4, #20]
 800361c:	782b      	ldrb	r3, [r5, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d100      	bne.n	8003624 <_svfiprintf_r+0x7c>
 8003622:	e0a5      	b.n	8003770 <_svfiprintf_r+0x1c8>
 8003624:	2201      	movs	r2, #1
 8003626:	2300      	movs	r3, #0
 8003628:	4252      	negs	r2, r2
 800362a:	6062      	str	r2, [r4, #4]
 800362c:	a904      	add	r1, sp, #16
 800362e:	3254      	adds	r2, #84	; 0x54
 8003630:	1852      	adds	r2, r2, r1
 8003632:	1c6e      	adds	r6, r5, #1
 8003634:	6023      	str	r3, [r4, #0]
 8003636:	60e3      	str	r3, [r4, #12]
 8003638:	60a3      	str	r3, [r4, #8]
 800363a:	7013      	strb	r3, [r2, #0]
 800363c:	65a3      	str	r3, [r4, #88]	; 0x58
 800363e:	2205      	movs	r2, #5
 8003640:	7831      	ldrb	r1, [r6, #0]
 8003642:	4854      	ldr	r0, [pc, #336]	; (8003794 <_svfiprintf_r+0x1ec>)
 8003644:	f000 fa32 	bl	8003aac <memchr>
 8003648:	1c75      	adds	r5, r6, #1
 800364a:	2800      	cmp	r0, #0
 800364c:	d11f      	bne.n	800368e <_svfiprintf_r+0xe6>
 800364e:	6822      	ldr	r2, [r4, #0]
 8003650:	06d3      	lsls	r3, r2, #27
 8003652:	d504      	bpl.n	800365e <_svfiprintf_r+0xb6>
 8003654:	2353      	movs	r3, #83	; 0x53
 8003656:	a904      	add	r1, sp, #16
 8003658:	185b      	adds	r3, r3, r1
 800365a:	2120      	movs	r1, #32
 800365c:	7019      	strb	r1, [r3, #0]
 800365e:	0713      	lsls	r3, r2, #28
 8003660:	d504      	bpl.n	800366c <_svfiprintf_r+0xc4>
 8003662:	2353      	movs	r3, #83	; 0x53
 8003664:	a904      	add	r1, sp, #16
 8003666:	185b      	adds	r3, r3, r1
 8003668:	212b      	movs	r1, #43	; 0x2b
 800366a:	7019      	strb	r1, [r3, #0]
 800366c:	7833      	ldrb	r3, [r6, #0]
 800366e:	2b2a      	cmp	r3, #42	; 0x2a
 8003670:	d016      	beq.n	80036a0 <_svfiprintf_r+0xf8>
 8003672:	0035      	movs	r5, r6
 8003674:	2100      	movs	r1, #0
 8003676:	200a      	movs	r0, #10
 8003678:	68e3      	ldr	r3, [r4, #12]
 800367a:	782a      	ldrb	r2, [r5, #0]
 800367c:	1c6e      	adds	r6, r5, #1
 800367e:	3a30      	subs	r2, #48	; 0x30
 8003680:	2a09      	cmp	r2, #9
 8003682:	d94e      	bls.n	8003722 <_svfiprintf_r+0x17a>
 8003684:	2900      	cmp	r1, #0
 8003686:	d111      	bne.n	80036ac <_svfiprintf_r+0x104>
 8003688:	e017      	b.n	80036ba <_svfiprintf_r+0x112>
 800368a:	3501      	adds	r5, #1
 800368c:	e7b0      	b.n	80035f0 <_svfiprintf_r+0x48>
 800368e:	4b41      	ldr	r3, [pc, #260]	; (8003794 <_svfiprintf_r+0x1ec>)
 8003690:	6822      	ldr	r2, [r4, #0]
 8003692:	1ac0      	subs	r0, r0, r3
 8003694:	2301      	movs	r3, #1
 8003696:	4083      	lsls	r3, r0
 8003698:	4313      	orrs	r3, r2
 800369a:	002e      	movs	r6, r5
 800369c:	6023      	str	r3, [r4, #0]
 800369e:	e7ce      	b.n	800363e <_svfiprintf_r+0x96>
 80036a0:	9b07      	ldr	r3, [sp, #28]
 80036a2:	1d19      	adds	r1, r3, #4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	9107      	str	r1, [sp, #28]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	db01      	blt.n	80036b0 <_svfiprintf_r+0x108>
 80036ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80036ae:	e004      	b.n	80036ba <_svfiprintf_r+0x112>
 80036b0:	425b      	negs	r3, r3
 80036b2:	60e3      	str	r3, [r4, #12]
 80036b4:	2302      	movs	r3, #2
 80036b6:	4313      	orrs	r3, r2
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	782b      	ldrb	r3, [r5, #0]
 80036bc:	2b2e      	cmp	r3, #46	; 0x2e
 80036be:	d10a      	bne.n	80036d6 <_svfiprintf_r+0x12e>
 80036c0:	786b      	ldrb	r3, [r5, #1]
 80036c2:	2b2a      	cmp	r3, #42	; 0x2a
 80036c4:	d135      	bne.n	8003732 <_svfiprintf_r+0x18a>
 80036c6:	9b07      	ldr	r3, [sp, #28]
 80036c8:	3502      	adds	r5, #2
 80036ca:	1d1a      	adds	r2, r3, #4
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	9207      	str	r2, [sp, #28]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	db2b      	blt.n	800372c <_svfiprintf_r+0x184>
 80036d4:	9309      	str	r3, [sp, #36]	; 0x24
 80036d6:	4e30      	ldr	r6, [pc, #192]	; (8003798 <_svfiprintf_r+0x1f0>)
 80036d8:	2203      	movs	r2, #3
 80036da:	0030      	movs	r0, r6
 80036dc:	7829      	ldrb	r1, [r5, #0]
 80036de:	f000 f9e5 	bl	8003aac <memchr>
 80036e2:	2800      	cmp	r0, #0
 80036e4:	d006      	beq.n	80036f4 <_svfiprintf_r+0x14c>
 80036e6:	2340      	movs	r3, #64	; 0x40
 80036e8:	1b80      	subs	r0, r0, r6
 80036ea:	4083      	lsls	r3, r0
 80036ec:	6822      	ldr	r2, [r4, #0]
 80036ee:	3501      	adds	r5, #1
 80036f0:	4313      	orrs	r3, r2
 80036f2:	6023      	str	r3, [r4, #0]
 80036f4:	7829      	ldrb	r1, [r5, #0]
 80036f6:	2206      	movs	r2, #6
 80036f8:	4828      	ldr	r0, [pc, #160]	; (800379c <_svfiprintf_r+0x1f4>)
 80036fa:	1c6e      	adds	r6, r5, #1
 80036fc:	7621      	strb	r1, [r4, #24]
 80036fe:	f000 f9d5 	bl	8003aac <memchr>
 8003702:	2800      	cmp	r0, #0
 8003704:	d03c      	beq.n	8003780 <_svfiprintf_r+0x1d8>
 8003706:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <_svfiprintf_r+0x1f8>)
 8003708:	2b00      	cmp	r3, #0
 800370a:	d125      	bne.n	8003758 <_svfiprintf_r+0x1b0>
 800370c:	2207      	movs	r2, #7
 800370e:	9b07      	ldr	r3, [sp, #28]
 8003710:	3307      	adds	r3, #7
 8003712:	4393      	bics	r3, r2
 8003714:	3308      	adds	r3, #8
 8003716:	9307      	str	r3, [sp, #28]
 8003718:	6963      	ldr	r3, [r4, #20]
 800371a:	9a04      	ldr	r2, [sp, #16]
 800371c:	189b      	adds	r3, r3, r2
 800371e:	6163      	str	r3, [r4, #20]
 8003720:	e765      	b.n	80035ee <_svfiprintf_r+0x46>
 8003722:	4343      	muls	r3, r0
 8003724:	0035      	movs	r5, r6
 8003726:	2101      	movs	r1, #1
 8003728:	189b      	adds	r3, r3, r2
 800372a:	e7a6      	b.n	800367a <_svfiprintf_r+0xd2>
 800372c:	2301      	movs	r3, #1
 800372e:	425b      	negs	r3, r3
 8003730:	e7d0      	b.n	80036d4 <_svfiprintf_r+0x12c>
 8003732:	2300      	movs	r3, #0
 8003734:	200a      	movs	r0, #10
 8003736:	001a      	movs	r2, r3
 8003738:	3501      	adds	r5, #1
 800373a:	6063      	str	r3, [r4, #4]
 800373c:	7829      	ldrb	r1, [r5, #0]
 800373e:	1c6e      	adds	r6, r5, #1
 8003740:	3930      	subs	r1, #48	; 0x30
 8003742:	2909      	cmp	r1, #9
 8003744:	d903      	bls.n	800374e <_svfiprintf_r+0x1a6>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0c5      	beq.n	80036d6 <_svfiprintf_r+0x12e>
 800374a:	9209      	str	r2, [sp, #36]	; 0x24
 800374c:	e7c3      	b.n	80036d6 <_svfiprintf_r+0x12e>
 800374e:	4342      	muls	r2, r0
 8003750:	0035      	movs	r5, r6
 8003752:	2301      	movs	r3, #1
 8003754:	1852      	adds	r2, r2, r1
 8003756:	e7f1      	b.n	800373c <_svfiprintf_r+0x194>
 8003758:	ab07      	add	r3, sp, #28
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	003a      	movs	r2, r7
 800375e:	0021      	movs	r1, r4
 8003760:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <_svfiprintf_r+0x1fc>)
 8003762:	9803      	ldr	r0, [sp, #12]
 8003764:	e000      	b.n	8003768 <_svfiprintf_r+0x1c0>
 8003766:	bf00      	nop
 8003768:	9004      	str	r0, [sp, #16]
 800376a:	9b04      	ldr	r3, [sp, #16]
 800376c:	3301      	adds	r3, #1
 800376e:	d1d3      	bne.n	8003718 <_svfiprintf_r+0x170>
 8003770:	89bb      	ldrh	r3, [r7, #12]
 8003772:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003774:	065b      	lsls	r3, r3, #25
 8003776:	d400      	bmi.n	800377a <_svfiprintf_r+0x1d2>
 8003778:	e72d      	b.n	80035d6 <_svfiprintf_r+0x2e>
 800377a:	2001      	movs	r0, #1
 800377c:	4240      	negs	r0, r0
 800377e:	e72a      	b.n	80035d6 <_svfiprintf_r+0x2e>
 8003780:	ab07      	add	r3, sp, #28
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	003a      	movs	r2, r7
 8003786:	0021      	movs	r1, r4
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <_svfiprintf_r+0x1fc>)
 800378a:	9803      	ldr	r0, [sp, #12]
 800378c:	f000 f87c 	bl	8003888 <_printf_i>
 8003790:	e7ea      	b.n	8003768 <_svfiprintf_r+0x1c0>
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	080040c3 	.word	0x080040c3
 8003798:	080040c9 	.word	0x080040c9
 800379c:	080040cd 	.word	0x080040cd
 80037a0:	00000000 	.word	0x00000000
 80037a4:	080034e5 	.word	0x080034e5

080037a8 <_printf_common>:
 80037a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037aa:	0015      	movs	r5, r2
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	688a      	ldr	r2, [r1, #8]
 80037b0:	690b      	ldr	r3, [r1, #16]
 80037b2:	000c      	movs	r4, r1
 80037b4:	9000      	str	r0, [sp, #0]
 80037b6:	4293      	cmp	r3, r2
 80037b8:	da00      	bge.n	80037bc <_printf_common+0x14>
 80037ba:	0013      	movs	r3, r2
 80037bc:	0022      	movs	r2, r4
 80037be:	602b      	str	r3, [r5, #0]
 80037c0:	3243      	adds	r2, #67	; 0x43
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	2a00      	cmp	r2, #0
 80037c6:	d001      	beq.n	80037cc <_printf_common+0x24>
 80037c8:	3301      	adds	r3, #1
 80037ca:	602b      	str	r3, [r5, #0]
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	069b      	lsls	r3, r3, #26
 80037d0:	d502      	bpl.n	80037d8 <_printf_common+0x30>
 80037d2:	682b      	ldr	r3, [r5, #0]
 80037d4:	3302      	adds	r3, #2
 80037d6:	602b      	str	r3, [r5, #0]
 80037d8:	6822      	ldr	r2, [r4, #0]
 80037da:	2306      	movs	r3, #6
 80037dc:	0017      	movs	r7, r2
 80037de:	401f      	ands	r7, r3
 80037e0:	421a      	tst	r2, r3
 80037e2:	d027      	beq.n	8003834 <_printf_common+0x8c>
 80037e4:	0023      	movs	r3, r4
 80037e6:	3343      	adds	r3, #67	; 0x43
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	1e5a      	subs	r2, r3, #1
 80037ec:	4193      	sbcs	r3, r2
 80037ee:	6822      	ldr	r2, [r4, #0]
 80037f0:	0692      	lsls	r2, r2, #26
 80037f2:	d430      	bmi.n	8003856 <_printf_common+0xae>
 80037f4:	0022      	movs	r2, r4
 80037f6:	9901      	ldr	r1, [sp, #4]
 80037f8:	9800      	ldr	r0, [sp, #0]
 80037fa:	9e08      	ldr	r6, [sp, #32]
 80037fc:	3243      	adds	r2, #67	; 0x43
 80037fe:	47b0      	blx	r6
 8003800:	1c43      	adds	r3, r0, #1
 8003802:	d025      	beq.n	8003850 <_printf_common+0xa8>
 8003804:	2306      	movs	r3, #6
 8003806:	6820      	ldr	r0, [r4, #0]
 8003808:	682a      	ldr	r2, [r5, #0]
 800380a:	68e1      	ldr	r1, [r4, #12]
 800380c:	2500      	movs	r5, #0
 800380e:	4003      	ands	r3, r0
 8003810:	2b04      	cmp	r3, #4
 8003812:	d103      	bne.n	800381c <_printf_common+0x74>
 8003814:	1a8d      	subs	r5, r1, r2
 8003816:	43eb      	mvns	r3, r5
 8003818:	17db      	asrs	r3, r3, #31
 800381a:	401d      	ands	r5, r3
 800381c:	68a3      	ldr	r3, [r4, #8]
 800381e:	6922      	ldr	r2, [r4, #16]
 8003820:	4293      	cmp	r3, r2
 8003822:	dd01      	ble.n	8003828 <_printf_common+0x80>
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	18ed      	adds	r5, r5, r3
 8003828:	2700      	movs	r7, #0
 800382a:	42bd      	cmp	r5, r7
 800382c:	d120      	bne.n	8003870 <_printf_common+0xc8>
 800382e:	2000      	movs	r0, #0
 8003830:	e010      	b.n	8003854 <_printf_common+0xac>
 8003832:	3701      	adds	r7, #1
 8003834:	68e3      	ldr	r3, [r4, #12]
 8003836:	682a      	ldr	r2, [r5, #0]
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	42bb      	cmp	r3, r7
 800383c:	ddd2      	ble.n	80037e4 <_printf_common+0x3c>
 800383e:	0022      	movs	r2, r4
 8003840:	2301      	movs	r3, #1
 8003842:	9901      	ldr	r1, [sp, #4]
 8003844:	9800      	ldr	r0, [sp, #0]
 8003846:	9e08      	ldr	r6, [sp, #32]
 8003848:	3219      	adds	r2, #25
 800384a:	47b0      	blx	r6
 800384c:	1c43      	adds	r3, r0, #1
 800384e:	d1f0      	bne.n	8003832 <_printf_common+0x8a>
 8003850:	2001      	movs	r0, #1
 8003852:	4240      	negs	r0, r0
 8003854:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003856:	2030      	movs	r0, #48	; 0x30
 8003858:	18e1      	adds	r1, r4, r3
 800385a:	3143      	adds	r1, #67	; 0x43
 800385c:	7008      	strb	r0, [r1, #0]
 800385e:	0021      	movs	r1, r4
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	3145      	adds	r1, #69	; 0x45
 8003864:	7809      	ldrb	r1, [r1, #0]
 8003866:	18a2      	adds	r2, r4, r2
 8003868:	3243      	adds	r2, #67	; 0x43
 800386a:	3302      	adds	r3, #2
 800386c:	7011      	strb	r1, [r2, #0]
 800386e:	e7c1      	b.n	80037f4 <_printf_common+0x4c>
 8003870:	0022      	movs	r2, r4
 8003872:	2301      	movs	r3, #1
 8003874:	9901      	ldr	r1, [sp, #4]
 8003876:	9800      	ldr	r0, [sp, #0]
 8003878:	9e08      	ldr	r6, [sp, #32]
 800387a:	321a      	adds	r2, #26
 800387c:	47b0      	blx	r6
 800387e:	1c43      	adds	r3, r0, #1
 8003880:	d0e6      	beq.n	8003850 <_printf_common+0xa8>
 8003882:	3701      	adds	r7, #1
 8003884:	e7d1      	b.n	800382a <_printf_common+0x82>
	...

08003888 <_printf_i>:
 8003888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388a:	b08b      	sub	sp, #44	; 0x2c
 800388c:	9206      	str	r2, [sp, #24]
 800388e:	000a      	movs	r2, r1
 8003890:	3243      	adds	r2, #67	; 0x43
 8003892:	9307      	str	r3, [sp, #28]
 8003894:	9005      	str	r0, [sp, #20]
 8003896:	9204      	str	r2, [sp, #16]
 8003898:	7e0a      	ldrb	r2, [r1, #24]
 800389a:	000c      	movs	r4, r1
 800389c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800389e:	2a78      	cmp	r2, #120	; 0x78
 80038a0:	d807      	bhi.n	80038b2 <_printf_i+0x2a>
 80038a2:	2a62      	cmp	r2, #98	; 0x62
 80038a4:	d809      	bhi.n	80038ba <_printf_i+0x32>
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	d100      	bne.n	80038ac <_printf_i+0x24>
 80038aa:	e0c1      	b.n	8003a30 <_printf_i+0x1a8>
 80038ac:	2a58      	cmp	r2, #88	; 0x58
 80038ae:	d100      	bne.n	80038b2 <_printf_i+0x2a>
 80038b0:	e08c      	b.n	80039cc <_printf_i+0x144>
 80038b2:	0026      	movs	r6, r4
 80038b4:	3642      	adds	r6, #66	; 0x42
 80038b6:	7032      	strb	r2, [r6, #0]
 80038b8:	e022      	b.n	8003900 <_printf_i+0x78>
 80038ba:	0010      	movs	r0, r2
 80038bc:	3863      	subs	r0, #99	; 0x63
 80038be:	2815      	cmp	r0, #21
 80038c0:	d8f7      	bhi.n	80038b2 <_printf_i+0x2a>
 80038c2:	f7fc fc33 	bl	800012c <__gnu_thumb1_case_shi>
 80038c6:	0016      	.short	0x0016
 80038c8:	fff6001f 	.word	0xfff6001f
 80038cc:	fff6fff6 	.word	0xfff6fff6
 80038d0:	001ffff6 	.word	0x001ffff6
 80038d4:	fff6fff6 	.word	0xfff6fff6
 80038d8:	fff6fff6 	.word	0xfff6fff6
 80038dc:	003600a8 	.word	0x003600a8
 80038e0:	fff6009a 	.word	0xfff6009a
 80038e4:	00b9fff6 	.word	0x00b9fff6
 80038e8:	0036fff6 	.word	0x0036fff6
 80038ec:	fff6fff6 	.word	0xfff6fff6
 80038f0:	009e      	.short	0x009e
 80038f2:	0026      	movs	r6, r4
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	3642      	adds	r6, #66	; 0x42
 80038f8:	1d11      	adds	r1, r2, #4
 80038fa:	6019      	str	r1, [r3, #0]
 80038fc:	6813      	ldr	r3, [r2, #0]
 80038fe:	7033      	strb	r3, [r6, #0]
 8003900:	2301      	movs	r3, #1
 8003902:	e0a7      	b.n	8003a54 <_printf_i+0x1cc>
 8003904:	6808      	ldr	r0, [r1, #0]
 8003906:	6819      	ldr	r1, [r3, #0]
 8003908:	1d0a      	adds	r2, r1, #4
 800390a:	0605      	lsls	r5, r0, #24
 800390c:	d50b      	bpl.n	8003926 <_printf_i+0x9e>
 800390e:	680d      	ldr	r5, [r1, #0]
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	2d00      	cmp	r5, #0
 8003914:	da03      	bge.n	800391e <_printf_i+0x96>
 8003916:	232d      	movs	r3, #45	; 0x2d
 8003918:	9a04      	ldr	r2, [sp, #16]
 800391a:	426d      	negs	r5, r5
 800391c:	7013      	strb	r3, [r2, #0]
 800391e:	4b61      	ldr	r3, [pc, #388]	; (8003aa4 <_printf_i+0x21c>)
 8003920:	270a      	movs	r7, #10
 8003922:	9303      	str	r3, [sp, #12]
 8003924:	e01b      	b.n	800395e <_printf_i+0xd6>
 8003926:	680d      	ldr	r5, [r1, #0]
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	0641      	lsls	r1, r0, #25
 800392c:	d5f1      	bpl.n	8003912 <_printf_i+0x8a>
 800392e:	b22d      	sxth	r5, r5
 8003930:	e7ef      	b.n	8003912 <_printf_i+0x8a>
 8003932:	680d      	ldr	r5, [r1, #0]
 8003934:	6819      	ldr	r1, [r3, #0]
 8003936:	1d08      	adds	r0, r1, #4
 8003938:	6018      	str	r0, [r3, #0]
 800393a:	062e      	lsls	r6, r5, #24
 800393c:	d501      	bpl.n	8003942 <_printf_i+0xba>
 800393e:	680d      	ldr	r5, [r1, #0]
 8003940:	e003      	b.n	800394a <_printf_i+0xc2>
 8003942:	066d      	lsls	r5, r5, #25
 8003944:	d5fb      	bpl.n	800393e <_printf_i+0xb6>
 8003946:	680d      	ldr	r5, [r1, #0]
 8003948:	b2ad      	uxth	r5, r5
 800394a:	4b56      	ldr	r3, [pc, #344]	; (8003aa4 <_printf_i+0x21c>)
 800394c:	2708      	movs	r7, #8
 800394e:	9303      	str	r3, [sp, #12]
 8003950:	2a6f      	cmp	r2, #111	; 0x6f
 8003952:	d000      	beq.n	8003956 <_printf_i+0xce>
 8003954:	3702      	adds	r7, #2
 8003956:	0023      	movs	r3, r4
 8003958:	2200      	movs	r2, #0
 800395a:	3343      	adds	r3, #67	; 0x43
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	6863      	ldr	r3, [r4, #4]
 8003960:	60a3      	str	r3, [r4, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	db03      	blt.n	800396e <_printf_i+0xe6>
 8003966:	2204      	movs	r2, #4
 8003968:	6821      	ldr	r1, [r4, #0]
 800396a:	4391      	bics	r1, r2
 800396c:	6021      	str	r1, [r4, #0]
 800396e:	2d00      	cmp	r5, #0
 8003970:	d102      	bne.n	8003978 <_printf_i+0xf0>
 8003972:	9e04      	ldr	r6, [sp, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00c      	beq.n	8003992 <_printf_i+0x10a>
 8003978:	9e04      	ldr	r6, [sp, #16]
 800397a:	0028      	movs	r0, r5
 800397c:	0039      	movs	r1, r7
 800397e:	f7fc fc65 	bl	800024c <__aeabi_uidivmod>
 8003982:	9b03      	ldr	r3, [sp, #12]
 8003984:	3e01      	subs	r6, #1
 8003986:	5c5b      	ldrb	r3, [r3, r1]
 8003988:	7033      	strb	r3, [r6, #0]
 800398a:	002b      	movs	r3, r5
 800398c:	0005      	movs	r5, r0
 800398e:	429f      	cmp	r7, r3
 8003990:	d9f3      	bls.n	800397a <_printf_i+0xf2>
 8003992:	2f08      	cmp	r7, #8
 8003994:	d109      	bne.n	80039aa <_printf_i+0x122>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	07db      	lsls	r3, r3, #31
 800399a:	d506      	bpl.n	80039aa <_printf_i+0x122>
 800399c:	6863      	ldr	r3, [r4, #4]
 800399e:	6922      	ldr	r2, [r4, #16]
 80039a0:	4293      	cmp	r3, r2
 80039a2:	dc02      	bgt.n	80039aa <_printf_i+0x122>
 80039a4:	2330      	movs	r3, #48	; 0x30
 80039a6:	3e01      	subs	r6, #1
 80039a8:	7033      	strb	r3, [r6, #0]
 80039aa:	9b04      	ldr	r3, [sp, #16]
 80039ac:	1b9b      	subs	r3, r3, r6
 80039ae:	6123      	str	r3, [r4, #16]
 80039b0:	9b07      	ldr	r3, [sp, #28]
 80039b2:	0021      	movs	r1, r4
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	9805      	ldr	r0, [sp, #20]
 80039b8:	9b06      	ldr	r3, [sp, #24]
 80039ba:	aa09      	add	r2, sp, #36	; 0x24
 80039bc:	f7ff fef4 	bl	80037a8 <_printf_common>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d14c      	bne.n	8003a5e <_printf_i+0x1d6>
 80039c4:	2001      	movs	r0, #1
 80039c6:	4240      	negs	r0, r0
 80039c8:	b00b      	add	sp, #44	; 0x2c
 80039ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039cc:	3145      	adds	r1, #69	; 0x45
 80039ce:	700a      	strb	r2, [r1, #0]
 80039d0:	4a34      	ldr	r2, [pc, #208]	; (8003aa4 <_printf_i+0x21c>)
 80039d2:	9203      	str	r2, [sp, #12]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	6821      	ldr	r1, [r4, #0]
 80039d8:	ca20      	ldmia	r2!, {r5}
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	0608      	lsls	r0, r1, #24
 80039de:	d516      	bpl.n	8003a0e <_printf_i+0x186>
 80039e0:	07cb      	lsls	r3, r1, #31
 80039e2:	d502      	bpl.n	80039ea <_printf_i+0x162>
 80039e4:	2320      	movs	r3, #32
 80039e6:	4319      	orrs	r1, r3
 80039e8:	6021      	str	r1, [r4, #0]
 80039ea:	2710      	movs	r7, #16
 80039ec:	2d00      	cmp	r5, #0
 80039ee:	d1b2      	bne.n	8003956 <_printf_i+0xce>
 80039f0:	2320      	movs	r3, #32
 80039f2:	6822      	ldr	r2, [r4, #0]
 80039f4:	439a      	bics	r2, r3
 80039f6:	6022      	str	r2, [r4, #0]
 80039f8:	e7ad      	b.n	8003956 <_printf_i+0xce>
 80039fa:	2220      	movs	r2, #32
 80039fc:	6809      	ldr	r1, [r1, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	6022      	str	r2, [r4, #0]
 8003a02:	0022      	movs	r2, r4
 8003a04:	2178      	movs	r1, #120	; 0x78
 8003a06:	3245      	adds	r2, #69	; 0x45
 8003a08:	7011      	strb	r1, [r2, #0]
 8003a0a:	4a27      	ldr	r2, [pc, #156]	; (8003aa8 <_printf_i+0x220>)
 8003a0c:	e7e1      	b.n	80039d2 <_printf_i+0x14a>
 8003a0e:	0648      	lsls	r0, r1, #25
 8003a10:	d5e6      	bpl.n	80039e0 <_printf_i+0x158>
 8003a12:	b2ad      	uxth	r5, r5
 8003a14:	e7e4      	b.n	80039e0 <_printf_i+0x158>
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	680d      	ldr	r5, [r1, #0]
 8003a1a:	1d10      	adds	r0, r2, #4
 8003a1c:	6949      	ldr	r1, [r1, #20]
 8003a1e:	6018      	str	r0, [r3, #0]
 8003a20:	6813      	ldr	r3, [r2, #0]
 8003a22:	062e      	lsls	r6, r5, #24
 8003a24:	d501      	bpl.n	8003a2a <_printf_i+0x1a2>
 8003a26:	6019      	str	r1, [r3, #0]
 8003a28:	e002      	b.n	8003a30 <_printf_i+0x1a8>
 8003a2a:	066d      	lsls	r5, r5, #25
 8003a2c:	d5fb      	bpl.n	8003a26 <_printf_i+0x19e>
 8003a2e:	8019      	strh	r1, [r3, #0]
 8003a30:	2300      	movs	r3, #0
 8003a32:	9e04      	ldr	r6, [sp, #16]
 8003a34:	6123      	str	r3, [r4, #16]
 8003a36:	e7bb      	b.n	80039b0 <_printf_i+0x128>
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	1d11      	adds	r1, r2, #4
 8003a3c:	6019      	str	r1, [r3, #0]
 8003a3e:	6816      	ldr	r6, [r2, #0]
 8003a40:	2100      	movs	r1, #0
 8003a42:	0030      	movs	r0, r6
 8003a44:	6862      	ldr	r2, [r4, #4]
 8003a46:	f000 f831 	bl	8003aac <memchr>
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	d001      	beq.n	8003a52 <_printf_i+0x1ca>
 8003a4e:	1b80      	subs	r0, r0, r6
 8003a50:	6060      	str	r0, [r4, #4]
 8003a52:	6863      	ldr	r3, [r4, #4]
 8003a54:	6123      	str	r3, [r4, #16]
 8003a56:	2300      	movs	r3, #0
 8003a58:	9a04      	ldr	r2, [sp, #16]
 8003a5a:	7013      	strb	r3, [r2, #0]
 8003a5c:	e7a8      	b.n	80039b0 <_printf_i+0x128>
 8003a5e:	6923      	ldr	r3, [r4, #16]
 8003a60:	0032      	movs	r2, r6
 8003a62:	9906      	ldr	r1, [sp, #24]
 8003a64:	9805      	ldr	r0, [sp, #20]
 8003a66:	9d07      	ldr	r5, [sp, #28]
 8003a68:	47a8      	blx	r5
 8003a6a:	1c43      	adds	r3, r0, #1
 8003a6c:	d0aa      	beq.n	80039c4 <_printf_i+0x13c>
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	079b      	lsls	r3, r3, #30
 8003a72:	d415      	bmi.n	8003aa0 <_printf_i+0x218>
 8003a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a76:	68e0      	ldr	r0, [r4, #12]
 8003a78:	4298      	cmp	r0, r3
 8003a7a:	daa5      	bge.n	80039c8 <_printf_i+0x140>
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	e7a3      	b.n	80039c8 <_printf_i+0x140>
 8003a80:	0022      	movs	r2, r4
 8003a82:	2301      	movs	r3, #1
 8003a84:	9906      	ldr	r1, [sp, #24]
 8003a86:	9805      	ldr	r0, [sp, #20]
 8003a88:	9e07      	ldr	r6, [sp, #28]
 8003a8a:	3219      	adds	r2, #25
 8003a8c:	47b0      	blx	r6
 8003a8e:	1c43      	adds	r3, r0, #1
 8003a90:	d098      	beq.n	80039c4 <_printf_i+0x13c>
 8003a92:	3501      	adds	r5, #1
 8003a94:	68e3      	ldr	r3, [r4, #12]
 8003a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	42ab      	cmp	r3, r5
 8003a9c:	dcf0      	bgt.n	8003a80 <_printf_i+0x1f8>
 8003a9e:	e7e9      	b.n	8003a74 <_printf_i+0x1ec>
 8003aa0:	2500      	movs	r5, #0
 8003aa2:	e7f7      	b.n	8003a94 <_printf_i+0x20c>
 8003aa4:	080040d4 	.word	0x080040d4
 8003aa8:	080040e5 	.word	0x080040e5

08003aac <memchr>:
 8003aac:	b2c9      	uxtb	r1, r1
 8003aae:	1882      	adds	r2, r0, r2
 8003ab0:	4290      	cmp	r0, r2
 8003ab2:	d101      	bne.n	8003ab8 <memchr+0xc>
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	4770      	bx	lr
 8003ab8:	7803      	ldrb	r3, [r0, #0]
 8003aba:	428b      	cmp	r3, r1
 8003abc:	d0fb      	beq.n	8003ab6 <memchr+0xa>
 8003abe:	3001      	adds	r0, #1
 8003ac0:	e7f6      	b.n	8003ab0 <memchr+0x4>

08003ac2 <memmove>:
 8003ac2:	b510      	push	{r4, lr}
 8003ac4:	4288      	cmp	r0, r1
 8003ac6:	d902      	bls.n	8003ace <memmove+0xc>
 8003ac8:	188b      	adds	r3, r1, r2
 8003aca:	4298      	cmp	r0, r3
 8003acc:	d303      	bcc.n	8003ad6 <memmove+0x14>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e007      	b.n	8003ae2 <memmove+0x20>
 8003ad2:	5c8b      	ldrb	r3, [r1, r2]
 8003ad4:	5483      	strb	r3, [r0, r2]
 8003ad6:	3a01      	subs	r2, #1
 8003ad8:	d2fb      	bcs.n	8003ad2 <memmove+0x10>
 8003ada:	bd10      	pop	{r4, pc}
 8003adc:	5ccc      	ldrb	r4, [r1, r3]
 8003ade:	54c4      	strb	r4, [r0, r3]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d1fa      	bne.n	8003adc <memmove+0x1a>
 8003ae6:	e7f8      	b.n	8003ada <memmove+0x18>

08003ae8 <_free_r>:
 8003ae8:	b570      	push	{r4, r5, r6, lr}
 8003aea:	0005      	movs	r5, r0
 8003aec:	2900      	cmp	r1, #0
 8003aee:	d010      	beq.n	8003b12 <_free_r+0x2a>
 8003af0:	1f0c      	subs	r4, r1, #4
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	da00      	bge.n	8003afa <_free_r+0x12>
 8003af8:	18e4      	adds	r4, r4, r3
 8003afa:	0028      	movs	r0, r5
 8003afc:	f000 f918 	bl	8003d30 <__malloc_lock>
 8003b00:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <_free_r+0x90>)
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <_free_r+0x2c>
 8003b08:	6063      	str	r3, [r4, #4]
 8003b0a:	6014      	str	r4, [r2, #0]
 8003b0c:	0028      	movs	r0, r5
 8003b0e:	f000 f917 	bl	8003d40 <__malloc_unlock>
 8003b12:	bd70      	pop	{r4, r5, r6, pc}
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	d908      	bls.n	8003b2a <_free_r+0x42>
 8003b18:	6821      	ldr	r1, [r4, #0]
 8003b1a:	1860      	adds	r0, r4, r1
 8003b1c:	4283      	cmp	r3, r0
 8003b1e:	d1f3      	bne.n	8003b08 <_free_r+0x20>
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	1841      	adds	r1, r0, r1
 8003b26:	6021      	str	r1, [r4, #0]
 8003b28:	e7ee      	b.n	8003b08 <_free_r+0x20>
 8003b2a:	001a      	movs	r2, r3
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <_free_r+0x4e>
 8003b32:	42a3      	cmp	r3, r4
 8003b34:	d9f9      	bls.n	8003b2a <_free_r+0x42>
 8003b36:	6811      	ldr	r1, [r2, #0]
 8003b38:	1850      	adds	r0, r2, r1
 8003b3a:	42a0      	cmp	r0, r4
 8003b3c:	d10b      	bne.n	8003b56 <_free_r+0x6e>
 8003b3e:	6820      	ldr	r0, [r4, #0]
 8003b40:	1809      	adds	r1, r1, r0
 8003b42:	1850      	adds	r0, r2, r1
 8003b44:	6011      	str	r1, [r2, #0]
 8003b46:	4283      	cmp	r3, r0
 8003b48:	d1e0      	bne.n	8003b0c <_free_r+0x24>
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	1841      	adds	r1, r0, r1
 8003b50:	6011      	str	r1, [r2, #0]
 8003b52:	6053      	str	r3, [r2, #4]
 8003b54:	e7da      	b.n	8003b0c <_free_r+0x24>
 8003b56:	42a0      	cmp	r0, r4
 8003b58:	d902      	bls.n	8003b60 <_free_r+0x78>
 8003b5a:	230c      	movs	r3, #12
 8003b5c:	602b      	str	r3, [r5, #0]
 8003b5e:	e7d5      	b.n	8003b0c <_free_r+0x24>
 8003b60:	6821      	ldr	r1, [r4, #0]
 8003b62:	1860      	adds	r0, r4, r1
 8003b64:	4283      	cmp	r3, r0
 8003b66:	d103      	bne.n	8003b70 <_free_r+0x88>
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	1841      	adds	r1, r0, r1
 8003b6e:	6021      	str	r1, [r4, #0]
 8003b70:	6063      	str	r3, [r4, #4]
 8003b72:	6054      	str	r4, [r2, #4]
 8003b74:	e7ca      	b.n	8003b0c <_free_r+0x24>
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	20000350 	.word	0x20000350

08003b7c <sbrk_aligned>:
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	4e0f      	ldr	r6, [pc, #60]	; (8003bbc <sbrk_aligned+0x40>)
 8003b80:	000d      	movs	r5, r1
 8003b82:	6831      	ldr	r1, [r6, #0]
 8003b84:	0004      	movs	r4, r0
 8003b86:	2900      	cmp	r1, #0
 8003b88:	d102      	bne.n	8003b90 <sbrk_aligned+0x14>
 8003b8a:	f000 f8bf 	bl	8003d0c <_sbrk_r>
 8003b8e:	6030      	str	r0, [r6, #0]
 8003b90:	0029      	movs	r1, r5
 8003b92:	0020      	movs	r0, r4
 8003b94:	f000 f8ba 	bl	8003d0c <_sbrk_r>
 8003b98:	1c43      	adds	r3, r0, #1
 8003b9a:	d00a      	beq.n	8003bb2 <sbrk_aligned+0x36>
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	1cc5      	adds	r5, r0, #3
 8003ba0:	439d      	bics	r5, r3
 8003ba2:	42a8      	cmp	r0, r5
 8003ba4:	d007      	beq.n	8003bb6 <sbrk_aligned+0x3a>
 8003ba6:	1a29      	subs	r1, r5, r0
 8003ba8:	0020      	movs	r0, r4
 8003baa:	f000 f8af 	bl	8003d0c <_sbrk_r>
 8003bae:	1c43      	adds	r3, r0, #1
 8003bb0:	d101      	bne.n	8003bb6 <sbrk_aligned+0x3a>
 8003bb2:	2501      	movs	r5, #1
 8003bb4:	426d      	negs	r5, r5
 8003bb6:	0028      	movs	r0, r5
 8003bb8:	bd70      	pop	{r4, r5, r6, pc}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	20000354 	.word	0x20000354

08003bc0 <_malloc_r>:
 8003bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	1ccb      	adds	r3, r1, #3
 8003bc6:	4393      	bics	r3, r2
 8003bc8:	3308      	adds	r3, #8
 8003bca:	0006      	movs	r6, r0
 8003bcc:	001f      	movs	r7, r3
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	d232      	bcs.n	8003c38 <_malloc_r+0x78>
 8003bd2:	270c      	movs	r7, #12
 8003bd4:	42b9      	cmp	r1, r7
 8003bd6:	d831      	bhi.n	8003c3c <_malloc_r+0x7c>
 8003bd8:	0030      	movs	r0, r6
 8003bda:	f000 f8a9 	bl	8003d30 <__malloc_lock>
 8003bde:	4d32      	ldr	r5, [pc, #200]	; (8003ca8 <_malloc_r+0xe8>)
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	001c      	movs	r4, r3
 8003be4:	2c00      	cmp	r4, #0
 8003be6:	d12e      	bne.n	8003c46 <_malloc_r+0x86>
 8003be8:	0039      	movs	r1, r7
 8003bea:	0030      	movs	r0, r6
 8003bec:	f7ff ffc6 	bl	8003b7c <sbrk_aligned>
 8003bf0:	0004      	movs	r4, r0
 8003bf2:	1c43      	adds	r3, r0, #1
 8003bf4:	d11e      	bne.n	8003c34 <_malloc_r+0x74>
 8003bf6:	682c      	ldr	r4, [r5, #0]
 8003bf8:	0025      	movs	r5, r4
 8003bfa:	2d00      	cmp	r5, #0
 8003bfc:	d14a      	bne.n	8003c94 <_malloc_r+0xd4>
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	0029      	movs	r1, r5
 8003c02:	18e3      	adds	r3, r4, r3
 8003c04:	0030      	movs	r0, r6
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	f000 f880 	bl	8003d0c <_sbrk_r>
 8003c0c:	9b01      	ldr	r3, [sp, #4]
 8003c0e:	4283      	cmp	r3, r0
 8003c10:	d143      	bne.n	8003c9a <_malloc_r+0xda>
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	3703      	adds	r7, #3
 8003c16:	1aff      	subs	r7, r7, r3
 8003c18:	2303      	movs	r3, #3
 8003c1a:	439f      	bics	r7, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	2f0c      	cmp	r7, #12
 8003c20:	d200      	bcs.n	8003c24 <_malloc_r+0x64>
 8003c22:	270c      	movs	r7, #12
 8003c24:	0039      	movs	r1, r7
 8003c26:	0030      	movs	r0, r6
 8003c28:	f7ff ffa8 	bl	8003b7c <sbrk_aligned>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d034      	beq.n	8003c9a <_malloc_r+0xda>
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	19df      	adds	r7, r3, r7
 8003c34:	6027      	str	r7, [r4, #0]
 8003c36:	e013      	b.n	8003c60 <_malloc_r+0xa0>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	dacb      	bge.n	8003bd4 <_malloc_r+0x14>
 8003c3c:	230c      	movs	r3, #12
 8003c3e:	2500      	movs	r5, #0
 8003c40:	6033      	str	r3, [r6, #0]
 8003c42:	0028      	movs	r0, r5
 8003c44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c46:	6822      	ldr	r2, [r4, #0]
 8003c48:	1bd1      	subs	r1, r2, r7
 8003c4a:	d420      	bmi.n	8003c8e <_malloc_r+0xce>
 8003c4c:	290b      	cmp	r1, #11
 8003c4e:	d917      	bls.n	8003c80 <_malloc_r+0xc0>
 8003c50:	19e2      	adds	r2, r4, r7
 8003c52:	6027      	str	r7, [r4, #0]
 8003c54:	42a3      	cmp	r3, r4
 8003c56:	d111      	bne.n	8003c7c <_malloc_r+0xbc>
 8003c58:	602a      	str	r2, [r5, #0]
 8003c5a:	6863      	ldr	r3, [r4, #4]
 8003c5c:	6011      	str	r1, [r2, #0]
 8003c5e:	6053      	str	r3, [r2, #4]
 8003c60:	0030      	movs	r0, r6
 8003c62:	0025      	movs	r5, r4
 8003c64:	f000 f86c 	bl	8003d40 <__malloc_unlock>
 8003c68:	2207      	movs	r2, #7
 8003c6a:	350b      	adds	r5, #11
 8003c6c:	1d23      	adds	r3, r4, #4
 8003c6e:	4395      	bics	r5, r2
 8003c70:	1aea      	subs	r2, r5, r3
 8003c72:	429d      	cmp	r5, r3
 8003c74:	d0e5      	beq.n	8003c42 <_malloc_r+0x82>
 8003c76:	1b5b      	subs	r3, r3, r5
 8003c78:	50a3      	str	r3, [r4, r2]
 8003c7a:	e7e2      	b.n	8003c42 <_malloc_r+0x82>
 8003c7c:	605a      	str	r2, [r3, #4]
 8003c7e:	e7ec      	b.n	8003c5a <_malloc_r+0x9a>
 8003c80:	6862      	ldr	r2, [r4, #4]
 8003c82:	42a3      	cmp	r3, r4
 8003c84:	d101      	bne.n	8003c8a <_malloc_r+0xca>
 8003c86:	602a      	str	r2, [r5, #0]
 8003c88:	e7ea      	b.n	8003c60 <_malloc_r+0xa0>
 8003c8a:	605a      	str	r2, [r3, #4]
 8003c8c:	e7e8      	b.n	8003c60 <_malloc_r+0xa0>
 8003c8e:	0023      	movs	r3, r4
 8003c90:	6864      	ldr	r4, [r4, #4]
 8003c92:	e7a7      	b.n	8003be4 <_malloc_r+0x24>
 8003c94:	002c      	movs	r4, r5
 8003c96:	686d      	ldr	r5, [r5, #4]
 8003c98:	e7af      	b.n	8003bfa <_malloc_r+0x3a>
 8003c9a:	230c      	movs	r3, #12
 8003c9c:	0030      	movs	r0, r6
 8003c9e:	6033      	str	r3, [r6, #0]
 8003ca0:	f000 f84e 	bl	8003d40 <__malloc_unlock>
 8003ca4:	e7cd      	b.n	8003c42 <_malloc_r+0x82>
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	20000350 	.word	0x20000350

08003cac <_realloc_r>:
 8003cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cae:	0007      	movs	r7, r0
 8003cb0:	000e      	movs	r6, r1
 8003cb2:	0014      	movs	r4, r2
 8003cb4:	2900      	cmp	r1, #0
 8003cb6:	d105      	bne.n	8003cc4 <_realloc_r+0x18>
 8003cb8:	0011      	movs	r1, r2
 8003cba:	f7ff ff81 	bl	8003bc0 <_malloc_r>
 8003cbe:	0005      	movs	r5, r0
 8003cc0:	0028      	movs	r0, r5
 8003cc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cc4:	2a00      	cmp	r2, #0
 8003cc6:	d103      	bne.n	8003cd0 <_realloc_r+0x24>
 8003cc8:	f7ff ff0e 	bl	8003ae8 <_free_r>
 8003ccc:	0025      	movs	r5, r4
 8003cce:	e7f7      	b.n	8003cc0 <_realloc_r+0x14>
 8003cd0:	f000 f83e 	bl	8003d50 <_malloc_usable_size_r>
 8003cd4:	9001      	str	r0, [sp, #4]
 8003cd6:	4284      	cmp	r4, r0
 8003cd8:	d803      	bhi.n	8003ce2 <_realloc_r+0x36>
 8003cda:	0035      	movs	r5, r6
 8003cdc:	0843      	lsrs	r3, r0, #1
 8003cde:	42a3      	cmp	r3, r4
 8003ce0:	d3ee      	bcc.n	8003cc0 <_realloc_r+0x14>
 8003ce2:	0021      	movs	r1, r4
 8003ce4:	0038      	movs	r0, r7
 8003ce6:	f7ff ff6b 	bl	8003bc0 <_malloc_r>
 8003cea:	1e05      	subs	r5, r0, #0
 8003cec:	d0e8      	beq.n	8003cc0 <_realloc_r+0x14>
 8003cee:	9b01      	ldr	r3, [sp, #4]
 8003cf0:	0022      	movs	r2, r4
 8003cf2:	429c      	cmp	r4, r3
 8003cf4:	d900      	bls.n	8003cf8 <_realloc_r+0x4c>
 8003cf6:	001a      	movs	r2, r3
 8003cf8:	0031      	movs	r1, r6
 8003cfa:	0028      	movs	r0, r5
 8003cfc:	f7ff fbb8 	bl	8003470 <memcpy>
 8003d00:	0031      	movs	r1, r6
 8003d02:	0038      	movs	r0, r7
 8003d04:	f7ff fef0 	bl	8003ae8 <_free_r>
 8003d08:	e7da      	b.n	8003cc0 <_realloc_r+0x14>
	...

08003d0c <_sbrk_r>:
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	b570      	push	{r4, r5, r6, lr}
 8003d10:	4d06      	ldr	r5, [pc, #24]	; (8003d2c <_sbrk_r+0x20>)
 8003d12:	0004      	movs	r4, r0
 8003d14:	0008      	movs	r0, r1
 8003d16:	602b      	str	r3, [r5, #0]
 8003d18:	f7fd fc98 	bl	800164c <_sbrk>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d103      	bne.n	8003d28 <_sbrk_r+0x1c>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d000      	beq.n	8003d28 <_sbrk_r+0x1c>
 8003d26:	6023      	str	r3, [r4, #0]
 8003d28:	bd70      	pop	{r4, r5, r6, pc}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	20000358 	.word	0x20000358

08003d30 <__malloc_lock>:
 8003d30:	b510      	push	{r4, lr}
 8003d32:	4802      	ldr	r0, [pc, #8]	; (8003d3c <__malloc_lock+0xc>)
 8003d34:	f000 f814 	bl	8003d60 <__retarget_lock_acquire_recursive>
 8003d38:	bd10      	pop	{r4, pc}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	2000035c 	.word	0x2000035c

08003d40 <__malloc_unlock>:
 8003d40:	b510      	push	{r4, lr}
 8003d42:	4802      	ldr	r0, [pc, #8]	; (8003d4c <__malloc_unlock+0xc>)
 8003d44:	f000 f80d 	bl	8003d62 <__retarget_lock_release_recursive>
 8003d48:	bd10      	pop	{r4, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	2000035c 	.word	0x2000035c

08003d50 <_malloc_usable_size_r>:
 8003d50:	1f0b      	subs	r3, r1, #4
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	1f18      	subs	r0, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	da01      	bge.n	8003d5e <_malloc_usable_size_r+0xe>
 8003d5a:	580b      	ldr	r3, [r1, r0]
 8003d5c:	18c0      	adds	r0, r0, r3
 8003d5e:	4770      	bx	lr

08003d60 <__retarget_lock_acquire_recursive>:
 8003d60:	4770      	bx	lr

08003d62 <__retarget_lock_release_recursive>:
 8003d62:	4770      	bx	lr

08003d64 <_init>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr

08003d70 <_fini>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr
