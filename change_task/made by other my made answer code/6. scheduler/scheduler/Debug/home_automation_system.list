
home_automation_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  08003f64  08003f64  00013f64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d8  080042d8  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042e0  080042e0  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080042e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000010c  080043f4  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  080043f4  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f1a  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292d  00000000  00000000  0003704e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000f5e6  00000000  00000000  0003997b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  00048f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001598  00000000  00000000  00049b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000302c  00000000  00000000  0004b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018462  00000000  00000000  0004e11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f57e  00000000  00000000  0006657e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e5afc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a10  00000000  00000000  000e5b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000010c 	.word	0x2000010c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f4c 	.word	0x08003f4c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000110 	.word	0x20000110
 8000104:	08003f4c 	.word	0x08003f4c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_uldivmod>:
 800042c:	2b00      	cmp	r3, #0
 800042e:	d111      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000430:	2a00      	cmp	r2, #0
 8000432:	d10f      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000434:	2900      	cmp	r1, #0
 8000436:	d100      	bne.n	800043a <__aeabi_uldivmod+0xe>
 8000438:	2800      	cmp	r0, #0
 800043a:	d002      	beq.n	8000442 <__aeabi_uldivmod+0x16>
 800043c:	2100      	movs	r1, #0
 800043e:	43c9      	mvns	r1, r1
 8000440:	0008      	movs	r0, r1
 8000442:	b407      	push	{r0, r1, r2}
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <__aeabi_uldivmod+0x24>)
 8000446:	a102      	add	r1, pc, #8	; (adr r1, 8000450 <__aeabi_uldivmod+0x24>)
 8000448:	1840      	adds	r0, r0, r1
 800044a:	9002      	str	r0, [sp, #8]
 800044c:	bd03      	pop	{r0, r1, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	ffffffd9 	.word	0xffffffd9
 8000454:	b403      	push	{r0, r1}
 8000456:	4668      	mov	r0, sp
 8000458:	b501      	push	{r0, lr}
 800045a:	9802      	ldr	r0, [sp, #8]
 800045c:	f000 f834 	bl	80004c8 <__udivmoddi4>
 8000460:	9b01      	ldr	r3, [sp, #4]
 8000462:	469e      	mov	lr, r3
 8000464:	b002      	add	sp, #8
 8000466:	bc0c      	pop	{r2, r3}
 8000468:	4770      	bx	lr
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_lmul>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	46ce      	mov	lr, r9
 8000470:	4647      	mov	r7, r8
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	4699      	mov	r9, r3
 8000478:	0c3b      	lsrs	r3, r7, #16
 800047a:	469c      	mov	ip, r3
 800047c:	0413      	lsls	r3, r2, #16
 800047e:	0c1b      	lsrs	r3, r3, #16
 8000480:	001d      	movs	r5, r3
 8000482:	000e      	movs	r6, r1
 8000484:	4661      	mov	r1, ip
 8000486:	0400      	lsls	r0, r0, #16
 8000488:	0c14      	lsrs	r4, r2, #16
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	4345      	muls	r5, r0
 800048e:	434b      	muls	r3, r1
 8000490:	4360      	muls	r0, r4
 8000492:	4361      	muls	r1, r4
 8000494:	18c0      	adds	r0, r0, r3
 8000496:	0c2c      	lsrs	r4, r5, #16
 8000498:	1820      	adds	r0, r4, r0
 800049a:	468c      	mov	ip, r1
 800049c:	4283      	cmp	r3, r0
 800049e:	d903      	bls.n	80004a8 <__aeabi_lmul+0x3c>
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	025b      	lsls	r3, r3, #9
 80004a4:	4698      	mov	r8, r3
 80004a6:	44c4      	add	ip, r8
 80004a8:	4649      	mov	r1, r9
 80004aa:	4379      	muls	r1, r7
 80004ac:	4372      	muls	r2, r6
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	4463      	add	r3, ip
 80004b2:	042d      	lsls	r5, r5, #16
 80004b4:	0c2d      	lsrs	r5, r5, #16
 80004b6:	18c9      	adds	r1, r1, r3
 80004b8:	0400      	lsls	r0, r0, #16
 80004ba:	1940      	adds	r0, r0, r5
 80004bc:	1889      	adds	r1, r1, r2
 80004be:	bcc0      	pop	{r6, r7}
 80004c0:	46b9      	mov	r9, r7
 80004c2:	46b0      	mov	r8, r6
 80004c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__udivmoddi4>:
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	4657      	mov	r7, sl
 80004cc:	464e      	mov	r6, r9
 80004ce:	4645      	mov	r5, r8
 80004d0:	46de      	mov	lr, fp
 80004d2:	b5e0      	push	{r5, r6, r7, lr}
 80004d4:	0004      	movs	r4, r0
 80004d6:	000d      	movs	r5, r1
 80004d8:	4692      	mov	sl, r2
 80004da:	4699      	mov	r9, r3
 80004dc:	b083      	sub	sp, #12
 80004de:	428b      	cmp	r3, r1
 80004e0:	d830      	bhi.n	8000544 <__udivmoddi4+0x7c>
 80004e2:	d02d      	beq.n	8000540 <__udivmoddi4+0x78>
 80004e4:	4649      	mov	r1, r9
 80004e6:	4650      	mov	r0, sl
 80004e8:	f000 f8d8 	bl	800069c <__clzdi2>
 80004ec:	0029      	movs	r1, r5
 80004ee:	0006      	movs	r6, r0
 80004f0:	0020      	movs	r0, r4
 80004f2:	f000 f8d3 	bl	800069c <__clzdi2>
 80004f6:	1a33      	subs	r3, r6, r0
 80004f8:	4698      	mov	r8, r3
 80004fa:	3b20      	subs	r3, #32
 80004fc:	469b      	mov	fp, r3
 80004fe:	d433      	bmi.n	8000568 <__udivmoddi4+0xa0>
 8000500:	465a      	mov	r2, fp
 8000502:	4653      	mov	r3, sl
 8000504:	4093      	lsls	r3, r2
 8000506:	4642      	mov	r2, r8
 8000508:	001f      	movs	r7, r3
 800050a:	4653      	mov	r3, sl
 800050c:	4093      	lsls	r3, r2
 800050e:	001e      	movs	r6, r3
 8000510:	42af      	cmp	r7, r5
 8000512:	d83a      	bhi.n	800058a <__udivmoddi4+0xc2>
 8000514:	42af      	cmp	r7, r5
 8000516:	d100      	bne.n	800051a <__udivmoddi4+0x52>
 8000518:	e078      	b.n	800060c <__udivmoddi4+0x144>
 800051a:	465b      	mov	r3, fp
 800051c:	1ba4      	subs	r4, r4, r6
 800051e:	41bd      	sbcs	r5, r7
 8000520:	2b00      	cmp	r3, #0
 8000522:	da00      	bge.n	8000526 <__udivmoddi4+0x5e>
 8000524:	e075      	b.n	8000612 <__udivmoddi4+0x14a>
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	9200      	str	r2, [sp, #0]
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2301      	movs	r3, #1
 8000530:	465a      	mov	r2, fp
 8000532:	4093      	lsls	r3, r2
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	4642      	mov	r2, r8
 800053a:	4093      	lsls	r3, r2
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	e028      	b.n	8000592 <__udivmoddi4+0xca>
 8000540:	4282      	cmp	r2, r0
 8000542:	d9cf      	bls.n	80004e4 <__udivmoddi4+0x1c>
 8000544:	2200      	movs	r2, #0
 8000546:	2300      	movs	r3, #0
 8000548:	9200      	str	r2, [sp, #0]
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <__udivmoddi4+0x8e>
 8000552:	601c      	str	r4, [r3, #0]
 8000554:	605d      	str	r5, [r3, #4]
 8000556:	9800      	ldr	r0, [sp, #0]
 8000558:	9901      	ldr	r1, [sp, #4]
 800055a:	b003      	add	sp, #12
 800055c:	bcf0      	pop	{r4, r5, r6, r7}
 800055e:	46bb      	mov	fp, r7
 8000560:	46b2      	mov	sl, r6
 8000562:	46a9      	mov	r9, r5
 8000564:	46a0      	mov	r8, r4
 8000566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000568:	4642      	mov	r2, r8
 800056a:	2320      	movs	r3, #32
 800056c:	1a9b      	subs	r3, r3, r2
 800056e:	4652      	mov	r2, sl
 8000570:	40da      	lsrs	r2, r3
 8000572:	4641      	mov	r1, r8
 8000574:	0013      	movs	r3, r2
 8000576:	464a      	mov	r2, r9
 8000578:	408a      	lsls	r2, r1
 800057a:	0017      	movs	r7, r2
 800057c:	4642      	mov	r2, r8
 800057e:	431f      	orrs	r7, r3
 8000580:	4653      	mov	r3, sl
 8000582:	4093      	lsls	r3, r2
 8000584:	001e      	movs	r6, r3
 8000586:	42af      	cmp	r7, r5
 8000588:	d9c4      	bls.n	8000514 <__udivmoddi4+0x4c>
 800058a:	2200      	movs	r2, #0
 800058c:	2300      	movs	r3, #0
 800058e:	9200      	str	r2, [sp, #0]
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	4643      	mov	r3, r8
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0d9      	beq.n	800054c <__udivmoddi4+0x84>
 8000598:	07fb      	lsls	r3, r7, #31
 800059a:	0872      	lsrs	r2, r6, #1
 800059c:	431a      	orrs	r2, r3
 800059e:	4646      	mov	r6, r8
 80005a0:	087b      	lsrs	r3, r7, #1
 80005a2:	e00e      	b.n	80005c2 <__udivmoddi4+0xfa>
 80005a4:	42ab      	cmp	r3, r5
 80005a6:	d101      	bne.n	80005ac <__udivmoddi4+0xe4>
 80005a8:	42a2      	cmp	r2, r4
 80005aa:	d80c      	bhi.n	80005c6 <__udivmoddi4+0xfe>
 80005ac:	1aa4      	subs	r4, r4, r2
 80005ae:	419d      	sbcs	r5, r3
 80005b0:	2001      	movs	r0, #1
 80005b2:	1924      	adds	r4, r4, r4
 80005b4:	416d      	adcs	r5, r5
 80005b6:	2100      	movs	r1, #0
 80005b8:	3e01      	subs	r6, #1
 80005ba:	1824      	adds	r4, r4, r0
 80005bc:	414d      	adcs	r5, r1
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d006      	beq.n	80005d0 <__udivmoddi4+0x108>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d9ee      	bls.n	80005a4 <__udivmoddi4+0xdc>
 80005c6:	3e01      	subs	r6, #1
 80005c8:	1924      	adds	r4, r4, r4
 80005ca:	416d      	adcs	r5, r5
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d1f8      	bne.n	80005c2 <__udivmoddi4+0xfa>
 80005d0:	9800      	ldr	r0, [sp, #0]
 80005d2:	9901      	ldr	r1, [sp, #4]
 80005d4:	465b      	mov	r3, fp
 80005d6:	1900      	adds	r0, r0, r4
 80005d8:	4169      	adcs	r1, r5
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db24      	blt.n	8000628 <__udivmoddi4+0x160>
 80005de:	002b      	movs	r3, r5
 80005e0:	465a      	mov	r2, fp
 80005e2:	4644      	mov	r4, r8
 80005e4:	40d3      	lsrs	r3, r2
 80005e6:	002a      	movs	r2, r5
 80005e8:	40e2      	lsrs	r2, r4
 80005ea:	001c      	movs	r4, r3
 80005ec:	465b      	mov	r3, fp
 80005ee:	0015      	movs	r5, r2
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	db2a      	blt.n	800064a <__udivmoddi4+0x182>
 80005f4:	0026      	movs	r6, r4
 80005f6:	409e      	lsls	r6, r3
 80005f8:	0033      	movs	r3, r6
 80005fa:	0026      	movs	r6, r4
 80005fc:	4647      	mov	r7, r8
 80005fe:	40be      	lsls	r6, r7
 8000600:	0032      	movs	r2, r6
 8000602:	1a80      	subs	r0, r0, r2
 8000604:	4199      	sbcs	r1, r3
 8000606:	9000      	str	r0, [sp, #0]
 8000608:	9101      	str	r1, [sp, #4]
 800060a:	e79f      	b.n	800054c <__udivmoddi4+0x84>
 800060c:	42a3      	cmp	r3, r4
 800060e:	d8bc      	bhi.n	800058a <__udivmoddi4+0xc2>
 8000610:	e783      	b.n	800051a <__udivmoddi4+0x52>
 8000612:	4642      	mov	r2, r8
 8000614:	2320      	movs	r3, #32
 8000616:	2100      	movs	r1, #0
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	2200      	movs	r2, #0
 800061c:	9100      	str	r1, [sp, #0]
 800061e:	9201      	str	r2, [sp, #4]
 8000620:	2201      	movs	r2, #1
 8000622:	40da      	lsrs	r2, r3
 8000624:	9201      	str	r2, [sp, #4]
 8000626:	e786      	b.n	8000536 <__udivmoddi4+0x6e>
 8000628:	4642      	mov	r2, r8
 800062a:	2320      	movs	r3, #32
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	002a      	movs	r2, r5
 8000630:	4646      	mov	r6, r8
 8000632:	409a      	lsls	r2, r3
 8000634:	0023      	movs	r3, r4
 8000636:	40f3      	lsrs	r3, r6
 8000638:	4644      	mov	r4, r8
 800063a:	4313      	orrs	r3, r2
 800063c:	002a      	movs	r2, r5
 800063e:	40e2      	lsrs	r2, r4
 8000640:	001c      	movs	r4, r3
 8000642:	465b      	mov	r3, fp
 8000644:	0015      	movs	r5, r2
 8000646:	2b00      	cmp	r3, #0
 8000648:	dad4      	bge.n	80005f4 <__udivmoddi4+0x12c>
 800064a:	4642      	mov	r2, r8
 800064c:	002f      	movs	r7, r5
 800064e:	2320      	movs	r3, #32
 8000650:	0026      	movs	r6, r4
 8000652:	4097      	lsls	r7, r2
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	40de      	lsrs	r6, r3
 8000658:	003b      	movs	r3, r7
 800065a:	4333      	orrs	r3, r6
 800065c:	e7cd      	b.n	80005fa <__udivmoddi4+0x132>
 800065e:	46c0      	nop			; (mov r8, r8)

08000660 <__clzsi2>:
 8000660:	211c      	movs	r1, #28
 8000662:	2301      	movs	r3, #1
 8000664:	041b      	lsls	r3, r3, #16
 8000666:	4298      	cmp	r0, r3
 8000668:	d301      	bcc.n	800066e <__clzsi2+0xe>
 800066a:	0c00      	lsrs	r0, r0, #16
 800066c:	3910      	subs	r1, #16
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	4298      	cmp	r0, r3
 8000672:	d301      	bcc.n	8000678 <__clzsi2+0x18>
 8000674:	0a00      	lsrs	r0, r0, #8
 8000676:	3908      	subs	r1, #8
 8000678:	091b      	lsrs	r3, r3, #4
 800067a:	4298      	cmp	r0, r3
 800067c:	d301      	bcc.n	8000682 <__clzsi2+0x22>
 800067e:	0900      	lsrs	r0, r0, #4
 8000680:	3904      	subs	r1, #4
 8000682:	a202      	add	r2, pc, #8	; (adr r2, 800068c <__clzsi2+0x2c>)
 8000684:	5c10      	ldrb	r0, [r2, r0]
 8000686:	1840      	adds	r0, r0, r1
 8000688:	4770      	bx	lr
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	02020304 	.word	0x02020304
 8000690:	01010101 	.word	0x01010101
	...

0800069c <__clzdi2>:
 800069c:	b510      	push	{r4, lr}
 800069e:	2900      	cmp	r1, #0
 80006a0:	d103      	bne.n	80006aa <__clzdi2+0xe>
 80006a2:	f7ff ffdd 	bl	8000660 <__clzsi2>
 80006a6:	3020      	adds	r0, #32
 80006a8:	e002      	b.n	80006b0 <__clzdi2+0x14>
 80006aa:	0008      	movs	r0, r1
 80006ac:	f7ff ffd8 	bl	8000660 <__clzsi2>
 80006b0:	bd10      	pop	{r4, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)

080006b4 <initDrv8830>:
#include "drv8830.h"

extern I2C_HandleTypeDef hi2c1;

uint8_t initDrv8830() {
 80006b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t txData = 0x80;
 80006b6:	2317      	movs	r3, #23
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	446b      	add	r3, sp
 80006bc:	701a      	strb	r2, [r3, #0]
	// clear fault
	return HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &txData, 1, 5);
 80006be:	3a7b      	subs	r2, #123	; 0x7b
 80006c0:	9202      	str	r2, [sp, #8]
 80006c2:	3a04      	subs	r2, #4
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	21c0      	movs	r1, #192	; 0xc0
 80006c8:	0013      	movs	r3, r2
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <initDrv8830+0x24>)
 80006ce:	f001 fbf1 	bl	8001eb4 <HAL_I2C_Mem_Write>
}
 80006d2:	b007      	add	sp, #28
 80006d4:	bd00      	pop	{pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	2000019c 	.word	0x2000019c

080006dc <setMotor>:
// VSET[7:2] voltage 0x00~0x3F
// D1, D0 direction
uint8_t setMotor(int direction) {
	uint8_t txData;
	uint8_t	result;
	txData = 0x1f << 2 | direction;
 80006dc:	2216      	movs	r2, #22
 80006de:	237c      	movs	r3, #124	; 0x7c
uint8_t setMotor(int direction) {
 80006e0:	b570      	push	{r4, r5, r6, lr}
	int status;
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 80006e2:	2401      	movs	r4, #1
 80006e4:	2505      	movs	r5, #5
uint8_t setMotor(int direction) {
 80006e6:	b086      	sub	sp, #24
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 80006e8:	4e0d      	ldr	r6, [pc, #52]	; (8000720 <setMotor+0x44>)
	txData = 0x1f << 2 | direction;
 80006ea:	446a      	add	r2, sp
 80006ec:	4303      	orrs	r3, r0
 80006ee:	7013      	strb	r3, [r2, #0]
	status = HAL_I2C_Mem_Write(&hi2c1, DRV8830_DeviceAddress, DRV8830_CONTROL, 1, &txData, 1, 5);
 80006f0:	21c0      	movs	r1, #192	; 0xc0
 80006f2:	0023      	movs	r3, r4
 80006f4:	9502      	str	r5, [sp, #8]
 80006f6:	9200      	str	r2, [sp, #0]
 80006f8:	0030      	movs	r0, r6
 80006fa:	2200      	movs	r2, #0
 80006fc:	9401      	str	r4, [sp, #4]
 80006fe:	f001 fbd9 	bl	8001eb4 <HAL_I2C_Mem_Write>
	status = HAL_I2C_Mem_Read(&hi2c1, DRV8830_DeviceAddress, DRV8830_FAULT, 1, &result, 1, 5);
 8000702:	9502      	str	r5, [sp, #8]
 8000704:	3512      	adds	r5, #18
 8000706:	446d      	add	r5, sp
 8000708:	0023      	movs	r3, r4
 800070a:	0022      	movs	r2, r4
 800070c:	21c0      	movs	r1, #192	; 0xc0
 800070e:	0030      	movs	r0, r6
 8000710:	9401      	str	r4, [sp, #4]
 8000712:	9500      	str	r5, [sp, #0]
 8000714:	f001 fcac 	bl	8002070 <HAL_I2C_Mem_Read>
	return result;
 8000718:	7828      	ldrb	r0, [r5, #0]
}
 800071a:	b006      	add	sp, #24
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	2000019c 	.word	0x2000019c

08000724 <initEns160>:
#include "ens160.h"

extern I2C_HandleTypeDef hi2c1;

void initEns160() {
 8000724:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t txData = ENS160_OpMode_Run;
 8000726:	2217      	movs	r2, #23
 8000728:	2302      	movs	r3, #2
 800072a:	446a      	add	r2, sp
 800072c:	7013      	strb	r3, [r2, #0]
	int status = HAL_I2C_Mem_Write(&hi2c1, ENS160_DeviceAddress, ENS160_OpMode, 1, &txData, 1, 10);
 800072e:	3308      	adds	r3, #8
 8000730:	9302      	str	r3, [sp, #8]
 8000732:	3b09      	subs	r3, #9
 8000734:	9200      	str	r2, [sp, #0]
 8000736:	21a4      	movs	r1, #164	; 0xa4
 8000738:	2210      	movs	r2, #16
 800073a:	9301      	str	r3, [sp, #4]
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <initEns160+0x24>)
 800073e:	f001 fbb9 	bl	8001eb4 <HAL_I2C_Mem_Write>
}
 8000742:	b007      	add	sp, #28
 8000744:	bd00      	pop	{pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	2000019c 	.word	0x2000019c

0800074c <BUZ.part.0>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void BUZ(uint8_t state){
 800074c:	b510      	push	{r4, lr}
	if(state) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800074e:	2100      	movs	r1, #0
 8000750:	4801      	ldr	r0, [pc, #4]	; (8000758 <BUZ.part.0+0xc>)
 8000752:	f002 fb39 	bl	8002dc8 <HAL_TIM_PWM_Start>
	else      HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
}
 8000756:	bd10      	pop	{r4, pc}
 8000758:	200001f0 	.word	0x200001f0

0800075c <BUZ>:
void BUZ(uint8_t state){
 800075c:	0001      	movs	r1, r0
 800075e:	b510      	push	{r4, lr}
	if(state) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000760:	2800      	cmp	r0, #0
 8000762:	d002      	beq.n	800076a <BUZ+0xe>
 8000764:	f7ff fff2 	bl	800074c <BUZ.part.0>
}
 8000768:	bd10      	pop	{r4, pc}
	else      HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800076a:	4802      	ldr	r0, [pc, #8]	; (8000774 <BUZ+0x18>)
 800076c:	f002 fb30 	bl	8002dd0 <HAL_TIM_PWM_Stop>
}
 8000770:	e7fa      	b.n	8000768 <BUZ+0xc>
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	200001f0 	.word	0x200001f0

08000778 <nextion_inst_set>:

void nextion_inst_set(char* str){
 8000778:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t end_cmd[3] = { 0xFF, 0xFF, 0xFF };
 800077a:	2503      	movs	r5, #3
void nextion_inst_set(char* str){
 800077c:	0004      	movs	r4, r0
	uint8_t end_cmd[3] = { 0xFF, 0xFF, 0xFF };
 800077e:	002a      	movs	r2, r5
 8000780:	490a      	ldr	r1, [pc, #40]	; (80007ac <nextion_inst_set+0x34>)
 8000782:	a801      	add	r0, sp, #4
 8000784:	f002 ff70 	bl	8003668 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8000788:	0020      	movs	r0, r4
 800078a:	f7ff fcbd 	bl	8000108 <strlen>
 800078e:	4e08      	ldr	r6, [pc, #32]	; (80007b0 <nextion_inst_set+0x38>)
 8000790:	0021      	movs	r1, r4
 8000792:	b282      	uxth	r2, r0
 8000794:	2364      	movs	r3, #100	; 0x64
 8000796:	0030      	movs	r0, r6
 8000798:	f002 fdbf 	bl	800331a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, end_cmd, 3, 100);
 800079c:	002a      	movs	r2, r5
 800079e:	0030      	movs	r0, r6
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	a901      	add	r1, sp, #4
 80007a4:	f002 fdb9 	bl	800331a <HAL_UART_Transmit>
}
 80007a8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	08003f64 	.word	0x08003f64
 80007b0:	20000230 	.word	0x20000230

080007b4 <get_touch>:

void get_touch(POS_Typedef* buf){
	HAL_StatusTypeDef res = HAL_OK;
	uint8_t rx_data[8] = { 0, };
 80007b4:	2300      	movs	r3, #0
void get_touch(POS_Typedef* buf){
 80007b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80007b8:	0004      	movs	r4, r0

	nextion_inst_set("get tch0");
 80007ba:	481b      	ldr	r0, [pc, #108]	; (8000828 <get_touch+0x74>)
	uint8_t rx_data[8] = { 0, };
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	9301      	str	r3, [sp, #4]
	nextion_inst_set("get tch0");
 80007c0:	f7ff ffda 	bl	8000778 <nextion_inst_set>
	res = HAL_UART_Receive(&huart1, rx_data, 8, 100);
 80007c4:	4d19      	ldr	r5, [pc, #100]	; (800082c <get_touch+0x78>)
 80007c6:	2364      	movs	r3, #100	; 0x64
 80007c8:	2208      	movs	r2, #8
 80007ca:	4669      	mov	r1, sp
 80007cc:	0028      	movs	r0, r5
 80007ce:	f002 fe0b 	bl	80033e8 <HAL_UART_Receive>
	if(res == HAL_OK) { if(rx_data[0] == 0x71) { buf->x = rx_data[2] << 8 | rx_data[1]; } }
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d109      	bne.n	80007ea <get_touch+0x36>
 80007d6:	466b      	mov	r3, sp
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b71      	cmp	r3, #113	; 0x71
 80007dc:	d105      	bne.n	80007ea <get_touch+0x36>
 80007de:	466b      	mov	r3, sp
 80007e0:	7859      	ldrb	r1, [r3, #1]
 80007e2:	789b      	ldrb	r3, [r3, #2]
 80007e4:	021b      	lsls	r3, r3, #8
 80007e6:	430b      	orrs	r3, r1
 80007e8:	8023      	strh	r3, [r4, #0]

	nextion_inst_set("get tch1");
 80007ea:	4811      	ldr	r0, [pc, #68]	; (8000830 <get_touch+0x7c>)
 80007ec:	f7ff ffc4 	bl	8000778 <nextion_inst_set>
	res = HAL_UART_Receive(&huart1, rx_data, 8, 100);
 80007f0:	2364      	movs	r3, #100	; 0x64
 80007f2:	2208      	movs	r2, #8
 80007f4:	4669      	mov	r1, sp
 80007f6:	0028      	movs	r0, r5
 80007f8:	f002 fdf6 	bl	80033e8 <HAL_UART_Receive>
	if(res == HAL_OK) { if(rx_data[0] == 0x71) { buf->y = rx_data[2] << 8 | rx_data[1]; } }
 80007fc:	2800      	cmp	r0, #0
 80007fe:	d109      	bne.n	8000814 <get_touch+0x60>
 8000800:	466b      	mov	r3, sp
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b71      	cmp	r3, #113	; 0x71
 8000806:	d105      	bne.n	8000814 <get_touch+0x60>
 8000808:	466b      	mov	r3, sp
 800080a:	7859      	ldrb	r1, [r3, #1]
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	430b      	orrs	r3, r1
 8000812:	8063      	strh	r3, [r4, #2]

	if(buf->x > 0 && buf->y > 0) buf->touched = 1;
	else buf->touched = 0;
 8000814:	2300      	movs	r3, #0
	if(buf->x > 0 && buf->y > 0) buf->touched = 1;
 8000816:	8822      	ldrh	r2, [r4, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	d003      	beq.n	8000824 <get_touch+0x70>
 800081c:	8863      	ldrh	r3, [r4, #2]
 800081e:	1e5a      	subs	r2, r3, #1
 8000820:	4193      	sbcs	r3, r2
	else buf->touched = 0;
 8000822:	b2db      	uxtb	r3, r3
 8000824:	7123      	strb	r3, [r4, #4]
}
 8000826:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8000828:	08003f68 	.word	0x08003f68
 800082c:	20000230 	.word	0x20000230
 8000830:	08003f71 	.word	0x08003f71

08000834 <get_slide>:

void get_slide(POS_Typedef* xy, SLIDE_Typedef* buf){
 8000834:	b570      	push	{r4, r5, r6, lr}
	static POS_Typedef befo_touch = { 0, 0, 0 };
	static POS_Typedef touched_xy = { 0, 0, 0 };

	if(befo_touch.touched != xy->touched){
 8000836:	4d13      	ldr	r5, [pc, #76]	; (8000884 <get_slide+0x50>)
 8000838:	7903      	ldrb	r3, [r0, #4]
 800083a:	792a      	ldrb	r2, [r5, #4]
void get_slide(POS_Typedef* xy, SLIDE_Typedef* buf){
 800083c:	0004      	movs	r4, r0
	if(befo_touch.touched != xy->touched){
 800083e:	429a      	cmp	r2, r3
 8000840:	d01d      	beq.n	800087e <get_slide+0x4a>
		if(xy->touched == 0){
 8000842:	4811      	ldr	r0, [pc, #68]	; (8000888 <get_slide+0x54>)
 8000844:	2b00      	cmp	r3, #0
 8000846:	d110      	bne.n	800086a <get_slide+0x36>
			if(touched_xy.x > befo_touch.x){
 8000848:	8802      	ldrh	r2, [r0, #0]
 800084a:	882b      	ldrh	r3, [r5, #0]
 800084c:	429a      	cmp	r2, r3
 800084e:	d905      	bls.n	800085c <get_slide+0x28>
				if(touched_xy.x - befo_touch.x > 30) *buf = left_slide;
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	2b1e      	cmp	r3, #30
 8000854:	dd0d      	ble.n	8000872 <get_slide+0x3e>
 8000856:	2301      	movs	r3, #1
				if(befo_touch.x - touched_xy.x > 30) *buf = right_slide;
			}
		}
		else touched_xy = *xy;
	}
	else *buf = none;
 8000858:	700b      	strb	r3, [r1, #0]
 800085a:	e00a      	b.n	8000872 <get_slide+0x3e>
			else if(befo_touch.x > touched_xy.x){
 800085c:	429a      	cmp	r2, r3
 800085e:	d208      	bcs.n	8000872 <get_slide+0x3e>
				if(befo_touch.x - touched_xy.x > 30) *buf = right_slide;
 8000860:	1a9b      	subs	r3, r3, r2
 8000862:	2b1e      	cmp	r3, #30
 8000864:	dd05      	ble.n	8000872 <get_slide+0x3e>
 8000866:	2302      	movs	r3, #2
 8000868:	e7f6      	b.n	8000858 <get_slide+0x24>
		else touched_xy = *xy;
 800086a:	2206      	movs	r2, #6
 800086c:	0021      	movs	r1, r4
 800086e:	f002 fefb 	bl	8003668 <memcpy>

	befo_touch = *xy;
 8000872:	0028      	movs	r0, r5
 8000874:	2206      	movs	r2, #6
 8000876:	0021      	movs	r1, r4
 8000878:	f002 fef6 	bl	8003668 <memcpy>
}
 800087c:	bd70      	pop	{r4, r5, r6, pc}
	else *buf = none;
 800087e:	2300      	movs	r3, #0
 8000880:	e7ea      	b.n	8000858 <get_slide+0x24>
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	20000128 	.word	0x20000128
 8000888:	20000372 	.word	0x20000372

0800088c <area_check>:

uint8_t area_check(POS_Typedef* xy, AREA_Typedef* area){
 800088c:	b510      	push	{r4, lr}
	if(xy->x >= area->x0 && xy->x <= area->x1){
 800088e:	8802      	ldrh	r2, [r0, #0]
 8000890:	880c      	ldrh	r4, [r1, #0]
uint8_t area_check(POS_Typedef* xy, AREA_Typedef* area){
 8000892:	0003      	movs	r3, r0
		if(xy->y >= area->y0 && xy->y <= area->y1){
			return 1;
		}
	}
	return 0;
 8000894:	2000      	movs	r0, #0
	if(xy->x >= area->x0 && xy->x <= area->x1){
 8000896:	4294      	cmp	r4, r2
 8000898:	d80a      	bhi.n	80008b0 <area_check+0x24>
 800089a:	888c      	ldrh	r4, [r1, #4]
 800089c:	4294      	cmp	r4, r2
 800089e:	d307      	bcc.n	80008b0 <area_check+0x24>
 80008a0:	885b      	ldrh	r3, [r3, #2]
		if(xy->y >= area->y0 && xy->y <= area->y1){
 80008a2:	884a      	ldrh	r2, [r1, #2]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d803      	bhi.n	80008b0 <area_check+0x24>
 80008a8:	88ca      	ldrh	r2, [r1, #6]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	4140      	adcs	r0, r0
	return 0;
 80008ae:	b2c0      	uxtb	r0, r0
}
 80008b0:	bd10      	pop	{r4, pc}
	...

080008b4 <day_cal>:

WEEK_Typedef day_cal(TIME_Typedef* now_time){
 80008b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t leaf = ((now_time->year % 4 == 0 && now_time->year % 100 != 0) || (now_time->year % 400 == 0));
 80008b6:	2700      	movs	r7, #0
 80008b8:	57c7      	ldrsb	r7, [r0, r7]
WEEK_Typedef day_cal(TIME_Typedef* now_time){
 80008ba:	0006      	movs	r6, r0
	uint8_t leaf = ((now_time->year % 4 == 0 && now_time->year % 100 != 0) || (now_time->year % 400 == 0));
 80008bc:	07bb      	lsls	r3, r7, #30
 80008be:	d108      	bne.n	80008d2 <day_cal+0x1e>
 80008c0:	2164      	movs	r1, #100	; 0x64
 80008c2:	0038      	movs	r0, r7
 80008c4:	f7ff fdac 	bl	8000420 <__aeabi_idivmod>
 80008c8:	2301      	movs	r3, #1
 80008ca:	b249      	sxtb	r1, r1
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	2900      	cmp	r1, #0
 80008d0:	d102      	bne.n	80008d8 <day_cal+0x24>
 80008d2:	427a      	negs	r2, r7
 80008d4:	417a      	adcs	r2, r7
 80008d6:	9201      	str	r2, [sp, #4]
	uint32_t sum = 0;
	WEEK_Typedef res = sun;


	for(uint16_t i = 1 ; i < now_time->year + 2000 ; i++){
 80008d8:	2401      	movs	r4, #1
	uint32_t sum = 0;
 80008da:	2500      	movs	r5, #0
	for(uint16_t i = 1 ; i < now_time->year + 2000 ; i++){
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <day_cal+0x8c>)
 80008de:	18ff      	adds	r7, r7, r3
		uint8_t leaf = ((i % 4 == 0 && i % 100 != 0) || (i % 400 == 0));
 80008e0:	2303      	movs	r3, #3
 80008e2:	421c      	tst	r4, r3
 80008e4:	d106      	bne.n	80008f4 <day_cal+0x40>
 80008e6:	2164      	movs	r1, #100	; 0x64
 80008e8:	0020      	movs	r0, r4
 80008ea:	f7ff fcaf 	bl	800024c <__aeabi_uidivmod>
 80008ee:	b289      	uxth	r1, r1
 80008f0:	2900      	cmp	r1, #0
 80008f2:	d107      	bne.n	8000904 <day_cal+0x50>

		if(leaf == 1) sum += 366;
 80008f4:	21c8      	movs	r1, #200	; 0xc8
 80008f6:	0020      	movs	r0, r4
 80008f8:	0049      	lsls	r1, r1, #1
 80008fa:	f7ff fca7 	bl	800024c <__aeabi_uidivmod>
 80008fe:	b289      	uxth	r1, r1
 8000900:	2900      	cmp	r1, #0
 8000902:	d115      	bne.n	8000930 <day_cal+0x7c>
 8000904:	356f      	adds	r5, #111	; 0x6f
	for(uint16_t i = 1 ; i < now_time->year + 2000 ; i++){
 8000906:	3401      	adds	r4, #1
 8000908:	b2a4      	uxth	r4, r4
		else sum += 365;
 800090a:	35ff      	adds	r5, #255	; 0xff
	for(uint16_t i = 1 ; i < now_time->year + 2000 ; i++){
 800090c:	42a7      	cmp	r7, r4
 800090e:	dae7      	bge.n	80008e0 <day_cal+0x2c>
	}

	if(leaf == 1) last_day[1] = 29;
 8000910:	9b01      	ldr	r3, [sp, #4]
 8000912:	490c      	ldr	r1, [pc, #48]	; (8000944 <day_cal+0x90>)
 8000914:	331c      	adds	r3, #28
 8000916:	704b      	strb	r3, [r1, #1]
	else last_day[1] = 28;

	for(uint8_t i = 0 ; i < now_time->month - 1 ; i++){
 8000918:	2300      	movs	r3, #0
 800091a:	7872      	ldrb	r2, [r6, #1]
 800091c:	3a01      	subs	r2, #1
 800091e:	4293      	cmp	r3, r2
 8000920:	db08      	blt.n	8000934 <day_cal+0x80>
		sum += last_day[i];
	}

	sum += now_time->day;
 8000922:	78b0      	ldrb	r0, [r6, #2]

	res = sum % 7;
 8000924:	2107      	movs	r1, #7
	sum += now_time->day;
 8000926:	1940      	adds	r0, r0, r5
	res = sum % 7;
 8000928:	f7ff fc90 	bl	800024c <__aeabi_uidivmod>
	return res;
 800092c:	b2c8      	uxtb	r0, r1
}
 800092e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		else sum += 365;
 8000930:	356e      	adds	r5, #110	; 0x6e
 8000932:	e7e8      	b.n	8000906 <day_cal+0x52>
		sum += last_day[i];
 8000934:	5cc8      	ldrb	r0, [r1, r3]
	for(uint8_t i = 0 ; i < now_time->month - 1 ; i++){
 8000936:	3301      	adds	r3, #1
		sum += last_day[i];
 8000938:	182d      	adds	r5, r5, r0
	for(uint8_t i = 0 ; i < now_time->month - 1 ; i++){
 800093a:	b2db      	uxtb	r3, r3
 800093c:	e7ef      	b.n	800091e <day_cal+0x6a>
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	000007cf 	.word	0x000007cf
 8000944:	20000068 	.word	0x20000068

08000948 <equal_time_check>:

uint8_t equal_time_check(TIME_Typedef* a, TIME_Typedef* b){
	if(a->year == b->year){
 8000948:	2200      	movs	r2, #0
uint8_t equal_time_check(TIME_Typedef* a, TIME_Typedef* b){
 800094a:	b510      	push	{r4, lr}
	if(a->year == b->year){
 800094c:	2400      	movs	r4, #0
 800094e:	568a      	ldrsb	r2, [r1, r2]
 8000950:	5704      	ldrsb	r4, [r0, r4]
uint8_t equal_time_check(TIME_Typedef* a, TIME_Typedef* b){
 8000952:	0003      	movs	r3, r0
			if(a->day == b->day){
				return 1;
			}
		}
	}
	return 0;
 8000954:	2000      	movs	r0, #0
	if(a->year == b->year){
 8000956:	4294      	cmp	r4, r2
 8000958:	d109      	bne.n	800096e <equal_time_check+0x26>
		if(a->month == b->month){
 800095a:	785c      	ldrb	r4, [r3, #1]
 800095c:	784a      	ldrb	r2, [r1, #1]
 800095e:	4294      	cmp	r4, r2
 8000960:	d105      	bne.n	800096e <equal_time_check+0x26>
			if(a->day == b->day){
 8000962:	7898      	ldrb	r0, [r3, #2]
 8000964:	788b      	ldrb	r3, [r1, #2]
 8000966:	1ac0      	subs	r0, r0, r3
 8000968:	4243      	negs	r3, r0
 800096a:	4158      	adcs	r0, r3
	return 0;
 800096c:	b2c0      	uxtb	r0, r0
}
 800096e:	bd10      	pop	{r4, pc}

08000970 <basic_screen>:

void basic_screen(TIME_Typedef* data, TIME_Typedef* print_time){
	AREA_Typedef current_date_area = { 0, 0, 0, 0 };

	/* title draw */
	sprintf(bf, "xstr 0,0,480,32,0,WHITE,BLACK,0,1,1,\" %d. %d\"", print_time->year + 2000, print_time->month);
 8000970:	2200      	movs	r2, #0
void basic_screen(TIME_Typedef* data, TIME_Typedef* print_time){
 8000972:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000974:	b095      	sub	sp, #84	; 0x54
 8000976:	9013      	str	r0, [sp, #76]	; 0x4c
	sprintf(bf, "xstr 0,0,480,32,0,WHITE,BLACK,0,1,1,\" %d. %d\"", print_time->year + 2000, print_time->month);
 8000978:	784b      	ldrb	r3, [r1, #1]
 800097a:	568a      	ldrsb	r2, [r1, r2]
void basic_screen(TIME_Typedef* data, TIME_Typedef* print_time){
 800097c:	000e      	movs	r6, r1
	sprintf(bf, "xstr 0,0,480,32,0,WHITE,BLACK,0,1,1,\" %d. %d\"", print_time->year + 2000, print_time->month);
 800097e:	21fa      	movs	r1, #250	; 0xfa
 8000980:	4c93      	ldr	r4, [pc, #588]	; (8000bd0 <basic_screen+0x260>)
 8000982:	00c9      	lsls	r1, r1, #3
 8000984:	1852      	adds	r2, r2, r1
 8000986:	0020      	movs	r0, r4
 8000988:	4992      	ldr	r1, [pc, #584]	; (8000bd4 <basic_screen+0x264>)
 800098a:	f002 fe91 	bl	80036b0 <siprintf>
	nextion_inst_set(bf);
 800098e:	0020      	movs	r0, r4
 8000990:	f7ff fef2 	bl	8000778 <nextion_inst_set>

	print_time->day = 1;
 8000994:	2301      	movs	r3, #1

	/* calender draw */
	if(menu == basic){
 8000996:	4f90      	ldr	r7, [pc, #576]	; (8000bd8 <basic_screen+0x268>)
	print_time->day = 1;
 8000998:	70b3      	strb	r3, [r6, #2]
	if(menu == basic){
 800099a:	783b      	ldrb	r3, [r7, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d100      	bne.n	80009a2 <basic_screen+0x32>
 80009a0:	e08d      	b.n	8000abe <basic_screen+0x14e>
		nextion_inst_set(bf);
	}
	else if(menu != basic){
		AREA_Typedef area = { 35, 52, 35 + 410, 52 + 198 };

		sprintf(bf, "fill %d,%d,%d,%d,WHITE", area.x0, area.y0, area.x1 - area.x0, area.y1 - area.y0);
 80009a2:	23c6      	movs	r3, #198	; 0xc6
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	33d4      	adds	r3, #212	; 0xd4
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	3b67      	subs	r3, #103	; 0x67
 80009ac:	2223      	movs	r2, #35	; 0x23
 80009ae:	498b      	ldr	r1, [pc, #556]	; (8000bdc <basic_screen+0x26c>)
 80009b0:	3bff      	subs	r3, #255	; 0xff
 80009b2:	0020      	movs	r0, r4
 80009b4:	f002 fe7c 	bl	80036b0 <siprintf>
		nextion_inst_set(bf);
 80009b8:	0020      	movs	r0, r4
 80009ba:	f7ff fedd 	bl	8000778 <nextion_inst_set>

		sprintf(bf, "xstr %d,%d,410,20,0,BLACK,WHITE,0,1,1,\" Date: %d, %d, %d, %s\"", area.x0, area.y0,
				schedule.data[schedule.now_schedule].time.year + 2000,
 80009be:	4b88      	ldr	r3, [pc, #544]	; (8000be0 <basic_screen+0x270>)
 80009c0:	4e88      	ldr	r6, [pc, #544]	; (8000be4 <basic_screen+0x274>)
 80009c2:	7818      	ldrb	r0, [r3, #0]
 80009c4:	230e      	movs	r3, #14
 80009c6:	4358      	muls	r0, r3
		sprintf(bf, "xstr %d,%d,410,20,0,BLACK,WHITE,0,1,1,\" Date: %d, %d, %d, %s\"", area.x0, area.y0,
 80009c8:	23fa      	movs	r3, #250	; 0xfa
				schedule.data[schedule.now_schedule].time.year + 2000,
 80009ca:	5785      	ldrsb	r5, [r0, r6]
		sprintf(bf, "xstr %d,%d,410,20,0,BLACK,WHITE,0,1,1,\" Date: %d, %d, %d, %s\"", area.x0, area.y0,
 80009cc:	00db      	lsls	r3, r3, #3
				schedule.data[schedule.now_schedule].time.month,
 80009ce:	1830      	adds	r0, r6, r0
		sprintf(bf, "xstr %d,%d,410,20,0,BLACK,WHITE,0,1,1,\" Date: %d, %d, %d, %s\"", area.x0, area.y0,
 80009d0:	18ed      	adds	r5, r5, r3
 80009d2:	7843      	ldrb	r3, [r0, #1]
 80009d4:	9305      	str	r3, [sp, #20]
 80009d6:	7883      	ldrb	r3, [r0, #2]
 80009d8:	9306      	str	r3, [sp, #24]
				schedule.data[schedule.now_schedule].time.day,
				day_string[day_cal(&schedule.data[schedule.now_schedule].time)]);
 80009da:	f7ff ff6b 	bl	80008b4 <day_cal>
		sprintf(bf, "xstr %d,%d,410,20,0,BLACK,WHITE,0,1,1,\" Date: %d, %d, %d, %s\"", area.x0, area.y0,
 80009de:	4b82      	ldr	r3, [pc, #520]	; (8000be8 <basic_screen+0x278>)
 80009e0:	0080      	lsls	r0, r0, #2
 80009e2:	58c3      	ldr	r3, [r0, r3]
 80009e4:	2223      	movs	r2, #35	; 0x23
 80009e6:	9303      	str	r3, [sp, #12]
 80009e8:	9b06      	ldr	r3, [sp, #24]
 80009ea:	4980      	ldr	r1, [pc, #512]	; (8000bec <basic_screen+0x27c>)
 80009ec:	9302      	str	r3, [sp, #8]
 80009ee:	9b05      	ldr	r3, [sp, #20]
 80009f0:	0020      	movs	r0, r4
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	9500      	str	r5, [sp, #0]
 80009f6:	2334      	movs	r3, #52	; 0x34
 80009f8:	f002 fe5a 	bl	80036b0 <siprintf>
		nextion_inst_set(bf);
 80009fc:	0020      	movs	r0, r4
 80009fe:	f7ff febb 	bl	8000778 <nextion_inst_set>

		sprintf(bf, "line %d,%d,%d,%d,BLACK", area.x0, area.y0 + 20, area.x1, area.y0 + 20);
 8000a02:	22be      	movs	r2, #190	; 0xbe
 8000a04:	2348      	movs	r3, #72	; 0x48
 8000a06:	32ff      	adds	r2, #255	; 0xff
 8000a08:	9200      	str	r2, [sp, #0]
 8000a0a:	3a9b      	subs	r2, #155	; 0x9b
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	4978      	ldr	r1, [pc, #480]	; (8000bf0 <basic_screen+0x280>)
 8000a10:	3aff      	subs	r2, #255	; 0xff
 8000a12:	0020      	movs	r0, r4
 8000a14:	f002 fe4c 	bl	80036b0 <siprintf>
		nextion_inst_set(bf);
 8000a18:	0020      	movs	r0, r4
 8000a1a:	f7ff fead 	bl	8000778 <nextion_inst_set>

		if(menu == detail){
 8000a1e:	783b      	ldrb	r3, [r7, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d000      	beq.n	8000a26 <basic_screen+0xb6>
 8000a24:	e186      	b.n	8000d34 <basic_screen+0x3c4>
			for(uint8_t i = 0 ; i < schedule.data[schedule.now_schedule].schedule_num ; i++){
 8000a26:	2500      	movs	r5, #0
 8000a28:	e143      	b.n	8000cb2 <basic_screen+0x342>
					sprintf(bf, "xstr %d,%d,%d,40,0,%s,WHITE,0,0,1,\"%d\"", area.x0 + 1, area.y0 + 1, j == 6 ? 72 : 68, print_time_day == sun ? "RED" : print_time_day == sat ? "BLUE" : "BLACK", print_time->day);
 8000a2a:	2348      	movs	r3, #72	; 0x48
 8000a2c:	930a      	str	r3, [sp, #40]	; 0x28
 8000a2e:	4b71      	ldr	r3, [pc, #452]	; (8000bf4 <basic_screen+0x284>)
 8000a30:	e082      	b.n	8000b38 <basic_screen+0x1c8>
						if(equal_time_check(print_time, &schedule.data[i].time) && schedule.data[i].schedule_num > 0){
 8000a32:	230e      	movs	r3, #14
 8000a34:	9a08      	ldr	r2, [sp, #32]
 8000a36:	0030      	movs	r0, r6
 8000a38:	4353      	muls	r3, r2
 8000a3a:	191c      	adds	r4, r3, r4
 8000a3c:	0021      	movs	r1, r4
 8000a3e:	f7ff ff83 	bl	8000948 <equal_time_check>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d027      	beq.n	8000a96 <basic_screen+0x126>
 8000a46:	7b63      	ldrb	r3, [r4, #13]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d024      	beq.n	8000a96 <basic_screen+0x126>
									schedule_title[schedule.data[i].title[0]]);
 8000a4c:	78e3      	ldrb	r3, [r4, #3]
							sprintf(bf, "xstr %d,%d,%d,20,0,BLACK,%s,1,1,1,\"%s\"", area.x0, area.y0 + 20, j == 6 ? 72 : 68,
 8000a4e:	4a6a      	ldr	r2, [pc, #424]	; (8000bf8 <basic_screen+0x288>)
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	589b      	ldr	r3, [r3, r2]
 8000a54:	4a69      	ldr	r2, [pc, #420]	; (8000bfc <basic_screen+0x28c>)
 8000a56:	9302      	str	r3, [sp, #8]
									schedule_color[schedule.data[i].color[0]],
 8000a58:	7a23      	ldrb	r3, [r4, #8]
							sprintf(bf, "xstr %d,%d,%d,20,0,BLACK,%s,1,1,1,\"%s\"", area.x0, area.y0 + 20, j == 6 ? 72 : 68,
 8000a5a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	589b      	ldr	r3, [r3, r2]
 8000a60:	4d5b      	ldr	r5, [pc, #364]	; (8000bd0 <basic_screen+0x260>)
 8000a62:	9301      	str	r3, [sp, #4]
 8000a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000a66:	3414      	adds	r4, #20
 8000a68:	9a07      	ldr	r2, [sp, #28]
 8000a6a:	4965      	ldr	r1, [pc, #404]	; (8000c00 <basic_screen+0x290>)
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	0028      	movs	r0, r5
 8000a70:	0023      	movs	r3, r4
 8000a72:	f002 fe1d 	bl	80036b0 <siprintf>
							nextion_inst_set(bf);
 8000a76:	0028      	movs	r0, r5
 8000a78:	f7ff fe7e 	bl	8000778 <nextion_inst_set>
							sprintf(bf, "draw %d,%d,%d,%d,BLACK", area.x0, area.y0 + 20, area.x1, area.y1);
 8000a7c:	9b05      	ldr	r3, [sp, #20]
 8000a7e:	0028      	movs	r0, r5
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a84:	9a07      	ldr	r2, [sp, #28]
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	495e      	ldr	r1, [pc, #376]	; (8000c04 <basic_screen+0x294>)
 8000a8a:	0023      	movs	r3, r4
 8000a8c:	f002 fe10 	bl	80036b0 <siprintf>
							nextion_inst_set(bf);
 8000a90:	0028      	movs	r0, r5
 8000a92:	f7ff fe71 	bl	8000778 <nextion_inst_set>
					for(uint8_t i = 0 ; i < schedule.schedule_num ; i++){
 8000a96:	9d08      	ldr	r5, [sp, #32]
 8000a98:	3501      	adds	r5, #1
 8000a9a:	b2eb      	uxtb	r3, r5
 8000a9c:	e067      	b.n	8000b6e <basic_screen+0x1fe>
					sprintf(bf, "fill %d,%d,%d,40,WHITE", area.x0, area.y0, j == 6 ? 72 : 68);
 8000a9e:	2348      	movs	r3, #72	; 0x48
 8000aa0:	2f06      	cmp	r7, #6
 8000aa2:	d000      	beq.n	8000aa6 <basic_screen+0x136>
 8000aa4:	3b04      	subs	r3, #4
 8000aa6:	4c4a      	ldr	r4, [pc, #296]	; (8000bd0 <basic_screen+0x260>)
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	0020      	movs	r0, r4
 8000aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000aae:	9a07      	ldr	r2, [sp, #28]
 8000ab0:	4955      	ldr	r1, [pc, #340]	; (8000c08 <basic_screen+0x298>)
 8000ab2:	f002 fdfd 	bl	80036b0 <siprintf>
					nextion_inst_set(bf);
 8000ab6:	0020      	movs	r0, r4
 8000ab8:	f7ff fe5e 	bl	8000778 <nextion_inst_set>
 8000abc:	e063      	b.n	8000b86 <basic_screen+0x216>
 8000abe:	2220      	movs	r2, #32
	AREA_Typedef current_date_area = { 0, 0, 0, 0 };
 8000ac0:	9306      	str	r3, [sp, #24]
 8000ac2:	9205      	str	r2, [sp, #20]
 8000ac4:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8000ac8:	930c      	str	r3, [sp, #48]	; 0x30
			for(WEEK_Typedef j = 0 ; j < max_week ; j++){
 8000aca:	466b      	mov	r3, sp
					sprintf(bf, "fill %d,%d,%d,40,WHITE", area.x0, area.y0, j == 6 ? 72 : 68);
 8000acc:	2700      	movs	r7, #0
 8000ace:	8a9b      	ldrh	r3, [r3, #20]
 8000ad0:	930e      	str	r3, [sp, #56]	; 0x38
				AREA_Typedef area = { j * 68, i * 40 + 32, j == 6 ? 480 : (j + 1) * 68, (i + 1) * 40 + 32 };
 8000ad2:	3328      	adds	r3, #40	; 0x28
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	9310      	str	r3, [sp, #64]	; 0x40
					sprintf(bf, "fill %d,%d,%d,40,WHITE", area.x0, area.y0, j == 6 ? 72 : 68);
 8000ad8:	9b05      	ldr	r3, [sp, #20]
 8000ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8000adc:	3301      	adds	r3, #1
 8000ade:	9311      	str	r3, [sp, #68]	; 0x44
 8000ae0:	9b05      	ldr	r3, [sp, #20]
 8000ae2:	9312      	str	r3, [sp, #72]	; 0x48
 8000ae4:	3328      	adds	r3, #40	; 0x28
 8000ae6:	9305      	str	r3, [sp, #20]
				AREA_Typedef area = { j * 68, i * 40 + 32, j == 6 ? 480 : (j + 1) * 68, (i + 1) * 40 + 32 };
 8000ae8:	2544      	movs	r5, #68	; 0x44
 8000aea:	23f0      	movs	r3, #240	; 0xf0
 8000aec:	437d      	muls	r5, r7
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	b2ad      	uxth	r5, r5
 8000af2:	b2fc      	uxtb	r4, r7
 8000af4:	9309      	str	r3, [sp, #36]	; 0x24
 8000af6:	2f06      	cmp	r7, #6
 8000af8:	d003      	beq.n	8000b02 <basic_screen+0x192>
 8000afa:	002b      	movs	r3, r5
 8000afc:	3344      	adds	r3, #68	; 0x44
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	9309      	str	r3, [sp, #36]	; 0x24
				WEEK_Typedef print_time_day = day_cal(print_time);
 8000b02:	0030      	movs	r0, r6
 8000b04:	f7ff fed6 	bl	80008b4 <day_cal>
				if(print_time_day == j && print_time->day <= last_day[print_time->month - 1]){
 8000b08:	2344      	movs	r3, #68	; 0x44
 8000b0a:	437b      	muls	r3, r7
 8000b0c:	9307      	str	r3, [sp, #28]
 8000b0e:	42a0      	cmp	r0, r4
 8000b10:	d1c5      	bne.n	8000a9e <basic_screen+0x12e>
 8000b12:	7872      	ldrb	r2, [r6, #1]
 8000b14:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <basic_screen+0x29c>)
 8000b16:	78b1      	ldrb	r1, [r6, #2]
 8000b18:	189b      	adds	r3, r3, r2
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d3bd      	bcc.n	8000a9e <basic_screen+0x12e>
					sprintf(bf, "xstr %d,%d,%d,40,0,%s,WHITE,0,0,1,\"%d\"", area.x0 + 1, area.y0 + 1, j == 6 ? 72 : 68, print_time_day == sun ? "RED" : print_time_day == sat ? "BLUE" : "BLACK", print_time->day);
 8000b22:	9b07      	ldr	r3, [sp, #28]
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	2c06      	cmp	r4, #6
 8000b28:	d100      	bne.n	8000b2c <basic_screen+0x1bc>
 8000b2a:	e77e      	b.n	8000a2a <basic_screen+0xba>
 8000b2c:	2344      	movs	r3, #68	; 0x44
 8000b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8000b30:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <basic_screen+0x2a0>)
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d100      	bne.n	8000b38 <basic_screen+0x1c8>
 8000b36:	4b37      	ldr	r3, [pc, #220]	; (8000c14 <basic_screen+0x2a4>)
 8000b38:	4c25      	ldr	r4, [pc, #148]	; (8000bd0 <basic_screen+0x260>)
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b3e:	9102      	str	r1, [sp, #8]
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	4935      	ldr	r1, [pc, #212]	; (8000c18 <basic_screen+0x2a8>)
 8000b44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000b46:	0020      	movs	r0, r4
 8000b48:	f002 fdb2 	bl	80036b0 <siprintf>
					nextion_inst_set(bf);
 8000b4c:	0020      	movs	r0, r4
 8000b4e:	f7ff fe13 	bl	8000778 <nextion_inst_set>
					if(equal_time_check(data, print_time)) current_date_area = area;
 8000b52:	0031      	movs	r1, r6
 8000b54:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8000b56:	f7ff fef7 	bl	8000948 <equal_time_check>
 8000b5a:	2800      	cmp	r0, #0
 8000b5c:	d006      	beq.n	8000b6c <basic_screen+0x1fc>
 8000b5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000b60:	950d      	str	r5, [sp, #52]	; 0x34
 8000b62:	9306      	str	r3, [sp, #24]
 8000b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b66:	930f      	str	r3, [sp, #60]	; 0x3c
 8000b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000b6a:	930c      	str	r3, [sp, #48]	; 0x30
					for(uint8_t i = 0 ; i < schedule.schedule_num ; i++){
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4c1d      	ldr	r4, [pc, #116]	; (8000be4 <basic_screen+0x274>)
 8000b70:	9308      	str	r3, [sp, #32]
 8000b72:	0023      	movs	r3, r4
 8000b74:	33b4      	adds	r3, #180	; 0xb4
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	9a08      	ldr	r2, [sp, #32]
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d900      	bls.n	8000b80 <basic_screen+0x210>
 8000b7e:	e758      	b.n	8000a32 <basic_screen+0xc2>
					print_time->day++;
 8000b80:	78b3      	ldrb	r3, [r6, #2]
 8000b82:	3301      	adds	r3, #1
 8000b84:	70b3      	strb	r3, [r6, #2]
				sprintf(bf, "draw %d,%d,%d,%d,BLACK", area.x0, area.y0, area.x1, area.y1);
 8000b86:	9b05      	ldr	r3, [sp, #20]
 8000b88:	4c11      	ldr	r4, [pc, #68]	; (8000bd0 <basic_screen+0x260>)
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b8e:	9a07      	ldr	r2, [sp, #28]
 8000b90:	491c      	ldr	r1, [pc, #112]	; (8000c04 <basic_screen+0x294>)
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	0020      	movs	r0, r4
 8000b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000b98:	f002 fd8a 	bl	80036b0 <siprintf>
			for(WEEK_Typedef j = 0 ; j < max_week ; j++){
 8000b9c:	3701      	adds	r7, #1
				nextion_inst_set(bf);
 8000b9e:	0020      	movs	r0, r4
 8000ba0:	f7ff fdea 	bl	8000778 <nextion_inst_set>
			for(WEEK_Typedef j = 0 ; j < max_week ; j++){
 8000ba4:	2f07      	cmp	r7, #7
 8000ba6:	d19f      	bne.n	8000ae8 <basic_screen+0x178>
		for(uint8_t i = 0 ; i < 6 ; i++){
 8000ba8:	2388      	movs	r3, #136	; 0x88
 8000baa:	9a05      	ldr	r2, [sp, #20]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d18b      	bne.n	8000aca <basic_screen+0x15a>
		sprintf(bf, "draw %d,%d,%d,%d,RED", current_date_area.x0, current_date_area.y0, current_date_area.x1, current_date_area.y1);
 8000bb2:	9b06      	ldr	r3, [sp, #24]
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000bba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	4917      	ldr	r1, [pc, #92]	; (8000c1c <basic_screen+0x2ac>)
 8000bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000bc2:	f002 fd75 	bl	80036b0 <siprintf>
		nextion_inst_set(bf);
 8000bc6:	0020      	movs	r0, r4
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", button_data[i].area.x0, button_data[i].area.y0, button_data[i].area.x1, button_data[i].area.y1);
			nextion_inst_set(bf);
		}

		sprintf(bf, "draw %d,%d,%d,%d,BLACK", area.x0, area.y0, area.x1, area.y1);
		nextion_inst_set(bf);
 8000bc8:	f7ff fdd6 	bl	8000778 <nextion_inst_set>
	}
}
 8000bcc:	b015      	add	sp, #84	; 0x54
 8000bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bd0:	2000012e 	.word	0x2000012e
 8000bd4:	08003f7a 	.word	0x08003f7a
 8000bd8:	200002b8 	.word	0x200002b8
 8000bdc:	08004039 	.word	0x08004039
 8000be0:	2000036f 	.word	0x2000036f
 8000be4:	200002ba 	.word	0x200002ba
 8000be8:	2000004c 	.word	0x2000004c
 8000bec:	08004050 	.word	0x08004050
 8000bf0:	0800408e 	.word	0x0800408e
 8000bf4:	08004242 	.word	0x08004242
 8000bf8:	20000088 	.word	0x20000088
 8000bfc:	20000074 	.word	0x20000074
 8000c00:	08003fcf 	.word	0x08003fcf
 8000c04:	08003ff6 	.word	0x08003ff6
 8000c08:	0800400d 	.word	0x0800400d
 8000c0c:	20000068 	.word	0x20000068
 8000c10:	0800409f 	.word	0x0800409f
 8000c14:	080040ee 	.word	0x080040ee
 8000c18:	08003fa8 	.word	0x08003fa8
 8000c1c:	08004024 	.word	0x08004024
				sprintf(bf, "xstr %d,%d,410,30,0,BLACK,WHITE,0,1,3,\"%s | %d-%d-%02d\"", area.x0 + 3, area.y0 + 20 + i * 30,
 8000c20:	7890      	ldrb	r0, [r2, #2]
 8000c22:	231e      	movs	r3, #30
 8000c24:	9003      	str	r0, [sp, #12]
 8000c26:	7850      	ldrb	r0, [r2, #1]
						schedule_title[schedule.data[schedule.now_schedule].title[i]],
 8000c28:	1952      	adds	r2, r2, r5
				sprintf(bf, "xstr %d,%d,410,30,0,BLACK,WHITE,0,1,3,\"%s | %d-%d-%02d\"", area.x0 + 3, area.y0 + 20 + i * 30,
 8000c2a:	9002      	str	r0, [sp, #8]
 8000c2c:	20fa      	movs	r0, #250	; 0xfa
						schedule.data[schedule.now_schedule].time.year + 2000,
 8000c2e:	5709      	ldrsb	r1, [r1, r4]
				sprintf(bf, "xstr %d,%d,410,30,0,BLACK,WHITE,0,1,3,\"%s | %d-%d-%02d\"", area.x0 + 3, area.y0 + 20 + i * 30,
 8000c30:	00c0      	lsls	r0, r0, #3
 8000c32:	1809      	adds	r1, r1, r0
 8000c34:	9101      	str	r1, [sp, #4]
						schedule_title[schedule.data[schedule.now_schedule].title[i]],
 8000c36:	78d2      	ldrb	r2, [r2, #3]
				sprintf(bf, "xstr %d,%d,410,30,0,BLACK,WHITE,0,1,3,\"%s | %d-%d-%02d\"", area.x0 + 3, area.y0 + 20 + i * 30,
 8000c38:	49ae      	ldr	r1, [pc, #696]	; (8000ef4 <basic_screen+0x584>)
 8000c3a:	436b      	muls	r3, r5
 8000c3c:	0092      	lsls	r2, r2, #2
 8000c3e:	4eae      	ldr	r6, [pc, #696]	; (8000ef8 <basic_screen+0x588>)
 8000c40:	5852      	ldr	r2, [r2, r1]
 8000c42:	3348      	adds	r3, #72	; 0x48
 8000c44:	49ad      	ldr	r1, [pc, #692]	; (8000efc <basic_screen+0x58c>)
 8000c46:	9200      	str	r2, [sp, #0]
 8000c48:	0030      	movs	r0, r6
 8000c4a:	2226      	movs	r2, #38	; 0x26
 8000c4c:	f002 fd30 	bl	80036b0 <siprintf>
				nextion_inst_set(bf);
 8000c50:	0030      	movs	r0, r6
 8000c52:	f7ff fd91 	bl	8000778 <nextion_inst_set>
						schedule.area[i].y0,
 8000c56:	002b      	movs	r3, r5
 8000c58:	3311      	adds	r3, #17
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	18e4      	adds	r4, r4, r3
				sprintf(bf, "line %d,%d,%d,%d,RED", schedule.area[i].x0,
 8000c5e:	8961      	ldrh	r1, [r4, #10]
 8000c60:	88e3      	ldrh	r3, [r4, #6]
 8000c62:	88a2      	ldrh	r2, [r4, #4]
 8000c64:	9101      	str	r1, [sp, #4]
 8000c66:	4fa6      	ldr	r7, [pc, #664]	; (8000f00 <basic_screen+0x590>)
 8000c68:	8921      	ldrh	r1, [r4, #8]
 8000c6a:	0030      	movs	r0, r6
 8000c6c:	9100      	str	r1, [sp, #0]
 8000c6e:	0039      	movs	r1, r7
 8000c70:	f002 fd1e 	bl	80036b0 <siprintf>
				nextion_inst_set(bf);
 8000c74:	0030      	movs	r0, r6
 8000c76:	f7ff fd7f 	bl	8000778 <nextion_inst_set>
				sprintf(bf, "line %d,%d,%d,%d,RED", schedule.area[i].x0,
 8000c7a:	88e1      	ldrh	r1, [r4, #6]
 8000c7c:	8963      	ldrh	r3, [r4, #10]
 8000c7e:	88a2      	ldrh	r2, [r4, #4]
 8000c80:	9101      	str	r1, [sp, #4]
 8000c82:	8921      	ldrh	r1, [r4, #8]
 8000c84:	0030      	movs	r0, r6
 8000c86:	9100      	str	r1, [sp, #0]
 8000c88:	0039      	movs	r1, r7
 8000c8a:	f002 fd11 	bl	80036b0 <siprintf>
				nextion_inst_set(bf);
 8000c8e:	0030      	movs	r0, r6
 8000c90:	f7ff fd72 	bl	8000778 <nextion_inst_set>
				sprintf(bf, "draw %d,%d,%d,%d,BLACK", schedule.area[i].x0,
 8000c94:	8961      	ldrh	r1, [r4, #10]
 8000c96:	88e3      	ldrh	r3, [r4, #6]
 8000c98:	88a2      	ldrh	r2, [r4, #4]
 8000c9a:	9101      	str	r1, [sp, #4]
 8000c9c:	8921      	ldrh	r1, [r4, #8]
 8000c9e:	0030      	movs	r0, r6
 8000ca0:	9100      	str	r1, [sp, #0]
 8000ca2:	4998      	ldr	r1, [pc, #608]	; (8000f04 <basic_screen+0x594>)
 8000ca4:	f002 fd04 	bl	80036b0 <siprintf>
				nextion_inst_set(bf);
 8000ca8:	0030      	movs	r0, r6
 8000caa:	f7ff fd65 	bl	8000778 <nextion_inst_set>
			for(uint8_t i = 0 ; i < schedule.data[schedule.now_schedule].schedule_num ; i++){
 8000cae:	3501      	adds	r5, #1
 8000cb0:	b2ed      	uxtb	r5, r5
 8000cb2:	4c95      	ldr	r4, [pc, #596]	; (8000f08 <basic_screen+0x598>)
 8000cb4:	0023      	movs	r3, r4
 8000cb6:	33b5      	adds	r3, #181	; 0xb5
 8000cb8:	7819      	ldrb	r1, [r3, #0]
 8000cba:	230e      	movs	r3, #14
 8000cbc:	4359      	muls	r1, r3
 8000cbe:	1862      	adds	r2, r4, r1
 8000cc0:	7b53      	ldrb	r3, [r2, #13]
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d8ac      	bhi.n	8000c20 <basic_screen+0x2b0>
			button_data[0].title = "add";
 8000cc6:	4a91      	ldr	r2, [pc, #580]	; (8000f0c <basic_screen+0x59c>)
 8000cc8:	4b91      	ldr	r3, [pc, #580]	; (8000f10 <basic_screen+0x5a0>)
 8000cca:	611a      	str	r2, [r3, #16]
			button_data[1].title = "exit";
 8000ccc:	4a91      	ldr	r2, [pc, #580]	; (8000f14 <basic_screen+0x5a4>)
			button_data[1].title = "cancel";
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
 8000cd0:	4c8f      	ldr	r4, [pc, #572]	; (8000f10 <basic_screen+0x5a0>)
 8000cd2:	0027      	movs	r7, r4
 8000cd4:	3728      	adds	r7, #40	; 0x28
			sprintf(bf, "xstr %d,%d,80,25,0,%s,%s,1,1,1,\"%s\"", button_data[i].area.x0, button_data[i].area.y0, button_data[i].title_color, button_data[i].button_color, button_data[i].title);
 8000cd6:	6921      	ldr	r1, [r4, #16]
 8000cd8:	8863      	ldrh	r3, [r4, #2]
 8000cda:	8822      	ldrh	r2, [r4, #0]
 8000cdc:	9102      	str	r1, [sp, #8]
 8000cde:	68e1      	ldr	r1, [r4, #12]
 8000ce0:	4d85      	ldr	r5, [pc, #532]	; (8000ef8 <basic_screen+0x588>)
 8000ce2:	9101      	str	r1, [sp, #4]
 8000ce4:	68a1      	ldr	r1, [r4, #8]
 8000ce6:	0028      	movs	r0, r5
 8000ce8:	9100      	str	r1, [sp, #0]
 8000cea:	498b      	ldr	r1, [pc, #556]	; (8000f18 <basic_screen+0x5a8>)
 8000cec:	f002 fce0 	bl	80036b0 <siprintf>
			nextion_inst_set(bf);
 8000cf0:	0028      	movs	r0, r5
 8000cf2:	f7ff fd41 	bl	8000778 <nextion_inst_set>
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", button_data[i].area.x0, button_data[i].area.y0, button_data[i].area.x1, button_data[i].area.y1);
 8000cf6:	88e1      	ldrh	r1, [r4, #6]
 8000cf8:	8863      	ldrh	r3, [r4, #2]
 8000cfa:	8822      	ldrh	r2, [r4, #0]
 8000cfc:	9101      	str	r1, [sp, #4]
 8000cfe:	88a1      	ldrh	r1, [r4, #4]
 8000d00:	4e80      	ldr	r6, [pc, #512]	; (8000f04 <basic_screen+0x594>)
 8000d02:	9100      	str	r1, [sp, #0]
 8000d04:	0028      	movs	r0, r5
 8000d06:	0031      	movs	r1, r6
 8000d08:	f002 fcd2 	bl	80036b0 <siprintf>
		for(uint8_t i = 0 ; i < 2 ; i++){
 8000d0c:	3414      	adds	r4, #20
			nextion_inst_set(bf);
 8000d0e:	0028      	movs	r0, r5
 8000d10:	f7ff fd32 	bl	8000778 <nextion_inst_set>
		for(uint8_t i = 0 ; i < 2 ; i++){
 8000d14:	42a7      	cmp	r7, r4
 8000d16:	d1de      	bne.n	8000cd6 <basic_screen+0x366>
		sprintf(bf, "draw %d,%d,%d,%d,BLACK", area.x0, area.y0, area.x1, area.y1);
 8000d18:	23fa      	movs	r3, #250	; 0xfa
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	23be      	movs	r3, #190	; 0xbe
 8000d1e:	33ff      	adds	r3, #255	; 0xff
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	3b8a      	subs	r3, #138	; 0x8a
 8000d24:	2223      	movs	r2, #35	; 0x23
 8000d26:	0031      	movs	r1, r6
 8000d28:	0028      	movs	r0, r5
 8000d2a:	3bff      	subs	r3, #255	; 0xff
 8000d2c:	f002 fcc0 	bl	80036b0 <siprintf>
		nextion_inst_set(bf);
 8000d30:	0028      	movs	r0, r5
 8000d32:	e749      	b.n	8000bc8 <basic_screen+0x258>
		else if(menu == add){
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d1cb      	bne.n	8000cd0 <basic_screen+0x360>
			nextion_inst_set("xstr 100,52+21,150,20,0,BLACK,WHITE,0,1,1,\"Title\"");
 8000d38:	4878      	ldr	r0, [pc, #480]	; (8000f1c <basic_screen+0x5ac>)
 8000d3a:	f7ff fd1d 	bl	8000778 <nextion_inst_set>
			nextion_inst_set("xstr 270,52+21,150,20,0,BLACK,WHITE,0,1,1,\"Color\"");
 8000d3e:	4878      	ldr	r0, [pc, #480]	; (8000f20 <basic_screen+0x5b0>)
 8000d40:	f7ff fd1a 	bl	8000778 <nextion_inst_set>
					schedule_title[schedule.data[schedule.now_schedule].title[schedule.data[schedule.now_schedule].schedule_num]]);
 8000d44:	220e      	movs	r2, #14
 8000d46:	4b77      	ldr	r3, [pc, #476]	; (8000f24 <basic_screen+0x5b4>)
			sprintf(bf, "xstr %d,%d,100,20,0,BLACK,WHITE,1,1,1,\"%s\"", 100, 73 + 20,
 8000d48:	4f6a      	ldr	r7, [pc, #424]	; (8000ef4 <basic_screen+0x584>)
					schedule_title[schedule.data[schedule.now_schedule].title[schedule.data[schedule.now_schedule].schedule_num]]);
 8000d4a:	781b      	ldrb	r3, [r3, #0]
			sprintf(bf, "xstr %d,%d,100,20,0,BLACK,WHITE,1,1,1,\"%s\"", 100, 73 + 20,
 8000d4c:	4976      	ldr	r1, [pc, #472]	; (8000f28 <basic_screen+0x5b8>)
					schedule_title[schedule.data[schedule.now_schedule].title[schedule.data[schedule.now_schedule].schedule_num]]);
 8000d4e:	4353      	muls	r3, r2
 8000d50:	18f3      	adds	r3, r6, r3
 8000d52:	7b5a      	ldrb	r2, [r3, #13]
			sprintf(bf, "xstr %d,%d,100,20,0,BLACK,WHITE,1,1,1,\"%s\"", 100, 73 + 20,
 8000d54:	0020      	movs	r0, r4
					schedule_title[schedule.data[schedule.now_schedule].title[schedule.data[schedule.now_schedule].schedule_num]]);
 8000d56:	189b      	adds	r3, r3, r2
 8000d58:	78db      	ldrb	r3, [r3, #3]
			sprintf(bf, "xstr %d,%d,100,20,0,BLACK,WHITE,1,1,1,\"%s\"", 100, 73 + 20,
 8000d5a:	2264      	movs	r2, #100	; 0x64
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	59db      	ldr	r3, [r3, r7]
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	235d      	movs	r3, #93	; 0x5d
 8000d64:	f002 fca4 	bl	80036b0 <siprintf>
			nextion_inst_set(bf);
 8000d68:	0020      	movs	r0, r4
 8000d6a:	f7ff fd05 	bl	8000778 <nextion_inst_set>
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", 100, 73 + 20, 100 + 100, 73 + 20 + 20);
 8000d6e:	2371      	movs	r3, #113	; 0x71
 8000d70:	4d64      	ldr	r5, [pc, #400]	; (8000f04 <basic_screen+0x594>)
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	3357      	adds	r3, #87	; 0x57
 8000d76:	0029      	movs	r1, r5
 8000d78:	2264      	movs	r2, #100	; 0x64
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	0020      	movs	r0, r4
 8000d7e:	3b6b      	subs	r3, #107	; 0x6b
 8000d80:	f002 fc96 	bl	80036b0 <siprintf>
			nextion_inst_set(bf);
 8000d84:	0020      	movs	r0, r4
 8000d86:	f7ff fcf7 	bl	8000778 <nextion_inst_set>
					schedule_color[schedule.data[schedule.now_schedule].color[schedule.data[schedule.now_schedule].schedule_num]],
 8000d8a:	220e      	movs	r2, #14
 8000d8c:	4965      	ldr	r1, [pc, #404]	; (8000f24 <basic_screen+0x5b4>)
			sprintf(bf, "xstr %d,%d,100,20,0,BLACK,%s,1,1,1,\"%s\"", 270, 73 + 20,
 8000d8e:	0020      	movs	r0, r4
					schedule_color[schedule.data[schedule.now_schedule].color[schedule.data[schedule.now_schedule].schedule_num]],
 8000d90:	780b      	ldrb	r3, [r1, #0]
			sprintf(bf, "xstr %d,%d,100,20,0,BLACK,%s,1,1,1,\"%s\"", 270, 73 + 20,
 8000d92:	4966      	ldr	r1, [pc, #408]	; (8000f2c <basic_screen+0x5bc>)
					schedule_color[schedule.data[schedule.now_schedule].color[schedule.data[schedule.now_schedule].schedule_num]],
 8000d94:	4353      	muls	r3, r2
 8000d96:	18f3      	adds	r3, r6, r3
 8000d98:	7b5a      	ldrb	r2, [r3, #13]
 8000d9a:	189b      	adds	r3, r3, r2
 8000d9c:	7a1b      	ldrb	r3, [r3, #8]
			sprintf(bf, "xstr %d,%d,100,20,0,BLACK,%s,1,1,1,\"%s\"", 270, 73 + 20,
 8000d9e:	4a64      	ldr	r2, [pc, #400]	; (8000f30 <basic_screen+0x5c0>)
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	589a      	ldr	r2, [r3, r2]
 8000da4:	9201      	str	r2, [sp, #4]
 8000da6:	4a63      	ldr	r2, [pc, #396]	; (8000f34 <basic_screen+0x5c4>)
 8000da8:	589a      	ldr	r2, [r3, r2]
 8000daa:	235d      	movs	r3, #93	; 0x5d
 8000dac:	9200      	str	r2, [sp, #0]
 8000dae:	2287      	movs	r2, #135	; 0x87
 8000db0:	0052      	lsls	r2, r2, #1
 8000db2:	f002 fc7d 	bl	80036b0 <siprintf>
			nextion_inst_set(bf);
 8000db6:	0020      	movs	r0, r4
 8000db8:	f7ff fcde 	bl	8000778 <nextion_inst_set>
			sprintf(bf, "draw %d,%d,%d,%d,BLACK", 270, 73 + 20, 270 + 100, 73 + 20 + 20);
 8000dbc:	2371      	movs	r3, #113	; 0x71
 8000dbe:	2287      	movs	r2, #135	; 0x87
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	33ff      	adds	r3, #255	; 0xff
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	3b16      	subs	r3, #22
 8000dca:	0029      	movs	r1, r5
 8000dcc:	3bff      	subs	r3, #255	; 0xff
 8000dce:	0052      	lsls	r2, r2, #1
 8000dd0:	0020      	movs	r0, r4
 8000dd2:	f002 fc6d 	bl	80036b0 <siprintf>
			nextion_inst_set(bf);
 8000dd6:	0020      	movs	r0, r4
 8000dd8:	f7ff fcce 	bl	8000778 <nextion_inst_set>
			for(uint8_t i = 0 ; i < 2 ; i++){
 8000ddc:	4d56      	ldr	r5, [pc, #344]	; (8000f38 <basic_screen+0x5c8>)
				sprintf(bf, "fill %d,%d,20,20,GRAY", check_box_area[i].x0, check_box_area[i].y0);
 8000dde:	4c46      	ldr	r4, [pc, #280]	; (8000ef8 <basic_screen+0x588>)
 8000de0:	886b      	ldrh	r3, [r5, #2]
 8000de2:	882a      	ldrh	r2, [r5, #0]
 8000de4:	4955      	ldr	r1, [pc, #340]	; (8000f3c <basic_screen+0x5cc>)
 8000de6:	0020      	movs	r0, r4
 8000de8:	f002 fc62 	bl	80036b0 <siprintf>
				nextion_inst_set(bf);
 8000dec:	0020      	movs	r0, r4
 8000dee:	f7ff fcc3 	bl	8000778 <nextion_inst_set>
				sprintf(bf, "line %d,%d,%d,%d,BLACK", check_box_area[i].x0, check_box_area[i].y0, (check_box_area[i].x0 + check_box_area[i].x1) / 2, check_box_area[i].y1);
 8000df2:	88e9      	ldrh	r1, [r5, #6]
 8000df4:	882a      	ldrh	r2, [r5, #0]
 8000df6:	886b      	ldrh	r3, [r5, #2]
 8000df8:	9101      	str	r1, [sp, #4]
 8000dfa:	88a9      	ldrh	r1, [r5, #4]
 8000dfc:	4e50      	ldr	r6, [pc, #320]	; (8000f40 <basic_screen+0x5d0>)
 8000dfe:	1889      	adds	r1, r1, r2
 8000e00:	1049      	asrs	r1, r1, #1
 8000e02:	9100      	str	r1, [sp, #0]
 8000e04:	0020      	movs	r0, r4
 8000e06:	0031      	movs	r1, r6
 8000e08:	f002 fc52 	bl	80036b0 <siprintf>
				nextion_inst_set(bf);
 8000e0c:	0020      	movs	r0, r4
 8000e0e:	f7ff fcb3 	bl	8000778 <nextion_inst_set>
				sprintf(bf, "line %d,%d,%d,%d,BLACK", (check_box_area[i].x0 + check_box_area[i].x1) / 2, check_box_area[i].y1, check_box_area[i].x1, check_box_area[i].y0);
 8000e12:	88a9      	ldrh	r1, [r5, #4]
 8000e14:	882a      	ldrh	r2, [r5, #0]
 8000e16:	8868      	ldrh	r0, [r5, #2]
 8000e18:	1852      	adds	r2, r2, r1
 8000e1a:	88eb      	ldrh	r3, [r5, #6]
 8000e1c:	1052      	asrs	r2, r2, #1
 8000e1e:	9001      	str	r0, [sp, #4]
 8000e20:	9100      	str	r1, [sp, #0]
 8000e22:	0020      	movs	r0, r4
 8000e24:	0031      	movs	r1, r6
 8000e26:	f002 fc43 	bl	80036b0 <siprintf>
				nextion_inst_set(bf);
 8000e2a:	0020      	movs	r0, r4
 8000e2c:	f7ff fca4 	bl	8000778 <nextion_inst_set>
				sprintf(bf, "draw %d,%d,%d,%d,BLACK", check_box_area[i].x0, check_box_area[i].y0, check_box_area[i].x1, check_box_area[i].y1);
 8000e30:	88e9      	ldrh	r1, [r5, #6]
 8000e32:	886b      	ldrh	r3, [r5, #2]
 8000e34:	882a      	ldrh	r2, [r5, #0]
 8000e36:	9101      	str	r1, [sp, #4]
 8000e38:	88a9      	ldrh	r1, [r5, #4]
 8000e3a:	0020      	movs	r0, r4
 8000e3c:	9100      	str	r1, [sp, #0]
 8000e3e:	4931      	ldr	r1, [pc, #196]	; (8000f04 <basic_screen+0x594>)
 8000e40:	f002 fc36 	bl	80036b0 <siprintf>
				nextion_inst_set(bf);
 8000e44:	0020      	movs	r0, r4
 8000e46:	f7ff fc97 	bl	8000778 <nextion_inst_set>
			for(uint8_t i = 0 ; i < 2 ; i++){
 8000e4a:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <basic_screen+0x5d4>)
 8000e4c:	3508      	adds	r5, #8
 8000e4e:	429d      	cmp	r5, r3
 8000e50:	d1c5      	bne.n	8000dde <basic_screen+0x46e>
			if(title_state == menu_detail){
 8000e52:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <basic_screen+0x5d8>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d02c      	beq.n	8000eb4 <basic_screen+0x544>
			if(color_state == menu_detail){
 8000e5a:	4b3c      	ldr	r3, [pc, #240]	; (8000f4c <basic_screen+0x5dc>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d123      	bne.n	8000eaa <basic_screen+0x53a>
 8000e62:	2471      	movs	r4, #113	; 0x71
 8000e64:	4f33      	ldr	r7, [pc, #204]	; (8000f34 <basic_screen+0x5c4>)
 8000e66:	4e32      	ldr	r6, [pc, #200]	; (8000f30 <basic_screen+0x5c0>)
					sprintf(bf, "xstr %d,%d,100,20,0,BLACK,%s,1,1,1,\"%s\"", 270, 73 + 40 + (i * 20), schedule_color[i], color_string[i]);
 8000e68:	2287      	movs	r2, #135	; 0x87
 8000e6a:	ce08      	ldmia	r6!, {r3}
 8000e6c:	4d22      	ldr	r5, [pc, #136]	; (8000ef8 <basic_screen+0x588>)
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	cf08      	ldmia	r7!, {r3}
 8000e72:	492e      	ldr	r1, [pc, #184]	; (8000f2c <basic_screen+0x5bc>)
 8000e74:	0052      	lsls	r2, r2, #1
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	0028      	movs	r0, r5
 8000e7a:	0023      	movs	r3, r4
 8000e7c:	9405      	str	r4, [sp, #20]
 8000e7e:	f002 fc17 	bl	80036b0 <siprintf>
					nextion_inst_set(bf);
 8000e82:	0028      	movs	r0, r5
 8000e84:	f7ff fc78 	bl	8000778 <nextion_inst_set>
					sprintf(bf, "draw %d,%d,%d,%d,BLACK", 270, 73 + 40 + (i * 20), 270 + 100, 73 + 40 + ((i + 1) * 20));
 8000e88:	23b9      	movs	r3, #185	; 0xb9
 8000e8a:	2287      	movs	r2, #135	; 0x87
 8000e8c:	3414      	adds	r4, #20
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	0028      	movs	r0, r5
 8000e94:	9b05      	ldr	r3, [sp, #20]
 8000e96:	491b      	ldr	r1, [pc, #108]	; (8000f04 <basic_screen+0x594>)
 8000e98:	9401      	str	r4, [sp, #4]
 8000e9a:	0052      	lsls	r2, r2, #1
 8000e9c:	f002 fc08 	bl	80036b0 <siprintf>
					nextion_inst_set(bf);
 8000ea0:	0028      	movs	r0, r5
 8000ea2:	f7ff fc69 	bl	8000778 <nextion_inst_set>
				for(COLOR_Typedef i = red ; i < max_color ; i++){
 8000ea6:	2cd5      	cmp	r4, #213	; 0xd5
 8000ea8:	d1de      	bne.n	8000e68 <basic_screen+0x4f8>
			button_data[0].title = "save";
 8000eaa:	4a29      	ldr	r2, [pc, #164]	; (8000f50 <basic_screen+0x5e0>)
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <basic_screen+0x5a0>)
 8000eae:	611a      	str	r2, [r3, #16]
			button_data[1].title = "cancel";
 8000eb0:	4a28      	ldr	r2, [pc, #160]	; (8000f54 <basic_screen+0x5e4>)
 8000eb2:	e70c      	b.n	8000cce <basic_screen+0x35e>
 8000eb4:	003e      	movs	r6, r7
			if(title_state == menu_detail){
 8000eb6:	2571      	movs	r5, #113	; 0x71
					sprintf(bf, "xstr %d,%d,100,20,0,BLACK,WHITE,1,1,1,\"%s\"", 100, 73 + 40 + (i * 20), schedule_title[i]);
 8000eb8:	2764      	movs	r7, #100	; 0x64
 8000eba:	ce08      	ldmia	r6!, {r3}
 8000ebc:	003a      	movs	r2, r7
 8000ebe:	491a      	ldr	r1, [pc, #104]	; (8000f28 <basic_screen+0x5b8>)
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	0020      	movs	r0, r4
 8000ec4:	002b      	movs	r3, r5
 8000ec6:	9505      	str	r5, [sp, #20]
 8000ec8:	f002 fbf2 	bl	80036b0 <siprintf>
					nextion_inst_set(bf);
 8000ecc:	0020      	movs	r0, r4
 8000ece:	f7ff fc53 	bl	8000778 <nextion_inst_set>
					sprintf(bf, "draw %d,%d,%d,%d,BLACK", 100, 73 + 40 + (i * 20), 100 + 100, 73 + 40 + ((i + 1) * 20));
 8000ed2:	23c8      	movs	r3, #200	; 0xc8
 8000ed4:	3514      	adds	r5, #20
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	003a      	movs	r2, r7
 8000eda:	0020      	movs	r0, r4
 8000edc:	9b05      	ldr	r3, [sp, #20]
 8000ede:	4909      	ldr	r1, [pc, #36]	; (8000f04 <basic_screen+0x594>)
 8000ee0:	9501      	str	r5, [sp, #4]
 8000ee2:	f002 fbe5 	bl	80036b0 <siprintf>
					nextion_inst_set(bf);
 8000ee6:	0020      	movs	r0, r4
 8000ee8:	f7ff fc46 	bl	8000778 <nextion_inst_set>
				for(TITLE_Typedef i = meeting ; i < max_title ; i++){
 8000eec:	2dd5      	cmp	r5, #213	; 0xd5
 8000eee:	d1e4      	bne.n	8000eba <basic_screen+0x54a>
 8000ef0:	e7b3      	b.n	8000e5a <basic_screen+0x4ea>
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	20000088 	.word	0x20000088
 8000ef8:	2000012e 	.word	0x2000012e
 8000efc:	080040a5 	.word	0x080040a5
 8000f00:	080040dd 	.word	0x080040dd
 8000f04:	08003ff6 	.word	0x08003ff6
 8000f08:	200002ba 	.word	0x200002ba
 8000f0c:	080040f2 	.word	0x080040f2
 8000f10:	20000000 	.word	0x20000000
 8000f14:	080040f6 	.word	0x080040f6
 8000f18:	080041d4 	.word	0x080041d4
 8000f1c:	080040fb 	.word	0x080040fb
 8000f20:	0800412d 	.word	0x0800412d
 8000f24:	2000036f 	.word	0x2000036f
 8000f28:	0800415f 	.word	0x0800415f
 8000f2c:	0800418a 	.word	0x0800418a
 8000f30:	20000038 	.word	0x20000038
 8000f34:	20000074 	.word	0x20000074
 8000f38:	20000028 	.word	0x20000028
 8000f3c:	080041b2 	.word	0x080041b2
 8000f40:	0800408e 	.word	0x0800408e
 8000f44:	20000038 	.word	0x20000038
 8000f48:	20000370 	.word	0x20000370
 8000f4c:	20000192 	.word	0x20000192
 8000f50:	080041c8 	.word	0x080041c8
 8000f54:	080041cd 	.word	0x080041cd

08000f58 <task_fuc>:

void task_fuc(void){
 8000f58:	b5f0      	push	{r4, r5, r6, r7, lr}
	POS_Typedef befo_touch = { 0, 0, 0 };
	SLIDE_Typedef slide = none;
 8000f5a:	2500      	movs	r5, #0
void task_fuc(void){
 8000f5c:	b093      	sub	sp, #76	; 0x4c
	SLIDE_Typedef slide = none;
 8000f5e:	ab0a      	add	r3, sp, #40	; 0x28
 8000f60:	71dd      	strb	r5, [r3, #7]

	TIME_Typedef time = { 23, 9, 16 };
 8000f62:	2310      	movs	r3, #16
 8000f64:	2209      	movs	r2, #9
 8000f66:	2017      	movs	r0, #23
 8000f68:	a90c      	add	r1, sp, #48	; 0x30
 8000f6a:	708b      	strb	r3, [r1, #2]
	TIME_Typedef print_time = { 23, 9, 1 };
 8000f6c:	ab0d      	add	r3, sp, #52	; 0x34
	TIME_Typedef time = { 23, 9, 16 };
 8000f6e:	704a      	strb	r2, [r1, #1]
	TIME_Typedef print_time = { 23, 9, 1 };
 8000f70:	705a      	strb	r2, [r3, #1]
 8000f72:	3a08      	subs	r2, #8
	TIME_Typedef time = { 23, 9, 16 };
 8000f74:	7008      	strb	r0, [r1, #0]
	TIME_Typedef print_time = { 23, 9, 1 };
 8000f76:	7018      	strb	r0, [r3, #0]
 8000f78:	709a      	strb	r2, [r3, #2]
	TIME_Typedef schedule_time = time;
 8000f7a:	a80e      	add	r0, sp, #56	; 0x38
 8000f7c:	3202      	adds	r2, #2
 8000f7e:	f002 fb73 	bl	8003668 <memcpy>

	uint8_t screen_update = 0;

	uint8_t sw[2] = { SW(1), SW(2) };
 8000f82:	22a0      	movs	r2, #160	; 0xa0
 8000f84:	2101      	movs	r1, #1
 8000f86:	05d2      	lsls	r2, r2, #23
 8000f88:	6913      	ldr	r3, [r2, #16]
	uint8_t befo_sw[2] = { sw[0], sw[1] };

	nextion_inst_set("cls WHITE");
 8000f8a:	4cbe      	ldr	r4, [pc, #760]	; (8001284 <task_fuc+0x32c>)
	uint8_t sw[2] = { SW(1), SW(2) };
 8000f8c:	4399      	bics	r1, r3
 8000f8e:	6913      	ldr	r3, [r2, #16]
 8000f90:	2201      	movs	r2, #1
 8000f92:	085b      	lsrs	r3, r3, #1
 8000f94:	439a      	bics	r2, r3
	nextion_inst_set("cls WHITE");
 8000f96:	0020      	movs	r0, r4
	uint8_t sw[2] = { SW(1), SW(2) };
 8000f98:	9108      	str	r1, [sp, #32]
 8000f9a:	9207      	str	r2, [sp, #28]
	nextion_inst_set("cls WHITE");
 8000f9c:	f7ff fbec 	bl	8000778 <nextion_inst_set>
	nextion_inst_set("cls WHITE");
 8000fa0:	0020      	movs	r0, r4
 8000fa2:	f7ff fbe9 	bl	8000778 <nextion_inst_set>
	nextion_inst_set("cls WHITE");
 8000fa6:	0020      	movs	r0, r4
 8000fa8:	f7ff fbe6 	bl	8000778 <nextion_inst_set>
	uint8_t screen_update = 0;
 8000fac:	002f      	movs	r7, r5

	while(1){
		get_touch(&curXY);
 8000fae:	4cb6      	ldr	r4, [pc, #728]	; (8001288 <task_fuc+0x330>)
 8000fb0:	0020      	movs	r0, r4
 8000fb2:	f7ff fbff 	bl	80007b4 <get_touch>
		get_slide(&curXY, &slide);
 8000fb6:	ab0a      	add	r3, sp, #40	; 0x28
 8000fb8:	1dd9      	adds	r1, r3, #7
 8000fba:	0020      	movs	r0, r4
 8000fbc:	f7ff fc3a 	bl	8000834 <get_slide>

		sw[0] = SW(1);
 8000fc0:	22a0      	movs	r2, #160	; 0xa0
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	05d2      	lsls	r2, r2, #23
 8000fc6:	6913      	ldr	r3, [r2, #16]
		sw[1] = SW(2);
 8000fc8:	6912      	ldr	r2, [r2, #16]
		sw[0] = SW(1);
 8000fca:	4399      	bics	r1, r3
		sw[1] = SW(2);
 8000fcc:	2302      	movs	r3, #2
 8000fce:	401a      	ands	r2, r3
 8000fd0:	9204      	str	r2, [sp, #16]
 8000fd2:	4253      	negs	r3, r2
 8000fd4:	4153      	adcs	r3, r2
 8000fd6:	b2db      	uxtb	r3, r3
		sw[0] = SW(1);
 8000fd8:	9102      	str	r1, [sp, #8]
		sw[1] = SW(2);
 8000fda:	9305      	str	r3, [sp, #20]

		if(screen_update == 0){
 8000fdc:	2f00      	cmp	r7, #0
 8000fde:	d103      	bne.n	8000fe8 <task_fuc+0x90>
			basic_screen(&time, &print_time);
 8000fe0:	a90d      	add	r1, sp, #52	; 0x34
 8000fe2:	a80c      	add	r0, sp, #48	; 0x30
 8000fe4:	f7ff fcc4 	bl	8000970 <basic_screen>

			screen_update = 1;
		}

		/* slide function */
		if(slide != none && menu == basic){
 8000fe8:	ab0a      	add	r3, sp, #40	; 0x28
 8000fea:	79db      	ldrb	r3, [r3, #7]
 8000fec:	2701      	movs	r7, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d016      	beq.n	8001020 <task_fuc+0xc8>
 8000ff2:	4ba6      	ldr	r3, [pc, #664]	; (800128c <task_fuc+0x334>)
 8000ff4:	781f      	ldrb	r7, [r3, #0]
 8000ff6:	2f00      	cmp	r7, #0
 8000ff8:	d12d      	bne.n	8001056 <task_fuc+0xfe>
	if(state) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ffa:	f7ff fba7 	bl	800074c <BUZ.part.0>
			screen_update = 0;

			BUZ(1);
			HAL_Delay(100);
 8000ffe:	2064      	movs	r0, #100	; 0x64
 8001000:	f000 fcb6 	bl	8001970 <HAL_Delay>
			BUZ(0);
 8001004:	0038      	movs	r0, r7
 8001006:	f7ff fba9 	bl	800075c <BUZ>

			if(slide == left_slide){
 800100a:	ab0a      	add	r3, sp, #40	; 0x28
 800100c:	79d9      	ldrb	r1, [r3, #7]
 800100e:	2901      	cmp	r1, #1
 8001010:	d114      	bne.n	800103c <task_fuc+0xe4>
				print_time.month++;
 8001012:	aa0d      	add	r2, sp, #52	; 0x34
 8001014:	7853      	ldrb	r3, [r2, #1]
 8001016:	3301      	adds	r3, #1
 8001018:	b2db      	uxtb	r3, r3
				if(print_time.month > 12){
 800101a:	2b0c      	cmp	r3, #12
 800101c:	d809      	bhi.n	8001032 <task_fuc+0xda>
					print_time.month = 1;
					print_time.year++;
				}
			}
			else if(slide == right_slide){
				print_time.month--;
 800101e:	7053      	strb	r3, [r2, #1]
				}
			}
		}

		/* touch function */
		if(befo_touch.touched != curXY.touched){
 8001020:	4c99      	ldr	r4, [pc, #612]	; (8001288 <task_fuc+0x330>)
 8001022:	7926      	ldrb	r6, [r4, #4]
 8001024:	42ae      	cmp	r6, r5
 8001026:	d100      	bne.n	800102a <task_fuc+0xd2>
 8001028:	e0a5      	b.n	8001176 <task_fuc+0x21e>
			screen_update = 0;

			if(curXY.touched == 1){
 800102a:	2e01      	cmp	r6, #1
 800102c:	d015      	beq.n	800105a <task_fuc+0x102>
			screen_update = 0;
 800102e:	2700      	movs	r7, #0
 8001030:	e0a1      	b.n	8001176 <task_fuc+0x21e>
					print_time.year++;
 8001032:	7813      	ldrb	r3, [r2, #0]
					print_time.month = 1;
 8001034:	7051      	strb	r1, [r2, #1]
					print_time.year++;
 8001036:	3301      	adds	r3, #1
					print_time.year--;
 8001038:	7013      	strb	r3, [r2, #0]
 800103a:	e7f1      	b.n	8001020 <task_fuc+0xc8>
			else if(slide == right_slide){
 800103c:	2902      	cmp	r1, #2
 800103e:	d1ef      	bne.n	8001020 <task_fuc+0xc8>
				print_time.month--;
 8001040:	aa0d      	add	r2, sp, #52	; 0x34
 8001042:	7853      	ldrb	r3, [r2, #1]
 8001044:	3b01      	subs	r3, #1
 8001046:	b2db      	uxtb	r3, r3
				if(print_time.month == 0){
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e8      	bne.n	800101e <task_fuc+0xc6>
					print_time.month = 12;
 800104c:	230c      	movs	r3, #12
 800104e:	7053      	strb	r3, [r2, #1]
					print_time.year--;
 8001050:	7813      	ldrb	r3, [r2, #0]
 8001052:	3b01      	subs	r3, #1
 8001054:	e7f0      	b.n	8001038 <task_fuc+0xe0>
 8001056:	2701      	movs	r7, #1
 8001058:	e7e2      	b.n	8001020 <task_fuc+0xc8>
				if(menu == basic && slide == none){
 800105a:	4b8c      	ldr	r3, [pc, #560]	; (800128c <task_fuc+0x334>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d000      	beq.n	8001064 <task_fuc+0x10c>
 8001062:	e0bf      	b.n	80011e4 <task_fuc+0x28c>
 8001064:	ab0a      	add	r3, sp, #40	; 0x28
 8001066:	79df      	ldrb	r7, [r3, #7]
 8001068:	2f00      	cmp	r7, #0
 800106a:	d1e0      	bne.n	800102e <task_fuc+0xd6>
					TIME_Typedef touch_time = { print_time.year, print_time.month, 1 };
 800106c:	aa0d      	add	r2, sp, #52	; 0x34
 800106e:	7811      	ldrb	r1, [r2, #0]
 8001070:	ab0f      	add	r3, sp, #60	; 0x3c
 8001072:	7019      	strb	r1, [r3, #0]
 8001074:	7852      	ldrb	r2, [r2, #1]
 8001076:	709e      	strb	r6, [r3, #2]
 8001078:	705a      	strb	r2, [r3, #1]
 800107a:	2348      	movs	r3, #72	; 0x48
 800107c:	9303      	str	r3, [sp, #12]

					for(uint8_t i = 0 ; i < 6 ; i++){
						for(WEEK_Typedef j = 0 ; j < max_week ; j++){
							AREA_Typedef area = { j * 68, i * 40 + 32, j == 6 ? 480 : (j + 1) * 68, (i + 1) * 40 + 32 };
 800107e:	9b03      	ldr	r3, [sp, #12]
 8001080:	3b28      	subs	r3, #40	; 0x28
 8001082:	b29b      	uxth	r3, r3
 8001084:	9309      	str	r3, [sp, #36]	; 0x24
 8001086:	2300      	movs	r3, #0
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	2344      	movs	r3, #68	; 0x44
 800108c:	9a01      	ldr	r2, [sp, #4]
 800108e:	ad10      	add	r5, sp, #64	; 0x40
 8001090:	4353      	muls	r3, r2
 8001092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001094:	9901      	ldr	r1, [sp, #4]
 8001096:	806a      	strh	r2, [r5, #2]
 8001098:	466a      	mov	r2, sp
 800109a:	7916      	ldrb	r6, [r2, #4]
 800109c:	22f0      	movs	r2, #240	; 0xf0
 800109e:	b29b      	uxth	r3, r3
 80010a0:	802b      	strh	r3, [r5, #0]
 80010a2:	0052      	lsls	r2, r2, #1
 80010a4:	2906      	cmp	r1, #6
 80010a6:	d001      	beq.n	80010ac <task_fuc+0x154>
 80010a8:	3344      	adds	r3, #68	; 0x44
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	9b03      	ldr	r3, [sp, #12]

							WEEK_Typedef touch_time_day = day_cal(&touch_time);
 80010ae:	ac0f      	add	r4, sp, #60	; 0x3c
 80010b0:	0020      	movs	r0, r4
							AREA_Typedef area = { j * 68, i * 40 + 32, j == 6 ? 480 : (j + 1) * 68, (i + 1) * 40 + 32 };
 80010b2:	80aa      	strh	r2, [r5, #4]
 80010b4:	80eb      	strh	r3, [r5, #6]
							WEEK_Typedef touch_time_day = day_cal(&touch_time);
 80010b6:	f7ff fbfd 	bl	80008b4 <day_cal>

							if(touch_time_day == j && touch_time.day <= last_day[touch_time.month - 1]){
 80010ba:	42b0      	cmp	r0, r6
 80010bc:	d14d      	bne.n	800115a <task_fuc+0x202>
 80010be:	7862      	ldrb	r2, [r4, #1]
 80010c0:	4b73      	ldr	r3, [pc, #460]	; (8001290 <task_fuc+0x338>)
 80010c2:	189b      	adds	r3, r3, r2
 80010c4:	3b01      	subs	r3, #1
 80010c6:	78a2      	ldrb	r2, [r4, #2]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d845      	bhi.n	800115a <task_fuc+0x202>
								if(area_check(&curXY, &area)){
 80010ce:	0029      	movs	r1, r5
 80010d0:	486d      	ldr	r0, [pc, #436]	; (8001288 <task_fuc+0x330>)
 80010d2:	f7ff fbdb 	bl	800088c <area_check>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d03b      	beq.n	8001152 <task_fuc+0x1fa>
									schedule_time = touch_time;

									menu = detail;
 80010da:	2201      	movs	r2, #1
									schedule_time = touch_time;
 80010dc:	8823      	ldrh	r3, [r4, #0]
 80010de:	ad0e      	add	r5, sp, #56	; 0x38
 80010e0:	802b      	strh	r3, [r5, #0]
 80010e2:	78a3      	ldrb	r3, [r4, #2]

									for(uint8_t i = 0 ; i < schedule.schedule_num ; i++){
 80010e4:	4c6b      	ldr	r4, [pc, #428]	; (8001294 <task_fuc+0x33c>)
									schedule_time = touch_time;
 80010e6:	70ab      	strb	r3, [r5, #2]
									menu = detail;
 80010e8:	4b68      	ldr	r3, [pc, #416]	; (800128c <task_fuc+0x334>)
									for(uint8_t i = 0 ; i < schedule.schedule_num ; i++){
 80010ea:	2600      	movs	r6, #0
									menu = detail;
 80010ec:	701a      	strb	r2, [r3, #0]
									for(uint8_t i = 0 ; i < schedule.schedule_num ; i++){
 80010ee:	0023      	movs	r3, r4
 80010f0:	33b4      	adds	r3, #180	; 0xb4
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	9306      	str	r3, [sp, #24]
 80010f6:	9a06      	ldr	r2, [sp, #24]
 80010f8:	b2f3      	uxtb	r3, r6
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d90e      	bls.n	800111c <task_fuc+0x1c4>
										schedule.now_schedule = i;
										if(equal_time_check(&schedule.data[i].time, &schedule_time)) {
 80010fe:	200e      	movs	r0, #14
 8001100:	4370      	muls	r0, r6
										schedule.now_schedule = i;
 8001102:	4a65      	ldr	r2, [pc, #404]	; (8001298 <task_fuc+0x340>)
										if(equal_time_check(&schedule.data[i].time, &schedule_time)) {
 8001104:	0029      	movs	r1, r5
 8001106:	1820      	adds	r0, r4, r0
										schedule.now_schedule = i;
 8001108:	7013      	strb	r3, [r2, #0]
										if(equal_time_check(&schedule.data[i].time, &schedule_time)) {
 800110a:	f7ff fc1d 	bl	8000948 <equal_time_check>
 800110e:	3601      	adds	r6, #1
 8001110:	2800      	cmp	r0, #0
 8001112:	d0f0      	beq.n	80010f6 <task_fuc+0x19e>
											schedule.schedule_num--;
 8001114:	9e06      	ldr	r6, [sp, #24]
 8001116:	34b4      	adds	r4, #180	; 0xb4
 8001118:	3e01      	subs	r6, #1
 800111a:	7026      	strb	r6, [r4, #0]
											break;
										}
									}

									if(schedule.data[schedule.now_schedule].time.year == 0) schedule.data[schedule.now_schedule].time = schedule_time;
 800111c:	485d      	ldr	r0, [pc, #372]	; (8001294 <task_fuc+0x33c>)
 800111e:	0003      	movs	r3, r0
 8001120:	33b5      	adds	r3, #181	; 0xb5
 8001122:	781a      	ldrb	r2, [r3, #0]
 8001124:	230e      	movs	r3, #14
 8001126:	4353      	muls	r3, r2
 8001128:	561a      	ldrsb	r2, [r3, r0]
 800112a:	2a00      	cmp	r2, #0
 800112c:	d104      	bne.n	8001138 <task_fuc+0x1e0>
 800112e:	18c0      	adds	r0, r0, r3
 8001130:	3203      	adds	r2, #3
 8001132:	a90e      	add	r1, sp, #56	; 0x38
 8001134:	f002 fa98 	bl	8003668 <memcpy>
									schedule.schedule_num++;
 8001138:	4b56      	ldr	r3, [pc, #344]	; (8001294 <task_fuc+0x33c>)
 800113a:	33b4      	adds	r3, #180	; 0xb4
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	3201      	adds	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
	if(state) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001142:	f7ff fb03 	bl	800074c <BUZ.part.0>

									BUZ(1);
									HAL_Delay(100);
 8001146:	2064      	movs	r0, #100	; 0x64
 8001148:	f000 fc12 	bl	8001970 <HAL_Delay>
									BUZ(0);
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff fb05 	bl	800075c <BUZ>
								}
								touch_time.day++;
 8001152:	aa0f      	add	r2, sp, #60	; 0x3c
 8001154:	7893      	ldrb	r3, [r2, #2]
 8001156:	3301      	adds	r3, #1
 8001158:	7093      	strb	r3, [r2, #2]
						for(WEEK_Typedef j = 0 ; j < max_week ; j++){
 800115a:	9b01      	ldr	r3, [sp, #4]
 800115c:	3301      	adds	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	2b07      	cmp	r3, #7
 8001162:	d192      	bne.n	800108a <task_fuc+0x132>
					for(uint8_t i = 0 ; i < 6 ; i++){
 8001164:	9b03      	ldr	r3, [sp, #12]
 8001166:	3328      	adds	r3, #40	; 0x28
 8001168:	b29b      	uxth	r3, r3
 800116a:	9303      	str	r3, [sp, #12]
 800116c:	239c      	movs	r3, #156	; 0x9c
 800116e:	9a03      	ldr	r2, [sp, #12]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	429a      	cmp	r2, r3
 8001174:	d183      	bne.n	800107e <task_fuc+0x126>
				}
			}
		}

		/* button function */
		if(sw[0] != befo_sw[0] && sw[0] == 1){
 8001176:	9b02      	ldr	r3, [sp, #8]
 8001178:	9a08      	ldr	r2, [sp, #32]
 800117a:	4293      	cmp	r3, r2
 800117c:	d00f      	beq.n	800119e <task_fuc+0x246>
 800117e:	2b01      	cmp	r3, #1
 8001180:	d10d      	bne.n	800119e <task_fuc+0x246>
			screen_update = 0;

			time.day++;
 8001182:	ab0c      	add	r3, sp, #48	; 0x30
			if(time.day > last_day[time.month - 1]){
 8001184:	785a      	ldrb	r2, [r3, #1]
 8001186:	4842      	ldr	r0, [pc, #264]	; (8001290 <task_fuc+0x338>)
			time.day++;
 8001188:	7899      	ldrb	r1, [r3, #2]
			if(time.day > last_day[time.month - 1]){
 800118a:	1880      	adds	r0, r0, r2
 800118c:	3801      	subs	r0, #1
			time.day++;
 800118e:	3101      	adds	r1, #1
			if(time.day > last_day[time.month - 1]){
 8001190:	7800      	ldrb	r0, [r0, #0]
			time.day++;
 8001192:	b2c9      	uxtb	r1, r1
 8001194:	7099      	strb	r1, [r3, #2]
			if(time.day > last_day[time.month - 1]){
 8001196:	4288      	cmp	r0, r1
 8001198:	d200      	bcs.n	800119c <task_fuc+0x244>
 800119a:	e13e      	b.n	800141a <task_fuc+0x4c2>
			screen_update = 0;
 800119c:	2700      	movs	r7, #0
					time.year++;
				}
			}
		}

		if(sw[1] != befo_sw[1] && sw[1] == 1){
 800119e:	9b05      	ldr	r3, [sp, #20]
 80011a0:	9a07      	ldr	r2, [sp, #28]
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d017      	beq.n	80011d6 <task_fuc+0x27e>
 80011a6:	9b04      	ldr	r3, [sp, #16]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d114      	bne.n	80011d6 <task_fuc+0x27e>
			screen_update = 0;

			time.day--;
 80011ac:	ab0c      	add	r3, sp, #48	; 0x30
 80011ae:	7898      	ldrb	r0, [r3, #2]
 80011b0:	3801      	subs	r0, #1
 80011b2:	b2c7      	uxtb	r7, r0
 80011b4:	709f      	strb	r7, [r3, #2]
			if(time.day == 0){
 80011b6:	2f00      	cmp	r7, #0
 80011b8:	d000      	beq.n	80011bc <task_fuc+0x264>
 80011ba:	e142      	b.n	8001442 <task_fuc+0x4ea>
				time.month--;
 80011bc:	785a      	ldrb	r2, [r3, #1]
 80011be:	3a01      	subs	r2, #1
 80011c0:	b2d2      	uxtb	r2, r2
				if(time.month == 0){
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	d100      	bne.n	80011c8 <task_fuc+0x270>
 80011c6:	e136      	b.n	8001436 <task_fuc+0x4de>
				time.month--;
 80011c8:	705a      	strb	r2, [r3, #1]
					time.month = 12;
					time.year--;
				}
			time.day = last_day[time.month - 1];
 80011ca:	7859      	ldrb	r1, [r3, #1]
 80011cc:	4a30      	ldr	r2, [pc, #192]	; (8001290 <task_fuc+0x338>)
 80011ce:	1852      	adds	r2, r2, r1
 80011d0:	3a01      	subs	r2, #1
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	709a      	strb	r2, [r3, #2]
			}
		}

		befo_sw[0] = sw[0];
		befo_sw[1] = sw[1];
		befo_touch = curXY;
 80011d6:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <task_fuc+0x330>)
 80011d8:	791d      	ldrb	r5, [r3, #4]
		sw[1] = SW(2);
 80011da:	9b05      	ldr	r3, [sp, #20]
 80011dc:	9307      	str	r3, [sp, #28]
		sw[0] = SW(1);
 80011de:	9b02      	ldr	r3, [sp, #8]
 80011e0:	9308      	str	r3, [sp, #32]
		get_touch(&curXY);
 80011e2:	e6e4      	b.n	8000fae <task_fuc+0x56>
				else if(menu == detail){
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d15d      	bne.n	80012a4 <task_fuc+0x34c>
					if(area_check(&curXY, &button_data[0].area)){
 80011e8:	4d2c      	ldr	r5, [pc, #176]	; (800129c <task_fuc+0x344>)
 80011ea:	0020      	movs	r0, r4
 80011ec:	0029      	movs	r1, r5
 80011ee:	f7ff fb4d 	bl	800088c <area_check>
 80011f2:	1e07      	subs	r7, r0, #0
 80011f4:	d003      	beq.n	80011fe <task_fuc+0x2a6>
						menu = add;
 80011f6:	2302      	movs	r3, #2
 80011f8:	4a24      	ldr	r2, [pc, #144]	; (800128c <task_fuc+0x334>)
 80011fa:	7013      	strb	r3, [r2, #0]
 80011fc:	e717      	b.n	800102e <task_fuc+0xd6>
					else if(area_check(&curXY, &button_data[1].area)){
 80011fe:	0029      	movs	r1, r5
 8001200:	0020      	movs	r0, r4
 8001202:	3114      	adds	r1, #20
 8001204:	f7ff fb42 	bl	800088c <area_check>
						menu = basic;
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <task_fuc+0x334>)
					else if(area_check(&curXY, &button_data[1].area)){
 800120a:	2800      	cmp	r0, #0
 800120c:	d000      	beq.n	8001210 <task_fuc+0x2b8>
 800120e:	e0d0      	b.n	80013b2 <task_fuc+0x45a>
 8001210:	003d      	movs	r5, r7
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <task_fuc+0x348>)
 8001214:	9301      	str	r3, [sp, #4]
							if(area_check(&curXY, &schedule.area[i])){
 8001216:	9901      	ldr	r1, [sp, #4]
 8001218:	481b      	ldr	r0, [pc, #108]	; (8001288 <task_fuc+0x330>)
 800121a:	f7ff fb37 	bl	800088c <area_check>
 800121e:	2800      	cmp	r0, #0
 8001220:	d029      	beq.n	8001276 <task_fuc+0x31e>
								memmove((COLOR_Typedef*)&schedule.data[schedule.now_schedule].color[i],
 8001222:	4c1c      	ldr	r4, [pc, #112]	; (8001294 <task_fuc+0x33c>)
 8001224:	220e      	movs	r2, #14
 8001226:	0027      	movs	r7, r4
 8001228:	37b5      	adds	r7, #181	; 0xb5
 800122a:	783b      	ldrb	r3, [r7, #0]
 800122c:	1c6e      	adds	r6, r5, #1
 800122e:	4353      	muls	r3, r2
 8001230:	0018      	movs	r0, r3
										sizeof(COLOR_Typedef) * schedule.data[schedule.now_schedule].schedule_num - i);
 8001232:	18e3      	adds	r3, r4, r3
 8001234:	7b5a      	ldrb	r2, [r3, #13]
 8001236:	3008      	adds	r0, #8
										(COLOR_Typedef*)&schedule.data[schedule.now_schedule].color[i + 1],
 8001238:	1831      	adds	r1, r6, r0
								memmove((COLOR_Typedef*)&schedule.data[schedule.now_schedule].color[i],
 800123a:	1828      	adds	r0, r5, r0
										(COLOR_Typedef*)&schedule.data[schedule.now_schedule].color[i + 1],
 800123c:	1909      	adds	r1, r1, r4
								memmove((COLOR_Typedef*)&schedule.data[schedule.now_schedule].color[i],
 800123e:	1b52      	subs	r2, r2, r5
 8001240:	1900      	adds	r0, r0, r4
 8001242:	f002 fa1a 	bl	800367a <memmove>
								memmove((TITLE_Typedef*)&schedule.data[schedule.now_schedule].title[i],
 8001246:	220e      	movs	r2, #14
 8001248:	783b      	ldrb	r3, [r7, #0]
 800124a:	4353      	muls	r3, r2
 800124c:	1cd8      	adds	r0, r3, #3
										sizeof(TITLE_Typedef) * schedule.data[schedule.now_schedule].schedule_num - i);
 800124e:	18e3      	adds	r3, r4, r3
 8001250:	7b5a      	ldrb	r2, [r3, #13]
										(TITLE_Typedef*)&schedule.data[schedule.now_schedule].title[i + 1],
 8001252:	1831      	adds	r1, r6, r0
								memmove((TITLE_Typedef*)&schedule.data[schedule.now_schedule].title[i],
 8001254:	1828      	adds	r0, r5, r0
										(TITLE_Typedef*)&schedule.data[schedule.now_schedule].title[i + 1],
 8001256:	1909      	adds	r1, r1, r4
								memmove((TITLE_Typedef*)&schedule.data[schedule.now_schedule].title[i],
 8001258:	1b52      	subs	r2, r2, r5
 800125a:	1900      	adds	r0, r0, r4
 800125c:	f002 fa0d 	bl	800367a <memmove>
								schedule.data[schedule.now_schedule].color[schedule.data[schedule.now_schedule].schedule_num - 1] = red;
 8001260:	220e      	movs	r2, #14
 8001262:	2100      	movs	r1, #0
 8001264:	783b      	ldrb	r3, [r7, #0]
 8001266:	4353      	muls	r3, r2
 8001268:	18e4      	adds	r4, r4, r3
 800126a:	7b63      	ldrb	r3, [r4, #13]
 800126c:	3b01      	subs	r3, #1
 800126e:	18e2      	adds	r2, r4, r3
 8001270:	7211      	strb	r1, [r2, #8]
								schedule.data[schedule.now_schedule].title[schedule.data[schedule.now_schedule].schedule_num - 1] = meeting;
 8001272:	70d1      	strb	r1, [r2, #3]
								schedule.data[schedule.now_schedule].schedule_num--;
 8001274:	7363      	strb	r3, [r4, #13]
						for(uint8_t i = 0 ; i < 5 ; i++){
 8001276:	9b01      	ldr	r3, [sp, #4]
 8001278:	3501      	adds	r5, #1
 800127a:	3308      	adds	r3, #8
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	2d05      	cmp	r5, #5
 8001280:	d1c9      	bne.n	8001216 <task_fuc+0x2be>
 8001282:	e6d4      	b.n	800102e <task_fuc+0xd6>
 8001284:	080041f8 	.word	0x080041f8
 8001288:	20000194 	.word	0x20000194
 800128c:	200002b8 	.word	0x200002b8
 8001290:	20000068 	.word	0x20000068
 8001294:	200002ba 	.word	0x200002ba
 8001298:	2000036f 	.word	0x2000036f
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000346 	.word	0x20000346
				else if(menu == add){
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d000      	beq.n	80012aa <task_fuc+0x352>
 80012a8:	e6c1      	b.n	800102e <task_fuc+0xd6>
					if(area_check(&curXY, &button_data[0].area)){
 80012aa:	4f67      	ldr	r7, [pc, #412]	; (8001448 <task_fuc+0x4f0>)
 80012ac:	0020      	movs	r0, r4
 80012ae:	0039      	movs	r1, r7
 80012b0:	f7ff faec 	bl	800088c <area_check>
 80012b4:	1e05      	subs	r5, r0, #0
 80012b6:	d07e      	beq.n	80013b6 <task_fuc+0x45e>
						if(schedule.data[schedule.now_schedule].schedule_num == 5){
 80012b8:	4c64      	ldr	r4, [pc, #400]	; (800144c <task_fuc+0x4f4>)
 80012ba:	0023      	movs	r3, r4
 80012bc:	33b5      	adds	r3, #181	; 0xb5
 80012be:	781a      	ldrb	r2, [r3, #0]
 80012c0:	230e      	movs	r3, #14
 80012c2:	4353      	muls	r3, r2
 80012c4:	18e3      	adds	r3, r4, r3
 80012c6:	7b5b      	ldrb	r3, [r3, #13]
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	d112      	bne.n	80012f2 <task_fuc+0x39a>
	if(state) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012cc:	f7ff fa3e 	bl	800074c <BUZ.part.0>
							HAL_Delay(100);
 80012d0:	2064      	movs	r0, #100	; 0x64
 80012d2:	f000 fb4d 	bl	8001970 <HAL_Delay>
							BUZ(0);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff fa40 	bl	800075c <BUZ>
							HAL_Delay(100);
 80012dc:	2064      	movs	r0, #100	; 0x64
 80012de:	f000 fb47 	bl	8001970 <HAL_Delay>
	if(state) HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012e2:	f7ff fa33 	bl	800074c <BUZ.part.0>
							HAL_Delay(100);
 80012e6:	2064      	movs	r0, #100	; 0x64
 80012e8:	f000 fb42 	bl	8001970 <HAL_Delay>
							BUZ(0);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff fa35 	bl	800075c <BUZ>
						schedule.data[schedule.now_schedule].schedule_num = schedule.data[schedule.now_schedule].schedule_num < 5 ? schedule.data[schedule.now_schedule].schedule_num + 1 : schedule.data[schedule.now_schedule].schedule_num;
 80012f2:	0023      	movs	r3, r4
 80012f4:	220e      	movs	r2, #14
 80012f6:	33b5      	adds	r3, #181	; 0xb5
 80012f8:	7819      	ldrb	r1, [r3, #0]
 80012fa:	0013      	movs	r3, r2
 80012fc:	434b      	muls	r3, r1
 80012fe:	18e3      	adds	r3, r4, r3
 8001300:	7b5b      	ldrb	r3, [r3, #13]
 8001302:	2b04      	cmp	r3, #4
 8001304:	d801      	bhi.n	800130a <task_fuc+0x3b2>
 8001306:	3301      	adds	r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	434a      	muls	r2, r1
 800130c:	18a4      	adds	r4, r4, r2
						menu = detail;
 800130e:	2201      	movs	r2, #1
						schedule.data[schedule.now_schedule].schedule_num = schedule.data[schedule.now_schedule].schedule_num < 5 ? schedule.data[schedule.now_schedule].schedule_num + 1 : schedule.data[schedule.now_schedule].schedule_num;
 8001310:	7363      	strb	r3, [r4, #13]
						menu = detail;
 8001312:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <task_fuc+0x4f8>)
 8001314:	701a      	strb	r2, [r3, #0]
					if(title_state == menu_detail){
 8001316:	4b4f      	ldr	r3, [pc, #316]	; (8001454 <task_fuc+0x4fc>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d121      	bne.n	8001362 <task_fuc+0x40a>
 800131e:	2400      	movs	r4, #0
							AREA_Typedef area = { 100, 73 + 40 + (i * 20), 100 + 100, 73 + 40 + ((i + 1) * 20) };
 8001320:	26c8      	movs	r6, #200	; 0xc8
 8001322:	ad10      	add	r5, sp, #64	; 0x40
 8001324:	2364      	movs	r3, #100	; 0x64
 8001326:	802b      	strh	r3, [r5, #0]
 8001328:	3b50      	subs	r3, #80	; 0x50
 800132a:	4363      	muls	r3, r4
 800132c:	b29b      	uxth	r3, r3
 800132e:	001a      	movs	r2, r3
 8001330:	3385      	adds	r3, #133	; 0x85
 8001332:	3271      	adds	r2, #113	; 0x71
							if(area_check(&curXY, &area)){
 8001334:	0029      	movs	r1, r5
 8001336:	4848      	ldr	r0, [pc, #288]	; (8001458 <task_fuc+0x500>)
							AREA_Typedef area = { 100, 73 + 40 + (i * 20), 100 + 100, 73 + 40 + ((i + 1) * 20) };
 8001338:	806a      	strh	r2, [r5, #2]
 800133a:	80ae      	strh	r6, [r5, #4]
 800133c:	80eb      	strh	r3, [r5, #6]
 800133e:	b2e7      	uxtb	r7, r4
							if(area_check(&curXY, &area)){
 8001340:	f7ff faa4 	bl	800088c <area_check>
 8001344:	2800      	cmp	r0, #0
 8001346:	d060      	beq.n	800140a <task_fuc+0x4b2>
								schedule.data[schedule.now_schedule].title[schedule.data[schedule.now_schedule].schedule_num] = i;
 8001348:	4b40      	ldr	r3, [pc, #256]	; (800144c <task_fuc+0x4f4>)
 800134a:	001a      	movs	r2, r3
 800134c:	32b5      	adds	r2, #181	; 0xb5
 800134e:	7811      	ldrb	r1, [r2, #0]
 8001350:	220e      	movs	r2, #14
 8001352:	434a      	muls	r2, r1
 8001354:	189b      	adds	r3, r3, r2
 8001356:	7b5a      	ldrb	r2, [r3, #13]
 8001358:	189b      	adds	r3, r3, r2
								title_state = menu_basic;
 800135a:	2200      	movs	r2, #0
								schedule.data[schedule.now_schedule].title[schedule.data[schedule.now_schedule].schedule_num] = i;
 800135c:	70df      	strb	r7, [r3, #3]
								title_state = menu_basic;
 800135e:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <task_fuc+0x4fc>)
 8001360:	701a      	strb	r2, [r3, #0]
					if(color_state == menu_detail){
 8001362:	4b3e      	ldr	r3, [pc, #248]	; (800145c <task_fuc+0x504>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d000      	beq.n	800136c <task_fuc+0x414>
 800136a:	e660      	b.n	800102e <task_fuc+0xd6>
							AREA_Typedef area = { 270, 73 + 40 + (i * 20), 270 + 100, 73 + 40 + ((i + 1) * 20) };
 800136c:	26b9      	movs	r6, #185	; 0xb9
 800136e:	2400      	movs	r4, #0
 8001370:	ad10      	add	r5, sp, #64	; 0x40
 8001372:	0076      	lsls	r6, r6, #1
 8001374:	2387      	movs	r3, #135	; 0x87
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	802b      	strh	r3, [r5, #0]
 800137a:	3bfa      	subs	r3, #250	; 0xfa
 800137c:	4363      	muls	r3, r4
 800137e:	b29b      	uxth	r3, r3
 8001380:	001a      	movs	r2, r3
 8001382:	3385      	adds	r3, #133	; 0x85
 8001384:	3271      	adds	r2, #113	; 0x71
							if(area_check(&curXY, &area)){
 8001386:	0029      	movs	r1, r5
 8001388:	4833      	ldr	r0, [pc, #204]	; (8001458 <task_fuc+0x500>)
							AREA_Typedef area = { 270, 73 + 40 + (i * 20), 270 + 100, 73 + 40 + ((i + 1) * 20) };
 800138a:	806a      	strh	r2, [r5, #2]
 800138c:	80ae      	strh	r6, [r5, #4]
 800138e:	80eb      	strh	r3, [r5, #6]
 8001390:	b2e7      	uxtb	r7, r4
							if(area_check(&curXY, &area)){
 8001392:	f7ff fa7b 	bl	800088c <area_check>
 8001396:	2800      	cmp	r0, #0
 8001398:	d03b      	beq.n	8001412 <task_fuc+0x4ba>
								schedule.data[schedule.now_schedule].color[schedule.data[schedule.now_schedule].schedule_num] = i;
 800139a:	4b2c      	ldr	r3, [pc, #176]	; (800144c <task_fuc+0x4f4>)
 800139c:	001a      	movs	r2, r3
 800139e:	32b5      	adds	r2, #181	; 0xb5
 80013a0:	7811      	ldrb	r1, [r2, #0]
 80013a2:	220e      	movs	r2, #14
 80013a4:	434a      	muls	r2, r1
 80013a6:	189b      	adds	r3, r3, r2
 80013a8:	7b5a      	ldrb	r2, [r3, #13]
 80013aa:	189b      	adds	r3, r3, r2
 80013ac:	721f      	strb	r7, [r3, #8]
								color_state = menu_basic;
 80013ae:	2700      	movs	r7, #0
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <task_fuc+0x504>)
 80013b2:	701f      	strb	r7, [r3, #0]
								break;
 80013b4:	e6df      	b.n	8001176 <task_fuc+0x21e>
					else if(area_check(&curXY, &button_data[1].area)){
 80013b6:	0039      	movs	r1, r7
 80013b8:	0020      	movs	r0, r4
 80013ba:	3114      	adds	r1, #20
 80013bc:	f7ff fa66 	bl	800088c <area_check>
 80013c0:	2800      	cmp	r0, #0
 80013c2:	d00d      	beq.n	80013e0 <task_fuc+0x488>
						schedule.data[schedule.now_schedule].title[schedule.data[schedule.now_schedule].schedule_num] = meeting;
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <task_fuc+0x4f4>)
 80013c6:	001a      	movs	r2, r3
 80013c8:	32b5      	adds	r2, #181	; 0xb5
 80013ca:	7811      	ldrb	r1, [r2, #0]
 80013cc:	220e      	movs	r2, #14
 80013ce:	434a      	muls	r2, r1
 80013d0:	189b      	adds	r3, r3, r2
 80013d2:	7b5a      	ldrb	r2, [r3, #13]
 80013d4:	189b      	adds	r3, r3, r2
 80013d6:	70dd      	strb	r5, [r3, #3]
						schedule.data[schedule.now_schedule].color[schedule.data[schedule.now_schedule].schedule_num] = red;
 80013d8:	721d      	strb	r5, [r3, #8]
						menu = detail;
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <task_fuc+0x4f8>)
 80013dc:	701e      	strb	r6, [r3, #0]
 80013de:	e79a      	b.n	8001316 <task_fuc+0x3be>
					else if(area_check(&curXY, &check_box_area[0])){
 80013e0:	4d1f      	ldr	r5, [pc, #124]	; (8001460 <task_fuc+0x508>)
 80013e2:	0020      	movs	r0, r4
 80013e4:	0029      	movs	r1, r5
 80013e6:	f7ff fa51 	bl	800088c <area_check>
						title_state = title_state == menu_basic ? menu_detail : menu_basic;
 80013ea:	4a1a      	ldr	r2, [pc, #104]	; (8001454 <task_fuc+0x4fc>)
					else if(area_check(&curXY, &check_box_area[0])){
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d107      	bne.n	8001400 <task_fuc+0x4a8>
					else if(area_check(&curXY, &check_box_area[1])){
 80013f0:	0029      	movs	r1, r5
 80013f2:	0020      	movs	r0, r4
 80013f4:	3108      	adds	r1, #8
 80013f6:	f7ff fa49 	bl	800088c <area_check>
 80013fa:	2800      	cmp	r0, #0
 80013fc:	d08b      	beq.n	8001316 <task_fuc+0x3be>
						color_state = color_state == menu_basic ? menu_detail : menu_basic;
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <task_fuc+0x504>)
 8001400:	7813      	ldrb	r3, [r2, #0]
 8001402:	4259      	negs	r1, r3
 8001404:	414b      	adcs	r3, r1
 8001406:	7013      	strb	r3, [r2, #0]
 8001408:	e785      	b.n	8001316 <task_fuc+0x3be>
						for(TITLE_Typedef i = meeting ; i < max_title ; i++){
 800140a:	3401      	adds	r4, #1
 800140c:	2c05      	cmp	r4, #5
 800140e:	d189      	bne.n	8001324 <task_fuc+0x3cc>
 8001410:	e7a7      	b.n	8001362 <task_fuc+0x40a>
						for(COLOR_Typedef i = red ; i < max_color ; i++){
 8001412:	3401      	adds	r4, #1
 8001414:	2c05      	cmp	r4, #5
 8001416:	d1ad      	bne.n	8001374 <task_fuc+0x41c>
 8001418:	e609      	b.n	800102e <task_fuc+0xd6>
				time.day = 1;
 800141a:	9902      	ldr	r1, [sp, #8]
				time.month++;
 800141c:	3201      	adds	r2, #1
 800141e:	b2d2      	uxtb	r2, r2
				time.day = 1;
 8001420:	7099      	strb	r1, [r3, #2]
				if(time.month > 12){
 8001422:	2a0c      	cmp	r2, #12
 8001424:	d801      	bhi.n	800142a <task_fuc+0x4d2>
				time.month++;
 8001426:	705a      	strb	r2, [r3, #1]
 8001428:	e6b8      	b.n	800119c <task_fuc+0x244>
					time.month = 1;
 800142a:	9a02      	ldr	r2, [sp, #8]
 800142c:	705a      	strb	r2, [r3, #1]
					time.year++;
 800142e:	781a      	ldrb	r2, [r3, #0]
 8001430:	3201      	adds	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	e6b2      	b.n	800119c <task_fuc+0x244>
					time.month = 12;
 8001436:	220c      	movs	r2, #12
 8001438:	705a      	strb	r2, [r3, #1]
					time.year--;
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	3a01      	subs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
 8001440:	e6c3      	b.n	80011ca <task_fuc+0x272>
			screen_update = 0;
 8001442:	9f04      	ldr	r7, [sp, #16]
 8001444:	e6c7      	b.n	80011d6 <task_fuc+0x27e>
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	20000000 	.word	0x20000000
 800144c:	200002ba 	.word	0x200002ba
 8001450:	200002b8 	.word	0x200002b8
 8001454:	20000370 	.word	0x20000370
 8001458:	20000194 	.word	0x20000194
 800145c:	20000192 	.word	0x20000192
 8001460:	20000028 	.word	0x20000028

08001464 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001464:	b510      	push	{r4, lr}
 8001466:	b09c      	sub	sp, #112	; 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001468:	2224      	movs	r2, #36	; 0x24
 800146a:	2100      	movs	r1, #0
 800146c:	a80f      	add	r0, sp, #60	; 0x3c
 800146e:	f002 f917 	bl	80036a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001472:	2214      	movs	r2, #20
 8001474:	2100      	movs	r1, #0
 8001476:	a801      	add	r0, sp, #4
 8001478:	f002 f912 	bl	80036a0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800147c:	2220      	movs	r2, #32
 800147e:	2100      	movs	r1, #0
 8001480:	a806      	add	r0, sp, #24
 8001482:	f002 f90d 	bl	80036a0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001486:	491d      	ldr	r1, [pc, #116]	; (80014fc <SystemClock_Config+0x98>)
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <SystemClock_Config+0x9c>)
 800148a:	680b      	ldr	r3, [r1, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148c:	2401      	movs	r4, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148e:	401a      	ands	r2, r3
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4313      	orrs	r3, r2
 8001496:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001498:	2302      	movs	r3, #2
 800149a:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149c:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800149e:	2300      	movs	r3, #0
 80014a0:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	02db      	lsls	r3, r3, #11
 80014a6:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80014a8:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014aa:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80014ac:	03db      	lsls	r3, r3, #15
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ae:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b0:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b2:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80014b4:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b6:	f000 ff4f 	bl	8002358 <HAL_RCC_OscConfig>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014be:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014c0:	e7fe      	b.n	80014c0 <SystemClock_Config+0x5c>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c2:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c4:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c6:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c8:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ca:	3b0c      	subs	r3, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014cc:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014ce:	0021      	movs	r1, r4
 80014d0:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d2:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014d4:	f001 f9c2 	bl	800285c <HAL_RCC_ClockConfig>
 80014d8:	2800      	cmp	r0, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x7c>
 80014dc:	b672      	cpsid	i
	while (1)
 80014de:	e7fe      	b.n	80014de <SystemClock_Config+0x7a>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80014e0:	2309      	movs	r3, #9
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014e2:	9008      	str	r0, [sp, #32]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014e4:	900b      	str	r0, [sp, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e6:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80014e8:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ea:	f001 faa5 	bl	8002a38 <HAL_RCCEx_PeriphCLKConfig>
 80014ee:	2800      	cmp	r0, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x92>
 80014f2:	b672      	cpsid	i
	while (1)
 80014f4:	e7fe      	b.n	80014f4 <SystemClock_Config+0x90>
}
 80014f6:	b01c      	add	sp, #112	; 0x70
 80014f8:	bd10      	pop	{r4, pc}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	40007000 	.word	0x40007000
 8001500:	ffffe7ff 	.word	0xffffe7ff

08001504 <main>:
{
 8001504:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2501      	movs	r5, #1
{
 8001508:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 800150a:	f000 fa0b 	bl	8001924 <HAL_Init>
	SystemClock_Config();
 800150e:	f7ff ffa9 	bl	8001464 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	2214      	movs	r2, #20
 8001514:	2100      	movs	r1, #0
 8001516:	a805      	add	r0, sp, #20
 8001518:	f002 f8c2 	bl	80036a0 <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800151c:	2102      	movs	r1, #2
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800151e:	27a0      	movs	r7, #160	; 0xa0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <main+0x1cc>)
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001522:	05ff      	lsls	r7, r7, #23
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001526:	0038      	movs	r0, r7
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	432a      	orrs	r2, r5
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
 800152c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2400      	movs	r4, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	402a      	ands	r2, r5
 8001532:	9201      	str	r2, [sp, #4]
 8001534:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	huart1.Instance = USART1;
 8001538:	4e66      	ldr	r6, [pc, #408]	; (80016d4 <main+0x1d0>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	430a      	orrs	r2, r1
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	400b      	ands	r3, r1
 8001544:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001546:	3136      	adds	r1, #54	; 0x36
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001548:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800154a:	f000 fb27 	bl	8001b9c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 800154e:	2307      	movs	r3, #7
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	0038      	movs	r0, r7
 8001552:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8001554:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001556:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f000 fa5f 	bl	8001a1c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800155e:	2338      	movs	r3, #56	; 0x38
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001560:	0038      	movs	r0, r7
 8001562:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001564:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f000 fa56 	bl	8001a1c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8001570:	230a      	movs	r3, #10
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001572:	4859      	ldr	r0, [pc, #356]	; (80016d8 <main+0x1d4>)
 8001574:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8001576:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001578:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f000 fa4e 	bl	8001a1c <HAL_GPIO_Init>
	huart1.Init.BaudRate = 9600;
 8001580:	2396      	movs	r3, #150	; 0x96
	huart1.Instance = USART1;
 8001582:	4856      	ldr	r0, [pc, #344]	; (80016dc <main+0x1d8>)
	huart1.Init.BaudRate = 9600;
 8001584:	019b      	lsls	r3, r3, #6
 8001586:	6043      	str	r3, [r0, #4]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001588:	230c      	movs	r3, #12
	huart1.Instance = USART1;
 800158a:	6006      	str	r6, [r0, #0]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158c:	6084      	str	r4, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800158e:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001590:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001592:	6143      	str	r3, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001594:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001596:	61c4      	str	r4, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001598:	6204      	str	r4, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159a:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800159c:	f002 f808 	bl	80035b0 <HAL_UART_Init>
 80015a0:	0005      	movs	r5, r0
 80015a2:	42a0      	cmp	r0, r4
 80015a4:	d001      	beq.n	80015aa <main+0xa6>
 80015a6:	b672      	cpsid	i
	while (1)
 80015a8:	e7fe      	b.n	80015a8 <main+0xa4>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015aa:	0001      	movs	r1, r0
 80015ac:	2208      	movs	r2, #8
 80015ae:	a803      	add	r0, sp, #12
 80015b0:	f002 f876 	bl	80036a0 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 80015b4:	2210      	movs	r2, #16
 80015b6:	0029      	movs	r1, r5
 80015b8:	a805      	add	r0, sp, #20
 80015ba:	f002 f871 	bl	80036a0 <memset>
	htim2.Instance = TIM2;
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	4c47      	ldr	r4, [pc, #284]	; (80016e0 <main+0x1dc>)
 80015c2:	05db      	lsls	r3, r3, #23
 80015c4:	6023      	str	r3, [r4, #0]
	htim2.Init.Prescaler = 32-1;
 80015c6:	231f      	movs	r3, #31
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015c8:	0020      	movs	r0, r4
	htim2.Init.Prescaler = 32-1;
 80015ca:	6063      	str	r3, [r4, #4]
	htim2.Init.Period = 250-1;
 80015cc:	33da      	adds	r3, #218	; 0xda
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	60a5      	str	r5, [r4, #8]
	htim2.Init.Period = 250-1;
 80015d0:	60e3      	str	r3, [r4, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d2:	6125      	str	r5, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d4:	6165      	str	r5, [r4, #20]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015d6:	f001 fbd3 	bl	8002d80 <HAL_TIM_PWM_Init>
 80015da:	2800      	cmp	r0, #0
 80015dc:	d001      	beq.n	80015e2 <main+0xde>
 80015de:	b672      	cpsid	i
	while (1)
 80015e0:	e7fe      	b.n	80015e0 <main+0xdc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e2:	9003      	str	r0, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e4:	9004      	str	r0, [sp, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e6:	a903      	add	r1, sp, #12
 80015e8:	0020      	movs	r0, r4
 80015ea:	f001 fc83 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	1e02      	subs	r2, r0, #0
 80015f0:	d001      	beq.n	80015f6 <main+0xf2>
 80015f2:	b672      	cpsid	i
	while (1)
 80015f4:	e7fe      	b.n	80015f4 <main+0xf0>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f6:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f8:	9007      	str	r0, [sp, #28]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fa:	9305      	str	r3, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fc:	9008      	str	r0, [sp, #32]
	sConfigOC.Pulse = 125-1;
 80015fe:	331c      	adds	r3, #28
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001600:	0020      	movs	r0, r4
 8001602:	a905      	add	r1, sp, #20
	sConfigOC.Pulse = 125-1;
 8001604:	9306      	str	r3, [sp, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001606:	f001 fbe7 	bl	8002dd8 <HAL_TIM_PWM_ConfigChannel>
 800160a:	1e05      	subs	r5, r0, #0
 800160c:	d001      	beq.n	8001612 <main+0x10e>
 800160e:	b672      	cpsid	i
	while (1)
 8001610:	e7fe      	b.n	8001610 <main+0x10c>
	HAL_TIM_MspPostInit(&htim2);
 8001612:	0020      	movs	r0, r4
 8001614:	f000 f8ba 	bl	800178c <HAL_TIM_MspPostInit>
	hi2c1.Instance = I2C1;
 8001618:	4c32      	ldr	r4, [pc, #200]	; (80016e4 <main+0x1e0>)
 800161a:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <main+0x1e4>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800161c:	0020      	movs	r0, r4
	hi2c1.Instance = I2C1;
 800161e:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x00300F38;
 8001620:	4b32      	ldr	r3, [pc, #200]	; (80016ec <main+0x1e8>)
	hi2c1.Init.OwnAddress1 = 0;
 8001622:	60a5      	str	r5, [r4, #8]
	hi2c1.Init.Timing = 0x00300F38;
 8001624:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001626:	2301      	movs	r3, #1
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001628:	6125      	str	r5, [r4, #16]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800162a:	60e3      	str	r3, [r4, #12]
	hi2c1.Init.OwnAddress2 = 0;
 800162c:	6165      	str	r5, [r4, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800162e:	61a5      	str	r5, [r4, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001630:	61e5      	str	r5, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001632:	6225      	str	r5, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001634:	f000 fbe8 	bl	8001e08 <HAL_I2C_Init>
 8001638:	1e01      	subs	r1, r0, #0
 800163a:	d001      	beq.n	8001640 <main+0x13c>
 800163c:	b672      	cpsid	i
	while (1)
 800163e:	e7fe      	b.n	800163e <main+0x13a>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001640:	0020      	movs	r0, r4
 8001642:	f000 fdf7 	bl	8002234 <HAL_I2CEx_ConfigAnalogFilter>
 8001646:	1e01      	subs	r1, r0, #0
 8001648:	d001      	beq.n	800164e <main+0x14a>
 800164a:	b672      	cpsid	i
	while (1)
 800164c:	e7fe      	b.n	800164c <main+0x148>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800164e:	0020      	movs	r0, r4
 8001650:	f000 fe16 	bl	8002280 <HAL_I2CEx_ConfigDigitalFilter>
 8001654:	1e04      	subs	r4, r0, #0
 8001656:	d001      	beq.n	800165c <main+0x158>
 8001658:	b672      	cpsid	i
	while (1)
 800165a:	e7fe      	b.n	800165a <main+0x156>
	initEns160();
 800165c:	f7ff f862 	bl	8000724 <initEns160>
	initDrv8830();
 8001660:	f7ff f828 	bl	80006b4 <initDrv8830>
	LED(1,0);
 8001664:	2308      	movs	r3, #8
 8001666:	61bb      	str	r3, [r7, #24]
	LED(2,0);
 8001668:	18db      	adds	r3, r3, r3
 800166a:	61bb      	str	r3, [r7, #24]
	LED(3,0);
 800166c:	3310      	adds	r3, #16
 800166e:	61bb      	str	r3, [r7, #24]
	setMotor(DRV8830_STOP);
 8001670:	0020      	movs	r0, r4
 8001672:	f7ff f833 	bl	80006dc <setMotor>
	nextion_inst_set("baud=921600");
 8001676:	4c1e      	ldr	r4, [pc, #120]	; (80016f0 <main+0x1ec>)
 8001678:	0020      	movs	r0, r4
 800167a:	f7ff f87d 	bl	8000778 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 800167e:	0020      	movs	r0, r4
 8001680:	f7ff f87a 	bl	8000778 <nextion_inst_set>
	nextion_inst_set("baud=921600");
 8001684:	0020      	movs	r0, r4
 8001686:	f7ff f877 	bl	8000778 <nextion_inst_set>
	HAL_Delay(50);
 800168a:	2032      	movs	r0, #50	; 0x32
 800168c:	f000 f970 	bl	8001970 <HAL_Delay>
	USART1->CR1 &= (~USART_CR1_UE);
 8001690:	2201      	movs	r2, #1
 8001692:	6833      	ldr	r3, [r6, #0]
	HAL_Delay(1000);
 8001694:	20fa      	movs	r0, #250	; 0xfa
	USART1->CR1 &= (~USART_CR1_UE);
 8001696:	4393      	bics	r3, r2
 8001698:	6033      	str	r3, [r6, #0]
	USART1->BRR = 0x23;
 800169a:	2323      	movs	r3, #35	; 0x23
 800169c:	60f3      	str	r3, [r6, #12]
	USART1->CR1 |= USART_CR1_UE;
 800169e:	6833      	ldr	r3, [r6, #0]
	HAL_Delay(1000);
 80016a0:	0080      	lsls	r0, r0, #2
	USART1->CR1 |= USART_CR1_UE;
 80016a2:	4313      	orrs	r3, r2
 80016a4:	6033      	str	r3, [r6, #0]
	HAL_Delay(1000);
 80016a6:	f000 f963 	bl	8001970 <HAL_Delay>
			schedule.area[i].x0 = 420;
 80016aa:	24d2      	movs	r4, #210	; 0xd2
			schedule.area[i].x1 = schedule.area[i].x0 + 20;
 80016ac:	20dc      	movs	r0, #220	; 0xdc
	HAL_Delay(1000);
 80016ae:	234d      	movs	r3, #77	; 0x4d
 80016b0:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <main+0x1f0>)
			schedule.area[i].x0 = 420;
 80016b2:	0064      	lsls	r4, r4, #1
			schedule.area[i].x1 = schedule.area[i].x0 + 20;
 80016b4:	0040      	lsls	r0, r0, #1
			schedule.area[i].y1 = schedule.area[i].y0 + 20;
 80016b6:	0019      	movs	r1, r3
			schedule.area[i].y0 = 52 + 25 + (i * 30);
 80016b8:	8053      	strh	r3, [r2, #2]
		for(uint8_t i = 0 ; i < 5 ; i++){
 80016ba:	331e      	adds	r3, #30
			schedule.area[i].y1 = schedule.area[i].y0 + 20;
 80016bc:	3114      	adds	r1, #20
		for(uint8_t i = 0 ; i < 5 ; i++){
 80016be:	b29b      	uxth	r3, r3
			schedule.area[i].x0 = 420;
 80016c0:	8014      	strh	r4, [r2, #0]
			schedule.area[i].x1 = schedule.area[i].x0 + 20;
 80016c2:	8090      	strh	r0, [r2, #4]
			schedule.area[i].y1 = schedule.area[i].y0 + 20;
 80016c4:	80d1      	strh	r1, [r2, #6]
		for(uint8_t i = 0 ; i < 5 ; i++){
 80016c6:	3208      	adds	r2, #8
 80016c8:	2be3      	cmp	r3, #227	; 0xe3
 80016ca:	d1f4      	bne.n	80016b6 <main+0x1b2>
		task_fuc();
 80016cc:	f7ff fc44 	bl	8000f58 <task_fuc>
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40013800 	.word	0x40013800
 80016d8:	50000400 	.word	0x50000400
 80016dc:	20000230 	.word	0x20000230
 80016e0:	200001f0 	.word	0x200001f0
 80016e4:	2000019c 	.word	0x2000019c
 80016e8:	40005400 	.word	0x40005400
 80016ec:	00300f38 	.word	0x00300f38
 80016f0:	08004202 	.word	0x08004202
 80016f4:	20000346 	.word	0x20000346

080016f8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f8:	2201      	movs	r2, #1
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_MspInit+0x18>)
 80016fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016fe:	430a      	orrs	r2, r1
 8001700:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001706:	0552      	lsls	r2, r2, #21
 8001708:	430a      	orrs	r2, r1
 800170a:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170c:	4770      	bx	lr
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001714:	b510      	push	{r4, lr}
 8001716:	0004      	movs	r4, r0
 8001718:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	2214      	movs	r2, #20
 800171c:	2100      	movs	r1, #0
 800171e:	a801      	add	r0, sp, #4
 8001720:	f001 ffbe 	bl	80036a0 <memset>
  if(hi2c->Instance==I2C1)
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_I2C_MspInit+0x50>)
 8001726:	6822      	ldr	r2, [r4, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d119      	bne.n	8001760 <HAL_I2C_MspInit+0x4c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172c:	2102      	movs	r1, #2
 800172e:	4c0e      	ldr	r4, [pc, #56]	; (8001768 <HAL_I2C_MspInit+0x54>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	480e      	ldr	r0, [pc, #56]	; (800176c <HAL_I2C_MspInit+0x58>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001734:	430a      	orrs	r2, r1
 8001736:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001738:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800173a:	400b      	ands	r3, r1
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001740:	23c0      	movs	r3, #192	; 0xc0
 8001742:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001744:	3bae      	subs	r3, #174	; 0xae
 8001746:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	3b0f      	subs	r3, #15
 800174a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800174e:	3b02      	subs	r3, #2
 8001750:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f000 f963 	bl	8001a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800175a:	039b      	lsls	r3, r3, #14
 800175c:	4313      	orrs	r3, r2
 800175e:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001760:	b006      	add	sp, #24
 8001762:	bd10      	pop	{r4, pc}
 8001764:	40005400 	.word	0x40005400
 8001768:	40021000 	.word	0x40021000
 800176c:	50000400 	.word	0x50000400

08001770 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	6802      	ldr	r2, [r0, #0]
 8001774:	05db      	lsls	r3, r3, #23
 8001776:	429a      	cmp	r2, r3
 8001778:	d104      	bne.n	8001784 <HAL_TIM_PWM_MspInit+0x14>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177a:	2301      	movs	r3, #1
 800177c:	4a02      	ldr	r2, [pc, #8]	; (8001788 <HAL_TIM_PWM_MspInit+0x18>)
 800177e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001780:	430b      	orrs	r3, r1
 8001782:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001784:	4770      	bx	lr
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800178c:	b510      	push	{r4, lr}
 800178e:	0004      	movs	r4, r0
 8001790:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	2214      	movs	r2, #20
 8001794:	2100      	movs	r1, #0
 8001796:	a801      	add	r0, sp, #4
 8001798:	f001 ff82 	bl	80036a0 <memset>
  if(htim->Instance==TIM2)
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	6822      	ldr	r2, [r4, #0]
 80017a0:	05db      	lsls	r3, r3, #23
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d114      	bne.n	80017d0 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	2001      	movs	r0, #1
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_TIM_MspPostInit+0x48>)
 80017aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017ac:	4301      	orrs	r1, r0
 80017ae:	62d1      	str	r1, [r2, #44]	; 0x2c
 80017b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4003      	ands	r3, r0
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	021b      	lsls	r3, r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 80017c8:	3303      	adds	r3, #3
 80017ca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f000 f926 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017d0:	b006      	add	sp, #24
 80017d2:	bd10      	pop	{r4, pc}
 80017d4:	40021000 	.word	0x40021000

080017d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d8:	b510      	push	{r4, lr}
 80017da:	0004      	movs	r4, r0
 80017dc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	2214      	movs	r2, #20
 80017e0:	2100      	movs	r1, #0
 80017e2:	a801      	add	r0, sp, #4
 80017e4:	f001 ff5c 	bl	80036a0 <memset>
  if(huart->Instance==USART1)
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_UART_MspInit+0x54>)
 80017ea:	6822      	ldr	r2, [r4, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d11b      	bne.n	8001828 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_UART_MspInit+0x58>)
 80017f4:	01d2      	lsls	r2, r2, #7
 80017f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 80017fa:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fc:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	430a      	orrs	r2, r1
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	400b      	ands	r3, r1
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001810:	23c0      	movs	r3, #192	; 0xc0
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	185b      	adds	r3, r3, r1
 800181c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800181e:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001822:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f000 f8fa 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001828:	b006      	add	sp, #24
 800182a:	bd10      	pop	{r4, pc}
 800182c:	40013800 	.word	0x40013800
 8001830:	40021000 	.word	0x40021000

08001834 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <NMI_Handler>

08001836 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler>

08001838 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001838:	4770      	bx	lr

0800183a <PendSV_Handler>:
 800183a:	4770      	bx	lr

0800183c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183e:	f000 f885 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001842:	bd10      	pop	{r4, pc}

08001844 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <_sbrk+0x30>)
 8001846:	490c      	ldr	r1, [pc, #48]	; (8001878 <_sbrk+0x34>)
{
 8001848:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800184a:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4a0b      	ldr	r2, [pc, #44]	; (800187c <_sbrk+0x38>)
{
 800184e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001850:	6810      	ldr	r0, [r2, #0]
 8001852:	2800      	cmp	r0, #0
 8001854:	d101      	bne.n	800185a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8001856:	480a      	ldr	r0, [pc, #40]	; (8001880 <_sbrk+0x3c>)
 8001858:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	6810      	ldr	r0, [r2, #0]
 800185c:	18c3      	adds	r3, r0, r3
 800185e:	428b      	cmp	r3, r1
 8001860:	d906      	bls.n	8001870 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8001862:	f001 fed7 	bl	8003614 <__errno>
 8001866:	230c      	movs	r3, #12
 8001868:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800186a:	2001      	movs	r0, #1
 800186c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800186e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001870:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001872:	e7fc      	b.n	800186e <_sbrk+0x2a>
 8001874:	00000400 	.word	0x00000400
 8001878:	20002000 	.word	0x20002000
 800187c:	20000378 	.word	0x20000378
 8001880:	20000390 	.word	0x20000390

08001884 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001884:	4770      	bx	lr
	...

08001888 <Reset_Handler>:
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <LoopForever+0x2>)
 800188a:	4685      	mov	sp, r0
 800188c:	f7ff fffa 	bl	8001884 <SystemInit>
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <LoopForever+0x6>)
 8001892:	490d      	ldr	r1, [pc, #52]	; (80018c8 <LoopForever+0xa>)
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <LoopForever+0xe>)
 8001896:	2300      	movs	r3, #0
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:
 800189a:	58d4      	ldr	r4, [r2, r3]
 800189c:	50c4      	str	r4, [r0, r3]
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:
 80018a0:	18c4      	adds	r4, r0, r3
 80018a2:	428c      	cmp	r4, r1
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <LoopForever+0x12>)
 80018a8:	4c0a      	ldr	r4, [pc, #40]	; (80018d4 <LoopForever+0x16>)
 80018aa:	2300      	movs	r3, #0
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:
 80018b2:	42a2      	cmp	r2, r4
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>
 80018b6:	f001 feb3 	bl	8003620 <__libc_init_array>
 80018ba:	f7ff fe23 	bl	8001504 <main>

080018be <LoopForever>:
 80018be:	e7fe      	b.n	80018be <LoopForever>
 80018c0:	20002000 	.word	0x20002000
 80018c4:	20000000 	.word	0x20000000
 80018c8:	2000010c 	.word	0x2000010c
 80018cc:	080042e8 	.word	0x080042e8
 80018d0:	2000010c 	.word	0x2000010c
 80018d4:	20000390 	.word	0x20000390

080018d8 <ADC1_COMP_IRQHandler>:
 80018d8:	e7fe      	b.n	80018d8 <ADC1_COMP_IRQHandler>
	...

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b570      	push	{r4, r5, r6, lr}
 80018de:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e0:	20fa      	movs	r0, #250	; 0xfa
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_InitTick+0x3c>)
 80018e4:	0080      	lsls	r0, r0, #2
 80018e6:	7819      	ldrb	r1, [r3, #0]
 80018e8:	f7fe fc2a 	bl	8000140 <__udivsi3>
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_InitTick+0x40>)
 80018ee:	0001      	movs	r1, r0
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	f7fe fc25 	bl	8000140 <__udivsi3>
 80018f6:	f000 f877 	bl	80019e8 <HAL_SYSTICK_Config>
 80018fa:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80018fc:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018fe:	2c00      	cmp	r4, #0
 8001900:	d109      	bne.n	8001916 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	2d03      	cmp	r5, #3
 8001904:	d807      	bhi.n	8001916 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001906:	3802      	subs	r0, #2
 8001908:	0022      	movs	r2, r4
 800190a:	0029      	movs	r1, r5
 800190c:	f000 f842 	bl	8001994 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001910:	0020      	movs	r0, r4
 8001912:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_InitTick+0x44>)
 8001914:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001916:	bd70      	pop	{r4, r5, r6, pc}
 8001918:	200000a0 	.word	0x200000a0
 800191c:	2000009c 	.word	0x2000009c
 8001920:	200000a4 	.word	0x200000a4

08001924 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001924:	2340      	movs	r3, #64	; 0x40
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_Init+0x24>)
{
 8001928:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800192a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800192c:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800192e:	430b      	orrs	r3, r1
 8001930:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001932:	f7ff ffd3 	bl	80018dc <HAL_InitTick>
 8001936:	1e04      	subs	r4, r0, #0
 8001938:	d103      	bne.n	8001942 <HAL_Init+0x1e>
    HAL_MspInit();
 800193a:	f7ff fedd 	bl	80016f8 <HAL_MspInit>
}
 800193e:	0020      	movs	r0, r4
 8001940:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001942:	2401      	movs	r4, #1
 8001944:	e7fb      	b.n	800193e <HAL_Init+0x1a>
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	40022000 	.word	0x40022000

0800194c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800194c:	4a03      	ldr	r2, [pc, #12]	; (800195c <HAL_IncTick+0x10>)
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <HAL_IncTick+0x14>)
 8001950:	6811      	ldr	r1, [r2, #0]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	185b      	adds	r3, r3, r1
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	4770      	bx	lr
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	2000037c 	.word	0x2000037c
 8001960:	200000a0 	.word	0x200000a0

08001964 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001964:	4b01      	ldr	r3, [pc, #4]	; (800196c <HAL_GetTick+0x8>)
 8001966:	6818      	ldr	r0, [r3, #0]
}
 8001968:	4770      	bx	lr
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	2000037c 	.word	0x2000037c

08001970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff fff6 	bl	8001964 <HAL_GetTick>
 8001978:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	1c63      	adds	r3, r4, #1
 800197c:	d002      	beq.n	8001984 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <HAL_Delay+0x20>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001984:	f7ff ffee 	bl	8001964 <HAL_GetTick>
 8001988:	1b40      	subs	r0, r0, r5
 800198a:	42a0      	cmp	r0, r4
 800198c:	d3fa      	bcc.n	8001984 <HAL_Delay+0x14>
  {
  }
}
 800198e:	bd70      	pop	{r4, r5, r6, pc}
 8001990:	200000a0 	.word	0x200000a0

08001994 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001994:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001996:	25ff      	movs	r5, #255	; 0xff
 8001998:	2403      	movs	r4, #3
 800199a:	002a      	movs	r2, r5
 800199c:	4004      	ands	r4, r0
 800199e:	00e4      	lsls	r4, r4, #3
 80019a0:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019a2:	0189      	lsls	r1, r1, #6
 80019a4:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019a6:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019a8:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019aa:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80019ac:	2800      	cmp	r0, #0
 80019ae:	db0a      	blt.n	80019c6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019b0:	24c0      	movs	r4, #192	; 0xc0
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_NVIC_SetPriority+0x4c>)
 80019b4:	0880      	lsrs	r0, r0, #2
 80019b6:	0080      	lsls	r0, r0, #2
 80019b8:	18c0      	adds	r0, r0, r3
 80019ba:	00a4      	lsls	r4, r4, #2
 80019bc:	5903      	ldr	r3, [r0, r4]
 80019be:	401a      	ands	r2, r3
 80019c0:	4311      	orrs	r1, r2
 80019c2:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80019c4:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019c6:	200f      	movs	r0, #15
 80019c8:	4003      	ands	r3, r0
 80019ca:	3b08      	subs	r3, #8
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <HAL_NVIC_SetPriority+0x50>)
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	181b      	adds	r3, r3, r0
 80019d4:	69d8      	ldr	r0, [r3, #28]
 80019d6:	4002      	ands	r2, r0
 80019d8:	4311      	orrs	r1, r2
 80019da:	61d9      	str	r1, [r3, #28]
 80019dc:	e7f2      	b.n	80019c4 <HAL_NVIC_SetPriority+0x30>
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e8:	2280      	movs	r2, #128	; 0x80
 80019ea:	1e43      	subs	r3, r0, #1
 80019ec:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d20d      	bcs.n	8001a10 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f4:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f6:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f8:	4807      	ldr	r0, [pc, #28]	; (8001a18 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fa:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019fc:	6a03      	ldr	r3, [r0, #32]
 80019fe:	0609      	lsls	r1, r1, #24
 8001a00:	021b      	lsls	r3, r3, #8
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	430b      	orrs	r3, r1
 8001a06:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a08:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a10:	4770      	bx	lr
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	e000e010 	.word	0xe000e010
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a1c:	4a58      	ldr	r2, [pc, #352]	; (8001b80 <HAL_GPIO_Init+0x164>)
{
 8001a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a20:	1882      	adds	r2, r0, r2
 8001a22:	1e54      	subs	r4, r2, #1
 8001a24:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8001a26:	2300      	movs	r3, #0
{
 8001a28:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a2a:	3205      	adds	r2, #5
{
 8001a2c:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a2e:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a30:	9a03      	ldr	r2, [sp, #12]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	0014      	movs	r4, r2
 8001a36:	40dc      	lsrs	r4, r3
 8001a38:	d101      	bne.n	8001a3e <HAL_GPIO_Init+0x22>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 8001a3a:	b007      	add	sp, #28
 8001a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a3e:	2101      	movs	r1, #1
 8001a40:	000d      	movs	r5, r1
 8001a42:	0014      	movs	r4, r2
 8001a44:	409d      	lsls	r5, r3
 8001a46:	402c      	ands	r4, r5
 8001a48:	468c      	mov	ip, r1
 8001a4a:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8001a4c:	422a      	tst	r2, r5
 8001a4e:	d100      	bne.n	8001a52 <HAL_GPIO_Init+0x36>
 8001a50:	e094      	b.n	8001b7c <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a52:	2403      	movs	r4, #3
 8001a54:	9a03      	ldr	r2, [sp, #12]
 8001a56:	005e      	lsls	r6, r3, #1
 8001a58:	6852      	ldr	r2, [r2, #4]
 8001a5a:	9201      	str	r2, [sp, #4]
 8001a5c:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001a5e:	40b4      	lsls	r4, r6
 8001a60:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a62:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001a64:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a66:	4564      	cmp	r4, ip
 8001a68:	d82a      	bhi.n	8001ac0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8001a6a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001a6c:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6e:	9903      	ldr	r1, [sp, #12]
 8001a70:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a72:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a74:	40b4      	lsls	r4, r6
 8001a76:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8001a78:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a7a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a7c:	43ac      	bics	r4, r5
 8001a7e:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a80:	090c      	lsrs	r4, r1, #4
 8001a82:	4661      	mov	r1, ip
 8001a84:	400c      	ands	r4, r1
 8001a86:	409c      	lsls	r4, r3
 8001a88:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001a8a:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8001a8c:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a8e:	9904      	ldr	r1, [sp, #16]
 8001a90:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a92:	9903      	ldr	r1, [sp, #12]
 8001a94:	688c      	ldr	r4, [r1, #8]
 8001a96:	40b4      	lsls	r4, r6
 8001a98:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001a9a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9c:	2a02      	cmp	r2, #2
 8001a9e:	d111      	bne.n	8001ac4 <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001aa0:	2507      	movs	r5, #7
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	401d      	ands	r5, r3
 8001aa6:	00ad      	lsls	r5, r5, #2
 8001aa8:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8001aaa:	08dc      	lsrs	r4, r3, #3
 8001aac:	00a4      	lsls	r4, r4, #2
 8001aae:	1904      	adds	r4, r0, r4
 8001ab0:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001ab2:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001ab4:	9903      	ldr	r1, [sp, #12]
 8001ab6:	6909      	ldr	r1, [r1, #16]
 8001ab8:	40a9      	lsls	r1, r5
 8001aba:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8001abc:	6227      	str	r7, [r4, #32]
 8001abe:	e001      	b.n	8001ac4 <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac0:	2a03      	cmp	r2, #3
 8001ac2:	d1e3      	bne.n	8001a8c <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac4:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 8001ac6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ac8:	9904      	ldr	r1, [sp, #16]
 8001aca:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001acc:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8001ace:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ad0:	22c0      	movs	r2, #192	; 0xc0
 8001ad2:	9901      	ldr	r1, [sp, #4]
 8001ad4:	0292      	lsls	r2, r2, #10
 8001ad6:	4211      	tst	r1, r2
 8001ad8:	d050      	beq.n	8001b7c <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2701      	movs	r7, #1
 8001adc:	4c29      	ldr	r4, [pc, #164]	; (8001b84 <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001ade:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae0:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001ae2:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae4:	433a      	orrs	r2, r7
 8001ae6:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ae8:	4a27      	ldr	r2, [pc, #156]	; (8001b88 <HAL_GPIO_Init+0x16c>)
 8001aea:	089c      	lsrs	r4, r3, #2
 8001aec:	00a4      	lsls	r4, r4, #2
 8001aee:	18a4      	adds	r4, r4, r2
 8001af0:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001af2:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8001af4:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001af6:	220f      	movs	r2, #15
 8001af8:	00ad      	lsls	r5, r5, #2
 8001afa:	40aa      	lsls	r2, r5
 8001afc:	4661      	mov	r1, ip
 8001afe:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001b00:	22a0      	movs	r2, #160	; 0xa0
 8001b02:	05d2      	lsls	r2, r2, #23
 8001b04:	4694      	mov	ip, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	4560      	cmp	r0, ip
 8001b0a:	d00d      	beq.n	8001b28 <HAL_GPIO_Init+0x10c>
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <HAL_GPIO_Init+0x170>)
 8001b0e:	4694      	mov	ip, r2
 8001b10:	003a      	movs	r2, r7
 8001b12:	4560      	cmp	r0, ip
 8001b14:	d008      	beq.n	8001b28 <HAL_GPIO_Init+0x10c>
 8001b16:	4f1e      	ldr	r7, [pc, #120]	; (8001b90 <HAL_GPIO_Init+0x174>)
 8001b18:	1892      	adds	r2, r2, r2
 8001b1a:	42b8      	cmp	r0, r7
 8001b1c:	d004      	beq.n	8001b28 <HAL_GPIO_Init+0x10c>
 8001b1e:	4f1d      	ldr	r7, [pc, #116]	; (8001b94 <HAL_GPIO_Init+0x178>)
 8001b20:	0032      	movs	r2, r6
 8001b22:	42b8      	cmp	r0, r7
 8001b24:	d000      	beq.n	8001b28 <HAL_GPIO_Init+0x10c>
 8001b26:	9a05      	ldr	r2, [sp, #20]
 8001b28:	40aa      	lsls	r2, r5
 8001b2a:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8001b2c:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b2e:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8001b30:	000d      	movs	r5, r1
        temp = EXTI->RTSR;
 8001b32:	4a19      	ldr	r2, [pc, #100]	; (8001b98 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 8001b34:	43cc      	mvns	r4, r1
        temp = EXTI->RTSR;
 8001b36:	6896      	ldr	r6, [r2, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b38:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8001b3a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3c:	02c9      	lsls	r1, r1, #11
 8001b3e:	d401      	bmi.n	8001b44 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8001b40:	0035      	movs	r5, r6
 8001b42:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8001b44:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001b46:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8001b48:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b4a:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8001b4c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b4e:	0289      	lsls	r1, r1, #10
 8001b50:	d401      	bmi.n	8001b56 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8001b52:	0035      	movs	r5, r6
 8001b54:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 8001b56:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8001b58:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001b5a:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b5c:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8001b5e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b60:	0389      	lsls	r1, r1, #14
 8001b62:	d401      	bmi.n	8001b68 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8001b64:	0035      	movs	r5, r6
 8001b66:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8001b68:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8001b6a:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8001b6c:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b6e:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8001b70:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b72:	03c9      	lsls	r1, r1, #15
 8001b74:	d401      	bmi.n	8001b7a <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 8001b76:	4025      	ands	r5, r4
 8001b78:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8001b7a:	6016      	str	r6, [r2, #0]
    position++;
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	e757      	b.n	8001a30 <HAL_GPIO_Init+0x14>
 8001b80:	afffe400 	.word	0xafffe400
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	50000400 	.word	0x50000400
 8001b90:	50000800 	.word	0x50000800
 8001b94:	50000c00 	.word	0x50000c00
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b9c:	2a00      	cmp	r2, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ba2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001ba4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001ba6:	e7fc      	b.n	8001ba2 <HAL_GPIO_WritePin+0x6>

08001ba8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ba8:	6803      	ldr	r3, [r0, #0]
 8001baa:	699a      	ldr	r2, [r3, #24]
 8001bac:	0792      	lsls	r2, r2, #30
 8001bae:	d501      	bpl.n	8001bb4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	6999      	ldr	r1, [r3, #24]
 8001bb8:	4211      	tst	r1, r2
 8001bba:	d102      	bne.n	8001bc2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bbc:	6999      	ldr	r1, [r3, #24]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	619a      	str	r2, [r3, #24]
  }
}
 8001bc2:	4770      	bx	lr

08001bc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001bc4:	b530      	push	{r4, r5, lr}
 8001bc6:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001bc8:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bca:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bcc:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bce:	0589      	lsls	r1, r1, #22
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <I2C_TransferConfig+0x28>)
 8001bd6:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bd8:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001bda:	0d64      	lsrs	r4, r4, #21
 8001bdc:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bde:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001be0:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001be2:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001be4:	432a      	orrs	r2, r5
 8001be6:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001be8:	bd30      	pop	{r4, r5, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	03ff63ff 	.word	0x03ff63ff

08001bf0 <I2C_IsErrorOccurred>:
{
 8001bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bf2:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8001bf4:	6802      	ldr	r2, [r0, #0]
{
 8001bf6:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8001bf8:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	000f      	movs	r7, r1
{
 8001bfe:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c00:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c02:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c04:	4219      	tst	r1, r3
 8001c06:	d00e      	beq.n	8001c26 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c08:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c0a:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8001c0c:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c0e:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	699a      	ldr	r2, [r3, #24]
 8001c14:	423a      	tst	r2, r7
 8001c16:	d164      	bne.n	8001ce2 <I2C_IsErrorOccurred+0xf2>
 8001c18:	9a01      	ldr	r2, [sp, #4]
 8001c1a:	2a00      	cmp	r2, #0
 8001c1c:	d032      	beq.n	8001c84 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 8001c1e:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8001c20:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8001c22:	9b00      	ldr	r3, [sp, #0]
 8001c24:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c26:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8001c28:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c2a:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 8001c2c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c2e:	420a      	tst	r2, r1
 8001c30:	d002      	beq.n	8001c38 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 8001c32:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c34:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8001c36:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	00c9      	lsls	r1, r1, #3
 8001c3c:	420a      	tst	r2, r1
 8001c3e:	d003      	beq.n	8001c48 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8001c40:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c42:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8001c44:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 8001c46:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c48:	2180      	movs	r1, #128	; 0x80
 8001c4a:	0089      	lsls	r1, r1, #2
 8001c4c:	420a      	tst	r2, r1
 8001c4e:	d04d      	beq.n	8001cec <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c50:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c52:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c54:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 8001c56:	0020      	movs	r0, r4
 8001c58:	f7ff ffa6 	bl	8001ba8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001c5c:	6822      	ldr	r2, [r4, #0]
 8001c5e:	4925      	ldr	r1, [pc, #148]	; (8001cf4 <I2C_IsErrorOccurred+0x104>)
 8001c60:	6853      	ldr	r3, [r2, #4]
 8001c62:	400b      	ands	r3, r1
 8001c64:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001c66:	0023      	movs	r3, r4
 8001c68:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8001c6a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c6c:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 8001c6e:	4307      	orrs	r7, r0
 8001c70:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c74:	0022      	movs	r2, r4
 8001c76:	2300      	movs	r3, #0
 8001c78:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8001c7a:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7c:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	7023      	strb	r3, [r4, #0]
 8001c82:	e035      	b.n	8001cf0 <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 8001c84:	1c72      	adds	r2, r6, #1
 8001c86:	d0c4      	beq.n	8001c12 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c88:	f7ff fe6c 	bl	8001964 <HAL_GetTick>
 8001c8c:	1b40      	subs	r0, r0, r5
 8001c8e:	42b0      	cmp	r0, r6
 8001c90:	d801      	bhi.n	8001c96 <I2C_IsErrorOccurred+0xa6>
 8001c92:	2e00      	cmp	r6, #0
 8001c94:	d1bc      	bne.n	8001c10 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8001c96:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c98:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8001c9a:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c9c:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8001c9e:	7811      	ldrb	r1, [r2, #0]
 8001ca0:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ca2:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8001ca4:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	0209      	lsls	r1, r1, #8
 8001caa:	420a      	tst	r2, r1
 8001cac:	d00c      	beq.n	8001cc8 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001cae:	2280      	movs	r2, #128	; 0x80
 8001cb0:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cb2:	4210      	tst	r0, r2
 8001cb4:	d108      	bne.n	8001cc8 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 8001cb6:	4661      	mov	r1, ip
 8001cb8:	2920      	cmp	r1, #32
 8001cba:	d005      	beq.n	8001cc8 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cbc:	6859      	ldr	r1, [r3, #4]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8001cc2:	f7ff fe4f 	bl	8001964 <HAL_GetTick>
 8001cc6:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	423b      	tst	r3, r7
 8001cce:	d19f      	bne.n	8001c10 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cd0:	f7ff fe48 	bl	8001964 <HAL_GetTick>
 8001cd4:	1b40      	subs	r0, r0, r5
 8001cd6:	2819      	cmp	r0, #25
 8001cd8:	d9f6      	bls.n	8001cc8 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001cdc:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	e796      	b.n	8001c10 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 8001ce2:	9a01      	ldr	r2, [sp, #4]
 8001ce4:	2a00      	cmp	r2, #0
 8001ce6:	d19a      	bne.n	8001c1e <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ce8:	61df      	str	r7, [r3, #28]
 8001cea:	e798      	b.n	8001c1e <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8001cec:	2800      	cmp	r0, #0
 8001cee:	d1b2      	bne.n	8001c56 <I2C_IsErrorOccurred+0x66>
}
 8001cf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	fe00e800 	.word	0xfe00e800

08001cf8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfa:	0004      	movs	r4, r0
 8001cfc:	000d      	movs	r5, r1
 8001cfe:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d00:	2702      	movs	r7, #2
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	423b      	tst	r3, r7
 8001d08:	d001      	beq.n	8001d0e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8001d0a:	2000      	movs	r0, #0
}
 8001d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d0e:	0032      	movs	r2, r6
 8001d10:	0029      	movs	r1, r5
 8001d12:	0020      	movs	r0, r4
 8001d14:	f7ff ff6c 	bl	8001bf0 <I2C_IsErrorOccurred>
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	d118      	bne.n	8001d4e <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8001d1c:	1c6b      	adds	r3, r5, #1
 8001d1e:	d0f0      	beq.n	8001d02 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d20:	f7ff fe20 	bl	8001964 <HAL_GetTick>
 8001d24:	1b80      	subs	r0, r0, r6
 8001d26:	42a8      	cmp	r0, r5
 8001d28:	d801      	bhi.n	8001d2e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8001d2a:	2d00      	cmp	r5, #0
 8001d2c:	d1e9      	bne.n	8001d02 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	001a      	movs	r2, r3
 8001d34:	403a      	ands	r2, r7
 8001d36:	423b      	tst	r3, r7
 8001d38:	d1e3      	bne.n	8001d02 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d3a:	2120      	movs	r1, #32
 8001d3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d3e:	430b      	orrs	r3, r1
 8001d40:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d42:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8001d44:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8001d46:	3341      	adds	r3, #65	; 0x41
 8001d48:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4a:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8001d4c:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8001d4e:	2001      	movs	r0, #1
 8001d50:	e7dc      	b.n	8001d0c <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08001d52 <I2C_WaitOnFlagUntilTimeout>:
{
 8001d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d54:	0004      	movs	r4, r0
 8001d56:	000d      	movs	r5, r1
 8001d58:	0017      	movs	r7, r2
 8001d5a:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d5c:	6822      	ldr	r2, [r4, #0]
 8001d5e:	6993      	ldr	r3, [r2, #24]
 8001d60:	402b      	ands	r3, r5
 8001d62:	1b5b      	subs	r3, r3, r5
 8001d64:	4259      	negs	r1, r3
 8001d66:	414b      	adcs	r3, r1
 8001d68:	42bb      	cmp	r3, r7
 8001d6a:	d001      	beq.n	8001d70 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	e01f      	b.n	8001db0 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8001d70:	1c73      	adds	r3, r6, #1
 8001d72:	d0f4      	beq.n	8001d5e <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d74:	f7ff fdf6 	bl	8001964 <HAL_GetTick>
 8001d78:	9b06      	ldr	r3, [sp, #24]
 8001d7a:	1ac0      	subs	r0, r0, r3
 8001d7c:	42b0      	cmp	r0, r6
 8001d7e:	d801      	bhi.n	8001d84 <I2C_WaitOnFlagUntilTimeout+0x32>
 8001d80:	2e00      	cmp	r6, #0
 8001d82:	d1eb      	bne.n	8001d5c <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	402b      	ands	r3, r5
 8001d8a:	1b5b      	subs	r3, r3, r5
 8001d8c:	425a      	negs	r2, r3
 8001d8e:	4153      	adcs	r3, r2
 8001d90:	42bb      	cmp	r3, r7
 8001d92:	d1e3      	bne.n	8001d5c <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d94:	2220      	movs	r2, #32
 8001d96:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8001d98:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d9e:	0023      	movs	r3, r4
 8001da0:	3341      	adds	r3, #65	; 0x41
 8001da2:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da4:	0022      	movs	r2, r4
 8001da6:	2300      	movs	r3, #0
 8001da8:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8001daa:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dac:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8001dae:	7023      	strb	r3, [r4, #0]
}
 8001db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001db2 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db4:	0004      	movs	r4, r0
 8001db6:	000e      	movs	r6, r1
 8001db8:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dba:	2520      	movs	r5, #32
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	422b      	tst	r3, r5
 8001dc2:	d001      	beq.n	8001dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8001dc4:	2000      	movs	r0, #0
}
 8001dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc8:	003a      	movs	r2, r7
 8001dca:	0031      	movs	r1, r6
 8001dcc:	0020      	movs	r0, r4
 8001dce:	f7ff ff0f 	bl	8001bf0 <I2C_IsErrorOccurred>
 8001dd2:	2800      	cmp	r0, #0
 8001dd4:	d115      	bne.n	8001e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd6:	f7ff fdc5 	bl	8001964 <HAL_GetTick>
 8001dda:	1bc0      	subs	r0, r0, r7
 8001ddc:	42b0      	cmp	r0, r6
 8001dde:	d801      	bhi.n	8001de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8001de0:	2e00      	cmp	r6, #0
 8001de2:	d1eb      	bne.n	8001dbc <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	001a      	movs	r2, r3
 8001dea:	402a      	ands	r2, r5
 8001dec:	422b      	tst	r3, r5
 8001dee:	d1e5      	bne.n	8001dbc <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001df0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001df2:	432b      	orrs	r3, r5
 8001df4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8001df8:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	3341      	adds	r3, #65	; 0x41
 8001dfc:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfe:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8001e00:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8001e02:	2001      	movs	r0, #1
 8001e04:	e7df      	b.n	8001dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

08001e08 <HAL_I2C_Init>:
{
 8001e08:	b570      	push	{r4, r5, r6, lr}
 8001e0a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001e0c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001e0e:	2c00      	cmp	r4, #0
 8001e10:	d03f      	beq.n	8001e92 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e12:	0025      	movs	r5, r4
 8001e14:	3541      	adds	r5, #65	; 0x41
 8001e16:	782b      	ldrb	r3, [r5, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8001e1e:	0023      	movs	r3, r4
 8001e20:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001e22:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8001e24:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8001e26:	f7ff fc75 	bl	8001714 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e2a:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001e2c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e2e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001e30:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e32:	481d      	ldr	r0, [pc, #116]	; (8001ea8 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 8001e34:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e36:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8001e38:	438a      	bics	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e3c:	6861      	ldr	r1, [r4, #4]
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_I2C_Init+0xa4>)
 8001e40:	400a      	ands	r2, r1
 8001e42:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	4002      	ands	r2, r0
 8001e48:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e4a:	68e2      	ldr	r2, [r4, #12]
 8001e4c:	2a01      	cmp	r2, #1
 8001e4e:	d121      	bne.n	8001e94 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e50:	2180      	movs	r1, #128	; 0x80
 8001e52:	0209      	lsls	r1, r1, #8
 8001e54:	4331      	orrs	r1, r6
 8001e56:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	4915      	ldr	r1, [pc, #84]	; (8001eb0 <HAL_I2C_Init+0xa8>)
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e60:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e62:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e64:	4002      	ands	r2, r0
 8001e66:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e68:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e6a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e6c:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e6e:	69a1      	ldr	r1, [r4, #24]
 8001e70:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e72:	430a      	orrs	r2, r1
 8001e74:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e76:	6a21      	ldr	r1, [r4, #32]
 8001e78:	69e2      	ldr	r2, [r4, #28]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	6819      	ldr	r1, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e88:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e8a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e8c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8e:	3442      	adds	r4, #66	; 0x42
 8001e90:	7020      	strb	r0, [r4, #0]
}
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e94:	2184      	movs	r1, #132	; 0x84
 8001e96:	0209      	lsls	r1, r1, #8
 8001e98:	4331      	orrs	r1, r6
 8001e9a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e9c:	2a02      	cmp	r2, #2
 8001e9e:	d1db      	bne.n	8001e58 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ea0:	2280      	movs	r2, #128	; 0x80
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	e7d7      	b.n	8001e58 <HAL_I2C_Init+0x50>
 8001ea8:	ffff7fff 	.word	0xffff7fff
 8001eac:	f0ffffff 	.word	0xf0ffffff
 8001eb0:	02008000 	.word	0x02008000

08001eb4 <HAL_I2C_Mem_Write>:
{
 8001eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	9304      	str	r3, [sp, #16]
 8001eba:	ab0e      	add	r3, sp, #56	; 0x38
 8001ebc:	9203      	str	r2, [sp, #12]
 8001ebe:	cb04      	ldmia	r3!, {r2}
 8001ec0:	0004      	movs	r4, r0
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	9205      	str	r2, [sp, #20]
 8001ec6:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec8:	0003      	movs	r3, r0
 8001eca:	3341      	adds	r3, #65	; 0x41
 8001ecc:	9307      	str	r3, [sp, #28]
 8001ece:	781b      	ldrb	r3, [r3, #0]
{
 8001ed0:	000f      	movs	r7, r1
    return HAL_BUSY;
 8001ed2:	2002      	movs	r0, #2
{
 8001ed4:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d108      	bne.n	8001eec <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 8001eda:	2a00      	cmp	r2, #0
 8001edc:	d002      	beq.n	8001ee4 <HAL_I2C_Mem_Write+0x30>
 8001ede:	9b06      	ldr	r3, [sp, #24]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001eea:	2001      	movs	r0, #1
}
 8001eec:	b009      	add	sp, #36	; 0x24
 8001eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001ef0:	0023      	movs	r3, r4
 8001ef2:	3340      	adds	r3, #64	; 0x40
 8001ef4:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001ef6:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8001ef8:	2a01      	cmp	r2, #1
 8001efa:	d0f7      	beq.n	8001eec <HAL_I2C_Mem_Write+0x38>
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001f00:	f7ff fd30 	bl	8001964 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f04:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8001f06:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f08:	9000      	str	r0, [sp, #0]
 8001f0a:	2319      	movs	r3, #25
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	0020      	movs	r0, r4
 8001f10:	0209      	lsls	r1, r1, #8
 8001f12:	f7ff ff1e 	bl	8001d52 <I2C_WaitOnFlagUntilTimeout>
 8001f16:	2800      	cmp	r0, #0
 8001f18:	d1e7      	bne.n	8001eea <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f1a:	2321      	movs	r3, #33	; 0x21
 8001f1c:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f1e:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f20:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f22:	0023      	movs	r3, r4
 8001f24:	3342      	adds	r3, #66	; 0x42
 8001f26:	9307      	str	r3, [sp, #28]
 8001f28:	2340      	movs	r3, #64	; 0x40
 8001f2a:	9a07      	ldr	r2, [sp, #28]
 8001f2c:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8001f2e:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f30:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001f32:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f34:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 8001f36:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001f38:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f3a:	466b      	mov	r3, sp
 8001f3c:	7c1a      	ldrb	r2, [r3, #16]
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_I2C_Mem_Write+0x1b4>)
 8001f40:	0020      	movs	r0, r4
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	045b      	lsls	r3, r3, #17
 8001f48:	f7ff fe3c 	bl	8001bc4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4c:	002a      	movs	r2, r5
 8001f4e:	0031      	movs	r1, r6
 8001f50:	0020      	movs	r0, r4
 8001f52:	f7ff fed1 	bl	8001cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	d126      	bne.n	8001fa8 <HAL_I2C_Mem_Write+0xf4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f5a:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f5c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f5e:	2a01      	cmp	r2, #1
 8001f60:	d116      	bne.n	8001f90 <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f62:	466a      	mov	r2, sp
 8001f64:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f66:	2180      	movs	r1, #128	; 0x80
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f68:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f6a:	0020      	movs	r0, r4
 8001f6c:	0033      	movs	r3, r6
 8001f6e:	2200      	movs	r2, #0
 8001f70:	9500      	str	r5, [sp, #0]
 8001f72:	f7ff feee 	bl	8001d52 <I2C_WaitOnFlagUntilTimeout>
 8001f76:	2800      	cmp	r0, #0
 8001f78:	d116      	bne.n	8001fa8 <HAL_I2C_Mem_Write+0xf4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f7c:	2bff      	cmp	r3, #255	; 0xff
 8001f7e:	d817      	bhi.n	8001fb0 <HAL_I2C_Mem_Write+0xfc>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f80:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8001f82:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f84:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8001f86:	b292      	uxth	r2, r2
 8001f88:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	9000      	str	r0, [sp, #0]
 8001f8e:	e014      	b.n	8001fba <HAL_I2C_Mem_Write+0x106>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f90:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f92:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f94:	0a12      	lsrs	r2, r2, #8
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f98:	0020      	movs	r0, r4
 8001f9a:	002a      	movs	r2, r5
 8001f9c:	f7ff feac 	bl	8001cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	e7dc      	b.n	8001f62 <HAL_I2C_Mem_Write+0xae>
      __HAL_UNLOCK(hi2c);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	3440      	adds	r4, #64	; 0x40
 8001fac:	7023      	strb	r3, [r4, #0]
 8001fae:	e79c      	b.n	8001eea <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fb0:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fb2:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fb4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fb6:	045b      	lsls	r3, r3, #17
 8001fb8:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fba:	0039      	movs	r1, r7
 8001fbc:	0020      	movs	r0, r4
 8001fbe:	f7ff fe01 	bl	8001bc4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc2:	002a      	movs	r2, r5
 8001fc4:	0031      	movs	r1, r6
 8001fc6:	0020      	movs	r0, r4
 8001fc8:	f7ff fe96 	bl	8001cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d000      	beq.n	8001fd2 <HAL_I2C_Mem_Write+0x11e>
 8001fd0:	e78b      	b.n	8001eea <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fd4:	6822      	ldr	r2, [r4, #0]
 8001fd6:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001fd8:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fda:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001fdc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001fde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001fe0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001fe8:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001fec:	b292      	uxth	r2, r2
 8001fee:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d017      	beq.n	8002024 <HAL_I2C_Mem_Write+0x170>
 8001ff4:	2a00      	cmp	r2, #0
 8001ff6:	d115      	bne.n	8002024 <HAL_I2C_Mem_Write+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ff8:	0033      	movs	r3, r6
 8001ffa:	2180      	movs	r1, #128	; 0x80
 8001ffc:	0020      	movs	r0, r4
 8001ffe:	9500      	str	r5, [sp, #0]
 8002000:	f7ff fea7 	bl	8001d52 <I2C_WaitOnFlagUntilTimeout>
 8002004:	2800      	cmp	r0, #0
 8002006:	d000      	beq.n	800200a <HAL_I2C_Mem_Write+0x156>
 8002008:	e76f      	b.n	8001eea <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800200c:	2bff      	cmp	r3, #255	; 0xff
 800200e:	d923      	bls.n	8002058 <HAL_I2C_Mem_Write+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002010:	23ff      	movs	r3, #255	; 0xff
 8002012:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	22ff      	movs	r2, #255	; 0xff
 8002018:	9000      	str	r0, [sp, #0]
 800201a:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800201c:	0039      	movs	r1, r7
 800201e:	0020      	movs	r0, r4
 8002020:	f7ff fdd0 	bl	8001bc4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002024:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1cb      	bne.n	8001fc2 <HAL_I2C_Mem_Write+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202a:	002a      	movs	r2, r5
 800202c:	0031      	movs	r1, r6
 800202e:	0020      	movs	r0, r4
 8002030:	f7ff febf 	bl	8001db2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002034:	2800      	cmp	r0, #0
 8002036:	d000      	beq.n	800203a <HAL_I2C_Mem_Write+0x186>
 8002038:	e757      	b.n	8001eea <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800203a:	2120      	movs	r1, #32
 800203c:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800203e:	4d0b      	ldr	r5, [pc, #44]	; (800206c <HAL_I2C_Mem_Write+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002040:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	402a      	ands	r2, r5
 8002046:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002048:	0023      	movs	r3, r4
 800204a:	3341      	adds	r3, #65	; 0x41
 800204c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800204e:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8002050:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002052:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002054:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002056:	e749      	b.n	8001eec <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002058:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 800205a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800205c:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800205e:	b292      	uxth	r2, r2
 8002060:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	9000      	str	r0, [sp, #0]
 8002066:	e7d9      	b.n	800201c <HAL_I2C_Mem_Write+0x168>
 8002068:	80002000 	.word	0x80002000
 800206c:	fe00e800 	.word	0xfe00e800

08002070 <HAL_I2C_Mem_Read>:
{
 8002070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	9304      	str	r3, [sp, #16]
 8002076:	ab0e      	add	r3, sp, #56	; 0x38
 8002078:	9203      	str	r2, [sp, #12]
 800207a:	cb04      	ldmia	r3!, {r2}
 800207c:	0004      	movs	r4, r0
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	9205      	str	r2, [sp, #20]
 8002082:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002084:	0003      	movs	r3, r0
 8002086:	3341      	adds	r3, #65	; 0x41
 8002088:	9307      	str	r3, [sp, #28]
 800208a:	781b      	ldrb	r3, [r3, #0]
{
 800208c:	000f      	movs	r7, r1
    return HAL_BUSY;
 800208e:	2002      	movs	r0, #2
{
 8002090:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002092:	2b20      	cmp	r3, #32
 8002094:	d108      	bne.n	80020a8 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 8002096:	2a00      	cmp	r2, #0
 8002098:	d002      	beq.n	80020a0 <HAL_I2C_Mem_Read+0x30>
 800209a:	9b06      	ldr	r3, [sp, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d105      	bne.n	80020ac <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80020a6:	2001      	movs	r0, #1
}
 80020a8:	b009      	add	sp, #36	; 0x24
 80020aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80020ac:	0023      	movs	r3, r4
 80020ae:	3340      	adds	r3, #64	; 0x40
 80020b0:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80020b2:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 80020b4:	2a01      	cmp	r2, #1
 80020b6:	d0f7      	beq.n	80020a8 <HAL_I2C_Mem_Read+0x38>
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80020bc:	f7ff fc52 	bl	8001964 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020c0:	2180      	movs	r1, #128	; 0x80
 80020c2:	2319      	movs	r3, #25
 80020c4:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80020c6:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020c8:	2201      	movs	r2, #1
 80020ca:	0020      	movs	r0, r4
 80020cc:	0209      	lsls	r1, r1, #8
 80020ce:	f7ff fe40 	bl	8001d52 <I2C_WaitOnFlagUntilTimeout>
 80020d2:	1e03      	subs	r3, r0, #0
 80020d4:	d1e7      	bne.n	80020a6 <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020d6:	2222      	movs	r2, #34	; 0x22
 80020d8:	9907      	ldr	r1, [sp, #28]
 80020da:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020dc:	0022      	movs	r2, r4
 80020de:	3242      	adds	r2, #66	; 0x42
 80020e0:	9207      	str	r2, [sp, #28]
 80020e2:	2240      	movs	r2, #64	; 0x40
 80020e4:	9907      	ldr	r1, [sp, #28]
 80020e6:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 80020e8:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ea:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80020ec:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80020ee:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020f0:	494d      	ldr	r1, [pc, #308]	; (8002228 <HAL_I2C_Mem_Read+0x1b8>)
    hi2c->XferCount = Size;
 80020f2:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020f4:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 80020f6:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020f8:	7c12      	ldrb	r2, [r2, #16]
 80020fa:	0020      	movs	r0, r4
 80020fc:	9100      	str	r1, [sp, #0]
 80020fe:	0039      	movs	r1, r7
 8002100:	f7ff fd60 	bl	8001bc4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002104:	002a      	movs	r2, r5
 8002106:	0031      	movs	r1, r6
 8002108:	0020      	movs	r0, r4
 800210a:	f7ff fdf5 	bl	8001cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 800210e:	2800      	cmp	r0, #0
 8002110:	d127      	bne.n	8002162 <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002112:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002114:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002116:	2a01      	cmp	r2, #1
 8002118:	d117      	bne.n	800214a <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800211a:	466a      	mov	r2, sp
 800211c:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800211e:	2140      	movs	r1, #64	; 0x40
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002122:	0020      	movs	r0, r4
 8002124:	0033      	movs	r3, r6
 8002126:	2200      	movs	r2, #0
 8002128:	9500      	str	r5, [sp, #0]
 800212a:	f7ff fe12 	bl	8001d52 <I2C_WaitOnFlagUntilTimeout>
 800212e:	2800      	cmp	r0, #0
 8002130:	d117      	bne.n	8002162 <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002132:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002134:	4b3d      	ldr	r3, [pc, #244]	; (800222c <HAL_I2C_Mem_Read+0x1bc>)
 8002136:	2aff      	cmp	r2, #255	; 0xff
 8002138:	d817      	bhi.n	800216a <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 800213a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800213c:	b292      	uxth	r2, r2
 800213e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	049b      	lsls	r3, r3, #18
 8002148:	e014      	b.n	8002174 <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800214a:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800214c:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800214e:	0a12      	lsrs	r2, r2, #8
 8002150:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002152:	0020      	movs	r0, r4
 8002154:	002a      	movs	r2, r5
 8002156:	f7ff fdcf 	bl	8001cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 800215a:	2800      	cmp	r0, #0
 800215c:	d101      	bne.n	8002162 <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	e7db      	b.n	800211a <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 8002162:	2300      	movs	r3, #0
 8002164:	3440      	adds	r4, #64	; 0x40
 8002166:	7023      	strb	r3, [r4, #0]
 8002168:	e79d      	b.n	80020a6 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800216a:	22ff      	movs	r2, #255	; 0xff
 800216c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002174:	0039      	movs	r1, r7
 8002176:	0020      	movs	r0, r4
 8002178:	f7ff fd24 	bl	8001bc4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800217c:	0033      	movs	r3, r6
 800217e:	2200      	movs	r2, #0
 8002180:	2104      	movs	r1, #4
 8002182:	0020      	movs	r0, r4
 8002184:	9500      	str	r5, [sp, #0]
 8002186:	f7ff fde4 	bl	8001d52 <I2C_WaitOnFlagUntilTimeout>
 800218a:	2800      	cmp	r0, #0
 800218c:	d000      	beq.n	8002190 <HAL_I2C_Mem_Read+0x120>
 800218e:	e78a      	b.n	80020a6 <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002198:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800219a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800219c:	3301      	adds	r3, #1
 800219e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80021a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80021a2:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80021ac:	b292      	uxth	r2, r2
 80021ae:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d017      	beq.n	80021e4 <HAL_I2C_Mem_Read+0x174>
 80021b4:	2a00      	cmp	r2, #0
 80021b6:	d115      	bne.n	80021e4 <HAL_I2C_Mem_Read+0x174>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021b8:	0033      	movs	r3, r6
 80021ba:	2180      	movs	r1, #128	; 0x80
 80021bc:	0020      	movs	r0, r4
 80021be:	9500      	str	r5, [sp, #0]
 80021c0:	f7ff fdc7 	bl	8001d52 <I2C_WaitOnFlagUntilTimeout>
 80021c4:	2800      	cmp	r0, #0
 80021c6:	d000      	beq.n	80021ca <HAL_I2C_Mem_Read+0x15a>
 80021c8:	e76d      	b.n	80020a6 <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021cc:	2bff      	cmp	r3, #255	; 0xff
 80021ce:	d923      	bls.n	8002218 <HAL_I2C_Mem_Read+0x1a8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021d0:	23ff      	movs	r3, #255	; 0xff
 80021d2:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	22ff      	movs	r2, #255	; 0xff
 80021d8:	9000      	str	r0, [sp, #0]
 80021da:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021dc:	0039      	movs	r1, r7
 80021de:	0020      	movs	r0, r4
 80021e0:	f7ff fcf0 	bl	8001bc4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80021e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1c8      	bne.n	800217c <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ea:	002a      	movs	r2, r5
 80021ec:	0031      	movs	r1, r6
 80021ee:	0020      	movs	r0, r4
 80021f0:	f7ff fddf 	bl	8001db2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021f4:	2800      	cmp	r0, #0
 80021f6:	d000      	beq.n	80021fa <HAL_I2C_Mem_Read+0x18a>
 80021f8:	e755      	b.n	80020a6 <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021fa:	2120      	movs	r1, #32
 80021fc:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80021fe:	4d0c      	ldr	r5, [pc, #48]	; (8002230 <HAL_I2C_Mem_Read+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002200:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	402a      	ands	r2, r5
 8002206:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002208:	0023      	movs	r3, r4
 800220a:	3341      	adds	r3, #65	; 0x41
 800220c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800220e:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8002210:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002212:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002214:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002216:	e747      	b.n	80020a8 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002218:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 800221a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800221c:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800221e:	b292      	uxth	r2, r2
 8002220:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	9000      	str	r0, [sp, #0]
 8002226:	e7d9      	b.n	80021dc <HAL_I2C_Mem_Read+0x16c>
 8002228:	80002000 	.word	0x80002000
 800222c:	80002400 	.word	0x80002400
 8002230:	fe00e800 	.word	0xfe00e800

08002234 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002234:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002236:	0004      	movs	r4, r0
 8002238:	3441      	adds	r4, #65	; 0x41
 800223a:	7822      	ldrb	r2, [r4, #0]
{
 800223c:	0003      	movs	r3, r0
 800223e:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002240:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002242:	b2d6      	uxtb	r6, r2
 8002244:	2a20      	cmp	r2, #32
 8002246:	d118      	bne.n	800227a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8002248:	001d      	movs	r5, r3
 800224a:	3540      	adds	r5, #64	; 0x40
 800224c:	782a      	ldrb	r2, [r5, #0]
 800224e:	2a01      	cmp	r2, #1
 8002250:	d013      	beq.n	800227a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002252:	2224      	movs	r2, #36	; 0x24
 8002254:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3a23      	subs	r2, #35	; 0x23
 800225a:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800225c:	4807      	ldr	r0, [pc, #28]	; (800227c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800225e:	4391      	bics	r1, r2
 8002260:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002262:	6819      	ldr	r1, [r3, #0]
 8002264:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8002266:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002268:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800226a:	6819      	ldr	r1, [r3, #0]
 800226c:	4339      	orrs	r1, r7
 800226e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002270:	6819      	ldr	r1, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002276:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002278:	7028      	strb	r0, [r5, #0]
  }
}
 800227a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800227c:	ffffefff 	.word	0xffffefff

08002280 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002280:	0002      	movs	r2, r0
{
 8002282:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002284:	3241      	adds	r2, #65	; 0x41
 8002286:	7814      	ldrb	r4, [r2, #0]
{
 8002288:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800228a:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800228c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800228e:	2c20      	cmp	r4, #32
 8002290:	d117      	bne.n	80022c2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002292:	001c      	movs	r4, r3
 8002294:	3440      	adds	r4, #64	; 0x40
 8002296:	7826      	ldrb	r6, [r4, #0]
 8002298:	2e01      	cmp	r6, #1
 800229a:	d012      	beq.n	80022c2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800229c:	3022      	adds	r0, #34	; 0x22
 800229e:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3823      	subs	r0, #35	; 0x23
 80022a4:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80022a6:	4f07      	ldr	r7, [pc, #28]	; (80022c4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 80022a8:	4386      	bics	r6, r0
 80022aa:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80022ac:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80022ae:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80022b0:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80022b2:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80022b4:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80022b6:	6819      	ldr	r1, [r3, #0]
 80022b8:	4308      	orrs	r0, r1
 80022ba:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80022bc:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80022be:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80022c0:	7020      	strb	r0, [r4, #0]
  }
}
 80022c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c4:	fffff0ff 	.word	0xfffff0ff

080022c8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c8:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80022ca:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_RCC_GetSysClockFreq+0x78>)
{
 80022cc:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80022ce:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80022d0:	4022      	ands	r2, r4
 80022d2:	2a08      	cmp	r2, #8
 80022d4:	d031      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x72>
 80022d6:	2a0c      	cmp	r2, #12
 80022d8:	d009      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x26>
 80022da:	2a04      	cmp	r2, #4
 80022dc:	d125      	bne.n	800232a <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022de:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022e2:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80022e4:	17c0      	asrs	r0, r0, #31
 80022e6:	4018      	ands	r0, r3
 80022e8:	4b17      	ldr	r3, [pc, #92]	; (8002348 <HAL_RCC_GetSysClockFreq+0x80>)
 80022ea:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80022ec:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022ee:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022f0:	4816      	ldr	r0, [pc, #88]	; (800234c <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022f2:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022f4:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f6:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022f8:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022fa:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022fc:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022fe:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002300:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002302:	4211      	tst	r1, r2
 8002304:	d009      	beq.n	800231a <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <HAL_RCC_GetSysClockFreq+0x88>)
 8002308:	2300      	movs	r3, #0
 800230a:	2100      	movs	r1, #0
 800230c:	f7fe f8ae 	bl	800046c <__aeabi_lmul>
 8002310:	0022      	movs	r2, r4
 8002312:	2300      	movs	r3, #0
 8002314:	f7fe f88a 	bl	800042c <__aeabi_uldivmod>
 8002318:	e7e8      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2310      	movs	r3, #16
 800231e:	421a      	tst	r2, r3
 8002320:	d001      	beq.n	8002326 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002322:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002324:	e7f0      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002326:	4a08      	ldr	r2, [pc, #32]	; (8002348 <HAL_RCC_GetSysClockFreq+0x80>)
 8002328:	e7ee      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800232a:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800232c:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800232e:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002334:	3301      	adds	r3, #1
 8002336:	4098      	lsls	r0, r3
      break;
 8002338:	e7d8      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 800233a:	4805      	ldr	r0, [pc, #20]	; (8002350 <HAL_RCC_GetSysClockFreq+0x88>)
 800233c:	e7d6      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x24>
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	40021000 	.word	0x40021000
 8002344:	ff48e500 	.word	0xff48e500
 8002348:	00f42400 	.word	0x00f42400
 800234c:	08004289 	.word	0x08004289
 8002350:	007a1200 	.word	0x007a1200
 8002354:	003d0900 	.word	0x003d0900

08002358 <HAL_RCC_OscConfig>:
{
 8002358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235a:	0005      	movs	r5, r0
 800235c:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 800235e:	2800      	cmp	r0, #0
 8002360:	d05a      	beq.n	8002418 <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002362:	230c      	movs	r3, #12
 8002364:	4cbe      	ldr	r4, [pc, #760]	; (8002660 <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002366:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002368:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800236a:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236c:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	025b      	lsls	r3, r3, #9
 8002372:	0019      	movs	r1, r3
 8002374:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	07d2      	lsls	r2, r2, #31
 8002378:	d442      	bmi.n	8002400 <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237a:	682b      	ldr	r3, [r5, #0]
 800237c:	079b      	lsls	r3, r3, #30
 800237e:	d500      	bpl.n	8002382 <HAL_RCC_OscConfig+0x2a>
 8002380:	e08b      	b.n	800249a <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002382:	682b      	ldr	r3, [r5, #0]
 8002384:	06db      	lsls	r3, r3, #27
 8002386:	d529      	bpl.n	80023dc <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002388:	2e00      	cmp	r6, #0
 800238a:	d000      	beq.n	800238e <HAL_RCC_OscConfig+0x36>
 800238c:	e0dc      	b.n	8002548 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	059b      	lsls	r3, r3, #22
 8002392:	d502      	bpl.n	800239a <HAL_RCC_OscConfig+0x42>
 8002394:	69eb      	ldr	r3, [r5, #28]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d03e      	beq.n	8002418 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239a:	6862      	ldr	r2, [r4, #4]
 800239c:	49b1      	ldr	r1, [pc, #708]	; (8002664 <HAL_RCC_OscConfig+0x30c>)
 800239e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80023a0:	400a      	ands	r2, r1
 80023a2:	431a      	orrs	r2, r3
 80023a4:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a6:	6861      	ldr	r1, [r4, #4]
 80023a8:	6a2a      	ldr	r2, [r5, #32]
 80023aa:	0209      	lsls	r1, r1, #8
 80023ac:	0a09      	lsrs	r1, r1, #8
 80023ae:	0612      	lsls	r2, r2, #24
 80023b0:	430a      	orrs	r2, r1
 80023b2:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	0b5b      	lsrs	r3, r3, #13
 80023b8:	3301      	adds	r3, #1
 80023ba:	0212      	lsls	r2, r2, #8
 80023bc:	409a      	lsls	r2, r3
 80023be:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80023c0:	68e1      	ldr	r1, [r4, #12]
 80023c2:	060a      	lsls	r2, r1, #24
 80023c4:	49a8      	ldr	r1, [pc, #672]	; (8002668 <HAL_RCC_OscConfig+0x310>)
 80023c6:	0f12      	lsrs	r2, r2, #28
 80023c8:	5c8a      	ldrb	r2, [r1, r2]
 80023ca:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80023cc:	4aa7      	ldr	r2, [pc, #668]	; (800266c <HAL_RCC_OscConfig+0x314>)
 80023ce:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80023d0:	4ba7      	ldr	r3, [pc, #668]	; (8002670 <HAL_RCC_OscConfig+0x318>)
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	f7ff fa82 	bl	80018dc <HAL_InitTick>
        if(status != HAL_OK)
 80023d8:	2800      	cmp	r0, #0
 80023da:	d134      	bne.n	8002446 <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023dc:	682b      	ldr	r3, [r5, #0]
 80023de:	071b      	lsls	r3, r3, #28
 80023e0:	d500      	bpl.n	80023e4 <HAL_RCC_OscConfig+0x8c>
 80023e2:	e0e8      	b.n	80025b6 <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e4:	682b      	ldr	r3, [r5, #0]
 80023e6:	075b      	lsls	r3, r3, #29
 80023e8:	d500      	bpl.n	80023ec <HAL_RCC_OscConfig+0x94>
 80023ea:	e10a      	b.n	8002602 <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023ec:	682b      	ldr	r3, [r5, #0]
 80023ee:	069b      	lsls	r3, r3, #26
 80023f0:	d500      	bpl.n	80023f4 <HAL_RCC_OscConfig+0x9c>
 80023f2:	e18e      	b.n	8002712 <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d000      	beq.n	80023fc <HAL_RCC_OscConfig+0xa4>
 80023fa:	e1bd      	b.n	8002778 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 80023fc:	2000      	movs	r0, #0
 80023fe:	e022      	b.n	8002446 <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002400:	2e08      	cmp	r6, #8
 8002402:	d003      	beq.n	800240c <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002404:	2e0c      	cmp	r6, #12
 8002406:	d109      	bne.n	800241c <HAL_RCC_OscConfig+0xc4>
 8002408:	2f00      	cmp	r7, #0
 800240a:	d007      	beq.n	800241c <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	039b      	lsls	r3, r3, #14
 8002410:	d5b3      	bpl.n	800237a <HAL_RCC_OscConfig+0x22>
 8002412:	686b      	ldr	r3, [r5, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1b0      	bne.n	800237a <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8002418:	2001      	movs	r0, #1
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241c:	686a      	ldr	r2, [r5, #4]
 800241e:	428a      	cmp	r2, r1
 8002420:	d113      	bne.n	800244a <HAL_RCC_OscConfig+0xf2>
 8002422:	6822      	ldr	r2, [r4, #0]
 8002424:	4313      	orrs	r3, r2
 8002426:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002428:	f7ff fa9c 	bl	8001964 <HAL_GetTick>
 800242c:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	0292      	lsls	r2, r2, #10
 8002434:	4213      	tst	r3, r2
 8002436:	d1a0      	bne.n	800237a <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002438:	f7ff fa94 	bl	8001964 <HAL_GetTick>
 800243c:	9b00      	ldr	r3, [sp, #0]
 800243e:	1ac0      	subs	r0, r0, r3
 8002440:	2864      	cmp	r0, #100	; 0x64
 8002442:	d9f4      	bls.n	800242e <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 8002444:	2003      	movs	r0, #3
}
 8002446:	b005      	add	sp, #20
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244a:	21a0      	movs	r1, #160	; 0xa0
 800244c:	02c9      	lsls	r1, r1, #11
 800244e:	428a      	cmp	r2, r1
 8002450:	d105      	bne.n	800245e <HAL_RCC_OscConfig+0x106>
 8002452:	2280      	movs	r2, #128	; 0x80
 8002454:	6821      	ldr	r1, [r4, #0]
 8002456:	02d2      	lsls	r2, r2, #11
 8002458:	430a      	orrs	r2, r1
 800245a:	6022      	str	r2, [r4, #0]
 800245c:	e7e1      	b.n	8002422 <HAL_RCC_OscConfig+0xca>
 800245e:	6821      	ldr	r1, [r4, #0]
 8002460:	4884      	ldr	r0, [pc, #528]	; (8002674 <HAL_RCC_OscConfig+0x31c>)
 8002462:	4001      	ands	r1, r0
 8002464:	6021      	str	r1, [r4, #0]
 8002466:	6821      	ldr	r1, [r4, #0]
 8002468:	400b      	ands	r3, r1
 800246a:	9303      	str	r3, [sp, #12]
 800246c:	9b03      	ldr	r3, [sp, #12]
 800246e:	4982      	ldr	r1, [pc, #520]	; (8002678 <HAL_RCC_OscConfig+0x320>)
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	400b      	ands	r3, r1
 8002474:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002476:	2a00      	cmp	r2, #0
 8002478:	d1d6      	bne.n	8002428 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 800247a:	f7ff fa73 	bl	8001964 <HAL_GetTick>
 800247e:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	0292      	lsls	r2, r2, #10
 8002486:	4213      	tst	r3, r2
 8002488:	d100      	bne.n	800248c <HAL_RCC_OscConfig+0x134>
 800248a:	e776      	b.n	800237a <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248c:	f7ff fa6a 	bl	8001964 <HAL_GetTick>
 8002490:	9b00      	ldr	r3, [sp, #0]
 8002492:	1ac0      	subs	r0, r0, r3
 8002494:	2864      	cmp	r0, #100	; 0x64
 8002496:	d9f3      	bls.n	8002480 <HAL_RCC_OscConfig+0x128>
 8002498:	e7d4      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 800249a:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800249c:	2e04      	cmp	r6, #4
 800249e:	d003      	beq.n	80024a8 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024a0:	2e0c      	cmp	r6, #12
 80024a2:	d124      	bne.n	80024ee <HAL_RCC_OscConfig+0x196>
 80024a4:	2f00      	cmp	r7, #0
 80024a6:	d122      	bne.n	80024ee <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	075b      	lsls	r3, r3, #29
 80024ac:	d501      	bpl.n	80024b2 <HAL_RCC_OscConfig+0x15a>
 80024ae:	2a00      	cmp	r2, #0
 80024b0:	d0b2      	beq.n	8002418 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b2:	6861      	ldr	r1, [r4, #4]
 80024b4:	692b      	ldr	r3, [r5, #16]
 80024b6:	4871      	ldr	r0, [pc, #452]	; (800267c <HAL_RCC_OscConfig+0x324>)
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	4001      	ands	r1, r0
 80024bc:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024be:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	438b      	bics	r3, r1
 80024c6:	4313      	orrs	r3, r2
 80024c8:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ca:	f7ff fefd 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
 80024ce:	68e3      	ldr	r3, [r4, #12]
 80024d0:	4a65      	ldr	r2, [pc, #404]	; (8002668 <HAL_RCC_OscConfig+0x310>)
 80024d2:	061b      	lsls	r3, r3, #24
 80024d4:	0f1b      	lsrs	r3, r3, #28
 80024d6:	5cd3      	ldrb	r3, [r2, r3]
 80024d8:	40d8      	lsrs	r0, r3
 80024da:	4b64      	ldr	r3, [pc, #400]	; (800266c <HAL_RCC_OscConfig+0x314>)
 80024dc:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 80024de:	4b64      	ldr	r3, [pc, #400]	; (8002670 <HAL_RCC_OscConfig+0x318>)
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	f7ff f9fb 	bl	80018dc <HAL_InitTick>
      if(status != HAL_OK)
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d100      	bne.n	80024ec <HAL_RCC_OscConfig+0x194>
 80024ea:	e74a      	b.n	8002382 <HAL_RCC_OscConfig+0x2a>
 80024ec:	e7ab      	b.n	8002446 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024ee:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 80024f0:	2a00      	cmp	r2, #0
 80024f2:	d018      	beq.n	8002526 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024f4:	2109      	movs	r1, #9
 80024f6:	438b      	bics	r3, r1
 80024f8:	4313      	orrs	r3, r2
 80024fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80024fc:	f7ff fa32 	bl	8001964 <HAL_GetTick>
 8002500:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002502:	2204      	movs	r2, #4
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	4213      	tst	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250a:	6862      	ldr	r2, [r4, #4]
 800250c:	692b      	ldr	r3, [r5, #16]
 800250e:	495b      	ldr	r1, [pc, #364]	; (800267c <HAL_RCC_OscConfig+0x324>)
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	400a      	ands	r2, r1
 8002514:	4313      	orrs	r3, r2
 8002516:	6063      	str	r3, [r4, #4]
 8002518:	e733      	b.n	8002382 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251a:	f7ff fa23 	bl	8001964 <HAL_GetTick>
 800251e:	1bc0      	subs	r0, r0, r7
 8002520:	2802      	cmp	r0, #2
 8002522:	d9ee      	bls.n	8002502 <HAL_RCC_OscConfig+0x1aa>
 8002524:	e78e      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8002526:	2201      	movs	r2, #1
 8002528:	4393      	bics	r3, r2
 800252a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800252c:	f7ff fa1a 	bl	8001964 <HAL_GetTick>
 8002530:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002532:	2204      	movs	r2, #4
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	4213      	tst	r3, r2
 8002538:	d100      	bne.n	800253c <HAL_RCC_OscConfig+0x1e4>
 800253a:	e722      	b.n	8002382 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253c:	f7ff fa12 	bl	8001964 <HAL_GetTick>
 8002540:	1bc0      	subs	r0, r0, r7
 8002542:	2802      	cmp	r0, #2
 8002544:	d9f5      	bls.n	8002532 <HAL_RCC_OscConfig+0x1da>
 8002546:	e77d      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002548:	69eb      	ldr	r3, [r5, #28]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d020      	beq.n	8002590 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	6822      	ldr	r2, [r4, #0]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4313      	orrs	r3, r2
 8002556:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002558:	f7ff fa04 	bl	8001964 <HAL_GetTick>
 800255c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800255e:	2280      	movs	r2, #128	; 0x80
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	0092      	lsls	r2, r2, #2
 8002564:	4213      	tst	r3, r2
 8002566:	d00d      	beq.n	8002584 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002568:	6863      	ldr	r3, [r4, #4]
 800256a:	4a3e      	ldr	r2, [pc, #248]	; (8002664 <HAL_RCC_OscConfig+0x30c>)
 800256c:	4013      	ands	r3, r2
 800256e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002570:	4313      	orrs	r3, r2
 8002572:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002574:	6862      	ldr	r2, [r4, #4]
 8002576:	6a2b      	ldr	r3, [r5, #32]
 8002578:	0212      	lsls	r2, r2, #8
 800257a:	061b      	lsls	r3, r3, #24
 800257c:	0a12      	lsrs	r2, r2, #8
 800257e:	4313      	orrs	r3, r2
 8002580:	6063      	str	r3, [r4, #4]
 8002582:	e72b      	b.n	80023dc <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002584:	f7ff f9ee 	bl	8001964 <HAL_GetTick>
 8002588:	1bc0      	subs	r0, r0, r7
 800258a:	2802      	cmp	r0, #2
 800258c:	d9e7      	bls.n	800255e <HAL_RCC_OscConfig+0x206>
 800258e:	e759      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	4a3b      	ldr	r2, [pc, #236]	; (8002680 <HAL_RCC_OscConfig+0x328>)
 8002594:	4013      	ands	r3, r2
 8002596:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002598:	f7ff f9e4 	bl	8001964 <HAL_GetTick>
 800259c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	4213      	tst	r3, r2
 80025a6:	d100      	bne.n	80025aa <HAL_RCC_OscConfig+0x252>
 80025a8:	e718      	b.n	80023dc <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025aa:	f7ff f9db 	bl	8001964 <HAL_GetTick>
 80025ae:	1bc0      	subs	r0, r0, r7
 80025b0:	2802      	cmp	r0, #2
 80025b2:	d9f4      	bls.n	800259e <HAL_RCC_OscConfig+0x246>
 80025b4:	e746      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b6:	696a      	ldr	r2, [r5, #20]
 80025b8:	2301      	movs	r3, #1
 80025ba:	2a00      	cmp	r2, #0
 80025bc:	d010      	beq.n	80025e0 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 80025be:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80025c0:	4313      	orrs	r3, r2
 80025c2:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80025c4:	f7ff f9ce 	bl	8001964 <HAL_GetTick>
 80025c8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025ca:	2202      	movs	r2, #2
 80025cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80025ce:	4213      	tst	r3, r2
 80025d0:	d000      	beq.n	80025d4 <HAL_RCC_OscConfig+0x27c>
 80025d2:	e707      	b.n	80023e4 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d4:	f7ff f9c6 	bl	8001964 <HAL_GetTick>
 80025d8:	1bc0      	subs	r0, r0, r7
 80025da:	2802      	cmp	r0, #2
 80025dc:	d9f5      	bls.n	80025ca <HAL_RCC_OscConfig+0x272>
 80025de:	e731      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 80025e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80025e2:	439a      	bics	r2, r3
 80025e4:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80025e6:	f7ff f9bd 	bl	8001964 <HAL_GetTick>
 80025ea:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025ec:	2202      	movs	r2, #2
 80025ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80025f0:	4213      	tst	r3, r2
 80025f2:	d100      	bne.n	80025f6 <HAL_RCC_OscConfig+0x29e>
 80025f4:	e6f6      	b.n	80023e4 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f6:	f7ff f9b5 	bl	8001964 <HAL_GetTick>
 80025fa:	1bc0      	subs	r0, r0, r7
 80025fc:	2802      	cmp	r0, #2
 80025fe:	d9f5      	bls.n	80025ec <HAL_RCC_OscConfig+0x294>
 8002600:	e720      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002602:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002604:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002606:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002608:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800260a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260c:	421a      	tst	r2, r3
 800260e:	d104      	bne.n	800261a <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002612:	4313      	orrs	r3, r2
 8002614:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8002616:	2301      	movs	r3, #1
 8002618:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	2280      	movs	r2, #128	; 0x80
 800261c:	4f19      	ldr	r7, [pc, #100]	; (8002684 <HAL_RCC_OscConfig+0x32c>)
 800261e:	0052      	lsls	r2, r2, #1
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	4213      	tst	r3, r2
 8002624:	d008      	beq.n	8002638 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002626:	2280      	movs	r2, #128	; 0x80
 8002628:	68ab      	ldr	r3, [r5, #8]
 800262a:	0052      	lsls	r2, r2, #1
 800262c:	4293      	cmp	r3, r2
 800262e:	d12b      	bne.n	8002688 <HAL_RCC_OscConfig+0x330>
 8002630:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002632:	4313      	orrs	r3, r2
 8002634:	6523      	str	r3, [r4, #80]	; 0x50
 8002636:	e04c      	b.n	80026d2 <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002638:	2280      	movs	r2, #128	; 0x80
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	0052      	lsls	r2, r2, #1
 800263e:	4313      	orrs	r3, r2
 8002640:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002642:	f7ff f98f 	bl	8001964 <HAL_GetTick>
 8002646:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	0052      	lsls	r2, r2, #1
 800264e:	4213      	tst	r3, r2
 8002650:	d1e9      	bne.n	8002626 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002652:	f7ff f987 	bl	8001964 <HAL_GetTick>
 8002656:	9b01      	ldr	r3, [sp, #4]
 8002658:	1ac0      	subs	r0, r0, r3
 800265a:	2864      	cmp	r0, #100	; 0x64
 800265c:	d9f4      	bls.n	8002648 <HAL_RCC_OscConfig+0x2f0>
 800265e:	e6f1      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
 8002660:	40021000 	.word	0x40021000
 8002664:	ffff1fff 	.word	0xffff1fff
 8002668:	08004271 	.word	0x08004271
 800266c:	2000009c 	.word	0x2000009c
 8002670:	200000a4 	.word	0x200000a4
 8002674:	fffeffff 	.word	0xfffeffff
 8002678:	fffbffff 	.word	0xfffbffff
 800267c:	ffffe0ff 	.word	0xffffe0ff
 8002680:	fffffeff 	.word	0xfffffeff
 8002684:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	2b00      	cmp	r3, #0
 800268a:	d116      	bne.n	80026ba <HAL_RCC_OscConfig+0x362>
 800268c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800268e:	4a6b      	ldr	r2, [pc, #428]	; (800283c <HAL_RCC_OscConfig+0x4e4>)
 8002690:	4013      	ands	r3, r2
 8002692:	6523      	str	r3, [r4, #80]	; 0x50
 8002694:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002696:	4a6a      	ldr	r2, [pc, #424]	; (8002840 <HAL_RCC_OscConfig+0x4e8>)
 8002698:	4013      	ands	r3, r2
 800269a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800269c:	f7ff f962 	bl	8001964 <HAL_GetTick>
 80026a0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026a2:	2280      	movs	r2, #128	; 0x80
 80026a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80026a6:	0092      	lsls	r2, r2, #2
 80026a8:	4213      	tst	r3, r2
 80026aa:	d01a      	beq.n	80026e2 <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7ff f95a 	bl	8001964 <HAL_GetTick>
 80026b0:	4b64      	ldr	r3, [pc, #400]	; (8002844 <HAL_RCC_OscConfig+0x4ec>)
 80026b2:	1bc0      	subs	r0, r0, r7
 80026b4:	4298      	cmp	r0, r3
 80026b6:	d9f4      	bls.n	80026a2 <HAL_RCC_OscConfig+0x34a>
 80026b8:	e6c4      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ba:	21a0      	movs	r1, #160	; 0xa0
 80026bc:	00c9      	lsls	r1, r1, #3
 80026be:	428b      	cmp	r3, r1
 80026c0:	d118      	bne.n	80026f4 <HAL_RCC_OscConfig+0x39c>
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	430b      	orrs	r3, r1
 80026ca:	6523      	str	r3, [r4, #80]	; 0x50
 80026cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80026ce:	431a      	orrs	r2, r3
 80026d0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80026d2:	f7ff f947 	bl	8001964 <HAL_GetTick>
 80026d6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80026dc:	0092      	lsls	r2, r2, #2
 80026de:	4213      	tst	r3, r2
 80026e0:	d010      	beq.n	8002704 <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 80026e2:	9b00      	ldr	r3, [sp, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d000      	beq.n	80026ea <HAL_RCC_OscConfig+0x392>
 80026e8:	e680      	b.n	80023ec <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026ec:	4a56      	ldr	r2, [pc, #344]	; (8002848 <HAL_RCC_OscConfig+0x4f0>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80026f2:	e67b      	b.n	80023ec <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80026f6:	4a51      	ldr	r2, [pc, #324]	; (800283c <HAL_RCC_OscConfig+0x4e4>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	6523      	str	r3, [r4, #80]	; 0x50
 80026fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80026fe:	4a50      	ldr	r2, [pc, #320]	; (8002840 <HAL_RCC_OscConfig+0x4e8>)
 8002700:	4013      	ands	r3, r2
 8002702:	e797      	b.n	8002634 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7ff f92e 	bl	8001964 <HAL_GetTick>
 8002708:	4b4e      	ldr	r3, [pc, #312]	; (8002844 <HAL_RCC_OscConfig+0x4ec>)
 800270a:	1bc0      	subs	r0, r0, r7
 800270c:	4298      	cmp	r0, r3
 800270e:	d9e3      	bls.n	80026d8 <HAL_RCC_OscConfig+0x380>
 8002710:	e698      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002712:	69a9      	ldr	r1, [r5, #24]
 8002714:	2301      	movs	r3, #1
 8002716:	4a4d      	ldr	r2, [pc, #308]	; (800284c <HAL_RCC_OscConfig+0x4f4>)
 8002718:	2900      	cmp	r1, #0
 800271a:	d018      	beq.n	800274e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 800271c:	68a1      	ldr	r1, [r4, #8]
 800271e:	4319      	orrs	r1, r3
 8002720:	60a1      	str	r1, [r4, #8]
 8002722:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002724:	430b      	orrs	r3, r1
 8002726:	6363      	str	r3, [r4, #52]	; 0x34
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	6a11      	ldr	r1, [r2, #32]
 800272c:	019b      	lsls	r3, r3, #6
 800272e:	430b      	orrs	r3, r1
 8002730:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8002732:	f7ff f917 	bl	8001964 <HAL_GetTick>
 8002736:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002738:	2202      	movs	r2, #2
 800273a:	68a3      	ldr	r3, [r4, #8]
 800273c:	4213      	tst	r3, r2
 800273e:	d000      	beq.n	8002742 <HAL_RCC_OscConfig+0x3ea>
 8002740:	e658      	b.n	80023f4 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002742:	f7ff f90f 	bl	8001964 <HAL_GetTick>
 8002746:	1bc0      	subs	r0, r0, r7
 8002748:	2802      	cmp	r0, #2
 800274a:	d9f5      	bls.n	8002738 <HAL_RCC_OscConfig+0x3e0>
 800274c:	e67a      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 800274e:	68a1      	ldr	r1, [r4, #8]
 8002750:	4399      	bics	r1, r3
 8002752:	60a1      	str	r1, [r4, #8]
 8002754:	6a13      	ldr	r3, [r2, #32]
 8002756:	493e      	ldr	r1, [pc, #248]	; (8002850 <HAL_RCC_OscConfig+0x4f8>)
 8002758:	400b      	ands	r3, r1
 800275a:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800275c:	f7ff f902 	bl	8001964 <HAL_GetTick>
 8002760:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002762:	2202      	movs	r2, #2
 8002764:	68a3      	ldr	r3, [r4, #8]
 8002766:	4213      	tst	r3, r2
 8002768:	d100      	bne.n	800276c <HAL_RCC_OscConfig+0x414>
 800276a:	e643      	b.n	80023f4 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800276c:	f7ff f8fa 	bl	8001964 <HAL_GetTick>
 8002770:	1bc0      	subs	r0, r0, r7
 8002772:	2802      	cmp	r0, #2
 8002774:	d9f5      	bls.n	8002762 <HAL_RCC_OscConfig+0x40a>
 8002776:	e665      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002778:	2e0c      	cmp	r6, #12
 800277a:	d043      	beq.n	8002804 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277c:	4a35      	ldr	r2, [pc, #212]	; (8002854 <HAL_RCC_OscConfig+0x4fc>)
 800277e:	2b02      	cmp	r3, #2
 8002780:	d12e      	bne.n	80027e0 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 8002782:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002784:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002786:	4013      	ands	r3, r2
 8002788:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800278a:	f7ff f8eb 	bl	8001964 <HAL_GetTick>
 800278e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002790:	04bf      	lsls	r7, r7, #18
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	423b      	tst	r3, r7
 8002796:	d11d      	bne.n	80027d4 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002798:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800279a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800279c:	68e2      	ldr	r2, [r4, #12]
 800279e:	430b      	orrs	r3, r1
 80027a0:	492d      	ldr	r1, [pc, #180]	; (8002858 <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027a2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a4:	400a      	ands	r2, r1
 80027a6:	4313      	orrs	r3, r2
 80027a8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027aa:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	6822      	ldr	r2, [r4, #0]
 80027b4:	045b      	lsls	r3, r3, #17
 80027b6:	4313      	orrs	r3, r2
 80027b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80027ba:	f7ff f8d3 	bl	8001964 <HAL_GetTick>
 80027be:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	4233      	tst	r3, r6
 80027c4:	d000      	beq.n	80027c8 <HAL_RCC_OscConfig+0x470>
 80027c6:	e619      	b.n	80023fc <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c8:	f7ff f8cc 	bl	8001964 <HAL_GetTick>
 80027cc:	1b40      	subs	r0, r0, r5
 80027ce:	2802      	cmp	r0, #2
 80027d0:	d9f6      	bls.n	80027c0 <HAL_RCC_OscConfig+0x468>
 80027d2:	e637      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d4:	f7ff f8c6 	bl	8001964 <HAL_GetTick>
 80027d8:	1b80      	subs	r0, r0, r6
 80027da:	2802      	cmp	r0, #2
 80027dc:	d9d9      	bls.n	8002792 <HAL_RCC_OscConfig+0x43a>
 80027de:	e631      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 80027e0:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027e2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80027e4:	4013      	ands	r3, r2
 80027e6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80027e8:	f7ff f8bc 	bl	8001964 <HAL_GetTick>
 80027ec:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027ee:	04b6      	lsls	r6, r6, #18
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	4233      	tst	r3, r6
 80027f4:	d100      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4a0>
 80027f6:	e601      	b.n	80023fc <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f8:	f7ff f8b4 	bl	8001964 <HAL_GetTick>
 80027fc:	1b40      	subs	r0, r0, r5
 80027fe:	2802      	cmp	r0, #2
 8002800:	d9f6      	bls.n	80027f0 <HAL_RCC_OscConfig+0x498>
 8002802:	e61f      	b.n	8002444 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8002804:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002806:	2b01      	cmp	r3, #1
 8002808:	d100      	bne.n	800280c <HAL_RCC_OscConfig+0x4b4>
 800280a:	e61c      	b.n	8002446 <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280c:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800280e:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002810:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002812:	0252      	lsls	r2, r2, #9
 8002814:	401a      	ands	r2, r3
 8002816:	428a      	cmp	r2, r1
 8002818:	d000      	beq.n	800281c <HAL_RCC_OscConfig+0x4c4>
 800281a:	e5fd      	b.n	8002418 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800281c:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002820:	0392      	lsls	r2, r2, #14
 8002822:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002824:	428a      	cmp	r2, r1
 8002826:	d000      	beq.n	800282a <HAL_RCC_OscConfig+0x4d2>
 8002828:	e5f6      	b.n	8002418 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800282a:	22c0      	movs	r2, #192	; 0xc0
 800282c:	0412      	lsls	r2, r2, #16
 800282e:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002830:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002832:	4293      	cmp	r3, r2
 8002834:	d100      	bne.n	8002838 <HAL_RCC_OscConfig+0x4e0>
 8002836:	e5e1      	b.n	80023fc <HAL_RCC_OscConfig+0xa4>
 8002838:	e5ee      	b.n	8002418 <HAL_RCC_OscConfig+0xc0>
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	fffffeff 	.word	0xfffffeff
 8002840:	fffffbff 	.word	0xfffffbff
 8002844:	00001388 	.word	0x00001388
 8002848:	efffffff 	.word	0xefffffff
 800284c:	40010000 	.word	0x40010000
 8002850:	ffffdfff 	.word	0xffffdfff
 8002854:	feffffff 	.word	0xfeffffff
 8002858:	ff02ffff 	.word	0xff02ffff

0800285c <HAL_RCC_ClockConfig>:
{
 800285c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800285e:	1e04      	subs	r4, r0, #0
 8002860:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8002864:	2001      	movs	r0, #1
}
 8002866:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	2501      	movs	r5, #1
 800286a:	4e5b      	ldr	r6, [pc, #364]	; (80029d8 <HAL_RCC_ClockConfig+0x17c>)
 800286c:	9a01      	ldr	r2, [sp, #4]
 800286e:	6833      	ldr	r3, [r6, #0]
 8002870:	402b      	ands	r3, r5
 8002872:	4293      	cmp	r3, r2
 8002874:	d331      	bcc.n	80028da <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002876:	6822      	ldr	r2, [r4, #0]
 8002878:	0793      	lsls	r3, r2, #30
 800287a:	d443      	bmi.n	8002904 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287c:	07d3      	lsls	r3, r2, #31
 800287e:	d449      	bmi.n	8002914 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002880:	2501      	movs	r5, #1
 8002882:	6833      	ldr	r3, [r6, #0]
 8002884:	9a01      	ldr	r2, [sp, #4]
 8002886:	402b      	ands	r3, r5
 8002888:	4293      	cmp	r3, r2
 800288a:	d909      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288c:	6833      	ldr	r3, [r6, #0]
 800288e:	43ab      	bics	r3, r5
 8002890:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002892:	f7ff f867 	bl	8001964 <HAL_GetTick>
 8002896:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002898:	6833      	ldr	r3, [r6, #0]
 800289a:	422b      	tst	r3, r5
 800289c:	d000      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x44>
 800289e:	e08c      	b.n	80029ba <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	6822      	ldr	r2, [r4, #0]
 80028a2:	4d4e      	ldr	r5, [pc, #312]	; (80029dc <HAL_RCC_ClockConfig+0x180>)
 80028a4:	0753      	lsls	r3, r2, #29
 80028a6:	d500      	bpl.n	80028aa <HAL_RCC_ClockConfig+0x4e>
 80028a8:	e08f      	b.n	80029ca <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	0713      	lsls	r3, r2, #28
 80028ac:	d506      	bpl.n	80028bc <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ae:	68e9      	ldr	r1, [r5, #12]
 80028b0:	6923      	ldr	r3, [r4, #16]
 80028b2:	4a4b      	ldr	r2, [pc, #300]	; (80029e0 <HAL_RCC_ClockConfig+0x184>)
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	400a      	ands	r2, r1
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028bc:	f7ff fd04 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
 80028c0:	68eb      	ldr	r3, [r5, #12]
 80028c2:	4a48      	ldr	r2, [pc, #288]	; (80029e4 <HAL_RCC_ClockConfig+0x188>)
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	0f1b      	lsrs	r3, r3, #28
 80028c8:	5cd3      	ldrb	r3, [r2, r3]
 80028ca:	40d8      	lsrs	r0, r3
 80028cc:	4b46      	ldr	r3, [pc, #280]	; (80029e8 <HAL_RCC_ClockConfig+0x18c>)
 80028ce:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80028d0:	4b46      	ldr	r3, [pc, #280]	; (80029ec <HAL_RCC_ClockConfig+0x190>)
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	f7ff f802 	bl	80018dc <HAL_InitTick>
  if(status != HAL_OK)
 80028d8:	e7c5      	b.n	8002866 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	6833      	ldr	r3, [r6, #0]
 80028dc:	9a01      	ldr	r2, [sp, #4]
 80028de:	43ab      	bics	r3, r5
 80028e0:	4313      	orrs	r3, r2
 80028e2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80028e4:	f7ff f83e 	bl	8001964 <HAL_GetTick>
 80028e8:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	6833      	ldr	r3, [r6, #0]
 80028ec:	9a01      	ldr	r2, [sp, #4]
 80028ee:	402b      	ands	r3, r5
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d0c0      	beq.n	8002876 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f7ff f836 	bl	8001964 <HAL_GetTick>
 80028f8:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_RCC_ClockConfig+0x194>)
 80028fa:	1bc0      	subs	r0, r0, r7
 80028fc:	4298      	cmp	r0, r3
 80028fe:	d9f4      	bls.n	80028ea <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8002900:	2003      	movs	r0, #3
 8002902:	e7b0      	b.n	8002866 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002904:	20f0      	movs	r0, #240	; 0xf0
 8002906:	4935      	ldr	r1, [pc, #212]	; (80029dc <HAL_RCC_ClockConfig+0x180>)
 8002908:	68cb      	ldr	r3, [r1, #12]
 800290a:	4383      	bics	r3, r0
 800290c:	68a0      	ldr	r0, [r4, #8]
 800290e:	4303      	orrs	r3, r0
 8002910:	60cb      	str	r3, [r1, #12]
 8002912:	e7b3      	b.n	800287c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002914:	4d31      	ldr	r5, [pc, #196]	; (80029dc <HAL_RCC_ClockConfig+0x180>)
 8002916:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002918:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291a:	2a02      	cmp	r2, #2
 800291c:	d118      	bne.n	8002950 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800291e:	039b      	lsls	r3, r3, #14
 8002920:	d5a0      	bpl.n	8002864 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002922:	2103      	movs	r1, #3
 8002924:	68eb      	ldr	r3, [r5, #12]
 8002926:	438b      	bics	r3, r1
 8002928:	4313      	orrs	r3, r2
 800292a:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800292c:	f7ff f81a 	bl	8001964 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002930:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002932:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002934:	2b02      	cmp	r3, #2
 8002936:	d118      	bne.n	800296a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002938:	220c      	movs	r2, #12
 800293a:	68eb      	ldr	r3, [r5, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	2b08      	cmp	r3, #8
 8002940:	d09e      	beq.n	8002880 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002942:	f7ff f80f 	bl	8001964 <HAL_GetTick>
 8002946:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_RCC_ClockConfig+0x194>)
 8002948:	1bc0      	subs	r0, r0, r7
 800294a:	4298      	cmp	r0, r3
 800294c:	d9f4      	bls.n	8002938 <HAL_RCC_ClockConfig+0xdc>
 800294e:	e7d7      	b.n	8002900 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002950:	2a03      	cmp	r2, #3
 8002952:	d102      	bne.n	800295a <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002954:	019b      	lsls	r3, r3, #6
 8002956:	d4e4      	bmi.n	8002922 <HAL_RCC_ClockConfig+0xc6>
 8002958:	e784      	b.n	8002864 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800295a:	2a01      	cmp	r2, #1
 800295c:	d102      	bne.n	8002964 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800295e:	075b      	lsls	r3, r3, #29
 8002960:	d4df      	bmi.n	8002922 <HAL_RCC_ClockConfig+0xc6>
 8002962:	e77f      	b.n	8002864 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002964:	059b      	lsls	r3, r3, #22
 8002966:	d4dc      	bmi.n	8002922 <HAL_RCC_ClockConfig+0xc6>
 8002968:	e77c      	b.n	8002864 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800296a:	2b03      	cmp	r3, #3
 800296c:	d10b      	bne.n	8002986 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800296e:	220c      	movs	r2, #12
 8002970:	68eb      	ldr	r3, [r5, #12]
 8002972:	4013      	ands	r3, r2
 8002974:	4293      	cmp	r3, r2
 8002976:	d083      	beq.n	8002880 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002978:	f7fe fff4 	bl	8001964 <HAL_GetTick>
 800297c:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <HAL_RCC_ClockConfig+0x194>)
 800297e:	1bc0      	subs	r0, r0, r7
 8002980:	4298      	cmp	r0, r3
 8002982:	d9f4      	bls.n	800296e <HAL_RCC_ClockConfig+0x112>
 8002984:	e7bc      	b.n	8002900 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002986:	2b01      	cmp	r3, #1
 8002988:	d011      	beq.n	80029ae <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800298a:	220c      	movs	r2, #12
 800298c:	68eb      	ldr	r3, [r5, #12]
 800298e:	4213      	tst	r3, r2
 8002990:	d100      	bne.n	8002994 <HAL_RCC_ClockConfig+0x138>
 8002992:	e775      	b.n	8002880 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002994:	f7fe ffe6 	bl	8001964 <HAL_GetTick>
 8002998:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_RCC_ClockConfig+0x194>)
 800299a:	1bc0      	subs	r0, r0, r7
 800299c:	4298      	cmp	r0, r3
 800299e:	d9f4      	bls.n	800298a <HAL_RCC_ClockConfig+0x12e>
 80029a0:	e7ae      	b.n	8002900 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a2:	f7fe ffdf 	bl	8001964 <HAL_GetTick>
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_RCC_ClockConfig+0x194>)
 80029a8:	1bc0      	subs	r0, r0, r7
 80029aa:	4298      	cmp	r0, r3
 80029ac:	d8a8      	bhi.n	8002900 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ae:	220c      	movs	r2, #12
 80029b0:	68eb      	ldr	r3, [r5, #12]
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d1f4      	bne.n	80029a2 <HAL_RCC_ClockConfig+0x146>
 80029b8:	e762      	b.n	8002880 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ba:	f7fe ffd3 	bl	8001964 <HAL_GetTick>
 80029be:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <HAL_RCC_ClockConfig+0x194>)
 80029c0:	1bc0      	subs	r0, r0, r7
 80029c2:	4298      	cmp	r0, r3
 80029c4:	d800      	bhi.n	80029c8 <HAL_RCC_ClockConfig+0x16c>
 80029c6:	e767      	b.n	8002898 <HAL_RCC_ClockConfig+0x3c>
 80029c8:	e79a      	b.n	8002900 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ca:	68eb      	ldr	r3, [r5, #12]
 80029cc:	4909      	ldr	r1, [pc, #36]	; (80029f4 <HAL_RCC_ClockConfig+0x198>)
 80029ce:	400b      	ands	r3, r1
 80029d0:	68e1      	ldr	r1, [r4, #12]
 80029d2:	430b      	orrs	r3, r1
 80029d4:	60eb      	str	r3, [r5, #12]
 80029d6:	e768      	b.n	80028aa <HAL_RCC_ClockConfig+0x4e>
 80029d8:	40022000 	.word	0x40022000
 80029dc:	40021000 	.word	0x40021000
 80029e0:	ffffc7ff 	.word	0xffffc7ff
 80029e4:	08004271 	.word	0x08004271
 80029e8:	2000009c 	.word	0x2000009c
 80029ec:	200000a4 	.word	0x200000a4
 80029f0:	00001388 	.word	0x00001388
 80029f4:	fffff8ff 	.word	0xfffff8ff

080029f8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x14>)
 80029fa:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <HAL_RCC_GetPCLK1Freq+0x18>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	055b      	lsls	r3, r3, #21
 8002a00:	0f5b      	lsrs	r3, r3, #29
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	4a03      	ldr	r2, [pc, #12]	; (8002a14 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a06:	6810      	ldr	r0, [r2, #0]
 8002a08:	40d8      	lsrs	r0, r3
}
 8002a0a:	4770      	bx	lr
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	08004281 	.word	0x08004281
 8002a14:	2000009c 	.word	0x2000009c

08002a18 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <HAL_RCC_GetPCLK2Freq+0x14>)
 8002a1a:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	049b      	lsls	r3, r3, #18
 8002a20:	0f5b      	lsrs	r3, r3, #29
 8002a22:	5cd3      	ldrb	r3, [r2, r3]
 8002a24:	4a03      	ldr	r2, [pc, #12]	; (8002a34 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a26:	6810      	ldr	r0, [r2, #0]
 8002a28:	40d8      	lsrs	r0, r3
}
 8002a2a:	4770      	bx	lr
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	08004281 	.word	0x08004281
 8002a34:	2000009c 	.word	0x2000009c

08002a38 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a38:	6803      	ldr	r3, [r0, #0]
{
 8002a3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a3c:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a3e:	069b      	lsls	r3, r3, #26
 8002a40:	d52d      	bpl.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x66>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a42:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8002a44:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a46:	4c5c      	ldr	r4, [pc, #368]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002a48:	055b      	lsls	r3, r3, #21
 8002a4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8002a4c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4e:	421a      	tst	r2, r3
 8002a50:	d104      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a54:	4313      	orrs	r3, r2
 8002a56:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	2780      	movs	r7, #128	; 0x80
 8002a5e:	4e57      	ldr	r6, [pc, #348]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a60:	007f      	lsls	r7, r7, #1
 8002a62:	6833      	ldr	r3, [r6, #0]
 8002a64:	423b      	tst	r3, r7
 8002a66:	d053      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a68:	686b      	ldr	r3, [r5, #4]
 8002a6a:	21c0      	movs	r1, #192	; 0xc0
 8002a6c:	0018      	movs	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a6e:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a70:	0389      	lsls	r1, r1, #14
 8002a72:	4008      	ands	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a74:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a76:	4290      	cmp	r0, r2
 8002a78:	d15b      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xfa>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002a7a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002a7c:	22c0      	movs	r2, #192	; 0xc0
 8002a7e:	0008      	movs	r0, r1
 8002a80:	0292      	lsls	r2, r2, #10
 8002a82:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002a84:	4211      	tst	r1, r2
 8002a86:	d15f      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a88:	682b      	ldr	r3, [r5, #0]
 8002a8a:	069b      	lsls	r3, r3, #26
 8002a8c:	d500      	bpl.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002a8e:	e070      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a90:	9b00      	ldr	r3, [sp, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d103      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a98:	4a49      	ldr	r2, [pc, #292]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a9e:	682b      	ldr	r3, [r5, #0]
 8002aa0:	07da      	lsls	r2, r3, #31
 8002aa2:	d506      	bpl.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa4:	2003      	movs	r0, #3
 8002aa6:	4944      	ldr	r1, [pc, #272]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002aa8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002aaa:	4382      	bics	r2, r0
 8002aac:	68a8      	ldr	r0, [r5, #8]
 8002aae:	4302      	orrs	r2, r0
 8002ab0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ab2:	079a      	lsls	r2, r3, #30
 8002ab4:	d506      	bpl.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ab6:	200c      	movs	r0, #12
 8002ab8:	493f      	ldr	r1, [pc, #252]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002aba:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002abc:	4382      	bics	r2, r0
 8002abe:	68e8      	ldr	r0, [r5, #12]
 8002ac0:	4302      	orrs	r2, r0
 8002ac2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ac4:	075a      	lsls	r2, r3, #29
 8002ac6:	d506      	bpl.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ac8:	493b      	ldr	r1, [pc, #236]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002aca:	483e      	ldr	r0, [pc, #248]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002acc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002ace:	4002      	ands	r2, r0
 8002ad0:	6928      	ldr	r0, [r5, #16]
 8002ad2:	4302      	orrs	r2, r0
 8002ad4:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ad6:	071a      	lsls	r2, r3, #28
 8002ad8:	d506      	bpl.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ada:	4937      	ldr	r1, [pc, #220]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002adc:	483a      	ldr	r0, [pc, #232]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002ade:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002ae0:	4002      	ands	r2, r0
 8002ae2:	6968      	ldr	r0, [r5, #20]
 8002ae4:	4302      	orrs	r2, r0
 8002ae6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ae8:	065a      	lsls	r2, r3, #25
 8002aea:	d506      	bpl.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002aec:	4932      	ldr	r1, [pc, #200]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002aee:	4837      	ldr	r0, [pc, #220]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002af0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002af2:	4002      	ands	r2, r0
 8002af4:	69e8      	ldr	r0, [r5, #28]
 8002af6:	4302      	orrs	r2, r0
 8002af8:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8002afa:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	d517      	bpl.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002b00:	4a2d      	ldr	r2, [pc, #180]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002b02:	4933      	ldr	r1, [pc, #204]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002b04:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002b06:	400b      	ands	r3, r1
 8002b08:	69a9      	ldr	r1, [r5, #24]
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b0e:	e00f      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b10:	6833      	ldr	r3, [r6, #0]
 8002b12:	433b      	orrs	r3, r7
 8002b14:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002b16:	f7fe ff25 	bl	8001964 <HAL_GetTick>
 8002b1a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	6833      	ldr	r3, [r6, #0]
 8002b1e:	423b      	tst	r3, r7
 8002b20:	d1a2      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b22:	f7fe ff1f 	bl	8001964 <HAL_GetTick>
 8002b26:	9b01      	ldr	r3, [sp, #4]
 8002b28:	1ac0      	subs	r0, r0, r3
 8002b2a:	2864      	cmp	r0, #100	; 0x64
 8002b2c:	d9f6      	bls.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
          return HAL_TIMEOUT;
 8002b2e:	2003      	movs	r0, #3
}
 8002b30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b32:	22c0      	movs	r2, #192	; 0xc0
 8002b34:	0019      	movs	r1, r3
 8002b36:	0292      	lsls	r2, r2, #10
 8002b38:	4011      	ands	r1, r2
 8002b3a:	4291      	cmp	r1, r2
 8002b3c:	d19d      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b3e:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8002b40:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b42:	0392      	lsls	r2, r2, #14
 8002b44:	d599      	bpl.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002b46:	e7f3      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b48:	4013      	ands	r3, r2
 8002b4a:	4283      	cmp	r3, r0
 8002b4c:	d09c      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b4e:	682b      	ldr	r3, [r5, #0]
 8002b50:	069b      	lsls	r3, r3, #26
 8002b52:	d59d      	bpl.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b54:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b56:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b58:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002b5a:	0312      	lsls	r2, r2, #12
 8002b5c:	4302      	orrs	r2, r0
 8002b5e:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b60:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b62:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b64:	481c      	ldr	r0, [pc, #112]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b66:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b68:	4002      	ands	r2, r0
 8002b6a:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8002b6c:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002b6e:	05cb      	lsls	r3, r1, #23
 8002b70:	d412      	bmi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b72:	6869      	ldr	r1, [r5, #4]
 8002b74:	23c0      	movs	r3, #192	; 0xc0
 8002b76:	000a      	movs	r2, r1
 8002b78:	029b      	lsls	r3, r3, #10
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	4816      	ldr	r0, [pc, #88]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b84:	4003      	ands	r3, r0
 8002b86:	20c0      	movs	r0, #192	; 0xc0
 8002b88:	0380      	lsls	r0, r0, #14
 8002b8a:	4001      	ands	r1, r0
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	6023      	str	r3, [r4, #0]
 8002b90:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002b92:	431a      	orrs	r2, r3
 8002b94:	6522      	str	r2, [r4, #80]	; 0x50
 8002b96:	e77b      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 8002b98:	f7fe fee4 	bl	8001964 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b9c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002b9e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba0:	00bf      	lsls	r7, r7, #2
 8002ba2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002ba4:	423b      	tst	r3, r7
 8002ba6:	d000      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002ba8:	e76e      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe fedb 	bl	8001964 <HAL_GetTick>
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bb0:	1b80      	subs	r0, r0, r6
 8002bb2:	4298      	cmp	r0, r3
 8002bb4:	d9f5      	bls.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002bb6:	e7ba      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	efffffff 	.word	0xefffffff
 8002bc4:	fffff3ff 	.word	0xfffff3ff
 8002bc8:	ffffcfff 	.word	0xffffcfff
 8002bcc:	fbffffff 	.word	0xfbffffff
 8002bd0:	fff3ffff 	.word	0xfff3ffff
 8002bd4:	fffcffff 	.word	0xfffcffff
 8002bd8:	fff7ffff 	.word	0xfff7ffff
 8002bdc:	ffcfffff 	.word	0xffcfffff
 8002be0:	00001388 	.word	0x00001388

08002be4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be4:	2280      	movs	r2, #128	; 0x80
{
 8002be6:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002be8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bea:	05d2      	lsls	r2, r2, #23
 8002bec:	4290      	cmp	r0, r2
 8002bee:	d005      	beq.n	8002bfc <TIM_Base_SetConfig+0x18>
 8002bf0:	4c10      	ldr	r4, [pc, #64]	; (8002c34 <TIM_Base_SetConfig+0x50>)
 8002bf2:	42a0      	cmp	r0, r4
 8002bf4:	d002      	beq.n	8002bfc <TIM_Base_SetConfig+0x18>
 8002bf6:	4c10      	ldr	r4, [pc, #64]	; (8002c38 <TIM_Base_SetConfig+0x54>)
 8002bf8:	42a0      	cmp	r0, r4
 8002bfa:	d10f      	bne.n	8002c1c <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bfc:	2470      	movs	r4, #112	; 0x70
 8002bfe:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002c00:	684c      	ldr	r4, [r1, #4]
 8002c02:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c04:	4290      	cmp	r0, r2
 8002c06:	d005      	beq.n	8002c14 <TIM_Base_SetConfig+0x30>
 8002c08:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <TIM_Base_SetConfig+0x50>)
 8002c0a:	4290      	cmp	r0, r2
 8002c0c:	d002      	beq.n	8002c14 <TIM_Base_SetConfig+0x30>
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <TIM_Base_SetConfig+0x54>)
 8002c10:	4290      	cmp	r0, r2
 8002c12:	d103      	bne.n	8002c1c <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c14:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <TIM_Base_SetConfig+0x58>)
 8002c16:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c18:	68ca      	ldr	r2, [r1, #12]
 8002c1a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	4393      	bics	r3, r2
 8002c20:	690a      	ldr	r2, [r1, #16]
 8002c22:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002c24:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c26:	688b      	ldr	r3, [r1, #8]
 8002c28:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c2a:	680b      	ldr	r3, [r1, #0]
 8002c2c:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	6143      	str	r3, [r0, #20]
}
 8002c32:	bd10      	pop	{r4, pc}
 8002c34:	40010800 	.word	0x40010800
 8002c38:	40011400 	.word	0x40011400
 8002c3c:	fffffcff 	.word	0xfffffcff

08002c40 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c40:	2201      	movs	r2, #1
{
 8002c42:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c44:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c46:	6a03      	ldr	r3, [r0, #32]
 8002c48:	4393      	bics	r3, r2
 8002c4a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002c4c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002c4e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002c50:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c52:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c54:	680d      	ldr	r5, [r1, #0]
 8002c56:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c58:	2502      	movs	r5, #2
 8002c5a:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c5c:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c60:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c62:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8002c64:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8002c66:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c68:	6203      	str	r3, [r0, #32]
}
 8002c6a:	bd30      	pop	{r4, r5, pc}

08002c6c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c6c:	2210      	movs	r2, #16
 8002c6e:	6a03      	ldr	r3, [r0, #32]
{
 8002c70:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c72:	4393      	bics	r3, r2
 8002c74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c78:	4c09      	ldr	r4, [pc, #36]	; (8002ca0 <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 8002c7a:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002c7c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c7e:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c80:	680a      	ldr	r2, [r1, #0]
 8002c82:	0212      	lsls	r2, r2, #8
 8002c84:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c86:	2420      	movs	r4, #32
 8002c88:	43a3      	bics	r3, r4
 8002c8a:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c8c:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c8e:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c90:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c92:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c94:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c96:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8002c98:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c9a:	6203      	str	r3, [r0, #32]
}
 8002c9c:	bd30      	pop	{r4, r5, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	ffff8cff 	.word	0xffff8cff

08002ca4 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ca4:	231f      	movs	r3, #31
{
 8002ca6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ca8:	2401      	movs	r4, #1
 8002caa:	4019      	ands	r1, r3
 8002cac:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cae:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002cb0:	6a03      	ldr	r3, [r0, #32]
 8002cb2:	43a3      	bics	r3, r4
 8002cb4:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cb6:	6a03      	ldr	r3, [r0, #32]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	6202      	str	r2, [r0, #32]
}
 8002cbc:	bd10      	pop	{r4, pc}
	...

08002cc0 <HAL_TIM_OC_Start>:
{
 8002cc0:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cc2:	0003      	movs	r3, r0
{
 8002cc4:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cc6:	2900      	cmp	r1, #0
 8002cc8:	d105      	bne.n	8002cd6 <HAL_TIM_OC_Start+0x16>
 8002cca:	333a      	adds	r3, #58	; 0x3a
    return HAL_ERROR;
 8002ccc:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cce:	781a      	ldrb	r2, [r3, #0]
 8002cd0:	4282      	cmp	r2, r0
 8002cd2:	d00a      	beq.n	8002cea <HAL_TIM_OC_Start+0x2a>
}
 8002cd4:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cd6:	2904      	cmp	r1, #4
 8002cd8:	d101      	bne.n	8002cde <HAL_TIM_OC_Start+0x1e>
 8002cda:	333b      	adds	r3, #59	; 0x3b
 8002cdc:	e7f6      	b.n	8002ccc <HAL_TIM_OC_Start+0xc>
 8002cde:	2908      	cmp	r1, #8
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_OC_Start+0x26>
 8002ce2:	333c      	adds	r3, #60	; 0x3c
 8002ce4:	e7f2      	b.n	8002ccc <HAL_TIM_OC_Start+0xc>
 8002ce6:	333d      	adds	r3, #61	; 0x3d
 8002ce8:	e7f0      	b.n	8002ccc <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cea:	2202      	movs	r2, #2
 8002cec:	701a      	strb	r2, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cee:	6820      	ldr	r0, [r4, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f7ff ffd7 	bl	8002ca4 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	05d2      	lsls	r2, r2, #23
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d005      	beq.n	8002d0c <HAL_TIM_OC_Start+0x4c>
 8002d00:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <HAL_TIM_OC_Start+0x70>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d002      	beq.n	8002d0c <HAL_TIM_OC_Start+0x4c>
 8002d06:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <HAL_TIM_OC_Start+0x74>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d10a      	bne.n	8002d22 <HAL_TIM_OC_Start+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d0c:	2107      	movs	r1, #7
 8002d0e:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8002d10:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d12:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d14:	2a06      	cmp	r2, #6
 8002d16:	d0dd      	beq.n	8002cd4 <HAL_TIM_OC_Start+0x14>
      __HAL_TIM_ENABLE(htim);
 8002d18:	2201      	movs	r2, #1
 8002d1a:	6819      	ldr	r1, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	e7d8      	b.n	8002cd4 <HAL_TIM_OC_Start+0x14>
    __HAL_TIM_ENABLE(htim);
 8002d22:	2201      	movs	r2, #1
 8002d24:	6819      	ldr	r1, [r3, #0]
  return HAL_OK;
 8002d26:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e7d2      	b.n	8002cd4 <HAL_TIM_OC_Start+0x14>
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	40010800 	.word	0x40010800
 8002d34:	40011400 	.word	0x40011400

08002d38 <HAL_TIM_OC_Stop>:
{
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	6800      	ldr	r0, [r0, #0]
{
 8002d40:	000d      	movs	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d42:	f7ff ffaf 	bl	8002ca4 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	4a0c      	ldr	r2, [pc, #48]	; (8002d7c <HAL_TIM_OC_Stop+0x44>)
 8002d4a:	6a19      	ldr	r1, [r3, #32]
 8002d4c:	4211      	tst	r1, r2
 8002d4e:	d103      	bne.n	8002d58 <HAL_TIM_OC_Stop+0x20>
 8002d50:	2101      	movs	r1, #1
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	438a      	bics	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d58:	2301      	movs	r3, #1
 8002d5a:	2d00      	cmp	r5, #0
 8002d5c:	d103      	bne.n	8002d66 <HAL_TIM_OC_Stop+0x2e>
 8002d5e:	343a      	adds	r4, #58	; 0x3a
}
 8002d60:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d62:	7023      	strb	r3, [r4, #0]
}
 8002d64:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d66:	2d04      	cmp	r5, #4
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_OC_Stop+0x36>
 8002d6a:	343b      	adds	r4, #59	; 0x3b
 8002d6c:	e7f8      	b.n	8002d60 <HAL_TIM_OC_Stop+0x28>
 8002d6e:	2d08      	cmp	r5, #8
 8002d70:	d101      	bne.n	8002d76 <HAL_TIM_OC_Stop+0x3e>
 8002d72:	343c      	adds	r4, #60	; 0x3c
 8002d74:	e7f4      	b.n	8002d60 <HAL_TIM_OC_Stop+0x28>
 8002d76:	343d      	adds	r4, #61	; 0x3d
 8002d78:	e7f2      	b.n	8002d60 <HAL_TIM_OC_Stop+0x28>
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	00001111 	.word	0x00001111

08002d80 <HAL_TIM_PWM_Init>:
{
 8002d80:	b570      	push	{r4, r5, r6, lr}
 8002d82:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002d84:	2001      	movs	r0, #1
  if (htim == NULL)
 8002d86:	2c00      	cmp	r4, #0
 8002d88:	d01d      	beq.n	8002dc6 <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8a:	0025      	movs	r5, r4
 8002d8c:	3539      	adds	r5, #57	; 0x39
 8002d8e:	782b      	ldrb	r3, [r5, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002d96:	0023      	movs	r3, r4
 8002d98:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002d9a:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002d9c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8002d9e:	f7fe fce7 	bl	8001770 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002da2:	2302      	movs	r3, #2
 8002da4:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da6:	6820      	ldr	r0, [r4, #0]
 8002da8:	1d21      	adds	r1, r4, #4
 8002daa:	f7ff ff1b 	bl	8002be4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dae:	0022      	movs	r2, r4
 8002db0:	2301      	movs	r3, #1
  return HAL_OK;
 8002db2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db4:	323e      	adds	r2, #62	; 0x3e
 8002db6:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db8:	343d      	adds	r4, #61	; 0x3d
 8002dba:	3a04      	subs	r2, #4
 8002dbc:	7013      	strb	r3, [r2, #0]
 8002dbe:	7053      	strb	r3, [r2, #1]
 8002dc0:	7093      	strb	r3, [r2, #2]
 8002dc2:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002dc4:	702b      	strb	r3, [r5, #0]
}
 8002dc6:	bd70      	pop	{r4, r5, r6, pc}

08002dc8 <HAL_TIM_PWM_Start>:
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	f7ff ff79 	bl	8002cc0 <HAL_TIM_OC_Start>
 8002dce:	bd10      	pop	{r4, pc}

08002dd0 <HAL_TIM_PWM_Stop>:
 8002dd0:	b510      	push	{r4, lr}
 8002dd2:	f7ff ffb1 	bl	8002d38 <HAL_TIM_OC_Stop>
 8002dd6:	bd10      	pop	{r4, pc}

08002dd8 <HAL_TIM_PWM_ConfigChannel>:
{
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002dda:	0005      	movs	r5, r0
 8002ddc:	3538      	adds	r5, #56	; 0x38
 8002dde:	782b      	ldrb	r3, [r5, #0]
{
 8002de0:	0007      	movs	r7, r0
 8002de2:	000c      	movs	r4, r1
 8002de4:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 8002de6:	2002      	movs	r0, #2
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d00a      	beq.n	8002e02 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8002dec:	3801      	subs	r0, #1
 8002dee:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 8002df0:	2a08      	cmp	r2, #8
 8002df2:	d050      	beq.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0xbe>
 8002df4:	d806      	bhi.n	8002e04 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8002df6:	2a00      	cmp	r2, #0
 8002df8:	d02a      	beq.n	8002e50 <HAL_TIM_PWM_ConfigChannel+0x78>
 8002dfa:	2a04      	cmp	r2, #4
 8002dfc:	d03a      	beq.n	8002e74 <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	702b      	strb	r3, [r5, #0]
}
 8002e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8002e04:	2a0c      	cmp	r2, #12
 8002e06:	d1fa      	bne.n	8002dfe <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e08:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e0a:	4934      	ldr	r1, [pc, #208]	; (8002edc <HAL_TIM_PWM_ConfigChannel+0x104>)
 8002e0c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e0e:	4834      	ldr	r0, [pc, #208]	; (8002ee0 <HAL_TIM_PWM_ConfigChannel+0x108>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e10:	400a      	ands	r2, r1
 8002e12:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8002e14:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002e16:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002e18:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e1a:	4001      	ands	r1, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e1c:	6820      	ldr	r0, [r4, #0]
 8002e1e:	0207      	lsls	r7, r0, #8
  tmpccer &= ~TIM_CCER_CC4P;
 8002e20:	4830      	ldr	r0, [pc, #192]	; (8002ee4 <HAL_TIM_PWM_ConfigChannel+0x10c>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e22:	4339      	orrs	r1, r7
  tmpccer &= ~TIM_CCER_CC4P;
 8002e24:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e26:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8002e28:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e2a:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8002e2c:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002e2e:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e30:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 8002e32:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002e34:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	69d9      	ldr	r1, [r3, #28]
 8002e3a:	0112      	lsls	r2, r2, #4
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	4929      	ldr	r1, [pc, #164]	; (8002ee8 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e48:	68e2      	ldr	r2, [r4, #12]
 8002e4a:	69d9      	ldr	r1, [r3, #28]
 8002e4c:	0212      	lsls	r2, r2, #8
 8002e4e:	e041      	b.n	8002ed4 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e50:	6838      	ldr	r0, [r7, #0]
 8002e52:	f7ff fef5 	bl	8002c40 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e56:	2208      	movs	r2, #8
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6999      	ldr	r1, [r3, #24]
 8002e5c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e5e:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e60:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e62:	699a      	ldr	r2, [r3, #24]
 8002e64:	438a      	bics	r2, r1
 8002e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002e70:	2000      	movs	r0, #0
      break;
 8002e72:	e7c4      	b.n	8002dfe <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e74:	6838      	ldr	r0, [r7, #0]
 8002e76:	f7ff fef9 	bl	8002c6c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e7a:	2280      	movs	r2, #128	; 0x80
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	6999      	ldr	r1, [r3, #24]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e86:	699a      	ldr	r2, [r3, #24]
 8002e88:	4917      	ldr	r1, [pc, #92]	; (8002ee8 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8002e8a:	400a      	ands	r2, r1
 8002e8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e8e:	68e2      	ldr	r2, [r4, #12]
 8002e90:	6999      	ldr	r1, [r3, #24]
 8002e92:	0212      	lsls	r2, r2, #8
 8002e94:	e7ea      	b.n	8002e6c <HAL_TIM_PWM_ConfigChannel+0x94>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e96:	2073      	movs	r0, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e98:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e9a:	4914      	ldr	r1, [pc, #80]	; (8002eec <HAL_TIM_PWM_ConfigChannel+0x114>)
 8002e9c:	6a1a      	ldr	r2, [r3, #32]
 8002e9e:	400a      	ands	r2, r1
 8002ea0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002ea4:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002ea6:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ea8:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 8002eaa:	6820      	ldr	r0, [r4, #0]
 8002eac:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8002eae:	4810      	ldr	r0, [pc, #64]	; (8002ef0 <HAL_TIM_PWM_ConfigChannel+0x118>)
 8002eb0:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eb2:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8002eb4:	605f      	str	r7, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002eb6:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002eb8:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eba:	0212      	lsls	r2, r2, #8
  TIMx->CCR3 = OC_Config->Pulse;
 8002ebc:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ebe:	2104      	movs	r1, #4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ec0:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8002ec2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	4316      	orrs	r6, r2
 8002ec8:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	438a      	bics	r2, r1
 8002ece:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	61da      	str	r2, [r3, #28]
 8002ed8:	e7ca      	b.n	8002e70 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	ffffefff 	.word	0xffffefff
 8002ee0:	ffff8cff 	.word	0xffff8cff
 8002ee4:	ffffdfff 	.word	0xffffdfff
 8002ee8:	fffffbff 	.word	0xfffffbff
 8002eec:	fffffeff 	.word	0xfffffeff
 8002ef0:	fffffdff 	.word	0xfffffdff

08002ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ef6:	0004      	movs	r4, r0
 8002ef8:	2202      	movs	r2, #2
 8002efa:	3438      	adds	r4, #56	; 0x38
 8002efc:	7825      	ldrb	r5, [r4, #0]
{
 8002efe:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002f00:	0010      	movs	r0, r2
 8002f02:	2d01      	cmp	r5, #1
 8002f04:	d01d      	beq.n	8002f42 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f06:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f08:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0a:	3539      	adds	r5, #57	; 0x39
 8002f0c:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002f12:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f14:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f16:	680e      	ldr	r6, [r1, #0]
 8002f18:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f1a:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1c:	2080      	movs	r0, #128	; 0x80
 8002f1e:	05c0      	lsls	r0, r0, #23
 8002f20:	4283      	cmp	r3, r0
 8002f22:	d005      	beq.n	8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002f24:	4807      	ldr	r0, [pc, #28]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8002f26:	4283      	cmp	r3, r0
 8002f28:	d002      	beq.n	8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002f2a:	4807      	ldr	r0, [pc, #28]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8002f2c:	4283      	cmp	r3, r0
 8002f2e:	d104      	bne.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f30:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f32:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f34:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f36:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f3a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002f3c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f3e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002f40:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
 8002f44:	40010800 	.word	0x40010800
 8002f48:	40011400 	.word	0x40011400

08002f4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f4c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f52:	2201      	movs	r2, #1
 8002f54:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f58:	6801      	ldr	r1, [r0, #0]
 8002f5a:	4d12      	ldr	r5, [pc, #72]	; (8002fa4 <UART_EndRxTransfer+0x58>)
 8002f5c:	680b      	ldr	r3, [r1, #0]
 8002f5e:	402b      	ands	r3, r5
 8002f60:	600b      	str	r3, [r1, #0]
 8002f62:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f66:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6e:	6801      	ldr	r1, [r0, #0]
 8002f70:	688b      	ldr	r3, [r1, #8]
 8002f72:	4393      	bics	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]
 8002f76:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f7a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d10a      	bne.n	8002f96 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f80:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f84:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f88:	2410      	movs	r4, #16
 8002f8a:	6802      	ldr	r2, [r0, #0]
 8002f8c:	6813      	ldr	r3, [r2, #0]
 8002f8e:	43a3      	bics	r3, r4
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f96:	2220      	movs	r2, #32
 8002f98:	1d03      	adds	r3, r0, #4
 8002f9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fa0:	6683      	str	r3, [r0, #104]	; 0x68
}
 8002fa2:	bd30      	pop	{r4, r5, pc}
 8002fa4:	fffffedf 	.word	0xfffffedf

08002fa8 <UART_SetConfig>:
{
 8002fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002faa:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fac:	6925      	ldr	r5, [r4, #16]
 8002fae:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fb0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb2:	4329      	orrs	r1, r5
 8002fb4:	6965      	ldr	r5, [r4, #20]
 8002fb6:	69c3      	ldr	r3, [r0, #28]
 8002fb8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fba:	6810      	ldr	r0, [r2, #0]
 8002fbc:	4d72      	ldr	r5, [pc, #456]	; (8003188 <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fbe:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc0:	4028      	ands	r0, r5
 8002fc2:	4301      	orrs	r1, r0
 8002fc4:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc6:	6851      	ldr	r1, [r2, #4]
 8002fc8:	4870      	ldr	r0, [pc, #448]	; (800318c <UART_SetConfig+0x1e4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fca:	4d71      	ldr	r5, [pc, #452]	; (8003190 <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fcc:	4001      	ands	r1, r0
 8002fce:	68e0      	ldr	r0, [r4, #12]
 8002fd0:	4301      	orrs	r1, r0
 8002fd2:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fd4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fd6:	42aa      	cmp	r2, r5
 8002fd8:	d001      	beq.n	8002fde <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8002fda:	6a21      	ldr	r1, [r4, #32]
 8002fdc:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fde:	6891      	ldr	r1, [r2, #8]
 8002fe0:	4e6c      	ldr	r6, [pc, #432]	; (8003194 <UART_SetConfig+0x1ec>)
 8002fe2:	4031      	ands	r1, r6
 8002fe4:	4301      	orrs	r1, r0
 8002fe6:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fe8:	496b      	ldr	r1, [pc, #428]	; (8003198 <UART_SetConfig+0x1f0>)
 8002fea:	428a      	cmp	r2, r1
 8002fec:	d10f      	bne.n	800300e <UART_SetConfig+0x66>
 8002fee:	2103      	movs	r1, #3
 8002ff0:	4a6a      	ldr	r2, [pc, #424]	; (800319c <UART_SetConfig+0x1f4>)
 8002ff2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	3a01      	subs	r2, #1
 8002ff8:	4969      	ldr	r1, [pc, #420]	; (80031a0 <UART_SetConfig+0x1f8>)
 8002ffa:	2a02      	cmp	r2, #2
 8002ffc:	d90f      	bls.n	800301e <UART_SetConfig+0x76>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ffe:	2280      	movs	r2, #128	; 0x80
 8003000:	0212      	lsls	r2, r2, #8
 8003002:	4293      	cmp	r3, r2
 8003004:	d100      	bne.n	8003008 <UART_SetConfig+0x60>
 8003006:	e069      	b.n	80030dc <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003008:	f7ff fd06 	bl	8002a18 <HAL_RCC_GetPCLK2Freq>
        break;
 800300c:	e09c      	b.n	8003148 <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800300e:	4965      	ldr	r1, [pc, #404]	; (80031a4 <UART_SetConfig+0x1fc>)
 8003010:	428a      	cmp	r2, r1
 8003012:	d113      	bne.n	800303c <UART_SetConfig+0x94>
 8003014:	210c      	movs	r1, #12
 8003016:	4a61      	ldr	r2, [pc, #388]	; (800319c <UART_SetConfig+0x1f4>)
 8003018:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800301a:	400a      	ands	r2, r1
 800301c:	4962      	ldr	r1, [pc, #392]	; (80031a8 <UART_SetConfig+0x200>)
 800301e:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003020:	2280      	movs	r2, #128	; 0x80
 8003022:	0212      	lsls	r2, r2, #8
 8003024:	4293      	cmp	r3, r2
 8003026:	d000      	beq.n	800302a <UART_SetConfig+0x82>
 8003028:	e07f      	b.n	800312a <UART_SetConfig+0x182>
    switch (clocksource)
 800302a:	2808      	cmp	r0, #8
 800302c:	d818      	bhi.n	8003060 <UART_SetConfig+0xb8>
 800302e:	f7fd f873 	bl	8000118 <__gnu_thumb1_case_uqi>
 8003032:	5550      	.short	0x5550
 8003034:	17791758 	.word	0x17791758
 8003038:	1717      	.short	0x1717
 800303a:	63          	.byte	0x63
 800303b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800303c:	42aa      	cmp	r2, r5
 800303e:	d10f      	bne.n	8003060 <UART_SetConfig+0xb8>
 8003040:	21c0      	movs	r1, #192	; 0xc0
 8003042:	2080      	movs	r0, #128	; 0x80
 8003044:	4a55      	ldr	r2, [pc, #340]	; (800319c <UART_SetConfig+0x1f4>)
 8003046:	0109      	lsls	r1, r1, #4
 8003048:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800304a:	0100      	lsls	r0, r0, #4
 800304c:	400b      	ands	r3, r1
 800304e:	4283      	cmp	r3, r0
 8003050:	d016      	beq.n	8003080 <UART_SetConfig+0xd8>
 8003052:	d807      	bhi.n	8003064 <UART_SetConfig+0xbc>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <UART_SetConfig+0xc6>
 8003058:	2280      	movs	r2, #128	; 0x80
 800305a:	00d2      	lsls	r2, r2, #3
 800305c:	4293      	cmp	r3, r2
 800305e:	d035      	beq.n	80030cc <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003060:	2001      	movs	r0, #1
 8003062:	e009      	b.n	8003078 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003064:	428b      	cmp	r3, r1
 8003066:	d1fb      	bne.n	8003060 <UART_SetConfig+0xb8>
 8003068:	2080      	movs	r0, #128	; 0x80
 800306a:	0200      	lsls	r0, r0, #8
 800306c:	e012      	b.n	8003094 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 800306e:	f7ff fcc3 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003072:	2800      	cmp	r0, #0
 8003074:	d10e      	bne.n	8003094 <UART_SetConfig+0xec>
 8003076:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8003078:	2300      	movs	r3, #0
 800307a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800307c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800307e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003080:	2310      	movs	r3, #16
 8003082:	6810      	ldr	r0, [r2, #0]
 8003084:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003086:	4243      	negs	r3, r0
 8003088:	4158      	adcs	r0, r3
 800308a:	4b48      	ldr	r3, [pc, #288]	; (80031ac <UART_SetConfig+0x204>)
 800308c:	4240      	negs	r0, r0
 800308e:	4018      	ands	r0, r3
 8003090:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <UART_SetConfig+0x208>)
 8003092:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003094:	2203      	movs	r2, #3
 8003096:	6863      	ldr	r3, [r4, #4]
 8003098:	435a      	muls	r2, r3
 800309a:	4282      	cmp	r2, r0
 800309c:	d8e0      	bhi.n	8003060 <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800309e:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030a0:	4282      	cmp	r2, r0
 80030a2:	d3dd      	bcc.n	8003060 <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030a4:	2700      	movs	r7, #0
 80030a6:	0e02      	lsrs	r2, r0, #24
 80030a8:	0201      	lsls	r1, r0, #8
 80030aa:	085e      	lsrs	r6, r3, #1
 80030ac:	1989      	adds	r1, r1, r6
 80030ae:	417a      	adcs	r2, r7
 80030b0:	0008      	movs	r0, r1
 80030b2:	0011      	movs	r1, r2
 80030b4:	001a      	movs	r2, r3
 80030b6:	003b      	movs	r3, r7
 80030b8:	f7fd f9b8 	bl	800042c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030bc:	4b3d      	ldr	r3, [pc, #244]	; (80031b4 <UART_SetConfig+0x20c>)
 80030be:	18c2      	adds	r2, r0, r3
 80030c0:	4b3d      	ldr	r3, [pc, #244]	; (80031b8 <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d8cc      	bhi.n	8003060 <UART_SetConfig+0xb8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	60d8      	str	r0, [r3, #12]
 80030ca:	e7d4      	b.n	8003076 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 80030cc:	f7ff f8fc 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
        break;
 80030d0:	e7cf      	b.n	8003072 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d2:	f7ff fc91 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80030d6:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80030d8:	d0cd      	beq.n	8003076 <UART_SetConfig+0xce>
 80030da:	e00d      	b.n	80030f8 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 80030dc:	f7ff fc9c 	bl	8002a18 <HAL_RCC_GetPCLK2Freq>
 80030e0:	e7f9      	b.n	80030d6 <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030e2:	4b2e      	ldr	r3, [pc, #184]	; (800319c <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80030e4:	4a32      	ldr	r2, [pc, #200]	; (80031b0 <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	2310      	movs	r3, #16
 80030ea:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80030ec:	4243      	negs	r3, r0
 80030ee:	4158      	adcs	r0, r3
 80030f0:	4b2e      	ldr	r3, [pc, #184]	; (80031ac <UART_SetConfig+0x204>)
 80030f2:	4240      	negs	r0, r0
 80030f4:	4003      	ands	r3, r0
 80030f6:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030f8:	0058      	lsls	r0, r3, #1
 80030fa:	6863      	ldr	r3, [r4, #4]
 80030fc:	6861      	ldr	r1, [r4, #4]
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	18c0      	adds	r0, r0, r3
 8003102:	f7fd f81d 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003106:	0002      	movs	r2, r0
 8003108:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <UART_SetConfig+0x214>)
 800310a:	3a10      	subs	r2, #16
 800310c:	429a      	cmp	r2, r3
 800310e:	d8a7      	bhi.n	8003060 <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003110:	230f      	movs	r3, #15
 8003112:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003114:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003116:	439a      	bics	r2, r3
 8003118:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800311a:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800311c:	6822      	ldr	r2, [r4, #0]
 800311e:	4318      	orrs	r0, r3
 8003120:	60d0      	str	r0, [r2, #12]
 8003122:	e7a8      	b.n	8003076 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8003124:	f7ff f8d0 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
 8003128:	e7d5      	b.n	80030d6 <UART_SetConfig+0x12e>
    switch (clocksource)
 800312a:	2808      	cmp	r0, #8
 800312c:	d898      	bhi.n	8003060 <UART_SetConfig+0xb8>
 800312e:	f7fc fffd 	bl	800012c <__gnu_thumb1_case_shi>
 8003132:	0009      	.short	0x0009
 8003134:	000fff6b 	.word	0x000fff6b
 8003138:	0024ff97 	.word	0x0024ff97
 800313c:	ff97ff97 	.word	0xff97ff97
 8003140:	0027ff97 	.word	0x0027ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 8003144:	f7ff fc58 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003148:	2800      	cmp	r0, #0
 800314a:	d100      	bne.n	800314e <UART_SetConfig+0x1a6>
 800314c:	e793      	b.n	8003076 <UART_SetConfig+0xce>
 800314e:	e00a      	b.n	8003166 <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003150:	4b12      	ldr	r3, [pc, #72]	; (800319c <UART_SetConfig+0x1f4>)
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	2310      	movs	r3, #16
 8003156:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003158:	4243      	negs	r3, r0
 800315a:	4158      	adcs	r0, r3
 800315c:	4b13      	ldr	r3, [pc, #76]	; (80031ac <UART_SetConfig+0x204>)
 800315e:	4240      	negs	r0, r0
 8003160:	4018      	ands	r0, r3
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <UART_SetConfig+0x208>)
 8003164:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003166:	6863      	ldr	r3, [r4, #4]
 8003168:	6861      	ldr	r1, [r4, #4]
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	1818      	adds	r0, r3, r0
 800316e:	f7fc ffe7 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003172:	0002      	movs	r2, r0
 8003174:	4b11      	ldr	r3, [pc, #68]	; (80031bc <UART_SetConfig+0x214>)
 8003176:	3a10      	subs	r2, #16
 8003178:	e7a3      	b.n	80030c2 <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 800317a:	f7ff f8a5 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
        break;
 800317e:	e7e3      	b.n	8003148 <UART_SetConfig+0x1a0>
    switch (clocksource)
 8003180:	2080      	movs	r0, #128	; 0x80
 8003182:	0200      	lsls	r0, r0, #8
 8003184:	e7ef      	b.n	8003166 <UART_SetConfig+0x1be>
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	efff69f3 	.word	0xefff69f3
 800318c:	ffffcfff 	.word	0xffffcfff
 8003190:	40004800 	.word	0x40004800
 8003194:	fffff4ff 	.word	0xfffff4ff
 8003198:	40013800 	.word	0x40013800
 800319c:	40021000 	.word	0x40021000
 80031a0:	08004292 	.word	0x08004292
 80031a4:	40004400 	.word	0x40004400
 80031a8:	08004295 	.word	0x08004295
 80031ac:	00b71b00 	.word	0x00b71b00
 80031b0:	003d0900 	.word	0x003d0900
 80031b4:	fffffd00 	.word	0xfffffd00
 80031b8:	000ffcff 	.word	0x000ffcff
 80031bc:	0000ffef 	.word	0x0000ffef

080031c0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80031c2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031c4:	07da      	lsls	r2, r3, #31
 80031c6:	d506      	bpl.n	80031d6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031c8:	6801      	ldr	r1, [r0, #0]
 80031ca:	4c28      	ldr	r4, [pc, #160]	; (800326c <UART_AdvFeatureConfig+0xac>)
 80031cc:	684a      	ldr	r2, [r1, #4]
 80031ce:	4022      	ands	r2, r4
 80031d0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80031d2:	4322      	orrs	r2, r4
 80031d4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031d6:	079a      	lsls	r2, r3, #30
 80031d8:	d506      	bpl.n	80031e8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031da:	6801      	ldr	r1, [r0, #0]
 80031dc:	4c24      	ldr	r4, [pc, #144]	; (8003270 <UART_AdvFeatureConfig+0xb0>)
 80031de:	684a      	ldr	r2, [r1, #4]
 80031e0:	4022      	ands	r2, r4
 80031e2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80031e4:	4322      	orrs	r2, r4
 80031e6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031e8:	075a      	lsls	r2, r3, #29
 80031ea:	d506      	bpl.n	80031fa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031ec:	6801      	ldr	r1, [r0, #0]
 80031ee:	4c21      	ldr	r4, [pc, #132]	; (8003274 <UART_AdvFeatureConfig+0xb4>)
 80031f0:	684a      	ldr	r2, [r1, #4]
 80031f2:	4022      	ands	r2, r4
 80031f4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80031f6:	4322      	orrs	r2, r4
 80031f8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031fa:	071a      	lsls	r2, r3, #28
 80031fc:	d506      	bpl.n	800320c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031fe:	6801      	ldr	r1, [r0, #0]
 8003200:	4c1d      	ldr	r4, [pc, #116]	; (8003278 <UART_AdvFeatureConfig+0xb8>)
 8003202:	684a      	ldr	r2, [r1, #4]
 8003204:	4022      	ands	r2, r4
 8003206:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003208:	4322      	orrs	r2, r4
 800320a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800320c:	06da      	lsls	r2, r3, #27
 800320e:	d506      	bpl.n	800321e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003210:	6801      	ldr	r1, [r0, #0]
 8003212:	4c1a      	ldr	r4, [pc, #104]	; (800327c <UART_AdvFeatureConfig+0xbc>)
 8003214:	688a      	ldr	r2, [r1, #8]
 8003216:	4022      	ands	r2, r4
 8003218:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800321a:	4322      	orrs	r2, r4
 800321c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800321e:	069a      	lsls	r2, r3, #26
 8003220:	d506      	bpl.n	8003230 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003222:	6801      	ldr	r1, [r0, #0]
 8003224:	4c16      	ldr	r4, [pc, #88]	; (8003280 <UART_AdvFeatureConfig+0xc0>)
 8003226:	688a      	ldr	r2, [r1, #8]
 8003228:	4022      	ands	r2, r4
 800322a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800322c:	4322      	orrs	r2, r4
 800322e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003230:	065a      	lsls	r2, r3, #25
 8003232:	d510      	bpl.n	8003256 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003234:	6801      	ldr	r1, [r0, #0]
 8003236:	4d13      	ldr	r5, [pc, #76]	; (8003284 <UART_AdvFeatureConfig+0xc4>)
 8003238:	684a      	ldr	r2, [r1, #4]
 800323a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800323c:	402a      	ands	r2, r5
 800323e:	4322      	orrs	r2, r4
 8003240:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003242:	2280      	movs	r2, #128	; 0x80
 8003244:	0352      	lsls	r2, r2, #13
 8003246:	4294      	cmp	r4, r2
 8003248:	d105      	bne.n	8003256 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800324a:	684a      	ldr	r2, [r1, #4]
 800324c:	4c0e      	ldr	r4, [pc, #56]	; (8003288 <UART_AdvFeatureConfig+0xc8>)
 800324e:	4022      	ands	r2, r4
 8003250:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003252:	4322      	orrs	r2, r4
 8003254:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	d506      	bpl.n	8003268 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800325a:	6802      	ldr	r2, [r0, #0]
 800325c:	490b      	ldr	r1, [pc, #44]	; (800328c <UART_AdvFeatureConfig+0xcc>)
 800325e:	6853      	ldr	r3, [r2, #4]
 8003260:	400b      	ands	r3, r1
 8003262:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003264:	430b      	orrs	r3, r1
 8003266:	6053      	str	r3, [r2, #4]
}
 8003268:	bd30      	pop	{r4, r5, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	fffdffff 	.word	0xfffdffff
 8003270:	fffeffff 	.word	0xfffeffff
 8003274:	fffbffff 	.word	0xfffbffff
 8003278:	ffff7fff 	.word	0xffff7fff
 800327c:	ffffefff 	.word	0xffffefff
 8003280:	ffffdfff 	.word	0xffffdfff
 8003284:	ffefffff 	.word	0xffefffff
 8003288:	ff9fffff 	.word	0xff9fffff
 800328c:	fff7ffff 	.word	0xfff7ffff

08003290 <UART_WaitOnFlagUntilTimeout>:
{
 8003290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003292:	0004      	movs	r4, r0
 8003294:	000d      	movs	r5, r1
 8003296:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003298:	2608      	movs	r6, #8
{
 800329a:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800329c:	6822      	ldr	r2, [r4, #0]
 800329e:	69d3      	ldr	r3, [r2, #28]
 80032a0:	402b      	ands	r3, r5
 80032a2:	1b5b      	subs	r3, r3, r5
 80032a4:	4259      	negs	r1, r3
 80032a6:	414b      	adcs	r3, r1
 80032a8:	42bb      	cmp	r3, r7
 80032aa:	d001      	beq.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 80032ac:	2000      	movs	r0, #0
 80032ae:	e021      	b.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 80032b0:	9b08      	ldr	r3, [sp, #32]
 80032b2:	3301      	adds	r3, #1
 80032b4:	d0f3      	beq.n	800329e <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b6:	f7fe fb55 	bl	8001964 <HAL_GetTick>
 80032ba:	9b00      	ldr	r3, [sp, #0]
 80032bc:	1ac0      	subs	r0, r0, r3
 80032be:	9b08      	ldr	r3, [sp, #32]
 80032c0:	4298      	cmp	r0, r3
 80032c2:	d828      	bhi.n	8003316 <UART_WaitOnFlagUntilTimeout+0x86>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d026      	beq.n	8003316 <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032c8:	2104      	movs	r1, #4
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	420a      	tst	r2, r1
 80032d0:	d0e4      	beq.n	800329c <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	0011      	movs	r1, r2
 80032d6:	4031      	ands	r1, r6
 80032d8:	9101      	str	r1, [sp, #4]
 80032da:	4232      	tst	r2, r6
 80032dc:	d00b      	beq.n	80032f6 <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 80032de:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032e0:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 80032e2:	f7ff fe33 	bl	8002f4c <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032e6:	0023      	movs	r3, r4
 80032e8:	3308      	adds	r3, #8
 80032ea:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 80032ec:	2300      	movs	r3, #0
           return HAL_ERROR;
 80032ee:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 80032f0:	3478      	adds	r4, #120	; 0x78
 80032f2:	7023      	strb	r3, [r4, #0]
}
 80032f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	69d9      	ldr	r1, [r3, #28]
 80032fa:	0112      	lsls	r2, r2, #4
 80032fc:	4211      	tst	r1, r2
 80032fe:	d0cd      	beq.n	800329c <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003300:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8003302:	0020      	movs	r0, r4
 8003304:	f7ff fe22 	bl	8002f4c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003308:	0023      	movs	r3, r4
 800330a:	2220      	movs	r2, #32
 800330c:	3308      	adds	r3, #8
 800330e:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8003310:	9b01      	ldr	r3, [sp, #4]
 8003312:	3478      	adds	r4, #120	; 0x78
 8003314:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003316:	2003      	movs	r0, #3
 8003318:	e7ec      	b.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x64>

0800331a <HAL_UART_Transmit>:
{
 800331a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800331c:	b085      	sub	sp, #20
 800331e:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8003320:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8003322:	0004      	movs	r4, r0
 8003324:	000d      	movs	r5, r1
 8003326:	0016      	movs	r6, r2
    return HAL_BUSY;
 8003328:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800332a:	2b20      	cmp	r3, #32
 800332c:	d139      	bne.n	80033a2 <HAL_UART_Transmit+0x88>
      return  HAL_ERROR;
 800332e:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003330:	2900      	cmp	r1, #0
 8003332:	d036      	beq.n	80033a2 <HAL_UART_Transmit+0x88>
 8003334:	2a00      	cmp	r2, #0
 8003336:	d034      	beq.n	80033a2 <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	68a2      	ldr	r2, [r4, #8]
 800333c:	015b      	lsls	r3, r3, #5
 800333e:	429a      	cmp	r2, r3
 8003340:	d104      	bne.n	800334c <HAL_UART_Transmit+0x32>
 8003342:	6923      	ldr	r3, [r4, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003348:	4201      	tst	r1, r0
 800334a:	d12a      	bne.n	80033a2 <HAL_UART_Transmit+0x88>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	0023      	movs	r3, r4
 800334e:	2200      	movs	r2, #0
 8003350:	3308      	adds	r3, #8
 8003352:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003354:	2321      	movs	r3, #33	; 0x21
 8003356:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8003358:	f7fe fb04 	bl	8001964 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800335c:	0023      	movs	r3, r4
 800335e:	3350      	adds	r3, #80	; 0x50
 8003360:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8003362:	3302      	adds	r3, #2
 8003364:	801e      	strh	r6, [r3, #0]
 8003366:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800336c:	0007      	movs	r7, r0
      pdata16bits = NULL;
 800336e:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003370:	015b      	lsls	r3, r3, #5
 8003372:	429a      	cmp	r2, r3
 8003374:	d104      	bne.n	8003380 <HAL_UART_Transmit+0x66>
 8003376:	6923      	ldr	r3, [r4, #16]
 8003378:	42b3      	cmp	r3, r6
 800337a:	d101      	bne.n	8003380 <HAL_UART_Transmit+0x66>
 800337c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800337e:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8003380:	0023      	movs	r3, r4
 8003382:	3352      	adds	r3, #82	; 0x52
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29a      	uxth	r2, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10c      	bne.n	80033a6 <HAL_UART_Transmit+0x8c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800338c:	9b03      	ldr	r3, [sp, #12]
 800338e:	2140      	movs	r1, #64	; 0x40
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	0020      	movs	r0, r4
 8003394:	003b      	movs	r3, r7
 8003396:	f7ff ff7b 	bl	8003290 <UART_WaitOnFlagUntilTimeout>
 800339a:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 800339c:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800339e:	2800      	cmp	r0, #0
 80033a0:	d10d      	bne.n	80033be <HAL_UART_Transmit+0xa4>
}
 80033a2:	b005      	add	sp, #20
 80033a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033a6:	9b03      	ldr	r3, [sp, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	2180      	movs	r1, #128	; 0x80
 80033ae:	003b      	movs	r3, r7
 80033b0:	0020      	movs	r0, r4
 80033b2:	f7ff ff6d 	bl	8003290 <UART_WaitOnFlagUntilTimeout>
 80033b6:	2800      	cmp	r0, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_UART_Transmit+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 80033ba:	2320      	movs	r3, #32
 80033bc:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80033be:	2003      	movs	r0, #3
 80033c0:	e7ef      	b.n	80033a2 <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033c2:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80033c4:	2d00      	cmp	r5, #0
 80033c6:	d10b      	bne.n	80033e0 <HAL_UART_Transmit+0xc6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033c8:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80033ca:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033cc:	05db      	lsls	r3, r3, #23
 80033ce:	0ddb      	lsrs	r3, r3, #23
 80033d0:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80033d2:	9b02      	ldr	r3, [sp, #8]
 80033d4:	9a02      	ldr	r2, [sp, #8]
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29b      	uxth	r3, r3
 80033dc:	8013      	strh	r3, [r2, #0]
 80033de:	e7cf      	b.n	8003380 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033e0:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80033e2:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033e4:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 80033e6:	e7f4      	b.n	80033d2 <HAL_UART_Transmit+0xb8>

080033e8 <HAL_UART_Receive>:
{
 80033e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ea:	0016      	movs	r6, r2
 80033ec:	b087      	sub	sp, #28
  if (huart->RxState == HAL_UART_STATE_READY)
 80033ee:	1d02      	adds	r2, r0, #4
{
 80033f0:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 80033f2:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
{
 80033f4:	0004      	movs	r4, r0
 80033f6:	000d      	movs	r5, r1
    return HAL_BUSY;
 80033f8:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d160      	bne.n	80034c0 <HAL_UART_Receive+0xd8>
      return  HAL_ERROR;
 80033fe:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003400:	2900      	cmp	r1, #0
 8003402:	d05d      	beq.n	80034c0 <HAL_UART_Receive+0xd8>
 8003404:	2e00      	cmp	r6, #0
 8003406:	d05b      	beq.n	80034c0 <HAL_UART_Receive+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	68a1      	ldr	r1, [r4, #8]
 800340c:	015b      	lsls	r3, r3, #5
 800340e:	4299      	cmp	r1, r3
 8003410:	d104      	bne.n	800341c <HAL_UART_Receive+0x34>
 8003412:	6923      	ldr	r3, [r4, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_UART_Receive+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003418:	4205      	tst	r5, r0
 800341a:	d151      	bne.n	80034c0 <HAL_UART_Receive+0xd8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341c:	0023      	movs	r3, r4
 800341e:	2700      	movs	r7, #0
 8003420:	3308      	adds	r3, #8
 8003422:	67df      	str	r7, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003424:	2322      	movs	r3, #34	; 0x22
 8003426:	67d3      	str	r3, [r2, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003428:	6627      	str	r7, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 800342a:	f7fe fa9b 	bl	8001964 <HAL_GetTick>
    huart->RxXferSize  = Size;
 800342e:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8003430:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 8003432:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 8003434:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 8003436:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 8003438:	3302      	adds	r3, #2
 800343a:	9303      	str	r3, [sp, #12]
 800343c:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 800343e:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 8003440:	0149      	lsls	r1, r1, #5
 8003442:	3302      	adds	r3, #2
 8003444:	428a      	cmp	r2, r1
 8003446:	d11b      	bne.n	8003480 <HAL_UART_Receive+0x98>
 8003448:	6921      	ldr	r1, [r4, #16]
 800344a:	42b9      	cmp	r1, r7
 800344c:	d116      	bne.n	800347c <HAL_UART_Receive+0x94>
 800344e:	4926      	ldr	r1, [pc, #152]	; (80034e8 <HAL_UART_Receive+0x100>)
 8003450:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 8003452:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003454:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 8003456:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003458:	015b      	lsls	r3, r3, #5
 800345a:	429a      	cmp	r2, r3
 800345c:	d104      	bne.n	8003468 <HAL_UART_Receive+0x80>
 800345e:	6923      	ldr	r3, [r4, #16]
 8003460:	42b3      	cmp	r3, r6
 8003462:	d101      	bne.n	8003468 <HAL_UART_Receive+0x80>
 8003464:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8003466:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 8003468:	0023      	movs	r3, r4
 800346a:	335a      	adds	r3, #90	; 0x5a
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b298      	uxth	r0, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d117      	bne.n	80034a4 <HAL_UART_Receive+0xbc>
    huart->RxState = HAL_UART_STATE_READY;
 8003474:	3404      	adds	r4, #4
 8003476:	3320      	adds	r3, #32
 8003478:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 800347a:	e021      	b.n	80034c0 <HAL_UART_Receive+0xd8>
    UART_MASK_COMPUTATION(huart);
 800347c:	21ff      	movs	r1, #255	; 0xff
 800347e:	e7e7      	b.n	8003450 <HAL_UART_Receive+0x68>
 8003480:	2a00      	cmp	r2, #0
 8003482:	d104      	bne.n	800348e <HAL_UART_Receive+0xa6>
 8003484:	6921      	ldr	r1, [r4, #16]
 8003486:	2900      	cmp	r1, #0
 8003488:	d0f8      	beq.n	800347c <HAL_UART_Receive+0x94>
 800348a:	217f      	movs	r1, #127	; 0x7f
 800348c:	e7e0      	b.n	8003450 <HAL_UART_Receive+0x68>
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	0549      	lsls	r1, r1, #21
 8003492:	428a      	cmp	r2, r1
 8003494:	d104      	bne.n	80034a0 <HAL_UART_Receive+0xb8>
 8003496:	6921      	ldr	r1, [r4, #16]
 8003498:	2900      	cmp	r1, #0
 800349a:	d0f6      	beq.n	800348a <HAL_UART_Receive+0xa2>
 800349c:	213f      	movs	r1, #63	; 0x3f
 800349e:	e7d7      	b.n	8003450 <HAL_UART_Receive+0x68>
 80034a0:	801f      	strh	r7, [r3, #0]
 80034a2:	e7d6      	b.n	8003452 <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034a4:	9b05      	ldr	r3, [sp, #20]
 80034a6:	2200      	movs	r2, #0
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2120      	movs	r1, #32
 80034ac:	0020      	movs	r0, r4
 80034ae:	9b04      	ldr	r3, [sp, #16]
 80034b0:	f7ff feee 	bl	8003290 <UART_WaitOnFlagUntilTimeout>
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_UART_Receive+0xdc>
        huart->RxState = HAL_UART_STATE_READY;
 80034b8:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80034ba:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80034bc:	3404      	adds	r4, #4
 80034be:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 80034c0:	b007      	add	sp, #28
 80034c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 80034ca:	2d00      	cmp	r5, #0
 80034cc:	d108      	bne.n	80034e0 <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80034ce:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 80034d0:	3602      	adds	r6, #2
      huart->RxXferCount--;
 80034d2:	9b03      	ldr	r3, [sp, #12]
 80034d4:	9a03      	ldr	r2, [sp, #12]
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29b      	uxth	r3, r3
 80034dc:	8013      	strh	r3, [r2, #0]
 80034de:	e7c3      	b.n	8003468 <HAL_UART_Receive+0x80>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80034e0:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 80034e2:	3501      	adds	r5, #1
 80034e4:	e7f5      	b.n	80034d2 <HAL_UART_Receive+0xea>
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	000001ff 	.word	0x000001ff

080034ec <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	0003      	movs	r3, r0
{
 80034ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f0:	2500      	movs	r5, #0
{
 80034f2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f4:	3308      	adds	r3, #8
 80034f6:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80034f8:	f7fe fa34 	bl	8001964 <HAL_GetTick>
 80034fc:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034fe:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003500:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3678      	adds	r6, #120	; 0x78
 8003506:	071b      	lsls	r3, r3, #28
 8003508:	d51b      	bpl.n	8003542 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800350a:	2180      	movs	r1, #128	; 0x80
 800350c:	4b26      	ldr	r3, [pc, #152]	; (80035a8 <UART_CheckIdleState+0xbc>)
 800350e:	002a      	movs	r2, r5
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	0389      	lsls	r1, r1, #14
 8003514:	0003      	movs	r3, r0
 8003516:	0020      	movs	r0, r4
 8003518:	f7ff feba 	bl	8003290 <UART_WaitOnFlagUntilTimeout>
 800351c:	42a8      	cmp	r0, r5
 800351e:	d010      	beq.n	8003542 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003520:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003524:	2301      	movs	r3, #1
 8003526:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800352a:	2080      	movs	r0, #128	; 0x80
 800352c:	6822      	ldr	r2, [r4, #0]
 800352e:	6813      	ldr	r3, [r2, #0]
 8003530:	4383      	bics	r3, r0
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8003538:	2320      	movs	r3, #32
 800353a:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 800353c:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 800353e:	2003      	movs	r0, #3
}
 8003540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003542:	0025      	movs	r5, r4
 8003544:	cd08      	ldmia	r5!, {r3}
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	075b      	lsls	r3, r3, #29
 800354a:	d525      	bpl.n	8003598 <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800354c:	2180      	movs	r1, #128	; 0x80
 800354e:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <UART_CheckIdleState+0xbc>)
 8003550:	2200      	movs	r2, #0
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	0020      	movs	r0, r4
 8003556:	003b      	movs	r3, r7
 8003558:	03c9      	lsls	r1, r1, #15
 800355a:	f7ff fe99 	bl	8003290 <UART_WaitOnFlagUntilTimeout>
 800355e:	2800      	cmp	r0, #0
 8003560:	d01a      	beq.n	8003598 <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003562:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003566:	2201      	movs	r2, #1
 8003568:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800356c:	6821      	ldr	r1, [r4, #0]
 800356e:	4f0f      	ldr	r7, [pc, #60]	; (80035ac <UART_CheckIdleState+0xc0>)
 8003570:	680b      	ldr	r3, [r1, #0]
 8003572:	403b      	ands	r3, r7
 8003574:	600b      	str	r3, [r1, #0]
 8003576:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003582:	6821      	ldr	r1, [r4, #0]
 8003584:	688b      	ldr	r3, [r1, #8]
 8003586:	4393      	bics	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
 800358a:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800358e:	2320      	movs	r3, #32
 8003590:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8003592:	2300      	movs	r3, #0
 8003594:	7033      	strb	r3, [r6, #0]
 8003596:	e7d2      	b.n	800353e <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003598:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800359a:	2320      	movs	r3, #32
 800359c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800359e:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a0:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035a2:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80035a4:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 80035a6:	e7cb      	b.n	8003540 <UART_CheckIdleState+0x54>
 80035a8:	01ffffff 	.word	0x01ffffff
 80035ac:	fffffedf 	.word	0xfffffedf

080035b0 <HAL_UART_Init>:
{
 80035b0:	b510      	push	{r4, lr}
 80035b2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80035b6:	2001      	movs	r0, #1
}
 80035b8:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80035ba:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80035c0:	0002      	movs	r2, r0
 80035c2:	3278      	adds	r2, #120	; 0x78
 80035c4:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80035c6:	f7fe f907 	bl	80017d8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80035ca:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80035cc:	2101      	movs	r1, #1
 80035ce:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80035d0:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80035d2:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035d4:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80035d6:	438b      	bics	r3, r1
 80035d8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035da:	f7ff fce5 	bl	8002fa8 <UART_SetConfig>
 80035de:	2801      	cmp	r0, #1
 80035e0:	d0e9      	beq.n	80035b6 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80035e8:	0020      	movs	r0, r4
 80035ea:	f7ff fde9 	bl	80031c0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	4907      	ldr	r1, [pc, #28]	; (8003610 <HAL_UART_Init+0x60>)
 80035f2:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80035f4:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f6:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f8:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	438a      	bics	r2, r1
 8003600:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003602:	2201      	movs	r2, #1
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800360a:	f7ff ff6f 	bl	80034ec <UART_CheckIdleState>
 800360e:	e7d3      	b.n	80035b8 <HAL_UART_Init+0x8>
 8003610:	ffffb7ff 	.word	0xffffb7ff

08003614 <__errno>:
 8003614:	4b01      	ldr	r3, [pc, #4]	; (800361c <__errno+0x8>)
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	4770      	bx	lr
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	200000a8 	.word	0x200000a8

08003620 <__libc_init_array>:
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	2600      	movs	r6, #0
 8003624:	4d0c      	ldr	r5, [pc, #48]	; (8003658 <__libc_init_array+0x38>)
 8003626:	4c0d      	ldr	r4, [pc, #52]	; (800365c <__libc_init_array+0x3c>)
 8003628:	1b64      	subs	r4, r4, r5
 800362a:	10a4      	asrs	r4, r4, #2
 800362c:	42a6      	cmp	r6, r4
 800362e:	d109      	bne.n	8003644 <__libc_init_array+0x24>
 8003630:	2600      	movs	r6, #0
 8003632:	f000 fc8b 	bl	8003f4c <_init>
 8003636:	4d0a      	ldr	r5, [pc, #40]	; (8003660 <__libc_init_array+0x40>)
 8003638:	4c0a      	ldr	r4, [pc, #40]	; (8003664 <__libc_init_array+0x44>)
 800363a:	1b64      	subs	r4, r4, r5
 800363c:	10a4      	asrs	r4, r4, #2
 800363e:	42a6      	cmp	r6, r4
 8003640:	d105      	bne.n	800364e <__libc_init_array+0x2e>
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	00b3      	lsls	r3, r6, #2
 8003646:	58eb      	ldr	r3, [r5, r3]
 8003648:	4798      	blx	r3
 800364a:	3601      	adds	r6, #1
 800364c:	e7ee      	b.n	800362c <__libc_init_array+0xc>
 800364e:	00b3      	lsls	r3, r6, #2
 8003650:	58eb      	ldr	r3, [r5, r3]
 8003652:	4798      	blx	r3
 8003654:	3601      	adds	r6, #1
 8003656:	e7f2      	b.n	800363e <__libc_init_array+0x1e>
 8003658:	080042e0 	.word	0x080042e0
 800365c:	080042e0 	.word	0x080042e0
 8003660:	080042e0 	.word	0x080042e0
 8003664:	080042e4 	.word	0x080042e4

08003668 <memcpy>:
 8003668:	2300      	movs	r3, #0
 800366a:	b510      	push	{r4, lr}
 800366c:	429a      	cmp	r2, r3
 800366e:	d100      	bne.n	8003672 <memcpy+0xa>
 8003670:	bd10      	pop	{r4, pc}
 8003672:	5ccc      	ldrb	r4, [r1, r3]
 8003674:	54c4      	strb	r4, [r0, r3]
 8003676:	3301      	adds	r3, #1
 8003678:	e7f8      	b.n	800366c <memcpy+0x4>

0800367a <memmove>:
 800367a:	b510      	push	{r4, lr}
 800367c:	4288      	cmp	r0, r1
 800367e:	d902      	bls.n	8003686 <memmove+0xc>
 8003680:	188b      	adds	r3, r1, r2
 8003682:	4298      	cmp	r0, r3
 8003684:	d303      	bcc.n	800368e <memmove+0x14>
 8003686:	2300      	movs	r3, #0
 8003688:	e007      	b.n	800369a <memmove+0x20>
 800368a:	5c8b      	ldrb	r3, [r1, r2]
 800368c:	5483      	strb	r3, [r0, r2]
 800368e:	3a01      	subs	r2, #1
 8003690:	d2fb      	bcs.n	800368a <memmove+0x10>
 8003692:	bd10      	pop	{r4, pc}
 8003694:	5ccc      	ldrb	r4, [r1, r3]
 8003696:	54c4      	strb	r4, [r0, r3]
 8003698:	3301      	adds	r3, #1
 800369a:	429a      	cmp	r2, r3
 800369c:	d1fa      	bne.n	8003694 <memmove+0x1a>
 800369e:	e7f8      	b.n	8003692 <memmove+0x18>

080036a0 <memset>:
 80036a0:	0003      	movs	r3, r0
 80036a2:	1882      	adds	r2, r0, r2
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d100      	bne.n	80036aa <memset+0xa>
 80036a8:	4770      	bx	lr
 80036aa:	7019      	strb	r1, [r3, #0]
 80036ac:	3301      	adds	r3, #1
 80036ae:	e7f9      	b.n	80036a4 <memset+0x4>

080036b0 <siprintf>:
 80036b0:	b40e      	push	{r1, r2, r3}
 80036b2:	b500      	push	{lr}
 80036b4:	490b      	ldr	r1, [pc, #44]	; (80036e4 <siprintf+0x34>)
 80036b6:	b09c      	sub	sp, #112	; 0x70
 80036b8:	ab1d      	add	r3, sp, #116	; 0x74
 80036ba:	9002      	str	r0, [sp, #8]
 80036bc:	9006      	str	r0, [sp, #24]
 80036be:	9107      	str	r1, [sp, #28]
 80036c0:	9104      	str	r1, [sp, #16]
 80036c2:	4809      	ldr	r0, [pc, #36]	; (80036e8 <siprintf+0x38>)
 80036c4:	4909      	ldr	r1, [pc, #36]	; (80036ec <siprintf+0x3c>)
 80036c6:	cb04      	ldmia	r3!, {r2}
 80036c8:	9105      	str	r1, [sp, #20]
 80036ca:	6800      	ldr	r0, [r0, #0]
 80036cc:	a902      	add	r1, sp, #8
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	f000 f870 	bl	80037b4 <_svfiprintf_r>
 80036d4:	2300      	movs	r3, #0
 80036d6:	9a02      	ldr	r2, [sp, #8]
 80036d8:	7013      	strb	r3, [r2, #0]
 80036da:	b01c      	add	sp, #112	; 0x70
 80036dc:	bc08      	pop	{r3}
 80036de:	b003      	add	sp, #12
 80036e0:	4718      	bx	r3
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	7fffffff 	.word	0x7fffffff
 80036e8:	200000a8 	.word	0x200000a8
 80036ec:	ffff0208 	.word	0xffff0208

080036f0 <__ssputs_r>:
 80036f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f2:	688e      	ldr	r6, [r1, #8]
 80036f4:	b085      	sub	sp, #20
 80036f6:	0007      	movs	r7, r0
 80036f8:	000c      	movs	r4, r1
 80036fa:	9203      	str	r2, [sp, #12]
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	429e      	cmp	r6, r3
 8003700:	d83c      	bhi.n	800377c <__ssputs_r+0x8c>
 8003702:	2390      	movs	r3, #144	; 0x90
 8003704:	898a      	ldrh	r2, [r1, #12]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	421a      	tst	r2, r3
 800370a:	d034      	beq.n	8003776 <__ssputs_r+0x86>
 800370c:	6909      	ldr	r1, [r1, #16]
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	6960      	ldr	r0, [r4, #20]
 8003712:	1a5b      	subs	r3, r3, r1
 8003714:	9302      	str	r3, [sp, #8]
 8003716:	2303      	movs	r3, #3
 8003718:	4343      	muls	r3, r0
 800371a:	0fdd      	lsrs	r5, r3, #31
 800371c:	18ed      	adds	r5, r5, r3
 800371e:	9b01      	ldr	r3, [sp, #4]
 8003720:	9802      	ldr	r0, [sp, #8]
 8003722:	3301      	adds	r3, #1
 8003724:	181b      	adds	r3, r3, r0
 8003726:	106d      	asrs	r5, r5, #1
 8003728:	42ab      	cmp	r3, r5
 800372a:	d900      	bls.n	800372e <__ssputs_r+0x3e>
 800372c:	001d      	movs	r5, r3
 800372e:	0553      	lsls	r3, r2, #21
 8003730:	d532      	bpl.n	8003798 <__ssputs_r+0xa8>
 8003732:	0029      	movs	r1, r5
 8003734:	0038      	movs	r0, r7
 8003736:	f000 fb37 	bl	8003da8 <_malloc_r>
 800373a:	1e06      	subs	r6, r0, #0
 800373c:	d109      	bne.n	8003752 <__ssputs_r+0x62>
 800373e:	230c      	movs	r3, #12
 8003740:	603b      	str	r3, [r7, #0]
 8003742:	2340      	movs	r3, #64	; 0x40
 8003744:	2001      	movs	r0, #1
 8003746:	89a2      	ldrh	r2, [r4, #12]
 8003748:	4240      	negs	r0, r0
 800374a:	4313      	orrs	r3, r2
 800374c:	81a3      	strh	r3, [r4, #12]
 800374e:	b005      	add	sp, #20
 8003750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003752:	9a02      	ldr	r2, [sp, #8]
 8003754:	6921      	ldr	r1, [r4, #16]
 8003756:	f7ff ff87 	bl	8003668 <memcpy>
 800375a:	89a3      	ldrh	r3, [r4, #12]
 800375c:	4a14      	ldr	r2, [pc, #80]	; (80037b0 <__ssputs_r+0xc0>)
 800375e:	401a      	ands	r2, r3
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	4313      	orrs	r3, r2
 8003764:	81a3      	strh	r3, [r4, #12]
 8003766:	9b02      	ldr	r3, [sp, #8]
 8003768:	6126      	str	r6, [r4, #16]
 800376a:	18f6      	adds	r6, r6, r3
 800376c:	6026      	str	r6, [r4, #0]
 800376e:	6165      	str	r5, [r4, #20]
 8003770:	9e01      	ldr	r6, [sp, #4]
 8003772:	1aed      	subs	r5, r5, r3
 8003774:	60a5      	str	r5, [r4, #8]
 8003776:	9b01      	ldr	r3, [sp, #4]
 8003778:	429e      	cmp	r6, r3
 800377a:	d900      	bls.n	800377e <__ssputs_r+0x8e>
 800377c:	9e01      	ldr	r6, [sp, #4]
 800377e:	0032      	movs	r2, r6
 8003780:	9903      	ldr	r1, [sp, #12]
 8003782:	6820      	ldr	r0, [r4, #0]
 8003784:	f7ff ff79 	bl	800367a <memmove>
 8003788:	68a3      	ldr	r3, [r4, #8]
 800378a:	2000      	movs	r0, #0
 800378c:	1b9b      	subs	r3, r3, r6
 800378e:	60a3      	str	r3, [r4, #8]
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	199e      	adds	r6, r3, r6
 8003794:	6026      	str	r6, [r4, #0]
 8003796:	e7da      	b.n	800374e <__ssputs_r+0x5e>
 8003798:	002a      	movs	r2, r5
 800379a:	0038      	movs	r0, r7
 800379c:	f000 fb7a 	bl	8003e94 <_realloc_r>
 80037a0:	1e06      	subs	r6, r0, #0
 80037a2:	d1e0      	bne.n	8003766 <__ssputs_r+0x76>
 80037a4:	0038      	movs	r0, r7
 80037a6:	6921      	ldr	r1, [r4, #16]
 80037a8:	f000 fa92 	bl	8003cd0 <_free_r>
 80037ac:	e7c7      	b.n	800373e <__ssputs_r+0x4e>
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	fffffb7f 	.word	0xfffffb7f

080037b4 <_svfiprintf_r>:
 80037b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b6:	b0a1      	sub	sp, #132	; 0x84
 80037b8:	9003      	str	r0, [sp, #12]
 80037ba:	001d      	movs	r5, r3
 80037bc:	898b      	ldrh	r3, [r1, #12]
 80037be:	000f      	movs	r7, r1
 80037c0:	0016      	movs	r6, r2
 80037c2:	061b      	lsls	r3, r3, #24
 80037c4:	d511      	bpl.n	80037ea <_svfiprintf_r+0x36>
 80037c6:	690b      	ldr	r3, [r1, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10e      	bne.n	80037ea <_svfiprintf_r+0x36>
 80037cc:	2140      	movs	r1, #64	; 0x40
 80037ce:	f000 faeb 	bl	8003da8 <_malloc_r>
 80037d2:	6038      	str	r0, [r7, #0]
 80037d4:	6138      	str	r0, [r7, #16]
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d105      	bne.n	80037e6 <_svfiprintf_r+0x32>
 80037da:	230c      	movs	r3, #12
 80037dc:	9a03      	ldr	r2, [sp, #12]
 80037de:	3801      	subs	r0, #1
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	b021      	add	sp, #132	; 0x84
 80037e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e6:	2340      	movs	r3, #64	; 0x40
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	2300      	movs	r3, #0
 80037ec:	ac08      	add	r4, sp, #32
 80037ee:	6163      	str	r3, [r4, #20]
 80037f0:	3320      	adds	r3, #32
 80037f2:	7663      	strb	r3, [r4, #25]
 80037f4:	3310      	adds	r3, #16
 80037f6:	76a3      	strb	r3, [r4, #26]
 80037f8:	9507      	str	r5, [sp, #28]
 80037fa:	0035      	movs	r5, r6
 80037fc:	782b      	ldrb	r3, [r5, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <_svfiprintf_r+0x52>
 8003802:	2b25      	cmp	r3, #37	; 0x25
 8003804:	d147      	bne.n	8003896 <_svfiprintf_r+0xe2>
 8003806:	1bab      	subs	r3, r5, r6
 8003808:	9305      	str	r3, [sp, #20]
 800380a:	42b5      	cmp	r5, r6
 800380c:	d00c      	beq.n	8003828 <_svfiprintf_r+0x74>
 800380e:	0032      	movs	r2, r6
 8003810:	0039      	movs	r1, r7
 8003812:	9803      	ldr	r0, [sp, #12]
 8003814:	f7ff ff6c 	bl	80036f0 <__ssputs_r>
 8003818:	1c43      	adds	r3, r0, #1
 800381a:	d100      	bne.n	800381e <_svfiprintf_r+0x6a>
 800381c:	e0ae      	b.n	800397c <_svfiprintf_r+0x1c8>
 800381e:	6962      	ldr	r2, [r4, #20]
 8003820:	9b05      	ldr	r3, [sp, #20]
 8003822:	4694      	mov	ip, r2
 8003824:	4463      	add	r3, ip
 8003826:	6163      	str	r3, [r4, #20]
 8003828:	782b      	ldrb	r3, [r5, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d100      	bne.n	8003830 <_svfiprintf_r+0x7c>
 800382e:	e0a5      	b.n	800397c <_svfiprintf_r+0x1c8>
 8003830:	2201      	movs	r2, #1
 8003832:	2300      	movs	r3, #0
 8003834:	4252      	negs	r2, r2
 8003836:	6062      	str	r2, [r4, #4]
 8003838:	a904      	add	r1, sp, #16
 800383a:	3254      	adds	r2, #84	; 0x54
 800383c:	1852      	adds	r2, r2, r1
 800383e:	1c6e      	adds	r6, r5, #1
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	60e3      	str	r3, [r4, #12]
 8003844:	60a3      	str	r3, [r4, #8]
 8003846:	7013      	strb	r3, [r2, #0]
 8003848:	65a3      	str	r3, [r4, #88]	; 0x58
 800384a:	2205      	movs	r2, #5
 800384c:	7831      	ldrb	r1, [r6, #0]
 800384e:	4854      	ldr	r0, [pc, #336]	; (80039a0 <_svfiprintf_r+0x1ec>)
 8003850:	f000 fa32 	bl	8003cb8 <memchr>
 8003854:	1c75      	adds	r5, r6, #1
 8003856:	2800      	cmp	r0, #0
 8003858:	d11f      	bne.n	800389a <_svfiprintf_r+0xe6>
 800385a:	6822      	ldr	r2, [r4, #0]
 800385c:	06d3      	lsls	r3, r2, #27
 800385e:	d504      	bpl.n	800386a <_svfiprintf_r+0xb6>
 8003860:	2353      	movs	r3, #83	; 0x53
 8003862:	a904      	add	r1, sp, #16
 8003864:	185b      	adds	r3, r3, r1
 8003866:	2120      	movs	r1, #32
 8003868:	7019      	strb	r1, [r3, #0]
 800386a:	0713      	lsls	r3, r2, #28
 800386c:	d504      	bpl.n	8003878 <_svfiprintf_r+0xc4>
 800386e:	2353      	movs	r3, #83	; 0x53
 8003870:	a904      	add	r1, sp, #16
 8003872:	185b      	adds	r3, r3, r1
 8003874:	212b      	movs	r1, #43	; 0x2b
 8003876:	7019      	strb	r1, [r3, #0]
 8003878:	7833      	ldrb	r3, [r6, #0]
 800387a:	2b2a      	cmp	r3, #42	; 0x2a
 800387c:	d016      	beq.n	80038ac <_svfiprintf_r+0xf8>
 800387e:	0035      	movs	r5, r6
 8003880:	2100      	movs	r1, #0
 8003882:	200a      	movs	r0, #10
 8003884:	68e3      	ldr	r3, [r4, #12]
 8003886:	782a      	ldrb	r2, [r5, #0]
 8003888:	1c6e      	adds	r6, r5, #1
 800388a:	3a30      	subs	r2, #48	; 0x30
 800388c:	2a09      	cmp	r2, #9
 800388e:	d94e      	bls.n	800392e <_svfiprintf_r+0x17a>
 8003890:	2900      	cmp	r1, #0
 8003892:	d111      	bne.n	80038b8 <_svfiprintf_r+0x104>
 8003894:	e017      	b.n	80038c6 <_svfiprintf_r+0x112>
 8003896:	3501      	adds	r5, #1
 8003898:	e7b0      	b.n	80037fc <_svfiprintf_r+0x48>
 800389a:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <_svfiprintf_r+0x1ec>)
 800389c:	6822      	ldr	r2, [r4, #0]
 800389e:	1ac0      	subs	r0, r0, r3
 80038a0:	2301      	movs	r3, #1
 80038a2:	4083      	lsls	r3, r0
 80038a4:	4313      	orrs	r3, r2
 80038a6:	002e      	movs	r6, r5
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	e7ce      	b.n	800384a <_svfiprintf_r+0x96>
 80038ac:	9b07      	ldr	r3, [sp, #28]
 80038ae:	1d19      	adds	r1, r3, #4
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	9107      	str	r1, [sp, #28]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	db01      	blt.n	80038bc <_svfiprintf_r+0x108>
 80038b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80038ba:	e004      	b.n	80038c6 <_svfiprintf_r+0x112>
 80038bc:	425b      	negs	r3, r3
 80038be:	60e3      	str	r3, [r4, #12]
 80038c0:	2302      	movs	r3, #2
 80038c2:	4313      	orrs	r3, r2
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	782b      	ldrb	r3, [r5, #0]
 80038c8:	2b2e      	cmp	r3, #46	; 0x2e
 80038ca:	d10a      	bne.n	80038e2 <_svfiprintf_r+0x12e>
 80038cc:	786b      	ldrb	r3, [r5, #1]
 80038ce:	2b2a      	cmp	r3, #42	; 0x2a
 80038d0:	d135      	bne.n	800393e <_svfiprintf_r+0x18a>
 80038d2:	9b07      	ldr	r3, [sp, #28]
 80038d4:	3502      	adds	r5, #2
 80038d6:	1d1a      	adds	r2, r3, #4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	9207      	str	r2, [sp, #28]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	db2b      	blt.n	8003938 <_svfiprintf_r+0x184>
 80038e0:	9309      	str	r3, [sp, #36]	; 0x24
 80038e2:	4e30      	ldr	r6, [pc, #192]	; (80039a4 <_svfiprintf_r+0x1f0>)
 80038e4:	2203      	movs	r2, #3
 80038e6:	0030      	movs	r0, r6
 80038e8:	7829      	ldrb	r1, [r5, #0]
 80038ea:	f000 f9e5 	bl	8003cb8 <memchr>
 80038ee:	2800      	cmp	r0, #0
 80038f0:	d006      	beq.n	8003900 <_svfiprintf_r+0x14c>
 80038f2:	2340      	movs	r3, #64	; 0x40
 80038f4:	1b80      	subs	r0, r0, r6
 80038f6:	4083      	lsls	r3, r0
 80038f8:	6822      	ldr	r2, [r4, #0]
 80038fa:	3501      	adds	r5, #1
 80038fc:	4313      	orrs	r3, r2
 80038fe:	6023      	str	r3, [r4, #0]
 8003900:	7829      	ldrb	r1, [r5, #0]
 8003902:	2206      	movs	r2, #6
 8003904:	4828      	ldr	r0, [pc, #160]	; (80039a8 <_svfiprintf_r+0x1f4>)
 8003906:	1c6e      	adds	r6, r5, #1
 8003908:	7621      	strb	r1, [r4, #24]
 800390a:	f000 f9d5 	bl	8003cb8 <memchr>
 800390e:	2800      	cmp	r0, #0
 8003910:	d03c      	beq.n	800398c <_svfiprintf_r+0x1d8>
 8003912:	4b26      	ldr	r3, [pc, #152]	; (80039ac <_svfiprintf_r+0x1f8>)
 8003914:	2b00      	cmp	r3, #0
 8003916:	d125      	bne.n	8003964 <_svfiprintf_r+0x1b0>
 8003918:	2207      	movs	r2, #7
 800391a:	9b07      	ldr	r3, [sp, #28]
 800391c:	3307      	adds	r3, #7
 800391e:	4393      	bics	r3, r2
 8003920:	3308      	adds	r3, #8
 8003922:	9307      	str	r3, [sp, #28]
 8003924:	6963      	ldr	r3, [r4, #20]
 8003926:	9a04      	ldr	r2, [sp, #16]
 8003928:	189b      	adds	r3, r3, r2
 800392a:	6163      	str	r3, [r4, #20]
 800392c:	e765      	b.n	80037fa <_svfiprintf_r+0x46>
 800392e:	4343      	muls	r3, r0
 8003930:	0035      	movs	r5, r6
 8003932:	2101      	movs	r1, #1
 8003934:	189b      	adds	r3, r3, r2
 8003936:	e7a6      	b.n	8003886 <_svfiprintf_r+0xd2>
 8003938:	2301      	movs	r3, #1
 800393a:	425b      	negs	r3, r3
 800393c:	e7d0      	b.n	80038e0 <_svfiprintf_r+0x12c>
 800393e:	2300      	movs	r3, #0
 8003940:	200a      	movs	r0, #10
 8003942:	001a      	movs	r2, r3
 8003944:	3501      	adds	r5, #1
 8003946:	6063      	str	r3, [r4, #4]
 8003948:	7829      	ldrb	r1, [r5, #0]
 800394a:	1c6e      	adds	r6, r5, #1
 800394c:	3930      	subs	r1, #48	; 0x30
 800394e:	2909      	cmp	r1, #9
 8003950:	d903      	bls.n	800395a <_svfiprintf_r+0x1a6>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0c5      	beq.n	80038e2 <_svfiprintf_r+0x12e>
 8003956:	9209      	str	r2, [sp, #36]	; 0x24
 8003958:	e7c3      	b.n	80038e2 <_svfiprintf_r+0x12e>
 800395a:	4342      	muls	r2, r0
 800395c:	0035      	movs	r5, r6
 800395e:	2301      	movs	r3, #1
 8003960:	1852      	adds	r2, r2, r1
 8003962:	e7f1      	b.n	8003948 <_svfiprintf_r+0x194>
 8003964:	ab07      	add	r3, sp, #28
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	003a      	movs	r2, r7
 800396a:	0021      	movs	r1, r4
 800396c:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <_svfiprintf_r+0x1fc>)
 800396e:	9803      	ldr	r0, [sp, #12]
 8003970:	e000      	b.n	8003974 <_svfiprintf_r+0x1c0>
 8003972:	bf00      	nop
 8003974:	9004      	str	r0, [sp, #16]
 8003976:	9b04      	ldr	r3, [sp, #16]
 8003978:	3301      	adds	r3, #1
 800397a:	d1d3      	bne.n	8003924 <_svfiprintf_r+0x170>
 800397c:	89bb      	ldrh	r3, [r7, #12]
 800397e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003980:	065b      	lsls	r3, r3, #25
 8003982:	d400      	bmi.n	8003986 <_svfiprintf_r+0x1d2>
 8003984:	e72d      	b.n	80037e2 <_svfiprintf_r+0x2e>
 8003986:	2001      	movs	r0, #1
 8003988:	4240      	negs	r0, r0
 800398a:	e72a      	b.n	80037e2 <_svfiprintf_r+0x2e>
 800398c:	ab07      	add	r3, sp, #28
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	003a      	movs	r2, r7
 8003992:	0021      	movs	r1, r4
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <_svfiprintf_r+0x1fc>)
 8003996:	9803      	ldr	r0, [sp, #12]
 8003998:	f000 f87c 	bl	8003a94 <_printf_i>
 800399c:	e7ea      	b.n	8003974 <_svfiprintf_r+0x1c0>
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	080042a2 	.word	0x080042a2
 80039a4:	080042a8 	.word	0x080042a8
 80039a8:	080042ac 	.word	0x080042ac
 80039ac:	00000000 	.word	0x00000000
 80039b0:	080036f1 	.word	0x080036f1

080039b4 <_printf_common>:
 80039b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039b6:	0015      	movs	r5, r2
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	688a      	ldr	r2, [r1, #8]
 80039bc:	690b      	ldr	r3, [r1, #16]
 80039be:	000c      	movs	r4, r1
 80039c0:	9000      	str	r0, [sp, #0]
 80039c2:	4293      	cmp	r3, r2
 80039c4:	da00      	bge.n	80039c8 <_printf_common+0x14>
 80039c6:	0013      	movs	r3, r2
 80039c8:	0022      	movs	r2, r4
 80039ca:	602b      	str	r3, [r5, #0]
 80039cc:	3243      	adds	r2, #67	; 0x43
 80039ce:	7812      	ldrb	r2, [r2, #0]
 80039d0:	2a00      	cmp	r2, #0
 80039d2:	d001      	beq.n	80039d8 <_printf_common+0x24>
 80039d4:	3301      	adds	r3, #1
 80039d6:	602b      	str	r3, [r5, #0]
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	069b      	lsls	r3, r3, #26
 80039dc:	d502      	bpl.n	80039e4 <_printf_common+0x30>
 80039de:	682b      	ldr	r3, [r5, #0]
 80039e0:	3302      	adds	r3, #2
 80039e2:	602b      	str	r3, [r5, #0]
 80039e4:	6822      	ldr	r2, [r4, #0]
 80039e6:	2306      	movs	r3, #6
 80039e8:	0017      	movs	r7, r2
 80039ea:	401f      	ands	r7, r3
 80039ec:	421a      	tst	r2, r3
 80039ee:	d027      	beq.n	8003a40 <_printf_common+0x8c>
 80039f0:	0023      	movs	r3, r4
 80039f2:	3343      	adds	r3, #67	; 0x43
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	1e5a      	subs	r2, r3, #1
 80039f8:	4193      	sbcs	r3, r2
 80039fa:	6822      	ldr	r2, [r4, #0]
 80039fc:	0692      	lsls	r2, r2, #26
 80039fe:	d430      	bmi.n	8003a62 <_printf_common+0xae>
 8003a00:	0022      	movs	r2, r4
 8003a02:	9901      	ldr	r1, [sp, #4]
 8003a04:	9800      	ldr	r0, [sp, #0]
 8003a06:	9e08      	ldr	r6, [sp, #32]
 8003a08:	3243      	adds	r2, #67	; 0x43
 8003a0a:	47b0      	blx	r6
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d025      	beq.n	8003a5c <_printf_common+0xa8>
 8003a10:	2306      	movs	r3, #6
 8003a12:	6820      	ldr	r0, [r4, #0]
 8003a14:	682a      	ldr	r2, [r5, #0]
 8003a16:	68e1      	ldr	r1, [r4, #12]
 8003a18:	2500      	movs	r5, #0
 8003a1a:	4003      	ands	r3, r0
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d103      	bne.n	8003a28 <_printf_common+0x74>
 8003a20:	1a8d      	subs	r5, r1, r2
 8003a22:	43eb      	mvns	r3, r5
 8003a24:	17db      	asrs	r3, r3, #31
 8003a26:	401d      	ands	r5, r3
 8003a28:	68a3      	ldr	r3, [r4, #8]
 8003a2a:	6922      	ldr	r2, [r4, #16]
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	dd01      	ble.n	8003a34 <_printf_common+0x80>
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	18ed      	adds	r5, r5, r3
 8003a34:	2700      	movs	r7, #0
 8003a36:	42bd      	cmp	r5, r7
 8003a38:	d120      	bne.n	8003a7c <_printf_common+0xc8>
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	e010      	b.n	8003a60 <_printf_common+0xac>
 8003a3e:	3701      	adds	r7, #1
 8003a40:	68e3      	ldr	r3, [r4, #12]
 8003a42:	682a      	ldr	r2, [r5, #0]
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	42bb      	cmp	r3, r7
 8003a48:	ddd2      	ble.n	80039f0 <_printf_common+0x3c>
 8003a4a:	0022      	movs	r2, r4
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	9901      	ldr	r1, [sp, #4]
 8003a50:	9800      	ldr	r0, [sp, #0]
 8003a52:	9e08      	ldr	r6, [sp, #32]
 8003a54:	3219      	adds	r2, #25
 8003a56:	47b0      	blx	r6
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d1f0      	bne.n	8003a3e <_printf_common+0x8a>
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	4240      	negs	r0, r0
 8003a60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a62:	2030      	movs	r0, #48	; 0x30
 8003a64:	18e1      	adds	r1, r4, r3
 8003a66:	3143      	adds	r1, #67	; 0x43
 8003a68:	7008      	strb	r0, [r1, #0]
 8003a6a:	0021      	movs	r1, r4
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	3145      	adds	r1, #69	; 0x45
 8003a70:	7809      	ldrb	r1, [r1, #0]
 8003a72:	18a2      	adds	r2, r4, r2
 8003a74:	3243      	adds	r2, #67	; 0x43
 8003a76:	3302      	adds	r3, #2
 8003a78:	7011      	strb	r1, [r2, #0]
 8003a7a:	e7c1      	b.n	8003a00 <_printf_common+0x4c>
 8003a7c:	0022      	movs	r2, r4
 8003a7e:	2301      	movs	r3, #1
 8003a80:	9901      	ldr	r1, [sp, #4]
 8003a82:	9800      	ldr	r0, [sp, #0]
 8003a84:	9e08      	ldr	r6, [sp, #32]
 8003a86:	321a      	adds	r2, #26
 8003a88:	47b0      	blx	r6
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	d0e6      	beq.n	8003a5c <_printf_common+0xa8>
 8003a8e:	3701      	adds	r7, #1
 8003a90:	e7d1      	b.n	8003a36 <_printf_common+0x82>
	...

08003a94 <_printf_i>:
 8003a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a96:	b08b      	sub	sp, #44	; 0x2c
 8003a98:	9206      	str	r2, [sp, #24]
 8003a9a:	000a      	movs	r2, r1
 8003a9c:	3243      	adds	r2, #67	; 0x43
 8003a9e:	9307      	str	r3, [sp, #28]
 8003aa0:	9005      	str	r0, [sp, #20]
 8003aa2:	9204      	str	r2, [sp, #16]
 8003aa4:	7e0a      	ldrb	r2, [r1, #24]
 8003aa6:	000c      	movs	r4, r1
 8003aa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003aaa:	2a78      	cmp	r2, #120	; 0x78
 8003aac:	d807      	bhi.n	8003abe <_printf_i+0x2a>
 8003aae:	2a62      	cmp	r2, #98	; 0x62
 8003ab0:	d809      	bhi.n	8003ac6 <_printf_i+0x32>
 8003ab2:	2a00      	cmp	r2, #0
 8003ab4:	d100      	bne.n	8003ab8 <_printf_i+0x24>
 8003ab6:	e0c1      	b.n	8003c3c <_printf_i+0x1a8>
 8003ab8:	2a58      	cmp	r2, #88	; 0x58
 8003aba:	d100      	bne.n	8003abe <_printf_i+0x2a>
 8003abc:	e08c      	b.n	8003bd8 <_printf_i+0x144>
 8003abe:	0026      	movs	r6, r4
 8003ac0:	3642      	adds	r6, #66	; 0x42
 8003ac2:	7032      	strb	r2, [r6, #0]
 8003ac4:	e022      	b.n	8003b0c <_printf_i+0x78>
 8003ac6:	0010      	movs	r0, r2
 8003ac8:	3863      	subs	r0, #99	; 0x63
 8003aca:	2815      	cmp	r0, #21
 8003acc:	d8f7      	bhi.n	8003abe <_printf_i+0x2a>
 8003ace:	f7fc fb2d 	bl	800012c <__gnu_thumb1_case_shi>
 8003ad2:	0016      	.short	0x0016
 8003ad4:	fff6001f 	.word	0xfff6001f
 8003ad8:	fff6fff6 	.word	0xfff6fff6
 8003adc:	001ffff6 	.word	0x001ffff6
 8003ae0:	fff6fff6 	.word	0xfff6fff6
 8003ae4:	fff6fff6 	.word	0xfff6fff6
 8003ae8:	003600a8 	.word	0x003600a8
 8003aec:	fff6009a 	.word	0xfff6009a
 8003af0:	00b9fff6 	.word	0x00b9fff6
 8003af4:	0036fff6 	.word	0x0036fff6
 8003af8:	fff6fff6 	.word	0xfff6fff6
 8003afc:	009e      	.short	0x009e
 8003afe:	0026      	movs	r6, r4
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	3642      	adds	r6, #66	; 0x42
 8003b04:	1d11      	adds	r1, r2, #4
 8003b06:	6019      	str	r1, [r3, #0]
 8003b08:	6813      	ldr	r3, [r2, #0]
 8003b0a:	7033      	strb	r3, [r6, #0]
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0a7      	b.n	8003c60 <_printf_i+0x1cc>
 8003b10:	6808      	ldr	r0, [r1, #0]
 8003b12:	6819      	ldr	r1, [r3, #0]
 8003b14:	1d0a      	adds	r2, r1, #4
 8003b16:	0605      	lsls	r5, r0, #24
 8003b18:	d50b      	bpl.n	8003b32 <_printf_i+0x9e>
 8003b1a:	680d      	ldr	r5, [r1, #0]
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	2d00      	cmp	r5, #0
 8003b20:	da03      	bge.n	8003b2a <_printf_i+0x96>
 8003b22:	232d      	movs	r3, #45	; 0x2d
 8003b24:	9a04      	ldr	r2, [sp, #16]
 8003b26:	426d      	negs	r5, r5
 8003b28:	7013      	strb	r3, [r2, #0]
 8003b2a:	4b61      	ldr	r3, [pc, #388]	; (8003cb0 <_printf_i+0x21c>)
 8003b2c:	270a      	movs	r7, #10
 8003b2e:	9303      	str	r3, [sp, #12]
 8003b30:	e01b      	b.n	8003b6a <_printf_i+0xd6>
 8003b32:	680d      	ldr	r5, [r1, #0]
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	0641      	lsls	r1, r0, #25
 8003b38:	d5f1      	bpl.n	8003b1e <_printf_i+0x8a>
 8003b3a:	b22d      	sxth	r5, r5
 8003b3c:	e7ef      	b.n	8003b1e <_printf_i+0x8a>
 8003b3e:	680d      	ldr	r5, [r1, #0]
 8003b40:	6819      	ldr	r1, [r3, #0]
 8003b42:	1d08      	adds	r0, r1, #4
 8003b44:	6018      	str	r0, [r3, #0]
 8003b46:	062e      	lsls	r6, r5, #24
 8003b48:	d501      	bpl.n	8003b4e <_printf_i+0xba>
 8003b4a:	680d      	ldr	r5, [r1, #0]
 8003b4c:	e003      	b.n	8003b56 <_printf_i+0xc2>
 8003b4e:	066d      	lsls	r5, r5, #25
 8003b50:	d5fb      	bpl.n	8003b4a <_printf_i+0xb6>
 8003b52:	680d      	ldr	r5, [r1, #0]
 8003b54:	b2ad      	uxth	r5, r5
 8003b56:	4b56      	ldr	r3, [pc, #344]	; (8003cb0 <_printf_i+0x21c>)
 8003b58:	2708      	movs	r7, #8
 8003b5a:	9303      	str	r3, [sp, #12]
 8003b5c:	2a6f      	cmp	r2, #111	; 0x6f
 8003b5e:	d000      	beq.n	8003b62 <_printf_i+0xce>
 8003b60:	3702      	adds	r7, #2
 8003b62:	0023      	movs	r3, r4
 8003b64:	2200      	movs	r2, #0
 8003b66:	3343      	adds	r3, #67	; 0x43
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	6863      	ldr	r3, [r4, #4]
 8003b6c:	60a3      	str	r3, [r4, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	db03      	blt.n	8003b7a <_printf_i+0xe6>
 8003b72:	2204      	movs	r2, #4
 8003b74:	6821      	ldr	r1, [r4, #0]
 8003b76:	4391      	bics	r1, r2
 8003b78:	6021      	str	r1, [r4, #0]
 8003b7a:	2d00      	cmp	r5, #0
 8003b7c:	d102      	bne.n	8003b84 <_printf_i+0xf0>
 8003b7e:	9e04      	ldr	r6, [sp, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00c      	beq.n	8003b9e <_printf_i+0x10a>
 8003b84:	9e04      	ldr	r6, [sp, #16]
 8003b86:	0028      	movs	r0, r5
 8003b88:	0039      	movs	r1, r7
 8003b8a:	f7fc fb5f 	bl	800024c <__aeabi_uidivmod>
 8003b8e:	9b03      	ldr	r3, [sp, #12]
 8003b90:	3e01      	subs	r6, #1
 8003b92:	5c5b      	ldrb	r3, [r3, r1]
 8003b94:	7033      	strb	r3, [r6, #0]
 8003b96:	002b      	movs	r3, r5
 8003b98:	0005      	movs	r5, r0
 8003b9a:	429f      	cmp	r7, r3
 8003b9c:	d9f3      	bls.n	8003b86 <_printf_i+0xf2>
 8003b9e:	2f08      	cmp	r7, #8
 8003ba0:	d109      	bne.n	8003bb6 <_printf_i+0x122>
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	07db      	lsls	r3, r3, #31
 8003ba6:	d506      	bpl.n	8003bb6 <_printf_i+0x122>
 8003ba8:	6863      	ldr	r3, [r4, #4]
 8003baa:	6922      	ldr	r2, [r4, #16]
 8003bac:	4293      	cmp	r3, r2
 8003bae:	dc02      	bgt.n	8003bb6 <_printf_i+0x122>
 8003bb0:	2330      	movs	r3, #48	; 0x30
 8003bb2:	3e01      	subs	r6, #1
 8003bb4:	7033      	strb	r3, [r6, #0]
 8003bb6:	9b04      	ldr	r3, [sp, #16]
 8003bb8:	1b9b      	subs	r3, r3, r6
 8003bba:	6123      	str	r3, [r4, #16]
 8003bbc:	9b07      	ldr	r3, [sp, #28]
 8003bbe:	0021      	movs	r1, r4
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	9805      	ldr	r0, [sp, #20]
 8003bc4:	9b06      	ldr	r3, [sp, #24]
 8003bc6:	aa09      	add	r2, sp, #36	; 0x24
 8003bc8:	f7ff fef4 	bl	80039b4 <_printf_common>
 8003bcc:	1c43      	adds	r3, r0, #1
 8003bce:	d14c      	bne.n	8003c6a <_printf_i+0x1d6>
 8003bd0:	2001      	movs	r0, #1
 8003bd2:	4240      	negs	r0, r0
 8003bd4:	b00b      	add	sp, #44	; 0x2c
 8003bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd8:	3145      	adds	r1, #69	; 0x45
 8003bda:	700a      	strb	r2, [r1, #0]
 8003bdc:	4a34      	ldr	r2, [pc, #208]	; (8003cb0 <_printf_i+0x21c>)
 8003bde:	9203      	str	r2, [sp, #12]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	6821      	ldr	r1, [r4, #0]
 8003be4:	ca20      	ldmia	r2!, {r5}
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	0608      	lsls	r0, r1, #24
 8003bea:	d516      	bpl.n	8003c1a <_printf_i+0x186>
 8003bec:	07cb      	lsls	r3, r1, #31
 8003bee:	d502      	bpl.n	8003bf6 <_printf_i+0x162>
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	4319      	orrs	r1, r3
 8003bf4:	6021      	str	r1, [r4, #0]
 8003bf6:	2710      	movs	r7, #16
 8003bf8:	2d00      	cmp	r5, #0
 8003bfa:	d1b2      	bne.n	8003b62 <_printf_i+0xce>
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	6822      	ldr	r2, [r4, #0]
 8003c00:	439a      	bics	r2, r3
 8003c02:	6022      	str	r2, [r4, #0]
 8003c04:	e7ad      	b.n	8003b62 <_printf_i+0xce>
 8003c06:	2220      	movs	r2, #32
 8003c08:	6809      	ldr	r1, [r1, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	6022      	str	r2, [r4, #0]
 8003c0e:	0022      	movs	r2, r4
 8003c10:	2178      	movs	r1, #120	; 0x78
 8003c12:	3245      	adds	r2, #69	; 0x45
 8003c14:	7011      	strb	r1, [r2, #0]
 8003c16:	4a27      	ldr	r2, [pc, #156]	; (8003cb4 <_printf_i+0x220>)
 8003c18:	e7e1      	b.n	8003bde <_printf_i+0x14a>
 8003c1a:	0648      	lsls	r0, r1, #25
 8003c1c:	d5e6      	bpl.n	8003bec <_printf_i+0x158>
 8003c1e:	b2ad      	uxth	r5, r5
 8003c20:	e7e4      	b.n	8003bec <_printf_i+0x158>
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	680d      	ldr	r5, [r1, #0]
 8003c26:	1d10      	adds	r0, r2, #4
 8003c28:	6949      	ldr	r1, [r1, #20]
 8003c2a:	6018      	str	r0, [r3, #0]
 8003c2c:	6813      	ldr	r3, [r2, #0]
 8003c2e:	062e      	lsls	r6, r5, #24
 8003c30:	d501      	bpl.n	8003c36 <_printf_i+0x1a2>
 8003c32:	6019      	str	r1, [r3, #0]
 8003c34:	e002      	b.n	8003c3c <_printf_i+0x1a8>
 8003c36:	066d      	lsls	r5, r5, #25
 8003c38:	d5fb      	bpl.n	8003c32 <_printf_i+0x19e>
 8003c3a:	8019      	strh	r1, [r3, #0]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	9e04      	ldr	r6, [sp, #16]
 8003c40:	6123      	str	r3, [r4, #16]
 8003c42:	e7bb      	b.n	8003bbc <_printf_i+0x128>
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	1d11      	adds	r1, r2, #4
 8003c48:	6019      	str	r1, [r3, #0]
 8003c4a:	6816      	ldr	r6, [r2, #0]
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	0030      	movs	r0, r6
 8003c50:	6862      	ldr	r2, [r4, #4]
 8003c52:	f000 f831 	bl	8003cb8 <memchr>
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d001      	beq.n	8003c5e <_printf_i+0x1ca>
 8003c5a:	1b80      	subs	r0, r0, r6
 8003c5c:	6060      	str	r0, [r4, #4]
 8003c5e:	6863      	ldr	r3, [r4, #4]
 8003c60:	6123      	str	r3, [r4, #16]
 8003c62:	2300      	movs	r3, #0
 8003c64:	9a04      	ldr	r2, [sp, #16]
 8003c66:	7013      	strb	r3, [r2, #0]
 8003c68:	e7a8      	b.n	8003bbc <_printf_i+0x128>
 8003c6a:	6923      	ldr	r3, [r4, #16]
 8003c6c:	0032      	movs	r2, r6
 8003c6e:	9906      	ldr	r1, [sp, #24]
 8003c70:	9805      	ldr	r0, [sp, #20]
 8003c72:	9d07      	ldr	r5, [sp, #28]
 8003c74:	47a8      	blx	r5
 8003c76:	1c43      	adds	r3, r0, #1
 8003c78:	d0aa      	beq.n	8003bd0 <_printf_i+0x13c>
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	079b      	lsls	r3, r3, #30
 8003c7e:	d415      	bmi.n	8003cac <_printf_i+0x218>
 8003c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c82:	68e0      	ldr	r0, [r4, #12]
 8003c84:	4298      	cmp	r0, r3
 8003c86:	daa5      	bge.n	8003bd4 <_printf_i+0x140>
 8003c88:	0018      	movs	r0, r3
 8003c8a:	e7a3      	b.n	8003bd4 <_printf_i+0x140>
 8003c8c:	0022      	movs	r2, r4
 8003c8e:	2301      	movs	r3, #1
 8003c90:	9906      	ldr	r1, [sp, #24]
 8003c92:	9805      	ldr	r0, [sp, #20]
 8003c94:	9e07      	ldr	r6, [sp, #28]
 8003c96:	3219      	adds	r2, #25
 8003c98:	47b0      	blx	r6
 8003c9a:	1c43      	adds	r3, r0, #1
 8003c9c:	d098      	beq.n	8003bd0 <_printf_i+0x13c>
 8003c9e:	3501      	adds	r5, #1
 8003ca0:	68e3      	ldr	r3, [r4, #12]
 8003ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	42ab      	cmp	r3, r5
 8003ca8:	dcf0      	bgt.n	8003c8c <_printf_i+0x1f8>
 8003caa:	e7e9      	b.n	8003c80 <_printf_i+0x1ec>
 8003cac:	2500      	movs	r5, #0
 8003cae:	e7f7      	b.n	8003ca0 <_printf_i+0x20c>
 8003cb0:	080042b3 	.word	0x080042b3
 8003cb4:	080042c4 	.word	0x080042c4

08003cb8 <memchr>:
 8003cb8:	b2c9      	uxtb	r1, r1
 8003cba:	1882      	adds	r2, r0, r2
 8003cbc:	4290      	cmp	r0, r2
 8003cbe:	d101      	bne.n	8003cc4 <memchr+0xc>
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	4770      	bx	lr
 8003cc4:	7803      	ldrb	r3, [r0, #0]
 8003cc6:	428b      	cmp	r3, r1
 8003cc8:	d0fb      	beq.n	8003cc2 <memchr+0xa>
 8003cca:	3001      	adds	r0, #1
 8003ccc:	e7f6      	b.n	8003cbc <memchr+0x4>
	...

08003cd0 <_free_r>:
 8003cd0:	b570      	push	{r4, r5, r6, lr}
 8003cd2:	0005      	movs	r5, r0
 8003cd4:	2900      	cmp	r1, #0
 8003cd6:	d010      	beq.n	8003cfa <_free_r+0x2a>
 8003cd8:	1f0c      	subs	r4, r1, #4
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	da00      	bge.n	8003ce2 <_free_r+0x12>
 8003ce0:	18e4      	adds	r4, r4, r3
 8003ce2:	0028      	movs	r0, r5
 8003ce4:	f000 f918 	bl	8003f18 <__malloc_lock>
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <_free_r+0x90>)
 8003cea:	6813      	ldr	r3, [r2, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d105      	bne.n	8003cfc <_free_r+0x2c>
 8003cf0:	6063      	str	r3, [r4, #4]
 8003cf2:	6014      	str	r4, [r2, #0]
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	f000 f917 	bl	8003f28 <__malloc_unlock>
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}
 8003cfc:	42a3      	cmp	r3, r4
 8003cfe:	d908      	bls.n	8003d12 <_free_r+0x42>
 8003d00:	6821      	ldr	r1, [r4, #0]
 8003d02:	1860      	adds	r0, r4, r1
 8003d04:	4283      	cmp	r3, r0
 8003d06:	d1f3      	bne.n	8003cf0 <_free_r+0x20>
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	1841      	adds	r1, r0, r1
 8003d0e:	6021      	str	r1, [r4, #0]
 8003d10:	e7ee      	b.n	8003cf0 <_free_r+0x20>
 8003d12:	001a      	movs	r2, r3
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <_free_r+0x4e>
 8003d1a:	42a3      	cmp	r3, r4
 8003d1c:	d9f9      	bls.n	8003d12 <_free_r+0x42>
 8003d1e:	6811      	ldr	r1, [r2, #0]
 8003d20:	1850      	adds	r0, r2, r1
 8003d22:	42a0      	cmp	r0, r4
 8003d24:	d10b      	bne.n	8003d3e <_free_r+0x6e>
 8003d26:	6820      	ldr	r0, [r4, #0]
 8003d28:	1809      	adds	r1, r1, r0
 8003d2a:	1850      	adds	r0, r2, r1
 8003d2c:	6011      	str	r1, [r2, #0]
 8003d2e:	4283      	cmp	r3, r0
 8003d30:	d1e0      	bne.n	8003cf4 <_free_r+0x24>
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	1841      	adds	r1, r0, r1
 8003d38:	6011      	str	r1, [r2, #0]
 8003d3a:	6053      	str	r3, [r2, #4]
 8003d3c:	e7da      	b.n	8003cf4 <_free_r+0x24>
 8003d3e:	42a0      	cmp	r0, r4
 8003d40:	d902      	bls.n	8003d48 <_free_r+0x78>
 8003d42:	230c      	movs	r3, #12
 8003d44:	602b      	str	r3, [r5, #0]
 8003d46:	e7d5      	b.n	8003cf4 <_free_r+0x24>
 8003d48:	6821      	ldr	r1, [r4, #0]
 8003d4a:	1860      	adds	r0, r4, r1
 8003d4c:	4283      	cmp	r3, r0
 8003d4e:	d103      	bne.n	8003d58 <_free_r+0x88>
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	1841      	adds	r1, r0, r1
 8003d56:	6021      	str	r1, [r4, #0]
 8003d58:	6063      	str	r3, [r4, #4]
 8003d5a:	6054      	str	r4, [r2, #4]
 8003d5c:	e7ca      	b.n	8003cf4 <_free_r+0x24>
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	20000380 	.word	0x20000380

08003d64 <sbrk_aligned>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	4e0f      	ldr	r6, [pc, #60]	; (8003da4 <sbrk_aligned+0x40>)
 8003d68:	000d      	movs	r5, r1
 8003d6a:	6831      	ldr	r1, [r6, #0]
 8003d6c:	0004      	movs	r4, r0
 8003d6e:	2900      	cmp	r1, #0
 8003d70:	d102      	bne.n	8003d78 <sbrk_aligned+0x14>
 8003d72:	f000 f8bf 	bl	8003ef4 <_sbrk_r>
 8003d76:	6030      	str	r0, [r6, #0]
 8003d78:	0029      	movs	r1, r5
 8003d7a:	0020      	movs	r0, r4
 8003d7c:	f000 f8ba 	bl	8003ef4 <_sbrk_r>
 8003d80:	1c43      	adds	r3, r0, #1
 8003d82:	d00a      	beq.n	8003d9a <sbrk_aligned+0x36>
 8003d84:	2303      	movs	r3, #3
 8003d86:	1cc5      	adds	r5, r0, #3
 8003d88:	439d      	bics	r5, r3
 8003d8a:	42a8      	cmp	r0, r5
 8003d8c:	d007      	beq.n	8003d9e <sbrk_aligned+0x3a>
 8003d8e:	1a29      	subs	r1, r5, r0
 8003d90:	0020      	movs	r0, r4
 8003d92:	f000 f8af 	bl	8003ef4 <_sbrk_r>
 8003d96:	1c43      	adds	r3, r0, #1
 8003d98:	d101      	bne.n	8003d9e <sbrk_aligned+0x3a>
 8003d9a:	2501      	movs	r5, #1
 8003d9c:	426d      	negs	r5, r5
 8003d9e:	0028      	movs	r0, r5
 8003da0:	bd70      	pop	{r4, r5, r6, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	20000384 	.word	0x20000384

08003da8 <_malloc_r>:
 8003da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003daa:	2203      	movs	r2, #3
 8003dac:	1ccb      	adds	r3, r1, #3
 8003dae:	4393      	bics	r3, r2
 8003db0:	3308      	adds	r3, #8
 8003db2:	0006      	movs	r6, r0
 8003db4:	001f      	movs	r7, r3
 8003db6:	2b0c      	cmp	r3, #12
 8003db8:	d232      	bcs.n	8003e20 <_malloc_r+0x78>
 8003dba:	270c      	movs	r7, #12
 8003dbc:	42b9      	cmp	r1, r7
 8003dbe:	d831      	bhi.n	8003e24 <_malloc_r+0x7c>
 8003dc0:	0030      	movs	r0, r6
 8003dc2:	f000 f8a9 	bl	8003f18 <__malloc_lock>
 8003dc6:	4d32      	ldr	r5, [pc, #200]	; (8003e90 <_malloc_r+0xe8>)
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	001c      	movs	r4, r3
 8003dcc:	2c00      	cmp	r4, #0
 8003dce:	d12e      	bne.n	8003e2e <_malloc_r+0x86>
 8003dd0:	0039      	movs	r1, r7
 8003dd2:	0030      	movs	r0, r6
 8003dd4:	f7ff ffc6 	bl	8003d64 <sbrk_aligned>
 8003dd8:	0004      	movs	r4, r0
 8003dda:	1c43      	adds	r3, r0, #1
 8003ddc:	d11e      	bne.n	8003e1c <_malloc_r+0x74>
 8003dde:	682c      	ldr	r4, [r5, #0]
 8003de0:	0025      	movs	r5, r4
 8003de2:	2d00      	cmp	r5, #0
 8003de4:	d14a      	bne.n	8003e7c <_malloc_r+0xd4>
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	0029      	movs	r1, r5
 8003dea:	18e3      	adds	r3, r4, r3
 8003dec:	0030      	movs	r0, r6
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	f000 f880 	bl	8003ef4 <_sbrk_r>
 8003df4:	9b01      	ldr	r3, [sp, #4]
 8003df6:	4283      	cmp	r3, r0
 8003df8:	d143      	bne.n	8003e82 <_malloc_r+0xda>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	3703      	adds	r7, #3
 8003dfe:	1aff      	subs	r7, r7, r3
 8003e00:	2303      	movs	r3, #3
 8003e02:	439f      	bics	r7, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	2f0c      	cmp	r7, #12
 8003e08:	d200      	bcs.n	8003e0c <_malloc_r+0x64>
 8003e0a:	270c      	movs	r7, #12
 8003e0c:	0039      	movs	r1, r7
 8003e0e:	0030      	movs	r0, r6
 8003e10:	f7ff ffa8 	bl	8003d64 <sbrk_aligned>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d034      	beq.n	8003e82 <_malloc_r+0xda>
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	19df      	adds	r7, r3, r7
 8003e1c:	6027      	str	r7, [r4, #0]
 8003e1e:	e013      	b.n	8003e48 <_malloc_r+0xa0>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	dacb      	bge.n	8003dbc <_malloc_r+0x14>
 8003e24:	230c      	movs	r3, #12
 8003e26:	2500      	movs	r5, #0
 8003e28:	6033      	str	r3, [r6, #0]
 8003e2a:	0028      	movs	r0, r5
 8003e2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e2e:	6822      	ldr	r2, [r4, #0]
 8003e30:	1bd1      	subs	r1, r2, r7
 8003e32:	d420      	bmi.n	8003e76 <_malloc_r+0xce>
 8003e34:	290b      	cmp	r1, #11
 8003e36:	d917      	bls.n	8003e68 <_malloc_r+0xc0>
 8003e38:	19e2      	adds	r2, r4, r7
 8003e3a:	6027      	str	r7, [r4, #0]
 8003e3c:	42a3      	cmp	r3, r4
 8003e3e:	d111      	bne.n	8003e64 <_malloc_r+0xbc>
 8003e40:	602a      	str	r2, [r5, #0]
 8003e42:	6863      	ldr	r3, [r4, #4]
 8003e44:	6011      	str	r1, [r2, #0]
 8003e46:	6053      	str	r3, [r2, #4]
 8003e48:	0030      	movs	r0, r6
 8003e4a:	0025      	movs	r5, r4
 8003e4c:	f000 f86c 	bl	8003f28 <__malloc_unlock>
 8003e50:	2207      	movs	r2, #7
 8003e52:	350b      	adds	r5, #11
 8003e54:	1d23      	adds	r3, r4, #4
 8003e56:	4395      	bics	r5, r2
 8003e58:	1aea      	subs	r2, r5, r3
 8003e5a:	429d      	cmp	r5, r3
 8003e5c:	d0e5      	beq.n	8003e2a <_malloc_r+0x82>
 8003e5e:	1b5b      	subs	r3, r3, r5
 8003e60:	50a3      	str	r3, [r4, r2]
 8003e62:	e7e2      	b.n	8003e2a <_malloc_r+0x82>
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	e7ec      	b.n	8003e42 <_malloc_r+0x9a>
 8003e68:	6862      	ldr	r2, [r4, #4]
 8003e6a:	42a3      	cmp	r3, r4
 8003e6c:	d101      	bne.n	8003e72 <_malloc_r+0xca>
 8003e6e:	602a      	str	r2, [r5, #0]
 8003e70:	e7ea      	b.n	8003e48 <_malloc_r+0xa0>
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	e7e8      	b.n	8003e48 <_malloc_r+0xa0>
 8003e76:	0023      	movs	r3, r4
 8003e78:	6864      	ldr	r4, [r4, #4]
 8003e7a:	e7a7      	b.n	8003dcc <_malloc_r+0x24>
 8003e7c:	002c      	movs	r4, r5
 8003e7e:	686d      	ldr	r5, [r5, #4]
 8003e80:	e7af      	b.n	8003de2 <_malloc_r+0x3a>
 8003e82:	230c      	movs	r3, #12
 8003e84:	0030      	movs	r0, r6
 8003e86:	6033      	str	r3, [r6, #0]
 8003e88:	f000 f84e 	bl	8003f28 <__malloc_unlock>
 8003e8c:	e7cd      	b.n	8003e2a <_malloc_r+0x82>
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	20000380 	.word	0x20000380

08003e94 <_realloc_r>:
 8003e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e96:	0007      	movs	r7, r0
 8003e98:	000e      	movs	r6, r1
 8003e9a:	0014      	movs	r4, r2
 8003e9c:	2900      	cmp	r1, #0
 8003e9e:	d105      	bne.n	8003eac <_realloc_r+0x18>
 8003ea0:	0011      	movs	r1, r2
 8003ea2:	f7ff ff81 	bl	8003da8 <_malloc_r>
 8003ea6:	0005      	movs	r5, r0
 8003ea8:	0028      	movs	r0, r5
 8003eaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003eac:	2a00      	cmp	r2, #0
 8003eae:	d103      	bne.n	8003eb8 <_realloc_r+0x24>
 8003eb0:	f7ff ff0e 	bl	8003cd0 <_free_r>
 8003eb4:	0025      	movs	r5, r4
 8003eb6:	e7f7      	b.n	8003ea8 <_realloc_r+0x14>
 8003eb8:	f000 f83e 	bl	8003f38 <_malloc_usable_size_r>
 8003ebc:	9001      	str	r0, [sp, #4]
 8003ebe:	4284      	cmp	r4, r0
 8003ec0:	d803      	bhi.n	8003eca <_realloc_r+0x36>
 8003ec2:	0035      	movs	r5, r6
 8003ec4:	0843      	lsrs	r3, r0, #1
 8003ec6:	42a3      	cmp	r3, r4
 8003ec8:	d3ee      	bcc.n	8003ea8 <_realloc_r+0x14>
 8003eca:	0021      	movs	r1, r4
 8003ecc:	0038      	movs	r0, r7
 8003ece:	f7ff ff6b 	bl	8003da8 <_malloc_r>
 8003ed2:	1e05      	subs	r5, r0, #0
 8003ed4:	d0e8      	beq.n	8003ea8 <_realloc_r+0x14>
 8003ed6:	9b01      	ldr	r3, [sp, #4]
 8003ed8:	0022      	movs	r2, r4
 8003eda:	429c      	cmp	r4, r3
 8003edc:	d900      	bls.n	8003ee0 <_realloc_r+0x4c>
 8003ede:	001a      	movs	r2, r3
 8003ee0:	0031      	movs	r1, r6
 8003ee2:	0028      	movs	r0, r5
 8003ee4:	f7ff fbc0 	bl	8003668 <memcpy>
 8003ee8:	0031      	movs	r1, r6
 8003eea:	0038      	movs	r0, r7
 8003eec:	f7ff fef0 	bl	8003cd0 <_free_r>
 8003ef0:	e7da      	b.n	8003ea8 <_realloc_r+0x14>
	...

08003ef4 <_sbrk_r>:
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	b570      	push	{r4, r5, r6, lr}
 8003ef8:	4d06      	ldr	r5, [pc, #24]	; (8003f14 <_sbrk_r+0x20>)
 8003efa:	0004      	movs	r4, r0
 8003efc:	0008      	movs	r0, r1
 8003efe:	602b      	str	r3, [r5, #0]
 8003f00:	f7fd fca0 	bl	8001844 <_sbrk>
 8003f04:	1c43      	adds	r3, r0, #1
 8003f06:	d103      	bne.n	8003f10 <_sbrk_r+0x1c>
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d000      	beq.n	8003f10 <_sbrk_r+0x1c>
 8003f0e:	6023      	str	r3, [r4, #0]
 8003f10:	bd70      	pop	{r4, r5, r6, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	20000388 	.word	0x20000388

08003f18 <__malloc_lock>:
 8003f18:	b510      	push	{r4, lr}
 8003f1a:	4802      	ldr	r0, [pc, #8]	; (8003f24 <__malloc_lock+0xc>)
 8003f1c:	f000 f814 	bl	8003f48 <__retarget_lock_acquire_recursive>
 8003f20:	bd10      	pop	{r4, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	2000038c 	.word	0x2000038c

08003f28 <__malloc_unlock>:
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	4802      	ldr	r0, [pc, #8]	; (8003f34 <__malloc_unlock+0xc>)
 8003f2c:	f000 f80d 	bl	8003f4a <__retarget_lock_release_recursive>
 8003f30:	bd10      	pop	{r4, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	2000038c 	.word	0x2000038c

08003f38 <_malloc_usable_size_r>:
 8003f38:	1f0b      	subs	r3, r1, #4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	1f18      	subs	r0, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	da01      	bge.n	8003f46 <_malloc_usable_size_r+0xe>
 8003f42:	580b      	ldr	r3, [r1, r0]
 8003f44:	18c0      	adds	r0, r0, r3
 8003f46:	4770      	bx	lr

08003f48 <__retarget_lock_acquire_recursive>:
 8003f48:	4770      	bx	lr

08003f4a <__retarget_lock_release_recursive>:
 8003f4a:	4770      	bx	lr

08003f4c <_init>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr

08003f58 <_fini>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr
