
Target.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000480c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c4  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a90  08005a90  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a98  08005a98  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a98  08005a98  00015a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a9c  08005a9c  00015a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000001c  08005abc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08005abc  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016328  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290a  00000000  00000000  0003636c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000f84a  00000000  00000000  00038c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  000484c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015e0  00000000  00000000  00048e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013f9a  00000000  00000000  0004a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b4b  00000000  00000000  0005e37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007860b  00000000  00000000  00073ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ec4d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001be4  00000000  00000000  000ec520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080048b4 	.word	0x080048b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	080048b4 	.word	0x080048b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f9b9 	bl	80005a0 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f945 	bl	80004c8 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f9ab 	bl	80005a0 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f9a1 	bl	80005a0 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f951 	bl	8000514 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f947 	bl	8000514 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_uldivmod>:
 8000294:	2b00      	cmp	r3, #0
 8000296:	d111      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 8000298:	2a00      	cmp	r2, #0
 800029a:	d10f      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 800029c:	2900      	cmp	r1, #0
 800029e:	d100      	bne.n	80002a2 <__aeabi_uldivmod+0xe>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d002      	beq.n	80002aa <__aeabi_uldivmod+0x16>
 80002a4:	2100      	movs	r1, #0
 80002a6:	43c9      	mvns	r1, r1
 80002a8:	0008      	movs	r0, r1
 80002aa:	b407      	push	{r0, r1, r2}
 80002ac:	4802      	ldr	r0, [pc, #8]	; (80002b8 <__aeabi_uldivmod+0x24>)
 80002ae:	a102      	add	r1, pc, #8	; (adr r1, 80002b8 <__aeabi_uldivmod+0x24>)
 80002b0:	1840      	adds	r0, r0, r1
 80002b2:	9002      	str	r0, [sp, #8]
 80002b4:	bd03      	pop	{r0, r1, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	ffffff65 	.word	0xffffff65
 80002bc:	b403      	push	{r0, r1}
 80002be:	4668      	mov	r0, sp
 80002c0:	b501      	push	{r0, lr}
 80002c2:	9802      	ldr	r0, [sp, #8]
 80002c4:	f000 f834 	bl	8000330 <__udivmoddi4>
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	469e      	mov	lr, r3
 80002cc:	b002      	add	sp, #8
 80002ce:	bc0c      	pop	{r2, r3}
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_lmul>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	46ce      	mov	lr, r9
 80002d8:	4647      	mov	r7, r8
 80002da:	b580      	push	{r7, lr}
 80002dc:	0007      	movs	r7, r0
 80002de:	4699      	mov	r9, r3
 80002e0:	0c3b      	lsrs	r3, r7, #16
 80002e2:	469c      	mov	ip, r3
 80002e4:	0413      	lsls	r3, r2, #16
 80002e6:	0c1b      	lsrs	r3, r3, #16
 80002e8:	001d      	movs	r5, r3
 80002ea:	000e      	movs	r6, r1
 80002ec:	4661      	mov	r1, ip
 80002ee:	0400      	lsls	r0, r0, #16
 80002f0:	0c14      	lsrs	r4, r2, #16
 80002f2:	0c00      	lsrs	r0, r0, #16
 80002f4:	4345      	muls	r5, r0
 80002f6:	434b      	muls	r3, r1
 80002f8:	4360      	muls	r0, r4
 80002fa:	4361      	muls	r1, r4
 80002fc:	18c0      	adds	r0, r0, r3
 80002fe:	0c2c      	lsrs	r4, r5, #16
 8000300:	1820      	adds	r0, r4, r0
 8000302:	468c      	mov	ip, r1
 8000304:	4283      	cmp	r3, r0
 8000306:	d903      	bls.n	8000310 <__aeabi_lmul+0x3c>
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	025b      	lsls	r3, r3, #9
 800030c:	4698      	mov	r8, r3
 800030e:	44c4      	add	ip, r8
 8000310:	4649      	mov	r1, r9
 8000312:	4379      	muls	r1, r7
 8000314:	4372      	muls	r2, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	4463      	add	r3, ip
 800031a:	042d      	lsls	r5, r5, #16
 800031c:	0c2d      	lsrs	r5, r5, #16
 800031e:	18c9      	adds	r1, r1, r3
 8000320:	0400      	lsls	r0, r0, #16
 8000322:	1940      	adds	r0, r0, r5
 8000324:	1889      	adds	r1, r1, r2
 8000326:	bcc0      	pop	{r6, r7}
 8000328:	46b9      	mov	r9, r7
 800032a:	46b0      	mov	r8, r6
 800032c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032e:	46c0      	nop			; (mov r8, r8)

08000330 <__udivmoddi4>:
 8000330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000332:	4657      	mov	r7, sl
 8000334:	464e      	mov	r6, r9
 8000336:	4645      	mov	r5, r8
 8000338:	46de      	mov	lr, fp
 800033a:	b5e0      	push	{r5, r6, r7, lr}
 800033c:	0004      	movs	r4, r0
 800033e:	000d      	movs	r5, r1
 8000340:	4692      	mov	sl, r2
 8000342:	4699      	mov	r9, r3
 8000344:	b083      	sub	sp, #12
 8000346:	428b      	cmp	r3, r1
 8000348:	d830      	bhi.n	80003ac <__udivmoddi4+0x7c>
 800034a:	d02d      	beq.n	80003a8 <__udivmoddi4+0x78>
 800034c:	4649      	mov	r1, r9
 800034e:	4650      	mov	r0, sl
 8000350:	f000 f9d6 	bl	8000700 <__clzdi2>
 8000354:	0029      	movs	r1, r5
 8000356:	0006      	movs	r6, r0
 8000358:	0020      	movs	r0, r4
 800035a:	f000 f9d1 	bl	8000700 <__clzdi2>
 800035e:	1a33      	subs	r3, r6, r0
 8000360:	4698      	mov	r8, r3
 8000362:	3b20      	subs	r3, #32
 8000364:	469b      	mov	fp, r3
 8000366:	d433      	bmi.n	80003d0 <__udivmoddi4+0xa0>
 8000368:	465a      	mov	r2, fp
 800036a:	4653      	mov	r3, sl
 800036c:	4093      	lsls	r3, r2
 800036e:	4642      	mov	r2, r8
 8000370:	001f      	movs	r7, r3
 8000372:	4653      	mov	r3, sl
 8000374:	4093      	lsls	r3, r2
 8000376:	001e      	movs	r6, r3
 8000378:	42af      	cmp	r7, r5
 800037a:	d83a      	bhi.n	80003f2 <__udivmoddi4+0xc2>
 800037c:	42af      	cmp	r7, r5
 800037e:	d100      	bne.n	8000382 <__udivmoddi4+0x52>
 8000380:	e078      	b.n	8000474 <__udivmoddi4+0x144>
 8000382:	465b      	mov	r3, fp
 8000384:	1ba4      	subs	r4, r4, r6
 8000386:	41bd      	sbcs	r5, r7
 8000388:	2b00      	cmp	r3, #0
 800038a:	da00      	bge.n	800038e <__udivmoddi4+0x5e>
 800038c:	e075      	b.n	800047a <__udivmoddi4+0x14a>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	2301      	movs	r3, #1
 8000398:	465a      	mov	r2, fp
 800039a:	4093      	lsls	r3, r2
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	2301      	movs	r3, #1
 80003a0:	4642      	mov	r2, r8
 80003a2:	4093      	lsls	r3, r2
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	e028      	b.n	80003fa <__udivmoddi4+0xca>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	d9cf      	bls.n	800034c <__udivmoddi4+0x1c>
 80003ac:	2200      	movs	r2, #0
 80003ae:	2300      	movs	r3, #0
 80003b0:	9200      	str	r2, [sp, #0]
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <__udivmoddi4+0x8e>
 80003ba:	601c      	str	r4, [r3, #0]
 80003bc:	605d      	str	r5, [r3, #4]
 80003be:	9800      	ldr	r0, [sp, #0]
 80003c0:	9901      	ldr	r1, [sp, #4]
 80003c2:	b003      	add	sp, #12
 80003c4:	bcf0      	pop	{r4, r5, r6, r7}
 80003c6:	46bb      	mov	fp, r7
 80003c8:	46b2      	mov	sl, r6
 80003ca:	46a9      	mov	r9, r5
 80003cc:	46a0      	mov	r8, r4
 80003ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	4652      	mov	r2, sl
 80003d8:	40da      	lsrs	r2, r3
 80003da:	4641      	mov	r1, r8
 80003dc:	0013      	movs	r3, r2
 80003de:	464a      	mov	r2, r9
 80003e0:	408a      	lsls	r2, r1
 80003e2:	0017      	movs	r7, r2
 80003e4:	4642      	mov	r2, r8
 80003e6:	431f      	orrs	r7, r3
 80003e8:	4653      	mov	r3, sl
 80003ea:	4093      	lsls	r3, r2
 80003ec:	001e      	movs	r6, r3
 80003ee:	42af      	cmp	r7, r5
 80003f0:	d9c4      	bls.n	800037c <__udivmoddi4+0x4c>
 80003f2:	2200      	movs	r2, #0
 80003f4:	2300      	movs	r3, #0
 80003f6:	9200      	str	r2, [sp, #0]
 80003f8:	9301      	str	r3, [sp, #4]
 80003fa:	4643      	mov	r3, r8
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0d9      	beq.n	80003b4 <__udivmoddi4+0x84>
 8000400:	07fb      	lsls	r3, r7, #31
 8000402:	0872      	lsrs	r2, r6, #1
 8000404:	431a      	orrs	r2, r3
 8000406:	4646      	mov	r6, r8
 8000408:	087b      	lsrs	r3, r7, #1
 800040a:	e00e      	b.n	800042a <__udivmoddi4+0xfa>
 800040c:	42ab      	cmp	r3, r5
 800040e:	d101      	bne.n	8000414 <__udivmoddi4+0xe4>
 8000410:	42a2      	cmp	r2, r4
 8000412:	d80c      	bhi.n	800042e <__udivmoddi4+0xfe>
 8000414:	1aa4      	subs	r4, r4, r2
 8000416:	419d      	sbcs	r5, r3
 8000418:	2001      	movs	r0, #1
 800041a:	1924      	adds	r4, r4, r4
 800041c:	416d      	adcs	r5, r5
 800041e:	2100      	movs	r1, #0
 8000420:	3e01      	subs	r6, #1
 8000422:	1824      	adds	r4, r4, r0
 8000424:	414d      	adcs	r5, r1
 8000426:	2e00      	cmp	r6, #0
 8000428:	d006      	beq.n	8000438 <__udivmoddi4+0x108>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d9ee      	bls.n	800040c <__udivmoddi4+0xdc>
 800042e:	3e01      	subs	r6, #1
 8000430:	1924      	adds	r4, r4, r4
 8000432:	416d      	adcs	r5, r5
 8000434:	2e00      	cmp	r6, #0
 8000436:	d1f8      	bne.n	800042a <__udivmoddi4+0xfa>
 8000438:	9800      	ldr	r0, [sp, #0]
 800043a:	9901      	ldr	r1, [sp, #4]
 800043c:	465b      	mov	r3, fp
 800043e:	1900      	adds	r0, r0, r4
 8000440:	4169      	adcs	r1, r5
 8000442:	2b00      	cmp	r3, #0
 8000444:	db24      	blt.n	8000490 <__udivmoddi4+0x160>
 8000446:	002b      	movs	r3, r5
 8000448:	465a      	mov	r2, fp
 800044a:	4644      	mov	r4, r8
 800044c:	40d3      	lsrs	r3, r2
 800044e:	002a      	movs	r2, r5
 8000450:	40e2      	lsrs	r2, r4
 8000452:	001c      	movs	r4, r3
 8000454:	465b      	mov	r3, fp
 8000456:	0015      	movs	r5, r2
 8000458:	2b00      	cmp	r3, #0
 800045a:	db2a      	blt.n	80004b2 <__udivmoddi4+0x182>
 800045c:	0026      	movs	r6, r4
 800045e:	409e      	lsls	r6, r3
 8000460:	0033      	movs	r3, r6
 8000462:	0026      	movs	r6, r4
 8000464:	4647      	mov	r7, r8
 8000466:	40be      	lsls	r6, r7
 8000468:	0032      	movs	r2, r6
 800046a:	1a80      	subs	r0, r0, r2
 800046c:	4199      	sbcs	r1, r3
 800046e:	9000      	str	r0, [sp, #0]
 8000470:	9101      	str	r1, [sp, #4]
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x84>
 8000474:	42a3      	cmp	r3, r4
 8000476:	d8bc      	bhi.n	80003f2 <__udivmoddi4+0xc2>
 8000478:	e783      	b.n	8000382 <__udivmoddi4+0x52>
 800047a:	4642      	mov	r2, r8
 800047c:	2320      	movs	r3, #32
 800047e:	2100      	movs	r1, #0
 8000480:	1a9b      	subs	r3, r3, r2
 8000482:	2200      	movs	r2, #0
 8000484:	9100      	str	r1, [sp, #0]
 8000486:	9201      	str	r2, [sp, #4]
 8000488:	2201      	movs	r2, #1
 800048a:	40da      	lsrs	r2, r3
 800048c:	9201      	str	r2, [sp, #4]
 800048e:	e786      	b.n	800039e <__udivmoddi4+0x6e>
 8000490:	4642      	mov	r2, r8
 8000492:	2320      	movs	r3, #32
 8000494:	1a9b      	subs	r3, r3, r2
 8000496:	002a      	movs	r2, r5
 8000498:	4646      	mov	r6, r8
 800049a:	409a      	lsls	r2, r3
 800049c:	0023      	movs	r3, r4
 800049e:	40f3      	lsrs	r3, r6
 80004a0:	4644      	mov	r4, r8
 80004a2:	4313      	orrs	r3, r2
 80004a4:	002a      	movs	r2, r5
 80004a6:	40e2      	lsrs	r2, r4
 80004a8:	001c      	movs	r4, r3
 80004aa:	465b      	mov	r3, fp
 80004ac:	0015      	movs	r5, r2
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	dad4      	bge.n	800045c <__udivmoddi4+0x12c>
 80004b2:	4642      	mov	r2, r8
 80004b4:	002f      	movs	r7, r5
 80004b6:	2320      	movs	r3, #32
 80004b8:	0026      	movs	r6, r4
 80004ba:	4097      	lsls	r7, r2
 80004bc:	1a9b      	subs	r3, r3, r2
 80004be:	40de      	lsrs	r6, r3
 80004c0:	003b      	movs	r3, r7
 80004c2:	4333      	orrs	r3, r6
 80004c4:	e7cd      	b.n	8000462 <__udivmoddi4+0x132>
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__eqsf2>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	0042      	lsls	r2, r0, #1
 80004cc:	0245      	lsls	r5, r0, #9
 80004ce:	024e      	lsls	r6, r1, #9
 80004d0:	004c      	lsls	r4, r1, #1
 80004d2:	0fc3      	lsrs	r3, r0, #31
 80004d4:	0a6d      	lsrs	r5, r5, #9
 80004d6:	2001      	movs	r0, #1
 80004d8:	0e12      	lsrs	r2, r2, #24
 80004da:	0a76      	lsrs	r6, r6, #9
 80004dc:	0e24      	lsrs	r4, r4, #24
 80004de:	0fc9      	lsrs	r1, r1, #31
 80004e0:	2aff      	cmp	r2, #255	; 0xff
 80004e2:	d006      	beq.n	80004f2 <__eqsf2+0x2a>
 80004e4:	2cff      	cmp	r4, #255	; 0xff
 80004e6:	d003      	beq.n	80004f0 <__eqsf2+0x28>
 80004e8:	42a2      	cmp	r2, r4
 80004ea:	d101      	bne.n	80004f0 <__eqsf2+0x28>
 80004ec:	42b5      	cmp	r5, r6
 80004ee:	d006      	beq.n	80004fe <__eqsf2+0x36>
 80004f0:	bd70      	pop	{r4, r5, r6, pc}
 80004f2:	2d00      	cmp	r5, #0
 80004f4:	d1fc      	bne.n	80004f0 <__eqsf2+0x28>
 80004f6:	2cff      	cmp	r4, #255	; 0xff
 80004f8:	d1fa      	bne.n	80004f0 <__eqsf2+0x28>
 80004fa:	2e00      	cmp	r6, #0
 80004fc:	d1f8      	bne.n	80004f0 <__eqsf2+0x28>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d006      	beq.n	8000510 <__eqsf2+0x48>
 8000502:	2001      	movs	r0, #1
 8000504:	2a00      	cmp	r2, #0
 8000506:	d1f3      	bne.n	80004f0 <__eqsf2+0x28>
 8000508:	0028      	movs	r0, r5
 800050a:	1e43      	subs	r3, r0, #1
 800050c:	4198      	sbcs	r0, r3
 800050e:	e7ef      	b.n	80004f0 <__eqsf2+0x28>
 8000510:	2000      	movs	r0, #0
 8000512:	e7ed      	b.n	80004f0 <__eqsf2+0x28>

08000514 <__gesf2>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	0042      	lsls	r2, r0, #1
 8000518:	0245      	lsls	r5, r0, #9
 800051a:	024e      	lsls	r6, r1, #9
 800051c:	004c      	lsls	r4, r1, #1
 800051e:	0fc3      	lsrs	r3, r0, #31
 8000520:	0a6d      	lsrs	r5, r5, #9
 8000522:	0e12      	lsrs	r2, r2, #24
 8000524:	0a76      	lsrs	r6, r6, #9
 8000526:	0e24      	lsrs	r4, r4, #24
 8000528:	0fc8      	lsrs	r0, r1, #31
 800052a:	2aff      	cmp	r2, #255	; 0xff
 800052c:	d01b      	beq.n	8000566 <__gesf2+0x52>
 800052e:	2cff      	cmp	r4, #255	; 0xff
 8000530:	d00e      	beq.n	8000550 <__gesf2+0x3c>
 8000532:	2a00      	cmp	r2, #0
 8000534:	d11b      	bne.n	800056e <__gesf2+0x5a>
 8000536:	2c00      	cmp	r4, #0
 8000538:	d101      	bne.n	800053e <__gesf2+0x2a>
 800053a:	2e00      	cmp	r6, #0
 800053c:	d01c      	beq.n	8000578 <__gesf2+0x64>
 800053e:	2d00      	cmp	r5, #0
 8000540:	d00c      	beq.n	800055c <__gesf2+0x48>
 8000542:	4283      	cmp	r3, r0
 8000544:	d01c      	beq.n	8000580 <__gesf2+0x6c>
 8000546:	2102      	movs	r1, #2
 8000548:	1e58      	subs	r0, r3, #1
 800054a:	4008      	ands	r0, r1
 800054c:	3801      	subs	r0, #1
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	2e00      	cmp	r6, #0
 8000552:	d122      	bne.n	800059a <__gesf2+0x86>
 8000554:	2a00      	cmp	r2, #0
 8000556:	d1f4      	bne.n	8000542 <__gesf2+0x2e>
 8000558:	2d00      	cmp	r5, #0
 800055a:	d1f2      	bne.n	8000542 <__gesf2+0x2e>
 800055c:	2800      	cmp	r0, #0
 800055e:	d1f6      	bne.n	800054e <__gesf2+0x3a>
 8000560:	2001      	movs	r0, #1
 8000562:	4240      	negs	r0, r0
 8000564:	e7f3      	b.n	800054e <__gesf2+0x3a>
 8000566:	2d00      	cmp	r5, #0
 8000568:	d117      	bne.n	800059a <__gesf2+0x86>
 800056a:	2cff      	cmp	r4, #255	; 0xff
 800056c:	d0f0      	beq.n	8000550 <__gesf2+0x3c>
 800056e:	2c00      	cmp	r4, #0
 8000570:	d1e7      	bne.n	8000542 <__gesf2+0x2e>
 8000572:	2e00      	cmp	r6, #0
 8000574:	d1e5      	bne.n	8000542 <__gesf2+0x2e>
 8000576:	e7e6      	b.n	8000546 <__gesf2+0x32>
 8000578:	2000      	movs	r0, #0
 800057a:	2d00      	cmp	r5, #0
 800057c:	d0e7      	beq.n	800054e <__gesf2+0x3a>
 800057e:	e7e2      	b.n	8000546 <__gesf2+0x32>
 8000580:	42a2      	cmp	r2, r4
 8000582:	dc05      	bgt.n	8000590 <__gesf2+0x7c>
 8000584:	dbea      	blt.n	800055c <__gesf2+0x48>
 8000586:	42b5      	cmp	r5, r6
 8000588:	d802      	bhi.n	8000590 <__gesf2+0x7c>
 800058a:	d3e7      	bcc.n	800055c <__gesf2+0x48>
 800058c:	2000      	movs	r0, #0
 800058e:	e7de      	b.n	800054e <__gesf2+0x3a>
 8000590:	4243      	negs	r3, r0
 8000592:	4158      	adcs	r0, r3
 8000594:	0040      	lsls	r0, r0, #1
 8000596:	3801      	subs	r0, #1
 8000598:	e7d9      	b.n	800054e <__gesf2+0x3a>
 800059a:	2002      	movs	r0, #2
 800059c:	4240      	negs	r0, r0
 800059e:	e7d6      	b.n	800054e <__gesf2+0x3a>

080005a0 <__lesf2>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	0042      	lsls	r2, r0, #1
 80005a4:	0245      	lsls	r5, r0, #9
 80005a6:	024e      	lsls	r6, r1, #9
 80005a8:	004c      	lsls	r4, r1, #1
 80005aa:	0fc3      	lsrs	r3, r0, #31
 80005ac:	0a6d      	lsrs	r5, r5, #9
 80005ae:	0e12      	lsrs	r2, r2, #24
 80005b0:	0a76      	lsrs	r6, r6, #9
 80005b2:	0e24      	lsrs	r4, r4, #24
 80005b4:	0fc8      	lsrs	r0, r1, #31
 80005b6:	2aff      	cmp	r2, #255	; 0xff
 80005b8:	d00b      	beq.n	80005d2 <__lesf2+0x32>
 80005ba:	2cff      	cmp	r4, #255	; 0xff
 80005bc:	d00d      	beq.n	80005da <__lesf2+0x3a>
 80005be:	2a00      	cmp	r2, #0
 80005c0:	d11f      	bne.n	8000602 <__lesf2+0x62>
 80005c2:	2c00      	cmp	r4, #0
 80005c4:	d116      	bne.n	80005f4 <__lesf2+0x54>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d114      	bne.n	80005f4 <__lesf2+0x54>
 80005ca:	2000      	movs	r0, #0
 80005cc:	2d00      	cmp	r5, #0
 80005ce:	d010      	beq.n	80005f2 <__lesf2+0x52>
 80005d0:	e009      	b.n	80005e6 <__lesf2+0x46>
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	d10c      	bne.n	80005f0 <__lesf2+0x50>
 80005d6:	2cff      	cmp	r4, #255	; 0xff
 80005d8:	d113      	bne.n	8000602 <__lesf2+0x62>
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d108      	bne.n	80005f0 <__lesf2+0x50>
 80005de:	2a00      	cmp	r2, #0
 80005e0:	d008      	beq.n	80005f4 <__lesf2+0x54>
 80005e2:	4283      	cmp	r3, r0
 80005e4:	d012      	beq.n	800060c <__lesf2+0x6c>
 80005e6:	2102      	movs	r1, #2
 80005e8:	1e58      	subs	r0, r3, #1
 80005ea:	4008      	ands	r0, r1
 80005ec:	3801      	subs	r0, #1
 80005ee:	e000      	b.n	80005f2 <__lesf2+0x52>
 80005f0:	2002      	movs	r0, #2
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	2d00      	cmp	r5, #0
 80005f6:	d1f4      	bne.n	80005e2 <__lesf2+0x42>
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d1fa      	bne.n	80005f2 <__lesf2+0x52>
 80005fc:	2001      	movs	r0, #1
 80005fe:	4240      	negs	r0, r0
 8000600:	e7f7      	b.n	80005f2 <__lesf2+0x52>
 8000602:	2c00      	cmp	r4, #0
 8000604:	d1ed      	bne.n	80005e2 <__lesf2+0x42>
 8000606:	2e00      	cmp	r6, #0
 8000608:	d1eb      	bne.n	80005e2 <__lesf2+0x42>
 800060a:	e7ec      	b.n	80005e6 <__lesf2+0x46>
 800060c:	42a2      	cmp	r2, r4
 800060e:	dc05      	bgt.n	800061c <__lesf2+0x7c>
 8000610:	dbf2      	blt.n	80005f8 <__lesf2+0x58>
 8000612:	42b5      	cmp	r5, r6
 8000614:	d802      	bhi.n	800061c <__lesf2+0x7c>
 8000616:	d3ef      	bcc.n	80005f8 <__lesf2+0x58>
 8000618:	2000      	movs	r0, #0
 800061a:	e7ea      	b.n	80005f2 <__lesf2+0x52>
 800061c:	4243      	negs	r3, r0
 800061e:	4158      	adcs	r0, r3
 8000620:	0040      	lsls	r0, r0, #1
 8000622:	3801      	subs	r0, #1
 8000624:	e7e5      	b.n	80005f2 <__lesf2+0x52>
 8000626:	46c0      	nop			; (mov r8, r8)

08000628 <__aeabi_i2f>:
 8000628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062a:	2800      	cmp	r0, #0
 800062c:	d013      	beq.n	8000656 <__aeabi_i2f+0x2e>
 800062e:	17c3      	asrs	r3, r0, #31
 8000630:	18c6      	adds	r6, r0, r3
 8000632:	405e      	eors	r6, r3
 8000634:	0fc4      	lsrs	r4, r0, #31
 8000636:	0030      	movs	r0, r6
 8000638:	f000 f844 	bl	80006c4 <__clzsi2>
 800063c:	239e      	movs	r3, #158	; 0x9e
 800063e:	0005      	movs	r5, r0
 8000640:	1a1b      	subs	r3, r3, r0
 8000642:	2b96      	cmp	r3, #150	; 0x96
 8000644:	dc0f      	bgt.n	8000666 <__aeabi_i2f+0x3e>
 8000646:	2808      	cmp	r0, #8
 8000648:	dd01      	ble.n	800064e <__aeabi_i2f+0x26>
 800064a:	3d08      	subs	r5, #8
 800064c:	40ae      	lsls	r6, r5
 800064e:	0276      	lsls	r6, r6, #9
 8000650:	0a76      	lsrs	r6, r6, #9
 8000652:	b2d8      	uxtb	r0, r3
 8000654:	e002      	b.n	800065c <__aeabi_i2f+0x34>
 8000656:	2400      	movs	r4, #0
 8000658:	2000      	movs	r0, #0
 800065a:	2600      	movs	r6, #0
 800065c:	05c0      	lsls	r0, r0, #23
 800065e:	4330      	orrs	r0, r6
 8000660:	07e4      	lsls	r4, r4, #31
 8000662:	4320      	orrs	r0, r4
 8000664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000666:	2b99      	cmp	r3, #153	; 0x99
 8000668:	dd0c      	ble.n	8000684 <__aeabi_i2f+0x5c>
 800066a:	2205      	movs	r2, #5
 800066c:	0031      	movs	r1, r6
 800066e:	1a12      	subs	r2, r2, r0
 8000670:	40d1      	lsrs	r1, r2
 8000672:	000a      	movs	r2, r1
 8000674:	0001      	movs	r1, r0
 8000676:	0030      	movs	r0, r6
 8000678:	311b      	adds	r1, #27
 800067a:	4088      	lsls	r0, r1
 800067c:	1e41      	subs	r1, r0, #1
 800067e:	4188      	sbcs	r0, r1
 8000680:	4302      	orrs	r2, r0
 8000682:	0016      	movs	r6, r2
 8000684:	2d05      	cmp	r5, #5
 8000686:	dc12      	bgt.n	80006ae <__aeabi_i2f+0x86>
 8000688:	0031      	movs	r1, r6
 800068a:	4f0d      	ldr	r7, [pc, #52]	; (80006c0 <__aeabi_i2f+0x98>)
 800068c:	4039      	ands	r1, r7
 800068e:	0772      	lsls	r2, r6, #29
 8000690:	d009      	beq.n	80006a6 <__aeabi_i2f+0x7e>
 8000692:	200f      	movs	r0, #15
 8000694:	4030      	ands	r0, r6
 8000696:	2804      	cmp	r0, #4
 8000698:	d005      	beq.n	80006a6 <__aeabi_i2f+0x7e>
 800069a:	3104      	adds	r1, #4
 800069c:	014a      	lsls	r2, r1, #5
 800069e:	d502      	bpl.n	80006a6 <__aeabi_i2f+0x7e>
 80006a0:	239f      	movs	r3, #159	; 0x9f
 80006a2:	4039      	ands	r1, r7
 80006a4:	1b5b      	subs	r3, r3, r5
 80006a6:	0189      	lsls	r1, r1, #6
 80006a8:	0a4e      	lsrs	r6, r1, #9
 80006aa:	b2d8      	uxtb	r0, r3
 80006ac:	e7d6      	b.n	800065c <__aeabi_i2f+0x34>
 80006ae:	1f6a      	subs	r2, r5, #5
 80006b0:	4096      	lsls	r6, r2
 80006b2:	0031      	movs	r1, r6
 80006b4:	4f02      	ldr	r7, [pc, #8]	; (80006c0 <__aeabi_i2f+0x98>)
 80006b6:	4039      	ands	r1, r7
 80006b8:	0772      	lsls	r2, r6, #29
 80006ba:	d0f4      	beq.n	80006a6 <__aeabi_i2f+0x7e>
 80006bc:	e7e9      	b.n	8000692 <__aeabi_i2f+0x6a>
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	fbffffff 	.word	0xfbffffff

080006c4 <__clzsi2>:
 80006c4:	211c      	movs	r1, #28
 80006c6:	2301      	movs	r3, #1
 80006c8:	041b      	lsls	r3, r3, #16
 80006ca:	4298      	cmp	r0, r3
 80006cc:	d301      	bcc.n	80006d2 <__clzsi2+0xe>
 80006ce:	0c00      	lsrs	r0, r0, #16
 80006d0:	3910      	subs	r1, #16
 80006d2:	0a1b      	lsrs	r3, r3, #8
 80006d4:	4298      	cmp	r0, r3
 80006d6:	d301      	bcc.n	80006dc <__clzsi2+0x18>
 80006d8:	0a00      	lsrs	r0, r0, #8
 80006da:	3908      	subs	r1, #8
 80006dc:	091b      	lsrs	r3, r3, #4
 80006de:	4298      	cmp	r0, r3
 80006e0:	d301      	bcc.n	80006e6 <__clzsi2+0x22>
 80006e2:	0900      	lsrs	r0, r0, #4
 80006e4:	3904      	subs	r1, #4
 80006e6:	a202      	add	r2, pc, #8	; (adr r2, 80006f0 <__clzsi2+0x2c>)
 80006e8:	5c10      	ldrb	r0, [r2, r0]
 80006ea:	1840      	adds	r0, r0, r1
 80006ec:	4770      	bx	lr
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	02020304 	.word	0x02020304
 80006f4:	01010101 	.word	0x01010101
	...

08000700 <__clzdi2>:
 8000700:	b510      	push	{r4, lr}
 8000702:	2900      	cmp	r1, #0
 8000704:	d103      	bne.n	800070e <__clzdi2+0xe>
 8000706:	f7ff ffdd 	bl	80006c4 <__clzsi2>
 800070a:	3020      	adds	r0, #32
 800070c:	e002      	b.n	8000714 <__clzdi2+0x14>
 800070e:	0008      	movs	r0, r1
 8000710:	f7ff ffd8 	bl	80006c4 <__clzsi2>
 8000714:	bd10      	pop	{r4, pc}
 8000716:	46c0      	nop			; (mov r8, r8)

08000718 <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071a:	464e      	mov	r6, r9
 800071c:	46de      	mov	lr, fp
 800071e:	4657      	mov	r7, sl
 8000720:	4645      	mov	r5, r8
 8000722:	b5e0      	push	{r5, r6, r7, lr}
 8000724:	b089      	sub	sp, #36	; 0x24
 8000726:	9101      	str	r1, [sp, #4]
	int x = radius-1;
	int y = 0;
	int dx = 1;
	int dy = 1;
	int err = dx - (radius << 1);
 8000728:	2101      	movs	r1, #1
{
 800072a:	001e      	movs	r6, r3
	int err = dx - (radius << 1);
 800072c:	0053      	lsls	r3, r2, #1
 800072e:	1acb      	subs	r3, r1, r3
{
 8000730:	9000      	str	r0, [sp, #0]
	int err = dx - (radius << 1);
 8000732:	9304      	str	r3, [sp, #16]

	while (x >= y)
 8000734:	1e53      	subs	r3, r2, #1
 8000736:	9302      	str	r3, [sp, #8]
 8000738:	d374      	bcc.n	8000824 <ILI9341_DrawHollowCircle+0x10c>

		if (err > 0)
		{
			x--;
			dx += 2;
			err += (-radius << 1) + dx;
 800073a:	4252      	negs	r2, r2
 800073c:	0053      	lsls	r3, r2, #1
 800073e:	9307      	str	r3, [sp, #28]
	int dy = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	9306      	str	r3, [sp, #24]
	int dx = 1;
 8000744:	9305      	str	r3, [sp, #20]
	int y = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	9303      	str	r3, [sp, #12]
 800074a:	e012      	b.n	8000772 <ILI9341_DrawHollowCircle+0x5a>
			x--;
 800074c:	9b02      	ldr	r3, [sp, #8]
 800074e:	3b01      	subs	r3, #1
 8000750:	9302      	str	r3, [sp, #8]
			dx += 2;
 8000752:	9b05      	ldr	r3, [sp, #20]
 8000754:	3302      	adds	r3, #2
 8000756:	001a      	movs	r2, r3
			err += (-radius << 1) + dx;
 8000758:	4694      	mov	ip, r2
			dx += 2;
 800075a:	9305      	str	r3, [sp, #20]
			err += (-radius << 1) + dx;
 800075c:	9a04      	ldr	r2, [sp, #16]
 800075e:	9b07      	ldr	r3, [sp, #28]
 8000760:	4463      	add	r3, ip
 8000762:	4694      	mov	ip, r2
 8000764:	449c      	add	ip, r3
 8000766:	4663      	mov	r3, ip
	while (x >= y)
 8000768:	9a03      	ldr	r2, [sp, #12]
			err += (-radius << 1) + dx;
 800076a:	9304      	str	r3, [sp, #16]
	while (x >= y)
 800076c:	9b02      	ldr	r3, [sp, #8]
 800076e:	4293      	cmp	r3, r2
 8000770:	db58      	blt.n	8000824 <ILI9341_DrawHollowCircle+0x10c>
		ILI9341_DrawPixel(X + x, Y + y, color);
 8000772:	466b      	mov	r3, sp
 8000774:	891d      	ldrh	r5, [r3, #8]
 8000776:	9b00      	ldr	r3, [sp, #0]
 8000778:	9a01      	ldr	r2, [sp, #4]
 800077a:	18ef      	adds	r7, r5, r3
 800077c:	466b      	mov	r3, sp
 800077e:	899c      	ldrh	r4, [r3, #12]
 8000780:	b2bf      	uxth	r7, r7
 8000782:	18a3      	adds	r3, r4, r2
 8000784:	b299      	uxth	r1, r3
 8000786:	0032      	movs	r2, r6
 8000788:	0038      	movs	r0, r7
 800078a:	468b      	mov	fp, r1
 800078c:	f001 fb04 	bl	8001d98 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 8000790:	9b00      	ldr	r3, [sp, #0]
 8000792:	9a01      	ldr	r2, [sp, #4]
 8000794:	18e3      	adds	r3, r4, r3
 8000796:	b299      	uxth	r1, r3
 8000798:	4688      	mov	r8, r1
 800079a:	18ab      	adds	r3, r5, r2
 800079c:	b299      	uxth	r1, r3
 800079e:	0032      	movs	r2, r6
 80007a0:	4640      	mov	r0, r8
 80007a2:	468a      	mov	sl, r1
 80007a4:	f001 faf8 	bl	8001d98 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 80007a8:	9b00      	ldr	r3, [sp, #0]
 80007aa:	0032      	movs	r2, r6
 80007ac:	1b1b      	subs	r3, r3, r4
 80007ae:	b299      	uxth	r1, r3
 80007b0:	4689      	mov	r9, r1
 80007b2:	4651      	mov	r1, sl
 80007b4:	4648      	mov	r0, r9
 80007b6:	f001 faef 	bl	8001d98 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 80007ba:	9b00      	ldr	r3, [sp, #0]
 80007bc:	0032      	movs	r2, r6
 80007be:	1b5b      	subs	r3, r3, r5
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	469a      	mov	sl, r3
 80007c4:	0018      	movs	r0, r3
 80007c6:	4659      	mov	r1, fp
 80007c8:	f001 fae6 	bl	8001d98 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 80007cc:	9a01      	ldr	r2, [sp, #4]
 80007ce:	4650      	mov	r0, sl
 80007d0:	1b14      	subs	r4, r2, r4
 80007d2:	b2a4      	uxth	r4, r4
 80007d4:	0032      	movs	r2, r6
 80007d6:	0021      	movs	r1, r4
 80007d8:	f001 fade 	bl	8001d98 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 80007dc:	9a01      	ldr	r2, [sp, #4]
 80007de:	4648      	mov	r0, r9
 80007e0:	1b55      	subs	r5, r2, r5
 80007e2:	b2ad      	uxth	r5, r5
 80007e4:	0032      	movs	r2, r6
 80007e6:	0029      	movs	r1, r5
 80007e8:	f001 fad6 	bl	8001d98 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 80007ec:	0032      	movs	r2, r6
 80007ee:	0029      	movs	r1, r5
 80007f0:	4640      	mov	r0, r8
 80007f2:	f001 fad1 	bl	8001d98 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 80007f6:	0032      	movs	r2, r6
 80007f8:	0021      	movs	r1, r4
 80007fa:	0038      	movs	r0, r7
 80007fc:	f001 facc 	bl	8001d98 <ILI9341_DrawPixel>
		if (err <= 0)
 8000800:	9b04      	ldr	r3, [sp, #16]
 8000802:	2b00      	cmp	r3, #0
 8000804:	dca2      	bgt.n	800074c <ILI9341_DrawHollowCircle+0x34>
			y++;
 8000806:	9a03      	ldr	r2, [sp, #12]
 8000808:	3201      	adds	r2, #1
 800080a:	9203      	str	r2, [sp, #12]
			err += dy;
 800080c:	9a06      	ldr	r2, [sp, #24]
 800080e:	4694      	mov	ip, r2
			dy += 2;
 8000810:	3202      	adds	r2, #2
			err += dy;
 8000812:	4463      	add	r3, ip
 8000814:	9304      	str	r3, [sp, #16]
			dy += 2;
 8000816:	9206      	str	r2, [sp, #24]
		if (err > 0)
 8000818:	2b00      	cmp	r3, #0
 800081a:	dc97      	bgt.n	800074c <ILI9341_DrawHollowCircle+0x34>
	while (x >= y)
 800081c:	9b02      	ldr	r3, [sp, #8]
 800081e:	9a03      	ldr	r2, [sp, #12]
 8000820:	4293      	cmp	r3, r2
 8000822:	daa6      	bge.n	8000772 <ILI9341_DrawHollowCircle+0x5a>
		}
	}
}
 8000824:	b009      	add	sp, #36	; 0x24
 8000826:	bcf0      	pop	{r4, r5, r6, r7}
 8000828:	46bb      	mov	fp, r7
 800082a:	46b2      	mov	sl, r6
 800082c:	46a9      	mov	r9, r5
 800082e:	46a0      	mov	r8, r4
 8000830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)

08000834 <ILI9341_DrawFilledCircle>:

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000836:	4645      	mov	r5, r8
 8000838:	46de      	mov	lr, fp
 800083a:	4657      	mov	r7, sl
 800083c:	464e      	mov	r6, r9
 800083e:	b5e0      	push	{r5, r6, r7, lr}
 8000840:	b08b      	sub	sp, #44	; 0x2c
 8000842:	001d      	movs	r5, r3
 8000844:	9107      	str	r1, [sp, #28]

	int x = radius;
	int y = 0;
	int xChange = 1 - (radius << 1);
 8000846:	0053      	lsls	r3, r2, #1
	int x = radius;
 8000848:	0011      	movs	r1, r2
 800084a:	9203      	str	r2, [sp, #12]
	int xChange = 1 - (radius << 1);
 800084c:	2201      	movs	r2, #1
 800084e:	1ad2      	subs	r2, r2, r3
 8000850:	9205      	str	r2, [sp, #20]
	int yChange = 0;
	int radiusError = 0;

	while (x >= y)
 8000852:	1c42      	adds	r2, r0, #1
 8000854:	0003      	movs	r3, r0
 8000856:	4690      	mov	r8, r2
 8000858:	468c      	mov	ip, r1
	int radiusError = 0;
 800085a:	2200      	movs	r2, #0
 800085c:	4463      	add	r3, ip
	int y = 0;
 800085e:	4693      	mov	fp, r2
	int radiusError = 0;
 8000860:	9201      	str	r2, [sp, #4]
 8000862:	1a42      	subs	r2, r0, r1
{
 8000864:	9009      	str	r0, [sp, #36]	; 0x24
 8000866:	9002      	str	r0, [sp, #8]
 8000868:	9208      	str	r2, [sp, #32]
 800086a:	9304      	str	r3, [sp, #16]
 800086c:	465b      	mov	r3, fp
 800086e:	005b      	lsls	r3, r3, #1
	{
		for (int i = X - x; i <= X + x; i++)
 8000870:	9a08      	ldr	r2, [sp, #32]
 8000872:	9306      	str	r3, [sp, #24]
 8000874:	9b04      	ldr	r3, [sp, #16]
 8000876:	0014      	movs	r4, r2
 8000878:	4293      	cmp	r3, r2
 800087a:	db1b      	blt.n	80008b4 <ILI9341_DrawFilledCircle+0x80>
 800087c:	465b      	mov	r3, fp
 800087e:	9a07      	ldr	r2, [sp, #28]
 8000880:	b29f      	uxth	r7, r3
 8000882:	18bb      	adds	r3, r7, r2
 8000884:	b29b      	uxth	r3, r3
 8000886:	4699      	mov	r9, r3
 8000888:	9b04      	ldr	r3, [sp, #16]
 800088a:	1bd7      	subs	r7, r2, r7
 800088c:	b2bf      	uxth	r7, r7
 800088e:	3301      	adds	r3, #1
 8000890:	469a      	mov	sl, r3
 8000892:	003b      	movs	r3, r7
 8000894:	464f      	mov	r7, r9
 8000896:	4699      	mov	r9, r3
		{
			ILI9341_DrawPixel(i, Y + y,color);
 8000898:	b2a6      	uxth	r6, r4
 800089a:	002a      	movs	r2, r5
 800089c:	0039      	movs	r1, r7
 800089e:	0030      	movs	r0, r6
 80008a0:	f001 fa7a 	bl	8001d98 <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 80008a4:	3401      	adds	r4, #1
			ILI9341_DrawPixel(i, Y - y,color);
 80008a6:	002a      	movs	r2, r5
 80008a8:	4649      	mov	r1, r9
 80008aa:	0030      	movs	r0, r6
 80008ac:	f001 fa74 	bl	8001d98 <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 80008b0:	45a2      	cmp	sl, r4
 80008b2:	d1f1      	bne.n	8000898 <ILI9341_DrawFilledCircle+0x64>
		}

		for (int i = X - y; i <= X + y; i++)
 80008b4:	4643      	mov	r3, r8
 80008b6:	9a02      	ldr	r2, [sp, #8]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	0014      	movs	r4, r2
 80008bc:	4293      	cmp	r3, r2
 80008be:	db19      	blt.n	80008f4 <ILI9341_DrawFilledCircle+0xc0>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 80008c0:	466b      	mov	r3, sp
 80008c2:	9a07      	ldr	r2, [sp, #28]
 80008c4:	899f      	ldrh	r7, [r3, #12]
 80008c6:	19d3      	adds	r3, r2, r7
			ILI9341_DrawPixel(i, Y - x,color);
 80008c8:	1bd7      	subs	r7, r2, r7
			ILI9341_DrawPixel(i, Y + x,color);
 80008ca:	b29b      	uxth	r3, r3
			ILI9341_DrawPixel(i, Y - x,color);
 80008cc:	b2bf      	uxth	r7, r7
			ILI9341_DrawPixel(i, Y + x,color);
 80008ce:	4699      	mov	r9, r3
			ILI9341_DrawPixel(i, Y - x,color);
 80008d0:	003b      	movs	r3, r7
 80008d2:	4647      	mov	r7, r8
 80008d4:	4698      	mov	r8, r3
			ILI9341_DrawPixel(i, Y + x,color);
 80008d6:	b2a6      	uxth	r6, r4
 80008d8:	002a      	movs	r2, r5
 80008da:	4649      	mov	r1, r9
 80008dc:	0030      	movs	r0, r6
 80008de:	f001 fa5b 	bl	8001d98 <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 80008e2:	3401      	adds	r4, #1
			ILI9341_DrawPixel(i, Y - x,color);
 80008e4:	002a      	movs	r2, r5
 80008e6:	4641      	mov	r1, r8
 80008e8:	0030      	movs	r0, r6
 80008ea:	f001 fa55 	bl	8001d98 <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 80008ee:	42a7      	cmp	r7, r4
 80008f0:	d1f1      	bne.n	80008d6 <ILI9341_DrawFilledCircle+0xa2>
 80008f2:	46b8      	mov	r8, r7
		}

		y++;
 80008f4:	2301      	movs	r3, #1
 80008f6:	469c      	mov	ip, r3
		radiusError += yChange;
 80008f8:	9a06      	ldr	r2, [sp, #24]
		y++;
 80008fa:	44e3      	add	fp, ip
		radiusError += yChange;
 80008fc:	4694      	mov	ip, r2
 80008fe:	9b01      	ldr	r3, [sp, #4]
		yChange += 2;

		if (((radiusError << 1) + xChange) > 0)
 8000900:	9a05      	ldr	r2, [sp, #20]
		radiusError += yChange;
 8000902:	4463      	add	r3, ip
		if (((radiusError << 1) + xChange) > 0)
 8000904:	4694      	mov	ip, r2
		radiusError += yChange;
 8000906:	9301      	str	r3, [sp, #4]
		if (((radiusError << 1) + xChange) > 0)
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4463      	add	r3, ip
 800090c:	2b00      	cmp	r3, #0
 800090e:	dd18      	ble.n	8000942 <ILI9341_DrawFilledCircle+0x10e>
 8000910:	0011      	movs	r1, r2
		{
			x--;
			radiusError += xChange;
 8000912:	468c      	mov	ip, r1
 8000914:	9a01      	ldr	r2, [sp, #4]
			x--;
 8000916:	9b03      	ldr	r3, [sp, #12]
			radiusError += xChange;
 8000918:	4462      	add	r2, ip
 800091a:	9201      	str	r2, [sp, #4]
			xChange += 2;
 800091c:	1c8a      	adds	r2, r1, #2
 800091e:	9205      	str	r2, [sp, #20]
	while (x >= y)
 8000920:	9a02      	ldr	r2, [sp, #8]
			x--;
 8000922:	3b01      	subs	r3, #1
	while (x >= y)
 8000924:	3a01      	subs	r2, #1
 8000926:	9202      	str	r2, [sp, #8]
 8000928:	2201      	movs	r2, #1
 800092a:	4694      	mov	ip, r2
			x--;
 800092c:	9303      	str	r3, [sp, #12]
	while (x >= y)
 800092e:	44e0      	add	r8, ip
 8000930:	459b      	cmp	fp, r3
 8000932:	dc0f      	bgt.n	8000954 <ILI9341_DrawFilledCircle+0x120>
 8000934:	469c      	mov	ip, r3
 8000936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000938:	1ad1      	subs	r1, r2, r3
 800093a:	4462      	add	r2, ip
 800093c:	9108      	str	r1, [sp, #32]
 800093e:	9204      	str	r2, [sp, #16]
 8000940:	e794      	b.n	800086c <ILI9341_DrawFilledCircle+0x38>
 8000942:	9b02      	ldr	r3, [sp, #8]
 8000944:	3b01      	subs	r3, #1
 8000946:	9302      	str	r3, [sp, #8]
 8000948:	2301      	movs	r3, #1
 800094a:	469c      	mov	ip, r3
 800094c:	9b03      	ldr	r3, [sp, #12]
 800094e:	44e0      	add	r8, ip
 8000950:	459b      	cmp	fp, r3
 8000952:	dd8b      	ble.n	800086c <ILI9341_DrawFilledCircle+0x38>
		}
	}
}
 8000954:	b00b      	add	sp, #44	; 0x2c
 8000956:	bcf0      	pop	{r4, r5, r6, r7}
 8000958:	46bb      	mov	fp, r7
 800095a:	46b2      	mov	sl, r6
 800095c:	46a9      	mov	r9, r5
 800095e:	46a0      	mov	r8, r4
 8000960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)

08000964 <ILI9341_DrawHollowRectangleCoord>:

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8000964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000966:	4657      	mov	r7, sl
 8000968:	464e      	mov	r6, r9
 800096a:	4645      	mov	r5, r8
 800096c:	46de      	mov	lr, fp
 800096e:	b5e0      	push	{r5, r6, r7, lr}
 8000970:	4698      	mov	r8, r3
 8000972:	ab0a      	add	r3, sp, #40	; 0x28
 8000974:	881b      	ldrh	r3, [r3, #0]
	uint16_t yLen = 0;
	uint8_t negX = 0;
	uint8_t negY = 0;
	float negCalc = 0;

	negCalc = X1 - X0;
 8000976:	1a16      	subs	r6, r2, r0
{
 8000978:	0005      	movs	r5, r0
	negCalc = X1 - X0;
 800097a:	0030      	movs	r0, r6
{
 800097c:	000f      	movs	r7, r1
 800097e:	4691      	mov	r9, r2
 8000980:	469a      	mov	sl, r3
	negCalc = X1 - X0;
 8000982:	f7ff fe51 	bl	8000628 <__aeabi_i2f>
	if(negCalc < 0) negX = 1;
 8000986:	2100      	movs	r1, #0
 8000988:	f7ff fc5c 	bl	8000244 <__aeabi_fcmplt>
 800098c:	2800      	cmp	r0, #0
 800098e:	d130      	bne.n	80009f2 <ILI9341_DrawHollowRectangleCoord+0x8e>
	negCalc = 0;

	negCalc = Y1 - Y0;
 8000990:	4643      	mov	r3, r8
 8000992:	1bdb      	subs	r3, r3, r7
 8000994:	0018      	movs	r0, r3
 8000996:	469b      	mov	fp, r3
 8000998:	f7ff fe46 	bl	8000628 <__aeabi_i2f>
	if(negCalc < 0) negY = 1;
 800099c:	2100      	movs	r1, #0
 800099e:	f7ff fc51 	bl	8000244 <__aeabi_fcmplt>
 80009a2:	1e43      	subs	r3, r0, #1
 80009a4:	4198      	sbcs	r0, r3
 80009a6:	0004      	movs	r4, r0

	//DRAW HORIZONTAL!
	if(!negX)
	{
		xLen = X1 - X0;
 80009a8:	b2b6      	uxth	r6, r6
	}
	else
	{
		xLen = X0 - X1;
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 80009aa:	4653      	mov	r3, sl
 80009ac:	0032      	movs	r2, r6
 80009ae:	0039      	movs	r1, r7
 80009b0:	0028      	movs	r0, r5
 80009b2:	f001 fa29 	bl	8001e08 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 80009b6:	4653      	mov	r3, sl
 80009b8:	0032      	movs	r2, r6
 80009ba:	4641      	mov	r1, r8
 80009bc:	0028      	movs	r0, r5
 80009be:	f001 fa23 	bl	8001e08 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 80009c2:	2c00      	cmp	r4, #0
 80009c4:	d125      	bne.n	8000a12 <ILI9341_DrawHollowRectangleCoord+0xae>
	{
		yLen = Y1 - Y0;
 80009c6:	465b      	mov	r3, fp
 80009c8:	b29c      	uxth	r4, r3
	else
	{
		yLen = Y0 - Y1;
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 80009ca:	0022      	movs	r2, r4
 80009cc:	4653      	mov	r3, sl
 80009ce:	0039      	movs	r1, r7
 80009d0:	0028      	movs	r0, r5
 80009d2:	f001 fa35 	bl	8001e40 <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 80009d6:	0022      	movs	r2, r4
 80009d8:	4653      	mov	r3, sl
 80009da:	0039      	movs	r1, r7
 80009dc:	4648      	mov	r0, r9
 80009de:	f001 fa2f 	bl	8001e40 <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 80009e2:	4334      	orrs	r4, r6
 80009e4:	d119      	bne.n	8000a1a <ILI9341_DrawHollowRectangleCoord+0xb6>
	{
		ILI9341_DrawPixel(X1, Y1, color);
	}
}
 80009e6:	bcf0      	pop	{r4, r5, r6, r7}
 80009e8:	46bb      	mov	fp, r7
 80009ea:	46b2      	mov	sl, r6
 80009ec:	46a9      	mov	r9, r5
 80009ee:	46a0      	mov	r8, r4
 80009f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	negCalc = Y1 - Y0;
 80009f2:	4643      	mov	r3, r8
 80009f4:	1bdb      	subs	r3, r3, r7
 80009f6:	0018      	movs	r0, r3
 80009f8:	469b      	mov	fp, r3
 80009fa:	f7ff fe15 	bl	8000628 <__aeabi_i2f>
	if(negCalc < 0) negY = 1;
 80009fe:	2100      	movs	r1, #0
 8000a00:	f7ff fc20 	bl	8000244 <__aeabi_fcmplt>
	uint8_t negY = 0;
 8000a04:	1e43      	subs	r3, r0, #1
 8000a06:	4198      	sbcs	r0, r3
		xLen = X0 - X1;
 8000a08:	464b      	mov	r3, r9
 8000a0a:	1aee      	subs	r6, r5, r3
	uint8_t negY = 0;
 8000a0c:	0004      	movs	r4, r0
		xLen = X0 - X1;
 8000a0e:	b2b6      	uxth	r6, r6
 8000a10:	e7cb      	b.n	80009aa <ILI9341_DrawHollowRectangleCoord+0x46>
		yLen = Y0 - Y1;
 8000a12:	4643      	mov	r3, r8
 8000a14:	1afc      	subs	r4, r7, r3
 8000a16:	b2a4      	uxth	r4, r4
 8000a18:	e7d7      	b.n	80009ca <ILI9341_DrawHollowRectangleCoord+0x66>
		ILI9341_DrawPixel(X1, Y1, color);
 8000a1a:	4652      	mov	r2, sl
 8000a1c:	4641      	mov	r1, r8
 8000a1e:	4648      	mov	r0, r9
 8000a20:	f001 f9ba 	bl	8001d98 <ILI9341_DrawPixel>
}
 8000a24:	e7df      	b.n	80009e6 <ILI9341_DrawHollowRectangleCoord+0x82>
 8000a26:	46c0      	nop			; (mov r8, r8)

08000a28 <ILI9341_DrawFilledRectangleCoord>:

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8000a28:	b5c0      	push	{r6, r7, lr}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	001e      	movs	r6, r3
 8000a2e:	ab06      	add	r3, sp, #24
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	0017      	movs	r7, r2
 8000a34:	469c      	mov	ip, r3
	uint8_t negY = 0;
	int32_t negCalc = 0;
	uint16_t X0True = 0;
	uint16_t Y0True = 0;

	negCalc = X1 - X0;
 8000a36:	1a12      	subs	r2, r2, r0
	if(negCalc < 0) negX = 1;
 8000a38:	d411      	bmi.n	8000a5e <ILI9341_DrawFilledRectangleCoord+0x36>
	negCalc = 0;

	negCalc = Y1 - Y0;
 8000a3a:	1a73      	subs	r3, r6, r1
	if(negCalc < 0) negY = 1;

	if(!negX)
	{
		xLen = X1 - X0;
 8000a3c:	b292      	uxth	r2, r2
	if(negCalc < 0) negY = 1;
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	db09      	blt.n	8000a56 <ILI9341_DrawFilledRectangleCoord+0x2e>
		X0True = X1;
	}

	if(!negY)
	{
		yLen = Y1 - Y0;
 8000a42:	b29b      	uxth	r3, r3
	{
		yLen = Y0 - Y1;
		Y0True = Y1;
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 8000a44:	4666      	mov	r6, ip
 8000a46:	9600      	str	r6, [sp, #0]
 8000a48:	f001 f9b2 	bl	8001db0 <ILI9341_DrawRectangle>
}
 8000a4c:	b003      	add	sp, #12
 8000a4e:	bdc0      	pop	{r6, r7, pc}
		xLen = X0 - X1;
 8000a50:	1bc0      	subs	r0, r0, r7
 8000a52:	b282      	uxth	r2, r0
		X0True = X1;
 8000a54:	0038      	movs	r0, r7
		yLen = Y0 - Y1;
 8000a56:	1b89      	subs	r1, r1, r6
 8000a58:	b28b      	uxth	r3, r1
		Y0True = Y1;
 8000a5a:	0031      	movs	r1, r6
 8000a5c:	e7f2      	b.n	8000a44 <ILI9341_DrawFilledRectangleCoord+0x1c>
	negCalc = Y1 - Y0;
 8000a5e:	1a73      	subs	r3, r6, r1
	if(negCalc < 0) negY = 1;
 8000a60:	d4f6      	bmi.n	8000a50 <ILI9341_DrawFilledRectangleCoord+0x28>
		xLen = X0 - X1;
 8000a62:	1bc0      	subs	r0, r0, r7
 8000a64:	b282      	uxth	r2, r0
		X0True = X1;
 8000a66:	0038      	movs	r0, r7
 8000a68:	e7eb      	b.n	8000a42 <ILI9341_DrawFilledRectangleCoord+0x1a>
 8000a6a:	46c0      	nop			; (mov r8, r8)

08000a6c <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a6e:	464e      	mov	r6, r9
 8000a70:	46de      	mov	lr, fp
 8000a72:	4657      	mov	r7, sl
 8000a74:	4645      	mov	r5, r8
 8000a76:	b5e0      	push	{r5, r6, r7, lr}
 8000a78:	b087      	sub	sp, #28
 8000a7a:	4699      	mov	r9, r3
 8000a7c:	ab10      	add	r3, sp, #64	; 0x40
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	000c      	movs	r4, r1
 8000a82:	469b      	mov	fp, r3
 8000a84:	ab11      	add	r3, sp, #68	; 0x44
 8000a86:	9103      	str	r1, [sp, #12]
 8000a88:	8819      	ldrh	r1, [r3, #0]
	if ((ch < 31) || (ch > 127)) return;
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	3b1f      	subs	r3, #31
{
 8000a8e:	0016      	movs	r6, r2
 8000a90:	9202      	str	r2, [sp, #8]
	if ((ch < 31) || (ch > 127)) return;
 8000a92:	2b60      	cmp	r3, #96	; 0x60
 8000a94:	d906      	bls.n	8000aa4 <ILI9341_DrawChar+0x38>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
			}
		}
	}
}
 8000a96:	b007      	add	sp, #28
 8000a98:	bcf0      	pop	{r4, r5, r6, r7}
 8000a9a:	46bb      	mov	fp, r7
 8000a9c:	46b2      	mov	sl, r6
 8000a9e:	46a9      	mov	r9, r5
 8000aa0:	46a0      	mov	r8, r4
 8000aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fBPL = font[3];
 8000aa4:	78e3      	ldrb	r3, [r4, #3]
	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000aa6:	3820      	subs	r0, #32
	fBPL = font[3];
 8000aa8:	4698      	mov	r8, r3
	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000aaa:	7823      	ldrb	r3, [r4, #0]
	fHeight = font[2];
 8000aac:	78a5      	ldrb	r5, [r4, #2]
	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000aae:	4343      	muls	r3, r0
	fWidth = font[1];
 8000ab0:	7867      	ldrb	r7, [r4, #1]
	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000ab2:	9305      	str	r3, [sp, #20]
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000ab4:	9100      	str	r1, [sp, #0]
 8000ab6:	002b      	movs	r3, r5
 8000ab8:	003a      	movs	r2, r7
 8000aba:	4649      	mov	r1, r9
 8000abc:	0030      	movs	r0, r6
	fHeight = font[2];
 8000abe:	9504      	str	r5, [sp, #16]
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000ac0:	f001 f976 	bl	8001db0 <ILI9341_DrawRectangle>
	for (int j=0; j < fHeight; j++)
 8000ac4:	2d00      	cmp	r5, #0
 8000ac6:	d0e6      	beq.n	8000a96 <ILI9341_DrawChar+0x2a>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	469a      	mov	sl, r3
 8000acc:	2f00      	cmp	r7, #0
 8000ace:	d0e2      	beq.n	8000a96 <ILI9341_DrawChar+0x2a>
			uint8_t b = 1 << (j & 0x07);
 8000ad0:	4652      	mov	r2, sl
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	2601      	movs	r6, #1
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	409e      	lsls	r6, r3
 8000ada:	9b05      	ldr	r3, [sp, #20]
 8000adc:	b2f6      	uxtb	r6, r6
 8000ade:	469c      	mov	ip, r3
 8000ae0:	9b03      	ldr	r3, [sp, #12]
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000ae2:	10d4      	asrs	r4, r2, #3
 8000ae4:	4464      	add	r4, ip
 8000ae6:	469c      	mov	ip, r3
 8000ae8:	0033      	movs	r3, r6
		for (int i=0; i < fWidth; i++)
 8000aea:	2500      	movs	r5, #0
 8000aec:	4646      	mov	r6, r8
 8000aee:	4464      	add	r4, ip
 8000af0:	4698      	mov	r8, r3
 8000af2:	e003      	b.n	8000afc <ILI9341_DrawChar+0x90>
 8000af4:	3501      	adds	r5, #1
 8000af6:	19a4      	adds	r4, r4, r6
 8000af8:	42bd      	cmp	r5, r7
 8000afa:	da0e      	bge.n	8000b1a <ILI9341_DrawChar+0xae>
			if (( z & b ) != 0x00)
 8000afc:	4642      	mov	r2, r8
 8000afe:	7963      	ldrb	r3, [r4, #5]
 8000b00:	4213      	tst	r3, r2
 8000b02:	d0f7      	beq.n	8000af4 <ILI9341_DrawChar+0x88>
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000b04:	9b02      	ldr	r3, [sp, #8]
 8000b06:	465a      	mov	r2, fp
 8000b08:	1958      	adds	r0, r3, r5
 8000b0a:	4649      	mov	r1, r9
 8000b0c:	b280      	uxth	r0, r0
		for (int i=0; i < fWidth; i++)
 8000b0e:	3501      	adds	r5, #1
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000b10:	f001 f942 	bl	8001d98 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000b14:	19a4      	adds	r4, r4, r6
 8000b16:	42bd      	cmp	r5, r7
 8000b18:	dbf0      	blt.n	8000afc <ILI9341_DrawChar+0x90>
	for (int j=0; j < fHeight; j++)
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	469c      	mov	ip, r3
 8000b1e:	464b      	mov	r3, r9
 8000b20:	3301      	adds	r3, #1
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	4699      	mov	r9, r3
 8000b26:	9b04      	ldr	r3, [sp, #16]
 8000b28:	44e2      	add	sl, ip
 8000b2a:	46b0      	mov	r8, r6
 8000b2c:	4553      	cmp	r3, sl
 8000b2e:	dccf      	bgt.n	8000ad0 <ILI9341_DrawChar+0x64>
 8000b30:	e7b1      	b.n	8000a96 <ILI9341_DrawChar+0x2a>
 8000b32:	46c0      	nop			; (mov r8, r8)

08000b34 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b36:	46de      	mov	lr, fp
 8000b38:	4657      	mov	r7, sl
 8000b3a:	464e      	mov	r6, r9
 8000b3c:	4645      	mov	r5, r8
 8000b3e:	b5e0      	push	{r5, r6, r7, lr}
 8000b40:	b08d      	sub	sp, #52	; 0x34
 8000b42:	930a      	str	r3, [sp, #40]	; 0x28
 8000b44:	ab16      	add	r3, sp, #88	; 0x58
 8000b46:	9203      	str	r2, [sp, #12]
 8000b48:	881a      	ldrh	r2, [r3, #0]
 8000b4a:	ab17      	add	r3, sp, #92	; 0x5c
 8000b4c:	4693      	mov	fp, r2
 8000b4e:	881a      	ldrh	r2, [r3, #0]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
	uint8_t fWidth = font[1];	/* Width of font */
 8000b50:	784b      	ldrb	r3, [r1, #1]
{
 8000b52:	920b      	str	r2, [sp, #44]	; 0x2c
	uint8_t fOffset = font[0];	/* Offset of character */
 8000b54:	780a      	ldrb	r2, [r1, #0]
{
 8000b56:	9007      	str	r0, [sp, #28]
 8000b58:	9104      	str	r1, [sp, #16]
	uint8_t fOffset = font[0];	/* Offset of character */
 8000b5a:	9209      	str	r2, [sp, #36]	; 0x24
	uint8_t fWidth = font[1];	/* Width of font */
 8000b5c:	9308      	str	r3, [sp, #32]

	while (*str)
 8000b5e:	7803      	ldrb	r3, [r0, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d065      	beq.n	8000c30 <ILI9341_DrawText+0xfc>
	if ((ch < 31) || (ch > 127)) return;
 8000b64:	001a      	movs	r2, r3
 8000b66:	3a1f      	subs	r2, #31
 8000b68:	2a60      	cmp	r2, #96	; 0x60
 8000b6a:	d84b      	bhi.n	8000c04 <ILI9341_DrawText+0xd0>
	fWidth = font[1];
 8000b6c:	9904      	ldr	r1, [sp, #16]
	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000b6e:	3b20      	subs	r3, #32
	fBPL = font[3];
 8000b70:	78ca      	ldrb	r2, [r1, #3]
	fHeight = font[2];
 8000b72:	788c      	ldrb	r4, [r1, #2]
	fBPL = font[3];
 8000b74:	4690      	mov	r8, r2
	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000b76:	780a      	ldrb	r2, [r1, #0]
	fWidth = font[1];
 8000b78:	784f      	ldrb	r7, [r1, #1]
	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000b7a:	435a      	muls	r2, r3
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000b7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000b7e:	9206      	str	r2, [sp, #24]
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000b80:	9100      	str	r1, [sp, #0]
 8000b82:	0023      	movs	r3, r4
 8000b84:	003a      	movs	r2, r7
 8000b86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000b88:	9803      	ldr	r0, [sp, #12]
	fHeight = font[2];
 8000b8a:	9405      	str	r4, [sp, #20]
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000b8c:	f001 f910 	bl	8001db0 <ILI9341_DrawRectangle>
	for (int j=0; j < fHeight; j++)
 8000b90:	2c00      	cmp	r4, #0
 8000b92:	d035      	beq.n	8000c00 <ILI9341_DrawText+0xcc>
		for (int i=0; i < fWidth; i++)
 8000b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b96:	4699      	mov	r9, r3
	for (int j=0; j < fHeight; j++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	469a      	mov	sl, r3
 8000b9c:	2f00      	cmp	r7, #0
 8000b9e:	d02f      	beq.n	8000c00 <ILI9341_DrawText+0xcc>
			uint8_t b = 1 << (j & 0x07);
 8000ba0:	4652      	mov	r2, sl
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	2601      	movs	r6, #1
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	409e      	lsls	r6, r3
 8000baa:	9b06      	ldr	r3, [sp, #24]
 8000bac:	b2f6      	uxtb	r6, r6
 8000bae:	469c      	mov	ip, r3
 8000bb0:	9b04      	ldr	r3, [sp, #16]
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000bb2:	10d4      	asrs	r4, r2, #3
 8000bb4:	4464      	add	r4, ip
 8000bb6:	469c      	mov	ip, r3
 8000bb8:	0033      	movs	r3, r6
		for (int i=0; i < fWidth; i++)
 8000bba:	2500      	movs	r5, #0
 8000bbc:	4646      	mov	r6, r8
 8000bbe:	4464      	add	r4, ip
 8000bc0:	4698      	mov	r8, r3
 8000bc2:	e003      	b.n	8000bcc <ILI9341_DrawText+0x98>
 8000bc4:	3501      	adds	r5, #1
 8000bc6:	19a4      	adds	r4, r4, r6
 8000bc8:	42bd      	cmp	r5, r7
 8000bca:	da0e      	bge.n	8000bea <ILI9341_DrawText+0xb6>
			if (( z & b ) != 0x00)
 8000bcc:	4642      	mov	r2, r8
 8000bce:	7963      	ldrb	r3, [r4, #5]
 8000bd0:	4213      	tst	r3, r2
 8000bd2:	d0f7      	beq.n	8000bc4 <ILI9341_DrawText+0x90>
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000bd4:	9b03      	ldr	r3, [sp, #12]
 8000bd6:	465a      	mov	r2, fp
 8000bd8:	1958      	adds	r0, r3, r5
 8000bda:	4649      	mov	r1, r9
 8000bdc:	b280      	uxth	r0, r0
		for (int i=0; i < fWidth; i++)
 8000bde:	3501      	adds	r5, #1
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000be0:	f001 f8da 	bl	8001d98 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000be4:	19a4      	adds	r4, r4, r6
 8000be6:	42bd      	cmp	r5, r7
 8000be8:	dbf0      	blt.n	8000bcc <ILI9341_DrawText+0x98>
	for (int j=0; j < fHeight; j++)
 8000bea:	2301      	movs	r3, #1
 8000bec:	469c      	mov	ip, r3
 8000bee:	464b      	mov	r3, r9
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	4699      	mov	r9, r3
 8000bf6:	9b05      	ldr	r3, [sp, #20]
 8000bf8:	44e2      	add	sl, ip
 8000bfa:	46b0      	mov	r8, r6
 8000bfc:	459a      	cmp	sl, r3
 8000bfe:	dbcf      	blt.n	8000ba0 <ILI9341_DrawText+0x6c>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000c00:	9b07      	ldr	r3, [sp, #28]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c06:	3b20      	subs	r3, #32
 8000c08:	4353      	muls	r3, r2
		charWidth = tempChar[0];
 8000c0a:	9a04      	ldr	r2, [sp, #16]

		if(charWidth + 2 < fWidth)
 8000c0c:	9908      	ldr	r1, [sp, #32]
		charWidth = tempChar[0];
 8000c0e:	4694      	mov	ip, r2
 8000c10:	4463      	add	r3, ip
 8000c12:	791b      	ldrb	r3, [r3, #4]
		if(charWidth + 2 < fWidth)
 8000c14:	1c9a      	adds	r2, r3, #2
 8000c16:	428a      	cmp	r2, r1
 8000c18:	da11      	bge.n	8000c3e <ILI9341_DrawText+0x10a>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000c1a:	9a03      	ldr	r2, [sp, #12]
 8000c1c:	3202      	adds	r2, #2
 8000c1e:	18d3      	adds	r3, r2, r3
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	9303      	str	r3, [sp, #12]
		else
		{
			X += fWidth;
		}

		str++;
 8000c24:	9b07      	ldr	r3, [sp, #28]
 8000c26:	3301      	adds	r3, #1
 8000c28:	9307      	str	r3, [sp, #28]
	while (*str)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d199      	bne.n	8000b64 <ILI9341_DrawText+0x30>
	}
}
 8000c30:	b00d      	add	sp, #52	; 0x34
 8000c32:	bcf0      	pop	{r4, r5, r6, r7}
 8000c34:	46bb      	mov	fp, r7
 8000c36:	46b2      	mov	sl, r6
 8000c38:	46a9      	mov	r9, r5
 8000c3a:	46a0      	mov	r8, r4
 8000c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			X += fWidth;
 8000c3e:	468c      	mov	ip, r1
 8000c40:	9b03      	ldr	r3, [sp, #12]
 8000c42:	4463      	add	r3, ip
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	9303      	str	r3, [sp, #12]
 8000c48:	e7ec      	b.n	8000c24 <ILI9341_DrawText+0xf0>
 8000c4a:	46c0      	nop			; (mov r8, r8)

08000c4c <ILI9341_DrawPixel.part.0>:
{
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
}

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
 8000c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4e:	b085      	sub	sp, #20
{
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000c50:	ae02      	add	r6, sp, #8
 8000c52:	0a03      	lsrs	r3, r0, #8
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000c54:	ac03      	add	r4, sp, #12
	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000c56:	7033      	strb	r3, [r6, #0]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000c58:	b2c9      	uxtb	r1, r1
	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000c5a:	b2c3      	uxtb	r3, r0
 8000c5c:	7073      	strb	r3, [r6, #1]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000c5e:	7061      	strb	r1, [r4, #1]
	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000c60:	3301      	adds	r3, #1
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000c62:	3101      	adds	r1, #1
	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000c64:	70f3      	strb	r3, [r6, #3]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000c66:	70e1      	strb	r1, [r4, #3]
 8000c68:	2300      	movs	r3, #0
	uint8_t bufferC[2] = {color>>8, color};
 8000c6a:	4669      	mov	r1, sp
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000c6c:	7023      	strb	r3, [r4, #0]
 8000c6e:	70a3      	strb	r3, [r4, #2]
	uint8_t bufferC[2] = {color>>8, color};
 8000c70:	714a      	strb	r2, [r1, #5]
 8000c72:	0a13      	lsrs	r3, r2, #8
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000c74:	2280      	movs	r2, #128	; 0x80
	uint8_t bufferC[2] = {color>>8, color};
 8000c76:	710b      	strb	r3, [r1, #4]
	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000c78:	3001      	adds	r0, #1
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000c7a:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <ILI9341_DrawPixel.part.0+0x118>)
 8000c7c:	0292      	lsls	r2, r2, #10
	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000c7e:	1200      	asrs	r0, r0, #8
 8000c80:	70b0      	strb	r0, [r6, #2]
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000c82:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	0252      	lsls	r2, r2, #9
 8000c88:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8000c8a:	232a      	movs	r3, #42	; 0x2a
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000c8c:	2702      	movs	r7, #2
 8000c8e:	4d36      	ldr	r5, [pc, #216]	; (8000d68 <ILI9341_DrawPixel.part.0+0x11c>)
 8000c90:	70cb      	strb	r3, [r1, #3]
 8000c92:	682a      	ldr	r2, [r5, #0]
 8000c94:	6893      	ldr	r3, [r2, #8]
 8000c96:	421f      	tst	r7, r3
 8000c98:	d0fc      	beq.n	8000c94 <ILI9341_DrawPixel.part.0+0x48>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000c9a:	4669      	mov	r1, sp
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	3103      	adds	r1, #3
 8000ca2:	0028      	movs	r0, r5
 8000ca4:	f002 fc10 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000ca8:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000caa:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <ILI9341_DrawPixel.part.0+0x118>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000cac:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000cae:	619f      	str	r7, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000cb0:	619a      	str	r2, [r3, #24]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	6829      	ldr	r1, [r5, #0]
 8000cb6:	688b      	ldr	r3, [r1, #8]
 8000cb8:	421a      	tst	r2, r3
 8000cba:	d0fc      	beq.n	8000cb6 <ILI9341_DrawPixel.part.0+0x6a>
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
 8000cbc:	230a      	movs	r3, #10
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	0031      	movs	r1, r6
 8000cc2:	0028      	movs	r0, r5
 8000cc4:	f002 fc00 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000cc8:	2280      	movs	r2, #128	; 0x80
 8000cca:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <ILI9341_DrawPixel.part.0+0x118>)
 8000ccc:	0292      	lsls	r2, r2, #10
 8000cce:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	0252      	lsls	r2, r2, #9
 8000cd4:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8000cd6:	466a      	mov	r2, sp
 8000cd8:	232b      	movs	r3, #43	; 0x2b
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000cda:	2602      	movs	r6, #2
 8000cdc:	70d3      	strb	r3, [r2, #3]
 8000cde:	682a      	ldr	r2, [r5, #0]
 8000ce0:	6893      	ldr	r3, [r2, #8]
 8000ce2:	421e      	tst	r6, r3
 8000ce4:	d0fc      	beq.n	8000ce0 <ILI9341_DrawPixel.part.0+0x94>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000ce6:	4669      	mov	r1, sp
 8000ce8:	230a      	movs	r3, #10
 8000cea:	2201      	movs	r2, #1
 8000cec:	3103      	adds	r1, #3
 8000cee:	0028      	movs	r0, r5
 8000cf0:	f002 fbea 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000cf4:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <ILI9341_DrawPixel.part.0+0x118>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000cf8:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000cfa:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000cfc:	619a      	str	r2, [r3, #24]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000cfe:	2202      	movs	r2, #2
 8000d00:	6829      	ldr	r1, [r5, #0]
 8000d02:	688b      	ldr	r3, [r1, #8]
 8000d04:	421a      	tst	r2, r3
 8000d06:	d0fc      	beq.n	8000d02 <ILI9341_DrawPixel.part.0+0xb6>
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
 8000d08:	230a      	movs	r3, #10
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	0021      	movs	r1, r4
 8000d0e:	0028      	movs	r0, r5
 8000d10:	f002 fbda 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <ILI9341_DrawPixel.part.0+0x118>)
 8000d18:	0292      	lsls	r2, r2, #10
 8000d1a:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	0252      	lsls	r2, r2, #9
 8000d20:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8000d22:	466a      	mov	r2, sp
 8000d24:	232c      	movs	r3, #44	; 0x2c
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000d26:	2402      	movs	r4, #2
 8000d28:	70d3      	strb	r3, [r2, #3]
 8000d2a:	682a      	ldr	r2, [r5, #0]
 8000d2c:	6893      	ldr	r3, [r2, #8]
 8000d2e:	421c      	tst	r4, r3
 8000d30:	d0fc      	beq.n	8000d2c <ILI9341_DrawPixel.part.0+0xe0>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000d32:	4669      	mov	r1, sp
 8000d34:	230a      	movs	r3, #10
 8000d36:	2201      	movs	r2, #1
 8000d38:	3103      	adds	r1, #3
 8000d3a:	0028      	movs	r0, r5
 8000d3c:	f002 fbc4 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000d40:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <ILI9341_DrawPixel.part.0+0x118>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000d44:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000d46:	619c      	str	r4, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000d48:	619a      	str	r2, [r3, #24]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	6829      	ldr	r1, [r5, #0]
 8000d4e:	688b      	ldr	r3, [r1, #8]
 8000d50:	421a      	tst	r2, r3
 8000d52:	d0fc      	beq.n	8000d4e <ILI9341_DrawPixel.part.0+0x102>
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
 8000d54:	230a      	movs	r3, #10
 8000d56:	2202      	movs	r2, #2
 8000d58:	0028      	movs	r0, r5
 8000d5a:	a901      	add	r1, sp, #4
 8000d5c:	f002 fbb4 	bl	80034c8 <HAL_SPI_Transmit>
	ILI9341_WriteCommand(0x2B);						//ADDRESS
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA

	ILI9341_WriteCommand(0x2C);						//ADDRESS
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
}
 8000d60:	b005      	add	sp, #20
 8000d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d64:	50000400 	.word	0x50000400
 8000d68:	2000003c 	.word	0x2000003c

08000d6c <ILI9341_SetAddress>:
{
 8000d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6e:	46c6      	mov	lr, r8
 8000d70:	b500      	push	{lr}
 8000d72:	b082      	sub	sp, #8
	buffer[0] = x1 >> 8;
 8000d74:	ac01      	add	r4, sp, #4
{
 8000d76:	001f      	movs	r7, r3
	buffer[0] = x1 >> 8;
 8000d78:	0a03      	lsrs	r3, r0, #8
 8000d7a:	7023      	strb	r3, [r4, #0]
	buffer[3] = x2;
 8000d7c:	70e2      	strb	r2, [r4, #3]
	buffer[2] = x2 >> 8;
 8000d7e:	0a13      	lsrs	r3, r2, #8
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000d80:	2280      	movs	r2, #128	; 0x80
	buffer[2] = x2 >> 8;
 8000d82:	70a3      	strb	r3, [r4, #2]
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000d84:	4b37      	ldr	r3, [pc, #220]	; (8000e64 <ILI9341_SetAddress+0xf8>)
 8000d86:	0292      	lsls	r2, r2, #10
	buffer[1] = x1;
 8000d88:	7060      	strb	r0, [r4, #1]
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000d8a:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	0252      	lsls	r2, r2, #9
 8000d90:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8000d92:	232a      	movs	r3, #42	; 0x2a
 8000d94:	466a      	mov	r2, sp
{
 8000d96:	4688      	mov	r8, r1
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000d98:	2502      	movs	r5, #2
 8000d9a:	4e33      	ldr	r6, [pc, #204]	; (8000e68 <ILI9341_SetAddress+0xfc>)
 8000d9c:	70d3      	strb	r3, [r2, #3]
 8000d9e:	6833      	ldr	r3, [r6, #0]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	4215      	tst	r5, r2
 8000da4:	d0fc      	beq.n	8000da0 <ILI9341_SetAddress+0x34>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000da6:	4669      	mov	r1, sp
 8000da8:	230a      	movs	r3, #10
 8000daa:	2201      	movs	r2, #1
 8000dac:	0030      	movs	r0, r6
 8000dae:	3103      	adds	r1, #3
 8000db0:	f002 fb8a 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000db4:	2280      	movs	r2, #128	; 0x80
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000db6:	2002      	movs	r0, #2
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000db8:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <ILI9341_SetAddress+0xf8>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000dba:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000dbc:	619d      	str	r5, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000dbe:	619a      	str	r2, [r3, #24]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000dc0:	6833      	ldr	r3, [r6, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	4210      	tst	r0, r2
 8000dc6:	d0fc      	beq.n	8000dc2 <ILI9341_SetAddress+0x56>
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
 8000dc8:	230a      	movs	r3, #10
 8000dca:	2204      	movs	r2, #4
 8000dcc:	0021      	movs	r1, r4
 8000dce:	0030      	movs	r0, r6
 8000dd0:	f002 fb7a 	bl	80034c8 <HAL_SPI_Transmit>
	buffer[0] = y1 >> 8;
 8000dd4:	4643      	mov	r3, r8
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	7023      	strb	r3, [r4, #0]
	buffer[1] = y1;
 8000dda:	4643      	mov	r3, r8
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000ddc:	2280      	movs	r2, #128	; 0x80
	buffer[1] = y1;
 8000dde:	7063      	strb	r3, [r4, #1]
	buffer[2] = y2 >> 8;
 8000de0:	0a3b      	lsrs	r3, r7, #8
 8000de2:	70a3      	strb	r3, [r4, #2]
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <ILI9341_SetAddress+0xf8>)
 8000de6:	0292      	lsls	r2, r2, #10
	buffer[3] = y2;
 8000de8:	70e7      	strb	r7, [r4, #3]
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000dea:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000dec:	2280      	movs	r2, #128	; 0x80
 8000dee:	0252      	lsls	r2, r2, #9
 8000df0:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8000df2:	466a      	mov	r2, sp
 8000df4:	232b      	movs	r3, #43	; 0x2b
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000df6:	2502      	movs	r5, #2
 8000df8:	70d3      	strb	r3, [r2, #3]
 8000dfa:	6832      	ldr	r2, [r6, #0]
 8000dfc:	6893      	ldr	r3, [r2, #8]
 8000dfe:	421d      	tst	r5, r3
 8000e00:	d0fc      	beq.n	8000dfc <ILI9341_SetAddress+0x90>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000e02:	4669      	mov	r1, sp
 8000e04:	230a      	movs	r3, #10
 8000e06:	2201      	movs	r2, #1
 8000e08:	3103      	adds	r1, #3
 8000e0a:	0030      	movs	r0, r6
 8000e0c:	f002 fb5c 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000e10:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <ILI9341_SetAddress+0xf8>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000e14:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000e16:	619d      	str	r5, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000e18:	619a      	str	r2, [r3, #24]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	6831      	ldr	r1, [r6, #0]
 8000e1e:	688b      	ldr	r3, [r1, #8]
 8000e20:	421a      	tst	r2, r3
 8000e22:	d0fc      	beq.n	8000e1e <ILI9341_SetAddress+0xb2>
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
 8000e24:	230a      	movs	r3, #10
 8000e26:	2204      	movs	r2, #4
 8000e28:	0021      	movs	r1, r4
 8000e2a:	0030      	movs	r0, r6
 8000e2c:	f002 fb4c 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <ILI9341_SetAddress+0xf8>)
 8000e34:	0292      	lsls	r2, r2, #10
 8000e36:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	0252      	lsls	r2, r2, #9
 8000e3c:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8000e3e:	466a      	mov	r2, sp
 8000e40:	232c      	movs	r3, #44	; 0x2c
 8000e42:	70d3      	strb	r3, [r2, #3]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000e44:	2202      	movs	r2, #2
 8000e46:	6831      	ldr	r1, [r6, #0]
 8000e48:	688b      	ldr	r3, [r1, #8]
 8000e4a:	421a      	tst	r2, r3
 8000e4c:	d0fc      	beq.n	8000e48 <ILI9341_SetAddress+0xdc>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000e4e:	4669      	mov	r1, sp
 8000e50:	230a      	movs	r3, #10
 8000e52:	2201      	movs	r2, #1
 8000e54:	0030      	movs	r0, r6
 8000e56:	3103      	adds	r1, #3
 8000e58:	f002 fb36 	bl	80034c8 <HAL_SPI_Transmit>
}
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bc80      	pop	{r7}
 8000e60:	46b8      	mov	r8, r7
 8000e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e64:	50000400 	.word	0x50000400
 8000e68:	2000003c 	.word	0x2000003c

08000e6c <ILI9341_Init>:
	LCD_RST_GPIO_Port->BSRR = LCD_RST_PIN << 16;
 8000e6c:	2380      	movs	r3, #128	; 0x80
{
 8000e6e:	b570      	push	{r4, r5, r6, lr}
	LCD_RST_GPIO_Port->BSRR = LCD_RST_PIN;
 8000e70:	2610      	movs	r6, #16
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000e72:	2580      	movs	r5, #128	; 0x80
	LCD_RST_GPIO_Port->BSRR = LCD_RST_PIN;
 8000e74:	4ce2      	ldr	r4, [pc, #904]	; (8001200 <ILI9341_Init+0x394>)
	LCD_RST_GPIO_Port->BSRR = LCD_RST_PIN << 16;
 8000e76:	035b      	lsls	r3, r3, #13
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000e78:	026d      	lsls	r5, r5, #9
{
 8000e7a:	b082      	sub	sp, #8
	LCD_RST_GPIO_Port->BSRR = LCD_RST_PIN;
 8000e7c:	61a6      	str	r6, [r4, #24]
	HAL_Delay(10);
 8000e7e:	200a      	movs	r0, #10
	LCD_RST_GPIO_Port->BSRR = LCD_RST_PIN << 16;
 8000e80:	61a3      	str	r3, [r4, #24]
	HAL_Delay(10);
 8000e82:	f001 fb2f 	bl	80024e4 <HAL_Delay>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000e86:	61a5      	str	r5, [r4, #24]
	HAL_Delay(10);
 8000e88:	200a      	movs	r0, #10
 8000e8a:	f001 fb2b 	bl	80024e4 <HAL_Delay>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	029b      	lsls	r3, r3, #10
	LCD_RST_GPIO_Port->BSRR = LCD_RST_PIN;
 8000e92:	61a6      	str	r6, [r4, #24]
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000e94:	61a3      	str	r3, [r4, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000e96:	466b      	mov	r3, sp
 8000e98:	61a5      	str	r5, [r4, #24]
	ILI9341_SPI_Tx(cmd);
 8000e9a:	1ddd      	adds	r5, r3, #7
 8000e9c:	2301      	movs	r3, #1
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	4cd8      	ldr	r4, [pc, #864]	; (8001204 <ILI9341_Init+0x398>)
 8000ea2:	702b      	strb	r3, [r5, #0]
 8000ea4:	6821      	ldr	r1, [r4, #0]
 8000ea6:	688b      	ldr	r3, [r1, #8]
 8000ea8:	421a      	tst	r2, r3
 8000eaa:	d0fc      	beq.n	8000ea6 <ILI9341_Init+0x3a>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000eac:	230a      	movs	r3, #10
 8000eae:	2201      	movs	r2, #1
 8000eb0:	0029      	movs	r1, r5
 8000eb2:	0020      	movs	r0, r4
 8000eb4:	f002 fb08 	bl	80034c8 <HAL_SPI_Transmit>
	HAL_Delay(10);
 8000eb8:	200a      	movs	r0, #10
 8000eba:	f001 fb13 	bl	80024e4 <HAL_Delay>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	4bcf      	ldr	r3, [pc, #828]	; (8001200 <ILI9341_Init+0x394>)
 8000ec2:	0292      	lsls	r2, r2, #10
 8000ec4:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	0252      	lsls	r2, r2, #9
 8000eca:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8000ecc:	23cb      	movs	r3, #203	; 0xcb
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000ece:	2602      	movs	r6, #2
 8000ed0:	6822      	ldr	r2, [r4, #0]
 8000ed2:	702b      	strb	r3, [r5, #0]
 8000ed4:	6893      	ldr	r3, [r2, #8]
 8000ed6:	421e      	tst	r6, r3
 8000ed8:	d0fc      	beq.n	8000ed4 <ILI9341_Init+0x68>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000eda:	230a      	movs	r3, #10
 8000edc:	2201      	movs	r2, #1
 8000ede:	0029      	movs	r1, r5
 8000ee0:	0020      	movs	r0, r4
 8000ee2:	f002 faf1 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000ee6:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000ee8:	4bc5      	ldr	r3, [pc, #788]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000eea:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000eec:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000eee:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8000ef0:	2339      	movs	r3, #57	; 0x39
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000ef2:	2602      	movs	r6, #2
 8000ef4:	6822      	ldr	r2, [r4, #0]
 8000ef6:	702b      	strb	r3, [r5, #0]
 8000ef8:	6893      	ldr	r3, [r2, #8]
 8000efa:	421e      	tst	r6, r3
 8000efc:	d0fc      	beq.n	8000ef8 <ILI9341_Init+0x8c>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000efe:	230a      	movs	r3, #10
 8000f00:	2201      	movs	r2, #1
 8000f02:	0029      	movs	r1, r5
 8000f04:	0020      	movs	r0, r4
 8000f06:	f002 fadf 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000f0a:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000f0c:	4bbc      	ldr	r3, [pc, #752]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000f0e:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000f10:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000f12:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8000f14:	232c      	movs	r3, #44	; 0x2c
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000f16:	2602      	movs	r6, #2
 8000f18:	6822      	ldr	r2, [r4, #0]
 8000f1a:	702b      	strb	r3, [r5, #0]
 8000f1c:	6893      	ldr	r3, [r2, #8]
 8000f1e:	421e      	tst	r6, r3
 8000f20:	d0fc      	beq.n	8000f1c <ILI9341_Init+0xb0>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000f22:	230a      	movs	r3, #10
 8000f24:	2201      	movs	r2, #1
 8000f26:	0029      	movs	r1, r5
 8000f28:	0020      	movs	r0, r4
 8000f2a:	f002 facd 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000f2e:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000f30:	4bb3      	ldr	r3, [pc, #716]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000f32:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000f34:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000f36:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8000f38:	2300      	movs	r3, #0
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000f3a:	2602      	movs	r6, #2
 8000f3c:	6822      	ldr	r2, [r4, #0]
 8000f3e:	702b      	strb	r3, [r5, #0]
 8000f40:	6893      	ldr	r3, [r2, #8]
 8000f42:	421e      	tst	r6, r3
 8000f44:	d0fc      	beq.n	8000f40 <ILI9341_Init+0xd4>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000f46:	230a      	movs	r3, #10
 8000f48:	2201      	movs	r2, #1
 8000f4a:	0029      	movs	r1, r5
 8000f4c:	0020      	movs	r0, r4
 8000f4e:	f002 fabb 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000f52:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000f54:	4baa      	ldr	r3, [pc, #680]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000f56:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000f58:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000f5a:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8000f5c:	2334      	movs	r3, #52	; 0x34
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000f5e:	2602      	movs	r6, #2
 8000f60:	6822      	ldr	r2, [r4, #0]
 8000f62:	702b      	strb	r3, [r5, #0]
 8000f64:	6893      	ldr	r3, [r2, #8]
 8000f66:	421e      	tst	r6, r3
 8000f68:	d0fc      	beq.n	8000f64 <ILI9341_Init+0xf8>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	0029      	movs	r1, r5
 8000f70:	0020      	movs	r0, r4
 8000f72:	f002 faa9 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000f76:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000f78:	4ba1      	ldr	r3, [pc, #644]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000f7a:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000f7c:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000f7e:	619a      	str	r2, [r3, #24]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000f80:	2202      	movs	r2, #2
 8000f82:	6821      	ldr	r1, [r4, #0]
 8000f84:	702e      	strb	r6, [r5, #0]
 8000f86:	688b      	ldr	r3, [r1, #8]
 8000f88:	421a      	tst	r2, r3
 8000f8a:	d0fc      	beq.n	8000f86 <ILI9341_Init+0x11a>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000f8c:	230a      	movs	r3, #10
 8000f8e:	2201      	movs	r2, #1
 8000f90:	0029      	movs	r1, r5
 8000f92:	0020      	movs	r0, r4
 8000f94:	f002 fa98 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	4b99      	ldr	r3, [pc, #612]	; (8001200 <ILI9341_Init+0x394>)
 8000f9c:	0292      	lsls	r2, r2, #10
 8000f9e:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	0252      	lsls	r2, r2, #9
 8000fa4:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8000fa6:	23cf      	movs	r3, #207	; 0xcf
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000fa8:	2602      	movs	r6, #2
 8000faa:	6822      	ldr	r2, [r4, #0]
 8000fac:	702b      	strb	r3, [r5, #0]
 8000fae:	6893      	ldr	r3, [r2, #8]
 8000fb0:	421e      	tst	r6, r3
 8000fb2:	d0fc      	beq.n	8000fae <ILI9341_Init+0x142>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	0029      	movs	r1, r5
 8000fba:	0020      	movs	r0, r4
 8000fbc:	f002 fa84 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000fc0:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000fc2:	4b8f      	ldr	r3, [pc, #572]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000fc4:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000fc6:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000fc8:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8000fca:	2300      	movs	r3, #0
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000fcc:	2602      	movs	r6, #2
 8000fce:	6822      	ldr	r2, [r4, #0]
 8000fd0:	702b      	strb	r3, [r5, #0]
 8000fd2:	6893      	ldr	r3, [r2, #8]
 8000fd4:	421e      	tst	r6, r3
 8000fd6:	d0fc      	beq.n	8000fd2 <ILI9341_Init+0x166>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000fd8:	230a      	movs	r3, #10
 8000fda:	2201      	movs	r2, #1
 8000fdc:	0029      	movs	r1, r5
 8000fde:	0020      	movs	r0, r4
 8000fe0:	f002 fa72 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000fe4:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000fe6:	4b86      	ldr	r3, [pc, #536]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000fe8:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8000fea:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8000fec:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8000fee:	23c1      	movs	r3, #193	; 0xc1
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000ff0:	2602      	movs	r6, #2
 8000ff2:	6822      	ldr	r2, [r4, #0]
 8000ff4:	702b      	strb	r3, [r5, #0]
 8000ff6:	6893      	ldr	r3, [r2, #8]
 8000ff8:	421e      	tst	r6, r3
 8000ffa:	d0fc      	beq.n	8000ff6 <ILI9341_Init+0x18a>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	2201      	movs	r2, #1
 8001000:	0029      	movs	r1, r5
 8001002:	0020      	movs	r0, r4
 8001004:	f002 fa60 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001008:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800100a:	4b7d      	ldr	r3, [pc, #500]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800100c:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800100e:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001010:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001012:	2330      	movs	r3, #48	; 0x30
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001014:	2202      	movs	r2, #2
 8001016:	6821      	ldr	r1, [r4, #0]
 8001018:	702b      	strb	r3, [r5, #0]
 800101a:	688b      	ldr	r3, [r1, #8]
 800101c:	421a      	tst	r2, r3
 800101e:	d0fc      	beq.n	800101a <ILI9341_Init+0x1ae>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001020:	230a      	movs	r3, #10
 8001022:	2201      	movs	r2, #1
 8001024:	0029      	movs	r1, r5
 8001026:	0020      	movs	r0, r4
 8001028:	f002 fa4e 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	4b74      	ldr	r3, [pc, #464]	; (8001200 <ILI9341_Init+0x394>)
 8001030:	0292      	lsls	r2, r2, #10
 8001032:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	0252      	lsls	r2, r2, #9
 8001038:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 800103a:	23e8      	movs	r3, #232	; 0xe8
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800103c:	2602      	movs	r6, #2
 800103e:	6822      	ldr	r2, [r4, #0]
 8001040:	702b      	strb	r3, [r5, #0]
 8001042:	6893      	ldr	r3, [r2, #8]
 8001044:	421e      	tst	r6, r3
 8001046:	d0fc      	beq.n	8001042 <ILI9341_Init+0x1d6>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001048:	230a      	movs	r3, #10
 800104a:	2201      	movs	r2, #1
 800104c:	0029      	movs	r1, r5
 800104e:	0020      	movs	r0, r4
 8001050:	f002 fa3a 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001054:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001056:	4b6a      	ldr	r3, [pc, #424]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001058:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800105a:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800105c:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 800105e:	2385      	movs	r3, #133	; 0x85
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001060:	2602      	movs	r6, #2
 8001062:	6822      	ldr	r2, [r4, #0]
 8001064:	702b      	strb	r3, [r5, #0]
 8001066:	6893      	ldr	r3, [r2, #8]
 8001068:	421e      	tst	r6, r3
 800106a:	d0fc      	beq.n	8001066 <ILI9341_Init+0x1fa>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800106c:	230a      	movs	r3, #10
 800106e:	2201      	movs	r2, #1
 8001070:	0029      	movs	r1, r5
 8001072:	0020      	movs	r0, r4
 8001074:	f002 fa28 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001078:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800107a:	4b61      	ldr	r3, [pc, #388]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800107c:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800107e:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001080:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001082:	2300      	movs	r3, #0
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001084:	2602      	movs	r6, #2
 8001086:	6822      	ldr	r2, [r4, #0]
 8001088:	702b      	strb	r3, [r5, #0]
 800108a:	6893      	ldr	r3, [r2, #8]
 800108c:	421e      	tst	r6, r3
 800108e:	d0fc      	beq.n	800108a <ILI9341_Init+0x21e>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001090:	230a      	movs	r3, #10
 8001092:	2201      	movs	r2, #1
 8001094:	0029      	movs	r1, r5
 8001096:	0020      	movs	r0, r4
 8001098:	f002 fa16 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800109c:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800109e:	4b58      	ldr	r3, [pc, #352]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80010a0:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80010a2:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80010a4:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80010a6:	2378      	movs	r3, #120	; 0x78
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80010a8:	2202      	movs	r2, #2
 80010aa:	6821      	ldr	r1, [r4, #0]
 80010ac:	702b      	strb	r3, [r5, #0]
 80010ae:	688b      	ldr	r3, [r1, #8]
 80010b0:	421a      	tst	r2, r3
 80010b2:	d0fc      	beq.n	80010ae <ILI9341_Init+0x242>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80010b4:	230a      	movs	r3, #10
 80010b6:	2201      	movs	r2, #1
 80010b8:	0029      	movs	r1, r5
 80010ba:	0020      	movs	r0, r4
 80010bc:	f002 fa04 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	4b4f      	ldr	r3, [pc, #316]	; (8001200 <ILI9341_Init+0x394>)
 80010c4:	0292      	lsls	r2, r2, #10
 80010c6:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80010c8:	2280      	movs	r2, #128	; 0x80
 80010ca:	0252      	lsls	r2, r2, #9
 80010cc:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 80010ce:	23ea      	movs	r3, #234	; 0xea
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80010d0:	2602      	movs	r6, #2
 80010d2:	6822      	ldr	r2, [r4, #0]
 80010d4:	702b      	strb	r3, [r5, #0]
 80010d6:	6893      	ldr	r3, [r2, #8]
 80010d8:	421e      	tst	r6, r3
 80010da:	d0fc      	beq.n	80010d6 <ILI9341_Init+0x26a>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80010dc:	230a      	movs	r3, #10
 80010de:	2201      	movs	r2, #1
 80010e0:	0029      	movs	r1, r5
 80010e2:	0020      	movs	r0, r4
 80010e4:	f002 f9f0 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80010e8:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80010ea:	4b45      	ldr	r3, [pc, #276]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80010ec:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80010ee:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80010f0:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80010f2:	2300      	movs	r3, #0
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80010f4:	2602      	movs	r6, #2
 80010f6:	6822      	ldr	r2, [r4, #0]
 80010f8:	702b      	strb	r3, [r5, #0]
 80010fa:	6893      	ldr	r3, [r2, #8]
 80010fc:	421e      	tst	r6, r3
 80010fe:	d0fc      	beq.n	80010fa <ILI9341_Init+0x28e>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001100:	230a      	movs	r3, #10
 8001102:	2201      	movs	r2, #1
 8001104:	0029      	movs	r1, r5
 8001106:	0020      	movs	r0, r4
 8001108:	f002 f9de 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800110c:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800110e:	4b3c      	ldr	r3, [pc, #240]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001110:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001112:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001114:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001116:	2300      	movs	r3, #0
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001118:	2202      	movs	r2, #2
 800111a:	6821      	ldr	r1, [r4, #0]
 800111c:	702b      	strb	r3, [r5, #0]
 800111e:	688b      	ldr	r3, [r1, #8]
 8001120:	421a      	tst	r2, r3
 8001122:	d0fc      	beq.n	800111e <ILI9341_Init+0x2b2>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001124:	230a      	movs	r3, #10
 8001126:	2201      	movs	r2, #1
 8001128:	0029      	movs	r1, r5
 800112a:	0020      	movs	r0, r4
 800112c:	f002 f9cc 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	4b33      	ldr	r3, [pc, #204]	; (8001200 <ILI9341_Init+0x394>)
 8001134:	0292      	lsls	r2, r2, #10
 8001136:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	0252      	lsls	r2, r2, #9
 800113c:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 800113e:	23ed      	movs	r3, #237	; 0xed
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001140:	2602      	movs	r6, #2
 8001142:	6822      	ldr	r2, [r4, #0]
 8001144:	702b      	strb	r3, [r5, #0]
 8001146:	6893      	ldr	r3, [r2, #8]
 8001148:	421e      	tst	r6, r3
 800114a:	d0fc      	beq.n	8001146 <ILI9341_Init+0x2da>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800114c:	230a      	movs	r3, #10
 800114e:	2201      	movs	r2, #1
 8001150:	0029      	movs	r1, r5
 8001152:	0020      	movs	r0, r4
 8001154:	f002 f9b8 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001158:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800115c:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800115e:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001160:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001162:	2364      	movs	r3, #100	; 0x64
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001164:	2602      	movs	r6, #2
 8001166:	6822      	ldr	r2, [r4, #0]
 8001168:	702b      	strb	r3, [r5, #0]
 800116a:	6893      	ldr	r3, [r2, #8]
 800116c:	421e      	tst	r6, r3
 800116e:	d0fc      	beq.n	800116a <ILI9341_Init+0x2fe>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001170:	230a      	movs	r3, #10
 8001172:	2201      	movs	r2, #1
 8001174:	0029      	movs	r1, r5
 8001176:	0020      	movs	r0, r4
 8001178:	f002 f9a6 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800117c:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001180:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001182:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001184:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001186:	2303      	movs	r3, #3
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001188:	2602      	movs	r6, #2
 800118a:	6822      	ldr	r2, [r4, #0]
 800118c:	702b      	strb	r3, [r5, #0]
 800118e:	6893      	ldr	r3, [r2, #8]
 8001190:	421e      	tst	r6, r3
 8001192:	d0fc      	beq.n	800118e <ILI9341_Init+0x322>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001194:	230a      	movs	r3, #10
 8001196:	2201      	movs	r2, #1
 8001198:	0029      	movs	r1, r5
 800119a:	0020      	movs	r0, r4
 800119c:	f002 f994 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80011a0:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80011a4:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80011a6:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80011a8:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80011aa:	2312      	movs	r3, #18
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80011ac:	2602      	movs	r6, #2
 80011ae:	6822      	ldr	r2, [r4, #0]
 80011b0:	702b      	strb	r3, [r5, #0]
 80011b2:	6893      	ldr	r3, [r2, #8]
 80011b4:	421e      	tst	r6, r3
 80011b6:	d0fc      	beq.n	80011b2 <ILI9341_Init+0x346>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80011b8:	230a      	movs	r3, #10
 80011ba:	2201      	movs	r2, #1
 80011bc:	0029      	movs	r1, r5
 80011be:	0020      	movs	r0, r4
 80011c0:	f002 f982 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80011c4:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <ILI9341_Init+0x394>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80011c8:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80011ca:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80011cc:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80011ce:	2381      	movs	r3, #129	; 0x81
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80011d0:	2202      	movs	r2, #2
 80011d2:	6821      	ldr	r1, [r4, #0]
 80011d4:	702b      	strb	r3, [r5, #0]
 80011d6:	688b      	ldr	r3, [r1, #8]
 80011d8:	421a      	tst	r2, r3
 80011da:	d0fc      	beq.n	80011d6 <ILI9341_Init+0x36a>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80011dc:	230a      	movs	r3, #10
 80011de:	2201      	movs	r2, #1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0020      	movs	r0, r4
 80011e4:	f002 f970 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <ILI9341_Init+0x394>)
 80011ec:	0292      	lsls	r2, r2, #10
 80011ee:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	0252      	lsls	r2, r2, #9
 80011f4:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 80011f6:	23f7      	movs	r3, #247	; 0xf7
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80011f8:	2602      	movs	r6, #2
 80011fa:	6822      	ldr	r2, [r4, #0]
 80011fc:	702b      	strb	r3, [r5, #0]
 80011fe:	e003      	b.n	8001208 <ILI9341_Init+0x39c>
 8001200:	50000400 	.word	0x50000400
 8001204:	2000003c 	.word	0x2000003c
 8001208:	6893      	ldr	r3, [r2, #8]
 800120a:	421e      	tst	r6, r3
 800120c:	d0fc      	beq.n	8001208 <ILI9341_Init+0x39c>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800120e:	230a      	movs	r3, #10
 8001210:	2201      	movs	r2, #1
 8001212:	0029      	movs	r1, r5
 8001214:	0020      	movs	r0, r4
 8001216:	f002 f957 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800121a:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800121c:	4be6      	ldr	r3, [pc, #920]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800121e:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001220:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001222:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001224:	2320      	movs	r3, #32
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001226:	2202      	movs	r2, #2
 8001228:	6821      	ldr	r1, [r4, #0]
 800122a:	702b      	strb	r3, [r5, #0]
 800122c:	688b      	ldr	r3, [r1, #8]
 800122e:	421a      	tst	r2, r3
 8001230:	d0fc      	beq.n	800122c <ILI9341_Init+0x3c0>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001232:	230a      	movs	r3, #10
 8001234:	2201      	movs	r2, #1
 8001236:	0029      	movs	r1, r5
 8001238:	0020      	movs	r0, r4
 800123a:	f002 f945 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	4bdd      	ldr	r3, [pc, #884]	; (80015b8 <ILI9341_Init+0x74c>)
 8001242:	0292      	lsls	r2, r2, #10
 8001244:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001246:	2280      	movs	r2, #128	; 0x80
 8001248:	0252      	lsls	r2, r2, #9
 800124a:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 800124c:	23c0      	movs	r3, #192	; 0xc0
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800124e:	2602      	movs	r6, #2
 8001250:	6822      	ldr	r2, [r4, #0]
 8001252:	702b      	strb	r3, [r5, #0]
 8001254:	6893      	ldr	r3, [r2, #8]
 8001256:	421e      	tst	r6, r3
 8001258:	d0fc      	beq.n	8001254 <ILI9341_Init+0x3e8>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800125a:	230a      	movs	r3, #10
 800125c:	2201      	movs	r2, #1
 800125e:	0029      	movs	r1, r5
 8001260:	0020      	movs	r0, r4
 8001262:	f002 f931 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001266:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001268:	4bd3      	ldr	r3, [pc, #844]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800126a:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800126c:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800126e:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001270:	2323      	movs	r3, #35	; 0x23
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001272:	2202      	movs	r2, #2
 8001274:	6821      	ldr	r1, [r4, #0]
 8001276:	702b      	strb	r3, [r5, #0]
 8001278:	688b      	ldr	r3, [r1, #8]
 800127a:	421a      	tst	r2, r3
 800127c:	d0fc      	beq.n	8001278 <ILI9341_Init+0x40c>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800127e:	230a      	movs	r3, #10
 8001280:	2201      	movs	r2, #1
 8001282:	0029      	movs	r1, r5
 8001284:	0020      	movs	r0, r4
 8001286:	f002 f91f 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	4bca      	ldr	r3, [pc, #808]	; (80015b8 <ILI9341_Init+0x74c>)
 800128e:	0292      	lsls	r2, r2, #10
 8001290:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	0252      	lsls	r2, r2, #9
 8001296:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8001298:	23c1      	movs	r3, #193	; 0xc1
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800129a:	2602      	movs	r6, #2
 800129c:	6822      	ldr	r2, [r4, #0]
 800129e:	702b      	strb	r3, [r5, #0]
 80012a0:	6893      	ldr	r3, [r2, #8]
 80012a2:	421e      	tst	r6, r3
 80012a4:	d0fc      	beq.n	80012a0 <ILI9341_Init+0x434>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80012a6:	230a      	movs	r3, #10
 80012a8:	2201      	movs	r2, #1
 80012aa:	0029      	movs	r1, r5
 80012ac:	0020      	movs	r0, r4
 80012ae:	f002 f90b 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80012b2:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80012b4:	4bc0      	ldr	r3, [pc, #768]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80012b6:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80012b8:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80012ba:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80012bc:	2310      	movs	r3, #16
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80012be:	2202      	movs	r2, #2
 80012c0:	6821      	ldr	r1, [r4, #0]
 80012c2:	702b      	strb	r3, [r5, #0]
 80012c4:	688b      	ldr	r3, [r1, #8]
 80012c6:	421a      	tst	r2, r3
 80012c8:	d0fc      	beq.n	80012c4 <ILI9341_Init+0x458>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80012ca:	230a      	movs	r3, #10
 80012cc:	2201      	movs	r2, #1
 80012ce:	0029      	movs	r1, r5
 80012d0:	0020      	movs	r0, r4
 80012d2:	f002 f8f9 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	4bb7      	ldr	r3, [pc, #732]	; (80015b8 <ILI9341_Init+0x74c>)
 80012da:	0292      	lsls	r2, r2, #10
 80012dc:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	0252      	lsls	r2, r2, #9
 80012e2:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 80012e4:	23c5      	movs	r3, #197	; 0xc5
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80012e6:	2602      	movs	r6, #2
 80012e8:	6822      	ldr	r2, [r4, #0]
 80012ea:	702b      	strb	r3, [r5, #0]
 80012ec:	6893      	ldr	r3, [r2, #8]
 80012ee:	421e      	tst	r6, r3
 80012f0:	d0fc      	beq.n	80012ec <ILI9341_Init+0x480>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80012f2:	230a      	movs	r3, #10
 80012f4:	2201      	movs	r2, #1
 80012f6:	0029      	movs	r1, r5
 80012f8:	0020      	movs	r0, r4
 80012fa:	f002 f8e5 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80012fe:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001300:	4bad      	ldr	r3, [pc, #692]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001302:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001304:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001306:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001308:	233e      	movs	r3, #62	; 0x3e
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800130a:	2602      	movs	r6, #2
 800130c:	6822      	ldr	r2, [r4, #0]
 800130e:	702b      	strb	r3, [r5, #0]
 8001310:	6893      	ldr	r3, [r2, #8]
 8001312:	421e      	tst	r6, r3
 8001314:	d0fc      	beq.n	8001310 <ILI9341_Init+0x4a4>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001316:	230a      	movs	r3, #10
 8001318:	2201      	movs	r2, #1
 800131a:	0029      	movs	r1, r5
 800131c:	0020      	movs	r0, r4
 800131e:	f002 f8d3 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001322:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001324:	4ba4      	ldr	r3, [pc, #656]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001326:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001328:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800132a:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 800132c:	2328      	movs	r3, #40	; 0x28
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800132e:	2202      	movs	r2, #2
 8001330:	6821      	ldr	r1, [r4, #0]
 8001332:	702b      	strb	r3, [r5, #0]
 8001334:	688b      	ldr	r3, [r1, #8]
 8001336:	421a      	tst	r2, r3
 8001338:	d0fc      	beq.n	8001334 <ILI9341_Init+0x4c8>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800133a:	230a      	movs	r3, #10
 800133c:	2201      	movs	r2, #1
 800133e:	0029      	movs	r1, r5
 8001340:	0020      	movs	r0, r4
 8001342:	f002 f8c1 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	4b9b      	ldr	r3, [pc, #620]	; (80015b8 <ILI9341_Init+0x74c>)
 800134a:	0292      	lsls	r2, r2, #10
 800134c:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	0252      	lsls	r2, r2, #9
 8001352:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8001354:	23c7      	movs	r3, #199	; 0xc7
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001356:	2602      	movs	r6, #2
 8001358:	6822      	ldr	r2, [r4, #0]
 800135a:	702b      	strb	r3, [r5, #0]
 800135c:	6893      	ldr	r3, [r2, #8]
 800135e:	421e      	tst	r6, r3
 8001360:	d0fc      	beq.n	800135c <ILI9341_Init+0x4f0>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001362:	230a      	movs	r3, #10
 8001364:	2201      	movs	r2, #1
 8001366:	0029      	movs	r1, r5
 8001368:	0020      	movs	r0, r4
 800136a:	f002 f8ad 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800136e:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001370:	4b91      	ldr	r3, [pc, #580]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001372:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001374:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001376:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001378:	2386      	movs	r3, #134	; 0x86
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800137a:	2202      	movs	r2, #2
 800137c:	6821      	ldr	r1, [r4, #0]
 800137e:	702b      	strb	r3, [r5, #0]
 8001380:	688b      	ldr	r3, [r1, #8]
 8001382:	421a      	tst	r2, r3
 8001384:	d0fc      	beq.n	8001380 <ILI9341_Init+0x514>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001386:	230a      	movs	r3, #10
 8001388:	2201      	movs	r2, #1
 800138a:	0029      	movs	r1, r5
 800138c:	0020      	movs	r0, r4
 800138e:	f002 f89b 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	4b88      	ldr	r3, [pc, #544]	; (80015b8 <ILI9341_Init+0x74c>)
 8001396:	0292      	lsls	r2, r2, #10
 8001398:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	0252      	lsls	r2, r2, #9
 800139e:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 80013a0:	2336      	movs	r3, #54	; 0x36
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80013a2:	2602      	movs	r6, #2
 80013a4:	6822      	ldr	r2, [r4, #0]
 80013a6:	702b      	strb	r3, [r5, #0]
 80013a8:	6893      	ldr	r3, [r2, #8]
 80013aa:	421e      	tst	r6, r3
 80013ac:	d0fc      	beq.n	80013a8 <ILI9341_Init+0x53c>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80013ae:	230a      	movs	r3, #10
 80013b0:	2201      	movs	r2, #1
 80013b2:	0029      	movs	r1, r5
 80013b4:	0020      	movs	r0, r4
 80013b6:	f002 f887 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80013ba:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80013bc:	4b7e      	ldr	r3, [pc, #504]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80013be:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80013c0:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80013c2:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80013c4:	2348      	movs	r3, #72	; 0x48
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80013c6:	2202      	movs	r2, #2
 80013c8:	6821      	ldr	r1, [r4, #0]
 80013ca:	702b      	strb	r3, [r5, #0]
 80013cc:	688b      	ldr	r3, [r1, #8]
 80013ce:	421a      	tst	r2, r3
 80013d0:	d0fc      	beq.n	80013cc <ILI9341_Init+0x560>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80013d2:	230a      	movs	r3, #10
 80013d4:	2201      	movs	r2, #1
 80013d6:	0029      	movs	r1, r5
 80013d8:	0020      	movs	r0, r4
 80013da:	f002 f875 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	4b75      	ldr	r3, [pc, #468]	; (80015b8 <ILI9341_Init+0x74c>)
 80013e2:	0292      	lsls	r2, r2, #10
 80013e4:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	0252      	lsls	r2, r2, #9
 80013ea:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 80013ec:	233a      	movs	r3, #58	; 0x3a
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80013ee:	2602      	movs	r6, #2
 80013f0:	6822      	ldr	r2, [r4, #0]
 80013f2:	702b      	strb	r3, [r5, #0]
 80013f4:	6893      	ldr	r3, [r2, #8]
 80013f6:	421e      	tst	r6, r3
 80013f8:	d0fc      	beq.n	80013f4 <ILI9341_Init+0x588>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80013fa:	230a      	movs	r3, #10
 80013fc:	2201      	movs	r2, #1
 80013fe:	0029      	movs	r1, r5
 8001400:	0020      	movs	r0, r4
 8001402:	f002 f861 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001406:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001408:	4b6b      	ldr	r3, [pc, #428]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800140a:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800140c:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800140e:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001410:	2355      	movs	r3, #85	; 0x55
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001412:	2202      	movs	r2, #2
 8001414:	6821      	ldr	r1, [r4, #0]
 8001416:	702b      	strb	r3, [r5, #0]
 8001418:	688b      	ldr	r3, [r1, #8]
 800141a:	421a      	tst	r2, r3
 800141c:	d0fc      	beq.n	8001418 <ILI9341_Init+0x5ac>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800141e:	230a      	movs	r3, #10
 8001420:	2201      	movs	r2, #1
 8001422:	0029      	movs	r1, r5
 8001424:	0020      	movs	r0, r4
 8001426:	f002 f84f 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <ILI9341_Init+0x74c>)
 800142e:	0292      	lsls	r2, r2, #10
 8001430:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	0252      	lsls	r2, r2, #9
 8001436:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8001438:	23b1      	movs	r3, #177	; 0xb1
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800143a:	2602      	movs	r6, #2
 800143c:	6822      	ldr	r2, [r4, #0]
 800143e:	702b      	strb	r3, [r5, #0]
 8001440:	6893      	ldr	r3, [r2, #8]
 8001442:	421e      	tst	r6, r3
 8001444:	d0fc      	beq.n	8001440 <ILI9341_Init+0x5d4>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001446:	230a      	movs	r3, #10
 8001448:	2201      	movs	r2, #1
 800144a:	0029      	movs	r1, r5
 800144c:	0020      	movs	r0, r4
 800144e:	f002 f83b 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001452:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001454:	4b58      	ldr	r3, [pc, #352]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001456:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001458:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800145a:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 800145c:	2300      	movs	r3, #0
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800145e:	2602      	movs	r6, #2
 8001460:	6822      	ldr	r2, [r4, #0]
 8001462:	702b      	strb	r3, [r5, #0]
 8001464:	6893      	ldr	r3, [r2, #8]
 8001466:	421e      	tst	r6, r3
 8001468:	d0fc      	beq.n	8001464 <ILI9341_Init+0x5f8>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800146a:	230a      	movs	r3, #10
 800146c:	2201      	movs	r2, #1
 800146e:	0029      	movs	r1, r5
 8001470:	0020      	movs	r0, r4
 8001472:	f002 f829 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001476:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001478:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800147a:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800147c:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800147e:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001480:	2318      	movs	r3, #24
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001482:	2202      	movs	r2, #2
 8001484:	6821      	ldr	r1, [r4, #0]
 8001486:	702b      	strb	r3, [r5, #0]
 8001488:	688b      	ldr	r3, [r1, #8]
 800148a:	421a      	tst	r2, r3
 800148c:	d0fc      	beq.n	8001488 <ILI9341_Init+0x61c>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800148e:	230a      	movs	r3, #10
 8001490:	2201      	movs	r2, #1
 8001492:	0029      	movs	r1, r5
 8001494:	0020      	movs	r0, r4
 8001496:	f002 f817 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 800149a:	2280      	movs	r2, #128	; 0x80
 800149c:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <ILI9341_Init+0x74c>)
 800149e:	0292      	lsls	r2, r2, #10
 80014a0:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80014a2:	2280      	movs	r2, #128	; 0x80
 80014a4:	0252      	lsls	r2, r2, #9
 80014a6:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 80014a8:	23b6      	movs	r3, #182	; 0xb6
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80014aa:	2602      	movs	r6, #2
 80014ac:	6822      	ldr	r2, [r4, #0]
 80014ae:	702b      	strb	r3, [r5, #0]
 80014b0:	6893      	ldr	r3, [r2, #8]
 80014b2:	421e      	tst	r6, r3
 80014b4:	d0fc      	beq.n	80014b0 <ILI9341_Init+0x644>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80014b6:	230a      	movs	r3, #10
 80014b8:	2201      	movs	r2, #1
 80014ba:	0029      	movs	r1, r5
 80014bc:	0020      	movs	r0, r4
 80014be:	f002 f803 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80014c2:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80014c4:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80014c6:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80014c8:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80014ca:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80014cc:	2308      	movs	r3, #8
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80014ce:	2602      	movs	r6, #2
 80014d0:	6822      	ldr	r2, [r4, #0]
 80014d2:	702b      	strb	r3, [r5, #0]
 80014d4:	6893      	ldr	r3, [r2, #8]
 80014d6:	421e      	tst	r6, r3
 80014d8:	d0fc      	beq.n	80014d4 <ILI9341_Init+0x668>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80014da:	230a      	movs	r3, #10
 80014dc:	2201      	movs	r2, #1
 80014de:	0029      	movs	r1, r5
 80014e0:	0020      	movs	r0, r4
 80014e2:	f001 fff1 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80014e6:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80014e8:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80014ea:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80014ec:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80014ee:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80014f0:	2382      	movs	r3, #130	; 0x82
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80014f2:	2602      	movs	r6, #2
 80014f4:	6822      	ldr	r2, [r4, #0]
 80014f6:	702b      	strb	r3, [r5, #0]
 80014f8:	6893      	ldr	r3, [r2, #8]
 80014fa:	421e      	tst	r6, r3
 80014fc:	d0fc      	beq.n	80014f8 <ILI9341_Init+0x68c>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80014fe:	230a      	movs	r3, #10
 8001500:	2201      	movs	r2, #1
 8001502:	0029      	movs	r1, r5
 8001504:	0020      	movs	r0, r4
 8001506:	f001 ffdf 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800150a:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800150e:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001510:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001512:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001514:	2327      	movs	r3, #39	; 0x27
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001516:	2202      	movs	r2, #2
 8001518:	6821      	ldr	r1, [r4, #0]
 800151a:	702b      	strb	r3, [r5, #0]
 800151c:	688b      	ldr	r3, [r1, #8]
 800151e:	421a      	tst	r2, r3
 8001520:	d0fc      	beq.n	800151c <ILI9341_Init+0x6b0>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001522:	230a      	movs	r3, #10
 8001524:	2201      	movs	r2, #1
 8001526:	0029      	movs	r1, r5
 8001528:	0020      	movs	r0, r4
 800152a:	f001 ffcd 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <ILI9341_Init+0x74c>)
 8001532:	0292      	lsls	r2, r2, #10
 8001534:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	0252      	lsls	r2, r2, #9
 800153a:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 800153c:	23f2      	movs	r3, #242	; 0xf2
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800153e:	2602      	movs	r6, #2
 8001540:	6822      	ldr	r2, [r4, #0]
 8001542:	702b      	strb	r3, [r5, #0]
 8001544:	6893      	ldr	r3, [r2, #8]
 8001546:	421e      	tst	r6, r3
 8001548:	d0fc      	beq.n	8001544 <ILI9341_Init+0x6d8>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800154a:	230a      	movs	r3, #10
 800154c:	2201      	movs	r2, #1
 800154e:	0029      	movs	r1, r5
 8001550:	0020      	movs	r0, r4
 8001552:	f001 ffb9 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001556:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800155a:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800155c:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800155e:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001560:	2300      	movs	r3, #0
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001562:	2202      	movs	r2, #2
 8001564:	6821      	ldr	r1, [r4, #0]
 8001566:	702b      	strb	r3, [r5, #0]
 8001568:	688b      	ldr	r3, [r1, #8]
 800156a:	421a      	tst	r2, r3
 800156c:	d0fc      	beq.n	8001568 <ILI9341_Init+0x6fc>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800156e:	230a      	movs	r3, #10
 8001570:	2201      	movs	r2, #1
 8001572:	0029      	movs	r1, r5
 8001574:	0020      	movs	r0, r4
 8001576:	f001 ffa7 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 800157a:	2280      	movs	r2, #128	; 0x80
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <ILI9341_Init+0x74c>)
 800157e:	0292      	lsls	r2, r2, #10
 8001580:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	0252      	lsls	r2, r2, #9
 8001586:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8001588:	2326      	movs	r3, #38	; 0x26
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800158a:	2602      	movs	r6, #2
 800158c:	6822      	ldr	r2, [r4, #0]
 800158e:	702b      	strb	r3, [r5, #0]
 8001590:	6893      	ldr	r3, [r2, #8]
 8001592:	421e      	tst	r6, r3
 8001594:	d0fc      	beq.n	8001590 <ILI9341_Init+0x724>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001596:	230a      	movs	r3, #10
 8001598:	2201      	movs	r2, #1
 800159a:	0029      	movs	r1, r5
 800159c:	0020      	movs	r0, r4
 800159e:	f001 ff93 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80015a2:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <ILI9341_Init+0x74c>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80015a6:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80015a8:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80015aa:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80015ac:	2301      	movs	r3, #1
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80015ae:	2202      	movs	r2, #2
 80015b0:	6821      	ldr	r1, [r4, #0]
 80015b2:	702b      	strb	r3, [r5, #0]
 80015b4:	e002      	b.n	80015bc <ILI9341_Init+0x750>
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	50000400 	.word	0x50000400
 80015bc:	688b      	ldr	r3, [r1, #8]
 80015be:	421a      	tst	r2, r3
 80015c0:	d0fc      	beq.n	80015bc <ILI9341_Init+0x750>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80015c2:	230a      	movs	r3, #10
 80015c4:	2201      	movs	r2, #1
 80015c6:	0029      	movs	r1, r5
 80015c8:	0020      	movs	r0, r4
 80015ca:	f001 ff7d 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	4be5      	ldr	r3, [pc, #916]	; (8001968 <ILI9341_Init+0xafc>)
 80015d2:	0292      	lsls	r2, r2, #10
 80015d4:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	0252      	lsls	r2, r2, #9
 80015da:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 80015dc:	23e0      	movs	r3, #224	; 0xe0
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80015de:	2602      	movs	r6, #2
 80015e0:	6822      	ldr	r2, [r4, #0]
 80015e2:	702b      	strb	r3, [r5, #0]
 80015e4:	6893      	ldr	r3, [r2, #8]
 80015e6:	421e      	tst	r6, r3
 80015e8:	d0fc      	beq.n	80015e4 <ILI9341_Init+0x778>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80015ea:	230a      	movs	r3, #10
 80015ec:	2201      	movs	r2, #1
 80015ee:	0029      	movs	r1, r5
 80015f0:	0020      	movs	r0, r4
 80015f2:	f001 ff69 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80015f6:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80015f8:	4bdb      	ldr	r3, [pc, #876]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80015fa:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80015fc:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80015fe:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001600:	230f      	movs	r3, #15
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001602:	2602      	movs	r6, #2
 8001604:	6822      	ldr	r2, [r4, #0]
 8001606:	702b      	strb	r3, [r5, #0]
 8001608:	6893      	ldr	r3, [r2, #8]
 800160a:	421e      	tst	r6, r3
 800160c:	d0fc      	beq.n	8001608 <ILI9341_Init+0x79c>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800160e:	230a      	movs	r3, #10
 8001610:	2201      	movs	r2, #1
 8001612:	0029      	movs	r1, r5
 8001614:	0020      	movs	r0, r4
 8001616:	f001 ff57 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800161a:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800161c:	4bd2      	ldr	r3, [pc, #840]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800161e:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001620:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001622:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001624:	2331      	movs	r3, #49	; 0x31
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001626:	2602      	movs	r6, #2
 8001628:	6822      	ldr	r2, [r4, #0]
 800162a:	702b      	strb	r3, [r5, #0]
 800162c:	6893      	ldr	r3, [r2, #8]
 800162e:	421e      	tst	r6, r3
 8001630:	d0fc      	beq.n	800162c <ILI9341_Init+0x7c0>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001632:	230a      	movs	r3, #10
 8001634:	2201      	movs	r2, #1
 8001636:	0029      	movs	r1, r5
 8001638:	0020      	movs	r0, r4
 800163a:	f001 ff45 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800163e:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001640:	4bc9      	ldr	r3, [pc, #804]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001642:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001644:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001646:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001648:	232b      	movs	r3, #43	; 0x2b
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800164a:	2602      	movs	r6, #2
 800164c:	6822      	ldr	r2, [r4, #0]
 800164e:	702b      	strb	r3, [r5, #0]
 8001650:	6893      	ldr	r3, [r2, #8]
 8001652:	421e      	tst	r6, r3
 8001654:	d0fc      	beq.n	8001650 <ILI9341_Init+0x7e4>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001656:	230a      	movs	r3, #10
 8001658:	2201      	movs	r2, #1
 800165a:	0029      	movs	r1, r5
 800165c:	0020      	movs	r0, r4
 800165e:	f001 ff33 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001662:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001664:	4bc0      	ldr	r3, [pc, #768]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001666:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001668:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800166a:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 800166c:	230c      	movs	r3, #12
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800166e:	2602      	movs	r6, #2
 8001670:	6822      	ldr	r2, [r4, #0]
 8001672:	702b      	strb	r3, [r5, #0]
 8001674:	6893      	ldr	r3, [r2, #8]
 8001676:	421e      	tst	r6, r3
 8001678:	d0fc      	beq.n	8001674 <ILI9341_Init+0x808>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800167a:	230a      	movs	r3, #10
 800167c:	2201      	movs	r2, #1
 800167e:	0029      	movs	r1, r5
 8001680:	0020      	movs	r0, r4
 8001682:	f001 ff21 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001686:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001688:	4bb7      	ldr	r3, [pc, #732]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800168a:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800168c:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800168e:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001690:	230e      	movs	r3, #14
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001692:	2602      	movs	r6, #2
 8001694:	6822      	ldr	r2, [r4, #0]
 8001696:	702b      	strb	r3, [r5, #0]
 8001698:	6893      	ldr	r3, [r2, #8]
 800169a:	421e      	tst	r6, r3
 800169c:	d0fc      	beq.n	8001698 <ILI9341_Init+0x82c>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800169e:	230a      	movs	r3, #10
 80016a0:	2201      	movs	r2, #1
 80016a2:	0029      	movs	r1, r5
 80016a4:	0020      	movs	r0, r4
 80016a6:	f001 ff0f 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80016aa:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80016ac:	4bae      	ldr	r3, [pc, #696]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80016ae:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80016b0:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80016b2:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80016b4:	2308      	movs	r3, #8
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80016b6:	2602      	movs	r6, #2
 80016b8:	6822      	ldr	r2, [r4, #0]
 80016ba:	702b      	strb	r3, [r5, #0]
 80016bc:	6893      	ldr	r3, [r2, #8]
 80016be:	421e      	tst	r6, r3
 80016c0:	d0fc      	beq.n	80016bc <ILI9341_Init+0x850>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80016c2:	230a      	movs	r3, #10
 80016c4:	2201      	movs	r2, #1
 80016c6:	0029      	movs	r1, r5
 80016c8:	0020      	movs	r0, r4
 80016ca:	f001 fefd 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80016ce:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80016d0:	4ba5      	ldr	r3, [pc, #660]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80016d2:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80016d4:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80016d6:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80016d8:	234e      	movs	r3, #78	; 0x4e
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80016da:	2602      	movs	r6, #2
 80016dc:	6822      	ldr	r2, [r4, #0]
 80016de:	702b      	strb	r3, [r5, #0]
 80016e0:	6893      	ldr	r3, [r2, #8]
 80016e2:	421e      	tst	r6, r3
 80016e4:	d0fc      	beq.n	80016e0 <ILI9341_Init+0x874>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80016e6:	230a      	movs	r3, #10
 80016e8:	2201      	movs	r2, #1
 80016ea:	0029      	movs	r1, r5
 80016ec:	0020      	movs	r0, r4
 80016ee:	f001 feeb 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80016f2:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80016f4:	4b9c      	ldr	r3, [pc, #624]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80016f6:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80016f8:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80016fa:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80016fc:	23f1      	movs	r3, #241	; 0xf1
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80016fe:	2602      	movs	r6, #2
 8001700:	6822      	ldr	r2, [r4, #0]
 8001702:	702b      	strb	r3, [r5, #0]
 8001704:	6893      	ldr	r3, [r2, #8]
 8001706:	421e      	tst	r6, r3
 8001708:	d0fc      	beq.n	8001704 <ILI9341_Init+0x898>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800170a:	230a      	movs	r3, #10
 800170c:	2201      	movs	r2, #1
 800170e:	0029      	movs	r1, r5
 8001710:	0020      	movs	r0, r4
 8001712:	f001 fed9 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001716:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001718:	4b93      	ldr	r3, [pc, #588]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800171a:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800171c:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800171e:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001720:	2337      	movs	r3, #55	; 0x37
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001722:	2602      	movs	r6, #2
 8001724:	6822      	ldr	r2, [r4, #0]
 8001726:	702b      	strb	r3, [r5, #0]
 8001728:	6893      	ldr	r3, [r2, #8]
 800172a:	421e      	tst	r6, r3
 800172c:	d0fc      	beq.n	8001728 <ILI9341_Init+0x8bc>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800172e:	230a      	movs	r3, #10
 8001730:	2201      	movs	r2, #1
 8001732:	0029      	movs	r1, r5
 8001734:	0020      	movs	r0, r4
 8001736:	f001 fec7 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800173a:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800173c:	4b8a      	ldr	r3, [pc, #552]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800173e:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001740:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001742:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001744:	2307      	movs	r3, #7
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001746:	2602      	movs	r6, #2
 8001748:	6822      	ldr	r2, [r4, #0]
 800174a:	702b      	strb	r3, [r5, #0]
 800174c:	6893      	ldr	r3, [r2, #8]
 800174e:	421e      	tst	r6, r3
 8001750:	d0fc      	beq.n	800174c <ILI9341_Init+0x8e0>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001752:	230a      	movs	r3, #10
 8001754:	2201      	movs	r2, #1
 8001756:	0029      	movs	r1, r5
 8001758:	0020      	movs	r0, r4
 800175a:	f001 feb5 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800175e:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001760:	4b81      	ldr	r3, [pc, #516]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001762:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001764:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001766:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001768:	2310      	movs	r3, #16
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800176a:	2602      	movs	r6, #2
 800176c:	6822      	ldr	r2, [r4, #0]
 800176e:	702b      	strb	r3, [r5, #0]
 8001770:	6893      	ldr	r3, [r2, #8]
 8001772:	421e      	tst	r6, r3
 8001774:	d0fc      	beq.n	8001770 <ILI9341_Init+0x904>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001776:	230a      	movs	r3, #10
 8001778:	2201      	movs	r2, #1
 800177a:	0029      	movs	r1, r5
 800177c:	0020      	movs	r0, r4
 800177e:	f001 fea3 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001782:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001784:	4b78      	ldr	r3, [pc, #480]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001786:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001788:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800178a:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 800178c:	2303      	movs	r3, #3
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800178e:	2602      	movs	r6, #2
 8001790:	6822      	ldr	r2, [r4, #0]
 8001792:	702b      	strb	r3, [r5, #0]
 8001794:	6893      	ldr	r3, [r2, #8]
 8001796:	421e      	tst	r6, r3
 8001798:	d0fc      	beq.n	8001794 <ILI9341_Init+0x928>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800179a:	230a      	movs	r3, #10
 800179c:	2201      	movs	r2, #1
 800179e:	0029      	movs	r1, r5
 80017a0:	0020      	movs	r0, r4
 80017a2:	f001 fe91 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80017a6:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80017a8:	4b6f      	ldr	r3, [pc, #444]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80017aa:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80017ac:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80017ae:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80017b0:	230e      	movs	r3, #14
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80017b2:	2602      	movs	r6, #2
 80017b4:	6822      	ldr	r2, [r4, #0]
 80017b6:	702b      	strb	r3, [r5, #0]
 80017b8:	6893      	ldr	r3, [r2, #8]
 80017ba:	421e      	tst	r6, r3
 80017bc:	d0fc      	beq.n	80017b8 <ILI9341_Init+0x94c>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80017be:	230a      	movs	r3, #10
 80017c0:	2201      	movs	r2, #1
 80017c2:	0029      	movs	r1, r5
 80017c4:	0020      	movs	r0, r4
 80017c6:	f001 fe7f 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80017ca:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80017cc:	4b66      	ldr	r3, [pc, #408]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80017ce:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80017d0:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80017d2:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80017d4:	2309      	movs	r3, #9
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80017d6:	2602      	movs	r6, #2
 80017d8:	6822      	ldr	r2, [r4, #0]
 80017da:	702b      	strb	r3, [r5, #0]
 80017dc:	6893      	ldr	r3, [r2, #8]
 80017de:	421e      	tst	r6, r3
 80017e0:	d0fc      	beq.n	80017dc <ILI9341_Init+0x970>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80017e2:	230a      	movs	r3, #10
 80017e4:	2201      	movs	r2, #1
 80017e6:	0029      	movs	r1, r5
 80017e8:	0020      	movs	r0, r4
 80017ea:	f001 fe6d 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80017ee:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80017f0:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80017f2:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80017f4:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80017f6:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80017f8:	2300      	movs	r3, #0
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80017fa:	2202      	movs	r2, #2
 80017fc:	6821      	ldr	r1, [r4, #0]
 80017fe:	702b      	strb	r3, [r5, #0]
 8001800:	688b      	ldr	r3, [r1, #8]
 8001802:	421a      	tst	r2, r3
 8001804:	d0fc      	beq.n	8001800 <ILI9341_Init+0x994>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001806:	230a      	movs	r3, #10
 8001808:	2201      	movs	r2, #1
 800180a:	0029      	movs	r1, r5
 800180c:	0020      	movs	r0, r4
 800180e:	f001 fe5b 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8001812:	2280      	movs	r2, #128	; 0x80
 8001814:	4b54      	ldr	r3, [pc, #336]	; (8001968 <ILI9341_Init+0xafc>)
 8001816:	0292      	lsls	r2, r2, #10
 8001818:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	0252      	lsls	r2, r2, #9
 800181e:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8001820:	23e1      	movs	r3, #225	; 0xe1
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001822:	2602      	movs	r6, #2
 8001824:	6822      	ldr	r2, [r4, #0]
 8001826:	702b      	strb	r3, [r5, #0]
 8001828:	6893      	ldr	r3, [r2, #8]
 800182a:	421e      	tst	r6, r3
 800182c:	d0fc      	beq.n	8001828 <ILI9341_Init+0x9bc>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800182e:	230a      	movs	r3, #10
 8001830:	2201      	movs	r2, #1
 8001832:	0029      	movs	r1, r5
 8001834:	0020      	movs	r0, r4
 8001836:	f001 fe47 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800183a:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800183c:	4b4a      	ldr	r3, [pc, #296]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800183e:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001840:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001842:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001844:	2300      	movs	r3, #0
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001846:	2602      	movs	r6, #2
 8001848:	6822      	ldr	r2, [r4, #0]
 800184a:	702b      	strb	r3, [r5, #0]
 800184c:	6893      	ldr	r3, [r2, #8]
 800184e:	421e      	tst	r6, r3
 8001850:	d0fc      	beq.n	800184c <ILI9341_Init+0x9e0>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001852:	230a      	movs	r3, #10
 8001854:	2201      	movs	r2, #1
 8001856:	0029      	movs	r1, r5
 8001858:	0020      	movs	r0, r4
 800185a:	f001 fe35 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800185e:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001860:	4b41      	ldr	r3, [pc, #260]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001862:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001864:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001866:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001868:	230e      	movs	r3, #14
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800186a:	2602      	movs	r6, #2
 800186c:	6822      	ldr	r2, [r4, #0]
 800186e:	702b      	strb	r3, [r5, #0]
 8001870:	6893      	ldr	r3, [r2, #8]
 8001872:	421e      	tst	r6, r3
 8001874:	d0fc      	beq.n	8001870 <ILI9341_Init+0xa04>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001876:	230a      	movs	r3, #10
 8001878:	2201      	movs	r2, #1
 800187a:	0029      	movs	r1, r5
 800187c:	0020      	movs	r0, r4
 800187e:	f001 fe23 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001882:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001884:	4b38      	ldr	r3, [pc, #224]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001886:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001888:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800188a:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 800188c:	2314      	movs	r3, #20
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800188e:	2602      	movs	r6, #2
 8001890:	6822      	ldr	r2, [r4, #0]
 8001892:	702b      	strb	r3, [r5, #0]
 8001894:	6893      	ldr	r3, [r2, #8]
 8001896:	421e      	tst	r6, r3
 8001898:	d0fc      	beq.n	8001894 <ILI9341_Init+0xa28>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800189a:	230a      	movs	r3, #10
 800189c:	2201      	movs	r2, #1
 800189e:	0029      	movs	r1, r5
 80018a0:	0020      	movs	r0, r4
 80018a2:	f001 fe11 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80018a6:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80018a8:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80018aa:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80018ac:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80018ae:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80018b0:	2303      	movs	r3, #3
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80018b2:	2602      	movs	r6, #2
 80018b4:	6822      	ldr	r2, [r4, #0]
 80018b6:	702b      	strb	r3, [r5, #0]
 80018b8:	6893      	ldr	r3, [r2, #8]
 80018ba:	421e      	tst	r6, r3
 80018bc:	d0fc      	beq.n	80018b8 <ILI9341_Init+0xa4c>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80018be:	230a      	movs	r3, #10
 80018c0:	2201      	movs	r2, #1
 80018c2:	0029      	movs	r1, r5
 80018c4:	0020      	movs	r0, r4
 80018c6:	f001 fdff 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80018ca:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80018cc:	4b26      	ldr	r3, [pc, #152]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80018ce:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80018d0:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80018d2:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80018d4:	2311      	movs	r3, #17
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80018d6:	2602      	movs	r6, #2
 80018d8:	6822      	ldr	r2, [r4, #0]
 80018da:	702b      	strb	r3, [r5, #0]
 80018dc:	6893      	ldr	r3, [r2, #8]
 80018de:	421e      	tst	r6, r3
 80018e0:	d0fc      	beq.n	80018dc <ILI9341_Init+0xa70>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80018e2:	230a      	movs	r3, #10
 80018e4:	2201      	movs	r2, #1
 80018e6:	0029      	movs	r1, r5
 80018e8:	0020      	movs	r0, r4
 80018ea:	f001 fded 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80018ee:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80018f2:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80018f4:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80018f6:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80018f8:	2307      	movs	r3, #7
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80018fa:	2602      	movs	r6, #2
 80018fc:	6822      	ldr	r2, [r4, #0]
 80018fe:	702b      	strb	r3, [r5, #0]
 8001900:	6893      	ldr	r3, [r2, #8]
 8001902:	421e      	tst	r6, r3
 8001904:	d0fc      	beq.n	8001900 <ILI9341_Init+0xa94>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001906:	230a      	movs	r3, #10
 8001908:	2201      	movs	r2, #1
 800190a:	0029      	movs	r1, r5
 800190c:	0020      	movs	r0, r4
 800190e:	f001 fddb 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001912:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001916:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001918:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800191a:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 800191c:	2331      	movs	r3, #49	; 0x31
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800191e:	2602      	movs	r6, #2
 8001920:	6822      	ldr	r2, [r4, #0]
 8001922:	702b      	strb	r3, [r5, #0]
 8001924:	6893      	ldr	r3, [r2, #8]
 8001926:	421e      	tst	r6, r3
 8001928:	d0fc      	beq.n	8001924 <ILI9341_Init+0xab8>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800192a:	230a      	movs	r3, #10
 800192c:	2201      	movs	r2, #1
 800192e:	0029      	movs	r1, r5
 8001930:	0020      	movs	r0, r4
 8001932:	f001 fdc9 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001936:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800193a:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800193c:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800193e:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001940:	23c1      	movs	r3, #193	; 0xc1
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001942:	2602      	movs	r6, #2
 8001944:	6822      	ldr	r2, [r4, #0]
 8001946:	702b      	strb	r3, [r5, #0]
 8001948:	6893      	ldr	r3, [r2, #8]
 800194a:	421e      	tst	r6, r3
 800194c:	d0fc      	beq.n	8001948 <ILI9341_Init+0xadc>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800194e:	230a      	movs	r3, #10
 8001950:	2201      	movs	r2, #1
 8001952:	0029      	movs	r1, r5
 8001954:	0020      	movs	r0, r4
 8001956:	f001 fdb7 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800195a:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800195c:	4b02      	ldr	r3, [pc, #8]	; (8001968 <ILI9341_Init+0xafc>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800195e:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001960:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001962:	619a      	str	r2, [r3, #24]
 8001964:	e002      	b.n	800196c <ILI9341_Init+0xb00>
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	50000400 	.word	0x50000400
	ILI9341_SPI_Tx(data);
 800196c:	2348      	movs	r3, #72	; 0x48
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800196e:	2602      	movs	r6, #2
 8001970:	6822      	ldr	r2, [r4, #0]
 8001972:	702b      	strb	r3, [r5, #0]
 8001974:	6893      	ldr	r3, [r2, #8]
 8001976:	421e      	tst	r6, r3
 8001978:	d0fc      	beq.n	8001974 <ILI9341_Init+0xb08>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800197a:	230a      	movs	r3, #10
 800197c:	2201      	movs	r2, #1
 800197e:	0029      	movs	r1, r5
 8001980:	0020      	movs	r0, r4
 8001982:	f001 fda1 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001986:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001988:	4b60      	ldr	r3, [pc, #384]	; (8001b0c <ILI9341_Init+0xca0>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800198a:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 800198c:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 800198e:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001990:	2308      	movs	r3, #8
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001992:	2602      	movs	r6, #2
 8001994:	6822      	ldr	r2, [r4, #0]
 8001996:	702b      	strb	r3, [r5, #0]
 8001998:	6893      	ldr	r3, [r2, #8]
 800199a:	421e      	tst	r6, r3
 800199c:	d0fc      	beq.n	8001998 <ILI9341_Init+0xb2c>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 800199e:	230a      	movs	r3, #10
 80019a0:	2201      	movs	r2, #1
 80019a2:	0029      	movs	r1, r5
 80019a4:	0020      	movs	r0, r4
 80019a6:	f001 fd8f 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80019aa:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80019ac:	4b57      	ldr	r3, [pc, #348]	; (8001b0c <ILI9341_Init+0xca0>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80019ae:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80019b0:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80019b2:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80019b4:	230f      	movs	r3, #15
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80019b6:	2602      	movs	r6, #2
 80019b8:	6822      	ldr	r2, [r4, #0]
 80019ba:	702b      	strb	r3, [r5, #0]
 80019bc:	6893      	ldr	r3, [r2, #8]
 80019be:	421e      	tst	r6, r3
 80019c0:	d0fc      	beq.n	80019bc <ILI9341_Init+0xb50>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80019c2:	230a      	movs	r3, #10
 80019c4:	2201      	movs	r2, #1
 80019c6:	0029      	movs	r1, r5
 80019c8:	0020      	movs	r0, r4
 80019ca:	f001 fd7d 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80019ce:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80019d0:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <ILI9341_Init+0xca0>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80019d2:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80019d4:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80019d6:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80019d8:	230c      	movs	r3, #12
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80019da:	2602      	movs	r6, #2
 80019dc:	6822      	ldr	r2, [r4, #0]
 80019de:	702b      	strb	r3, [r5, #0]
 80019e0:	6893      	ldr	r3, [r2, #8]
 80019e2:	421e      	tst	r6, r3
 80019e4:	d0fc      	beq.n	80019e0 <ILI9341_Init+0xb74>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80019e6:	230a      	movs	r3, #10
 80019e8:	2201      	movs	r2, #1
 80019ea:	0029      	movs	r1, r5
 80019ec:	0020      	movs	r0, r4
 80019ee:	f001 fd6b 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80019f2:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80019f4:	4b45      	ldr	r3, [pc, #276]	; (8001b0c <ILI9341_Init+0xca0>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80019f6:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 80019f8:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 80019fa:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 80019fc:	2331      	movs	r3, #49	; 0x31
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80019fe:	2602      	movs	r6, #2
 8001a00:	6822      	ldr	r2, [r4, #0]
 8001a02:	702b      	strb	r3, [r5, #0]
 8001a04:	6893      	ldr	r3, [r2, #8]
 8001a06:	421e      	tst	r6, r3
 8001a08:	d0fc      	beq.n	8001a04 <ILI9341_Init+0xb98>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	0029      	movs	r1, r5
 8001a10:	0020      	movs	r0, r4
 8001a12:	f001 fd59 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001a16:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001a18:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <ILI9341_Init+0xca0>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001a1a:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001a1c:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001a1e:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001a20:	2336      	movs	r3, #54	; 0x36
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001a22:	2602      	movs	r6, #2
 8001a24:	6822      	ldr	r2, [r4, #0]
 8001a26:	702b      	strb	r3, [r5, #0]
 8001a28:	6893      	ldr	r3, [r2, #8]
 8001a2a:	421e      	tst	r6, r3
 8001a2c:	d0fc      	beq.n	8001a28 <ILI9341_Init+0xbbc>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001a2e:	230a      	movs	r3, #10
 8001a30:	2201      	movs	r2, #1
 8001a32:	0029      	movs	r1, r5
 8001a34:	0020      	movs	r0, r4
 8001a36:	f001 fd47 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001a3a:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001a3c:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <ILI9341_Init+0xca0>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001a3e:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001a40:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001a42:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001a44:	230f      	movs	r3, #15
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001a46:	2202      	movs	r2, #2
 8001a48:	6821      	ldr	r1, [r4, #0]
 8001a4a:	702b      	strb	r3, [r5, #0]
 8001a4c:	688b      	ldr	r3, [r1, #8]
 8001a4e:	421a      	tst	r2, r3
 8001a50:	d0fc      	beq.n	8001a4c <ILI9341_Init+0xbe0>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001a52:	230a      	movs	r3, #10
 8001a54:	2201      	movs	r2, #1
 8001a56:	0029      	movs	r1, r5
 8001a58:	0020      	movs	r0, r4
 8001a5a:	f001 fd35 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <ILI9341_Init+0xca0>)
 8001a62:	0292      	lsls	r2, r2, #10
 8001a64:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	0252      	lsls	r2, r2, #9
 8001a6a:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8001a6c:	2311      	movs	r3, #17
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001a6e:	2202      	movs	r2, #2
 8001a70:	6821      	ldr	r1, [r4, #0]
 8001a72:	702b      	strb	r3, [r5, #0]
 8001a74:	688b      	ldr	r3, [r1, #8]
 8001a76:	421a      	tst	r2, r3
 8001a78:	d0fc      	beq.n	8001a74 <ILI9341_Init+0xc08>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001a7a:	230a      	movs	r3, #10
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	0029      	movs	r1, r5
 8001a80:	0020      	movs	r0, r4
 8001a82:	f001 fd21 	bl	80034c8 <HAL_SPI_Transmit>
	HAL_Delay(100);
 8001a86:	2064      	movs	r0, #100	; 0x64
 8001a88:	f000 fd2c 	bl	80024e4 <HAL_Delay>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8001a8c:	2280      	movs	r2, #128	; 0x80
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <ILI9341_Init+0xca0>)
 8001a90:	0292      	lsls	r2, r2, #10
 8001a92:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	0252      	lsls	r2, r2, #9
 8001a98:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8001a9a:	2329      	movs	r3, #41	; 0x29
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	6821      	ldr	r1, [r4, #0]
 8001aa0:	702b      	strb	r3, [r5, #0]
 8001aa2:	688b      	ldr	r3, [r1, #8]
 8001aa4:	421a      	tst	r2, r3
 8001aa6:	d0fc      	beq.n	8001aa2 <ILI9341_Init+0xc36>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001aa8:	230a      	movs	r3, #10
 8001aaa:	2201      	movs	r2, #1
 8001aac:	0029      	movs	r1, r5
 8001aae:	0020      	movs	r0, r4
 8001ab0:	f001 fd0a 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <ILI9341_Init+0xca0>)
 8001ab8:	0292      	lsls	r2, r2, #10
 8001aba:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001abc:	2280      	movs	r2, #128	; 0x80
 8001abe:	0252      	lsls	r2, r2, #9
 8001ac0:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8001ac2:	2336      	movs	r3, #54	; 0x36
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001ac4:	2602      	movs	r6, #2
 8001ac6:	6822      	ldr	r2, [r4, #0]
 8001ac8:	702b      	strb	r3, [r5, #0]
 8001aca:	6893      	ldr	r3, [r2, #8]
 8001acc:	421e      	tst	r6, r3
 8001ace:	d0fc      	beq.n	8001aca <ILI9341_Init+0xc5e>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	0029      	movs	r1, r5
 8001ad6:	0020      	movs	r0, r4
 8001ad8:	f001 fcf6 	bl	80034c8 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f000 fd01 	bl	80024e4 <HAL_Delay>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001ae2:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <ILI9341_Init+0xca0>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001ae6:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001ae8:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001aea:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(data);
 8001aec:	2328      	movs	r3, #40	; 0x28
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001aee:	2202      	movs	r2, #2
 8001af0:	6821      	ldr	r1, [r4, #0]
 8001af2:	702b      	strb	r3, [r5, #0]
 8001af4:	688b      	ldr	r3, [r1, #8]
 8001af6:	421a      	tst	r2, r3
 8001af8:	d0fc      	beq.n	8001af4 <ILI9341_Init+0xc88>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001afa:	230a      	movs	r3, #10
 8001afc:	2201      	movs	r2, #1
 8001afe:	0029      	movs	r1, r5
 8001b00:	0020      	movs	r0, r4
 8001b02:	f001 fce1 	bl	80034c8 <HAL_SPI_Transmit>
}
 8001b06:	b002      	add	sp, #8
 8001b08:	bd70      	pop	{r4, r5, r6, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	50000400 	.word	0x50000400

08001b10 <ILI9341_DrawColor>:
{
 8001b10:	b500      	push	{lr}
 8001b12:	b083      	sub	sp, #12
	uint8_t buffer[2] = {color>>8, color};
 8001b14:	466a      	mov	r2, sp
 8001b16:	0a03      	lsrs	r3, r0, #8
 8001b18:	7113      	strb	r3, [r2, #4]
 8001b1a:	7150      	strb	r0, [r2, #5]
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <ILI9341_DrawColor+0x34>)
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001b20:	4809      	ldr	r0, [pc, #36]	; (8001b48 <ILI9341_DrawColor+0x38>)
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001b22:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	0252      	lsls	r2, r2, #9
 8001b28:	619a      	str	r2, [r3, #24]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	6801      	ldr	r1, [r0, #0]
 8001b2e:	688b      	ldr	r3, [r1, #8]
 8001b30:	421a      	tst	r2, r3
 8001b32:	d0fc      	beq.n	8001b2e <ILI9341_DrawColor+0x1e>
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
 8001b34:	230a      	movs	r3, #10
 8001b36:	2202      	movs	r2, #2
 8001b38:	a901      	add	r1, sp, #4
 8001b3a:	f001 fcc5 	bl	80034c8 <HAL_SPI_Transmit>
}
 8001b3e:	b003      	add	sp, #12
 8001b40:	bd00      	pop	{pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	50000400 	.word	0x50000400
 8001b48:	2000003c 	.word	0x2000003c

08001b4c <ILI9341_DrawColorBurst>:
{
 8001b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4e:	46d6      	mov	lr, sl
 8001b50:	464f      	mov	r7, r9
 8001b52:	4646      	mov	r6, r8
	if((size*2) < BURST_MAX_SIZE)
 8001b54:	004b      	lsls	r3, r1, #1
 8001b56:	469a      	mov	sl, r3
 8001b58:	23fa      	movs	r3, #250	; 0xfa
{
 8001b5a:	b5c0      	push	{r6, r7, lr}
 8001b5c:	000d      	movs	r5, r1
 8001b5e:	af00      	add	r7, sp, #0
	if((size*2) < BURST_MAX_SIZE)
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	459a      	cmp	sl, r3
 8001b64:	d346      	bcc.n	8001bf4 <ILI9341_DrawColorBurst+0xa8>
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001b66:	2102      	movs	r1, #2
 8001b68:	4a3d      	ldr	r2, [pc, #244]	; (8001c60 <ILI9341_DrawColorBurst+0x114>)
	uint8_t BurstBuffer[BufferSize];
 8001b6a:	b0fe      	sub	sp, #504	; 0x1f8
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001b6c:	6191      	str	r1, [r2, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001b6e:	2180      	movs	r1, #128	; 0x80
	uint8_t BurstBuffer[BufferSize];
 8001b70:	466c      	mov	r4, sp
		BufferSize = BURST_MAX_SIZE;
 8001b72:	001d      	movs	r5, r3
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001b74:	0249      	lsls	r1, r1, #9
 8001b76:	6191      	str	r1, [r2, #24]
	uint8_t chifted = color>>8;
 8001b78:	0a01      	lsrs	r1, r0, #8
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001b7a:	2301      	movs	r3, #1
		BurstBuffer[j+1] = color;
 8001b7c:	b2c0      	uxtb	r0, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d066      	beq.n	8001c50 <ILI9341_DrawColorBurst+0x104>
 8001b82:	002b      	movs	r3, r5
 8001b84:	3b13      	subs	r3, #19
 8001b86:	3315      	adds	r3, #21
 8001b88:	d862      	bhi.n	8001c50 <ILI9341_DrawColorBurst+0x104>
 8001b8a:	1e6b      	subs	r3, r5, #1
 8001b8c:	085b      	lsrs	r3, r3, #1
 8001b8e:	3301      	adds	r3, #1
 8001b90:	469c      	mov	ip, r3
 8001b92:	085b      	lsrs	r3, r3, #1
 8001b94:	4698      	mov	r8, r3
 8001b96:	0203      	lsls	r3, r0, #8
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	4699      	mov	r9, r3
 8001b9c:	464e      	mov	r6, r9
 8001b9e:	040a      	lsls	r2, r1, #16
 8001ba0:	0603      	lsls	r3, r0, #24
 8001ba2:	4332      	orrs	r2, r6
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	2300      	movs	r3, #0
		BurstBuffer[j] = chifted;
 8001ba8:	009e      	lsls	r6, r3, #2
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001baa:	3301      	adds	r3, #1
		BurstBuffer[j] = chifted;
 8001bac:	51a2      	str	r2, [r4, r6]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001bae:	4598      	cmp	r8, r3
 8001bb0:	d8fa      	bhi.n	8001ba8 <ILI9341_DrawColorBurst+0x5c>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	4662      	mov	r2, ip
 8001bb6:	439a      	bics	r2, r3
 8001bb8:	0053      	lsls	r3, r2, #1
 8001bba:	4594      	cmp	ip, r2
 8001bbc:	d002      	beq.n	8001bc4 <ILI9341_DrawColorBurst+0x78>
		BurstBuffer[j] = chifted;
 8001bbe:	54e1      	strb	r1, [r4, r3]
		BurstBuffer[j+1] = color;
 8001bc0:	18e3      	adds	r3, r4, r3
 8001bc2:	7058      	strb	r0, [r3, #1]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001bc4:	0029      	movs	r1, r5
 8001bc6:	4650      	mov	r0, sl
 8001bc8:	f7fe fb24 	bl	8000214 <__aeabi_uidivmod>
 8001bcc:	4689      	mov	r9, r1
	if(SendingInBlock != 0)
 8001bce:	45aa      	cmp	sl, r5
 8001bd0:	d221      	bcs.n	8001c16 <ILI9341_DrawColorBurst+0xca>
 8001bd2:	4d24      	ldr	r5, [pc, #144]	; (8001c64 <ILI9341_DrawColorBurst+0x118>)
	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001bd4:	464b      	mov	r3, r9
 8001bd6:	0028      	movs	r0, r5
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	0021      	movs	r1, r4
 8001bdc:	230a      	movs	r3, #10
 8001bde:	f001 fc73 	bl	80034c8 <HAL_SPI_Transmit>
}
 8001be2:	46bd      	mov	sp, r7
	LCD_CS_PORT->BSRR = LCD_CS_PIN;
 8001be4:	2201      	movs	r2, #1
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <ILI9341_DrawColorBurst+0x114>)
 8001be8:	619a      	str	r2, [r3, #24]
}
 8001bea:	bce0      	pop	{r5, r6, r7}
 8001bec:	46ba      	mov	sl, r7
 8001bee:	46b1      	mov	r9, r6
 8001bf0:	46a8      	mov	r8, r5
 8001bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <ILI9341_DrawColorBurst+0x114>)
 8001bf8:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	0252      	lsls	r2, r2, #9
 8001bfe:	619a      	str	r2, [r3, #24]
	uint8_t BurstBuffer[BufferSize];
 8001c00:	466a      	mov	r2, sp
 8001c02:	1dcb      	adds	r3, r1, #7
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	469d      	mov	sp, r3
 8001c0c:	466c      	mov	r4, sp
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001c0e:	2900      	cmp	r1, #0
 8001c10:	d013      	beq.n	8001c3a <ILI9341_DrawColorBurst+0xee>
	uint8_t chifted = color>>8;
 8001c12:	0a01      	lsrs	r1, r0, #8
 8001c14:	e7b1      	b.n	8001b7a <ILI9341_DrawColorBurst+0x2e>
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001c16:	4680      	mov	r8, r0
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001c18:	4643      	mov	r3, r8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0d9      	beq.n	8001bd2 <ILI9341_DrawColorBurst+0x86>
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001c1e:	b2ab      	uxth	r3, r5
 8001c20:	469a      	mov	sl, r3
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001c22:	2600      	movs	r6, #0
 8001c24:	4d0f      	ldr	r5, [pc, #60]	; (8001c64 <ILI9341_DrawColorBurst+0x118>)
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001c26:	230a      	movs	r3, #10
 8001c28:	4652      	mov	r2, sl
 8001c2a:	0021      	movs	r1, r4
 8001c2c:	0028      	movs	r0, r5
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001c2e:	3601      	adds	r6, #1
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001c30:	f001 fc4a 	bl	80034c8 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001c34:	4546      	cmp	r6, r8
 8001c36:	d1f6      	bne.n	8001c26 <ILI9341_DrawColorBurst+0xda>
 8001c38:	e7cc      	b.n	8001bd4 <ILI9341_DrawColorBurst+0x88>
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7fe fa63 	bl	8000108 <__udivsi3>
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001c42:	2100      	movs	r1, #0
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001c44:	4680      	mov	r8, r0
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7fe fae4 	bl	8000214 <__aeabi_uidivmod>
 8001c4c:	4689      	mov	r9, r1
	if(SendingInBlock != 0)
 8001c4e:	e7e3      	b.n	8001c18 <ILI9341_DrawColorBurst+0xcc>
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001c50:	2300      	movs	r3, #0
 8001c52:	1c62      	adds	r2, r4, #1
		BurstBuffer[j] = chifted;
 8001c54:	54e1      	strb	r1, [r4, r3]
		BurstBuffer[j+1] = color;
 8001c56:	54d0      	strb	r0, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001c58:	3302      	adds	r3, #2
 8001c5a:	429d      	cmp	r5, r3
 8001c5c:	d8fa      	bhi.n	8001c54 <ILI9341_DrawColorBurst+0x108>
 8001c5e:	e7b1      	b.n	8001bc4 <ILI9341_DrawColorBurst+0x78>
 8001c60:	50000400 	.word	0x50000400
 8001c64:	2000003c 	.word	0x2000003c

08001c68 <ILI9341_FillScreen>:
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8001c68:	2280      	movs	r2, #128	; 0x80
{
 8001c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
	buffer[0] = x1 >> 8;
 8001c6c:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <ILI9341_FillScreen+0x124>)
{
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
	buffer[0] = x1 >> 8;
 8001c72:	607b      	str	r3, [r7, #4]
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8001c74:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <ILI9341_FillScreen+0x128>)
 8001c76:	0292      	lsls	r2, r2, #10
 8001c78:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001c7a:	2280      	movs	r2, #128	; 0x80
 8001c7c:	0252      	lsls	r2, r2, #9
 8001c7e:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8001c80:	232a      	movs	r3, #42	; 0x2a
{
 8001c82:	0005      	movs	r5, r0
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001c84:	2602      	movs	r6, #2
 8001c86:	4c43      	ldr	r4, [pc, #268]	; (8001d94 <ILI9341_FillScreen+0x12c>)
 8001c88:	70fb      	strb	r3, [r7, #3]
 8001c8a:	6822      	ldr	r2, [r4, #0]
 8001c8c:	6893      	ldr	r3, [r2, #8]
 8001c8e:	421e      	tst	r6, r3
 8001c90:	d0fc      	beq.n	8001c8c <ILI9341_FillScreen+0x24>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001c92:	230a      	movs	r3, #10
 8001c94:	2201      	movs	r2, #1
 8001c96:	1cf9      	adds	r1, r7, #3
 8001c98:	0020      	movs	r0, r4
 8001c9a:	f001 fc15 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001c9e:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001ca0:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <ILI9341_FillScreen+0x128>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001ca2:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001ca4:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001ca6:	619a      	str	r2, [r3, #24]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001ca8:	2202      	movs	r2, #2
 8001caa:	6821      	ldr	r1, [r4, #0]
 8001cac:	688b      	ldr	r3, [r1, #8]
 8001cae:	421a      	tst	r2, r3
 8001cb0:	d0fc      	beq.n	8001cac <ILI9341_FillScreen+0x44>
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	0020      	movs	r0, r4
 8001cb8:	1d39      	adds	r1, r7, #4
 8001cba:	f001 fc05 	bl	80034c8 <HAL_SPI_Transmit>
	buffer[0] = y1 >> 8;
 8001cbe:	23f0      	movs	r3, #240	; 0xf0
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8001cc0:	2280      	movs	r2, #128	; 0x80
	buffer[0] = y1 >> 8;
 8001cc2:	061b      	lsls	r3, r3, #24
 8001cc4:	607b      	str	r3, [r7, #4]
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8001cc6:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <ILI9341_FillScreen+0x128>)
 8001cc8:	0292      	lsls	r2, r2, #10
 8001cca:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	0252      	lsls	r2, r2, #9
 8001cd0:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8001cd2:	232b      	movs	r3, #43	; 0x2b
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001cd4:	2602      	movs	r6, #2
 8001cd6:	6822      	ldr	r2, [r4, #0]
 8001cd8:	70fb      	strb	r3, [r7, #3]
 8001cda:	6893      	ldr	r3, [r2, #8]
 8001cdc:	421e      	tst	r6, r3
 8001cde:	d0fc      	beq.n	8001cda <ILI9341_FillScreen+0x72>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001ce0:	230a      	movs	r3, #10
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	1cf9      	adds	r1, r7, #3
 8001ce6:	0020      	movs	r0, r4
 8001ce8:	f001 fbee 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001cec:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <ILI9341_FillScreen+0x128>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001cf0:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001cf2:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001cf4:	619a      	str	r2, [r3, #24]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	6821      	ldr	r1, [r4, #0]
 8001cfa:	688b      	ldr	r3, [r1, #8]
 8001cfc:	421a      	tst	r2, r3
 8001cfe:	d0fc      	beq.n	8001cfa <ILI9341_FillScreen+0x92>
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
 8001d00:	230a      	movs	r3, #10
 8001d02:	2204      	movs	r2, #4
 8001d04:	0020      	movs	r0, r4
 8001d06:	1d39      	adds	r1, r7, #4
 8001d08:	f001 fbde 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_DC_PORT->BSRR = LCD_DC_PIN << 16;
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <ILI9341_FillScreen+0x128>)
 8001d10:	0292      	lsls	r2, r2, #10
 8001d12:	619a      	str	r2, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	0252      	lsls	r2, r2, #9
 8001d18:	619a      	str	r2, [r3, #24]
	ILI9341_SPI_Tx(cmd);
 8001d1a:	232c      	movs	r3, #44	; 0x2c
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8001d1c:	2602      	movs	r6, #2
 8001d1e:	6822      	ldr	r2, [r4, #0]
 8001d20:	70fb      	strb	r3, [r7, #3]
 8001d22:	6893      	ldr	r3, [r2, #8]
 8001d24:	421e      	tst	r6, r3
 8001d26:	d0fc      	beq.n	8001d22 <ILI9341_FillScreen+0xba>
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8001d28:	230a      	movs	r3, #10
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	1cf9      	adds	r1, r7, #3
 8001d2e:	0020      	movs	r0, r4
 8001d30:	f001 fbca 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001d34:	2280      	movs	r2, #128	; 0x80
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <ILI9341_FillScreen+0x128>)
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001d38:	0252      	lsls	r2, r2, #9
	LCD_DC_PORT->BSRR = LCD_DC_PIN;
 8001d3a:	619e      	str	r6, [r3, #24]
	LCD_CS_PORT->BSRR = LCD_CS_PIN << 16;
 8001d3c:	619a      	str	r2, [r3, #24]
	uint8_t chifted = color>>8;
 8001d3e:	0a2b      	lsrs	r3, r5, #8
		BurstBuffer[j+1] = color;
 8001d40:	b2ed      	uxtb	r5, r5
	uint8_t BurstBuffer[BufferSize];
 8001d42:	b0fe      	sub	sp, #504	; 0x1f8
 8001d44:	022a      	lsls	r2, r5, #8
 8001d46:	0419      	lsls	r1, r3, #16
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	466e      	mov	r6, sp
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001d4c:	466b      	mov	r3, sp
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	062d      	lsls	r5, r5, #24
 8001d52:	432a      	orrs	r2, r5
 8001d54:	a97d      	add	r1, sp, #500	; 0x1f4
		BurstBuffer[j] = chifted;
 8001d56:	c304      	stmia	r3!, {r2}
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001d58:	428b      	cmp	r3, r1
 8001d5a:	d1fc      	bne.n	8001d56 <ILI9341_FillScreen+0xee>
{
 8001d5c:	2534      	movs	r5, #52	; 0x34
 8001d5e:	35ff      	adds	r5, #255	; 0xff
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001d60:	22fa      	movs	r2, #250	; 0xfa
 8001d62:	230a      	movs	r3, #10
 8001d64:	0031      	movs	r1, r6
 8001d66:	0020      	movs	r0, r4
 8001d68:	0052      	lsls	r2, r2, #1
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001d6a:	3d01      	subs	r5, #1
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001d6c:	f001 fbac 	bl	80034c8 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001d70:	2d00      	cmp	r5, #0
 8001d72:	d1f5      	bne.n	8001d60 <ILI9341_FillScreen+0xf8>
	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001d74:	230a      	movs	r3, #10
 8001d76:	2264      	movs	r2, #100	; 0x64
 8001d78:	0031      	movs	r1, r6
 8001d7a:	0020      	movs	r0, r4
 8001d7c:	f001 fba4 	bl	80034c8 <HAL_SPI_Transmit>
	LCD_CS_PORT->BSRR = LCD_CS_PIN;
 8001d80:	2201      	movs	r2, #1
}
 8001d82:	46bd      	mov	sp, r7
	LCD_CS_PORT->BSRR = LCD_CS_PIN;
 8001d84:	4b02      	ldr	r3, [pc, #8]	; (8001d90 <ILI9341_FillScreen+0x128>)
 8001d86:	619a      	str	r2, [r3, #24]
}
 8001d88:	b003      	add	sp, #12
 8001d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	50000400 	.word	0x50000400
 8001d94:	2000003c 	.word	0x2000003c

08001d98 <ILI9341_DrawPixel>:
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001d98:	23a0      	movs	r3, #160	; 0xa0
{
 8001d9a:	b510      	push	{r4, lr}
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4298      	cmp	r0, r3
 8001da0:	d201      	bcs.n	8001da6 <ILI9341_DrawPixel+0xe>
 8001da2:	29ef      	cmp	r1, #239	; 0xef
 8001da4:	d900      	bls.n	8001da8 <ILI9341_DrawPixel+0x10>
}
 8001da6:	bd10      	pop	{r4, pc}
 8001da8:	f7fe ff50 	bl	8000c4c <ILI9341_DrawPixel.part.0>
 8001dac:	e7fb      	b.n	8001da6 <ILI9341_DrawPixel+0xe>
 8001dae:	46c0      	nop			; (mov r8, r8)

08001db0 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001db2:	25a0      	movs	r5, #160	; 0xa0
{
 8001db4:	ac06      	add	r4, sp, #24
 8001db6:	8826      	ldrh	r6, [r4, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001db8:	006d      	lsls	r5, r5, #1
 8001dba:	42a8      	cmp	r0, r5
 8001dbc:	d216      	bcs.n	8001dec <ILI9341_DrawRectangle+0x3c>
 8001dbe:	29ef      	cmp	r1, #239	; 0xef
 8001dc0:	d814      	bhi.n	8001dec <ILI9341_DrawRectangle+0x3c>

	if((x+width-1)>=LCD_WIDTH)
 8001dc2:	0017      	movs	r7, r2
 8001dc4:	1882      	adds	r2, r0, r2
 8001dc6:	42aa      	cmp	r2, r5
 8001dc8:	dc11      	bgt.n	8001dee <ILI9341_DrawRectangle+0x3e>
	if((y+height-1)>=LCD_HEIGHT)
	{
		height=LCD_HEIGHT-y;
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001dca:	1e7a      	subs	r2, r7, #1
	if((y+height-1)>=LCD_HEIGHT)
 8001dcc:	001c      	movs	r4, r3
	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001dce:	1882      	adds	r2, r0, r2
	if((y+height-1)>=LCD_HEIGHT)
 8001dd0:	18cb      	adds	r3, r1, r3
	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001dd2:	b292      	uxth	r2, r2
	if((y+height-1)>=LCD_HEIGHT)
 8001dd4:	2bf0      	cmp	r3, #240	; 0xf0
 8001dd6:	dc12      	bgt.n	8001dfe <ILI9341_DrawRectangle+0x4e>
	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001dd8:	1e63      	subs	r3, r4, #1
 8001dda:	18cb      	adds	r3, r1, r3
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	f7fe ffc5 	bl	8000d6c <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001de2:	0021      	movs	r1, r4
 8001de4:	0030      	movs	r0, r6
 8001de6:	4379      	muls	r1, r7
 8001de8:	f7ff feb0 	bl	8001b4c <ILI9341_DrawColorBurst>
}
 8001dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ILI9341_DrawColorBurst(color, height*width);
 8001dee:	2240      	movs	r2, #64	; 0x40
	if((y+height-1)>=LCD_HEIGHT)
 8001df0:	001c      	movs	r4, r3
		width=LCD_WIDTH-x;
 8001df2:	1a2d      	subs	r5, r5, r0
	if((y+height-1)>=LCD_HEIGHT)
 8001df4:	18cb      	adds	r3, r1, r3
	ILI9341_DrawColorBurst(color, height*width);
 8001df6:	b2af      	uxth	r7, r5
 8001df8:	32ff      	adds	r2, #255	; 0xff
	if((y+height-1)>=LCD_HEIGHT)
 8001dfa:	2bf0      	cmp	r3, #240	; 0xf0
 8001dfc:	ddec      	ble.n	8001dd8 <ILI9341_DrawRectangle+0x28>
		height=LCD_HEIGHT-y;
 8001dfe:	24f0      	movs	r4, #240	; 0xf0
 8001e00:	1a64      	subs	r4, r4, r1
	ILI9341_DrawColorBurst(color, height*width);
 8001e02:	23ef      	movs	r3, #239	; 0xef
 8001e04:	b2a4      	uxth	r4, r4
 8001e06:	e7ea      	b.n	8001dde <ILI9341_DrawRectangle+0x2e>

08001e08 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e0a:	46c6      	mov	lr, r8
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001e0c:	26a0      	movs	r6, #160	; 0xa0
{
 8001e0e:	0004      	movs	r4, r0
 8001e10:	000f      	movs	r7, r1
 8001e12:	4698      	mov	r8, r3
 8001e14:	b500      	push	{lr}
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001e16:	0076      	lsls	r6, r6, #1
 8001e18:	42b0      	cmp	r0, r6
 8001e1a:	d20d      	bcs.n	8001e38 <ILI9341_DrawHLine+0x30>
 8001e1c:	29ef      	cmp	r1, #239	; 0xef
 8001e1e:	d80b      	bhi.n	8001e38 <ILI9341_DrawHLine+0x30>
//	}
//
//	ILI9341_SetAddress(x, y, x+width-1, y);
//	ILI9341_DrawColorBurst(color, width);

	for(uint16_t i = x ; i <= x + width ; i++){
 8001e20:	1885      	adds	r5, r0, r2
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001e22:	42b4      	cmp	r4, r6
 8001e24:	d204      	bcs.n	8001e30 <ILI9341_DrawHLine+0x28>
 8001e26:	4642      	mov	r2, r8
 8001e28:	0039      	movs	r1, r7
 8001e2a:	0020      	movs	r0, r4
 8001e2c:	f7fe ff0e 	bl	8000c4c <ILI9341_DrawPixel.part.0>
	for(uint16_t i = x ; i <= x + width ; i++){
 8001e30:	3401      	adds	r4, #1
 8001e32:	b2a4      	uxth	r4, r4
 8001e34:	42ac      	cmp	r4, r5
 8001e36:	ddf4      	ble.n	8001e22 <ILI9341_DrawHLine+0x1a>
		ILI9341_DrawPixel(i, y, color);
	}
}
 8001e38:	bc80      	pop	{r7}
 8001e3a:	46b8      	mov	r8, r7
 8001e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3e:	46c0      	nop			; (mov r8, r8)

08001e40 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8001e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e42:	001f      	movs	r7, r3
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001e44:	23a0      	movs	r3, #160	; 0xa0
{
 8001e46:	0006      	movs	r6, r0
 8001e48:	000c      	movs	r4, r1
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4298      	cmp	r0, r3
 8001e4e:	d20d      	bcs.n	8001e6c <ILI9341_DrawVLine+0x2c>
 8001e50:	29ef      	cmp	r1, #239	; 0xef
 8001e52:	d80b      	bhi.n	8001e6c <ILI9341_DrawVLine+0x2c>
//	}
//
//	ILI9341_SetAddress(x, y, x, y+height-1);
//	ILI9341_DrawColorBurst(color, height);

	for(uint16_t i = y ; i <= y + height ; i++){
 8001e54:	188d      	adds	r5, r1, r2
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001e56:	2cef      	cmp	r4, #239	; 0xef
 8001e58:	d804      	bhi.n	8001e64 <ILI9341_DrawVLine+0x24>
 8001e5a:	003a      	movs	r2, r7
 8001e5c:	0021      	movs	r1, r4
 8001e5e:	0030      	movs	r0, r6
 8001e60:	f7fe fef4 	bl	8000c4c <ILI9341_DrawPixel.part.0>
	for(uint16_t i = y ; i <= y + height ; i++){
 8001e64:	3401      	adds	r4, #1
 8001e66:	b2a4      	uxth	r4, r4
 8001e68:	42ac      	cmp	r4, r5
 8001e6a:	ddf4      	ble.n	8001e56 <ILI9341_DrawVLine+0x16>
		ILI9341_DrawPixel(x, i, color);
	}
}
 8001e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)

08001e70 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e72:	46c6      	mov	lr, r8
 8001e74:	b500      	push	{lr}
	if(huart->Instance == huart1.Instance){
 8001e76:	4cb3      	ldr	r4, [pc, #716]	; (8002144 <HAL_UART_RxCpltCallback+0x2d4>)
 8001e78:	6803      	ldr	r3, [r0, #0]
 8001e7a:	6822      	ldr	r2, [r4, #0]
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001e7c:	b08e      	sub	sp, #56	; 0x38
	if(huart->Instance == huart1.Instance){
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d003      	beq.n	8001e8a <HAL_UART_RxCpltCallback+0x1a>
		if(RxData == 14){
			ILI9341_Init();
		}
//		HAL_UART_Receive_IT(&huart1, &RxData, 1);
	}
}
 8001e82:	b00e      	add	sp, #56	; 0x38
 8001e84:	bc80      	pop	{r7}
 8001e86:	46b8      	mov	r8, r7
 8001e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(RxData == 0) return;
 8001e8a:	4baf      	ldr	r3, [pc, #700]	; (8002148 <HAL_UART_RxCpltCallback+0x2d8>)
 8001e8c:	4698      	mov	r8, r3
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f6      	beq.n	8001e82 <HAL_UART_RxCpltCallback+0x12>
		HAL_UART_Transmit(&huart1, &Txdata, 1, 10);
 8001e94:	230a      	movs	r3, #10
 8001e96:	2201      	movs	r2, #1
 8001e98:	0020      	movs	r0, r4
 8001e9a:	49ac      	ldr	r1, [pc, #688]	; (800214c <HAL_UART_RxCpltCallback+0x2dc>)
 8001e9c:	f001 fc72 	bl	8003784 <HAL_UART_Transmit>
		if(RxData == 1){
 8001ea0:	4643      	mov	r3, r8
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d100      	bne.n	8001eaa <HAL_UART_RxCpltCallback+0x3a>
 8001ea8:	e13b      	b.n	8002122 <HAL_UART_RxCpltCallback+0x2b2>
		if(RxData == 2){
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d100      	bne.n	8001eb0 <HAL_UART_RxCpltCallback+0x40>
 8001eae:	e11e      	b.n	80020ee <HAL_UART_RxCpltCallback+0x27e>
		if(RxData == 3){
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d100      	bne.n	8001eb6 <HAL_UART_RxCpltCallback+0x46>
 8001eb4:	e10b      	b.n	80020ce <HAL_UART_RxCpltCallback+0x25e>
		if(RxData == 4){
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d100      	bne.n	8001ebc <HAL_UART_RxCpltCallback+0x4c>
 8001eba:	e0f6      	b.n	80020aa <HAL_UART_RxCpltCallback+0x23a>
		if(RxData == 5){
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d100      	bne.n	8001ec2 <HAL_UART_RxCpltCallback+0x52>
 8001ec0:	e0de      	b.n	8002080 <HAL_UART_RxCpltCallback+0x210>
		if(RxData == 6){
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d100      	bne.n	8001ec8 <HAL_UART_RxCpltCallback+0x58>
 8001ec6:	e0c8      	b.n	800205a <HAL_UART_RxCpltCallback+0x1ea>
		if(RxData == 7){
 8001ec8:	2b07      	cmp	r3, #7
 8001eca:	d100      	bne.n	8001ece <HAL_UART_RxCpltCallback+0x5e>
 8001ecc:	e0b2      	b.n	8002034 <HAL_UART_RxCpltCallback+0x1c4>
		if(RxData == 8){
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d100      	bne.n	8001ed4 <HAL_UART_RxCpltCallback+0x64>
 8001ed2:	e09c      	b.n	800200e <HAL_UART_RxCpltCallback+0x19e>
		if(RxData == 9){
 8001ed4:	2b09      	cmp	r3, #9
 8001ed6:	d100      	bne.n	8001eda <HAL_UART_RxCpltCallback+0x6a>
 8001ed8:	e086      	b.n	8001fe8 <HAL_UART_RxCpltCallback+0x178>
		if(RxData == 10){
 8001eda:	2b0a      	cmp	r3, #10
 8001edc:	d070      	beq.n	8001fc0 <HAL_UART_RxCpltCallback+0x150>
		if(RxData == 11){
 8001ede:	2b0b      	cmp	r3, #11
 8001ee0:	d059      	beq.n	8001f96 <HAL_UART_RxCpltCallback+0x126>
		if(RxData == 12){
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d038      	beq.n	8001f58 <HAL_UART_RxCpltCallback+0xe8>
		if(RxData == 13){
 8001ee6:	2b0d      	cmp	r3, #13
 8001ee8:	d004      	beq.n	8001ef4 <HAL_UART_RxCpltCallback+0x84>
		if(RxData == 14){
 8001eea:	2b0e      	cmp	r3, #14
 8001eec:	d1c9      	bne.n	8001e82 <HAL_UART_RxCpltCallback+0x12>
			ILI9341_Init();
 8001eee:	f7fe ffbd 	bl	8000e6c <ILI9341_Init>
 8001ef2:	e7c6      	b.n	8001e82 <HAL_UART_RxCpltCallback+0x12>
			char str[40] = { 0 };
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	250f      	movs	r5, #15
 8001ef8:	2224      	movs	r2, #36	; 0x24
 8001efa:	2100      	movs	r1, #0
 8001efc:	a805      	add	r0, sp, #20
 8001efe:	9304      	str	r3, [sp, #16]
			uint8_t cnt = 0;
 8001f00:	2700      	movs	r7, #0
			char str[40] = { 0 };
 8001f02:	f002 fccf 	bl	80048a4 <memset>
			uint16_t x = 0, y = 0;
 8001f06:	446d      	add	r5, sp
 8001f08:	ae04      	add	r6, sp, #16
 8001f0a:	e002      	b.n	8001f12 <HAL_UART_RxCpltCallback+0xa2>
				else str[cnt++] = data;
 8001f0c:	1c7a      	adds	r2, r7, #1
 8001f0e:	55f3      	strb	r3, [r6, r7]
 8001f10:	b2d7      	uxtb	r7, r2
				HAL_UART_Receive(&huart1, (uint8_t*)&data, 1, 10);
 8001f12:	230a      	movs	r3, #10
 8001f14:	2201      	movs	r2, #1
 8001f16:	0029      	movs	r1, r5
 8001f18:	0020      	movs	r0, r4
 8001f1a:	f001 fd45 	bl	80039a8 <HAL_UART_Receive>
				if(data == '\0'){
 8001f1e:	782b      	ldrb	r3, [r5, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f3      	bne.n	8001f0c <HAL_UART_RxCpltCallback+0x9c>
			HAL_UART_Receive(&huart1, uartDat, 6, 10);
 8001f24:	4d8a      	ldr	r5, [pc, #552]	; (8002150 <HAL_UART_RxCpltCallback+0x2e0>)
 8001f26:	2206      	movs	r2, #6
 8001f28:	0029      	movs	r1, r5
					str[cnt] = '\0';
 8001f2a:	55f3      	strb	r3, [r6, r7]
			HAL_UART_Receive(&huart1, uartDat, 6, 10);
 8001f2c:	0020      	movs	r0, r4
 8001f2e:	330a      	adds	r3, #10
 8001f30:	f001 fd3a 	bl	80039a8 <HAL_UART_Receive>
			ILI9341_DrawText(str, FONT, x, y, COLOR[uartDat[4]], COLOR[uartDat[5]]);
 8001f34:	7969      	ldrb	r1, [r5, #5]
 8001f36:	4887      	ldr	r0, [pc, #540]	; (8002154 <HAL_UART_RxCpltCallback+0x2e4>)
 8001f38:	0049      	lsls	r1, r1, #1
 8001f3a:	5a09      	ldrh	r1, [r1, r0]
 8001f3c:	886b      	ldrh	r3, [r5, #2]
 8001f3e:	882a      	ldrh	r2, [r5, #0]
 8001f40:	9101      	str	r1, [sp, #4]
 8001f42:	7929      	ldrb	r1, [r5, #4]
 8001f44:	0049      	lsls	r1, r1, #1
 8001f46:	5a09      	ldrh	r1, [r1, r0]
 8001f48:	0030      	movs	r0, r6
 8001f4a:	9100      	str	r1, [sp, #0]
 8001f4c:	4982      	ldr	r1, [pc, #520]	; (8002158 <HAL_UART_RxCpltCallback+0x2e8>)
 8001f4e:	f7fe fdf1 	bl	8000b34 <ILI9341_DrawText>
		if(RxData == 14){
 8001f52:	4643      	mov	r3, r8
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	e7c8      	b.n	8001eea <HAL_UART_RxCpltCallback+0x7a>
			HAL_UART_Receive(&huart1, uartDat, 7, 10);
 8001f58:	4d7d      	ldr	r5, [pc, #500]	; (8002150 <HAL_UART_RxCpltCallback+0x2e0>)
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	0029      	movs	r1, r5
 8001f5e:	3b02      	subs	r3, #2
 8001f60:	0020      	movs	r0, r4
 8001f62:	f001 fd21 	bl	80039a8 <HAL_UART_Receive>
			y |= uartDat[3];
 8001f66:	792b      	ldrb	r3, [r5, #4]
 8001f68:	78ea      	ldrb	r2, [r5, #3]
 8001f6a:	021b      	lsls	r3, r3, #8
			ILI9341_DrawChar(ch, FONT, x, y, COLOR[uartDat[5]], COLOR[uartDat[6]]);
 8001f6c:	4313      	orrs	r3, r2
			x |= uartDat[1];
 8001f6e:	78aa      	ldrb	r2, [r5, #2]
 8001f70:	7869      	ldrb	r1, [r5, #1]
 8001f72:	0212      	lsls	r2, r2, #8
			ILI9341_DrawChar(ch, FONT, x, y, COLOR[uartDat[5]], COLOR[uartDat[6]]);
 8001f74:	430a      	orrs	r2, r1
 8001f76:	79a9      	ldrb	r1, [r5, #6]
 8001f78:	4e76      	ldr	r6, [pc, #472]	; (8002154 <HAL_UART_RxCpltCallback+0x2e4>)
 8001f7a:	0049      	lsls	r1, r1, #1
 8001f7c:	5b89      	ldrh	r1, [r1, r6]
 8001f7e:	7828      	ldrb	r0, [r5, #0]
 8001f80:	9101      	str	r1, [sp, #4]
 8001f82:	7969      	ldrb	r1, [r5, #5]
 8001f84:	0049      	lsls	r1, r1, #1
 8001f86:	5b89      	ldrh	r1, [r1, r6]
 8001f88:	9100      	str	r1, [sp, #0]
 8001f8a:	4973      	ldr	r1, [pc, #460]	; (8002158 <HAL_UART_RxCpltCallback+0x2e8>)
 8001f8c:	f7fe fd6e 	bl	8000a6c <ILI9341_DrawChar>
		if(RxData == 13){
 8001f90:	4643      	mov	r3, r8
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	e7a7      	b.n	8001ee6 <HAL_UART_RxCpltCallback+0x76>
			HAL_UART_Receive(&huart1, uartDat, 9, 10);
 8001f96:	4d6e      	ldr	r5, [pc, #440]	; (8002150 <HAL_UART_RxCpltCallback+0x2e0>)
 8001f98:	2209      	movs	r2, #9
 8001f9a:	0029      	movs	r1, r5
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	0020      	movs	r0, r4
 8001fa0:	f001 fd02 	bl	80039a8 <HAL_UART_Receive>
			ILI9341_DrawFilledRectangleCoord(x0, y0, x1, y1, COLOR[uartDat[8]]);
 8001fa4:	88eb      	ldrh	r3, [r5, #6]
 8001fa6:	88aa      	ldrh	r2, [r5, #4]
 8001fa8:	8869      	ldrh	r1, [r5, #2]
 8001faa:	8828      	ldrh	r0, [r5, #0]
 8001fac:	7a2d      	ldrb	r5, [r5, #8]
 8001fae:	4e69      	ldr	r6, [pc, #420]	; (8002154 <HAL_UART_RxCpltCallback+0x2e4>)
 8001fb0:	006d      	lsls	r5, r5, #1
 8001fb2:	5bad      	ldrh	r5, [r5, r6]
 8001fb4:	9500      	str	r5, [sp, #0]
 8001fb6:	f7fe fd37 	bl	8000a28 <ILI9341_DrawFilledRectangleCoord>
		if(RxData == 12){
 8001fba:	4643      	mov	r3, r8
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	e790      	b.n	8001ee2 <HAL_UART_RxCpltCallback+0x72>
			HAL_UART_Receive(&huart1, uartDat, 9, 10);
 8001fc0:	4d63      	ldr	r5, [pc, #396]	; (8002150 <HAL_UART_RxCpltCallback+0x2e0>)
 8001fc2:	2209      	movs	r2, #9
 8001fc4:	0029      	movs	r1, r5
 8001fc6:	0020      	movs	r0, r4
 8001fc8:	f001 fcee 	bl	80039a8 <HAL_UART_Receive>
			ILI9341_DrawHollowRectangleCoord(x0, y0, x1, y1, COLOR[uartDat[8]]);
 8001fcc:	88eb      	ldrh	r3, [r5, #6]
 8001fce:	88aa      	ldrh	r2, [r5, #4]
 8001fd0:	8869      	ldrh	r1, [r5, #2]
 8001fd2:	8828      	ldrh	r0, [r5, #0]
 8001fd4:	7a2d      	ldrb	r5, [r5, #8]
 8001fd6:	4e5f      	ldr	r6, [pc, #380]	; (8002154 <HAL_UART_RxCpltCallback+0x2e4>)
 8001fd8:	006d      	lsls	r5, r5, #1
 8001fda:	5bad      	ldrh	r5, [r5, r6]
 8001fdc:	9500      	str	r5, [sp, #0]
 8001fde:	f7fe fcc1 	bl	8000964 <ILI9341_DrawHollowRectangleCoord>
		if(RxData == 11){
 8001fe2:	4643      	mov	r3, r8
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	e77a      	b.n	8001ede <HAL_UART_RxCpltCallback+0x6e>
			HAL_UART_Receive(&huart1, uartDat, 7, 10);
 8001fe8:	4d59      	ldr	r5, [pc, #356]	; (8002150 <HAL_UART_RxCpltCallback+0x2e0>)
 8001fea:	2207      	movs	r2, #7
 8001fec:	0029      	movs	r1, r5
 8001fee:	3301      	adds	r3, #1
 8001ff0:	0020      	movs	r0, r4
 8001ff2:	f001 fcd9 	bl	80039a8 <HAL_UART_Receive>
			ILI9341_DrawFilledCircle(x, y, radius, COLOR[uartDat[6]]);
 8001ff6:	79ab      	ldrb	r3, [r5, #6]
 8001ff8:	4a56      	ldr	r2, [pc, #344]	; (8002154 <HAL_UART_RxCpltCallback+0x2e4>)
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	5a9b      	ldrh	r3, [r3, r2]
 8001ffe:	8869      	ldrh	r1, [r5, #2]
 8002000:	88aa      	ldrh	r2, [r5, #4]
 8002002:	8828      	ldrh	r0, [r5, #0]
 8002004:	f7fe fc16 	bl	8000834 <ILI9341_DrawFilledCircle>
		if(RxData == 10){
 8002008:	4643      	mov	r3, r8
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	e765      	b.n	8001eda <HAL_UART_RxCpltCallback+0x6a>
			HAL_UART_Receive(&huart1, uartDat, 7, 10);
 800200e:	4d50      	ldr	r5, [pc, #320]	; (8002150 <HAL_UART_RxCpltCallback+0x2e0>)
 8002010:	2207      	movs	r2, #7
 8002012:	0029      	movs	r1, r5
 8002014:	3302      	adds	r3, #2
 8002016:	0020      	movs	r0, r4
 8002018:	f001 fcc6 	bl	80039a8 <HAL_UART_Receive>
			ILI9341_DrawHollowCircle(x, y, radius, COLOR[uartDat[6]]);
 800201c:	79ab      	ldrb	r3, [r5, #6]
 800201e:	4a4d      	ldr	r2, [pc, #308]	; (8002154 <HAL_UART_RxCpltCallback+0x2e4>)
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	5a9b      	ldrh	r3, [r3, r2]
 8002024:	8869      	ldrh	r1, [r5, #2]
 8002026:	88aa      	ldrh	r2, [r5, #4]
 8002028:	8828      	ldrh	r0, [r5, #0]
 800202a:	f7fe fb75 	bl	8000718 <ILI9341_DrawHollowCircle>
		if(RxData == 9){
 800202e:	4643      	mov	r3, r8
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	e74f      	b.n	8001ed4 <HAL_UART_RxCpltCallback+0x64>
			HAL_UART_Receive(&huart1, uartDat, 7, 10);
 8002034:	4d46      	ldr	r5, [pc, #280]	; (8002150 <HAL_UART_RxCpltCallback+0x2e0>)
 8002036:	2207      	movs	r2, #7
 8002038:	0029      	movs	r1, r5
 800203a:	3303      	adds	r3, #3
 800203c:	0020      	movs	r0, r4
 800203e:	f001 fcb3 	bl	80039a8 <HAL_UART_Receive>
			ILI9341_DrawVLine(x, y, height, COLOR[uartDat[6]]);
 8002042:	79ab      	ldrb	r3, [r5, #6]
 8002044:	4a43      	ldr	r2, [pc, #268]	; (8002154 <HAL_UART_RxCpltCallback+0x2e4>)
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	5a9b      	ldrh	r3, [r3, r2]
 800204a:	8869      	ldrh	r1, [r5, #2]
 800204c:	88aa      	ldrh	r2, [r5, #4]
 800204e:	8828      	ldrh	r0, [r5, #0]
 8002050:	f7ff fef6 	bl	8001e40 <ILI9341_DrawVLine>
		if(RxData == 8){
 8002054:	4643      	mov	r3, r8
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	e739      	b.n	8001ece <HAL_UART_RxCpltCallback+0x5e>
			HAL_UART_Receive(&huart1, uartDat, 7, 10);
 800205a:	4d3d      	ldr	r5, [pc, #244]	; (8002150 <HAL_UART_RxCpltCallback+0x2e0>)
 800205c:	2207      	movs	r2, #7
 800205e:	0029      	movs	r1, r5
 8002060:	3304      	adds	r3, #4
 8002062:	0020      	movs	r0, r4
 8002064:	f001 fca0 	bl	80039a8 <HAL_UART_Receive>
			ILI9341_DrawHLine(x, y, width, COLOR[uartDat[6]]);
 8002068:	79ab      	ldrb	r3, [r5, #6]
 800206a:	4a3a      	ldr	r2, [pc, #232]	; (8002154 <HAL_UART_RxCpltCallback+0x2e4>)
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	5a9b      	ldrh	r3, [r3, r2]
 8002070:	8869      	ldrh	r1, [r5, #2]
 8002072:	88aa      	ldrh	r2, [r5, #4]
 8002074:	8828      	ldrh	r0, [r5, #0]
 8002076:	f7ff fec7 	bl	8001e08 <ILI9341_DrawHLine>
		if(RxData == 7){
 800207a:	4643      	mov	r3, r8
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	e723      	b.n	8001ec8 <HAL_UART_RxCpltCallback+0x58>
			HAL_UART_Receive(&huart1, uartDat, 9, 10);
 8002080:	4d33      	ldr	r5, [pc, #204]	; (8002150 <HAL_UART_RxCpltCallback+0x2e0>)
 8002082:	2209      	movs	r2, #9
 8002084:	0029      	movs	r1, r5
 8002086:	3305      	adds	r3, #5
 8002088:	0020      	movs	r0, r4
 800208a:	f001 fc8d 	bl	80039a8 <HAL_UART_Receive>
			ILI9341_DrawRectangle(x, y, width, height, COLOR[uartDat[8]]);
 800208e:	88eb      	ldrh	r3, [r5, #6]
 8002090:	88aa      	ldrh	r2, [r5, #4]
 8002092:	8869      	ldrh	r1, [r5, #2]
 8002094:	8828      	ldrh	r0, [r5, #0]
 8002096:	7a2d      	ldrb	r5, [r5, #8]
 8002098:	4e2e      	ldr	r6, [pc, #184]	; (8002154 <HAL_UART_RxCpltCallback+0x2e4>)
 800209a:	006d      	lsls	r5, r5, #1
 800209c:	5bad      	ldrh	r5, [r5, r6]
 800209e:	9500      	str	r5, [sp, #0]
 80020a0:	f7ff fe86 	bl	8001db0 <ILI9341_DrawRectangle>
		if(RxData == 6){
 80020a4:	4643      	mov	r3, r8
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	e70b      	b.n	8001ec2 <HAL_UART_RxCpltCallback+0x52>
			HAL_UART_Receive(&huart1, uartDat, 5, 10);
 80020aa:	4d29      	ldr	r5, [pc, #164]	; (8002150 <HAL_UART_RxCpltCallback+0x2e0>)
 80020ac:	2205      	movs	r2, #5
 80020ae:	0029      	movs	r1, r5
 80020b0:	3306      	adds	r3, #6
 80020b2:	0020      	movs	r0, r4
 80020b4:	f001 fc78 	bl	80039a8 <HAL_UART_Receive>
			ILI9341_DrawPixel(x, y, COLOR[uartDat[4]]);
 80020b8:	792b      	ldrb	r3, [r5, #4]
 80020ba:	4a26      	ldr	r2, [pc, #152]	; (8002154 <HAL_UART_RxCpltCallback+0x2e4>)
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	5a9a      	ldrh	r2, [r3, r2]
 80020c0:	8869      	ldrh	r1, [r5, #2]
 80020c2:	8828      	ldrh	r0, [r5, #0]
 80020c4:	f7ff fe68 	bl	8001d98 <ILI9341_DrawPixel>
		if(RxData == 5){
 80020c8:	4643      	mov	r3, r8
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	e6f6      	b.n	8001ebc <HAL_UART_RxCpltCallback+0x4c>
			HAL_UART_Receive(&huart1, uartDat, 1, 10);
 80020ce:	4d20      	ldr	r5, [pc, #128]	; (8002150 <HAL_UART_RxCpltCallback+0x2e0>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	0029      	movs	r1, r5
 80020d4:	3307      	adds	r3, #7
 80020d6:	0020      	movs	r0, r4
 80020d8:	f001 fc66 	bl	80039a8 <HAL_UART_Receive>
			ILI9341_FillScreen(COLOR[uartDat[0]]);
 80020dc:	782b      	ldrb	r3, [r5, #0]
 80020de:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <HAL_UART_RxCpltCallback+0x2e4>)
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	5a98      	ldrh	r0, [r3, r2]
 80020e4:	f7ff fdc0 	bl	8001c68 <ILI9341_FillScreen>
		if(RxData == 4){
 80020e8:	4643      	mov	r3, r8
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	e6e3      	b.n	8001eb6 <HAL_UART_RxCpltCallback+0x46>
			HAL_UART_Receive(&huart1, uartDat, 5, 10);
 80020ee:	4d18      	ldr	r5, [pc, #96]	; (8002150 <HAL_UART_RxCpltCallback+0x2e0>)
 80020f0:	2205      	movs	r2, #5
 80020f2:	0029      	movs	r1, r5
 80020f4:	3308      	adds	r3, #8
 80020f6:	0020      	movs	r0, r4
 80020f8:	f001 fc56 	bl	80039a8 <HAL_UART_Receive>
				size |= uartDat[4 - i];
 80020fc:	792b      	ldrb	r3, [r5, #4]
 80020fe:	78e9      	ldrb	r1, [r5, #3]
				size <<= 8;
 8002100:	021b      	lsls	r3, r3, #8
				size |= uartDat[4 - i];
 8002102:	430b      	orrs	r3, r1
 8002104:	78a9      	ldrb	r1, [r5, #2]
				size <<= 8;
 8002106:	021b      	lsls	r3, r3, #8
				size |= uartDat[4 - i];
 8002108:	4319      	orrs	r1, r3
 800210a:	786b      	ldrb	r3, [r5, #1]
				size <<= 8;
 800210c:	0209      	lsls	r1, r1, #8
				size |= uartDat[4 - i];
 800210e:	4319      	orrs	r1, r3
			ILI9341_DrawColorBurst(COLOR[uartDat[0]], size);
 8002110:	782b      	ldrb	r3, [r5, #0]
 8002112:	4a10      	ldr	r2, [pc, #64]	; (8002154 <HAL_UART_RxCpltCallback+0x2e4>)
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	5a98      	ldrh	r0, [r3, r2]
 8002118:	f7ff fd18 	bl	8001b4c <ILI9341_DrawColorBurst>
		if(RxData == 3){
 800211c:	4643      	mov	r3, r8
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	e6c6      	b.n	8001eb0 <HAL_UART_RxCpltCallback+0x40>
			HAL_UART_Receive(&huart1, uartDat, 1, 10);
 8002122:	4d0b      	ldr	r5, [pc, #44]	; (8002150 <HAL_UART_RxCpltCallback+0x2e0>)
 8002124:	2201      	movs	r2, #1
 8002126:	0029      	movs	r1, r5
 8002128:	3309      	adds	r3, #9
 800212a:	0020      	movs	r0, r4
 800212c:	f001 fc3c 	bl	80039a8 <HAL_UART_Receive>
			ILI9341_DrawColor(COLOR[uartDat[0]]);
 8002130:	782b      	ldrb	r3, [r5, #0]
 8002132:	4a08      	ldr	r2, [pc, #32]	; (8002154 <HAL_UART_RxCpltCallback+0x2e4>)
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	5a98      	ldrh	r0, [r3, r2]
 8002138:	f7ff fcea 	bl	8001b10 <ILI9341_DrawColor>
		if(RxData == 2){
 800213c:	4643      	mov	r3, r8
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	e6b3      	b.n	8001eaa <HAL_UART_RxCpltCallback+0x3a>
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	20000094 	.word	0x20000094
 8002148:	20000038 	.word	0x20000038
 800214c:	2000000c 	.word	0x2000000c
 8002150:	2000011c 	.word	0x2000011c
 8002154:	20000000 	.word	0x20000000
 8002158:	080048cc 	.word	0x080048cc

0800215c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800215c:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800215e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_NVIC_SystemReset();
 8002160:	f000 fa10 	bl	8002584 <HAL_NVIC_SystemReset>
	while (1)
 8002164:	e7fc      	b.n	8002160 <Error_Handler+0x4>
 8002166:	46c0      	nop			; (mov r8, r8)

08002168 <SystemClock_Config>:
{
 8002168:	b510      	push	{r4, lr}
 800216a:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800216c:	2224      	movs	r2, #36	; 0x24
 800216e:	2100      	movs	r1, #0
 8002170:	a80f      	add	r0, sp, #60	; 0x3c
 8002172:	f002 fb97 	bl	80048a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002176:	2214      	movs	r2, #20
 8002178:	2100      	movs	r1, #0
 800217a:	4668      	mov	r0, sp
 800217c:	f002 fb92 	bl	80048a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002180:	2220      	movs	r2, #32
 8002182:	2100      	movs	r1, #0
 8002184:	a806      	add	r0, sp, #24
 8002186:	f002 fb8d 	bl	80048a4 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800218a:	491b      	ldr	r1, [pc, #108]	; (80021f8 <SystemClock_Config+0x90>)
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <SystemClock_Config+0x94>)
 800218e:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002190:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002192:	401a      	ands	r2, r3
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800219c:	2302      	movs	r3, #2
 800219e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021a0:	330e      	adds	r3, #14
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a2:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021a4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a6:	2300      	movs	r3, #0
 80021a8:	9218      	str	r2, [sp, #96]	; 0x60
 80021aa:	9319      	str	r3, [sp, #100]	; 0x64
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	02d2      	lsls	r2, r2, #11
 80021b2:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021b4:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021b6:	921a      	str	r2, [sp, #104]	; 0x68
 80021b8:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021ba:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021bc:	f000 fbaa 	bl	8002914 <HAL_RCC_OscConfig>
 80021c0:	2800      	cmp	r0, #0
 80021c2:	d117      	bne.n	80021f4 <SystemClock_Config+0x8c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c4:	220f      	movs	r2, #15
 80021c6:	2303      	movs	r3, #3
 80021c8:	9200      	str	r2, [sp, #0]
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021d0:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021d2:	2101      	movs	r1, #1
 80021d4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021d6:	9202      	str	r2, [sp, #8]
 80021d8:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021da:	f000 fe95 	bl	8002f08 <HAL_RCC_ClockConfig>
 80021de:	2800      	cmp	r0, #0
 80021e0:	d108      	bne.n	80021f4 <SystemClock_Config+0x8c>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021e2:	9008      	str	r0, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e4:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021e6:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e8:	f000 ff9c 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 80021ec:	2800      	cmp	r0, #0
 80021ee:	d101      	bne.n	80021f4 <SystemClock_Config+0x8c>
}
 80021f0:	b01c      	add	sp, #112	; 0x70
 80021f2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80021f4:	f7ff ffb2 	bl	800215c <Error_Handler>
 80021f8:	40007000 	.word	0x40007000
 80021fc:	ffffe7ff 	.word	0xffffe7ff

08002200 <main>:
{
 8002200:	b530      	push	{r4, r5, lr}
 8002202:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8002204:	f000 f948 	bl	8002498 <HAL_Init>
  SystemClock_Config();
 8002208:	f7ff ffae 	bl	8002168 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	2214      	movs	r2, #20
 800220e:	2100      	movs	r1, #0
 8002210:	a802      	add	r0, sp, #8
 8002212:	f002 fb47 	bl	80048a4 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	2201      	movs	r2, #1
 8002218:	4b2f      	ldr	r3, [pc, #188]	; (80022d8 <main+0xd8>)
  HAL_GPIO_WritePin(GPIOB, SPI_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800221a:	4830      	ldr	r0, [pc, #192]	; (80022dc <main+0xdc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800221e:	4311      	orrs	r1, r2
 8002220:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002222:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002224:	400a      	ands	r2, r1
 8002226:	9200      	str	r2, [sp, #0]
 8002228:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	2202      	movs	r2, #2
 800222c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800222e:	4311      	orrs	r1, r2
 8002230:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, SPI_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002234:	2113      	movs	r1, #19
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	401a      	ands	r2, r3
 8002238:	9201      	str	r2, [sp, #4]
  HAL_GPIO_WritePin(GPIOB, SPI_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800223a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800223c:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOB, SPI_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800223e:	f000 fb1d 	bl	800287c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPI_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002242:	2213      	movs	r2, #19
 8002244:	2301      	movs	r3, #1
 8002246:	9202      	str	r2, [sp, #8]
 8002248:	9303      	str	r3, [sp, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224e:	4823      	ldr	r0, [pc, #140]	; (80022dc <main+0xdc>)
 8002250:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = SPI_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002252:	9204      	str	r2, [sp, #16]
 8002254:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002256:	f000 fa05 	bl	8002664 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 800225a:	4821      	ldr	r0, [pc, #132]	; (80022e0 <main+0xe0>)
 800225c:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <main+0xe4>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800225e:	2280      	movs	r2, #128	; 0x80
  hspi1.Instance = SPI1;
 8002260:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002262:	2382      	movs	r3, #130	; 0x82
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002268:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800226a:	0092      	lsls	r2, r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800226c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800226e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002270:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002272:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002274:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002276:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002278:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800227a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800227c:	3307      	adds	r3, #7
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800227e:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8002280:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002282:	f001 f8ab 	bl	80033dc <HAL_SPI_Init>
 8002286:	2800      	cmp	r0, #0
 8002288:	d124      	bne.n	80022d4 <main+0xd4>
  huart1.Instance = USART1;
 800228a:	4c17      	ldr	r4, [pc, #92]	; (80022e8 <main+0xe8>)
 800228c:	4b17      	ldr	r3, [pc, #92]	; (80022ec <main+0xec>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800228e:	60a0      	str	r0, [r4, #8]
  huart1.Instance = USART1;
 8002290:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 115200;
 8002292:	23e1      	movs	r3, #225	; 0xe1
 8002294:	025b      	lsls	r3, r3, #9
 8002296:	6063      	str	r3, [r4, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002298:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800229a:	60e0      	str	r0, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800229c:	6120      	str	r0, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229e:	61a0      	str	r0, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a0:	61e0      	str	r0, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a2:	6220      	str	r0, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a4:	6260      	str	r0, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022a6:	0020      	movs	r0, r4
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022a8:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022aa:	f002 f97f 	bl	80045ac <HAL_UART_Init>
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d110      	bne.n	80022d4 <main+0xd4>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	301b      	adds	r0, #27
 80022b8:	f000 f926 	bl	8002508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022bc:	201b      	movs	r0, #27
 80022be:	f000 f955 	bl	800256c <HAL_NVIC_EnableIRQ>
  ILI9341_Init();
 80022c2:	f7fe fdd3 	bl	8000e6c <ILI9341_Init>
 80022c6:	4d0a      	ldr	r5, [pc, #40]	; (80022f0 <main+0xf0>)
		HAL_UART_Receive_IT(&huart1, &RxData, 1);
 80022c8:	2201      	movs	r2, #1
 80022ca:	0029      	movs	r1, r5
 80022cc:	0020      	movs	r0, r4
 80022ce:	f001 fc93 	bl	8003bf8 <HAL_UART_Receive_IT>
	while (1)
 80022d2:	e7f9      	b.n	80022c8 <main+0xc8>
    Error_Handler();
 80022d4:	f7ff ff42 	bl	800215c <Error_Handler>
 80022d8:	40021000 	.word	0x40021000
 80022dc:	50000400 	.word	0x50000400
 80022e0:	2000003c 	.word	0x2000003c
 80022e4:	40013000 	.word	0x40013000
 80022e8:	20000094 	.word	0x20000094
 80022ec:	40013800 	.word	0x40013800
 80022f0:	20000038 	.word	0x20000038

080022f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f4:	2101      	movs	r1, #1
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_MspInit+0x18>)
 80022f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022fa:	430a      	orrs	r2, r1
 80022fc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	2280      	movs	r2, #128	; 0x80
 8002300:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002302:	0552      	lsls	r2, r2, #21
 8002304:	430a      	orrs	r2, r1
 8002306:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002308:	4770      	bx	lr
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	40021000 	.word	0x40021000

08002310 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002310:	b510      	push	{r4, lr}
 8002312:	0004      	movs	r4, r0
 8002314:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002316:	2214      	movs	r2, #20
 8002318:	2100      	movs	r1, #0
 800231a:	a802      	add	r0, sp, #8
 800231c:	f002 fac2 	bl	80048a4 <memset>
  if(hspi->Instance==SPI1)
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <HAL_SPI_MspInit+0x50>)
 8002322:	6822      	ldr	r2, [r4, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002328:	b008      	add	sp, #32
 800232a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800232c:	2280      	movs	r2, #128	; 0x80
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_SPI_MspInit+0x54>)
 8002330:	0152      	lsls	r2, r2, #5
 8002332:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002334:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002336:	430a      	orrs	r2, r1
 8002338:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	2201      	movs	r2, #1
 800233c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002340:	4311      	orrs	r1, r2
 8002342:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002348:	401a      	ands	r2, r3
 800234a:	9201      	str	r2, [sp, #4]
 800234c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800234e:	22e0      	movs	r2, #224	; 0xe0
 8002350:	2302      	movs	r3, #2
 8002352:	9202      	str	r2, [sp, #8]
 8002354:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002356:	2303      	movs	r3, #3
 8002358:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235a:	f000 f983 	bl	8002664 <HAL_GPIO_Init>
}
 800235e:	e7e3      	b.n	8002328 <HAL_SPI_MspInit+0x18>
 8002360:	40013000 	.word	0x40013000
 8002364:	40021000 	.word	0x40021000

08002368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002368:	b510      	push	{r4, lr}
 800236a:	0004      	movs	r4, r0
 800236c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236e:	2214      	movs	r2, #20
 8002370:	2100      	movs	r1, #0
 8002372:	a802      	add	r0, sp, #8
 8002374:	f002 fa96 	bl	80048a4 <memset>
  if(huart->Instance==USART1)
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_UART_MspInit+0x58>)
 800237a:	6822      	ldr	r2, [r4, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002380:	b008      	add	sp, #32
 8002382:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002384:	2280      	movs	r2, #128	; 0x80
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <HAL_UART_MspInit+0x5c>)
 8002388:	01d2      	lsls	r2, r2, #7
 800238a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 800238e:	430a      	orrs	r2, r1
 8002390:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002392:	2201      	movs	r2, #1
 8002394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002398:	4311      	orrs	r1, r2
 800239a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a0:	401a      	ands	r2, r3
 80023a2:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023a4:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023a8:	2302      	movs	r3, #2
 80023aa:	00d2      	lsls	r2, r2, #3
 80023ac:	9202      	str	r2, [sp, #8]
 80023ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80023b4:	3301      	adds	r3, #1
 80023b6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	f000 f954 	bl	8002664 <HAL_GPIO_Init>
}
 80023bc:	e7e0      	b.n	8002380 <HAL_UART_MspInit+0x18>
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	40013800 	.word	0x40013800
 80023c4:	40021000 	.word	0x40021000

080023c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <NMI_Handler>
 80023ca:	46c0      	nop			; (mov r8, r8)

080023cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
	  HAL_NVIC_SystemReset();
 80023ce:	f000 f8d9 	bl	8002584 <HAL_NVIC_SystemReset>
  while (1)
 80023d2:	e7fc      	b.n	80023ce <HardFault_Handler+0x2>

080023d4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023d4:	4770      	bx	lr
 80023d6:	46c0      	nop			; (mov r8, r8)

080023d8 <PendSV_Handler>:
 80023d8:	4770      	bx	lr
 80023da:	46c0      	nop			; (mov r8, r8)

080023dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023de:	f000 f86f 	bl	80024c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e2:	bd10      	pop	{r4, pc}

080023e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80023e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023e6:	4802      	ldr	r0, [pc, #8]	; (80023f0 <USART1_IRQHandler+0xc>)
 80023e8:	f001 fcea 	bl	8003dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023ec:	bd10      	pop	{r4, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	20000094 	.word	0x20000094

080023f4 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f4:	4770      	bx	lr
 80023f6:	46c0      	nop			; (mov r8, r8)

080023f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80023fa:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023fc:	f7ff fffa 	bl	80023f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002400:	480c      	ldr	r0, [pc, #48]	; (8002434 <LoopForever+0x6>)
  ldr r1, =_edata
 8002402:	490d      	ldr	r1, [pc, #52]	; (8002438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002404:	4a0d      	ldr	r2, [pc, #52]	; (800243c <LoopForever+0xe>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002408:	e002      	b.n	8002410 <LoopCopyDataInit>

0800240a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800240c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240e:	3304      	adds	r3, #4

08002410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002414:	d3f9      	bcc.n	800240a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002418:	4c0a      	ldr	r4, [pc, #40]	; (8002444 <LoopForever+0x16>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800241c:	e001      	b.n	8002422 <LoopFillZerobss>

0800241e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002420:	3204      	adds	r2, #4

08002422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002424:	d3fb      	bcc.n	800241e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002426:	f002 fa19 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800242a:	f7ff fee9 	bl	8002200 <main>

0800242e <LoopForever>:

LoopForever:
    b LoopForever
 800242e:	e7fe      	b.n	800242e <LoopForever>
   ldr   r0, =_estack
 8002430:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002438:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800243c:	08005aa0 	.word	0x08005aa0
  ldr r2, =_sbss
 8002440:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002444:	2000012c 	.word	0x2000012c

08002448 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002448:	e7fe      	b.n	8002448 <ADC1_COMP_IRQHandler>
	...

0800244c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b510      	push	{r4, lr}
 800244e:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002450:	20fa      	movs	r0, #250	; 0xfa
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_InitTick+0x40>)
 8002454:	0080      	lsls	r0, r0, #2
 8002456:	7819      	ldrb	r1, [r3, #0]
 8002458:	f7fd fe56 	bl	8000108 <__udivsi3>
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_InitTick+0x44>)
 800245e:	0001      	movs	r1, r0
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	f7fd fe51 	bl	8000108 <__udivsi3>
 8002466:	f000 f89b 	bl	80025a0 <HAL_SYSTICK_Config>
 800246a:	2800      	cmp	r0, #0
 800246c:	d10c      	bne.n	8002488 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 800246e:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002470:	2c03      	cmp	r4, #3
 8002472:	d900      	bls.n	8002476 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002474:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002476:	3802      	subs	r0, #2
 8002478:	2200      	movs	r2, #0
 800247a:	0021      	movs	r1, r4
 800247c:	f000 f844 	bl	8002508 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <HAL_InitTick+0x48>)
 8002482:	2000      	movs	r0, #0
 8002484:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8002486:	e7f5      	b.n	8002474 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8002488:	2001      	movs	r0, #1
 800248a:	e7f3      	b.n	8002474 <HAL_InitTick+0x28>
 800248c:	20000014 	.word	0x20000014
 8002490:	20000010 	.word	0x20000010
 8002494:	20000018 	.word	0x20000018

08002498 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002498:	2140      	movs	r1, #64	; 0x40
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_Init+0x24>)
{
 800249c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800249e:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024a0:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80024a2:	430b      	orrs	r3, r1
 80024a4:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024a6:	f7ff ffd1 	bl	800244c <HAL_InitTick>
 80024aa:	1e04      	subs	r4, r0, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_Init+0x1c>
    status = HAL_ERROR;
 80024ae:	2401      	movs	r4, #1
}
 80024b0:	0020      	movs	r0, r4
 80024b2:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 80024b4:	f7ff ff1e 	bl	80022f4 <HAL_MspInit>
 80024b8:	e7fa      	b.n	80024b0 <HAL_Init+0x18>
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	40022000 	.word	0x40022000

080024c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80024c0:	4a03      	ldr	r2, [pc, #12]	; (80024d0 <HAL_IncTick+0x10>)
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_IncTick+0x14>)
 80024c4:	6811      	ldr	r1, [r2, #0]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	185b      	adds	r3, r3, r1
 80024ca:	6013      	str	r3, [r2, #0]
}
 80024cc:	4770      	bx	lr
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	20000128 	.word	0x20000128
 80024d4:	20000014 	.word	0x20000014

080024d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80024d8:	4b01      	ldr	r3, [pc, #4]	; (80024e0 <HAL_GetTick+0x8>)
 80024da:	6818      	ldr	r0, [r3, #0]
}
 80024dc:	4770      	bx	lr
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	20000128 	.word	0x20000128

080024e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff fff6 	bl	80024d8 <HAL_GetTick>
 80024ec:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ee:	1c63      	adds	r3, r4, #1
 80024f0:	d002      	beq.n	80024f8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <HAL_Delay+0x20>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024f8:	f7ff ffee 	bl	80024d8 <HAL_GetTick>
 80024fc:	1b40      	subs	r0, r0, r5
 80024fe:	42a0      	cmp	r0, r4
 8002500:	d3fa      	bcc.n	80024f8 <HAL_Delay+0x14>
  {
  }
}
 8002502:	bd70      	pop	{r4, r5, r6, pc}
 8002504:	20000014 	.word	0x20000014

08002508 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002508:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800250a:	2800      	cmp	r0, #0
 800250c:	db14      	blt.n	8002538 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_NVIC_SetPriority+0x5c>)
 8002510:	2203      	movs	r2, #3
 8002512:	469c      	mov	ip, r3
 8002514:	23ff      	movs	r3, #255	; 0xff
 8002516:	0884      	lsrs	r4, r0, #2
 8002518:	4010      	ands	r0, r2
 800251a:	001a      	movs	r2, r3
 800251c:	26c0      	movs	r6, #192	; 0xc0
 800251e:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002520:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002522:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002524:	400b      	ands	r3, r1
 8002526:	4083      	lsls	r3, r0
 8002528:	00a4      	lsls	r4, r4, #2
 800252a:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800252c:	00b6      	lsls	r6, r6, #2
 800252e:	59a5      	ldr	r5, [r4, r6]
 8002530:	4395      	bics	r5, r2
 8002532:	432b      	orrs	r3, r5
 8002534:	51a3      	str	r3, [r4, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002536:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002538:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <HAL_NVIC_SetPriority+0x60>)
 800253a:	230f      	movs	r3, #15
 800253c:	4694      	mov	ip, r2
 800253e:	2203      	movs	r2, #3
 8002540:	4003      	ands	r3, r0
 8002542:	4010      	ands	r0, r2
 8002544:	32fc      	adds	r2, #252	; 0xfc
 8002546:	0015      	movs	r5, r2
 8002548:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800254a:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800254c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800254e:	400a      	ands	r2, r1
 8002550:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002552:	3b08      	subs	r3, #8
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4463      	add	r3, ip
 800255a:	69dc      	ldr	r4, [r3, #28]
 800255c:	43ac      	bics	r4, r5
 800255e:	4322      	orrs	r2, r4
 8002560:	61da      	str	r2, [r3, #28]
 8002562:	e7e8      	b.n	8002536 <HAL_NVIC_SetPriority+0x2e>
 8002564:	e000e100 	.word	0xe000e100
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800256c:	2800      	cmp	r0, #0
 800256e:	db05      	blt.n	800257c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002570:	231f      	movs	r3, #31
 8002572:	4018      	ands	r0, r3
 8002574:	3b1e      	subs	r3, #30
 8002576:	4083      	lsls	r3, r0
 8002578:	4a01      	ldr	r2, [pc, #4]	; (8002580 <HAL_NVIC_EnableIRQ+0x14>)
 800257a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	e000e100 	.word	0xe000e100

08002584 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002584:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_NVIC_SystemReset+0x14>)
 800258a:	4a04      	ldr	r2, [pc, #16]	; (800259c <HAL_NVIC_SystemReset+0x18>)
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002592:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8002594:	e7fd      	b.n	8002592 <HAL_NVIC_SystemReset+0xe>
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	e000ed00 	.word	0xe000ed00
 800259c:	05fa0004 	.word	0x05fa0004

080025a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	1e43      	subs	r3, r0, #1
 80025a4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d20e      	bcs.n	80025ca <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025ac:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ae:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b0:	4807      	ldr	r0, [pc, #28]	; (80025d0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b4:	6a03      	ldr	r3, [r0, #32]
 80025b6:	0609      	lsls	r1, r1, #24
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	430b      	orrs	r3, r1
 80025be:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c0:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c2:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c6:	3307      	adds	r3, #7
 80025c8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80025ca:	4770      	bx	lr
 80025cc:	e000e010 	.word	0xe000e010
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d4:	2325      	movs	r3, #37	; 0x25
{
 80025d6:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d8:	5cc2      	ldrb	r2, [r0, r3]
 80025da:	2a02      	cmp	r2, #2
 80025dc:	d006      	beq.n	80025ec <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025de:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e0:	3b21      	subs	r3, #33	; 0x21
 80025e2:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80025e4:	3320      	adds	r3, #32
 80025e6:	54c2      	strb	r2, [r0, r3]

    return HAL_ERROR;
 80025e8:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 80025ea:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ec:	240e      	movs	r4, #14
 80025ee:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80025f0:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025f2:	6811      	ldr	r1, [r2, #0]
 80025f4:	43a1      	bics	r1, r4
 80025f6:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80025f8:	2101      	movs	r1, #1
 80025fa:	6814      	ldr	r4, [r2, #0]
 80025fc:	438c      	bics	r4, r1
 80025fe:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002600:	221c      	movs	r2, #28
 8002602:	402a      	ands	r2, r5
 8002604:	000d      	movs	r5, r1
 8002606:	4095      	lsls	r5, r2
 8002608:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 800260a:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800260c:	6065      	str	r5, [r4, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800260e:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002610:	2324      	movs	r3, #36	; 0x24
 8002612:	54c2      	strb	r2, [r0, r3]
    return status;
 8002614:	2000      	movs	r0, #0
 8002616:	e7e8      	b.n	80025ea <HAL_DMA_Abort+0x16>

08002618 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002618:	2325      	movs	r3, #37	; 0x25
{
 800261a:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800261c:	5cc2      	ldrb	r2, [r0, r3]
 800261e:	2a02      	cmp	r2, #2
 8002620:	d003      	beq.n	800262a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002622:	3b21      	subs	r3, #33	; 0x21
 8002624:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8002626:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8002628:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800262a:	240e      	movs	r4, #14
 800262c:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800262e:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002630:	6811      	ldr	r1, [r2, #0]
 8002632:	43a1      	bics	r1, r4
 8002634:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002636:	2101      	movs	r1, #1
 8002638:	6814      	ldr	r4, [r2, #0]
 800263a:	438c      	bics	r4, r1
 800263c:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800263e:	221c      	movs	r2, #28
 8002640:	402a      	ands	r2, r5
 8002642:	000d      	movs	r5, r1
 8002644:	4095      	lsls	r5, r2
 8002646:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8002648:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800264a:	6065      	str	r5, [r4, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800264c:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 800264e:	2324      	movs	r3, #36	; 0x24
 8002650:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8002652:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8002658:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800265a:	2000      	movs	r0, #0
 800265c:	e7e4      	b.n	8002628 <HAL_DMA_Abort_IT+0x10>
 800265e:	2000      	movs	r0, #0
 8002660:	e7e2      	b.n	8002628 <HAL_DMA_Abort_IT+0x10>
 8002662:	46c0      	nop			; (mov r8, r8)

08002664 <HAL_GPIO_Init>:
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002664:	680b      	ldr	r3, [r1, #0]
{
 8002666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002668:	46de      	mov	lr, fp
  while (((GPIO_Init->Pin) >> position) != 0)
 800266a:	469b      	mov	fp, r3
{
 800266c:	4657      	mov	r7, sl
 800266e:	464e      	mov	r6, r9
 8002670:	4645      	mov	r5, r8
 8002672:	468c      	mov	ip, r1
  while (((GPIO_Init->Pin) >> position) != 0)
 8002674:	4659      	mov	r1, fp
{
 8002676:	b5e0      	push	{r5, r6, r7, lr}
  while (((GPIO_Init->Pin) >> position) != 0)
 8002678:	2200      	movs	r2, #0
  uint32_t position = 0x00U;
 800267a:	2300      	movs	r3, #0
{
 800267c:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 800267e:	2900      	cmp	r1, #0
 8002680:	d07b      	beq.n	800277a <HAL_GPIO_Init+0x116>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002682:	2601      	movs	r6, #1
 8002684:	000c      	movs	r4, r1
 8002686:	409e      	lsls	r6, r3
 8002688:	4034      	ands	r4, r6
 800268a:	46a3      	mov	fp, r4

    if (iocurrent)
 800268c:	4231      	tst	r1, r6
 800268e:	d06e      	beq.n	800276e <HAL_GPIO_Init+0x10a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002690:	4664      	mov	r4, ip
 8002692:	2503      	movs	r5, #3
 8002694:	6864      	ldr	r4, [r4, #4]
 8002696:	4025      	ands	r5, r4
 8002698:	46a8      	mov	r8, r5
 800269a:	3d01      	subs	r5, #1
 800269c:	2d01      	cmp	r5, #1
 800269e:	d800      	bhi.n	80026a2 <HAL_GPIO_Init+0x3e>
 80026a0:	e072      	b.n	8002788 <HAL_GPIO_Init+0x124>
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a2:	4645      	mov	r5, r8
 80026a4:	2d03      	cmp	r5, #3
 80026a6:	d000      	beq.n	80026aa <HAL_GPIO_Init+0x46>
 80026a8:	e0b8      	b.n	800281c <HAL_GPIO_Init+0x1b8>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80026aa:	4646      	mov	r6, r8
 80026ac:	4096      	lsls	r6, r2
 80026ae:	43f5      	mvns	r5, r6
 80026b0:	9501      	str	r5, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026b4:	9d01      	ldr	r5, [sp, #4]
 80026b6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b8:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 80026ba:	6005      	str	r5, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026bc:	25c0      	movs	r5, #192	; 0xc0
 80026be:	02ad      	lsls	r5, r5, #10
 80026c0:	422c      	tst	r4, r5
 80026c2:	d054      	beq.n	800276e <HAL_GPIO_Init+0x10a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c4:	2701      	movs	r7, #1
 80026c6:	4e66      	ldr	r6, [pc, #408]	; (8002860 <HAL_GPIO_Init+0x1fc>)
 80026c8:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80026ca:	433d      	orrs	r5, r7
 80026cc:	6375      	str	r5, [r6, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ce:	4e65      	ldr	r6, [pc, #404]	; (8002864 <HAL_GPIO_Init+0x200>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80026d0:	3702      	adds	r7, #2
 80026d2:	46b0      	mov	r8, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80026d4:	089d      	lsrs	r5, r3, #2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80026d6:	401f      	ands	r7, r3
 80026d8:	00bf      	lsls	r7, r7, #2
 80026da:	00ad      	lsls	r5, r5, #2
 80026dc:	4445      	add	r5, r8
 80026de:	46b8      	mov	r8, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 80026e0:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80026e2:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 80026e4:	46b2      	mov	sl, r6
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80026e6:	4646      	mov	r6, r8
 80026e8:	40b7      	lsls	r7, r6
 80026ea:	003e      	movs	r6, r7
 80026ec:	4657      	mov	r7, sl
 80026ee:	43b7      	bics	r7, r6
 80026f0:	46ba      	mov	sl, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80026f2:	27a0      	movs	r7, #160	; 0xa0
 80026f4:	05ff      	lsls	r7, r7, #23
 80026f6:	42b8      	cmp	r0, r7
 80026f8:	d018      	beq.n	800272c <HAL_GPIO_Init+0xc8>
 80026fa:	4f5b      	ldr	r7, [pc, #364]	; (8002868 <HAL_GPIO_Init+0x204>)
 80026fc:	42b8      	cmp	r0, r7
 80026fe:	d100      	bne.n	8002702 <HAL_GPIO_Init+0x9e>
 8002700:	e0a5      	b.n	800284e <HAL_GPIO_Init+0x1ea>
 8002702:	4f5a      	ldr	r7, [pc, #360]	; (800286c <HAL_GPIO_Init+0x208>)
 8002704:	2602      	movs	r6, #2
 8002706:	42b8      	cmp	r0, r7
 8002708:	d009      	beq.n	800271e <HAL_GPIO_Init+0xba>
 800270a:	4f59      	ldr	r7, [pc, #356]	; (8002870 <HAL_GPIO_Init+0x20c>)
 800270c:	2603      	movs	r6, #3
 800270e:	42b8      	cmp	r0, r7
 8002710:	d100      	bne.n	8002714 <HAL_GPIO_Init+0xb0>
 8002712:	e096      	b.n	8002842 <HAL_GPIO_Init+0x1de>
 8002714:	4f57      	ldr	r7, [pc, #348]	; (8002874 <HAL_GPIO_Init+0x210>)
 8002716:	2606      	movs	r6, #6
 8002718:	42b8      	cmp	r0, r7
 800271a:	d100      	bne.n	800271e <HAL_GPIO_Init+0xba>
 800271c:	e090      	b.n	8002840 <HAL_GPIO_Init+0x1dc>
 800271e:	0037      	movs	r7, r6
 8002720:	4646      	mov	r6, r8
 8002722:	40b7      	lsls	r7, r6
 8002724:	003e      	movs	r6, r7
 8002726:	4657      	mov	r7, sl
 8002728:	4337      	orrs	r7, r6
 800272a:	46ba      	mov	sl, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800272c:	4656      	mov	r6, sl

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800272e:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002730:	60ae      	str	r6, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8002732:	465e      	mov	r6, fp
        temp = EXTI->RTSR;
 8002734:	4d50      	ldr	r5, [pc, #320]	; (8002878 <HAL_GPIO_Init+0x214>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002736:	037f      	lsls	r7, r7, #13
        temp &= ~((uint32_t)iocurrent);
 8002738:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 800273a:	68ad      	ldr	r5, [r5, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273c:	423c      	tst	r4, r7
 800273e:	d000      	beq.n	8002742 <HAL_GPIO_Init+0xde>
 8002740:	e07b      	b.n	800283a <HAL_GPIO_Init+0x1d6>
        temp &= ~((uint32_t)iocurrent);
 8002742:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002744:	4f4c      	ldr	r7, [pc, #304]	; (8002878 <HAL_GPIO_Init+0x214>)
 8002746:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8002748:	68fd      	ldr	r5, [r7, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800274a:	02a7      	lsls	r7, r4, #10
 800274c:	d500      	bpl.n	8002750 <HAL_GPIO_Init+0xec>
 800274e:	e071      	b.n	8002834 <HAL_GPIO_Init+0x1d0>
        temp &= ~((uint32_t)iocurrent);
 8002750:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8002752:	4f49      	ldr	r7, [pc, #292]	; (8002878 <HAL_GPIO_Init+0x214>)
 8002754:	60fd      	str	r5, [r7, #12]

        temp = EXTI->EMR;
 8002756:	687d      	ldr	r5, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002758:	03a7      	lsls	r7, r4, #14
 800275a:	d468      	bmi.n	800282e <HAL_GPIO_Init+0x1ca>
        temp &= ~((uint32_t)iocurrent);
 800275c:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800275e:	4f46      	ldr	r7, [pc, #280]	; (8002878 <HAL_GPIO_Init+0x214>)
 8002760:	607d      	str	r5, [r7, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002762:	683d      	ldr	r5, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002764:	03e4      	lsls	r4, r4, #15
 8002766:	d45e      	bmi.n	8002826 <HAL_GPIO_Init+0x1c2>
        temp &= ~((uint32_t)iocurrent);
 8002768:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800276a:	4c43      	ldr	r4, [pc, #268]	; (8002878 <HAL_GPIO_Init+0x214>)
 800276c:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0)
 800276e:	000c      	movs	r4, r1
      }
    }
    position++;
 8002770:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8002772:	40dc      	lsrs	r4, r3
 8002774:	3202      	adds	r2, #2
 8002776:	2c00      	cmp	r4, #0
 8002778:	d183      	bne.n	8002682 <HAL_GPIO_Init+0x1e>
  }
}
 800277a:	b003      	add	sp, #12
 800277c:	bcf0      	pop	{r4, r5, r6, r7}
 800277e:	46bb      	mov	fp, r7
 8002780:	46b2      	mov	sl, r6
 8002782:	46a9      	mov	r9, r5
 8002784:	46a0      	mov	r8, r4
 8002786:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8002788:	6885      	ldr	r5, [r0, #8]
 800278a:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800278c:	2503      	movs	r5, #3
 800278e:	4095      	lsls	r5, r2
 8002790:	46aa      	mov	sl, r5
 8002792:	43ed      	mvns	r5, r5
 8002794:	464f      	mov	r7, r9
 8002796:	9501      	str	r5, [sp, #4]
 8002798:	4655      	mov	r5, sl
 800279a:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800279c:	4665      	mov	r5, ip
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800279e:	46ba      	mov	sl, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a0:	68ef      	ldr	r7, [r5, #12]
 80027a2:	4097      	lsls	r7, r2
 80027a4:	46b9      	mov	r9, r7
 80027a6:	4657      	mov	r7, sl
 80027a8:	464d      	mov	r5, r9
 80027aa:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80027ac:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80027ae:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b0:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b2:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b4:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b6:	0926      	lsrs	r6, r4, #4
 80027b8:	402e      	ands	r6, r5
 80027ba:	409e      	lsls	r6, r3
 80027bc:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80027be:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80027c0:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027c2:	9d01      	ldr	r5, [sp, #4]
 80027c4:	402e      	ands	r6, r5
 80027c6:	46b1      	mov	r9, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c8:	4666      	mov	r6, ip
 80027ca:	68b6      	ldr	r6, [r6, #8]
 80027cc:	464f      	mov	r7, r9
 80027ce:	4096      	lsls	r6, r2
 80027d0:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 80027d2:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d4:	4647      	mov	r7, r8
 80027d6:	4646      	mov	r6, r8
 80027d8:	4096      	lsls	r6, r2
 80027da:	2f02      	cmp	r7, #2
 80027dc:	d000      	beq.n	80027e0 <HAL_GPIO_Init+0x17c>
 80027de:	e768      	b.n	80026b2 <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3U];
 80027e0:	08dd      	lsrs	r5, r3, #3
 80027e2:	00ad      	lsls	r5, r5, #2
 80027e4:	46a8      	mov	r8, r5
 80027e6:	4480      	add	r8, r0
 80027e8:	4645      	mov	r5, r8
 80027ea:	6a2d      	ldr	r5, [r5, #32]
 80027ec:	46aa      	mov	sl, r5
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80027ee:	2507      	movs	r5, #7
 80027f0:	002f      	movs	r7, r5
 80027f2:	401f      	ands	r7, r3
 80027f4:	00bd      	lsls	r5, r7, #2
 80027f6:	270f      	movs	r7, #15
 80027f8:	46a9      	mov	r9, r5
 80027fa:	40af      	lsls	r7, r5
 80027fc:	4655      	mov	r5, sl
 80027fe:	43bd      	bics	r5, r7
 8002800:	46aa      	mov	sl, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002802:	4665      	mov	r5, ip
 8002804:	464f      	mov	r7, r9
 8002806:	692d      	ldr	r5, [r5, #16]
 8002808:	40bd      	lsls	r5, r7
 800280a:	46a9      	mov	r9, r5
 800280c:	4655      	mov	r5, sl
 800280e:	464f      	mov	r7, r9
 8002810:	433d      	orrs	r5, r7
 8002812:	46aa      	mov	sl, r5
        GPIOx->AFR[position >> 3U] = temp;
 8002814:	4645      	mov	r5, r8
 8002816:	4657      	mov	r7, sl
 8002818:	622f      	str	r7, [r5, #32]
 800281a:	e74a      	b.n	80026b2 <HAL_GPIO_Init+0x4e>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800281c:	2503      	movs	r5, #3
 800281e:	4095      	lsls	r5, r2
 8002820:	43ed      	mvns	r5, r5
 8002822:	9501      	str	r5, [sp, #4]
 8002824:	e7cc      	b.n	80027c0 <HAL_GPIO_Init+0x15c>
          temp |= iocurrent;
 8002826:	465c      	mov	r4, fp
 8002828:	432c      	orrs	r4, r5
 800282a:	0025      	movs	r5, r4
 800282c:	e79d      	b.n	800276a <HAL_GPIO_Init+0x106>
          temp |= iocurrent;
 800282e:	465f      	mov	r7, fp
 8002830:	433d      	orrs	r5, r7
 8002832:	e794      	b.n	800275e <HAL_GPIO_Init+0xfa>
          temp |= iocurrent;
 8002834:	465f      	mov	r7, fp
 8002836:	433d      	orrs	r5, r7
 8002838:	e78b      	b.n	8002752 <HAL_GPIO_Init+0xee>
          temp |= iocurrent;
 800283a:	465f      	mov	r7, fp
 800283c:	433d      	orrs	r5, r7
 800283e:	e781      	b.n	8002744 <HAL_GPIO_Init+0xe0>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002840:	2605      	movs	r6, #5
 8002842:	4647      	mov	r7, r8
 8002844:	40be      	lsls	r6, r7
 8002846:	4657      	mov	r7, sl
 8002848:	4337      	orrs	r7, r6
 800284a:	46ba      	mov	sl, r7
 800284c:	e76e      	b.n	800272c <HAL_GPIO_Init+0xc8>
 800284e:	4646      	mov	r6, r8
 8002850:	2701      	movs	r7, #1
 8002852:	40b7      	lsls	r7, r6
 8002854:	003e      	movs	r6, r7
 8002856:	4657      	mov	r7, sl
 8002858:	4337      	orrs	r7, r6
 800285a:	46ba      	mov	sl, r7
 800285c:	e766      	b.n	800272c <HAL_GPIO_Init+0xc8>
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	40021000 	.word	0x40021000
 8002864:	40010000 	.word	0x40010000
 8002868:	50000400 	.word	0x50000400
 800286c:	50000800 	.word	0x50000800
 8002870:	50000c00 	.word	0x50000c00
 8002874:	50001c00 	.word	0x50001c00
 8002878:	40010400 	.word	0x40010400

0800287c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800287c:	2a00      	cmp	r2, #0
 800287e:	d001      	beq.n	8002884 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002880:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002882:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8002884:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002886:	e7fc      	b.n	8002882 <HAL_GPIO_WritePin+0x6>

08002888 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002888:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800288a:	491c      	ldr	r1, [pc, #112]	; (80028fc <HAL_RCC_GetSysClockFreq+0x74>)
{
 800288c:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 800288e:	68ca      	ldr	r2, [r1, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002890:	4013      	ands	r3, r2
 8002892:	2b08      	cmp	r3, #8
 8002894:	d00b      	beq.n	80028ae <HAL_RCC_GetSysClockFreq+0x26>
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d014      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x3c>
 800289a:	2b04      	cmp	r3, #4
 800289c:	d009      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x2a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800289e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80028a0:	684b      	ldr	r3, [r1, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80028a2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80028a4:	041b      	lsls	r3, r3, #16
 80028a6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80028a8:	3301      	adds	r3, #1
 80028aa:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 80028ac:	bd10      	pop	{r4, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 80028ae:	4814      	ldr	r0, [pc, #80]	; (8002900 <HAL_RCC_GetSysClockFreq+0x78>)
 80028b0:	e7fc      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x24>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028b2:	6808      	ldr	r0, [r1, #0]
        sysclockfreq =  HSI_VALUE;
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028b6:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80028b8:	17c0      	asrs	r0, r0, #31
 80028ba:	4018      	ands	r0, r3
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_RCC_GetSysClockFreq+0x80>)
 80028be:	469c      	mov	ip, r3
 80028c0:	4460      	add	r0, ip
 80028c2:	e7f3      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x24>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028c4:	0293      	lsls	r3, r2, #10
 80028c6:	4811      	ldr	r0, [pc, #68]	; (800290c <HAL_RCC_GetSysClockFreq+0x84>)
 80028c8:	0f1b      	lsrs	r3, r3, #28
 80028ca:	5cc0      	ldrb	r0, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028cc:	0212      	lsls	r2, r2, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ce:	68cb      	ldr	r3, [r1, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028d0:	0f94      	lsrs	r4, r2, #30
 80028d2:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d4:	03db      	lsls	r3, r3, #15
 80028d6:	d40c      	bmi.n	80028f2 <HAL_RCC_GetSysClockFreq+0x6a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028d8:	680b      	ldr	r3, [r1, #0]
 80028da:	06db      	lsls	r3, r3, #27
 80028dc:	d50b      	bpl.n	80028f6 <HAL_RCC_GetSysClockFreq+0x6e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80028de:	4a0c      	ldr	r2, [pc, #48]	; (8002910 <HAL_RCC_GetSysClockFreq+0x88>)
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028e0:	2300      	movs	r3, #0
 80028e2:	2100      	movs	r1, #0
 80028e4:	f7fd fcf6 	bl	80002d4 <__aeabi_lmul>
 80028e8:	0022      	movs	r2, r4
 80028ea:	2300      	movs	r3, #0
 80028ec:	f7fd fcd2 	bl	8000294 <__aeabi_uldivmod>
 80028f0:	e7dc      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x24>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028f2:	4a03      	ldr	r2, [pc, #12]	; (8002900 <HAL_RCC_GetSysClockFreq+0x78>)
 80028f4:	e7f4      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x58>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028f6:	4a04      	ldr	r2, [pc, #16]	; (8002908 <HAL_RCC_GetSysClockFreq+0x80>)
 80028f8:	e7f2      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x58>
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	40021000 	.word	0x40021000
 8002900:	007a1200 	.word	0x007a1200
 8002904:	ff48e500 	.word	0xff48e500
 8002908:	00f42400 	.word	0x00f42400
 800290c:	08005a28 	.word	0x08005a28
 8002910:	003d0900 	.word	0x003d0900

08002914 <HAL_RCC_OscConfig>:
{
 8002914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002916:	46d6      	mov	lr, sl
 8002918:	464f      	mov	r7, r9
 800291a:	4646      	mov	r6, r8
 800291c:	b5c0      	push	{r6, r7, lr}
 800291e:	0004      	movs	r4, r0
 8002920:	b082      	sub	sp, #8
  if(RCC_OscInitStruct == NULL)
 8002922:	2800      	cmp	r0, #0
 8002924:	d100      	bne.n	8002928 <HAL_RCC_OscConfig+0x14>
 8002926:	e147      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2a4>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002928:	4bc9      	ldr	r3, [pc, #804]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
 800292a:	250c      	movs	r5, #12
 800292c:	68da      	ldr	r2, [r3, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800292e:	68de      	ldr	r6, [r3, #12]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	025b      	lsls	r3, r3, #9
 8002934:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002938:	4015      	ands	r5, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293a:	07da      	lsls	r2, r3, #31
 800293c:	d533      	bpl.n	80029a6 <HAL_RCC_OscConfig+0x92>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800293e:	2d08      	cmp	r5, #8
 8002940:	d100      	bne.n	8002944 <HAL_RCC_OscConfig+0x30>
 8002942:	e130      	b.n	8002ba6 <HAL_RCC_OscConfig+0x292>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002944:	2d0c      	cmp	r5, #12
 8002946:	d100      	bne.n	800294a <HAL_RCC_OscConfig+0x36>
 8002948:	e12a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x28c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294a:	2280      	movs	r2, #128	; 0x80
 800294c:	6863      	ldr	r3, [r4, #4]
 800294e:	0252      	lsls	r2, r2, #9
 8002950:	4293      	cmp	r3, r2
 8002952:	d100      	bne.n	8002956 <HAL_RCC_OscConfig+0x42>
 8002954:	e162      	b.n	8002c1c <HAL_RCC_OscConfig+0x308>
 8002956:	21a0      	movs	r1, #160	; 0xa0
 8002958:	02c9      	lsls	r1, r1, #11
 800295a:	428b      	cmp	r3, r1
 800295c:	d100      	bne.n	8002960 <HAL_RCC_OscConfig+0x4c>
 800295e:	e247      	b.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
 8002960:	4fbb      	ldr	r7, [pc, #748]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
 8002962:	48bc      	ldr	r0, [pc, #752]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002964:	6839      	ldr	r1, [r7, #0]
 8002966:	4001      	ands	r1, r0
 8002968:	6039      	str	r1, [r7, #0]
 800296a:	6839      	ldr	r1, [r7, #0]
 800296c:	400a      	ands	r2, r1
 800296e:	9201      	str	r2, [sp, #4]
 8002970:	9a01      	ldr	r2, [sp, #4]
 8002972:	49b9      	ldr	r1, [pc, #740]	; (8002c58 <HAL_RCC_OscConfig+0x344>)
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	400a      	ands	r2, r1
 8002978:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800297a:	2b00      	cmp	r3, #0
 800297c:	d000      	beq.n	8002980 <HAL_RCC_OscConfig+0x6c>
 800297e:	e151      	b.n	8002c24 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8002980:	f7ff fdaa 	bl	80024d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 8002988:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800298a:	4699      	mov	r9, r3
 800298c:	e006      	b.n	800299c <HAL_RCC_OscConfig+0x88>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800298e:	f7ff fda3 	bl	80024d8 <HAL_GetTick>
 8002992:	4643      	mov	r3, r8
 8002994:	1ac0      	subs	r0, r0, r3
 8002996:	2864      	cmp	r0, #100	; 0x64
 8002998:	d900      	bls.n	800299c <HAL_RCC_OscConfig+0x88>
 800299a:	e1ce      	b.n	8002d3a <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800299c:	464a      	mov	r2, r9
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	4213      	tst	r3, r2
 80029a2:	d1f4      	bne.n	800298e <HAL_RCC_OscConfig+0x7a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	079a      	lsls	r2, r3, #30
 80029a8:	d527      	bpl.n	80029fa <HAL_RCC_OscConfig+0xe6>
    hsi_state = RCC_OscInitStruct->HSIState;
 80029aa:	68e3      	ldr	r3, [r4, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ac:	2d04      	cmp	r5, #4
 80029ae:	d100      	bne.n	80029b2 <HAL_RCC_OscConfig+0x9e>
 80029b0:	e16d      	b.n	8002c8e <HAL_RCC_OscConfig+0x37a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029b2:	2d0c      	cmp	r5, #12
 80029b4:	d100      	bne.n	80029b8 <HAL_RCC_OscConfig+0xa4>
 80029b6:	e167      	b.n	8002c88 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80029b8:	4ea5      	ldr	r6, [pc, #660]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
      if(hsi_state != RCC_HSI_OFF)
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d100      	bne.n	80029c0 <HAL_RCC_OscConfig+0xac>
 80029be:	e1d3      	b.n	8002d68 <HAL_RCC_OscConfig+0x454>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80029c0:	2109      	movs	r1, #9
 80029c2:	6832      	ldr	r2, [r6, #0]
 80029c4:	438a      	bics	r2, r1
 80029c6:	4313      	orrs	r3, r2
 80029c8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80029ca:	f7ff fd85 	bl	80024d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ce:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 80029d0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029d2:	4698      	mov	r8, r3
 80029d4:	e005      	b.n	80029e2 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d6:	f7ff fd7f 	bl	80024d8 <HAL_GetTick>
 80029da:	1bc0      	subs	r0, r0, r7
 80029dc:	2802      	cmp	r0, #2
 80029de:	d900      	bls.n	80029e2 <HAL_RCC_OscConfig+0xce>
 80029e0:	e1ab      	b.n	8002d3a <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029e2:	4642      	mov	r2, r8
 80029e4:	6833      	ldr	r3, [r6, #0]
 80029e6:	421a      	tst	r2, r3
 80029e8:	d0f5      	beq.n	80029d6 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	6872      	ldr	r2, [r6, #4]
 80029ec:	6923      	ldr	r3, [r4, #16]
 80029ee:	499b      	ldr	r1, [pc, #620]	; (8002c5c <HAL_RCC_OscConfig+0x348>)
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	400a      	ands	r2, r1
 80029f4:	4313      	orrs	r3, r2
 80029f6:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	06da      	lsls	r2, r3, #27
 80029fc:	d52b      	bpl.n	8002a56 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029fe:	2d00      	cmp	r5, #0
 8002a00:	d100      	bne.n	8002a04 <HAL_RCC_OscConfig+0xf0>
 8002a02:	e0e0      	b.n	8002bc6 <HAL_RCC_OscConfig+0x2b2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a04:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 8002a06:	4e92      	ldr	r6, [pc, #584]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d100      	bne.n	8002a0e <HAL_RCC_OscConfig+0xfa>
 8002a0c:	e1c1      	b.n	8002d92 <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_MSI_ENABLE();
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	6832      	ldr	r2, [r6, #0]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4313      	orrs	r3, r2
 8002a16:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002a18:	f7ff fd5e 	bl	80024d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8002a20:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a22:	4698      	mov	r8, r3
 8002a24:	e005      	b.n	8002a32 <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a26:	f7ff fd57 	bl	80024d8 <HAL_GetTick>
 8002a2a:	1bc0      	subs	r0, r0, r7
 8002a2c:	2802      	cmp	r0, #2
 8002a2e:	d900      	bls.n	8002a32 <HAL_RCC_OscConfig+0x11e>
 8002a30:	e183      	b.n	8002d3a <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a32:	4642      	mov	r2, r8
 8002a34:	6833      	ldr	r3, [r6, #0]
 8002a36:	4213      	tst	r3, r2
 8002a38:	d0f5      	beq.n	8002a26 <HAL_RCC_OscConfig+0x112>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a3a:	6873      	ldr	r3, [r6, #4]
 8002a3c:	4a88      	ldr	r2, [pc, #544]	; (8002c60 <HAL_RCC_OscConfig+0x34c>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a42:	4313      	orrs	r3, r2
 8002a44:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a46:	6872      	ldr	r2, [r6, #4]
 8002a48:	6a23      	ldr	r3, [r4, #32]
 8002a4a:	0212      	lsls	r2, r2, #8
 8002a4c:	061b      	lsls	r3, r3, #24
 8002a4e:	0a12      	lsrs	r2, r2, #8
 8002a50:	4313      	orrs	r3, r2
 8002a52:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	071a      	lsls	r2, r3, #28
 8002a58:	d519      	bpl.n	8002a8e <HAL_RCC_OscConfig+0x17a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a5a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002a5c:	4e7c      	ldr	r6, [pc, #496]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d100      	bne.n	8002a64 <HAL_RCC_OscConfig+0x150>
 8002a62:	e16c      	b.n	8002d3e <HAL_RCC_OscConfig+0x42a>
      __HAL_RCC_LSI_ENABLE();
 8002a64:	2201      	movs	r2, #1
 8002a66:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002a6c:	f7ff fd34 	bl	80024d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a70:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8002a72:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a74:	4698      	mov	r8, r3
 8002a76:	e005      	b.n	8002a84 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a78:	f7ff fd2e 	bl	80024d8 <HAL_GetTick>
 8002a7c:	1bc0      	subs	r0, r0, r7
 8002a7e:	2802      	cmp	r0, #2
 8002a80:	d900      	bls.n	8002a84 <HAL_RCC_OscConfig+0x170>
 8002a82:	e15a      	b.n	8002d3a <HAL_RCC_OscConfig+0x426>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a84:	4642      	mov	r2, r8
 8002a86:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002a88:	421a      	tst	r2, r3
 8002a8a:	d0f5      	beq.n	8002a78 <HAL_RCC_OscConfig+0x164>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	075a      	lsls	r2, r3, #29
 8002a90:	d543      	bpl.n	8002b1a <HAL_RCC_OscConfig+0x206>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a92:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002a94:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a96:	4a6e      	ldr	r2, [pc, #440]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
 8002a98:	055b      	lsls	r3, r3, #21
 8002a9a:	6b91      	ldr	r1, [r2, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8002a9c:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9e:	4219      	tst	r1, r3
 8002aa0:	d104      	bne.n	8002aac <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	2780      	movs	r7, #128	; 0x80
 8002aae:	4e6d      	ldr	r6, [pc, #436]	; (8002c64 <HAL_RCC_OscConfig+0x350>)
 8002ab0:	007f      	lsls	r7, r7, #1
 8002ab2:	6833      	ldr	r3, [r6, #0]
 8002ab4:	423b      	tst	r3, r7
 8002ab6:	d100      	bne.n	8002aba <HAL_RCC_OscConfig+0x1a6>
 8002ab8:	e12f      	b.n	8002d1a <HAL_RCC_OscConfig+0x406>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	68a3      	ldr	r3, [r4, #8]
 8002abe:	0052      	lsls	r2, r2, #1
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d100      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x1b2>
 8002ac4:	e1d9      	b.n	8002e7a <HAL_RCC_OscConfig+0x566>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d100      	bne.n	8002acc <HAL_RCC_OscConfig+0x1b8>
 8002aca:	e10a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x3ce>
 8002acc:	21a0      	movs	r1, #160	; 0xa0
 8002ace:	00c9      	lsls	r1, r1, #3
 8002ad0:	428b      	cmp	r3, r1
 8002ad2:	d100      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x1c2>
 8002ad4:	e1f3      	b.n	8002ebe <HAL_RCC_OscConfig+0x5aa>
 8002ad6:	4b5e      	ldr	r3, [pc, #376]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
 8002ad8:	4963      	ldr	r1, [pc, #396]	; (8002c68 <HAL_RCC_OscConfig+0x354>)
 8002ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002adc:	400a      	ands	r2, r1
 8002ade:	651a      	str	r2, [r3, #80]	; 0x50
 8002ae0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ae2:	4962      	ldr	r1, [pc, #392]	; (8002c6c <HAL_RCC_OscConfig+0x358>)
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	651a      	str	r2, [r3, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002ae8:	f7ff fcf6 	bl	80024d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aec:	2780      	movs	r7, #128	; 0x80
 8002aee:	4b58      	ldr	r3, [pc, #352]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
      tickstart = HAL_GetTick();
 8002af0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002af2:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <HAL_RCC_OscConfig+0x35c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002af6:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af8:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002afa:	e005      	b.n	8002b08 <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afc:	f7ff fcec 	bl	80024d8 <HAL_GetTick>
 8002b00:	1b80      	subs	r0, r0, r6
 8002b02:	4548      	cmp	r0, r9
 8002b04:	d900      	bls.n	8002b08 <HAL_RCC_OscConfig+0x1f4>
 8002b06:	e118      	b.n	8002d3a <HAL_RCC_OscConfig+0x426>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b08:	4643      	mov	r3, r8
 8002b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0c:	423b      	tst	r3, r7
 8002b0e:	d0f5      	beq.n	8002afc <HAL_RCC_OscConfig+0x1e8>
    if(pwrclkchanged == SET)
 8002b10:	4653      	mov	r3, sl
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d100      	bne.n	8002b18 <HAL_RCC_OscConfig+0x204>
 8002b16:	e175      	b.n	8002e04 <HAL_RCC_OscConfig+0x4f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	069b      	lsls	r3, r3, #26
 8002b1c:	d521      	bpl.n	8002b62 <HAL_RCC_OscConfig+0x24e>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b1e:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_HSI48_ENABLE();
 8002b20:	4e4b      	ldr	r6, [pc, #300]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d100      	bne.n	8002b28 <HAL_RCC_OscConfig+0x214>
 8002b26:	e14a      	b.n	8002dbe <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_HSI48_ENABLE();
 8002b28:	2101      	movs	r1, #1
 8002b2a:	68b2      	ldr	r2, [r6, #8]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	60b2      	str	r2, [r6, #8]
 8002b30:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8002b32:	4a50      	ldr	r2, [pc, #320]	; (8002c74 <HAL_RCC_OscConfig+0x360>)
 8002b34:	430b      	orrs	r3, r1
 8002b36:	6373      	str	r3, [r6, #52]	; 0x34
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	6a11      	ldr	r1, [r2, #32]
 8002b3c:	019b      	lsls	r3, r3, #6
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8002b42:	f7ff fcc9 	bl	80024d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b46:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8002b48:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b4a:	4698      	mov	r8, r3
 8002b4c:	e005      	b.n	8002b5a <HAL_RCC_OscConfig+0x246>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b4e:	f7ff fcc3 	bl	80024d8 <HAL_GetTick>
 8002b52:	1bc0      	subs	r0, r0, r7
 8002b54:	2802      	cmp	r0, #2
 8002b56:	d900      	bls.n	8002b5a <HAL_RCC_OscConfig+0x246>
 8002b58:	e0ef      	b.n	8002d3a <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b5a:	4642      	mov	r2, r8
 8002b5c:	68b3      	ldr	r3, [r6, #8]
 8002b5e:	421a      	tst	r2, r3
 8002b60:	d0f5      	beq.n	8002b4e <HAL_RCC_OscConfig+0x23a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d019      	beq.n	8002b9c <HAL_RCC_OscConfig+0x288>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b68:	2d0c      	cmp	r5, #12
 8002b6a:	d100      	bne.n	8002b6e <HAL_RCC_OscConfig+0x25a>
 8002b6c:	e18a      	b.n	8002e84 <HAL_RCC_OscConfig+0x570>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d100      	bne.n	8002b74 <HAL_RCC_OscConfig+0x260>
 8002b72:	e14e      	b.n	8002e12 <HAL_RCC_OscConfig+0x4fe>
        __HAL_RCC_PLL_DISABLE();
 8002b74:	4c36      	ldr	r4, [pc, #216]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
 8002b76:	4a40      	ldr	r2, [pc, #256]	; (8002c78 <HAL_RCC_OscConfig+0x364>)
 8002b78:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b7a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b80:	f7ff fcaa 	bl	80024d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b84:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8002b86:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b88:	e005      	b.n	8002b96 <HAL_RCC_OscConfig+0x282>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7ff fca5 	bl	80024d8 <HAL_GetTick>
 8002b8e:	1b40      	subs	r0, r0, r5
 8002b90:	2802      	cmp	r0, #2
 8002b92:	d900      	bls.n	8002b96 <HAL_RCC_OscConfig+0x282>
 8002b94:	e0d1      	b.n	8002d3a <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	4233      	tst	r3, r6
 8002b9a:	d1f6      	bne.n	8002b8a <HAL_RCC_OscConfig+0x276>
  return HAL_OK;
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	e00c      	b.n	8002bba <HAL_RCC_OscConfig+0x2a6>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ba0:	2e00      	cmp	r6, #0
 8002ba2:	d100      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x292>
 8002ba4:	e6d1      	b.n	800294a <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba6:	4a2a      	ldr	r2, [pc, #168]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	0392      	lsls	r2, r2, #14
 8002bac:	d400      	bmi.n	8002bb0 <HAL_RCC_OscConfig+0x29c>
 8002bae:	e6fa      	b.n	80029a6 <HAL_RCC_OscConfig+0x92>
 8002bb0:	6862      	ldr	r2, [r4, #4]
 8002bb2:	2a00      	cmp	r2, #0
 8002bb4:	d000      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x2a4>
 8002bb6:	e6f6      	b.n	80029a6 <HAL_RCC_OscConfig+0x92>
        return HAL_ERROR;
 8002bb8:	2001      	movs	r0, #1
}
 8002bba:	b002      	add	sp, #8
 8002bbc:	bce0      	pop	{r5, r6, r7}
 8002bbe:	46ba      	mov	sl, r7
 8002bc0:	46b1      	mov	r9, r6
 8002bc2:	46a8      	mov	r8, r5
 8002bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bc6:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	059b      	lsls	r3, r3, #22
 8002bcc:	d502      	bpl.n	8002bd4 <HAL_RCC_OscConfig+0x2c0>
 8002bce:	69e3      	ldr	r3, [r4, #28]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f1      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bd4:	4a1e      	ldr	r2, [pc, #120]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
 8002bd6:	4822      	ldr	r0, [pc, #136]	; (8002c60 <HAL_RCC_OscConfig+0x34c>)
 8002bd8:	6851      	ldr	r1, [r2, #4]
 8002bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bdc:	4001      	ands	r1, r0
 8002bde:	4319      	orrs	r1, r3
 8002be0:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002be2:	6850      	ldr	r0, [r2, #4]
 8002be4:	6a21      	ldr	r1, [r4, #32]
 8002be6:	0200      	lsls	r0, r0, #8
 8002be8:	0a00      	lsrs	r0, r0, #8
 8002bea:	0609      	lsls	r1, r1, #24
 8002bec:	4301      	orrs	r1, r0
 8002bee:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002bf0:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002bf2:	2280      	movs	r2, #128	; 0x80
 8002bf4:	0b5b      	lsrs	r3, r3, #13
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	0212      	lsls	r2, r2, #8
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002bfe:	060a      	lsls	r2, r1, #24
 8002c00:	491e      	ldr	r1, [pc, #120]	; (8002c7c <HAL_RCC_OscConfig+0x368>)
 8002c02:	0f12      	lsrs	r2, r2, #28
 8002c04:	5c8a      	ldrb	r2, [r1, r2]
 8002c06:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c08:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <HAL_RCC_OscConfig+0x36c>)
 8002c0a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_RCC_OscConfig+0x370>)
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	f7ff fc1c 	bl	800244c <HAL_InitTick>
        if(status != HAL_OK)
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d1d0      	bne.n	8002bba <HAL_RCC_OscConfig+0x2a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	e71c      	b.n	8002a56 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1c:	490c      	ldr	r1, [pc, #48]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
 8002c1e:	680a      	ldr	r2, [r1, #0]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8002c24:	f7ff fc58 	bl	80024d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 8002c2a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c2c:	4699      	mov	r9, r3
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	029b      	lsls	r3, r3, #10
 8002c32:	4698      	mov	r8, r3
 8002c34:	e004      	b.n	8002c40 <HAL_RCC_OscConfig+0x32c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c36:	f7ff fc4f 	bl	80024d8 <HAL_GetTick>
 8002c3a:	1bc0      	subs	r0, r0, r7
 8002c3c:	2864      	cmp	r0, #100	; 0x64
 8002c3e:	d87c      	bhi.n	8002d3a <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c40:	464b      	mov	r3, r9
 8002c42:	4642      	mov	r2, r8
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4213      	tst	r3, r2
 8002c48:	d0f5      	beq.n	8002c36 <HAL_RCC_OscConfig+0x322>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	e6ab      	b.n	80029a6 <HAL_RCC_OscConfig+0x92>
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	40021000 	.word	0x40021000
 8002c54:	fffeffff 	.word	0xfffeffff
 8002c58:	fffbffff 	.word	0xfffbffff
 8002c5c:	ffffe0ff 	.word	0xffffe0ff
 8002c60:	ffff1fff 	.word	0xffff1fff
 8002c64:	40007000 	.word	0x40007000
 8002c68:	fffffeff 	.word	0xfffffeff
 8002c6c:	fffffbff 	.word	0xfffffbff
 8002c70:	00001388 	.word	0x00001388
 8002c74:	40010000 	.word	0x40010000
 8002c78:	feffffff 	.word	0xfeffffff
 8002c7c:	08005a10 	.word	0x08005a10
 8002c80:	20000010 	.word	0x20000010
 8002c84:	20000018 	.word	0x20000018
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c88:	2e00      	cmp	r6, #0
 8002c8a:	d000      	beq.n	8002c8e <HAL_RCC_OscConfig+0x37a>
 8002c8c:	e694      	b.n	80029b8 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002c8e:	4a91      	ldr	r2, [pc, #580]	; (8002ed4 <HAL_RCC_OscConfig+0x5c0>)
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	0752      	lsls	r2, r2, #29
 8002c94:	d502      	bpl.n	8002c9c <HAL_RCC_OscConfig+0x388>
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d100      	bne.n	8002c9c <HAL_RCC_OscConfig+0x388>
 8002c9a:	e78d      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9c:	4e8d      	ldr	r6, [pc, #564]	; (8002ed4 <HAL_RCC_OscConfig+0x5c0>)
 8002c9e:	6922      	ldr	r2, [r4, #16]
 8002ca0:	6871      	ldr	r1, [r6, #4]
 8002ca2:	488d      	ldr	r0, [pc, #564]	; (8002ed8 <HAL_RCC_OscConfig+0x5c4>)
 8002ca4:	0212      	lsls	r2, r2, #8
 8002ca6:	4001      	ands	r1, r0
 8002ca8:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002caa:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cac:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002cae:	6832      	ldr	r2, [r6, #0]
 8002cb0:	438a      	bics	r2, r1
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cb6:	f7ff fde7 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8002cba:	68f3      	ldr	r3, [r6, #12]
 8002cbc:	4a87      	ldr	r2, [pc, #540]	; (8002edc <HAL_RCC_OscConfig+0x5c8>)
 8002cbe:	061b      	lsls	r3, r3, #24
 8002cc0:	0f1b      	lsrs	r3, r3, #28
 8002cc2:	5cd3      	ldrb	r3, [r2, r3]
 8002cc4:	40d8      	lsrs	r0, r3
 8002cc6:	4b86      	ldr	r3, [pc, #536]	; (8002ee0 <HAL_RCC_OscConfig+0x5cc>)
 8002cc8:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8002cca:	4b86      	ldr	r3, [pc, #536]	; (8002ee4 <HAL_RCC_OscConfig+0x5d0>)
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	f7ff fbbd 	bl	800244c <HAL_InitTick>
      if(status != HAL_OK)
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d000      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x3c4>
 8002cd6:	e770      	b.n	8002bba <HAL_RCC_OscConfig+0x2a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	06da      	lsls	r2, r3, #27
 8002cdc:	d400      	bmi.n	8002ce0 <HAL_RCC_OscConfig+0x3cc>
 8002cde:	e6ba      	b.n	8002a56 <HAL_RCC_OscConfig+0x142>
 8002ce0:	e68d      	b.n	80029fe <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce2:	4e7c      	ldr	r6, [pc, #496]	; (8002ed4 <HAL_RCC_OscConfig+0x5c0>)
 8002ce4:	4a80      	ldr	r2, [pc, #512]	; (8002ee8 <HAL_RCC_OscConfig+0x5d4>)
 8002ce6:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002ce8:	4013      	ands	r3, r2
 8002cea:	6533      	str	r3, [r6, #80]	; 0x50
 8002cec:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002cee:	4a7f      	ldr	r2, [pc, #508]	; (8002eec <HAL_RCC_OscConfig+0x5d8>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002cf4:	f7ff fbf0 	bl	80024d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfe:	4b7c      	ldr	r3, [pc, #496]	; (8002ef0 <HAL_RCC_OscConfig+0x5dc>)
      tickstart = HAL_GetTick();
 8002d00:	0007      	movs	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d02:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d04:	e004      	b.n	8002d10 <HAL_RCC_OscConfig+0x3fc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7ff fbe7 	bl	80024d8 <HAL_GetTick>
 8002d0a:	1bc0      	subs	r0, r0, r7
 8002d0c:	4548      	cmp	r0, r9
 8002d0e:	d814      	bhi.n	8002d3a <HAL_RCC_OscConfig+0x426>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d10:	4642      	mov	r2, r8
 8002d12:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002d14:	4213      	tst	r3, r2
 8002d16:	d1f6      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3f2>
 8002d18:	e6fa      	b.n	8002b10 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d1a:	6833      	ldr	r3, [r6, #0]
 8002d1c:	433b      	orrs	r3, r7
 8002d1e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002d20:	f7ff fbda 	bl	80024d8 <HAL_GetTick>
 8002d24:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d26:	6833      	ldr	r3, [r6, #0]
 8002d28:	423b      	tst	r3, r7
 8002d2a:	d000      	beq.n	8002d2e <HAL_RCC_OscConfig+0x41a>
 8002d2c:	e6c5      	b.n	8002aba <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2e:	f7ff fbd3 	bl	80024d8 <HAL_GetTick>
 8002d32:	4643      	mov	r3, r8
 8002d34:	1ac0      	subs	r0, r0, r3
 8002d36:	2864      	cmp	r0, #100	; 0x64
 8002d38:	d9f5      	bls.n	8002d26 <HAL_RCC_OscConfig+0x412>
            return HAL_TIMEOUT;
 8002d3a:	2003      	movs	r0, #3
 8002d3c:	e73d      	b.n	8002bba <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_LSI_DISABLE();
 8002d3e:	2201      	movs	r2, #1
 8002d40:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002d42:	4393      	bics	r3, r2
 8002d44:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002d46:	f7ff fbc7 	bl	80024d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d4a:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8002d4c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d4e:	4698      	mov	r8, r3
 8002d50:	e004      	b.n	8002d5c <HAL_RCC_OscConfig+0x448>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d52:	f7ff fbc1 	bl	80024d8 <HAL_GetTick>
 8002d56:	1bc0      	subs	r0, r0, r7
 8002d58:	2802      	cmp	r0, #2
 8002d5a:	d8ee      	bhi.n	8002d3a <HAL_RCC_OscConfig+0x426>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d5c:	4642      	mov	r2, r8
 8002d5e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002d60:	421a      	tst	r2, r3
 8002d62:	d1f6      	bne.n	8002d52 <HAL_RCC_OscConfig+0x43e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	e692      	b.n	8002a8e <HAL_RCC_OscConfig+0x17a>
        __HAL_RCC_HSI_DISABLE();
 8002d68:	2201      	movs	r2, #1
 8002d6a:	6833      	ldr	r3, [r6, #0]
 8002d6c:	4393      	bics	r3, r2
 8002d6e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002d70:	f7ff fbb2 	bl	80024d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d74:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8002d76:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d78:	4698      	mov	r8, r3
 8002d7a:	e004      	b.n	8002d86 <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7ff fbac 	bl	80024d8 <HAL_GetTick>
 8002d80:	1bc0      	subs	r0, r0, r7
 8002d82:	2802      	cmp	r0, #2
 8002d84:	d8d9      	bhi.n	8002d3a <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d86:	4642      	mov	r2, r8
 8002d88:	6833      	ldr	r3, [r6, #0]
 8002d8a:	421a      	tst	r2, r3
 8002d8c:	d1f6      	bne.n	8002d7c <HAL_RCC_OscConfig+0x468>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	e7a3      	b.n	8002cda <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_MSI_DISABLE();
 8002d92:	6833      	ldr	r3, [r6, #0]
 8002d94:	4a54      	ldr	r2, [pc, #336]	; (8002ee8 <HAL_RCC_OscConfig+0x5d4>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002d9a:	f7ff fb9d 	bl	80024d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8002da2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002da4:	4698      	mov	r8, r3
 8002da6:	e004      	b.n	8002db2 <HAL_RCC_OscConfig+0x49e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002da8:	f7ff fb96 	bl	80024d8 <HAL_GetTick>
 8002dac:	1bc0      	subs	r0, r0, r7
 8002dae:	2802      	cmp	r0, #2
 8002db0:	d8c3      	bhi.n	8002d3a <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002db2:	4642      	mov	r2, r8
 8002db4:	6833      	ldr	r3, [r6, #0]
 8002db6:	4213      	tst	r3, r2
 8002db8:	d1f6      	bne.n	8002da8 <HAL_RCC_OscConfig+0x494>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	e64b      	b.n	8002a56 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI48_DISABLE();
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	68b3      	ldr	r3, [r6, #8]
 8002dc2:	494c      	ldr	r1, [pc, #304]	; (8002ef4 <HAL_RCC_OscConfig+0x5e0>)
 8002dc4:	4393      	bics	r3, r2
 8002dc6:	4a4c      	ldr	r2, [pc, #304]	; (8002ef8 <HAL_RCC_OscConfig+0x5e4>)
 8002dc8:	60b3      	str	r3, [r6, #8]
 8002dca:	6a13      	ldr	r3, [r2, #32]
 8002dcc:	400b      	ands	r3, r1
 8002dce:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8002dd0:	f7ff fb82 	bl	80024d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dd4:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8002dd6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dd8:	4698      	mov	r8, r3
 8002dda:	e004      	b.n	8002de6 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ddc:	f7ff fb7c 	bl	80024d8 <HAL_GetTick>
 8002de0:	1bc0      	subs	r0, r0, r7
 8002de2:	2802      	cmp	r0, #2
 8002de4:	d8a9      	bhi.n	8002d3a <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002de6:	4642      	mov	r2, r8
 8002de8:	68b3      	ldr	r3, [r6, #8]
 8002dea:	421a      	tst	r2, r3
 8002dec:	d1f6      	bne.n	8002ddc <HAL_RCC_OscConfig+0x4c8>
 8002dee:	e6b8      	b.n	8002b62 <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <HAL_RCC_OscConfig+0x5c0>)
 8002df4:	02c9      	lsls	r1, r1, #11
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	4301      	orrs	r1, r0
 8002dfa:	6019      	str	r1, [r3, #0]
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e02:	e70f      	b.n	8002c24 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e04:	4a33      	ldr	r2, [pc, #204]	; (8002ed4 <HAL_RCC_OscConfig+0x5c0>)
 8002e06:	493d      	ldr	r1, [pc, #244]	; (8002efc <HAL_RCC_OscConfig+0x5e8>)
 8002e08:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002e0a:	400b      	ands	r3, r1
 8002e0c:	6393      	str	r3, [r2, #56]	; 0x38
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e0e:	6823      	ldr	r3, [r4, #0]
 8002e10:	e683      	b.n	8002b1a <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_PLL_DISABLE();
 8002e12:	4d30      	ldr	r5, [pc, #192]	; (8002ed4 <HAL_RCC_OscConfig+0x5c0>)
 8002e14:	4a3a      	ldr	r2, [pc, #232]	; (8002f00 <HAL_RCC_OscConfig+0x5ec>)
 8002e16:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e18:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e1e:	f7ff fb5b 	bl	80024d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e22:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8002e24:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e26:	e004      	b.n	8002e32 <HAL_RCC_OscConfig+0x51e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e28:	f7ff fb56 	bl	80024d8 <HAL_GetTick>
 8002e2c:	1b80      	subs	r0, r0, r6
 8002e2e:	2802      	cmp	r0, #2
 8002e30:	d883      	bhi.n	8002d3a <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e32:	682b      	ldr	r3, [r5, #0]
 8002e34:	423b      	tst	r3, r7
 8002e36:	d1f7      	bne.n	8002e28 <HAL_RCC_OscConfig+0x514>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e38:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002e3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e3c:	68ea      	ldr	r2, [r5, #12]
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	4930      	ldr	r1, [pc, #192]	; (8002f04 <HAL_RCC_OscConfig+0x5f0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e42:	4e24      	ldr	r6, [pc, #144]	; (8002ed4 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e44:	400a      	ands	r2, r1
 8002e46:	4313      	orrs	r3, r2
 8002e48:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	682a      	ldr	r2, [r5, #0]
 8002e52:	045b      	lsls	r3, r3, #17
 8002e54:	4313      	orrs	r3, r2
 8002e56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e58:	f7ff fb3e 	bl	80024d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e5c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8002e5e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e60:	04ad      	lsls	r5, r5, #18
 8002e62:	e005      	b.n	8002e70 <HAL_RCC_OscConfig+0x55c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e64:	f7ff fb38 	bl	80024d8 <HAL_GetTick>
 8002e68:	1b00      	subs	r0, r0, r4
 8002e6a:	2802      	cmp	r0, #2
 8002e6c:	d900      	bls.n	8002e70 <HAL_RCC_OscConfig+0x55c>
 8002e6e:	e764      	b.n	8002d3a <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e70:	6833      	ldr	r3, [r6, #0]
 8002e72:	422b      	tst	r3, r5
 8002e74:	d0f6      	beq.n	8002e64 <HAL_RCC_OscConfig+0x550>
  return HAL_OK;
 8002e76:	2000      	movs	r0, #0
 8002e78:	e69f      	b.n	8002bba <HAL_RCC_OscConfig+0x2a6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7a:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <HAL_RCC_OscConfig+0x5c0>)
 8002e7c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e82:	e631      	b.n	8002ae8 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d100      	bne.n	8002e8a <HAL_RCC_OscConfig+0x576>
 8002e88:	e696      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2a4>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <HAL_RCC_OscConfig+0x5c0>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        pll_config = RCC->CFGR;
 8002e90:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	0252      	lsls	r2, r2, #9
        return HAL_ERROR;
 8002e94:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	401a      	ands	r2, r3
 8002e98:	428a      	cmp	r2, r1
 8002e9a:	d000      	beq.n	8002e9e <HAL_RCC_OscConfig+0x58a>
 8002e9c:	e68d      	b.n	8002bba <HAL_RCC_OscConfig+0x2a6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e9e:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea0:	6b21      	ldr	r1, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ea2:	0392      	lsls	r2, r2, #14
 8002ea4:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea6:	428a      	cmp	r2, r1
 8002ea8:	d000      	beq.n	8002eac <HAL_RCC_OscConfig+0x598>
 8002eaa:	e686      	b.n	8002bba <HAL_RCC_OscConfig+0x2a6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002eac:	20c0      	movs	r0, #192	; 0xc0
 8002eae:	0400      	lsls	r0, r0, #16
 8002eb0:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002eb2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002eb4:	1a18      	subs	r0, r3, r0
 8002eb6:	1e43      	subs	r3, r0, #1
 8002eb8:	4198      	sbcs	r0, r3
        return HAL_ERROR;
 8002eba:	b2c0      	uxtb	r0, r0
 8002ebc:	e67d      	b.n	8002bba <HAL_RCC_OscConfig+0x2a6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_RCC_OscConfig+0x5c0>)
 8002ec0:	3901      	subs	r1, #1
 8002ec2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002ec4:	39ff      	subs	r1, #255	; 0xff
 8002ec6:	4301      	orrs	r1, r0
 8002ec8:	6519      	str	r1, [r3, #80]	; 0x50
 8002eca:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	651a      	str	r2, [r3, #80]	; 0x50
 8002ed0:	e60a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x1d4>
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	ffffe0ff 	.word	0xffffe0ff
 8002edc:	08005a10 	.word	0x08005a10
 8002ee0:	20000010 	.word	0x20000010
 8002ee4:	20000018 	.word	0x20000018
 8002ee8:	fffffeff 	.word	0xfffffeff
 8002eec:	fffffbff 	.word	0xfffffbff
 8002ef0:	00001388 	.word	0x00001388
 8002ef4:	ffffdfff 	.word	0xffffdfff
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	efffffff 	.word	0xefffffff
 8002f00:	feffffff 	.word	0xfeffffff
 8002f04:	ff02ffff 	.word	0xff02ffff

08002f08 <HAL_RCC_ClockConfig>:
{
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	46ce      	mov	lr, r9
 8002f0c:	4647      	mov	r7, r8
 8002f0e:	0005      	movs	r5, r0
 8002f10:	000c      	movs	r4, r1
 8002f12:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d066      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f18:	2201      	movs	r2, #1
 8002f1a:	4e6a      	ldr	r6, [pc, #424]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	6833      	ldr	r3, [r6, #0]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	428b      	cmp	r3, r1
 8002f22:	d362      	bcc.n	8002fea <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f24:	682b      	ldr	r3, [r5, #0]
 8002f26:	079a      	lsls	r2, r3, #30
 8002f28:	d506      	bpl.n	8002f38 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2a:	20f0      	movs	r0, #240	; 0xf0
 8002f2c:	4966      	ldr	r1, [pc, #408]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2e:	68ca      	ldr	r2, [r1, #12]
 8002f30:	4382      	bics	r2, r0
 8002f32:	68a8      	ldr	r0, [r5, #8]
 8002f34:	4302      	orrs	r2, r0
 8002f36:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f38:	07db      	lsls	r3, r3, #31
 8002f3a:	d52d      	bpl.n	8002f98 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f3c:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3e:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f40:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f42:	2a02      	cmp	r2, #2
 8002f44:	d04d      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f46:	2a03      	cmp	r2, #3
 8002f48:	d100      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x44>
 8002f4a:	e06f      	b.n	800302c <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f4c:	2a01      	cmp	r2, #1
 8002f4e:	d100      	bne.n	8002f52 <HAL_RCC_ClockConfig+0x4a>
 8002f50:	e0a3      	b.n	800309a <HAL_RCC_ClockConfig+0x192>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f52:	059b      	lsls	r3, r3, #22
 8002f54:	d547      	bpl.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f56:	2103      	movs	r1, #3
 8002f58:	4e5b      	ldr	r6, [pc, #364]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5a:	68f3      	ldr	r3, [r6, #12]
 8002f5c:	438b      	bics	r3, r1
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002f62:	f7ff fab9 	bl	80024d8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f66:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002f68:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d100      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x68>
 8002f6e:	e074      	b.n	800305a <HAL_RCC_ClockConfig+0x152>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d100      	bne.n	8002f76 <HAL_RCC_ClockConfig+0x6e>
 8002f74:	e081      	b.n	800307a <HAL_RCC_ClockConfig+0x172>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d100      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x74>
 8002f7a:	e093      	b.n	80030a4 <HAL_RCC_ClockConfig+0x19c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f7c:	230c      	movs	r3, #12
 8002f7e:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	4b52      	ldr	r3, [pc, #328]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	4699      	mov	r9, r3
 8002f84:	e004      	b.n	8002f90 <HAL_RCC_ClockConfig+0x88>
 8002f86:	f7ff faa7 	bl	80024d8 <HAL_GetTick>
 8002f8a:	1bc0      	subs	r0, r0, r7
 8002f8c:	4548      	cmp	r0, r9
 8002f8e:	d842      	bhi.n	8003016 <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f90:	4642      	mov	r2, r8
 8002f92:	68f3      	ldr	r3, [r6, #12]
 8002f94:	421a      	tst	r2, r3
 8002f96:	d1f6      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x7e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4e4a      	ldr	r6, [pc, #296]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	6833      	ldr	r3, [r6, #0]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	42a3      	cmp	r3, r4
 8002fa2:	d847      	bhi.n	8003034 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	075a      	lsls	r2, r3, #29
 8002fa8:	d506      	bpl.n	8002fb8 <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002faa:	4947      	ldr	r1, [pc, #284]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	4848      	ldr	r0, [pc, #288]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fae:	68ca      	ldr	r2, [r1, #12]
 8002fb0:	4002      	ands	r2, r0
 8002fb2:	68e8      	ldr	r0, [r5, #12]
 8002fb4:	4302      	orrs	r2, r0
 8002fb6:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb8:	071b      	lsls	r3, r3, #28
 8002fba:	d42e      	bmi.n	800301a <HAL_RCC_ClockConfig+0x112>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fbc:	f7ff fc64 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8002fc0:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc2:	4a44      	ldr	r2, [pc, #272]	; (80030d4 <HAL_RCC_ClockConfig+0x1cc>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	061b      	lsls	r3, r3, #24
 8002fc8:	0f1b      	lsrs	r3, r3, #28
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	40d8      	lsrs	r0, r3
 8002fce:	4b42      	ldr	r3, [pc, #264]	; (80030d8 <HAL_RCC_ClockConfig+0x1d0>)
 8002fd0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002fd2:	4b42      	ldr	r3, [pc, #264]	; (80030dc <HAL_RCC_ClockConfig+0x1d4>)
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	f7ff fa39 	bl	800244c <HAL_InitTick>
}
 8002fda:	bcc0      	pop	{r6, r7}
 8002fdc:	46b9      	mov	r9, r7
 8002fde:	46b0      	mov	r8, r6
 8002fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fe2:	039b      	lsls	r3, r3, #14
 8002fe4:	d4b7      	bmi.n	8002f56 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	e7f7      	b.n	8002fda <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	6833      	ldr	r3, [r6, #0]
 8002fec:	4393      	bics	r3, r2
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002ff2:	f7ff fa71 	bl	80024d8 <HAL_GetTick>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffa:	4b34      	ldr	r3, [pc, #208]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 8002ffc:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffe:	4699      	mov	r9, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003000:	4642      	mov	r2, r8
 8003002:	6833      	ldr	r3, [r6, #0]
 8003004:	4013      	ands	r3, r2
 8003006:	42a3      	cmp	r3, r4
 8003008:	d100      	bne.n	800300c <HAL_RCC_ClockConfig+0x104>
 800300a:	e78b      	b.n	8002f24 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300c:	f7ff fa64 	bl	80024d8 <HAL_GetTick>
 8003010:	1bc0      	subs	r0, r0, r7
 8003012:	4548      	cmp	r0, r9
 8003014:	d9f4      	bls.n	8003000 <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 8003016:	2003      	movs	r0, #3
 8003018:	e7df      	b.n	8002fda <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800301a:	482b      	ldr	r0, [pc, #172]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 800301c:	692b      	ldr	r3, [r5, #16]
 800301e:	68c1      	ldr	r1, [r0, #12]
 8003020:	4a2f      	ldr	r2, [pc, #188]	; (80030e0 <HAL_RCC_ClockConfig+0x1d8>)
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	400a      	ands	r2, r1
 8003026:	4313      	orrs	r3, r2
 8003028:	60c3      	str	r3, [r0, #12]
 800302a:	e7c7      	b.n	8002fbc <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800302c:	019b      	lsls	r3, r3, #6
 800302e:	d492      	bmi.n	8002f56 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8003030:	2001      	movs	r0, #1
 8003032:	e7d2      	b.n	8002fda <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003034:	6833      	ldr	r3, [r6, #0]
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	2701      	movs	r7, #1
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003038:	4393      	bics	r3, r2
 800303a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800303c:	f7ff fa4c 	bl	80024d8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003040:	4b22      	ldr	r3, [pc, #136]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 8003042:	0004      	movs	r4, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003044:	4698      	mov	r8, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	6833      	ldr	r3, [r6, #0]
 8003048:	421f      	tst	r7, r3
 800304a:	d0ab      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304c:	f7ff fa44 	bl	80024d8 <HAL_GetTick>
 8003050:	1b00      	subs	r0, r0, r4
 8003052:	4540      	cmp	r0, r8
 8003054:	d9f7      	bls.n	8003046 <HAL_RCC_ClockConfig+0x13e>
        return HAL_TIMEOUT;
 8003056:	2003      	movs	r0, #3
 8003058:	e7bf      	b.n	8002fda <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800305a:	330a      	adds	r3, #10
 800305c:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305e:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	4699      	mov	r9, r3
 8003062:	e004      	b.n	800306e <HAL_RCC_ClockConfig+0x166>
 8003064:	f7ff fa38 	bl	80024d8 <HAL_GetTick>
 8003068:	1bc0      	subs	r0, r0, r7
 800306a:	4548      	cmp	r0, r9
 800306c:	d8d3      	bhi.n	8003016 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800306e:	4642      	mov	r2, r8
 8003070:	68f3      	ldr	r3, [r6, #12]
 8003072:	4013      	ands	r3, r2
 8003074:	2b08      	cmp	r3, #8
 8003076:	d1f5      	bne.n	8003064 <HAL_RCC_ClockConfig+0x15c>
 8003078:	e78e      	b.n	8002f98 <HAL_RCC_ClockConfig+0x90>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800307a:	3309      	adds	r3, #9
 800307c:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307e:	4b13      	ldr	r3, [pc, #76]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	4699      	mov	r9, r3
 8003082:	e004      	b.n	800308e <HAL_RCC_ClockConfig+0x186>
 8003084:	f7ff fa28 	bl	80024d8 <HAL_GetTick>
 8003088:	1bc0      	subs	r0, r0, r7
 800308a:	4548      	cmp	r0, r9
 800308c:	d8c3      	bhi.n	8003016 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800308e:	4642      	mov	r2, r8
 8003090:	68f3      	ldr	r3, [r6, #12]
 8003092:	4013      	ands	r3, r2
 8003094:	2b0c      	cmp	r3, #12
 8003096:	d1f5      	bne.n	8003084 <HAL_RCC_ClockConfig+0x17c>
 8003098:	e77e      	b.n	8002f98 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800309a:	075b      	lsls	r3, r3, #29
 800309c:	d500      	bpl.n	80030a0 <HAL_RCC_ClockConfig+0x198>
 800309e:	e75a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 80030a0:	2001      	movs	r0, #1
 80030a2:	e79a      	b.n	8002fda <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030a4:	330b      	adds	r3, #11
 80030a6:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	4699      	mov	r9, r3
 80030ac:	e004      	b.n	80030b8 <HAL_RCC_ClockConfig+0x1b0>
 80030ae:	f7ff fa13 	bl	80024d8 <HAL_GetTick>
 80030b2:	1bc0      	subs	r0, r0, r7
 80030b4:	4548      	cmp	r0, r9
 80030b6:	d8ae      	bhi.n	8003016 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030b8:	4642      	mov	r2, r8
 80030ba:	68f3      	ldr	r3, [r6, #12]
 80030bc:	4013      	ands	r3, r2
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d1f5      	bne.n	80030ae <HAL_RCC_ClockConfig+0x1a6>
 80030c2:	e769      	b.n	8002f98 <HAL_RCC_ClockConfig+0x90>
 80030c4:	40022000 	.word	0x40022000
 80030c8:	40021000 	.word	0x40021000
 80030cc:	00001388 	.word	0x00001388
 80030d0:	fffff8ff 	.word	0xfffff8ff
 80030d4:	08005a10 	.word	0x08005a10
 80030d8:	20000010 	.word	0x20000010
 80030dc:	20000018 	.word	0x20000018
 80030e0:	ffffc7ff 	.word	0xffffc7ff

080030e4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030e4:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80030e6:	4a05      	ldr	r2, [pc, #20]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	055b      	lsls	r3, r3, #21
 80030ec:	0f5b      	lsrs	r3, r3, #29
 80030ee:	5cd3      	ldrb	r3, [r2, r3]
 80030f0:	4a03      	ldr	r2, [pc, #12]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80030f2:	6810      	ldr	r0, [r2, #0]
 80030f4:	40d8      	lsrs	r0, r3
}
 80030f6:	4770      	bx	lr
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08005a20 	.word	0x08005a20
 8003100:	20000010 	.word	0x20000010

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003106:	4a05      	ldr	r2, [pc, #20]	; (800311c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	049b      	lsls	r3, r3, #18
 800310c:	0f5b      	lsrs	r3, r3, #29
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	4a03      	ldr	r2, [pc, #12]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003112:	6810      	ldr	r0, [r2, #0]
 8003114:	40d8      	lsrs	r0, r3
}
 8003116:	4770      	bx	lr
 8003118:	40021000 	.word	0x40021000
 800311c:	08005a20 	.word	0x08005a20
 8003120:	20000010 	.word	0x20000010

08003124 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003126:	46ce      	mov	lr, r9
 8003128:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800312a:	6803      	ldr	r3, [r0, #0]
{
 800312c:	0004      	movs	r4, r0
 800312e:	b580      	push	{r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003130:	069a      	lsls	r2, r3, #26
 8003132:	d571      	bpl.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	4a6b      	ldr	r2, [pc, #428]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003138:	055b      	lsls	r3, r3, #21
 800313a:	6b91      	ldr	r1, [r2, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 800313c:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4219      	tst	r1, r3
 8003140:	d100      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8003142:	e0a4      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	2680      	movs	r6, #128	; 0x80
 8003146:	4d68      	ldr	r5, [pc, #416]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003148:	0076      	lsls	r6, r6, #1
 800314a:	682b      	ldr	r3, [r5, #0]
 800314c:	4233      	tst	r3, r6
 800314e:	d100      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8003150:	e0a8      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003152:	6862      	ldr	r2, [r4, #4]
 8003154:	21c0      	movs	r1, #192	; 0xc0
 8003156:	0015      	movs	r5, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003158:	4862      	ldr	r0, [pc, #392]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800315a:	0389      	lsls	r1, r1, #14
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800315c:	6803      	ldr	r3, [r0, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800315e:	400d      	ands	r5, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003160:	400b      	ands	r3, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003162:	429d      	cmp	r5, r3
 8003164:	d006      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x50>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003166:	23c0      	movs	r3, #192	; 0xc0
 8003168:	0011      	movs	r1, r2
 800316a:	029b      	lsls	r3, r3, #10
 800316c:	4019      	ands	r1, r3
 800316e:	4299      	cmp	r1, r3
 8003170:	d100      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003172:	e0b1      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003174:	4d5b      	ldr	r5, [pc, #364]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003176:	23c0      	movs	r3, #192	; 0xc0
 8003178:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800317a:	029b      	lsls	r3, r3, #10
 800317c:	0008      	movs	r0, r1
 800317e:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003180:	4219      	tst	r1, r3
 8003182:	d02f      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003184:	4013      	ands	r3, r2
 8003186:	0019      	movs	r1, r3
 8003188:	4283      	cmp	r3, r0
 800318a:	d02b      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	0698      	lsls	r0, r3, #26
 8003190:	d540      	bpl.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xf0>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003192:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8003194:	4684      	mov	ip, r0
 8003196:	4666      	mov	r6, ip
 8003198:	4854      	ldr	r0, [pc, #336]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800319a:	4030      	ands	r0, r6

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800319c:	6d2e      	ldr	r6, [r5, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800319e:	4681      	mov	r9, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 80031a0:	46b0      	mov	r8, r6
 80031a2:	2680      	movs	r6, #128	; 0x80
 80031a4:	4640      	mov	r0, r8
 80031a6:	0336      	lsls	r6, r6, #12
 80031a8:	4306      	orrs	r6, r0
 80031aa:	652e      	str	r6, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031ac:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 80031ae:	4850      	ldr	r0, [pc, #320]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031b0:	4006      	ands	r6, r0

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80031b2:	4648      	mov	r0, r9
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031b4:	652e      	str	r6, [r5, #80]	; 0x50
      RCC->CSR = temp_reg;
 80031b6:	6528      	str	r0, [r5, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80031b8:	4660      	mov	r0, ip
 80031ba:	05c0      	lsls	r0, r0, #23
 80031bc:	d519      	bpl.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7ff f98b 	bl	80024d8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4698      	mov	r8, r3
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c8:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
        tickstart = HAL_GetTick();
 80031ca:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031ce:	e005      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7ff f982 	bl	80024d8 <HAL_GetTick>
 80031d4:	1b80      	subs	r0, r0, r6
 80031d6:	4548      	cmp	r0, r9
 80031d8:	d900      	bls.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80031da:	e073      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031dc:	4642      	mov	r2, r8
 80031de:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80031e0:	4213      	tst	r3, r2
 80031e2:	d0f5      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	069a      	lsls	r2, r3, #26
 80031e8:	d514      	bpl.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ea:	21c0      	movs	r1, #192	; 0xc0
 80031ec:	6862      	ldr	r2, [r4, #4]
 80031ee:	0289      	lsls	r1, r1, #10
 80031f0:	4011      	ands	r1, r2
 80031f2:	20c0      	movs	r0, #192	; 0xc0
 80031f4:	0280      	lsls	r0, r0, #10
 80031f6:	4281      	cmp	r1, r0
 80031f8:	d108      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80031fa:	4d3a      	ldr	r5, [pc, #232]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80031fc:	4e3e      	ldr	r6, [pc, #248]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031fe:	6828      	ldr	r0, [r5, #0]
 8003200:	4030      	ands	r0, r6
 8003202:	26c0      	movs	r6, #192	; 0xc0
 8003204:	03b6      	lsls	r6, r6, #14
 8003206:	4032      	ands	r2, r6
 8003208:	4302      	orrs	r2, r0
 800320a:	602a      	str	r2, [r5, #0]
 800320c:	4835      	ldr	r0, [pc, #212]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800320e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003210:	4311      	orrs	r1, r2
 8003212:	6501      	str	r1, [r0, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003214:	2f01      	cmp	r7, #1
 8003216:	d057      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003218:	07da      	lsls	r2, r3, #31
 800321a:	d506      	bpl.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800321c:	2003      	movs	r0, #3
 800321e:	4931      	ldr	r1, [pc, #196]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003220:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003222:	4382      	bics	r2, r0
 8003224:	68a0      	ldr	r0, [r4, #8]
 8003226:	4302      	orrs	r2, r0
 8003228:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800322a:	079a      	lsls	r2, r3, #30
 800322c:	d506      	bpl.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800322e:	200c      	movs	r0, #12
 8003230:	492c      	ldr	r1, [pc, #176]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003232:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003234:	4382      	bics	r2, r0
 8003236:	68e0      	ldr	r0, [r4, #12]
 8003238:	4302      	orrs	r2, r0
 800323a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800323c:	075a      	lsls	r2, r3, #29
 800323e:	d506      	bpl.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003240:	4928      	ldr	r1, [pc, #160]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003242:	482e      	ldr	r0, [pc, #184]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003244:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003246:	4002      	ands	r2, r0
 8003248:	6920      	ldr	r0, [r4, #16]
 800324a:	4302      	orrs	r2, r0
 800324c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800324e:	071a      	lsls	r2, r3, #28
 8003250:	d506      	bpl.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003252:	4924      	ldr	r1, [pc, #144]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003254:	482a      	ldr	r0, [pc, #168]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003256:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003258:	4002      	ands	r2, r0
 800325a:	6960      	ldr	r0, [r4, #20]
 800325c:	4302      	orrs	r2, r0
 800325e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003260:	065a      	lsls	r2, r3, #25
 8003262:	d506      	bpl.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003264:	491f      	ldr	r1, [pc, #124]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003266:	4827      	ldr	r0, [pc, #156]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003268:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800326a:	4002      	ands	r2, r0
 800326c:	69e0      	ldr	r0, [r4, #28]
 800326e:	4302      	orrs	r2, r0
 8003270:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8003272:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	d506      	bpl.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x162>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003278:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800327a:	4923      	ldr	r1, [pc, #140]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800327c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800327e:	400b      	ands	r3, r1
 8003280:	69a1      	ldr	r1, [r4, #24]
 8003282:	430b      	orrs	r3, r1
 8003284:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8003286:	bcc0      	pop	{r6, r7}
 8003288:	46b9      	mov	r9, r7
 800328a:	46b0      	mov	r8, r6
 800328c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8003290:	6b91      	ldr	r1, [r2, #56]	; 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003292:	4d15      	ldr	r5, [pc, #84]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	430b      	orrs	r3, r1
 8003296:	6393      	str	r3, [r2, #56]	; 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003298:	682b      	ldr	r3, [r5, #0]
 800329a:	0076      	lsls	r6, r6, #1
      pwrclkchanged = SET;
 800329c:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329e:	4233      	tst	r3, r6
 80032a0:	d000      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80032a2:	e756      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	4333      	orrs	r3, r6
 80032a8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80032aa:	f7ff f915 	bl	80024d8 <HAL_GetTick>
 80032ae:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b0:	682b      	ldr	r3, [r5, #0]
 80032b2:	4233      	tst	r3, r6
 80032b4:	d000      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
 80032b6:	e74c      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x2e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b8:	f7ff f90e 	bl	80024d8 <HAL_GetTick>
 80032bc:	4643      	mov	r3, r8
 80032be:	1ac0      	subs	r0, r0, r3
 80032c0:	2864      	cmp	r0, #100	; 0x64
 80032c2:	d9f5      	bls.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
          return HAL_TIMEOUT;
 80032c4:	2003      	movs	r0, #3
 80032c6:	e7de      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c8:	4906      	ldr	r1, [pc, #24]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032ca:	4810      	ldr	r0, [pc, #64]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80032cc:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80032ce:	4002      	ands	r2, r0
 80032d0:	638a      	str	r2, [r1, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032d2:	07da      	lsls	r2, r3, #31
 80032d4:	d5a9      	bpl.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032d6:	e7a1      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xf8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80032d8:	6803      	ldr	r3, [r0, #0]
 80032da:	039b      	lsls	r3, r3, #14
 80032dc:	d400      	bmi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 80032de:	e749      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x50>
          return HAL_ERROR;
 80032e0:	2001      	movs	r0, #1
 80032e2:	e7d0      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40007000 	.word	0x40007000
 80032ec:	fffcffff 	.word	0xfffcffff
 80032f0:	fff7ffff 	.word	0xfff7ffff
 80032f4:	00001388 	.word	0x00001388
 80032f8:	ffcfffff 	.word	0xffcfffff
 80032fc:	fffff3ff 	.word	0xfffff3ff
 8003300:	ffffcfff 	.word	0xffffcfff
 8003304:	fbffffff 	.word	0xfbffffff
 8003308:	fff3ffff 	.word	0xfff3ffff
 800330c:	efffffff 	.word	0xefffffff

08003310 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003312:	46c6      	mov	lr, r8
 8003314:	b500      	push	{lr}
 8003316:	001d      	movs	r5, r3
 8003318:	0016      	movs	r6, r2
 800331a:	b082      	sub	sp, #8
 800331c:	000c      	movs	r4, r1
 800331e:	0007      	movs	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003320:	f7ff f8da 	bl	80024d8 <HAL_GetTick>
 8003324:	19ad      	adds	r5, r5, r6
 8003326:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8003328:	f7ff f8d6 	bl	80024d8 <HAL_GetTick>
 800332c:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800332e:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	015b      	lsls	r3, r3, #5
 8003334:	0d1b      	lsrs	r3, r3, #20
 8003336:	436b      	muls	r3, r5
 8003338:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800333a:	6839      	ldr	r1, [r7, #0]
 800333c:	1c73      	adds	r3, r6, #1
 800333e:	d108      	bne.n	8003352 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
 8003340:	688b      	ldr	r3, [r1, #8]
 8003342:	4023      	ands	r3, r4
 8003344:	42a3      	cmp	r3, r4
 8003346:	d0fb      	beq.n	8003340 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 8003348:	2000      	movs	r0, #0
}
 800334a:	b002      	add	sp, #8
 800334c:	bc80      	pop	{r7}
 800334e:	46b8      	mov	r8, r7
 8003350:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003352:	688b      	ldr	r3, [r1, #8]
 8003354:	4023      	ands	r3, r4
 8003356:	429c      	cmp	r4, r3
 8003358:	d1f6      	bne.n	8003348 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800335a:	f7ff f8bd 	bl	80024d8 <HAL_GetTick>
 800335e:	4643      	mov	r3, r8
 8003360:	1ac0      	subs	r0, r0, r3
 8003362:	42a8      	cmp	r0, r5
 8003364:	d208      	bcs.n	8003378 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
      if (count == 0U)
 8003366:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003368:	1e5a      	subs	r2, r3, #1
 800336a:	4193      	sbcs	r3, r2
 800336c:	425b      	negs	r3, r3
 800336e:	401d      	ands	r5, r3
      count--;
 8003370:	9b01      	ldr	r3, [sp, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	e7e0      	b.n	800333a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003378:	21e0      	movs	r1, #224	; 0xe0
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	438a      	bics	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003382:	2282      	movs	r2, #130	; 0x82
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	0052      	lsls	r2, r2, #1
 8003388:	4291      	cmp	r1, r2
 800338a:	d014      	beq.n	80033b6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800338c:	2180      	movs	r1, #128	; 0x80
 800338e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003390:	0189      	lsls	r1, r1, #6
 8003392:	428a      	cmp	r2, r1
 8003394:	d007      	beq.n	80033a6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x96>
        hspi->State = HAL_SPI_STATE_READY;
 8003396:	2351      	movs	r3, #81	; 0x51
 8003398:	2201      	movs	r2, #1
 800339a:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 800339c:	2200      	movs	r2, #0
 800339e:	3b01      	subs	r3, #1
 80033a0:	2003      	movs	r0, #3
 80033a2:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 80033a4:	e7d1      	b.n	800334a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
          SPI_RESET_CRC(hspi);
 80033a6:	6819      	ldr	r1, [r3, #0]
 80033a8:	480b      	ldr	r0, [pc, #44]	; (80033d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc8>)
 80033aa:	4001      	ands	r1, r0
 80033ac:	6019      	str	r1, [r3, #0]
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e7ef      	b.n	8003396 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x86>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	0209      	lsls	r1, r1, #8
 80033bc:	428a      	cmp	r2, r1
 80033be:	d003      	beq.n	80033c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033c0:	2180      	movs	r1, #128	; 0x80
 80033c2:	00c9      	lsls	r1, r1, #3
 80033c4:	428a      	cmp	r2, r1
 80033c6:	d1e1      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
          __HAL_SPI_DISABLE(hspi);
 80033c8:	2140      	movs	r1, #64	; 0x40
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	438a      	bics	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	e7dc      	b.n	800338c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	20000010 	.word	0x20000010
 80033d8:	ffffdfff 	.word	0xffffdfff

080033dc <HAL_SPI_Init>:
{
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	46ce      	mov	lr, r9
 80033e0:	4647      	mov	r7, r8
 80033e2:	0004      	movs	r4, r0
 80033e4:	b580      	push	{r7, lr}
  if (hspi == NULL)
 80033e6:	2800      	cmp	r0, #0
 80033e8:	d06a      	beq.n	80034c0 <HAL_SPI_Init+0xe4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033ea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80033ec:	2800      	cmp	r0, #0
 80033ee:	d04f      	beq.n	8003490 <HAL_SPI_Init+0xb4>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033f0:	2300      	movs	r3, #0
 80033f2:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033f4:	6163      	str	r3, [r4, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80033fa:	3351      	adds	r3, #81	; 0x51
 80033fc:	5ce3      	ldrb	r3, [r4, r3]
 80033fe:	2600      	movs	r6, #0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d052      	beq.n	80034aa <HAL_SPI_Init+0xce>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003404:	2351      	movs	r3, #81	; 0x51
 8003406:	4698      	mov	r8, r3
 8003408:	4642      	mov	r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800340a:	2784      	movs	r7, #132	; 0x84
  hspi->State = HAL_SPI_STATE_BUSY;
 800340c:	3b4f      	subs	r3, #79	; 0x4f
 800340e:	54a3      	strb	r3, [r4, r2]
  __HAL_SPI_DISABLE(hspi);
 8003410:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003412:	6865      	ldr	r5, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8003414:	6811      	ldr	r1, [r2, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003416:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 8003418:	333e      	adds	r3, #62	; 0x3e
 800341a:	4399      	bics	r1, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800341c:	33c4      	adds	r3, #196	; 0xc4
 800341e:	402b      	ands	r3, r5
 8003420:	68a5      	ldr	r5, [r4, #8]
 8003422:	023f      	lsls	r7, r7, #8
 8003424:	402f      	ands	r7, r5
 8003426:	433b      	orrs	r3, r7
 8003428:	2780      	movs	r7, #128	; 0x80
 800342a:	68e5      	ldr	r5, [r4, #12]
 800342c:	013f      	lsls	r7, r7, #4
 800342e:	402f      	ands	r7, r5
 8003430:	433b      	orrs	r3, r7
 8003432:	4667      	mov	r7, ip
 8003434:	6925      	ldr	r5, [r4, #16]
  __HAL_SPI_DISABLE(hspi);
 8003436:	6011      	str	r1, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003438:	402f      	ands	r7, r5
 800343a:	2501      	movs	r5, #1
 800343c:	46a9      	mov	r9, r5
 800343e:	433b      	orrs	r3, r7
 8003440:	464f      	mov	r7, r9
 8003442:	6965      	ldr	r5, [r4, #20]
 8003444:	69a1      	ldr	r1, [r4, #24]
 8003446:	403d      	ands	r5, r7
 8003448:	432b      	orrs	r3, r5
 800344a:	2580      	movs	r5, #128	; 0x80
 800344c:	00ad      	lsls	r5, r5, #2
 800344e:	400d      	ands	r5, r1
 8003450:	432b      	orrs	r3, r5
 8003452:	2538      	movs	r5, #56	; 0x38
 8003454:	69e7      	ldr	r7, [r4, #28]
 8003456:	403d      	ands	r5, r7
 8003458:	432b      	orrs	r3, r5
 800345a:	2580      	movs	r5, #128	; 0x80
 800345c:	6a27      	ldr	r7, [r4, #32]
 800345e:	403d      	ands	r5, r7
 8003460:	432b      	orrs	r3, r5
 8003462:	4333      	orrs	r3, r6
 8003464:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003466:	0c0b      	lsrs	r3, r1, #16
 8003468:	2104      	movs	r1, #4
 800346a:	4019      	ands	r1, r3
 800346c:	2310      	movs	r3, #16
 800346e:	4018      	ands	r0, r3
 8003470:	4308      	orrs	r0, r1
 8003472:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003474:	69d3      	ldr	r3, [r2, #28]
 8003476:	4913      	ldr	r1, [pc, #76]	; (80034c4 <HAL_SPI_Init+0xe8>)
  return HAL_OK;
 8003478:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800347a:	400b      	ands	r3, r1
 800347c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800347e:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003480:	464a      	mov	r2, r9
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003482:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003484:	4643      	mov	r3, r8
 8003486:	54e2      	strb	r2, [r4, r3]
}
 8003488:	bcc0      	pop	{r6, r7}
 800348a:	46b9      	mov	r9, r7
 800348c:	46b0      	mov	r8, r6
 800348e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003490:	2382      	movs	r3, #130	; 0x82
 8003492:	6862      	ldr	r2, [r4, #4]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	429a      	cmp	r2, r3
 8003498:	d0ad      	beq.n	80033f6 <HAL_SPI_Init+0x1a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800349a:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800349c:	61e0      	str	r0, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800349e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80034a0:	3351      	adds	r3, #81	; 0x51
 80034a2:	5ce3      	ldrb	r3, [r4, r3]
 80034a4:	2600      	movs	r6, #0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1ac      	bne.n	8003404 <HAL_SPI_Init+0x28>
    hspi->Lock = HAL_UNLOCKED;
 80034aa:	3350      	adds	r3, #80	; 0x50
 80034ac:	54e6      	strb	r6, [r4, r3]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034ae:	2680      	movs	r6, #128	; 0x80
    HAL_SPI_MspInit(hspi);
 80034b0:	0020      	movs	r0, r4
 80034b2:	f7fe ff2d 	bl	8002310 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80034b8:	01b6      	lsls	r6, r6, #6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034bc:	401e      	ands	r6, r3
 80034be:	e7a1      	b.n	8003404 <HAL_SPI_Init+0x28>
    return HAL_ERROR;
 80034c0:	2001      	movs	r0, #1
 80034c2:	e7e1      	b.n	8003488 <HAL_SPI_Init+0xac>
 80034c4:	fffff7ff 	.word	0xfffff7ff

080034c8 <HAL_SPI_Transmit>:
{
 80034c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ca:	464f      	mov	r7, r9
 80034cc:	46d6      	mov	lr, sl
 80034ce:	4646      	mov	r6, r8
 80034d0:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 80034d2:	2350      	movs	r3, #80	; 0x50
{
 80034d4:	b5c0      	push	{r6, r7, lr}
 80034d6:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80034d8:	5cc2      	ldrb	r2, [r0, r3]
{
 80034da:	0004      	movs	r4, r0
 80034dc:	000f      	movs	r7, r1
 80034de:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80034e0:	2a01      	cmp	r2, #1
 80034e2:	d100      	bne.n	80034e6 <HAL_SPI_Transmit+0x1e>
 80034e4:	e08b      	b.n	80035fe <HAL_SPI_Transmit+0x136>
 80034e6:	2201      	movs	r2, #1
 80034e8:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80034ea:	f7fe fff5 	bl	80024d8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80034ee:	2251      	movs	r2, #81	; 0x51
 80034f0:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 80034f2:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80034f4:	b2de      	uxtb	r6, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d00a      	beq.n	8003510 <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 80034fa:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 80034fc:	2350      	movs	r3, #80	; 0x50
 80034fe:	2200      	movs	r2, #0
 8003500:	54e2      	strb	r2, [r4, r3]
}
 8003502:	0030      	movs	r0, r6
 8003504:	b002      	add	sp, #8
 8003506:	bce0      	pop	{r5, r6, r7}
 8003508:	46ba      	mov	sl, r7
 800350a:	46b1      	mov	r9, r6
 800350c:	46a8      	mov	r8, r5
 800350e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8003510:	2f00      	cmp	r7, #0
 8003512:	d0f3      	beq.n	80034fc <HAL_SPI_Transmit+0x34>
 8003514:	464b      	mov	r3, r9
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_SPI_Transmit+0x34>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800351a:	2303      	movs	r3, #3
 800351c:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800351e:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8003520:	464a      	mov	r2, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003522:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003524:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003526:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8003528:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800352a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800352c:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800352e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003530:	2380      	movs	r3, #128	; 0x80
  hspi->TxXferSize  = Size;
 8003532:	86a2      	strh	r2, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003534:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003536:	6327      	str	r7, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003538:	021b      	lsls	r3, r3, #8
 800353a:	429a      	cmp	r2, r3
 800353c:	d061      	beq.n	8003602 <HAL_SPI_Transmit+0x13a>
    __HAL_SPI_DISABLE(hspi);
 800353e:	6822      	ldr	r2, [r4, #0]
 8003540:	0010      	movs	r0, r2
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003542:	2340      	movs	r3, #64	; 0x40
 8003544:	6811      	ldr	r1, [r2, #0]
 8003546:	420b      	tst	r3, r1
 8003548:	d102      	bne.n	8003550 <HAL_SPI_Transmit+0x88>
    __HAL_SPI_ENABLE(hspi);
 800354a:	6811      	ldr	r1, [r2, #0]
 800354c:	430b      	orrs	r3, r1
 800354e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	68e1      	ldr	r1, [r4, #12]
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	4299      	cmp	r1, r3
 8003558:	d100      	bne.n	800355c <HAL_SPI_Transmit+0x94>
 800355a:	e08c      	b.n	8003676 <HAL_SPI_Transmit+0x1ae>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800355c:	6863      	ldr	r3, [r4, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d077      	beq.n	8003652 <HAL_SPI_Transmit+0x18a>
 8003562:	464b      	mov	r3, r9
 8003564:	2b01      	cmp	r3, #1
 8003566:	d074      	beq.n	8003652 <HAL_SPI_Transmit+0x18a>
    while (hspi->TxXferCount > 0U)
 8003568:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800356a:	2b00      	cmp	r3, #0
 800356c:	d017      	beq.n	800359e <HAL_SPI_Transmit+0xd6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800356e:	2202      	movs	r2, #2
 8003570:	2d00      	cmp	r5, #0
 8003572:	d100      	bne.n	8003576 <HAL_SPI_Transmit+0xae>
 8003574:	e0d9      	b.n	800372a <HAL_SPI_Transmit+0x262>
 8003576:	2702      	movs	r7, #2
 8003578:	1c6b      	adds	r3, r5, #1
 800357a:	d15b      	bne.n	8003634 <HAL_SPI_Transmit+0x16c>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	4217      	tst	r7, r2
 8003582:	d070      	beq.n	8003666 <HAL_SPI_Transmit+0x19e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003584:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003586:	7812      	ldrb	r2, [r2, #0]
 8003588:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800358a:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800358c:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800358e:	3901      	subs	r1, #1
 8003590:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003592:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8003594:	86e1      	strh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003596:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8003598:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1ee      	bne.n	800357c <HAL_SPI_Transmit+0xb4>
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800359e:	6863      	ldr	r3, [r4, #4]
 80035a0:	469a      	mov	sl, r3
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035a2:	4b76      	ldr	r3, [pc, #472]	; (800377c <HAL_SPI_Transmit+0x2b4>)
 80035a4:	4976      	ldr	r1, [pc, #472]	; (8003780 <HAL_SPI_Transmit+0x2b8>)
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	f7fc fdae 	bl	8000108 <__udivsi3>
 80035ac:	0142      	lsls	r2, r0, #5
 80035ae:	1a12      	subs	r2, r2, r0
 80035b0:	0093      	lsls	r3, r2, #2
 80035b2:	181b      	adds	r3, r3, r0
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035b8:	2382      	movs	r3, #130	; 0x82
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ba:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	459a      	cmp	sl, r3
 80035c0:	d107      	bne.n	80035d2 <HAL_SPI_Transmit+0x10a>
 80035c2:	e0b9      	b.n	8003738 <HAL_SPI_Transmit+0x270>
      count--;
 80035c4:	9b01      	ldr	r3, [sp, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	421a      	tst	r2, r3
 80035d0:	d002      	beq.n	80035d8 <HAL_SPI_Transmit+0x110>
      if (count == 0U)
 80035d2:	9b01      	ldr	r3, [sp, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f5      	bne.n	80035c4 <HAL_SPI_Transmit+0xfc>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035d8:	68a3      	ldr	r3, [r4, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_SPI_Transmit+0x124>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	9200      	str	r2, [sp, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d000      	beq.n	80035f4 <HAL_SPI_Transmit+0x12c>
 80035f2:	e783      	b.n	80034fc <HAL_SPI_Transmit+0x34>
    hspi->State = HAL_SPI_STATE_READY;
 80035f4:	2201      	movs	r2, #1
 80035f6:	3351      	adds	r3, #81	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035f8:	2600      	movs	r6, #0
    hspi->State = HAL_SPI_STATE_READY;
 80035fa:	54e2      	strb	r2, [r4, r3]
 80035fc:	e77e      	b.n	80034fc <HAL_SPI_Transmit+0x34>
  __HAL_LOCK(hspi);
 80035fe:	2602      	movs	r6, #2
 8003600:	e77f      	b.n	8003502 <HAL_SPI_Transmit+0x3a>
    __HAL_SPI_DISABLE(hspi);
 8003602:	2140      	movs	r1, #64	; 0x40
 8003604:	6822      	ldr	r2, [r4, #0]
 8003606:	6813      	ldr	r3, [r2, #0]
 8003608:	0010      	movs	r0, r2
 800360a:	438b      	bics	r3, r1
 800360c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	6811      	ldr	r1, [r2, #0]
 8003612:	01db      	lsls	r3, r3, #7
 8003614:	430b      	orrs	r3, r1
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	e793      	b.n	8003542 <HAL_SPI_Transmit+0x7a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800361a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800361c:	7812      	ldrb	r2, [r2, #0]
 800361e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003620:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003622:	3301      	adds	r3, #1
 8003624:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003626:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003628:	3b01      	subs	r3, #1
 800362a:	b29b      	uxth	r3, r3
 800362c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800362e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0b4      	beq.n	800359e <HAL_SPI_Transmit+0xd6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	4217      	tst	r7, r2
 800363a:	d1ee      	bne.n	800361a <HAL_SPI_Transmit+0x152>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800363c:	f7fe ff4c 	bl	80024d8 <HAL_GetTick>
 8003640:	4643      	mov	r3, r8
 8003642:	1ac0      	subs	r0, r0, r3
 8003644:	4285      	cmp	r5, r0
 8003646:	d8f2      	bhi.n	800362e <HAL_SPI_Transmit+0x166>
          hspi->State = HAL_SPI_STATE_READY;
 8003648:	2351      	movs	r3, #81	; 0x51
 800364a:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 800364c:	2603      	movs	r6, #3
          hspi->State = HAL_SPI_STATE_READY;
 800364e:	54e2      	strb	r2, [r4, r3]
          goto error;
 8003650:	e754      	b.n	80034fc <HAL_SPI_Transmit+0x34>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003652:	783b      	ldrb	r3, [r7, #0]
 8003654:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003656:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003658:	3301      	adds	r3, #1
 800365a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800365c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800365e:	3b01      	subs	r3, #1
 8003660:	b29b      	uxth	r3, r3
 8003662:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003664:	e780      	b.n	8003568 <HAL_SPI_Transmit+0xa0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003666:	f7fe ff37 	bl	80024d8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800366a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800366c:	2b00      	cmp	r3, #0
 800366e:	d000      	beq.n	8003672 <HAL_SPI_Transmit+0x1aa>
 8003670:	e784      	b.n	800357c <HAL_SPI_Transmit+0xb4>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003672:	6863      	ldr	r3, [r4, #4]
 8003674:	e794      	b.n	80035a0 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003676:	6863      	ldr	r3, [r4, #4]
 8003678:	469a      	mov	sl, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d143      	bne.n	8003706 <HAL_SPI_Transmit+0x23e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800367e:	8839      	ldrh	r1, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003680:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003682:	60d1      	str	r1, [r2, #12]
      hspi->TxXferCount--;
 8003684:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003686:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003688:	3901      	subs	r1, #1
 800368a:	b289      	uxth	r1, r1
 800368c:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800368e:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003690:	2900      	cmp	r1, #0
 8003692:	d100      	bne.n	8003696 <HAL_SPI_Transmit+0x1ce>
 8003694:	e785      	b.n	80035a2 <HAL_SPI_Transmit+0xda>
 8003696:	2d00      	cmp	r5, #0
 8003698:	d05d      	beq.n	8003756 <HAL_SPI_Transmit+0x28e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800369a:	2702      	movs	r7, #2
 800369c:	1c6b      	adds	r3, r5, #1
 800369e:	d128      	bne.n	80036f2 <HAL_SPI_Transmit+0x22a>
 80036a0:	6893      	ldr	r3, [r2, #8]
 80036a2:	421f      	tst	r7, r3
 80036a4:	d00f      	beq.n	80036c6 <HAL_SPI_Transmit+0x1fe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036a8:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036aa:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ac:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ae:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80036b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80036b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d100      	bne.n	80036c0 <HAL_SPI_Transmit+0x1f8>
 80036be:	e76e      	b.n	800359e <HAL_SPI_Transmit+0xd6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036c0:	6893      	ldr	r3, [r2, #8]
 80036c2:	421f      	tst	r7, r3
 80036c4:	d1ef      	bne.n	80036a6 <HAL_SPI_Transmit+0x1de>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036c6:	f7fe ff07 	bl	80024d8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80036ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d100      	bne.n	80036d2 <HAL_SPI_Transmit+0x20a>
 80036d0:	e765      	b.n	800359e <HAL_SPI_Transmit+0xd6>
 80036d2:	6822      	ldr	r2, [r4, #0]
 80036d4:	e7e4      	b.n	80036a0 <HAL_SPI_Transmit+0x1d8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036d8:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036da:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036dc:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036de:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80036e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80036e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d100      	bne.n	80036f0 <HAL_SPI_Transmit+0x228>
 80036ee:	e756      	b.n	800359e <HAL_SPI_Transmit+0xd6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036f0:	6820      	ldr	r0, [r4, #0]
 80036f2:	6883      	ldr	r3, [r0, #8]
 80036f4:	421f      	tst	r7, r3
 80036f6:	d1ee      	bne.n	80036d6 <HAL_SPI_Transmit+0x20e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036f8:	f7fe feee 	bl	80024d8 <HAL_GetTick>
 80036fc:	4643      	mov	r3, r8
 80036fe:	1ac0      	subs	r0, r0, r3
 8003700:	4285      	cmp	r5, r0
 8003702:	d9a1      	bls.n	8003648 <HAL_SPI_Transmit+0x180>
 8003704:	e7f0      	b.n	80036e8 <HAL_SPI_Transmit+0x220>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003706:	4649      	mov	r1, r9
 8003708:	2901      	cmp	r1, #1
 800370a:	d1c0      	bne.n	800368e <HAL_SPI_Transmit+0x1c6>
 800370c:	e7b7      	b.n	800367e <HAL_SPI_Transmit+0x1b6>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800370e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003710:	7809      	ldrb	r1, [r1, #0]
 8003712:	7319      	strb	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003714:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003716:	3301      	adds	r3, #1
 8003718:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800371a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800371c:	3b01      	subs	r3, #1
 800371e:	b29b      	uxth	r3, r3
 8003720:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003722:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003724:	2b00      	cmp	r3, #0
 8003726:	d100      	bne.n	800372a <HAL_SPI_Transmit+0x262>
 8003728:	e739      	b.n	800359e <HAL_SPI_Transmit+0xd6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	6899      	ldr	r1, [r3, #8]
 800372e:	420a      	tst	r2, r1
 8003730:	d1ed      	bne.n	800370e <HAL_SPI_Transmit+0x246>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003732:	f7fe fed1 	bl	80024d8 <HAL_GetTick>
 8003736:	e787      	b.n	8003648 <HAL_SPI_Transmit+0x180>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003738:	4643      	mov	r3, r8
 800373a:	002a      	movs	r2, r5
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	0020      	movs	r0, r4
 8003740:	f7ff fde6 	bl	8003310 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003744:	2800      	cmp	r0, #0
 8003746:	d100      	bne.n	800374a <HAL_SPI_Transmit+0x282>
 8003748:	e746      	b.n	80035d8 <HAL_SPI_Transmit+0x110>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374a:	2220      	movs	r2, #32
 800374c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800374e:	4313      	orrs	r3, r2
 8003750:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003752:	6562      	str	r2, [r4, #84]	; 0x54
 8003754:	e740      	b.n	80035d8 <HAL_SPI_Transmit+0x110>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003756:	2002      	movs	r0, #2
 8003758:	e00c      	b.n	8003774 <HAL_SPI_Transmit+0x2ac>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800375a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800375c:	880f      	ldrh	r7, [r1, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800375e:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003760:	60d7      	str	r7, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003762:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003764:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003766:	3901      	subs	r1, #1
 8003768:	b289      	uxth	r1, r1
 800376a:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800376c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800376e:	2900      	cmp	r1, #0
 8003770:	d100      	bne.n	8003774 <HAL_SPI_Transmit+0x2ac>
 8003772:	e715      	b.n	80035a0 <HAL_SPI_Transmit+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003774:	6891      	ldr	r1, [r2, #8]
 8003776:	4208      	tst	r0, r1
 8003778:	d1ef      	bne.n	800375a <HAL_SPI_Transmit+0x292>
 800377a:	e7da      	b.n	8003732 <HAL_SPI_Transmit+0x26a>
 800377c:	20000010 	.word	0x20000010
 8003780:	016e3600 	.word	0x016e3600

08003784 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	4657      	mov	r7, sl
 8003788:	464e      	mov	r6, r9
 800378a:	4645      	mov	r5, r8
 800378c:	46de      	mov	lr, fp
 800378e:	b5e0      	push	{r5, r6, r7, lr}
 8003790:	001e      	movs	r6, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003792:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8003794:	0005      	movs	r5, r0
 8003796:	000f      	movs	r7, r1
 8003798:	0014      	movs	r4, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800379a:	2b20      	cmp	r3, #32
 800379c:	d000      	beq.n	80037a0 <HAL_UART_Transmit+0x1c>
 800379e:	e0a8      	b.n	80038f2 <HAL_UART_Transmit+0x16e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a0:	2900      	cmp	r1, #0
 80037a2:	d04a      	beq.n	800383a <HAL_UART_Transmit+0xb6>
 80037a4:	2a00      	cmp	r2, #0
 80037a6:	d048      	beq.n	800383a <HAL_UART_Transmit+0xb6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	6882      	ldr	r2, [r0, #8]
 80037ac:	015b      	lsls	r3, r3, #5
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d104      	bne.n	80037bc <HAL_UART_Transmit+0x38>
 80037b2:	6903      	ldr	r3, [r0, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_UART_Transmit+0x38>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037b8:	07cb      	lsls	r3, r1, #31
 80037ba:	d43e      	bmi.n	800383a <HAL_UART_Transmit+0xb6>
      {
        return  HAL_ERROR;
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037bc:	2200      	movs	r2, #0
 80037be:	2384      	movs	r3, #132	; 0x84
 80037c0:	50ea      	str	r2, [r5, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037c2:	3b63      	subs	r3, #99	; 0x63
 80037c4:	67eb      	str	r3, [r5, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037c6:	f7fe fe87 	bl	80024d8 <HAL_GetTick>

    huart->TxXferSize  = Size;
 80037ca:	2350      	movs	r3, #80	; 0x50
      pdata16bits = (const uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 80037cc:	2200      	movs	r2, #0
    huart->TxXferSize  = Size;
 80037ce:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 80037d0:	3302      	adds	r3, #2
 80037d2:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d4:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 80037d6:	4692      	mov	sl, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d8:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 80037da:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037dc:	015b      	lsls	r3, r3, #5
 80037de:	429a      	cmp	r2, r3
 80037e0:	d100      	bne.n	80037e4 <HAL_UART_Transmit+0x60>
 80037e2:	e0a3      	b.n	800392c <HAL_UART_Transmit+0x1a8>
    }

    while (huart->TxXferCount > 0U)
 80037e4:	2352      	movs	r3, #82	; 0x52
 80037e6:	5aeb      	ldrh	r3, [r5, r3]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d100      	bne.n	80037ee <HAL_UART_Transmit+0x6a>
 80037ec:	e0d6      	b.n	800399c <HAL_UART_Transmit+0x218>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037ee:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f0:	2480      	movs	r4, #128	; 0x80
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037f2:	4691      	mov	r9, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f4:	682b      	ldr	r3, [r5, #0]
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037f6:	2208      	movs	r2, #8
 80037f8:	4693      	mov	fp, r2
 80037fa:	1c72      	adds	r2, r6, #1
 80037fc:	d124      	bne.n	8003848 <HAL_UART_Transmit+0xc4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	4214      	tst	r4, r2
 8003802:	d0fc      	beq.n	80037fe <HAL_UART_Transmit+0x7a>
      if (pdata8bits == NULL)
 8003804:	2f00      	cmp	r7, #0
 8003806:	d06b      	beq.n	80038e0 <HAL_UART_Transmit+0x15c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003808:	783a      	ldrb	r2, [r7, #0]
        pdata8bits++;
 800380a:	3701      	adds	r7, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800380c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800380e:	2152      	movs	r1, #82	; 0x52
 8003810:	5a6a      	ldrh	r2, [r5, r1]
 8003812:	3a01      	subs	r2, #1
 8003814:	b292      	uxth	r2, r2
 8003816:	526a      	strh	r2, [r5, r1]
    while (huart->TxXferCount > 0U)
 8003818:	5a6a      	ldrh	r2, [r5, r1]
 800381a:	2a00      	cmp	r2, #0
 800381c:	d1eb      	bne.n	80037f6 <HAL_UART_Transmit+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800381e:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003820:	2440      	movs	r4, #64	; 0x40
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003822:	4691      	mov	r9, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003824:	2708      	movs	r7, #8
 8003826:	1c72      	adds	r2, r6, #1
 8003828:	d165      	bne.n	80038f6 <HAL_UART_Transmit+0x172>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382a:	2140      	movs	r1, #64	; 0x40
 800382c:	69da      	ldr	r2, [r3, #28]
 800382e:	4211      	tst	r1, r2
 8003830:	d0fc      	beq.n	800382c <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_READY;
 8003832:	2320      	movs	r3, #32
    return HAL_OK;
 8003834:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8003836:	67eb      	str	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 8003838:	e000      	b.n	800383c <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 800383a:	2001      	movs	r0, #1
}
 800383c:	bcf0      	pop	{r4, r5, r6, r7}
 800383e:	46bb      	mov	fp, r7
 8003840:	46b2      	mov	sl, r6
 8003842:	46a9      	mov	r9, r5
 8003844:	46a0      	mov	r8, r4
 8003846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003848:	69da      	ldr	r2, [r3, #28]
 800384a:	4214      	tst	r4, r2
 800384c:	d1da      	bne.n	8003804 <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7fe fe43 	bl	80024d8 <HAL_GetTick>
 8003852:	4643      	mov	r3, r8
 8003854:	1ac0      	subs	r0, r0, r3
 8003856:	4286      	cmp	r6, r0
 8003858:	d33e      	bcc.n	80038d8 <HAL_UART_Transmit+0x154>
 800385a:	2e00      	cmp	r6, #0
 800385c:	d03c      	beq.n	80038d8 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800385e:	4649      	mov	r1, r9
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4211      	tst	r1, r2
 8003866:	d0c8      	beq.n	80037fa <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003868:	4659      	mov	r1, fp
 800386a:	69da      	ldr	r2, [r3, #28]
 800386c:	4211      	tst	r1, r2
 800386e:	d164      	bne.n	800393a <HAL_UART_Transmit+0x1b6>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003870:	2280      	movs	r2, #128	; 0x80
 8003872:	69d9      	ldr	r1, [r3, #28]
 8003874:	0112      	lsls	r2, r2, #4
 8003876:	4211      	tst	r1, r2
 8003878:	d0bf      	beq.n	80037fa <HAL_UART_Transmit+0x76>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800387a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800387c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003880:	2201      	movs	r2, #1
 8003882:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003886:	6829      	ldr	r1, [r5, #0]
 8003888:	4c46      	ldr	r4, [pc, #280]	; (80039a4 <HAL_UART_Transmit+0x220>)
 800388a:	680b      	ldr	r3, [r1, #0]
 800388c:	4023      	ands	r3, r4
 800388e:	600b      	str	r3, [r1, #0]
 8003890:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003894:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003898:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389c:	6829      	ldr	r1, [r5, #0]
 800389e:	688b      	ldr	r3, [r1, #8]
 80038a0:	4393      	bics	r3, r2
 80038a2:	608b      	str	r3, [r1, #8]
 80038a4:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d10a      	bne.n	80038c4 <HAL_UART_Transmit+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b2:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b6:	2010      	movs	r0, #16
 80038b8:	682a      	ldr	r2, [r5, #0]
 80038ba:	6813      	ldr	r3, [r2, #0]
 80038bc:	4383      	bics	r3, r0
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c4:	2220      	movs	r2, #32
 80038c6:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038c8:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80038ca:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038cc:	2300      	movs	r3, #0
 80038ce:	662b      	str	r3, [r5, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038d0:	66ab      	str	r3, [r5, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038d2:	506a      	str	r2, [r5, r1]
          __HAL_UNLOCK(huart);
 80038d4:	3258      	adds	r2, #88	; 0x58
 80038d6:	54ab      	strb	r3, [r5, r2]
      huart->gState = HAL_UART_STATE_READY;
 80038d8:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80038da:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 80038dc:	67eb      	str	r3, [r5, #124]	; 0x7c
      return HAL_TIMEOUT;
 80038de:	e7ad      	b.n	800383c <HAL_UART_Transmit+0xb8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038e0:	4652      	mov	r2, sl
 80038e2:	8812      	ldrh	r2, [r2, #0]
 80038e4:	05d2      	lsls	r2, r2, #23
 80038e6:	0dd2      	lsrs	r2, r2, #23
 80038e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038ea:	2202      	movs	r2, #2
 80038ec:	4694      	mov	ip, r2
 80038ee:	44e2      	add	sl, ip
      huart->TxXferCount--;
 80038f0:	e78d      	b.n	800380e <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 80038f2:	2002      	movs	r0, #2
 80038f4:	e7a2      	b.n	800383c <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	421c      	tst	r4, r3
 80038fa:	d19a      	bne.n	8003832 <HAL_UART_Transmit+0xae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fc:	f7fe fdec 	bl	80024d8 <HAL_GetTick>
 8003900:	4643      	mov	r3, r8
 8003902:	1ac0      	subs	r0, r0, r3
 8003904:	4286      	cmp	r6, r0
 8003906:	d3e7      	bcc.n	80038d8 <HAL_UART_Transmit+0x154>
 8003908:	2e00      	cmp	r6, #0
 800390a:	d0e5      	beq.n	80038d8 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800390c:	4649      	mov	r1, r9
 800390e:	682b      	ldr	r3, [r5, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4211      	tst	r1, r2
 8003914:	d100      	bne.n	8003918 <HAL_UART_Transmit+0x194>
 8003916:	e786      	b.n	8003826 <HAL_UART_Transmit+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003918:	69da      	ldr	r2, [r3, #28]
 800391a:	4217      	tst	r7, r2
 800391c:	d140      	bne.n	80039a0 <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800391e:	2280      	movs	r2, #128	; 0x80
 8003920:	69d9      	ldr	r1, [r3, #28]
 8003922:	0112      	lsls	r2, r2, #4
 8003924:	4211      	tst	r1, r2
 8003926:	d100      	bne.n	800392a <HAL_UART_Transmit+0x1a6>
 8003928:	e77d      	b.n	8003826 <HAL_UART_Transmit+0xa2>
 800392a:	e7a6      	b.n	800387a <HAL_UART_Transmit+0xf6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800392c:	692b      	ldr	r3, [r5, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d000      	beq.n	8003934 <HAL_UART_Transmit+0x1b0>
 8003932:	e757      	b.n	80037e4 <HAL_UART_Transmit+0x60>
 8003934:	46ba      	mov	sl, r7
      pdata8bits  = NULL;
 8003936:	2700      	movs	r7, #0
 8003938:	e754      	b.n	80037e4 <HAL_UART_Transmit+0x60>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800393a:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003940:	2201      	movs	r2, #1
 8003942:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003946:	6829      	ldr	r1, [r5, #0]
 8003948:	4c16      	ldr	r4, [pc, #88]	; (80039a4 <HAL_UART_Transmit+0x220>)
 800394a:	680b      	ldr	r3, [r1, #0]
 800394c:	4023      	ands	r3, r4
 800394e:	600b      	str	r3, [r1, #0]
 8003950:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003954:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395c:	6829      	ldr	r1, [r5, #0]
 800395e:	688b      	ldr	r3, [r1, #8]
 8003960:	4393      	bics	r3, r2
 8003962:	608b      	str	r3, [r1, #8]
 8003964:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003968:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800396a:	2b01      	cmp	r3, #1
 800396c:	d10a      	bne.n	8003984 <HAL_UART_Transmit+0x200>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800396e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003972:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003976:	2010      	movs	r0, #16
 8003978:	682a      	ldr	r2, [r5, #0]
 800397a:	6813      	ldr	r3, [r2, #0]
 800397c:	4383      	bics	r3, r0
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003988:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800398a:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398c:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800398e:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003990:	662b      	str	r3, [r5, #96]	; 0x60
  huart->RxISR = NULL;
 8003992:	66ab      	str	r3, [r5, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003994:	50a9      	str	r1, [r5, r2]
           __HAL_UNLOCK(huart);
 8003996:	3a0c      	subs	r2, #12
 8003998:	54ab      	strb	r3, [r5, r2]
           return HAL_ERROR;
 800399a:	e79d      	b.n	80038d8 <HAL_UART_Transmit+0x154>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399c:	682b      	ldr	r3, [r5, #0]
 800399e:	e73e      	b.n	800381e <HAL_UART_Transmit+0x9a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039a0:	621f      	str	r7, [r3, #32]
 80039a2:	e7cb      	b.n	800393c <HAL_UART_Transmit+0x1b8>
 80039a4:	fffffedf 	.word	0xfffffedf

080039a8 <HAL_UART_Receive>:
{
 80039a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039aa:	4657      	mov	r7, sl
 80039ac:	464e      	mov	r6, r9
 80039ae:	4645      	mov	r5, r8
 80039b0:	46de      	mov	lr, fp
 80039b2:	b5e0      	push	{r5, r6, r7, lr}
 80039b4:	001e      	movs	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	58c3      	ldr	r3, [r0, r3]
{
 80039ba:	0005      	movs	r5, r0
 80039bc:	000f      	movs	r7, r1
 80039be:	0014      	movs	r4, r2
 80039c0:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d15d      	bne.n	8003a82 <HAL_UART_Receive+0xda>
    if ((pData == NULL) || (Size == 0U))
 80039c6:	2900      	cmp	r1, #0
 80039c8:	d053      	beq.n	8003a72 <HAL_UART_Receive+0xca>
 80039ca:	2a00      	cmp	r2, #0
 80039cc:	d051      	beq.n	8003a72 <HAL_UART_Receive+0xca>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ce:	2380      	movs	r3, #128	; 0x80
 80039d0:	6882      	ldr	r2, [r0, #8]
 80039d2:	015b      	lsls	r3, r3, #5
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d104      	bne.n	80039e2 <HAL_UART_Receive+0x3a>
 80039d8:	6903      	ldr	r3, [r0, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_UART_Receive+0x3a>
      if ((((uint32_t)pData) & 1U) != 0U)
 80039de:	07cb      	lsls	r3, r1, #31
 80039e0:	d447      	bmi.n	8003a72 <HAL_UART_Receive+0xca>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	4698      	mov	r8, r3
 80039e6:	4642      	mov	r2, r8
 80039e8:	3384      	adds	r3, #132	; 0x84
 80039ea:	50ea      	str	r2, [r5, r3]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039ec:	3222      	adds	r2, #34	; 0x22
 80039ee:	3b04      	subs	r3, #4
 80039f0:	50ea      	str	r2, [r5, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f2:	4643      	mov	r3, r8
 80039f4:	662b      	str	r3, [r5, #96]	; 0x60
    tickstart = HAL_GetTick();
 80039f6:	f7fe fd6f 	bl	80024d8 <HAL_GetTick>
    huart->RxXferSize  = Size;
 80039fa:	2358      	movs	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 80039fc:	2280      	movs	r2, #128	; 0x80
    huart->RxXferSize  = Size;
 80039fe:	52ec      	strh	r4, [r5, r3]
    huart->RxXferCount = Size;
 8003a00:	3302      	adds	r3, #2
 8003a02:	52ec      	strh	r4, [r5, r3]
    UART_MASK_COMPUTATION(huart);
 8003a04:	68ab      	ldr	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8003a06:	4681      	mov	r9, r0
    UART_MASK_COMPUTATION(huart);
 8003a08:	0152      	lsls	r2, r2, #5
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d100      	bne.n	8003a10 <HAL_UART_Receive+0x68>
 8003a0e:	e0ab      	b.n	8003b68 <HAL_UART_Receive+0x1c0>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d038      	beq.n	8003a86 <HAL_UART_Receive+0xde>
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	0552      	lsls	r2, r2, #21
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d100      	bne.n	8003a1e <HAL_UART_Receive+0x76>
 8003a1c:	e0ae      	b.n	8003b7c <HAL_UART_Receive+0x1d4>
 8003a1e:	235c      	movs	r3, #92	; 0x5c
 8003a20:	4642      	mov	r2, r8
 8003a22:	52ea      	strh	r2, [r5, r3]
 8003a24:	2300      	movs	r3, #0
 8003a26:	469a      	mov	sl, r3
      pdata16bits = NULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	9301      	str	r3, [sp, #4]
    while (huart->RxXferCount > 0U)
 8003a2c:	235a      	movs	r3, #90	; 0x5a
 8003a2e:	5aeb      	ldrh	r3, [r5, r3]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d100      	bne.n	8003a36 <HAL_UART_Receive+0x8e>
 8003a34:	e08d      	b.n	8003b52 <HAL_UART_Receive+0x1aa>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a36:	2304      	movs	r3, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a38:	2420      	movs	r4, #32
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a3a:	469b      	mov	fp, r3
 8003a3c:	682a      	ldr	r2, [r5, #0]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a3e:	2308      	movs	r3, #8
 8003a40:	4698      	mov	r8, r3
 8003a42:	1c73      	adds	r3, r6, #1
 8003a44:	d128      	bne.n	8003a98 <HAL_UART_Receive+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a46:	69d3      	ldr	r3, [r2, #28]
 8003a48:	421c      	tst	r4, r3
 8003a4a:	d0fc      	beq.n	8003a46 <HAL_UART_Receive+0x9e>
      if (pdata8bits == NULL)
 8003a4c:	2f00      	cmp	r7, #0
 8003a4e:	d100      	bne.n	8003a52 <HAL_UART_Receive+0xaa>
 8003a50:	e06f      	b.n	8003b32 <HAL_UART_Receive+0x18a>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a52:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003a54:	4652      	mov	r2, sl
 8003a56:	4013      	ands	r3, r2
      huart->RxXferCount--;
 8003a58:	225a      	movs	r2, #90	; 0x5a
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a5a:	703b      	strb	r3, [r7, #0]
      huart->RxXferCount--;
 8003a5c:	5aab      	ldrh	r3, [r5, r2]
        pdata8bits++;
 8003a5e:	3701      	adds	r7, #1
      huart->RxXferCount--;
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	52ab      	strh	r3, [r5, r2]
    while (huart->RxXferCount > 0U)
 8003a66:	5aab      	ldrh	r3, [r5, r2]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d100      	bne.n	8003a6e <HAL_UART_Receive+0xc6>
 8003a6c:	e071      	b.n	8003b52 <HAL_UART_Receive+0x1aa>
 8003a6e:	682a      	ldr	r2, [r5, #0]
 8003a70:	e7e5      	b.n	8003a3e <HAL_UART_Receive+0x96>
      return  HAL_ERROR;
 8003a72:	2001      	movs	r0, #1
}
 8003a74:	b003      	add	sp, #12
 8003a76:	bcf0      	pop	{r4, r5, r6, r7}
 8003a78:	46bb      	mov	fp, r7
 8003a7a:	46b2      	mov	sl, r6
 8003a7c:	46a9      	mov	r9, r5
 8003a7e:	46a0      	mov	r8, r4
 8003a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003a82:	2002      	movs	r0, #2
 8003a84:	e7f6      	b.n	8003a74 <HAL_UART_Receive+0xcc>
    UART_MASK_COMPUTATION(huart);
 8003a86:	692b      	ldr	r3, [r5, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d067      	beq.n	8003b5c <HAL_UART_Receive+0x1b4>
 8003a8c:	235c      	movs	r3, #92	; 0x5c
 8003a8e:	227f      	movs	r2, #127	; 0x7f
 8003a90:	52ea      	strh	r2, [r5, r3]
 8003a92:	3323      	adds	r3, #35	; 0x23
 8003a94:	469a      	mov	sl, r3
 8003a96:	e7c7      	b.n	8003a28 <HAL_UART_Receive+0x80>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a98:	69d3      	ldr	r3, [r2, #28]
 8003a9a:	421c      	tst	r4, r3
 8003a9c:	d1d6      	bne.n	8003a4c <HAL_UART_Receive+0xa4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9e:	f7fe fd1b 	bl	80024d8 <HAL_GetTick>
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	1ac0      	subs	r0, r0, r3
 8003aa6:	4286      	cmp	r6, r0
 8003aa8:	d33e      	bcc.n	8003b28 <HAL_UART_Receive+0x180>
 8003aaa:	2e00      	cmp	r6, #0
 8003aac:	d03c      	beq.n	8003b28 <HAL_UART_Receive+0x180>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003aae:	4659      	mov	r1, fp
 8003ab0:	682a      	ldr	r2, [r5, #0]
 8003ab2:	6813      	ldr	r3, [r2, #0]
 8003ab4:	4219      	tst	r1, r3
 8003ab6:	d0c4      	beq.n	8003a42 <HAL_UART_Receive+0x9a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ab8:	4641      	mov	r1, r8
 8003aba:	69d3      	ldr	r3, [r2, #28]
 8003abc:	4219      	tst	r1, r3
 8003abe:	d166      	bne.n	8003b8e <HAL_UART_Receive+0x1e6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	69d1      	ldr	r1, [r2, #28]
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	4219      	tst	r1, r3
 8003ac8:	d0bb      	beq.n	8003a42 <HAL_UART_Receive+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aca:	6213      	str	r3, [r2, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003acc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad6:	6829      	ldr	r1, [r5, #0]
 8003ad8:	4c45      	ldr	r4, [pc, #276]	; (8003bf0 <HAL_UART_Receive+0x248>)
 8003ada:	680b      	ldr	r3, [r1, #0]
 8003adc:	4023      	ands	r3, r4
 8003ade:	600b      	str	r3, [r1, #0]
 8003ae0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae8:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aec:	6829      	ldr	r1, [r5, #0]
 8003aee:	688b      	ldr	r3, [r1, #8]
 8003af0:	4393      	bics	r3, r2
 8003af2:	608b      	str	r3, [r1, #8]
 8003af4:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d10a      	bne.n	8003b14 <HAL_UART_Receive+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b02:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b06:	2010      	movs	r0, #16
 8003b08:	682a      	ldr	r2, [r5, #0]
 8003b0a:	6813      	ldr	r3, [r2, #0]
 8003b0c:	4383      	bics	r3, r0
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8003b14:	2220      	movs	r2, #32
 8003b16:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b18:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003b1a:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	662b      	str	r3, [r5, #96]	; 0x60
  huart->RxISR = NULL;
 8003b20:	66ab      	str	r3, [r5, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b22:	506a      	str	r2, [r5, r1]
          __HAL_UNLOCK(huart);
 8003b24:	3258      	adds	r2, #88	; 0x58
 8003b26:	54ab      	strb	r3, [r5, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	2220      	movs	r2, #32
        return HAL_TIMEOUT;
 8003b2c:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	50ea      	str	r2, [r5, r3]
        return HAL_TIMEOUT;
 8003b30:	e7a0      	b.n	8003a74 <HAL_UART_Receive+0xcc>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003b32:	4651      	mov	r1, sl
 8003b34:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003b36:	400b      	ands	r3, r1
 8003b38:	9901      	ldr	r1, [sp, #4]
 8003b3a:	800b      	strh	r3, [r1, #0]
        pdata16bits++;
 8003b3c:	1c8b      	adds	r3, r1, #2
      huart->RxXferCount--;
 8003b3e:	215a      	movs	r1, #90	; 0x5a
        pdata16bits++;
 8003b40:	9301      	str	r3, [sp, #4]
      huart->RxXferCount--;
 8003b42:	5a6b      	ldrh	r3, [r5, r1]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	526b      	strh	r3, [r5, r1]
    while (huart->RxXferCount > 0U)
 8003b4a:	5a6b      	ldrh	r3, [r5, r1]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d000      	beq.n	8003b52 <HAL_UART_Receive+0x1aa>
 8003b50:	e775      	b.n	8003a3e <HAL_UART_Receive+0x96>
    huart->RxState = HAL_UART_STATE_READY;
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	2220      	movs	r2, #32
    return HAL_OK;
 8003b56:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 8003b58:	50ea      	str	r2, [r5, r3]
    return HAL_OK;
 8003b5a:	e78b      	b.n	8003a74 <HAL_UART_Receive+0xcc>
    UART_MASK_COMPUTATION(huart);
 8003b5c:	235c      	movs	r3, #92	; 0x5c
 8003b5e:	22ff      	movs	r2, #255	; 0xff
 8003b60:	52ea      	strh	r2, [r5, r3]
 8003b62:	33a3      	adds	r3, #163	; 0xa3
 8003b64:	469a      	mov	sl, r3
 8003b66:	e75f      	b.n	8003a28 <HAL_UART_Receive+0x80>
 8003b68:	692b      	ldr	r3, [r5, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f6      	bne.n	8003b5c <HAL_UART_Receive+0x1b4>
 8003b6e:	225c      	movs	r2, #92	; 0x5c
 8003b70:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <HAL_UART_Receive+0x24c>)
 8003b72:	9701      	str	r7, [sp, #4]
 8003b74:	469a      	mov	sl, r3
      pdata8bits  = NULL;
 8003b76:	2700      	movs	r7, #0
 8003b78:	52ab      	strh	r3, [r5, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b7a:	e757      	b.n	8003a2c <HAL_UART_Receive+0x84>
    UART_MASK_COMPUTATION(huart);
 8003b7c:	692b      	ldr	r3, [r5, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d084      	beq.n	8003a8c <HAL_UART_Receive+0xe4>
 8003b82:	235c      	movs	r3, #92	; 0x5c
 8003b84:	223f      	movs	r2, #63	; 0x3f
 8003b86:	52ea      	strh	r2, [r5, r3]
 8003b88:	3b1d      	subs	r3, #29
 8003b8a:	469a      	mov	sl, r3
 8003b8c:	e74c      	b.n	8003a28 <HAL_UART_Receive+0x80>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b8e:	6211      	str	r1, [r2, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b90:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b94:	2201      	movs	r2, #1
 8003b96:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9a:	6829      	ldr	r1, [r5, #0]
 8003b9c:	4c14      	ldr	r4, [pc, #80]	; (8003bf0 <HAL_UART_Receive+0x248>)
 8003b9e:	680b      	ldr	r3, [r1, #0]
 8003ba0:	4023      	ands	r3, r4
 8003ba2:	600b      	str	r3, [r1, #0]
 8003ba4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bac:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb0:	6829      	ldr	r1, [r5, #0]
 8003bb2:	688b      	ldr	r3, [r1, #8]
 8003bb4:	4393      	bics	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]
 8003bb8:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bbc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d10a      	bne.n	8003bd8 <HAL_UART_Receive+0x230>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bca:	2010      	movs	r0, #16
 8003bcc:	682a      	ldr	r2, [r5, #0]
 8003bce:	6813      	ldr	r3, [r2, #0]
 8003bd0:	4383      	bics	r3, r0
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bdc:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8003bde:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be0:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003be2:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be4:	662b      	str	r3, [r5, #96]	; 0x60
  huart->RxISR = NULL;
 8003be6:	66ab      	str	r3, [r5, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003be8:	50a9      	str	r1, [r5, r2]
           __HAL_UNLOCK(huart);
 8003bea:	3a0c      	subs	r2, #12
 8003bec:	54ab      	strb	r3, [r5, r2]
           return HAL_ERROR;
 8003bee:	e79b      	b.n	8003b28 <HAL_UART_Receive+0x180>
 8003bf0:	fffffedf 	.word	0xfffffedf
 8003bf4:	000001ff 	.word	0x000001ff

08003bf8 <HAL_UART_Receive_IT>:
{
 8003bf8:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bfa:	2080      	movs	r0, #128	; 0x80
 8003bfc:	5818      	ldr	r0, [r3, r0]
{
 8003bfe:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c00:	2820      	cmp	r0, #32
 8003c02:	d151      	bne.n	8003ca8 <HAL_UART_Receive_IT+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8003c04:	2900      	cmp	r1, #0
 8003c06:	d04d      	beq.n	8003ca4 <HAL_UART_Receive_IT+0xac>
 8003c08:	2a00      	cmp	r2, #0
 8003c0a:	d04b      	beq.n	8003ca4 <HAL_UART_Receive_IT+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c0c:	2480      	movs	r4, #128	; 0x80
 8003c0e:	6898      	ldr	r0, [r3, #8]
 8003c10:	0164      	lsls	r4, r4, #5
 8003c12:	42a0      	cmp	r0, r4
 8003c14:	d04a      	beq.n	8003cac <HAL_UART_Receive_IT+0xb4>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c16:	2500      	movs	r5, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c18:	681c      	ldr	r4, [r3, #0]
 8003c1a:	4e5d      	ldr	r6, [pc, #372]	; (8003d90 <HAL_UART_Receive_IT+0x198>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1c:	661d      	str	r5, [r3, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c1e:	42b4      	cmp	r4, r6
 8003c20:	d100      	bne.n	8003c24 <HAL_UART_Receive_IT+0x2c>
 8003c22:	e09d      	b.n	8003d60 <HAL_UART_Receive_IT+0x168>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c24:	6865      	ldr	r5, [r4, #4]
 8003c26:	2480      	movs	r4, #128	; 0x80
 8003c28:	002e      	movs	r6, r5
 8003c2a:	0424      	lsls	r4, r4, #16
 8003c2c:	4026      	ands	r6, r4
 8003c2e:	4225      	tst	r5, r4
 8003c30:	d15f      	bne.n	8003cf2 <HAL_UART_Receive_IT+0xfa>
  huart->pRxBuffPtr  = pData;
 8003c32:	6559      	str	r1, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c34:	2158      	movs	r1, #88	; 0x58
 8003c36:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003c38:	3102      	adds	r1, #2
 8003c3a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003c3c:	669e      	str	r6, [r3, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d000      	beq.n	8003c44 <HAL_UART_Receive_IT+0x4c>
 8003c42:	e085      	b.n	8003d50 <HAL_UART_Receive_IT+0x158>
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	2a00      	cmp	r2, #0
 8003c48:	d14f      	bne.n	8003cea <HAL_UART_Receive_IT+0xf2>
 8003c4a:	225c      	movs	r2, #92	; 0x5c
 8003c4c:	21ff      	movs	r1, #255	; 0xff
 8003c4e:	5299      	strh	r1, [r3, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c50:	2284      	movs	r2, #132	; 0x84
 8003c52:	2100      	movs	r1, #0
 8003c54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c56:	3a04      	subs	r2, #4
 8003c58:	3122      	adds	r1, #34	; 0x22
 8003c5a:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c60:	2001      	movs	r0, #1
 8003c62:	f380 8810 	msr	PRIMASK, r0
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c66:	6819      	ldr	r1, [r3, #0]
 8003c68:	688a      	ldr	r2, [r1, #8]
 8003c6a:	4302      	orrs	r2, r0
 8003c6c:	608a      	str	r2, [r1, #8]
 8003c6e:	f384 8810 	msr	PRIMASK, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c72:	2280      	movs	r2, #128	; 0x80
 8003c74:	6899      	ldr	r1, [r3, #8]
 8003c76:	0152      	lsls	r2, r2, #5
 8003c78:	4291      	cmp	r1, r2
 8003c7a:	d056      	beq.n	8003d2a <HAL_UART_Receive_IT+0x132>
    huart->RxISR = UART_RxISR_8BIT;
 8003c7c:	4a45      	ldr	r2, [pc, #276]	; (8003d94 <HAL_UART_Receive_IT+0x19c>)
 8003c7e:	669a      	str	r2, [r3, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	2a00      	cmp	r2, #0
 8003c84:	d056      	beq.n	8003d34 <HAL_UART_Receive_IT+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c86:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	2390      	movs	r3, #144	; 0x90
 8003c94:	6810      	ldr	r0, [r2, #0]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	4303      	orrs	r3, r0
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	f381 8810 	msr	PRIMASK, r1
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ca0:	2000      	movs	r0, #0
}
 8003ca2:	e000      	b.n	8003ca6 <HAL_UART_Receive_IT+0xae>
      return HAL_ERROR;
 8003ca4:	2001      	movs	r0, #1
}
 8003ca6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8003ca8:	2002      	movs	r0, #2
 8003caa:	e7fc      	b.n	8003ca6 <HAL_UART_Receive_IT+0xae>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cac:	691c      	ldr	r4, [r3, #16]
 8003cae:	2c00      	cmp	r4, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_UART_Receive_IT+0xc0>
      return HAL_ERROR;
 8003cb2:	2001      	movs	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8003cb4:	07cd      	lsls	r5, r1, #31
 8003cb6:	d4f6      	bmi.n	8003ca6 <HAL_UART_Receive_IT+0xae>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb8:	2500      	movs	r5, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	4e34      	ldr	r6, [pc, #208]	; (8003d90 <HAL_UART_Receive_IT+0x198>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cbe:	661d      	str	r5, [r3, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003cc0:	42b0      	cmp	r0, r6
 8003cc2:	d057      	beq.n	8003d74 <HAL_UART_Receive_IT+0x17c>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cc4:	6845      	ldr	r5, [r0, #4]
 8003cc6:	2080      	movs	r0, #128	; 0x80
 8003cc8:	002e      	movs	r6, r5
 8003cca:	0400      	lsls	r0, r0, #16
 8003ccc:	4006      	ands	r6, r0
 8003cce:	4205      	tst	r5, r0
 8003cd0:	d10f      	bne.n	8003cf2 <HAL_UART_Receive_IT+0xfa>
  huart->pRxBuffPtr  = pData;
 8003cd2:	6559      	str	r1, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003cd4:	2158      	movs	r1, #88	; 0x58
 8003cd6:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003cd8:	3102      	adds	r1, #2
 8003cda:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003cdc:	669e      	str	r6, [r3, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 8003cde:	2c00      	cmp	r4, #0
 8003ce0:	d1b3      	bne.n	8003c4a <HAL_UART_Receive_IT+0x52>
 8003ce2:	225c      	movs	r2, #92	; 0x5c
 8003ce4:	492c      	ldr	r1, [pc, #176]	; (8003d98 <HAL_UART_Receive_IT+0x1a0>)
 8003ce6:	5299      	strh	r1, [r3, r2]
 8003ce8:	e7b2      	b.n	8003c50 <HAL_UART_Receive_IT+0x58>
 8003cea:	225c      	movs	r2, #92	; 0x5c
 8003cec:	217f      	movs	r1, #127	; 0x7f
 8003cee:	5299      	strh	r1, [r3, r2]
 8003cf0:	e7ae      	b.n	8003c50 <HAL_UART_Receive_IT+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cfc:	2080      	movs	r0, #128	; 0x80
 8003cfe:	681c      	ldr	r4, [r3, #0]
 8003d00:	04c0      	lsls	r0, r0, #19
 8003d02:	6826      	ldr	r6, [r4, #0]
 8003d04:	4330      	orrs	r0, r6
 8003d06:	6020      	str	r0, [r4, #0]
 8003d08:	f385 8810 	msr	PRIMASK, r5
  huart->pRxBuffPtr  = pData;
 8003d0c:	6559      	str	r1, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003d0e:	2158      	movs	r1, #88	; 0x58
  UART_MASK_COMPUTATION(huart);
 8003d10:	6898      	ldr	r0, [r3, #8]
  huart->RxXferSize  = Size;
 8003d12:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003d14:	3102      	adds	r1, #2
 8003d16:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003d18:	2200      	movs	r2, #0
 8003d1a:	669a      	str	r2, [r3, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	0152      	lsls	r2, r2, #5
 8003d20:	4290      	cmp	r0, r2
 8003d22:	d000      	beq.n	8003d26 <HAL_UART_Receive_IT+0x12e>
 8003d24:	e78b      	b.n	8003c3e <HAL_UART_Receive_IT+0x46>
 8003d26:	691c      	ldr	r4, [r3, #16]
 8003d28:	e7d9      	b.n	8003cde <HAL_UART_Receive_IT+0xe6>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	2a00      	cmp	r2, #0
 8003d2e:	d11e      	bne.n	8003d6e <HAL_UART_Receive_IT+0x176>
 8003d30:	4a1a      	ldr	r2, [pc, #104]	; (8003d9c <HAL_UART_Receive_IT+0x1a4>)
 8003d32:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d34:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003d3e:	2020      	movs	r0, #32
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	6813      	ldr	r3, [r2, #0]
 8003d44:	4303      	orrs	r3, r0
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	f381 8810 	msr	PRIMASK, r1
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d4c:	2000      	movs	r0, #0
}
 8003d4e:	e7aa      	b.n	8003ca6 <HAL_UART_Receive_IT+0xae>
  UART_MASK_COMPUTATION(huart);
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	0552      	lsls	r2, r2, #21
 8003d54:	4290      	cmp	r0, r2
 8003d56:	d014      	beq.n	8003d82 <HAL_UART_Receive_IT+0x18a>
 8003d58:	225c      	movs	r2, #92	; 0x5c
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5299      	strh	r1, [r3, r2]
 8003d5e:	e777      	b.n	8003c50 <HAL_UART_Receive_IT+0x58>
  huart->pRxBuffPtr  = pData;
 8003d60:	6559      	str	r1, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003d62:	2158      	movs	r1, #88	; 0x58
 8003d64:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003d66:	3102      	adds	r1, #2
 8003d68:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003d6a:	669d      	str	r5, [r3, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 8003d6c:	e767      	b.n	8003c3e <HAL_UART_Receive_IT+0x46>
    huart->RxISR = UART_RxISR_8BIT;
 8003d6e:	4a09      	ldr	r2, [pc, #36]	; (8003d94 <HAL_UART_Receive_IT+0x19c>)
 8003d70:	669a      	str	r2, [r3, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d72:	e788      	b.n	8003c86 <HAL_UART_Receive_IT+0x8e>
  huart->pRxBuffPtr  = pData;
 8003d74:	6559      	str	r1, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003d76:	2158      	movs	r1, #88	; 0x58
 8003d78:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003d7a:	3102      	adds	r1, #2
 8003d7c:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003d7e:	669d      	str	r5, [r3, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 8003d80:	e7ad      	b.n	8003cde <HAL_UART_Receive_IT+0xe6>
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	2a00      	cmp	r2, #0
 8003d86:	d0b0      	beq.n	8003cea <HAL_UART_Receive_IT+0xf2>
 8003d88:	225c      	movs	r2, #92	; 0x5c
 8003d8a:	213f      	movs	r1, #63	; 0x3f
 8003d8c:	5299      	strh	r1, [r3, r2]
 8003d8e:	e75f      	b.n	8003c50 <HAL_UART_Receive_IT+0x58>
 8003d90:	40004800 	.word	0x40004800
 8003d94:	080041f9 	.word	0x080041f9
 8003d98:	000001ff 	.word	0x000001ff
 8003d9c:	080041b9 	.word	0x080041b9

08003da0 <HAL_UART_TxCpltCallback>:
 8003da0:	4770      	bx	lr
 8003da2:	46c0      	nop			; (mov r8, r8)

08003da4 <HAL_UART_ErrorCallback>:
 8003da4:	4770      	bx	lr
 8003da6:	46c0      	nop			; (mov r8, r8)

08003da8 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	225a      	movs	r2, #90	; 0x5a
{
 8003dac:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dae:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003db0:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8003db2:	3a08      	subs	r2, #8
 8003db4:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003db6:	f7ff fff5 	bl	8003da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dba:	bd10      	pop	{r4, pc}

08003dbc <HAL_UARTEx_RxEventCallback>:
}
 8003dbc:	4770      	bx	lr
 8003dbe:	46c0      	nop			; (mov r8, r8)

08003dc0 <HAL_UART_IRQHandler>:
{
 8003dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc2:	46d6      	mov	lr, sl
 8003dc4:	464f      	mov	r7, r9
 8003dc6:	4646      	mov	r6, r8
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003dc8:	6802      	ldr	r2, [r0, #0]
{
 8003dca:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003dcc:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003dce:	48b0      	ldr	r0, [pc, #704]	; (8004090 <HAL_UART_IRQHandler+0x2d0>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dd0:	6811      	ldr	r1, [r2, #0]
{
 8003dd2:	b5c0      	push	{r6, r7, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dd4:	6895      	ldr	r5, [r2, #8]
  if (errorflags == 0U)
 8003dd6:	4203      	tst	r3, r0
 8003dd8:	d151      	bne.n	8003e7e <HAL_UART_IRQHandler+0xbe>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dda:	2020      	movs	r0, #32
 8003ddc:	4218      	tst	r0, r3
 8003dde:	d002      	beq.n	8003de6 <HAL_UART_IRQHandler+0x26>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003de0:	4208      	tst	r0, r1
 8003de2:	d000      	beq.n	8003de6 <HAL_UART_IRQHandler+0x26>
 8003de4:	e0ea      	b.n	8003fbc <HAL_UART_IRQHandler+0x1fc>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003de8:	2801      	cmp	r0, #1
 8003dea:	d01c      	beq.n	8003e26 <HAL_UART_IRQHandler+0x66>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003dec:	2080      	movs	r0, #128	; 0x80
 8003dee:	0340      	lsls	r0, r0, #13
 8003df0:	4203      	tst	r3, r0
 8003df2:	d002      	beq.n	8003dfa <HAL_UART_IRQHandler+0x3a>
 8003df4:	026d      	lsls	r5, r5, #9
 8003df6:	d500      	bpl.n	8003dfa <HAL_UART_IRQHandler+0x3a>
 8003df8:	e0e5      	b.n	8003fc6 <HAL_UART_IRQHandler+0x206>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003dfa:	2280      	movs	r2, #128	; 0x80
 8003dfc:	421a      	tst	r2, r3
 8003dfe:	d10a      	bne.n	8003e16 <HAL_UART_IRQHandler+0x56>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e00:	2240      	movs	r2, #64	; 0x40
 8003e02:	421a      	tst	r2, r3
 8003e04:	d002      	beq.n	8003e0c <HAL_UART_IRQHandler+0x4c>
 8003e06:	420a      	tst	r2, r1
 8003e08:	d000      	beq.n	8003e0c <HAL_UART_IRQHandler+0x4c>
 8003e0a:	e0e5      	b.n	8003fd8 <HAL_UART_IRQHandler+0x218>
}
 8003e0c:	bce0      	pop	{r5, r6, r7}
 8003e0e:	46ba      	mov	sl, r7
 8003e10:	46b1      	mov	r9, r6
 8003e12:	46a8      	mov	r8, r5
 8003e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e16:	420a      	tst	r2, r1
 8003e18:	d0f2      	beq.n	8003e00 <HAL_UART_IRQHandler+0x40>
    if (huart->TxISR != NULL)
 8003e1a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f5      	beq.n	8003e0c <HAL_UART_IRQHandler+0x4c>
      huart->TxISR(huart);
 8003e20:	0020      	movs	r0, r4
 8003e22:	4798      	blx	r3
 8003e24:	e7f2      	b.n	8003e0c <HAL_UART_IRQHandler+0x4c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e26:	2610      	movs	r6, #16
 8003e28:	421e      	tst	r6, r3
 8003e2a:	d0df      	beq.n	8003dec <HAL_UART_IRQHandler+0x2c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e2c:	420e      	tst	r6, r1
 8003e2e:	d0dd      	beq.n	8003dec <HAL_UART_IRQHandler+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	2340      	movs	r3, #64	; 0x40
 8003e32:	001d      	movs	r5, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e34:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e36:	6892      	ldr	r2, [r2, #8]
 8003e38:	4015      	ands	r5, r2
 8003e3a:	4213      	tst	r3, r2
 8003e3c:	d100      	bne.n	8003e40 <HAL_UART_IRQHandler+0x80>
 8003e3e:	e0e5      	b.n	800400c <HAL_UART_IRQHandler+0x24c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e40:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003e42:	6815      	ldr	r5, [r2, #0]
 8003e44:	686a      	ldr	r2, [r5, #4]
 8003e46:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003e48:	2a00      	cmp	r2, #0
 8003e4a:	d0df      	beq.n	8003e0c <HAL_UART_IRQHandler+0x4c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e4c:	2158      	movs	r1, #88	; 0x58
 8003e4e:	468a      	mov	sl, r1
 8003e50:	5a61      	ldrh	r1, [r4, r1]
 8003e52:	4291      	cmp	r1, r2
 8003e54:	d9da      	bls.n	8003e0c <HAL_UART_IRQHandler+0x4c>
        huart->RxXferCount = nb_remaining_rx_data;
 8003e56:	275a      	movs	r7, #90	; 0x5a
 8003e58:	53e2      	strh	r2, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	0017      	movs	r7, r2
 8003e5e:	682d      	ldr	r5, [r5, #0]
 8003e60:	402f      	ands	r7, r5
 8003e62:	46bc      	mov	ip, r7
 8003e64:	422a      	tst	r2, r5
 8003e66:	d100      	bne.n	8003e6a <HAL_UART_IRQHandler+0xaa>
 8003e68:	e11a      	b.n	80040a0 <HAL_UART_IRQHandler+0x2e0>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e6e:	3358      	adds	r3, #88	; 0x58
 8003e70:	5ae3      	ldrh	r3, [r4, r3]
 8003e72:	0020      	movs	r0, r4
 8003e74:	1ac9      	subs	r1, r1, r3
 8003e76:	b289      	uxth	r1, r1
 8003e78:	f7ff ffa0 	bl	8003dbc <HAL_UARTEx_RxEventCallback>
 8003e7c:	e7c6      	b.n	8003e0c <HAL_UART_IRQHandler+0x4c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e7e:	2601      	movs	r6, #1
 8003e80:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e82:	4884      	ldr	r0, [pc, #528]	; (8004094 <HAL_UART_IRQHandler+0x2d4>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e84:	402f      	ands	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e86:	4008      	ands	r0, r1
 8003e88:	4338      	orrs	r0, r7
 8003e8a:	d0ac      	beq.n	8003de6 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e8c:	421e      	tst	r6, r3
 8003e8e:	d006      	beq.n	8003e9e <HAL_UART_IRQHandler+0xde>
 8003e90:	05c8      	lsls	r0, r1, #23
 8003e92:	d504      	bpl.n	8003e9e <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e94:	2584      	movs	r5, #132	; 0x84
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e96:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e98:	5960      	ldr	r0, [r4, r5]
 8003e9a:	4306      	orrs	r6, r0
 8003e9c:	5166      	str	r6, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e9e:	2002      	movs	r0, #2
 8003ea0:	4218      	tst	r0, r3
 8003ea2:	d100      	bne.n	8003ea6 <HAL_UART_IRQHandler+0xe6>
 8003ea4:	e084      	b.n	8003fb0 <HAL_UART_IRQHandler+0x1f0>
 8003ea6:	2f00      	cmp	r7, #0
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x108>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eaa:	2684      	movs	r6, #132	; 0x84
 8003eac:	2504      	movs	r5, #4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003eae:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eb0:	59a0      	ldr	r0, [r4, r6]
 8003eb2:	4328      	orrs	r0, r5
 8003eb4:	51a0      	str	r0, [r4, r6]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003eb6:	421d      	tst	r5, r3
 8003eb8:	d006      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003eba:	2004      	movs	r0, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ebc:	2584      	movs	r5, #132	; 0x84
 8003ebe:	2602      	movs	r6, #2
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ec0:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ec2:	5960      	ldr	r0, [r4, r5]
 8003ec4:	4330      	orrs	r0, r6
 8003ec6:	5160      	str	r0, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ec8:	2508      	movs	r5, #8
 8003eca:	421d      	tst	r5, r3
 8003ecc:	d008      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ece:	2020      	movs	r0, #32
 8003ed0:	4008      	ands	r0, r1
 8003ed2:	4307      	orrs	r7, r0
 8003ed4:	d004      	beq.n	8003ee0 <HAL_UART_IRQHandler+0x120>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ed6:	2684      	movs	r6, #132	; 0x84
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ed8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eda:	59a0      	ldr	r0, [r4, r6]
 8003edc:	4305      	orrs	r5, r0
 8003ede:	51a5      	str	r5, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ee0:	2080      	movs	r0, #128	; 0x80
 8003ee2:	0100      	lsls	r0, r0, #4
 8003ee4:	4203      	tst	r3, r0
 8003ee6:	d007      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x138>
 8003ee8:	014d      	lsls	r5, r1, #5
 8003eea:	d505      	bpl.n	8003ef8 <HAL_UART_IRQHandler+0x138>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003eec:	2584      	movs	r5, #132	; 0x84
 8003eee:	2620      	movs	r6, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ef0:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ef2:	5960      	ldr	r0, [r4, r5]
 8003ef4:	4330      	orrs	r0, r6
 8003ef6:	5160      	str	r0, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ef8:	2084      	movs	r0, #132	; 0x84
 8003efa:	5820      	ldr	r0, [r4, r0]
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d100      	bne.n	8003f02 <HAL_UART_IRQHandler+0x142>
 8003f00:	e784      	b.n	8003e0c <HAL_UART_IRQHandler+0x4c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f02:	2020      	movs	r0, #32
 8003f04:	4218      	tst	r0, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f08:	4208      	tst	r0, r1
 8003f0a:	d178      	bne.n	8003ffe <HAL_UART_IRQHandler+0x23e>
      errorcode = huart->ErrorCode;
 8003f0c:	2684      	movs	r6, #132	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f0e:	2540      	movs	r5, #64	; 0x40
      errorcode = huart->ErrorCode;
 8003f10:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f12:	6893      	ldr	r3, [r2, #8]
 8003f14:	401d      	ands	r5, r3
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f16:	2328      	movs	r3, #40	; 0x28
 8003f18:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f1a:	431d      	orrs	r5, r3
 8003f1c:	d100      	bne.n	8003f20 <HAL_UART_IRQHandler+0x160>
 8003f1e:	e0b2      	b.n	8004086 <HAL_UART_IRQHandler+0x2c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f20:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f24:	2201      	movs	r2, #1
 8003f26:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2a:	6821      	ldr	r1, [r4, #0]
 8003f2c:	4d5a      	ldr	r5, [pc, #360]	; (8004098 <HAL_UART_IRQHandler+0x2d8>)
 8003f2e:	680b      	ldr	r3, [r1, #0]
 8003f30:	402b      	ands	r3, r5
 8003f32:	600b      	str	r3, [r1, #0]
 8003f34:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f38:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f40:	6821      	ldr	r1, [r4, #0]
 8003f42:	688b      	ldr	r3, [r1, #8]
 8003f44:	4393      	bics	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]
 8003f48:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f4c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d10a      	bne.n	8003f68 <HAL_UART_IRQHandler+0x1a8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f52:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f56:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f5a:	2010      	movs	r0, #16
 8003f5c:	6822      	ldr	r2, [r4, #0]
 8003f5e:	6813      	ldr	r3, [r2, #0]
 8003f60:	4383      	bics	r3, r0
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 8003f72:	66a3      	str	r3, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	3220      	adds	r2, #32
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	421a      	tst	r2, r3
 8003f7c:	d028      	beq.n	8003fd0 <HAL_UART_IRQHandler+0x210>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f82:	2301      	movs	r3, #1
 8003f84:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f88:	6821      	ldr	r1, [r4, #0]
 8003f8a:	688b      	ldr	r3, [r1, #8]
 8003f8c:	4393      	bics	r3, r2
 8003f8e:	608b      	str	r3, [r1, #8]
 8003f90:	f380 8810 	msr	PRIMASK, r0
          if (huart->hdmarx != NULL)
 8003f94:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d01a      	beq.n	8003fd0 <HAL_UART_IRQHandler+0x210>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f9a:	4b40      	ldr	r3, [pc, #256]	; (800409c <HAL_UART_IRQHandler+0x2dc>)
 8003f9c:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f9e:	f7fe fb3b 	bl	8002618 <HAL_DMA_Abort_IT>
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	d100      	bne.n	8003fa8 <HAL_UART_IRQHandler+0x1e8>
 8003fa6:	e731      	b.n	8003e0c <HAL_UART_IRQHandler+0x4c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fa8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003faa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003fac:	4798      	blx	r3
 8003fae:	e72d      	b.n	8003e0c <HAL_UART_IRQHandler+0x4c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fb0:	0758      	lsls	r0, r3, #29
 8003fb2:	d589      	bpl.n	8003ec8 <HAL_UART_IRQHandler+0x108>
 8003fb4:	2f00      	cmp	r7, #0
 8003fb6:	d000      	beq.n	8003fba <HAL_UART_IRQHandler+0x1fa>
 8003fb8:	e77f      	b.n	8003eba <HAL_UART_IRQHandler+0xfa>
 8003fba:	e785      	b.n	8003ec8 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8003fbc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d000      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x204>
 8003fc2:	e72d      	b.n	8003e20 <HAL_UART_IRQHandler+0x60>
 8003fc4:	e722      	b.n	8003e0c <HAL_UART_IRQHandler+0x4c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fc6:	6210      	str	r0, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003fc8:	0020      	movs	r0, r4
 8003fca:	f000 fc45 	bl	8004858 <HAL_UARTEx_WakeupCallback>
    return;
 8003fce:	e71d      	b.n	8003e0c <HAL_UART_IRQHandler+0x4c>
            HAL_UART_ErrorCallback(huart);
 8003fd0:	0020      	movs	r0, r4
 8003fd2:	f7ff fee7 	bl	8003da4 <HAL_UART_ErrorCallback>
 8003fd6:	e719      	b.n	8003e0c <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fe2:	6821      	ldr	r1, [r4, #0]
 8003fe4:	680b      	ldr	r3, [r1, #0]
 8003fe6:	4393      	bics	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
 8003fea:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fee:	2320      	movs	r3, #32
 8003ff0:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ff2:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ff4:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8003ff6:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 8003ff8:	f7ff fed2 	bl	8003da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ffc:	e706      	b.n	8003e0c <HAL_UART_IRQHandler+0x4c>
        if (huart->RxISR != NULL)
 8003ffe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004000:	2b00      	cmp	r3, #0
 8004002:	d083      	beq.n	8003f0c <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8004004:	0020      	movs	r0, r4
 8004006:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004008:	6822      	ldr	r2, [r4, #0]
 800400a:	e77f      	b.n	8003f0c <HAL_UART_IRQHandler+0x14c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800400c:	225a      	movs	r2, #90	; 0x5a
 800400e:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8004010:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004012:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8004014:	2a00      	cmp	r2, #0
 8004016:	d100      	bne.n	800401a <HAL_UART_IRQHandler+0x25a>
 8004018:	e6f8      	b.n	8003e0c <HAL_UART_IRQHandler+0x4c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800401a:	2258      	movs	r2, #88	; 0x58
 800401c:	5aa1      	ldrh	r1, [r4, r2]
 800401e:	1ac9      	subs	r1, r1, r3
 8004020:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004022:	2900      	cmp	r1, #0
 8004024:	d100      	bne.n	8004028 <HAL_UART_IRQHandler+0x268>
 8004026:	e6f1      	b.n	8003e0c <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004028:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402c:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	4699      	mov	r9, r3
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4698      	mov	r8, r3
 8004038:	4642      	mov	r2, r8
 800403a:	4b17      	ldr	r3, [pc, #92]	; (8004098 <HAL_UART_IRQHandler+0x2d8>)
 800403c:	401a      	ands	r2, r3
 800403e:	0013      	movs	r3, r2
 8004040:	464a      	mov	r2, r9
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004048:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404c:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004050:	6822      	ldr	r2, [r4, #0]
 8004052:	6893      	ldr	r3, [r2, #8]
 8004054:	4383      	bics	r3, r0
 8004056:	6093      	str	r3, [r2, #8]
 8004058:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	2220      	movs	r2, #32
 8004060:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004062:	6625      	str	r5, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8004064:	66a5      	str	r5, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004066:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406e:	6822      	ldr	r2, [r4, #0]
 8004070:	6813      	ldr	r3, [r2, #0]
 8004072:	43b3      	bics	r3, r6
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800407a:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800407c:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800407e:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004080:	f7ff fe9c 	bl	8003dbc <HAL_UARTEx_RxEventCallback>
 8004084:	e6c2      	b.n	8003e0c <HAL_UART_IRQHandler+0x4c>
        HAL_UART_ErrorCallback(huart);
 8004086:	0020      	movs	r0, r4
 8004088:	f7ff fe8c 	bl	8003da4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408c:	51a5      	str	r5, [r4, r6]
 800408e:	e6bd      	b.n	8003e0c <HAL_UART_IRQHandler+0x4c>
 8004090:	0000080f 	.word	0x0000080f
 8004094:	04000120 	.word	0x04000120
 8004098:	fffffedf 	.word	0xfffffedf
 800409c:	08003da9 	.word	0x08003da9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a0:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a4:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040a8:	6825      	ldr	r5, [r4, #0]
 80040aa:	4f17      	ldr	r7, [pc, #92]	; (8004108 <HAL_UART_IRQHandler+0x348>)
 80040ac:	6829      	ldr	r1, [r5, #0]
 80040ae:	4039      	ands	r1, r7
 80040b0:	6029      	str	r1, [r5, #0]
 80040b2:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040b6:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ba:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040be:	6825      	ldr	r5, [r4, #0]
 80040c0:	68a9      	ldr	r1, [r5, #8]
 80040c2:	4381      	bics	r1, r0
 80040c4:	60a9      	str	r1, [r5, #8]
 80040c6:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ca:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ce:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d2:	6825      	ldr	r5, [r4, #0]
 80040d4:	68a9      	ldr	r1, [r5, #8]
 80040d6:	4399      	bics	r1, r3
 80040d8:	60a9      	str	r1, [r5, #8]
 80040da:	f388 8810 	msr	PRIMASK, r8
          huart->RxState = HAL_UART_STATE_READY;
 80040de:	3340      	adds	r3, #64	; 0x40
 80040e0:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	4663      	mov	r3, ip
 80040e4:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ea:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ee:	6822      	ldr	r2, [r4, #0]
 80040f0:	6813      	ldr	r3, [r2, #0]
 80040f2:	43b3      	bics	r3, r6
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040fa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80040fc:	f7fe fa6a 	bl	80025d4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004100:	4653      	mov	r3, sl
 8004102:	5ae1      	ldrh	r1, [r4, r3]
 8004104:	e6b1      	b.n	8003e6a <HAL_UART_IRQHandler+0xaa>
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	fffffeff 	.word	0xfffffeff

0800410c <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 800410c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	2301      	movs	r3, #1
 8004114:	f383 8810 	msr	PRIMASK, r3
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004118:	6801      	ldr	r1, [r0, #0]
 800411a:	4c24      	ldr	r4, [pc, #144]	; (80041ac <UART_RxISR_16BIT.part.0+0xa0>)
 800411c:	680a      	ldr	r2, [r1, #0]
 800411e:	4022      	ands	r2, r4
 8004120:	600a      	str	r2, [r1, #0]
 8004122:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004126:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412a:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412e:	6801      	ldr	r1, [r0, #0]
 8004130:	688a      	ldr	r2, [r1, #8]
 8004132:	439a      	bics	r2, r3
 8004134:	608a      	str	r2, [r1, #8]
 8004136:	f38c 8810 	msr	PRIMASK, ip

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800413a:	2280      	movs	r2, #128	; 0x80
 800413c:	2120      	movs	r1, #32
 800413e:	5081      	str	r1, [r0, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004140:	2200      	movs	r2, #0

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004142:	491b      	ldr	r1, [pc, #108]	; (80041b0 <UART_RxISR_16BIT.part.0+0xa4>)
      huart->RxISR = NULL;
 8004144:	6682      	str	r2, [r0, #104]	; 0x68
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004146:	6642      	str	r2, [r0, #100]	; 0x64
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004148:	6802      	ldr	r2, [r0, #0]
 800414a:	428a      	cmp	r2, r1
 800414c:	d002      	beq.n	8004154 <UART_RxISR_16BIT.part.0+0x48>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800414e:	6852      	ldr	r2, [r2, #4]
 8004150:	0212      	lsls	r2, r2, #8
 8004152:	d418      	bmi.n	8004186 <UART_RxISR_16BIT.part.0+0x7a>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004154:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004156:	2b01      	cmp	r3, #1
 8004158:	d123      	bne.n	80041a2 <UART_RxISR_16BIT.part.0+0x96>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415a:	2200      	movs	r2, #0
 800415c:	6602      	str	r2, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800415e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004162:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004166:	6801      	ldr	r1, [r0, #0]
 8004168:	3210      	adds	r2, #16
 800416a:	680b      	ldr	r3, [r1, #0]
 800416c:	4393      	bics	r3, r2
 800416e:	600b      	str	r3, [r1, #0]
 8004170:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004174:	6803      	ldr	r3, [r0, #0]
 8004176:	69d9      	ldr	r1, [r3, #28]
 8004178:	420a      	tst	r2, r1
 800417a:	d115      	bne.n	80041a8 <UART_RxISR_16BIT.part.0+0x9c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800417c:	2358      	movs	r3, #88	; 0x58
 800417e:	5ac1      	ldrh	r1, [r0, r3]
 8004180:	f7ff fe1c 	bl	8003dbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004184:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004186:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800418e:	6802      	ldr	r2, [r0, #0]
 8004190:	4c08      	ldr	r4, [pc, #32]	; (80041b4 <UART_RxISR_16BIT.part.0+0xa8>)
 8004192:	6813      	ldr	r3, [r2, #0]
 8004194:	4023      	ands	r3, r4
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	f381 8810 	msr	PRIMASK, r1
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800419c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d0db      	beq.n	800415a <UART_RxISR_16BIT.part.0+0x4e>
        HAL_UART_RxCpltCallback(huart);
 80041a2:	f7fd fe65 	bl	8001e70 <HAL_UART_RxCpltCallback>
}
 80041a6:	e7ed      	b.n	8004184 <UART_RxISR_16BIT.part.0+0x78>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041a8:	621a      	str	r2, [r3, #32]
 80041aa:	e7e7      	b.n	800417c <UART_RxISR_16BIT.part.0+0x70>
 80041ac:	fffffedf 	.word	0xfffffedf
 80041b0:	40004800 	.word	0x40004800
 80041b4:	fbffffff 	.word	0xfbffffff

080041b8 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041b8:	2380      	movs	r3, #128	; 0x80
 80041ba:	58c3      	ldr	r3, [r0, r3]
{
 80041bc:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041be:	2b22      	cmp	r3, #34	; 0x22
 80041c0:	d005      	beq.n	80041ce <UART_RxISR_16BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041c2:	2108      	movs	r1, #8
 80041c4:	6802      	ldr	r2, [r0, #0]
 80041c6:	6993      	ldr	r3, [r2, #24]
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6193      	str	r3, [r2, #24]
  }
}
 80041cc:	bd10      	pop	{r4, pc}
  uint16_t uhMask = huart->Mask;
 80041ce:	215c      	movs	r1, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041d0:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 80041d2:	5a41      	ldrh	r1, [r0, r1]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80041d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 80041d8:	400a      	ands	r2, r1
 80041da:	801a      	strh	r2, [r3, #0]
    huart->RxXferCount--;
 80041dc:	225a      	movs	r2, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 80041de:	3302      	adds	r3, #2
 80041e0:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80041e2:	5a83      	ldrh	r3, [r0, r2]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 80041ea:	5a83      	ldrh	r3, [r0, r2]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ed      	bne.n	80041cc <UART_RxISR_16BIT+0x14>
 80041f0:	f7ff ff8c 	bl	800410c <UART_RxISR_16BIT.part.0>
 80041f4:	e7ea      	b.n	80041cc <UART_RxISR_16BIT+0x14>
 80041f6:	46c0      	nop			; (mov r8, r8)

080041f8 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	58c3      	ldr	r3, [r0, r3]
{
 80041fc:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041fe:	2b22      	cmp	r3, #34	; 0x22
 8004200:	d005      	beq.n	800420e <UART_RxISR_8BIT+0x16>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004202:	2108      	movs	r1, #8
 8004204:	6802      	ldr	r2, [r0, #0]
 8004206:	6993      	ldr	r3, [r2, #24]
 8004208:	430b      	orrs	r3, r1
 800420a:	6193      	str	r3, [r2, #24]
}
 800420c:	bd10      	pop	{r4, pc}
  uint16_t uhMask = huart->Mask;
 800420e:	225c      	movs	r2, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004210:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004212:	5a82      	ldrh	r2, [r0, r2]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004216:	4013      	ands	r3, r2
 8004218:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800421a:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 800421c:	225a      	movs	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 800421e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004220:	3301      	adds	r3, #1
 8004222:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8004224:	5a83      	ldrh	r3, [r0, r2]
 8004226:	3b01      	subs	r3, #1
 8004228:	b29b      	uxth	r3, r3
 800422a:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 800422c:	5a83      	ldrh	r3, [r0, r2]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1ec      	bne.n	800420c <UART_RxISR_8BIT+0x14>
 8004232:	f7ff ff6b 	bl	800410c <UART_RxISR_16BIT.part.0>
 8004236:	e7e9      	b.n	800420c <UART_RxISR_8BIT+0x14>

08004238 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004238:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800423a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800423c:	07da      	lsls	r2, r3, #31
 800423e:	d506      	bpl.n	800424e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004240:	6801      	ldr	r1, [r0, #0]
 8004242:	4c28      	ldr	r4, [pc, #160]	; (80042e4 <UART_AdvFeatureConfig+0xac>)
 8004244:	684a      	ldr	r2, [r1, #4]
 8004246:	4022      	ands	r2, r4
 8004248:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800424a:	4322      	orrs	r2, r4
 800424c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800424e:	079a      	lsls	r2, r3, #30
 8004250:	d506      	bpl.n	8004260 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004252:	6801      	ldr	r1, [r0, #0]
 8004254:	4c24      	ldr	r4, [pc, #144]	; (80042e8 <UART_AdvFeatureConfig+0xb0>)
 8004256:	684a      	ldr	r2, [r1, #4]
 8004258:	4022      	ands	r2, r4
 800425a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800425c:	4322      	orrs	r2, r4
 800425e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004260:	075a      	lsls	r2, r3, #29
 8004262:	d506      	bpl.n	8004272 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004264:	6801      	ldr	r1, [r0, #0]
 8004266:	4c21      	ldr	r4, [pc, #132]	; (80042ec <UART_AdvFeatureConfig+0xb4>)
 8004268:	684a      	ldr	r2, [r1, #4]
 800426a:	4022      	ands	r2, r4
 800426c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800426e:	4322      	orrs	r2, r4
 8004270:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004272:	071a      	lsls	r2, r3, #28
 8004274:	d506      	bpl.n	8004284 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004276:	6801      	ldr	r1, [r0, #0]
 8004278:	4c1d      	ldr	r4, [pc, #116]	; (80042f0 <UART_AdvFeatureConfig+0xb8>)
 800427a:	684a      	ldr	r2, [r1, #4]
 800427c:	4022      	ands	r2, r4
 800427e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004280:	4322      	orrs	r2, r4
 8004282:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004284:	06da      	lsls	r2, r3, #27
 8004286:	d506      	bpl.n	8004296 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004288:	6801      	ldr	r1, [r0, #0]
 800428a:	4c1a      	ldr	r4, [pc, #104]	; (80042f4 <UART_AdvFeatureConfig+0xbc>)
 800428c:	688a      	ldr	r2, [r1, #8]
 800428e:	4022      	ands	r2, r4
 8004290:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004292:	4322      	orrs	r2, r4
 8004294:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004296:	069a      	lsls	r2, r3, #26
 8004298:	d506      	bpl.n	80042a8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800429a:	6801      	ldr	r1, [r0, #0]
 800429c:	4c16      	ldr	r4, [pc, #88]	; (80042f8 <UART_AdvFeatureConfig+0xc0>)
 800429e:	688a      	ldr	r2, [r1, #8]
 80042a0:	4022      	ands	r2, r4
 80042a2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80042a4:	4322      	orrs	r2, r4
 80042a6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a8:	065a      	lsls	r2, r3, #25
 80042aa:	d50a      	bpl.n	80042c2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042ac:	6801      	ldr	r1, [r0, #0]
 80042ae:	4d13      	ldr	r5, [pc, #76]	; (80042fc <UART_AdvFeatureConfig+0xc4>)
 80042b0:	684a      	ldr	r2, [r1, #4]
 80042b2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80042b4:	402a      	ands	r2, r5
 80042b6:	4322      	orrs	r2, r4
 80042b8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ba:	2280      	movs	r2, #128	; 0x80
 80042bc:	0352      	lsls	r2, r2, #13
 80042be:	4294      	cmp	r4, r2
 80042c0:	d009      	beq.n	80042d6 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042c2:	061b      	lsls	r3, r3, #24
 80042c4:	d506      	bpl.n	80042d4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042c6:	6802      	ldr	r2, [r0, #0]
 80042c8:	490d      	ldr	r1, [pc, #52]	; (8004300 <UART_AdvFeatureConfig+0xc8>)
 80042ca:	6853      	ldr	r3, [r2, #4]
 80042cc:	400b      	ands	r3, r1
 80042ce:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6053      	str	r3, [r2, #4]
}
 80042d4:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d6:	684a      	ldr	r2, [r1, #4]
 80042d8:	4c0a      	ldr	r4, [pc, #40]	; (8004304 <UART_AdvFeatureConfig+0xcc>)
 80042da:	4022      	ands	r2, r4
 80042dc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80042de:	4322      	orrs	r2, r4
 80042e0:	604a      	str	r2, [r1, #4]
 80042e2:	e7ee      	b.n	80042c2 <UART_AdvFeatureConfig+0x8a>
 80042e4:	fffdffff 	.word	0xfffdffff
 80042e8:	fffeffff 	.word	0xfffeffff
 80042ec:	fffbffff 	.word	0xfffbffff
 80042f0:	ffff7fff 	.word	0xffff7fff
 80042f4:	ffffefff 	.word	0xffffefff
 80042f8:	ffffdfff 	.word	0xffffdfff
 80042fc:	ffefffff 	.word	0xffefffff
 8004300:	fff7ffff 	.word	0xfff7ffff
 8004304:	ff9fffff 	.word	0xff9fffff

08004308 <UART_CheckIdleState>:
{
 8004308:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430a:	2384      	movs	r3, #132	; 0x84
 800430c:	2200      	movs	r2, #0
{
 800430e:	46c6      	mov	lr, r8
 8004310:	0004      	movs	r4, r0
 8004312:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8004316:	f7fe f8df 	bl	80024d8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800431a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800431c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	0712      	lsls	r2, r2, #28
 8004322:	d40f      	bmi.n	8004344 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	0752      	lsls	r2, r2, #29
 8004328:	d43e      	bmi.n	80043a8 <UART_CheckIdleState+0xa0>
  huart->gState = HAL_UART_STATE_READY;
 800432a:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 800432c:	2280      	movs	r2, #128	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800432e:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004330:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004332:	2300      	movs	r3, #0
  return HAL_OK;
 8004334:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8004336:	3a08      	subs	r2, #8
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004338:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800433a:	6663      	str	r3, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 800433c:	54a3      	strb	r3, [r4, r2]
}
 800433e:	bc80      	pop	{r7}
 8004340:	46b8      	mov	r8, r7
 8004342:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	0292      	lsls	r2, r2, #10
 8004348:	d4ec      	bmi.n	8004324 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434a:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800434c:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800434e:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004350:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	04b6      	lsls	r6, r6, #18
 8004354:	e010      	b.n	8004378 <UART_CheckIdleState+0x70>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4217      	tst	r7, r2
 800435c:	d009      	beq.n	8004372 <UART_CheckIdleState+0x6a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800435e:	4641      	mov	r1, r8
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	4211      	tst	r1, r2
 8004364:	d15e      	bne.n	8004424 <UART_CheckIdleState+0x11c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004366:	2280      	movs	r2, #128	; 0x80
 8004368:	69d9      	ldr	r1, [r3, #28]
 800436a:	0112      	lsls	r2, r2, #4
 800436c:	4211      	tst	r1, r2
 800436e:	d000      	beq.n	8004372 <UART_CheckIdleState+0x6a>
 8004370:	e089      	b.n	8004486 <UART_CheckIdleState+0x17e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	0292      	lsls	r2, r2, #10
 8004376:	d4d5      	bmi.n	8004324 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004378:	f7fe f8ae 	bl	80024d8 <HAL_GetTick>
 800437c:	1b40      	subs	r0, r0, r5
 800437e:	42b0      	cmp	r0, r6
 8004380:	d3e9      	bcc.n	8004356 <UART_CheckIdleState+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004382:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004386:	2301      	movs	r3, #1
 8004388:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800438c:	2080      	movs	r0, #128	; 0x80
 800438e:	6822      	ldr	r2, [r4, #0]
 8004390:	6813      	ldr	r3, [r2, #0]
 8004392:	4383      	bics	r3, r0
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800439a:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 800439c:	2200      	movs	r2, #0
      huart->gState = HAL_UART_STATE_READY;
 800439e:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 80043a0:	3358      	adds	r3, #88	; 0x58
 80043a2:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 80043a4:	387d      	subs	r0, #125	; 0x7d
 80043a6:	e7ca      	b.n	800433e <UART_CheckIdleState+0x36>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	025b      	lsls	r3, r3, #9
 80043ac:	d4bd      	bmi.n	800432a <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043b0:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043b2:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043b4:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b6:	04b6      	lsls	r6, r6, #18
 80043b8:	e011      	b.n	80043de <UART_CheckIdleState+0xd6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4217      	tst	r7, r2
 80043c0:	d00a      	beq.n	80043d8 <UART_CheckIdleState+0xd0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043c2:	4641      	mov	r1, r8
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	4211      	tst	r1, r2
 80043c8:	d000      	beq.n	80043cc <UART_CheckIdleState+0xc4>
 80043ca:	e08c      	b.n	80044e6 <UART_CheckIdleState+0x1de>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043cc:	2280      	movs	r2, #128	; 0x80
 80043ce:	69d9      	ldr	r1, [r3, #28]
 80043d0:	0112      	lsls	r2, r2, #4
 80043d2:	4211      	tst	r1, r2
 80043d4:	d000      	beq.n	80043d8 <UART_CheckIdleState+0xd0>
 80043d6:	e0b7      	b.n	8004548 <UART_CheckIdleState+0x240>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	025b      	lsls	r3, r3, #9
 80043dc:	d4a5      	bmi.n	800432a <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043de:	f7fe f87b 	bl	80024d8 <HAL_GetTick>
 80043e2:	1b40      	subs	r0, r0, r5
 80043e4:	42b0      	cmp	r0, r6
 80043e6:	d3e8      	bcc.n	80043ba <UART_CheckIdleState+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ec:	2201      	movs	r2, #1
 80043ee:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f2:	6821      	ldr	r1, [r4, #0]
 80043f4:	4d6c      	ldr	r5, [pc, #432]	; (80045a8 <UART_CheckIdleState+0x2a0>)
 80043f6:	680b      	ldr	r3, [r1, #0]
 80043f8:	402b      	ands	r3, r5
 80043fa:	600b      	str	r3, [r1, #0]
 80043fc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004400:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004404:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004408:	6821      	ldr	r1, [r4, #0]
 800440a:	688b      	ldr	r3, [r1, #8]
 800440c:	4393      	bics	r3, r2
 800440e:	608b      	str	r3, [r1, #8]
 8004410:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	321f      	adds	r2, #31
 8004418:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 800441a:	2200      	movs	r2, #0
 800441c:	3b08      	subs	r3, #8
      return HAL_TIMEOUT;
 800441e:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8004420:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004422:	e78c      	b.n	800433e <UART_CheckIdleState+0x36>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004424:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004426:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442a:	2201      	movs	r2, #1
 800442c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004430:	6821      	ldr	r1, [r4, #0]
 8004432:	4d5d      	ldr	r5, [pc, #372]	; (80045a8 <UART_CheckIdleState+0x2a0>)
 8004434:	680b      	ldr	r3, [r1, #0]
 8004436:	402b      	ands	r3, r5
 8004438:	600b      	str	r3, [r1, #0]
 800443a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800443e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004442:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004446:	6821      	ldr	r1, [r4, #0]
 8004448:	688b      	ldr	r3, [r1, #8]
 800444a:	4393      	bics	r3, r2
 800444c:	608b      	str	r3, [r1, #8]
 800444e:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004452:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004454:	2b01      	cmp	r3, #1
 8004456:	d10a      	bne.n	800446e <UART_CheckIdleState+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004458:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004460:	2010      	movs	r0, #16
 8004462:	6822      	ldr	r2, [r4, #0]
 8004464:	6813      	ldr	r3, [r2, #0]
 8004466:	4383      	bics	r3, r0
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004472:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004474:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004476:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004478:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 800447c:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800447e:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8004480:	3a0c      	subs	r2, #12
 8004482:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8004484:	e77d      	b.n	8004382 <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004486:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004488:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448c:	2201      	movs	r2, #1
 800448e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004492:	6821      	ldr	r1, [r4, #0]
 8004494:	4d44      	ldr	r5, [pc, #272]	; (80045a8 <UART_CheckIdleState+0x2a0>)
 8004496:	680b      	ldr	r3, [r1, #0]
 8004498:	402b      	ands	r3, r5
 800449a:	600b      	str	r3, [r1, #0]
 800449c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a4:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a8:	6821      	ldr	r1, [r4, #0]
 80044aa:	688b      	ldr	r3, [r1, #8]
 80044ac:	4393      	bics	r3, r2
 80044ae:	608b      	str	r3, [r1, #8]
 80044b0:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d10a      	bne.n	80044d0 <UART_CheckIdleState+0x1c8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ba:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044be:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c2:	2010      	movs	r0, #16
 80044c4:	6822      	ldr	r2, [r4, #0]
 80044c6:	6813      	ldr	r3, [r2, #0]
 80044c8:	4383      	bics	r3, r0
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80044d0:	2220      	movs	r2, #32
 80044d2:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044d4:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80044d6:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d8:	2300      	movs	r3, #0
 80044da:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 80044dc:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044de:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 80044e0:	3258      	adds	r2, #88	; 0x58
 80044e2:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 80044e4:	e74d      	b.n	8004382 <UART_CheckIdleState+0x7a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044e6:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ec:	2201      	movs	r2, #1
 80044ee:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f2:	6821      	ldr	r1, [r4, #0]
 80044f4:	4d2c      	ldr	r5, [pc, #176]	; (80045a8 <UART_CheckIdleState+0x2a0>)
 80044f6:	680b      	ldr	r3, [r1, #0]
 80044f8:	402b      	ands	r3, r5
 80044fa:	600b      	str	r3, [r1, #0]
 80044fc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004500:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004504:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004508:	6821      	ldr	r1, [r4, #0]
 800450a:	688b      	ldr	r3, [r1, #8]
 800450c:	4393      	bics	r3, r2
 800450e:	608b      	str	r3, [r1, #8]
 8004510:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004514:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004516:	2b01      	cmp	r3, #1
 8004518:	d10a      	bne.n	8004530 <UART_CheckIdleState+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800451a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004522:	2010      	movs	r0, #16
 8004524:	6822      	ldr	r2, [r4, #0]
 8004526:	6813      	ldr	r3, [r2, #0]
 8004528:	4383      	bics	r3, r0
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004534:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004536:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004538:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800453a:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 800453e:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004540:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8004542:	3a0c      	subs	r2, #12
 8004544:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8004546:	e74f      	b.n	80043e8 <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004548:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800454a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454e:	2201      	movs	r2, #1
 8004550:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004554:	6821      	ldr	r1, [r4, #0]
 8004556:	4d14      	ldr	r5, [pc, #80]	; (80045a8 <UART_CheckIdleState+0x2a0>)
 8004558:	680b      	ldr	r3, [r1, #0]
 800455a:	402b      	ands	r3, r5
 800455c:	600b      	str	r3, [r1, #0]
 800455e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004562:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004566:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456a:	6821      	ldr	r1, [r4, #0]
 800456c:	688b      	ldr	r3, [r1, #8]
 800456e:	4393      	bics	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
 8004572:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004576:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004578:	2b01      	cmp	r3, #1
 800457a:	d10a      	bne.n	8004592 <UART_CheckIdleState+0x28a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004580:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004584:	2010      	movs	r0, #16
 8004586:	6822      	ldr	r2, [r4, #0]
 8004588:	6813      	ldr	r3, [r2, #0]
 800458a:	4383      	bics	r3, r0
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004592:	2220      	movs	r2, #32
 8004594:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004596:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004598:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459a:	2300      	movs	r3, #0
 800459c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 800459e:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045a0:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 80045a2:	3258      	adds	r2, #88	; 0x58
 80045a4:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 80045a6:	e71f      	b.n	80043e8 <UART_CheckIdleState+0xe0>
 80045a8:	fffffedf 	.word	0xfffffedf

080045ac <HAL_UART_Init>:
{
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80045b0:	d100      	bne.n	80045b4 <HAL_UART_Init+0x8>
 80045b2:	e0d3      	b.n	800475c <HAL_UART_Init+0x1b0>
  if (huart->gState == HAL_UART_STATE_RESET)
 80045b4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d057      	beq.n	800466a <HAL_UART_Init+0xbe>
  huart->gState = HAL_UART_STATE_BUSY;
 80045ba:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80045bc:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80045be:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80045c0:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045c2:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	438a      	bics	r2, r1
 80045c8:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ca:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045cc:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ce:	432a      	orrs	r2, r5
 80045d0:	6965      	ldr	r5, [r4, #20]
 80045d2:	69e1      	ldr	r1, [r4, #28]
 80045d4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045d6:	4d8c      	ldr	r5, [pc, #560]	; (8004808 <HAL_UART_Init+0x25c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045d8:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045da:	4028      	ands	r0, r5
 80045dc:	4302      	orrs	r2, r0
 80045de:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	488a      	ldr	r0, [pc, #552]	; (800480c <HAL_UART_Init+0x260>)
 80045e4:	4002      	ands	r2, r0
 80045e6:	68e0      	ldr	r0, [r4, #12]
 80045e8:	4302      	orrs	r2, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045ea:	4889      	ldr	r0, [pc, #548]	; (8004810 <HAL_UART_Init+0x264>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ec:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ee:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045f0:	4283      	cmp	r3, r0
 80045f2:	d03f      	beq.n	8004674 <HAL_UART_Init+0xc8>
    tmpreg |= huart->Init.OneBitSampling;
 80045f4:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045f6:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80045f8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045fa:	4d86      	ldr	r5, [pc, #536]	; (8004814 <HAL_UART_Init+0x268>)
 80045fc:	4028      	ands	r0, r5
 80045fe:	4302      	orrs	r2, r0
 8004600:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004602:	4a85      	ldr	r2, [pc, #532]	; (8004818 <HAL_UART_Init+0x26c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d008      	beq.n	800461a <HAL_UART_Init+0x6e>
 8004608:	4a84      	ldr	r2, [pc, #528]	; (800481c <HAL_UART_Init+0x270>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d100      	bne.n	8004610 <HAL_UART_Init+0x64>
 800460e:	e0a7      	b.n	8004760 <HAL_UART_Init+0x1b4>
  huart->RxISR = NULL;
 8004610:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004612:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8004614:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004616:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8004618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800461a:	4b81      	ldr	r3, [pc, #516]	; (8004820 <HAL_UART_Init+0x274>)
 800461c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800461e:	2303      	movs	r3, #3
 8004620:	4013      	ands	r3, r2
 8004622:	3b01      	subs	r3, #1
 8004624:	2b02      	cmp	r3, #2
 8004626:	d961      	bls.n	80046ec <HAL_UART_Init+0x140>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	4299      	cmp	r1, r3
 800462e:	d100      	bne.n	8004632 <HAL_UART_Init+0x86>
 8004630:	e0e3      	b.n	80047fa <HAL_UART_Init+0x24e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004632:	f7fe fd67 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8004636:	2800      	cmp	r0, #0
 8004638:	d177      	bne.n	800472a <HAL_UART_Init+0x17e>
  huart->RxISR = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800463e:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004642:	2b00      	cmp	r3, #0
 8004644:	d000      	beq.n	8004648 <HAL_UART_Init+0x9c>
 8004646:	e085      	b.n	8004754 <HAL_UART_Init+0x1a8>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	4976      	ldr	r1, [pc, #472]	; (8004824 <HAL_UART_Init+0x278>)
 800464c:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800464e:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004650:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004652:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004654:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	438a      	bics	r2, r1
 800465a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	3929      	subs	r1, #41	; 0x29
 8004660:	430a      	orrs	r2, r1
 8004662:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004664:	f7ff fe50 	bl	8004308 <UART_CheckIdleState>
 8004668:	e7d6      	b.n	8004618 <HAL_UART_Init+0x6c>
    huart->Lock = HAL_UNLOCKED;
 800466a:	2278      	movs	r2, #120	; 0x78
 800466c:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800466e:	f7fd fe7b 	bl	8002368 <HAL_UART_MspInit>
 8004672:	e7a2      	b.n	80045ba <HAL_UART_Init+0xe>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004674:	6899      	ldr	r1, [r3, #8]
 8004676:	4867      	ldr	r0, [pc, #412]	; (8004814 <HAL_UART_Init+0x268>)
 8004678:	4001      	ands	r1, r0
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800467e:	22c0      	movs	r2, #192	; 0xc0
 8004680:	2180      	movs	r1, #128	; 0x80
 8004682:	4867      	ldr	r0, [pc, #412]	; (8004820 <HAL_UART_Init+0x274>)
 8004684:	0112      	lsls	r2, r2, #4
 8004686:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004688:	0109      	lsls	r1, r1, #4
 800468a:	4013      	ands	r3, r2
 800468c:	428b      	cmp	r3, r1
 800468e:	d071      	beq.n	8004774 <HAL_UART_Init+0x1c8>
 8004690:	d80a      	bhi.n	80046a8 <HAL_UART_Init+0xfc>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d06b      	beq.n	800476e <HAL_UART_Init+0x1c2>
 8004696:	2280      	movs	r2, #128	; 0x80
 8004698:	00d2      	lsls	r2, r2, #3
 800469a:	4293      	cmp	r3, r2
 800469c:	d1b8      	bne.n	8004610 <HAL_UART_Init+0x64>
        pclk = HAL_RCC_GetSysClockFreq();
 800469e:	f7fe f8f3 	bl	8002888 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d0c9      	beq.n	800463a <HAL_UART_Init+0x8e>
 80046a6:	e003      	b.n	80046b0 <HAL_UART_Init+0x104>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d1b1      	bne.n	8004610 <HAL_UART_Init+0x64>
 80046ac:	2080      	movs	r0, #128	; 0x80
 80046ae:	0200      	lsls	r0, r0, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046b0:	6865      	ldr	r5, [r4, #4]
 80046b2:	006b      	lsls	r3, r5, #1
 80046b4:	195b      	adds	r3, r3, r5
 80046b6:	4283      	cmp	r3, r0
 80046b8:	d8aa      	bhi.n	8004610 <HAL_UART_Init+0x64>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046ba:	032b      	lsls	r3, r5, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046bc:	4298      	cmp	r0, r3
 80046be:	d8a7      	bhi.n	8004610 <HAL_UART_Init+0x64>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046c0:	2700      	movs	r7, #0
 80046c2:	0e03      	lsrs	r3, r0, #24
 80046c4:	0202      	lsls	r2, r0, #8
 80046c6:	086e      	lsrs	r6, r5, #1
 80046c8:	1992      	adds	r2, r2, r6
 80046ca:	417b      	adcs	r3, r7
 80046cc:	0010      	movs	r0, r2
 80046ce:	0019      	movs	r1, r3
 80046d0:	002a      	movs	r2, r5
 80046d2:	2300      	movs	r3, #0
 80046d4:	f7fb fdde 	bl	8000294 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046d8:	4b53      	ldr	r3, [pc, #332]	; (8004828 <HAL_UART_Init+0x27c>)
 80046da:	18c2      	adds	r2, r0, r3
 80046dc:	4b53      	ldr	r3, [pc, #332]	; (800482c <HAL_UART_Init+0x280>)
 80046de:	429a      	cmp	r2, r3
 80046e0:	d896      	bhi.n	8004610 <HAL_UART_Init+0x64>
          huart->Instance->BRR = usartdiv;
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 80046e6:	66a7      	str	r7, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80046e8:	66e7      	str	r7, [r4, #108]	; 0x6c
  return ret;
 80046ea:	e7a9      	b.n	8004640 <HAL_UART_Init+0x94>
 80046ec:	4a50      	ldr	r2, [pc, #320]	; (8004830 <HAL_UART_Init+0x284>)
 80046ee:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f0:	2280      	movs	r2, #128	; 0x80
 80046f2:	0212      	lsls	r2, r2, #8
 80046f4:	4291      	cmp	r1, r2
 80046f6:	d04c      	beq.n	8004792 <HAL_UART_Init+0x1e6>
    switch (clocksource)
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d900      	bls.n	80046fe <HAL_UART_Init+0x152>
 80046fc:	e788      	b.n	8004610 <HAL_UART_Init+0x64>
 80046fe:	4a4d      	ldr	r2, [pc, #308]	; (8004834 <HAL_UART_Init+0x288>)
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	58d3      	ldr	r3, [r2, r3]
 8004704:	469f      	mov	pc, r3
        pclk = HAL_RCC_GetPCLK1Freq();
 8004706:	f7fe fced 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
        break;
 800470a:	e794      	b.n	8004636 <HAL_UART_Init+0x8a>
        pclk = HAL_RCC_GetSysClockFreq();
 800470c:	f7fe f8bc 	bl	8002888 <HAL_RCC_GetSysClockFreq>
        break;
 8004710:	e791      	b.n	8004636 <HAL_UART_Init+0x8a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004712:	2010      	movs	r0, #16
 8004714:	4b42      	ldr	r3, [pc, #264]	; (8004820 <HAL_UART_Init+0x274>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800471a:	4243      	negs	r3, r0
 800471c:	4158      	adcs	r0, r3
 800471e:	4b46      	ldr	r3, [pc, #280]	; (8004838 <HAL_UART_Init+0x28c>)
 8004720:	4240      	negs	r0, r0
 8004722:	4018      	ands	r0, r3
 8004724:	4b45      	ldr	r3, [pc, #276]	; (800483c <HAL_UART_Init+0x290>)
 8004726:	469c      	mov	ip, r3
 8004728:	4460      	add	r0, ip
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800472a:	6863      	ldr	r3, [r4, #4]
 800472c:	6861      	ldr	r1, [r4, #4]
 800472e:	085b      	lsrs	r3, r3, #1
 8004730:	1818      	adds	r0, r3, r0
 8004732:	f7fb fce9 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004736:	0002      	movs	r2, r0
 8004738:	4b41      	ldr	r3, [pc, #260]	; (8004840 <HAL_UART_Init+0x294>)
 800473a:	3a10      	subs	r2, #16
 800473c:	429a      	cmp	r2, r3
 800473e:	d900      	bls.n	8004742 <HAL_UART_Init+0x196>
 8004740:	e766      	b.n	8004610 <HAL_UART_Init+0x64>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8004746:	2300      	movs	r3, #0
 8004748:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800474a:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800474c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800474e:	2b00      	cmp	r3, #0
 8004750:	d100      	bne.n	8004754 <HAL_UART_Init+0x1a8>
 8004752:	e779      	b.n	8004648 <HAL_UART_Init+0x9c>
    UART_AdvFeatureConfig(huart);
 8004754:	0020      	movs	r0, r4
 8004756:	f7ff fd6f 	bl	8004238 <UART_AdvFeatureConfig>
 800475a:	e775      	b.n	8004648 <HAL_UART_Init+0x9c>
    return HAL_ERROR;
 800475c:	2001      	movs	r0, #1
 800475e:	e75b      	b.n	8004618 <HAL_UART_Init+0x6c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004760:	4b2f      	ldr	r3, [pc, #188]	; (8004820 <HAL_UART_Init+0x274>)
 8004762:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004764:	230c      	movs	r3, #12
 8004766:	4013      	ands	r3, r2
 8004768:	4a36      	ldr	r2, [pc, #216]	; (8004844 <HAL_UART_Init+0x298>)
 800476a:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800476c:	e7c0      	b.n	80046f0 <HAL_UART_Init+0x144>
        pclk = HAL_RCC_GetPCLK1Freq();
 800476e:	f7fe fcb9 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
        break;
 8004772:	e796      	b.n	80046a2 <HAL_UART_Init+0xf6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004774:	6803      	ldr	r3, [r0, #0]
 8004776:	2010      	movs	r0, #16
 8004778:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800477a:	4243      	negs	r3, r0
 800477c:	4158      	adcs	r0, r3
 800477e:	4b2e      	ldr	r3, [pc, #184]	; (8004838 <HAL_UART_Init+0x28c>)
 8004780:	4240      	negs	r0, r0
 8004782:	4018      	ands	r0, r3
 8004784:	4b2d      	ldr	r3, [pc, #180]	; (800483c <HAL_UART_Init+0x290>)
 8004786:	469c      	mov	ip, r3
 8004788:	4460      	add	r0, ip
 800478a:	e791      	b.n	80046b0 <HAL_UART_Init+0x104>
    switch (clocksource)
 800478c:	2080      	movs	r0, #128	; 0x80
 800478e:	0200      	lsls	r0, r0, #8
 8004790:	e7cb      	b.n	800472a <HAL_UART_Init+0x17e>
    switch (clocksource)
 8004792:	2b08      	cmp	r3, #8
 8004794:	d900      	bls.n	8004798 <HAL_UART_Init+0x1ec>
 8004796:	e73b      	b.n	8004610 <HAL_UART_Init+0x64>
 8004798:	4a2b      	ldr	r2, [pc, #172]	; (8004848 <HAL_UART_Init+0x29c>)
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	58d3      	ldr	r3, [r2, r3]
 800479e:	469f      	mov	pc, r3
        pclk = HAL_RCC_GetSysClockFreq();
 80047a0:	f7fe f872 	bl	8002888 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d100      	bne.n	80047aa <HAL_UART_Init+0x1fe>
 80047a8:	e747      	b.n	800463a <HAL_UART_Init+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047aa:	0040      	lsls	r0, r0, #1
 80047ac:	6863      	ldr	r3, [r4, #4]
 80047ae:	6861      	ldr	r1, [r4, #4]
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	1818      	adds	r0, r3, r0
 80047b4:	f7fb fca8 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b8:	0002      	movs	r2, r0
 80047ba:	4b21      	ldr	r3, [pc, #132]	; (8004840 <HAL_UART_Init+0x294>)
 80047bc:	3a10      	subs	r2, #16
 80047be:	429a      	cmp	r2, r3
 80047c0:	d900      	bls.n	80047c4 <HAL_UART_Init+0x218>
 80047c2:	e725      	b.n	8004610 <HAL_UART_Init+0x64>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c4:	4b21      	ldr	r3, [pc, #132]	; (800484c <HAL_UART_Init+0x2a0>)
        huart->Instance->BRR = brrtemp;
 80047c6:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c8:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ca:	0700      	lsls	r0, r0, #28
 80047cc:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80047ce:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 80047d0:	2300      	movs	r3, #0
        huart->Instance->BRR = brrtemp;
 80047d2:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 80047d4:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80047d6:	66e3      	str	r3, [r4, #108]	; 0x6c
  return ret;
 80047d8:	e732      	b.n	8004640 <HAL_UART_Init+0x94>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047da:	2010      	movs	r0, #16
 80047dc:	4b10      	ldr	r3, [pc, #64]	; (8004820 <HAL_UART_Init+0x274>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4018      	ands	r0, r3
 80047e2:	4243      	negs	r3, r0
 80047e4:	4158      	adcs	r0, r3
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <HAL_UART_Init+0x2a4>)
 80047e8:	4240      	negs	r0, r0
 80047ea:	4018      	ands	r0, r3
 80047ec:	4b19      	ldr	r3, [pc, #100]	; (8004854 <HAL_UART_Init+0x2a8>)
 80047ee:	469c      	mov	ip, r3
 80047f0:	4460      	add	r0, ip
 80047f2:	e7db      	b.n	80047ac <HAL_UART_Init+0x200>
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7fe fc76 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
        break;
 80047f8:	e7d4      	b.n	80047a4 <HAL_UART_Init+0x1f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 80047fa:	f7fe fc83 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
        break;
 80047fe:	e7d1      	b.n	80047a4 <HAL_UART_Init+0x1f8>
    switch (clocksource)
 8004800:	2080      	movs	r0, #128	; 0x80
 8004802:	0240      	lsls	r0, r0, #9
 8004804:	e7d2      	b.n	80047ac <HAL_UART_Init+0x200>
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	efff69f3 	.word	0xefff69f3
 800480c:	ffffcfff 	.word	0xffffcfff
 8004810:	40004800 	.word	0x40004800
 8004814:	fffff4ff 	.word	0xfffff4ff
 8004818:	40013800 	.word	0x40013800
 800481c:	40004400 	.word	0x40004400
 8004820:	40021000 	.word	0x40021000
 8004824:	ffffb7ff 	.word	0xffffb7ff
 8004828:	fffffd00 	.word	0xfffffd00
 800482c:	000ffcff 	.word	0x000ffcff
 8004830:	08005a7c 	.word	0x08005a7c
 8004834:	08005a34 	.word	0x08005a34
 8004838:	00b71b00 	.word	0x00b71b00
 800483c:	003d0900 	.word	0x003d0900
 8004840:	0000ffef 	.word	0x0000ffef
 8004844:	08005a80 	.word	0x08005a80
 8004848:	08005a58 	.word	0x08005a58
 800484c:	0000fff0 	.word	0x0000fff0
 8004850:	016e3600 	.word	0x016e3600
 8004854:	007a1200 	.word	0x007a1200

08004858 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004858:	4770      	bx	lr
 800485a:	46c0      	nop			; (mov r8, r8)

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	2600      	movs	r6, #0
 8004860:	4d0c      	ldr	r5, [pc, #48]	; (8004894 <__libc_init_array+0x38>)
 8004862:	4c0d      	ldr	r4, [pc, #52]	; (8004898 <__libc_init_array+0x3c>)
 8004864:	1b64      	subs	r4, r4, r5
 8004866:	10a4      	asrs	r4, r4, #2
 8004868:	42a6      	cmp	r6, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	2600      	movs	r6, #0
 800486e:	f000 f821 	bl	80048b4 <_init>
 8004872:	4d0a      	ldr	r5, [pc, #40]	; (800489c <__libc_init_array+0x40>)
 8004874:	4c0a      	ldr	r4, [pc, #40]	; (80048a0 <__libc_init_array+0x44>)
 8004876:	1b64      	subs	r4, r4, r5
 8004878:	10a4      	asrs	r4, r4, #2
 800487a:	42a6      	cmp	r6, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	00b3      	lsls	r3, r6, #2
 8004882:	58eb      	ldr	r3, [r5, r3]
 8004884:	4798      	blx	r3
 8004886:	3601      	adds	r6, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	00b3      	lsls	r3, r6, #2
 800488c:	58eb      	ldr	r3, [r5, r3]
 800488e:	4798      	blx	r3
 8004890:	3601      	adds	r6, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	08005a98 	.word	0x08005a98
 8004898:	08005a98 	.word	0x08005a98
 800489c:	08005a98 	.word	0x08005a98
 80048a0:	08005a9c 	.word	0x08005a9c

080048a4 <memset>:
 80048a4:	0003      	movs	r3, r0
 80048a6:	1882      	adds	r2, r0, r2
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d100      	bne.n	80048ae <memset+0xa>
 80048ac:	4770      	bx	lr
 80048ae:	7019      	strb	r1, [r3, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	e7f9      	b.n	80048a8 <memset+0x4>

080048b4 <_init>:
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ba:	bc08      	pop	{r3}
 80048bc:	469e      	mov	lr, r3
 80048be:	4770      	bx	lr

080048c0 <_fini>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr
