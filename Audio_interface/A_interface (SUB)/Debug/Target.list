
Target.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003268  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001178  08003328  08003328  00013328  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a0  080044a0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080044a0  080044a0  000144a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044a8  080044a8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044ac  080044ac  000144ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080044b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000001c  080044cc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080044cc  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114a6  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ab  00000000  00000000  000314ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009fc1  00000000  00000000  00033c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  0003dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000db8  00000000  00000000  0003e5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013f94  00000000  00000000  0003f368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000115a3  00000000  00000000  000532fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000785f8  00000000  00000000  0006489f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000dce97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b98  00000000  00000000  000dcee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003310 	.word	0x08003310

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08003310 	.word	0x08003310

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_cfrcmple>:
 8000248:	4684      	mov	ip, r0
 800024a:	0008      	movs	r0, r1
 800024c:	4661      	mov	r1, ip
 800024e:	e7ff      	b.n	8000250 <__aeabi_cfcmpeq>

08000250 <__aeabi_cfcmpeq>:
 8000250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000252:	f000 f9b9 	bl	80005c8 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	d401      	bmi.n	800025e <__aeabi_cfcmpeq+0xe>
 800025a:	2100      	movs	r1, #0
 800025c:	42c8      	cmn	r0, r1
 800025e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000260 <__aeabi_fcmpeq>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 f945 	bl	80004f0 <__eqsf2>
 8000266:	4240      	negs	r0, r0
 8000268:	3001      	adds	r0, #1
 800026a:	bd10      	pop	{r4, pc}

0800026c <__aeabi_fcmplt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f9ab 	bl	80005c8 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	db01      	blt.n	800027a <__aeabi_fcmplt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmple>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f9a1 	bl	80005c8 <__lesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dd01      	ble.n	800028e <__aeabi_fcmple+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpgt>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 f951 	bl	800053c <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	dc01      	bgt.n	80002a2 <__aeabi_fcmpgt+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_fcmpge>:
 80002a8:	b510      	push	{r4, lr}
 80002aa:	f000 f947 	bl	800053c <__gesf2>
 80002ae:	2800      	cmp	r0, #0
 80002b0:	da01      	bge.n	80002b6 <__aeabi_fcmpge+0xe>
 80002b2:	2000      	movs	r0, #0
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	2001      	movs	r0, #1
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__aeabi_uldivmod>:
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d111      	bne.n	80002e4 <__aeabi_uldivmod+0x28>
 80002c0:	2a00      	cmp	r2, #0
 80002c2:	d10f      	bne.n	80002e4 <__aeabi_uldivmod+0x28>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d100      	bne.n	80002ca <__aeabi_uldivmod+0xe>
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d002      	beq.n	80002d2 <__aeabi_uldivmod+0x16>
 80002cc:	2100      	movs	r1, #0
 80002ce:	43c9      	mvns	r1, r1
 80002d0:	0008      	movs	r0, r1
 80002d2:	b407      	push	{r0, r1, r2}
 80002d4:	4802      	ldr	r0, [pc, #8]	; (80002e0 <__aeabi_uldivmod+0x24>)
 80002d6:	a102      	add	r1, pc, #8	; (adr r1, 80002e0 <__aeabi_uldivmod+0x24>)
 80002d8:	1840      	adds	r0, r0, r1
 80002da:	9002      	str	r0, [sp, #8]
 80002dc:	bd03      	pop	{r0, r1, pc}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	ffffff65 	.word	0xffffff65
 80002e4:	b403      	push	{r0, r1}
 80002e6:	4668      	mov	r0, sp
 80002e8:	b501      	push	{r0, lr}
 80002ea:	9802      	ldr	r0, [sp, #8]
 80002ec:	f000 f834 	bl	8000358 <__udivmoddi4>
 80002f0:	9b01      	ldr	r3, [sp, #4]
 80002f2:	469e      	mov	lr, r3
 80002f4:	b002      	add	sp, #8
 80002f6:	bc0c      	pop	{r2, r3}
 80002f8:	4770      	bx	lr
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_lmul>:
 80002fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fe:	46ce      	mov	lr, r9
 8000300:	4647      	mov	r7, r8
 8000302:	b580      	push	{r7, lr}
 8000304:	0007      	movs	r7, r0
 8000306:	4699      	mov	r9, r3
 8000308:	0c3b      	lsrs	r3, r7, #16
 800030a:	469c      	mov	ip, r3
 800030c:	0413      	lsls	r3, r2, #16
 800030e:	0c1b      	lsrs	r3, r3, #16
 8000310:	001d      	movs	r5, r3
 8000312:	000e      	movs	r6, r1
 8000314:	4661      	mov	r1, ip
 8000316:	0400      	lsls	r0, r0, #16
 8000318:	0c14      	lsrs	r4, r2, #16
 800031a:	0c00      	lsrs	r0, r0, #16
 800031c:	4345      	muls	r5, r0
 800031e:	434b      	muls	r3, r1
 8000320:	4360      	muls	r0, r4
 8000322:	4361      	muls	r1, r4
 8000324:	18c0      	adds	r0, r0, r3
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	1820      	adds	r0, r4, r0
 800032a:	468c      	mov	ip, r1
 800032c:	4283      	cmp	r3, r0
 800032e:	d903      	bls.n	8000338 <__aeabi_lmul+0x3c>
 8000330:	2380      	movs	r3, #128	; 0x80
 8000332:	025b      	lsls	r3, r3, #9
 8000334:	4698      	mov	r8, r3
 8000336:	44c4      	add	ip, r8
 8000338:	4649      	mov	r1, r9
 800033a:	4379      	muls	r1, r7
 800033c:	4372      	muls	r2, r6
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	4463      	add	r3, ip
 8000342:	042d      	lsls	r5, r5, #16
 8000344:	0c2d      	lsrs	r5, r5, #16
 8000346:	18c9      	adds	r1, r1, r3
 8000348:	0400      	lsls	r0, r0, #16
 800034a:	1940      	adds	r0, r0, r5
 800034c:	1889      	adds	r1, r1, r2
 800034e:	bcc0      	pop	{r6, r7}
 8000350:	46b9      	mov	r9, r7
 8000352:	46b0      	mov	r8, r6
 8000354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000356:	46c0      	nop			; (mov r8, r8)

08000358 <__udivmoddi4>:
 8000358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800035a:	4657      	mov	r7, sl
 800035c:	464e      	mov	r6, r9
 800035e:	4645      	mov	r5, r8
 8000360:	46de      	mov	lr, fp
 8000362:	b5e0      	push	{r5, r6, r7, lr}
 8000364:	0004      	movs	r4, r0
 8000366:	000d      	movs	r5, r1
 8000368:	4692      	mov	sl, r2
 800036a:	4699      	mov	r9, r3
 800036c:	b083      	sub	sp, #12
 800036e:	428b      	cmp	r3, r1
 8000370:	d830      	bhi.n	80003d4 <__udivmoddi4+0x7c>
 8000372:	d02d      	beq.n	80003d0 <__udivmoddi4+0x78>
 8000374:	4649      	mov	r1, r9
 8000376:	4650      	mov	r0, sl
 8000378:	f000 f9d6 	bl	8000728 <__clzdi2>
 800037c:	0029      	movs	r1, r5
 800037e:	0006      	movs	r6, r0
 8000380:	0020      	movs	r0, r4
 8000382:	f000 f9d1 	bl	8000728 <__clzdi2>
 8000386:	1a33      	subs	r3, r6, r0
 8000388:	4698      	mov	r8, r3
 800038a:	3b20      	subs	r3, #32
 800038c:	469b      	mov	fp, r3
 800038e:	d433      	bmi.n	80003f8 <__udivmoddi4+0xa0>
 8000390:	465a      	mov	r2, fp
 8000392:	4653      	mov	r3, sl
 8000394:	4093      	lsls	r3, r2
 8000396:	4642      	mov	r2, r8
 8000398:	001f      	movs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d83a      	bhi.n	800041a <__udivmoddi4+0xc2>
 80003a4:	42af      	cmp	r7, r5
 80003a6:	d100      	bne.n	80003aa <__udivmoddi4+0x52>
 80003a8:	e078      	b.n	800049c <__udivmoddi4+0x144>
 80003aa:	465b      	mov	r3, fp
 80003ac:	1ba4      	subs	r4, r4, r6
 80003ae:	41bd      	sbcs	r5, r7
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	da00      	bge.n	80003b6 <__udivmoddi4+0x5e>
 80003b4:	e075      	b.n	80004a2 <__udivmoddi4+0x14a>
 80003b6:	2200      	movs	r2, #0
 80003b8:	2300      	movs	r3, #0
 80003ba:	9200      	str	r2, [sp, #0]
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	2301      	movs	r3, #1
 80003c0:	465a      	mov	r2, fp
 80003c2:	4093      	lsls	r3, r2
 80003c4:	9301      	str	r3, [sp, #4]
 80003c6:	2301      	movs	r3, #1
 80003c8:	4642      	mov	r2, r8
 80003ca:	4093      	lsls	r3, r2
 80003cc:	9300      	str	r3, [sp, #0]
 80003ce:	e028      	b.n	8000422 <__udivmoddi4+0xca>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	d9cf      	bls.n	8000374 <__udivmoddi4+0x1c>
 80003d4:	2200      	movs	r2, #0
 80003d6:	2300      	movs	r3, #0
 80003d8:	9200      	str	r2, [sp, #0]
 80003da:	9301      	str	r3, [sp, #4]
 80003dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <__udivmoddi4+0x8e>
 80003e2:	601c      	str	r4, [r3, #0]
 80003e4:	605d      	str	r5, [r3, #4]
 80003e6:	9800      	ldr	r0, [sp, #0]
 80003e8:	9901      	ldr	r1, [sp, #4]
 80003ea:	b003      	add	sp, #12
 80003ec:	bcf0      	pop	{r4, r5, r6, r7}
 80003ee:	46bb      	mov	fp, r7
 80003f0:	46b2      	mov	sl, r6
 80003f2:	46a9      	mov	r9, r5
 80003f4:	46a0      	mov	r8, r4
 80003f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003f8:	4642      	mov	r2, r8
 80003fa:	2320      	movs	r3, #32
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	4652      	mov	r2, sl
 8000400:	40da      	lsrs	r2, r3
 8000402:	4641      	mov	r1, r8
 8000404:	0013      	movs	r3, r2
 8000406:	464a      	mov	r2, r9
 8000408:	408a      	lsls	r2, r1
 800040a:	0017      	movs	r7, r2
 800040c:	4642      	mov	r2, r8
 800040e:	431f      	orrs	r7, r3
 8000410:	4653      	mov	r3, sl
 8000412:	4093      	lsls	r3, r2
 8000414:	001e      	movs	r6, r3
 8000416:	42af      	cmp	r7, r5
 8000418:	d9c4      	bls.n	80003a4 <__udivmoddi4+0x4c>
 800041a:	2200      	movs	r2, #0
 800041c:	2300      	movs	r3, #0
 800041e:	9200      	str	r2, [sp, #0]
 8000420:	9301      	str	r3, [sp, #4]
 8000422:	4643      	mov	r3, r8
 8000424:	2b00      	cmp	r3, #0
 8000426:	d0d9      	beq.n	80003dc <__udivmoddi4+0x84>
 8000428:	07fb      	lsls	r3, r7, #31
 800042a:	0872      	lsrs	r2, r6, #1
 800042c:	431a      	orrs	r2, r3
 800042e:	4646      	mov	r6, r8
 8000430:	087b      	lsrs	r3, r7, #1
 8000432:	e00e      	b.n	8000452 <__udivmoddi4+0xfa>
 8000434:	42ab      	cmp	r3, r5
 8000436:	d101      	bne.n	800043c <__udivmoddi4+0xe4>
 8000438:	42a2      	cmp	r2, r4
 800043a:	d80c      	bhi.n	8000456 <__udivmoddi4+0xfe>
 800043c:	1aa4      	subs	r4, r4, r2
 800043e:	419d      	sbcs	r5, r3
 8000440:	2001      	movs	r0, #1
 8000442:	1924      	adds	r4, r4, r4
 8000444:	416d      	adcs	r5, r5
 8000446:	2100      	movs	r1, #0
 8000448:	3e01      	subs	r6, #1
 800044a:	1824      	adds	r4, r4, r0
 800044c:	414d      	adcs	r5, r1
 800044e:	2e00      	cmp	r6, #0
 8000450:	d006      	beq.n	8000460 <__udivmoddi4+0x108>
 8000452:	42ab      	cmp	r3, r5
 8000454:	d9ee      	bls.n	8000434 <__udivmoddi4+0xdc>
 8000456:	3e01      	subs	r6, #1
 8000458:	1924      	adds	r4, r4, r4
 800045a:	416d      	adcs	r5, r5
 800045c:	2e00      	cmp	r6, #0
 800045e:	d1f8      	bne.n	8000452 <__udivmoddi4+0xfa>
 8000460:	9800      	ldr	r0, [sp, #0]
 8000462:	9901      	ldr	r1, [sp, #4]
 8000464:	465b      	mov	r3, fp
 8000466:	1900      	adds	r0, r0, r4
 8000468:	4169      	adcs	r1, r5
 800046a:	2b00      	cmp	r3, #0
 800046c:	db24      	blt.n	80004b8 <__udivmoddi4+0x160>
 800046e:	002b      	movs	r3, r5
 8000470:	465a      	mov	r2, fp
 8000472:	4644      	mov	r4, r8
 8000474:	40d3      	lsrs	r3, r2
 8000476:	002a      	movs	r2, r5
 8000478:	40e2      	lsrs	r2, r4
 800047a:	001c      	movs	r4, r3
 800047c:	465b      	mov	r3, fp
 800047e:	0015      	movs	r5, r2
 8000480:	2b00      	cmp	r3, #0
 8000482:	db2a      	blt.n	80004da <__udivmoddi4+0x182>
 8000484:	0026      	movs	r6, r4
 8000486:	409e      	lsls	r6, r3
 8000488:	0033      	movs	r3, r6
 800048a:	0026      	movs	r6, r4
 800048c:	4647      	mov	r7, r8
 800048e:	40be      	lsls	r6, r7
 8000490:	0032      	movs	r2, r6
 8000492:	1a80      	subs	r0, r0, r2
 8000494:	4199      	sbcs	r1, r3
 8000496:	9000      	str	r0, [sp, #0]
 8000498:	9101      	str	r1, [sp, #4]
 800049a:	e79f      	b.n	80003dc <__udivmoddi4+0x84>
 800049c:	42a3      	cmp	r3, r4
 800049e:	d8bc      	bhi.n	800041a <__udivmoddi4+0xc2>
 80004a0:	e783      	b.n	80003aa <__udivmoddi4+0x52>
 80004a2:	4642      	mov	r2, r8
 80004a4:	2320      	movs	r3, #32
 80004a6:	2100      	movs	r1, #0
 80004a8:	1a9b      	subs	r3, r3, r2
 80004aa:	2200      	movs	r2, #0
 80004ac:	9100      	str	r1, [sp, #0]
 80004ae:	9201      	str	r2, [sp, #4]
 80004b0:	2201      	movs	r2, #1
 80004b2:	40da      	lsrs	r2, r3
 80004b4:	9201      	str	r2, [sp, #4]
 80004b6:	e786      	b.n	80003c6 <__udivmoddi4+0x6e>
 80004b8:	4642      	mov	r2, r8
 80004ba:	2320      	movs	r3, #32
 80004bc:	1a9b      	subs	r3, r3, r2
 80004be:	002a      	movs	r2, r5
 80004c0:	4646      	mov	r6, r8
 80004c2:	409a      	lsls	r2, r3
 80004c4:	0023      	movs	r3, r4
 80004c6:	40f3      	lsrs	r3, r6
 80004c8:	4644      	mov	r4, r8
 80004ca:	4313      	orrs	r3, r2
 80004cc:	002a      	movs	r2, r5
 80004ce:	40e2      	lsrs	r2, r4
 80004d0:	001c      	movs	r4, r3
 80004d2:	465b      	mov	r3, fp
 80004d4:	0015      	movs	r5, r2
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	dad4      	bge.n	8000484 <__udivmoddi4+0x12c>
 80004da:	4642      	mov	r2, r8
 80004dc:	002f      	movs	r7, r5
 80004de:	2320      	movs	r3, #32
 80004e0:	0026      	movs	r6, r4
 80004e2:	4097      	lsls	r7, r2
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	40de      	lsrs	r6, r3
 80004e8:	003b      	movs	r3, r7
 80004ea:	4333      	orrs	r3, r6
 80004ec:	e7cd      	b.n	800048a <__udivmoddi4+0x132>
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__eqsf2>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	0042      	lsls	r2, r0, #1
 80004f4:	0245      	lsls	r5, r0, #9
 80004f6:	024e      	lsls	r6, r1, #9
 80004f8:	004c      	lsls	r4, r1, #1
 80004fa:	0fc3      	lsrs	r3, r0, #31
 80004fc:	0a6d      	lsrs	r5, r5, #9
 80004fe:	2001      	movs	r0, #1
 8000500:	0e12      	lsrs	r2, r2, #24
 8000502:	0a76      	lsrs	r6, r6, #9
 8000504:	0e24      	lsrs	r4, r4, #24
 8000506:	0fc9      	lsrs	r1, r1, #31
 8000508:	2aff      	cmp	r2, #255	; 0xff
 800050a:	d006      	beq.n	800051a <__eqsf2+0x2a>
 800050c:	2cff      	cmp	r4, #255	; 0xff
 800050e:	d003      	beq.n	8000518 <__eqsf2+0x28>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d101      	bne.n	8000518 <__eqsf2+0x28>
 8000514:	42b5      	cmp	r5, r6
 8000516:	d006      	beq.n	8000526 <__eqsf2+0x36>
 8000518:	bd70      	pop	{r4, r5, r6, pc}
 800051a:	2d00      	cmp	r5, #0
 800051c:	d1fc      	bne.n	8000518 <__eqsf2+0x28>
 800051e:	2cff      	cmp	r4, #255	; 0xff
 8000520:	d1fa      	bne.n	8000518 <__eqsf2+0x28>
 8000522:	2e00      	cmp	r6, #0
 8000524:	d1f8      	bne.n	8000518 <__eqsf2+0x28>
 8000526:	428b      	cmp	r3, r1
 8000528:	d006      	beq.n	8000538 <__eqsf2+0x48>
 800052a:	2001      	movs	r0, #1
 800052c:	2a00      	cmp	r2, #0
 800052e:	d1f3      	bne.n	8000518 <__eqsf2+0x28>
 8000530:	0028      	movs	r0, r5
 8000532:	1e43      	subs	r3, r0, #1
 8000534:	4198      	sbcs	r0, r3
 8000536:	e7ef      	b.n	8000518 <__eqsf2+0x28>
 8000538:	2000      	movs	r0, #0
 800053a:	e7ed      	b.n	8000518 <__eqsf2+0x28>

0800053c <__gesf2>:
 800053c:	b570      	push	{r4, r5, r6, lr}
 800053e:	0042      	lsls	r2, r0, #1
 8000540:	0245      	lsls	r5, r0, #9
 8000542:	024e      	lsls	r6, r1, #9
 8000544:	004c      	lsls	r4, r1, #1
 8000546:	0fc3      	lsrs	r3, r0, #31
 8000548:	0a6d      	lsrs	r5, r5, #9
 800054a:	0e12      	lsrs	r2, r2, #24
 800054c:	0a76      	lsrs	r6, r6, #9
 800054e:	0e24      	lsrs	r4, r4, #24
 8000550:	0fc8      	lsrs	r0, r1, #31
 8000552:	2aff      	cmp	r2, #255	; 0xff
 8000554:	d01b      	beq.n	800058e <__gesf2+0x52>
 8000556:	2cff      	cmp	r4, #255	; 0xff
 8000558:	d00e      	beq.n	8000578 <__gesf2+0x3c>
 800055a:	2a00      	cmp	r2, #0
 800055c:	d11b      	bne.n	8000596 <__gesf2+0x5a>
 800055e:	2c00      	cmp	r4, #0
 8000560:	d101      	bne.n	8000566 <__gesf2+0x2a>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d01c      	beq.n	80005a0 <__gesf2+0x64>
 8000566:	2d00      	cmp	r5, #0
 8000568:	d00c      	beq.n	8000584 <__gesf2+0x48>
 800056a:	4283      	cmp	r3, r0
 800056c:	d01c      	beq.n	80005a8 <__gesf2+0x6c>
 800056e:	2102      	movs	r1, #2
 8000570:	1e58      	subs	r0, r3, #1
 8000572:	4008      	ands	r0, r1
 8000574:	3801      	subs	r0, #1
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	2e00      	cmp	r6, #0
 800057a:	d122      	bne.n	80005c2 <__gesf2+0x86>
 800057c:	2a00      	cmp	r2, #0
 800057e:	d1f4      	bne.n	800056a <__gesf2+0x2e>
 8000580:	2d00      	cmp	r5, #0
 8000582:	d1f2      	bne.n	800056a <__gesf2+0x2e>
 8000584:	2800      	cmp	r0, #0
 8000586:	d1f6      	bne.n	8000576 <__gesf2+0x3a>
 8000588:	2001      	movs	r0, #1
 800058a:	4240      	negs	r0, r0
 800058c:	e7f3      	b.n	8000576 <__gesf2+0x3a>
 800058e:	2d00      	cmp	r5, #0
 8000590:	d117      	bne.n	80005c2 <__gesf2+0x86>
 8000592:	2cff      	cmp	r4, #255	; 0xff
 8000594:	d0f0      	beq.n	8000578 <__gesf2+0x3c>
 8000596:	2c00      	cmp	r4, #0
 8000598:	d1e7      	bne.n	800056a <__gesf2+0x2e>
 800059a:	2e00      	cmp	r6, #0
 800059c:	d1e5      	bne.n	800056a <__gesf2+0x2e>
 800059e:	e7e6      	b.n	800056e <__gesf2+0x32>
 80005a0:	2000      	movs	r0, #0
 80005a2:	2d00      	cmp	r5, #0
 80005a4:	d0e7      	beq.n	8000576 <__gesf2+0x3a>
 80005a6:	e7e2      	b.n	800056e <__gesf2+0x32>
 80005a8:	42a2      	cmp	r2, r4
 80005aa:	dc05      	bgt.n	80005b8 <__gesf2+0x7c>
 80005ac:	dbea      	blt.n	8000584 <__gesf2+0x48>
 80005ae:	42b5      	cmp	r5, r6
 80005b0:	d802      	bhi.n	80005b8 <__gesf2+0x7c>
 80005b2:	d3e7      	bcc.n	8000584 <__gesf2+0x48>
 80005b4:	2000      	movs	r0, #0
 80005b6:	e7de      	b.n	8000576 <__gesf2+0x3a>
 80005b8:	4243      	negs	r3, r0
 80005ba:	4158      	adcs	r0, r3
 80005bc:	0040      	lsls	r0, r0, #1
 80005be:	3801      	subs	r0, #1
 80005c0:	e7d9      	b.n	8000576 <__gesf2+0x3a>
 80005c2:	2002      	movs	r0, #2
 80005c4:	4240      	negs	r0, r0
 80005c6:	e7d6      	b.n	8000576 <__gesf2+0x3a>

080005c8 <__lesf2>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	0042      	lsls	r2, r0, #1
 80005cc:	0245      	lsls	r5, r0, #9
 80005ce:	024e      	lsls	r6, r1, #9
 80005d0:	004c      	lsls	r4, r1, #1
 80005d2:	0fc3      	lsrs	r3, r0, #31
 80005d4:	0a6d      	lsrs	r5, r5, #9
 80005d6:	0e12      	lsrs	r2, r2, #24
 80005d8:	0a76      	lsrs	r6, r6, #9
 80005da:	0e24      	lsrs	r4, r4, #24
 80005dc:	0fc8      	lsrs	r0, r1, #31
 80005de:	2aff      	cmp	r2, #255	; 0xff
 80005e0:	d00b      	beq.n	80005fa <__lesf2+0x32>
 80005e2:	2cff      	cmp	r4, #255	; 0xff
 80005e4:	d00d      	beq.n	8000602 <__lesf2+0x3a>
 80005e6:	2a00      	cmp	r2, #0
 80005e8:	d11f      	bne.n	800062a <__lesf2+0x62>
 80005ea:	2c00      	cmp	r4, #0
 80005ec:	d116      	bne.n	800061c <__lesf2+0x54>
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d114      	bne.n	800061c <__lesf2+0x54>
 80005f2:	2000      	movs	r0, #0
 80005f4:	2d00      	cmp	r5, #0
 80005f6:	d010      	beq.n	800061a <__lesf2+0x52>
 80005f8:	e009      	b.n	800060e <__lesf2+0x46>
 80005fa:	2d00      	cmp	r5, #0
 80005fc:	d10c      	bne.n	8000618 <__lesf2+0x50>
 80005fe:	2cff      	cmp	r4, #255	; 0xff
 8000600:	d113      	bne.n	800062a <__lesf2+0x62>
 8000602:	2e00      	cmp	r6, #0
 8000604:	d108      	bne.n	8000618 <__lesf2+0x50>
 8000606:	2a00      	cmp	r2, #0
 8000608:	d008      	beq.n	800061c <__lesf2+0x54>
 800060a:	4283      	cmp	r3, r0
 800060c:	d012      	beq.n	8000634 <__lesf2+0x6c>
 800060e:	2102      	movs	r1, #2
 8000610:	1e58      	subs	r0, r3, #1
 8000612:	4008      	ands	r0, r1
 8000614:	3801      	subs	r0, #1
 8000616:	e000      	b.n	800061a <__lesf2+0x52>
 8000618:	2002      	movs	r0, #2
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	2d00      	cmp	r5, #0
 800061e:	d1f4      	bne.n	800060a <__lesf2+0x42>
 8000620:	2800      	cmp	r0, #0
 8000622:	d1fa      	bne.n	800061a <__lesf2+0x52>
 8000624:	2001      	movs	r0, #1
 8000626:	4240      	negs	r0, r0
 8000628:	e7f7      	b.n	800061a <__lesf2+0x52>
 800062a:	2c00      	cmp	r4, #0
 800062c:	d1ed      	bne.n	800060a <__lesf2+0x42>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d1eb      	bne.n	800060a <__lesf2+0x42>
 8000632:	e7ec      	b.n	800060e <__lesf2+0x46>
 8000634:	42a2      	cmp	r2, r4
 8000636:	dc05      	bgt.n	8000644 <__lesf2+0x7c>
 8000638:	dbf2      	blt.n	8000620 <__lesf2+0x58>
 800063a:	42b5      	cmp	r5, r6
 800063c:	d802      	bhi.n	8000644 <__lesf2+0x7c>
 800063e:	d3ef      	bcc.n	8000620 <__lesf2+0x58>
 8000640:	2000      	movs	r0, #0
 8000642:	e7ea      	b.n	800061a <__lesf2+0x52>
 8000644:	4243      	negs	r3, r0
 8000646:	4158      	adcs	r0, r3
 8000648:	0040      	lsls	r0, r0, #1
 800064a:	3801      	subs	r0, #1
 800064c:	e7e5      	b.n	800061a <__lesf2+0x52>
 800064e:	46c0      	nop			; (mov r8, r8)

08000650 <__aeabi_i2f>:
 8000650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000652:	2800      	cmp	r0, #0
 8000654:	d013      	beq.n	800067e <__aeabi_i2f+0x2e>
 8000656:	17c3      	asrs	r3, r0, #31
 8000658:	18c6      	adds	r6, r0, r3
 800065a:	405e      	eors	r6, r3
 800065c:	0fc4      	lsrs	r4, r0, #31
 800065e:	0030      	movs	r0, r6
 8000660:	f000 f844 	bl	80006ec <__clzsi2>
 8000664:	239e      	movs	r3, #158	; 0x9e
 8000666:	0005      	movs	r5, r0
 8000668:	1a1b      	subs	r3, r3, r0
 800066a:	2b96      	cmp	r3, #150	; 0x96
 800066c:	dc0f      	bgt.n	800068e <__aeabi_i2f+0x3e>
 800066e:	2808      	cmp	r0, #8
 8000670:	dd01      	ble.n	8000676 <__aeabi_i2f+0x26>
 8000672:	3d08      	subs	r5, #8
 8000674:	40ae      	lsls	r6, r5
 8000676:	0276      	lsls	r6, r6, #9
 8000678:	0a76      	lsrs	r6, r6, #9
 800067a:	b2d8      	uxtb	r0, r3
 800067c:	e002      	b.n	8000684 <__aeabi_i2f+0x34>
 800067e:	2400      	movs	r4, #0
 8000680:	2000      	movs	r0, #0
 8000682:	2600      	movs	r6, #0
 8000684:	05c0      	lsls	r0, r0, #23
 8000686:	4330      	orrs	r0, r6
 8000688:	07e4      	lsls	r4, r4, #31
 800068a:	4320      	orrs	r0, r4
 800068c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800068e:	2b99      	cmp	r3, #153	; 0x99
 8000690:	dd0c      	ble.n	80006ac <__aeabi_i2f+0x5c>
 8000692:	2205      	movs	r2, #5
 8000694:	0031      	movs	r1, r6
 8000696:	1a12      	subs	r2, r2, r0
 8000698:	40d1      	lsrs	r1, r2
 800069a:	000a      	movs	r2, r1
 800069c:	0001      	movs	r1, r0
 800069e:	0030      	movs	r0, r6
 80006a0:	311b      	adds	r1, #27
 80006a2:	4088      	lsls	r0, r1
 80006a4:	1e41      	subs	r1, r0, #1
 80006a6:	4188      	sbcs	r0, r1
 80006a8:	4302      	orrs	r2, r0
 80006aa:	0016      	movs	r6, r2
 80006ac:	2d05      	cmp	r5, #5
 80006ae:	dc12      	bgt.n	80006d6 <__aeabi_i2f+0x86>
 80006b0:	0031      	movs	r1, r6
 80006b2:	4f0d      	ldr	r7, [pc, #52]	; (80006e8 <__aeabi_i2f+0x98>)
 80006b4:	4039      	ands	r1, r7
 80006b6:	0772      	lsls	r2, r6, #29
 80006b8:	d009      	beq.n	80006ce <__aeabi_i2f+0x7e>
 80006ba:	200f      	movs	r0, #15
 80006bc:	4030      	ands	r0, r6
 80006be:	2804      	cmp	r0, #4
 80006c0:	d005      	beq.n	80006ce <__aeabi_i2f+0x7e>
 80006c2:	3104      	adds	r1, #4
 80006c4:	014a      	lsls	r2, r1, #5
 80006c6:	d502      	bpl.n	80006ce <__aeabi_i2f+0x7e>
 80006c8:	239f      	movs	r3, #159	; 0x9f
 80006ca:	4039      	ands	r1, r7
 80006cc:	1b5b      	subs	r3, r3, r5
 80006ce:	0189      	lsls	r1, r1, #6
 80006d0:	0a4e      	lsrs	r6, r1, #9
 80006d2:	b2d8      	uxtb	r0, r3
 80006d4:	e7d6      	b.n	8000684 <__aeabi_i2f+0x34>
 80006d6:	1f6a      	subs	r2, r5, #5
 80006d8:	4096      	lsls	r6, r2
 80006da:	0031      	movs	r1, r6
 80006dc:	4f02      	ldr	r7, [pc, #8]	; (80006e8 <__aeabi_i2f+0x98>)
 80006de:	4039      	ands	r1, r7
 80006e0:	0772      	lsls	r2, r6, #29
 80006e2:	d0f4      	beq.n	80006ce <__aeabi_i2f+0x7e>
 80006e4:	e7e9      	b.n	80006ba <__aeabi_i2f+0x6a>
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	fbffffff 	.word	0xfbffffff

080006ec <__clzsi2>:
 80006ec:	211c      	movs	r1, #28
 80006ee:	2301      	movs	r3, #1
 80006f0:	041b      	lsls	r3, r3, #16
 80006f2:	4298      	cmp	r0, r3
 80006f4:	d301      	bcc.n	80006fa <__clzsi2+0xe>
 80006f6:	0c00      	lsrs	r0, r0, #16
 80006f8:	3910      	subs	r1, #16
 80006fa:	0a1b      	lsrs	r3, r3, #8
 80006fc:	4298      	cmp	r0, r3
 80006fe:	d301      	bcc.n	8000704 <__clzsi2+0x18>
 8000700:	0a00      	lsrs	r0, r0, #8
 8000702:	3908      	subs	r1, #8
 8000704:	091b      	lsrs	r3, r3, #4
 8000706:	4298      	cmp	r0, r3
 8000708:	d301      	bcc.n	800070e <__clzsi2+0x22>
 800070a:	0900      	lsrs	r0, r0, #4
 800070c:	3904      	subs	r1, #4
 800070e:	a202      	add	r2, pc, #8	; (adr r2, 8000718 <__clzsi2+0x2c>)
 8000710:	5c10      	ldrb	r0, [r2, r0]
 8000712:	1840      	adds	r0, r0, r1
 8000714:	4770      	bx	lr
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	02020304 	.word	0x02020304
 800071c:	01010101 	.word	0x01010101
	...

08000728 <__clzdi2>:
 8000728:	b510      	push	{r4, lr}
 800072a:	2900      	cmp	r1, #0
 800072c:	d103      	bne.n	8000736 <__clzdi2+0xe>
 800072e:	f7ff ffdd 	bl	80006ec <__clzsi2>
 8000732:	3020      	adds	r0, #32
 8000734:	e002      	b.n	800073c <__clzdi2+0x14>
 8000736:	0008      	movs	r0, r1
 8000738:	f7ff ffd8 	bl	80006ec <__clzsi2>
 800073c:	bd10      	pop	{r4, pc}
 800073e:	46c0      	nop			; (mov r8, r8)

08000740 <ILI9341_DrawHollowCircle>:
	us *= (SystemCoreClock / 1000000);
	while (us--);
}

void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000742:	001c      	movs	r4, r3
 8000744:	b08d      	sub	sp, #52	; 0x34
	int x = radius-1;
 8000746:	1e53      	subs	r3, r2, #1
 8000748:	9302      	str	r3, [sp, #8]
	int y = 0;
	int dx = 1;
	int dy = 1;
	int err = dx - (radius << 1);
 800074a:	2301      	movs	r3, #1
 800074c:	0055      	lsls	r5, r2, #1

		if (err > 0)
		{
			x--;
			dx += 2;
			err += (-radius << 1) + dx;
 800074e:	4252      	negs	r2, r2
 8000750:	409a      	lsls	r2, r3
	int err = dx - (radius << 1);
 8000752:	1b5d      	subs	r5, r3, r5
	int dy = 1;
 8000754:	9304      	str	r3, [sp, #16]
	int dx = 1;
 8000756:	9307      	str	r3, [sp, #28]
	int y = 0;
 8000758:	2300      	movs	r3, #0
{
 800075a:	9005      	str	r0, [sp, #20]
 800075c:	9106      	str	r1, [sp, #24]
			err += (-radius << 1) + dx;
 800075e:	920b      	str	r2, [sp, #44]	; 0x2c
	int y = 0;
 8000760:	9303      	str	r3, [sp, #12]
	while (x >= y)
 8000762:	9b02      	ldr	r3, [sp, #8]
 8000764:	9a03      	ldr	r2, [sp, #12]
 8000766:	4293      	cmp	r3, r2
 8000768:	da01      	bge.n	800076e <ILI9341_DrawHollowCircle+0x2e>
		}
	}
}
 800076a:	b00d      	add	sp, #52	; 0x34
 800076c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ILI9341_DrawPixel(X + x, Y + y, color);
 800076e:	466b      	mov	r3, sp
 8000770:	9a05      	ldr	r2, [sp, #20]
 8000772:	891b      	ldrh	r3, [r3, #8]
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	189b      	adds	r3, r3, r2
 8000778:	b29b      	uxth	r3, r3
 800077a:	9308      	str	r3, [sp, #32]
 800077c:	466b      	mov	r3, sp
 800077e:	9a06      	ldr	r2, [sp, #24]
 8000780:	899b      	ldrh	r3, [r3, #12]
 8000782:	9808      	ldr	r0, [sp, #32]
 8000784:	189f      	adds	r7, r3, r2
 8000786:	b2bf      	uxth	r7, r7
 8000788:	0039      	movs	r1, r7
 800078a:	0022      	movs	r2, r4
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	f000 fb98 	bl	8000ec2 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y + x, color);
 8000792:	9a05      	ldr	r2, [sp, #20]
 8000794:	9b01      	ldr	r3, [sp, #4]
 8000796:	189b      	adds	r3, r3, r2
 8000798:	b29b      	uxth	r3, r3
 800079a:	9a06      	ldr	r2, [sp, #24]
 800079c:	9309      	str	r3, [sp, #36]	; 0x24
 800079e:	9b00      	ldr	r3, [sp, #0]
 80007a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80007a2:	189e      	adds	r6, r3, r2
 80007a4:	b2b6      	uxth	r6, r6
 80007a6:	0031      	movs	r1, r6
 80007a8:	0022      	movs	r2, r4
 80007aa:	f000 fb8a 	bl	8000ec2 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y + x, color);
 80007ae:	9a01      	ldr	r2, [sp, #4]
 80007b0:	9b05      	ldr	r3, [sp, #20]
 80007b2:	0031      	movs	r1, r6
 80007b4:	1a9b      	subs	r3, r3, r2
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	0018      	movs	r0, r3
 80007ba:	0022      	movs	r2, r4
 80007bc:	930a      	str	r3, [sp, #40]	; 0x28
 80007be:	f000 fb80 	bl	8000ec2 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y + y, color);
 80007c2:	9b05      	ldr	r3, [sp, #20]
 80007c4:	9a00      	ldr	r2, [sp, #0]
 80007c6:	0039      	movs	r1, r7
 80007c8:	1a9e      	subs	r6, r3, r2
 80007ca:	b2b6      	uxth	r6, r6
 80007cc:	0030      	movs	r0, r6
 80007ce:	0022      	movs	r2, r4
 80007d0:	f000 fb77 	bl	8000ec2 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - x, Y - y, color);
 80007d4:	9b06      	ldr	r3, [sp, #24]
 80007d6:	9a01      	ldr	r2, [sp, #4]
 80007d8:	0030      	movs	r0, r6
 80007da:	1a9f      	subs	r7, r3, r2
 80007dc:	b2bf      	uxth	r7, r7
 80007de:	0022      	movs	r2, r4
 80007e0:	0039      	movs	r1, r7
 80007e2:	f000 fb6e 	bl	8000ec2 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X - y, Y - x, color);
 80007e6:	9b06      	ldr	r3, [sp, #24]
 80007e8:	9a00      	ldr	r2, [sp, #0]
 80007ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80007ec:	1a9e      	subs	r6, r3, r2
 80007ee:	b2b6      	uxth	r6, r6
 80007f0:	0022      	movs	r2, r4
 80007f2:	0031      	movs	r1, r6
 80007f4:	f000 fb65 	bl	8000ec2 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + y, Y - x, color);
 80007f8:	0022      	movs	r2, r4
 80007fa:	0031      	movs	r1, r6
 80007fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80007fe:	f000 fb60 	bl	8000ec2 <ILI9341_DrawPixel>
		ILI9341_DrawPixel(X + x, Y - y, color);
 8000802:	0022      	movs	r2, r4
 8000804:	0039      	movs	r1, r7
 8000806:	9808      	ldr	r0, [sp, #32]
 8000808:	f000 fb5b 	bl	8000ec2 <ILI9341_DrawPixel>
		if (err <= 0)
 800080c:	2d00      	cmp	r5, #0
 800080e:	dc08      	bgt.n	8000822 <ILI9341_DrawHollowCircle+0xe2>
			y++;
 8000810:	9b03      	ldr	r3, [sp, #12]
 8000812:	3301      	adds	r3, #1
 8000814:	9303      	str	r3, [sp, #12]
			err += dy;
 8000816:	9b04      	ldr	r3, [sp, #16]
 8000818:	18ed      	adds	r5, r5, r3
			dy += 2;
 800081a:	3302      	adds	r3, #2
 800081c:	9304      	str	r3, [sp, #16]
		if (err > 0)
 800081e:	2d00      	cmp	r5, #0
 8000820:	dd9f      	ble.n	8000762 <ILI9341_DrawHollowCircle+0x22>
			x--;
 8000822:	9b02      	ldr	r3, [sp, #8]
 8000824:	3b01      	subs	r3, #1
 8000826:	9302      	str	r3, [sp, #8]
			dx += 2;
 8000828:	9b07      	ldr	r3, [sp, #28]
 800082a:	3302      	adds	r3, #2
 800082c:	9307      	str	r3, [sp, #28]
			err += (-radius << 1) + dx;
 800082e:	9a07      	ldr	r2, [sp, #28]
 8000830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000832:	189b      	adds	r3, r3, r2
 8000834:	18ed      	adds	r5, r5, r3
 8000836:	e794      	b.n	8000762 <ILI9341_DrawHollowCircle+0x22>

08000838 <ILI9341_DrawFilledCircle>:

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	001c      	movs	r4, r3

	int x = radius;
 800083e:	9201      	str	r2, [sp, #4]
	int y = 0;
	int xChange = 1 - (radius << 1);
 8000840:	0053      	lsls	r3, r2, #1
 8000842:	2201      	movs	r2, #1
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	9303      	str	r3, [sp, #12]
	int yChange = 0;
	int radiusError = 0;
 8000848:	2300      	movs	r3, #0
	int y = 0;
 800084a:	001d      	movs	r5, r3
{
 800084c:	9004      	str	r0, [sp, #16]
 800084e:	9105      	str	r1, [sp, #20]
	int radiusError = 0;
 8000850:	9302      	str	r3, [sp, #8]
 8000852:	006b      	lsls	r3, r5, #1

	while (x >= y)
	{
		for (int i = X - x; i <= X + x; i++)
 8000854:	9a01      	ldr	r2, [sp, #4]
 8000856:	9307      	str	r3, [sp, #28]
 8000858:	9b04      	ldr	r3, [sp, #16]
 800085a:	1a9e      	subs	r6, r3, r2
 800085c:	9b04      	ldr	r3, [sp, #16]
 800085e:	9a01      	ldr	r2, [sp, #4]
 8000860:	189b      	adds	r3, r3, r2
 8000862:	42b3      	cmp	r3, r6
 8000864:	da1f      	bge.n	80008a6 <ILI9341_DrawFilledCircle+0x6e>
		{
			ILI9341_DrawPixel(i, Y + y,color);
			ILI9341_DrawPixel(i, Y - y,color);
		}

		for (int i = X - y; i <= X + y; i++)
 8000866:	9b04      	ldr	r3, [sp, #16]
 8000868:	1b5e      	subs	r6, r3, r5
 800086a:	9b04      	ldr	r3, [sp, #16]
 800086c:	195b      	adds	r3, r3, r5
 800086e:	429e      	cmp	r6, r3
 8000870:	dd2c      	ble.n	80008cc <ILI9341_DrawFilledCircle+0x94>
			ILI9341_DrawPixel(i, Y + x,color);
			ILI9341_DrawPixel(i, Y - x,color);
		}

		y++;
		radiusError += yChange;
 8000872:	9a07      	ldr	r2, [sp, #28]
 8000874:	9b02      	ldr	r3, [sp, #8]
 8000876:	4694      	mov	ip, r2
		yChange += 2;

		if (((radiusError << 1) + xChange) > 0)
 8000878:	9a03      	ldr	r2, [sp, #12]
		radiusError += yChange;
 800087a:	4463      	add	r3, ip
 800087c:	9302      	str	r3, [sp, #8]
		if (((radiusError << 1) + xChange) > 0)
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	189b      	adds	r3, r3, r2
		y++;
 8000882:	3501      	adds	r5, #1
		if (((radiusError << 1) + xChange) > 0)
 8000884:	2b00      	cmp	r3, #0
 8000886:	dd09      	ble.n	800089c <ILI9341_DrawFilledCircle+0x64>
		{
			x--;
			radiusError += xChange;
 8000888:	4694      	mov	ip, r2
			x--;
 800088a:	9b01      	ldr	r3, [sp, #4]
 800088c:	3b01      	subs	r3, #1
 800088e:	9301      	str	r3, [sp, #4]
			radiusError += xChange;
 8000890:	9b02      	ldr	r3, [sp, #8]
 8000892:	4463      	add	r3, ip
 8000894:	9302      	str	r3, [sp, #8]
			xChange += 2;
 8000896:	0013      	movs	r3, r2
 8000898:	3302      	adds	r3, #2
 800089a:	9303      	str	r3, [sp, #12]
	while (x >= y)
 800089c:	9b01      	ldr	r3, [sp, #4]
 800089e:	42ab      	cmp	r3, r5
 80008a0:	dad7      	bge.n	8000852 <ILI9341_DrawFilledCircle+0x1a>
		}
	}
}
 80008a2:	b009      	add	sp, #36	; 0x24
 80008a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ILI9341_DrawPixel(i, Y + y,color);
 80008a6:	9b05      	ldr	r3, [sp, #20]
 80008a8:	b2aa      	uxth	r2, r5
 80008aa:	1899      	adds	r1, r3, r2
 80008ac:	b2b7      	uxth	r7, r6
 80008ae:	0022      	movs	r2, r4
 80008b0:	0038      	movs	r0, r7
 80008b2:	b289      	uxth	r1, r1
 80008b4:	f000 fb05 	bl	8000ec2 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 80008b8:	9b05      	ldr	r3, [sp, #20]
 80008ba:	b2aa      	uxth	r2, r5
 80008bc:	1a99      	subs	r1, r3, r2
 80008be:	0038      	movs	r0, r7
 80008c0:	0022      	movs	r2, r4
 80008c2:	b289      	uxth	r1, r1
 80008c4:	f000 fafd 	bl	8000ec2 <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 80008c8:	3601      	adds	r6, #1
 80008ca:	e7c7      	b.n	800085c <ILI9341_DrawFilledCircle+0x24>
			ILI9341_DrawPixel(i, Y + x,color);
 80008cc:	466b      	mov	r3, sp
 80008ce:	9a05      	ldr	r2, [sp, #20]
 80008d0:	889b      	ldrh	r3, [r3, #4]
 80008d2:	b2b7      	uxth	r7, r6
 80008d4:	1899      	adds	r1, r3, r2
 80008d6:	0038      	movs	r0, r7
 80008d8:	0022      	movs	r2, r4
 80008da:	b289      	uxth	r1, r1
 80008dc:	9306      	str	r3, [sp, #24]
 80008de:	f000 faf0 	bl	8000ec2 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 80008e2:	9a06      	ldr	r2, [sp, #24]
 80008e4:	9b05      	ldr	r3, [sp, #20]
 80008e6:	0038      	movs	r0, r7
 80008e8:	1a99      	subs	r1, r3, r2
 80008ea:	b289      	uxth	r1, r1
 80008ec:	0022      	movs	r2, r4
 80008ee:	f000 fae8 	bl	8000ec2 <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 80008f2:	3601      	adds	r6, #1
 80008f4:	e7b9      	b.n	800086a <ILI9341_DrawFilledCircle+0x32>

080008f6 <ILI9341_DrawHollowRectangleCoord>:

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 80008f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f8:	b085      	sub	sp, #20
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	ab0a      	add	r3, sp, #40	; 0x28
 80008fe:	881f      	ldrh	r7, [r3, #0]

	negCalc = X1 - X0;
	if(negCalc < 0) negX = 1;
	negCalc = 0;

	negCalc = Y1 - Y0;
 8000900:	9b00      	ldr	r3, [sp, #0]
{
 8000902:	0006      	movs	r6, r0
	negCalc = Y1 - Y0;
 8000904:	1a58      	subs	r0, r3, r1
{
 8000906:	000d      	movs	r5, r1
 8000908:	9202      	str	r2, [sp, #8]
	negCalc = Y1 - Y0;
 800090a:	f7ff fea1 	bl	8000650 <__aeabi_i2f>
	negCalc = X1 - X0;
 800090e:	9b02      	ldr	r3, [sp, #8]
	negCalc = Y1 - Y0;
 8000910:	9003      	str	r0, [sp, #12]
	negCalc = X1 - X0;
 8000912:	1b9c      	subs	r4, r3, r6
 8000914:	0020      	movs	r0, r4
 8000916:	f7ff fe9b 	bl	8000650 <__aeabi_i2f>
	if(negCalc < 0) negY = 1;

	//DRAW HORIZONTAL!
	if(!negX)
 800091a:	2100      	movs	r1, #0
 800091c:	f7ff fca6 	bl	800026c <__aeabi_fcmplt>
 8000920:	2800      	cmp	r0, #0
 8000922:	d12d      	bne.n	8000980 <ILI9341_DrawHollowRectangleCoord+0x8a>
	{
		xLen = X1 - X0;
	}
	else
	{
		xLen = X0 - X1;
 8000924:	b2a3      	uxth	r3, r4
 8000926:	9301      	str	r3, [sp, #4]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 8000928:	0029      	movs	r1, r5
 800092a:	003b      	movs	r3, r7
 800092c:	0030      	movs	r0, r6
 800092e:	9a01      	ldr	r2, [sp, #4]
 8000930:	f000 fb21 	bl	8000f76 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 8000934:	003b      	movs	r3, r7
 8000936:	0030      	movs	r0, r6
 8000938:	9a01      	ldr	r2, [sp, #4]
 800093a:	9900      	ldr	r1, [sp, #0]
 800093c:	f000 fb1b 	bl	8000f76 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 8000940:	2100      	movs	r1, #0
 8000942:	9803      	ldr	r0, [sp, #12]
 8000944:	f7ff fc92 	bl	800026c <__aeabi_fcmplt>
	{
		yLen = Y1 - Y0;
 8000948:	9b00      	ldr	r3, [sp, #0]
 800094a:	1b5c      	subs	r4, r3, r5
	if(!negY)
 800094c:	2800      	cmp	r0, #0
 800094e:	d000      	beq.n	8000952 <ILI9341_DrawHollowRectangleCoord+0x5c>
	}
	else
	{
		yLen = Y0 - Y1;
 8000950:	1aec      	subs	r4, r5, r3
 8000952:	b2a4      	uxth	r4, r4
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 8000954:	003b      	movs	r3, r7
 8000956:	0022      	movs	r2, r4
 8000958:	0029      	movs	r1, r5
 800095a:	0030      	movs	r0, r6
 800095c:	f000 fb24 	bl	8000fa8 <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 8000960:	003b      	movs	r3, r7
 8000962:	0022      	movs	r2, r4
 8000964:	0029      	movs	r1, r5
 8000966:	9802      	ldr	r0, [sp, #8]
 8000968:	f000 fb1e 	bl	8000fa8 <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 800096c:	9b01      	ldr	r3, [sp, #4]
 800096e:	4323      	orrs	r3, r4
 8000970:	d004      	beq.n	800097c <ILI9341_DrawHollowRectangleCoord+0x86>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 8000972:	003a      	movs	r2, r7
 8000974:	9900      	ldr	r1, [sp, #0]
 8000976:	9802      	ldr	r0, [sp, #8]
 8000978:	f000 faa3 	bl	8000ec2 <ILI9341_DrawPixel>
	}
}
 800097c:	b005      	add	sp, #20
 800097e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xLen = X0 - X1;
 8000980:	9b02      	ldr	r3, [sp, #8]
 8000982:	1af4      	subs	r4, r6, r3
 8000984:	e7ce      	b.n	8000924 <ILI9341_DrawHollowRectangleCoord+0x2e>

08000986 <ILI9341_DrawFilledRectangleCoord>:

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8000986:	b5e3      	push	{r0, r1, r5, r6, r7, lr}
 8000988:	001d      	movs	r5, r3
 800098a:	ab06      	add	r3, sp, #24
 800098c:	0016      	movs	r6, r2
 800098e:	881f      	ldrh	r7, [r3, #0]
	uint8_t negY = 0;
	int32_t negCalc = 0;
	uint16_t X0True = 0;
	uint16_t Y0True = 0;

	negCalc = X1 - X0;
 8000990:	1a12      	subs	r2, r2, r0
	if(negCalc < 0) negX = 1;
	negCalc = 0;

	negCalc = Y1 - Y0;
 8000992:	1a6b      	subs	r3, r5, r1
	if(negCalc < 0) negY = 1;

	if(!negX)
 8000994:	2a00      	cmp	r2, #0
 8000996:	db07      	blt.n	80009a8 <ILI9341_DrawFilledRectangleCoord+0x22>
	{
		xLen = X1 - X0;
 8000998:	b292      	uxth	r2, r2
	{
		xLen = X0 - X1;
		X0True = X1;
	}

	if(!negY)
 800099a:	2b00      	cmp	r3, #0
 800099c:	db08      	blt.n	80009b0 <ILI9341_DrawFilledRectangleCoord+0x2a>
	{
		yLen = Y1 - Y0;
 800099e:	b29b      	uxth	r3, r3
	{
		yLen = Y0 - Y1;
		Y0True = Y1;
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 80009a0:	9700      	str	r7, [sp, #0]
 80009a2:	f000 fac4 	bl	8000f2e <ILI9341_DrawRectangle>
}
 80009a6:	bde3      	pop	{r0, r1, r5, r6, r7, pc}
		xLen = X0 - X1;
 80009a8:	1b80      	subs	r0, r0, r6
 80009aa:	b282      	uxth	r2, r0
		X0True = X1;
 80009ac:	0030      	movs	r0, r6
 80009ae:	e7f4      	b.n	800099a <ILI9341_DrawFilledRectangleCoord+0x14>
		yLen = Y0 - Y1;
 80009b0:	1b49      	subs	r1, r1, r5
 80009b2:	b28b      	uxth	r3, r1
		Y0True = Y1;
 80009b4:	0029      	movs	r1, r5
 80009b6:	e7f3      	b.n	80009a0 <ILI9341_DrawFilledRectangleCoord+0x1a>

080009b8 <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ba:	b08b      	sub	sp, #44	; 0x2c
 80009bc:	9305      	str	r3, [sp, #20]
 80009be:	ab10      	add	r3, sp, #64	; 0x40
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	000d      	movs	r5, r1
 80009c4:	9309      	str	r3, [sp, #36]	; 0x24
 80009c6:	ab11      	add	r3, sp, #68	; 0x44
 80009c8:	8819      	ldrh	r1, [r3, #0]
	if ((ch < 31) || (ch > 127)) return;
 80009ca:	0003      	movs	r3, r0
 80009cc:	3b1f      	subs	r3, #31
{
 80009ce:	9204      	str	r2, [sp, #16]
	if ((ch < 31) || (ch > 127)) return;
 80009d0:	2b60      	cmp	r3, #96	; 0x60
 80009d2:	d837      	bhi.n	8000a44 <ILI9341_DrawChar+0x8c>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
	fWidth = font[1];
 80009d4:	786b      	ldrb	r3, [r5, #1]
	fHeight = font[2];
	fBPL = font[3];

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80009d6:	3820      	subs	r0, #32
	fWidth = font[1];
 80009d8:	9302      	str	r3, [sp, #8]
	fHeight = font[2];
 80009da:	78ab      	ldrb	r3, [r5, #2]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80009dc:	466a      	mov	r2, sp
	fHeight = font[2];
 80009de:	9303      	str	r3, [sp, #12]
	fBPL = font[3];
 80009e0:	78eb      	ldrb	r3, [r5, #3]
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80009e2:	8912      	ldrh	r2, [r2, #8]
	fBPL = font[3];
 80009e4:	9306      	str	r3, [sp, #24]
	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80009e6:	782b      	ldrb	r3, [r5, #0]

	for (int j=0; j < fHeight; j++)
 80009e8:	2600      	movs	r6, #0
	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80009ea:	4343      	muls	r3, r0
 80009ec:	9307      	str	r3, [sp, #28]
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80009ee:	466b      	mov	r3, sp
 80009f0:	9804      	ldr	r0, [sp, #16]
 80009f2:	899b      	ldrh	r3, [r3, #12]
 80009f4:	9100      	str	r1, [sp, #0]
 80009f6:	9905      	ldr	r1, [sp, #20]
 80009f8:	f000 fa99 	bl	8000f2e <ILI9341_DrawRectangle>
	for (int j=0; j < fHeight; j++)
 80009fc:	9b03      	ldr	r3, [sp, #12]
 80009fe:	429e      	cmp	r6, r3
 8000a00:	da20      	bge.n	8000a44 <ILI9341_DrawChar+0x8c>
	{
		for (int i=0; i < fWidth; i++)
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
			uint8_t b = 1 << (j & 0x07);
 8000a02:	2307      	movs	r3, #7
 8000a04:	2201      	movs	r2, #1
 8000a06:	4033      	ands	r3, r6
 8000a08:	409a      	lsls	r2, r3
 8000a0a:	b2d3      	uxtb	r3, r2
 8000a0c:	9308      	str	r3, [sp, #32]
 8000a0e:	9b07      	ldr	r3, [sp, #28]
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000a10:	10f4      	asrs	r4, r6, #3
 8000a12:	18e4      	adds	r4, r4, r3
		for (int i=0; i < fWidth; i++)
 8000a14:	2700      	movs	r7, #0
 8000a16:	192c      	adds	r4, r5, r4
 8000a18:	e00f      	b.n	8000a3a <ILI9341_DrawChar+0x82>
			if (( z & b ) != 0x00)
 8000a1a:	7963      	ldrb	r3, [r4, #5]
 8000a1c:	9a08      	ldr	r2, [sp, #32]
 8000a1e:	4213      	tst	r3, r2
 8000a20:	d008      	beq.n	8000a34 <ILI9341_DrawChar+0x7c>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000a22:	9b05      	ldr	r3, [sp, #20]
 8000a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a26:	1999      	adds	r1, r3, r6
 8000a28:	9b04      	ldr	r3, [sp, #16]
 8000a2a:	b289      	uxth	r1, r1
 8000a2c:	19d8      	adds	r0, r3, r7
 8000a2e:	b280      	uxth	r0, r0
 8000a30:	f000 fa47 	bl	8000ec2 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000a34:	9b06      	ldr	r3, [sp, #24]
 8000a36:	3701      	adds	r7, #1
 8000a38:	18e4      	adds	r4, r4, r3
 8000a3a:	9b02      	ldr	r3, [sp, #8]
 8000a3c:	429f      	cmp	r7, r3
 8000a3e:	dbec      	blt.n	8000a1a <ILI9341_DrawChar+0x62>
	for (int j=0; j < fHeight; j++)
 8000a40:	3601      	adds	r6, #1
 8000a42:	e7db      	b.n	80009fc <ILI9341_DrawChar+0x44>
			}
		}
	}
}
 8000a44:	b00b      	add	sp, #44	; 0x2c
 8000a46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a48 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a4a:	0005      	movs	r5, r0
 8000a4c:	000e      	movs	r6, r1
 8000a4e:	0014      	movs	r4, r2
 8000a50:	b087      	sub	sp, #28
 8000a52:	9303      	str	r3, [sp, #12]
 8000a54:	ab0c      	add	r3, sp, #48	; 0x30
 8000a56:	881b      	ldrh	r3, [r3, #0]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
	uint8_t fWidth = font[1];	/* Width of font */
 8000a58:	784f      	ldrb	r7, [r1, #1]
{
 8000a5a:	9304      	str	r3, [sp, #16]
 8000a5c:	ab0d      	add	r3, sp, #52	; 0x34
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	9305      	str	r3, [sp, #20]
	uint8_t fOffset = font[0];	/* Offset of character */
 8000a62:	780b      	ldrb	r3, [r1, #0]
 8000a64:	9302      	str	r3, [sp, #8]

	while (*str)
 8000a66:	7828      	ldrb	r0, [r5, #0]
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d101      	bne.n	8000a70 <ILI9341_DrawText+0x28>
			X += fWidth;
		}

		str++;
	}
}
 8000a6c:	b007      	add	sp, #28
 8000a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000a70:	9b05      	ldr	r3, [sp, #20]
 8000a72:	0022      	movs	r2, r4
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	9b04      	ldr	r3, [sp, #16]
 8000a78:	0031      	movs	r1, r6
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	9b03      	ldr	r3, [sp, #12]
 8000a7e:	f7ff ff9b 	bl	80009b8 <ILI9341_DrawChar>
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000a82:	782b      	ldrb	r3, [r5, #0]
 8000a84:	9a02      	ldr	r2, [sp, #8]
 8000a86:	3b20      	subs	r3, #32
 8000a88:	4353      	muls	r3, r2
		charWidth = tempChar[0];
 8000a8a:	18f3      	adds	r3, r6, r3
 8000a8c:	791a      	ldrb	r2, [r3, #4]
		if(charWidth + 2 < fWidth)
 8000a8e:	1c93      	adds	r3, r2, #2
 8000a90:	42bb      	cmp	r3, r7
 8000a92:	da04      	bge.n	8000a9e <ILI9341_DrawText+0x56>
			X += (charWidth + 2);
 8000a94:	3402      	adds	r4, #2
 8000a96:	18a4      	adds	r4, r4, r2
			X += fWidth;
 8000a98:	b2a4      	uxth	r4, r4
		str++;
 8000a9a:	3501      	adds	r5, #1
 8000a9c:	e7e3      	b.n	8000a66 <ILI9341_DrawText+0x1e>
			X += fWidth;
 8000a9e:	19e4      	adds	r4, r4, r7
 8000aa0:	e7fa      	b.n	8000a98 <ILI9341_DrawText+0x50>
	...

08000aa4 <ILI9341_SPI_Tx>:
#include "ILI9341_STM32_Driver.h"

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000aa4:	b513      	push	{r0, r1, r4, lr}
 8000aa6:	466b      	mov	r3, sp
 8000aa8:	1dd9      	adds	r1, r3, #7
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000aaa:	2302      	movs	r3, #2
{
 8000aac:	7008      	strb	r0, [r1, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <ILI9341_SPI_Tx+0x20>)
 8000ab0:	6804      	ldr	r4, [r0, #0]
 8000ab2:	68a2      	ldr	r2, [r4, #8]
 8000ab4:	421a      	tst	r2, r3
 8000ab6:	d0fc      	beq.n	8000ab2 <ILI9341_SPI_Tx+0xe>
//	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000ab8:	230a      	movs	r3, #10
 8000aba:	2201      	movs	r2, #1
 8000abc:	f001 fce4 	bl	8002488 <HAL_SPI_Transmit>
}
 8000ac0:	bd13      	pop	{r0, r1, r4, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	2000003c 	.word	0x2000003c

08000ac8 <ILI9341_WriteCommand>:
//	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000acc:	4d07      	ldr	r5, [pc, #28]	; (8000aec <ILI9341_WriteCommand+0x24>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	0028      	movs	r0, r5
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	f000 ff54 	bl	8001980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000ad8:	0028      	movs	r0, r5
 8000ada:	2200      	movs	r2, #0
 8000adc:	2101      	movs	r1, #1
 8000ade:	f000 ff4f 	bl	8001980 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000ae2:	0020      	movs	r0, r4
 8000ae4:	f7ff ffde 	bl	8000aa4 <ILI9341_SPI_Tx>
//	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	50000400 	.word	0x50000400

08000af0 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000af0:	b570      	push	{r4, r5, r6, lr}
 8000af2:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000af4:	4d07      	ldr	r5, [pc, #28]	; (8000b14 <ILI9341_WriteData+0x24>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	0028      	movs	r0, r5
 8000afa:	2102      	movs	r1, #2
 8000afc:	f000 ff40 	bl	8001980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000b00:	0028      	movs	r0, r5
 8000b02:	2200      	movs	r2, #0
 8000b04:	2101      	movs	r1, #1
 8000b06:	f000 ff3b 	bl	8001980 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000b0a:	0020      	movs	r0, r4
 8000b0c:	f7ff ffca 	bl	8000aa4 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000b10:	bd70      	pop	{r4, r5, r6, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	50000400 	.word	0x50000400

08000b18 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000b18:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000b1a:	2201      	movs	r2, #1
{
 8000b1c:	0004      	movs	r4, r0
 8000b1e:	000d      	movs	r5, r1
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000b20:	480a      	ldr	r0, [pc, #40]	; (8000b4c <ILI9341_WriteBuffer+0x34>)
 8000b22:	2102      	movs	r1, #2
 8000b24:	f000 ff2c 	bl	8001980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <ILI9341_WriteBuffer+0x34>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f000 ff27 	bl	8001980 <HAL_GPIO_WritePin>
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000b32:	2302      	movs	r3, #2
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <ILI9341_WriteBuffer+0x38>)
 8000b36:	6801      	ldr	r1, [r0, #0]
 8000b38:	688a      	ldr	r2, [r1, #8]
 8000b3a:	421a      	tst	r2, r3
 8000b3c:	d0fc      	beq.n	8000b38 <ILI9341_WriteBuffer+0x20>
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
 8000b3e:	002a      	movs	r2, r5
 8000b40:	230a      	movs	r3, #10
 8000b42:	0021      	movs	r1, r4
 8000b44:	f001 fca0 	bl	8002488 <HAL_SPI_Transmit>
	ILI9341_SPI_TxBuffer(buffer, len);
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000b48:	bd70      	pop	{r4, r5, r6, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	50000400 	.word	0x50000400
 8000b50:	2000003c 	.word	0x2000003c

08000b54 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000b54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b56:	000e      	movs	r6, r1
 8000b58:	001d      	movs	r5, r3
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000b5a:	ac01      	add	r4, sp, #4
 8000b5c:	0a03      	lsrs	r3, r0, #8
 8000b5e:	7023      	strb	r3, [r4, #0]
	buffer[1] = x1;
 8000b60:	7060      	strb	r0, [r4, #1]
	buffer[2] = x2 >> 8;
 8000b62:	0a13      	lsrs	r3, r2, #8
	buffer[3] = x2;

	ILI9341_WriteCommand(0x2A);
 8000b64:	202a      	movs	r0, #42	; 0x2a
	buffer[3] = x2;
 8000b66:	70e2      	strb	r2, [r4, #3]
	buffer[2] = x2 >> 8;
 8000b68:	70a3      	strb	r3, [r4, #2]
	ILI9341_WriteCommand(0x2A);
 8000b6a:	f7ff ffad 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000b6e:	2104      	movs	r1, #4
 8000b70:	0020      	movs	r0, r4
 8000b72:	f7ff ffd1 	bl	8000b18 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000b76:	0a33      	lsrs	r3, r6, #8
 8000b78:	7023      	strb	r3, [r4, #0]
	buffer[1] = y1;
	buffer[2] = y2 >> 8;
	buffer[3] = y2;

	ILI9341_WriteCommand(0x2B);
 8000b7a:	202b      	movs	r0, #43	; 0x2b
	buffer[2] = y2 >> 8;
 8000b7c:	0a2b      	lsrs	r3, r5, #8
 8000b7e:	70a3      	strb	r3, [r4, #2]
	buffer[1] = y1;
 8000b80:	7066      	strb	r6, [r4, #1]
	buffer[3] = y2;
 8000b82:	70e5      	strb	r5, [r4, #3]
	ILI9341_WriteCommand(0x2B);
 8000b84:	f7ff ffa0 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000b88:	2104      	movs	r1, #4
 8000b8a:	0020      	movs	r0, r4
 8000b8c:	f7ff ffc4 	bl	8000b18 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000b90:	202c      	movs	r0, #44	; 0x2c
 8000b92:	f7ff ff99 	bl	8000ac8 <ILI9341_WriteCommand>
}
 8000b96:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08000b98 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000b98:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000b9a:	4c0b      	ldr	r4, [pc, #44]	; (8000bc8 <ILI9341_Reset+0x30>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	0020      	movs	r0, r4
 8000ba2:	f000 feed 	bl	8001980 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f000 fd74 	bl	8001694 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000bac:	2200      	movs	r2, #0
 8000bae:	2101      	movs	r1, #1
 8000bb0:	0020      	movs	r0, r4
 8000bb2:	f000 fee5 	bl	8001980 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000bb6:	200a      	movs	r0, #10
 8000bb8:	f000 fd6c 	bl	8001694 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	0020      	movs	r0, r4
 8000bc2:	f000 fedd 	bl	8001980 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
}
 8000bc6:	bd10      	pop	{r4, pc}
 8000bc8:	50000400 	.word	0x50000400

08000bcc <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000bcc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	4802      	ldr	r0, [pc, #8]	; (8000bdc <ILI9341_Enable+0x10>)
 8000bd4:	f000 fed4 	bl	8001980 <HAL_GPIO_WritePin>
}
 8000bd8:	bd10      	pop	{r4, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	50000400 	.word	0x50000400

08000be0 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000be0:	b510      	push	{r4, lr}
	ILI9341_Enable();
 8000be2:	f7ff fff3 	bl	8000bcc <ILI9341_Enable>
	ILI9341_Reset();
 8000be6:	f7ff ffd7 	bl	8000b98 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff ff6c 	bl	8000ac8 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	f000 fd4f 	bl	8001694 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000bf6:	20cb      	movs	r0, #203	; 0xcb
 8000bf8:	f7ff ff66 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000bfc:	2039      	movs	r0, #57	; 0x39
 8000bfe:	f7ff ff77 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000c02:	202c      	movs	r0, #44	; 0x2c
 8000c04:	f7ff ff74 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f7ff ff71 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000c0e:	2034      	movs	r0, #52	; 0x34
 8000c10:	f7ff ff6e 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000c14:	2002      	movs	r0, #2
 8000c16:	f7ff ff6b 	bl	8000af0 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000c1a:	20cf      	movs	r0, #207	; 0xcf
 8000c1c:	f7ff ff54 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff ff65 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000c26:	20c1      	movs	r0, #193	; 0xc1
 8000c28:	f7ff ff62 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000c2c:	2030      	movs	r0, #48	; 0x30
 8000c2e:	f7ff ff5f 	bl	8000af0 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000c32:	20e8      	movs	r0, #232	; 0xe8
 8000c34:	f7ff ff48 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000c38:	2085      	movs	r0, #133	; 0x85
 8000c3a:	f7ff ff59 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff ff56 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000c44:	2078      	movs	r0, #120	; 0x78
 8000c46:	f7ff ff53 	bl	8000af0 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000c4a:	20ea      	movs	r0, #234	; 0xea
 8000c4c:	f7ff ff3c 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff ff4d 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff ff4a 	bl	8000af0 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000c5c:	20ed      	movs	r0, #237	; 0xed
 8000c5e:	f7ff ff33 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000c62:	2064      	movs	r0, #100	; 0x64
 8000c64:	f7ff ff44 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f7ff ff41 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000c6e:	2012      	movs	r0, #18
 8000c70:	f7ff ff3e 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000c74:	2081      	movs	r0, #129	; 0x81
 8000c76:	f7ff ff3b 	bl	8000af0 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000c7a:	20f7      	movs	r0, #247	; 0xf7
 8000c7c:	f7ff ff24 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000c80:	2020      	movs	r0, #32
 8000c82:	f7ff ff35 	bl	8000af0 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000c86:	20c0      	movs	r0, #192	; 0xc0
 8000c88:	f7ff ff1e 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000c8c:	2023      	movs	r0, #35	; 0x23
 8000c8e:	f7ff ff2f 	bl	8000af0 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000c92:	20c1      	movs	r0, #193	; 0xc1
 8000c94:	f7ff ff18 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000c98:	2010      	movs	r0, #16
 8000c9a:	f7ff ff29 	bl	8000af0 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000c9e:	20c5      	movs	r0, #197	; 0xc5
 8000ca0:	f7ff ff12 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000ca4:	203e      	movs	r0, #62	; 0x3e
 8000ca6:	f7ff ff23 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000caa:	2028      	movs	r0, #40	; 0x28
 8000cac:	f7ff ff20 	bl	8000af0 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000cb0:	20c7      	movs	r0, #199	; 0xc7
 8000cb2:	f7ff ff09 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000cb6:	2086      	movs	r0, #134	; 0x86
 8000cb8:	f7ff ff1a 	bl	8000af0 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000cbc:	2036      	movs	r0, #54	; 0x36
 8000cbe:	f7ff ff03 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000cc2:	2048      	movs	r0, #72	; 0x48
 8000cc4:	f7ff ff14 	bl	8000af0 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000cc8:	203a      	movs	r0, #58	; 0x3a
 8000cca:	f7ff fefd 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000cce:	2055      	movs	r0, #85	; 0x55
 8000cd0:	f7ff ff0e 	bl	8000af0 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000cd4:	20b1      	movs	r0, #177	; 0xb1
 8000cd6:	f7ff fef7 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff ff08 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000ce0:	2018      	movs	r0, #24
 8000ce2:	f7ff ff05 	bl	8000af0 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000ce6:	20b6      	movs	r0, #182	; 0xb6
 8000ce8:	f7ff feee 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000cec:	2008      	movs	r0, #8
 8000cee:	f7ff feff 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000cf2:	2082      	movs	r0, #130	; 0x82
 8000cf4:	f7ff fefc 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000cf8:	2027      	movs	r0, #39	; 0x27
 8000cfa:	f7ff fef9 	bl	8000af0 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000cfe:	20f2      	movs	r0, #242	; 0xf2
 8000d00:	f7ff fee2 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff fef3 	bl	8000af0 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000d0a:	2026      	movs	r0, #38	; 0x26
 8000d0c:	f7ff fedc 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff feed 	bl	8000af0 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000d16:	20e0      	movs	r0, #224	; 0xe0
 8000d18:	f7ff fed6 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000d1c:	200f      	movs	r0, #15
 8000d1e:	f7ff fee7 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000d22:	2031      	movs	r0, #49	; 0x31
 8000d24:	f7ff fee4 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000d28:	202b      	movs	r0, #43	; 0x2b
 8000d2a:	f7ff fee1 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000d2e:	200c      	movs	r0, #12
 8000d30:	f7ff fede 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000d34:	200e      	movs	r0, #14
 8000d36:	f7ff fedb 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000d3a:	2008      	movs	r0, #8
 8000d3c:	f7ff fed8 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000d40:	204e      	movs	r0, #78	; 0x4e
 8000d42:	f7ff fed5 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000d46:	20f1      	movs	r0, #241	; 0xf1
 8000d48:	f7ff fed2 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000d4c:	2037      	movs	r0, #55	; 0x37
 8000d4e:	f7ff fecf 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000d52:	2007      	movs	r0, #7
 8000d54:	f7ff fecc 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000d58:	2010      	movs	r0, #16
 8000d5a:	f7ff fec9 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f7ff fec6 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000d64:	200e      	movs	r0, #14
 8000d66:	f7ff fec3 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000d6a:	2009      	movs	r0, #9
 8000d6c:	f7ff fec0 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000d70:	2000      	movs	r0, #0
 8000d72:	f7ff febd 	bl	8000af0 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000d76:	20e1      	movs	r0, #225	; 0xe1
 8000d78:	f7ff fea6 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff feb7 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000d82:	200e      	movs	r0, #14
 8000d84:	f7ff feb4 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000d88:	2014      	movs	r0, #20
 8000d8a:	f7ff feb1 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f7ff feae 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000d94:	2011      	movs	r0, #17
 8000d96:	f7ff feab 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000d9a:	2007      	movs	r0, #7
 8000d9c:	f7ff fea8 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000da0:	2031      	movs	r0, #49	; 0x31
 8000da2:	f7ff fea5 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000da6:	20c1      	movs	r0, #193	; 0xc1
 8000da8:	f7ff fea2 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000dac:	2048      	movs	r0, #72	; 0x48
 8000dae:	f7ff fe9f 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000db2:	2008      	movs	r0, #8
 8000db4:	f7ff fe9c 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000db8:	200f      	movs	r0, #15
 8000dba:	f7ff fe99 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000dbe:	200c      	movs	r0, #12
 8000dc0:	f7ff fe96 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000dc4:	2031      	movs	r0, #49	; 0x31
 8000dc6:	f7ff fe93 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000dca:	2036      	movs	r0, #54	; 0x36
 8000dcc:	f7ff fe90 	bl	8000af0 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000dd0:	200f      	movs	r0, #15
 8000dd2:	f7ff fe8d 	bl	8000af0 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000dd6:	2011      	movs	r0, #17
 8000dd8:	f7ff fe76 	bl	8000ac8 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000ddc:	2064      	movs	r0, #100	; 0x64
 8000dde:	f000 fc59 	bl	8001694 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000de2:	2029      	movs	r0, #41	; 0x29
 8000de4:	f7ff fe70 	bl	8000ac8 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_WriteCommand(0x36);
 8000de8:	2036      	movs	r0, #54	; 0x36
 8000dea:	f7ff fe6d 	bl	8000ac8 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f000 fc50 	bl	8001694 <HAL_Delay>

	ILI9341_WriteData(0x20|0x08);
 8000df4:	2028      	movs	r0, #40	; 0x28
 8000df6:	f7ff fe7b 	bl	8000af0 <ILI9341_WriteData>
}
 8000dfa:	bd10      	pop	{r4, pc}

08000dfc <ILI9341_DrawColor>:

void ILI9341_DrawColor(uint16_t color)
{
 8000dfc:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[2] = {color>>8, color};
 8000dfe:	466a      	mov	r2, sp
 8000e00:	0a03      	lsrs	r3, r0, #8
 8000e02:	7150      	strb	r0, [r2, #5]
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000e04:	2102      	movs	r1, #2
	uint8_t buffer[2] = {color>>8, color};
 8000e06:	7113      	strb	r3, [r2, #4]
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000e08:	a801      	add	r0, sp, #4
 8000e0a:	f7ff fe85 	bl	8000b18 <ILI9341_WriteBuffer>
}
 8000e0e:	bd07      	pop	{r0, r1, r2, pc}

08000e10 <ILI9341_DrawColorBurst>:

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
	uint32_t BufferSize = 0;

	if((size*2) < BURST_MAX_SIZE)
 8000e10:	23fa      	movs	r3, #250	; 0xfa
{
 8000e12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	000c      	movs	r4, r1
 8000e18:	6078      	str	r0, [r7, #4]
	if((size*2) < BURST_MAX_SIZE)
 8000e1a:	004e      	lsls	r6, r1, #1
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	d300      	bcc.n	8000e24 <ILI9341_DrawColorBurst+0x14>
	{
		BufferSize = size;
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000e22:	001c      	movs	r4, r3
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2102      	movs	r1, #2
 8000e28:	481c      	ldr	r0, [pc, #112]	; (8000e9c <ILI9341_DrawColorBurst+0x8c>)
 8000e2a:	f000 fda9 	bl	8001980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2101      	movs	r1, #1
 8000e32:	481a      	ldr	r0, [pc, #104]	; (8000e9c <ILI9341_DrawColorBurst+0x8c>)
 8000e34:	f000 fda4 	bl	8001980 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
	uint8_t BurstBuffer[BufferSize];
 8000e38:	4669      	mov	r1, sp
	uint8_t chifted = color>>8;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	0a1a      	lsrs	r2, r3, #8
	uint8_t BurstBuffer[BufferSize];
 8000e3e:	1de3      	adds	r3, r4, #7
 8000e40:	08db      	lsrs	r3, r3, #3
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	1acb      	subs	r3, r1, r3
 8000e46:	469d      	mov	sp, r3
 8000e48:	466d      	mov	r5, sp

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000e4a:	1b59      	subs	r1, r3, r5
 8000e4c:	428c      	cmp	r4, r1
 8000e4e:	d814      	bhi.n	8000e7a <ILI9341_DrawColorBurst+0x6a>
		BurstBuffer[j+1] = color;
	}

	uint32_t SendingSize = size * 2;
	uint32_t SendingInBlock = SendingSize / BufferSize;
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000e50:	0021      	movs	r1, r4
 8000e52:	0030      	movs	r0, r6
 8000e54:	f7ff f9f2 	bl	800023c <__aeabi_uidivmod>
 8000e58:	6038      	str	r0, [r7, #0]
 8000e5a:	6079      	str	r1, [r7, #4]

	if(SendingInBlock != 0)
 8000e5c:	42a6      	cmp	r6, r4
 8000e5e:	d211      	bcs.n	8000e84 <ILI9341_DrawColorBurst+0x74>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000e60:	0029      	movs	r1, r5
 8000e62:	88ba      	ldrh	r2, [r7, #4]
 8000e64:	230a      	movs	r3, #10
 8000e66:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <ILI9341_DrawColorBurst+0x90>)
 8000e68:	f001 fb0e 	bl	8002488 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	480b      	ldr	r0, [pc, #44]	; (8000e9c <ILI9341_DrawColorBurst+0x8c>)
 8000e70:	0011      	movs	r1, r2
 8000e72:	f000 fd85 	bl	8001980 <HAL_GPIO_WritePin>
}
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		BurstBuffer[j+1] = color;
 8000e7a:	6879      	ldr	r1, [r7, #4]
		BurstBuffer[j] = chifted;
 8000e7c:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000e7e:	7059      	strb	r1, [r3, #1]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000e80:	3302      	adds	r3, #2
 8000e82:	e7e2      	b.n	8000e4a <ILI9341_DrawColorBurst+0x3a>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000e84:	2600      	movs	r6, #0
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	429e      	cmp	r6, r3
 8000e8a:	d0e9      	beq.n	8000e60 <ILI9341_DrawColorBurst+0x50>
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000e8c:	230a      	movs	r3, #10
 8000e8e:	0029      	movs	r1, r5
 8000e90:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <ILI9341_DrawColorBurst+0x90>)
 8000e92:	b2a2      	uxth	r2, r4
 8000e94:	f001 faf8 	bl	8002488 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000e98:	3601      	adds	r6, #1
 8000e9a:	e7f4      	b.n	8000e86 <ILI9341_DrawColorBurst+0x76>
 8000e9c:	50000400 	.word	0x50000400
 8000ea0:	2000003c 	.word	0x2000003c

08000ea4 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	22a0      	movs	r2, #160	; 0xa0
{
 8000ea8:	b510      	push	{r4, lr}
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000eaa:	23f0      	movs	r3, #240	; 0xf0
{
 8000eac:	0004      	movs	r4, r0
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000eae:	0052      	lsls	r2, r2, #1
 8000eb0:	0008      	movs	r0, r1
 8000eb2:	f7ff fe4f 	bl	8000b54 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000eb6:	2196      	movs	r1, #150	; 0x96
 8000eb8:	0020      	movs	r0, r4
 8000eba:	0249      	lsls	r1, r1, #9
 8000ebc:	f7ff ffa8 	bl	8000e10 <ILI9341_DrawColorBurst>
}
 8000ec0:	bd10      	pop	{r4, pc}

08000ec2 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000ec2:	23a0      	movs	r3, #160	; 0xa0
{
 8000ec4:	b530      	push	{r4, r5, lr}
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000ec6:	005b      	lsls	r3, r3, #1
{
 8000ec8:	b085      	sub	sp, #20
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000eca:	4298      	cmp	r0, r3
 8000ecc:	d22d      	bcs.n	8000f2a <ILI9341_DrawPixel+0x68>
 8000ece:	29ef      	cmp	r1, #239	; 0xef
 8000ed0:	d82b      	bhi.n	8000f2a <ILI9341_DrawPixel+0x68>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000ed2:	ac02      	add	r4, sp, #8
 8000ed4:	0a03      	lsrs	r3, r0, #8
 8000ed6:	7023      	strb	r3, [r4, #0]
 8000ed8:	b2c3      	uxtb	r3, r0
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000eda:	ad03      	add	r5, sp, #12
	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000edc:	7063      	strb	r3, [r4, #1]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000ede:	b2c9      	uxtb	r1, r1
	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	70e3      	strb	r3, [r4, #3]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000ee4:	7069      	strb	r1, [r5, #1]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	3101      	adds	r1, #1
 8000eea:	70e9      	strb	r1, [r5, #3]
	uint8_t bufferC[2] = {color>>8, color};
 8000eec:	4669      	mov	r1, sp
	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000eee:	3001      	adds	r0, #1
 8000ef0:	b280      	uxth	r0, r0
 8000ef2:	1200      	asrs	r0, r0, #8
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000ef4:	702b      	strb	r3, [r5, #0]
 8000ef6:	70ab      	strb	r3, [r5, #2]
	uint8_t bufferC[2] = {color>>8, color};
 8000ef8:	0a13      	lsrs	r3, r2, #8
 8000efa:	710b      	strb	r3, [r1, #4]
 8000efc:	714a      	strb	r2, [r1, #5]
	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000efe:	70a0      	strb	r0, [r4, #2]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000f00:	202a      	movs	r0, #42	; 0x2a
 8000f02:	f7ff fde1 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000f06:	2104      	movs	r1, #4
 8000f08:	0020      	movs	r0, r4
 8000f0a:	f7ff fe05 	bl	8000b18 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000f0e:	202b      	movs	r0, #43	; 0x2b
 8000f10:	f7ff fdda 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000f14:	2104      	movs	r1, #4
 8000f16:	0028      	movs	r0, r5
 8000f18:	f7ff fdfe 	bl	8000b18 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000f1c:	202c      	movs	r0, #44	; 0x2c
 8000f1e:	f7ff fdd3 	bl	8000ac8 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000f22:	2102      	movs	r1, #2
 8000f24:	a801      	add	r0, sp, #4
 8000f26:	f7ff fdf7 	bl	8000b18 <ILI9341_WriteBuffer>
}
 8000f2a:	b005      	add	sp, #20
 8000f2c:	bd30      	pop	{r4, r5, pc}

08000f2e <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000f2e:	b570      	push	{r4, r5, r6, lr}
 8000f30:	0015      	movs	r5, r2
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f32:	22a0      	movs	r2, #160	; 0xa0
{
 8000f34:	001c      	movs	r4, r3
 8000f36:	ab04      	add	r3, sp, #16
 8000f38:	881e      	ldrh	r6, [r3, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f3a:	0052      	lsls	r2, r2, #1
 8000f3c:	4290      	cmp	r0, r2
 8000f3e:	d219      	bcs.n	8000f74 <ILI9341_DrawRectangle+0x46>
 8000f40:	29ef      	cmp	r1, #239	; 0xef
 8000f42:	d817      	bhi.n	8000f74 <ILI9341_DrawRectangle+0x46>

	if((x+width-1)>=LCD_WIDTH)
 8000f44:	1943      	adds	r3, r0, r5
 8000f46:	4293      	cmp	r3, r2
 8000f48:	dd01      	ble.n	8000f4e <ILI9341_DrawRectangle+0x20>
	{
		width=LCD_WIDTH-x;
 8000f4a:	1a12      	subs	r2, r2, r0
 8000f4c:	b295      	uxth	r5, r2
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000f4e:	190b      	adds	r3, r1, r4
 8000f50:	2bf0      	cmp	r3, #240	; 0xf0
 8000f52:	dd02      	ble.n	8000f5a <ILI9341_DrawRectangle+0x2c>
	{
		height=LCD_HEIGHT-y;
 8000f54:	24f0      	movs	r4, #240	; 0xf0
 8000f56:	1a64      	subs	r4, r4, r1
 8000f58:	b2a4      	uxth	r4, r4
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000f5a:	1e4b      	subs	r3, r1, #1
 8000f5c:	1e42      	subs	r2, r0, #1
 8000f5e:	18e3      	adds	r3, r4, r3
 8000f60:	18aa      	adds	r2, r5, r2
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	b292      	uxth	r2, r2
 8000f66:	f7ff fdf5 	bl	8000b54 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000f6a:	0029      	movs	r1, r5
 8000f6c:	0030      	movs	r0, r6
 8000f6e:	4361      	muls	r1, r4
 8000f70:	f7ff ff4e 	bl	8000e10 <ILI9341_DrawColorBurst>
}
 8000f74:	bd70      	pop	{r4, r5, r6, pc}

08000f76 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8000f76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f78:	001f      	movs	r7, r3
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f7a:	23a0      	movs	r3, #160	; 0xa0
{
 8000f7c:	0005      	movs	r5, r0
 8000f7e:	000e      	movs	r6, r1
 8000f80:	9201      	str	r2, [sp, #4]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4298      	cmp	r0, r3
 8000f86:	d202      	bcs.n	8000f8e <ILI9341_DrawHLine+0x18>
 8000f88:	0004      	movs	r4, r0
 8000f8a:	29ef      	cmp	r1, #239	; 0xef
 8000f8c:	d907      	bls.n	8000f9e <ILI9341_DrawHLine+0x28>
//	ILI9341_DrawColorBurst(color, width);

	for(uint16_t i = x ; i <= x + width ; i++){
		ILI9341_DrawPixel(i, y, color);
	}
}
 8000f8e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		ILI9341_DrawPixel(i, y, color);
 8000f90:	0020      	movs	r0, r4
 8000f92:	003a      	movs	r2, r7
 8000f94:	0031      	movs	r1, r6
 8000f96:	f7ff ff94 	bl	8000ec2 <ILI9341_DrawPixel>
	for(uint16_t i = x ; i <= x + width ; i++){
 8000f9a:	3401      	adds	r4, #1
 8000f9c:	b2a4      	uxth	r4, r4
 8000f9e:	9b01      	ldr	r3, [sp, #4]
 8000fa0:	18eb      	adds	r3, r5, r3
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	ddf4      	ble.n	8000f90 <ILI9341_DrawHLine+0x1a>
 8000fa6:	e7f2      	b.n	8000f8e <ILI9341_DrawHLine+0x18>

08000fa8 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8000fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000faa:	001f      	movs	r7, r3
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000fac:	23a0      	movs	r3, #160	; 0xa0
{
 8000fae:	0006      	movs	r6, r0
 8000fb0:	000d      	movs	r5, r1
 8000fb2:	9201      	str	r2, [sp, #4]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4298      	cmp	r0, r3
 8000fb8:	d202      	bcs.n	8000fc0 <ILI9341_DrawVLine+0x18>
 8000fba:	000c      	movs	r4, r1
 8000fbc:	29ef      	cmp	r1, #239	; 0xef
 8000fbe:	d907      	bls.n	8000fd0 <ILI9341_DrawVLine+0x28>
//	ILI9341_DrawColorBurst(color, height);

	for(uint16_t i = y ; i <= y + height ; i++){
		ILI9341_DrawPixel(x, i, color);
	}
}
 8000fc0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		ILI9341_DrawPixel(x, i, color);
 8000fc2:	0021      	movs	r1, r4
 8000fc4:	003a      	movs	r2, r7
 8000fc6:	0030      	movs	r0, r6
 8000fc8:	f7ff ff7b 	bl	8000ec2 <ILI9341_DrawPixel>
	for(uint16_t i = y ; i <= y + height ; i++){
 8000fcc:	3401      	adds	r4, #1
 8000fce:	b2a4      	uxth	r4, r4
 8000fd0:	9b01      	ldr	r3, [sp, #4]
 8000fd2:	18eb      	adds	r3, r5, r3
 8000fd4:	429c      	cmp	r4, r3
 8000fd6:	ddf4      	ble.n	8000fc2 <ILI9341_DrawVLine+0x1a>
 8000fd8:	e7f2      	b.n	8000fc0 <ILI9341_DrawVLine+0x18>
	...

08000fdc <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(huart->Instance == huart1.Instance){
 8000fde:	4ccb      	ldr	r4, [pc, #812]	; (800130c <HAL_UART_RxCpltCallback+0x330>)
 8000fe0:	6803      	ldr	r3, [r0, #0]
 8000fe2:	6822      	ldr	r2, [r4, #0]
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fe4:	b08f      	sub	sp, #60	; 0x3c
	if(huart->Instance == huart1.Instance){
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d000      	beq.n	8000fec <HAL_UART_RxCpltCallback+0x10>
 8000fea:	e186      	b.n	80012fa <HAL_UART_RxCpltCallback+0x31e>
		if(RxData == 0) return;
 8000fec:	4dc8      	ldr	r5, [pc, #800]	; (8001310 <HAL_UART_RxCpltCallback+0x334>)
 8000fee:	782b      	ldrb	r3, [r5, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d100      	bne.n	8000ff6 <HAL_UART_RxCpltCallback+0x1a>
 8000ff4:	e181      	b.n	80012fa <HAL_UART_RxCpltCallback+0x31e>
		HAL_UART_Transmit(&huart1, &Txdata, 1, 10);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	230a      	movs	r3, #10
 8000ffa:	0020      	movs	r0, r4
 8000ffc:	49c5      	ldr	r1, [pc, #788]	; (8001314 <HAL_UART_RxCpltCallback+0x338>)
 8000ffe:	f001 ff44 	bl	8002e8a <HAL_UART_Transmit>
		if(RxData == 1){
 8001002:	782a      	ldrb	r2, [r5, #0]
 8001004:	2a01      	cmp	r2, #1
 8001006:	d10b      	bne.n	8001020 <HAL_UART_RxCpltCallback+0x44>
			HAL_UART_Receive(&huart1, uartDat, 1, 10);
 8001008:	4ec3      	ldr	r6, [pc, #780]	; (8001318 <HAL_UART_RxCpltCallback+0x33c>)
 800100a:	230a      	movs	r3, #10
 800100c:	0031      	movs	r1, r6
 800100e:	0020      	movs	r0, r4
 8001010:	f001 ffa2 	bl	8002f58 <HAL_UART_Receive>
			ILI9341_DrawColor(COLOR[uartDat[0]]);
 8001014:	7833      	ldrb	r3, [r6, #0]
 8001016:	4ac1      	ldr	r2, [pc, #772]	; (800131c <HAL_UART_RxCpltCallback+0x340>)
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	5a98      	ldrh	r0, [r3, r2]
 800101c:	f7ff feee 	bl	8000dfc <ILI9341_DrawColor>
		}
		if(RxData == 2){
 8001020:	782b      	ldrb	r3, [r5, #0]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d116      	bne.n	8001054 <HAL_UART_RxCpltCallback+0x78>
			uint32_t size = 0;
			HAL_UART_Receive(&huart1, uartDat, 5, 10);
 8001026:	4ebc      	ldr	r6, [pc, #752]	; (8001318 <HAL_UART_RxCpltCallback+0x33c>)
 8001028:	2205      	movs	r2, #5
 800102a:	0031      	movs	r1, r6
 800102c:	3308      	adds	r3, #8
 800102e:	0020      	movs	r0, r4
 8001030:	f001 ff92 	bl	8002f58 <HAL_UART_Receive>
			for(uint8_t i = 0 ; i < 4 ; i++){
				size <<= 8;
				size |= uartDat[4 - i];
 8001034:	7933      	ldrb	r3, [r6, #4]
 8001036:	78f1      	ldrb	r1, [r6, #3]
				size <<= 8;
 8001038:	021b      	lsls	r3, r3, #8
				size |= uartDat[4 - i];
 800103a:	430b      	orrs	r3, r1
 800103c:	78b1      	ldrb	r1, [r6, #2]
				size <<= 8;
 800103e:	021b      	lsls	r3, r3, #8
				size |= uartDat[4 - i];
 8001040:	4319      	orrs	r1, r3
 8001042:	7873      	ldrb	r3, [r6, #1]
				size <<= 8;
 8001044:	0209      	lsls	r1, r1, #8
				size |= uartDat[4 - i];
 8001046:	4319      	orrs	r1, r3
			}
			ILI9341_DrawColorBurst(COLOR[uartDat[0]], size);
 8001048:	7833      	ldrb	r3, [r6, #0]
 800104a:	4ab4      	ldr	r2, [pc, #720]	; (800131c <HAL_UART_RxCpltCallback+0x340>)
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	5a98      	ldrh	r0, [r3, r2]
 8001050:	f7ff fede 	bl	8000e10 <ILI9341_DrawColorBurst>
		}
		if(RxData == 3){
 8001054:	782b      	ldrb	r3, [r5, #0]
 8001056:	2b03      	cmp	r3, #3
 8001058:	d10c      	bne.n	8001074 <HAL_UART_RxCpltCallback+0x98>
			HAL_UART_Receive(&huart1, uartDat, 1, 10);
 800105a:	4eaf      	ldr	r6, [pc, #700]	; (8001318 <HAL_UART_RxCpltCallback+0x33c>)
 800105c:	2201      	movs	r2, #1
 800105e:	3307      	adds	r3, #7
 8001060:	0031      	movs	r1, r6
 8001062:	0020      	movs	r0, r4
 8001064:	f001 ff78 	bl	8002f58 <HAL_UART_Receive>
			ILI9341_FillScreen(COLOR[uartDat[0]]);
 8001068:	7833      	ldrb	r3, [r6, #0]
 800106a:	4aac      	ldr	r2, [pc, #688]	; (800131c <HAL_UART_RxCpltCallback+0x340>)
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	5a98      	ldrh	r0, [r3, r2]
 8001070:	f7ff ff18 	bl	8000ea4 <ILI9341_FillScreen>
		}
		if(RxData == 4){
 8001074:	782b      	ldrb	r3, [r5, #0]
 8001076:	2b04      	cmp	r3, #4
 8001078:	d114      	bne.n	80010a4 <HAL_UART_RxCpltCallback+0xc8>
			uint16_t x = 0, y = 0;
			HAL_UART_Receive(&huart1, uartDat, 5, 10);
 800107a:	4ea7      	ldr	r6, [pc, #668]	; (8001318 <HAL_UART_RxCpltCallback+0x33c>)
 800107c:	2205      	movs	r2, #5
 800107e:	0031      	movs	r1, r6
 8001080:	3306      	adds	r3, #6
 8001082:	0020      	movs	r0, r4
 8001084:	f001 ff68 	bl	8002f58 <HAL_UART_Receive>
			x <<= 8;
			x |= uartDat[0];
			y = uartDat[3];
			y <<= 8;
			y |= uartDat[2];
			ILI9341_DrawPixel(x, y, COLOR[uartDat[4]]);
 8001088:	7933      	ldrb	r3, [r6, #4]
 800108a:	4aa4      	ldr	r2, [pc, #656]	; (800131c <HAL_UART_RxCpltCallback+0x340>)
 800108c:	005b      	lsls	r3, r3, #1
			y |= uartDat[2];
 800108e:	78f1      	ldrb	r1, [r6, #3]
			ILI9341_DrawPixel(x, y, COLOR[uartDat[4]]);
 8001090:	5a9a      	ldrh	r2, [r3, r2]
			y |= uartDat[2];
 8001092:	78b3      	ldrb	r3, [r6, #2]
			x |= uartDat[0];
 8001094:	7870      	ldrb	r0, [r6, #1]
			y |= uartDat[2];
 8001096:	0209      	lsls	r1, r1, #8
			ILI9341_DrawPixel(x, y, COLOR[uartDat[4]]);
 8001098:	4319      	orrs	r1, r3
			x |= uartDat[0];
 800109a:	7833      	ldrb	r3, [r6, #0]
 800109c:	0200      	lsls	r0, r0, #8
			ILI9341_DrawPixel(x, y, COLOR[uartDat[4]]);
 800109e:	4318      	orrs	r0, r3
 80010a0:	f7ff ff0f 	bl	8000ec2 <ILI9341_DrawPixel>
		}
		if(RxData == 5){
 80010a4:	782b      	ldrb	r3, [r5, #0]
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d11d      	bne.n	80010e6 <HAL_UART_RxCpltCallback+0x10a>
			uint16_t x = 0, y = 0, width = 0, height = 0;
			HAL_UART_Receive(&huart1, uartDat, 9, 10);
 80010aa:	4e9b      	ldr	r6, [pc, #620]	; (8001318 <HAL_UART_RxCpltCallback+0x33c>)
 80010ac:	2209      	movs	r2, #9
 80010ae:	0031      	movs	r1, r6
 80010b0:	3305      	adds	r3, #5
 80010b2:	0020      	movs	r0, r4
 80010b4:	f001 ff50 	bl	8002f58 <HAL_UART_Receive>
			width = uartDat[5];
			width <<= 8;
			width |= uartDat[4];
			height = uartDat[7];
			height <<= 8;
			height |= uartDat[6];
 80010b8:	79f3      	ldrb	r3, [r6, #7]
 80010ba:	79b2      	ldrb	r2, [r6, #6]
 80010bc:	021b      	lsls	r3, r3, #8
			ILI9341_DrawRectangle(x, y, width, height, COLOR[uartDat[8]]);
 80010be:	4313      	orrs	r3, r2
			width |= uartDat[4];
 80010c0:	7972      	ldrb	r2, [r6, #5]
 80010c2:	7931      	ldrb	r1, [r6, #4]
 80010c4:	0212      	lsls	r2, r2, #8
			ILI9341_DrawRectangle(x, y, width, height, COLOR[uartDat[8]]);
 80010c6:	430a      	orrs	r2, r1
			y |= uartDat[2];
 80010c8:	78f1      	ldrb	r1, [r6, #3]
 80010ca:	78b0      	ldrb	r0, [r6, #2]
 80010cc:	0209      	lsls	r1, r1, #8
			ILI9341_DrawRectangle(x, y, width, height, COLOR[uartDat[8]]);
 80010ce:	4301      	orrs	r1, r0
			x |= uartDat[0];
 80010d0:	7870      	ldrb	r0, [r6, #1]
 80010d2:	7837      	ldrb	r7, [r6, #0]
 80010d4:	0200      	lsls	r0, r0, #8
			ILI9341_DrawRectangle(x, y, width, height, COLOR[uartDat[8]]);
 80010d6:	7a36      	ldrb	r6, [r6, #8]
 80010d8:	4338      	orrs	r0, r7
 80010da:	4f90      	ldr	r7, [pc, #576]	; (800131c <HAL_UART_RxCpltCallback+0x340>)
 80010dc:	0076      	lsls	r6, r6, #1
 80010de:	5bf6      	ldrh	r6, [r6, r7]
 80010e0:	9600      	str	r6, [sp, #0]
 80010e2:	f7ff ff24 	bl	8000f2e <ILI9341_DrawRectangle>
		}
		if(RxData == 6){
 80010e6:	782b      	ldrb	r3, [r5, #0]
 80010e8:	2b06      	cmp	r3, #6
 80010ea:	d118      	bne.n	800111e <HAL_UART_RxCpltCallback+0x142>
			uint16_t x = 0, y = 0, width = 0;
			HAL_UART_Receive(&huart1, uartDat, 7, 10);
 80010ec:	4e8a      	ldr	r6, [pc, #552]	; (8001318 <HAL_UART_RxCpltCallback+0x33c>)
 80010ee:	2207      	movs	r2, #7
 80010f0:	0031      	movs	r1, r6
 80010f2:	3304      	adds	r3, #4
 80010f4:	0020      	movs	r0, r4
 80010f6:	f001 ff2f 	bl	8002f58 <HAL_UART_Receive>
			y <<= 8;
			y |= uartDat[2];
			width = uartDat[5];
			width <<= 8;
			width |= uartDat[4];
			ILI9341_DrawHLine(x, y, width, COLOR[uartDat[6]]);
 80010fa:	79b3      	ldrb	r3, [r6, #6]
 80010fc:	4a87      	ldr	r2, [pc, #540]	; (800131c <HAL_UART_RxCpltCallback+0x340>)
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	5a9b      	ldrh	r3, [r3, r2]
			width |= uartDat[4];
 8001102:	7972      	ldrb	r2, [r6, #5]
 8001104:	7931      	ldrb	r1, [r6, #4]
 8001106:	0212      	lsls	r2, r2, #8
			ILI9341_DrawHLine(x, y, width, COLOR[uartDat[6]]);
 8001108:	430a      	orrs	r2, r1
			y |= uartDat[2];
 800110a:	78f1      	ldrb	r1, [r6, #3]
 800110c:	78b0      	ldrb	r0, [r6, #2]
 800110e:	0209      	lsls	r1, r1, #8
			ILI9341_DrawHLine(x, y, width, COLOR[uartDat[6]]);
 8001110:	4301      	orrs	r1, r0
			x |= uartDat[0];
 8001112:	7870      	ldrb	r0, [r6, #1]
 8001114:	7837      	ldrb	r7, [r6, #0]
 8001116:	0200      	lsls	r0, r0, #8
			ILI9341_DrawHLine(x, y, width, COLOR[uartDat[6]]);
 8001118:	4338      	orrs	r0, r7
 800111a:	f7ff ff2c 	bl	8000f76 <ILI9341_DrawHLine>
		}
		if(RxData == 7){
 800111e:	782a      	ldrb	r2, [r5, #0]
 8001120:	2a07      	cmp	r2, #7
 8001122:	d117      	bne.n	8001154 <HAL_UART_RxCpltCallback+0x178>
			uint16_t x = 0, y = 0, height = 0;
			HAL_UART_Receive(&huart1, uartDat, 7, 10);
 8001124:	4e7c      	ldr	r6, [pc, #496]	; (8001318 <HAL_UART_RxCpltCallback+0x33c>)
 8001126:	230a      	movs	r3, #10
 8001128:	0031      	movs	r1, r6
 800112a:	0020      	movs	r0, r4
 800112c:	f001 ff14 	bl	8002f58 <HAL_UART_Receive>
			y <<= 8;
			y |= uartDat[2];
			height = uartDat[5];
			height <<= 8;
			height |= uartDat[4];
			ILI9341_DrawVLine(x, y, height, COLOR[uartDat[6]]);
 8001130:	79b3      	ldrb	r3, [r6, #6]
 8001132:	4a7a      	ldr	r2, [pc, #488]	; (800131c <HAL_UART_RxCpltCallback+0x340>)
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	5a9b      	ldrh	r3, [r3, r2]
			height |= uartDat[4];
 8001138:	7972      	ldrb	r2, [r6, #5]
 800113a:	7931      	ldrb	r1, [r6, #4]
 800113c:	0212      	lsls	r2, r2, #8
			ILI9341_DrawVLine(x, y, height, COLOR[uartDat[6]]);
 800113e:	430a      	orrs	r2, r1
			y |= uartDat[2];
 8001140:	78f1      	ldrb	r1, [r6, #3]
 8001142:	78b0      	ldrb	r0, [r6, #2]
 8001144:	0209      	lsls	r1, r1, #8
			ILI9341_DrawVLine(x, y, height, COLOR[uartDat[6]]);
 8001146:	4301      	orrs	r1, r0
			x |= uartDat[0];
 8001148:	7870      	ldrb	r0, [r6, #1]
 800114a:	7837      	ldrb	r7, [r6, #0]
 800114c:	0200      	lsls	r0, r0, #8
			ILI9341_DrawVLine(x, y, height, COLOR[uartDat[6]]);
 800114e:	4338      	orrs	r0, r7
 8001150:	f7ff ff2a 	bl	8000fa8 <ILI9341_DrawVLine>
		}
		if(RxData == 8){
 8001154:	782b      	ldrb	r3, [r5, #0]
 8001156:	2b08      	cmp	r3, #8
 8001158:	d118      	bne.n	800118c <HAL_UART_RxCpltCallback+0x1b0>
			uint16_t x = 0, y = 0, radius = 0;
			HAL_UART_Receive(&huart1, uartDat, 7, 10);
 800115a:	4e6f      	ldr	r6, [pc, #444]	; (8001318 <HAL_UART_RxCpltCallback+0x33c>)
 800115c:	2207      	movs	r2, #7
 800115e:	0031      	movs	r1, r6
 8001160:	3302      	adds	r3, #2
 8001162:	0020      	movs	r0, r4
 8001164:	f001 fef8 	bl	8002f58 <HAL_UART_Receive>
			y <<= 8;
			y |= uartDat[2];
			radius = uartDat[5];
			radius <<= 8;
			radius |= uartDat[4];
			ILI9341_DrawHollowCircle(x, y, radius, COLOR[uartDat[6]]);
 8001168:	79b3      	ldrb	r3, [r6, #6]
 800116a:	4a6c      	ldr	r2, [pc, #432]	; (800131c <HAL_UART_RxCpltCallback+0x340>)
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	5a9b      	ldrh	r3, [r3, r2]
			radius |= uartDat[4];
 8001170:	7972      	ldrb	r2, [r6, #5]
 8001172:	7931      	ldrb	r1, [r6, #4]
 8001174:	0212      	lsls	r2, r2, #8
			ILI9341_DrawHollowCircle(x, y, radius, COLOR[uartDat[6]]);
 8001176:	430a      	orrs	r2, r1
			y |= uartDat[2];
 8001178:	78f1      	ldrb	r1, [r6, #3]
 800117a:	78b0      	ldrb	r0, [r6, #2]
 800117c:	0209      	lsls	r1, r1, #8
			ILI9341_DrawHollowCircle(x, y, radius, COLOR[uartDat[6]]);
 800117e:	4301      	orrs	r1, r0
			x |= uartDat[0];
 8001180:	7870      	ldrb	r0, [r6, #1]
 8001182:	7837      	ldrb	r7, [r6, #0]
 8001184:	0200      	lsls	r0, r0, #8
			ILI9341_DrawHollowCircle(x, y, radius, COLOR[uartDat[6]]);
 8001186:	4338      	orrs	r0, r7
 8001188:	f7ff fada 	bl	8000740 <ILI9341_DrawHollowCircle>
		}
		if(RxData == 9){
 800118c:	782b      	ldrb	r3, [r5, #0]
 800118e:	2b09      	cmp	r3, #9
 8001190:	d118      	bne.n	80011c4 <HAL_UART_RxCpltCallback+0x1e8>
			uint16_t x = 0, y = 0, radius = 0;
			HAL_UART_Receive(&huart1, uartDat, 7, 10);
 8001192:	4e61      	ldr	r6, [pc, #388]	; (8001318 <HAL_UART_RxCpltCallback+0x33c>)
 8001194:	2207      	movs	r2, #7
 8001196:	0031      	movs	r1, r6
 8001198:	3301      	adds	r3, #1
 800119a:	0020      	movs	r0, r4
 800119c:	f001 fedc 	bl	8002f58 <HAL_UART_Receive>
			y <<= 8;
			y |= uartDat[2];
			radius = uartDat[5];
			radius <<= 8;
			radius |= uartDat[4];
			ILI9341_DrawFilledCircle(x, y, radius, COLOR[uartDat[6]]);
 80011a0:	79b3      	ldrb	r3, [r6, #6]
 80011a2:	4a5e      	ldr	r2, [pc, #376]	; (800131c <HAL_UART_RxCpltCallback+0x340>)
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	5a9b      	ldrh	r3, [r3, r2]
			radius |= uartDat[4];
 80011a8:	7972      	ldrb	r2, [r6, #5]
 80011aa:	7931      	ldrb	r1, [r6, #4]
 80011ac:	0212      	lsls	r2, r2, #8
			ILI9341_DrawFilledCircle(x, y, radius, COLOR[uartDat[6]]);
 80011ae:	430a      	orrs	r2, r1
			y |= uartDat[2];
 80011b0:	78f1      	ldrb	r1, [r6, #3]
 80011b2:	78b0      	ldrb	r0, [r6, #2]
 80011b4:	0209      	lsls	r1, r1, #8
			ILI9341_DrawFilledCircle(x, y, radius, COLOR[uartDat[6]]);
 80011b6:	4301      	orrs	r1, r0
			x |= uartDat[0];
 80011b8:	7870      	ldrb	r0, [r6, #1]
 80011ba:	7837      	ldrb	r7, [r6, #0]
 80011bc:	0200      	lsls	r0, r0, #8
			ILI9341_DrawFilledCircle(x, y, radius, COLOR[uartDat[6]]);
 80011be:	4338      	orrs	r0, r7
 80011c0:	f7ff fb3a 	bl	8000838 <ILI9341_DrawFilledCircle>
		}
		if(RxData == 10){
 80011c4:	782b      	ldrb	r3, [r5, #0]
 80011c6:	2b0a      	cmp	r3, #10
 80011c8:	d11c      	bne.n	8001204 <HAL_UART_RxCpltCallback+0x228>
			uint16_t x0, y0, x1, y1;
			HAL_UART_Receive(&huart1, uartDat, 9, 10);
 80011ca:	4e53      	ldr	r6, [pc, #332]	; (8001318 <HAL_UART_RxCpltCallback+0x33c>)
 80011cc:	2209      	movs	r2, #9
 80011ce:	0031      	movs	r1, r6
 80011d0:	0020      	movs	r0, r4
 80011d2:	f001 fec1 	bl	8002f58 <HAL_UART_Receive>
			x1 = uartDat[5];
			x1 <<= 8;
			x1 |= uartDat[4];
			y1 = uartDat[7];
			y1 <<= 8;
			y1 |= uartDat[6];
 80011d6:	79f3      	ldrb	r3, [r6, #7]
 80011d8:	79b2      	ldrb	r2, [r6, #6]
 80011da:	021b      	lsls	r3, r3, #8
			ILI9341_DrawHollowRectangleCoord(x0, y0, x1, y1, COLOR[uartDat[8]]);
 80011dc:	4313      	orrs	r3, r2
			x1 |= uartDat[4];
 80011de:	7972      	ldrb	r2, [r6, #5]
 80011e0:	7931      	ldrb	r1, [r6, #4]
 80011e2:	0212      	lsls	r2, r2, #8
			ILI9341_DrawHollowRectangleCoord(x0, y0, x1, y1, COLOR[uartDat[8]]);
 80011e4:	430a      	orrs	r2, r1
			y0 |= uartDat[2];
 80011e6:	78f1      	ldrb	r1, [r6, #3]
 80011e8:	78b0      	ldrb	r0, [r6, #2]
 80011ea:	0209      	lsls	r1, r1, #8
			ILI9341_DrawHollowRectangleCoord(x0, y0, x1, y1, COLOR[uartDat[8]]);
 80011ec:	4301      	orrs	r1, r0
			x0 |= uartDat[0];
 80011ee:	7870      	ldrb	r0, [r6, #1]
 80011f0:	7837      	ldrb	r7, [r6, #0]
 80011f2:	0200      	lsls	r0, r0, #8
			ILI9341_DrawHollowRectangleCoord(x0, y0, x1, y1, COLOR[uartDat[8]]);
 80011f4:	7a36      	ldrb	r6, [r6, #8]
 80011f6:	4338      	orrs	r0, r7
 80011f8:	4f48      	ldr	r7, [pc, #288]	; (800131c <HAL_UART_RxCpltCallback+0x340>)
 80011fa:	0076      	lsls	r6, r6, #1
 80011fc:	5bf6      	ldrh	r6, [r6, r7]
 80011fe:	9600      	str	r6, [sp, #0]
 8001200:	f7ff fb79 	bl	80008f6 <ILI9341_DrawHollowRectangleCoord>
		}
		if(RxData == 11){
 8001204:	782b      	ldrb	r3, [r5, #0]
 8001206:	2b0b      	cmp	r3, #11
 8001208:	d11d      	bne.n	8001246 <HAL_UART_RxCpltCallback+0x26a>
			uint16_t x0, y0, x1, y1;
			HAL_UART_Receive(&huart1, uartDat, 9, 10);
 800120a:	4e43      	ldr	r6, [pc, #268]	; (8001318 <HAL_UART_RxCpltCallback+0x33c>)
 800120c:	2209      	movs	r2, #9
 800120e:	0031      	movs	r1, r6
 8001210:	3b01      	subs	r3, #1
 8001212:	0020      	movs	r0, r4
 8001214:	f001 fea0 	bl	8002f58 <HAL_UART_Receive>
			x1 = uartDat[5];
			x1 <<= 8;
			x1 |= uartDat[4];
			y1 = uartDat[7];
			y1 <<= 8;
			y1 |= uartDat[6];
 8001218:	79f3      	ldrb	r3, [r6, #7]
 800121a:	79b2      	ldrb	r2, [r6, #6]
 800121c:	021b      	lsls	r3, r3, #8
			ILI9341_DrawFilledRectangleCoord(x0, y0, x1, y1, COLOR[uartDat[8]]);
 800121e:	4313      	orrs	r3, r2
			x1 |= uartDat[4];
 8001220:	7972      	ldrb	r2, [r6, #5]
 8001222:	7931      	ldrb	r1, [r6, #4]
 8001224:	0212      	lsls	r2, r2, #8
			ILI9341_DrawFilledRectangleCoord(x0, y0, x1, y1, COLOR[uartDat[8]]);
 8001226:	430a      	orrs	r2, r1
			y0 |= uartDat[2];
 8001228:	78f1      	ldrb	r1, [r6, #3]
 800122a:	78b0      	ldrb	r0, [r6, #2]
 800122c:	0209      	lsls	r1, r1, #8
			ILI9341_DrawFilledRectangleCoord(x0, y0, x1, y1, COLOR[uartDat[8]]);
 800122e:	4301      	orrs	r1, r0
			x0 |= uartDat[0];
 8001230:	7870      	ldrb	r0, [r6, #1]
 8001232:	7837      	ldrb	r7, [r6, #0]
 8001234:	0200      	lsls	r0, r0, #8
			ILI9341_DrawFilledRectangleCoord(x0, y0, x1, y1, COLOR[uartDat[8]]);
 8001236:	7a36      	ldrb	r6, [r6, #8]
 8001238:	4338      	orrs	r0, r7
 800123a:	4f38      	ldr	r7, [pc, #224]	; (800131c <HAL_UART_RxCpltCallback+0x340>)
 800123c:	0076      	lsls	r6, r6, #1
 800123e:	5bf6      	ldrh	r6, [r6, r7]
 8001240:	9600      	str	r6, [sp, #0]
 8001242:	f7ff fba0 	bl	8000986 <ILI9341_DrawFilledRectangleCoord>
		}
		if(RxData == 12){
 8001246:	782b      	ldrb	r3, [r5, #0]
 8001248:	2b0c      	cmp	r3, #12
 800124a:	d11b      	bne.n	8001284 <HAL_UART_RxCpltCallback+0x2a8>
			char ch;
			uint16_t x = 0, y = 0;
			HAL_UART_Receive(&huart1, uartDat, 7, 10);
 800124c:	4e32      	ldr	r6, [pc, #200]	; (8001318 <HAL_UART_RxCpltCallback+0x33c>)
 800124e:	2207      	movs	r2, #7
 8001250:	0031      	movs	r1, r6
 8001252:	3b02      	subs	r3, #2
 8001254:	0020      	movs	r0, r4
 8001256:	f001 fe7f 	bl	8002f58 <HAL_UART_Receive>
			x = uartDat[2];
			x <<= 8;
			x |= uartDat[1];
			y = uartDat[4];
			y <<= 8;
			y |= uartDat[3];
 800125a:	7933      	ldrb	r3, [r6, #4]
 800125c:	78f2      	ldrb	r2, [r6, #3]
 800125e:	021b      	lsls	r3, r3, #8
			ILI9341_DrawChar(ch, FONT, x, y, COLOR[uartDat[5]], COLOR[uartDat[6]]);
 8001260:	4313      	orrs	r3, r2
			x |= uartDat[1];
 8001262:	78b2      	ldrb	r2, [r6, #2]
 8001264:	7871      	ldrb	r1, [r6, #1]
 8001266:	0212      	lsls	r2, r2, #8
			ILI9341_DrawChar(ch, FONT, x, y, COLOR[uartDat[5]], COLOR[uartDat[6]]);
 8001268:	430a      	orrs	r2, r1
 800126a:	79b1      	ldrb	r1, [r6, #6]
 800126c:	4f2b      	ldr	r7, [pc, #172]	; (800131c <HAL_UART_RxCpltCallback+0x340>)
 800126e:	0049      	lsls	r1, r1, #1
 8001270:	5bc9      	ldrh	r1, [r1, r7]
 8001272:	7830      	ldrb	r0, [r6, #0]
 8001274:	9101      	str	r1, [sp, #4]
 8001276:	7971      	ldrb	r1, [r6, #5]
 8001278:	0049      	lsls	r1, r1, #1
 800127a:	5bc9      	ldrh	r1, [r1, r7]
 800127c:	9100      	str	r1, [sp, #0]
 800127e:	4928      	ldr	r1, [pc, #160]	; (8001320 <HAL_UART_RxCpltCallback+0x344>)
 8001280:	f7ff fb9a 	bl	80009b8 <ILI9341_DrawChar>
		}
		if(RxData == 13){
 8001284:	782b      	ldrb	r3, [r5, #0]
 8001286:	2b0d      	cmp	r3, #13
 8001288:	d132      	bne.n	80012f0 <HAL_UART_RxCpltCallback+0x314>
			char str[40] = { 0 };
 800128a:	2600      	movs	r6, #0
 800128c:	2224      	movs	r2, #36	; 0x24
 800128e:	0031      	movs	r1, r6
 8001290:	a805      	add	r0, sp, #20
 8001292:	9604      	str	r6, [sp, #16]
 8001294:	f002 f834 	bl	8003300 <memset>
			uint8_t cnt = 0;
			uint16_t x = 0, y = 0;

			while(1){
				char data;
				HAL_UART_Receive(&huart1, (uint8_t*)&data, 1, 10);
 8001298:	270f      	movs	r7, #15
 800129a:	446f      	add	r7, sp
 800129c:	230a      	movs	r3, #10
 800129e:	2201      	movs	r2, #1
 80012a0:	0039      	movs	r1, r7
 80012a2:	0020      	movs	r0, r4
 80012a4:	f001 fe58 	bl	8002f58 <HAL_UART_Receive>

				if(data == '\0'){
 80012a8:	783b      	ldrb	r3, [r7, #0]
					str[cnt] = '\0';
 80012aa:	0032      	movs	r2, r6
				if(data == '\0'){
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d126      	bne.n	80012fe <HAL_UART_RxCpltCallback+0x322>
					str[cnt] = '\0';
 80012b0:	2110      	movs	r1, #16
 80012b2:	466a      	mov	r2, sp
 80012b4:	1852      	adds	r2, r2, r1
 80012b6:	5593      	strb	r3, [r2, r6]
					break;
				}
				else str[cnt++] = data;
			}
			HAL_UART_Receive(&huart1, uartDat, 6, 10);
 80012b8:	4e17      	ldr	r6, [pc, #92]	; (8001318 <HAL_UART_RxCpltCallback+0x33c>)
 80012ba:	2206      	movs	r2, #6
 80012bc:	0031      	movs	r1, r6
 80012be:	330a      	adds	r3, #10
 80012c0:	0020      	movs	r0, r4
 80012c2:	f001 fe49 	bl	8002f58 <HAL_UART_Receive>
			x = uartDat[1];
			x <<= 8;
			x |= uartDat[0];
			y = uartDat[3];
			y <<= 8;
			y |= uartDat[2];
 80012c6:	78f3      	ldrb	r3, [r6, #3]
 80012c8:	78b1      	ldrb	r1, [r6, #2]
			x |= uartDat[0];
 80012ca:	7872      	ldrb	r2, [r6, #1]
 80012cc:	7830      	ldrb	r0, [r6, #0]
			y |= uartDat[2];
 80012ce:	021b      	lsls	r3, r3, #8
			ILI9341_DrawText(str, FONT, x, y, COLOR[uartDat[4]], COLOR[uartDat[5]]);
 80012d0:	430b      	orrs	r3, r1
			x |= uartDat[0];
 80012d2:	0212      	lsls	r2, r2, #8
			ILI9341_DrawText(str, FONT, x, y, COLOR[uartDat[4]], COLOR[uartDat[5]]);
 80012d4:	7971      	ldrb	r1, [r6, #5]
 80012d6:	4302      	orrs	r2, r0
 80012d8:	4810      	ldr	r0, [pc, #64]	; (800131c <HAL_UART_RxCpltCallback+0x340>)
 80012da:	0049      	lsls	r1, r1, #1
 80012dc:	5a09      	ldrh	r1, [r1, r0]
 80012de:	9101      	str	r1, [sp, #4]
 80012e0:	7931      	ldrb	r1, [r6, #4]
 80012e2:	0049      	lsls	r1, r1, #1
 80012e4:	5a09      	ldrh	r1, [r1, r0]
 80012e6:	a804      	add	r0, sp, #16
 80012e8:	9100      	str	r1, [sp, #0]
 80012ea:	490d      	ldr	r1, [pc, #52]	; (8001320 <HAL_UART_RxCpltCallback+0x344>)
 80012ec:	f7ff fbac 	bl	8000a48 <ILI9341_DrawText>
		}
		if(RxData == 14){
 80012f0:	782b      	ldrb	r3, [r5, #0]
 80012f2:	2b0e      	cmp	r3, #14
 80012f4:	d101      	bne.n	80012fa <HAL_UART_RxCpltCallback+0x31e>
			ILI9341_Init();
 80012f6:	f7ff fc73 	bl	8000be0 <ILI9341_Init>
		}
//		HAL_UART_Receive_IT(&huart1, &RxData, 1);
	}
}
 80012fa:	b00f      	add	sp, #60	; 0x3c
 80012fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				else str[cnt++] = data;
 80012fe:	4669      	mov	r1, sp
 8001300:	2010      	movs	r0, #16
 8001302:	3601      	adds	r6, #1
 8001304:	1809      	adds	r1, r1, r0
 8001306:	b2f6      	uxtb	r6, r6
 8001308:	548b      	strb	r3, [r1, r2]
			while(1){
 800130a:	e7c5      	b.n	8001298 <HAL_UART_RxCpltCallback+0x2bc>
 800130c:	20000094 	.word	0x20000094
 8001310:	20000038 	.word	0x20000038
 8001314:	2000000c 	.word	0x2000000c
 8001318:	2000011c 	.word	0x2000011c
 800131c:	20000000 	.word	0x20000000
 8001320:	08003328 	.word	0x08003328

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001326:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_NVIC_SystemReset();
 8001328:	f000 f9fc 	bl	8001724 <HAL_NVIC_SystemReset>
	while (1)
 800132c:	e7fc      	b.n	8001328 <Error_Handler+0x4>
	...

08001330 <SystemClock_Config>:
{
 8001330:	b510      	push	{r4, lr}
 8001332:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001334:	2224      	movs	r2, #36	; 0x24
 8001336:	2100      	movs	r1, #0
 8001338:	a80f      	add	r0, sp, #60	; 0x3c
 800133a:	f001 ffe1 	bl	8003300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133e:	2214      	movs	r2, #20
 8001340:	2100      	movs	r1, #0
 8001342:	a801      	add	r0, sp, #4
 8001344:	f001 ffdc 	bl	8003300 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001348:	2220      	movs	r2, #32
 800134a:	2100      	movs	r1, #0
 800134c:	a806      	add	r0, sp, #24
 800134e:	f001 ffd7 	bl	8003300 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001352:	491a      	ldr	r1, [pc, #104]	; (80013bc <SystemClock_Config+0x8c>)
 8001354:	4a1a      	ldr	r2, [pc, #104]	; (80013c0 <SystemClock_Config+0x90>)
 8001356:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001358:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800135a:	401a      	ands	r2, r3
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	4313      	orrs	r3, r2
 8001362:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001364:	2302      	movs	r3, #2
 8001366:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001368:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800136a:	2300      	movs	r3, #0
 800136c:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	02db      	lsls	r3, r3, #11
 8001372:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001374:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001376:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001378:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137c:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800137e:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001380:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001382:	f000 fb4b 	bl	8001a1c <HAL_RCC_OscConfig>
 8001386:	2800      	cmp	r0, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x5e>
    Error_Handler();
 800138a:	f7ff ffcb 	bl	8001324 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001392:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001394:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001396:	3b0c      	subs	r3, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001398:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800139a:	0021      	movs	r1, r4
 800139c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139e:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013a0:	f000 fdbe 	bl	8001f20 <HAL_RCC_ClockConfig>
 80013a4:	2800      	cmp	r0, #0
 80013a6:	d1f0      	bne.n	800138a <SystemClock_Config+0x5a>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013a8:	9008      	str	r0, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013aa:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013ac:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ae:	f000 fea5 	bl	80020fc <HAL_RCCEx_PeriphCLKConfig>
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d1e9      	bne.n	800138a <SystemClock_Config+0x5a>
}
 80013b6:	b01c      	add	sp, #112	; 0x70
 80013b8:	bd10      	pop	{r4, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	40007000 	.word	0x40007000
 80013c0:	ffffe7ff 	.word	0xffffe7ff

080013c4 <main>:
{
 80013c4:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	2401      	movs	r4, #1
{
 80013c8:	b088      	sub	sp, #32
  HAL_Init();
 80013ca:	f000 f93d 	bl	8001648 <HAL_Init>
  SystemClock_Config();
 80013ce:	f7ff ffaf 	bl	8001330 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	2214      	movs	r2, #20
 80013d4:	2100      	movs	r1, #0
 80013d6:	a803      	add	r0, sp, #12
 80013d8:	f001 ff92 	bl	8003300 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <main+0xd0>)
  HAL_GPIO_WritePin(GPIOB, SPI_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80013e0:	482d      	ldr	r0, [pc, #180]	; (8001498 <main+0xd4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e4:	4322      	orrs	r2, r4
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80013e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ea:	4022      	ands	r2, r4
 80013ec:	9201      	str	r2, [sp, #4]
 80013ee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f2:	430a      	orrs	r2, r1
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, SPI_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	400b      	ands	r3, r1
 80013fc:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, SPI_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80013fe:	3111      	adds	r1, #17
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001400:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, SPI_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001402:	f000 fabd 	bl	8001980 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPI_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8001406:	2313      	movs	r3, #19
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	4822      	ldr	r0, [pc, #136]	; (8001498 <main+0xd4>)
  GPIO_InitStruct.Pin = SPI_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 800140e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	3b10      	subs	r3, #16
 8001414:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	f000 f9f2 	bl	8001800 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 800141c:	481f      	ldr	r0, [pc, #124]	; (800149c <main+0xd8>)
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <main+0xdc>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001420:	6084      	str	r4, [r0, #8]
  hspi1.Instance = SPI1;
 8001422:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001424:	2382      	movs	r3, #130	; 0x82
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	6043      	str	r3, [r0, #4]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800142a:	33fc      	adds	r3, #252	; 0xfc
 800142c:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 800142e:	3bfa      	subs	r3, #250	; 0xfa
 8001430:	3bff      	subs	r3, #255	; 0xff
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001432:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001434:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001436:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001438:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800143a:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800143c:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143e:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001440:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001442:	f000 ffbf 	bl	80023c4 <HAL_SPI_Init>
 8001446:	42a0      	cmp	r0, r4
 8001448:	d001      	beq.n	800144e <main+0x8a>
    Error_Handler();
 800144a:	f7ff ff6b 	bl	8001324 <Error_Handler>
  huart1.Instance = USART1;
 800144e:	4c15      	ldr	r4, [pc, #84]	; (80014a4 <main+0xe0>)
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <main+0xe4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	60a0      	str	r0, [r4, #8]
  huart1.Instance = USART1;
 8001454:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 115200;
 8001456:	23e1      	movs	r3, #225	; 0xe1
 8001458:	025b      	lsls	r3, r3, #9
 800145a:	6063      	str	r3, [r4, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800145c:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800145e:	60e0      	str	r0, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001460:	6120      	str	r0, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	61a0      	str	r0, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	61e0      	str	r0, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001466:	6220      	str	r0, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001468:	6260      	str	r0, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800146a:	0020      	movs	r0, r4
  huart1.Init.Mode = UART_MODE_TX_RX;
 800146c:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800146e:	f001 fe57 	bl	8003120 <HAL_UART_Init>
 8001472:	1e01      	subs	r1, r0, #0
 8001474:	d1e9      	bne.n	800144a <main+0x86>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001476:	0002      	movs	r2, r0
 8001478:	201b      	movs	r0, #27
 800147a:	f000 f91d 	bl	80016b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800147e:	201b      	movs	r0, #27
 8001480:	f000 f944 	bl	800170c <HAL_NVIC_EnableIRQ>
  ILI9341_Init();
 8001484:	f7ff fbac 	bl	8000be0 <ILI9341_Init>
		HAL_UART_Receive_IT(&huart1, &RxData, 1);
 8001488:	2201      	movs	r2, #1
 800148a:	0020      	movs	r0, r4
 800148c:	4907      	ldr	r1, [pc, #28]	; (80014ac <main+0xe8>)
 800148e:	f001 fedd 	bl	800324c <HAL_UART_Receive_IT>
	while (1)
 8001492:	e7f9      	b.n	8001488 <main+0xc4>
 8001494:	40021000 	.word	0x40021000
 8001498:	50000400 	.word	0x50000400
 800149c:	2000003c 	.word	0x2000003c
 80014a0:	40013000 	.word	0x40013000
 80014a4:	20000094 	.word	0x20000094
 80014a8:	40013800 	.word	0x40013800
 80014ac:	20000038 	.word	0x20000038

080014b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b0:	2201      	movs	r2, #1
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_MspInit+0x18>)
 80014b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014b6:	430a      	orrs	r2, r1
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	2280      	movs	r2, #128	; 0x80
 80014bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80014be:	0552      	lsls	r2, r2, #21
 80014c0:	430a      	orrs	r2, r1
 80014c2:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c4:	4770      	bx	lr
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014cc:	b510      	push	{r4, lr}
 80014ce:	0004      	movs	r4, r0
 80014d0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	2214      	movs	r2, #20
 80014d4:	2100      	movs	r1, #0
 80014d6:	a801      	add	r0, sp, #4
 80014d8:	f001 ff12 	bl	8003300 <memset>
  if(hspi->Instance==SPI1)
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_SPI_MspInit+0x50>)
 80014de:	6822      	ldr	r2, [r4, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d118      	bne.n	8001516 <HAL_SPI_MspInit+0x4a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_SPI_MspInit+0x54>)
 80014e8:	0152      	lsls	r2, r2, #5
 80014ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ee:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014f2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	430a      	orrs	r2, r1
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	400b      	ands	r3, r1
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001504:	23e0      	movs	r3, #224	; 0xe0
 8001506:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	3bde      	subs	r3, #222	; 0xde
 800150a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f000 f975 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001516:	b006      	add	sp, #24
 8001518:	bd10      	pop	{r4, pc}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	40013000 	.word	0x40013000
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001524:	b510      	push	{r4, lr}
 8001526:	0004      	movs	r4, r0
 8001528:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	2214      	movs	r2, #20
 800152c:	2100      	movs	r1, #0
 800152e:	a801      	add	r0, sp, #4
 8001530:	f001 fee6 	bl	8003300 <memset>
  if(huart->Instance==USART1)
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_UART_MspInit+0x54>)
 8001536:	6822      	ldr	r2, [r4, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d11b      	bne.n	8001574 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_UART_MspInit+0x58>)
 8001540:	01d2      	lsls	r2, r2, #7
 8001542:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001546:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 800154a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	430a      	orrs	r2, r1
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	400b      	ands	r3, r1
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800155c:	23c0      	movs	r3, #192	; 0xc0
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	185b      	adds	r3, r3, r1
 8001568:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800156a:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800156e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f000 f946 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001574:	b006      	add	sp, #24
 8001576:	bd10      	pop	{r4, pc}
 8001578:	40013800 	.word	0x40013800
 800157c:	40021000 	.word	0x40021000

08001580 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <NMI_Handler>

08001582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001582:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
	  HAL_NVIC_SystemReset();
 8001584:	f000 f8ce 	bl	8001724 <HAL_NVIC_SystemReset>
  while (1)
 8001588:	e7fc      	b.n	8001584 <HardFault_Handler+0x2>

0800158a <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800158a:	4770      	bx	lr

0800158c <PendSV_Handler>:
 800158c:	4770      	bx	lr

0800158e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158e:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 f86e 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bd10      	pop	{r4, pc}
	...

08001598 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001598:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800159a:	4802      	ldr	r0, [pc, #8]	; (80015a4 <USART1_IRQHandler+0xc>)
 800159c:	f001 f87a 	bl	8002694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015a0:	bd10      	pop	{r4, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	20000094 	.word	0x20000094

080015a8 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	4770      	bx	lr
	...

080015ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80015ae:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015b0:	f7ff fffa 	bl	80015a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80015b6:	490d      	ldr	r1, [pc, #52]	; (80015ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80015b8:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <LoopForever+0xe>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015cc:	4c0a      	ldr	r4, [pc, #40]	; (80015f8 <LoopForever+0x16>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015da:	f001 fe6d 	bl	80032b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015de:	f7ff fef1 	bl	80013c4 <main>

080015e2 <LoopForever>:

LoopForever:
    b LoopForever
 80015e2:	e7fe      	b.n	80015e2 <LoopForever>
   ldr   r0, =_estack
 80015e4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ec:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80015f0:	080044b0 	.word	0x080044b0
  ldr r2, =_sbss
 80015f4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80015f8:	2000012c 	.word	0x2000012c

080015fc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC1_COMP_IRQHandler>
	...

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b570      	push	{r4, r5, r6, lr}
 8001602:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	20fa      	movs	r0, #250	; 0xfa
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_InitTick+0x3c>)
 8001608:	0080      	lsls	r0, r0, #2
 800160a:	7819      	ldrb	r1, [r3, #0]
 800160c:	f7fe fd90 	bl	8000130 <__udivsi3>
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_InitTick+0x40>)
 8001612:	0001      	movs	r1, r0
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	f7fe fd8b 	bl	8000130 <__udivsi3>
 800161a:	f000 f891 	bl	8001740 <HAL_SYSTICK_Config>
 800161e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001620:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001622:	2c00      	cmp	r4, #0
 8001624:	d109      	bne.n	800163a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	2d03      	cmp	r5, #3
 8001628:	d807      	bhi.n	800163a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162a:	3802      	subs	r0, #2
 800162c:	0022      	movs	r2, r4
 800162e:	0029      	movs	r1, r5
 8001630:	f000 f842 	bl	80016b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001634:	0020      	movs	r0, r4
 8001636:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_InitTick+0x44>)
 8001638:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800163a:	bd70      	pop	{r4, r5, r6, pc}
 800163c:	20000014 	.word	0x20000014
 8001640:	20000010 	.word	0x20000010
 8001644:	20000018 	.word	0x20000018

08001648 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001648:	2340      	movs	r3, #64	; 0x40
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_Init+0x24>)
{
 800164c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800164e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001650:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001652:	430b      	orrs	r3, r1
 8001654:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001656:	f7ff ffd3 	bl	8001600 <HAL_InitTick>
 800165a:	1e04      	subs	r4, r0, #0
 800165c:	d103      	bne.n	8001666 <HAL_Init+0x1e>
    HAL_MspInit();
 800165e:	f7ff ff27 	bl	80014b0 <HAL_MspInit>
}
 8001662:	0020      	movs	r0, r4
 8001664:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001666:	2401      	movs	r4, #1
 8001668:	e7fb      	b.n	8001662 <HAL_Init+0x1a>
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	40022000 	.word	0x40022000

08001670 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001670:	4a03      	ldr	r2, [pc, #12]	; (8001680 <HAL_IncTick+0x10>)
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <HAL_IncTick+0x14>)
 8001674:	6811      	ldr	r1, [r2, #0]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	185b      	adds	r3, r3, r1
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	4770      	bx	lr
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	20000128 	.word	0x20000128
 8001684:	20000014 	.word	0x20000014

08001688 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001688:	4b01      	ldr	r3, [pc, #4]	; (8001690 <HAL_GetTick+0x8>)
 800168a:	6818      	ldr	r0, [r3, #0]
}
 800168c:	4770      	bx	lr
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	20000128 	.word	0x20000128

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b570      	push	{r4, r5, r6, lr}
 8001696:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff fff6 	bl	8001688 <HAL_GetTick>
 800169c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169e:	1c63      	adds	r3, r4, #1
 80016a0:	d002      	beq.n	80016a8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a2:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <HAL_Delay+0x20>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016a8:	f7ff ffee 	bl	8001688 <HAL_GetTick>
 80016ac:	1b40      	subs	r0, r0, r5
 80016ae:	42a0      	cmp	r0, r4
 80016b0:	d3fa      	bcc.n	80016a8 <HAL_Delay+0x14>
  {
  }
}
 80016b2:	bd70      	pop	{r4, r5, r6, pc}
 80016b4:	20000014 	.word	0x20000014

080016b8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b8:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ba:	25ff      	movs	r5, #255	; 0xff
 80016bc:	2403      	movs	r4, #3
 80016be:	002a      	movs	r2, r5
 80016c0:	4004      	ands	r4, r0
 80016c2:	00e4      	lsls	r4, r4, #3
 80016c4:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016c6:	0189      	lsls	r1, r1, #6
 80016c8:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ca:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016cc:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ce:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80016d0:	2800      	cmp	r0, #0
 80016d2:	db0a      	blt.n	80016ea <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016d4:	24c0      	movs	r4, #192	; 0xc0
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_NVIC_SetPriority+0x4c>)
 80016d8:	0880      	lsrs	r0, r0, #2
 80016da:	0080      	lsls	r0, r0, #2
 80016dc:	18c0      	adds	r0, r0, r3
 80016de:	00a4      	lsls	r4, r4, #2
 80016e0:	5903      	ldr	r3, [r0, r4]
 80016e2:	401a      	ands	r2, r3
 80016e4:	4311      	orrs	r1, r2
 80016e6:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80016e8:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ea:	200f      	movs	r0, #15
 80016ec:	4003      	ands	r3, r0
 80016ee:	3b08      	subs	r3, #8
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <HAL_NVIC_SetPriority+0x50>)
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	181b      	adds	r3, r3, r0
 80016f8:	69d8      	ldr	r0, [r3, #28]
 80016fa:	4002      	ands	r2, r0
 80016fc:	4311      	orrs	r1, r2
 80016fe:	61d9      	str	r1, [r3, #28]
 8001700:	e7f2      	b.n	80016e8 <HAL_NVIC_SetPriority+0x30>
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800170c:	2800      	cmp	r0, #0
 800170e:	db05      	blt.n	800171c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001710:	231f      	movs	r3, #31
 8001712:	4018      	ands	r0, r3
 8001714:	3b1e      	subs	r3, #30
 8001716:	4083      	lsls	r3, r0
 8001718:	4a01      	ldr	r2, [pc, #4]	; (8001720 <HAL_NVIC_EnableIRQ+0x14>)
 800171a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800171c:	4770      	bx	lr
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	e000e100 	.word	0xe000e100

08001724 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001724:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_NVIC_SystemReset+0x14>)
 800172a:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_NVIC_SystemReset+0x18>)
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001732:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8001734:	e7fd      	b.n	8001732 <HAL_NVIC_SystemReset+0xe>
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	e000ed00 	.word	0xe000ed00
 800173c:	05fa0004 	.word	0x05fa0004

08001740 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	2280      	movs	r2, #128	; 0x80
 8001742:	1e43      	subs	r3, r0, #1
 8001744:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001746:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001748:	4293      	cmp	r3, r2
 800174a:	d20d      	bcs.n	8001768 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800174c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001750:	4807      	ldr	r0, [pc, #28]	; (8001770 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001754:	6a03      	ldr	r3, [r0, #32]
 8001756:	0609      	lsls	r1, r1, #24
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	430b      	orrs	r3, r1
 800175e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001762:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001768:	4770      	bx	lr
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	e000e010 	.word	0xe000e010
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001774:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001776:	1d85      	adds	r5, r0, #6
 8001778:	7feb      	ldrb	r3, [r5, #31]
 800177a:	1d44      	adds	r4, r0, #5
 800177c:	2b02      	cmp	r3, #2
 800177e:	d005      	beq.n	800178c <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001780:	2304      	movs	r3, #4
 8001782:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001784:	2300      	movs	r3, #0

    return HAL_ERROR;
 8001786:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001788:	77e3      	strb	r3, [r4, #31]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 800178a:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800178c:	210e      	movs	r1, #14
 800178e:	6803      	ldr	r3, [r0, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	438a      	bics	r2, r1
 8001794:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001796:	2201      	movs	r2, #1
 8001798:	6819      	ldr	r1, [r3, #0]
 800179a:	4391      	bics	r1, r2
 800179c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800179e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80017a0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80017a2:	201c      	movs	r0, #28
 80017a4:	4003      	ands	r3, r0
 80017a6:	0010      	movs	r0, r2
 80017a8:	4098      	lsls	r0, r3
 80017aa:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 80017ac:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80017ae:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 80017b0:	77e0      	strb	r0, [r4, #31]
    return status;
 80017b2:	e7ea      	b.n	800178a <HAL_DMA_Abort+0x16>

080017b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017b6:	1d84      	adds	r4, r0, #6
 80017b8:	7fe3      	ldrb	r3, [r4, #31]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d004      	beq.n	80017c8 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017be:	2304      	movs	r3, #4
 80017c0:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 80017c2:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c8:	210e      	movs	r1, #14
 80017ca:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017cc:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	438a      	bics	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80017d4:	2201      	movs	r2, #1
 80017d6:	6819      	ldr	r1, [r3, #0]
 80017d8:	4391      	bics	r1, r2
 80017da:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017dc:	231c      	movs	r3, #28
 80017de:	402b      	ands	r3, r5
 80017e0:	0015      	movs	r5, r2
 80017e2:	409d      	lsls	r5, r3
 80017e4:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 80017e6:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017e8:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80017ea:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80017ec:	2400      	movs	r4, #0
 80017ee:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 80017f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 80017f2:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80017f4:	42a2      	cmp	r2, r4
 80017f6:	d0e5      	beq.n	80017c4 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80017f8:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80017fa:	0023      	movs	r3, r4
 80017fc:	e7e2      	b.n	80017c4 <HAL_DMA_Abort_IT+0x10>
	...

08001800 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001800:	4a58      	ldr	r2, [pc, #352]	; (8001964 <HAL_GPIO_Init+0x164>)
{
 8001802:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001804:	1882      	adds	r2, r0, r2
 8001806:	1e54      	subs	r4, r2, #1
 8001808:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800180a:	2300      	movs	r3, #0
{
 800180c:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800180e:	3205      	adds	r2, #5
{
 8001810:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001812:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001814:	9a03      	ldr	r2, [sp, #12]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	0014      	movs	r4, r2
 800181a:	40dc      	lsrs	r4, r3
 800181c:	d101      	bne.n	8001822 <HAL_GPIO_Init+0x22>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 800181e:	b007      	add	sp, #28
 8001820:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001822:	2101      	movs	r1, #1
 8001824:	000d      	movs	r5, r1
 8001826:	0014      	movs	r4, r2
 8001828:	409d      	lsls	r5, r3
 800182a:	402c      	ands	r4, r5
 800182c:	468c      	mov	ip, r1
 800182e:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8001830:	422a      	tst	r2, r5
 8001832:	d100      	bne.n	8001836 <HAL_GPIO_Init+0x36>
 8001834:	e094      	b.n	8001960 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001836:	2403      	movs	r4, #3
 8001838:	9a03      	ldr	r2, [sp, #12]
 800183a:	005e      	lsls	r6, r3, #1
 800183c:	6852      	ldr	r2, [r2, #4]
 800183e:	9201      	str	r2, [sp, #4]
 8001840:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001842:	40b4      	lsls	r4, r6
 8001844:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001846:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001848:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800184a:	4564      	cmp	r4, ip
 800184c:	d82a      	bhi.n	80018a4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 800184e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001850:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001852:	9903      	ldr	r1, [sp, #12]
 8001854:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001856:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001858:	40b4      	lsls	r4, r6
 800185a:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 800185c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800185e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001860:	43ac      	bics	r4, r5
 8001862:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001864:	090c      	lsrs	r4, r1, #4
 8001866:	4661      	mov	r1, ip
 8001868:	400c      	ands	r4, r1
 800186a:	409c      	lsls	r4, r3
 800186c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800186e:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8001870:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001872:	9904      	ldr	r1, [sp, #16]
 8001874:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001876:	9903      	ldr	r1, [sp, #12]
 8001878:	688c      	ldr	r4, [r1, #8]
 800187a:	40b4      	lsls	r4, r6
 800187c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800187e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001880:	2a02      	cmp	r2, #2
 8001882:	d111      	bne.n	80018a8 <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001884:	2507      	movs	r5, #7
 8001886:	210f      	movs	r1, #15
 8001888:	401d      	ands	r5, r3
 800188a:	00ad      	lsls	r5, r5, #2
 800188c:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 800188e:	08dc      	lsrs	r4, r3, #3
 8001890:	00a4      	lsls	r4, r4, #2
 8001892:	1904      	adds	r4, r0, r4
 8001894:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001896:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001898:	9903      	ldr	r1, [sp, #12]
 800189a:	6909      	ldr	r1, [r1, #16]
 800189c:	40a9      	lsls	r1, r5
 800189e:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80018a0:	6227      	str	r7, [r4, #32]
 80018a2:	e001      	b.n	80018a8 <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a4:	2a03      	cmp	r2, #3
 80018a6:	d1e3      	bne.n	8001870 <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a8:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 80018aa:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018ac:	9904      	ldr	r1, [sp, #16]
 80018ae:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b0:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 80018b2:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018b4:	22c0      	movs	r2, #192	; 0xc0
 80018b6:	9901      	ldr	r1, [sp, #4]
 80018b8:	0292      	lsls	r2, r2, #10
 80018ba:	4211      	tst	r1, r2
 80018bc:	d050      	beq.n	8001960 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	2701      	movs	r7, #1
 80018c0:	4c29      	ldr	r4, [pc, #164]	; (8001968 <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018c2:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018c6:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c8:	433a      	orrs	r2, r7
 80018ca:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80018cc:	4a27      	ldr	r2, [pc, #156]	; (800196c <HAL_GPIO_Init+0x16c>)
 80018ce:	089c      	lsrs	r4, r3, #2
 80018d0:	00a4      	lsls	r4, r4, #2
 80018d2:	18a4      	adds	r4, r4, r2
 80018d4:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018d6:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80018d8:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018da:	220f      	movs	r2, #15
 80018dc:	00ad      	lsls	r5, r5, #2
 80018de:	40aa      	lsls	r2, r5
 80018e0:	4661      	mov	r1, ip
 80018e2:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80018e4:	22a0      	movs	r2, #160	; 0xa0
 80018e6:	05d2      	lsls	r2, r2, #23
 80018e8:	4694      	mov	ip, r2
 80018ea:	2200      	movs	r2, #0
 80018ec:	4560      	cmp	r0, ip
 80018ee:	d00d      	beq.n	800190c <HAL_GPIO_Init+0x10c>
 80018f0:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <HAL_GPIO_Init+0x170>)
 80018f2:	4694      	mov	ip, r2
 80018f4:	003a      	movs	r2, r7
 80018f6:	4560      	cmp	r0, ip
 80018f8:	d008      	beq.n	800190c <HAL_GPIO_Init+0x10c>
 80018fa:	4f1e      	ldr	r7, [pc, #120]	; (8001974 <HAL_GPIO_Init+0x174>)
 80018fc:	1892      	adds	r2, r2, r2
 80018fe:	42b8      	cmp	r0, r7
 8001900:	d004      	beq.n	800190c <HAL_GPIO_Init+0x10c>
 8001902:	4f1d      	ldr	r7, [pc, #116]	; (8001978 <HAL_GPIO_Init+0x178>)
 8001904:	0032      	movs	r2, r6
 8001906:	42b8      	cmp	r0, r7
 8001908:	d000      	beq.n	800190c <HAL_GPIO_Init+0x10c>
 800190a:	9a05      	ldr	r2, [sp, #20]
 800190c:	40aa      	lsls	r2, r5
 800190e:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8001910:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001912:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8001914:	000d      	movs	r5, r1
        temp = EXTI->RTSR;
 8001916:	4a19      	ldr	r2, [pc, #100]	; (800197c <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 8001918:	43cc      	mvns	r4, r1
        temp = EXTI->RTSR;
 800191a:	6896      	ldr	r6, [r2, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800191c:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800191e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001920:	02c9      	lsls	r1, r1, #11
 8001922:	d401      	bmi.n	8001928 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8001924:	0035      	movs	r5, r6
 8001926:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8001928:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800192a:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800192c:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800192e:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8001930:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001932:	0289      	lsls	r1, r1, #10
 8001934:	d401      	bmi.n	800193a <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8001936:	0035      	movs	r5, r6
 8001938:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 800193a:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 800193c:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800193e:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001940:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8001942:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001944:	0389      	lsls	r1, r1, #14
 8001946:	d401      	bmi.n	800194c <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8001948:	0035      	movs	r5, r6
 800194a:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800194c:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 800194e:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8001950:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001952:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8001954:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001956:	03c9      	lsls	r1, r1, #15
 8001958:	d401      	bmi.n	800195e <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 800195a:	4025      	ands	r5, r4
 800195c:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 800195e:	6016      	str	r6, [r2, #0]
    position++;
 8001960:	3301      	adds	r3, #1
 8001962:	e757      	b.n	8001814 <HAL_GPIO_Init+0x14>
 8001964:	afffe400 	.word	0xafffe400
 8001968:	40021000 	.word	0x40021000
 800196c:	40010000 	.word	0x40010000
 8001970:	50000400 	.word	0x50000400
 8001974:	50000800 	.word	0x50000800
 8001978:	50000c00 	.word	0x50000c00
 800197c:	40010400 	.word	0x40010400

08001980 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001980:	2a00      	cmp	r2, #0
 8001982:	d001      	beq.n	8001988 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001984:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001986:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001988:	6281      	str	r1, [r0, #40]	; 0x28
}
 800198a:	e7fc      	b.n	8001986 <HAL_GPIO_WritePin+0x6>

0800198c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800198c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8001990:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001992:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001994:	4022      	ands	r2, r4
 8001996:	2a08      	cmp	r2, #8
 8001998:	d031      	beq.n	80019fe <HAL_RCC_GetSysClockFreq+0x72>
 800199a:	2a0c      	cmp	r2, #12
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x26>
 800199e:	2a04      	cmp	r2, #4
 80019a0:	d125      	bne.n	80019ee <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019a2:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019a6:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80019a8:	17c0      	asrs	r0, r0, #31
 80019aa:	4018      	ands	r0, r3
 80019ac:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x80>)
 80019ae:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80019b0:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019b2:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019b4:	4816      	ldr	r0, [pc, #88]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019b6:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019b8:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ba:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019bc:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019be:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019c0:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c2:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019c4:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c6:	4211      	tst	r1, r2
 80019c8:	d009      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x88>)
 80019cc:	2300      	movs	r3, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	f7fe fc94 	bl	80002fc <__aeabi_lmul>
 80019d4:	0022      	movs	r2, r4
 80019d6:	2300      	movs	r3, #0
 80019d8:	f7fe fc70 	bl	80002bc <__aeabi_uldivmod>
 80019dc:	e7e8      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2310      	movs	r3, #16
 80019e2:	421a      	tst	r2, r3
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80019e6:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x8c>)
 80019e8:	e7f0      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x80>)
 80019ec:	e7ee      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019ee:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019f0:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019f2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019f4:	041b      	lsls	r3, r3, #16
 80019f6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019f8:	3301      	adds	r3, #1
 80019fa:	4098      	lsls	r0, r3
      break;
 80019fc:	e7d8      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x88>)
 8001a00:	e7d6      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x24>
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	40021000 	.word	0x40021000
 8001a08:	ff48e500 	.word	0xff48e500
 8001a0c:	00f42400 	.word	0x00f42400
 8001a10:	08004484 	.word	0x08004484
 8001a14:	007a1200 	.word	0x007a1200
 8001a18:	003d0900 	.word	0x003d0900

08001a1c <HAL_RCC_OscConfig>:
{
 8001a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1e:	0005      	movs	r5, r0
 8001a20:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d05a      	beq.n	8001adc <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a26:	230c      	movs	r3, #12
 8001a28:	4cbe      	ldr	r4, [pc, #760]	; (8001d24 <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2a:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a2c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a2e:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a30:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	025b      	lsls	r3, r3, #9
 8001a36:	0019      	movs	r1, r3
 8001a38:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3a:	07d2      	lsls	r2, r2, #31
 8001a3c:	d442      	bmi.n	8001ac4 <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3e:	682b      	ldr	r3, [r5, #0]
 8001a40:	079b      	lsls	r3, r3, #30
 8001a42:	d500      	bpl.n	8001a46 <HAL_RCC_OscConfig+0x2a>
 8001a44:	e08b      	b.n	8001b5e <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a46:	682b      	ldr	r3, [r5, #0]
 8001a48:	06db      	lsls	r3, r3, #27
 8001a4a:	d529      	bpl.n	8001aa0 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a4c:	2e00      	cmp	r6, #0
 8001a4e:	d000      	beq.n	8001a52 <HAL_RCC_OscConfig+0x36>
 8001a50:	e0dc      	b.n	8001c0c <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	059b      	lsls	r3, r3, #22
 8001a56:	d502      	bpl.n	8001a5e <HAL_RCC_OscConfig+0x42>
 8001a58:	69eb      	ldr	r3, [r5, #28]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d03e      	beq.n	8001adc <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a5e:	6862      	ldr	r2, [r4, #4]
 8001a60:	49b1      	ldr	r1, [pc, #708]	; (8001d28 <HAL_RCC_OscConfig+0x30c>)
 8001a62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001a64:	400a      	ands	r2, r1
 8001a66:	431a      	orrs	r2, r3
 8001a68:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a6a:	6861      	ldr	r1, [r4, #4]
 8001a6c:	6a2a      	ldr	r2, [r5, #32]
 8001a6e:	0209      	lsls	r1, r1, #8
 8001a70:	0a09      	lsrs	r1, r1, #8
 8001a72:	0612      	lsls	r2, r2, #24
 8001a74:	430a      	orrs	r2, r1
 8001a76:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a78:	2280      	movs	r2, #128	; 0x80
 8001a7a:	0b5b      	lsrs	r3, r3, #13
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	0212      	lsls	r2, r2, #8
 8001a80:	409a      	lsls	r2, r3
 8001a82:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a84:	68e1      	ldr	r1, [r4, #12]
 8001a86:	060a      	lsls	r2, r1, #24
 8001a88:	49a8      	ldr	r1, [pc, #672]	; (8001d2c <HAL_RCC_OscConfig+0x310>)
 8001a8a:	0f12      	lsrs	r2, r2, #28
 8001a8c:	5c8a      	ldrb	r2, [r1, r2]
 8001a8e:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a90:	4aa7      	ldr	r2, [pc, #668]	; (8001d30 <HAL_RCC_OscConfig+0x314>)
 8001a92:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8001a94:	4ba7      	ldr	r3, [pc, #668]	; (8001d34 <HAL_RCC_OscConfig+0x318>)
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	f7ff fdb2 	bl	8001600 <HAL_InitTick>
        if(status != HAL_OK)
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	d134      	bne.n	8001b0a <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa0:	682b      	ldr	r3, [r5, #0]
 8001aa2:	071b      	lsls	r3, r3, #28
 8001aa4:	d500      	bpl.n	8001aa8 <HAL_RCC_OscConfig+0x8c>
 8001aa6:	e0e8      	b.n	8001c7a <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa8:	682b      	ldr	r3, [r5, #0]
 8001aaa:	075b      	lsls	r3, r3, #29
 8001aac:	d500      	bpl.n	8001ab0 <HAL_RCC_OscConfig+0x94>
 8001aae:	e10a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ab0:	682b      	ldr	r3, [r5, #0]
 8001ab2:	069b      	lsls	r3, r3, #26
 8001ab4:	d500      	bpl.n	8001ab8 <HAL_RCC_OscConfig+0x9c>
 8001ab6:	e18e      	b.n	8001dd6 <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d000      	beq.n	8001ac0 <HAL_RCC_OscConfig+0xa4>
 8001abe:	e1bd      	b.n	8001e3c <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	e022      	b.n	8001b0a <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac4:	2e08      	cmp	r6, #8
 8001ac6:	d003      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ac8:	2e0c      	cmp	r6, #12
 8001aca:	d109      	bne.n	8001ae0 <HAL_RCC_OscConfig+0xc4>
 8001acc:	2f00      	cmp	r7, #0
 8001ace:	d007      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	039b      	lsls	r3, r3, #14
 8001ad4:	d5b3      	bpl.n	8001a3e <HAL_RCC_OscConfig+0x22>
 8001ad6:	686b      	ldr	r3, [r5, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1b0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8001adc:	2001      	movs	r0, #1
 8001ade:	e014      	b.n	8001b0a <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae0:	686a      	ldr	r2, [r5, #4]
 8001ae2:	428a      	cmp	r2, r1
 8001ae4:	d113      	bne.n	8001b0e <HAL_RCC_OscConfig+0xf2>
 8001ae6:	6822      	ldr	r2, [r4, #0]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001aec:	f7ff fdcc 	bl	8001688 <HAL_GetTick>
 8001af0:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001af2:	2280      	movs	r2, #128	; 0x80
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	0292      	lsls	r2, r2, #10
 8001af8:	4213      	tst	r3, r2
 8001afa:	d1a0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fdc4 	bl	8001688 <HAL_GetTick>
 8001b00:	9b00      	ldr	r3, [sp, #0]
 8001b02:	1ac0      	subs	r0, r0, r3
 8001b04:	2864      	cmp	r0, #100	; 0x64
 8001b06:	d9f4      	bls.n	8001af2 <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 8001b08:	2003      	movs	r0, #3
}
 8001b0a:	b005      	add	sp, #20
 8001b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0e:	21a0      	movs	r1, #160	; 0xa0
 8001b10:	02c9      	lsls	r1, r1, #11
 8001b12:	428a      	cmp	r2, r1
 8001b14:	d105      	bne.n	8001b22 <HAL_RCC_OscConfig+0x106>
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	6821      	ldr	r1, [r4, #0]
 8001b1a:	02d2      	lsls	r2, r2, #11
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	6022      	str	r2, [r4, #0]
 8001b20:	e7e1      	b.n	8001ae6 <HAL_RCC_OscConfig+0xca>
 8001b22:	6821      	ldr	r1, [r4, #0]
 8001b24:	4884      	ldr	r0, [pc, #528]	; (8001d38 <HAL_RCC_OscConfig+0x31c>)
 8001b26:	4001      	ands	r1, r0
 8001b28:	6021      	str	r1, [r4, #0]
 8001b2a:	6821      	ldr	r1, [r4, #0]
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	9303      	str	r3, [sp, #12]
 8001b30:	9b03      	ldr	r3, [sp, #12]
 8001b32:	4982      	ldr	r1, [pc, #520]	; (8001d3c <HAL_RCC_OscConfig+0x320>)
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	400b      	ands	r3, r1
 8001b38:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3a:	2a00      	cmp	r2, #0
 8001b3c:	d1d6      	bne.n	8001aec <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fda3 	bl	8001688 <HAL_GetTick>
 8001b42:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	0292      	lsls	r2, r2, #10
 8001b4a:	4213      	tst	r3, r2
 8001b4c:	d100      	bne.n	8001b50 <HAL_RCC_OscConfig+0x134>
 8001b4e:	e776      	b.n	8001a3e <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff fd9a 	bl	8001688 <HAL_GetTick>
 8001b54:	9b00      	ldr	r3, [sp, #0]
 8001b56:	1ac0      	subs	r0, r0, r3
 8001b58:	2864      	cmp	r0, #100	; 0x64
 8001b5a:	d9f3      	bls.n	8001b44 <HAL_RCC_OscConfig+0x128>
 8001b5c:	e7d4      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 8001b5e:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b60:	2e04      	cmp	r6, #4
 8001b62:	d003      	beq.n	8001b6c <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b64:	2e0c      	cmp	r6, #12
 8001b66:	d124      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x196>
 8001b68:	2f00      	cmp	r7, #0
 8001b6a:	d122      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	075b      	lsls	r3, r3, #29
 8001b70:	d501      	bpl.n	8001b76 <HAL_RCC_OscConfig+0x15a>
 8001b72:	2a00      	cmp	r2, #0
 8001b74:	d0b2      	beq.n	8001adc <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	6861      	ldr	r1, [r4, #4]
 8001b78:	692b      	ldr	r3, [r5, #16]
 8001b7a:	4871      	ldr	r0, [pc, #452]	; (8001d40 <HAL_RCC_OscConfig+0x324>)
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	4001      	ands	r1, r0
 8001b80:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b82:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b84:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	438b      	bics	r3, r1
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b8e:	f7ff fefd 	bl	800198c <HAL_RCC_GetSysClockFreq>
 8001b92:	68e3      	ldr	r3, [r4, #12]
 8001b94:	4a65      	ldr	r2, [pc, #404]	; (8001d2c <HAL_RCC_OscConfig+0x310>)
 8001b96:	061b      	lsls	r3, r3, #24
 8001b98:	0f1b      	lsrs	r3, r3, #28
 8001b9a:	5cd3      	ldrb	r3, [r2, r3]
 8001b9c:	40d8      	lsrs	r0, r3
 8001b9e:	4b64      	ldr	r3, [pc, #400]	; (8001d30 <HAL_RCC_OscConfig+0x314>)
 8001ba0:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8001ba2:	4b64      	ldr	r3, [pc, #400]	; (8001d34 <HAL_RCC_OscConfig+0x318>)
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	f7ff fd2b 	bl	8001600 <HAL_InitTick>
      if(status != HAL_OK)
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d100      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x194>
 8001bae:	e74a      	b.n	8001a46 <HAL_RCC_OscConfig+0x2a>
 8001bb0:	e7ab      	b.n	8001b0a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bb2:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d018      	beq.n	8001bea <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bb8:	2109      	movs	r1, #9
 8001bba:	438b      	bics	r3, r1
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fd62 	bl	8001688 <HAL_GetTick>
 8001bc4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	4213      	tst	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	6862      	ldr	r2, [r4, #4]
 8001bd0:	692b      	ldr	r3, [r5, #16]
 8001bd2:	495b      	ldr	r1, [pc, #364]	; (8001d40 <HAL_RCC_OscConfig+0x324>)
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	6063      	str	r3, [r4, #4]
 8001bdc:	e733      	b.n	8001a46 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bde:	f7ff fd53 	bl	8001688 <HAL_GetTick>
 8001be2:	1bc0      	subs	r0, r0, r7
 8001be4:	2802      	cmp	r0, #2
 8001be6:	d9ee      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x1aa>
 8001be8:	e78e      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8001bea:	2201      	movs	r2, #1
 8001bec:	4393      	bics	r3, r2
 8001bee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fd4a 	bl	8001688 <HAL_GetTick>
 8001bf4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	6823      	ldr	r3, [r4, #0]
 8001bfa:	4213      	tst	r3, r2
 8001bfc:	d100      	bne.n	8001c00 <HAL_RCC_OscConfig+0x1e4>
 8001bfe:	e722      	b.n	8001a46 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c00:	f7ff fd42 	bl	8001688 <HAL_GetTick>
 8001c04:	1bc0      	subs	r0, r0, r7
 8001c06:	2802      	cmp	r0, #2
 8001c08:	d9f5      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x1da>
 8001c0a:	e77d      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c0c:	69eb      	ldr	r3, [r5, #28]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d020      	beq.n	8001c54 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	6822      	ldr	r2, [r4, #0]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fd34 	bl	8001688 <HAL_GetTick>
 8001c20:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	4213      	tst	r3, r2
 8001c2a:	d00d      	beq.n	8001c48 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c2c:	6863      	ldr	r3, [r4, #4]
 8001c2e:	4a3e      	ldr	r2, [pc, #248]	; (8001d28 <HAL_RCC_OscConfig+0x30c>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001c34:	4313      	orrs	r3, r2
 8001c36:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c38:	6862      	ldr	r2, [r4, #4]
 8001c3a:	6a2b      	ldr	r3, [r5, #32]
 8001c3c:	0212      	lsls	r2, r2, #8
 8001c3e:	061b      	lsls	r3, r3, #24
 8001c40:	0a12      	lsrs	r2, r2, #8
 8001c42:	4313      	orrs	r3, r2
 8001c44:	6063      	str	r3, [r4, #4]
 8001c46:	e72b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c48:	f7ff fd1e 	bl	8001688 <HAL_GetTick>
 8001c4c:	1bc0      	subs	r0, r0, r7
 8001c4e:	2802      	cmp	r0, #2
 8001c50:	d9e7      	bls.n	8001c22 <HAL_RCC_OscConfig+0x206>
 8001c52:	e759      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	4a3b      	ldr	r2, [pc, #236]	; (8001d44 <HAL_RCC_OscConfig+0x328>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fd14 	bl	8001688 <HAL_GetTick>
 8001c60:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4213      	tst	r3, r2
 8001c6a:	d100      	bne.n	8001c6e <HAL_RCC_OscConfig+0x252>
 8001c6c:	e718      	b.n	8001aa0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c6e:	f7ff fd0b 	bl	8001688 <HAL_GetTick>
 8001c72:	1bc0      	subs	r0, r0, r7
 8001c74:	2802      	cmp	r0, #2
 8001c76:	d9f4      	bls.n	8001c62 <HAL_RCC_OscConfig+0x246>
 8001c78:	e746      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7a:	696a      	ldr	r2, [r5, #20]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	2a00      	cmp	r2, #0
 8001c80:	d010      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8001c82:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001c84:	4313      	orrs	r3, r2
 8001c86:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001c88:	f7ff fcfe 	bl	8001688 <HAL_GetTick>
 8001c8c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c8e:	2202      	movs	r2, #2
 8001c90:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001c92:	4213      	tst	r3, r2
 8001c94:	d000      	beq.n	8001c98 <HAL_RCC_OscConfig+0x27c>
 8001c96:	e707      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c98:	f7ff fcf6 	bl	8001688 <HAL_GetTick>
 8001c9c:	1bc0      	subs	r0, r0, r7
 8001c9e:	2802      	cmp	r0, #2
 8001ca0:	d9f5      	bls.n	8001c8e <HAL_RCC_OscConfig+0x272>
 8001ca2:	e731      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 8001ca4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001ca6:	439a      	bics	r2, r3
 8001ca8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001caa:	f7ff fced 	bl	8001688 <HAL_GetTick>
 8001cae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001cb4:	4213      	tst	r3, r2
 8001cb6:	d100      	bne.n	8001cba <HAL_RCC_OscConfig+0x29e>
 8001cb8:	e6f6      	b.n	8001aa8 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cba:	f7ff fce5 	bl	8001688 <HAL_GetTick>
 8001cbe:	1bc0      	subs	r0, r0, r7
 8001cc0:	2802      	cmp	r0, #2
 8001cc2:	d9f5      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x294>
 8001cc4:	e720      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001cc8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ccc:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001cce:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd0:	421a      	tst	r2, r3
 8001cd2:	d104      	bne.n	8001cde <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	4f19      	ldr	r7, [pc, #100]	; (8001d48 <HAL_RCC_OscConfig+0x32c>)
 8001ce2:	0052      	lsls	r2, r2, #1
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	4213      	tst	r3, r2
 8001ce8:	d008      	beq.n	8001cfc <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	68ab      	ldr	r3, [r5, #8]
 8001cee:	0052      	lsls	r2, r2, #1
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d12b      	bne.n	8001d4c <HAL_RCC_OscConfig+0x330>
 8001cf4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	6523      	str	r3, [r4, #80]	; 0x50
 8001cfa:	e04c      	b.n	8001d96 <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	0052      	lsls	r2, r2, #1
 8001d02:	4313      	orrs	r3, r2
 8001d04:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001d06:	f7ff fcbf 	bl	8001688 <HAL_GetTick>
 8001d0a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	0052      	lsls	r2, r2, #1
 8001d12:	4213      	tst	r3, r2
 8001d14:	d1e9      	bne.n	8001cea <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d16:	f7ff fcb7 	bl	8001688 <HAL_GetTick>
 8001d1a:	9b01      	ldr	r3, [sp, #4]
 8001d1c:	1ac0      	subs	r0, r0, r3
 8001d1e:	2864      	cmp	r0, #100	; 0x64
 8001d20:	d9f4      	bls.n	8001d0c <HAL_RCC_OscConfig+0x2f0>
 8001d22:	e6f1      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
 8001d24:	40021000 	.word	0x40021000
 8001d28:	ffff1fff 	.word	0xffff1fff
 8001d2c:	0800446c 	.word	0x0800446c
 8001d30:	20000010 	.word	0x20000010
 8001d34:	20000018 	.word	0x20000018
 8001d38:	fffeffff 	.word	0xfffeffff
 8001d3c:	fffbffff 	.word	0xfffbffff
 8001d40:	ffffe0ff 	.word	0xffffe0ff
 8001d44:	fffffeff 	.word	0xfffffeff
 8001d48:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d116      	bne.n	8001d7e <HAL_RCC_OscConfig+0x362>
 8001d50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001d52:	4a6b      	ldr	r2, [pc, #428]	; (8001f00 <HAL_RCC_OscConfig+0x4e4>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	6523      	str	r3, [r4, #80]	; 0x50
 8001d58:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001d5a:	4a6a      	ldr	r2, [pc, #424]	; (8001f04 <HAL_RCC_OscConfig+0x4e8>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001d60:	f7ff fc92 	bl	8001688 <HAL_GetTick>
 8001d64:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001d6a:	0092      	lsls	r2, r2, #2
 8001d6c:	4213      	tst	r3, r2
 8001d6e:	d01a      	beq.n	8001da6 <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff fc8a 	bl	8001688 <HAL_GetTick>
 8001d74:	4b64      	ldr	r3, [pc, #400]	; (8001f08 <HAL_RCC_OscConfig+0x4ec>)
 8001d76:	1bc0      	subs	r0, r0, r7
 8001d78:	4298      	cmp	r0, r3
 8001d7a:	d9f4      	bls.n	8001d66 <HAL_RCC_OscConfig+0x34a>
 8001d7c:	e6c4      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7e:	21a0      	movs	r1, #160	; 0xa0
 8001d80:	00c9      	lsls	r1, r1, #3
 8001d82:	428b      	cmp	r3, r1
 8001d84:	d118      	bne.n	8001db8 <HAL_RCC_OscConfig+0x39c>
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	6523      	str	r3, [r4, #80]	; 0x50
 8001d90:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001d92:	431a      	orrs	r2, r3
 8001d94:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001d96:	f7ff fc77 	bl	8001688 <HAL_GetTick>
 8001d9a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d9c:	2280      	movs	r2, #128	; 0x80
 8001d9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001da0:	0092      	lsls	r2, r2, #2
 8001da2:	4213      	tst	r3, r2
 8001da4:	d010      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 8001da6:	9b00      	ldr	r3, [sp, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d000      	beq.n	8001dae <HAL_RCC_OscConfig+0x392>
 8001dac:	e680      	b.n	8001ab0 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001db0:	4a56      	ldr	r2, [pc, #344]	; (8001f0c <HAL_RCC_OscConfig+0x4f0>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	63a3      	str	r3, [r4, #56]	; 0x38
 8001db6:	e67b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001dba:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <HAL_RCC_OscConfig+0x4e4>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	6523      	str	r3, [r4, #80]	; 0x50
 8001dc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001dc2:	4a50      	ldr	r2, [pc, #320]	; (8001f04 <HAL_RCC_OscConfig+0x4e8>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	e797      	b.n	8001cf8 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7ff fc5e 	bl	8001688 <HAL_GetTick>
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	; (8001f08 <HAL_RCC_OscConfig+0x4ec>)
 8001dce:	1bc0      	subs	r0, r0, r7
 8001dd0:	4298      	cmp	r0, r3
 8001dd2:	d9e3      	bls.n	8001d9c <HAL_RCC_OscConfig+0x380>
 8001dd4:	e698      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dd6:	69a9      	ldr	r1, [r5, #24]
 8001dd8:	2301      	movs	r3, #1
 8001dda:	4a4d      	ldr	r2, [pc, #308]	; (8001f10 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	2900      	cmp	r1, #0
 8001dde:	d018      	beq.n	8001e12 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 8001de0:	68a1      	ldr	r1, [r4, #8]
 8001de2:	4319      	orrs	r1, r3
 8001de4:	60a1      	str	r1, [r4, #8]
 8001de6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001de8:	430b      	orrs	r3, r1
 8001dea:	6363      	str	r3, [r4, #52]	; 0x34
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	6a11      	ldr	r1, [r2, #32]
 8001df0:	019b      	lsls	r3, r3, #6
 8001df2:	430b      	orrs	r3, r1
 8001df4:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001df6:	f7ff fc47 	bl	8001688 <HAL_GetTick>
 8001dfa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	68a3      	ldr	r3, [r4, #8]
 8001e00:	4213      	tst	r3, r2
 8001e02:	d000      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3ea>
 8001e04:	e658      	b.n	8001ab8 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e06:	f7ff fc3f 	bl	8001688 <HAL_GetTick>
 8001e0a:	1bc0      	subs	r0, r0, r7
 8001e0c:	2802      	cmp	r0, #2
 8001e0e:	d9f5      	bls.n	8001dfc <HAL_RCC_OscConfig+0x3e0>
 8001e10:	e67a      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 8001e12:	68a1      	ldr	r1, [r4, #8]
 8001e14:	4399      	bics	r1, r3
 8001e16:	60a1      	str	r1, [r4, #8]
 8001e18:	6a13      	ldr	r3, [r2, #32]
 8001e1a:	493e      	ldr	r1, [pc, #248]	; (8001f14 <HAL_RCC_OscConfig+0x4f8>)
 8001e1c:	400b      	ands	r3, r1
 8001e1e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001e20:	f7ff fc32 	bl	8001688 <HAL_GetTick>
 8001e24:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e26:	2202      	movs	r2, #2
 8001e28:	68a3      	ldr	r3, [r4, #8]
 8001e2a:	4213      	tst	r3, r2
 8001e2c:	d100      	bne.n	8001e30 <HAL_RCC_OscConfig+0x414>
 8001e2e:	e643      	b.n	8001ab8 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e30:	f7ff fc2a 	bl	8001688 <HAL_GetTick>
 8001e34:	1bc0      	subs	r0, r0, r7
 8001e36:	2802      	cmp	r0, #2
 8001e38:	d9f5      	bls.n	8001e26 <HAL_RCC_OscConfig+0x40a>
 8001e3a:	e665      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e3c:	2e0c      	cmp	r6, #12
 8001e3e:	d043      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e40:	4a35      	ldr	r2, [pc, #212]	; (8001f18 <HAL_RCC_OscConfig+0x4fc>)
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d12e      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 8001e46:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e48:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fc1b 	bl	8001688 <HAL_GetTick>
 8001e52:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e54:	04bf      	lsls	r7, r7, #18
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	423b      	tst	r3, r7
 8001e5a:	d11d      	bne.n	8001e98 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001e5e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001e60:	68e2      	ldr	r2, [r4, #12]
 8001e62:	430b      	orrs	r3, r1
 8001e64:	492d      	ldr	r1, [pc, #180]	; (8001f1c <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e66:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e68:	400a      	ands	r2, r1
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e6e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	6822      	ldr	r2, [r4, #0]
 8001e78:	045b      	lsls	r3, r3, #17
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fc03 	bl	8001688 <HAL_GetTick>
 8001e82:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	4233      	tst	r3, r6
 8001e88:	d000      	beq.n	8001e8c <HAL_RCC_OscConfig+0x470>
 8001e8a:	e619      	b.n	8001ac0 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff fbfc 	bl	8001688 <HAL_GetTick>
 8001e90:	1b40      	subs	r0, r0, r5
 8001e92:	2802      	cmp	r0, #2
 8001e94:	d9f6      	bls.n	8001e84 <HAL_RCC_OscConfig+0x468>
 8001e96:	e637      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff fbf6 	bl	8001688 <HAL_GetTick>
 8001e9c:	1b80      	subs	r0, r0, r6
 8001e9e:	2802      	cmp	r0, #2
 8001ea0:	d9d9      	bls.n	8001e56 <HAL_RCC_OscConfig+0x43a>
 8001ea2:	e631      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 8001ea4:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ea6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001eac:	f7ff fbec 	bl	8001688 <HAL_GetTick>
 8001eb0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001eb2:	04b6      	lsls	r6, r6, #18
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	4233      	tst	r3, r6
 8001eb8:	d100      	bne.n	8001ebc <HAL_RCC_OscConfig+0x4a0>
 8001eba:	e601      	b.n	8001ac0 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff fbe4 	bl	8001688 <HAL_GetTick>
 8001ec0:	1b40      	subs	r0, r0, r5
 8001ec2:	2802      	cmp	r0, #2
 8001ec4:	d9f6      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x498>
 8001ec6:	e61f      	b.n	8001b08 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8001ec8:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d100      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4b4>
 8001ece:	e61c      	b.n	8001b0a <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed0:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8001ed2:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001ed6:	0252      	lsls	r2, r2, #9
 8001ed8:	401a      	ands	r2, r3
 8001eda:	428a      	cmp	r2, r1
 8001edc:	d000      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x4c4>
 8001ede:	e5fd      	b.n	8001adc <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ee0:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee2:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ee4:	0392      	lsls	r2, r2, #14
 8001ee6:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee8:	428a      	cmp	r2, r1
 8001eea:	d000      	beq.n	8001eee <HAL_RCC_OscConfig+0x4d2>
 8001eec:	e5f6      	b.n	8001adc <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001eee:	22c0      	movs	r2, #192	; 0xc0
 8001ef0:	0412      	lsls	r2, r2, #16
 8001ef2:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ef4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d100      	bne.n	8001efc <HAL_RCC_OscConfig+0x4e0>
 8001efa:	e5e1      	b.n	8001ac0 <HAL_RCC_OscConfig+0xa4>
 8001efc:	e5ee      	b.n	8001adc <HAL_RCC_OscConfig+0xc0>
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	fffffeff 	.word	0xfffffeff
 8001f04:	fffffbff 	.word	0xfffffbff
 8001f08:	00001388 	.word	0x00001388
 8001f0c:	efffffff 	.word	0xefffffff
 8001f10:	40010000 	.word	0x40010000
 8001f14:	ffffdfff 	.word	0xffffdfff
 8001f18:	feffffff 	.word	0xfeffffff
 8001f1c:	ff02ffff 	.word	0xff02ffff

08001f20 <HAL_RCC_ClockConfig>:
{
 8001f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f22:	1e04      	subs	r4, r0, #0
 8001f24:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001f28:	2001      	movs	r0, #1
}
 8001f2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	2501      	movs	r5, #1
 8001f2e:	4e5b      	ldr	r6, [pc, #364]	; (800209c <HAL_RCC_ClockConfig+0x17c>)
 8001f30:	9a01      	ldr	r2, [sp, #4]
 8001f32:	6833      	ldr	r3, [r6, #0]
 8001f34:	402b      	ands	r3, r5
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d331      	bcc.n	8001f9e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3a:	6822      	ldr	r2, [r4, #0]
 8001f3c:	0793      	lsls	r3, r2, #30
 8001f3e:	d443      	bmi.n	8001fc8 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f40:	07d3      	lsls	r3, r2, #31
 8001f42:	d449      	bmi.n	8001fd8 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f44:	2501      	movs	r5, #1
 8001f46:	6833      	ldr	r3, [r6, #0]
 8001f48:	9a01      	ldr	r2, [sp, #4]
 8001f4a:	402b      	ands	r3, r5
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d909      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f50:	6833      	ldr	r3, [r6, #0]
 8001f52:	43ab      	bics	r3, r5
 8001f54:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001f56:	f7ff fb97 	bl	8001688 <HAL_GetTick>
 8001f5a:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5c:	6833      	ldr	r3, [r6, #0]
 8001f5e:	422b      	tst	r3, r5
 8001f60:	d000      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x44>
 8001f62:	e08c      	b.n	800207e <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	6822      	ldr	r2, [r4, #0]
 8001f66:	4d4e      	ldr	r5, [pc, #312]	; (80020a0 <HAL_RCC_ClockConfig+0x180>)
 8001f68:	0753      	lsls	r3, r2, #29
 8001f6a:	d500      	bpl.n	8001f6e <HAL_RCC_ClockConfig+0x4e>
 8001f6c:	e08f      	b.n	800208e <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	0713      	lsls	r3, r2, #28
 8001f70:	d506      	bpl.n	8001f80 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f72:	68e9      	ldr	r1, [r5, #12]
 8001f74:	6923      	ldr	r3, [r4, #16]
 8001f76:	4a4b      	ldr	r2, [pc, #300]	; (80020a4 <HAL_RCC_ClockConfig+0x184>)
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f80:	f7ff fd04 	bl	800198c <HAL_RCC_GetSysClockFreq>
 8001f84:	68eb      	ldr	r3, [r5, #12]
 8001f86:	4a48      	ldr	r2, [pc, #288]	; (80020a8 <HAL_RCC_ClockConfig+0x188>)
 8001f88:	061b      	lsls	r3, r3, #24
 8001f8a:	0f1b      	lsrs	r3, r3, #28
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	40d8      	lsrs	r0, r3
 8001f90:	4b46      	ldr	r3, [pc, #280]	; (80020ac <HAL_RCC_ClockConfig+0x18c>)
 8001f92:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001f94:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <HAL_RCC_ClockConfig+0x190>)
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	f7ff fb32 	bl	8001600 <HAL_InitTick>
  if(status != HAL_OK)
 8001f9c:	e7c5      	b.n	8001f2a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	6833      	ldr	r3, [r6, #0]
 8001fa0:	9a01      	ldr	r2, [sp, #4]
 8001fa2:	43ab      	bics	r3, r5
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001fa8:	f7ff fb6e 	bl	8001688 <HAL_GetTick>
 8001fac:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	6833      	ldr	r3, [r6, #0]
 8001fb0:	9a01      	ldr	r2, [sp, #4]
 8001fb2:	402b      	ands	r3, r5
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d0c0      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb8:	f7ff fb66 	bl	8001688 <HAL_GetTick>
 8001fbc:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <HAL_RCC_ClockConfig+0x194>)
 8001fbe:	1bc0      	subs	r0, r0, r7
 8001fc0:	4298      	cmp	r0, r3
 8001fc2:	d9f4      	bls.n	8001fae <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	e7b0      	b.n	8001f2a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	20f0      	movs	r0, #240	; 0xf0
 8001fca:	4935      	ldr	r1, [pc, #212]	; (80020a0 <HAL_RCC_ClockConfig+0x180>)
 8001fcc:	68cb      	ldr	r3, [r1, #12]
 8001fce:	4383      	bics	r3, r0
 8001fd0:	68a0      	ldr	r0, [r4, #8]
 8001fd2:	4303      	orrs	r3, r0
 8001fd4:	60cb      	str	r3, [r1, #12]
 8001fd6:	e7b3      	b.n	8001f40 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd8:	4d31      	ldr	r5, [pc, #196]	; (80020a0 <HAL_RCC_ClockConfig+0x180>)
 8001fda:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fdc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fde:	2a02      	cmp	r2, #2
 8001fe0:	d118      	bne.n	8002014 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fe2:	039b      	lsls	r3, r3, #14
 8001fe4:	d5a0      	bpl.n	8001f28 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe6:	2103      	movs	r1, #3
 8001fe8:	68eb      	ldr	r3, [r5, #12]
 8001fea:	438b      	bics	r3, r1
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001ff0:	f7ff fb4a 	bl	8001688 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff4:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001ff6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d118      	bne.n	800202e <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ffc:	220c      	movs	r2, #12
 8001ffe:	68eb      	ldr	r3, [r5, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	2b08      	cmp	r3, #8
 8002004:	d09e      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002006:	f7ff fb3f 	bl	8001688 <HAL_GetTick>
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_RCC_ClockConfig+0x194>)
 800200c:	1bc0      	subs	r0, r0, r7
 800200e:	4298      	cmp	r0, r3
 8002010:	d9f4      	bls.n	8001ffc <HAL_RCC_ClockConfig+0xdc>
 8002012:	e7d7      	b.n	8001fc4 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002014:	2a03      	cmp	r2, #3
 8002016:	d102      	bne.n	800201e <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	d4e4      	bmi.n	8001fe6 <HAL_RCC_ClockConfig+0xc6>
 800201c:	e784      	b.n	8001f28 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800201e:	2a01      	cmp	r2, #1
 8002020:	d102      	bne.n	8002028 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002022:	075b      	lsls	r3, r3, #29
 8002024:	d4df      	bmi.n	8001fe6 <HAL_RCC_ClockConfig+0xc6>
 8002026:	e77f      	b.n	8001f28 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002028:	059b      	lsls	r3, r3, #22
 800202a:	d4dc      	bmi.n	8001fe6 <HAL_RCC_ClockConfig+0xc6>
 800202c:	e77c      	b.n	8001f28 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202e:	2b03      	cmp	r3, #3
 8002030:	d10b      	bne.n	800204a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002032:	220c      	movs	r2, #12
 8002034:	68eb      	ldr	r3, [r5, #12]
 8002036:	4013      	ands	r3, r2
 8002038:	4293      	cmp	r3, r2
 800203a:	d083      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7ff fb24 	bl	8001688 <HAL_GetTick>
 8002040:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <HAL_RCC_ClockConfig+0x194>)
 8002042:	1bc0      	subs	r0, r0, r7
 8002044:	4298      	cmp	r0, r3
 8002046:	d9f4      	bls.n	8002032 <HAL_RCC_ClockConfig+0x112>
 8002048:	e7bc      	b.n	8001fc4 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800204a:	2b01      	cmp	r3, #1
 800204c:	d011      	beq.n	8002072 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800204e:	220c      	movs	r2, #12
 8002050:	68eb      	ldr	r3, [r5, #12]
 8002052:	4213      	tst	r3, r2
 8002054:	d100      	bne.n	8002058 <HAL_RCC_ClockConfig+0x138>
 8002056:	e775      	b.n	8001f44 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002058:	f7ff fb16 	bl	8001688 <HAL_GetTick>
 800205c:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_RCC_ClockConfig+0x194>)
 800205e:	1bc0      	subs	r0, r0, r7
 8002060:	4298      	cmp	r0, r3
 8002062:	d9f4      	bls.n	800204e <HAL_RCC_ClockConfig+0x12e>
 8002064:	e7ae      	b.n	8001fc4 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002066:	f7ff fb0f 	bl	8001688 <HAL_GetTick>
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_RCC_ClockConfig+0x194>)
 800206c:	1bc0      	subs	r0, r0, r7
 800206e:	4298      	cmp	r0, r3
 8002070:	d8a8      	bhi.n	8001fc4 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002072:	220c      	movs	r2, #12
 8002074:	68eb      	ldr	r3, [r5, #12]
 8002076:	4013      	ands	r3, r2
 8002078:	2b04      	cmp	r3, #4
 800207a:	d1f4      	bne.n	8002066 <HAL_RCC_ClockConfig+0x146>
 800207c:	e762      	b.n	8001f44 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207e:	f7ff fb03 	bl	8001688 <HAL_GetTick>
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <HAL_RCC_ClockConfig+0x194>)
 8002084:	1bc0      	subs	r0, r0, r7
 8002086:	4298      	cmp	r0, r3
 8002088:	d800      	bhi.n	800208c <HAL_RCC_ClockConfig+0x16c>
 800208a:	e767      	b.n	8001f5c <HAL_RCC_ClockConfig+0x3c>
 800208c:	e79a      	b.n	8001fc4 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800208e:	68eb      	ldr	r3, [r5, #12]
 8002090:	4909      	ldr	r1, [pc, #36]	; (80020b8 <HAL_RCC_ClockConfig+0x198>)
 8002092:	400b      	ands	r3, r1
 8002094:	68e1      	ldr	r1, [r4, #12]
 8002096:	430b      	orrs	r3, r1
 8002098:	60eb      	str	r3, [r5, #12]
 800209a:	e768      	b.n	8001f6e <HAL_RCC_ClockConfig+0x4e>
 800209c:	40022000 	.word	0x40022000
 80020a0:	40021000 	.word	0x40021000
 80020a4:	ffffc7ff 	.word	0xffffc7ff
 80020a8:	0800446c 	.word	0x0800446c
 80020ac:	20000010 	.word	0x20000010
 80020b0:	20000018 	.word	0x20000018
 80020b4:	00001388 	.word	0x00001388
 80020b8:	fffff8ff 	.word	0xfffff8ff

080020bc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80020be:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	055b      	lsls	r3, r3, #21
 80020c4:	0f5b      	lsrs	r3, r3, #29
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	4a03      	ldr	r2, [pc, #12]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020ca:	6810      	ldr	r0, [r2, #0]
 80020cc:	40d8      	lsrs	r0, r3
}
 80020ce:	4770      	bx	lr
 80020d0:	40021000 	.word	0x40021000
 80020d4:	0800447c 	.word	0x0800447c
 80020d8:	20000010 	.word	0x20000010

080020dc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80020de:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	049b      	lsls	r3, r3, #18
 80020e4:	0f5b      	lsrs	r3, r3, #29
 80020e6:	5cd3      	ldrb	r3, [r2, r3]
 80020e8:	4a03      	ldr	r2, [pc, #12]	; (80020f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020ea:	6810      	ldr	r0, [r2, #0]
 80020ec:	40d8      	lsrs	r0, r3
}
 80020ee:	4770      	bx	lr
 80020f0:	40021000 	.word	0x40021000
 80020f4:	0800447c 	.word	0x0800447c
 80020f8:	20000010 	.word	0x20000010

080020fc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020fc:	6803      	ldr	r3, [r0, #0]
{
 80020fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002100:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002102:	069b      	lsls	r3, r3, #26
 8002104:	d52d      	bpl.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x66>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002106:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8002108:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210a:	4c5c      	ldr	r4, [pc, #368]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800210c:	055b      	lsls	r3, r3, #21
 800210e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8002110:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002112:	421a      	tst	r2, r3
 8002114:	d104      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002118:	4313      	orrs	r3, r2
 800211a:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800211c:	2301      	movs	r3, #1
 800211e:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	2780      	movs	r7, #128	; 0x80
 8002122:	4e57      	ldr	r6, [pc, #348]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002124:	007f      	lsls	r7, r7, #1
 8002126:	6833      	ldr	r3, [r6, #0]
 8002128:	423b      	tst	r3, r7
 800212a:	d053      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800212c:	686b      	ldr	r3, [r5, #4]
 800212e:	21c0      	movs	r1, #192	; 0xc0
 8002130:	0018      	movs	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002132:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002134:	0389      	lsls	r1, r1, #14
 8002136:	4008      	ands	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002138:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800213a:	4290      	cmp	r0, r2
 800213c:	d15b      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800213e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002140:	22c0      	movs	r2, #192	; 0xc0
 8002142:	0008      	movs	r0, r1
 8002144:	0292      	lsls	r2, r2, #10
 8002146:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002148:	4211      	tst	r1, r2
 800214a:	d15f      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800214c:	682b      	ldr	r3, [r5, #0]
 800214e:	069b      	lsls	r3, r3, #26
 8002150:	d500      	bpl.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002152:	e070      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002154:	9b00      	ldr	r3, [sp, #0]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d103      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800215c:	4a49      	ldr	r2, [pc, #292]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800215e:	4013      	ands	r3, r2
 8002160:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002162:	682b      	ldr	r3, [r5, #0]
 8002164:	07da      	lsls	r2, r3, #31
 8002166:	d506      	bpl.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002168:	2003      	movs	r0, #3
 800216a:	4944      	ldr	r1, [pc, #272]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800216c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800216e:	4382      	bics	r2, r0
 8002170:	68a8      	ldr	r0, [r5, #8]
 8002172:	4302      	orrs	r2, r0
 8002174:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002176:	079a      	lsls	r2, r3, #30
 8002178:	d506      	bpl.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800217a:	200c      	movs	r0, #12
 800217c:	493f      	ldr	r1, [pc, #252]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800217e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002180:	4382      	bics	r2, r0
 8002182:	68e8      	ldr	r0, [r5, #12]
 8002184:	4302      	orrs	r2, r0
 8002186:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002188:	075a      	lsls	r2, r3, #29
 800218a:	d506      	bpl.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800218c:	493b      	ldr	r1, [pc, #236]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800218e:	483e      	ldr	r0, [pc, #248]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002190:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002192:	4002      	ands	r2, r0
 8002194:	6928      	ldr	r0, [r5, #16]
 8002196:	4302      	orrs	r2, r0
 8002198:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800219a:	071a      	lsls	r2, r3, #28
 800219c:	d506      	bpl.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800219e:	4937      	ldr	r1, [pc, #220]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80021a0:	483a      	ldr	r0, [pc, #232]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80021a2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80021a4:	4002      	ands	r2, r0
 80021a6:	6968      	ldr	r0, [r5, #20]
 80021a8:	4302      	orrs	r2, r0
 80021aa:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021ac:	065a      	lsls	r2, r3, #25
 80021ae:	d506      	bpl.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021b0:	4932      	ldr	r1, [pc, #200]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80021b2:	4837      	ldr	r0, [pc, #220]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80021b4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80021b6:	4002      	ands	r2, r0
 80021b8:	69e8      	ldr	r0, [r5, #28]
 80021ba:	4302      	orrs	r2, r0
 80021bc:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80021be:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021c0:	061b      	lsls	r3, r3, #24
 80021c2:	d517      	bpl.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80021c4:	4a2d      	ldr	r2, [pc, #180]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80021c6:	4933      	ldr	r1, [pc, #204]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80021c8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80021ca:	400b      	ands	r3, r1
 80021cc:	69a9      	ldr	r1, [r5, #24]
 80021ce:	430b      	orrs	r3, r1
 80021d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d2:	e00f      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d4:	6833      	ldr	r3, [r6, #0]
 80021d6:	433b      	orrs	r3, r7
 80021d8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80021da:	f7ff fa55 	bl	8001688 <HAL_GetTick>
 80021de:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e0:	6833      	ldr	r3, [r6, #0]
 80021e2:	423b      	tst	r3, r7
 80021e4:	d1a2      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e6:	f7ff fa4f 	bl	8001688 <HAL_GetTick>
 80021ea:	9b01      	ldr	r3, [sp, #4]
 80021ec:	1ac0      	subs	r0, r0, r3
 80021ee:	2864      	cmp	r0, #100	; 0x64
 80021f0:	d9f6      	bls.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          return HAL_TIMEOUT;
 80021f2:	2003      	movs	r0, #3
}
 80021f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80021f6:	22c0      	movs	r2, #192	; 0xc0
 80021f8:	0019      	movs	r1, r3
 80021fa:	0292      	lsls	r2, r2, #10
 80021fc:	4011      	ands	r1, r2
 80021fe:	4291      	cmp	r1, r2
 8002200:	d19d      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002202:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8002204:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002206:	0392      	lsls	r2, r2, #14
 8002208:	d599      	bpl.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x42>
 800220a:	e7f3      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800220c:	4013      	ands	r3, r2
 800220e:	4283      	cmp	r3, r0
 8002210:	d09c      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002212:	682b      	ldr	r3, [r5, #0]
 8002214:	069b      	lsls	r3, r3, #26
 8002216:	d59d      	bpl.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002218:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800221a:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800221c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800221e:	0312      	lsls	r2, r2, #12
 8002220:	4302      	orrs	r2, r0
 8002222:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002224:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002228:	481c      	ldr	r0, [pc, #112]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800222a:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800222c:	4002      	ands	r2, r0
 800222e:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8002230:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002232:	05cb      	lsls	r3, r1, #23
 8002234:	d412      	bmi.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002236:	6869      	ldr	r1, [r5, #4]
 8002238:	23c0      	movs	r3, #192	; 0xc0
 800223a:	000a      	movs	r2, r1
 800223c:	029b      	lsls	r3, r3, #10
 800223e:	401a      	ands	r2, r3
 8002240:	429a      	cmp	r2, r3
 8002242:	d107      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	4816      	ldr	r0, [pc, #88]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002248:	4003      	ands	r3, r0
 800224a:	20c0      	movs	r0, #192	; 0xc0
 800224c:	0380      	lsls	r0, r0, #14
 800224e:	4001      	ands	r1, r0
 8002250:	430b      	orrs	r3, r1
 8002252:	6023      	str	r3, [r4, #0]
 8002254:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002256:	431a      	orrs	r2, r3
 8002258:	6522      	str	r2, [r4, #80]	; 0x50
 800225a:	e77b      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 800225c:	f7ff fa14 	bl	8001688 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002260:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002262:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002264:	00bf      	lsls	r7, r7, #2
 8002266:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002268:	423b      	tst	r3, r7
 800226a:	d000      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x172>
 800226c:	e76e      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7ff fa0b 	bl	8001688 <HAL_GetTick>
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002274:	1b80      	subs	r0, r0, r6
 8002276:	4298      	cmp	r0, r3
 8002278:	d9f5      	bls.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800227a:	e7ba      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800227c:	40021000 	.word	0x40021000
 8002280:	40007000 	.word	0x40007000
 8002284:	efffffff 	.word	0xefffffff
 8002288:	fffff3ff 	.word	0xfffff3ff
 800228c:	ffffcfff 	.word	0xffffcfff
 8002290:	fbffffff 	.word	0xfbffffff
 8002294:	fff3ffff 	.word	0xfff3ffff
 8002298:	fffcffff 	.word	0xfffcffff
 800229c:	fff7ffff 	.word	0xfff7ffff
 80022a0:	ffcfffff 	.word	0xffcfffff
 80022a4:	00001388 	.word	0x00001388

080022a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80022a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022aa:	001d      	movs	r5, r3
 80022ac:	0017      	movs	r7, r2
 80022ae:	b085      	sub	sp, #20
 80022b0:	000e      	movs	r6, r1
 80022b2:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022b4:	f7ff f9e8 	bl	8001688 <HAL_GetTick>
 80022b8:	19ed      	adds	r5, r5, r7
 80022ba:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80022bc:	f7ff f9e4 	bl	8001688 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 80022c2:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	015b      	lsls	r3, r3, #5
 80022c8:	0d1b      	lsrs	r3, r3, #20
 80022ca:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022cc:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80022ce:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022d0:	6893      	ldr	r3, [r2, #8]
 80022d2:	4033      	ands	r3, r6
 80022d4:	429e      	cmp	r6, r3
 80022d6:	d001      	beq.n	80022dc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80022d8:	2000      	movs	r0, #0
 80022da:	e032      	b.n	8002342 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 80022dc:	1c7b      	adds	r3, r7, #1
 80022de:	d0f7      	beq.n	80022d0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022e0:	f7ff f9d2 	bl	8001688 <HAL_GetTick>
 80022e4:	9b01      	ldr	r3, [sp, #4]
 80022e6:	1ac0      	subs	r0, r0, r3
 80022e8:	42a8      	cmp	r0, r5
 80022ea:	d32c      	bcc.n	8002346 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022ec:	21e0      	movs	r1, #224	; 0xe0
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	438a      	bics	r2, r1
 80022f4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022f6:	2282      	movs	r2, #130	; 0x82
 80022f8:	6861      	ldr	r1, [r4, #4]
 80022fa:	0052      	lsls	r2, r2, #1
 80022fc:	4291      	cmp	r1, r2
 80022fe:	d10c      	bne.n	800231a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8002300:	2180      	movs	r1, #128	; 0x80
 8002302:	68a2      	ldr	r2, [r4, #8]
 8002304:	0209      	lsls	r1, r1, #8
 8002306:	428a      	cmp	r2, r1
 8002308:	d003      	beq.n	8002312 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800230a:	2180      	movs	r1, #128	; 0x80
 800230c:	00c9      	lsls	r1, r1, #3
 800230e:	428a      	cmp	r2, r1
 8002310:	d103      	bne.n	800231a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8002312:	2140      	movs	r1, #64	; 0x40
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	438a      	bics	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800231e:	0189      	lsls	r1, r1, #6
 8002320:	428a      	cmp	r2, r1
 8002322:	d106      	bne.n	8002332 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8002324:	6819      	ldr	r1, [r3, #0]
 8002326:	480d      	ldr	r0, [pc, #52]	; (800235c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8002328:	4001      	ands	r1, r0
 800232a:	6019      	str	r1, [r3, #0]
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002332:	0023      	movs	r3, r4
 8002334:	2201      	movs	r2, #1
 8002336:	3351      	adds	r3, #81	; 0x51
 8002338:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800233a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800233c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800233e:	3450      	adds	r4, #80	; 0x50
 8002340:	7023      	strb	r3, [r4, #0]
}
 8002342:	b005      	add	sp, #20
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8002346:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	4193      	sbcs	r3, r2
 800234c:	425b      	negs	r3, r3
 800234e:	401d      	ands	r5, r3
      count--;
 8002350:	9b03      	ldr	r3, [sp, #12]
 8002352:	3b01      	subs	r3, #1
 8002354:	e7ba      	b.n	80022cc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	20000010 	.word	0x20000010
 800235c:	ffffdfff 	.word	0xffffdfff

08002360 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <SPI_EndRxTxTransaction+0x5c>)
{
 8002362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002364:	0004      	movs	r4, r0
 8002366:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	4915      	ldr	r1, [pc, #84]	; (80023c0 <SPI_EndRxTxTransaction+0x60>)
{
 800236c:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800236e:	f7fd fedf 	bl	8000130 <__udivsi3>
 8002372:	23fa      	movs	r3, #250	; 0xfa
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4343      	muls	r3, r0
 8002378:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800237a:	2382      	movs	r3, #130	; 0x82
 800237c:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800237e:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4299      	cmp	r1, r3
 8002384:	d10d      	bne.n	80023a2 <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002386:	0033      	movs	r3, r6
 8002388:	002a      	movs	r2, r5
 800238a:	2180      	movs	r1, #128	; 0x80
 800238c:	0020      	movs	r0, r4
 800238e:	f7ff ff8b 	bl	80022a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002392:	2800      	cmp	r0, #0
 8002394:	d00f      	beq.n	80023b6 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002396:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8002398:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800239a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800239c:	4313      	orrs	r3, r2
 800239e:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 80023a0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 80023a2:	9b01      	ldr	r3, [sp, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d006      	beq.n	80023b6 <SPI_EndRxTxTransaction+0x56>
      count--;
 80023a8:	9b01      	ldr	r3, [sp, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4213      	tst	r3, r2
 80023b4:	d1f5      	bne.n	80023a2 <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 80023b6:	2000      	movs	r0, #0
 80023b8:	e7f2      	b.n	80023a0 <SPI_EndRxTxTransaction+0x40>
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	20000010 	.word	0x20000010
 80023c0:	016e3600 	.word	0x016e3600

080023c4 <HAL_SPI_Init>:
{
 80023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80023c8:	2001      	movs	r0, #1
  if (hspi == NULL)
 80023ca:	2c00      	cmp	r4, #0
 80023cc:	d054      	beq.n	8002478 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d152      	bne.n	800247a <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023d4:	2282      	movs	r2, #130	; 0x82
 80023d6:	6861      	ldr	r1, [r4, #4]
 80023d8:	0052      	lsls	r2, r2, #1
 80023da:	4291      	cmp	r1, r2
 80023dc:	d000      	beq.n	80023e0 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023de:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e0:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80023e2:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80023e6:	3551      	adds	r5, #81	; 0x51
 80023e8:	782b      	ldrb	r3, [r5, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 80023f0:	0023      	movs	r3, r4
 80023f2:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 80023f4:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80023f6:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80023f8:	f7ff f868 	bl	80014cc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80023fc:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 80023fe:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8002400:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8002402:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002404:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8002406:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002408:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800240a:	4393      	bics	r3, r2
 800240c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800240e:	2382      	movs	r3, #130	; 0x82
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4033      	ands	r3, r6
 8002414:	2684      	movs	r6, #132	; 0x84
 8002416:	0236      	lsls	r6, r6, #8
 8002418:	403e      	ands	r6, r7
 800241a:	4333      	orrs	r3, r6
 800241c:	2680      	movs	r6, #128	; 0x80
 800241e:	68e7      	ldr	r7, [r4, #12]
 8002420:	0136      	lsls	r6, r6, #4
 8002422:	403e      	ands	r6, r7
 8002424:	4333      	orrs	r3, r6
 8002426:	6926      	ldr	r6, [r4, #16]
 8002428:	69a2      	ldr	r2, [r4, #24]
 800242a:	4030      	ands	r0, r6
 800242c:	2601      	movs	r6, #1
 800242e:	4303      	orrs	r3, r0
 8002430:	6960      	ldr	r0, [r4, #20]
 8002432:	69e7      	ldr	r7, [r4, #28]
 8002434:	4030      	ands	r0, r6
 8002436:	4303      	orrs	r3, r0
 8002438:	2080      	movs	r0, #128	; 0x80
 800243a:	0080      	lsls	r0, r0, #2
 800243c:	4010      	ands	r0, r2
 800243e:	4303      	orrs	r3, r0
 8002440:	2038      	movs	r0, #56	; 0x38
 8002442:	4038      	ands	r0, r7
 8002444:	4303      	orrs	r3, r0
 8002446:	2080      	movs	r0, #128	; 0x80
 8002448:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800244a:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800244c:	4038      	ands	r0, r7
 800244e:	4303      	orrs	r3, r0
 8002450:	2080      	movs	r0, #128	; 0x80
 8002452:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002454:	0180      	lsls	r0, r0, #6
 8002456:	4038      	ands	r0, r7
 8002458:	4303      	orrs	r3, r0
 800245a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800245c:	2304      	movs	r3, #4
 800245e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002460:	401a      	ands	r2, r3
 8002462:	330c      	adds	r3, #12
 8002464:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002466:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002468:	431a      	orrs	r2, r3
 800246a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800246c:	69cb      	ldr	r3, [r1, #28]
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <HAL_SPI_Init+0xc0>)
 8002470:	4013      	ands	r3, r2
 8002472:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002474:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002476:	702e      	strb	r6, [r5, #0]
}
 8002478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800247e:	6163      	str	r3, [r4, #20]
 8002480:	e7ae      	b.n	80023e0 <HAL_SPI_Init+0x1c>
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	fffff7ff 	.word	0xfffff7ff

08002488 <HAL_SPI_Transmit>:
{
 8002488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800248a:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 800248c:	0003      	movs	r3, r0
{
 800248e:	b085      	sub	sp, #20
 8002490:	9100      	str	r1, [sp, #0]
  __HAL_LOCK(hspi);
 8002492:	3350      	adds	r3, #80	; 0x50
{
 8002494:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 8002496:	781a      	ldrb	r2, [r3, #0]
{
 8002498:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 800249a:	2702      	movs	r7, #2
 800249c:	2a01      	cmp	r2, #1
 800249e:	d100      	bne.n	80024a2 <HAL_SPI_Transmit+0x1a>
 80024a0:	e083      	b.n	80025aa <HAL_SPI_Transmit+0x122>
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80024a6:	f7ff f8ef 	bl	8001688 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80024aa:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80024ac:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 80024ae:	3351      	adds	r3, #81	; 0x51
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	b2d7      	uxtb	r7, r2
 80024b4:	2a01      	cmp	r2, #1
 80024b6:	d000      	beq.n	80024ba <HAL_SPI_Transmit+0x32>
 80024b8:	e0ad      	b.n	8002616 <HAL_SPI_Transmit+0x18e>
  if ((pData == NULL) || (Size == 0U))
 80024ba:	9a00      	ldr	r2, [sp, #0]
 80024bc:	2a00      	cmp	r2, #0
 80024be:	d071      	beq.n	80025a4 <HAL_SPI_Transmit+0x11c>
 80024c0:	2e00      	cmp	r6, #0
 80024c2:	d06f      	beq.n	80025a4 <HAL_SPI_Transmit+0x11c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024c4:	2203      	movs	r2, #3
 80024c6:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024c8:	9a00      	ldr	r2, [sp, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ca:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024cc:	6322      	str	r2, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024d2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024d4:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80024d6:	86e6      	strh	r6, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80024d8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024da:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80024dc:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024de:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferSize  = Size;
 80024e0:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_DISABLE(hspi);
 80024e2:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e4:	0212      	lsls	r2, r2, #8
 80024e6:	4291      	cmp	r1, r2
 80024e8:	d108      	bne.n	80024fc <HAL_SPI_Transmit+0x74>
    __HAL_SPI_DISABLE(hspi);
 80024ea:	2140      	movs	r1, #64	; 0x40
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	438a      	bics	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024f2:	2280      	movs	r2, #128	; 0x80
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	01d2      	lsls	r2, r2, #7
 80024f8:	430a      	orrs	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024fc:	2240      	movs	r2, #64	; 0x40
 80024fe:	6819      	ldr	r1, [r3, #0]
 8002500:	4211      	tst	r1, r2
 8002502:	d102      	bne.n	800250a <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800250e:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002510:	0109      	lsls	r1, r1, #4
 8002512:	4288      	cmp	r0, r1
 8002514:	d14f      	bne.n	80025b6 <HAL_SPI_Transmit+0x12e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002516:	2a00      	cmp	r2, #0
 8002518:	d001      	beq.n	800251e <HAL_SPI_Transmit+0x96>
 800251a:	2e01      	cmp	r6, #1
 800251c:	d109      	bne.n	8002532 <HAL_SPI_Transmit+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800251e:	9a00      	ldr	r2, [sp, #0]
 8002520:	8812      	ldrh	r2, [r2, #0]
 8002522:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002524:	9b00      	ldr	r3, [sp, #0]
 8002526:	1c99      	adds	r1, r3, #2
      hspi->TxXferCount--;
 8002528:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800252a:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800252c:	3b01      	subs	r3, #1
 800252e:	b29b      	uxth	r3, r3
 8002530:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002532:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8002534:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002536:	2b00      	cmp	r3, #0
 8002538:	d119      	bne.n	800256e <HAL_SPI_Transmit+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800253a:	0029      	movs	r1, r5
 800253c:	0020      	movs	r0, r4
 800253e:	9a01      	ldr	r2, [sp, #4]
 8002540:	f7ff ff0e 	bl	8002360 <SPI_EndRxTxTransaction>
 8002544:	2800      	cmp	r0, #0
 8002546:	d163      	bne.n	8002610 <HAL_SPI_Transmit+0x188>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002548:	68a3      	ldr	r3, [r4, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <HAL_SPI_Transmit+0xd4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800254e:	9303      	str	r3, [sp, #12]
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	9203      	str	r2, [sp, #12]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	9303      	str	r3, [sp, #12]
 800255a:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800255c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800255e:	2a00      	cmp	r2, #0
 8002560:	d120      	bne.n	80025a4 <HAL_SPI_Transmit+0x11c>
    hspi->State = HAL_SPI_STATE_READY;
 8002562:	0023      	movs	r3, r4
 8002564:	2101      	movs	r1, #1
 8002566:	3351      	adds	r3, #81	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002568:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 800256a:	7019      	strb	r1, [r3, #0]
 800256c:	e01a      	b.n	80025a4 <HAL_SPI_Transmit+0x11c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800256e:	6822      	ldr	r2, [r4, #0]
 8002570:	6893      	ldr	r3, [r2, #8]
 8002572:	4233      	tst	r3, r6
 8002574:	d009      	beq.n	800258a <HAL_SPI_Transmit+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002576:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002578:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800257a:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800257c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800257e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002580:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002582:	3b01      	subs	r3, #1
 8002584:	b29b      	uxth	r3, r3
 8002586:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002588:	e7d4      	b.n	8002534 <HAL_SPI_Transmit+0xac>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800258a:	f7ff f87d 	bl	8001688 <HAL_GetTick>
 800258e:	9b01      	ldr	r3, [sp, #4]
 8002590:	1ac0      	subs	r0, r0, r3
 8002592:	42a8      	cmp	r0, r5
 8002594:	d30c      	bcc.n	80025b0 <HAL_SPI_Transmit+0x128>
 8002596:	1c6b      	adds	r3, r5, #1
 8002598:	d0cc      	beq.n	8002534 <HAL_SPI_Transmit+0xac>
          hspi->State = HAL_SPI_STATE_READY;
 800259a:	0023      	movs	r3, r4
 800259c:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 800259e:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 80025a0:	3351      	adds	r3, #81	; 0x51
 80025a2:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80025a4:	2300      	movs	r3, #0
 80025a6:	3450      	adds	r4, #80	; 0x50
 80025a8:	7023      	strb	r3, [r4, #0]
}
 80025aa:	0038      	movs	r0, r7
 80025ac:	b005      	add	sp, #20
 80025ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025b0:	2d00      	cmp	r5, #0
 80025b2:	d1bf      	bne.n	8002534 <HAL_SPI_Transmit+0xac>
 80025b4:	e7f1      	b.n	800259a <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025b6:	2a00      	cmp	r2, #0
 80025b8:	d001      	beq.n	80025be <HAL_SPI_Transmit+0x136>
 80025ba:	2e01      	cmp	r6, #1
 80025bc:	d109      	bne.n	80025d2 <HAL_SPI_Transmit+0x14a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025be:	9a00      	ldr	r2, [sp, #0]
 80025c0:	7812      	ldrb	r2, [r2, #0]
 80025c2:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025c6:	3301      	adds	r3, #1
 80025c8:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80025ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025d2:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 80025d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0af      	beq.n	800253a <HAL_SPI_Transmit+0xb2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	4232      	tst	r2, r6
 80025e0:	d00a      	beq.n	80025f8 <HAL_SPI_Transmit+0x170>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025ea:	3301      	adds	r3, #1
 80025ec:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80025ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80025f6:	e7ed      	b.n	80025d4 <HAL_SPI_Transmit+0x14c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025f8:	f7ff f846 	bl	8001688 <HAL_GetTick>
 80025fc:	9b01      	ldr	r3, [sp, #4]
 80025fe:	1ac0      	subs	r0, r0, r3
 8002600:	42a8      	cmp	r0, r5
 8002602:	d302      	bcc.n	800260a <HAL_SPI_Transmit+0x182>
 8002604:	1c6b      	adds	r3, r5, #1
 8002606:	d0e5      	beq.n	80025d4 <HAL_SPI_Transmit+0x14c>
 8002608:	e7c7      	b.n	800259a <HAL_SPI_Transmit+0x112>
 800260a:	2d00      	cmp	r5, #0
 800260c:	d1e2      	bne.n	80025d4 <HAL_SPI_Transmit+0x14c>
 800260e:	e7c4      	b.n	800259a <HAL_SPI_Transmit+0x112>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002610:	2320      	movs	r3, #32
 8002612:	6563      	str	r3, [r4, #84]	; 0x54
 8002614:	e798      	b.n	8002548 <HAL_SPI_Transmit+0xc0>
    errorcode = HAL_BUSY;
 8002616:	2702      	movs	r7, #2
 8002618:	e7c4      	b.n	80025a4 <HAL_SPI_Transmit+0x11c>
	...

0800261c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800261c:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002622:	2201      	movs	r2, #1
 8002624:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002628:	6801      	ldr	r1, [r0, #0]
 800262a:	4d12      	ldr	r5, [pc, #72]	; (8002674 <UART_EndRxTransfer+0x58>)
 800262c:	680b      	ldr	r3, [r1, #0]
 800262e:	402b      	ands	r3, r5
 8002630:	600b      	str	r3, [r1, #0]
 8002632:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002636:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800263a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263e:	6801      	ldr	r1, [r0, #0]
 8002640:	688b      	ldr	r3, [r1, #8]
 8002642:	4393      	bics	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
 8002646:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800264a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800264c:	4293      	cmp	r3, r2
 800264e:	d10a      	bne.n	8002666 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002650:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002654:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002658:	2410      	movs	r4, #16
 800265a:	6802      	ldr	r2, [r0, #0]
 800265c:	6813      	ldr	r3, [r2, #0]
 800265e:	43a3      	bics	r3, r4
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002666:	2220      	movs	r2, #32
 8002668:	1d03      	adds	r3, r0, #4
 800266a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800266c:	2300      	movs	r3, #0
 800266e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002670:	6683      	str	r3, [r0, #104]	; 0x68
}
 8002672:	bd30      	pop	{r4, r5, pc}
 8002674:	fffffedf 	.word	0xfffffedf

08002678 <HAL_UART_TxCpltCallback>:
 8002678:	4770      	bx	lr

0800267a <HAL_UART_ErrorCallback>:
 800267a:	4770      	bx	lr

0800267c <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800267c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	0002      	movs	r2, r0
{
 8002682:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8002684:	325a      	adds	r2, #90	; 0x5a
 8002686:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8002688:	3a08      	subs	r2, #8
 800268a:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800268c:	f7ff fff5 	bl	800267a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002690:	bd10      	pop	{r4, pc}

08002692 <HAL_UARTEx_RxEventCallback>:
}
 8002692:	4770      	bx	lr

08002694 <HAL_UART_IRQHandler>:
{
 8002694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002696:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002698:	6800      	ldr	r0, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800269a:	4bab      	ldr	r3, [pc, #684]	; (8002948 <HAL_UART_IRQHandler+0x2b4>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800269c:	69c1      	ldr	r1, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800269e:	6806      	ldr	r6, [r0, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026a0:	6885      	ldr	r5, [r0, #8]
  if (errorflags == 0U)
 80026a2:	4219      	tst	r1, r3
 80026a4:	d10b      	bne.n	80026be <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80026a6:	2320      	movs	r3, #32
 80026a8:	4219      	tst	r1, r3
 80026aa:	d100      	bne.n	80026ae <HAL_UART_IRQHandler+0x1a>
 80026ac:	e080      	b.n	80027b0 <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026ae:	421e      	tst	r6, r3
 80026b0:	d100      	bne.n	80026b4 <HAL_UART_IRQHandler+0x20>
 80026b2:	e07d      	b.n	80027b0 <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 80026b4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      huart->TxISR(huart);
 80026b6:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d16f      	bne.n	800279c <HAL_UART_IRQHandler+0x108>
 80026bc:	e06f      	b.n	800279e <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80026be:	2301      	movs	r3, #1
 80026c0:	002f      	movs	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80026c2:	4aa2      	ldr	r2, [pc, #648]	; (800294c <HAL_UART_IRQHandler+0x2b8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80026c4:	401f      	ands	r7, r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80026c6:	4032      	ands	r2, r6
 80026c8:	433a      	orrs	r2, r7
 80026ca:	d100      	bne.n	80026ce <HAL_UART_IRQHandler+0x3a>
 80026cc:	e070      	b.n	80027b0 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026ce:	0025      	movs	r5, r4
 80026d0:	3508      	adds	r5, #8
 80026d2:	4219      	tst	r1, r3
 80026d4:	d005      	beq.n	80026e2 <HAL_UART_IRQHandler+0x4e>
 80026d6:	05f2      	lsls	r2, r6, #23
 80026d8:	d503      	bpl.n	80026e2 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026da:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026dc:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80026de:	4313      	orrs	r3, r2
 80026e0:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026e2:	2302      	movs	r3, #2
 80026e4:	4219      	tst	r1, r3
 80026e6:	d006      	beq.n	80026f6 <HAL_UART_IRQHandler+0x62>
 80026e8:	2f00      	cmp	r7, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026ec:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026ee:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80026f0:	18db      	adds	r3, r3, r3
 80026f2:	4313      	orrs	r3, r2
 80026f4:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026f6:	2304      	movs	r3, #4
 80026f8:	4219      	tst	r1, r3
 80026fa:	d006      	beq.n	800270a <HAL_UART_IRQHandler+0x76>
 80026fc:	2f00      	cmp	r7, #0
 80026fe:	d004      	beq.n	800270a <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002700:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002702:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002704:	3b02      	subs	r3, #2
 8002706:	4313      	orrs	r3, r2
 8002708:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800270a:	2308      	movs	r3, #8
 800270c:	4219      	tst	r1, r3
 800270e:	d007      	beq.n	8002720 <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002710:	2220      	movs	r2, #32
 8002712:	4032      	ands	r2, r6
 8002714:	433a      	orrs	r2, r7
 8002716:	d003      	beq.n	8002720 <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002718:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800271a:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800271c:	4313      	orrs	r3, r2
 800271e:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	4219      	tst	r1, r3
 8002726:	d006      	beq.n	8002736 <HAL_UART_IRQHandler+0xa2>
 8002728:	0172      	lsls	r2, r6, #5
 800272a:	d504      	bpl.n	8002736 <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800272c:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800272e:	2320      	movs	r3, #32
 8002730:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002732:	4313      	orrs	r3, r2
 8002734:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002736:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d030      	beq.n	800279e <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800273c:	2320      	movs	r3, #32
 800273e:	4219      	tst	r1, r3
 8002740:	d006      	beq.n	8002750 <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002742:	421e      	tst	r6, r3
 8002744:	d004      	beq.n	8002750 <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 8002746:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 800274c:	0020      	movs	r0, r4
 800274e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002750:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8002752:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002754:	2740      	movs	r7, #64	; 0x40
 8002756:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002758:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800275a:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800275c:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 800275e:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002760:	431e      	orrs	r6, r3
 8002762:	d021      	beq.n	80027a8 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8002764:	f7ff ff5a 	bl	800261c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	423b      	tst	r3, r7
 800276e:	d017      	beq.n	80027a0 <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002770:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002774:	2301      	movs	r3, #1
 8002776:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800277a:	6822      	ldr	r2, [r4, #0]
 800277c:	6893      	ldr	r3, [r2, #8]
 800277e:	43bb      	bics	r3, r7
 8002780:	6093      	str	r3, [r2, #8]
 8002782:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002786:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002788:	2800      	cmp	r0, #0
 800278a:	d009      	beq.n	80027a0 <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800278c:	4b70      	ldr	r3, [pc, #448]	; (8002950 <HAL_UART_IRQHandler+0x2bc>)
 800278e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002790:	f7ff f810 	bl	80017b4 <HAL_DMA_Abort_IT>
 8002794:	2800      	cmp	r0, #0
 8002796:	d002      	beq.n	800279e <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002798:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800279a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800279c:	4798      	blx	r3
}
 800279e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80027a0:	0020      	movs	r0, r4
 80027a2:	f7ff ff6a 	bl	800267a <HAL_UART_ErrorCallback>
 80027a6:	e7fa      	b.n	800279e <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 80027a8:	f7ff ff67 	bl	800267a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ac:	67ee      	str	r6, [r5, #124]	; 0x7c
 80027ae:	e7f6      	b.n	800279e <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d000      	beq.n	80027b8 <HAL_UART_IRQHandler+0x124>
 80027b6:	e09a      	b.n	80028ee <HAL_UART_IRQHandler+0x25a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80027b8:	2210      	movs	r2, #16
 80027ba:	4211      	tst	r1, r2
 80027bc:	d100      	bne.n	80027c0 <HAL_UART_IRQHandler+0x12c>
 80027be:	e096      	b.n	80028ee <HAL_UART_IRQHandler+0x25a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80027c0:	4216      	tst	r6, r2
 80027c2:	d100      	bne.n	80027c6 <HAL_UART_IRQHandler+0x132>
 80027c4:	e093      	b.n	80028ee <HAL_UART_IRQHandler+0x25a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80027c6:	6202      	str	r2, [r0, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c8:	6881      	ldr	r1, [r0, #8]
 80027ca:	2640      	movs	r6, #64	; 0x40
 80027cc:	000f      	movs	r7, r1
 80027ce:	4037      	ands	r7, r6
 80027d0:	4231      	tst	r1, r6
 80027d2:	d053      	beq.n	800287c <HAL_UART_IRQHandler+0x1e8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027d4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80027d6:	6808      	ldr	r0, [r1, #0]
 80027d8:	6841      	ldr	r1, [r0, #4]
 80027da:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 80027dc:	2900      	cmp	r1, #0
 80027de:	d0de      	beq.n	800279e <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027e0:	0025      	movs	r5, r4
 80027e2:	3558      	adds	r5, #88	; 0x58
 80027e4:	882d      	ldrh	r5, [r5, #0]
 80027e6:	428d      	cmp	r5, r1
 80027e8:	d9d9      	bls.n	800279e <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 80027ea:	0025      	movs	r5, r4
 80027ec:	355a      	adds	r5, #90	; 0x5a
 80027ee:	8029      	strh	r1, [r5, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80027f0:	6801      	ldr	r1, [r0, #0]
 80027f2:	2020      	movs	r0, #32
 80027f4:	000d      	movs	r5, r1
 80027f6:	4005      	ands	r5, r0
 80027f8:	9501      	str	r5, [sp, #4]
 80027fa:	4201      	tst	r1, r0
 80027fc:	d130      	bne.n	8002860 <HAL_UART_IRQHandler+0x1cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fe:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002802:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002806:	6825      	ldr	r5, [r4, #0]
 8002808:	4a52      	ldr	r2, [pc, #328]	; (8002954 <HAL_UART_IRQHandler+0x2c0>)
 800280a:	6829      	ldr	r1, [r5, #0]
 800280c:	4011      	ands	r1, r2
 800280e:	6029      	str	r1, [r5, #0]
 8002810:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002814:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002818:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800281c:	6825      	ldr	r5, [r4, #0]
 800281e:	68a9      	ldr	r1, [r5, #8]
 8002820:	4399      	bics	r1, r3
 8002822:	60a9      	str	r1, [r5, #8]
 8002824:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002828:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800282c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002830:	0021      	movs	r1, r4
 8002832:	c980      	ldmia	r1!, {r7}
 8002834:	68bd      	ldr	r5, [r7, #8]
 8002836:	43b5      	bics	r5, r6
 8002838:	60bd      	str	r5, [r7, #8]
 800283a:	f38c 8810 	msr	PRIMASK, ip
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800283e:	9a01      	ldr	r2, [sp, #4]
          huart->RxState = HAL_UART_STATE_READY;
 8002840:	67c8      	str	r0, [r1, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002842:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002844:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002848:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800284c:	2210      	movs	r2, #16
 800284e:	6821      	ldr	r1, [r4, #0]
 8002850:	680b      	ldr	r3, [r1, #0]
 8002852:	4393      	bics	r3, r2
 8002854:	600b      	str	r3, [r1, #0]
 8002856:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 800285a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800285c:	f7fe ff8a 	bl	8001774 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002860:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002862:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002864:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002866:	0023      	movs	r3, r4
 8002868:	3258      	adds	r2, #88	; 0x58
 800286a:	335a      	adds	r3, #90	; 0x5a
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	8811      	ldrh	r1, [r2, #0]
 8002870:	1ac9      	subs	r1, r1, r3
 8002872:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002874:	0020      	movs	r0, r4
 8002876:	f7ff ff0c 	bl	8002692 <HAL_UARTEx_RxEventCallback>
 800287a:	e790      	b.n	800279e <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800287c:	0025      	movs	r5, r4
 800287e:	355a      	adds	r5, #90	; 0x5a
 8002880:	8828      	ldrh	r0, [r5, #0]
      if ((huart->RxXferCount > 0U)
 8002882:	8829      	ldrh	r1, [r5, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002884:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8002886:	2900      	cmp	r1, #0
 8002888:	d100      	bne.n	800288c <HAL_UART_IRQHandler+0x1f8>
 800288a:	e788      	b.n	800279e <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800288c:	0021      	movs	r1, r4
 800288e:	3158      	adds	r1, #88	; 0x58
 8002890:	8809      	ldrh	r1, [r1, #0]
 8002892:	1a09      	subs	r1, r1, r0
 8002894:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002896:	2900      	cmp	r1, #0
 8002898:	d100      	bne.n	800289c <HAL_UART_IRQHandler+0x208>
 800289a:	e780      	b.n	800279e <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800289c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028a4:	6825      	ldr	r5, [r4, #0]
 80028a6:	4a2c      	ldr	r2, [pc, #176]	; (8002958 <HAL_UART_IRQHandler+0x2c4>)
 80028a8:	6828      	ldr	r0, [r5, #0]
 80028aa:	4010      	ands	r0, r2
 80028ac:	6028      	str	r0, [r5, #0]
 80028ae:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b6:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ba:	0020      	movs	r0, r4
 80028bc:	c840      	ldmia	r0!, {r6}
 80028be:	68b5      	ldr	r5, [r6, #8]
 80028c0:	439d      	bics	r5, r3
 80028c2:	60b5      	str	r5, [r6, #8]
 80028c4:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 80028c8:	2520      	movs	r5, #32
 80028ca:	67c5      	str	r5, [r0, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028cc:	6627      	str	r7, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 80028ce:	66a7      	str	r7, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d4:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d8:	6820      	ldr	r0, [r4, #0]
 80028da:	3232      	adds	r2, #50	; 0x32
 80028dc:	6803      	ldr	r3, [r0, #0]
 80028de:	32ff      	adds	r2, #255	; 0xff
 80028e0:	4393      	bics	r3, r2
 80028e2:	6003      	str	r3, [r0, #0]
 80028e4:	f385 8810 	msr	PRIMASK, r5
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028e8:	2302      	movs	r3, #2
 80028ea:	6663      	str	r3, [r4, #100]	; 0x64
 80028ec:	e7c2      	b.n	8002874 <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	035b      	lsls	r3, r3, #13
 80028f2:	4219      	tst	r1, r3
 80028f4:	d006      	beq.n	8002904 <HAL_UART_IRQHandler+0x270>
 80028f6:	026a      	lsls	r2, r5, #9
 80028f8:	d504      	bpl.n	8002904 <HAL_UART_IRQHandler+0x270>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80028fa:	6203      	str	r3, [r0, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80028fc:	0020      	movs	r0, r4
 80028fe:	f000 fcd9 	bl	80032b4 <HAL_UARTEx_WakeupCallback>
    return;
 8002902:	e74c      	b.n	800279e <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	4219      	tst	r1, r3
 8002908:	d003      	beq.n	8002912 <HAL_UART_IRQHandler+0x27e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800290a:	421e      	tst	r6, r3
 800290c:	d001      	beq.n	8002912 <HAL_UART_IRQHandler+0x27e>
    if (huart->TxISR != NULL)
 800290e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002910:	e6d1      	b.n	80026b6 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002912:	2240      	movs	r2, #64	; 0x40
 8002914:	4211      	tst	r1, r2
 8002916:	d100      	bne.n	800291a <HAL_UART_IRQHandler+0x286>
 8002918:	e741      	b.n	800279e <HAL_UART_IRQHandler+0x10a>
 800291a:	4216      	tst	r6, r2
 800291c:	d100      	bne.n	8002920 <HAL_UART_IRQHandler+0x28c>
 800291e:	e73e      	b.n	800279e <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002920:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002924:	2301      	movs	r3, #1
 8002926:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800292a:	6821      	ldr	r1, [r4, #0]
 800292c:	680b      	ldr	r3, [r1, #0]
 800292e:	4393      	bics	r3, r2
 8002930:	600b      	str	r3, [r1, #0]
 8002932:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002936:	2320      	movs	r3, #32
 8002938:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800293a:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800293c:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800293e:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 8002940:	f7ff fe9a 	bl	8002678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002944:	e72b      	b.n	800279e <HAL_UART_IRQHandler+0x10a>
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	0000080f 	.word	0x0000080f
 800294c:	04000120 	.word	0x04000120
 8002950:	0800267d 	.word	0x0800267d
 8002954:	fffffeff 	.word	0xfffffeff
 8002958:	fffffedf 	.word	0xfffffedf

0800295c <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800295c:	1d01      	adds	r1, r0, #4
 800295e:	6fca      	ldr	r2, [r1, #124]	; 0x7c
{
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002962:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002964:	2a22      	cmp	r2, #34	; 0x22
 8002966:	d15d      	bne.n	8002a24 <UART_RxISR_8BIT+0xc8>
  uint16_t uhMask = huart->Mask;
 8002968:	0002      	movs	r2, r0
 800296a:	325c      	adds	r2, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800296e:	8812      	ldrh	r2, [r2, #0]
 8002970:	4013      	ands	r3, r2
 8002972:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002974:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8002976:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8002978:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800297a:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 800297c:	3301      	adds	r3, #1
 800297e:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002980:	8813      	ldrh	r3, [r2, #0]
 8002982:	3b01      	subs	r3, #1
 8002984:	b29b      	uxth	r3, r3
 8002986:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8002988:	8813      	ldrh	r3, [r2, #0]
 800298a:	b29c      	uxth	r4, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d145      	bne.n	8002a1c <UART_RxISR_8BIT+0xc0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002990:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002994:	3301      	adds	r3, #1
 8002996:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800299a:	6805      	ldr	r5, [r0, #0]
 800299c:	4f24      	ldr	r7, [pc, #144]	; (8002a30 <UART_RxISR_8BIT+0xd4>)
 800299e:	682a      	ldr	r2, [r5, #0]
 80029a0:	403a      	ands	r2, r7
 80029a2:	602a      	str	r2, [r5, #0]
 80029a4:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ac:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b0:	6805      	ldr	r5, [r0, #0]
 80029b2:	68aa      	ldr	r2, [r5, #8]
 80029b4:	439a      	bics	r2, r3
 80029b6:	60aa      	str	r2, [r5, #8]
 80029b8:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029bc:	2220      	movs	r2, #32
 80029be:	67ca      	str	r2, [r1, #124]	; 0x7c
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80029c0:	6802      	ldr	r2, [r0, #0]
 80029c2:	491c      	ldr	r1, [pc, #112]	; (8002a34 <UART_RxISR_8BIT+0xd8>)
      huart->RxISR = NULL;
 80029c4:	6684      	str	r4, [r0, #104]	; 0x68
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029c6:	6644      	str	r4, [r0, #100]	; 0x64
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80029c8:	428a      	cmp	r2, r1
 80029ca:	d00d      	beq.n	80029e8 <UART_RxISR_8BIT+0x8c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029cc:	6852      	ldr	r2, [r2, #4]
 80029ce:	0212      	lsls	r2, r2, #8
 80029d0:	d50a      	bpl.n	80029e8 <UART_RxISR_8BIT+0x8c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029d2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d6:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80029da:	6802      	ldr	r2, [r0, #0]
 80029dc:	4c16      	ldr	r4, [pc, #88]	; (8002a38 <UART_RxISR_8BIT+0xdc>)
 80029de:	6813      	ldr	r3, [r2, #0]
 80029e0:	4023      	ands	r3, r4
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029e8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d117      	bne.n	8002a1e <UART_RxISR_8BIT+0xc2>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ee:	2200      	movs	r2, #0
 80029f0:	6602      	str	r2, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f6:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029fa:	6801      	ldr	r1, [r0, #0]
 80029fc:	330f      	adds	r3, #15
 80029fe:	680a      	ldr	r2, [r1, #0]
 8002a00:	439a      	bics	r2, r3
 8002a02:	600a      	str	r2, [r1, #0]
 8002a04:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002a08:	6802      	ldr	r2, [r0, #0]
 8002a0a:	69d1      	ldr	r1, [r2, #28]
 8002a0c:	4219      	tst	r1, r3
 8002a0e:	d000      	beq.n	8002a12 <UART_RxISR_8BIT+0xb6>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a10:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a12:	0003      	movs	r3, r0
 8002a14:	3358      	adds	r3, #88	; 0x58
 8002a16:	8819      	ldrh	r1, [r3, #0]
 8002a18:	f7ff fe3b 	bl	8002692 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8002a1e:	f7fe fadd 	bl	8000fdc <HAL_UART_RxCpltCallback>
 8002a22:	e7fb      	b.n	8002a1c <UART_RxISR_8BIT+0xc0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002a24:	2208      	movs	r2, #8
 8002a26:	6999      	ldr	r1, [r3, #24]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	619a      	str	r2, [r3, #24]
}
 8002a2c:	e7f6      	b.n	8002a1c <UART_RxISR_8BIT+0xc0>
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	fffffedf 	.word	0xfffffedf
 8002a34:	40004800 	.word	0x40004800
 8002a38:	fbffffff 	.word	0xfbffffff

08002a3c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a3c:	1d02      	adds	r2, r0, #4
 8002a3e:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
{
 8002a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002a42:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a44:	2922      	cmp	r1, #34	; 0x22
 8002a46:	d15c      	bne.n	8002b02 <UART_RxISR_16BIT+0xc6>
  uint16_t uhMask = huart->Mask;
 8002a48:	0004      	movs	r4, r0
 8002a4a:	345c      	adds	r4, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002a4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8002a4e:	8824      	ldrh	r4, [r4, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002a50:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8002a52:	4021      	ands	r1, r4
 8002a54:	8019      	strh	r1, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8002a56:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 8002a58:	3302      	adds	r3, #2
 8002a5a:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002a5c:	315a      	adds	r1, #90	; 0x5a
 8002a5e:	880b      	ldrh	r3, [r1, #0]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	800b      	strh	r3, [r1, #0]

    if (huart->RxXferCount == 0U)
 8002a66:	880b      	ldrh	r3, [r1, #0]
 8002a68:	b29c      	uxth	r4, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d145      	bne.n	8002afa <UART_RxISR_16BIT+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a6e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a72:	3301      	adds	r3, #1
 8002a74:	f383 8810 	msr	PRIMASK, r3
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a78:	6805      	ldr	r5, [r0, #0]
 8002a7a:	4f24      	ldr	r7, [pc, #144]	; (8002b0c <UART_RxISR_16BIT+0xd0>)
 8002a7c:	6829      	ldr	r1, [r5, #0]
 8002a7e:	4039      	ands	r1, r7
 8002a80:	6029      	str	r1, [r5, #0]
 8002a82:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a86:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a8a:	f383 8810 	msr	PRIMASK, r3

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8e:	6805      	ldr	r5, [r0, #0]
 8002a90:	68a9      	ldr	r1, [r5, #8]
 8002a92:	4399      	bics	r1, r3
 8002a94:	60a9      	str	r1, [r5, #8]
 8002a96:	f386 8810 	msr	PRIMASK, r6

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a9a:	2120      	movs	r1, #32
 8002a9c:	67d1      	str	r1, [r2, #124]	; 0x7c
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002a9e:	6802      	ldr	r2, [r0, #0]
 8002aa0:	491b      	ldr	r1, [pc, #108]	; (8002b10 <UART_RxISR_16BIT+0xd4>)
      huart->RxISR = NULL;
 8002aa2:	6684      	str	r4, [r0, #104]	; 0x68
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002aa4:	6644      	str	r4, [r0, #100]	; 0x64
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002aa6:	428a      	cmp	r2, r1
 8002aa8:	d00d      	beq.n	8002ac6 <UART_RxISR_16BIT+0x8a>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002aaa:	6852      	ldr	r2, [r2, #4]
 8002aac:	0212      	lsls	r2, r2, #8
 8002aae:	d50a      	bpl.n	8002ac6 <UART_RxISR_16BIT+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab4:	f383 8810 	msr	PRIMASK, r3
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ab8:	6802      	ldr	r2, [r0, #0]
 8002aba:	4c16      	ldr	r4, [pc, #88]	; (8002b14 <UART_RxISR_16BIT+0xd8>)
 8002abc:	6813      	ldr	r3, [r2, #0]
 8002abe:	4023      	ands	r3, r4
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	f381 8810 	msr	PRIMASK, r1
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d117      	bne.n	8002afc <UART_RxISR_16BIT+0xc0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002acc:	2200      	movs	r2, #0
 8002ace:	6602      	str	r2, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad4:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad8:	6801      	ldr	r1, [r0, #0]
 8002ada:	330f      	adds	r3, #15
 8002adc:	680a      	ldr	r2, [r1, #0]
 8002ade:	439a      	bics	r2, r3
 8002ae0:	600a      	str	r2, [r1, #0]
 8002ae2:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002ae6:	6802      	ldr	r2, [r0, #0]
 8002ae8:	69d1      	ldr	r1, [r2, #28]
 8002aea:	4219      	tst	r1, r3
 8002aec:	d000      	beq.n	8002af0 <UART_RxISR_16BIT+0xb4>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002aee:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002af0:	0003      	movs	r3, r0
 8002af2:	3358      	adds	r3, #88	; 0x58
 8002af4:	8819      	ldrh	r1, [r3, #0]
 8002af6:	f7ff fdcc 	bl	8002692 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_UART_RxCpltCallback(huart);
 8002afc:	f7fe fa6e 	bl	8000fdc <HAL_UART_RxCpltCallback>
 8002b00:	e7fb      	b.n	8002afa <UART_RxISR_16BIT+0xbe>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002b02:	2208      	movs	r2, #8
 8002b04:	6999      	ldr	r1, [r3, #24]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	619a      	str	r2, [r3, #24]
}
 8002b0a:	e7f6      	b.n	8002afa <UART_RxISR_16BIT+0xbe>
 8002b0c:	fffffedf 	.word	0xfffffedf
 8002b10:	40004800 	.word	0x40004800
 8002b14:	fbffffff 	.word	0xfbffffff

08002b18 <UART_SetConfig>:
{
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b1c:	6925      	ldr	r5, [r4, #16]
 8002b1e:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b20:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b22:	4329      	orrs	r1, r5
 8002b24:	6965      	ldr	r5, [r4, #20]
 8002b26:	69c3      	ldr	r3, [r0, #28]
 8002b28:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b2a:	6810      	ldr	r0, [r2, #0]
 8002b2c:	4d72      	ldr	r5, [pc, #456]	; (8002cf8 <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b2e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b30:	4028      	ands	r0, r5
 8002b32:	4301      	orrs	r1, r0
 8002b34:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b36:	6851      	ldr	r1, [r2, #4]
 8002b38:	4870      	ldr	r0, [pc, #448]	; (8002cfc <UART_SetConfig+0x1e4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b3a:	4d71      	ldr	r5, [pc, #452]	; (8002d00 <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b3c:	4001      	ands	r1, r0
 8002b3e:	68e0      	ldr	r0, [r4, #12]
 8002b40:	4301      	orrs	r1, r0
 8002b42:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b44:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b46:	42aa      	cmp	r2, r5
 8002b48:	d001      	beq.n	8002b4e <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8002b4a:	6a21      	ldr	r1, [r4, #32]
 8002b4c:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b4e:	6891      	ldr	r1, [r2, #8]
 8002b50:	4e6c      	ldr	r6, [pc, #432]	; (8002d04 <UART_SetConfig+0x1ec>)
 8002b52:	4031      	ands	r1, r6
 8002b54:	4301      	orrs	r1, r0
 8002b56:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b58:	496b      	ldr	r1, [pc, #428]	; (8002d08 <UART_SetConfig+0x1f0>)
 8002b5a:	428a      	cmp	r2, r1
 8002b5c:	d10f      	bne.n	8002b7e <UART_SetConfig+0x66>
 8002b5e:	2103      	movs	r1, #3
 8002b60:	4a6a      	ldr	r2, [pc, #424]	; (8002d0c <UART_SetConfig+0x1f4>)
 8002b62:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b64:	400a      	ands	r2, r1
 8002b66:	3a01      	subs	r2, #1
 8002b68:	4969      	ldr	r1, [pc, #420]	; (8002d10 <UART_SetConfig+0x1f8>)
 8002b6a:	2a02      	cmp	r2, #2
 8002b6c:	d90f      	bls.n	8002b8e <UART_SetConfig+0x76>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b6e:	2280      	movs	r2, #128	; 0x80
 8002b70:	0212      	lsls	r2, r2, #8
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d100      	bne.n	8002b78 <UART_SetConfig+0x60>
 8002b76:	e069      	b.n	8002c4c <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b78:	f7ff fab0 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
        break;
 8002b7c:	e09c      	b.n	8002cb8 <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b7e:	4965      	ldr	r1, [pc, #404]	; (8002d14 <UART_SetConfig+0x1fc>)
 8002b80:	428a      	cmp	r2, r1
 8002b82:	d113      	bne.n	8002bac <UART_SetConfig+0x94>
 8002b84:	210c      	movs	r1, #12
 8002b86:	4a61      	ldr	r2, [pc, #388]	; (8002d0c <UART_SetConfig+0x1f4>)
 8002b88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	4962      	ldr	r1, [pc, #392]	; (8002d18 <UART_SetConfig+0x200>)
 8002b8e:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b90:	2280      	movs	r2, #128	; 0x80
 8002b92:	0212      	lsls	r2, r2, #8
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d000      	beq.n	8002b9a <UART_SetConfig+0x82>
 8002b98:	e07f      	b.n	8002c9a <UART_SetConfig+0x182>
    switch (clocksource)
 8002b9a:	2808      	cmp	r0, #8
 8002b9c:	d818      	bhi.n	8002bd0 <UART_SetConfig+0xb8>
 8002b9e:	f7fd fab3 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002ba2:	5550      	.short	0x5550
 8002ba4:	17791758 	.word	0x17791758
 8002ba8:	1717      	.short	0x1717
 8002baa:	63          	.byte	0x63
 8002bab:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bac:	42aa      	cmp	r2, r5
 8002bae:	d10f      	bne.n	8002bd0 <UART_SetConfig+0xb8>
 8002bb0:	21c0      	movs	r1, #192	; 0xc0
 8002bb2:	2080      	movs	r0, #128	; 0x80
 8002bb4:	4a55      	ldr	r2, [pc, #340]	; (8002d0c <UART_SetConfig+0x1f4>)
 8002bb6:	0109      	lsls	r1, r1, #4
 8002bb8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002bba:	0100      	lsls	r0, r0, #4
 8002bbc:	400b      	ands	r3, r1
 8002bbe:	4283      	cmp	r3, r0
 8002bc0:	d016      	beq.n	8002bf0 <UART_SetConfig+0xd8>
 8002bc2:	d807      	bhi.n	8002bd4 <UART_SetConfig+0xbc>
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <UART_SetConfig+0xc6>
 8002bc8:	2280      	movs	r2, #128	; 0x80
 8002bca:	00d2      	lsls	r2, r2, #3
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d035      	beq.n	8002c3c <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	e009      	b.n	8002be8 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bd4:	428b      	cmp	r3, r1
 8002bd6:	d1fb      	bne.n	8002bd0 <UART_SetConfig+0xb8>
 8002bd8:	2080      	movs	r0, #128	; 0x80
 8002bda:	0200      	lsls	r0, r0, #8
 8002bdc:	e012      	b.n	8002c04 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bde:	f7ff fa6d 	bl	80020bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002be2:	2800      	cmp	r0, #0
 8002be4:	d10e      	bne.n	8002c04 <UART_SetConfig+0xec>
 8002be6:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8002bec:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8002bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	6810      	ldr	r0, [r2, #0]
 8002bf4:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002bf6:	4243      	negs	r3, r0
 8002bf8:	4158      	adcs	r0, r3
 8002bfa:	4b48      	ldr	r3, [pc, #288]	; (8002d1c <UART_SetConfig+0x204>)
 8002bfc:	4240      	negs	r0, r0
 8002bfe:	4018      	ands	r0, r3
 8002c00:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <UART_SetConfig+0x208>)
 8002c02:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c04:	2203      	movs	r2, #3
 8002c06:	6863      	ldr	r3, [r4, #4]
 8002c08:	435a      	muls	r2, r3
 8002c0a:	4282      	cmp	r2, r0
 8002c0c:	d8e0      	bhi.n	8002bd0 <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c0e:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c10:	4282      	cmp	r2, r0
 8002c12:	d3dd      	bcc.n	8002bd0 <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c14:	2700      	movs	r7, #0
 8002c16:	0e02      	lsrs	r2, r0, #24
 8002c18:	0201      	lsls	r1, r0, #8
 8002c1a:	085e      	lsrs	r6, r3, #1
 8002c1c:	1989      	adds	r1, r1, r6
 8002c1e:	417a      	adcs	r2, r7
 8002c20:	0008      	movs	r0, r1
 8002c22:	0011      	movs	r1, r2
 8002c24:	001a      	movs	r2, r3
 8002c26:	003b      	movs	r3, r7
 8002c28:	f7fd fb48 	bl	80002bc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c2c:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <UART_SetConfig+0x20c>)
 8002c2e:	18c2      	adds	r2, r0, r3
 8002c30:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d8cc      	bhi.n	8002bd0 <UART_SetConfig+0xb8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	60d8      	str	r0, [r3, #12]
 8002c3a:	e7d4      	b.n	8002be6 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c3c:	f7fe fea6 	bl	800198c <HAL_RCC_GetSysClockFreq>
        break;
 8002c40:	e7cf      	b.n	8002be2 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c42:	f7ff fa3b 	bl	80020bc <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c46:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002c48:	d0cd      	beq.n	8002be6 <UART_SetConfig+0xce>
 8002c4a:	e00d      	b.n	8002c68 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c4c:	f7ff fa46 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 8002c50:	e7f9      	b.n	8002c46 <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c52:	4b2e      	ldr	r3, [pc, #184]	; (8002d0c <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c54:	4a32      	ldr	r2, [pc, #200]	; (8002d20 <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	2310      	movs	r3, #16
 8002c5a:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c5c:	4243      	negs	r3, r0
 8002c5e:	4158      	adcs	r0, r3
 8002c60:	4b2e      	ldr	r3, [pc, #184]	; (8002d1c <UART_SetConfig+0x204>)
 8002c62:	4240      	negs	r0, r0
 8002c64:	4003      	ands	r3, r0
 8002c66:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c68:	0058      	lsls	r0, r3, #1
 8002c6a:	6863      	ldr	r3, [r4, #4]
 8002c6c:	6861      	ldr	r1, [r4, #4]
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	18c0      	adds	r0, r0, r3
 8002c72:	f7fd fa5d 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c76:	0002      	movs	r2, r0
 8002c78:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <UART_SetConfig+0x214>)
 8002c7a:	3a10      	subs	r2, #16
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d8a7      	bhi.n	8002bd0 <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c80:	230f      	movs	r3, #15
 8002c82:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c84:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c86:	439a      	bics	r2, r3
 8002c88:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c8a:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002c8c:	6822      	ldr	r2, [r4, #0]
 8002c8e:	4318      	orrs	r0, r3
 8002c90:	60d0      	str	r0, [r2, #12]
 8002c92:	e7a8      	b.n	8002be6 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c94:	f7fe fe7a 	bl	800198c <HAL_RCC_GetSysClockFreq>
 8002c98:	e7d5      	b.n	8002c46 <UART_SetConfig+0x12e>
    switch (clocksource)
 8002c9a:	2808      	cmp	r0, #8
 8002c9c:	d898      	bhi.n	8002bd0 <UART_SetConfig+0xb8>
 8002c9e:	f7fd fa3d 	bl	800011c <__gnu_thumb1_case_shi>
 8002ca2:	0009      	.short	0x0009
 8002ca4:	000fff6b 	.word	0x000fff6b
 8002ca8:	0024ff97 	.word	0x0024ff97
 8002cac:	ff97ff97 	.word	0xff97ff97
 8002cb0:	0027ff97 	.word	0x0027ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cb4:	f7ff fa02 	bl	80020bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	d100      	bne.n	8002cbe <UART_SetConfig+0x1a6>
 8002cbc:	e793      	b.n	8002be6 <UART_SetConfig+0xce>
 8002cbe:	e00a      	b.n	8002cd6 <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cc0:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <UART_SetConfig+0x1f4>)
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002cc8:	4243      	negs	r3, r0
 8002cca:	4158      	adcs	r0, r3
 8002ccc:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <UART_SetConfig+0x204>)
 8002cce:	4240      	negs	r0, r0
 8002cd0:	4018      	ands	r0, r3
 8002cd2:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <UART_SetConfig+0x208>)
 8002cd4:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cd6:	6863      	ldr	r3, [r4, #4]
 8002cd8:	6861      	ldr	r1, [r4, #4]
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	1818      	adds	r0, r3, r0
 8002cde:	f7fd fa27 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <UART_SetConfig+0x214>)
 8002ce6:	3a10      	subs	r2, #16
 8002ce8:	e7a3      	b.n	8002c32 <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 8002cea:	f7fe fe4f 	bl	800198c <HAL_RCC_GetSysClockFreq>
        break;
 8002cee:	e7e3      	b.n	8002cb8 <UART_SetConfig+0x1a0>
    switch (clocksource)
 8002cf0:	2080      	movs	r0, #128	; 0x80
 8002cf2:	0200      	lsls	r0, r0, #8
 8002cf4:	e7ef      	b.n	8002cd6 <UART_SetConfig+0x1be>
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	efff69f3 	.word	0xefff69f3
 8002cfc:	ffffcfff 	.word	0xffffcfff
 8002d00:	40004800 	.word	0x40004800
 8002d04:	fffff4ff 	.word	0xfffff4ff
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	0800448d 	.word	0x0800448d
 8002d14:	40004400 	.word	0x40004400
 8002d18:	08004490 	.word	0x08004490
 8002d1c:	00b71b00 	.word	0x00b71b00
 8002d20:	003d0900 	.word	0x003d0900
 8002d24:	fffffd00 	.word	0xfffffd00
 8002d28:	000ffcff 	.word	0x000ffcff
 8002d2c:	0000ffef 	.word	0x0000ffef

08002d30 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d30:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002d32:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d34:	07da      	lsls	r2, r3, #31
 8002d36:	d506      	bpl.n	8002d46 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d38:	6801      	ldr	r1, [r0, #0]
 8002d3a:	4c28      	ldr	r4, [pc, #160]	; (8002ddc <UART_AdvFeatureConfig+0xac>)
 8002d3c:	684a      	ldr	r2, [r1, #4]
 8002d3e:	4022      	ands	r2, r4
 8002d40:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002d42:	4322      	orrs	r2, r4
 8002d44:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d46:	079a      	lsls	r2, r3, #30
 8002d48:	d506      	bpl.n	8002d58 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d4a:	6801      	ldr	r1, [r0, #0]
 8002d4c:	4c24      	ldr	r4, [pc, #144]	; (8002de0 <UART_AdvFeatureConfig+0xb0>)
 8002d4e:	684a      	ldr	r2, [r1, #4]
 8002d50:	4022      	ands	r2, r4
 8002d52:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002d54:	4322      	orrs	r2, r4
 8002d56:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d58:	075a      	lsls	r2, r3, #29
 8002d5a:	d506      	bpl.n	8002d6a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d5c:	6801      	ldr	r1, [r0, #0]
 8002d5e:	4c21      	ldr	r4, [pc, #132]	; (8002de4 <UART_AdvFeatureConfig+0xb4>)
 8002d60:	684a      	ldr	r2, [r1, #4]
 8002d62:	4022      	ands	r2, r4
 8002d64:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002d66:	4322      	orrs	r2, r4
 8002d68:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d6a:	071a      	lsls	r2, r3, #28
 8002d6c:	d506      	bpl.n	8002d7c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d6e:	6801      	ldr	r1, [r0, #0]
 8002d70:	4c1d      	ldr	r4, [pc, #116]	; (8002de8 <UART_AdvFeatureConfig+0xb8>)
 8002d72:	684a      	ldr	r2, [r1, #4]
 8002d74:	4022      	ands	r2, r4
 8002d76:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002d78:	4322      	orrs	r2, r4
 8002d7a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d7c:	06da      	lsls	r2, r3, #27
 8002d7e:	d506      	bpl.n	8002d8e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d80:	6801      	ldr	r1, [r0, #0]
 8002d82:	4c1a      	ldr	r4, [pc, #104]	; (8002dec <UART_AdvFeatureConfig+0xbc>)
 8002d84:	688a      	ldr	r2, [r1, #8]
 8002d86:	4022      	ands	r2, r4
 8002d88:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002d8a:	4322      	orrs	r2, r4
 8002d8c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d8e:	069a      	lsls	r2, r3, #26
 8002d90:	d506      	bpl.n	8002da0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d92:	6801      	ldr	r1, [r0, #0]
 8002d94:	4c16      	ldr	r4, [pc, #88]	; (8002df0 <UART_AdvFeatureConfig+0xc0>)
 8002d96:	688a      	ldr	r2, [r1, #8]
 8002d98:	4022      	ands	r2, r4
 8002d9a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002d9c:	4322      	orrs	r2, r4
 8002d9e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002da0:	065a      	lsls	r2, r3, #25
 8002da2:	d510      	bpl.n	8002dc6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002da4:	6801      	ldr	r1, [r0, #0]
 8002da6:	4d13      	ldr	r5, [pc, #76]	; (8002df4 <UART_AdvFeatureConfig+0xc4>)
 8002da8:	684a      	ldr	r2, [r1, #4]
 8002daa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002dac:	402a      	ands	r2, r5
 8002dae:	4322      	orrs	r2, r4
 8002db0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	0352      	lsls	r2, r2, #13
 8002db6:	4294      	cmp	r4, r2
 8002db8:	d105      	bne.n	8002dc6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dba:	684a      	ldr	r2, [r1, #4]
 8002dbc:	4c0e      	ldr	r4, [pc, #56]	; (8002df8 <UART_AdvFeatureConfig+0xc8>)
 8002dbe:	4022      	ands	r2, r4
 8002dc0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002dc2:	4322      	orrs	r2, r4
 8002dc4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dc6:	061b      	lsls	r3, r3, #24
 8002dc8:	d506      	bpl.n	8002dd8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dca:	6802      	ldr	r2, [r0, #0]
 8002dcc:	490b      	ldr	r1, [pc, #44]	; (8002dfc <UART_AdvFeatureConfig+0xcc>)
 8002dce:	6853      	ldr	r3, [r2, #4]
 8002dd0:	400b      	ands	r3, r1
 8002dd2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	6053      	str	r3, [r2, #4]
}
 8002dd8:	bd30      	pop	{r4, r5, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	fffdffff 	.word	0xfffdffff
 8002de0:	fffeffff 	.word	0xfffeffff
 8002de4:	fffbffff 	.word	0xfffbffff
 8002de8:	ffff7fff 	.word	0xffff7fff
 8002dec:	ffffefff 	.word	0xffffefff
 8002df0:	ffffdfff 	.word	0xffffdfff
 8002df4:	ffefffff 	.word	0xffefffff
 8002df8:	ff9fffff 	.word	0xff9fffff
 8002dfc:	fff7ffff 	.word	0xfff7ffff

08002e00 <UART_WaitOnFlagUntilTimeout>:
{
 8002e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e02:	0004      	movs	r4, r0
 8002e04:	000d      	movs	r5, r1
 8002e06:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e08:	2608      	movs	r6, #8
{
 8002e0a:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0c:	6822      	ldr	r2, [r4, #0]
 8002e0e:	69d3      	ldr	r3, [r2, #28]
 8002e10:	402b      	ands	r3, r5
 8002e12:	1b5b      	subs	r3, r3, r5
 8002e14:	4259      	negs	r1, r3
 8002e16:	414b      	adcs	r3, r1
 8002e18:	42bb      	cmp	r3, r7
 8002e1a:	d001      	beq.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	e021      	b.n	8002e64 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8002e20:	9b08      	ldr	r3, [sp, #32]
 8002e22:	3301      	adds	r3, #1
 8002e24:	d0f3      	beq.n	8002e0e <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7fe fc2f 	bl	8001688 <HAL_GetTick>
 8002e2a:	9b00      	ldr	r3, [sp, #0]
 8002e2c:	1ac0      	subs	r0, r0, r3
 8002e2e:	9b08      	ldr	r3, [sp, #32]
 8002e30:	4298      	cmp	r0, r3
 8002e32:	d828      	bhi.n	8002e86 <UART_WaitOnFlagUntilTimeout+0x86>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d026      	beq.n	8002e86 <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e38:	2104      	movs	r1, #4
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	420a      	tst	r2, r1
 8002e40:	d0e4      	beq.n	8002e0c <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	0011      	movs	r1, r2
 8002e46:	4031      	ands	r1, r6
 8002e48:	9101      	str	r1, [sp, #4]
 8002e4a:	4232      	tst	r2, r6
 8002e4c:	d00b      	beq.n	8002e66 <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 8002e4e:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e50:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8002e52:	f7ff fbe3 	bl	800261c <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e56:	0023      	movs	r3, r4
 8002e58:	3308      	adds	r3, #8
 8002e5a:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8002e5c:	2300      	movs	r3, #0
           return HAL_ERROR;
 8002e5e:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8002e60:	3478      	adds	r4, #120	; 0x78
 8002e62:	7023      	strb	r3, [r4, #0]
}
 8002e64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	69d9      	ldr	r1, [r3, #28]
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	4211      	tst	r1, r2
 8002e6e:	d0cd      	beq.n	8002e0c <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e70:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8002e72:	0020      	movs	r0, r4
 8002e74:	f7ff fbd2 	bl	800261c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e78:	0023      	movs	r3, r4
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002e80:	9b01      	ldr	r3, [sp, #4]
 8002e82:	3478      	adds	r4, #120	; 0x78
 8002e84:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002e86:	2003      	movs	r0, #3
 8002e88:	e7ec      	b.n	8002e64 <UART_WaitOnFlagUntilTimeout+0x64>

08002e8a <HAL_UART_Transmit>:
{
 8002e8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e8c:	b085      	sub	sp, #20
 8002e8e:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8002e90:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8002e92:	0004      	movs	r4, r0
 8002e94:	000d      	movs	r5, r1
 8002e96:	0016      	movs	r6, r2
    return HAL_BUSY;
 8002e98:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d139      	bne.n	8002f12 <HAL_UART_Transmit+0x88>
      return  HAL_ERROR;
 8002e9e:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002ea0:	2900      	cmp	r1, #0
 8002ea2:	d036      	beq.n	8002f12 <HAL_UART_Transmit+0x88>
 8002ea4:	2a00      	cmp	r2, #0
 8002ea6:	d034      	beq.n	8002f12 <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	68a2      	ldr	r2, [r4, #8]
 8002eac:	015b      	lsls	r3, r3, #5
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d104      	bne.n	8002ebc <HAL_UART_Transmit+0x32>
 8002eb2:	6923      	ldr	r3, [r4, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002eb8:	4201      	tst	r1, r0
 8002eba:	d12a      	bne.n	8002f12 <HAL_UART_Transmit+0x88>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	0023      	movs	r3, r4
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ec4:	2321      	movs	r3, #33	; 0x21
 8002ec6:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8002ec8:	f7fe fbde 	bl	8001688 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002ecc:	0023      	movs	r3, r4
 8002ece:	3350      	adds	r3, #80	; 0x50
 8002ed0:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	801e      	strh	r6, [r3, #0]
 8002ed6:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002edc:	0007      	movs	r7, r0
      pdata16bits = NULL;
 8002ede:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee0:	015b      	lsls	r3, r3, #5
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d104      	bne.n	8002ef0 <HAL_UART_Transmit+0x66>
 8002ee6:	6923      	ldr	r3, [r4, #16]
 8002ee8:	42b3      	cmp	r3, r6
 8002eea:	d101      	bne.n	8002ef0 <HAL_UART_Transmit+0x66>
 8002eec:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8002eee:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8002ef0:	0023      	movs	r3, r4
 8002ef2:	3352      	adds	r3, #82	; 0x52
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10c      	bne.n	8002f16 <HAL_UART_Transmit+0x8c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002efc:	9b03      	ldr	r3, [sp, #12]
 8002efe:	2140      	movs	r1, #64	; 0x40
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	0020      	movs	r0, r4
 8002f04:	003b      	movs	r3, r7
 8002f06:	f7ff ff7b 	bl	8002e00 <UART_WaitOnFlagUntilTimeout>
 8002f0a:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8002f0c:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	d10d      	bne.n	8002f2e <HAL_UART_Transmit+0xa4>
}
 8002f12:	b005      	add	sp, #20
 8002f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f16:	9b03      	ldr	r3, [sp, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2180      	movs	r1, #128	; 0x80
 8002f1e:	003b      	movs	r3, r7
 8002f20:	0020      	movs	r0, r4
 8002f22:	f7ff ff6d 	bl	8002e00 <UART_WaitOnFlagUntilTimeout>
 8002f26:	2800      	cmp	r0, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_UART_Transmit+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8002f2e:	2003      	movs	r0, #3
 8002f30:	e7ef      	b.n	8002f12 <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f32:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002f34:	2d00      	cmp	r5, #0
 8002f36:	d10b      	bne.n	8002f50 <HAL_UART_Transmit+0xc6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f38:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8002f3a:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f3c:	05db      	lsls	r3, r3, #23
 8002f3e:	0ddb      	lsrs	r3, r3, #23
 8002f40:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002f42:	9b02      	ldr	r3, [sp, #8]
 8002f44:	9a02      	ldr	r2, [sp, #8]
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	8013      	strh	r3, [r2, #0]
 8002f4e:	e7cf      	b.n	8002ef0 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f50:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8002f52:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f54:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8002f56:	e7f4      	b.n	8002f42 <HAL_UART_Transmit+0xb8>

08002f58 <HAL_UART_Receive>:
{
 8002f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5a:	0016      	movs	r6, r2
 8002f5c:	b087      	sub	sp, #28
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f5e:	1d02      	adds	r2, r0, #4
{
 8002f60:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f62:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
{
 8002f64:	0004      	movs	r4, r0
 8002f66:	000d      	movs	r5, r1
    return HAL_BUSY;
 8002f68:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d160      	bne.n	8003030 <HAL_UART_Receive+0xd8>
      return  HAL_ERROR;
 8002f6e:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002f70:	2900      	cmp	r1, #0
 8002f72:	d05d      	beq.n	8003030 <HAL_UART_Receive+0xd8>
 8002f74:	2e00      	cmp	r6, #0
 8002f76:	d05b      	beq.n	8003030 <HAL_UART_Receive+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	68a1      	ldr	r1, [r4, #8]
 8002f7c:	015b      	lsls	r3, r3, #5
 8002f7e:	4299      	cmp	r1, r3
 8002f80:	d104      	bne.n	8002f8c <HAL_UART_Receive+0x34>
 8002f82:	6923      	ldr	r3, [r4, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_UART_Receive+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f88:	4205      	tst	r5, r0
 8002f8a:	d151      	bne.n	8003030 <HAL_UART_Receive+0xd8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8c:	0023      	movs	r3, r4
 8002f8e:	2700      	movs	r7, #0
 8002f90:	3308      	adds	r3, #8
 8002f92:	67df      	str	r7, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f94:	2322      	movs	r3, #34	; 0x22
 8002f96:	67d3      	str	r3, [r2, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f98:	6627      	str	r7, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 8002f9a:	f7fe fb75 	bl	8001688 <HAL_GetTick>
    huart->RxXferSize  = Size;
 8002f9e:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8002fa0:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 8002fa2:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002fa4:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 8002fa6:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 8002fa8:	3302      	adds	r3, #2
 8002faa:	9303      	str	r3, [sp, #12]
 8002fac:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8002fae:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 8002fb0:	0149      	lsls	r1, r1, #5
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	428a      	cmp	r2, r1
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_UART_Receive+0x98>
 8002fb8:	6921      	ldr	r1, [r4, #16]
 8002fba:	42b9      	cmp	r1, r7
 8002fbc:	d116      	bne.n	8002fec <HAL_UART_Receive+0x94>
 8002fbe:	4926      	ldr	r1, [pc, #152]	; (8003058 <HAL_UART_Receive+0x100>)
 8002fc0:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 8002fc2:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc4:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 8002fc6:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc8:	015b      	lsls	r3, r3, #5
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d104      	bne.n	8002fd8 <HAL_UART_Receive+0x80>
 8002fce:	6923      	ldr	r3, [r4, #16]
 8002fd0:	42b3      	cmp	r3, r6
 8002fd2:	d101      	bne.n	8002fd8 <HAL_UART_Receive+0x80>
 8002fd4:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8002fd6:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 8002fd8:	0023      	movs	r3, r4
 8002fda:	335a      	adds	r3, #90	; 0x5a
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b298      	uxth	r0, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d117      	bne.n	8003014 <HAL_UART_Receive+0xbc>
    huart->RxState = HAL_UART_STATE_READY;
 8002fe4:	3404      	adds	r4, #4
 8002fe6:	3320      	adds	r3, #32
 8002fe8:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8002fea:	e021      	b.n	8003030 <HAL_UART_Receive+0xd8>
    UART_MASK_COMPUTATION(huart);
 8002fec:	21ff      	movs	r1, #255	; 0xff
 8002fee:	e7e7      	b.n	8002fc0 <HAL_UART_Receive+0x68>
 8002ff0:	2a00      	cmp	r2, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_UART_Receive+0xa6>
 8002ff4:	6921      	ldr	r1, [r4, #16]
 8002ff6:	2900      	cmp	r1, #0
 8002ff8:	d0f8      	beq.n	8002fec <HAL_UART_Receive+0x94>
 8002ffa:	217f      	movs	r1, #127	; 0x7f
 8002ffc:	e7e0      	b.n	8002fc0 <HAL_UART_Receive+0x68>
 8002ffe:	2180      	movs	r1, #128	; 0x80
 8003000:	0549      	lsls	r1, r1, #21
 8003002:	428a      	cmp	r2, r1
 8003004:	d104      	bne.n	8003010 <HAL_UART_Receive+0xb8>
 8003006:	6921      	ldr	r1, [r4, #16]
 8003008:	2900      	cmp	r1, #0
 800300a:	d0f6      	beq.n	8002ffa <HAL_UART_Receive+0xa2>
 800300c:	213f      	movs	r1, #63	; 0x3f
 800300e:	e7d7      	b.n	8002fc0 <HAL_UART_Receive+0x68>
 8003010:	801f      	strh	r7, [r3, #0]
 8003012:	e7d6      	b.n	8002fc2 <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003014:	9b05      	ldr	r3, [sp, #20]
 8003016:	2200      	movs	r2, #0
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	2120      	movs	r1, #32
 800301c:	0020      	movs	r0, r4
 800301e:	9b04      	ldr	r3, [sp, #16]
 8003020:	f7ff feee 	bl	8002e00 <UART_WaitOnFlagUntilTimeout>
 8003024:	2800      	cmp	r0, #0
 8003026:	d005      	beq.n	8003034 <HAL_UART_Receive+0xdc>
        huart->RxState = HAL_UART_STATE_READY;
 8003028:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800302a:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 800302c:	3404      	adds	r4, #4
 800302e:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8003030:	b007      	add	sp, #28
 8003032:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 800303a:	2d00      	cmp	r5, #0
 800303c:	d108      	bne.n	8003050 <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800303e:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 8003040:	3602      	adds	r6, #2
      huart->RxXferCount--;
 8003042:	9b03      	ldr	r3, [sp, #12]
 8003044:	9a03      	ldr	r2, [sp, #12]
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	3b01      	subs	r3, #1
 800304a:	b29b      	uxth	r3, r3
 800304c:	8013      	strh	r3, [r2, #0]
 800304e:	e7c3      	b.n	8002fd8 <HAL_UART_Receive+0x80>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003050:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8003052:	3501      	adds	r5, #1
 8003054:	e7f5      	b.n	8003042 <HAL_UART_Receive+0xea>
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	000001ff 	.word	0x000001ff

0800305c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305c:	0003      	movs	r3, r0
{
 800305e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003060:	2500      	movs	r5, #0
{
 8003062:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003064:	3308      	adds	r3, #8
 8003066:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003068:	f7fe fb0e 	bl	8001688 <HAL_GetTick>
 800306c:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800306e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003070:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3678      	adds	r6, #120	; 0x78
 8003076:	071b      	lsls	r3, r3, #28
 8003078:	d51b      	bpl.n	80030b2 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800307a:	2180      	movs	r1, #128	; 0x80
 800307c:	4b26      	ldr	r3, [pc, #152]	; (8003118 <UART_CheckIdleState+0xbc>)
 800307e:	002a      	movs	r2, r5
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	0389      	lsls	r1, r1, #14
 8003084:	0003      	movs	r3, r0
 8003086:	0020      	movs	r0, r4
 8003088:	f7ff feba 	bl	8002e00 <UART_WaitOnFlagUntilTimeout>
 800308c:	42a8      	cmp	r0, r5
 800308e:	d010      	beq.n	80030b2 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003090:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003094:	2301      	movs	r3, #1
 8003096:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800309a:	2080      	movs	r0, #128	; 0x80
 800309c:	6822      	ldr	r2, [r4, #0]
 800309e:	6813      	ldr	r3, [r2, #0]
 80030a0:	4383      	bics	r3, r0
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80030a8:	2320      	movs	r3, #32
 80030aa:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 80030ac:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 80030ae:	2003      	movs	r0, #3
}
 80030b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030b2:	0025      	movs	r5, r4
 80030b4:	cd08      	ldmia	r5!, {r3}
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	075b      	lsls	r3, r3, #29
 80030ba:	d525      	bpl.n	8003108 <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030bc:	2180      	movs	r1, #128	; 0x80
 80030be:	4b16      	ldr	r3, [pc, #88]	; (8003118 <UART_CheckIdleState+0xbc>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	0020      	movs	r0, r4
 80030c6:	003b      	movs	r3, r7
 80030c8:	03c9      	lsls	r1, r1, #15
 80030ca:	f7ff fe99 	bl	8002e00 <UART_WaitOnFlagUntilTimeout>
 80030ce:	2800      	cmp	r0, #0
 80030d0:	d01a      	beq.n	8003108 <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d6:	2201      	movs	r2, #1
 80030d8:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030dc:	6821      	ldr	r1, [r4, #0]
 80030de:	4f0f      	ldr	r7, [pc, #60]	; (800311c <UART_CheckIdleState+0xc0>)
 80030e0:	680b      	ldr	r3, [r1, #0]
 80030e2:	403b      	ands	r3, r7
 80030e4:	600b      	str	r3, [r1, #0]
 80030e6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ea:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ee:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f2:	6821      	ldr	r1, [r4, #0]
 80030f4:	688b      	ldr	r3, [r1, #8]
 80030f6:	4393      	bics	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
 80030fa:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80030fe:	2320      	movs	r3, #32
 8003100:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8003102:	2300      	movs	r3, #0
 8003104:	7033      	strb	r3, [r6, #0]
 8003106:	e7d2      	b.n	80030ae <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003108:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800310a:	2320      	movs	r3, #32
 800310c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800310e:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003110:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003112:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8003114:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 8003116:	e7cb      	b.n	80030b0 <UART_CheckIdleState+0x54>
 8003118:	01ffffff 	.word	0x01ffffff
 800311c:	fffffedf 	.word	0xfffffedf

08003120 <HAL_UART_Init>:
{
 8003120:	b510      	push	{r4, lr}
 8003122:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003124:	d101      	bne.n	800312a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003126:	2001      	movs	r0, #1
}
 8003128:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800312a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d104      	bne.n	800313a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8003130:	0002      	movs	r2, r0
 8003132:	3278      	adds	r2, #120	; 0x78
 8003134:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003136:	f7fe f9f5 	bl	8001524 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800313a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800313c:	2101      	movs	r1, #1
 800313e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003140:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8003142:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003144:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003146:	438b      	bics	r3, r1
 8003148:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800314a:	f7ff fce5 	bl	8002b18 <UART_SetConfig>
 800314e:	2801      	cmp	r0, #1
 8003150:	d0e9      	beq.n	8003126 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8003158:	0020      	movs	r0, r4
 800315a:	f7ff fde9 	bl	8002d30 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	4907      	ldr	r1, [pc, #28]	; (8003180 <HAL_UART_Init+0x60>)
 8003162:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003164:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003166:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003168:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800316a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	438a      	bics	r2, r1
 8003170:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003172:	2201      	movs	r2, #1
 8003174:	6819      	ldr	r1, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800317a:	f7ff ff6f 	bl	800305c <UART_CheckIdleState>
 800317e:	e7d3      	b.n	8003128 <HAL_UART_Init+0x8>
 8003180:	ffffb7ff 	.word	0xffffb7ff

08003184 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8003184:	0003      	movs	r3, r0
{
 8003186:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8003188:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 800318a:	2480      	movs	r4, #128	; 0x80
  huart->RxISR       = NULL;
 800318c:	2100      	movs	r1, #0
  huart->RxXferSize  = Size;
 800318e:	3358      	adds	r3, #88	; 0x58
 8003190:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8003192:	805a      	strh	r2, [r3, #2]
  UART_MASK_COMPUTATION(huart);
 8003194:	6882      	ldr	r2, [r0, #8]
  huart->RxISR       = NULL;
 8003196:	6681      	str	r1, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 8003198:	0164      	lsls	r4, r4, #5
 800319a:	3304      	adds	r3, #4
 800319c:	42a2      	cmp	r2, r4
 800319e:	d134      	bne.n	800320a <UART_Start_Receive_IT+0x86>
 80031a0:	6902      	ldr	r2, [r0, #16]
 80031a2:	428a      	cmp	r2, r1
 80031a4:	d12f      	bne.n	8003206 <UART_Start_Receive_IT+0x82>
 80031a6:	4a26      	ldr	r2, [pc, #152]	; (8003240 <UART_Start_Receive_IT+0xbc>)
 80031a8:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031aa:	0003      	movs	r3, r0
 80031ac:	2200      	movs	r2, #0
 80031ae:	3308      	adds	r3, #8
 80031b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031b2:	1d03      	adds	r3, r0, #4
 80031b4:	3222      	adds	r2, #34	; 0x22
 80031b6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031bc:	2301      	movs	r3, #1
 80031be:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c2:	6802      	ldr	r2, [r0, #0]
 80031c4:	6894      	ldr	r4, [r2, #8]
 80031c6:	4323      	orrs	r3, r4
 80031c8:	6093      	str	r3, [r2, #8]
 80031ca:	f381 8810 	msr	PRIMASK, r1
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ce:	2180      	movs	r1, #128	; 0x80
 80031d0:	6884      	ldr	r4, [r0, #8]
 80031d2:	6902      	ldr	r2, [r0, #16]
    huart->RxISR = UART_RxISR_8BIT;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <UART_Start_Receive_IT+0xc0>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d6:	0149      	lsls	r1, r1, #5
 80031d8:	428c      	cmp	r4, r1
 80031da:	d102      	bne.n	80031e2 <UART_Start_Receive_IT+0x5e>
 80031dc:	2a00      	cmp	r2, #0
 80031de:	d100      	bne.n	80031e2 <UART_Start_Receive_IT+0x5e>
    huart->RxISR = UART_RxISR_16BIT;
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <UART_Start_Receive_IT+0xc4>)
 80031e2:	6683      	str	r3, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 80031e4:	2301      	movs	r3, #1
 80031e6:	2a00      	cmp	r2, #0
 80031e8:	d021      	beq.n	800322e <UART_Start_Receive_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ea:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ee:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80031f2:	6802      	ldr	r2, [r0, #0]
 80031f4:	3320      	adds	r3, #32
 80031f6:	6810      	ldr	r0, [r2, #0]
 80031f8:	33ff      	adds	r3, #255	; 0xff
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80031fa:	4303      	orrs	r3, r0
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	f381 8810 	msr	PRIMASK, r1
}
 8003202:	2000      	movs	r0, #0
 8003204:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8003206:	22ff      	movs	r2, #255	; 0xff
 8003208:	e7ce      	b.n	80031a8 <UART_Start_Receive_IT+0x24>
 800320a:	2a00      	cmp	r2, #0
 800320c:	d104      	bne.n	8003218 <UART_Start_Receive_IT+0x94>
 800320e:	6902      	ldr	r2, [r0, #16]
 8003210:	2a00      	cmp	r2, #0
 8003212:	d0f8      	beq.n	8003206 <UART_Start_Receive_IT+0x82>
 8003214:	227f      	movs	r2, #127	; 0x7f
 8003216:	e7c7      	b.n	80031a8 <UART_Start_Receive_IT+0x24>
 8003218:	2480      	movs	r4, #128	; 0x80
 800321a:	0564      	lsls	r4, r4, #21
 800321c:	42a2      	cmp	r2, r4
 800321e:	d104      	bne.n	800322a <UART_Start_Receive_IT+0xa6>
 8003220:	6902      	ldr	r2, [r0, #16]
 8003222:	2a00      	cmp	r2, #0
 8003224:	d0f6      	beq.n	8003214 <UART_Start_Receive_IT+0x90>
 8003226:	223f      	movs	r2, #63	; 0x3f
 8003228:	e7be      	b.n	80031a8 <UART_Start_Receive_IT+0x24>
 800322a:	8019      	strh	r1, [r3, #0]
 800322c:	e7bd      	b.n	80031aa <UART_Start_Receive_IT+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003232:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003236:	6802      	ldr	r2, [r0, #0]
 8003238:	2320      	movs	r3, #32
 800323a:	6810      	ldr	r0, [r2, #0]
 800323c:	e7dd      	b.n	80031fa <UART_Start_Receive_IT+0x76>
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	000001ff 	.word	0x000001ff
 8003244:	0800295d 	.word	0x0800295d
 8003248:	08002a3d 	.word	0x08002a3d

0800324c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800324c:	1d03      	adds	r3, r0, #4
{
 800324e:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003250:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
    return HAL_BUSY;
 8003252:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003254:	2c20      	cmp	r4, #32
 8003256:	d128      	bne.n	80032aa <HAL_UART_Receive_IT+0x5e>
      return HAL_ERROR;
 8003258:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 800325a:	2900      	cmp	r1, #0
 800325c:	d025      	beq.n	80032aa <HAL_UART_Receive_IT+0x5e>
 800325e:	2a00      	cmp	r2, #0
 8003260:	d023      	beq.n	80032aa <HAL_UART_Receive_IT+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	6884      	ldr	r4, [r0, #8]
 8003266:	015b      	lsls	r3, r3, #5
 8003268:	429c      	cmp	r4, r3
 800326a:	d105      	bne.n	8003278 <HAL_UART_Receive_IT+0x2c>
 800326c:	6903      	ldr	r3, [r0, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d102      	bne.n	8003278 <HAL_UART_Receive_IT+0x2c>
      return HAL_ERROR;
 8003272:	3301      	adds	r3, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8003274:	4219      	tst	r1, r3
 8003276:	d118      	bne.n	80032aa <HAL_UART_Receive_IT+0x5e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003278:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800327a:	4c0d      	ldr	r4, [pc, #52]	; (80032b0 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327c:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800327e:	6803      	ldr	r3, [r0, #0]
 8003280:	42a3      	cmp	r3, r4
 8003282:	d00f      	beq.n	80032a4 <HAL_UART_Receive_IT+0x58>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	d50c      	bpl.n	80032a4 <HAL_UART_Receive_IT+0x58>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800328a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328e:	2301      	movs	r3, #1
 8003290:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	6804      	ldr	r4, [r0, #0]
 8003298:	04db      	lsls	r3, r3, #19
 800329a:	6826      	ldr	r6, [r4, #0]
 800329c:	4333      	orrs	r3, r6
 800329e:	6023      	str	r3, [r4, #0]
 80032a0:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 80032a4:	f7ff ff6e 	bl	8003184 <UART_Start_Receive_IT>
 80032a8:	0003      	movs	r3, r0
}
 80032aa:	0018      	movs	r0, r3
 80032ac:	bd70      	pop	{r4, r5, r6, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	40004800 	.word	0x40004800

080032b4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80032b4:	4770      	bx	lr
	...

080032b8 <__libc_init_array>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	2600      	movs	r6, #0
 80032bc:	4d0c      	ldr	r5, [pc, #48]	; (80032f0 <__libc_init_array+0x38>)
 80032be:	4c0d      	ldr	r4, [pc, #52]	; (80032f4 <__libc_init_array+0x3c>)
 80032c0:	1b64      	subs	r4, r4, r5
 80032c2:	10a4      	asrs	r4, r4, #2
 80032c4:	42a6      	cmp	r6, r4
 80032c6:	d109      	bne.n	80032dc <__libc_init_array+0x24>
 80032c8:	2600      	movs	r6, #0
 80032ca:	f000 f821 	bl	8003310 <_init>
 80032ce:	4d0a      	ldr	r5, [pc, #40]	; (80032f8 <__libc_init_array+0x40>)
 80032d0:	4c0a      	ldr	r4, [pc, #40]	; (80032fc <__libc_init_array+0x44>)
 80032d2:	1b64      	subs	r4, r4, r5
 80032d4:	10a4      	asrs	r4, r4, #2
 80032d6:	42a6      	cmp	r6, r4
 80032d8:	d105      	bne.n	80032e6 <__libc_init_array+0x2e>
 80032da:	bd70      	pop	{r4, r5, r6, pc}
 80032dc:	00b3      	lsls	r3, r6, #2
 80032de:	58eb      	ldr	r3, [r5, r3]
 80032e0:	4798      	blx	r3
 80032e2:	3601      	adds	r6, #1
 80032e4:	e7ee      	b.n	80032c4 <__libc_init_array+0xc>
 80032e6:	00b3      	lsls	r3, r6, #2
 80032e8:	58eb      	ldr	r3, [r5, r3]
 80032ea:	4798      	blx	r3
 80032ec:	3601      	adds	r6, #1
 80032ee:	e7f2      	b.n	80032d6 <__libc_init_array+0x1e>
 80032f0:	080044a8 	.word	0x080044a8
 80032f4:	080044a8 	.word	0x080044a8
 80032f8:	080044a8 	.word	0x080044a8
 80032fc:	080044ac 	.word	0x080044ac

08003300 <memset>:
 8003300:	0003      	movs	r3, r0
 8003302:	1882      	adds	r2, r0, r2
 8003304:	4293      	cmp	r3, r2
 8003306:	d100      	bne.n	800330a <memset+0xa>
 8003308:	4770      	bx	lr
 800330a:	7019      	strb	r1, [r3, #0]
 800330c:	3301      	adds	r3, #1
 800330e:	e7f9      	b.n	8003304 <memset+0x4>

08003310 <_init>:
 8003310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003316:	bc08      	pop	{r3}
 8003318:	469e      	mov	lr, r3
 800331a:	4770      	bx	lr

0800331c <_fini>:
 800331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003322:	bc08      	pop	{r3}
 8003324:	469e      	mov	lr, r3
 8003326:	4770      	bx	lr
