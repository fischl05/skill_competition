
A_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000795c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08007a1c  08007a1c  00017a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d10  08007d10  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d18  08007d18  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d18  08007d18  00017d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d1c  08007d1c  00017d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08007d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200000ac  08007dcc  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08007dcc  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015094  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dbf  00000000  00000000  00035168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00037f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00039170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160cf  00000000  00000000  0003a298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a4b  00000000  00000000  00050367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a8d  00000000  00000000  00066db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb83f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ec  00000000  00000000  000eb890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000ac 	.word	0x200000ac
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007a04 	.word	0x08007a04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000b0 	.word	0x200000b0
 8000104:	08007a04 	.word	0x08007a04

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cfrcmple>:
 8000244:	4684      	mov	ip, r0
 8000246:	0008      	movs	r0, r1
 8000248:	4661      	mov	r1, ip
 800024a:	e7ff      	b.n	800024c <__aeabi_cfcmpeq>

0800024c <__aeabi_cfcmpeq>:
 800024c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800024e:	f000 f9b9 	bl	80005c4 <__lesf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	d401      	bmi.n	800025a <__aeabi_cfcmpeq+0xe>
 8000256:	2100      	movs	r1, #0
 8000258:	42c8      	cmn	r0, r1
 800025a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800025c <__aeabi_fcmpeq>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 f945 	bl	80004ec <__eqsf2>
 8000262:	4240      	negs	r0, r0
 8000264:	3001      	adds	r0, #1
 8000266:	bd10      	pop	{r4, pc}

08000268 <__aeabi_fcmplt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 f9ab 	bl	80005c4 <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	db01      	blt.n	8000276 <__aeabi_fcmplt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmple>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f9a1 	bl	80005c4 <__lesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dd01      	ble.n	800028a <__aeabi_fcmple+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmpgt>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 f951 	bl	8000538 <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	dc01      	bgt.n	800029e <__aeabi_fcmpgt+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_fcmpge>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	f000 f947 	bl	8000538 <__gesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	da01      	bge.n	80002b2 <__aeabi_fcmpge+0xe>
 80002ae:	2000      	movs	r0, #0
 80002b0:	bd10      	pop	{r4, pc}
 80002b2:	2001      	movs	r0, #1
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)

080002b8 <__aeabi_uldivmod>:
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d111      	bne.n	80002e0 <__aeabi_uldivmod+0x28>
 80002bc:	2a00      	cmp	r2, #0
 80002be:	d10f      	bne.n	80002e0 <__aeabi_uldivmod+0x28>
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d100      	bne.n	80002c6 <__aeabi_uldivmod+0xe>
 80002c4:	2800      	cmp	r0, #0
 80002c6:	d002      	beq.n	80002ce <__aeabi_uldivmod+0x16>
 80002c8:	2100      	movs	r1, #0
 80002ca:	43c9      	mvns	r1, r1
 80002cc:	0008      	movs	r0, r1
 80002ce:	b407      	push	{r0, r1, r2}
 80002d0:	4802      	ldr	r0, [pc, #8]	; (80002dc <__aeabi_uldivmod+0x24>)
 80002d2:	a102      	add	r1, pc, #8	; (adr r1, 80002dc <__aeabi_uldivmod+0x24>)
 80002d4:	1840      	adds	r0, r0, r1
 80002d6:	9002      	str	r0, [sp, #8]
 80002d8:	bd03      	pop	{r0, r1, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	ffffff65 	.word	0xffffff65
 80002e0:	b403      	push	{r0, r1}
 80002e2:	4668      	mov	r0, sp
 80002e4:	b501      	push	{r0, lr}
 80002e6:	9802      	ldr	r0, [sp, #8]
 80002e8:	f000 f834 	bl	8000354 <__udivmoddi4>
 80002ec:	9b01      	ldr	r3, [sp, #4]
 80002ee:	469e      	mov	lr, r3
 80002f0:	b002      	add	sp, #8
 80002f2:	bc0c      	pop	{r2, r3}
 80002f4:	4770      	bx	lr
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__aeabi_lmul>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	46ce      	mov	lr, r9
 80002fc:	4647      	mov	r7, r8
 80002fe:	b580      	push	{r7, lr}
 8000300:	0007      	movs	r7, r0
 8000302:	4699      	mov	r9, r3
 8000304:	0c3b      	lsrs	r3, r7, #16
 8000306:	469c      	mov	ip, r3
 8000308:	0413      	lsls	r3, r2, #16
 800030a:	0c1b      	lsrs	r3, r3, #16
 800030c:	001d      	movs	r5, r3
 800030e:	000e      	movs	r6, r1
 8000310:	4661      	mov	r1, ip
 8000312:	0400      	lsls	r0, r0, #16
 8000314:	0c14      	lsrs	r4, r2, #16
 8000316:	0c00      	lsrs	r0, r0, #16
 8000318:	4345      	muls	r5, r0
 800031a:	434b      	muls	r3, r1
 800031c:	4360      	muls	r0, r4
 800031e:	4361      	muls	r1, r4
 8000320:	18c0      	adds	r0, r0, r3
 8000322:	0c2c      	lsrs	r4, r5, #16
 8000324:	1820      	adds	r0, r4, r0
 8000326:	468c      	mov	ip, r1
 8000328:	4283      	cmp	r3, r0
 800032a:	d903      	bls.n	8000334 <__aeabi_lmul+0x3c>
 800032c:	2380      	movs	r3, #128	; 0x80
 800032e:	025b      	lsls	r3, r3, #9
 8000330:	4698      	mov	r8, r3
 8000332:	44c4      	add	ip, r8
 8000334:	4649      	mov	r1, r9
 8000336:	4379      	muls	r1, r7
 8000338:	4372      	muls	r2, r6
 800033a:	0c03      	lsrs	r3, r0, #16
 800033c:	4463      	add	r3, ip
 800033e:	042d      	lsls	r5, r5, #16
 8000340:	0c2d      	lsrs	r5, r5, #16
 8000342:	18c9      	adds	r1, r1, r3
 8000344:	0400      	lsls	r0, r0, #16
 8000346:	1940      	adds	r0, r0, r5
 8000348:	1889      	adds	r1, r1, r2
 800034a:	bcc0      	pop	{r6, r7}
 800034c:	46b9      	mov	r9, r7
 800034e:	46b0      	mov	r8, r6
 8000350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000352:	46c0      	nop			; (mov r8, r8)

08000354 <__udivmoddi4>:
 8000354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000356:	4657      	mov	r7, sl
 8000358:	464e      	mov	r6, r9
 800035a:	4645      	mov	r5, r8
 800035c:	46de      	mov	lr, fp
 800035e:	b5e0      	push	{r5, r6, r7, lr}
 8000360:	0004      	movs	r4, r0
 8000362:	000d      	movs	r5, r1
 8000364:	4692      	mov	sl, r2
 8000366:	4699      	mov	r9, r3
 8000368:	b083      	sub	sp, #12
 800036a:	428b      	cmp	r3, r1
 800036c:	d830      	bhi.n	80003d0 <__udivmoddi4+0x7c>
 800036e:	d02d      	beq.n	80003cc <__udivmoddi4+0x78>
 8000370:	4649      	mov	r1, r9
 8000372:	4650      	mov	r0, sl
 8000374:	f000 faf0 	bl	8000958 <__clzdi2>
 8000378:	0029      	movs	r1, r5
 800037a:	0006      	movs	r6, r0
 800037c:	0020      	movs	r0, r4
 800037e:	f000 faeb 	bl	8000958 <__clzdi2>
 8000382:	1a33      	subs	r3, r6, r0
 8000384:	4698      	mov	r8, r3
 8000386:	3b20      	subs	r3, #32
 8000388:	469b      	mov	fp, r3
 800038a:	d433      	bmi.n	80003f4 <__udivmoddi4+0xa0>
 800038c:	465a      	mov	r2, fp
 800038e:	4653      	mov	r3, sl
 8000390:	4093      	lsls	r3, r2
 8000392:	4642      	mov	r2, r8
 8000394:	001f      	movs	r7, r3
 8000396:	4653      	mov	r3, sl
 8000398:	4093      	lsls	r3, r2
 800039a:	001e      	movs	r6, r3
 800039c:	42af      	cmp	r7, r5
 800039e:	d83a      	bhi.n	8000416 <__udivmoddi4+0xc2>
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d100      	bne.n	80003a6 <__udivmoddi4+0x52>
 80003a4:	e078      	b.n	8000498 <__udivmoddi4+0x144>
 80003a6:	465b      	mov	r3, fp
 80003a8:	1ba4      	subs	r4, r4, r6
 80003aa:	41bd      	sbcs	r5, r7
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	da00      	bge.n	80003b2 <__udivmoddi4+0x5e>
 80003b0:	e075      	b.n	800049e <__udivmoddi4+0x14a>
 80003b2:	2200      	movs	r2, #0
 80003b4:	2300      	movs	r3, #0
 80003b6:	9200      	str	r2, [sp, #0]
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	2301      	movs	r3, #1
 80003bc:	465a      	mov	r2, fp
 80003be:	4093      	lsls	r3, r2
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	2301      	movs	r3, #1
 80003c4:	4642      	mov	r2, r8
 80003c6:	4093      	lsls	r3, r2
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	e028      	b.n	800041e <__udivmoddi4+0xca>
 80003cc:	4282      	cmp	r2, r0
 80003ce:	d9cf      	bls.n	8000370 <__udivmoddi4+0x1c>
 80003d0:	2200      	movs	r2, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	9200      	str	r2, [sp, #0]
 80003d6:	9301      	str	r3, [sp, #4]
 80003d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <__udivmoddi4+0x8e>
 80003de:	601c      	str	r4, [r3, #0]
 80003e0:	605d      	str	r5, [r3, #4]
 80003e2:	9800      	ldr	r0, [sp, #0]
 80003e4:	9901      	ldr	r1, [sp, #4]
 80003e6:	b003      	add	sp, #12
 80003e8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ea:	46bb      	mov	fp, r7
 80003ec:	46b2      	mov	sl, r6
 80003ee:	46a9      	mov	r9, r5
 80003f0:	46a0      	mov	r8, r4
 80003f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003f4:	4642      	mov	r2, r8
 80003f6:	2320      	movs	r3, #32
 80003f8:	1a9b      	subs	r3, r3, r2
 80003fa:	4652      	mov	r2, sl
 80003fc:	40da      	lsrs	r2, r3
 80003fe:	4641      	mov	r1, r8
 8000400:	0013      	movs	r3, r2
 8000402:	464a      	mov	r2, r9
 8000404:	408a      	lsls	r2, r1
 8000406:	0017      	movs	r7, r2
 8000408:	4642      	mov	r2, r8
 800040a:	431f      	orrs	r7, r3
 800040c:	4653      	mov	r3, sl
 800040e:	4093      	lsls	r3, r2
 8000410:	001e      	movs	r6, r3
 8000412:	42af      	cmp	r7, r5
 8000414:	d9c4      	bls.n	80003a0 <__udivmoddi4+0x4c>
 8000416:	2200      	movs	r2, #0
 8000418:	2300      	movs	r3, #0
 800041a:	9200      	str	r2, [sp, #0]
 800041c:	9301      	str	r3, [sp, #4]
 800041e:	4643      	mov	r3, r8
 8000420:	2b00      	cmp	r3, #0
 8000422:	d0d9      	beq.n	80003d8 <__udivmoddi4+0x84>
 8000424:	07fb      	lsls	r3, r7, #31
 8000426:	0872      	lsrs	r2, r6, #1
 8000428:	431a      	orrs	r2, r3
 800042a:	4646      	mov	r6, r8
 800042c:	087b      	lsrs	r3, r7, #1
 800042e:	e00e      	b.n	800044e <__udivmoddi4+0xfa>
 8000430:	42ab      	cmp	r3, r5
 8000432:	d101      	bne.n	8000438 <__udivmoddi4+0xe4>
 8000434:	42a2      	cmp	r2, r4
 8000436:	d80c      	bhi.n	8000452 <__udivmoddi4+0xfe>
 8000438:	1aa4      	subs	r4, r4, r2
 800043a:	419d      	sbcs	r5, r3
 800043c:	2001      	movs	r0, #1
 800043e:	1924      	adds	r4, r4, r4
 8000440:	416d      	adcs	r5, r5
 8000442:	2100      	movs	r1, #0
 8000444:	3e01      	subs	r6, #1
 8000446:	1824      	adds	r4, r4, r0
 8000448:	414d      	adcs	r5, r1
 800044a:	2e00      	cmp	r6, #0
 800044c:	d006      	beq.n	800045c <__udivmoddi4+0x108>
 800044e:	42ab      	cmp	r3, r5
 8000450:	d9ee      	bls.n	8000430 <__udivmoddi4+0xdc>
 8000452:	3e01      	subs	r6, #1
 8000454:	1924      	adds	r4, r4, r4
 8000456:	416d      	adcs	r5, r5
 8000458:	2e00      	cmp	r6, #0
 800045a:	d1f8      	bne.n	800044e <__udivmoddi4+0xfa>
 800045c:	9800      	ldr	r0, [sp, #0]
 800045e:	9901      	ldr	r1, [sp, #4]
 8000460:	465b      	mov	r3, fp
 8000462:	1900      	adds	r0, r0, r4
 8000464:	4169      	adcs	r1, r5
 8000466:	2b00      	cmp	r3, #0
 8000468:	db24      	blt.n	80004b4 <__udivmoddi4+0x160>
 800046a:	002b      	movs	r3, r5
 800046c:	465a      	mov	r2, fp
 800046e:	4644      	mov	r4, r8
 8000470:	40d3      	lsrs	r3, r2
 8000472:	002a      	movs	r2, r5
 8000474:	40e2      	lsrs	r2, r4
 8000476:	001c      	movs	r4, r3
 8000478:	465b      	mov	r3, fp
 800047a:	0015      	movs	r5, r2
 800047c:	2b00      	cmp	r3, #0
 800047e:	db2a      	blt.n	80004d6 <__udivmoddi4+0x182>
 8000480:	0026      	movs	r6, r4
 8000482:	409e      	lsls	r6, r3
 8000484:	0033      	movs	r3, r6
 8000486:	0026      	movs	r6, r4
 8000488:	4647      	mov	r7, r8
 800048a:	40be      	lsls	r6, r7
 800048c:	0032      	movs	r2, r6
 800048e:	1a80      	subs	r0, r0, r2
 8000490:	4199      	sbcs	r1, r3
 8000492:	9000      	str	r0, [sp, #0]
 8000494:	9101      	str	r1, [sp, #4]
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x84>
 8000498:	42a3      	cmp	r3, r4
 800049a:	d8bc      	bhi.n	8000416 <__udivmoddi4+0xc2>
 800049c:	e783      	b.n	80003a6 <__udivmoddi4+0x52>
 800049e:	4642      	mov	r2, r8
 80004a0:	2320      	movs	r3, #32
 80004a2:	2100      	movs	r1, #0
 80004a4:	1a9b      	subs	r3, r3, r2
 80004a6:	2200      	movs	r2, #0
 80004a8:	9100      	str	r1, [sp, #0]
 80004aa:	9201      	str	r2, [sp, #4]
 80004ac:	2201      	movs	r2, #1
 80004ae:	40da      	lsrs	r2, r3
 80004b0:	9201      	str	r2, [sp, #4]
 80004b2:	e786      	b.n	80003c2 <__udivmoddi4+0x6e>
 80004b4:	4642      	mov	r2, r8
 80004b6:	2320      	movs	r3, #32
 80004b8:	1a9b      	subs	r3, r3, r2
 80004ba:	002a      	movs	r2, r5
 80004bc:	4646      	mov	r6, r8
 80004be:	409a      	lsls	r2, r3
 80004c0:	0023      	movs	r3, r4
 80004c2:	40f3      	lsrs	r3, r6
 80004c4:	4644      	mov	r4, r8
 80004c6:	4313      	orrs	r3, r2
 80004c8:	002a      	movs	r2, r5
 80004ca:	40e2      	lsrs	r2, r4
 80004cc:	001c      	movs	r4, r3
 80004ce:	465b      	mov	r3, fp
 80004d0:	0015      	movs	r5, r2
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	dad4      	bge.n	8000480 <__udivmoddi4+0x12c>
 80004d6:	4642      	mov	r2, r8
 80004d8:	002f      	movs	r7, r5
 80004da:	2320      	movs	r3, #32
 80004dc:	0026      	movs	r6, r4
 80004de:	4097      	lsls	r7, r2
 80004e0:	1a9b      	subs	r3, r3, r2
 80004e2:	40de      	lsrs	r6, r3
 80004e4:	003b      	movs	r3, r7
 80004e6:	4333      	orrs	r3, r6
 80004e8:	e7cd      	b.n	8000486 <__udivmoddi4+0x132>
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__eqsf2>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	0042      	lsls	r2, r0, #1
 80004f0:	0245      	lsls	r5, r0, #9
 80004f2:	024e      	lsls	r6, r1, #9
 80004f4:	004c      	lsls	r4, r1, #1
 80004f6:	0fc3      	lsrs	r3, r0, #31
 80004f8:	0a6d      	lsrs	r5, r5, #9
 80004fa:	2001      	movs	r0, #1
 80004fc:	0e12      	lsrs	r2, r2, #24
 80004fe:	0a76      	lsrs	r6, r6, #9
 8000500:	0e24      	lsrs	r4, r4, #24
 8000502:	0fc9      	lsrs	r1, r1, #31
 8000504:	2aff      	cmp	r2, #255	; 0xff
 8000506:	d006      	beq.n	8000516 <__eqsf2+0x2a>
 8000508:	2cff      	cmp	r4, #255	; 0xff
 800050a:	d003      	beq.n	8000514 <__eqsf2+0x28>
 800050c:	42a2      	cmp	r2, r4
 800050e:	d101      	bne.n	8000514 <__eqsf2+0x28>
 8000510:	42b5      	cmp	r5, r6
 8000512:	d006      	beq.n	8000522 <__eqsf2+0x36>
 8000514:	bd70      	pop	{r4, r5, r6, pc}
 8000516:	2d00      	cmp	r5, #0
 8000518:	d1fc      	bne.n	8000514 <__eqsf2+0x28>
 800051a:	2cff      	cmp	r4, #255	; 0xff
 800051c:	d1fa      	bne.n	8000514 <__eqsf2+0x28>
 800051e:	2e00      	cmp	r6, #0
 8000520:	d1f8      	bne.n	8000514 <__eqsf2+0x28>
 8000522:	428b      	cmp	r3, r1
 8000524:	d006      	beq.n	8000534 <__eqsf2+0x48>
 8000526:	2001      	movs	r0, #1
 8000528:	2a00      	cmp	r2, #0
 800052a:	d1f3      	bne.n	8000514 <__eqsf2+0x28>
 800052c:	0028      	movs	r0, r5
 800052e:	1e43      	subs	r3, r0, #1
 8000530:	4198      	sbcs	r0, r3
 8000532:	e7ef      	b.n	8000514 <__eqsf2+0x28>
 8000534:	2000      	movs	r0, #0
 8000536:	e7ed      	b.n	8000514 <__eqsf2+0x28>

08000538 <__gesf2>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	0042      	lsls	r2, r0, #1
 800053c:	0245      	lsls	r5, r0, #9
 800053e:	024e      	lsls	r6, r1, #9
 8000540:	004c      	lsls	r4, r1, #1
 8000542:	0fc3      	lsrs	r3, r0, #31
 8000544:	0a6d      	lsrs	r5, r5, #9
 8000546:	0e12      	lsrs	r2, r2, #24
 8000548:	0a76      	lsrs	r6, r6, #9
 800054a:	0e24      	lsrs	r4, r4, #24
 800054c:	0fc8      	lsrs	r0, r1, #31
 800054e:	2aff      	cmp	r2, #255	; 0xff
 8000550:	d01b      	beq.n	800058a <__gesf2+0x52>
 8000552:	2cff      	cmp	r4, #255	; 0xff
 8000554:	d00e      	beq.n	8000574 <__gesf2+0x3c>
 8000556:	2a00      	cmp	r2, #0
 8000558:	d11b      	bne.n	8000592 <__gesf2+0x5a>
 800055a:	2c00      	cmp	r4, #0
 800055c:	d101      	bne.n	8000562 <__gesf2+0x2a>
 800055e:	2e00      	cmp	r6, #0
 8000560:	d01c      	beq.n	800059c <__gesf2+0x64>
 8000562:	2d00      	cmp	r5, #0
 8000564:	d00c      	beq.n	8000580 <__gesf2+0x48>
 8000566:	4283      	cmp	r3, r0
 8000568:	d01c      	beq.n	80005a4 <__gesf2+0x6c>
 800056a:	2102      	movs	r1, #2
 800056c:	1e58      	subs	r0, r3, #1
 800056e:	4008      	ands	r0, r1
 8000570:	3801      	subs	r0, #1
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	2e00      	cmp	r6, #0
 8000576:	d122      	bne.n	80005be <__gesf2+0x86>
 8000578:	2a00      	cmp	r2, #0
 800057a:	d1f4      	bne.n	8000566 <__gesf2+0x2e>
 800057c:	2d00      	cmp	r5, #0
 800057e:	d1f2      	bne.n	8000566 <__gesf2+0x2e>
 8000580:	2800      	cmp	r0, #0
 8000582:	d1f6      	bne.n	8000572 <__gesf2+0x3a>
 8000584:	2001      	movs	r0, #1
 8000586:	4240      	negs	r0, r0
 8000588:	e7f3      	b.n	8000572 <__gesf2+0x3a>
 800058a:	2d00      	cmp	r5, #0
 800058c:	d117      	bne.n	80005be <__gesf2+0x86>
 800058e:	2cff      	cmp	r4, #255	; 0xff
 8000590:	d0f0      	beq.n	8000574 <__gesf2+0x3c>
 8000592:	2c00      	cmp	r4, #0
 8000594:	d1e7      	bne.n	8000566 <__gesf2+0x2e>
 8000596:	2e00      	cmp	r6, #0
 8000598:	d1e5      	bne.n	8000566 <__gesf2+0x2e>
 800059a:	e7e6      	b.n	800056a <__gesf2+0x32>
 800059c:	2000      	movs	r0, #0
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d0e7      	beq.n	8000572 <__gesf2+0x3a>
 80005a2:	e7e2      	b.n	800056a <__gesf2+0x32>
 80005a4:	42a2      	cmp	r2, r4
 80005a6:	dc05      	bgt.n	80005b4 <__gesf2+0x7c>
 80005a8:	dbea      	blt.n	8000580 <__gesf2+0x48>
 80005aa:	42b5      	cmp	r5, r6
 80005ac:	d802      	bhi.n	80005b4 <__gesf2+0x7c>
 80005ae:	d3e7      	bcc.n	8000580 <__gesf2+0x48>
 80005b0:	2000      	movs	r0, #0
 80005b2:	e7de      	b.n	8000572 <__gesf2+0x3a>
 80005b4:	4243      	negs	r3, r0
 80005b6:	4158      	adcs	r0, r3
 80005b8:	0040      	lsls	r0, r0, #1
 80005ba:	3801      	subs	r0, #1
 80005bc:	e7d9      	b.n	8000572 <__gesf2+0x3a>
 80005be:	2002      	movs	r0, #2
 80005c0:	4240      	negs	r0, r0
 80005c2:	e7d6      	b.n	8000572 <__gesf2+0x3a>

080005c4 <__lesf2>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	0042      	lsls	r2, r0, #1
 80005c8:	0245      	lsls	r5, r0, #9
 80005ca:	024e      	lsls	r6, r1, #9
 80005cc:	004c      	lsls	r4, r1, #1
 80005ce:	0fc3      	lsrs	r3, r0, #31
 80005d0:	0a6d      	lsrs	r5, r5, #9
 80005d2:	0e12      	lsrs	r2, r2, #24
 80005d4:	0a76      	lsrs	r6, r6, #9
 80005d6:	0e24      	lsrs	r4, r4, #24
 80005d8:	0fc8      	lsrs	r0, r1, #31
 80005da:	2aff      	cmp	r2, #255	; 0xff
 80005dc:	d00b      	beq.n	80005f6 <__lesf2+0x32>
 80005de:	2cff      	cmp	r4, #255	; 0xff
 80005e0:	d00d      	beq.n	80005fe <__lesf2+0x3a>
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	d11f      	bne.n	8000626 <__lesf2+0x62>
 80005e6:	2c00      	cmp	r4, #0
 80005e8:	d116      	bne.n	8000618 <__lesf2+0x54>
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d114      	bne.n	8000618 <__lesf2+0x54>
 80005ee:	2000      	movs	r0, #0
 80005f0:	2d00      	cmp	r5, #0
 80005f2:	d010      	beq.n	8000616 <__lesf2+0x52>
 80005f4:	e009      	b.n	800060a <__lesf2+0x46>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d10c      	bne.n	8000614 <__lesf2+0x50>
 80005fa:	2cff      	cmp	r4, #255	; 0xff
 80005fc:	d113      	bne.n	8000626 <__lesf2+0x62>
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d108      	bne.n	8000614 <__lesf2+0x50>
 8000602:	2a00      	cmp	r2, #0
 8000604:	d008      	beq.n	8000618 <__lesf2+0x54>
 8000606:	4283      	cmp	r3, r0
 8000608:	d012      	beq.n	8000630 <__lesf2+0x6c>
 800060a:	2102      	movs	r1, #2
 800060c:	1e58      	subs	r0, r3, #1
 800060e:	4008      	ands	r0, r1
 8000610:	3801      	subs	r0, #1
 8000612:	e000      	b.n	8000616 <__lesf2+0x52>
 8000614:	2002      	movs	r0, #2
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	2d00      	cmp	r5, #0
 800061a:	d1f4      	bne.n	8000606 <__lesf2+0x42>
 800061c:	2800      	cmp	r0, #0
 800061e:	d1fa      	bne.n	8000616 <__lesf2+0x52>
 8000620:	2001      	movs	r0, #1
 8000622:	4240      	negs	r0, r0
 8000624:	e7f7      	b.n	8000616 <__lesf2+0x52>
 8000626:	2c00      	cmp	r4, #0
 8000628:	d1ed      	bne.n	8000606 <__lesf2+0x42>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d1eb      	bne.n	8000606 <__lesf2+0x42>
 800062e:	e7ec      	b.n	800060a <__lesf2+0x46>
 8000630:	42a2      	cmp	r2, r4
 8000632:	dc05      	bgt.n	8000640 <__lesf2+0x7c>
 8000634:	dbf2      	blt.n	800061c <__lesf2+0x58>
 8000636:	42b5      	cmp	r5, r6
 8000638:	d802      	bhi.n	8000640 <__lesf2+0x7c>
 800063a:	d3ef      	bcc.n	800061c <__lesf2+0x58>
 800063c:	2000      	movs	r0, #0
 800063e:	e7ea      	b.n	8000616 <__lesf2+0x52>
 8000640:	4243      	negs	r3, r0
 8000642:	4158      	adcs	r0, r3
 8000644:	0040      	lsls	r0, r0, #1
 8000646:	3801      	subs	r0, #1
 8000648:	e7e5      	b.n	8000616 <__lesf2+0x52>
 800064a:	46c0      	nop			; (mov r8, r8)

0800064c <__aeabi_fmul>:
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	464f      	mov	r7, r9
 8000650:	4646      	mov	r6, r8
 8000652:	46d6      	mov	lr, sl
 8000654:	0244      	lsls	r4, r0, #9
 8000656:	0045      	lsls	r5, r0, #1
 8000658:	b5c0      	push	{r6, r7, lr}
 800065a:	0a64      	lsrs	r4, r4, #9
 800065c:	1c0f      	adds	r7, r1, #0
 800065e:	0e2d      	lsrs	r5, r5, #24
 8000660:	0fc6      	lsrs	r6, r0, #31
 8000662:	2d00      	cmp	r5, #0
 8000664:	d100      	bne.n	8000668 <__aeabi_fmul+0x1c>
 8000666:	e08d      	b.n	8000784 <__aeabi_fmul+0x138>
 8000668:	2dff      	cmp	r5, #255	; 0xff
 800066a:	d100      	bne.n	800066e <__aeabi_fmul+0x22>
 800066c:	e092      	b.n	8000794 <__aeabi_fmul+0x148>
 800066e:	2300      	movs	r3, #0
 8000670:	2080      	movs	r0, #128	; 0x80
 8000672:	4699      	mov	r9, r3
 8000674:	469a      	mov	sl, r3
 8000676:	00e4      	lsls	r4, r4, #3
 8000678:	04c0      	lsls	r0, r0, #19
 800067a:	4304      	orrs	r4, r0
 800067c:	3d7f      	subs	r5, #127	; 0x7f
 800067e:	0278      	lsls	r0, r7, #9
 8000680:	0a43      	lsrs	r3, r0, #9
 8000682:	4698      	mov	r8, r3
 8000684:	007b      	lsls	r3, r7, #1
 8000686:	0e1b      	lsrs	r3, r3, #24
 8000688:	0fff      	lsrs	r7, r7, #31
 800068a:	2b00      	cmp	r3, #0
 800068c:	d100      	bne.n	8000690 <__aeabi_fmul+0x44>
 800068e:	e070      	b.n	8000772 <__aeabi_fmul+0x126>
 8000690:	2bff      	cmp	r3, #255	; 0xff
 8000692:	d100      	bne.n	8000696 <__aeabi_fmul+0x4a>
 8000694:	e086      	b.n	80007a4 <__aeabi_fmul+0x158>
 8000696:	4642      	mov	r2, r8
 8000698:	00d0      	lsls	r0, r2, #3
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	3b7f      	subs	r3, #127	; 0x7f
 800069e:	18ed      	adds	r5, r5, r3
 80006a0:	2300      	movs	r3, #0
 80006a2:	04d2      	lsls	r2, r2, #19
 80006a4:	4302      	orrs	r2, r0
 80006a6:	4690      	mov	r8, r2
 80006a8:	469c      	mov	ip, r3
 80006aa:	0031      	movs	r1, r6
 80006ac:	464b      	mov	r3, r9
 80006ae:	4079      	eors	r1, r7
 80006b0:	1c68      	adds	r0, r5, #1
 80006b2:	2b0f      	cmp	r3, #15
 80006b4:	d81c      	bhi.n	80006f0 <__aeabi_fmul+0xa4>
 80006b6:	4a76      	ldr	r2, [pc, #472]	; (8000890 <__aeabi_fmul+0x244>)
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	58d3      	ldr	r3, [r2, r3]
 80006bc:	469f      	mov	pc, r3
 80006be:	0039      	movs	r1, r7
 80006c0:	4644      	mov	r4, r8
 80006c2:	46e2      	mov	sl, ip
 80006c4:	4653      	mov	r3, sl
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d00f      	beq.n	80006ea <__aeabi_fmul+0x9e>
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	d100      	bne.n	80006d0 <__aeabi_fmul+0x84>
 80006ce:	e0d7      	b.n	8000880 <__aeabi_fmul+0x234>
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d137      	bne.n	8000744 <__aeabi_fmul+0xf8>
 80006d4:	2000      	movs	r0, #0
 80006d6:	2400      	movs	r4, #0
 80006d8:	05c0      	lsls	r0, r0, #23
 80006da:	4320      	orrs	r0, r4
 80006dc:	07c9      	lsls	r1, r1, #31
 80006de:	4308      	orrs	r0, r1
 80006e0:	bce0      	pop	{r5, r6, r7}
 80006e2:	46ba      	mov	sl, r7
 80006e4:	46b1      	mov	r9, r6
 80006e6:	46a8      	mov	r8, r5
 80006e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ea:	20ff      	movs	r0, #255	; 0xff
 80006ec:	2400      	movs	r4, #0
 80006ee:	e7f3      	b.n	80006d8 <__aeabi_fmul+0x8c>
 80006f0:	0c26      	lsrs	r6, r4, #16
 80006f2:	0424      	lsls	r4, r4, #16
 80006f4:	0c22      	lsrs	r2, r4, #16
 80006f6:	4644      	mov	r4, r8
 80006f8:	0424      	lsls	r4, r4, #16
 80006fa:	0c24      	lsrs	r4, r4, #16
 80006fc:	4643      	mov	r3, r8
 80006fe:	0027      	movs	r7, r4
 8000700:	0c1b      	lsrs	r3, r3, #16
 8000702:	4357      	muls	r7, r2
 8000704:	4374      	muls	r4, r6
 8000706:	435a      	muls	r2, r3
 8000708:	435e      	muls	r6, r3
 800070a:	1912      	adds	r2, r2, r4
 800070c:	0c3b      	lsrs	r3, r7, #16
 800070e:	189b      	adds	r3, r3, r2
 8000710:	429c      	cmp	r4, r3
 8000712:	d903      	bls.n	800071c <__aeabi_fmul+0xd0>
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	0252      	lsls	r2, r2, #9
 8000718:	4694      	mov	ip, r2
 800071a:	4466      	add	r6, ip
 800071c:	043f      	lsls	r7, r7, #16
 800071e:	041a      	lsls	r2, r3, #16
 8000720:	0c3f      	lsrs	r7, r7, #16
 8000722:	19d2      	adds	r2, r2, r7
 8000724:	0194      	lsls	r4, r2, #6
 8000726:	1e67      	subs	r7, r4, #1
 8000728:	41bc      	sbcs	r4, r7
 800072a:	0c1b      	lsrs	r3, r3, #16
 800072c:	0e92      	lsrs	r2, r2, #26
 800072e:	199b      	adds	r3, r3, r6
 8000730:	4314      	orrs	r4, r2
 8000732:	019b      	lsls	r3, r3, #6
 8000734:	431c      	orrs	r4, r3
 8000736:	011b      	lsls	r3, r3, #4
 8000738:	d400      	bmi.n	800073c <__aeabi_fmul+0xf0>
 800073a:	e09b      	b.n	8000874 <__aeabi_fmul+0x228>
 800073c:	2301      	movs	r3, #1
 800073e:	0862      	lsrs	r2, r4, #1
 8000740:	401c      	ands	r4, r3
 8000742:	4314      	orrs	r4, r2
 8000744:	0002      	movs	r2, r0
 8000746:	327f      	adds	r2, #127	; 0x7f
 8000748:	2a00      	cmp	r2, #0
 800074a:	dd64      	ble.n	8000816 <__aeabi_fmul+0x1ca>
 800074c:	0763      	lsls	r3, r4, #29
 800074e:	d004      	beq.n	800075a <__aeabi_fmul+0x10e>
 8000750:	230f      	movs	r3, #15
 8000752:	4023      	ands	r3, r4
 8000754:	2b04      	cmp	r3, #4
 8000756:	d000      	beq.n	800075a <__aeabi_fmul+0x10e>
 8000758:	3404      	adds	r4, #4
 800075a:	0123      	lsls	r3, r4, #4
 800075c:	d503      	bpl.n	8000766 <__aeabi_fmul+0x11a>
 800075e:	0002      	movs	r2, r0
 8000760:	4b4c      	ldr	r3, [pc, #304]	; (8000894 <__aeabi_fmul+0x248>)
 8000762:	3280      	adds	r2, #128	; 0x80
 8000764:	401c      	ands	r4, r3
 8000766:	2afe      	cmp	r2, #254	; 0xfe
 8000768:	dcbf      	bgt.n	80006ea <__aeabi_fmul+0x9e>
 800076a:	01a4      	lsls	r4, r4, #6
 800076c:	0a64      	lsrs	r4, r4, #9
 800076e:	b2d0      	uxtb	r0, r2
 8000770:	e7b2      	b.n	80006d8 <__aeabi_fmul+0x8c>
 8000772:	4643      	mov	r3, r8
 8000774:	2b00      	cmp	r3, #0
 8000776:	d13d      	bne.n	80007f4 <__aeabi_fmul+0x1a8>
 8000778:	464a      	mov	r2, r9
 800077a:	3301      	adds	r3, #1
 800077c:	431a      	orrs	r2, r3
 800077e:	4691      	mov	r9, r2
 8000780:	469c      	mov	ip, r3
 8000782:	e792      	b.n	80006aa <__aeabi_fmul+0x5e>
 8000784:	2c00      	cmp	r4, #0
 8000786:	d129      	bne.n	80007dc <__aeabi_fmul+0x190>
 8000788:	2304      	movs	r3, #4
 800078a:	4699      	mov	r9, r3
 800078c:	3b03      	subs	r3, #3
 800078e:	2500      	movs	r5, #0
 8000790:	469a      	mov	sl, r3
 8000792:	e774      	b.n	800067e <__aeabi_fmul+0x32>
 8000794:	2c00      	cmp	r4, #0
 8000796:	d11b      	bne.n	80007d0 <__aeabi_fmul+0x184>
 8000798:	2308      	movs	r3, #8
 800079a:	4699      	mov	r9, r3
 800079c:	3b06      	subs	r3, #6
 800079e:	25ff      	movs	r5, #255	; 0xff
 80007a0:	469a      	mov	sl, r3
 80007a2:	e76c      	b.n	800067e <__aeabi_fmul+0x32>
 80007a4:	4643      	mov	r3, r8
 80007a6:	35ff      	adds	r5, #255	; 0xff
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d10b      	bne.n	80007c4 <__aeabi_fmul+0x178>
 80007ac:	2302      	movs	r3, #2
 80007ae:	464a      	mov	r2, r9
 80007b0:	431a      	orrs	r2, r3
 80007b2:	4691      	mov	r9, r2
 80007b4:	469c      	mov	ip, r3
 80007b6:	e778      	b.n	80006aa <__aeabi_fmul+0x5e>
 80007b8:	4653      	mov	r3, sl
 80007ba:	0031      	movs	r1, r6
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d000      	beq.n	80007c2 <__aeabi_fmul+0x176>
 80007c0:	e783      	b.n	80006ca <__aeabi_fmul+0x7e>
 80007c2:	e792      	b.n	80006ea <__aeabi_fmul+0x9e>
 80007c4:	2303      	movs	r3, #3
 80007c6:	464a      	mov	r2, r9
 80007c8:	431a      	orrs	r2, r3
 80007ca:	4691      	mov	r9, r2
 80007cc:	469c      	mov	ip, r3
 80007ce:	e76c      	b.n	80006aa <__aeabi_fmul+0x5e>
 80007d0:	230c      	movs	r3, #12
 80007d2:	4699      	mov	r9, r3
 80007d4:	3b09      	subs	r3, #9
 80007d6:	25ff      	movs	r5, #255	; 0xff
 80007d8:	469a      	mov	sl, r3
 80007da:	e750      	b.n	800067e <__aeabi_fmul+0x32>
 80007dc:	0020      	movs	r0, r4
 80007de:	f000 f89d 	bl	800091c <__clzsi2>
 80007e2:	2576      	movs	r5, #118	; 0x76
 80007e4:	1f43      	subs	r3, r0, #5
 80007e6:	409c      	lsls	r4, r3
 80007e8:	2300      	movs	r3, #0
 80007ea:	426d      	negs	r5, r5
 80007ec:	4699      	mov	r9, r3
 80007ee:	469a      	mov	sl, r3
 80007f0:	1a2d      	subs	r5, r5, r0
 80007f2:	e744      	b.n	800067e <__aeabi_fmul+0x32>
 80007f4:	4640      	mov	r0, r8
 80007f6:	f000 f891 	bl	800091c <__clzsi2>
 80007fa:	4642      	mov	r2, r8
 80007fc:	1f43      	subs	r3, r0, #5
 80007fe:	409a      	lsls	r2, r3
 8000800:	2300      	movs	r3, #0
 8000802:	1a2d      	subs	r5, r5, r0
 8000804:	4690      	mov	r8, r2
 8000806:	469c      	mov	ip, r3
 8000808:	3d76      	subs	r5, #118	; 0x76
 800080a:	e74e      	b.n	80006aa <__aeabi_fmul+0x5e>
 800080c:	2480      	movs	r4, #128	; 0x80
 800080e:	2100      	movs	r1, #0
 8000810:	20ff      	movs	r0, #255	; 0xff
 8000812:	03e4      	lsls	r4, r4, #15
 8000814:	e760      	b.n	80006d8 <__aeabi_fmul+0x8c>
 8000816:	2301      	movs	r3, #1
 8000818:	1a9b      	subs	r3, r3, r2
 800081a:	2b1b      	cmp	r3, #27
 800081c:	dd00      	ble.n	8000820 <__aeabi_fmul+0x1d4>
 800081e:	e759      	b.n	80006d4 <__aeabi_fmul+0x88>
 8000820:	0022      	movs	r2, r4
 8000822:	309e      	adds	r0, #158	; 0x9e
 8000824:	40da      	lsrs	r2, r3
 8000826:	4084      	lsls	r4, r0
 8000828:	0013      	movs	r3, r2
 800082a:	1e62      	subs	r2, r4, #1
 800082c:	4194      	sbcs	r4, r2
 800082e:	431c      	orrs	r4, r3
 8000830:	0763      	lsls	r3, r4, #29
 8000832:	d004      	beq.n	800083e <__aeabi_fmul+0x1f2>
 8000834:	230f      	movs	r3, #15
 8000836:	4023      	ands	r3, r4
 8000838:	2b04      	cmp	r3, #4
 800083a:	d000      	beq.n	800083e <__aeabi_fmul+0x1f2>
 800083c:	3404      	adds	r4, #4
 800083e:	0163      	lsls	r3, r4, #5
 8000840:	d51a      	bpl.n	8000878 <__aeabi_fmul+0x22c>
 8000842:	2001      	movs	r0, #1
 8000844:	2400      	movs	r4, #0
 8000846:	e747      	b.n	80006d8 <__aeabi_fmul+0x8c>
 8000848:	2080      	movs	r0, #128	; 0x80
 800084a:	03c0      	lsls	r0, r0, #15
 800084c:	4204      	tst	r4, r0
 800084e:	d009      	beq.n	8000864 <__aeabi_fmul+0x218>
 8000850:	4643      	mov	r3, r8
 8000852:	4203      	tst	r3, r0
 8000854:	d106      	bne.n	8000864 <__aeabi_fmul+0x218>
 8000856:	4644      	mov	r4, r8
 8000858:	4304      	orrs	r4, r0
 800085a:	0264      	lsls	r4, r4, #9
 800085c:	0039      	movs	r1, r7
 800085e:	20ff      	movs	r0, #255	; 0xff
 8000860:	0a64      	lsrs	r4, r4, #9
 8000862:	e739      	b.n	80006d8 <__aeabi_fmul+0x8c>
 8000864:	2080      	movs	r0, #128	; 0x80
 8000866:	03c0      	lsls	r0, r0, #15
 8000868:	4304      	orrs	r4, r0
 800086a:	0264      	lsls	r4, r4, #9
 800086c:	0031      	movs	r1, r6
 800086e:	20ff      	movs	r0, #255	; 0xff
 8000870:	0a64      	lsrs	r4, r4, #9
 8000872:	e731      	b.n	80006d8 <__aeabi_fmul+0x8c>
 8000874:	0028      	movs	r0, r5
 8000876:	e765      	b.n	8000744 <__aeabi_fmul+0xf8>
 8000878:	01a4      	lsls	r4, r4, #6
 800087a:	2000      	movs	r0, #0
 800087c:	0a64      	lsrs	r4, r4, #9
 800087e:	e72b      	b.n	80006d8 <__aeabi_fmul+0x8c>
 8000880:	2080      	movs	r0, #128	; 0x80
 8000882:	03c0      	lsls	r0, r0, #15
 8000884:	4304      	orrs	r4, r0
 8000886:	0264      	lsls	r4, r4, #9
 8000888:	20ff      	movs	r0, #255	; 0xff
 800088a:	0a64      	lsrs	r4, r4, #9
 800088c:	e724      	b.n	80006d8 <__aeabi_fmul+0x8c>
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	08007bf8 	.word	0x08007bf8
 8000894:	f7ffffff 	.word	0xf7ffffff

08000898 <__aeabi_ui2f>:
 8000898:	b570      	push	{r4, r5, r6, lr}
 800089a:	1e05      	subs	r5, r0, #0
 800089c:	d00e      	beq.n	80008bc <__aeabi_ui2f+0x24>
 800089e:	f000 f83d 	bl	800091c <__clzsi2>
 80008a2:	239e      	movs	r3, #158	; 0x9e
 80008a4:	0004      	movs	r4, r0
 80008a6:	1a1b      	subs	r3, r3, r0
 80008a8:	2b96      	cmp	r3, #150	; 0x96
 80008aa:	dc0c      	bgt.n	80008c6 <__aeabi_ui2f+0x2e>
 80008ac:	2808      	cmp	r0, #8
 80008ae:	dd01      	ble.n	80008b4 <__aeabi_ui2f+0x1c>
 80008b0:	3c08      	subs	r4, #8
 80008b2:	40a5      	lsls	r5, r4
 80008b4:	026d      	lsls	r5, r5, #9
 80008b6:	0a6d      	lsrs	r5, r5, #9
 80008b8:	b2d8      	uxtb	r0, r3
 80008ba:	e001      	b.n	80008c0 <__aeabi_ui2f+0x28>
 80008bc:	2000      	movs	r0, #0
 80008be:	2500      	movs	r5, #0
 80008c0:	05c0      	lsls	r0, r0, #23
 80008c2:	4328      	orrs	r0, r5
 80008c4:	bd70      	pop	{r4, r5, r6, pc}
 80008c6:	2b99      	cmp	r3, #153	; 0x99
 80008c8:	dd09      	ble.n	80008de <__aeabi_ui2f+0x46>
 80008ca:	0002      	movs	r2, r0
 80008cc:	0029      	movs	r1, r5
 80008ce:	321b      	adds	r2, #27
 80008d0:	4091      	lsls	r1, r2
 80008d2:	1e4a      	subs	r2, r1, #1
 80008d4:	4191      	sbcs	r1, r2
 80008d6:	2205      	movs	r2, #5
 80008d8:	1a12      	subs	r2, r2, r0
 80008da:	40d5      	lsrs	r5, r2
 80008dc:	430d      	orrs	r5, r1
 80008de:	2c05      	cmp	r4, #5
 80008e0:	dc12      	bgt.n	8000908 <__aeabi_ui2f+0x70>
 80008e2:	0029      	movs	r1, r5
 80008e4:	4e0c      	ldr	r6, [pc, #48]	; (8000918 <__aeabi_ui2f+0x80>)
 80008e6:	4031      	ands	r1, r6
 80008e8:	076a      	lsls	r2, r5, #29
 80008ea:	d009      	beq.n	8000900 <__aeabi_ui2f+0x68>
 80008ec:	200f      	movs	r0, #15
 80008ee:	4028      	ands	r0, r5
 80008f0:	2804      	cmp	r0, #4
 80008f2:	d005      	beq.n	8000900 <__aeabi_ui2f+0x68>
 80008f4:	3104      	adds	r1, #4
 80008f6:	014a      	lsls	r2, r1, #5
 80008f8:	d502      	bpl.n	8000900 <__aeabi_ui2f+0x68>
 80008fa:	239f      	movs	r3, #159	; 0x9f
 80008fc:	4031      	ands	r1, r6
 80008fe:	1b1b      	subs	r3, r3, r4
 8000900:	0189      	lsls	r1, r1, #6
 8000902:	0a4d      	lsrs	r5, r1, #9
 8000904:	b2d8      	uxtb	r0, r3
 8000906:	e7db      	b.n	80008c0 <__aeabi_ui2f+0x28>
 8000908:	1f62      	subs	r2, r4, #5
 800090a:	4095      	lsls	r5, r2
 800090c:	0029      	movs	r1, r5
 800090e:	4e02      	ldr	r6, [pc, #8]	; (8000918 <__aeabi_ui2f+0x80>)
 8000910:	4031      	ands	r1, r6
 8000912:	076a      	lsls	r2, r5, #29
 8000914:	d0f4      	beq.n	8000900 <__aeabi_ui2f+0x68>
 8000916:	e7e9      	b.n	80008ec <__aeabi_ui2f+0x54>
 8000918:	fbffffff 	.word	0xfbffffff

0800091c <__clzsi2>:
 800091c:	211c      	movs	r1, #28
 800091e:	2301      	movs	r3, #1
 8000920:	041b      	lsls	r3, r3, #16
 8000922:	4298      	cmp	r0, r3
 8000924:	d301      	bcc.n	800092a <__clzsi2+0xe>
 8000926:	0c00      	lsrs	r0, r0, #16
 8000928:	3910      	subs	r1, #16
 800092a:	0a1b      	lsrs	r3, r3, #8
 800092c:	4298      	cmp	r0, r3
 800092e:	d301      	bcc.n	8000934 <__clzsi2+0x18>
 8000930:	0a00      	lsrs	r0, r0, #8
 8000932:	3908      	subs	r1, #8
 8000934:	091b      	lsrs	r3, r3, #4
 8000936:	4298      	cmp	r0, r3
 8000938:	d301      	bcc.n	800093e <__clzsi2+0x22>
 800093a:	0900      	lsrs	r0, r0, #4
 800093c:	3904      	subs	r1, #4
 800093e:	a202      	add	r2, pc, #8	; (adr r2, 8000948 <__clzsi2+0x2c>)
 8000940:	5c10      	ldrb	r0, [r2, r0]
 8000942:	1840      	adds	r0, r0, r1
 8000944:	4770      	bx	lr
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	02020304 	.word	0x02020304
 800094c:	01010101 	.word	0x01010101
	...

08000958 <__clzdi2>:
 8000958:	b510      	push	{r4, lr}
 800095a:	2900      	cmp	r1, #0
 800095c:	d103      	bne.n	8000966 <__clzdi2+0xe>
 800095e:	f7ff ffdd 	bl	800091c <__clzsi2>
 8000962:	3020      	adds	r0, #32
 8000964:	e002      	b.n	800096c <__clzdi2+0x14>
 8000966:	0008      	movs	r0, r1
 8000968:	f7ff ffd8 	bl	800091c <__clzsi2>
 800096c:	bd10      	pop	{r4, pc}
 800096e:	46c0      	nop			; (mov r8, r8)

08000970 <DS3231_set_time>:
#include "DS3231.h"

extern I2C_HandleTypeDef hi2c1;

void DS3231_set_time(uint8_t sec, uint8_t minute, uint8_t hour)
{
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af02      	add	r7, sp, #8
 8000976:	0004      	movs	r4, r0
 8000978:	0008      	movs	r0, r1
 800097a:	0011      	movs	r1, r2
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	1c22      	adds	r2, r4, #0
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	1dbb      	adds	r3, r7, #6
 8000984:	1c02      	adds	r2, r0, #0
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	1d7b      	adds	r3, r7, #5
 800098a:	1c0a      	adds	r2, r1, #0
 800098c:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[4];

  buffer[0] = SECONDS_AD;
 800098e:	250c      	movs	r5, #12
 8000990:	197b      	adds	r3, r7, r5
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
  buffer[1] = ((sec/10)<<4) + (sec%10);
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	210a      	movs	r1, #10
 800099c:	0018      	movs	r0, r3
 800099e:	f7ff fbc5 	bl	800012c <__udivsi3>
 80009a2:	0003      	movs	r3, r0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	b2dc      	uxtb	r4, r3
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	210a      	movs	r1, #10
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff fc41 	bl	8000238 <__aeabi_uidivmod>
 80009b6:	000b      	movs	r3, r1
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	18e3      	adds	r3, r4, r3
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	197b      	adds	r3, r7, r5
 80009c0:	705a      	strb	r2, [r3, #1]
  buffer[2] = ((minute/10)<<4) + (minute%10);
 80009c2:	1dbb      	adds	r3, r7, #6
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	210a      	movs	r1, #10
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff fbaf 	bl	800012c <__udivsi3>
 80009ce:	0003      	movs	r3, r0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	b2dc      	uxtb	r4, r3
 80009d6:	1dbb      	adds	r3, r7, #6
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	210a      	movs	r1, #10
 80009dc:	0018      	movs	r0, r3
 80009de:	f7ff fc2b 	bl	8000238 <__aeabi_uidivmod>
 80009e2:	000b      	movs	r3, r1
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	18e3      	adds	r3, r4, r3
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	197b      	adds	r3, r7, r5
 80009ec:	709a      	strb	r2, [r3, #2]
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 80009ee:	1d7b      	adds	r3, r7, #5
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	210a      	movs	r1, #10
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff fb99 	bl	800012c <__udivsi3>
 80009fa:	0003      	movs	r3, r0
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	011b      	lsls	r3, r3, #4
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2230      	movs	r2, #48	; 0x30
 8000a04:	4013      	ands	r3, r2
 8000a06:	b2dc      	uxtb	r4, r3
 8000a08:	1d7b      	adds	r3, r7, #5
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	210a      	movs	r1, #10
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fc12 	bl	8000238 <__aeabi_uidivmod>
 8000a14:	000b      	movs	r3, r1
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	18e3      	adds	r3, r4, r3
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	197b      	adds	r3, r7, r5
 8000a1e:	70da      	strb	r2, [r3, #3]

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000a20:	197a      	adds	r2, r7, r5
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <DS3231_set_time+0xc8>)
 8000a24:	2364      	movs	r3, #100	; 0x64
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	2304      	movs	r3, #4
 8000a2a:	21d0      	movs	r1, #208	; 0xd0
 8000a2c:	f003 fddc 	bl	80045e8 <HAL_I2C_Master_Transmit>
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b004      	add	sp, #16
 8000a36:	bdb0      	pop	{r4, r5, r7, pc}
 8000a38:	20000194 	.word	0x20000194

08000a3c <DS3231_get_time>:

void DS3231_get_time(uint8_t *get_second, uint8_t *get_minute, uint8_t *get_hour)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint8_t buffer;

  buffer = SECONDS_AD;
 8000a48:	2417      	movs	r4, #23
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000a50:	193a      	adds	r2, r7, r4
 8000a52:	4839      	ldr	r0, [pc, #228]	; (8000b38 <DS3231_get_time+0xfc>)
 8000a54:	2364      	movs	r3, #100	; 0x64
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2301      	movs	r3, #1
 8000a5a:	21d1      	movs	r1, #209	; 0xd1
 8000a5c:	f003 fdc4 	bl	80045e8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_second, 1, 100);
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	4835      	ldr	r0, [pc, #212]	; (8000b38 <DS3231_get_time+0xfc>)
 8000a64:	2364      	movs	r3, #100	; 0x64
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	21d1      	movs	r1, #209	; 0xd1
 8000a6c:	f003 fec4 	bl	80047f8 <HAL_I2C_Master_Receive>

  buffer = MINUTES_AD;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000a76:	193a      	adds	r2, r7, r4
 8000a78:	482f      	ldr	r0, [pc, #188]	; (8000b38 <DS3231_get_time+0xfc>)
 8000a7a:	2364      	movs	r3, #100	; 0x64
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2301      	movs	r3, #1
 8000a80:	21d1      	movs	r1, #209	; 0xd1
 8000a82:	f003 fdb1 	bl	80045e8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_minute, 1, 100);
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	482b      	ldr	r0, [pc, #172]	; (8000b38 <DS3231_get_time+0xfc>)
 8000a8a:	2364      	movs	r3, #100	; 0x64
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	21d1      	movs	r1, #209	; 0xd1
 8000a92:	f003 feb1 	bl	80047f8 <HAL_I2C_Master_Receive>

  buffer = HOURS_AD;
 8000a96:	0021      	movs	r1, r4
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000a9e:	187a      	adds	r2, r7, r1
 8000aa0:	4825      	ldr	r0, [pc, #148]	; (8000b38 <DS3231_get_time+0xfc>)
 8000aa2:	2364      	movs	r3, #100	; 0x64
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	21d1      	movs	r1, #209	; 0xd1
 8000aaa:	f003 fd9d 	bl	80045e8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_hour, 1, 100);
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4821      	ldr	r0, [pc, #132]	; (8000b38 <DS3231_get_time+0xfc>)
 8000ab2:	2364      	movs	r3, #100	; 0x64
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	21d1      	movs	r1, #209	; 0xd1
 8000aba:	f003 fe9d 	bl	80047f8 <HAL_I2C_Master_Receive>

  *get_hour = (((*get_hour & 0x30) >> 4) * 10) + (*get_hour & 0x0f);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	111b      	asrs	r3, r3, #4
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	4013      	ands	r3, r2
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	1c1a      	adds	r2, r3, #0
 8000ace:	0092      	lsls	r2, r2, #2
 8000ad0:	18d3      	adds	r3, r2, r3
 8000ad2:	18db      	adds	r3, r3, r3
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	210f      	movs	r1, #15
 8000adc:	400b      	ands	r3, r1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	18d3      	adds	r3, r2, r3
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	701a      	strb	r2, [r3, #0]
  *get_minute = ((*get_minute >> 4) * 10) + (*get_minute & 0x0f);
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	091b      	lsrs	r3, r3, #4
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	1c1a      	adds	r2, r3, #0
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	18d3      	adds	r3, r2, r3
 8000af6:	18db      	adds	r3, r3, r3
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	210f      	movs	r1, #15
 8000b00:	400b      	ands	r3, r1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	701a      	strb	r2, [r3, #0]
  *get_second = ((*get_second >> 4) * 10) + (*get_second & 0x0f);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	091b      	lsrs	r3, r3, #4
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	1c1a      	adds	r2, r3, #0
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	18d3      	adds	r3, r2, r3
 8000b1a:	18db      	adds	r3, r3, r3
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	210f      	movs	r1, #15
 8000b24:	400b      	ands	r3, r1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	18d3      	adds	r3, r2, r3
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	701a      	strb	r2, [r3, #0]
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b007      	add	sp, #28
 8000b36:	bd90      	pop	{r4, r7, pc}
 8000b38:	20000194 	.word	0x20000194

08000b3c <DS3231_set_date>:

void DS3231_set_date(uint8_t day, uint8_t month, uint8_t year)
{
 8000b3c:	b5b0      	push	{r4, r5, r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af02      	add	r7, sp, #8
 8000b42:	0004      	movs	r4, r0
 8000b44:	0008      	movs	r0, r1
 8000b46:	0011      	movs	r1, r2
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	1c22      	adds	r2, r4, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	1dbb      	adds	r3, r7, #6
 8000b50:	1c02      	adds	r2, r0, #0
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	1d7b      	adds	r3, r7, #5
 8000b56:	1c0a      	adds	r2, r1, #0
 8000b58:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[4];

  buffer[0] = DATE_AD;
 8000b5a:	250c      	movs	r5, #12
 8000b5c:	197b      	adds	r3, r7, r5
 8000b5e:	2204      	movs	r2, #4
 8000b60:	701a      	strb	r2, [r3, #0]
  buffer[1] = ((day/10)<<4) + (day%10);
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	210a      	movs	r1, #10
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f7ff fadf 	bl	800012c <__udivsi3>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	b2dc      	uxtb	r4, r3
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	210a      	movs	r1, #10
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff fb5b 	bl	8000238 <__aeabi_uidivmod>
 8000b82:	000b      	movs	r3, r1
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	18e3      	adds	r3, r4, r3
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	197b      	adds	r3, r7, r5
 8000b8c:	705a      	strb	r2, [r3, #1]
  buffer[2] = ((month/10)<<4) + (month%10);
 8000b8e:	1dbb      	adds	r3, r7, #6
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	210a      	movs	r1, #10
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff fac9 	bl	800012c <__udivsi3>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	b2dc      	uxtb	r4, r3
 8000ba2:	1dbb      	adds	r3, r7, #6
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	210a      	movs	r1, #10
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff fb45 	bl	8000238 <__aeabi_uidivmod>
 8000bae:	000b      	movs	r3, r1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	18e3      	adds	r3, r4, r3
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	197b      	adds	r3, r7, r5
 8000bb8:	709a      	strb	r2, [r3, #2]
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000bba:	1d7b      	adds	r3, r7, #5
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	210a      	movs	r1, #10
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff fab3 	bl	800012c <__udivsi3>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2230      	movs	r2, #48	; 0x30
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	b2dc      	uxtb	r4, r3
 8000bd4:	1d7b      	adds	r3, r7, #5
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	210a      	movs	r1, #10
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f7ff fb2c 	bl	8000238 <__aeabi_uidivmod>
 8000be0:	000b      	movs	r3, r1
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	18e3      	adds	r3, r4, r3
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	197b      	adds	r3, r7, r5
 8000bea:	70da      	strb	r2, [r3, #3]

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000bec:	197a      	adds	r2, r7, r5
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <DS3231_set_date+0xc8>)
 8000bf0:	2364      	movs	r3, #100	; 0x64
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	21d0      	movs	r1, #208	; 0xd0
 8000bf8:	f003 fcf6 	bl	80045e8 <HAL_I2C_Master_Transmit>
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b004      	add	sp, #16
 8000c02:	bdb0      	pop	{r4, r5, r7, pc}
 8000c04:	20000194 	.word	0x20000194

08000c08 <DS3231_get_date>:

void DS3231_get_date(uint8_t *get_day, uint8_t *get_month, uint8_t *get_year)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint8_t buffer;

  buffer = DATE_AD;
 8000c14:	2417      	movs	r4, #23
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2204      	movs	r2, #4
 8000c1a:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000c1c:	193a      	adds	r2, r7, r4
 8000c1e:	4839      	ldr	r0, [pc, #228]	; (8000d04 <DS3231_get_date+0xfc>)
 8000c20:	2364      	movs	r3, #100	; 0x64
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2301      	movs	r3, #1
 8000c26:	21d1      	movs	r1, #209	; 0xd1
 8000c28:	f003 fcde 	bl	80045e8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_day, 1, 100);
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	4835      	ldr	r0, [pc, #212]	; (8000d04 <DS3231_get_date+0xfc>)
 8000c30:	2364      	movs	r3, #100	; 0x64
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2301      	movs	r3, #1
 8000c36:	21d1      	movs	r1, #209	; 0xd1
 8000c38:	f003 fdde 	bl	80047f8 <HAL_I2C_Master_Receive>

  buffer = MONTH_AD;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2205      	movs	r2, #5
 8000c40:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000c42:	193a      	adds	r2, r7, r4
 8000c44:	482f      	ldr	r0, [pc, #188]	; (8000d04 <DS3231_get_date+0xfc>)
 8000c46:	2364      	movs	r3, #100	; 0x64
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	21d1      	movs	r1, #209	; 0xd1
 8000c4e:	f003 fccb 	bl	80045e8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_month, 1, 100);
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	482b      	ldr	r0, [pc, #172]	; (8000d04 <DS3231_get_date+0xfc>)
 8000c56:	2364      	movs	r3, #100	; 0x64
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	21d1      	movs	r1, #209	; 0xd1
 8000c5e:	f003 fdcb 	bl	80047f8 <HAL_I2C_Master_Receive>

  buffer = YEAR_AD;
 8000c62:	0021      	movs	r1, r4
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2206      	movs	r2, #6
 8000c68:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000c6a:	187a      	adds	r2, r7, r1
 8000c6c:	4825      	ldr	r0, [pc, #148]	; (8000d04 <DS3231_get_date+0xfc>)
 8000c6e:	2364      	movs	r3, #100	; 0x64
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2301      	movs	r3, #1
 8000c74:	21d1      	movs	r1, #209	; 0xd1
 8000c76:	f003 fcb7 	bl	80045e8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_year, 1, 100);
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4821      	ldr	r0, [pc, #132]	; (8000d04 <DS3231_get_date+0xfc>)
 8000c7e:	2364      	movs	r3, #100	; 0x64
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2301      	movs	r3, #1
 8000c84:	21d1      	movs	r1, #209	; 0xd1
 8000c86:	f003 fdb7 	bl	80047f8 <HAL_I2C_Master_Receive>

  *get_day = ((*get_day >> 4) * 10) + (*get_day & 0x0f);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	1c1a      	adds	r2, r3, #0
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	18d3      	adds	r3, r2, r3
 8000c98:	18db      	adds	r3, r3, r3
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	400b      	ands	r3, r1
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	18d3      	adds	r3, r2, r3
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	701a      	strb	r2, [r3, #0]
  *get_month = (((*get_month & 0x10) >> 4) * 10) + (*get_month & 0x0f);
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	111b      	asrs	r3, r3, #4
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4013      	ands	r3, r2
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	1c1a      	adds	r2, r3, #0
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	18d3      	adds	r3, r2, r3
 8000cc2:	18db      	adds	r3, r3, r3
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	210f      	movs	r1, #15
 8000ccc:	400b      	ands	r3, r1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	18d3      	adds	r3, r2, r3
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	701a      	strb	r2, [r3, #0]
  *get_year = ((*get_year >> 4) * 10) + (*get_year & 0x0f);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	091b      	lsrs	r3, r3, #4
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	1c1a      	adds	r2, r3, #0
 8000ce2:	0092      	lsls	r2, r2, #2
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	18db      	adds	r3, r3, r3
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	210f      	movs	r1, #15
 8000cf0:	400b      	ands	r3, r1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	18d3      	adds	r3, r2, r3
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	701a      	strb	r2, [r3, #0]
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b007      	add	sp, #28
 8000d02:	bd90      	pop	{r4, r7, pc}
 8000d04:	20000194 	.word	0x20000194

08000d08 <readRegister8>:

static TS_POINT coor; // user coordinate
static uint8_t touches;
static uint16_t touchX[2], touchY[2], touchID[2];

static uint8_t readRegister8(uint8_t reg){
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &reg, 1, 10);
 8000d14:	1dfa      	adds	r2, r7, #7
 8000d16:	480b      	ldr	r0, [pc, #44]	; (8000d44 <readRegister8+0x3c>)
 8000d18:	230a      	movs	r3, #10
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	2171      	movs	r1, #113	; 0x71
 8000d20:	f003 fc62 	bl	80045e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, FT62XX_ADDR, &data, 1, 10);
 8000d24:	240f      	movs	r4, #15
 8000d26:	193a      	adds	r2, r7, r4
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <readRegister8+0x3c>)
 8000d2a:	230a      	movs	r3, #10
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	2171      	movs	r1, #113	; 0x71
 8000d32:	f003 fd61 	bl	80047f8 <HAL_I2C_Master_Receive>
	return data;
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	781b      	ldrb	r3, [r3, #0]
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b005      	add	sp, #20
 8000d40:	bd90      	pop	{r4, r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	20000194 	.word	0x20000194

08000d48 <writeRegister8>:

static void writeRegister8(uint8_t reg, uint8_t val){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af02      	add	r7, sp, #8
 8000d4e:	0002      	movs	r2, r0
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	1dbb      	adds	r3, r7, #6
 8000d56:	1c0a      	adds	r2, r1, #0
 8000d58:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &reg, 1, 10);
 8000d5a:	1dfa      	adds	r2, r7, #7
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <writeRegister8+0x3c>)
 8000d5e:	230a      	movs	r3, #10
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2301      	movs	r3, #1
 8000d64:	2171      	movs	r1, #113	; 0x71
 8000d66:	f003 fc3f 	bl	80045e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &val, 1, 10);
 8000d6a:	1dba      	adds	r2, r7, #6
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <writeRegister8+0x3c>)
 8000d6e:	230a      	movs	r3, #10
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2301      	movs	r3, #1
 8000d74:	2171      	movs	r1, #113	; 0x71
 8000d76:	f003 fc37 	bl	80045e8 <HAL_I2C_Master_Transmit>
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b002      	add	sp, #8
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	20000194 	.word	0x20000194

08000d88 <FT6206_Begin>:

bool FT6206_Begin(uint8_t thresh){
 8000d88:	b5b0      	push	{r4, r5, r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	0002      	movs	r2, r0
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	701a      	strb	r2, [r3, #0]
	writeRegister8(FT62XX_REG_THRESHHOLD, thresh);
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	0019      	movs	r1, r3
 8000d9a:	2080      	movs	r0, #128	; 0x80
 8000d9c:	f7ff ffd4 	bl	8000d48 <writeRegister8>

	if(readRegister8(FT62XX_REG_VENDID) != FT62XX_VENDID)
 8000da0:	20a8      	movs	r0, #168	; 0xa8
 8000da2:	f7ff ffb1 	bl	8000d08 <readRegister8>
 8000da6:	0003      	movs	r3, r0
 8000da8:	2b11      	cmp	r3, #17
 8000daa:	d001      	beq.n	8000db0 <FT6206_Begin+0x28>
		return false;
 8000dac:	2300      	movs	r3, #0
 8000dae:	e015      	b.n	8000ddc <FT6206_Begin+0x54>
	uint8_t id = readRegister8(FT62XX_REG_CHIPID);
 8000db0:	250f      	movs	r5, #15
 8000db2:	197c      	adds	r4, r7, r5
 8000db4:	20a3      	movs	r0, #163	; 0xa3
 8000db6:	f7ff ffa7 	bl	8000d08 <readRegister8>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	7023      	strb	r3, [r4, #0]
	if((id != FT6206_CHIPID) && (id != FT6236_CHIPID) && (id != FT6236U_CHIPID))
 8000dbe:	197b      	adds	r3, r7, r5
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d009      	beq.n	8000dda <FT6206_Begin+0x52>
 8000dc6:	197b      	adds	r3, r7, r5
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b36      	cmp	r3, #54	; 0x36
 8000dcc:	d005      	beq.n	8000dda <FT6206_Begin+0x52>
 8000dce:	197b      	adds	r3, r7, r5
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b64      	cmp	r3, #100	; 0x64
 8000dd4:	d001      	beq.n	8000dda <FT6206_Begin+0x52>
		return false;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <FT6206_Begin+0x54>

	return true;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b004      	add	sp, #16
 8000de2:	bdb0      	pop	{r4, r5, r7, pc}

08000de4 <readData>:

void readData(void){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af02      	add	r7, sp, #8
	uint8_t i2cdat[16];
	uint8_t data = 0;
 8000dea:	1cfb      	adds	r3, r7, #3
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &data, 1, 10);
 8000df0:	1cfa      	adds	r2, r7, #3
 8000df2:	4858      	ldr	r0, [pc, #352]	; (8000f54 <readData+0x170>)
 8000df4:	230a      	movs	r3, #10
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	2171      	movs	r1, #113	; 0x71
 8000dfc:	f003 fbf4 	bl	80045e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, FT62XX_ADDR, i2cdat, 16, 10);
 8000e00:	1d3a      	adds	r2, r7, #4
 8000e02:	4854      	ldr	r0, [pc, #336]	; (8000f54 <readData+0x170>)
 8000e04:	230a      	movs	r3, #10
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2310      	movs	r3, #16
 8000e0a:	2171      	movs	r1, #113	; 0x71
 8000e0c:	f003 fcf4 	bl	80047f8 <HAL_I2C_Master_Receive>

	touches = i2cdat[0x02];
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	789a      	ldrb	r2, [r3, #2]
 8000e14:	4b50      	ldr	r3, [pc, #320]	; (8000f58 <readData+0x174>)
 8000e16:	701a      	strb	r2, [r3, #0]
	if(touches > 2 || touches == 0)
 8000e18:	4b4f      	ldr	r3, [pc, #316]	; (8000f58 <readData+0x174>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d803      	bhi.n	8000e28 <readData+0x44>
 8000e20:	4b4d      	ldr	r3, [pc, #308]	; (8000f58 <readData+0x174>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <readData+0x4a>
		touches = 0;
 8000e28:	4b4b      	ldr	r3, [pc, #300]	; (8000f58 <readData+0x174>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0 ; i < 2 ; i++){
 8000e2e:	2317      	movs	r3, #23
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	e082      	b.n	8000f3e <readData+0x15a>
	    touchX[i] = i2cdat[0x03 + i * 6] & 0x0F;
 8000e38:	2117      	movs	r1, #23
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	781a      	ldrb	r2, [r3, #0]
 8000e3e:	0013      	movs	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	189b      	adds	r3, r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	3303      	adds	r3, #3
 8000e48:	1d3a      	adds	r2, r7, #4
 8000e4a:	5cd3      	ldrb	r3, [r2, r3]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	0008      	movs	r0, r1
 8000e50:	183a      	adds	r2, r7, r0
 8000e52:	7812      	ldrb	r2, [r2, #0]
 8000e54:	210f      	movs	r1, #15
 8000e56:	400b      	ands	r3, r1
 8000e58:	b299      	uxth	r1, r3
 8000e5a:	4b40      	ldr	r3, [pc, #256]	; (8000f5c <readData+0x178>)
 8000e5c:	0052      	lsls	r2, r2, #1
 8000e5e:	52d1      	strh	r1, [r2, r3]
	    touchX[i] <<= 8;
 8000e60:	183b      	adds	r3, r7, r0
 8000e62:	781a      	ldrb	r2, [r3, #0]
 8000e64:	4b3d      	ldr	r3, [pc, #244]	; (8000f5c <readData+0x178>)
 8000e66:	0052      	lsls	r2, r2, #1
 8000e68:	5ad3      	ldrh	r3, [r2, r3]
 8000e6a:	183a      	adds	r2, r7, r0
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	b299      	uxth	r1, r3
 8000e72:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <readData+0x178>)
 8000e74:	0052      	lsls	r2, r2, #1
 8000e76:	52d1      	strh	r1, [r2, r3]
	    touchX[i] |= i2cdat[0x04 + i * 6];
 8000e78:	183b      	adds	r3, r7, r0
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	4b37      	ldr	r3, [pc, #220]	; (8000f5c <readData+0x178>)
 8000e7e:	0052      	lsls	r2, r2, #1
 8000e80:	5ad1      	ldrh	r1, [r2, r3]
 8000e82:	183b      	adds	r3, r7, r0
 8000e84:	781a      	ldrb	r2, [r3, #0]
 8000e86:	0013      	movs	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	189b      	adds	r3, r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	3304      	adds	r3, #4
 8000e90:	1d3a      	adds	r2, r7, #4
 8000e92:	5cd3      	ldrb	r3, [r2, r3]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	183a      	adds	r2, r7, r0
 8000e98:	7812      	ldrb	r2, [r2, #0]
 8000e9a:	430b      	orrs	r3, r1
 8000e9c:	b299      	uxth	r1, r3
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <readData+0x178>)
 8000ea0:	0052      	lsls	r2, r2, #1
 8000ea2:	52d1      	strh	r1, [r2, r3]

	    touchY[i] = i2cdat[0x05 + i * 6] & 0x0F;
 8000ea4:	0001      	movs	r1, r0
 8000ea6:	183b      	adds	r3, r7, r0
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	0013      	movs	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	189b      	adds	r3, r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	3305      	adds	r3, #5
 8000eb4:	1d3a      	adds	r2, r7, #4
 8000eb6:	5cd3      	ldrb	r3, [r2, r3]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	0008      	movs	r0, r1
 8000ebc:	183a      	adds	r2, r7, r0
 8000ebe:	7812      	ldrb	r2, [r2, #0]
 8000ec0:	210f      	movs	r1, #15
 8000ec2:	400b      	ands	r3, r1
 8000ec4:	b299      	uxth	r1, r3
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <readData+0x17c>)
 8000ec8:	0052      	lsls	r2, r2, #1
 8000eca:	52d1      	strh	r1, [r2, r3]
	    touchY[i] <<= 8;
 8000ecc:	183b      	adds	r3, r7, r0
 8000ece:	781a      	ldrb	r2, [r3, #0]
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <readData+0x17c>)
 8000ed2:	0052      	lsls	r2, r2, #1
 8000ed4:	5ad3      	ldrh	r3, [r2, r3]
 8000ed6:	183a      	adds	r2, r7, r0
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	b299      	uxth	r1, r3
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <readData+0x17c>)
 8000ee0:	0052      	lsls	r2, r2, #1
 8000ee2:	52d1      	strh	r1, [r2, r3]
	    touchY[i] |= i2cdat[0x06 + i * 6];
 8000ee4:	183b      	adds	r3, r7, r0
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <readData+0x17c>)
 8000eea:	0052      	lsls	r2, r2, #1
 8000eec:	5ad1      	ldrh	r1, [r2, r3]
 8000eee:	183b      	adds	r3, r7, r0
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	189b      	adds	r3, r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	001a      	movs	r2, r3
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	5c9b      	ldrb	r3, [r3, r2]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	183a      	adds	r2, r7, r0
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	430b      	orrs	r3, r1
 8000f0a:	b299      	uxth	r1, r3
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <readData+0x17c>)
 8000f0e:	0052      	lsls	r2, r2, #1
 8000f10:	52d1      	strh	r1, [r2, r3]

	    touchID[i] = i2cdat[0x05 + i * 6] >> 4;
 8000f12:	183b      	adds	r3, r7, r0
 8000f14:	781a      	ldrb	r2, [r3, #0]
 8000f16:	0013      	movs	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	189b      	adds	r3, r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	3305      	adds	r3, #5
 8000f20:	1d3a      	adds	r2, r7, #4
 8000f22:	5cd3      	ldrb	r3, [r2, r3]
 8000f24:	091b      	lsrs	r3, r3, #4
 8000f26:	b2d9      	uxtb	r1, r3
 8000f28:	183b      	adds	r3, r7, r0
 8000f2a:	781a      	ldrb	r2, [r3, #0]
 8000f2c:	b289      	uxth	r1, r1
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <readData+0x180>)
 8000f30:	0052      	lsls	r2, r2, #1
 8000f32:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0 ; i < 2 ; i++){
 8000f34:	183b      	adds	r3, r7, r0
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	183b      	adds	r3, r7, r0
 8000f3a:	3201      	adds	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	2317      	movs	r3, #23
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d800      	bhi.n	8000f4a <readData+0x166>
 8000f48:	e776      	b.n	8000e38 <readData+0x54>
	}
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b006      	add	sp, #24
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000194 	.word	0x20000194
 8000f58:	200000ce 	.word	0x200000ce
 8000f5c:	200000d0 	.word	0x200000d0
 8000f60:	200000d4 	.word	0x200000d4
 8000f64:	200000d8 	.word	0x200000d8

08000f68 <INIT_FT6206>:

void INIT_FT6206(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	touches = 0;
 8000f6c:	4b02      	ldr	r3, [pc, #8]	; (8000f78 <INIT_FT6206+0x10>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200000ce 	.word	0x200000ce

08000f7c <touched>:

uint8_t touched(void){
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
	uint8_t n = readRegister8(FT62XX_REG_NUMTOUCHES);
 8000f82:	1dfc      	adds	r4, r7, #7
 8000f84:	2002      	movs	r0, #2
 8000f86:	f7ff febf 	bl	8000d08 <readRegister8>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	7023      	strb	r3, [r4, #0]
	if(n > 2)
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d902      	bls.n	8000f9c <touched+0x20>
		n = 0;
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
	return n;
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	781b      	ldrb	r3, [r3, #0]
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b003      	add	sp, #12
 8000fa6:	bd90      	pop	{r4, r7, pc}

08000fa8 <getPoint>:

TS_POINT getPoint(uint8_t n) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	000a      	movs	r2, r1
 8000fb2:	1cfb      	adds	r3, r7, #3
 8000fb4:	701a      	strb	r2, [r3, #0]
	readData();
 8000fb6:	f7ff ff15 	bl	8000de4 <readData>
	if ((touches == 0) || (n >= 1))
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <getPoint+0x70>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <getPoint+0x22>
 8000fc2:	1cfb      	adds	r3, r7, #3
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d005      	beq.n	8000fd6 <getPoint+0x2e>
		TS_POINT_set(0, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f82a 	bl	8001028 <TS_POINT_set>
 8000fd4:	e013      	b.n	8000ffe <getPoint+0x56>
	else
		TS_POINT_set(320 - touchY[n], touchX[n], 1);
 8000fd6:	1cfb      	adds	r3, r7, #3
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <getPoint+0x74>)
 8000fdc:	0052      	lsls	r2, r2, #1
 8000fde:	5ad3      	ldrh	r3, [r2, r3]
 8000fe0:	22a0      	movs	r2, #160	; 0xa0
 8000fe2:	0052      	lsls	r2, r2, #1
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	b218      	sxth	r0, r3
 8000fea:	1cfb      	adds	r3, r7, #3
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <getPoint+0x78>)
 8000ff0:	0052      	lsls	r2, r2, #1
 8000ff2:	5ad3      	ldrh	r3, [r2, r3]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	f000 f815 	bl	8001028 <TS_POINT_set>
	return coor;
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <getPoint+0x7c>)
 8001002:	0010      	movs	r0, r2
 8001004:	0019      	movs	r1, r3
 8001006:	2306      	movs	r3, #6
 8001008:	001a      	movs	r2, r3
 800100a:	f006 f889 	bl	8007120 <memcpy>
}
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	46bd      	mov	sp, r7
 8001012:	b002      	add	sp, #8
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	200000ce 	.word	0x200000ce
 800101c:	200000d4 	.word	0x200000d4
 8001020:	200000d0 	.word	0x200000d0
 8001024:	200000c8 	.word	0x200000c8

08001028 <TS_POINT_set>:

void TS_POINT_clear(void) {
	coor.x = coor.y = coor.z = 0;
}

void TS_POINT_set(int16_t _x, int16_t _y, int16_t _z) {
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	0004      	movs	r4, r0
 8001030:	0008      	movs	r0, r1
 8001032:	0011      	movs	r1, r2
 8001034:	1dbb      	adds	r3, r7, #6
 8001036:	1c22      	adds	r2, r4, #0
 8001038:	801a      	strh	r2, [r3, #0]
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	1c02      	adds	r2, r0, #0
 800103e:	801a      	strh	r2, [r3, #0]
 8001040:	1cbb      	adds	r3, r7, #2
 8001042:	1c0a      	adds	r2, r1, #0
 8001044:	801a      	strh	r2, [r3, #0]
	coor.x = _x;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <TS_POINT_set+0x40>)
 8001048:	1dba      	adds	r2, r7, #6
 800104a:	8812      	ldrh	r2, [r2, #0]
 800104c:	801a      	strh	r2, [r3, #0]
	coor.y = _y;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <TS_POINT_set+0x40>)
 8001050:	1d3a      	adds	r2, r7, #4
 8001052:	8812      	ldrh	r2, [r2, #0]
 8001054:	805a      	strh	r2, [r3, #2]
	coor.z = _z;
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <TS_POINT_set+0x40>)
 8001058:	1cba      	adds	r2, r7, #2
 800105a:	8812      	ldrh	r2, [r2, #0]
 800105c:	809a      	strh	r2, [r3, #4]
}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b003      	add	sp, #12
 8001064:	bd90      	pop	{r4, r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	200000c8 	.word	0x200000c8

0800106c <Test_Rx>:
#include <string.h>

static uint8_t num;
static uint8_t rxData;

static uint8_t Test_Rx(uint8_t num){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	0002      	movs	r2, r0
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	701a      	strb	r2, [r3, #0]
	rxData = 0;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <Test_Rx+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
	while(rxData == 0) {
 800107e:	e00b      	b.n	8001098 <Test_Rx+0x2c>
		HAL_UART_Transmit(&huart1, &num, 1, 10);
 8001080:	1df9      	adds	r1, r7, #7
 8001082:	480b      	ldr	r0, [pc, #44]	; (80010b0 <Test_Rx+0x44>)
 8001084:	230a      	movs	r3, #10
 8001086:	2201      	movs	r2, #1
 8001088:	f005 f9ec 	bl	8006464 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, &rxData, 1, 10);
 800108c:	4907      	ldr	r1, [pc, #28]	; (80010ac <Test_Rx+0x40>)
 800108e:	4808      	ldr	r0, [pc, #32]	; (80010b0 <Test_Rx+0x44>)
 8001090:	230a      	movs	r3, #10
 8001092:	2201      	movs	r2, #1
 8001094:	f005 fa86 	bl	80065a4 <HAL_UART_Receive>
	while(rxData == 0) {
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <Test_Rx+0x40>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0ef      	beq.n	8001080 <Test_Rx+0x14>
	}
	return rxData;
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <Test_Rx+0x40>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200000dd 	.word	0x200000dd
 80010b0:	20000228 	.word	0x20000228

080010b4 <Coordinate_Tx>:

static void Coordinate_Tx(uint16_t x, uint16_t y){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	0002      	movs	r2, r0
 80010bc:	1dbb      	adds	r3, r7, #6
 80010be:	801a      	strh	r2, [r3, #0]
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	1c0a      	adds	r2, r1, #0
 80010c4:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0 ; i < 2 ; i++){
 80010c6:	230f      	movs	r3, #15
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e011      	b.n	80010f4 <Coordinate_Tx+0x40>
		HAL_UART_Transmit(&huart1, (uint8_t*)&x, 1, 10);
 80010d0:	1db9      	adds	r1, r7, #6
 80010d2:	481b      	ldr	r0, [pc, #108]	; (8001140 <Coordinate_Tx+0x8c>)
 80010d4:	230a      	movs	r3, #10
 80010d6:	2201      	movs	r2, #1
 80010d8:	f005 f9c4 	bl	8006464 <HAL_UART_Transmit>
		x >>= 8;
 80010dc:	1dbb      	adds	r3, r7, #6
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	1dbb      	adds	r3, r7, #6
 80010e6:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0 ; i < 2 ; i++){
 80010e8:	210f      	movs	r1, #15
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	781a      	ldrb	r2, [r3, #0]
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	3201      	adds	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	230f      	movs	r3, #15
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d9e8      	bls.n	80010d0 <Coordinate_Tx+0x1c>
	}
	for(uint8_t i = 0 ; i < 2 ; i++){
 80010fe:	230e      	movs	r3, #14
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e011      	b.n	800112c <Coordinate_Tx+0x78>
		HAL_UART_Transmit(&huart1, (uint8_t*)&y, 1, 10);
 8001108:	1d39      	adds	r1, r7, #4
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <Coordinate_Tx+0x8c>)
 800110c:	230a      	movs	r3, #10
 800110e:	2201      	movs	r2, #1
 8001110:	f005 f9a8 	bl	8006464 <HAL_UART_Transmit>
		y >>= 8;
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	b29a      	uxth	r2, r3
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0 ; i < 2 ; i++){
 8001120:	210e      	movs	r1, #14
 8001122:	187b      	adds	r3, r7, r1
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	187b      	adds	r3, r7, r1
 8001128:	3201      	adds	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	230e      	movs	r3, #14
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d9e8      	bls.n	8001108 <Coordinate_Tx+0x54>
	}
}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b004      	add	sp, #16
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000228 	.word	0x20000228

08001144 <LCD_FillScreen>:
		}
	}
	else return;
}

void LCD_FillScreen(LCD_COLOR color){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	0002      	movs	r2, r0
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	701a      	strb	r2, [r3, #0]
	num = 3;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <LCD_FillScreen+0x38>)
 8001152:	2203      	movs	r2, #3
 8001154:	701a      	strb	r2, [r3, #0]
	if(Test_Rx(num)) {
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <LCD_FillScreen+0x38>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	0018      	movs	r0, r3
 800115c:	f7ff ff86 	bl	800106c <Test_Rx>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d006      	beq.n	8001172 <LCD_FillScreen+0x2e>
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 8001164:	1df9      	adds	r1, r7, #7
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <LCD_FillScreen+0x3c>)
 8001168:	230a      	movs	r3, #10
 800116a:	2201      	movs	r2, #1
 800116c:	f005 f97a 	bl	8006464 <HAL_UART_Transmit>
 8001170:	e000      	b.n	8001174 <LCD_FillScreen+0x30>
	}
	else return;
 8001172:	46c0      	nop			; (mov r8, r8)
}
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	200000dc 	.word	0x200000dc
 8001180:	20000228 	.word	0x20000228

08001184 <LCD_DrawVLine>:
		HAL_UART_Transmit(&huart1, &color, 1, 10);
	}
	else return;
}

void LCD_DrawVLine(uint16_t x, uint16_t y, uint16_t height, LCD_COLOR color){
 8001184:	b5b0      	push	{r4, r5, r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	0005      	movs	r5, r0
 800118c:	000c      	movs	r4, r1
 800118e:	0010      	movs	r0, r2
 8001190:	0019      	movs	r1, r3
 8001192:	1dbb      	adds	r3, r7, #6
 8001194:	1c2a      	adds	r2, r5, #0
 8001196:	801a      	strh	r2, [r3, #0]
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	1c22      	adds	r2, r4, #0
 800119c:	801a      	strh	r2, [r3, #0]
 800119e:	1cbb      	adds	r3, r7, #2
 80011a0:	1c02      	adds	r2, r0, #0
 80011a2:	801a      	strh	r2, [r3, #0]
 80011a4:	1c7b      	adds	r3, r7, #1
 80011a6:	1c0a      	adds	r2, r1, #0
 80011a8:	701a      	strb	r2, [r3, #0]
	num = 7;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <LCD_DrawVLine+0x98>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	701a      	strb	r2, [r3, #0]
	if(Test_Rx(num)){
 80011b0:	4b1a      	ldr	r3, [pc, #104]	; (800121c <LCD_DrawVLine+0x98>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff ff59 	bl	800106c <Test_Rx>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d02a      	beq.n	8001214 <LCD_DrawVLine+0x90>
		Coordinate_Tx(x, y);
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	881a      	ldrh	r2, [r3, #0]
 80011c2:	1dbb      	adds	r3, r7, #6
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	0011      	movs	r1, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff ff73 	bl	80010b4 <Coordinate_Tx>
		for(uint8_t i = 0 ; i < 2 ; i++){
 80011ce:	230f      	movs	r3, #15
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	e011      	b.n	80011fc <LCD_DrawVLine+0x78>
			HAL_UART_Transmit(&huart1, (uint8_t*)&height, 1, 10);
 80011d8:	1cb9      	adds	r1, r7, #2
 80011da:	4811      	ldr	r0, [pc, #68]	; (8001220 <LCD_DrawVLine+0x9c>)
 80011dc:	230a      	movs	r3, #10
 80011de:	2201      	movs	r2, #1
 80011e0:	f005 f940 	bl	8006464 <HAL_UART_Transmit>
			height >>= 8;
 80011e4:	1cbb      	adds	r3, r7, #2
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	1cbb      	adds	r3, r7, #2
 80011ee:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0 ; i < 2 ; i++){
 80011f0:	210f      	movs	r1, #15
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	3201      	adds	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	230f      	movs	r3, #15
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d9e8      	bls.n	80011d8 <LCD_DrawVLine+0x54>
		}
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 8001206:	1c79      	adds	r1, r7, #1
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <LCD_DrawVLine+0x9c>)
 800120a:	230a      	movs	r3, #10
 800120c:	2201      	movs	r2, #1
 800120e:	f005 f929 	bl	8006464 <HAL_UART_Transmit>
 8001212:	e000      	b.n	8001216 <LCD_DrawVLine+0x92>
	}
	else return;
 8001214:	46c0      	nop			; (mov r8, r8)
}
 8001216:	46bd      	mov	sp, r7
 8001218:	b004      	add	sp, #16
 800121a:	bdb0      	pop	{r4, r5, r7, pc}
 800121c:	200000dc 	.word	0x200000dc
 8001220:	20000228 	.word	0x20000228

08001224 <LCD_DrawHollowCircle>:

void LCD_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, LCD_COLOR color){
 8001224:	b5b0      	push	{r4, r5, r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	0005      	movs	r5, r0
 800122c:	000c      	movs	r4, r1
 800122e:	0010      	movs	r0, r2
 8001230:	0019      	movs	r1, r3
 8001232:	1dbb      	adds	r3, r7, #6
 8001234:	1c2a      	adds	r2, r5, #0
 8001236:	801a      	strh	r2, [r3, #0]
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	1c22      	adds	r2, r4, #0
 800123c:	801a      	strh	r2, [r3, #0]
 800123e:	1cbb      	adds	r3, r7, #2
 8001240:	1c02      	adds	r2, r0, #0
 8001242:	801a      	strh	r2, [r3, #0]
 8001244:	1c7b      	adds	r3, r7, #1
 8001246:	1c0a      	adds	r2, r1, #0
 8001248:	701a      	strb	r2, [r3, #0]
	num = 8;
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <LCD_DrawHollowCircle+0x98>)
 800124c:	2208      	movs	r2, #8
 800124e:	701a      	strb	r2, [r3, #0]
	if(Test_Rx(num)){
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <LCD_DrawHollowCircle+0x98>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff ff09 	bl	800106c <Test_Rx>
 800125a:	1e03      	subs	r3, r0, #0
 800125c:	d02a      	beq.n	80012b4 <LCD_DrawHollowCircle+0x90>
		Coordinate_Tx(X, Y);
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	881a      	ldrh	r2, [r3, #0]
 8001262:	1dbb      	adds	r3, r7, #6
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	0011      	movs	r1, r2
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff ff23 	bl	80010b4 <Coordinate_Tx>
		for(uint8_t i = 0 ; i < 2 ; i++){
 800126e:	230f      	movs	r3, #15
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	e011      	b.n	800129c <LCD_DrawHollowCircle+0x78>
			HAL_UART_Transmit(&huart1, (uint8_t*)&radius, 1, 10);
 8001278:	1cb9      	adds	r1, r7, #2
 800127a:	4811      	ldr	r0, [pc, #68]	; (80012c0 <LCD_DrawHollowCircle+0x9c>)
 800127c:	230a      	movs	r3, #10
 800127e:	2201      	movs	r2, #1
 8001280:	f005 f8f0 	bl	8006464 <HAL_UART_Transmit>
			radius >>= 8;
 8001284:	1cbb      	adds	r3, r7, #2
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	b29a      	uxth	r2, r3
 800128c:	1cbb      	adds	r3, r7, #2
 800128e:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0 ; i < 2 ; i++){
 8001290:	210f      	movs	r1, #15
 8001292:	187b      	adds	r3, r7, r1
 8001294:	781a      	ldrb	r2, [r3, #0]
 8001296:	187b      	adds	r3, r7, r1
 8001298:	3201      	adds	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	230f      	movs	r3, #15
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d9e8      	bls.n	8001278 <LCD_DrawHollowCircle+0x54>
		}
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 80012a6:	1c79      	adds	r1, r7, #1
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <LCD_DrawHollowCircle+0x9c>)
 80012aa:	230a      	movs	r3, #10
 80012ac:	2201      	movs	r2, #1
 80012ae:	f005 f8d9 	bl	8006464 <HAL_UART_Transmit>
 80012b2:	e000      	b.n	80012b6 <LCD_DrawHollowCircle+0x92>
	}
	else return;
 80012b4:	46c0      	nop			; (mov r8, r8)
}
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b004      	add	sp, #16
 80012ba:	bdb0      	pop	{r4, r5, r7, pc}
 80012bc:	200000dc 	.word	0x200000dc
 80012c0:	20000228 	.word	0x20000228

080012c4 <LCD_DrawFilledCircle>:

void LCD_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, LCD_COLOR color){
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	0005      	movs	r5, r0
 80012cc:	000c      	movs	r4, r1
 80012ce:	0010      	movs	r0, r2
 80012d0:	0019      	movs	r1, r3
 80012d2:	1dbb      	adds	r3, r7, #6
 80012d4:	1c2a      	adds	r2, r5, #0
 80012d6:	801a      	strh	r2, [r3, #0]
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	1c22      	adds	r2, r4, #0
 80012dc:	801a      	strh	r2, [r3, #0]
 80012de:	1cbb      	adds	r3, r7, #2
 80012e0:	1c02      	adds	r2, r0, #0
 80012e2:	801a      	strh	r2, [r3, #0]
 80012e4:	1c7b      	adds	r3, r7, #1
 80012e6:	1c0a      	adds	r2, r1, #0
 80012e8:	701a      	strb	r2, [r3, #0]
	num = 9;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <LCD_DrawFilledCircle+0x98>)
 80012ec:	2209      	movs	r2, #9
 80012ee:	701a      	strb	r2, [r3, #0]
	if(Test_Rx(num)){
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <LCD_DrawFilledCircle+0x98>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7ff feb9 	bl	800106c <Test_Rx>
 80012fa:	1e03      	subs	r3, r0, #0
 80012fc:	d02a      	beq.n	8001354 <LCD_DrawFilledCircle+0x90>
		Coordinate_Tx(X, Y);
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	1dbb      	adds	r3, r7, #6
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	0011      	movs	r1, r2
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff fed3 	bl	80010b4 <Coordinate_Tx>
		for(uint8_t i = 0 ; i < 2 ; i++){
 800130e:	230f      	movs	r3, #15
 8001310:	18fb      	adds	r3, r7, r3
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e011      	b.n	800133c <LCD_DrawFilledCircle+0x78>
			HAL_UART_Transmit(&huart1, (uint8_t*)&radius, 1, 10);
 8001318:	1cb9      	adds	r1, r7, #2
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <LCD_DrawFilledCircle+0x9c>)
 800131c:	230a      	movs	r3, #10
 800131e:	2201      	movs	r2, #1
 8001320:	f005 f8a0 	bl	8006464 <HAL_UART_Transmit>
			radius >>= 8;
 8001324:	1cbb      	adds	r3, r7, #2
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	b29a      	uxth	r2, r3
 800132c:	1cbb      	adds	r3, r7, #2
 800132e:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0 ; i < 2 ; i++){
 8001330:	210f      	movs	r1, #15
 8001332:	187b      	adds	r3, r7, r1
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	187b      	adds	r3, r7, r1
 8001338:	3201      	adds	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
 800133c:	230f      	movs	r3, #15
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d9e8      	bls.n	8001318 <LCD_DrawFilledCircle+0x54>
		}
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 8001346:	1c79      	adds	r1, r7, #1
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <LCD_DrawFilledCircle+0x9c>)
 800134a:	230a      	movs	r3, #10
 800134c:	2201      	movs	r2, #1
 800134e:	f005 f889 	bl	8006464 <HAL_UART_Transmit>
 8001352:	e000      	b.n	8001356 <LCD_DrawFilledCircle+0x92>
	}
	else return;
 8001354:	46c0      	nop			; (mov r8, r8)
}
 8001356:	46bd      	mov	sp, r7
 8001358:	b004      	add	sp, #16
 800135a:	bdb0      	pop	{r4, r5, r7, pc}
 800135c:	200000dc 	.word	0x200000dc
 8001360:	20000228 	.word	0x20000228

08001364 <LCD_DrawFilledRectangleCoord>:
		HAL_UART_Transmit(&huart1, &color, 1, 10);
	}
	else return;
}

void LCD_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, LCD_COLOR color){
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	0005      	movs	r5, r0
 800136c:	000c      	movs	r4, r1
 800136e:	0010      	movs	r0, r2
 8001370:	0019      	movs	r1, r3
 8001372:	1dbb      	adds	r3, r7, #6
 8001374:	1c2a      	adds	r2, r5, #0
 8001376:	801a      	strh	r2, [r3, #0]
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	1c22      	adds	r2, r4, #0
 800137c:	801a      	strh	r2, [r3, #0]
 800137e:	1cbb      	adds	r3, r7, #2
 8001380:	1c02      	adds	r2, r0, #0
 8001382:	801a      	strh	r2, [r3, #0]
 8001384:	003b      	movs	r3, r7
 8001386:	1c0a      	adds	r2, r1, #0
 8001388:	801a      	strh	r2, [r3, #0]
	num = 11;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <LCD_DrawFilledRectangleCoord+0x74>)
 800138c:	220b      	movs	r2, #11
 800138e:	701a      	strb	r2, [r3, #0]
	if(Test_Rx(num)){
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <LCD_DrawFilledRectangleCoord+0x74>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff fe69 	bl	800106c <Test_Rx>
 800139a:	1e03      	subs	r3, r0, #0
 800139c:	d017      	beq.n	80013ce <LCD_DrawFilledRectangleCoord+0x6a>
		Coordinate_Tx(X0, Y0);
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	881a      	ldrh	r2, [r3, #0]
 80013a2:	1dbb      	adds	r3, r7, #6
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	0011      	movs	r1, r2
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff fe83 	bl	80010b4 <Coordinate_Tx>
		Coordinate_Tx(X1, Y1);
 80013ae:	003b      	movs	r3, r7
 80013b0:	881a      	ldrh	r2, [r3, #0]
 80013b2:	1cbb      	adds	r3, r7, #2
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	0011      	movs	r1, r2
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fe7b 	bl	80010b4 <Coordinate_Tx>
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 80013be:	2318      	movs	r3, #24
 80013c0:	18f9      	adds	r1, r7, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <LCD_DrawFilledRectangleCoord+0x78>)
 80013c4:	230a      	movs	r3, #10
 80013c6:	2201      	movs	r2, #1
 80013c8:	f005 f84c 	bl	8006464 <HAL_UART_Transmit>
 80013cc:	e000      	b.n	80013d0 <LCD_DrawFilledRectangleCoord+0x6c>
	}
	else return;
 80013ce:	46c0      	nop			; (mov r8, r8)
}
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b002      	add	sp, #8
 80013d4:	bdb0      	pop	{r4, r5, r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	200000dc 	.word	0x200000dc
 80013dc:	20000228 	.word	0x20000228

080013e0 <LCD_DrawText>:
		HAL_UART_Transmit(&huart1, &bgcolor, 1, 10);
	}
	return;
}

void LCD_DrawText(const char* str, uint16_t X, uint16_t Y, LCD_COLOR color, LCD_COLOR bgcolor){
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	000c      	movs	r4, r1
 80013ea:	0010      	movs	r0, r2
 80013ec:	0019      	movs	r1, r3
 80013ee:	230a      	movs	r3, #10
 80013f0:	18fb      	adds	r3, r7, r3
 80013f2:	1c22      	adds	r2, r4, #0
 80013f4:	801a      	strh	r2, [r3, #0]
 80013f6:	2308      	movs	r3, #8
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	1c02      	adds	r2, r0, #0
 80013fc:	801a      	strh	r2, [r3, #0]
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	1c0a      	adds	r2, r1, #0
 8001402:	701a      	strb	r2, [r3, #0]
	num = 13;
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <LCD_DrawText+0xb8>)
 8001406:	220d      	movs	r2, #13
 8001408:	701a      	strb	r2, [r3, #0]
	if(Test_Rx(num)){
 800140a:	4b23      	ldr	r3, [pc, #140]	; (8001498 <LCD_DrawText+0xb8>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	0018      	movs	r0, r3
 8001410:	f7ff fe2c 	bl	800106c <Test_Rx>
 8001414:	1e03      	subs	r3, r0, #0
 8001416:	d03a      	beq.n	800148e <LCD_DrawText+0xae>
		uint8_t len = strlen(str);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	0018      	movs	r0, r3
 800141c:	f7fe fe74 	bl	8000108 <strlen>
 8001420:	0002      	movs	r2, r0
 8001422:	2316      	movs	r3, #22
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0 ; i <= len ; i++)
 8001428:	2317      	movs	r3, #23
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e00e      	b.n	8001450 <LCD_DrawText+0x70>
			HAL_UART_Transmit(&huart1, (uint8_t*)&str[i], 1, 10);
 8001432:	2417      	movs	r4, #23
 8001434:	193b      	adds	r3, r7, r4
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	18d1      	adds	r1, r2, r3
 800143c:	4817      	ldr	r0, [pc, #92]	; (800149c <LCD_DrawText+0xbc>)
 800143e:	230a      	movs	r3, #10
 8001440:	2201      	movs	r2, #1
 8001442:	f005 f80f 	bl	8006464 <HAL_UART_Transmit>
		for(uint8_t i = 0 ; i <= len ; i++)
 8001446:	193b      	adds	r3, r7, r4
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	193b      	adds	r3, r7, r4
 800144c:	3201      	adds	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	2317      	movs	r3, #23
 8001452:	18fa      	adds	r2, r7, r3
 8001454:	2316      	movs	r3, #22
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d9e8      	bls.n	8001432 <LCD_DrawText+0x52>
		Coordinate_Tx(X, Y);
 8001460:	2308      	movs	r3, #8
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	881a      	ldrh	r2, [r3, #0]
 8001466:	230a      	movs	r3, #10
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	0011      	movs	r1, r2
 800146e:	0018      	movs	r0, r3
 8001470:	f7ff fe20 	bl	80010b4 <Coordinate_Tx>
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 8001474:	1df9      	adds	r1, r7, #7
 8001476:	4809      	ldr	r0, [pc, #36]	; (800149c <LCD_DrawText+0xbc>)
 8001478:	230a      	movs	r3, #10
 800147a:	2201      	movs	r2, #1
 800147c:	f004 fff2 	bl	8006464 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, &bgcolor, 1, 10);
 8001480:	2328      	movs	r3, #40	; 0x28
 8001482:	18f9      	adds	r1, r7, r3
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <LCD_DrawText+0xbc>)
 8001486:	230a      	movs	r3, #10
 8001488:	2201      	movs	r2, #1
 800148a:	f004 ffeb 	bl	8006464 <HAL_UART_Transmit>
	}
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b007      	add	sp, #28
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	200000dc 	.word	0x200000dc
 800149c:	20000228 	.word	0x20000228

080014a0 <time_set>:
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */

__STATIC_INLINE void time_set(void){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	DS3231_set_date(time.day, time.month, time.year);
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <time_set+0x30>)
 80014a6:	7898      	ldrb	r0, [r3, #2]
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <time_set+0x30>)
 80014aa:	7859      	ldrb	r1, [r3, #1]
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <time_set+0x30>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	001a      	movs	r2, r3
 80014b2:	f7ff fb43 	bl	8000b3c <DS3231_set_date>
	DS3231_set_time(time.sec, time.min, time.hour);
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <time_set+0x30>)
 80014b8:	7958      	ldrb	r0, [r3, #5]
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <time_set+0x30>)
 80014bc:	7919      	ldrb	r1, [r3, #4]
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <time_set+0x30>)
 80014c0:	78db      	ldrb	r3, [r3, #3]
 80014c2:	001a      	movs	r2, r3
 80014c4:	f7ff fa54 	bl	8000970 <DS3231_set_time>
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	2000001c 	.word	0x2000001c

080014d4 <time_get>:

__STATIC_INLINE void time_get(void){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	DS3231_get_date(&time.day, &time.month, &time.year);
 80014d8:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <time_get+0x24>)
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <time_get+0x28>)
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <time_get+0x2c>)
 80014de:	0018      	movs	r0, r3
 80014e0:	f7ff fb92 	bl	8000c08 <DS3231_get_date>
	DS3231_get_time(&time.sec, &time.min, &time.hour);
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <time_get+0x30>)
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <time_get+0x34>)
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <time_get+0x38>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff faa6 	bl	8000a3c <DS3231_get_time>
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	2000001c 	.word	0x2000001c
 80014fc:	2000001d 	.word	0x2000001d
 8001500:	2000001e 	.word	0x2000001e
 8001504:	2000001f 	.word	0x2000001f
 8001508:	20000020 	.word	0x20000020
 800150c:	20000021 	.word	0x20000021

08001510 <coor_check>:

__STATIC_INLINE uint8_t coor_check(uint16_t x0, uint16_t x1, uint16_t y0, uint16_t y1){
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	0005      	movs	r5, r0
 8001518:	000c      	movs	r4, r1
 800151a:	0010      	movs	r0, r2
 800151c:	0019      	movs	r1, r3
 800151e:	1dbb      	adds	r3, r7, #6
 8001520:	1c2a      	adds	r2, r5, #0
 8001522:	801a      	strh	r2, [r3, #0]
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	1c22      	adds	r2, r4, #0
 8001528:	801a      	strh	r2, [r3, #0]
 800152a:	1cbb      	adds	r3, r7, #2
 800152c:	1c02      	adds	r2, r0, #0
 800152e:	801a      	strh	r2, [r3, #0]
 8001530:	003b      	movs	r3, r7
 8001532:	1c0a      	adds	r2, r1, #0
 8001534:	801a      	strh	r2, [r3, #0]
	return ((curXY.x >= x0 * 15 && curXY.x <= x1 * 15) && (curXY.y >= y0 * 19 && curXY.y <= y1 * 19));
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <coor_check+0x98>)
 8001538:	2200      	movs	r2, #0
 800153a:	5e9b      	ldrsh	r3, [r3, r2]
 800153c:	0019      	movs	r1, r3
 800153e:	1dbb      	adds	r3, r7, #6
 8001540:	881a      	ldrh	r2, [r3, #0]
 8001542:	0013      	movs	r3, r2
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	4299      	cmp	r1, r3
 800154a:	db26      	blt.n	800159a <coor_check+0x8a>
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <coor_check+0x98>)
 800154e:	2200      	movs	r2, #0
 8001550:	5e9b      	ldrsh	r3, [r3, r2]
 8001552:	0019      	movs	r1, r3
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	881a      	ldrh	r2, [r3, #0]
 8001558:	0013      	movs	r3, r2
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	1a9b      	subs	r3, r3, r2
 800155e:	4299      	cmp	r1, r3
 8001560:	dc1b      	bgt.n	800159a <coor_check+0x8a>
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <coor_check+0x98>)
 8001564:	2202      	movs	r2, #2
 8001566:	5e9b      	ldrsh	r3, [r3, r2]
 8001568:	0019      	movs	r1, r3
 800156a:	1cbb      	adds	r3, r7, #2
 800156c:	881a      	ldrh	r2, [r3, #0]
 800156e:	0013      	movs	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	189b      	adds	r3, r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	189b      	adds	r3, r3, r2
 8001578:	4299      	cmp	r1, r3
 800157a:	db0e      	blt.n	800159a <coor_check+0x8a>
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <coor_check+0x98>)
 800157e:	2202      	movs	r2, #2
 8001580:	5e9b      	ldrsh	r3, [r3, r2]
 8001582:	0019      	movs	r1, r3
 8001584:	003b      	movs	r3, r7
 8001586:	881a      	ldrh	r2, [r3, #0]
 8001588:	0013      	movs	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	189b      	adds	r3, r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	189b      	adds	r3, r3, r2
 8001592:	4299      	cmp	r1, r3
 8001594:	dc01      	bgt.n	800159a <coor_check+0x8a>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <coor_check+0x8c>
 800159a:	2300      	movs	r3, #0
 800159c:	b2db      	uxtb	r3, r3
}
 800159e:	0018      	movs	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b002      	add	sp, #8
 80015a4:	bdb0      	pop	{r4, r5, r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	200002c4 	.word	0x200002c4

080015ac <LCD_Clear>:

__STATIC_INLINE void LCD_Clear(LCD_COLOR color){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	0002      	movs	r2, r0
 80015b4:	1dfb      	adds	r3, r7, #7
 80015b6:	701a      	strb	r2, [r3, #0]
	LCD_FillScreen(color);
 80015b8:	1dfb      	adds	r3, r7, #7
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff fdc1 	bl	8001144 <LCD_FillScreen>
}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b002      	add	sp, #8
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <reset_value>:

__STATIC_INLINE void reset_value(void){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	modeF = firF = buzM = 0;
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <reset_value+0x3c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <reset_value+0x3c>)
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <reset_value+0x40>)
 80015dc:	701a      	strb	r2, [r3, #0]
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <reset_value+0x40>)
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <reset_value+0x44>)
 80015e4:	701a      	strb	r2, [r3, #0]
	curXY.x = curXY.y = 0;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <reset_value+0x48>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	805a      	strh	r2, [r3, #2]
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <reset_value+0x48>)
 80015ee:	2202      	movs	r2, #2
 80015f0:	5e9a      	ldrsh	r2, [r3, r2]
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <reset_value+0x48>)
 80015f4:	801a      	strh	r2, [r3, #0]
	LCD_Clear(set_bcolor);
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <reset_value+0x4c>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	0018      	movs	r0, r3
 80015fc:	f7ff ffd6 	bl	80015ac <LCD_Clear>
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	200002cc 	.word	0x200002cc
 800160c:	200002cb 	.word	0x200002cb
 8001610:	200002ca 	.word	0x200002ca
 8001614:	200002c4 	.word	0x200002c4
 8001618:	20000019 	.word	0x20000019

0800161c <pitch_set>:

__STATIC_INLINE void pitch_set(void){
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	switch(pitch_state){
 8001620:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <pitch_set+0x78>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b0a      	cmp	r3, #10
 8001626:	d831      	bhi.n	800168c <pitch_set+0x70>
 8001628:	009a      	lsls	r2, r3, #2
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <pitch_set+0x7c>)
 800162c:	18d3      	adds	r3, r2, r3
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	469f      	mov	pc, r3
	case 10: pitch = 0.1; break;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <pitch_set+0x80>)
 8001634:	4a1a      	ldr	r2, [pc, #104]	; (80016a0 <pitch_set+0x84>)
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e028      	b.n	800168c <pitch_set+0x70>
	case 9: pitch = 0.2; break;
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <pitch_set+0x80>)
 800163c:	4a19      	ldr	r2, [pc, #100]	; (80016a4 <pitch_set+0x88>)
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	e024      	b.n	800168c <pitch_set+0x70>
	case 8: pitch = 0.4; break;
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <pitch_set+0x80>)
 8001644:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <pitch_set+0x8c>)
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e020      	b.n	800168c <pitch_set+0x70>
	case 7: pitch = 0.8; break;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <pitch_set+0x80>)
 800164c:	4a17      	ldr	r2, [pc, #92]	; (80016ac <pitch_set+0x90>)
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e01c      	b.n	800168c <pitch_set+0x70>
	case 6: pitch = 0.9; break;
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <pitch_set+0x80>)
 8001654:	4a16      	ldr	r2, [pc, #88]	; (80016b0 <pitch_set+0x94>)
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	e018      	b.n	800168c <pitch_set+0x70>
	case 5: pitch = 1.0; break;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <pitch_set+0x80>)
 800165c:	22fe      	movs	r2, #254	; 0xfe
 800165e:	0592      	lsls	r2, r2, #22
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e013      	b.n	800168c <pitch_set+0x70>
	case 4: pitch = 2.5; break;
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <pitch_set+0x80>)
 8001666:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <pitch_set+0x98>)
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	e00f      	b.n	800168c <pitch_set+0x70>
	case 3: pitch = 4.5; break;
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <pitch_set+0x80>)
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <pitch_set+0x9c>)
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e00b      	b.n	800168c <pitch_set+0x70>
	case 2: pitch = 8.5; break;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <pitch_set+0x80>)
 8001676:	4a11      	ldr	r2, [pc, #68]	; (80016bc <pitch_set+0xa0>)
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e007      	b.n	800168c <pitch_set+0x70>
	case 1: pitch = 9.5; break;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <pitch_set+0x80>)
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <pitch_set+0xa4>)
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	e003      	b.n	800168c <pitch_set+0x70>
	case 0: pitch = 10.5; break;
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <pitch_set+0x80>)
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <pitch_set+0xa8>)
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	46c0      	nop			; (mov r8, r8)
	}
}
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	20000022 	.word	0x20000022
 8001698:	08007c44 	.word	0x08007c44
 800169c:	200002d8 	.word	0x200002d8
 80016a0:	3dcccccd 	.word	0x3dcccccd
 80016a4:	3e4ccccd 	.word	0x3e4ccccd
 80016a8:	3ecccccd 	.word	0x3ecccccd
 80016ac:	3f4ccccd 	.word	0x3f4ccccd
 80016b0:	3f666666 	.word	0x3f666666
 80016b4:	40200000 	.word	0x40200000
 80016b8:	40900000 	.word	0x40900000
 80016bc:	41080000 	.word	0x41080000
 80016c0:	41180000 	.word	0x41180000
 80016c4:	41280000 	.word	0x41280000

080016c8 <LCD_putsXY>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void LCD_putsXY(uint16_t x, uint16_t y, char* str, LCD_COLOR color, LCD_COLOR bg_color){
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	0004      	movs	r4, r0
 80016d0:	0008      	movs	r0, r1
 80016d2:	60ba      	str	r2, [r7, #8]
 80016d4:	0019      	movs	r1, r3
 80016d6:	250e      	movs	r5, #14
 80016d8:	197b      	adds	r3, r7, r5
 80016da:	1c22      	adds	r2, r4, #0
 80016dc:	801a      	strh	r2, [r3, #0]
 80016de:	240c      	movs	r4, #12
 80016e0:	193b      	adds	r3, r7, r4
 80016e2:	1c02      	adds	r2, r0, #0
 80016e4:	801a      	strh	r2, [r3, #0]
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	1c0a      	adds	r2, r1, #0
 80016ea:	701a      	strb	r2, [r3, #0]
	LCD_DrawText(str, x * 15, y * 19, color, bg_color);
 80016ec:	197b      	adds	r3, r7, r5
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	1c1a      	adds	r2, r3, #0
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	b299      	uxth	r1, r3
 80016f8:	193b      	adds	r3, r7, r4
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	1c1a      	adds	r2, r3, #0
 80016fe:	00d2      	lsls	r2, r2, #3
 8001700:	18d2      	adds	r2, r2, r3
 8001702:	1892      	adds	r2, r2, r2
 8001704:	18d3      	adds	r3, r2, r3
 8001706:	b29a      	uxth	r2, r3
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	781c      	ldrb	r4, [r3, #0]
 800170c:	68b8      	ldr	r0, [r7, #8]
 800170e:	2320      	movs	r3, #32
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	0023      	movs	r3, r4
 8001718:	f7ff fe62 	bl	80013e0 <LCD_DrawText>
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b004      	add	sp, #16
 8001722:	bdb0      	pop	{r4, r5, r7, pc}

08001724 <array_puts>:

void array_puts(POS* pos, char* title, char** arr, LCD_COLOR* color, LCD_COLOR* bg_color, uint8_t num){
 8001724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
	LCD_putsXY(0, 0, title, set_tcolor, set_bcolor);
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <array_puts+0x9c>)
 8001734:	7819      	ldrb	r1, [r3, #0]
 8001736:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <array_puts+0xa0>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	000b      	movs	r3, r1
 8001740:	2100      	movs	r1, #0
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff ffc0 	bl	80016c8 <LCD_putsXY>
	for(uint8_t i = 0 ; i < num ; i++)
 8001748:	2317      	movs	r3, #23
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	e027      	b.n	80017a2 <array_puts+0x7e>
		LCD_putsXY(pos[i].x, pos[i].y, arr[i], color[i], bg_color[i]);
 8001752:	2517      	movs	r5, #23
 8001754:	197b      	adds	r3, r7, r5
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	18d3      	adds	r3, r2, r3
 800175e:	8818      	ldrh	r0, [r3, #0]
 8001760:	197b      	adds	r3, r7, r5
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	18d3      	adds	r3, r2, r3
 800176a:	8859      	ldrh	r1, [r3, #2]
 800176c:	197b      	adds	r3, r7, r5
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	18d3      	adds	r3, r2, r3
 8001776:	681c      	ldr	r4, [r3, #0]
 8001778:	002e      	movs	r6, r5
 800177a:	19bb      	adds	r3, r7, r6
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	18d3      	adds	r3, r2, r3
 8001782:	781d      	ldrb	r5, [r3, #0]
 8001784:	19bb      	adds	r3, r7, r6
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800178a:	18d3      	adds	r3, r2, r3
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	002b      	movs	r3, r5
 8001792:	0022      	movs	r2, r4
 8001794:	f7ff ff98 	bl	80016c8 <LCD_putsXY>
	for(uint8_t i = 0 ; i < num ; i++)
 8001798:	19bb      	adds	r3, r7, r6
 800179a:	781a      	ldrb	r2, [r3, #0]
 800179c:	19bb      	adds	r3, r7, r6
 800179e:	3201      	adds	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	2317      	movs	r3, #23
 80017a4:	18fa      	adds	r2, r7, r3
 80017a6:	232c      	movs	r3, #44	; 0x2c
 80017a8:	2108      	movs	r1, #8
 80017aa:	185b      	adds	r3, r3, r1
 80017ac:	19db      	adds	r3, r3, r7
 80017ae:	7812      	ldrb	r2, [r2, #0]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d3cd      	bcc.n	8001752 <array_puts+0x2e>
}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b007      	add	sp, #28
 80017be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c0:	200002c1 	.word	0x200002c1
 80017c4:	20000019 	.word	0x20000019

080017c8 <time_setting>:

void time_setting(void){
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b0b6      	sub	sp, #216	; 0xd8
 80017cc:	af02      	add	r7, sp, #8
	uint8_t sel = 0;
 80017ce:	23cf      	movs	r3, #207	; 0xcf
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
	TIME set_time = { 23, 6, 22, 0, 0, 0 };
 80017d6:	23c0      	movs	r3, #192	; 0xc0
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	4adb      	ldr	r2, [pc, #876]	; (8001b48 <time_setting+0x380>)
 80017dc:	6811      	ldr	r1, [r2, #0]
 80017de:	6019      	str	r1, [r3, #0]
 80017e0:	8892      	ldrh	r2, [r2, #4]
 80017e2:	809a      	strh	r2, [r3, #4]

	POS pos[9] = {{5, 4}, {10, 4}, {14, 4}, {6, 5}, {10, 5}, {14, 5}, {7, 8}, {12, 8}, {17, 10}};
 80017e4:	239c      	movs	r3, #156	; 0x9c
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	4ad8      	ldr	r2, [pc, #864]	; (8001b4c <time_setting+0x384>)
 80017ea:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017ec:	c313      	stmia	r3!, {r0, r1, r4}
 80017ee:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017f0:	c313      	stmia	r3!, {r0, r1, r4}
 80017f2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017f4:	c313      	stmia	r3!, {r0, r1, r4}
	char bf[6][20];

	LCD_Clear(set_bcolor);
 80017f6:	4bd6      	ldr	r3, [pc, #856]	; (8001b50 <time_setting+0x388>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	0018      	movs	r0, r3
 80017fc:	f7ff fed6 	bl	80015ac <LCD_Clear>
	while(1){
		if(!firF){
 8001800:	4bd4      	ldr	r3, [pc, #848]	; (8001b54 <time_setting+0x38c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d147      	bne.n	8001898 <time_setting+0xd0>
			firF = 1;
 8001808:	4bd2      	ldr	r3, [pc, #840]	; (8001b54 <time_setting+0x38c>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]

			curXY.x = curXY.y = 0;
 800180e:	4bd2      	ldr	r3, [pc, #840]	; (8001b58 <time_setting+0x390>)
 8001810:	2200      	movs	r2, #0
 8001812:	805a      	strh	r2, [r3, #2]
 8001814:	4bd0      	ldr	r3, [pc, #832]	; (8001b58 <time_setting+0x390>)
 8001816:	2202      	movs	r2, #2
 8001818:	5e9a      	ldrsh	r2, [r3, r2]
 800181a:	4bcf      	ldr	r3, [pc, #828]	; (8001b58 <time_setting+0x390>)
 800181c:	801a      	strh	r2, [r3, #0]

			LCD_putsXY(6, 1, "< Time Setting >", set_tcolor, set_bcolor);
 800181e:	4bcf      	ldr	r3, [pc, #828]	; (8001b5c <time_setting+0x394>)
 8001820:	7819      	ldrb	r1, [r3, #0]
 8001822:	4bcb      	ldr	r3, [pc, #812]	; (8001b50 <time_setting+0x388>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	4ace      	ldr	r2, [pc, #824]	; (8001b60 <time_setting+0x398>)
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	000b      	movs	r3, r1
 800182c:	2101      	movs	r1, #1
 800182e:	2006      	movs	r0, #6
 8001830:	f7ff ff4a 	bl	80016c8 <LCD_putsXY>

			for(uint8_t i = 0 ; i < 9 ; i++){
 8001834:	23ce      	movs	r3, #206	; 0xce
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	e027      	b.n	800188e <time_setting+0xc6>
				if(sel == i){
 800183e:	23cf      	movs	r3, #207	; 0xcf
 8001840:	18fa      	adds	r2, r7, r3
 8001842:	20ce      	movs	r0, #206	; 0xce
 8001844:	183b      	adds	r3, r7, r0
 8001846:	7812      	ldrb	r2, [r2, #0]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d10c      	bne.n	8001868 <time_setting+0xa0>
					txt_color[i] = set_bcolor;
 800184e:	183b      	adds	r3, r7, r0
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	4abf      	ldr	r2, [pc, #764]	; (8001b50 <time_setting+0x388>)
 8001854:	7811      	ldrb	r1, [r2, #0]
 8001856:	4ac3      	ldr	r2, [pc, #780]	; (8001b64 <time_setting+0x39c>)
 8001858:	54d1      	strb	r1, [r2, r3]
					back_color[i] = set_tcolor;
 800185a:	183b      	adds	r3, r7, r0
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4abf      	ldr	r2, [pc, #764]	; (8001b5c <time_setting+0x394>)
 8001860:	7811      	ldrb	r1, [r2, #0]
 8001862:	4ac1      	ldr	r2, [pc, #772]	; (8001b68 <time_setting+0x3a0>)
 8001864:	54d1      	strb	r1, [r2, r3]
 8001866:	e00c      	b.n	8001882 <time_setting+0xba>
				}
				else{
					txt_color[i] = set_tcolor;
 8001868:	20ce      	movs	r0, #206	; 0xce
 800186a:	183b      	adds	r3, r7, r0
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4abb      	ldr	r2, [pc, #748]	; (8001b5c <time_setting+0x394>)
 8001870:	7811      	ldrb	r1, [r2, #0]
 8001872:	4abc      	ldr	r2, [pc, #752]	; (8001b64 <time_setting+0x39c>)
 8001874:	54d1      	strb	r1, [r2, r3]
					back_color[i] = set_bcolor;
 8001876:	183b      	adds	r3, r7, r0
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4ab5      	ldr	r2, [pc, #724]	; (8001b50 <time_setting+0x388>)
 800187c:	7811      	ldrb	r1, [r2, #0]
 800187e:	4aba      	ldr	r2, [pc, #744]	; (8001b68 <time_setting+0x3a0>)
 8001880:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0 ; i < 9 ; i++){
 8001882:	21ce      	movs	r1, #206	; 0xce
 8001884:	187b      	adds	r3, r7, r1
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	187b      	adds	r3, r7, r1
 800188a:	3201      	adds	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	23ce      	movs	r3, #206	; 0xce
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b08      	cmp	r3, #8
 8001896:	d9d2      	bls.n	800183e <time_setting+0x76>
				}
			}
		}
		sprintf(bf[0], "Y:%04d", 2000 + set_time.year);
 8001898:	24c0      	movs	r4, #192	; 0xc0
 800189a:	193b      	adds	r3, r7, r4
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	22fa      	movs	r2, #250	; 0xfa
 80018a0:	00d2      	lsls	r2, r2, #3
 80018a2:	189a      	adds	r2, r3, r2
 80018a4:	49b1      	ldr	r1, [pc, #708]	; (8001b6c <time_setting+0x3a4>)
 80018a6:	2524      	movs	r5, #36	; 0x24
 80018a8:	197b      	adds	r3, r7, r5
 80018aa:	0018      	movs	r0, r3
 80018ac:	f005 fc4a 	bl	8007144 <siprintf>
		sprintf(bf[1], "M:%02d", set_time.month);
 80018b0:	193b      	adds	r3, r7, r4
 80018b2:	785b      	ldrb	r3, [r3, #1]
 80018b4:	001a      	movs	r2, r3
 80018b6:	49ae      	ldr	r1, [pc, #696]	; (8001b70 <time_setting+0x3a8>)
 80018b8:	197b      	adds	r3, r7, r5
 80018ba:	3314      	adds	r3, #20
 80018bc:	0018      	movs	r0, r3
 80018be:	f005 fc41 	bl	8007144 <siprintf>
		if(set_time.day > lastDay[set_time.month - 1]) set_time.day = lastDay[set_time.month - 1];
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	789a      	ldrb	r2, [r3, #2]
 80018c6:	193b      	adds	r3, r7, r4
 80018c8:	785b      	ldrb	r3, [r3, #1]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	49a9      	ldr	r1, [pc, #676]	; (8001b74 <time_setting+0x3ac>)
 80018ce:	5ccb      	ldrb	r3, [r1, r3]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d906      	bls.n	80018e2 <time_setting+0x11a>
 80018d4:	193b      	adds	r3, r7, r4
 80018d6:	785b      	ldrb	r3, [r3, #1]
 80018d8:	3b01      	subs	r3, #1
 80018da:	4aa6      	ldr	r2, [pc, #664]	; (8001b74 <time_setting+0x3ac>)
 80018dc:	5cd2      	ldrb	r2, [r2, r3]
 80018de:	193b      	adds	r3, r7, r4
 80018e0:	709a      	strb	r2, [r3, #2]
		sprintf(bf[2], "D:%02d", set_time.day);
 80018e2:	25c0      	movs	r5, #192	; 0xc0
 80018e4:	197b      	adds	r3, r7, r5
 80018e6:	789b      	ldrb	r3, [r3, #2]
 80018e8:	001a      	movs	r2, r3
 80018ea:	49a3      	ldr	r1, [pc, #652]	; (8001b78 <time_setting+0x3b0>)
 80018ec:	2424      	movs	r4, #36	; 0x24
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	3328      	adds	r3, #40	; 0x28
 80018f2:	0018      	movs	r0, r3
 80018f4:	f005 fc26 	bl	8007144 <siprintf>
		sprintf(bf[3], "H:%02d", set_time.hour);
 80018f8:	197b      	adds	r3, r7, r5
 80018fa:	78db      	ldrb	r3, [r3, #3]
 80018fc:	001a      	movs	r2, r3
 80018fe:	499f      	ldr	r1, [pc, #636]	; (8001b7c <time_setting+0x3b4>)
 8001900:	193b      	adds	r3, r7, r4
 8001902:	333c      	adds	r3, #60	; 0x3c
 8001904:	0018      	movs	r0, r3
 8001906:	f005 fc1d 	bl	8007144 <siprintf>
		sprintf(bf[4], "m:%02d", set_time.min);
 800190a:	197b      	adds	r3, r7, r5
 800190c:	791b      	ldrb	r3, [r3, #4]
 800190e:	001a      	movs	r2, r3
 8001910:	499b      	ldr	r1, [pc, #620]	; (8001b80 <time_setting+0x3b8>)
 8001912:	193b      	adds	r3, r7, r4
 8001914:	3350      	adds	r3, #80	; 0x50
 8001916:	0018      	movs	r0, r3
 8001918:	f005 fc14 	bl	8007144 <siprintf>
		sprintf(bf[5], "S:%02d ", set_time.sec);
 800191c:	197b      	adds	r3, r7, r5
 800191e:	795b      	ldrb	r3, [r3, #5]
 8001920:	001a      	movs	r2, r3
 8001922:	4998      	ldr	r1, [pc, #608]	; (8001b84 <time_setting+0x3bc>)
 8001924:	193b      	adds	r3, r7, r4
 8001926:	3364      	adds	r3, #100	; 0x64
 8001928:	0018      	movs	r0, r3
 800192a:	f005 fc0b 	bl	8007144 <siprintf>

		char* array[9] = { bf[0], bf[1], bf[2], bf[3], bf[4], bf[5], "UP", "DOWN", "OK!" };
 800192e:	003b      	movs	r3, r7
 8001930:	0021      	movs	r1, r4
 8001932:	187a      	adds	r2, r7, r1
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	003b      	movs	r3, r7
 8001938:	187a      	adds	r2, r7, r1
 800193a:	3214      	adds	r2, #20
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	003b      	movs	r3, r7
 8001940:	187a      	adds	r2, r7, r1
 8001942:	3228      	adds	r2, #40	; 0x28
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	003b      	movs	r3, r7
 8001948:	187a      	adds	r2, r7, r1
 800194a:	323c      	adds	r2, #60	; 0x3c
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	003b      	movs	r3, r7
 8001950:	187a      	adds	r2, r7, r1
 8001952:	3250      	adds	r2, #80	; 0x50
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	003b      	movs	r3, r7
 8001958:	187a      	adds	r2, r7, r1
 800195a:	3264      	adds	r2, #100	; 0x64
 800195c:	615a      	str	r2, [r3, #20]
 800195e:	003b      	movs	r3, r7
 8001960:	4a89      	ldr	r2, [pc, #548]	; (8001b88 <time_setting+0x3c0>)
 8001962:	619a      	str	r2, [r3, #24]
 8001964:	003b      	movs	r3, r7
 8001966:	4a89      	ldr	r2, [pc, #548]	; (8001b8c <time_setting+0x3c4>)
 8001968:	61da      	str	r2, [r3, #28]
 800196a:	003b      	movs	r3, r7
 800196c:	4a88      	ldr	r2, [pc, #544]	; (8001b90 <time_setting+0x3c8>)
 800196e:	621a      	str	r2, [r3, #32]
		array_puts(pos, "", array, txt_color, back_color, 9);
 8001970:	4c7c      	ldr	r4, [pc, #496]	; (8001b64 <time_setting+0x39c>)
 8001972:	003a      	movs	r2, r7
 8001974:	4987      	ldr	r1, [pc, #540]	; (8001b94 <time_setting+0x3cc>)
 8001976:	239c      	movs	r3, #156	; 0x9c
 8001978:	18f8      	adds	r0, r7, r3
 800197a:	2309      	movs	r3, #9
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	4b7a      	ldr	r3, [pc, #488]	; (8001b68 <time_setting+0x3a0>)
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	0023      	movs	r3, r4
 8001984:	f7ff fece 	bl	8001724 <array_puts>
		LCD_putsXY(6, 1, "< Time Setting >", set_tcolor, set_bcolor);
 8001988:	4b74      	ldr	r3, [pc, #464]	; (8001b5c <time_setting+0x394>)
 800198a:	7819      	ldrb	r1, [r3, #0]
 800198c:	4b70      	ldr	r3, [pc, #448]	; (8001b50 <time_setting+0x388>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4a73      	ldr	r2, [pc, #460]	; (8001b60 <time_setting+0x398>)
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	000b      	movs	r3, r1
 8001996:	2101      	movs	r1, #1
 8001998:	2006      	movs	r0, #6
 800199a:	f7ff fe95 	bl	80016c8 <LCD_putsXY>

		if(touched()){
 800199e:	f7ff faed 	bl	8000f7c <touched>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d100      	bne.n	80019a8 <time_setting+0x1e0>
 80019a6:	e72b      	b.n	8001800 <time_setting+0x38>
			firF = 0;
 80019a8:	4b6a      	ldr	r3, [pc, #424]	; (8001b54 <time_setting+0x38c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
			if(coor_check(17, 17 + strlen("OK!"), 10, 11)) break;
 80019ae:	230b      	movs	r3, #11
 80019b0:	220a      	movs	r2, #10
 80019b2:	2114      	movs	r1, #20
 80019b4:	2011      	movs	r0, #17
 80019b6:	f7ff fdab 	bl	8001510 <coor_check>
 80019ba:	1e03      	subs	r3, r0, #0
 80019bc:	d013      	beq.n	80019e6 <time_setting+0x21e>
					}
				}
			}
		}
	}
	buzM = 1;
 80019be:	4b76      	ldr	r3, [pc, #472]	; (8001b98 <time_setting+0x3d0>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
	time = set_time;
 80019c4:	4b75      	ldr	r3, [pc, #468]	; (8001b9c <time_setting+0x3d4>)
 80019c6:	197a      	adds	r2, r7, r5
 80019c8:	6811      	ldr	r1, [r2, #0]
 80019ca:	6019      	str	r1, [r3, #0]
 80019cc:	8892      	ldrh	r2, [r2, #4]
 80019ce:	809a      	strh	r2, [r3, #4]
	firF = 0;
 80019d0:	4b60      	ldr	r3, [pc, #384]	; (8001b54 <time_setting+0x38c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
	time_set();
 80019d6:	f7ff fd63 	bl	80014a0 <time_set>
	LCD_Clear(set_bcolor);
 80019da:	4b5d      	ldr	r3, [pc, #372]	; (8001b50 <time_setting+0x388>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	0018      	movs	r0, r3
 80019e0:	f7ff fde4 	bl	80015ac <LCD_Clear>
}
 80019e4:	e1ab      	b.n	8001d3e <time_setting+0x576>
			else if(coor_check(5, 5 + strlen(bf[0]), 4, 5)) sel = 0;
 80019e6:	2324      	movs	r3, #36	; 0x24
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	0018      	movs	r0, r3
 80019ec:	f7fe fb8c 	bl	8000108 <strlen>
 80019f0:	0003      	movs	r3, r0
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3305      	adds	r3, #5
 80019f6:	b299      	uxth	r1, r3
 80019f8:	2305      	movs	r3, #5
 80019fa:	2204      	movs	r2, #4
 80019fc:	2005      	movs	r0, #5
 80019fe:	f7ff fd87 	bl	8001510 <coor_check>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d004      	beq.n	8001a10 <time_setting+0x248>
 8001a06:	23cf      	movs	r3, #207	; 0xcf
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	e6f7      	b.n	8001800 <time_setting+0x38>
			else if(coor_check(10, 10 + strlen(bf[1]), 4, 5)) sel = 1;
 8001a10:	2324      	movs	r3, #36	; 0x24
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	3314      	adds	r3, #20
 8001a16:	0018      	movs	r0, r3
 8001a18:	f7fe fb76 	bl	8000108 <strlen>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	330a      	adds	r3, #10
 8001a22:	b299      	uxth	r1, r3
 8001a24:	2305      	movs	r3, #5
 8001a26:	2204      	movs	r2, #4
 8001a28:	200a      	movs	r0, #10
 8001a2a:	f7ff fd71 	bl	8001510 <coor_check>
 8001a2e:	1e03      	subs	r3, r0, #0
 8001a30:	d004      	beq.n	8001a3c <time_setting+0x274>
 8001a32:	23cf      	movs	r3, #207	; 0xcf
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	e6e1      	b.n	8001800 <time_setting+0x38>
			else if(coor_check(14, 14 + strlen(bf[2]), 4, 5)) sel = 2;
 8001a3c:	2324      	movs	r3, #36	; 0x24
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	3328      	adds	r3, #40	; 0x28
 8001a42:	0018      	movs	r0, r3
 8001a44:	f7fe fb60 	bl	8000108 <strlen>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	330e      	adds	r3, #14
 8001a4e:	b299      	uxth	r1, r3
 8001a50:	2305      	movs	r3, #5
 8001a52:	2204      	movs	r2, #4
 8001a54:	200e      	movs	r0, #14
 8001a56:	f7ff fd5b 	bl	8001510 <coor_check>
 8001a5a:	1e03      	subs	r3, r0, #0
 8001a5c:	d004      	beq.n	8001a68 <time_setting+0x2a0>
 8001a5e:	23cf      	movs	r3, #207	; 0xcf
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	2202      	movs	r2, #2
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	e6cb      	b.n	8001800 <time_setting+0x38>
			else if(coor_check(6, 7 + strlen(bf[3]), 5, 6)) sel = 3;
 8001a68:	2324      	movs	r3, #36	; 0x24
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	333c      	adds	r3, #60	; 0x3c
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7fe fb4a 	bl	8000108 <strlen>
 8001a74:	0003      	movs	r3, r0
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3307      	adds	r3, #7
 8001a7a:	b299      	uxth	r1, r3
 8001a7c:	2306      	movs	r3, #6
 8001a7e:	2205      	movs	r2, #5
 8001a80:	2006      	movs	r0, #6
 8001a82:	f7ff fd45 	bl	8001510 <coor_check>
 8001a86:	1e03      	subs	r3, r0, #0
 8001a88:	d004      	beq.n	8001a94 <time_setting+0x2cc>
 8001a8a:	23cf      	movs	r3, #207	; 0xcf
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	2203      	movs	r2, #3
 8001a90:	701a      	strb	r2, [r3, #0]
 8001a92:	e6b5      	b.n	8001800 <time_setting+0x38>
			else if(coor_check(10, 10 + strlen(bf[4]), 5, 6)) sel = 4;
 8001a94:	2324      	movs	r3, #36	; 0x24
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	3350      	adds	r3, #80	; 0x50
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f7fe fb34 	bl	8000108 <strlen>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	330a      	adds	r3, #10
 8001aa6:	b299      	uxth	r1, r3
 8001aa8:	2306      	movs	r3, #6
 8001aaa:	2205      	movs	r2, #5
 8001aac:	200a      	movs	r0, #10
 8001aae:	f7ff fd2f 	bl	8001510 <coor_check>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d004      	beq.n	8001ac0 <time_setting+0x2f8>
 8001ab6:	23cf      	movs	r3, #207	; 0xcf
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	2204      	movs	r2, #4
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e69f      	b.n	8001800 <time_setting+0x38>
			else if(coor_check(14, 14 + strlen(bf[5]), 5, 6)) sel = 5;
 8001ac0:	2324      	movs	r3, #36	; 0x24
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	3364      	adds	r3, #100	; 0x64
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7fe fb1e 	bl	8000108 <strlen>
 8001acc:	0003      	movs	r3, r0
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	330e      	adds	r3, #14
 8001ad2:	b299      	uxth	r1, r3
 8001ad4:	2306      	movs	r3, #6
 8001ad6:	2205      	movs	r2, #5
 8001ad8:	200e      	movs	r0, #14
 8001ada:	f7ff fd19 	bl	8001510 <coor_check>
 8001ade:	1e03      	subs	r3, r0, #0
 8001ae0:	d004      	beq.n	8001aec <time_setting+0x324>
 8001ae2:	23cf      	movs	r3, #207	; 0xcf
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	2205      	movs	r2, #5
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	e689      	b.n	8001800 <time_setting+0x38>
				uint32_t now_tick = HAL_GetTick();
 8001aec:	f001 fbe2 	bl	80032b4 <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	21c8      	movs	r1, #200	; 0xc8
 8001af4:	187a      	adds	r2, r7, r1
 8001af6:	6013      	str	r3, [r2, #0]
				if(now_tick - frev_tick > 500){
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <time_setting+0x3d8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	187a      	adds	r2, r7, r1
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	1ad2      	subs	r2, r2, r3
 8001b02:	23fa      	movs	r3, #250	; 0xfa
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d800      	bhi.n	8001b0c <time_setting+0x344>
 8001b0a:	e679      	b.n	8001800 <time_setting+0x38>
					frev_tick = now_tick;
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <time_setting+0x3d8>)
 8001b0e:	187a      	adds	r2, r7, r1
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	601a      	str	r2, [r3, #0]
					if(coor_check(7, 7 + strlen("UP"), 7, 9)){
 8001b14:	2309      	movs	r3, #9
 8001b16:	2207      	movs	r2, #7
 8001b18:	2109      	movs	r1, #9
 8001b1a:	2007      	movs	r0, #7
 8001b1c:	f7ff fcf8 	bl	8001510 <coor_check>
 8001b20:	1e03      	subs	r3, r0, #0
 8001b22:	d100      	bne.n	8001b26 <time_setting+0x35e>
 8001b24:	e09a      	b.n	8001c5c <time_setting+0x494>
						if(sel == 0 && set_time.year < 99) set_time.year++;
 8001b26:	23cf      	movs	r3, #207	; 0xcf
 8001b28:	18fb      	adds	r3, r7, r3
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d139      	bne.n	8001ba4 <time_setting+0x3dc>
 8001b30:	21c0      	movs	r1, #192	; 0xc0
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b62      	cmp	r3, #98	; 0x62
 8001b38:	d834      	bhi.n	8001ba4 <time_setting+0x3dc>
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	e0f9      	b.n	8001d3c <time_setting+0x574>
 8001b48:	08007a74 	.word	0x08007a74
 8001b4c:	08007a7c 	.word	0x08007a7c
 8001b50:	20000019 	.word	0x20000019
 8001b54:	200002cb 	.word	0x200002cb
 8001b58:	200002c4 	.word	0x200002c4
 8001b5c:	200002c1 	.word	0x200002c1
 8001b60:	08007a1c 	.word	0x08007a1c
 8001b64:	200002b0 	.word	0x200002b0
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	08007a30 	.word	0x08007a30
 8001b70:	08007a38 	.word	0x08007a38
 8001b74:	08007c38 	.word	0x08007c38
 8001b78:	08007a40 	.word	0x08007a40
 8001b7c:	08007a48 	.word	0x08007a48
 8001b80:	08007a50 	.word	0x08007a50
 8001b84:	08007a58 	.word	0x08007a58
 8001b88:	08007a60 	.word	0x08007a60
 8001b8c:	08007a64 	.word	0x08007a64
 8001b90:	08007a6c 	.word	0x08007a6c
 8001b94:	08007a70 	.word	0x08007a70
 8001b98:	200002cc 	.word	0x200002cc
 8001b9c:	2000001c 	.word	0x2000001c
 8001ba0:	200002dc 	.word	0x200002dc
						else if(sel == 1 && set_time.month < 12) set_time.month++;
 8001ba4:	23cf      	movs	r3, #207	; 0xcf
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d10b      	bne.n	8001bc6 <time_setting+0x3fe>
 8001bae:	21c0      	movs	r1, #192	; 0xc0
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	785b      	ldrb	r3, [r3, #1]
 8001bb4:	2b0b      	cmp	r3, #11
 8001bb6:	d806      	bhi.n	8001bc6 <time_setting+0x3fe>
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	785b      	ldrb	r3, [r3, #1]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	705a      	strb	r2, [r3, #1]
 8001bc4:	e0ba      	b.n	8001d3c <time_setting+0x574>
						else if(sel == 2 && set_time.day < lastDay[set_time.month - 1]) set_time.day++;
 8001bc6:	23cf      	movs	r3, #207	; 0xcf
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d110      	bne.n	8001bf2 <time_setting+0x42a>
 8001bd0:	20c0      	movs	r0, #192	; 0xc0
 8001bd2:	183b      	adds	r3, r7, r0
 8001bd4:	789a      	ldrb	r2, [r3, #2]
 8001bd6:	183b      	adds	r3, r7, r0
 8001bd8:	785b      	ldrb	r3, [r3, #1]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	4959      	ldr	r1, [pc, #356]	; (8001d44 <time_setting+0x57c>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d206      	bcs.n	8001bf2 <time_setting+0x42a>
 8001be4:	183b      	adds	r3, r7, r0
 8001be6:	789b      	ldrb	r3, [r3, #2]
 8001be8:	3301      	adds	r3, #1
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	183b      	adds	r3, r7, r0
 8001bee:	709a      	strb	r2, [r3, #2]
 8001bf0:	e0a4      	b.n	8001d3c <time_setting+0x574>
						else if(sel == 3 && set_time.hour < 23) set_time.hour++;
 8001bf2:	23cf      	movs	r3, #207	; 0xcf
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d10b      	bne.n	8001c14 <time_setting+0x44c>
 8001bfc:	21c0      	movs	r1, #192	; 0xc0
 8001bfe:	187b      	adds	r3, r7, r1
 8001c00:	78db      	ldrb	r3, [r3, #3]
 8001c02:	2b16      	cmp	r3, #22
 8001c04:	d806      	bhi.n	8001c14 <time_setting+0x44c>
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	78db      	ldrb	r3, [r3, #3]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	70da      	strb	r2, [r3, #3]
 8001c12:	e093      	b.n	8001d3c <time_setting+0x574>
						else if(sel == 4 && set_time.min < 59) set_time.min++;
 8001c14:	23cf      	movs	r3, #207	; 0xcf
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d10b      	bne.n	8001c36 <time_setting+0x46e>
 8001c1e:	21c0      	movs	r1, #192	; 0xc0
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	791b      	ldrb	r3, [r3, #4]
 8001c24:	2b3a      	cmp	r3, #58	; 0x3a
 8001c26:	d806      	bhi.n	8001c36 <time_setting+0x46e>
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	791b      	ldrb	r3, [r3, #4]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	711a      	strb	r2, [r3, #4]
 8001c34:	e082      	b.n	8001d3c <time_setting+0x574>
						else if(sel == 5 && set_time.sec < 59) set_time.sec++;
 8001c36:	23cf      	movs	r3, #207	; 0xcf
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d000      	beq.n	8001c42 <time_setting+0x47a>
 8001c40:	e5de      	b.n	8001800 <time_setting+0x38>
 8001c42:	21c0      	movs	r1, #192	; 0xc0
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	795b      	ldrb	r3, [r3, #5]
 8001c48:	2b3a      	cmp	r3, #58	; 0x3a
 8001c4a:	d900      	bls.n	8001c4e <time_setting+0x486>
 8001c4c:	e5d8      	b.n	8001800 <time_setting+0x38>
 8001c4e:	187b      	adds	r3, r7, r1
 8001c50:	795b      	ldrb	r3, [r3, #5]
 8001c52:	3301      	adds	r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	187b      	adds	r3, r7, r1
 8001c58:	715a      	strb	r2, [r3, #5]
 8001c5a:	e5d1      	b.n	8001800 <time_setting+0x38>
					else if(coor_check(12, 12 + strlen("DOWN"), 7, 9)){
 8001c5c:	2309      	movs	r3, #9
 8001c5e:	2207      	movs	r2, #7
 8001c60:	2110      	movs	r1, #16
 8001c62:	200c      	movs	r0, #12
 8001c64:	f7ff fc54 	bl	8001510 <coor_check>
 8001c68:	1e03      	subs	r3, r0, #0
 8001c6a:	d100      	bne.n	8001c6e <time_setting+0x4a6>
 8001c6c:	e5c8      	b.n	8001800 <time_setting+0x38>
						if(sel == 0 && set_time.year > 0) set_time.year--;
 8001c6e:	23cf      	movs	r3, #207	; 0xcf
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10b      	bne.n	8001c90 <time_setting+0x4c8>
 8001c78:	21c0      	movs	r1, #192	; 0xc0
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d006      	beq.n	8001c90 <time_setting+0x4c8>
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	701a      	strb	r2, [r3, #0]
 8001c8e:	e055      	b.n	8001d3c <time_setting+0x574>
						else if(sel == 1 && set_time.month > 1) set_time.month--;
 8001c90:	23cf      	movs	r3, #207	; 0xcf
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d10b      	bne.n	8001cb2 <time_setting+0x4ea>
 8001c9a:	21c0      	movs	r1, #192	; 0xc0
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	785b      	ldrb	r3, [r3, #1]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d906      	bls.n	8001cb2 <time_setting+0x4ea>
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	785b      	ldrb	r3, [r3, #1]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	705a      	strb	r2, [r3, #1]
 8001cb0:	e044      	b.n	8001d3c <time_setting+0x574>
						else if(sel == 2 && set_time.day > 1) set_time.day--;
 8001cb2:	23cf      	movs	r3, #207	; 0xcf
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d10b      	bne.n	8001cd4 <time_setting+0x50c>
 8001cbc:	21c0      	movs	r1, #192	; 0xc0
 8001cbe:	187b      	adds	r3, r7, r1
 8001cc0:	789b      	ldrb	r3, [r3, #2]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d906      	bls.n	8001cd4 <time_setting+0x50c>
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	789b      	ldrb	r3, [r3, #2]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	187b      	adds	r3, r7, r1
 8001cd0:	709a      	strb	r2, [r3, #2]
 8001cd2:	e033      	b.n	8001d3c <time_setting+0x574>
						else if(sel == 3 && set_time.hour > 0) set_time.hour--;
 8001cd4:	23cf      	movs	r3, #207	; 0xcf
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d10b      	bne.n	8001cf6 <time_setting+0x52e>
 8001cde:	21c0      	movs	r1, #192	; 0xc0
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	78db      	ldrb	r3, [r3, #3]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <time_setting+0x52e>
 8001ce8:	187b      	adds	r3, r7, r1
 8001cea:	78db      	ldrb	r3, [r3, #3]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	70da      	strb	r2, [r3, #3]
 8001cf4:	e022      	b.n	8001d3c <time_setting+0x574>
						else if(sel == 4 && set_time.min > 0) set_time.min--;
 8001cf6:	23cf      	movs	r3, #207	; 0xcf
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d10b      	bne.n	8001d18 <time_setting+0x550>
 8001d00:	21c0      	movs	r1, #192	; 0xc0
 8001d02:	187b      	adds	r3, r7, r1
 8001d04:	791b      	ldrb	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d006      	beq.n	8001d18 <time_setting+0x550>
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	791b      	ldrb	r3, [r3, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	711a      	strb	r2, [r3, #4]
 8001d16:	e011      	b.n	8001d3c <time_setting+0x574>
						else if(sel == 5 && set_time.sec > 0) set_time.sec--;
 8001d18:	23cf      	movs	r3, #207	; 0xcf
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d000      	beq.n	8001d24 <time_setting+0x55c>
 8001d22:	e56d      	b.n	8001800 <time_setting+0x38>
 8001d24:	21c0      	movs	r1, #192	; 0xc0
 8001d26:	187b      	adds	r3, r7, r1
 8001d28:	795b      	ldrb	r3, [r3, #5]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d100      	bne.n	8001d30 <time_setting+0x568>
 8001d2e:	e567      	b.n	8001800 <time_setting+0x38>
 8001d30:	187b      	adds	r3, r7, r1
 8001d32:	795b      	ldrb	r3, [r3, #5]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	187b      	adds	r3, r7, r1
 8001d3a:	715a      	strb	r2, [r3, #5]
	while(1){
 8001d3c:	e560      	b.n	8001800 <time_setting+0x38>
}
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b034      	add	sp, #208	; 0xd0
 8001d42:	bdb0      	pop	{r4, r5, r7, pc}
 8001d44:	08007c38 	.word	0x08007c38

08001d48 <start>:

void start(void){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af02      	add	r7, sp, #8
	LCD_Clear(set_bcolor);
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <start+0x50>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff fc2a 	bl	80015ac <LCD_Clear>

	LCD_putsXY(3, 4, "< Skill Competition Task 3 >", set_tcolor, set_bcolor);
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <start+0x54>)
 8001d5a:	7819      	ldrb	r1, [r3, #0]
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <start+0x50>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4a0f      	ldr	r2, [pc, #60]	; (8001da0 <start+0x58>)
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	000b      	movs	r3, r1
 8001d66:	2104      	movs	r1, #4
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f7ff fcad 	bl	80016c8 <LCD_putsXY>
	LCD_putsXY(7, 6, "Audio Interface", set_tcolor, set_bcolor);
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <start+0x54>)
 8001d70:	7819      	ldrb	r1, [r3, #0]
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <start+0x50>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <start+0x5c>)
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	000b      	movs	r3, r1
 8001d7c:	2106      	movs	r1, #6
 8001d7e:	2007      	movs	r0, #7
 8001d80:	f7ff fca2 	bl	80016c8 <LCD_putsXY>
	HAL_Delay(2000);
 8001d84:	23fa      	movs	r3, #250	; 0xfa
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f001 fa9d 	bl	80032c8 <HAL_Delay>
	time_setting();
 8001d8e:	f7ff fd1b 	bl	80017c8 <time_setting>
}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000019 	.word	0x20000019
 8001d9c:	200002c1 	.word	0x200002c1
 8001da0:	08007aa0 	.word	0x08007aa0
 8001da4:	08007ac0 	.word	0x08007ac0

08001da8 <main_menu>:

void main_menu(void){
 8001da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001daa:	b093      	sub	sp, #76	; 0x4c
 8001dac:	af04      	add	r7, sp, #16
	if(!firF){
 8001dae:	4b5b      	ldr	r3, [pc, #364]	; (8001f1c <main_menu+0x174>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d126      	bne.n	8001e04 <main_menu+0x5c>
		firF = 1;
 8001db6:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <main_menu+0x174>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
		curXY.x = curXY.y = 0;
 8001dbc:	4b58      	ldr	r3, [pc, #352]	; (8001f20 <main_menu+0x178>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	805a      	strh	r2, [r3, #2]
 8001dc2:	4b57      	ldr	r3, [pc, #348]	; (8001f20 <main_menu+0x178>)
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	5e9a      	ldrsh	r2, [r3, r2]
 8001dc8:	4b55      	ldr	r3, [pc, #340]	; (8001f20 <main_menu+0x178>)
 8001dca:	801a      	strh	r2, [r3, #0]

		for(uint8_t i = 0 ; i < 17 ; i++){
 8001dcc:	2337      	movs	r3, #55	; 0x37
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e011      	b.n	8001dfa <main_menu+0x52>
			txt_color[i] = set_tcolor;
 8001dd6:	2037      	movs	r0, #55	; 0x37
 8001dd8:	183b      	adds	r3, r7, r0
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4a51      	ldr	r2, [pc, #324]	; (8001f24 <main_menu+0x17c>)
 8001dde:	7811      	ldrb	r1, [r2, #0]
 8001de0:	4a51      	ldr	r2, [pc, #324]	; (8001f28 <main_menu+0x180>)
 8001de2:	54d1      	strb	r1, [r2, r3]
			back_color[i] = set_bcolor;
 8001de4:	183b      	adds	r3, r7, r0
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4a50      	ldr	r2, [pc, #320]	; (8001f2c <main_menu+0x184>)
 8001dea:	7811      	ldrb	r1, [r2, #0]
 8001dec:	4a50      	ldr	r2, [pc, #320]	; (8001f30 <main_menu+0x188>)
 8001dee:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0 ; i < 17 ; i++){
 8001df0:	183b      	adds	r3, r7, r0
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	183b      	adds	r3, r7, r0
 8001df6:	3201      	adds	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	2337      	movs	r3, #55	; 0x37
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b10      	cmp	r3, #16
 8001e02:	d9e8      	bls.n	8001dd6 <main_menu+0x2e>
		}
	}
	time_get();
 8001e04:	f7ff fb66 	bl	80014d4 <time_get>
	char bf[20];
	POS pos[4] = {{0, 1}, {2, 4}, {2, 7}};
 8001e08:	2410      	movs	r4, #16
 8001e0a:	193b      	adds	r3, r7, r4
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	2310      	movs	r3, #16
 8001e10:	001a      	movs	r2, r3
 8001e12:	2100      	movs	r1, #0
 8001e14:	f005 f98d 	bl	8007132 <memset>
 8001e18:	0021      	movs	r1, r4
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	805a      	strh	r2, [r3, #2]
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	2202      	movs	r2, #2
 8001e24:	809a      	strh	r2, [r3, #4]
 8001e26:	187b      	adds	r3, r7, r1
 8001e28:	2204      	movs	r2, #4
 8001e2a:	80da      	strh	r2, [r3, #6]
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	2202      	movs	r2, #2
 8001e30:	811a      	strh	r2, [r3, #8]
 8001e32:	187b      	adds	r3, r7, r1
 8001e34:	2207      	movs	r2, #7
 8001e36:	815a      	strh	r2, [r3, #10]
	sprintf(bf, "%04d.%02d.%02d %02d:%02d:%02d", 2000 + time.year, time.month, time.day, time.hour, time.min, time.sec);
 8001e38:	4b3e      	ldr	r3, [pc, #248]	; (8001f34 <main_menu+0x18c>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	22fa      	movs	r2, #250	; 0xfa
 8001e3e:	00d2      	lsls	r2, r2, #3
 8001e40:	189a      	adds	r2, r3, r2
 8001e42:	4b3c      	ldr	r3, [pc, #240]	; (8001f34 <main_menu+0x18c>)
 8001e44:	785b      	ldrb	r3, [r3, #1]
 8001e46:	469c      	mov	ip, r3
 8001e48:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <main_menu+0x18c>)
 8001e4a:	789b      	ldrb	r3, [r3, #2]
 8001e4c:	001c      	movs	r4, r3
 8001e4e:	4b39      	ldr	r3, [pc, #228]	; (8001f34 <main_menu+0x18c>)
 8001e50:	78db      	ldrb	r3, [r3, #3]
 8001e52:	001d      	movs	r5, r3
 8001e54:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <main_menu+0x18c>)
 8001e56:	791b      	ldrb	r3, [r3, #4]
 8001e58:	001e      	movs	r6, r3
 8001e5a:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <main_menu+0x18c>)
 8001e5c:	795b      	ldrb	r3, [r3, #5]
 8001e5e:	4936      	ldr	r1, [pc, #216]	; (8001f38 <main_menu+0x190>)
 8001e60:	2020      	movs	r0, #32
 8001e62:	1838      	adds	r0, r7, r0
 8001e64:	9303      	str	r3, [sp, #12]
 8001e66:	9602      	str	r6, [sp, #8]
 8001e68:	9501      	str	r5, [sp, #4]
 8001e6a:	9400      	str	r4, [sp, #0]
 8001e6c:	4663      	mov	r3, ip
 8001e6e:	f005 f969 	bl	8007144 <siprintf>

	char* array[3] = { bf, "1. Sound modulation", "2. Color Setting" };
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	2020      	movs	r0, #32
 8001e76:	183a      	adds	r2, r7, r0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	4a2f      	ldr	r2, [pc, #188]	; (8001f3c <main_menu+0x194>)
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4a2f      	ldr	r2, [pc, #188]	; (8001f40 <main_menu+0x198>)
 8001e84:	609a      	str	r2, [r3, #8]
	array_puts(pos, ">Main", array, txt_color, back_color, 3);
 8001e86:	4c28      	ldr	r4, [pc, #160]	; (8001f28 <main_menu+0x180>)
 8001e88:	1d3a      	adds	r2, r7, #4
 8001e8a:	492e      	ldr	r1, [pc, #184]	; (8001f44 <main_menu+0x19c>)
 8001e8c:	2310      	movs	r3, #16
 8001e8e:	18f8      	adds	r0, r7, r3
 8001e90:	2303      	movs	r3, #3
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <main_menu+0x188>)
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	0023      	movs	r3, r4
 8001e9a:	f7ff fc43 	bl	8001724 <array_puts>

	if(curXY.x > 0 || curXY.y > 0){
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <main_menu+0x178>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	5e9b      	ldrsh	r3, [r3, r2]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	dc04      	bgt.n	8001eb2 <main_menu+0x10a>
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <main_menu+0x178>)
 8001eaa:	2202      	movs	r2, #2
 8001eac:	5e9b      	ldrsh	r3, [r3, r2]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	dd30      	ble.n	8001f14 <main_menu+0x16c>
		if(coor_check(2, 2 + strlen("1. Sound modulation") - 6, 4, 4 + 1)){
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f7ff fb29 	bl	8001510 <coor_check>
 8001ebe:	1e03      	subs	r3, r0, #0
 8001ec0:	d005      	beq.n	8001ece <main_menu+0x126>
			reset_value();
 8001ec2:	f7ff fb83 	bl	80015cc <reset_value>
			modeF = 1;
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <main_menu+0x1a0>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
			reset_value();
			modeF = 2;
		}
		else if(coor_check(0, strlen(bf) - 6, 1, 1 + 1)) { firF = 0; time_setting(); }
	}
}
 8001ecc:	e022      	b.n	8001f14 <main_menu+0x16c>
		else if(coor_check(2, 2 + strlen("2. Color Setting") - 6, 7, 7 + 1)){
 8001ece:	2308      	movs	r3, #8
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	210c      	movs	r1, #12
 8001ed4:	2002      	movs	r0, #2
 8001ed6:	f7ff fb1b 	bl	8001510 <coor_check>
 8001eda:	1e03      	subs	r3, r0, #0
 8001edc:	d005      	beq.n	8001eea <main_menu+0x142>
			reset_value();
 8001ede:	f7ff fb75 	bl	80015cc <reset_value>
			modeF = 2;
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <main_menu+0x1a0>)
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	701a      	strb	r2, [r3, #0]
}
 8001ee8:	e014      	b.n	8001f14 <main_menu+0x16c>
		else if(coor_check(0, strlen(bf) - 6, 1, 1 + 1)) { firF = 0; time_setting(); }
 8001eea:	2320      	movs	r3, #32
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f7fe f90a 	bl	8000108 <strlen>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b06      	subs	r3, #6
 8001efa:	b299      	uxth	r1, r3
 8001efc:	2302      	movs	r3, #2
 8001efe:	2201      	movs	r2, #1
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff fb05 	bl	8001510 <coor_check>
 8001f06:	1e03      	subs	r3, r0, #0
 8001f08:	d004      	beq.n	8001f14 <main_menu+0x16c>
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <main_menu+0x174>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	f7ff fc5a 	bl	80017c8 <time_setting>
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b00f      	add	sp, #60	; 0x3c
 8001f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1c:	200002cb 	.word	0x200002cb
 8001f20:	200002c4 	.word	0x200002c4
 8001f24:	200002c1 	.word	0x200002c1
 8001f28:	200002b0 	.word	0x200002b0
 8001f2c:	20000019 	.word	0x20000019
 8001f30:	20000008 	.word	0x20000008
 8001f34:	2000001c 	.word	0x2000001c
 8001f38:	08007ad0 	.word	0x08007ad0
 8001f3c:	08007af0 	.word	0x08007af0
 8001f40:	08007b04 	.word	0x08007b04
 8001f44:	08007b18 	.word	0x08007b18
 8001f48:	200002ca 	.word	0x200002ca

08001f4c <modulation_mode>:

void modulation_mode(void){
 8001f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4e:	b0a7      	sub	sp, #156	; 0x9c
 8001f50:	af04      	add	r7, sp, #16
	static uint16_t coor_volume = 135, coor_pitch = 135;

	if(!firF){
 8001f52:	4bc8      	ldr	r3, [pc, #800]	; (8002274 <modulation_mode+0x328>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d134      	bne.n	8001fc4 <modulation_mode+0x78>
		firF = 1;
 8001f5a:	4bc6      	ldr	r3, [pc, #792]	; (8002274 <modulation_mode+0x328>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0 ; i < 17 ; i++){
 8001f60:	2387      	movs	r3, #135	; 0x87
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e011      	b.n	8001f8e <modulation_mode+0x42>
			txt_color[i] = set_tcolor;
 8001f6a:	2087      	movs	r0, #135	; 0x87
 8001f6c:	183b      	adds	r3, r7, r0
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4ac1      	ldr	r2, [pc, #772]	; (8002278 <modulation_mode+0x32c>)
 8001f72:	7811      	ldrb	r1, [r2, #0]
 8001f74:	4ac1      	ldr	r2, [pc, #772]	; (800227c <modulation_mode+0x330>)
 8001f76:	54d1      	strb	r1, [r2, r3]
			back_color[i] = set_bcolor;
 8001f78:	183b      	adds	r3, r7, r0
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4ac0      	ldr	r2, [pc, #768]	; (8002280 <modulation_mode+0x334>)
 8001f7e:	7811      	ldrb	r1, [r2, #0]
 8001f80:	4ac0      	ldr	r2, [pc, #768]	; (8002284 <modulation_mode+0x338>)
 8001f82:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0 ; i < 17 ; i++){
 8001f84:	183b      	adds	r3, r7, r0
 8001f86:	781a      	ldrb	r2, [r3, #0]
 8001f88:	183b      	adds	r3, r7, r0
 8001f8a:	3201      	adds	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	2387      	movs	r3, #135	; 0x87
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b10      	cmp	r3, #16
 8001f96:	d9e8      	bls.n	8001f6a <modulation_mode+0x1e>
		}
		txt_color[3] = !dac_start ? set_tcolor : set_bcolor;
 8001f98:	4bbb      	ldr	r3, [pc, #748]	; (8002288 <modulation_mode+0x33c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <modulation_mode+0x5a>
 8001fa0:	4bb5      	ldr	r3, [pc, #724]	; (8002278 <modulation_mode+0x32c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	e001      	b.n	8001faa <modulation_mode+0x5e>
 8001fa6:	4bb6      	ldr	r3, [pc, #728]	; (8002280 <modulation_mode+0x334>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	4ab4      	ldr	r2, [pc, #720]	; (800227c <modulation_mode+0x330>)
 8001fac:	70d3      	strb	r3, [r2, #3]
		back_color[3] = !dac_start ? set_bcolor : set_tcolor;
 8001fae:	4bb6      	ldr	r3, [pc, #728]	; (8002288 <modulation_mode+0x33c>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d102      	bne.n	8001fbc <modulation_mode+0x70>
 8001fb6:	4bb2      	ldr	r3, [pc, #712]	; (8002280 <modulation_mode+0x334>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	e001      	b.n	8001fc0 <modulation_mode+0x74>
 8001fbc:	4bae      	ldr	r3, [pc, #696]	; (8002278 <modulation_mode+0x32c>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4ab0      	ldr	r2, [pc, #704]	; (8002284 <modulation_mode+0x338>)
 8001fc2:	70d3      	strb	r3, [r2, #3]
	}

	for(uint8_t i = 0 ; i <= 10 ; i++){
 8001fc4:	2386      	movs	r3, #134	; 0x86
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	e022      	b.n	8002014 <modulation_mode+0xc8>
		if(coor_pitch >= 60 + (14 * i) && coor_pitch <= 74 + (14 * i)){
 8001fce:	2086      	movs	r0, #134	; 0x86
 8001fd0:	183b      	adds	r3, r7, r0
 8001fd2:	781a      	ldrb	r2, [r3, #0]
 8001fd4:	0013      	movs	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	333b      	adds	r3, #59	; 0x3b
 8001fde:	4aab      	ldr	r2, [pc, #684]	; (800228c <modulation_mode+0x340>)
 8001fe0:	8812      	ldrh	r2, [r2, #0]
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	da10      	bge.n	8002008 <modulation_mode+0xbc>
 8001fe6:	4ba9      	ldr	r3, [pc, #676]	; (800228c <modulation_mode+0x340>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	0019      	movs	r1, r3
 8001fec:	183b      	adds	r3, r7, r0
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	334a      	adds	r3, #74	; 0x4a
 8001ffa:	4299      	cmp	r1, r3
 8001ffc:	dc04      	bgt.n	8002008 <modulation_mode+0xbc>
			pitch_state = i;
 8001ffe:	4ba4      	ldr	r3, [pc, #656]	; (8002290 <modulation_mode+0x344>)
 8002000:	183a      	adds	r2, r7, r0
 8002002:	7812      	ldrb	r2, [r2, #0]
 8002004:	701a      	strb	r2, [r3, #0]
			break;
 8002006:	e00a      	b.n	800201e <modulation_mode+0xd2>
	for(uint8_t i = 0 ; i <= 10 ; i++){
 8002008:	2186      	movs	r1, #134	; 0x86
 800200a:	187b      	adds	r3, r7, r1
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	187b      	adds	r3, r7, r1
 8002010:	3201      	adds	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	2386      	movs	r3, #134	; 0x86
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b0a      	cmp	r3, #10
 800201c:	d9d7      	bls.n	8001fce <modulation_mode+0x82>
		}
	}

	max_volume = coor_volume - 60;
 800201e:	4b9d      	ldr	r3, [pc, #628]	; (8002294 <modulation_mode+0x348>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	3b3c      	subs	r3, #60	; 0x3c
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b9c      	ldr	r3, [pc, #624]	; (8002298 <modulation_mode+0x34c>)
 8002028:	801a      	strh	r2, [r3, #0]
	if(max_volume > 100) max_volume = 100;
 800202a:	4b9b      	ldr	r3, [pc, #620]	; (8002298 <modulation_mode+0x34c>)
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d902      	bls.n	8002038 <modulation_mode+0xec>
 8002032:	4b99      	ldr	r3, [pc, #612]	; (8002298 <modulation_mode+0x34c>)
 8002034:	2264      	movs	r2, #100	; 0x64
 8002036:	801a      	strh	r2, [r3, #0]

	time_get();
 8002038:	f7ff fa4c 	bl	80014d4 <time_get>
	char bf[3][20];
	POS pos[6] = {{0, 1}, {15, 1}, {1, 4}, {5, 4}, {1, 6}, {1, 8}};
 800203c:	232c      	movs	r3, #44	; 0x2c
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	4a96      	ldr	r2, [pc, #600]	; (800229c <modulation_mode+0x350>)
 8002042:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002044:	c313      	stmia	r3!, {r0, r1, r4}
 8002046:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002048:	c313      	stmia	r3!, {r0, r1, r4}
	sprintf(bf[0], "%04d.%02d.%02d %02d:%02d:%02d", 2000 + time.year, time.month, time.day, time.hour, time.min, time.sec);
 800204a:	4b95      	ldr	r3, [pc, #596]	; (80022a0 <modulation_mode+0x354>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	22fa      	movs	r2, #250	; 0xfa
 8002050:	00d2      	lsls	r2, r2, #3
 8002052:	189a      	adds	r2, r3, r2
 8002054:	4b92      	ldr	r3, [pc, #584]	; (80022a0 <modulation_mode+0x354>)
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	469c      	mov	ip, r3
 800205a:	4b91      	ldr	r3, [pc, #580]	; (80022a0 <modulation_mode+0x354>)
 800205c:	789b      	ldrb	r3, [r3, #2]
 800205e:	001c      	movs	r4, r3
 8002060:	4b8f      	ldr	r3, [pc, #572]	; (80022a0 <modulation_mode+0x354>)
 8002062:	78db      	ldrb	r3, [r3, #3]
 8002064:	001d      	movs	r5, r3
 8002066:	4b8e      	ldr	r3, [pc, #568]	; (80022a0 <modulation_mode+0x354>)
 8002068:	791b      	ldrb	r3, [r3, #4]
 800206a:	001e      	movs	r6, r3
 800206c:	4b8c      	ldr	r3, [pc, #560]	; (80022a0 <modulation_mode+0x354>)
 800206e:	795b      	ldrb	r3, [r3, #5]
 8002070:	498c      	ldr	r1, [pc, #560]	; (80022a4 <modulation_mode+0x358>)
 8002072:	2044      	movs	r0, #68	; 0x44
 8002074:	1838      	adds	r0, r7, r0
 8002076:	9303      	str	r3, [sp, #12]
 8002078:	9602      	str	r6, [sp, #8]
 800207a:	9501      	str	r5, [sp, #4]
 800207c:	9400      	str	r4, [sp, #0]
 800207e:	4663      	mov	r3, ip
 8002080:	f005 f860 	bl	8007144 <siprintf>
	sprintf(bf[1], "Volume: %d   ", max_volume);
 8002084:	4b84      	ldr	r3, [pc, #528]	; (8002298 <modulation_mode+0x34c>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	001a      	movs	r2, r3
 800208a:	4987      	ldr	r1, [pc, #540]	; (80022a8 <modulation_mode+0x35c>)
 800208c:	2444      	movs	r4, #68	; 0x44
 800208e:	193b      	adds	r3, r7, r4
 8002090:	3314      	adds	r3, #20
 8002092:	0018      	movs	r0, r3
 8002094:	f005 f856 	bl	8007144 <siprintf>
	sprintf(bf[2], "Pitch: %d   ", pitch_state);
 8002098:	4b7d      	ldr	r3, [pc, #500]	; (8002290 <modulation_mode+0x344>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	001a      	movs	r2, r3
 800209e:	4983      	ldr	r1, [pc, #524]	; (80022ac <modulation_mode+0x360>)
 80020a0:	193b      	adds	r3, r7, r4
 80020a2:	3328      	adds	r3, #40	; 0x28
 80020a4:	0018      	movs	r0, r3
 80020a6:	f005 f84d 	bl	8007144 <siprintf>

	char* array[6] = { bf[0], "Back", "Sound: ", dac_start == 0 ? "OFF " : "ON ", bf[1], bf[2] };
 80020aa:	2114      	movs	r1, #20
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	193a      	adds	r2, r7, r4
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	4a7e      	ldr	r2, [pc, #504]	; (80022b0 <modulation_mode+0x364>)
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	4a7e      	ldr	r2, [pc, #504]	; (80022b4 <modulation_mode+0x368>)
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	4b72      	ldr	r3, [pc, #456]	; (8002288 <modulation_mode+0x33c>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <modulation_mode+0x17e>
 80020c6:	4a7c      	ldr	r2, [pc, #496]	; (80022b8 <modulation_mode+0x36c>)
 80020c8:	e000      	b.n	80020cc <modulation_mode+0x180>
 80020ca:	4a7c      	ldr	r2, [pc, #496]	; (80022bc <modulation_mode+0x370>)
 80020cc:	2114      	movs	r1, #20
 80020ce:	187b      	adds	r3, r7, r1
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	187b      	adds	r3, r7, r1
 80020d4:	2044      	movs	r0, #68	; 0x44
 80020d6:	183a      	adds	r2, r7, r0
 80020d8:	3214      	adds	r2, #20
 80020da:	611a      	str	r2, [r3, #16]
 80020dc:	187b      	adds	r3, r7, r1
 80020de:	183a      	adds	r2, r7, r0
 80020e0:	3228      	adds	r2, #40	; 0x28
 80020e2:	615a      	str	r2, [r3, #20]
	array_puts(pos, ">Modulation", array, txt_color, back_color, 6);
 80020e4:	4c65      	ldr	r4, [pc, #404]	; (800227c <modulation_mode+0x330>)
 80020e6:	187a      	adds	r2, r7, r1
 80020e8:	4975      	ldr	r1, [pc, #468]	; (80022c0 <modulation_mode+0x374>)
 80020ea:	232c      	movs	r3, #44	; 0x2c
 80020ec:	18f8      	adds	r0, r7, r3
 80020ee:	2306      	movs	r3, #6
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	4b64      	ldr	r3, [pc, #400]	; (8002284 <modulation_mode+0x338>)
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	0023      	movs	r3, r4
 80020f8:	f7ff fb14 	bl	8001724 <array_puts>

	/* Volume Bar Start */
	LCD_DrawHollowCircle(200, 60, 5, set_tcolor);
 80020fc:	4b5e      	ldr	r3, [pc, #376]	; (8002278 <modulation_mode+0x32c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2205      	movs	r2, #5
 8002102:	213c      	movs	r1, #60	; 0x3c
 8002104:	20c8      	movs	r0, #200	; 0xc8
 8002106:	f7ff f88d 	bl	8001224 <LCD_DrawHollowCircle>
	LCD_DrawHollowCircle(200, 210, 5, set_tcolor);
 800210a:	4b5b      	ldr	r3, [pc, #364]	; (8002278 <modulation_mode+0x32c>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2205      	movs	r2, #5
 8002110:	21d2      	movs	r1, #210	; 0xd2
 8002112:	20c8      	movs	r0, #200	; 0xc8
 8002114:	f7ff f886 	bl	8001224 <LCD_DrawHollowCircle>
	LCD_DrawVLine(200, 65, 141, set_tcolor);
 8002118:	4b57      	ldr	r3, [pc, #348]	; (8002278 <modulation_mode+0x32c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	228d      	movs	r2, #141	; 0x8d
 800211e:	2141      	movs	r1, #65	; 0x41
 8002120:	20c8      	movs	r0, #200	; 0xc8
 8002122:	f7ff f82f 	bl	8001184 <LCD_DrawVLine>
	LCD_DrawFilledCircle(200, coor_volume, 10, set_tcolor);
 8002126:	4b5b      	ldr	r3, [pc, #364]	; (8002294 <modulation_mode+0x348>)
 8002128:	8819      	ldrh	r1, [r3, #0]
 800212a:	4b53      	ldr	r3, [pc, #332]	; (8002278 <modulation_mode+0x32c>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	220a      	movs	r2, #10
 8002130:	20c8      	movs	r0, #200	; 0xc8
 8002132:	f7ff f8c7 	bl	80012c4 <LCD_DrawFilledCircle>
	/* Volume Bar End */

	/* Pitch Bar Start */
	LCD_DrawHollowCircle(250, 60, 5, set_tcolor);
 8002136:	4b50      	ldr	r3, [pc, #320]	; (8002278 <modulation_mode+0x32c>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2205      	movs	r2, #5
 800213c:	213c      	movs	r1, #60	; 0x3c
 800213e:	20fa      	movs	r0, #250	; 0xfa
 8002140:	f7ff f870 	bl	8001224 <LCD_DrawHollowCircle>
	LCD_DrawHollowCircle(250, 210, 5, set_tcolor);
 8002144:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <modulation_mode+0x32c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2205      	movs	r2, #5
 800214a:	21d2      	movs	r1, #210	; 0xd2
 800214c:	20fa      	movs	r0, #250	; 0xfa
 800214e:	f7ff f869 	bl	8001224 <LCD_DrawHollowCircle>
	LCD_DrawVLine(250, 65, 141, set_tcolor);
 8002152:	4b49      	ldr	r3, [pc, #292]	; (8002278 <modulation_mode+0x32c>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	228d      	movs	r2, #141	; 0x8d
 8002158:	2141      	movs	r1, #65	; 0x41
 800215a:	20fa      	movs	r0, #250	; 0xfa
 800215c:	f7ff f812 	bl	8001184 <LCD_DrawVLine>
	LCD_DrawFilledCircle(250, coor_pitch, 10, set_tcolor);
 8002160:	4b4a      	ldr	r3, [pc, #296]	; (800228c <modulation_mode+0x340>)
 8002162:	8819      	ldrh	r1, [r3, #0]
 8002164:	4b44      	ldr	r3, [pc, #272]	; (8002278 <modulation_mode+0x32c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	220a      	movs	r2, #10
 800216a:	20fa      	movs	r0, #250	; 0xfa
 800216c:	f7ff f8aa 	bl	80012c4 <LCD_DrawFilledCircle>
	/* Pitch Bar End */

	if(curXY.x > 0 || curXY.y > 0){
 8002170:	4b54      	ldr	r3, [pc, #336]	; (80022c4 <modulation_mode+0x378>)
 8002172:	2200      	movs	r2, #0
 8002174:	5e9b      	ldrsh	r3, [r3, r2]
 8002176:	2b00      	cmp	r3, #0
 8002178:	dc05      	bgt.n	8002186 <modulation_mode+0x23a>
 800217a:	4b52      	ldr	r3, [pc, #328]	; (80022c4 <modulation_mode+0x378>)
 800217c:	2202      	movs	r2, #2
 800217e:	5e9b      	ldrsh	r3, [r3, r2]
 8002180:	2b00      	cmp	r3, #0
 8002182:	dc00      	bgt.n	8002186 <modulation_mode+0x23a>
 8002184:	e0d0      	b.n	8002328 <modulation_mode+0x3dc>
		if(coor_check(15, 15 + strlen("Back"), 1, 1 + 1)){
 8002186:	2302      	movs	r3, #2
 8002188:	2201      	movs	r2, #1
 800218a:	2113      	movs	r1, #19
 800218c:	200f      	movs	r0, #15
 800218e:	f7ff f9bf 	bl	8001510 <coor_check>
 8002192:	1e03      	subs	r3, r0, #0
 8002194:	d005      	beq.n	80021a2 <modulation_mode+0x256>
			reset_value();
 8002196:	f7ff fa19 	bl	80015cc <reset_value>
			buzM = 1;
 800219a:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <modulation_mode+0x37c>)
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
				LCD_DrawFilledCircle(250, coor_pitch, 10, set_bcolor);
				coor_pitch = current_xy.y;
			}
		}
	}
}
 80021a0:	e0c2      	b.n	8002328 <modulation_mode+0x3dc>
		else if(coor_check(0, strlen(bf[0]) - 6, 1, 1 + 1)) { firF = 0; time_setting(); }
 80021a2:	2344      	movs	r3, #68	; 0x44
 80021a4:	18fb      	adds	r3, r7, r3
 80021a6:	0018      	movs	r0, r3
 80021a8:	f7fd ffae 	bl	8000108 <strlen>
 80021ac:	0003      	movs	r3, r0
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b06      	subs	r3, #6
 80021b2:	b299      	uxth	r1, r3
 80021b4:	2302      	movs	r3, #2
 80021b6:	2201      	movs	r2, #1
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff f9a9 	bl	8001510 <coor_check>
 80021be:	1e03      	subs	r3, r0, #0
 80021c0:	d005      	beq.n	80021ce <modulation_mode+0x282>
 80021c2:	4b2c      	ldr	r3, [pc, #176]	; (8002274 <modulation_mode+0x328>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	f7ff fafe 	bl	80017c8 <time_setting>
}
 80021cc:	e0ac      	b.n	8002328 <modulation_mode+0x3dc>
		else if(coor_check(5, 5 + strlen("OFF"), 4, 4 + 1)) {
 80021ce:	2305      	movs	r3, #5
 80021d0:	2204      	movs	r2, #4
 80021d2:	2108      	movs	r1, #8
 80021d4:	2005      	movs	r0, #5
 80021d6:	f7ff f99b 	bl	8001510 <coor_check>
 80021da:	1e03      	subs	r3, r0, #0
 80021dc:	d01e      	beq.n	800221c <modulation_mode+0x2d0>
			uint32_t now_tick = HAL_GetTick();
 80021de:	f001 f869 	bl	80032b4 <HAL_GetTick>
 80021e2:	0003      	movs	r3, r0
 80021e4:	2180      	movs	r1, #128	; 0x80
 80021e6:	187a      	adds	r2, r7, r1
 80021e8:	6013      	str	r3, [r2, #0]
			if(now_tick - frev_tick > 500){
 80021ea:	4b38      	ldr	r3, [pc, #224]	; (80022cc <modulation_mode+0x380>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	187a      	adds	r2, r7, r1
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	1ad2      	subs	r2, r2, r3
 80021f4:	23fa      	movs	r3, #250	; 0xfa
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d800      	bhi.n	80021fe <modulation_mode+0x2b2>
 80021fc:	e094      	b.n	8002328 <modulation_mode+0x3dc>
				frev_tick = now_tick;
 80021fe:	4b33      	ldr	r3, [pc, #204]	; (80022cc <modulation_mode+0x380>)
 8002200:	187a      	adds	r2, r7, r1
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	601a      	str	r2, [r3, #0]
				dac_start ^= 1;
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <modulation_mode+0x33c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2201      	movs	r2, #1
 800220c:	4053      	eors	r3, r2
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <modulation_mode+0x33c>)
 8002212:	701a      	strb	r2, [r3, #0]
				firF = 0;
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <modulation_mode+0x328>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
}
 800221a:	e085      	b.n	8002328 <modulation_mode+0x3dc>
		else if(curXY.x >= 190 && curXY.x <= 210){
 800221c:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <modulation_mode+0x378>)
 800221e:	2200      	movs	r2, #0
 8002220:	5e9b      	ldrsh	r3, [r3, r2]
 8002222:	2bbd      	cmp	r3, #189	; 0xbd
 8002224:	dd54      	ble.n	80022d0 <modulation_mode+0x384>
 8002226:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <modulation_mode+0x378>)
 8002228:	2200      	movs	r2, #0
 800222a:	5e9b      	ldrsh	r3, [r3, r2]
 800222c:	2bd2      	cmp	r3, #210	; 0xd2
 800222e:	dc4f      	bgt.n	80022d0 <modulation_mode+0x384>
			if(curXY.y >= 60 && curXY.y <= 210) {
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <modulation_mode+0x378>)
 8002232:	2202      	movs	r2, #2
 8002234:	5e9b      	ldrsh	r3, [r3, r2]
 8002236:	2b3b      	cmp	r3, #59	; 0x3b
 8002238:	dc00      	bgt.n	800223c <modulation_mode+0x2f0>
 800223a:	e074      	b.n	8002326 <modulation_mode+0x3da>
 800223c:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <modulation_mode+0x378>)
 800223e:	2202      	movs	r2, #2
 8002240:	5e9b      	ldrsh	r3, [r3, r2]
 8002242:	2bd2      	cmp	r3, #210	; 0xd2
 8002244:	dd00      	ble.n	8002248 <modulation_mode+0x2fc>
 8002246:	e06e      	b.n	8002326 <modulation_mode+0x3da>
				TS_POINT current_xy = curXY;
 8002248:	240c      	movs	r4, #12
 800224a:	193b      	adds	r3, r7, r4
 800224c:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <modulation_mode+0x378>)
 800224e:	6811      	ldr	r1, [r2, #0]
 8002250:	6019      	str	r1, [r3, #0]
 8002252:	8892      	ldrh	r2, [r2, #4]
 8002254:	809a      	strh	r2, [r3, #4]
				LCD_DrawFilledCircle(200, coor_volume, 10, set_bcolor);
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <modulation_mode+0x348>)
 8002258:	8819      	ldrh	r1, [r3, #0]
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <modulation_mode+0x334>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	220a      	movs	r2, #10
 8002260:	20c8      	movs	r0, #200	; 0xc8
 8002262:	f7ff f82f 	bl	80012c4 <LCD_DrawFilledCircle>
				coor_volume = current_xy.y;
 8002266:	193b      	adds	r3, r7, r4
 8002268:	2202      	movs	r2, #2
 800226a:	5e9b      	ldrsh	r3, [r3, r2]
 800226c:	b29a      	uxth	r2, r3
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <modulation_mode+0x348>)
 8002270:	801a      	strh	r2, [r3, #0]
			if(curXY.y >= 60 && curXY.y <= 210) {
 8002272:	e058      	b.n	8002326 <modulation_mode+0x3da>
 8002274:	200002cb 	.word	0x200002cb
 8002278:	200002c1 	.word	0x200002c1
 800227c:	200002b0 	.word	0x200002b0
 8002280:	20000019 	.word	0x20000019
 8002284:	20000008 	.word	0x20000008
 8002288:	200002ce 	.word	0x200002ce
 800228c:	20000034 	.word	0x20000034
 8002290:	20000022 	.word	0x20000022
 8002294:	20000036 	.word	0x20000036
 8002298:	20000024 	.word	0x20000024
 800229c:	08007b68 	.word	0x08007b68
 80022a0:	2000001c 	.word	0x2000001c
 80022a4:	08007ad0 	.word	0x08007ad0
 80022a8:	08007b20 	.word	0x08007b20
 80022ac:	08007b30 	.word	0x08007b30
 80022b0:	08007b40 	.word	0x08007b40
 80022b4:	08007b48 	.word	0x08007b48
 80022b8:	08007b50 	.word	0x08007b50
 80022bc:	08007b58 	.word	0x08007b58
 80022c0:	08007b5c 	.word	0x08007b5c
 80022c4:	200002c4 	.word	0x200002c4
 80022c8:	200002cc 	.word	0x200002cc
 80022cc:	200002e0 	.word	0x200002e0
		else if(curXY.x >= 240 && curXY.x <= 260){
 80022d0:	4b17      	ldr	r3, [pc, #92]	; (8002330 <modulation_mode+0x3e4>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	5e9b      	ldrsh	r3, [r3, r2]
 80022d6:	2bef      	cmp	r3, #239	; 0xef
 80022d8:	dd26      	ble.n	8002328 <modulation_mode+0x3dc>
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <modulation_mode+0x3e4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	5e9a      	ldrsh	r2, [r3, r2]
 80022e0:	2382      	movs	r3, #130	; 0x82
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	429a      	cmp	r2, r3
 80022e6:	dc1f      	bgt.n	8002328 <modulation_mode+0x3dc>
			if(curXY.y >= 60 && curXY.y <= 210) {
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <modulation_mode+0x3e4>)
 80022ea:	2202      	movs	r2, #2
 80022ec:	5e9b      	ldrsh	r3, [r3, r2]
 80022ee:	2b3b      	cmp	r3, #59	; 0x3b
 80022f0:	dd1a      	ble.n	8002328 <modulation_mode+0x3dc>
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <modulation_mode+0x3e4>)
 80022f4:	2202      	movs	r2, #2
 80022f6:	5e9b      	ldrsh	r3, [r3, r2]
 80022f8:	2bd2      	cmp	r3, #210	; 0xd2
 80022fa:	dc15      	bgt.n	8002328 <modulation_mode+0x3dc>
				TS_POINT current_xy = curXY;
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	4a0c      	ldr	r2, [pc, #48]	; (8002330 <modulation_mode+0x3e4>)
 8002300:	6811      	ldr	r1, [r2, #0]
 8002302:	6019      	str	r1, [r3, #0]
 8002304:	8892      	ldrh	r2, [r2, #4]
 8002306:	809a      	strh	r2, [r3, #4]
				LCD_DrawFilledCircle(250, coor_pitch, 10, set_bcolor);
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <modulation_mode+0x3e8>)
 800230a:	8819      	ldrh	r1, [r3, #0]
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <modulation_mode+0x3ec>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	220a      	movs	r2, #10
 8002312:	20fa      	movs	r0, #250	; 0xfa
 8002314:	f7fe ffd6 	bl	80012c4 <LCD_DrawFilledCircle>
				coor_pitch = current_xy.y;
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	2202      	movs	r2, #2
 800231c:	5e9b      	ldrsh	r3, [r3, r2]
 800231e:	b29a      	uxth	r2, r3
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <modulation_mode+0x3e8>)
 8002322:	801a      	strh	r2, [r3, #0]
}
 8002324:	e000      	b.n	8002328 <modulation_mode+0x3dc>
			if(curXY.y >= 60 && curXY.y <= 210) {
 8002326:	46c0      	nop			; (mov r8, r8)
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b023      	add	sp, #140	; 0x8c
 800232e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002330:	200002c4 	.word	0x200002c4
 8002334:	20000034 	.word	0x20000034
 8002338:	20000019 	.word	0x20000019

0800233c <setting_mode>:

void setting_mode(void){
 800233c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233e:	b0a1      	sub	sp, #132	; 0x84
 8002340:	af04      	add	r7, sp, #16
	static LCD_COLOR t_color = white, b_color = black;
	if(!firF){
 8002342:	4bce      	ldr	r3, [pc, #824]	; (800267c <setting_mode+0x340>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d131      	bne.n	80023ae <setting_mode+0x72>
		firF = 1;
 800234a:	4bcc      	ldr	r3, [pc, #816]	; (800267c <setting_mode+0x340>)
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]

		curXY.x = curXY.y = 0;
 8002350:	4bcb      	ldr	r3, [pc, #812]	; (8002680 <setting_mode+0x344>)
 8002352:	2200      	movs	r2, #0
 8002354:	805a      	strh	r2, [r3, #2]
 8002356:	4bca      	ldr	r3, [pc, #808]	; (8002680 <setting_mode+0x344>)
 8002358:	2202      	movs	r2, #2
 800235a:	5e9a      	ldrsh	r2, [r3, r2]
 800235c:	4bc8      	ldr	r3, [pc, #800]	; (8002680 <setting_mode+0x344>)
 800235e:	801a      	strh	r2, [r3, #0]

		sel = 0;
 8002360:	4bc8      	ldr	r3, [pc, #800]	; (8002684 <setting_mode+0x348>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
		t_color = set_tcolor;
 8002366:	4bc8      	ldr	r3, [pc, #800]	; (8002688 <setting_mode+0x34c>)
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	4bc8      	ldr	r3, [pc, #800]	; (800268c <setting_mode+0x350>)
 800236c:	701a      	strb	r2, [r3, #0]
		b_color = set_bcolor;
 800236e:	4bc8      	ldr	r3, [pc, #800]	; (8002690 <setting_mode+0x354>)
 8002370:	781a      	ldrb	r2, [r3, #0]
 8002372:	4bc8      	ldr	r3, [pc, #800]	; (8002694 <setting_mode+0x358>)
 8002374:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0 ; i < 17 ; i++){
 8002376:	236f      	movs	r3, #111	; 0x6f
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	e011      	b.n	80023a4 <setting_mode+0x68>
			txt_color[i] = set_tcolor;
 8002380:	206f      	movs	r0, #111	; 0x6f
 8002382:	183b      	adds	r3, r7, r0
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	4ac0      	ldr	r2, [pc, #768]	; (8002688 <setting_mode+0x34c>)
 8002388:	7811      	ldrb	r1, [r2, #0]
 800238a:	4ac3      	ldr	r2, [pc, #780]	; (8002698 <setting_mode+0x35c>)
 800238c:	54d1      	strb	r1, [r2, r3]
			back_color[i] = set_bcolor;
 800238e:	183b      	adds	r3, r7, r0
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	4abf      	ldr	r2, [pc, #764]	; (8002690 <setting_mode+0x354>)
 8002394:	7811      	ldrb	r1, [r2, #0]
 8002396:	4ac1      	ldr	r2, [pc, #772]	; (800269c <setting_mode+0x360>)
 8002398:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0 ; i < 17 ; i++){
 800239a:	183b      	adds	r3, r7, r0
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	183b      	adds	r3, r7, r0
 80023a0:	3201      	adds	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	236f      	movs	r3, #111	; 0x6f
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d9e8      	bls.n	8002380 <setting_mode+0x44>
		}
	}

	time_get();
 80023ae:	f7ff f891 	bl	80014d4 <time_get>
	char bf[3][20];
	POS pos[6] = {{0, 1}, {2, 4}, {2, 6}, {14, 4}, {14, 6}, {15, 1}};
 80023b2:	2318      	movs	r3, #24
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	4aba      	ldr	r2, [pc, #744]	; (80026a0 <setting_mode+0x364>)
 80023b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023ba:	c313      	stmia	r3!, {r0, r1, r4}
 80023bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023be:	c313      	stmia	r3!, {r0, r1, r4}
	sprintf(bf[0], "%04d.%02d.%02d %02d:%02d:%02d", 2000 + time.year, time.month, time.day, time.hour, time.min, time.sec);
 80023c0:	4bb8      	ldr	r3, [pc, #736]	; (80026a4 <setting_mode+0x368>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	22fa      	movs	r2, #250	; 0xfa
 80023c6:	00d2      	lsls	r2, r2, #3
 80023c8:	189a      	adds	r2, r3, r2
 80023ca:	4bb6      	ldr	r3, [pc, #728]	; (80026a4 <setting_mode+0x368>)
 80023cc:	785b      	ldrb	r3, [r3, #1]
 80023ce:	469c      	mov	ip, r3
 80023d0:	4bb4      	ldr	r3, [pc, #720]	; (80026a4 <setting_mode+0x368>)
 80023d2:	789b      	ldrb	r3, [r3, #2]
 80023d4:	001c      	movs	r4, r3
 80023d6:	4bb3      	ldr	r3, [pc, #716]	; (80026a4 <setting_mode+0x368>)
 80023d8:	78db      	ldrb	r3, [r3, #3]
 80023da:	001d      	movs	r5, r3
 80023dc:	4bb1      	ldr	r3, [pc, #708]	; (80026a4 <setting_mode+0x368>)
 80023de:	791b      	ldrb	r3, [r3, #4]
 80023e0:	001e      	movs	r6, r3
 80023e2:	4bb0      	ldr	r3, [pc, #704]	; (80026a4 <setting_mode+0x368>)
 80023e4:	795b      	ldrb	r3, [r3, #5]
 80023e6:	49b0      	ldr	r1, [pc, #704]	; (80026a8 <setting_mode+0x36c>)
 80023e8:	2030      	movs	r0, #48	; 0x30
 80023ea:	1838      	adds	r0, r7, r0
 80023ec:	9303      	str	r3, [sp, #12]
 80023ee:	9602      	str	r6, [sp, #8]
 80023f0:	9501      	str	r5, [sp, #4]
 80023f2:	9400      	str	r4, [sp, #0]
 80023f4:	4663      	mov	r3, ip
 80023f6:	f004 fea5 	bl	8007144 <siprintf>

	back_color[1] = sel == 0 ? set_tcolor : set_bcolor;
 80023fa:	4ba2      	ldr	r3, [pc, #648]	; (8002684 <setting_mode+0x348>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <setting_mode+0xcc>
 8002402:	4ba1      	ldr	r3, [pc, #644]	; (8002688 <setting_mode+0x34c>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	e001      	b.n	800240c <setting_mode+0xd0>
 8002408:	4ba1      	ldr	r3, [pc, #644]	; (8002690 <setting_mode+0x354>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	4aa3      	ldr	r2, [pc, #652]	; (800269c <setting_mode+0x360>)
 800240e:	7053      	strb	r3, [r2, #1]
	back_color[2] = sel == 1 ? set_tcolor : set_bcolor;
 8002410:	4b9c      	ldr	r3, [pc, #624]	; (8002684 <setting_mode+0x348>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d102      	bne.n	800241e <setting_mode+0xe2>
 8002418:	4b9b      	ldr	r3, [pc, #620]	; (8002688 <setting_mode+0x34c>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	e001      	b.n	8002422 <setting_mode+0xe6>
 800241e:	4b9c      	ldr	r3, [pc, #624]	; (8002690 <setting_mode+0x354>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4a9e      	ldr	r2, [pc, #632]	; (800269c <setting_mode+0x360>)
 8002424:	7093      	strb	r3, [r2, #2]

	txt_color[1] = sel == 0 ? set_bcolor : set_tcolor;
 8002426:	4b97      	ldr	r3, [pc, #604]	; (8002684 <setting_mode+0x348>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <setting_mode+0xf8>
 800242e:	4b98      	ldr	r3, [pc, #608]	; (8002690 <setting_mode+0x354>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	e001      	b.n	8002438 <setting_mode+0xfc>
 8002434:	4b94      	ldr	r3, [pc, #592]	; (8002688 <setting_mode+0x34c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	4a97      	ldr	r2, [pc, #604]	; (8002698 <setting_mode+0x35c>)
 800243a:	7053      	strb	r3, [r2, #1]
	txt_color[2] = sel == 1 ? set_bcolor : set_tcolor;
 800243c:	4b91      	ldr	r3, [pc, #580]	; (8002684 <setting_mode+0x348>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d102      	bne.n	800244a <setting_mode+0x10e>
 8002444:	4b92      	ldr	r3, [pc, #584]	; (8002690 <setting_mode+0x354>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	e001      	b.n	800244e <setting_mode+0x112>
 800244a:	4b8f      	ldr	r3, [pc, #572]	; (8002688 <setting_mode+0x34c>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	4a92      	ldr	r2, [pc, #584]	; (8002698 <setting_mode+0x35c>)
 8002450:	7093      	strb	r3, [r2, #2]

	txt_color[3] = t_color;
 8002452:	4b8e      	ldr	r3, [pc, #568]	; (800268c <setting_mode+0x350>)
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	4b90      	ldr	r3, [pc, #576]	; (8002698 <setting_mode+0x35c>)
 8002458:	70da      	strb	r2, [r3, #3]
	txt_color[4] = b_color;
 800245a:	4b8e      	ldr	r3, [pc, #568]	; (8002694 <setting_mode+0x358>)
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	4b8e      	ldr	r3, [pc, #568]	; (8002698 <setting_mode+0x35c>)
 8002460:	711a      	strb	r2, [r3, #4]

	sprintf(bf[1], "%s   ", t_color == black ? "Black" : t_color == blue ? "Blue" : t_color == green ? "Green" : t_color == red ? "Red" : t_color == yellow ? "Yellow" : "White");
 8002462:	4b8a      	ldr	r3, [pc, #552]	; (800268c <setting_mode+0x350>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d019      	beq.n	800249e <setting_mode+0x162>
 800246a:	4b88      	ldr	r3, [pc, #544]	; (800268c <setting_mode+0x350>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d013      	beq.n	800249a <setting_mode+0x15e>
 8002472:	4b86      	ldr	r3, [pc, #536]	; (800268c <setting_mode+0x350>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d00d      	beq.n	8002496 <setting_mode+0x15a>
 800247a:	4b84      	ldr	r3, [pc, #528]	; (800268c <setting_mode+0x350>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d007      	beq.n	8002492 <setting_mode+0x156>
 8002482:	4b82      	ldr	r3, [pc, #520]	; (800268c <setting_mode+0x350>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b04      	cmp	r3, #4
 8002488:	d101      	bne.n	800248e <setting_mode+0x152>
 800248a:	4b88      	ldr	r3, [pc, #544]	; (80026ac <setting_mode+0x370>)
 800248c:	e008      	b.n	80024a0 <setting_mode+0x164>
 800248e:	4b88      	ldr	r3, [pc, #544]	; (80026b0 <setting_mode+0x374>)
 8002490:	e006      	b.n	80024a0 <setting_mode+0x164>
 8002492:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <setting_mode+0x378>)
 8002494:	e004      	b.n	80024a0 <setting_mode+0x164>
 8002496:	4b88      	ldr	r3, [pc, #544]	; (80026b8 <setting_mode+0x37c>)
 8002498:	e002      	b.n	80024a0 <setting_mode+0x164>
 800249a:	4b88      	ldr	r3, [pc, #544]	; (80026bc <setting_mode+0x380>)
 800249c:	e000      	b.n	80024a0 <setting_mode+0x164>
 800249e:	4b88      	ldr	r3, [pc, #544]	; (80026c0 <setting_mode+0x384>)
 80024a0:	4988      	ldr	r1, [pc, #544]	; (80026c4 <setting_mode+0x388>)
 80024a2:	2230      	movs	r2, #48	; 0x30
 80024a4:	18ba      	adds	r2, r7, r2
 80024a6:	3214      	adds	r2, #20
 80024a8:	0010      	movs	r0, r2
 80024aa:	001a      	movs	r2, r3
 80024ac:	f004 fe4a 	bl	8007144 <siprintf>
	sprintf(bf[2], "%s   ", b_color == black ? "Black" : b_color == blue ? "Blue" : b_color == green ? "Green" : b_color == red ? "Red" : b_color == yellow ? "Yellow" : "White");
 80024b0:	4b78      	ldr	r3, [pc, #480]	; (8002694 <setting_mode+0x358>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d019      	beq.n	80024ec <setting_mode+0x1b0>
 80024b8:	4b76      	ldr	r3, [pc, #472]	; (8002694 <setting_mode+0x358>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d013      	beq.n	80024e8 <setting_mode+0x1ac>
 80024c0:	4b74      	ldr	r3, [pc, #464]	; (8002694 <setting_mode+0x358>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d00d      	beq.n	80024e4 <setting_mode+0x1a8>
 80024c8:	4b72      	ldr	r3, [pc, #456]	; (8002694 <setting_mode+0x358>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d007      	beq.n	80024e0 <setting_mode+0x1a4>
 80024d0:	4b70      	ldr	r3, [pc, #448]	; (8002694 <setting_mode+0x358>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d101      	bne.n	80024dc <setting_mode+0x1a0>
 80024d8:	4b74      	ldr	r3, [pc, #464]	; (80026ac <setting_mode+0x370>)
 80024da:	e008      	b.n	80024ee <setting_mode+0x1b2>
 80024dc:	4b74      	ldr	r3, [pc, #464]	; (80026b0 <setting_mode+0x374>)
 80024de:	e006      	b.n	80024ee <setting_mode+0x1b2>
 80024e0:	4b74      	ldr	r3, [pc, #464]	; (80026b4 <setting_mode+0x378>)
 80024e2:	e004      	b.n	80024ee <setting_mode+0x1b2>
 80024e4:	4b74      	ldr	r3, [pc, #464]	; (80026b8 <setting_mode+0x37c>)
 80024e6:	e002      	b.n	80024ee <setting_mode+0x1b2>
 80024e8:	4b74      	ldr	r3, [pc, #464]	; (80026bc <setting_mode+0x380>)
 80024ea:	e000      	b.n	80024ee <setting_mode+0x1b2>
 80024ec:	4b74      	ldr	r3, [pc, #464]	; (80026c0 <setting_mode+0x384>)
 80024ee:	4975      	ldr	r1, [pc, #468]	; (80026c4 <setting_mode+0x388>)
 80024f0:	2230      	movs	r2, #48	; 0x30
 80024f2:	18ba      	adds	r2, r7, r2
 80024f4:	3228      	adds	r2, #40	; 0x28
 80024f6:	0010      	movs	r0, r2
 80024f8:	001a      	movs	r2, r3
 80024fa:	f004 fe23 	bl	8007144 <siprintf>

	for(uint8_t i = 0 ; i < 6 ; i++)
 80024fe:	236e      	movs	r3, #110	; 0x6e
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e01c      	b.n	8002542 <setting_mode+0x206>
		LCD_DrawFilledRectangleCoord(RECT * i, 190, RECT * (i + 1), 240, lcd_color[i]);
 8002508:	246e      	movs	r4, #110	; 0x6e
 800250a:	193b      	adds	r3, r7, r4
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	2235      	movs	r2, #53	; 0x35
 8002512:	4353      	muls	r3, r2
 8002514:	b298      	uxth	r0, r3
 8002516:	193b      	adds	r3, r7, r4
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	3301      	adds	r3, #1
 800251c:	b29b      	uxth	r3, r3
 800251e:	2235      	movs	r2, #53	; 0x35
 8002520:	4353      	muls	r3, r2
 8002522:	b299      	uxth	r1, r3
 8002524:	193b      	adds	r3, r7, r4
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4a67      	ldr	r2, [pc, #412]	; (80026c8 <setting_mode+0x38c>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	23f0      	movs	r3, #240	; 0xf0
 8002530:	000a      	movs	r2, r1
 8002532:	21be      	movs	r1, #190	; 0xbe
 8002534:	f7fe ff16 	bl	8001364 <LCD_DrawFilledRectangleCoord>
	for(uint8_t i = 0 ; i < 6 ; i++)
 8002538:	193b      	adds	r3, r7, r4
 800253a:	781a      	ldrb	r2, [r3, #0]
 800253c:	193b      	adds	r3, r7, r4
 800253e:	3201      	adds	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	236e      	movs	r3, #110	; 0x6e
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d9dd      	bls.n	8002508 <setting_mode+0x1cc>

	char* array[6] = { bf[0], "Text Color:", "Background Color:", bf[1], bf[2], "Back" };
 800254c:	003b      	movs	r3, r7
 800254e:	2130      	movs	r1, #48	; 0x30
 8002550:	187a      	adds	r2, r7, r1
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	003b      	movs	r3, r7
 8002556:	4a5d      	ldr	r2, [pc, #372]	; (80026cc <setting_mode+0x390>)
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	003b      	movs	r3, r7
 800255c:	4a5c      	ldr	r2, [pc, #368]	; (80026d0 <setting_mode+0x394>)
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	003b      	movs	r3, r7
 8002562:	187a      	adds	r2, r7, r1
 8002564:	3214      	adds	r2, #20
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	003b      	movs	r3, r7
 800256a:	187a      	adds	r2, r7, r1
 800256c:	3228      	adds	r2, #40	; 0x28
 800256e:	611a      	str	r2, [r3, #16]
 8002570:	003b      	movs	r3, r7
 8002572:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <setting_mode+0x398>)
 8002574:	615a      	str	r2, [r3, #20]
	array_puts(pos, ">Setting", array, txt_color, back_color, 6);
 8002576:	4c48      	ldr	r4, [pc, #288]	; (8002698 <setting_mode+0x35c>)
 8002578:	003a      	movs	r2, r7
 800257a:	4957      	ldr	r1, [pc, #348]	; (80026d8 <setting_mode+0x39c>)
 800257c:	2318      	movs	r3, #24
 800257e:	18f8      	adds	r0, r7, r3
 8002580:	2306      	movs	r3, #6
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	4b45      	ldr	r3, [pc, #276]	; (800269c <setting_mode+0x360>)
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	0023      	movs	r3, r4
 800258a:	f7ff f8cb 	bl	8001724 <array_puts>

	if(curXY.x > 0 || curXY.y > 0){
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <setting_mode+0x344>)
 8002590:	2200      	movs	r2, #0
 8002592:	5e9b      	ldrsh	r3, [r3, r2]
 8002594:	2b00      	cmp	r3, #0
 8002596:	dc05      	bgt.n	80025a4 <setting_mode+0x268>
 8002598:	4b39      	ldr	r3, [pc, #228]	; (8002680 <setting_mode+0x344>)
 800259a:	2202      	movs	r2, #2
 800259c:	5e9b      	ldrsh	r3, [r3, r2]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	dc00      	bgt.n	80025a4 <setting_mode+0x268>
 80025a2:	e0e4      	b.n	800276e <setting_mode+0x432>
		if(coor_check(15, 15 + strlen("Back"), 1, 1 + 1)){
 80025a4:	2302      	movs	r3, #2
 80025a6:	2201      	movs	r2, #1
 80025a8:	2113      	movs	r1, #19
 80025aa:	200f      	movs	r0, #15
 80025ac:	f7fe ffb0 	bl	8001510 <coor_check>
 80025b0:	1e03      	subs	r3, r0, #0
 80025b2:	d00d      	beq.n	80025d0 <setting_mode+0x294>
			set_tcolor = t_color;
 80025b4:	4b35      	ldr	r3, [pc, #212]	; (800268c <setting_mode+0x350>)
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	4b33      	ldr	r3, [pc, #204]	; (8002688 <setting_mode+0x34c>)
 80025ba:	701a      	strb	r2, [r3, #0]
			set_bcolor = b_color;
 80025bc:	4b35      	ldr	r3, [pc, #212]	; (8002694 <setting_mode+0x358>)
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	4b33      	ldr	r3, [pc, #204]	; (8002690 <setting_mode+0x354>)
 80025c2:	701a      	strb	r2, [r3, #0]
			reset_value();
 80025c4:	f7ff f802 	bl	80015cc <reset_value>
			buzM = 1;
 80025c8:	4b44      	ldr	r3, [pc, #272]	; (80026dc <setting_mode+0x3a0>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	e0ce      	b.n	800276e <setting_mode+0x432>
			return;
		}
		else if(coor_check(0, strlen(bf[0]) - 6, 1, 1 + 1)) { firF = 0; time_setting(); }
 80025d0:	2330      	movs	r3, #48	; 0x30
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7fd fd97 	bl	8000108 <strlen>
 80025da:	0003      	movs	r3, r0
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b06      	subs	r3, #6
 80025e0:	b299      	uxth	r1, r3
 80025e2:	2302      	movs	r3, #2
 80025e4:	2201      	movs	r2, #1
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe ff92 	bl	8001510 <coor_check>
 80025ec:	1e03      	subs	r3, r0, #0
 80025ee:	d005      	beq.n	80025fc <setting_mode+0x2c0>
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <setting_mode+0x340>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	f7ff f8e7 	bl	80017c8 <time_setting>
 80025fa:	e0b8      	b.n	800276e <setting_mode+0x432>
		else if(coor_check(2, 2 + strlen("Text Color: Yellow") - 6, 4, 4 + 1)) sel = 0;
 80025fc:	2305      	movs	r3, #5
 80025fe:	2204      	movs	r2, #4
 8002600:	210e      	movs	r1, #14
 8002602:	2002      	movs	r0, #2
 8002604:	f7fe ff84 	bl	8001510 <coor_check>
 8002608:	1e03      	subs	r3, r0, #0
 800260a:	d003      	beq.n	8002614 <setting_mode+0x2d8>
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <setting_mode+0x348>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	e0ac      	b.n	800276e <setting_mode+0x432>
		else if(coor_check(2, 2 + strlen("Background Color: Yellow") - 6, 6, 6 + 1)) sel = 1;
 8002614:	2307      	movs	r3, #7
 8002616:	2206      	movs	r2, #6
 8002618:	2114      	movs	r1, #20
 800261a:	2002      	movs	r0, #2
 800261c:	f7fe ff78 	bl	8001510 <coor_check>
 8002620:	1e03      	subs	r3, r0, #0
 8002622:	d003      	beq.n	800262c <setting_mode+0x2f0>
 8002624:	4b17      	ldr	r3, [pc, #92]	; (8002684 <setting_mode+0x348>)
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e0a0      	b.n	800276e <setting_mode+0x432>
		else if(curXY.y > 190){
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <setting_mode+0x344>)
 800262e:	2202      	movs	r2, #2
 8002630:	5e9b      	ldrsh	r3, [r3, r2]
 8002632:	2bbe      	cmp	r3, #190	; 0xbe
 8002634:	dc00      	bgt.n	8002638 <setting_mode+0x2fc>
 8002636:	e09a      	b.n	800276e <setting_mode+0x432>
			if(curXY.x < RECT) { if(sel == 0) t_color = black; else b_color = black; }
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <setting_mode+0x344>)
 800263a:	2200      	movs	r2, #0
 800263c:	5e9b      	ldrsh	r3, [r3, r2]
 800263e:	2b34      	cmp	r3, #52	; 0x34
 8002640:	dc0b      	bgt.n	800265a <setting_mode+0x31e>
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <setting_mode+0x348>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <setting_mode+0x316>
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <setting_mode+0x350>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	e08d      	b.n	800276e <setting_mode+0x432>
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <setting_mode+0x358>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e089      	b.n	800276e <setting_mode+0x432>
			else if(curXY.x < RECT * 2) { if(sel == 0) t_color = blue; else b_color = blue; }
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <setting_mode+0x344>)
 800265c:	2200      	movs	r2, #0
 800265e:	5e9b      	ldrsh	r3, [r3, r2]
 8002660:	2b69      	cmp	r3, #105	; 0x69
 8002662:	dc3d      	bgt.n	80026e0 <setting_mode+0x3a4>
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <setting_mode+0x348>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d103      	bne.n	8002674 <setting_mode+0x338>
 800266c:	4b07      	ldr	r3, [pc, #28]	; (800268c <setting_mode+0x350>)
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e07c      	b.n	800276e <setting_mode+0x432>
 8002674:	4b07      	ldr	r3, [pc, #28]	; (8002694 <setting_mode+0x358>)
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e078      	b.n	800276e <setting_mode+0x432>
 800267c:	200002cb 	.word	0x200002cb
 8002680:	200002c4 	.word	0x200002c4
 8002684:	200002cd 	.word	0x200002cd
 8002688:	200002c1 	.word	0x200002c1
 800268c:	20000038 	.word	0x20000038
 8002690:	20000019 	.word	0x20000019
 8002694:	200002e4 	.word	0x200002e4
 8002698:	200002b0 	.word	0x200002b0
 800269c:	20000008 	.word	0x20000008
 80026a0:	08007be0 	.word	0x08007be0
 80026a4:	2000001c 	.word	0x2000001c
 80026a8:	08007ad0 	.word	0x08007ad0
 80026ac:	08007b80 	.word	0x08007b80
 80026b0:	08007b88 	.word	0x08007b88
 80026b4:	08007b90 	.word	0x08007b90
 80026b8:	08007b94 	.word	0x08007b94
 80026bc:	08007b9c 	.word	0x08007b9c
 80026c0:	08007ba4 	.word	0x08007ba4
 80026c4:	08007bac 	.word	0x08007bac
 80026c8:	20000000 	.word	0x20000000
 80026cc:	08007bb4 	.word	0x08007bb4
 80026d0:	08007bc0 	.word	0x08007bc0
 80026d4:	08007b40 	.word	0x08007b40
 80026d8:	08007bd4 	.word	0x08007bd4
 80026dc:	200002cc 	.word	0x200002cc
			else if(curXY.x < RECT * 3) { if(sel == 0) t_color = green; else b_color = green; }
 80026e0:	4b24      	ldr	r3, [pc, #144]	; (8002774 <setting_mode+0x438>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	5e9b      	ldrsh	r3, [r3, r2]
 80026e6:	2b9e      	cmp	r3, #158	; 0x9e
 80026e8:	dc0b      	bgt.n	8002702 <setting_mode+0x3c6>
 80026ea:	4b23      	ldr	r3, [pc, #140]	; (8002778 <setting_mode+0x43c>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <setting_mode+0x3be>
 80026f2:	4b22      	ldr	r3, [pc, #136]	; (800277c <setting_mode+0x440>)
 80026f4:	2202      	movs	r2, #2
 80026f6:	701a      	strb	r2, [r3, #0]
 80026f8:	e039      	b.n	800276e <setting_mode+0x432>
 80026fa:	4b21      	ldr	r3, [pc, #132]	; (8002780 <setting_mode+0x444>)
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e035      	b.n	800276e <setting_mode+0x432>
			else if(curXY.x < RECT * 4) { if(sel == 0) t_color = red; else b_color = red; }
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <setting_mode+0x438>)
 8002704:	2200      	movs	r2, #0
 8002706:	5e9b      	ldrsh	r3, [r3, r2]
 8002708:	2bd3      	cmp	r3, #211	; 0xd3
 800270a:	dc0b      	bgt.n	8002724 <setting_mode+0x3e8>
 800270c:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <setting_mode+0x43c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d103      	bne.n	800271c <setting_mode+0x3e0>
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <setting_mode+0x440>)
 8002716:	2203      	movs	r2, #3
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	e028      	b.n	800276e <setting_mode+0x432>
 800271c:	4b18      	ldr	r3, [pc, #96]	; (8002780 <setting_mode+0x444>)
 800271e:	2203      	movs	r2, #3
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	e024      	b.n	800276e <setting_mode+0x432>
			else if(curXY.x < RECT * 5) { if(sel == 0) t_color = yellow; else b_color = yellow; }
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <setting_mode+0x438>)
 8002726:	2200      	movs	r2, #0
 8002728:	5e9a      	ldrsh	r2, [r3, r2]
 800272a:	2384      	movs	r3, #132	; 0x84
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	429a      	cmp	r2, r3
 8002730:	dc0b      	bgt.n	800274a <setting_mode+0x40e>
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <setting_mode+0x43c>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <setting_mode+0x406>
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <setting_mode+0x440>)
 800273c:	2204      	movs	r2, #4
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e015      	b.n	800276e <setting_mode+0x432>
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <setting_mode+0x444>)
 8002744:	2204      	movs	r2, #4
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e011      	b.n	800276e <setting_mode+0x432>
			else if(curXY.x < RECT * 6) { if(sel == 0) t_color = white; else b_color = white; }
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <setting_mode+0x438>)
 800274c:	2200      	movs	r2, #0
 800274e:	5e9a      	ldrsh	r2, [r3, r2]
 8002750:	239f      	movs	r3, #159	; 0x9f
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	429a      	cmp	r2, r3
 8002756:	da0a      	bge.n	800276e <setting_mode+0x432>
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <setting_mode+0x43c>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d103      	bne.n	8002768 <setting_mode+0x42c>
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <setting_mode+0x440>)
 8002762:	2205      	movs	r2, #5
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e002      	b.n	800276e <setting_mode+0x432>
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <setting_mode+0x444>)
 800276a:	2205      	movs	r2, #5
 800276c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800276e:	46bd      	mov	sp, r7
 8002770:	b01d      	add	sp, #116	; 0x74
 8002772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002774:	200002c4 	.word	0x200002c4
 8002778:	200002cd 	.word	0x200002cd
 800277c:	20000038 	.word	0x20000038
 8002780:	200002e4 	.word	0x200002e4

08002784 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void){
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc, &adcV, 1);
 800278a:	4928      	ldr	r1, [pc, #160]	; (800282c <HAL_SYSTICK_Callback+0xa8>)
 800278c:	4b28      	ldr	r3, [pc, #160]	; (8002830 <HAL_SYSTICK_Callback+0xac>)
 800278e:	2201      	movs	r2, #1
 8002790:	0018      	movs	r0, r3
 8002792:	f000 ff31 	bl	80035f8 <HAL_ADC_Start_DMA>

	if(buzM) buzC++;
 8002796:	4b27      	ldr	r3, [pc, #156]	; (8002834 <HAL_SYSTICK_Callback+0xb0>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_SYSTICK_Callback+0x26>
 800279e:	4b26      	ldr	r3, [pc, #152]	; (8002838 <HAL_SYSTICK_Callback+0xb4>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_SYSTICK_Callback+0xb4>)
 80027a8:	801a      	strh	r2, [r3, #0]

	if(buzM == 1){
 80027aa:	4b22      	ldr	r3, [pc, #136]	; (8002834 <HAL_SYSTICK_Callback+0xb0>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d118      	bne.n	80027e4 <HAL_SYSTICK_Callback+0x60>
		if(buzC < 500) BUZ(1);
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_SYSTICK_Callback+0xb4>)
 80027b4:	881a      	ldrh	r2, [r3, #0]
 80027b6:	23fa      	movs	r3, #250	; 0xfa
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d206      	bcs.n	80027cc <HAL_SYSTICK_Callback+0x48>
 80027be:	4b1f      	ldr	r3, [pc, #124]	; (800283c <HAL_SYSTICK_Callback+0xb8>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	2108      	movs	r1, #8
 80027c4:	0018      	movs	r0, r3
 80027c6:	f001 fe5b 	bl	8004480 <HAL_GPIO_WritePin>
 80027ca:	e00b      	b.n	80027e4 <HAL_SYSTICK_Callback+0x60>
		else{
			buzM = buzC = 0;
 80027cc:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <HAL_SYSTICK_Callback+0xb4>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	801a      	strh	r2, [r3, #0]
 80027d2:	4b18      	ldr	r3, [pc, #96]	; (8002834 <HAL_SYSTICK_Callback+0xb0>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
			BUZ(0);
 80027d8:	4b18      	ldr	r3, [pc, #96]	; (800283c <HAL_SYSTICK_Callback+0xb8>)
 80027da:	2200      	movs	r2, #0
 80027dc:	2108      	movs	r1, #8
 80027de:	0018      	movs	r0, r3
 80027e0:	f001 fe4e 	bl	8004480 <HAL_GPIO_WritePin>
		}
	}

	if(touched()) curXY = getPoint(0);
 80027e4:	f7fe fbca 	bl	8000f7c <touched>
 80027e8:	1e03      	subs	r3, r0, #0
 80027ea:	d00d      	beq.n	8002808 <HAL_SYSTICK_Callback+0x84>
 80027ec:	4c14      	ldr	r4, [pc, #80]	; (8002840 <HAL_SYSTICK_Callback+0xbc>)
 80027ee:	003b      	movs	r3, r7
 80027f0:	2100      	movs	r1, #0
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7fe fbd8 	bl	8000fa8 <getPoint>
 80027f8:	003b      	movs	r3, r7
 80027fa:	0020      	movs	r0, r4
 80027fc:	0019      	movs	r1, r3
 80027fe:	2306      	movs	r3, #6
 8002800:	001a      	movs	r2, r3
 8002802:	f004 fc8d 	bl	8007120 <memcpy>
	else curXY = getPoint(1);
}
 8002806:	e00c      	b.n	8002822 <HAL_SYSTICK_Callback+0x9e>
	else curXY = getPoint(1);
 8002808:	4c0d      	ldr	r4, [pc, #52]	; (8002840 <HAL_SYSTICK_Callback+0xbc>)
 800280a:	003b      	movs	r3, r7
 800280c:	2101      	movs	r1, #1
 800280e:	0018      	movs	r0, r3
 8002810:	f7fe fbca 	bl	8000fa8 <getPoint>
 8002814:	003b      	movs	r3, r7
 8002816:	0020      	movs	r0, r4
 8002818:	0019      	movs	r1, r3
 800281a:	2306      	movs	r3, #6
 800281c:	001a      	movs	r2, r3
 800281e:	f004 fc7f 	bl	8007120 <memcpy>
}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b003      	add	sp, #12
 8002828:	bd90      	pop	{r4, r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	200002d4 	.word	0x200002d4
 8002830:	200000e0 	.word	0x200000e0
 8002834:	200002cc 	.word	0x200002cc
 8002838:	200002d0 	.word	0x200002d0
 800283c:	50000400 	.word	0x50000400
 8002840:	200002c4 	.word	0x200002c4

08002844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002848:	f000 fcce 	bl	80031e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800284c:	f000 f83e 	bl	80028cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002850:	f000 fa14 	bl	8002c7c <MX_GPIO_Init>
  MX_ADC_Init();
 8002854:	f000 f8b0 	bl	80029b8 <MX_ADC_Init>
  MX_DAC_Init();
 8002858:	f000 f912 	bl	8002a80 <MX_DAC_Init>
  MX_I2C1_Init();
 800285c:	f000 f93e 	bl	8002adc <MX_I2C1_Init>
  MX_DMA_Init();
 8002860:	f000 f9ee 	bl	8002c40 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002864:	f000 f9bc 	bl	8002be0 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8002868:	f000 f97e 	bl	8002b68 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <main+0x70>)
 800286e:	2100      	movs	r1, #0
 8002870:	0018      	movs	r0, r3
 8002872:	f001 fa49 	bl	8003d08 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_start);
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <main+0x74>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	480e      	ldr	r0, [pc, #56]	; (80028b4 <main+0x70>)
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	f001 fab4 	bl	8003dec <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim6);
 8002884:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <main+0x78>)
 8002886:	0018      	movs	r0, r3
 8002888:	f003 fb98 	bl	8005fbc <HAL_TIM_Base_Start_IT>
	FT6206_Begin(FT62XX_DEFAULT_THRESHOLD);
 800288c:	20ff      	movs	r0, #255	; 0xff
 800288e:	f7fe fa7b 	bl	8000d88 <FT6206_Begin>
	INIT_FT6206();
 8002892:	f7fe fb69 	bl	8000f68 <INIT_FT6206>

	LCD_Clear(set_bcolor);
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <main+0x7c>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	0018      	movs	r0, r3
 800289c:	f7fe fe86 	bl	80015ac <LCD_Clear>
	start();
 80028a0:	f7ff fa52 	bl	8001d48 <start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		main_fuc[modeF]();
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <main+0x80>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	001a      	movs	r2, r3
 80028aa:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <main+0x84>)
 80028ac:	0092      	lsls	r2, r2, #2
 80028ae:	58d3      	ldr	r3, [r2, r3]
 80028b0:	4798      	blx	r3
 80028b2:	e7f7      	b.n	80028a4 <main+0x60>
 80028b4:	20000184 	.word	0x20000184
 80028b8:	200002ce 	.word	0x200002ce
 80028bc:	200001e8 	.word	0x200001e8
 80028c0:	20000019 	.word	0x20000019
 80028c4:	200002ca 	.word	0x200002ca
 80028c8:	20000028 	.word	0x20000028

080028cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b09d      	sub	sp, #116	; 0x74
 80028d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028d2:	2438      	movs	r4, #56	; 0x38
 80028d4:	193b      	adds	r3, r7, r4
 80028d6:	0018      	movs	r0, r3
 80028d8:	2338      	movs	r3, #56	; 0x38
 80028da:	001a      	movs	r2, r3
 80028dc:	2100      	movs	r1, #0
 80028de:	f004 fc28 	bl	8007132 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028e2:	2324      	movs	r3, #36	; 0x24
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	0018      	movs	r0, r3
 80028e8:	2314      	movs	r3, #20
 80028ea:	001a      	movs	r2, r3
 80028ec:	2100      	movs	r1, #0
 80028ee:	f004 fc20 	bl	8007132 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	0018      	movs	r0, r3
 80028f6:	2320      	movs	r3, #32
 80028f8:	001a      	movs	r2, r3
 80028fa:	2100      	movs	r1, #0
 80028fc:	f004 fc19 	bl	8007132 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002900:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <SystemClock_Config+0xe4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a2b      	ldr	r2, [pc, #172]	; (80029b4 <SystemClock_Config+0xe8>)
 8002906:	401a      	ands	r2, r3
 8002908:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <SystemClock_Config+0xe4>)
 800290a:	2180      	movs	r1, #128	; 0x80
 800290c:	0109      	lsls	r1, r1, #4
 800290e:	430a      	orrs	r2, r1
 8002910:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002912:	0021      	movs	r1, r4
 8002914:	187b      	adds	r3, r7, r1
 8002916:	2202      	movs	r2, #2
 8002918:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2201      	movs	r2, #1
 800291e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002920:	187b      	adds	r3, r7, r1
 8002922:	2210      	movs	r2, #16
 8002924:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002926:	187b      	adds	r3, r7, r1
 8002928:	2202      	movs	r2, #2
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800292c:	187b      	adds	r3, r7, r1
 800292e:	2200      	movs	r2, #0
 8002930:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002932:	187b      	adds	r3, r7, r1
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	02d2      	lsls	r2, r2, #11
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800293a:	187b      	adds	r3, r7, r1
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	03d2      	lsls	r2, r2, #15
 8002940:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002942:	187b      	adds	r3, r7, r1
 8002944:	0018      	movs	r0, r3
 8002946:	f002 fbc5 	bl	80050d4 <HAL_RCC_OscConfig>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d001      	beq.n	8002952 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800294e:	f000 fa3b 	bl	8002dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002952:	2124      	movs	r1, #36	; 0x24
 8002954:	187b      	adds	r3, r7, r1
 8002956:	220f      	movs	r2, #15
 8002958:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800295a:	187b      	adds	r3, r7, r1
 800295c:	2203      	movs	r2, #3
 800295e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002960:	187b      	adds	r3, r7, r1
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002966:	187b      	adds	r3, r7, r1
 8002968:	2200      	movs	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800296c:	187b      	adds	r3, r7, r1
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002972:	187b      	adds	r3, r7, r1
 8002974:	2101      	movs	r1, #1
 8002976:	0018      	movs	r0, r3
 8002978:	f002 ff70 	bl	800585c <HAL_RCC_ClockConfig>
 800297c:	1e03      	subs	r3, r0, #0
 800297e:	d001      	beq.n	8002984 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002980:	f000 fa22 	bl	8002dc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	2209      	movs	r2, #9
 8002988:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	2200      	movs	r2, #0
 8002994:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	0018      	movs	r0, r3
 800299a:	f003 f983 	bl	8005ca4 <HAL_RCCEx_PeriphCLKConfig>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d001      	beq.n	80029a6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80029a2:	f000 fa11 	bl	8002dc8 <Error_Handler>
  }
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b01d      	add	sp, #116	; 0x74
 80029ac:	bd90      	pop	{r4, r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	40007000 	.word	0x40007000
 80029b4:	ffffe7ff 	.word	0xffffe7ff

080029b8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029be:	003b      	movs	r3, r7
 80029c0:	0018      	movs	r0, r3
 80029c2:	2308      	movs	r3, #8
 80029c4:	001a      	movs	r2, r3
 80029c6:	2100      	movs	r1, #0
 80029c8:	f004 fbb3 	bl	8007132 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80029cc:	4b2a      	ldr	r3, [pc, #168]	; (8002a78 <MX_ADC_Init+0xc0>)
 80029ce:	4a2b      	ldr	r2, [pc, #172]	; (8002a7c <MX_ADC_Init+0xc4>)
 80029d0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80029d2:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <MX_ADC_Init+0xc0>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <MX_ADC_Init+0xc0>)
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	05d2      	lsls	r2, r2, #23
 80029de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <MX_ADC_Init+0xc0>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80029e6:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <MX_ADC_Init+0xc0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80029ec:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <MX_ADC_Init+0xc0>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029f2:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <MX_ADC_Init+0xc0>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80029f8:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <MX_ADC_Init+0xc0>)
 80029fa:	2220      	movs	r2, #32
 80029fc:	2100      	movs	r1, #0
 80029fe:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <MX_ADC_Init+0xc0>)
 8002a02:	2221      	movs	r2, #33	; 0x21
 8002a04:	2100      	movs	r1, #0
 8002a06:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <MX_ADC_Init+0xc0>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <MX_ADC_Init+0xc0>)
 8002a10:	22c2      	movs	r2, #194	; 0xc2
 8002a12:	32ff      	adds	r2, #255	; 0xff
 8002a14:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002a16:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <MX_ADC_Init+0xc0>)
 8002a18:	222c      	movs	r2, #44	; 0x2c
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <MX_ADC_Init+0xc0>)
 8002a20:	2204      	movs	r2, #4
 8002a22:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <MX_ADC_Init+0xc0>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002a2a:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <MX_ADC_Init+0xc0>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <MX_ADC_Init+0xc0>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <MX_ADC_Init+0xc0>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <MX_ADC_Init+0xc0>)
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 fc66 	bl	8003310 <HAL_ADC_Init>
 8002a44:	1e03      	subs	r3, r0, #0
 8002a46:	d001      	beq.n	8002a4c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002a48:	f000 f9be 	bl	8002dc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002a4c:	003b      	movs	r3, r7
 8002a4e:	2201      	movs	r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002a52:	003b      	movs	r3, r7
 8002a54:	2280      	movs	r2, #128	; 0x80
 8002a56:	0152      	lsls	r2, r2, #5
 8002a58:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002a5a:	003a      	movs	r2, r7
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <MX_ADC_Init+0xc0>)
 8002a5e:	0011      	movs	r1, r2
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 fe63 	bl	800372c <HAL_ADC_ConfigChannel>
 8002a66:	1e03      	subs	r3, r0, #0
 8002a68:	d001      	beq.n	8002a6e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8002a6a:	f000 f9ad 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b002      	add	sp, #8
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	200000e0 	.word	0x200000e0
 8002a7c:	40012400 	.word	0x40012400

08002a80 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002a86:	003b      	movs	r3, r7
 8002a88:	0018      	movs	r0, r3
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	001a      	movs	r2, r3
 8002a8e:	2100      	movs	r1, #0
 8002a90:	f004 fb4f 	bl	8007132 <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <MX_DAC_Init+0x54>)
 8002a96:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <MX_DAC_Init+0x58>)
 8002a98:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <MX_DAC_Init+0x54>)
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f001 f8bc 	bl	8003c1a <HAL_DAC_Init>
 8002aa2:	1e03      	subs	r3, r0, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8002aa6:	f000 f98f 	bl	8002dc8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002aaa:	003b      	movs	r3, r7
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002ab0:	003b      	movs	r3, r7
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002ab6:	0039      	movs	r1, r7
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <MX_DAC_Init+0x54>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	0018      	movs	r0, r3
 8002abe:	f001 f8d7 	bl	8003c70 <HAL_DAC_ConfigChannel>
 8002ac2:	1e03      	subs	r3, r0, #0
 8002ac4:	d001      	beq.n	8002aca <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8002ac6:	f000 f97f 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b002      	add	sp, #8
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	20000184 	.word	0x20000184
 8002ad8:	40007400 	.word	0x40007400

08002adc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ae0:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <MX_I2C1_Init+0x80>)
 8002ae2:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <MX_I2C1_Init+0x84>)
 8002ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100413;
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <MX_I2C1_Init+0x80>)
 8002ae8:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <MX_I2C1_Init+0x88>)
 8002aea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <MX_I2C1_Init+0x80>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002af2:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <MX_I2C1_Init+0x80>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <MX_I2C1_Init+0x80>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <MX_I2C1_Init+0x80>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <MX_I2C1_Init+0x80>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <MX_I2C1_Init+0x80>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <MX_I2C1_Init+0x80>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <MX_I2C1_Init+0x80>)
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f001 fccf 	bl	80044bc <HAL_I2C_Init>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d001      	beq.n	8002b26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b22:	f000 f951 	bl	8002dc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <MX_I2C1_Init+0x80>)
 8002b28:	2100      	movs	r1, #0
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f002 fa22 	bl	8004f74 <HAL_I2CEx_ConfigAnalogFilter>
 8002b30:	1e03      	subs	r3, r0, #0
 8002b32:	d001      	beq.n	8002b38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b34:	f000 f948 	bl	8002dc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b38:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <MX_I2C1_Init+0x80>)
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f002 fa65 	bl	800500c <HAL_I2CEx_ConfigDigitalFilter>
 8002b42:	1e03      	subs	r3, r0, #0
 8002b44:	d001      	beq.n	8002b4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b46:	f000 f93f 	bl	8002dc8 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	015b      	lsls	r3, r3, #5
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f002 faa8 	bl	80050a4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	20000194 	.word	0x20000194
 8002b60:	40005400 	.word	0x40005400
 8002b64:	00100413 	.word	0x00100413

08002b68 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6e:	003b      	movs	r3, r7
 8002b70:	0018      	movs	r0, r3
 8002b72:	2308      	movs	r3, #8
 8002b74:	001a      	movs	r2, r3
 8002b76:	2100      	movs	r1, #0
 8002b78:	f004 fadb 	bl	8007132 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b7c:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <MX_TIM6_Init+0x6c>)
 8002b7e:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <MX_TIM6_Init+0x70>)
 8002b80:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4-1;
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <MX_TIM6_Init+0x6c>)
 8002b84:	2203      	movs	r2, #3
 8002b86:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <MX_TIM6_Init+0x6c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <MX_TIM6_Init+0x6c>)
 8002b90:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <MX_TIM6_Init+0x74>)
 8002b92:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <MX_TIM6_Init+0x6c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <MX_TIM6_Init+0x6c>)
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f003 f9cd 	bl	8005f3c <HAL_TIM_Base_Init>
 8002ba2:	1e03      	subs	r3, r0, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002ba6:	f000 f90f 	bl	8002dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002baa:	003b      	movs	r3, r7
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb0:	003b      	movs	r3, r7
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bb6:	003a      	movs	r2, r7
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <MX_TIM6_Init+0x6c>)
 8002bba:	0011      	movs	r1, r2
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f003 fba5 	bl	800630c <HAL_TIMEx_MasterConfigSynchronization>
 8002bc2:	1e03      	subs	r3, r0, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002bc6:	f000 f8ff 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b002      	add	sp, #8
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	200001e8 	.word	0x200001e8
 8002bd8:	40001000 	.word	0x40001000
 8002bdc:	0000ffff 	.word	0x0000ffff

08002be0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002be6:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <MX_USART1_UART_Init+0x5c>)
 8002be8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002bec:	22e1      	movs	r2, #225	; 0xe1
 8002bee:	0252      	lsls	r2, r2, #9
 8002bf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002c06:	220c      	movs	r2, #12
 8002c08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c16:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <MX_USART1_UART_Init+0x58>)
 8002c24:	0018      	movs	r0, r3
 8002c26:	f003 fbc9 	bl	80063bc <HAL_UART_Init>
 8002c2a:	1e03      	subs	r3, r0, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c2e:	f000 f8cb 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000228 	.word	0x20000228
 8002c3c:	40013800 	.word	0x40013800

08002c40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <MX_DMA_Init+0x38>)
 8002c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <MX_DMA_Init+0x38>)
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
 8002c52:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <MX_DMA_Init+0x38>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	2201      	movs	r2, #1
 8002c58:	4013      	ands	r3, r2
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2100      	movs	r1, #0
 8002c62:	2009      	movs	r0, #9
 8002c64:	f000 ffa0 	bl	8003ba8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002c68:	2009      	movs	r0, #9
 8002c6a:	f000 ffb2 	bl	8003bd2 <HAL_NVIC_EnableIRQ>

}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b002      	add	sp, #8
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	40021000 	.word	0x40021000

08002c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c82:	240c      	movs	r4, #12
 8002c84:	193b      	adds	r3, r7, r4
 8002c86:	0018      	movs	r0, r3
 8002c88:	2314      	movs	r3, #20
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	f004 fa50 	bl	8007132 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c92:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <MX_GPIO_Init+0x80>)
 8002c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c96:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <MX_GPIO_Init+0x80>)
 8002c98:	2101      	movs	r1, #1
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c9e:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <MX_GPIO_Init+0x80>)
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <MX_GPIO_Init+0x80>)
 8002cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <MX_GPIO_Init+0x80>)
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_GPIO_Init+0x80>)
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	2202      	movs	r2, #2
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <MX_GPIO_Init+0x84>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2108      	movs	r1, #8
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f001 fbd9 	bl	8004480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8002cce:	0021      	movs	r1, r4
 8002cd0:	187b      	adds	r3, r7, r1
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd6:	187b      	adds	r3, r7, r1
 8002cd8:	2201      	movs	r2, #1
 8002cda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	2202      	movs	r2, #2
 8002ce0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <MX_GPIO_Init+0x84>)
 8002cec:	0019      	movs	r1, r3
 8002cee:	0010      	movs	r0, r2
 8002cf0:	f001 fa50 	bl	8004194 <HAL_GPIO_Init>

}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b009      	add	sp, #36	; 0x24
 8002cfa:	bd90      	pop	{r4, r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	50000400 	.word	0x50000400

08002d04 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	// If this Code don`t play you need annotation inversion for 'value'

	static uint32_t tick, value;

	if(htim->Instance == TIM6){
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a25      	ldr	r2, [pc, #148]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d144      	bne.n	8002da0 <HAL_TIM_PeriodElapsedCallback+0x9c>
		pitch_set();
 8002d16:	f7fe fc81 	bl	800161c <pitch_set>
		if(++tick > (adcV / 4) * pitch){
 8002d1a:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	4b22      	ldr	r3, [pc, #136]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7fd fdb5 	bl	8000898 <__aeabi_ui2f>
 8002d2e:	1c04      	adds	r4, r0, #0
 8002d30:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	0018      	movs	r0, r3
 8002d38:	f7fd fdae 	bl	8000898 <__aeabi_ui2f>
 8002d3c:	1c02      	adds	r2, r0, #0
 8002d3e:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	1c19      	adds	r1, r3, #0
 8002d44:	1c10      	adds	r0, r2, #0
 8002d46:	f7fd fc81 	bl	800064c <__aeabi_fmul>
 8002d4a:	1c03      	adds	r3, r0, #0
 8002d4c:	1c19      	adds	r1, r3, #0
 8002d4e:	1c20      	adds	r0, r4, #0
 8002d50:	f7fd fa9e 	bl	8000290 <__aeabi_fcmpgt>
 8002d54:	1e03      	subs	r3, r0, #0
 8002d56:	d014      	beq.n	8002d82 <HAL_TIM_PeriodElapsedCallback+0x7e>
			tick = 0;
 8002d58:	4b14      	ldr	r3, [pc, #80]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
			if(value > 0) value = 0;
 8002d5e:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_TIM_PeriodElapsedCallback+0x6a>
 8002d66:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	e009      	b.n	8002d82 <HAL_TIM_PeriodElapsedCallback+0x7e>
			else value = (uint32_t)max_volume * 40;
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	001a      	movs	r2, r3
 8002d74:	0013      	movs	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	189b      	adds	r3, r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002d80:	601a      	str	r2, [r3, #0]
//			value = value > 0 ? 0 : max_volume * 40;
		}

		if(dac_start && adcV > 100) HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_TIM_PeriodElapsedCallback+0x9c>
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d906      	bls.n	8002da0 <HAL_TIM_PeriodElapsedCallback+0x9c>
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	480b      	ldr	r0, [pc, #44]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	f001 f826 	bl	8003dec <HAL_DAC_SetValue>
	}
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b003      	add	sp, #12
 8002da6:	bd90      	pop	{r4, r7, pc}
 8002da8:	40001000 	.word	0x40001000
 8002dac:	200002e8 	.word	0x200002e8
 8002db0:	200002d4 	.word	0x200002d4
 8002db4:	200002d8 	.word	0x200002d8
 8002db8:	200002ec 	.word	0x200002ec
 8002dbc:	20000024 	.word	0x20000024
 8002dc0:	200002ce 	.word	0x200002ce
 8002dc4:	20000184 	.word	0x20000184

08002dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dcc:	b672      	cpsid	i
}
 8002dce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002dd0:	e7fe      	b.n	8002dd0 <Error_Handler+0x8>
	...

08002dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd8:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <HAL_MspInit+0x24>)
 8002dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_MspInit+0x24>)
 8002dde:	2101      	movs	r1, #1
 8002de0:	430a      	orrs	r2, r1
 8002de2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002de4:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <HAL_MspInit+0x24>)
 8002de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_MspInit+0x24>)
 8002dea:	2180      	movs	r1, #128	; 0x80
 8002dec:	0549      	lsls	r1, r1, #21
 8002dee:	430a      	orrs	r2, r1
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	240c      	movs	r4, #12
 8002e06:	193b      	adds	r3, r7, r4
 8002e08:	0018      	movs	r0, r3
 8002e0a:	2314      	movs	r3, #20
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2100      	movs	r1, #0
 8002e10:	f004 f98f 	bl	8007132 <memset>
  if(hadc->Instance==ADC1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a2a      	ldr	r2, [pc, #168]	; (8002ec4 <HAL_ADC_MspInit+0xc8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d14d      	bne.n	8002eba <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e1e:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <HAL_ADC_MspInit+0xcc>)
 8002e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e22:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_ADC_MspInit+0xcc>)
 8002e24:	2180      	movs	r1, #128	; 0x80
 8002e26:	0089      	lsls	r1, r1, #2
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2c:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <HAL_ADC_MspInit+0xcc>)
 8002e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <HAL_ADC_MspInit+0xcc>)
 8002e32:	2101      	movs	r1, #1
 8002e34:	430a      	orrs	r2, r1
 8002e36:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e38:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_ADC_MspInit+0xcc>)
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	4013      	ands	r3, r2
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e44:	193b      	adds	r3, r7, r4
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e4a:	193b      	adds	r3, r7, r4
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	193b      	adds	r3, r7, r4
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e56:	193a      	adds	r2, r7, r4
 8002e58:	23a0      	movs	r3, #160	; 0xa0
 8002e5a:	05db      	lsls	r3, r3, #23
 8002e5c:	0011      	movs	r1, r2
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f001 f998 	bl	8004194 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e66:	4a1a      	ldr	r2, [pc, #104]	; (8002ed0 <HAL_ADC_MspInit+0xd4>)
 8002e68:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8002e6a:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e70:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e76:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002e7c:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e7e:	2280      	movs	r2, #128	; 0x80
 8002e80:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e84:	2280      	movs	r2, #128	; 0x80
 8002e86:	0052      	lsls	r2, r2, #1
 8002e88:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	00d2      	lsls	r2, r2, #3
 8002e90:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8002e92:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f000 ffbd 	bl	8003e20 <HAL_DMA_Init>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8002eaa:	f7ff ff8d 	bl	8002dc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a06      	ldr	r2, [pc, #24]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002eb2:	64da      	str	r2, [r3, #76]	; 0x4c
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_ADC_MspInit+0xd0>)
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b009      	add	sp, #36	; 0x24
 8002ec0:	bd90      	pop	{r4, r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	40012400 	.word	0x40012400
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	2000013c 	.word	0x2000013c
 8002ed0:	40020008 	.word	0x40020008

08002ed4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002ed4:	b590      	push	{r4, r7, lr}
 8002ed6:	b089      	sub	sp, #36	; 0x24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	240c      	movs	r4, #12
 8002ede:	193b      	adds	r3, r7, r4
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	2314      	movs	r3, #20
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	f004 f923 	bl	8007132 <memset>
  if(hdac->Instance==DAC)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <HAL_DAC_MspInit+0x80>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d12a      	bne.n	8002f4c <HAL_DAC_MspInit+0x78>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_DAC_MspInit+0x84>)
 8002ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <HAL_DAC_MspInit+0x84>)
 8002efc:	2180      	movs	r1, #128	; 0x80
 8002efe:	0589      	lsls	r1, r1, #22
 8002f00:	430a      	orrs	r2, r1
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f04:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <HAL_DAC_MspInit+0x84>)
 8002f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f08:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <HAL_DAC_MspInit+0x84>)
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_DAC_MspInit+0x84>)
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	2201      	movs	r2, #1
 8002f16:	4013      	ands	r3, r2
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f1c:	193b      	adds	r3, r7, r4
 8002f1e:	2210      	movs	r2, #16
 8002f20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f22:	193b      	adds	r3, r7, r4
 8002f24:	2203      	movs	r2, #3
 8002f26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	193b      	adds	r3, r7, r4
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2e:	193a      	adds	r2, r7, r4
 8002f30:	23a0      	movs	r3, #160	; 0xa0
 8002f32:	05db      	lsls	r3, r3, #23
 8002f34:	0011      	movs	r1, r2
 8002f36:	0018      	movs	r0, r3
 8002f38:	f001 f92c 	bl	8004194 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2100      	movs	r1, #0
 8002f40:	2011      	movs	r0, #17
 8002f42:	f000 fe31 	bl	8003ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f46:	2011      	movs	r0, #17
 8002f48:	f000 fe43 	bl	8003bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b009      	add	sp, #36	; 0x24
 8002f52:	bd90      	pop	{r4, r7, pc}
 8002f54:	40007400 	.word	0x40007400
 8002f58:	40021000 	.word	0x40021000

08002f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b089      	sub	sp, #36	; 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	240c      	movs	r4, #12
 8002f66:	193b      	adds	r3, r7, r4
 8002f68:	0018      	movs	r0, r3
 8002f6a:	2314      	movs	r3, #20
 8002f6c:	001a      	movs	r2, r3
 8002f6e:	2100      	movs	r1, #0
 8002f70:	f004 f8df 	bl	8007132 <memset>
  if(hi2c->Instance==I2C1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <HAL_I2C_MspInit+0x7c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d128      	bne.n	8002fd0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7e:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <HAL_I2C_MspInit+0x80>)
 8002f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f82:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <HAL_I2C_MspInit+0x80>)
 8002f84:	2102      	movs	r1, #2
 8002f86:	430a      	orrs	r2, r1
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f8a:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <HAL_I2C_MspInit+0x80>)
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	2202      	movs	r2, #2
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f96:	0021      	movs	r1, r4
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	22c0      	movs	r2, #192	; 0xc0
 8002f9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f9e:	187b      	adds	r3, r7, r1
 8002fa0:	2212      	movs	r2, #18
 8002fa2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fa4:	187b      	adds	r3, r7, r1
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	2203      	movs	r2, #3
 8002fae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002fb0:	187b      	adds	r3, r7, r1
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb6:	187b      	adds	r3, r7, r1
 8002fb8:	4a09      	ldr	r2, [pc, #36]	; (8002fe0 <HAL_I2C_MspInit+0x84>)
 8002fba:	0019      	movs	r1, r3
 8002fbc:	0010      	movs	r0, r2
 8002fbe:	f001 f8e9 	bl	8004194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_I2C_MspInit+0x80>)
 8002fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_I2C_MspInit+0x80>)
 8002fc8:	2180      	movs	r1, #128	; 0x80
 8002fca:	0389      	lsls	r1, r1, #14
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b009      	add	sp, #36	; 0x24
 8002fd6:	bd90      	pop	{r4, r7, pc}
 8002fd8:	40005400 	.word	0x40005400
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	50000400 	.word	0x50000400

08002fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	; (800301c <HAL_TIM_Base_MspInit+0x38>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d10d      	bne.n	8003012 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <HAL_TIM_Base_MspInit+0x3c>)
 8002ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_TIM_Base_MspInit+0x3c>)
 8002ffc:	2110      	movs	r1, #16
 8002ffe:	430a      	orrs	r2, r1
 8003000:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2100      	movs	r1, #0
 8003006:	2011      	movs	r0, #17
 8003008:	f000 fdce 	bl	8003ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800300c:	2011      	movs	r0, #17
 800300e:	f000 fde0 	bl	8003bd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	b002      	add	sp, #8
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	40001000 	.word	0x40001000
 8003020:	40021000 	.word	0x40021000

08003024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b089      	sub	sp, #36	; 0x24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	240c      	movs	r4, #12
 800302e:	193b      	adds	r3, r7, r4
 8003030:	0018      	movs	r0, r3
 8003032:	2314      	movs	r3, #20
 8003034:	001a      	movs	r2, r3
 8003036:	2100      	movs	r1, #0
 8003038:	f004 f87b 	bl	8007132 <memset>
  if(huart->Instance==USART1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a18      	ldr	r2, [pc, #96]	; (80030a4 <HAL_UART_MspInit+0x80>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d12a      	bne.n	800309c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <HAL_UART_MspInit+0x84>)
 8003048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800304a:	4b17      	ldr	r3, [pc, #92]	; (80030a8 <HAL_UART_MspInit+0x84>)
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	01c9      	lsls	r1, r1, #7
 8003050:	430a      	orrs	r2, r1
 8003052:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003054:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <HAL_UART_MspInit+0x84>)
 8003056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003058:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <HAL_UART_MspInit+0x84>)
 800305a:	2101      	movs	r1, #1
 800305c:	430a      	orrs	r2, r1
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <HAL_UART_MspInit+0x84>)
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	2201      	movs	r2, #1
 8003066:	4013      	ands	r3, r2
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800306c:	193b      	adds	r3, r7, r4
 800306e:	22c0      	movs	r2, #192	; 0xc0
 8003070:	00d2      	lsls	r2, r2, #3
 8003072:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003074:	0021      	movs	r1, r4
 8003076:	187b      	adds	r3, r7, r1
 8003078:	2202      	movs	r2, #2
 800307a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	187b      	adds	r3, r7, r1
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003082:	187b      	adds	r3, r7, r1
 8003084:	2203      	movs	r2, #3
 8003086:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003088:	187b      	adds	r3, r7, r1
 800308a:	2204      	movs	r2, #4
 800308c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308e:	187a      	adds	r2, r7, r1
 8003090:	23a0      	movs	r3, #160	; 0xa0
 8003092:	05db      	lsls	r3, r3, #23
 8003094:	0011      	movs	r1, r2
 8003096:	0018      	movs	r0, r3
 8003098:	f001 f87c 	bl	8004194 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b009      	add	sp, #36	; 0x24
 80030a2:	bd90      	pop	{r4, r7, pc}
 80030a4:	40013800 	.word	0x40013800
 80030a8:	40021000 	.word	0x40021000

080030ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <NMI_Handler+0x4>

080030b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <HardFault_Handler+0x4>

080030b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030d0:	f000 f8de 	bl	8003290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80030d4:	f000 fd9a 	bl	8003c0c <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80030d8:	46c0      	nop			; (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <DMA1_Channel1_IRQHandler+0x14>)
 80030e6:	0018      	movs	r0, r3
 80030e8:	f000 ff78 	bl	8003fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	2000013c 	.word	0x2000013c

080030f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <TIM6_DAC_IRQHandler+0x1c>)
 80030fe:	0018      	movs	r0, r3
 8003100:	f002 ffa8 	bl	8006054 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <TIM6_DAC_IRQHandler+0x20>)
 8003106:	0018      	movs	r0, r3
 8003108:	f000 fe42 	bl	8003d90 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	200001e8 	.word	0x200001e8
 8003118:	20000184 	.word	0x20000184

0800311c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003124:	4a14      	ldr	r2, [pc, #80]	; (8003178 <_sbrk+0x5c>)
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <_sbrk+0x60>)
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <_sbrk+0x64>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <_sbrk+0x64>)
 800313a:	4a12      	ldr	r2, [pc, #72]	; (8003184 <_sbrk+0x68>)
 800313c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <_sbrk+0x64>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	18d3      	adds	r3, r2, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	429a      	cmp	r2, r3
 800314a:	d207      	bcs.n	800315c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800314c:	f003 ffbe 	bl	80070cc <__errno>
 8003150:	0003      	movs	r3, r0
 8003152:	220c      	movs	r2, #12
 8003154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003156:	2301      	movs	r3, #1
 8003158:	425b      	negs	r3, r3
 800315a:	e009      	b.n	8003170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <_sbrk+0x64>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	18d2      	adds	r2, r2, r3
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <_sbrk+0x64>)
 800316c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b006      	add	sp, #24
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20002000 	.word	0x20002000
 800317c:	00000400 	.word	0x00000400
 8003180:	200002f0 	.word	0x200002f0
 8003184:	20000308 	.word	0x20000308

08003188 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003194:	480d      	ldr	r0, [pc, #52]	; (80031cc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003196:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003198:	f7ff fff6 	bl	8003188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800319c:	480c      	ldr	r0, [pc, #48]	; (80031d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800319e:	490d      	ldr	r1, [pc, #52]	; (80031d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031a0:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <LoopForever+0xe>)
  movs r3, #0
 80031a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031a4:	e002      	b.n	80031ac <LoopCopyDataInit>

080031a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031aa:	3304      	adds	r3, #4

080031ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031b0:	d3f9      	bcc.n	80031a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80031b4:	4c0a      	ldr	r4, [pc, #40]	; (80031e0 <LoopForever+0x16>)
  movs r3, #0
 80031b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031b8:	e001      	b.n	80031be <LoopFillZerobss>

080031ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031bc:	3204      	adds	r2, #4

080031be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031c0:	d3fb      	bcc.n	80031ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031c2:	f003 ff89 	bl	80070d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031c6:	f7ff fb3d 	bl	8002844 <main>

080031ca <LoopForever>:

LoopForever:
    b LoopForever
 80031ca:	e7fe      	b.n	80031ca <LoopForever>
   ldr   r0, =_estack
 80031cc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80031d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031d4:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80031d8:	08007d20 	.word	0x08007d20
  ldr r2, =_sbss
 80031dc:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80031e0:	20000308 	.word	0x20000308

080031e4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031e4:	e7fe      	b.n	80031e4 <ADC1_COMP_IRQHandler>
	...

080031e8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031ee:	1dfb      	adds	r3, r7, #7
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_Init+0x3c>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <HAL_Init+0x3c>)
 80031fa:	2140      	movs	r1, #64	; 0x40
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003200:	2003      	movs	r0, #3
 8003202:	f000 f811 	bl	8003228 <HAL_InitTick>
 8003206:	1e03      	subs	r3, r0, #0
 8003208:	d003      	beq.n	8003212 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800320a:	1dfb      	adds	r3, r7, #7
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	e001      	b.n	8003216 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003212:	f7ff fddf 	bl	8002dd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003216:	1dfb      	adds	r3, r7, #7
 8003218:	781b      	ldrb	r3, [r3, #0]
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	40022000 	.word	0x40022000

08003228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003228:	b590      	push	{r4, r7, lr}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003230:	4b14      	ldr	r3, [pc, #80]	; (8003284 <HAL_InitTick+0x5c>)
 8003232:	681c      	ldr	r4, [r3, #0]
 8003234:	4b14      	ldr	r3, [pc, #80]	; (8003288 <HAL_InitTick+0x60>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	0019      	movs	r1, r3
 800323a:	23fa      	movs	r3, #250	; 0xfa
 800323c:	0098      	lsls	r0, r3, #2
 800323e:	f7fc ff75 	bl	800012c <__udivsi3>
 8003242:	0003      	movs	r3, r0
 8003244:	0019      	movs	r1, r3
 8003246:	0020      	movs	r0, r4
 8003248:	f7fc ff70 	bl	800012c <__udivsi3>
 800324c:	0003      	movs	r3, r0
 800324e:	0018      	movs	r0, r3
 8003250:	f000 fccf 	bl	8003bf2 <HAL_SYSTICK_Config>
 8003254:	1e03      	subs	r3, r0, #0
 8003256:	d001      	beq.n	800325c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e00f      	b.n	800327c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b03      	cmp	r3, #3
 8003260:	d80b      	bhi.n	800327a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	2301      	movs	r3, #1
 8003266:	425b      	negs	r3, r3
 8003268:	2200      	movs	r2, #0
 800326a:	0018      	movs	r0, r3
 800326c:	f000 fc9c 	bl	8003ba8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_InitTick+0x64>)
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e000      	b.n	800327c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	b003      	add	sp, #12
 8003282:	bd90      	pop	{r4, r7, pc}
 8003284:	2000003c 	.word	0x2000003c
 8003288:	20000044 	.word	0x20000044
 800328c:	20000040 	.word	0x20000040

08003290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_IncTick+0x1c>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	001a      	movs	r2, r3
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_IncTick+0x20>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	18d2      	adds	r2, r2, r3
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <HAL_IncTick+0x20>)
 80032a2:	601a      	str	r2, [r3, #0]
}
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	20000044 	.word	0x20000044
 80032b0:	200002f4 	.word	0x200002f4

080032b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  return uwTick;
 80032b8:	4b02      	ldr	r3, [pc, #8]	; (80032c4 <HAL_GetTick+0x10>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	200002f4 	.word	0x200002f4

080032c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d0:	f7ff fff0 	bl	80032b4 <HAL_GetTick>
 80032d4:	0003      	movs	r3, r0
 80032d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	3301      	adds	r3, #1
 80032e0:	d005      	beq.n	80032ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_Delay+0x44>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	001a      	movs	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	189b      	adds	r3, r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	f7ff ffe0 	bl	80032b4 <HAL_GetTick>
 80032f4:	0002      	movs	r2, r0
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d8f7      	bhi.n	80032f0 <HAL_Delay+0x28>
  {
  }
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	46bd      	mov	sp, r7
 8003306:	b004      	add	sp, #16
 8003308:	bd80      	pop	{r7, pc}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	20000044 	.word	0x20000044

08003310 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e159      	b.n	80035d6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2250      	movs	r2, #80	; 0x50
 8003334:	2100      	movs	r1, #0
 8003336:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	0018      	movs	r0, r3
 800333c:	f7ff fd5e 	bl	8002dfc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	2210      	movs	r2, #16
 8003346:	4013      	ands	r3, r2
 8003348:	2b10      	cmp	r3, #16
 800334a:	d005      	beq.n	8003358 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2204      	movs	r2, #4
 8003354:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003356:	d00b      	beq.n	8003370 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335c:	2210      	movs	r2, #16
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2250      	movs	r2, #80	; 0x50
 8003368:	2100      	movs	r1, #0
 800336a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e132      	b.n	80035d6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003374:	4a9a      	ldr	r2, [pc, #616]	; (80035e0 <HAL_ADC_Init+0x2d0>)
 8003376:	4013      	ands	r3, r2
 8003378:	2202      	movs	r2, #2
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2203      	movs	r2, #3
 8003388:	4013      	ands	r3, r2
 800338a:	2b01      	cmp	r3, #1
 800338c:	d108      	bne.n	80033a0 <HAL_ADC_Init+0x90>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2201      	movs	r2, #1
 8003396:	4013      	ands	r3, r2
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_ADC_Init+0x90>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <HAL_ADC_Init+0x92>
 80033a0:	2300      	movs	r3, #0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d149      	bne.n	800343a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	23c0      	movs	r3, #192	; 0xc0
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d00b      	beq.n	80033ca <HAL_ADC_Init+0xba>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	05db      	lsls	r3, r3, #23
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d005      	beq.n	80033ca <HAL_ADC_Init+0xba>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	061b      	lsls	r3, r3, #24
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d111      	bne.n	80033ee <HAL_ADC_Init+0xde>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0092      	lsls	r2, r2, #2
 80033d6:	0892      	lsrs	r2, r2, #2
 80033d8:	611a      	str	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6919      	ldr	r1, [r3, #16]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	611a      	str	r2, [r3, #16]
 80033ec:	e014      	b.n	8003418 <HAL_ADC_Init+0x108>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	0092      	lsls	r2, r2, #2
 80033fa:	0892      	lsrs	r2, r2, #2
 80033fc:	611a      	str	r2, [r3, #16]
 80033fe:	4b79      	ldr	r3, [pc, #484]	; (80035e4 <HAL_ADC_Init+0x2d4>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b78      	ldr	r3, [pc, #480]	; (80035e4 <HAL_ADC_Init+0x2d4>)
 8003404:	4978      	ldr	r1, [pc, #480]	; (80035e8 <HAL_ADC_Init+0x2d8>)
 8003406:	400a      	ands	r2, r1
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	4b76      	ldr	r3, [pc, #472]	; (80035e4 <HAL_ADC_Init+0x2d4>)
 800340c:	6819      	ldr	r1, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	4b74      	ldr	r3, [pc, #464]	; (80035e4 <HAL_ADC_Init+0x2d4>)
 8003414:	430a      	orrs	r2, r1
 8003416:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2118      	movs	r1, #24
 8003424:	438a      	bics	r2, r1
 8003426:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68d9      	ldr	r1, [r3, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800343a:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <HAL_ADC_Init+0x2d4>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b69      	ldr	r3, [pc, #420]	; (80035e4 <HAL_ADC_Init+0x2d4>)
 8003440:	496a      	ldr	r1, [pc, #424]	; (80035ec <HAL_ADC_Init+0x2dc>)
 8003442:	400a      	ands	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8003446:	4b67      	ldr	r3, [pc, #412]	; (80035e4 <HAL_ADC_Init+0x2d4>)
 8003448:	6819      	ldr	r1, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344e:	065a      	lsls	r2, r3, #25
 8003450:	4b64      	ldr	r3, [pc, #400]	; (80035e4 <HAL_ADC_Init+0x2d4>)
 8003452:	430a      	orrs	r2, r1
 8003454:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	2380      	movs	r3, #128	; 0x80
 800345e:	055b      	lsls	r3, r3, #21
 8003460:	4013      	ands	r3, r2
 8003462:	d108      	bne.n	8003476 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	0549      	lsls	r1, r1, #21
 8003472:	430a      	orrs	r2, r1
 8003474:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	495b      	ldr	r1, [pc, #364]	; (80035f0 <HAL_ADC_Init+0x2e0>)
 8003482:	400a      	ands	r2, r1
 8003484:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68d9      	ldr	r1, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d101      	bne.n	800349c <HAL_ADC_Init+0x18c>
 8003498:	2304      	movs	r3, #4
 800349a:	e000      	b.n	800349e <HAL_ADC_Init+0x18e>
 800349c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800349e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2020      	movs	r0, #32
 80034a4:	5c1b      	ldrb	r3, [r3, r0]
 80034a6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80034a8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	202c      	movs	r0, #44	; 0x2c
 80034ae:	5c1b      	ldrb	r3, [r3, r0]
 80034b0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80034b2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80034b8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80034c0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80034c8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d6:	23c2      	movs	r3, #194	; 0xc2
 80034d8:	33ff      	adds	r3, #255	; 0xff
 80034da:	429a      	cmp	r2, r3
 80034dc:	d00b      	beq.n	80034f6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68d9      	ldr	r1, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2221      	movs	r2, #33	; 0x21
 80034fa:	5c9b      	ldrb	r3, [r3, r2]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d11a      	bne.n	8003536 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	5c9b      	ldrb	r3, [r3, r2]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2180      	movs	r1, #128	; 0x80
 8003516:	0249      	lsls	r1, r1, #9
 8003518:	430a      	orrs	r2, r1
 800351a:	60da      	str	r2, [r3, #12]
 800351c:	e00b      	b.n	8003536 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	2220      	movs	r2, #32
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	2201      	movs	r2, #1
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	2b01      	cmp	r3, #1
 800353c:	d11f      	bne.n	800357e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	492a      	ldr	r1, [pc, #168]	; (80035f4 <HAL_ADC_Init+0x2e4>)
 800354a:	400a      	ands	r2, r1
 800354c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6919      	ldr	r1, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800355c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8003562:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2101      	movs	r1, #1
 8003578:	430a      	orrs	r2, r1
 800357a:	611a      	str	r2, [r3, #16]
 800357c:	e00e      	b.n	800359c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2201      	movs	r2, #1
 8003586:	4013      	ands	r3, r2
 8003588:	2b01      	cmp	r3, #1
 800358a:	d107      	bne.n	800359c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2101      	movs	r1, #1
 8003598:	438a      	bics	r2, r1
 800359a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2107      	movs	r1, #7
 80035a8:	438a      	bics	r2, r1
 80035aa:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6959      	ldr	r1, [r3, #20]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	2203      	movs	r2, #3
 80035ca:	4393      	bics	r3, r2
 80035cc:	2201      	movs	r2, #1
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	0018      	movs	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	b002      	add	sp, #8
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	fffffefd 	.word	0xfffffefd
 80035e4:	40012708 	.word	0x40012708
 80035e8:	ffc3ffff 	.word	0xffc3ffff
 80035ec:	fdffffff 	.word	0xfdffffff
 80035f0:	fffe0219 	.word	0xfffe0219
 80035f4:	fffffc03 	.word	0xfffffc03

080035f8 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80035f8:	b590      	push	{r4, r7, lr}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003604:	2317      	movs	r3, #23
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2204      	movs	r2, #4
 8003614:	4013      	ands	r3, r2
 8003616:	d15e      	bne.n	80036d6 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2250      	movs	r2, #80	; 0x50
 800361c:	5c9b      	ldrb	r3, [r3, r2]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_ADC_Start_DMA+0x2e>
 8003622:	2302      	movs	r3, #2
 8003624:	e05e      	b.n	80036e4 <HAL_ADC_Start_DMA+0xec>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2250      	movs	r2, #80	; 0x50
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2101      	movs	r1, #1
 800363a:	430a      	orrs	r2, r1
 800363c:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d007      	beq.n	8003656 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003646:	2317      	movs	r3, #23
 8003648:	18fc      	adds	r4, r7, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	0018      	movs	r0, r3
 800364e:	f000 f8f3 	bl	8003838 <ADC_Enable>
 8003652:	0003      	movs	r3, r0
 8003654:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003656:	2317      	movs	r3, #23
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d13e      	bne.n	80036de <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	4a21      	ldr	r2, [pc, #132]	; (80036ec <HAL_ADC_Start_DMA+0xf4>)
 8003666:	4013      	ands	r3, r2
 8003668:	2280      	movs	r2, #128	; 0x80
 800366a:	0052      	lsls	r2, r2, #1
 800366c:	431a      	orrs	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2250      	movs	r2, #80	; 0x50
 800367c:	2100      	movs	r1, #0
 800367e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003684:	4a1a      	ldr	r2, [pc, #104]	; (80036f0 <HAL_ADC_Start_DMA+0xf8>)
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368c:	4a19      	ldr	r2, [pc, #100]	; (80036f4 <HAL_ADC_Start_DMA+0xfc>)
 800368e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003694:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <HAL_ADC_Start_DMA+0x100>)
 8003696:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	221c      	movs	r2, #28
 800369e:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2110      	movs	r1, #16
 80036ac:	430a      	orrs	r2, r1
 80036ae:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3340      	adds	r3, #64	; 0x40
 80036ba:	0019      	movs	r1, r3
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f000 fc26 	bl	8003f10 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2104      	movs	r1, #4
 80036d0:	430a      	orrs	r2, r1
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	e003      	b.n	80036de <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036d6:	2317      	movs	r3, #23
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	2202      	movs	r2, #2
 80036dc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80036de:	2317      	movs	r3, #23
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	781b      	ldrb	r3, [r3, #0]
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b007      	add	sp, #28
 80036ea:	bd90      	pop	{r4, r7, pc}
 80036ec:	fffff0fe 	.word	0xfffff0fe
 80036f0:	08003909 	.word	0x08003909
 80036f4:	080039bd 	.word	0x080039bd
 80036f8:	080039db 	.word	0x080039db

080036fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003704:	46c0      	nop			; (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b002      	add	sp, #8
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003714:	46c0      	nop			; (mov r8, r8)
 8003716:	46bd      	mov	sp, r7
 8003718:	b002      	add	sp, #8
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b002      	add	sp, #8
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2250      	movs	r2, #80	; 0x50
 800373a:	5c9b      	ldrb	r3, [r3, r2]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x18>
 8003740:	2302      	movs	r3, #2
 8003742:	e06c      	b.n	800381e <HAL_ADC_ConfigChannel+0xf2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2250      	movs	r2, #80	; 0x50
 8003748:	2101      	movs	r1, #1
 800374a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2204      	movs	r2, #4
 8003754:	4013      	ands	r3, r2
 8003756:	d00b      	beq.n	8003770 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375c:	2220      	movs	r2, #32
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2250      	movs	r2, #80	; 0x50
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e056      	b.n	800381e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a2c      	ldr	r2, [pc, #176]	; (8003828 <HAL_ADC_ConfigChannel+0xfc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d028      	beq.n	80037cc <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	035b      	lsls	r3, r3, #13
 8003786:	0b5a      	lsrs	r2, r3, #13
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	02db      	lsls	r3, r3, #11
 8003798:	4013      	ands	r3, r2
 800379a:	d009      	beq.n	80037b0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800379c:	4b23      	ldr	r3, [pc, #140]	; (800382c <HAL_ADC_ConfigChannel+0x100>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b22      	ldr	r3, [pc, #136]	; (800382c <HAL_ADC_ConfigChannel+0x100>)
 80037a2:	2180      	movs	r1, #128	; 0x80
 80037a4:	0409      	lsls	r1, r1, #16
 80037a6:	430a      	orrs	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80037aa:	200a      	movs	r0, #10
 80037ac:	f000 f930 	bl	8003a10 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	029b      	lsls	r3, r3, #10
 80037b8:	4013      	ands	r3, r2
 80037ba:	d02b      	beq.n	8003814 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80037bc:	4b1b      	ldr	r3, [pc, #108]	; (800382c <HAL_ADC_ConfigChannel+0x100>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b1a      	ldr	r3, [pc, #104]	; (800382c <HAL_ADC_ConfigChannel+0x100>)
 80037c2:	2180      	movs	r1, #128	; 0x80
 80037c4:	03c9      	lsls	r1, r1, #15
 80037c6:	430a      	orrs	r2, r1
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e023      	b.n	8003814 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	035b      	lsls	r3, r3, #13
 80037d8:	0b5b      	lsrs	r3, r3, #13
 80037da:	43d9      	mvns	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	400a      	ands	r2, r1
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	02db      	lsls	r3, r3, #11
 80037ec:	4013      	ands	r3, r2
 80037ee:	d005      	beq.n	80037fc <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80037f0:	4b0e      	ldr	r3, [pc, #56]	; (800382c <HAL_ADC_ConfigChannel+0x100>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b0d      	ldr	r3, [pc, #52]	; (800382c <HAL_ADC_ConfigChannel+0x100>)
 80037f6:	490e      	ldr	r1, [pc, #56]	; (8003830 <HAL_ADC_ConfigChannel+0x104>)
 80037f8:	400a      	ands	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	029b      	lsls	r3, r3, #10
 8003804:	4013      	ands	r3, r2
 8003806:	d005      	beq.n	8003814 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <HAL_ADC_ConfigChannel+0x100>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b07      	ldr	r3, [pc, #28]	; (800382c <HAL_ADC_ConfigChannel+0x100>)
 800380e:	4909      	ldr	r1, [pc, #36]	; (8003834 <HAL_ADC_ConfigChannel+0x108>)
 8003810:	400a      	ands	r2, r1
 8003812:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2250      	movs	r2, #80	; 0x50
 8003818:	2100      	movs	r1, #0
 800381a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b002      	add	sp, #8
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	00001001 	.word	0x00001001
 800382c:	40012708 	.word	0x40012708
 8003830:	ff7fffff 	.word	0xff7fffff
 8003834:	ffbfffff 	.word	0xffbfffff

08003838 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2203      	movs	r2, #3
 800384c:	4013      	ands	r3, r2
 800384e:	2b01      	cmp	r3, #1
 8003850:	d108      	bne.n	8003864 <ADC_Enable+0x2c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2201      	movs	r2, #1
 800385a:	4013      	ands	r3, r2
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <ADC_Enable+0x2c>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <ADC_Enable+0x2e>
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d146      	bne.n	80038f8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4a24      	ldr	r2, [pc, #144]	; (8003904 <ADC_Enable+0xcc>)
 8003872:	4013      	ands	r3, r2
 8003874:	d00d      	beq.n	8003892 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	2210      	movs	r2, #16
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	2201      	movs	r2, #1
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e033      	b.n	80038fa <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2101      	movs	r1, #1
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80038a2:	2001      	movs	r0, #1
 80038a4:	f000 f8b4 	bl	8003a10 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80038a8:	f7ff fd04 	bl	80032b4 <HAL_GetTick>
 80038ac:	0003      	movs	r3, r0
 80038ae:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038b0:	e01b      	b.n	80038ea <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038b2:	f7ff fcff 	bl	80032b4 <HAL_GetTick>
 80038b6:	0002      	movs	r2, r0
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b0a      	cmp	r3, #10
 80038be:	d914      	bls.n	80038ea <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2201      	movs	r2, #1
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d00d      	beq.n	80038ea <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	2210      	movs	r2, #16
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	2201      	movs	r2, #1
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e007      	b.n	80038fa <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2201      	movs	r2, #1
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d1dc      	bne.n	80038b2 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	0018      	movs	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	80000017 	.word	0x80000017

08003908 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	2250      	movs	r2, #80	; 0x50
 800391c:	4013      	ands	r3, r2
 800391e:	d141      	bne.n	80039a4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003924:	2280      	movs	r2, #128	; 0x80
 8003926:	0092      	lsls	r2, r2, #2
 8003928:	431a      	orrs	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	23c0      	movs	r3, #192	; 0xc0
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	4013      	ands	r3, r2
 800393a:	d12e      	bne.n	800399a <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003942:	2b00      	cmp	r3, #0
 8003944:	d129      	bne.n	800399a <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2208      	movs	r2, #8
 800394e:	4013      	ands	r3, r2
 8003950:	2b08      	cmp	r3, #8
 8003952:	d122      	bne.n	800399a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2204      	movs	r2, #4
 800395c:	4013      	ands	r3, r2
 800395e:	d110      	bne.n	8003982 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	210c      	movs	r1, #12
 800396c:	438a      	bics	r2, r1
 800396e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	4a10      	ldr	r2, [pc, #64]	; (80039b8 <ADC_DMAConvCplt+0xb0>)
 8003976:	4013      	ands	r3, r2
 8003978:	2201      	movs	r2, #1
 800397a:	431a      	orrs	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	655a      	str	r2, [r3, #84]	; 0x54
 8003980:	e00b      	b.n	800399a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	2220      	movs	r2, #32
 8003988:	431a      	orrs	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003992:	2201      	movs	r2, #1
 8003994:	431a      	orrs	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	0018      	movs	r0, r3
 800399e:	f7ff fead 	bl	80036fc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80039a2:	e005      	b.n	80039b0 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	0010      	movs	r0, r2
 80039ae:	4798      	blx	r3
}
 80039b0:	46c0      	nop			; (mov r8, r8)
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b004      	add	sp, #16
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	fffffefe 	.word	0xfffffefe

080039bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7ff fe9d 	bl	800370c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b004      	add	sp, #16
 80039d8:	bd80      	pop	{r7, pc}

080039da <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	2240      	movs	r2, #64	; 0x40
 80039ee:	431a      	orrs	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f8:	2204      	movs	r2, #4
 80039fa:	431a      	orrs	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	0018      	movs	r0, r3
 8003a04:	f7ff fe8a 	bl	800371c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b004      	add	sp, #16
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <ADC_DelayMicroSecond+0x38>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	490b      	ldr	r1, [pc, #44]	; (8003a4c <ADC_DelayMicroSecond+0x3c>)
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f7fc fb84 	bl	800012c <__udivsi3>
 8003a24:	0003      	movs	r3, r0
 8003a26:	001a      	movs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4353      	muls	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8003a2e:	e002      	b.n	8003a36 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f9      	bne.n	8003a30 <ADC_DelayMicroSecond+0x20>
  }
}
 8003a3c:	46c0      	nop			; (mov r8, r8)
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b004      	add	sp, #16
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	2000003c 	.word	0x2000003c
 8003a4c:	000f4240 	.word	0x000f4240

08003a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	0002      	movs	r2, r0
 8003a58:	1dfb      	adds	r3, r7, #7
 8003a5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a5c:	1dfb      	adds	r3, r7, #7
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b7f      	cmp	r3, #127	; 0x7f
 8003a62:	d809      	bhi.n	8003a78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a64:	1dfb      	adds	r3, r7, #7
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	001a      	movs	r2, r3
 8003a6a:	231f      	movs	r3, #31
 8003a6c:	401a      	ands	r2, r3
 8003a6e:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <__NVIC_EnableIRQ+0x30>)
 8003a70:	2101      	movs	r1, #1
 8003a72:	4091      	lsls	r1, r2
 8003a74:	000a      	movs	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]
  }
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	e000e100 	.word	0xe000e100

08003a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	0002      	movs	r2, r0
 8003a8c:	6039      	str	r1, [r7, #0]
 8003a8e:	1dfb      	adds	r3, r7, #7
 8003a90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a92:	1dfb      	adds	r3, r7, #7
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b7f      	cmp	r3, #127	; 0x7f
 8003a98:	d828      	bhi.n	8003aec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a9a:	4a2f      	ldr	r2, [pc, #188]	; (8003b58 <__NVIC_SetPriority+0xd4>)
 8003a9c:	1dfb      	adds	r3, r7, #7
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	b25b      	sxtb	r3, r3
 8003aa2:	089b      	lsrs	r3, r3, #2
 8003aa4:	33c0      	adds	r3, #192	; 0xc0
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	589b      	ldr	r3, [r3, r2]
 8003aaa:	1dfa      	adds	r2, r7, #7
 8003aac:	7812      	ldrb	r2, [r2, #0]
 8003aae:	0011      	movs	r1, r2
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	00d2      	lsls	r2, r2, #3
 8003ab6:	21ff      	movs	r1, #255	; 0xff
 8003ab8:	4091      	lsls	r1, r2
 8003aba:	000a      	movs	r2, r1
 8003abc:	43d2      	mvns	r2, r2
 8003abe:	401a      	ands	r2, r3
 8003ac0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	019b      	lsls	r3, r3, #6
 8003ac6:	22ff      	movs	r2, #255	; 0xff
 8003ac8:	401a      	ands	r2, r3
 8003aca:	1dfb      	adds	r3, r7, #7
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	0018      	movs	r0, r3
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	4003      	ands	r3, r0
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ad8:	481f      	ldr	r0, [pc, #124]	; (8003b58 <__NVIC_SetPriority+0xd4>)
 8003ada:	1dfb      	adds	r3, r7, #7
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	b25b      	sxtb	r3, r3
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	33c0      	adds	r3, #192	; 0xc0
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003aea:	e031      	b.n	8003b50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003aec:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <__NVIC_SetPriority+0xd8>)
 8003aee:	1dfb      	adds	r3, r7, #7
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	0019      	movs	r1, r3
 8003af4:	230f      	movs	r3, #15
 8003af6:	400b      	ands	r3, r1
 8003af8:	3b08      	subs	r3, #8
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	3306      	adds	r3, #6
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	18d3      	adds	r3, r2, r3
 8003b02:	3304      	adds	r3, #4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	1dfa      	adds	r2, r7, #7
 8003b08:	7812      	ldrb	r2, [r2, #0]
 8003b0a:	0011      	movs	r1, r2
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	400a      	ands	r2, r1
 8003b10:	00d2      	lsls	r2, r2, #3
 8003b12:	21ff      	movs	r1, #255	; 0xff
 8003b14:	4091      	lsls	r1, r2
 8003b16:	000a      	movs	r2, r1
 8003b18:	43d2      	mvns	r2, r2
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	019b      	lsls	r3, r3, #6
 8003b22:	22ff      	movs	r2, #255	; 0xff
 8003b24:	401a      	ands	r2, r3
 8003b26:	1dfb      	adds	r3, r7, #7
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	4003      	ands	r3, r0
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b34:	4809      	ldr	r0, [pc, #36]	; (8003b5c <__NVIC_SetPriority+0xd8>)
 8003b36:	1dfb      	adds	r3, r7, #7
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	001c      	movs	r4, r3
 8003b3c:	230f      	movs	r3, #15
 8003b3e:	4023      	ands	r3, r4
 8003b40:	3b08      	subs	r3, #8
 8003b42:	089b      	lsrs	r3, r3, #2
 8003b44:	430a      	orrs	r2, r1
 8003b46:	3306      	adds	r3, #6
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	18c3      	adds	r3, r0, r3
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	601a      	str	r2, [r3, #0]
}
 8003b50:	46c0      	nop			; (mov r8, r8)
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b003      	add	sp, #12
 8003b56:	bd90      	pop	{r4, r7, pc}
 8003b58:	e000e100 	.word	0xe000e100
 8003b5c:	e000ed00 	.word	0xe000ed00

08003b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	1e5a      	subs	r2, r3, #1
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	045b      	lsls	r3, r3, #17
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d301      	bcc.n	8003b78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b74:	2301      	movs	r3, #1
 8003b76:	e010      	b.n	8003b9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b78:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <SysTick_Config+0x44>)
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	3a01      	subs	r2, #1
 8003b7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b80:	2301      	movs	r3, #1
 8003b82:	425b      	negs	r3, r3
 8003b84:	2103      	movs	r1, #3
 8003b86:	0018      	movs	r0, r3
 8003b88:	f7ff ff7c 	bl	8003a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <SysTick_Config+0x44>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b92:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <SysTick_Config+0x44>)
 8003b94:	2207      	movs	r2, #7
 8003b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b002      	add	sp, #8
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	e000e010 	.word	0xe000e010

08003ba8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
 8003bb2:	210f      	movs	r1, #15
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	1c02      	adds	r2, r0, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	187b      	adds	r3, r7, r1
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	b25b      	sxtb	r3, r3
 8003bc2:	0011      	movs	r1, r2
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f7ff ff5d 	bl	8003a84 <__NVIC_SetPriority>
}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b004      	add	sp, #16
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	0002      	movs	r2, r0
 8003bda:	1dfb      	adds	r3, r7, #7
 8003bdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bde:	1dfb      	adds	r3, r7, #7
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	b25b      	sxtb	r3, r3
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7ff ff33 	bl	8003a50 <__NVIC_EnableIRQ>
}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b002      	add	sp, #8
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f7ff ffaf 	bl	8003b60 <SysTick_Config>
 8003c02:	0003      	movs	r3, r0
}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b002      	add	sp, #8
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003c10:	f7fe fdb8 	bl	8002784 <HAL_SYSTICK_Callback>
}
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e015      	b.n	8003c58 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	791b      	ldrb	r3, [r3, #4]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7ff f948 	bl	8002ed4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	60da      	str	r2, [r3, #12]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	0018      	movs	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b002      	add	sp, #8
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b002      	add	sp, #8
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	795b      	ldrb	r3, [r3, #5]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_DAC_ConfigChannel+0x20>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e035      	b.n	8003cfc <HAL_DAC_ConfigChannel+0x8c>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2202      	movs	r2, #2
 8003c9a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003ca4:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <HAL_DAC_ConfigChannel+0x94>)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	0013      	movs	r3, r2
 8003cac:	43da      	mvns	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	0013      	movs	r3, r2
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	21c0      	movs	r1, #192	; 0xc0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4099      	lsls	r1, r3
 8003ce2:	000b      	movs	r3, r1
 8003ce4:	43d9      	mvns	r1, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	400a      	ands	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b006      	add	sp, #24
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	00000ffe 	.word	0x00000ffe

08003d08 <HAL_DAC_Start>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	795b      	ldrb	r3, [r3, #5]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_DAC_Start+0x1e>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e030      	b.n	8003d88 <HAL_DAC_Start+0x80>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6819      	ldr	r1, [r3, #0]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]

  tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	4013      	ands	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]
  tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2238      	movs	r2, #56	; 0x38
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	60bb      	str	r3, [r7, #8]
  /* Check if software trigger enabled */
  if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d10a      	bne.n	8003d7a <HAL_DAC_Start+0x72>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b38      	cmp	r3, #56	; 0x38
 8003d68:	d107      	bne.n	8003d7a <HAL_DAC_Start+0x72>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	0018      	movs	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b004      	add	sp, #16
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check underrun flag of DAC channel 1 */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d9e:	2380      	movs	r3, #128	; 0x80
 8003da0:	019b      	lsls	r3, r3, #6
 8003da2:	401a      	ands	r2, r3
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	019b      	lsls	r3, r3, #6
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d119      	bne.n	8003de0 <HAL_DAC_IRQHandler+0x50>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2204      	movs	r2, #4
 8003db0:	711a      	strb	r2, [r3, #4]

    /* Set DAC error code to chanel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	60da      	str	r2, [r3, #12]

    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	0192      	lsls	r2, r2, #6
 8003dc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable the selected DAC channel1 DMA request */
    CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4905      	ldr	r1, [pc, #20]	; (8003de8 <HAL_DAC_IRQHandler+0x58>)
 8003dd4:	400a      	ands	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]

    /* Error callback */
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f7ff ff40 	bl	8003c60 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b002      	add	sp, #8
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	ffffefff 	.word	0xffffefff

08003dec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance; 
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	617b      	str	r3, [r7, #20]
  tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	18d3      	adds	r3, r2, r3
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b006      	add	sp, #24
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e061      	b.n	8003ef6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a32      	ldr	r2, [pc, #200]	; (8003f00 <HAL_DMA_Init+0xe0>)
 8003e38:	4694      	mov	ip, r2
 8003e3a:	4463      	add	r3, ip
 8003e3c:	2114      	movs	r1, #20
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f7fc f974 	bl	800012c <__udivsi3>
 8003e44:	0003      	movs	r3, r0
 8003e46:	009a      	lsls	r2, r3, #2
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a2d      	ldr	r2, [pc, #180]	; (8003f04 <HAL_DMA_Init+0xe4>)
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2225      	movs	r2, #37	; 0x25
 8003e56:	2102      	movs	r1, #2
 8003e58:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a28      	ldr	r2, [pc, #160]	; (8003f08 <HAL_DMA_Init+0xe8>)
 8003e66:	4013      	ands	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	01db      	lsls	r3, r3, #7
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d018      	beq.n	8003ede <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003eac:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <HAL_DMA_Init+0xec>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	211c      	movs	r1, #28
 8003eb6:	400b      	ands	r3, r1
 8003eb8:	210f      	movs	r1, #15
 8003eba:	4099      	lsls	r1, r3
 8003ebc:	000b      	movs	r3, r1
 8003ebe:	43d9      	mvns	r1, r3
 8003ec0:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <HAL_DMA_Init+0xec>)
 8003ec2:	400a      	ands	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ec6:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <HAL_DMA_Init+0xec>)
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	201c      	movs	r0, #28
 8003ed4:	4003      	ands	r3, r0
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <HAL_DMA_Init+0xec>)
 8003eda:	430a      	orrs	r2, r1
 8003edc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2225      	movs	r2, #37	; 0x25
 8003ee8:	2101      	movs	r1, #1
 8003eea:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2224      	movs	r2, #36	; 0x24
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b004      	add	sp, #16
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	bffdfff8 	.word	0xbffdfff8
 8003f04:	40020000 	.word	0x40020000
 8003f08:	ffff800f 	.word	0xffff800f
 8003f0c:	400200a8 	.word	0x400200a8

08003f10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1e:	2317      	movs	r3, #23
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2224      	movs	r2, #36	; 0x24
 8003f2a:	5c9b      	ldrb	r3, [r3, r2]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_DMA_Start_IT+0x24>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e04f      	b.n	8003fd4 <HAL_DMA_Start_IT+0xc4>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2224      	movs	r2, #36	; 0x24
 8003f38:	2101      	movs	r1, #1
 8003f3a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2225      	movs	r2, #37	; 0x25
 8003f40:	5c9b      	ldrb	r3, [r3, r2]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d13a      	bne.n	8003fbe <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2225      	movs	r2, #37	; 0x25
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2101      	movs	r1, #1
 8003f62:	438a      	bics	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f8e3 	bl	8004138 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	210e      	movs	r1, #14
 8003f86:	430a      	orrs	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e00f      	b.n	8003fac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2104      	movs	r1, #4
 8003f98:	438a      	bics	r2, r1
 8003f9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	210a      	movs	r1, #10
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	e007      	b.n	8003fce <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2224      	movs	r2, #36	; 0x24
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fc6:	2317      	movs	r3, #23
 8003fc8:	18fb      	adds	r3, r7, r3
 8003fca:	2202      	movs	r2, #2
 8003fcc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003fce:	2317      	movs	r3, #23
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	781b      	ldrb	r3, [r3, #0]
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b006      	add	sp, #24
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff8:	221c      	movs	r2, #28
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	409a      	lsls	r2, r3
 8004000:	0013      	movs	r3, r2
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4013      	ands	r3, r2
 8004006:	d026      	beq.n	8004056 <HAL_DMA_IRQHandler+0x7a>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2204      	movs	r2, #4
 800400c:	4013      	ands	r3, r2
 800400e:	d022      	beq.n	8004056 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2220      	movs	r2, #32
 8004018:	4013      	ands	r3, r2
 800401a:	d107      	bne.n	800402c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2104      	movs	r1, #4
 8004028:	438a      	bics	r2, r1
 800402a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004030:	221c      	movs	r2, #28
 8004032:	401a      	ands	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	2104      	movs	r1, #4
 800403a:	4091      	lsls	r1, r2
 800403c:	000a      	movs	r2, r1
 800403e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	2b00      	cmp	r3, #0
 8004046:	d100      	bne.n	800404a <HAL_DMA_IRQHandler+0x6e>
 8004048:	e071      	b.n	800412e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	0010      	movs	r0, r2
 8004052:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004054:	e06b      	b.n	800412e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	221c      	movs	r2, #28
 800405c:	4013      	ands	r3, r2
 800405e:	2202      	movs	r2, #2
 8004060:	409a      	lsls	r2, r3
 8004062:	0013      	movs	r3, r2
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4013      	ands	r3, r2
 8004068:	d02d      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xea>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2202      	movs	r2, #2
 800406e:	4013      	ands	r3, r2
 8004070:	d029      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2220      	movs	r2, #32
 800407a:	4013      	ands	r3, r2
 800407c:	d10b      	bne.n	8004096 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	210a      	movs	r1, #10
 800408a:	438a      	bics	r2, r1
 800408c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2225      	movs	r2, #37	; 0x25
 8004092:	2101      	movs	r1, #1
 8004094:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	221c      	movs	r2, #28
 800409c:	401a      	ands	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	2102      	movs	r1, #2
 80040a4:	4091      	lsls	r1, r2
 80040a6:	000a      	movs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2224      	movs	r2, #36	; 0x24
 80040ae:	2100      	movs	r1, #0
 80040b0:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d039      	beq.n	800412e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	0010      	movs	r0, r2
 80040c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80040c4:	e033      	b.n	800412e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	221c      	movs	r2, #28
 80040cc:	4013      	ands	r3, r2
 80040ce:	2208      	movs	r2, #8
 80040d0:	409a      	lsls	r2, r3
 80040d2:	0013      	movs	r3, r2
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4013      	ands	r3, r2
 80040d8:	d02a      	beq.n	8004130 <HAL_DMA_IRQHandler+0x154>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2208      	movs	r2, #8
 80040de:	4013      	ands	r3, r2
 80040e0:	d026      	beq.n	8004130 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	210e      	movs	r1, #14
 80040ee:	438a      	bics	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	221c      	movs	r2, #28
 80040f8:	401a      	ands	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	2101      	movs	r1, #1
 8004100:	4091      	lsls	r1, r2
 8004102:	000a      	movs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2225      	movs	r2, #37	; 0x25
 8004110:	2101      	movs	r1, #1
 8004112:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2224      	movs	r2, #36	; 0x24
 8004118:	2100      	movs	r1, #0
 800411a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	0010      	movs	r0, r2
 800412c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	46c0      	nop			; (mov r8, r8)
}
 8004132:	46bd      	mov	sp, r7
 8004134:	b004      	add	sp, #16
 8004136:	bd80      	pop	{r7, pc}

08004138 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	221c      	movs	r2, #28
 800414c:	401a      	ands	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	2101      	movs	r1, #1
 8004154:	4091      	lsls	r1, r2
 8004156:	000a      	movs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b10      	cmp	r3, #16
 8004168:	d108      	bne.n	800417c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800417a:	e007      	b.n	800418c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	60da      	str	r2, [r3, #12]
}
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	46bd      	mov	sp, r7
 8004190:	b004      	add	sp, #16
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80041aa:	e14f      	b.n	800444c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2101      	movs	r1, #1
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4091      	lsls	r1, r2
 80041b6:	000a      	movs	r2, r1
 80041b8:	4013      	ands	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d100      	bne.n	80041c4 <HAL_GPIO_Init+0x30>
 80041c2:	e140      	b.n	8004446 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2203      	movs	r2, #3
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d005      	beq.n	80041dc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2203      	movs	r2, #3
 80041d6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d130      	bne.n	800423e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	2203      	movs	r2, #3
 80041e8:	409a      	lsls	r2, r3
 80041ea:	0013      	movs	r3, r2
 80041ec:	43da      	mvns	r2, r3
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4013      	ands	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	409a      	lsls	r2, r3
 80041fe:	0013      	movs	r3, r2
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004212:	2201      	movs	r2, #1
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	409a      	lsls	r2, r3
 8004218:	0013      	movs	r3, r2
 800421a:	43da      	mvns	r2, r3
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4013      	ands	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	091b      	lsrs	r3, r3, #4
 8004228:	2201      	movs	r2, #1
 800422a:	401a      	ands	r2, r3
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	409a      	lsls	r2, r3
 8004230:	0013      	movs	r3, r2
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2203      	movs	r2, #3
 8004244:	4013      	ands	r3, r2
 8004246:	2b03      	cmp	r3, #3
 8004248:	d017      	beq.n	800427a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	2203      	movs	r2, #3
 8004256:	409a      	lsls	r2, r3
 8004258:	0013      	movs	r3, r2
 800425a:	43da      	mvns	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4013      	ands	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	409a      	lsls	r2, r3
 800426c:	0013      	movs	r3, r2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2203      	movs	r2, #3
 8004280:	4013      	ands	r3, r2
 8004282:	2b02      	cmp	r3, #2
 8004284:	d123      	bne.n	80042ce <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	08da      	lsrs	r2, r3, #3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3208      	adds	r2, #8
 800428e:	0092      	lsls	r2, r2, #2
 8004290:	58d3      	ldr	r3, [r2, r3]
 8004292:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2207      	movs	r2, #7
 8004298:	4013      	ands	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	220f      	movs	r2, #15
 800429e:	409a      	lsls	r2, r3
 80042a0:	0013      	movs	r3, r2
 80042a2:	43da      	mvns	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2107      	movs	r1, #7
 80042b2:	400b      	ands	r3, r1
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	409a      	lsls	r2, r3
 80042b8:	0013      	movs	r3, r2
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	08da      	lsrs	r2, r3, #3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3208      	adds	r2, #8
 80042c8:	0092      	lsls	r2, r2, #2
 80042ca:	6939      	ldr	r1, [r7, #16]
 80042cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	2203      	movs	r2, #3
 80042da:	409a      	lsls	r2, r3
 80042dc:	0013      	movs	r3, r2
 80042de:	43da      	mvns	r2, r3
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4013      	ands	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2203      	movs	r2, #3
 80042ec:	401a      	ands	r2, r3
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	409a      	lsls	r2, r3
 80042f4:	0013      	movs	r3, r2
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	23c0      	movs	r3, #192	; 0xc0
 8004308:	029b      	lsls	r3, r3, #10
 800430a:	4013      	ands	r3, r2
 800430c:	d100      	bne.n	8004310 <HAL_GPIO_Init+0x17c>
 800430e:	e09a      	b.n	8004446 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004310:	4b54      	ldr	r3, [pc, #336]	; (8004464 <HAL_GPIO_Init+0x2d0>)
 8004312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004314:	4b53      	ldr	r3, [pc, #332]	; (8004464 <HAL_GPIO_Init+0x2d0>)
 8004316:	2101      	movs	r1, #1
 8004318:	430a      	orrs	r2, r1
 800431a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800431c:	4a52      	ldr	r2, [pc, #328]	; (8004468 <HAL_GPIO_Init+0x2d4>)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	089b      	lsrs	r3, r3, #2
 8004322:	3302      	adds	r3, #2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	589b      	ldr	r3, [r3, r2]
 8004328:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2203      	movs	r2, #3
 800432e:	4013      	ands	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	220f      	movs	r2, #15
 8004334:	409a      	lsls	r2, r3
 8004336:	0013      	movs	r3, r2
 8004338:	43da      	mvns	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	23a0      	movs	r3, #160	; 0xa0
 8004344:	05db      	lsls	r3, r3, #23
 8004346:	429a      	cmp	r2, r3
 8004348:	d019      	beq.n	800437e <HAL_GPIO_Init+0x1ea>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a47      	ldr	r2, [pc, #284]	; (800446c <HAL_GPIO_Init+0x2d8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d013      	beq.n	800437a <HAL_GPIO_Init+0x1e6>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a46      	ldr	r2, [pc, #280]	; (8004470 <HAL_GPIO_Init+0x2dc>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00d      	beq.n	8004376 <HAL_GPIO_Init+0x1e2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a45      	ldr	r2, [pc, #276]	; (8004474 <HAL_GPIO_Init+0x2e0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d007      	beq.n	8004372 <HAL_GPIO_Init+0x1de>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a44      	ldr	r2, [pc, #272]	; (8004478 <HAL_GPIO_Init+0x2e4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d101      	bne.n	800436e <HAL_GPIO_Init+0x1da>
 800436a:	2305      	movs	r3, #5
 800436c:	e008      	b.n	8004380 <HAL_GPIO_Init+0x1ec>
 800436e:	2306      	movs	r3, #6
 8004370:	e006      	b.n	8004380 <HAL_GPIO_Init+0x1ec>
 8004372:	2303      	movs	r3, #3
 8004374:	e004      	b.n	8004380 <HAL_GPIO_Init+0x1ec>
 8004376:	2302      	movs	r3, #2
 8004378:	e002      	b.n	8004380 <HAL_GPIO_Init+0x1ec>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <HAL_GPIO_Init+0x1ec>
 800437e:	2300      	movs	r3, #0
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	2103      	movs	r1, #3
 8004384:	400a      	ands	r2, r1
 8004386:	0092      	lsls	r2, r2, #2
 8004388:	4093      	lsls	r3, r2
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004390:	4935      	ldr	r1, [pc, #212]	; (8004468 <HAL_GPIO_Init+0x2d4>)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	089b      	lsrs	r3, r3, #2
 8004396:	3302      	adds	r3, #2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800439e:	4b37      	ldr	r3, [pc, #220]	; (800447c <HAL_GPIO_Init+0x2e8>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	43da      	mvns	r2, r3
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	4013      	ands	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	035b      	lsls	r3, r3, #13
 80043b6:	4013      	ands	r3, r2
 80043b8:	d003      	beq.n	80043c2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043c2:	4b2e      	ldr	r3, [pc, #184]	; (800447c <HAL_GPIO_Init+0x2e8>)
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80043c8:	4b2c      	ldr	r3, [pc, #176]	; (800447c <HAL_GPIO_Init+0x2e8>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	43da      	mvns	r2, r3
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4013      	ands	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	039b      	lsls	r3, r3, #14
 80043e0:	4013      	ands	r3, r2
 80043e2:	d003      	beq.n	80043ec <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043ec:	4b23      	ldr	r3, [pc, #140]	; (800447c <HAL_GPIO_Init+0x2e8>)
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80043f2:	4b22      	ldr	r3, [pc, #136]	; (800447c <HAL_GPIO_Init+0x2e8>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	43da      	mvns	r2, r3
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4013      	ands	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	2380      	movs	r3, #128	; 0x80
 8004408:	029b      	lsls	r3, r3, #10
 800440a:	4013      	ands	r3, r2
 800440c:	d003      	beq.n	8004416 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004416:	4b19      	ldr	r3, [pc, #100]	; (800447c <HAL_GPIO_Init+0x2e8>)
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800441c:	4b17      	ldr	r3, [pc, #92]	; (800447c <HAL_GPIO_Init+0x2e8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	43da      	mvns	r2, r3
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4013      	ands	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	025b      	lsls	r3, r3, #9
 8004434:	4013      	ands	r3, r2
 8004436:	d003      	beq.n	8004440 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004440:	4b0e      	ldr	r3, [pc, #56]	; (800447c <HAL_GPIO_Init+0x2e8>)
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	3301      	adds	r3, #1
 800444a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	40da      	lsrs	r2, r3
 8004454:	1e13      	subs	r3, r2, #0
 8004456:	d000      	beq.n	800445a <HAL_GPIO_Init+0x2c6>
 8004458:	e6a8      	b.n	80041ac <HAL_GPIO_Init+0x18>
  }
}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b006      	add	sp, #24
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40021000 	.word	0x40021000
 8004468:	40010000 	.word	0x40010000
 800446c:	50000400 	.word	0x50000400
 8004470:	50000800 	.word	0x50000800
 8004474:	50000c00 	.word	0x50000c00
 8004478:	50001c00 	.word	0x50001c00
 800447c:	40010400 	.word	0x40010400

08004480 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	0008      	movs	r0, r1
 800448a:	0011      	movs	r1, r2
 800448c:	1cbb      	adds	r3, r7, #2
 800448e:	1c02      	adds	r2, r0, #0
 8004490:	801a      	strh	r2, [r3, #0]
 8004492:	1c7b      	adds	r3, r7, #1
 8004494:	1c0a      	adds	r2, r1, #0
 8004496:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004498:	1c7b      	adds	r3, r7, #1
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d004      	beq.n	80044aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044a0:	1cbb      	adds	r3, r7, #2
 80044a2:	881a      	ldrh	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80044a8:	e003      	b.n	80044b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80044aa:	1cbb      	adds	r3, r7, #2
 80044ac:	881a      	ldrh	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b002      	add	sp, #8
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e082      	b.n	80045d4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2241      	movs	r2, #65	; 0x41
 80044d2:	5c9b      	ldrb	r3, [r3, r2]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d107      	bne.n	80044ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2240      	movs	r2, #64	; 0x40
 80044de:	2100      	movs	r1, #0
 80044e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f7fe fd39 	bl	8002f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2241      	movs	r2, #65	; 0x41
 80044ee:	2124      	movs	r1, #36	; 0x24
 80044f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2101      	movs	r1, #1
 80044fe:	438a      	bics	r2, r1
 8004500:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4934      	ldr	r1, [pc, #208]	; (80045dc <HAL_I2C_Init+0x120>)
 800450c:	400a      	ands	r2, r1
 800450e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4931      	ldr	r1, [pc, #196]	; (80045e0 <HAL_I2C_Init+0x124>)
 800451c:	400a      	ands	r2, r1
 800451e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d108      	bne.n	800453a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2180      	movs	r1, #128	; 0x80
 8004532:	0209      	lsls	r1, r1, #8
 8004534:	430a      	orrs	r2, r1
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	e007      	b.n	800454a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2184      	movs	r1, #132	; 0x84
 8004544:	0209      	lsls	r1, r1, #8
 8004546:	430a      	orrs	r2, r1
 8004548:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d104      	bne.n	800455c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2280      	movs	r2, #128	; 0x80
 8004558:	0112      	lsls	r2, r2, #4
 800455a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	491f      	ldr	r1, [pc, #124]	; (80045e4 <HAL_I2C_Init+0x128>)
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	491a      	ldr	r1, [pc, #104]	; (80045e0 <HAL_I2C_Init+0x124>)
 8004578:	400a      	ands	r2, r1
 800457a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	431a      	orrs	r2, r3
 8004586:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69d9      	ldr	r1, [r3, #28]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1a      	ldr	r2, [r3, #32]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2101      	movs	r1, #1
 80045b2:	430a      	orrs	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2241      	movs	r2, #65	; 0x41
 80045c0:	2120      	movs	r1, #32
 80045c2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2242      	movs	r2, #66	; 0x42
 80045ce:	2100      	movs	r1, #0
 80045d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	0018      	movs	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b002      	add	sp, #8
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	f0ffffff 	.word	0xf0ffffff
 80045e0:	ffff7fff 	.word	0xffff7fff
 80045e4:	02008000 	.word	0x02008000

080045e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b089      	sub	sp, #36	; 0x24
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	0008      	movs	r0, r1
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	0019      	movs	r1, r3
 80045f6:	230a      	movs	r3, #10
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	1c02      	adds	r2, r0, #0
 80045fc:	801a      	strh	r2, [r3, #0]
 80045fe:	2308      	movs	r3, #8
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	1c0a      	adds	r2, r1, #0
 8004604:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2241      	movs	r2, #65	; 0x41
 800460a:	5c9b      	ldrb	r3, [r3, r2]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b20      	cmp	r3, #32
 8004610:	d000      	beq.n	8004614 <HAL_I2C_Master_Transmit+0x2c>
 8004612:	e0e7      	b.n	80047e4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2240      	movs	r2, #64	; 0x40
 8004618:	5c9b      	ldrb	r3, [r3, r2]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_I2C_Master_Transmit+0x3a>
 800461e:	2302      	movs	r3, #2
 8004620:	e0e1      	b.n	80047e6 <HAL_I2C_Master_Transmit+0x1fe>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2240      	movs	r2, #64	; 0x40
 8004626:	2101      	movs	r1, #1
 8004628:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800462a:	f7fe fe43 	bl	80032b4 <HAL_GetTick>
 800462e:	0003      	movs	r3, r0
 8004630:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	0219      	lsls	r1, r3, #8
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2319      	movs	r3, #25
 800463e:	2201      	movs	r2, #1
 8004640:	f000 fa04 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004644:	1e03      	subs	r3, r0, #0
 8004646:	d001      	beq.n	800464c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0cc      	b.n	80047e6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2241      	movs	r2, #65	; 0x41
 8004650:	2121      	movs	r1, #33	; 0x21
 8004652:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2242      	movs	r2, #66	; 0x42
 8004658:	2110      	movs	r1, #16
 800465a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2208      	movs	r2, #8
 800466c:	18ba      	adds	r2, r7, r2
 800466e:	8812      	ldrh	r2, [r2, #0]
 8004670:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467c:	b29b      	uxth	r3, r3
 800467e:	2bff      	cmp	r3, #255	; 0xff
 8004680:	d911      	bls.n	80046a6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	22ff      	movs	r2, #255	; 0xff
 8004686:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	b2da      	uxtb	r2, r3
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	045c      	lsls	r4, r3, #17
 8004692:	230a      	movs	r3, #10
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	8819      	ldrh	r1, [r3, #0]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	4b55      	ldr	r3, [pc, #340]	; (80047f0 <HAL_I2C_Master_Transmit+0x208>)
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	0023      	movs	r3, r4
 80046a0:	f000 fc2e 	bl	8004f00 <I2C_TransferConfig>
 80046a4:	e075      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	049c      	lsls	r4, r3, #18
 80046ba:	230a      	movs	r3, #10
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	8819      	ldrh	r1, [r3, #0]
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	4b4b      	ldr	r3, [pc, #300]	; (80047f0 <HAL_I2C_Master_Transmit+0x208>)
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	0023      	movs	r3, r4
 80046c8:	f000 fc1a 	bl	8004f00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80046cc:	e061      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f000 fa07 	bl	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout>
 80046da:	1e03      	subs	r3, r0, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e081      	b.n	80047e6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	781a      	ldrb	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d03a      	beq.n	8004792 <HAL_I2C_Master_Transmit+0x1aa>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	d136      	bne.n	8004792 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	0013      	movs	r3, r2
 800472e:	2200      	movs	r2, #0
 8004730:	2180      	movs	r1, #128	; 0x80
 8004732:	f000 f98b 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004736:	1e03      	subs	r3, r0, #0
 8004738:	d001      	beq.n	800473e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e053      	b.n	80047e6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	2bff      	cmp	r3, #255	; 0xff
 8004746:	d911      	bls.n	800476c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	22ff      	movs	r2, #255	; 0xff
 800474c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	b2da      	uxtb	r2, r3
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	045c      	lsls	r4, r3, #17
 8004758:	230a      	movs	r3, #10
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	8819      	ldrh	r1, [r3, #0]
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	2300      	movs	r3, #0
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	0023      	movs	r3, r4
 8004766:	f000 fbcb 	bl	8004f00 <I2C_TransferConfig>
 800476a:	e012      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477a:	b2da      	uxtb	r2, r3
 800477c:	2380      	movs	r3, #128	; 0x80
 800477e:	049c      	lsls	r4, r3, #18
 8004780:	230a      	movs	r3, #10
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	8819      	ldrh	r1, [r3, #0]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	2300      	movs	r3, #0
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	0023      	movs	r3, r4
 800478e:	f000 fbb7 	bl	8004f00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d198      	bne.n	80046ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	0018      	movs	r0, r3
 80047a4:	f000 f9e6 	bl	8004b74 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047a8:	1e03      	subs	r3, r0, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e01a      	b.n	80047e6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2220      	movs	r2, #32
 80047b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	490c      	ldr	r1, [pc, #48]	; (80047f4 <HAL_I2C_Master_Transmit+0x20c>)
 80047c4:	400a      	ands	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2241      	movs	r2, #65	; 0x41
 80047cc:	2120      	movs	r1, #32
 80047ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2242      	movs	r2, #66	; 0x42
 80047d4:	2100      	movs	r1, #0
 80047d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2240      	movs	r2, #64	; 0x40
 80047dc:	2100      	movs	r1, #0
 80047de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e000      	b.n	80047e6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
  }
}
 80047e6:	0018      	movs	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b007      	add	sp, #28
 80047ec:	bd90      	pop	{r4, r7, pc}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	80002000 	.word	0x80002000
 80047f4:	fe00e800 	.word	0xfe00e800

080047f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b089      	sub	sp, #36	; 0x24
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	0008      	movs	r0, r1
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	0019      	movs	r1, r3
 8004806:	230a      	movs	r3, #10
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	1c02      	adds	r2, r0, #0
 800480c:	801a      	strh	r2, [r3, #0]
 800480e:	2308      	movs	r3, #8
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	1c0a      	adds	r2, r1, #0
 8004814:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2241      	movs	r2, #65	; 0x41
 800481a:	5c9b      	ldrb	r3, [r3, r2]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b20      	cmp	r3, #32
 8004820:	d000      	beq.n	8004824 <HAL_I2C_Master_Receive+0x2c>
 8004822:	e0e8      	b.n	80049f6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2240      	movs	r2, #64	; 0x40
 8004828:	5c9b      	ldrb	r3, [r3, r2]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d101      	bne.n	8004832 <HAL_I2C_Master_Receive+0x3a>
 800482e:	2302      	movs	r3, #2
 8004830:	e0e2      	b.n	80049f8 <HAL_I2C_Master_Receive+0x200>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2240      	movs	r2, #64	; 0x40
 8004836:	2101      	movs	r1, #1
 8004838:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800483a:	f7fe fd3b 	bl	80032b4 <HAL_GetTick>
 800483e:	0003      	movs	r3, r0
 8004840:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	0219      	lsls	r1, r3, #8
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	2319      	movs	r3, #25
 800484e:	2201      	movs	r2, #1
 8004850:	f000 f8fc 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004854:	1e03      	subs	r3, r0, #0
 8004856:	d001      	beq.n	800485c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0cd      	b.n	80049f8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2241      	movs	r2, #65	; 0x41
 8004860:	2122      	movs	r1, #34	; 0x22
 8004862:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2242      	movs	r2, #66	; 0x42
 8004868:	2110      	movs	r1, #16
 800486a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2208      	movs	r2, #8
 800487c:	18ba      	adds	r2, r7, r2
 800487e:	8812      	ldrh	r2, [r2, #0]
 8004880:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	2bff      	cmp	r3, #255	; 0xff
 8004890:	d911      	bls.n	80048b6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	22ff      	movs	r2, #255	; 0xff
 8004896:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489c:	b2da      	uxtb	r2, r3
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	045c      	lsls	r4, r3, #17
 80048a2:	230a      	movs	r3, #10
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	8819      	ldrh	r1, [r3, #0]
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	4b55      	ldr	r3, [pc, #340]	; (8004a00 <HAL_I2C_Master_Receive+0x208>)
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	0023      	movs	r3, r4
 80048b0:	f000 fb26 	bl	8004f00 <I2C_TransferConfig>
 80048b4:	e076      	b.n	80049a4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	049c      	lsls	r4, r3, #18
 80048ca:	230a      	movs	r3, #10
 80048cc:	18fb      	adds	r3, r7, r3
 80048ce:	8819      	ldrh	r1, [r3, #0]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	4b4b      	ldr	r3, [pc, #300]	; (8004a00 <HAL_I2C_Master_Receive+0x208>)
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	0023      	movs	r3, r4
 80048d8:	f000 fb12 	bl	8004f00 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80048dc:	e062      	b.n	80049a4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f000 f989 	bl	8004bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80048ea:	1e03      	subs	r3, r0, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e082      	b.n	80049f8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d03a      	beq.n	80049a4 <HAL_I2C_Master_Receive+0x1ac>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004932:	2b00      	cmp	r3, #0
 8004934:	d136      	bne.n	80049a4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	0013      	movs	r3, r2
 8004940:	2200      	movs	r2, #0
 8004942:	2180      	movs	r1, #128	; 0x80
 8004944:	f000 f882 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004948:	1e03      	subs	r3, r0, #0
 800494a:	d001      	beq.n	8004950 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e053      	b.n	80049f8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	2bff      	cmp	r3, #255	; 0xff
 8004958:	d911      	bls.n	800497e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	22ff      	movs	r2, #255	; 0xff
 800495e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004964:	b2da      	uxtb	r2, r3
 8004966:	2380      	movs	r3, #128	; 0x80
 8004968:	045c      	lsls	r4, r3, #17
 800496a:	230a      	movs	r3, #10
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	8819      	ldrh	r1, [r3, #0]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	2300      	movs	r3, #0
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	0023      	movs	r3, r4
 8004978:	f000 fac2 	bl	8004f00 <I2C_TransferConfig>
 800497c:	e012      	b.n	80049a4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498c:	b2da      	uxtb	r2, r3
 800498e:	2380      	movs	r3, #128	; 0x80
 8004990:	049c      	lsls	r4, r3, #18
 8004992:	230a      	movs	r3, #10
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	8819      	ldrh	r1, [r3, #0]
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	2300      	movs	r3, #0
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	0023      	movs	r3, r4
 80049a0:	f000 faae 	bl	8004f00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d197      	bne.n	80048de <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	0018      	movs	r0, r3
 80049b6:	f000 f8dd 	bl	8004b74 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049ba:	1e03      	subs	r3, r0, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e01a      	b.n	80049f8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2220      	movs	r2, #32
 80049c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	490b      	ldr	r1, [pc, #44]	; (8004a04 <HAL_I2C_Master_Receive+0x20c>)
 80049d6:	400a      	ands	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2241      	movs	r2, #65	; 0x41
 80049de:	2120      	movs	r1, #32
 80049e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2242      	movs	r2, #66	; 0x42
 80049e6:	2100      	movs	r1, #0
 80049e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2240      	movs	r2, #64	; 0x40
 80049ee:	2100      	movs	r1, #0
 80049f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	e000      	b.n	80049f8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
  }
}
 80049f8:	0018      	movs	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b007      	add	sp, #28
 80049fe:	bd90      	pop	{r4, r7, pc}
 8004a00:	80002400 	.word	0x80002400
 8004a04:	fe00e800 	.word	0xfe00e800

08004a08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	2202      	movs	r2, #2
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d103      	bne.n	8004a26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2200      	movs	r2, #0
 8004a24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d007      	beq.n	8004a44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2101      	movs	r1, #1
 8004a40:	430a      	orrs	r2, r1
 8004a42:	619a      	str	r2, [r3, #24]
  }
}
 8004a44:	46c0      	nop			; (mov r8, r8)
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b002      	add	sp, #8
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	1dfb      	adds	r3, r7, #7
 8004a5a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a5c:	e030      	b.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	3301      	adds	r3, #1
 8004a62:	d02d      	beq.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a64:	f7fe fc26 	bl	80032b4 <HAL_GetTick>
 8004a68:	0002      	movs	r2, r0
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d302      	bcc.n	8004a7a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d122      	bne.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	4013      	ands	r3, r2
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	425a      	negs	r2, r3
 8004a8a:	4153      	adcs	r3, r2
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	001a      	movs	r2, r3
 8004a90:	1dfb      	adds	r3, r7, #7
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d113      	bne.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2241      	movs	r2, #65	; 0x41
 8004aa8:	2120      	movs	r1, #32
 8004aaa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2242      	movs	r2, #66	; 0x42
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2240      	movs	r2, #64	; 0x40
 8004ab8:	2100      	movs	r1, #0
 8004aba:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e00f      	b.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	425a      	negs	r2, r3
 8004ad0:	4153      	adcs	r3, r2
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	001a      	movs	r2, r3
 8004ad6:	1dfb      	adds	r3, r7, #7
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d0bf      	beq.n	8004a5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b004      	add	sp, #16
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004af4:	e032      	b.n	8004b5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	0018      	movs	r0, r3
 8004afe:	f000 f8ff 	bl	8004d00 <I2C_IsErrorOccurred>
 8004b02:	1e03      	subs	r3, r0, #0
 8004b04:	d001      	beq.n	8004b0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e030      	b.n	8004b6c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	d025      	beq.n	8004b5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b10:	f7fe fbd0 	bl	80032b4 <HAL_GetTick>
 8004b14:	0002      	movs	r2, r0
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d302      	bcc.n	8004b26 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11a      	bne.n	8004b5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d013      	beq.n	8004b5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b38:	2220      	movs	r2, #32
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2241      	movs	r2, #65	; 0x41
 8004b44:	2120      	movs	r1, #32
 8004b46:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2242      	movs	r2, #66	; 0x42
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2240      	movs	r2, #64	; 0x40
 8004b54:	2100      	movs	r1, #0
 8004b56:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e007      	b.n	8004b6c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	2202      	movs	r2, #2
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d1c5      	bne.n	8004af6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b004      	add	sp, #16
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b80:	e02f      	b.n	8004be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	68b9      	ldr	r1, [r7, #8]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f000 f8b9 	bl	8004d00 <I2C_IsErrorOccurred>
 8004b8e:	1e03      	subs	r3, r0, #0
 8004b90:	d001      	beq.n	8004b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e02d      	b.n	8004bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b96:	f7fe fb8d 	bl	80032b4 <HAL_GetTick>
 8004b9a:	0002      	movs	r2, r0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d11a      	bne.n	8004be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d013      	beq.n	8004be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2241      	movs	r2, #65	; 0x41
 8004bca:	2120      	movs	r1, #32
 8004bcc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2242      	movs	r2, #66	; 0x42
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2240      	movs	r2, #64	; 0x40
 8004bda:	2100      	movs	r1, #0
 8004bdc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e007      	b.n	8004bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	2220      	movs	r2, #32
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d1c8      	bne.n	8004b82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b004      	add	sp, #16
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c08:	e06b      	b.n	8004ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f000 f875 	bl	8004d00 <I2C_IsErrorOccurred>
 8004c16:	1e03      	subs	r3, r0, #0
 8004c18:	d001      	beq.n	8004c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e069      	b.n	8004cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	2220      	movs	r2, #32
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d138      	bne.n	8004c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	2204      	movs	r2, #4
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d105      	bne.n	8004c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e055      	b.n	8004cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d107      	bne.n	8004c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2210      	movs	r2, #16
 8004c5a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2204      	movs	r2, #4
 8004c60:	645a      	str	r2, [r3, #68]	; 0x44
 8004c62:	e002      	b.n	8004c6a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	491f      	ldr	r1, [pc, #124]	; (8004cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004c7e:	400a      	ands	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2241      	movs	r2, #65	; 0x41
 8004c86:	2120      	movs	r1, #32
 8004c88:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2242      	movs	r2, #66	; 0x42
 8004c8e:	2100      	movs	r1, #0
 8004c90:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2240      	movs	r2, #64	; 0x40
 8004c96:	2100      	movs	r1, #0
 8004c98:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e029      	b.n	8004cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9e:	f7fe fb09 	bl	80032b4 <HAL_GetTick>
 8004ca2:	0002      	movs	r2, r0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d302      	bcc.n	8004cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d116      	bne.n	8004ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	2204      	movs	r2, #4
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d00f      	beq.n	8004ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2241      	movs	r2, #65	; 0x41
 8004cd2:	2120      	movs	r1, #32
 8004cd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2240      	movs	r2, #64	; 0x40
 8004cda:	2100      	movs	r1, #0
 8004cdc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e007      	b.n	8004cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2204      	movs	r2, #4
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d18c      	bne.n	8004c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b004      	add	sp, #16
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	fe00e800 	.word	0xfe00e800

08004d00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b590      	push	{r4, r7, lr}
 8004d02:	b08b      	sub	sp, #44	; 0x2c
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0c:	2327      	movs	r3, #39	; 0x27
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	2210      	movs	r2, #16
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d100      	bne.n	8004d2e <I2C_IsErrorOccurred+0x2e>
 8004d2c:	e082      	b.n	8004e34 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2210      	movs	r2, #16
 8004d34:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d36:	e060      	b.n	8004dfa <I2C_IsErrorOccurred+0xfa>
 8004d38:	2427      	movs	r4, #39	; 0x27
 8004d3a:	193b      	adds	r3, r7, r4
 8004d3c:	193a      	adds	r2, r7, r4
 8004d3e:	7812      	ldrb	r2, [r2, #0]
 8004d40:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	3301      	adds	r3, #1
 8004d46:	d058      	beq.n	8004dfa <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d48:	f7fe fab4 	bl	80032b4 <HAL_GetTick>
 8004d4c:	0002      	movs	r2, r0
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d306      	bcc.n	8004d66 <I2C_IsErrorOccurred+0x66>
 8004d58:	193b      	adds	r3, r7, r4
 8004d5a:	193a      	adds	r2, r7, r4
 8004d5c:	7812      	ldrb	r2, [r2, #0]
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d149      	bne.n	8004dfa <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	2380      	movs	r3, #128	; 0x80
 8004d6e:	01db      	lsls	r3, r3, #7
 8004d70:	4013      	ands	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d74:	2013      	movs	r0, #19
 8004d76:	183b      	adds	r3, r7, r0
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	2142      	movs	r1, #66	; 0x42
 8004d7c:	5c52      	ldrb	r2, [r2, r1]
 8004d7e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	2380      	movs	r3, #128	; 0x80
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	401a      	ands	r2, r3
 8004d8c:	2380      	movs	r3, #128	; 0x80
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d126      	bne.n	8004de2 <I2C_IsErrorOccurred+0xe2>
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	01db      	lsls	r3, r3, #7
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d021      	beq.n	8004de2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004d9e:	183b      	adds	r3, r7, r0
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d01d      	beq.n	8004de2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2180      	movs	r1, #128	; 0x80
 8004db2:	01c9      	lsls	r1, r1, #7
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004db8:	f7fe fa7c 	bl	80032b4 <HAL_GetTick>
 8004dbc:	0003      	movs	r3, r0
 8004dbe:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dc0:	e00f      	b.n	8004de2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004dc2:	f7fe fa77 	bl	80032b4 <HAL_GetTick>
 8004dc6:	0002      	movs	r2, r0
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b19      	cmp	r3, #25
 8004dce:	d908      	bls.n	8004de2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004dd8:	2327      	movs	r3, #39	; 0x27
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]

              break;
 8004de0:	e00b      	b.n	8004dfa <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	2220      	movs	r2, #32
 8004dea:	4013      	ands	r3, r2
 8004dec:	2127      	movs	r1, #39	; 0x27
 8004dee:	187a      	adds	r2, r7, r1
 8004df0:	1879      	adds	r1, r7, r1
 8004df2:	7809      	ldrb	r1, [r1, #0]
 8004df4:	7011      	strb	r1, [r2, #0]
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	d1e3      	bne.n	8004dc2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	2220      	movs	r2, #32
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d004      	beq.n	8004e12 <I2C_IsErrorOccurred+0x112>
 8004e08:	2327      	movs	r3, #39	; 0x27
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d092      	beq.n	8004d38 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e12:	2327      	movs	r3, #39	; 0x27
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d103      	bne.n	8004e24 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2220      	movs	r2, #32
 8004e22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	2204      	movs	r2, #4
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e2c:	2327      	movs	r3, #39	; 0x27
 8004e2e:	18fb      	adds	r3, r7, r3
 8004e30:	2201      	movs	r2, #1
 8004e32:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4013      	ands	r3, r2
 8004e44:	d00c      	beq.n	8004e60 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2280      	movs	r2, #128	; 0x80
 8004e54:	0052      	lsls	r2, r2, #1
 8004e56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e58:	2327      	movs	r3, #39	; 0x27
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4013      	ands	r3, r2
 8004e68:	d00c      	beq.n	8004e84 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2280      	movs	r2, #128	; 0x80
 8004e78:	00d2      	lsls	r2, r2, #3
 8004e7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e7c:	2327      	movs	r3, #39	; 0x27
 8004e7e:	18fb      	adds	r3, r7, r3
 8004e80:	2201      	movs	r2, #1
 8004e82:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	2380      	movs	r3, #128	; 0x80
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d00c      	beq.n	8004ea8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	2202      	movs	r2, #2
 8004e92:	4313      	orrs	r3, r2
 8004e94:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2280      	movs	r2, #128	; 0x80
 8004e9c:	0092      	lsls	r2, r2, #2
 8004e9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ea0:	2327      	movs	r3, #39	; 0x27
 8004ea2:	18fb      	adds	r3, r7, r3
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004ea8:	2327      	movs	r3, #39	; 0x27
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01d      	beq.n	8004eee <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f7ff fda7 	bl	8004a08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	490d      	ldr	r1, [pc, #52]	; (8004efc <I2C_IsErrorOccurred+0x1fc>)
 8004ec6:	400a      	ands	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2241      	movs	r2, #65	; 0x41
 8004eda:	2120      	movs	r1, #32
 8004edc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2242      	movs	r2, #66	; 0x42
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2240      	movs	r2, #64	; 0x40
 8004eea:	2100      	movs	r1, #0
 8004eec:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004eee:	2327      	movs	r3, #39	; 0x27
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	781b      	ldrb	r3, [r3, #0]
}
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b00b      	add	sp, #44	; 0x2c
 8004efa:	bd90      	pop	{r4, r7, pc}
 8004efc:	fe00e800 	.word	0xfe00e800

08004f00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	0008      	movs	r0, r1
 8004f0a:	0011      	movs	r1, r2
 8004f0c:	607b      	str	r3, [r7, #4]
 8004f0e:	240a      	movs	r4, #10
 8004f10:	193b      	adds	r3, r7, r4
 8004f12:	1c02      	adds	r2, r0, #0
 8004f14:	801a      	strh	r2, [r3, #0]
 8004f16:	2009      	movs	r0, #9
 8004f18:	183b      	adds	r3, r7, r0
 8004f1a:	1c0a      	adds	r2, r1, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f1e:	193b      	adds	r3, r7, r4
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	059b      	lsls	r3, r3, #22
 8004f24:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f26:	183b      	adds	r3, r7, r0
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	0419      	lsls	r1, r3, #16
 8004f2c:	23ff      	movs	r3, #255	; 0xff
 8004f2e:	041b      	lsls	r3, r3, #16
 8004f30:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f32:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	085b      	lsrs	r3, r3, #1
 8004f40:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f4a:	0d51      	lsrs	r1, r2, #21
 8004f4c:	2280      	movs	r2, #128	; 0x80
 8004f4e:	00d2      	lsls	r2, r2, #3
 8004f50:	400a      	ands	r2, r1
 8004f52:	4907      	ldr	r1, [pc, #28]	; (8004f70 <I2C_TransferConfig+0x70>)
 8004f54:	430a      	orrs	r2, r1
 8004f56:	43d2      	mvns	r2, r2
 8004f58:	401a      	ands	r2, r3
 8004f5a:	0011      	movs	r1, r2
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	b007      	add	sp, #28
 8004f6c:	bd90      	pop	{r4, r7, pc}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	03ff63ff 	.word	0x03ff63ff

08004f74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2241      	movs	r2, #65	; 0x41
 8004f82:	5c9b      	ldrb	r3, [r3, r2]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d138      	bne.n	8004ffc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2240      	movs	r2, #64	; 0x40
 8004f8e:	5c9b      	ldrb	r3, [r3, r2]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e032      	b.n	8004ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2240      	movs	r2, #64	; 0x40
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2241      	movs	r2, #65	; 0x41
 8004fa4:	2124      	movs	r1, #36	; 0x24
 8004fa6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	438a      	bics	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4911      	ldr	r1, [pc, #68]	; (8005008 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004fc4:	400a      	ands	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6819      	ldr	r1, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2241      	movs	r2, #65	; 0x41
 8004fec:	2120      	movs	r1, #32
 8004fee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2240      	movs	r2, #64	; 0x40
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
  }
}
 8004ffe:	0018      	movs	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	b002      	add	sp, #8
 8005004:	bd80      	pop	{r7, pc}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	ffffefff 	.word	0xffffefff

0800500c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2241      	movs	r2, #65	; 0x41
 800501a:	5c9b      	ldrb	r3, [r3, r2]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b20      	cmp	r3, #32
 8005020:	d139      	bne.n	8005096 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2240      	movs	r2, #64	; 0x40
 8005026:	5c9b      	ldrb	r3, [r3, r2]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800502c:	2302      	movs	r3, #2
 800502e:	e033      	b.n	8005098 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2240      	movs	r2, #64	; 0x40
 8005034:	2101      	movs	r1, #1
 8005036:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2241      	movs	r2, #65	; 0x41
 800503c:	2124      	movs	r1, #36	; 0x24
 800503e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2101      	movs	r1, #1
 800504c:	438a      	bics	r2, r1
 800504e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800505c:	4013      	ands	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2101      	movs	r1, #1
 800507e:	430a      	orrs	r2, r1
 8005080:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2241      	movs	r2, #65	; 0x41
 8005086:	2120      	movs	r1, #32
 8005088:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2240      	movs	r2, #64	; 0x40
 800508e:	2100      	movs	r1, #0
 8005090:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	e000      	b.n	8005098 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005096:	2302      	movs	r3, #2
  }
}
 8005098:	0018      	movs	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	b004      	add	sp, #16
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	fffff0ff 	.word	0xfffff0ff

080050a4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ac:	4b07      	ldr	r3, [pc, #28]	; (80050cc <HAL_I2CEx_EnableFastModePlus+0x28>)
 80050ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b0:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_I2CEx_EnableFastModePlus+0x28>)
 80050b2:	2101      	movs	r1, #1
 80050b4:	430a      	orrs	r2, r1
 80050b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 80050b8:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 80050ba:	6859      	ldr	r1, [r3, #4]
 80050bc:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]
}
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b002      	add	sp, #8
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40010000 	.word	0x40010000

080050d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050d4:	b5b0      	push	{r4, r5, r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f000 fbaf 	bl	8005846 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050e8:	4bcf      	ldr	r3, [pc, #828]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	220c      	movs	r2, #12
 80050ee:	4013      	ands	r3, r2
 80050f0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050f2:	4bcd      	ldr	r3, [pc, #820]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	025b      	lsls	r3, r3, #9
 80050fa:	4013      	ands	r3, r2
 80050fc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2201      	movs	r2, #1
 8005104:	4013      	ands	r3, r2
 8005106:	d100      	bne.n	800510a <HAL_RCC_OscConfig+0x36>
 8005108:	e07e      	b.n	8005208 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	2b08      	cmp	r3, #8
 800510e:	d007      	beq.n	8005120 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	2b0c      	cmp	r3, #12
 8005114:	d112      	bne.n	800513c <HAL_RCC_OscConfig+0x68>
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	2380      	movs	r3, #128	; 0x80
 800511a:	025b      	lsls	r3, r3, #9
 800511c:	429a      	cmp	r2, r3
 800511e:	d10d      	bne.n	800513c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005120:	4bc1      	ldr	r3, [pc, #772]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	029b      	lsls	r3, r3, #10
 8005128:	4013      	ands	r3, r2
 800512a:	d100      	bne.n	800512e <HAL_RCC_OscConfig+0x5a>
 800512c:	e06b      	b.n	8005206 <HAL_RCC_OscConfig+0x132>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d167      	bne.n	8005206 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f000 fb85 	bl	8005846 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	025b      	lsls	r3, r3, #9
 8005144:	429a      	cmp	r2, r3
 8005146:	d107      	bne.n	8005158 <HAL_RCC_OscConfig+0x84>
 8005148:	4bb7      	ldr	r3, [pc, #732]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4bb6      	ldr	r3, [pc, #728]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 800514e:	2180      	movs	r1, #128	; 0x80
 8005150:	0249      	lsls	r1, r1, #9
 8005152:	430a      	orrs	r2, r1
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	e027      	b.n	80051a8 <HAL_RCC_OscConfig+0xd4>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	23a0      	movs	r3, #160	; 0xa0
 800515e:	02db      	lsls	r3, r3, #11
 8005160:	429a      	cmp	r2, r3
 8005162:	d10e      	bne.n	8005182 <HAL_RCC_OscConfig+0xae>
 8005164:	4bb0      	ldr	r3, [pc, #704]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	4baf      	ldr	r3, [pc, #700]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 800516a:	2180      	movs	r1, #128	; 0x80
 800516c:	02c9      	lsls	r1, r1, #11
 800516e:	430a      	orrs	r2, r1
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	4bad      	ldr	r3, [pc, #692]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4bac      	ldr	r3, [pc, #688]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005178:	2180      	movs	r1, #128	; 0x80
 800517a:	0249      	lsls	r1, r1, #9
 800517c:	430a      	orrs	r2, r1
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e012      	b.n	80051a8 <HAL_RCC_OscConfig+0xd4>
 8005182:	4ba9      	ldr	r3, [pc, #676]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	4ba8      	ldr	r3, [pc, #672]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005188:	49a8      	ldr	r1, [pc, #672]	; (800542c <HAL_RCC_OscConfig+0x358>)
 800518a:	400a      	ands	r2, r1
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	4ba6      	ldr	r3, [pc, #664]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	2380      	movs	r3, #128	; 0x80
 8005194:	025b      	lsls	r3, r3, #9
 8005196:	4013      	ands	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4ba2      	ldr	r3, [pc, #648]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4ba1      	ldr	r3, [pc, #644]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 80051a2:	49a3      	ldr	r1, [pc, #652]	; (8005430 <HAL_RCC_OscConfig+0x35c>)
 80051a4:	400a      	ands	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d015      	beq.n	80051dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b0:	f7fe f880 	bl	80032b4 <HAL_GetTick>
 80051b4:	0003      	movs	r3, r0
 80051b6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051b8:	e009      	b.n	80051ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051ba:	f7fe f87b 	bl	80032b4 <HAL_GetTick>
 80051be:	0002      	movs	r2, r0
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b64      	cmp	r3, #100	; 0x64
 80051c6:	d902      	bls.n	80051ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	f000 fb3c 	bl	8005846 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051ce:	4b96      	ldr	r3, [pc, #600]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	2380      	movs	r3, #128	; 0x80
 80051d4:	029b      	lsls	r3, r3, #10
 80051d6:	4013      	ands	r3, r2
 80051d8:	d0ef      	beq.n	80051ba <HAL_RCC_OscConfig+0xe6>
 80051da:	e015      	b.n	8005208 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7fe f86a 	bl	80032b4 <HAL_GetTick>
 80051e0:	0003      	movs	r3, r0
 80051e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051e6:	f7fe f865 	bl	80032b4 <HAL_GetTick>
 80051ea:	0002      	movs	r2, r0
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b64      	cmp	r3, #100	; 0x64
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e326      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051f8:	4b8b      	ldr	r3, [pc, #556]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	029b      	lsls	r3, r3, #10
 8005200:	4013      	ands	r3, r2
 8005202:	d1f0      	bne.n	80051e6 <HAL_RCC_OscConfig+0x112>
 8005204:	e000      	b.n	8005208 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005206:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2202      	movs	r2, #2
 800520e:	4013      	ands	r3, r2
 8005210:	d100      	bne.n	8005214 <HAL_RCC_OscConfig+0x140>
 8005212:	e08b      	b.n	800532c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	2b04      	cmp	r3, #4
 800521e:	d005      	beq.n	800522c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	2b0c      	cmp	r3, #12
 8005224:	d13e      	bne.n	80052a4 <HAL_RCC_OscConfig+0x1d0>
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d13b      	bne.n	80052a4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800522c:	4b7e      	ldr	r3, [pc, #504]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2204      	movs	r2, #4
 8005232:	4013      	ands	r3, r2
 8005234:	d004      	beq.n	8005240 <HAL_RCC_OscConfig+0x16c>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e302      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005240:	4b79      	ldr	r3, [pc, #484]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	4a7b      	ldr	r2, [pc, #492]	; (8005434 <HAL_RCC_OscConfig+0x360>)
 8005246:	4013      	ands	r3, r2
 8005248:	0019      	movs	r1, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	021a      	lsls	r2, r3, #8
 8005250:	4b75      	ldr	r3, [pc, #468]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005256:	4b74      	ldr	r3, [pc, #464]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2209      	movs	r2, #9
 800525c:	4393      	bics	r3, r2
 800525e:	0019      	movs	r1, r3
 8005260:	4b71      	ldr	r3, [pc, #452]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	430a      	orrs	r2, r1
 8005266:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005268:	f000 fc40 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 800526c:	0001      	movs	r1, r0
 800526e:	4b6e      	ldr	r3, [pc, #440]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	091b      	lsrs	r3, r3, #4
 8005274:	220f      	movs	r2, #15
 8005276:	4013      	ands	r3, r2
 8005278:	4a6f      	ldr	r2, [pc, #444]	; (8005438 <HAL_RCC_OscConfig+0x364>)
 800527a:	5cd3      	ldrb	r3, [r2, r3]
 800527c:	000a      	movs	r2, r1
 800527e:	40da      	lsrs	r2, r3
 8005280:	4b6e      	ldr	r3, [pc, #440]	; (800543c <HAL_RCC_OscConfig+0x368>)
 8005282:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005284:	4b6e      	ldr	r3, [pc, #440]	; (8005440 <HAL_RCC_OscConfig+0x36c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2513      	movs	r5, #19
 800528a:	197c      	adds	r4, r7, r5
 800528c:	0018      	movs	r0, r3
 800528e:	f7fd ffcb 	bl	8003228 <HAL_InitTick>
 8005292:	0003      	movs	r3, r0
 8005294:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005296:	197b      	adds	r3, r7, r5
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d046      	beq.n	800532c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800529e:	197b      	adds	r3, r7, r5
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	e2d0      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d027      	beq.n	80052fa <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80052aa:	4b5f      	ldr	r3, [pc, #380]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2209      	movs	r2, #9
 80052b0:	4393      	bics	r3, r2
 80052b2:	0019      	movs	r1, r3
 80052b4:	4b5c      	ldr	r3, [pc, #368]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fd fffa 	bl	80032b4 <HAL_GetTick>
 80052c0:	0003      	movs	r3, r0
 80052c2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052c6:	f7fd fff5 	bl	80032b4 <HAL_GetTick>
 80052ca:	0002      	movs	r2, r0
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e2b6      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052d8:	4b53      	ldr	r3, [pc, #332]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2204      	movs	r2, #4
 80052de:	4013      	ands	r3, r2
 80052e0:	d0f1      	beq.n	80052c6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e2:	4b51      	ldr	r3, [pc, #324]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	4a53      	ldr	r2, [pc, #332]	; (8005434 <HAL_RCC_OscConfig+0x360>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	0019      	movs	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	021a      	lsls	r2, r3, #8
 80052f2:	4b4d      	ldr	r3, [pc, #308]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
 80052f8:	e018      	b.n	800532c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052fa:	4b4b      	ldr	r3, [pc, #300]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b4a      	ldr	r3, [pc, #296]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005300:	2101      	movs	r1, #1
 8005302:	438a      	bics	r2, r1
 8005304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005306:	f7fd ffd5 	bl	80032b4 <HAL_GetTick>
 800530a:	0003      	movs	r3, r0
 800530c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005310:	f7fd ffd0 	bl	80032b4 <HAL_GetTick>
 8005314:	0002      	movs	r2, r0
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e291      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005322:	4b41      	ldr	r3, [pc, #260]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2204      	movs	r2, #4
 8005328:	4013      	ands	r3, r2
 800532a:	d1f1      	bne.n	8005310 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2210      	movs	r2, #16
 8005332:	4013      	ands	r3, r2
 8005334:	d100      	bne.n	8005338 <HAL_RCC_OscConfig+0x264>
 8005336:	e0a1      	b.n	800547c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d140      	bne.n	80053c0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800533e:	4b3a      	ldr	r3, [pc, #232]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	2380      	movs	r3, #128	; 0x80
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4013      	ands	r3, r2
 8005348:	d005      	beq.n	8005356 <HAL_RCC_OscConfig+0x282>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e277      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005356:	4b34      	ldr	r3, [pc, #208]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	4a3a      	ldr	r2, [pc, #232]	; (8005444 <HAL_RCC_OscConfig+0x370>)
 800535c:	4013      	ands	r3, r2
 800535e:	0019      	movs	r1, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005364:	4b30      	ldr	r3, [pc, #192]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800536a:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	0a19      	lsrs	r1, r3, #8
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	061a      	lsls	r2, r3, #24
 8005378:	4b2b      	ldr	r3, [pc, #172]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	0b5b      	lsrs	r3, r3, #13
 8005384:	3301      	adds	r3, #1
 8005386:	2280      	movs	r2, #128	; 0x80
 8005388:	0212      	lsls	r2, r2, #8
 800538a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800538c:	4b26      	ldr	r3, [pc, #152]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	091b      	lsrs	r3, r3, #4
 8005392:	210f      	movs	r1, #15
 8005394:	400b      	ands	r3, r1
 8005396:	4928      	ldr	r1, [pc, #160]	; (8005438 <HAL_RCC_OscConfig+0x364>)
 8005398:	5ccb      	ldrb	r3, [r1, r3]
 800539a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800539c:	4b27      	ldr	r3, [pc, #156]	; (800543c <HAL_RCC_OscConfig+0x368>)
 800539e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80053a0:	4b27      	ldr	r3, [pc, #156]	; (8005440 <HAL_RCC_OscConfig+0x36c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2513      	movs	r5, #19
 80053a6:	197c      	adds	r4, r7, r5
 80053a8:	0018      	movs	r0, r3
 80053aa:	f7fd ff3d 	bl	8003228 <HAL_InitTick>
 80053ae:	0003      	movs	r3, r0
 80053b0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80053b2:	197b      	adds	r3, r7, r5
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d060      	beq.n	800547c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80053ba:	197b      	adds	r3, r7, r5
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	e242      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d03f      	beq.n	8005448 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053c8:	4b17      	ldr	r3, [pc, #92]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	4b16      	ldr	r3, [pc, #88]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 80053ce:	2180      	movs	r1, #128	; 0x80
 80053d0:	0049      	lsls	r1, r1, #1
 80053d2:	430a      	orrs	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d6:	f7fd ff6d 	bl	80032b4 <HAL_GetTick>
 80053da:	0003      	movs	r3, r0
 80053dc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053e0:	f7fd ff68 	bl	80032b4 <HAL_GetTick>
 80053e4:	0002      	movs	r2, r0
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e229      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	2380      	movs	r3, #128	; 0x80
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4013      	ands	r3, r2
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4a10      	ldr	r2, [pc, #64]	; (8005444 <HAL_RCC_OscConfig+0x370>)
 8005404:	4013      	ands	r3, r2
 8005406:	0019      	movs	r1, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 800540e:	430a      	orrs	r2, r1
 8005410:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005412:	4b05      	ldr	r3, [pc, #20]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	0a19      	lsrs	r1, r3, #8
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	061a      	lsls	r2, r3, #24
 8005420:	4b01      	ldr	r3, [pc, #4]	; (8005428 <HAL_RCC_OscConfig+0x354>)
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	e029      	b.n	800547c <HAL_RCC_OscConfig+0x3a8>
 8005428:	40021000 	.word	0x40021000
 800542c:	fffeffff 	.word	0xfffeffff
 8005430:	fffbffff 	.word	0xfffbffff
 8005434:	ffffe0ff 	.word	0xffffe0ff
 8005438:	08007c70 	.word	0x08007c70
 800543c:	2000003c 	.word	0x2000003c
 8005440:	20000040 	.word	0x20000040
 8005444:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005448:	4bbd      	ldr	r3, [pc, #756]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	4bbc      	ldr	r3, [pc, #752]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 800544e:	49bd      	ldr	r1, [pc, #756]	; (8005744 <HAL_RCC_OscConfig+0x670>)
 8005450:	400a      	ands	r2, r1
 8005452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005454:	f7fd ff2e 	bl	80032b4 <HAL_GetTick>
 8005458:	0003      	movs	r3, r0
 800545a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800545e:	f7fd ff29 	bl	80032b4 <HAL_GetTick>
 8005462:	0002      	movs	r2, r0
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e1ea      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005470:	4bb3      	ldr	r3, [pc, #716]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	2380      	movs	r3, #128	; 0x80
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4013      	ands	r3, r2
 800547a:	d1f0      	bne.n	800545e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2208      	movs	r2, #8
 8005482:	4013      	ands	r3, r2
 8005484:	d036      	beq.n	80054f4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d019      	beq.n	80054c2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800548e:	4bac      	ldr	r3, [pc, #688]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 8005490:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005492:	4bab      	ldr	r3, [pc, #684]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 8005494:	2101      	movs	r1, #1
 8005496:	430a      	orrs	r2, r1
 8005498:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800549a:	f7fd ff0b 	bl	80032b4 <HAL_GetTick>
 800549e:	0003      	movs	r3, r0
 80054a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054a4:	f7fd ff06 	bl	80032b4 <HAL_GetTick>
 80054a8:	0002      	movs	r2, r0
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e1c7      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054b6:	4ba2      	ldr	r3, [pc, #648]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80054b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ba:	2202      	movs	r2, #2
 80054bc:	4013      	ands	r3, r2
 80054be:	d0f1      	beq.n	80054a4 <HAL_RCC_OscConfig+0x3d0>
 80054c0:	e018      	b.n	80054f4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054c2:	4b9f      	ldr	r3, [pc, #636]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80054c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054c6:	4b9e      	ldr	r3, [pc, #632]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80054c8:	2101      	movs	r1, #1
 80054ca:	438a      	bics	r2, r1
 80054cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ce:	f7fd fef1 	bl	80032b4 <HAL_GetTick>
 80054d2:	0003      	movs	r3, r0
 80054d4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054d8:	f7fd feec 	bl	80032b4 <HAL_GetTick>
 80054dc:	0002      	movs	r2, r0
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e1ad      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054ea:	4b95      	ldr	r3, [pc, #596]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80054ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ee:	2202      	movs	r2, #2
 80054f0:	4013      	ands	r3, r2
 80054f2:	d1f1      	bne.n	80054d8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2204      	movs	r2, #4
 80054fa:	4013      	ands	r3, r2
 80054fc:	d100      	bne.n	8005500 <HAL_RCC_OscConfig+0x42c>
 80054fe:	e0ae      	b.n	800565e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005500:	2027      	movs	r0, #39	; 0x27
 8005502:	183b      	adds	r3, r7, r0
 8005504:	2200      	movs	r2, #0
 8005506:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005508:	4b8d      	ldr	r3, [pc, #564]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 800550a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	055b      	lsls	r3, r3, #21
 8005510:	4013      	ands	r3, r2
 8005512:	d109      	bne.n	8005528 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005514:	4b8a      	ldr	r3, [pc, #552]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 8005516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005518:	4b89      	ldr	r3, [pc, #548]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 800551a:	2180      	movs	r1, #128	; 0x80
 800551c:	0549      	lsls	r1, r1, #21
 800551e:	430a      	orrs	r2, r1
 8005520:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005522:	183b      	adds	r3, r7, r0
 8005524:	2201      	movs	r2, #1
 8005526:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005528:	4b87      	ldr	r3, [pc, #540]	; (8005748 <HAL_RCC_OscConfig+0x674>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	2380      	movs	r3, #128	; 0x80
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	4013      	ands	r3, r2
 8005532:	d11a      	bne.n	800556a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005534:	4b84      	ldr	r3, [pc, #528]	; (8005748 <HAL_RCC_OscConfig+0x674>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	4b83      	ldr	r3, [pc, #524]	; (8005748 <HAL_RCC_OscConfig+0x674>)
 800553a:	2180      	movs	r1, #128	; 0x80
 800553c:	0049      	lsls	r1, r1, #1
 800553e:	430a      	orrs	r2, r1
 8005540:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005542:	f7fd feb7 	bl	80032b4 <HAL_GetTick>
 8005546:	0003      	movs	r3, r0
 8005548:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800554c:	f7fd feb2 	bl	80032b4 <HAL_GetTick>
 8005550:	0002      	movs	r2, r0
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b64      	cmp	r3, #100	; 0x64
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e173      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800555e:	4b7a      	ldr	r3, [pc, #488]	; (8005748 <HAL_RCC_OscConfig+0x674>)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	2380      	movs	r3, #128	; 0x80
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	4013      	ands	r3, r2
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	429a      	cmp	r2, r3
 8005574:	d107      	bne.n	8005586 <HAL_RCC_OscConfig+0x4b2>
 8005576:	4b72      	ldr	r3, [pc, #456]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 8005578:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800557a:	4b71      	ldr	r3, [pc, #452]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 800557c:	2180      	movs	r1, #128	; 0x80
 800557e:	0049      	lsls	r1, r1, #1
 8005580:	430a      	orrs	r2, r1
 8005582:	651a      	str	r2, [r3, #80]	; 0x50
 8005584:	e031      	b.n	80055ea <HAL_RCC_OscConfig+0x516>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10c      	bne.n	80055a8 <HAL_RCC_OscConfig+0x4d4>
 800558e:	4b6c      	ldr	r3, [pc, #432]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 8005590:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005592:	4b6b      	ldr	r3, [pc, #428]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 8005594:	496b      	ldr	r1, [pc, #428]	; (8005744 <HAL_RCC_OscConfig+0x670>)
 8005596:	400a      	ands	r2, r1
 8005598:	651a      	str	r2, [r3, #80]	; 0x50
 800559a:	4b69      	ldr	r3, [pc, #420]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 800559c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800559e:	4b68      	ldr	r3, [pc, #416]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80055a0:	496a      	ldr	r1, [pc, #424]	; (800574c <HAL_RCC_OscConfig+0x678>)
 80055a2:	400a      	ands	r2, r1
 80055a4:	651a      	str	r2, [r3, #80]	; 0x50
 80055a6:	e020      	b.n	80055ea <HAL_RCC_OscConfig+0x516>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	23a0      	movs	r3, #160	; 0xa0
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d10e      	bne.n	80055d2 <HAL_RCC_OscConfig+0x4fe>
 80055b4:	4b62      	ldr	r3, [pc, #392]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80055b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055b8:	4b61      	ldr	r3, [pc, #388]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80055ba:	2180      	movs	r1, #128	; 0x80
 80055bc:	00c9      	lsls	r1, r1, #3
 80055be:	430a      	orrs	r2, r1
 80055c0:	651a      	str	r2, [r3, #80]	; 0x50
 80055c2:	4b5f      	ldr	r3, [pc, #380]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80055c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055c6:	4b5e      	ldr	r3, [pc, #376]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80055c8:	2180      	movs	r1, #128	; 0x80
 80055ca:	0049      	lsls	r1, r1, #1
 80055cc:	430a      	orrs	r2, r1
 80055ce:	651a      	str	r2, [r3, #80]	; 0x50
 80055d0:	e00b      	b.n	80055ea <HAL_RCC_OscConfig+0x516>
 80055d2:	4b5b      	ldr	r3, [pc, #364]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80055d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055d6:	4b5a      	ldr	r3, [pc, #360]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80055d8:	495a      	ldr	r1, [pc, #360]	; (8005744 <HAL_RCC_OscConfig+0x670>)
 80055da:	400a      	ands	r2, r1
 80055dc:	651a      	str	r2, [r3, #80]	; 0x50
 80055de:	4b58      	ldr	r3, [pc, #352]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80055e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055e2:	4b57      	ldr	r3, [pc, #348]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80055e4:	4959      	ldr	r1, [pc, #356]	; (800574c <HAL_RCC_OscConfig+0x678>)
 80055e6:	400a      	ands	r2, r1
 80055e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d015      	beq.n	800561e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f2:	f7fd fe5f 	bl	80032b4 <HAL_GetTick>
 80055f6:	0003      	movs	r3, r0
 80055f8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055fa:	e009      	b.n	8005610 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055fc:	f7fd fe5a 	bl	80032b4 <HAL_GetTick>
 8005600:	0002      	movs	r2, r0
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	4a52      	ldr	r2, [pc, #328]	; (8005750 <HAL_RCC_OscConfig+0x67c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e11a      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005610:	4b4b      	ldr	r3, [pc, #300]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 8005612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4013      	ands	r3, r2
 800561a:	d0ef      	beq.n	80055fc <HAL_RCC_OscConfig+0x528>
 800561c:	e014      	b.n	8005648 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800561e:	f7fd fe49 	bl	80032b4 <HAL_GetTick>
 8005622:	0003      	movs	r3, r0
 8005624:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005626:	e009      	b.n	800563c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005628:	f7fd fe44 	bl	80032b4 <HAL_GetTick>
 800562c:	0002      	movs	r2, r0
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	4a47      	ldr	r2, [pc, #284]	; (8005750 <HAL_RCC_OscConfig+0x67c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e104      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800563c:	4b40      	ldr	r3, [pc, #256]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 800563e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005640:	2380      	movs	r3, #128	; 0x80
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4013      	ands	r3, r2
 8005646:	d1ef      	bne.n	8005628 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005648:	2327      	movs	r3, #39	; 0x27
 800564a:	18fb      	adds	r3, r7, r3
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d105      	bne.n	800565e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005652:	4b3b      	ldr	r3, [pc, #236]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 8005654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005656:	4b3a      	ldr	r3, [pc, #232]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 8005658:	493e      	ldr	r1, [pc, #248]	; (8005754 <HAL_RCC_OscConfig+0x680>)
 800565a:	400a      	ands	r2, r1
 800565c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2220      	movs	r2, #32
 8005664:	4013      	ands	r3, r2
 8005666:	d049      	beq.n	80056fc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d026      	beq.n	80056be <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005670:	4b33      	ldr	r3, [pc, #204]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	4b32      	ldr	r3, [pc, #200]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 8005676:	2101      	movs	r1, #1
 8005678:	430a      	orrs	r2, r1
 800567a:	609a      	str	r2, [r3, #8]
 800567c:	4b30      	ldr	r3, [pc, #192]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 800567e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005680:	4b2f      	ldr	r3, [pc, #188]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 8005682:	2101      	movs	r1, #1
 8005684:	430a      	orrs	r2, r1
 8005686:	635a      	str	r2, [r3, #52]	; 0x34
 8005688:	4b33      	ldr	r3, [pc, #204]	; (8005758 <HAL_RCC_OscConfig+0x684>)
 800568a:	6a1a      	ldr	r2, [r3, #32]
 800568c:	4b32      	ldr	r3, [pc, #200]	; (8005758 <HAL_RCC_OscConfig+0x684>)
 800568e:	2180      	movs	r1, #128	; 0x80
 8005690:	0189      	lsls	r1, r1, #6
 8005692:	430a      	orrs	r2, r1
 8005694:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005696:	f7fd fe0d 	bl	80032b4 <HAL_GetTick>
 800569a:	0003      	movs	r3, r0
 800569c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056a0:	f7fd fe08 	bl	80032b4 <HAL_GetTick>
 80056a4:	0002      	movs	r2, r0
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e0c9      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056b2:	4b23      	ldr	r3, [pc, #140]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2202      	movs	r2, #2
 80056b8:	4013      	ands	r3, r2
 80056ba:	d0f1      	beq.n	80056a0 <HAL_RCC_OscConfig+0x5cc>
 80056bc:	e01e      	b.n	80056fc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80056be:	4b20      	ldr	r3, [pc, #128]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	4b1f      	ldr	r3, [pc, #124]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80056c4:	2101      	movs	r1, #1
 80056c6:	438a      	bics	r2, r1
 80056c8:	609a      	str	r2, [r3, #8]
 80056ca:	4b23      	ldr	r3, [pc, #140]	; (8005758 <HAL_RCC_OscConfig+0x684>)
 80056cc:	6a1a      	ldr	r2, [r3, #32]
 80056ce:	4b22      	ldr	r3, [pc, #136]	; (8005758 <HAL_RCC_OscConfig+0x684>)
 80056d0:	4922      	ldr	r1, [pc, #136]	; (800575c <HAL_RCC_OscConfig+0x688>)
 80056d2:	400a      	ands	r2, r1
 80056d4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d6:	f7fd fded 	bl	80032b4 <HAL_GetTick>
 80056da:	0003      	movs	r3, r0
 80056dc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056e0:	f7fd fde8 	bl	80032b4 <HAL_GetTick>
 80056e4:	0002      	movs	r2, r0
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e0a9      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80056f2:	4b13      	ldr	r3, [pc, #76]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2202      	movs	r2, #2
 80056f8:	4013      	ands	r3, r2
 80056fa:	d1f1      	bne.n	80056e0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	2b00      	cmp	r3, #0
 8005702:	d100      	bne.n	8005706 <HAL_RCC_OscConfig+0x632>
 8005704:	e09e      	b.n	8005844 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	2b0c      	cmp	r3, #12
 800570a:	d100      	bne.n	800570e <HAL_RCC_OscConfig+0x63a>
 800570c:	e077      	b.n	80057fe <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005712:	2b02      	cmp	r3, #2
 8005714:	d158      	bne.n	80057c8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005716:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4b09      	ldr	r3, [pc, #36]	; (8005740 <HAL_RCC_OscConfig+0x66c>)
 800571c:	4910      	ldr	r1, [pc, #64]	; (8005760 <HAL_RCC_OscConfig+0x68c>)
 800571e:	400a      	ands	r2, r1
 8005720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005722:	f7fd fdc7 	bl	80032b4 <HAL_GetTick>
 8005726:	0003      	movs	r3, r0
 8005728:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800572a:	e01b      	b.n	8005764 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800572c:	f7fd fdc2 	bl	80032b4 <HAL_GetTick>
 8005730:	0002      	movs	r2, r0
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d914      	bls.n	8005764 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e083      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	40021000 	.word	0x40021000
 8005744:	fffffeff 	.word	0xfffffeff
 8005748:	40007000 	.word	0x40007000
 800574c:	fffffbff 	.word	0xfffffbff
 8005750:	00001388 	.word	0x00001388
 8005754:	efffffff 	.word	0xefffffff
 8005758:	40010000 	.word	0x40010000
 800575c:	ffffdfff 	.word	0xffffdfff
 8005760:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005764:	4b3a      	ldr	r3, [pc, #232]	; (8005850 <HAL_RCC_OscConfig+0x77c>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	2380      	movs	r3, #128	; 0x80
 800576a:	049b      	lsls	r3, r3, #18
 800576c:	4013      	ands	r3, r2
 800576e:	d1dd      	bne.n	800572c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005770:	4b37      	ldr	r3, [pc, #220]	; (8005850 <HAL_RCC_OscConfig+0x77c>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a37      	ldr	r2, [pc, #220]	; (8005854 <HAL_RCC_OscConfig+0x780>)
 8005776:	4013      	ands	r3, r2
 8005778:	0019      	movs	r1, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005788:	431a      	orrs	r2, r3
 800578a:	4b31      	ldr	r3, [pc, #196]	; (8005850 <HAL_RCC_OscConfig+0x77c>)
 800578c:	430a      	orrs	r2, r1
 800578e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005790:	4b2f      	ldr	r3, [pc, #188]	; (8005850 <HAL_RCC_OscConfig+0x77c>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4b2e      	ldr	r3, [pc, #184]	; (8005850 <HAL_RCC_OscConfig+0x77c>)
 8005796:	2180      	movs	r1, #128	; 0x80
 8005798:	0449      	lsls	r1, r1, #17
 800579a:	430a      	orrs	r2, r1
 800579c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800579e:	f7fd fd89 	bl	80032b4 <HAL_GetTick>
 80057a2:	0003      	movs	r3, r0
 80057a4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a8:	f7fd fd84 	bl	80032b4 <HAL_GetTick>
 80057ac:	0002      	movs	r2, r0
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e045      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80057ba:	4b25      	ldr	r3, [pc, #148]	; (8005850 <HAL_RCC_OscConfig+0x77c>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	2380      	movs	r3, #128	; 0x80
 80057c0:	049b      	lsls	r3, r3, #18
 80057c2:	4013      	ands	r3, r2
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0x6d4>
 80057c6:	e03d      	b.n	8005844 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c8:	4b21      	ldr	r3, [pc, #132]	; (8005850 <HAL_RCC_OscConfig+0x77c>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	4b20      	ldr	r3, [pc, #128]	; (8005850 <HAL_RCC_OscConfig+0x77c>)
 80057ce:	4922      	ldr	r1, [pc, #136]	; (8005858 <HAL_RCC_OscConfig+0x784>)
 80057d0:	400a      	ands	r2, r1
 80057d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d4:	f7fd fd6e 	bl	80032b4 <HAL_GetTick>
 80057d8:	0003      	movs	r3, r0
 80057da:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057de:	f7fd fd69 	bl	80032b4 <HAL_GetTick>
 80057e2:	0002      	movs	r2, r0
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e02a      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80057f0:	4b17      	ldr	r3, [pc, #92]	; (8005850 <HAL_RCC_OscConfig+0x77c>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	2380      	movs	r3, #128	; 0x80
 80057f6:	049b      	lsls	r3, r3, #18
 80057f8:	4013      	ands	r3, r2
 80057fa:	d1f0      	bne.n	80057de <HAL_RCC_OscConfig+0x70a>
 80057fc:	e022      	b.n	8005844 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e01d      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800580a:	4b11      	ldr	r3, [pc, #68]	; (8005850 <HAL_RCC_OscConfig+0x77c>)
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	2380      	movs	r3, #128	; 0x80
 8005814:	025b      	lsls	r3, r3, #9
 8005816:	401a      	ands	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	429a      	cmp	r2, r3
 800581e:	d10f      	bne.n	8005840 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	23f0      	movs	r3, #240	; 0xf0
 8005824:	039b      	lsls	r3, r3, #14
 8005826:	401a      	ands	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582c:	429a      	cmp	r2, r3
 800582e:	d107      	bne.n	8005840 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	23c0      	movs	r3, #192	; 0xc0
 8005834:	041b      	lsls	r3, r3, #16
 8005836:	401a      	ands	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800583c:	429a      	cmp	r2, r3
 800583e:	d001      	beq.n	8005844 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	0018      	movs	r0, r3
 8005848:	46bd      	mov	sp, r7
 800584a:	b00a      	add	sp, #40	; 0x28
 800584c:	bdb0      	pop	{r4, r5, r7, pc}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	40021000 	.word	0x40021000
 8005854:	ff02ffff 	.word	0xff02ffff
 8005858:	feffffff 	.word	0xfeffffff

0800585c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800585c:	b5b0      	push	{r4, r5, r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e128      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005870:	4b96      	ldr	r3, [pc, #600]	; (8005acc <HAL_RCC_ClockConfig+0x270>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2201      	movs	r2, #1
 8005876:	4013      	ands	r3, r2
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d91e      	bls.n	80058bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587e:	4b93      	ldr	r3, [pc, #588]	; (8005acc <HAL_RCC_ClockConfig+0x270>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2201      	movs	r2, #1
 8005884:	4393      	bics	r3, r2
 8005886:	0019      	movs	r1, r3
 8005888:	4b90      	ldr	r3, [pc, #576]	; (8005acc <HAL_RCC_ClockConfig+0x270>)
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005890:	f7fd fd10 	bl	80032b4 <HAL_GetTick>
 8005894:	0003      	movs	r3, r0
 8005896:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005898:	e009      	b.n	80058ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800589a:	f7fd fd0b 	bl	80032b4 <HAL_GetTick>
 800589e:	0002      	movs	r2, r0
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	4a8a      	ldr	r2, [pc, #552]	; (8005ad0 <HAL_RCC_ClockConfig+0x274>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e109      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ae:	4b87      	ldr	r3, [pc, #540]	; (8005acc <HAL_RCC_ClockConfig+0x270>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2201      	movs	r2, #1
 80058b4:	4013      	ands	r3, r2
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d1ee      	bne.n	800589a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2202      	movs	r2, #2
 80058c2:	4013      	ands	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058c6:	4b83      	ldr	r3, [pc, #524]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	22f0      	movs	r2, #240	; 0xf0
 80058cc:	4393      	bics	r3, r2
 80058ce:	0019      	movs	r1, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	4b7f      	ldr	r3, [pc, #508]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 80058d6:	430a      	orrs	r2, r1
 80058d8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2201      	movs	r2, #1
 80058e0:	4013      	ands	r3, r2
 80058e2:	d100      	bne.n	80058e6 <HAL_RCC_ClockConfig+0x8a>
 80058e4:	e089      	b.n	80059fa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d107      	bne.n	80058fe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058ee:	4b79      	ldr	r3, [pc, #484]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	2380      	movs	r3, #128	; 0x80
 80058f4:	029b      	lsls	r3, r3, #10
 80058f6:	4013      	ands	r3, r2
 80058f8:	d120      	bne.n	800593c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e0e1      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b03      	cmp	r3, #3
 8005904:	d107      	bne.n	8005916 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005906:	4b73      	ldr	r3, [pc, #460]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	2380      	movs	r3, #128	; 0x80
 800590c:	049b      	lsls	r3, r3, #18
 800590e:	4013      	ands	r3, r2
 8005910:	d114      	bne.n	800593c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e0d5      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d106      	bne.n	800592c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800591e:	4b6d      	ldr	r3, [pc, #436]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2204      	movs	r2, #4
 8005924:	4013      	ands	r3, r2
 8005926:	d109      	bne.n	800593c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e0ca      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800592c:	4b69      	ldr	r3, [pc, #420]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4013      	ands	r3, r2
 8005936:	d101      	bne.n	800593c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0c2      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800593c:	4b65      	ldr	r3, [pc, #404]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	2203      	movs	r2, #3
 8005942:	4393      	bics	r3, r2
 8005944:	0019      	movs	r1, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	4b62      	ldr	r3, [pc, #392]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 800594c:	430a      	orrs	r2, r1
 800594e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005950:	f7fd fcb0 	bl	80032b4 <HAL_GetTick>
 8005954:	0003      	movs	r3, r0
 8005956:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d111      	bne.n	8005984 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005960:	e009      	b.n	8005976 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005962:	f7fd fca7 	bl	80032b4 <HAL_GetTick>
 8005966:	0002      	movs	r2, r0
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	4a58      	ldr	r2, [pc, #352]	; (8005ad0 <HAL_RCC_ClockConfig+0x274>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e0a5      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005976:	4b57      	ldr	r3, [pc, #348]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	220c      	movs	r2, #12
 800597c:	4013      	ands	r3, r2
 800597e:	2b08      	cmp	r3, #8
 8005980:	d1ef      	bne.n	8005962 <HAL_RCC_ClockConfig+0x106>
 8005982:	e03a      	b.n	80059fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2b03      	cmp	r3, #3
 800598a:	d111      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800598c:	e009      	b.n	80059a2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800598e:	f7fd fc91 	bl	80032b4 <HAL_GetTick>
 8005992:	0002      	movs	r2, r0
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	4a4d      	ldr	r2, [pc, #308]	; (8005ad0 <HAL_RCC_ClockConfig+0x274>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e08f      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059a2:	4b4c      	ldr	r3, [pc, #304]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	220c      	movs	r2, #12
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b0c      	cmp	r3, #12
 80059ac:	d1ef      	bne.n	800598e <HAL_RCC_ClockConfig+0x132>
 80059ae:	e024      	b.n	80059fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d11b      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80059b8:	e009      	b.n	80059ce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ba:	f7fd fc7b 	bl	80032b4 <HAL_GetTick>
 80059be:	0002      	movs	r2, r0
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	4a42      	ldr	r2, [pc, #264]	; (8005ad0 <HAL_RCC_ClockConfig+0x274>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e079      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80059ce:	4b41      	ldr	r3, [pc, #260]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	220c      	movs	r2, #12
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d1ef      	bne.n	80059ba <HAL_RCC_ClockConfig+0x15e>
 80059da:	e00e      	b.n	80059fa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059dc:	f7fd fc6a 	bl	80032b4 <HAL_GetTick>
 80059e0:	0002      	movs	r2, r0
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	4a3a      	ldr	r2, [pc, #232]	; (8005ad0 <HAL_RCC_ClockConfig+0x274>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e068      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80059f0:	4b38      	ldr	r3, [pc, #224]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	220c      	movs	r2, #12
 80059f6:	4013      	ands	r3, r2
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059fa:	4b34      	ldr	r3, [pc, #208]	; (8005acc <HAL_RCC_ClockConfig+0x270>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2201      	movs	r2, #1
 8005a00:	4013      	ands	r3, r2
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d21e      	bcs.n	8005a46 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a08:	4b30      	ldr	r3, [pc, #192]	; (8005acc <HAL_RCC_ClockConfig+0x270>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	4393      	bics	r3, r2
 8005a10:	0019      	movs	r1, r3
 8005a12:	4b2e      	ldr	r3, [pc, #184]	; (8005acc <HAL_RCC_ClockConfig+0x270>)
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a1a:	f7fd fc4b 	bl	80032b4 <HAL_GetTick>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a22:	e009      	b.n	8005a38 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a24:	f7fd fc46 	bl	80032b4 <HAL_GetTick>
 8005a28:	0002      	movs	r2, r0
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	4a28      	ldr	r2, [pc, #160]	; (8005ad0 <HAL_RCC_ClockConfig+0x274>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e044      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a38:	4b24      	ldr	r3, [pc, #144]	; (8005acc <HAL_RCC_ClockConfig+0x270>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	4013      	ands	r3, r2
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d1ee      	bne.n	8005a24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d009      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a50:	4b20      	ldr	r3, [pc, #128]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4a20      	ldr	r2, [pc, #128]	; (8005ad8 <HAL_RCC_ClockConfig+0x27c>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	0019      	movs	r1, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	4b1d      	ldr	r3, [pc, #116]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 8005a60:	430a      	orrs	r2, r1
 8005a62:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2208      	movs	r2, #8
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	d00a      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a6e:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	4a1a      	ldr	r2, [pc, #104]	; (8005adc <HAL_RCC_ClockConfig+0x280>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	0019      	movs	r1, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	00da      	lsls	r2, r3, #3
 8005a7e:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 8005a80:	430a      	orrs	r2, r1
 8005a82:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a84:	f000 f832 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005a88:	0001      	movs	r1, r0
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <HAL_RCC_ClockConfig+0x278>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	091b      	lsrs	r3, r3, #4
 8005a90:	220f      	movs	r2, #15
 8005a92:	4013      	ands	r3, r2
 8005a94:	4a12      	ldr	r2, [pc, #72]	; (8005ae0 <HAL_RCC_ClockConfig+0x284>)
 8005a96:	5cd3      	ldrb	r3, [r2, r3]
 8005a98:	000a      	movs	r2, r1
 8005a9a:	40da      	lsrs	r2, r3
 8005a9c:	4b11      	ldr	r3, [pc, #68]	; (8005ae4 <HAL_RCC_ClockConfig+0x288>)
 8005a9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005aa0:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <HAL_RCC_ClockConfig+0x28c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	250b      	movs	r5, #11
 8005aa6:	197c      	adds	r4, r7, r5
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f7fd fbbd 	bl	8003228 <HAL_InitTick>
 8005aae:	0003      	movs	r3, r0
 8005ab0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005ab2:	197b      	adds	r3, r7, r5
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005aba:	197b      	adds	r3, r7, r5
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	e000      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	b004      	add	sp, #16
 8005ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	40022000 	.word	0x40022000
 8005ad0:	00001388 	.word	0x00001388
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	fffff8ff 	.word	0xfffff8ff
 8005adc:	ffffc7ff 	.word	0xffffc7ff
 8005ae0:	08007c70 	.word	0x08007c70
 8005ae4:	2000003c 	.word	0x2000003c
 8005ae8:	20000040 	.word	0x20000040

08005aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aec:	b5b0      	push	{r4, r5, r7, lr}
 8005aee:	b08e      	sub	sp, #56	; 0x38
 8005af0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005af2:	4b4c      	ldr	r3, [pc, #304]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x138>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005afa:	230c      	movs	r3, #12
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b0c      	cmp	r3, #12
 8005b00:	d014      	beq.n	8005b2c <HAL_RCC_GetSysClockFreq+0x40>
 8005b02:	d900      	bls.n	8005b06 <HAL_RCC_GetSysClockFreq+0x1a>
 8005b04:	e07b      	b.n	8005bfe <HAL_RCC_GetSysClockFreq+0x112>
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d002      	beq.n	8005b10 <HAL_RCC_GetSysClockFreq+0x24>
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d00b      	beq.n	8005b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b0e:	e076      	b.n	8005bfe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005b10:	4b44      	ldr	r3, [pc, #272]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x138>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2210      	movs	r2, #16
 8005b16:	4013      	ands	r3, r2
 8005b18:	d002      	beq.n	8005b20 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005b1a:	4b43      	ldr	r3, [pc, #268]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005b1c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005b1e:	e07c      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005b20:	4b42      	ldr	r3, [pc, #264]	; (8005c2c <HAL_RCC_GetSysClockFreq+0x140>)
 8005b22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b24:	e079      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b26:	4b42      	ldr	r3, [pc, #264]	; (8005c30 <HAL_RCC_GetSysClockFreq+0x144>)
 8005b28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b2a:	e076      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2e:	0c9a      	lsrs	r2, r3, #18
 8005b30:	230f      	movs	r3, #15
 8005b32:	401a      	ands	r2, r3
 8005b34:	4b3f      	ldr	r3, [pc, #252]	; (8005c34 <HAL_RCC_GetSysClockFreq+0x148>)
 8005b36:	5c9b      	ldrb	r3, [r3, r2]
 8005b38:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	0d9a      	lsrs	r2, r3, #22
 8005b3e:	2303      	movs	r3, #3
 8005b40:	4013      	ands	r3, r2
 8005b42:	3301      	adds	r3, #1
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b46:	4b37      	ldr	r3, [pc, #220]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x138>)
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	2380      	movs	r3, #128	; 0x80
 8005b4c:	025b      	lsls	r3, r3, #9
 8005b4e:	4013      	ands	r3, r2
 8005b50:	d01a      	beq.n	8005b88 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	2300      	movs	r3, #0
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	4a35      	ldr	r2, [pc, #212]	; (8005c30 <HAL_RCC_GetSysClockFreq+0x144>)
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	69b8      	ldr	r0, [r7, #24]
 8005b60:	69f9      	ldr	r1, [r7, #28]
 8005b62:	f7fa fbc9 	bl	80002f8 <__aeabi_lmul>
 8005b66:	0002      	movs	r2, r0
 8005b68:	000b      	movs	r3, r1
 8005b6a:	0010      	movs	r0, r2
 8005b6c:	0019      	movs	r1, r3
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	2300      	movs	r3, #0
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f7fa fb9d 	bl	80002b8 <__aeabi_uldivmod>
 8005b7e:	0002      	movs	r2, r0
 8005b80:	000b      	movs	r3, r1
 8005b82:	0013      	movs	r3, r2
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34
 8005b86:	e037      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005b88:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x138>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2210      	movs	r2, #16
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d01a      	beq.n	8005bc8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	4a23      	ldr	r2, [pc, #140]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	68b8      	ldr	r0, [r7, #8]
 8005ba0:	68f9      	ldr	r1, [r7, #12]
 8005ba2:	f7fa fba9 	bl	80002f8 <__aeabi_lmul>
 8005ba6:	0002      	movs	r2, r0
 8005ba8:	000b      	movs	r3, r1
 8005baa:	0010      	movs	r0, r2
 8005bac:	0019      	movs	r1, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	603b      	str	r3, [r7, #0]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	607b      	str	r3, [r7, #4]
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f7fa fb7d 	bl	80002b8 <__aeabi_uldivmod>
 8005bbe:	0002      	movs	r2, r0
 8005bc0:	000b      	movs	r3, r1
 8005bc2:	0013      	movs	r3, r2
 8005bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bc6:	e017      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	0018      	movs	r0, r3
 8005bcc:	2300      	movs	r3, #0
 8005bce:	0019      	movs	r1, r3
 8005bd0:	4a16      	ldr	r2, [pc, #88]	; (8005c2c <HAL_RCC_GetSysClockFreq+0x140>)
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f7fa fb90 	bl	80002f8 <__aeabi_lmul>
 8005bd8:	0002      	movs	r2, r0
 8005bda:	000b      	movs	r3, r1
 8005bdc:	0010      	movs	r0, r2
 8005bde:	0019      	movs	r1, r3
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	001c      	movs	r4, r3
 8005be4:	2300      	movs	r3, #0
 8005be6:	001d      	movs	r5, r3
 8005be8:	0022      	movs	r2, r4
 8005bea:	002b      	movs	r3, r5
 8005bec:	f7fa fb64 	bl	80002b8 <__aeabi_uldivmod>
 8005bf0:	0002      	movs	r2, r0
 8005bf2:	000b      	movs	r3, r1
 8005bf4:	0013      	movs	r3, r2
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005bfc:	e00d      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005bfe:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	0b5b      	lsrs	r3, r3, #13
 8005c04:	2207      	movs	r2, #7
 8005c06:	4013      	ands	r3, r2
 8005c08:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	2280      	movs	r2, #128	; 0x80
 8005c10:	0212      	lsls	r2, r2, #8
 8005c12:	409a      	lsls	r2, r3
 8005c14:	0013      	movs	r3, r2
 8005c16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005c18:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b00e      	add	sp, #56	; 0x38
 8005c22:	bdb0      	pop	{r4, r5, r7, pc}
 8005c24:	40021000 	.word	0x40021000
 8005c28:	003d0900 	.word	0x003d0900
 8005c2c:	00f42400 	.word	0x00f42400
 8005c30:	007a1200 	.word	0x007a1200
 8005c34:	08007c88 	.word	0x08007c88

08005c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c3c:	4b02      	ldr	r3, [pc, #8]	; (8005c48 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
}
 8005c40:	0018      	movs	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	2000003c 	.word	0x2000003c

08005c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c50:	f7ff fff2 	bl	8005c38 <HAL_RCC_GetHCLKFreq>
 8005c54:	0001      	movs	r1, r0
 8005c56:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	0a1b      	lsrs	r3, r3, #8
 8005c5c:	2207      	movs	r2, #7
 8005c5e:	4013      	ands	r3, r2
 8005c60:	4a04      	ldr	r2, [pc, #16]	; (8005c74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c62:	5cd3      	ldrb	r3, [r2, r3]
 8005c64:	40d9      	lsrs	r1, r3
 8005c66:	000b      	movs	r3, r1
}
 8005c68:	0018      	movs	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	40021000 	.word	0x40021000
 8005c74:	08007c80 	.word	0x08007c80

08005c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c7c:	f7ff ffdc 	bl	8005c38 <HAL_RCC_GetHCLKFreq>
 8005c80:	0001      	movs	r1, r0
 8005c82:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	0adb      	lsrs	r3, r3, #11
 8005c88:	2207      	movs	r2, #7
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	4a04      	ldr	r2, [pc, #16]	; (8005ca0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c8e:	5cd3      	ldrb	r3, [r2, r3]
 8005c90:	40d9      	lsrs	r1, r3
 8005c92:	000b      	movs	r3, r1
}
 8005c94:	0018      	movs	r0, r3
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	46c0      	nop			; (mov r8, r8)
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	08007c80 	.word	0x08007c80

08005ca4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005cac:	2017      	movs	r0, #23
 8005cae:	183b      	adds	r3, r7, r0
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d100      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005cbe:	e0c7      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cc0:	4b93      	ldr	r3, [pc, #588]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	055b      	lsls	r3, r3, #21
 8005cc8:	4013      	ands	r3, r2
 8005cca:	d109      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ccc:	4b90      	ldr	r3, [pc, #576]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd0:	4b8f      	ldr	r3, [pc, #572]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005cd2:	2180      	movs	r1, #128	; 0x80
 8005cd4:	0549      	lsls	r1, r1, #21
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005cda:	183b      	adds	r3, r7, r0
 8005cdc:	2201      	movs	r2, #1
 8005cde:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce0:	4b8c      	ldr	r3, [pc, #560]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	2380      	movs	r3, #128	; 0x80
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d11a      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cec:	4b89      	ldr	r3, [pc, #548]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4b88      	ldr	r3, [pc, #544]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005cf2:	2180      	movs	r1, #128	; 0x80
 8005cf4:	0049      	lsls	r1, r1, #1
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cfa:	f7fd fadb 	bl	80032b4 <HAL_GetTick>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d02:	e008      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d04:	f7fd fad6 	bl	80032b4 <HAL_GetTick>
 8005d08:	0002      	movs	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b64      	cmp	r3, #100	; 0x64
 8005d10:	d901      	bls.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e0f7      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x262>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d16:	4b7f      	ldr	r3, [pc, #508]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	2380      	movs	r3, #128	; 0x80
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	4013      	ands	r3, r2
 8005d20:	d0f0      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005d22:	4b7b      	ldr	r3, [pc, #492]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	23c0      	movs	r3, #192	; 0xc0
 8005d28:	039b      	lsls	r3, r3, #14
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	23c0      	movs	r3, #192	; 0xc0
 8005d34:	039b      	lsls	r3, r3, #14
 8005d36:	4013      	ands	r3, r2
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d013      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	23c0      	movs	r3, #192	; 0xc0
 8005d44:	029b      	lsls	r3, r3, #10
 8005d46:	401a      	ands	r2, r3
 8005d48:	23c0      	movs	r3, #192	; 0xc0
 8005d4a:	029b      	lsls	r3, r3, #10
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d10a      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d50:	4b6f      	ldr	r3, [pc, #444]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	2380      	movs	r3, #128	; 0x80
 8005d56:	029b      	lsls	r3, r3, #10
 8005d58:	401a      	ands	r2, r3
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	029b      	lsls	r3, r3, #10
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d101      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e0cf      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x262>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005d66:	4b6a      	ldr	r3, [pc, #424]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d6a:	23c0      	movs	r3, #192	; 0xc0
 8005d6c:	029b      	lsls	r3, r3, #10
 8005d6e:	4013      	ands	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d03b      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	23c0      	movs	r3, #192	; 0xc0
 8005d7e:	029b      	lsls	r3, r3, #10
 8005d80:	4013      	ands	r3, r2
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d033      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d02e      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005d92:	4b5f      	ldr	r3, [pc, #380]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d96:	4a60      	ldr	r2, [pc, #384]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d9c:	4b5c      	ldr	r3, [pc, #368]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005d9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005da0:	4b5b      	ldr	r3, [pc, #364]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005da2:	2180      	movs	r1, #128	; 0x80
 8005da4:	0309      	lsls	r1, r1, #12
 8005da6:	430a      	orrs	r2, r1
 8005da8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005daa:	4b59      	ldr	r3, [pc, #356]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dae:	4b58      	ldr	r3, [pc, #352]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005db0:	495a      	ldr	r1, [pc, #360]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005db2:	400a      	ands	r2, r1
 8005db4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005db6:	4b56      	ldr	r3, [pc, #344]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	2380      	movs	r3, #128	; 0x80
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	d014      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc6:	f7fd fa75 	bl	80032b4 <HAL_GetTick>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dce:	e009      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dd0:	f7fd fa70 	bl	80032b4 <HAL_GetTick>
 8005dd4:	0002      	movs	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	4a51      	ldr	r2, [pc, #324]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e090      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x262>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005de4:	4b4a      	ldr	r3, [pc, #296]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005de6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005de8:	2380      	movs	r3, #128	; 0x80
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4013      	ands	r3, r2
 8005dee:	d0ef      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2220      	movs	r2, #32
 8005df6:	4013      	ands	r3, r2
 8005df8:	d01f      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	23c0      	movs	r3, #192	; 0xc0
 8005e00:	029b      	lsls	r3, r3, #10
 8005e02:	401a      	ands	r2, r3
 8005e04:	23c0      	movs	r3, #192	; 0xc0
 8005e06:	029b      	lsls	r3, r3, #10
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d10c      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005e0c:	4b40      	ldr	r3, [pc, #256]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a44      	ldr	r2, [pc, #272]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	0019      	movs	r1, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	23c0      	movs	r3, #192	; 0xc0
 8005e1c:	039b      	lsls	r3, r3, #14
 8005e1e:	401a      	ands	r2, r3
 8005e20:	4b3b      	ldr	r3, [pc, #236]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e22:	430a      	orrs	r2, r1
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	4b3a      	ldr	r3, [pc, #232]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	23c0      	movs	r3, #192	; 0xc0
 8005e30:	029b      	lsls	r3, r3, #10
 8005e32:	401a      	ands	r2, r3
 8005e34:	4b36      	ldr	r3, [pc, #216]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e36:	430a      	orrs	r2, r1
 8005e38:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e3a:	2317      	movs	r3, #23
 8005e3c:	18fb      	adds	r3, r7, r3
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d105      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e44:	4b32      	ldr	r3, [pc, #200]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e48:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e4a:	4937      	ldr	r1, [pc, #220]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e4c:	400a      	ands	r2, r1
 8005e4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2201      	movs	r2, #1
 8005e56:	4013      	ands	r3, r2
 8005e58:	d009      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e5a:	4b2d      	ldr	r3, [pc, #180]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5e:	2203      	movs	r2, #3
 8005e60:	4393      	bics	r3, r2
 8005e62:	0019      	movs	r1, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	4b29      	ldr	r3, [pc, #164]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2202      	movs	r2, #2
 8005e74:	4013      	ands	r3, r2
 8005e76:	d009      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e78:	4b25      	ldr	r3, [pc, #148]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e7c:	220c      	movs	r2, #12
 8005e7e:	4393      	bics	r3, r2
 8005e80:	0019      	movs	r1, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	4b22      	ldr	r3, [pc, #136]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2204      	movs	r2, #4
 8005e92:	4013      	ands	r3, r2
 8005e94:	d009      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e96:	4b1e      	ldr	r3, [pc, #120]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9a:	4a24      	ldr	r2, [pc, #144]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	0019      	movs	r1, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2208      	movs	r2, #8
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	d009      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eb4:	4b16      	ldr	r3, [pc, #88]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb8:	4a1d      	ldr	r2, [pc, #116]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	0019      	movs	r1, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695a      	ldr	r2, [r3, #20]
 8005ec2:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2240      	movs	r2, #64	; 0x40
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ed2:	4b0f      	ldr	r3, [pc, #60]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed6:	4a17      	ldr	r2, [pc, #92]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	0019      	movs	r1, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2280      	movs	r2, #128	; 0x80
 8005eec:	4013      	ands	r3, r2
 8005eee:	d009      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef4:	4a10      	ldr	r2, [pc, #64]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	0019      	movs	r1, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f00:	430a      	orrs	r2, r1
 8005f02:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	0018      	movs	r0, r3
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	b006      	add	sp, #24
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	40021000 	.word	0x40021000
 8005f14:	40007000 	.word	0x40007000
 8005f18:	fffcffff 	.word	0xfffcffff
 8005f1c:	fff7ffff 	.word	0xfff7ffff
 8005f20:	00001388 	.word	0x00001388
 8005f24:	ffcfffff 	.word	0xffcfffff
 8005f28:	efffffff 	.word	0xefffffff
 8005f2c:	fffff3ff 	.word	0xfffff3ff
 8005f30:	ffffcfff 	.word	0xffffcfff
 8005f34:	fbffffff 	.word	0xfbffffff
 8005f38:	fff3ffff 	.word	0xfff3ffff

08005f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e032      	b.n	8005fb4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2239      	movs	r2, #57	; 0x39
 8005f52:	5c9b      	ldrb	r3, [r3, r2]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d107      	bne.n	8005f6a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2238      	movs	r2, #56	; 0x38
 8005f5e:	2100      	movs	r1, #0
 8005f60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	0018      	movs	r0, r3
 8005f66:	f7fd f83d 	bl	8002fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2239      	movs	r2, #57	; 0x39
 8005f6e:	2102      	movs	r1, #2
 8005f70:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	0019      	movs	r1, r3
 8005f7c:	0010      	movs	r0, r2
 8005f7e:	f000 f971 	bl	8006264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	223e      	movs	r2, #62	; 0x3e
 8005f86:	2101      	movs	r1, #1
 8005f88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	223a      	movs	r2, #58	; 0x3a
 8005f8e:	2101      	movs	r1, #1
 8005f90:	5499      	strb	r1, [r3, r2]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	223b      	movs	r2, #59	; 0x3b
 8005f96:	2101      	movs	r1, #1
 8005f98:	5499      	strb	r1, [r3, r2]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	223c      	movs	r2, #60	; 0x3c
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	5499      	strb	r1, [r3, r2]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	223d      	movs	r2, #61	; 0x3d
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2239      	movs	r2, #57	; 0x39
 8005fae:	2101      	movs	r1, #1
 8005fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b002      	add	sp, #8
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2239      	movs	r2, #57	; 0x39
 8005fc8:	5c9b      	ldrb	r3, [r3, r2]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d001      	beq.n	8005fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e036      	b.n	8006042 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2239      	movs	r2, #57	; 0x39
 8005fd8:	2102      	movs	r1, #2
 8005fda:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	2380      	movs	r3, #128	; 0x80
 8005ff2:	05db      	lsls	r3, r3, #23
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d009      	beq.n	800600c <HAL_TIM_Base_Start_IT+0x50>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a13      	ldr	r2, [pc, #76]	; (800604c <HAL_TIM_Base_Start_IT+0x90>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d004      	beq.n	800600c <HAL_TIM_Base_Start_IT+0x50>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a12      	ldr	r2, [pc, #72]	; (8006050 <HAL_TIM_Base_Start_IT+0x94>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d111      	bne.n	8006030 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2207      	movs	r2, #7
 8006014:	4013      	ands	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b06      	cmp	r3, #6
 800601c:	d010      	beq.n	8006040 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2101      	movs	r1, #1
 800602a:	430a      	orrs	r2, r1
 800602c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800602e:	e007      	b.n	8006040 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2101      	movs	r1, #1
 800603c:	430a      	orrs	r2, r1
 800603e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	0018      	movs	r0, r3
 8006044:	46bd      	mov	sp, r7
 8006046:	b004      	add	sp, #16
 8006048:	bd80      	pop	{r7, pc}
 800604a:	46c0      	nop			; (mov r8, r8)
 800604c:	40010800 	.word	0x40010800
 8006050:	40011400 	.word	0x40011400

08006054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2202      	movs	r2, #2
 8006064:	4013      	ands	r3, r2
 8006066:	2b02      	cmp	r3, #2
 8006068:	d124      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	2202      	movs	r2, #2
 8006072:	4013      	ands	r3, r2
 8006074:	2b02      	cmp	r3, #2
 8006076:	d11d      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2203      	movs	r2, #3
 800607e:	4252      	negs	r2, r2
 8006080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	2203      	movs	r2, #3
 8006090:	4013      	ands	r3, r2
 8006092:	d004      	beq.n	800609e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	0018      	movs	r0, r3
 8006098:	f000 f8cc 	bl	8006234 <HAL_TIM_IC_CaptureCallback>
 800609c:	e007      	b.n	80060ae <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	0018      	movs	r0, r3
 80060a2:	f000 f8bf 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	0018      	movs	r0, r3
 80060aa:	f000 f8cb 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2204      	movs	r2, #4
 80060bc:	4013      	ands	r3, r2
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d125      	bne.n	800610e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	2204      	movs	r2, #4
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d11e      	bne.n	800610e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2205      	movs	r2, #5
 80060d6:	4252      	negs	r2, r2
 80060d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	23c0      	movs	r3, #192	; 0xc0
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4013      	ands	r3, r2
 80060ec:	d004      	beq.n	80060f8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	0018      	movs	r0, r3
 80060f2:	f000 f89f 	bl	8006234 <HAL_TIM_IC_CaptureCallback>
 80060f6:	e007      	b.n	8006108 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	0018      	movs	r0, r3
 80060fc:	f000 f892 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	0018      	movs	r0, r3
 8006104:	f000 f89e 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	2208      	movs	r2, #8
 8006116:	4013      	ands	r3, r2
 8006118:	2b08      	cmp	r3, #8
 800611a:	d124      	bne.n	8006166 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	2208      	movs	r2, #8
 8006124:	4013      	ands	r3, r2
 8006126:	2b08      	cmp	r3, #8
 8006128:	d11d      	bne.n	8006166 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2209      	movs	r2, #9
 8006130:	4252      	negs	r2, r2
 8006132:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2204      	movs	r2, #4
 8006138:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	2203      	movs	r2, #3
 8006142:	4013      	ands	r3, r2
 8006144:	d004      	beq.n	8006150 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	0018      	movs	r0, r3
 800614a:	f000 f873 	bl	8006234 <HAL_TIM_IC_CaptureCallback>
 800614e:	e007      	b.n	8006160 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	0018      	movs	r0, r3
 8006154:	f000 f866 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	0018      	movs	r0, r3
 800615c:	f000 f872 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2210      	movs	r2, #16
 800616e:	4013      	ands	r3, r2
 8006170:	2b10      	cmp	r3, #16
 8006172:	d125      	bne.n	80061c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	2210      	movs	r2, #16
 800617c:	4013      	ands	r3, r2
 800617e:	2b10      	cmp	r3, #16
 8006180:	d11e      	bne.n	80061c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2211      	movs	r2, #17
 8006188:	4252      	negs	r2, r2
 800618a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2208      	movs	r2, #8
 8006190:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	23c0      	movs	r3, #192	; 0xc0
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4013      	ands	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	0018      	movs	r0, r3
 80061a4:	f000 f846 	bl	8006234 <HAL_TIM_IC_CaptureCallback>
 80061a8:	e007      	b.n	80061ba <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	0018      	movs	r0, r3
 80061ae:	f000 f839 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	0018      	movs	r0, r3
 80061b6:	f000 f845 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2201      	movs	r2, #1
 80061c8:	4013      	ands	r3, r2
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d10f      	bne.n	80061ee <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	2201      	movs	r2, #1
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d108      	bne.n	80061ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2202      	movs	r2, #2
 80061e2:	4252      	negs	r2, r2
 80061e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	0018      	movs	r0, r3
 80061ea:	f7fc fd8b 	bl	8002d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	2240      	movs	r2, #64	; 0x40
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b40      	cmp	r3, #64	; 0x40
 80061fa:	d10f      	bne.n	800621c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	2240      	movs	r2, #64	; 0x40
 8006204:	4013      	ands	r3, r2
 8006206:	2b40      	cmp	r3, #64	; 0x40
 8006208:	d108      	bne.n	800621c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2241      	movs	r2, #65	; 0x41
 8006210:	4252      	negs	r2, r2
 8006212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	0018      	movs	r0, r3
 8006218:	f000 f81c 	bl	8006254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800621c:	46c0      	nop			; (mov r8, r8)
 800621e:	46bd      	mov	sp, r7
 8006220:	b002      	add	sp, #8
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800622c:	46c0      	nop			; (mov r8, r8)
 800622e:	46bd      	mov	sp, r7
 8006230:	b002      	add	sp, #8
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800623c:	46c0      	nop			; (mov r8, r8)
 800623e:	46bd      	mov	sp, r7
 8006240:	b002      	add	sp, #8
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800624c:	46c0      	nop			; (mov r8, r8)
 800624e:	46bd      	mov	sp, r7
 8006250:	b002      	add	sp, #8
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800625c:	46c0      	nop			; (mov r8, r8)
 800625e:	46bd      	mov	sp, r7
 8006260:	b002      	add	sp, #8
 8006262:	bd80      	pop	{r7, pc}

08006264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	2380      	movs	r3, #128	; 0x80
 8006278:	05db      	lsls	r3, r3, #23
 800627a:	429a      	cmp	r2, r3
 800627c:	d007      	beq.n	800628e <TIM_Base_SetConfig+0x2a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a1f      	ldr	r2, [pc, #124]	; (8006300 <TIM_Base_SetConfig+0x9c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d003      	beq.n	800628e <TIM_Base_SetConfig+0x2a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a1e      	ldr	r2, [pc, #120]	; (8006304 <TIM_Base_SetConfig+0xa0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d108      	bne.n	80062a0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2270      	movs	r2, #112	; 0x70
 8006292:	4393      	bics	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	2380      	movs	r3, #128	; 0x80
 80062a4:	05db      	lsls	r3, r3, #23
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d007      	beq.n	80062ba <TIM_Base_SetConfig+0x56>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a14      	ldr	r2, [pc, #80]	; (8006300 <TIM_Base_SetConfig+0x9c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d003      	beq.n	80062ba <TIM_Base_SetConfig+0x56>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a13      	ldr	r2, [pc, #76]	; (8006304 <TIM_Base_SetConfig+0xa0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d108      	bne.n	80062cc <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4a12      	ldr	r2, [pc, #72]	; (8006308 <TIM_Base_SetConfig+0xa4>)
 80062be:	4013      	ands	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2280      	movs	r2, #128	; 0x80
 80062d0:	4393      	bics	r3, r2
 80062d2:	001a      	movs	r2, r3
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	615a      	str	r2, [r3, #20]
}
 80062f8:	46c0      	nop			; (mov r8, r8)
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b004      	add	sp, #16
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40010800 	.word	0x40010800
 8006304:	40011400 	.word	0x40011400
 8006308:	fffffcff 	.word	0xfffffcff

0800630c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2238      	movs	r2, #56	; 0x38
 800631a:	5c9b      	ldrb	r3, [r3, r2]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006320:	2302      	movs	r3, #2
 8006322:	e042      	b.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2238      	movs	r2, #56	; 0x38
 8006328:	2101      	movs	r1, #1
 800632a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2239      	movs	r2, #57	; 0x39
 8006330:	2102      	movs	r1, #2
 8006332:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2270      	movs	r2, #112	; 0x70
 8006348:	4393      	bics	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	2380      	movs	r3, #128	; 0x80
 8006364:	05db      	lsls	r3, r3, #23
 8006366:	429a      	cmp	r2, r3
 8006368:	d009      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a11      	ldr	r2, [pc, #68]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a0f      	ldr	r2, [pc, #60]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d10c      	bne.n	8006398 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2280      	movs	r2, #128	; 0x80
 8006382:	4393      	bics	r3, r2
 8006384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	4313      	orrs	r3, r2
 800638e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2239      	movs	r2, #57	; 0x39
 800639c:	2101      	movs	r1, #1
 800639e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2238      	movs	r2, #56	; 0x38
 80063a4:	2100      	movs	r1, #0
 80063a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	0018      	movs	r0, r3
 80063ac:	46bd      	mov	sp, r7
 80063ae:	b004      	add	sp, #16
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	40010800 	.word	0x40010800
 80063b8:	40011400 	.word	0x40011400

080063bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e044      	b.n	8006458 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d107      	bne.n	80063e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2278      	movs	r2, #120	; 0x78
 80063da:	2100      	movs	r1, #0
 80063dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	0018      	movs	r0, r3
 80063e2:	f7fc fe1f 	bl	8003024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2224      	movs	r2, #36	; 0x24
 80063ea:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2101      	movs	r1, #1
 80063f8:	438a      	bics	r2, r1
 80063fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	0018      	movs	r0, r3
 8006400:	f000 f9b6 	bl	8006770 <UART_SetConfig>
 8006404:	0003      	movs	r3, r0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e024      	b.n	8006458 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	0018      	movs	r0, r3
 800641a:	f000 fc2d 	bl	8006c78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	490d      	ldr	r1, [pc, #52]	; (8006460 <HAL_UART_Init+0xa4>)
 800642a:	400a      	ands	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	212a      	movs	r1, #42	; 0x2a
 800643a:	438a      	bics	r2, r1
 800643c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2101      	movs	r1, #1
 800644a:	430a      	orrs	r2, r1
 800644c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	0018      	movs	r0, r3
 8006452:	f000 fcc5 	bl	8006de0 <UART_CheckIdleState>
 8006456:	0003      	movs	r3, r0
}
 8006458:	0018      	movs	r0, r3
 800645a:	46bd      	mov	sp, r7
 800645c:	b002      	add	sp, #8
 800645e:	bd80      	pop	{r7, pc}
 8006460:	ffffb7ff 	.word	0xffffb7ff

08006464 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08a      	sub	sp, #40	; 0x28
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	1dbb      	adds	r3, r7, #6
 8006472:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006478:	2b20      	cmp	r3, #32
 800647a:	d000      	beq.n	800647e <HAL_UART_Transmit+0x1a>
 800647c:	e08c      	b.n	8006598 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_UART_Transmit+0x28>
 8006484:	1dbb      	adds	r3, r7, #6
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e084      	b.n	800659a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	2380      	movs	r3, #128	; 0x80
 8006496:	015b      	lsls	r3, r3, #5
 8006498:	429a      	cmp	r2, r3
 800649a:	d109      	bne.n	80064b0 <HAL_UART_Transmit+0x4c>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d105      	bne.n	80064b0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2201      	movs	r2, #1
 80064a8:	4013      	ands	r3, r2
 80064aa:	d001      	beq.n	80064b0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e074      	b.n	800659a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2284      	movs	r2, #132	; 0x84
 80064b4:	2100      	movs	r1, #0
 80064b6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2221      	movs	r2, #33	; 0x21
 80064bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064be:	f7fc fef9 	bl	80032b4 <HAL_GetTick>
 80064c2:	0003      	movs	r3, r0
 80064c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	1dba      	adds	r2, r7, #6
 80064ca:	2150      	movs	r1, #80	; 0x50
 80064cc:	8812      	ldrh	r2, [r2, #0]
 80064ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	1dba      	adds	r2, r7, #6
 80064d4:	2152      	movs	r1, #82	; 0x52
 80064d6:	8812      	ldrh	r2, [r2, #0]
 80064d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	2380      	movs	r3, #128	; 0x80
 80064e0:	015b      	lsls	r3, r3, #5
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d108      	bne.n	80064f8 <HAL_UART_Transmit+0x94>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d104      	bne.n	80064f8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	e003      	b.n	8006500 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006500:	e02f      	b.n	8006562 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	0013      	movs	r3, r2
 800650c:	2200      	movs	r2, #0
 800650e:	2180      	movs	r1, #128	; 0x80
 8006510:	f000 fd0e 	bl	8006f30 <UART_WaitOnFlagUntilTimeout>
 8006514:	1e03      	subs	r3, r0, #0
 8006516:	d004      	beq.n	8006522 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2220      	movs	r2, #32
 800651c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e03b      	b.n	800659a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10b      	bne.n	8006540 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	001a      	movs	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	05d2      	lsls	r2, r2, #23
 8006534:	0dd2      	lsrs	r2, r2, #23
 8006536:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	3302      	adds	r3, #2
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	e007      	b.n	8006550 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	781a      	ldrb	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	3301      	adds	r3, #1
 800654e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2252      	movs	r2, #82	; 0x52
 8006554:	5a9b      	ldrh	r3, [r3, r2]
 8006556:	b29b      	uxth	r3, r3
 8006558:	3b01      	subs	r3, #1
 800655a:	b299      	uxth	r1, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2252      	movs	r2, #82	; 0x52
 8006560:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2252      	movs	r2, #82	; 0x52
 8006566:	5a9b      	ldrh	r3, [r3, r2]
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1c9      	bne.n	8006502 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	0013      	movs	r3, r2
 8006578:	2200      	movs	r2, #0
 800657a:	2140      	movs	r1, #64	; 0x40
 800657c:	f000 fcd8 	bl	8006f30 <UART_WaitOnFlagUntilTimeout>
 8006580:	1e03      	subs	r3, r0, #0
 8006582:	d004      	beq.n	800658e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e005      	b.n	800659a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	e000      	b.n	800659a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006598:	2302      	movs	r3, #2
  }
}
 800659a:	0018      	movs	r0, r3
 800659c:	46bd      	mov	sp, r7
 800659e:	b008      	add	sp, #32
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08a      	sub	sp, #40	; 0x28
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	1dbb      	adds	r3, r7, #6
 80065b2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2280      	movs	r2, #128	; 0x80
 80065b8:	589b      	ldr	r3, [r3, r2]
 80065ba:	2b20      	cmp	r3, #32
 80065bc:	d000      	beq.n	80065c0 <HAL_UART_Receive+0x1c>
 80065be:	e0d0      	b.n	8006762 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_UART_Receive+0x2a>
 80065c6:	1dbb      	adds	r3, r7, #6
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e0c8      	b.n	8006764 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	2380      	movs	r3, #128	; 0x80
 80065d8:	015b      	lsls	r3, r3, #5
 80065da:	429a      	cmp	r2, r3
 80065dc:	d109      	bne.n	80065f2 <HAL_UART_Receive+0x4e>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d105      	bne.n	80065f2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2201      	movs	r2, #1
 80065ea:	4013      	ands	r3, r2
 80065ec:	d001      	beq.n	80065f2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e0b8      	b.n	8006764 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2284      	movs	r2, #132	; 0x84
 80065f6:	2100      	movs	r1, #0
 80065f8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2280      	movs	r2, #128	; 0x80
 80065fe:	2122      	movs	r1, #34	; 0x22
 8006600:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006608:	f7fc fe54 	bl	80032b4 <HAL_GetTick>
 800660c:	0003      	movs	r3, r0
 800660e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	1dba      	adds	r2, r7, #6
 8006614:	2158      	movs	r1, #88	; 0x58
 8006616:	8812      	ldrh	r2, [r2, #0]
 8006618:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	1dba      	adds	r2, r7, #6
 800661e:	215a      	movs	r1, #90	; 0x5a
 8006620:	8812      	ldrh	r2, [r2, #0]
 8006622:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	2380      	movs	r3, #128	; 0x80
 800662a:	015b      	lsls	r3, r3, #5
 800662c:	429a      	cmp	r2, r3
 800662e:	d10d      	bne.n	800664c <HAL_UART_Receive+0xa8>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d104      	bne.n	8006642 <HAL_UART_Receive+0x9e>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	225c      	movs	r2, #92	; 0x5c
 800663c:	494b      	ldr	r1, [pc, #300]	; (800676c <HAL_UART_Receive+0x1c8>)
 800663e:	5299      	strh	r1, [r3, r2]
 8006640:	e02e      	b.n	80066a0 <HAL_UART_Receive+0xfc>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	225c      	movs	r2, #92	; 0x5c
 8006646:	21ff      	movs	r1, #255	; 0xff
 8006648:	5299      	strh	r1, [r3, r2]
 800664a:	e029      	b.n	80066a0 <HAL_UART_Receive+0xfc>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10d      	bne.n	8006670 <HAL_UART_Receive+0xcc>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d104      	bne.n	8006666 <HAL_UART_Receive+0xc2>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	225c      	movs	r2, #92	; 0x5c
 8006660:	21ff      	movs	r1, #255	; 0xff
 8006662:	5299      	strh	r1, [r3, r2]
 8006664:	e01c      	b.n	80066a0 <HAL_UART_Receive+0xfc>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	225c      	movs	r2, #92	; 0x5c
 800666a:	217f      	movs	r1, #127	; 0x7f
 800666c:	5299      	strh	r1, [r3, r2]
 800666e:	e017      	b.n	80066a0 <HAL_UART_Receive+0xfc>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	2380      	movs	r3, #128	; 0x80
 8006676:	055b      	lsls	r3, r3, #21
 8006678:	429a      	cmp	r2, r3
 800667a:	d10d      	bne.n	8006698 <HAL_UART_Receive+0xf4>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <HAL_UART_Receive+0xea>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	225c      	movs	r2, #92	; 0x5c
 8006688:	217f      	movs	r1, #127	; 0x7f
 800668a:	5299      	strh	r1, [r3, r2]
 800668c:	e008      	b.n	80066a0 <HAL_UART_Receive+0xfc>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	225c      	movs	r2, #92	; 0x5c
 8006692:	213f      	movs	r1, #63	; 0x3f
 8006694:	5299      	strh	r1, [r3, r2]
 8006696:	e003      	b.n	80066a0 <HAL_UART_Receive+0xfc>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	225c      	movs	r2, #92	; 0x5c
 800669c:	2100      	movs	r1, #0
 800669e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80066a0:	2312      	movs	r3, #18
 80066a2:	18fb      	adds	r3, r7, r3
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	215c      	movs	r1, #92	; 0x5c
 80066a8:	5a52      	ldrh	r2, [r2, r1]
 80066aa:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	2380      	movs	r3, #128	; 0x80
 80066b2:	015b      	lsls	r3, r3, #5
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d108      	bne.n	80066ca <HAL_UART_Receive+0x126>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d104      	bne.n	80066ca <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80066c0:	2300      	movs	r3, #0
 80066c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	61bb      	str	r3, [r7, #24]
 80066c8:	e003      	b.n	80066d2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80066d2:	e03a      	b.n	800674a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	0013      	movs	r3, r2
 80066de:	2200      	movs	r2, #0
 80066e0:	2120      	movs	r1, #32
 80066e2:	f000 fc25 	bl	8006f30 <UART_WaitOnFlagUntilTimeout>
 80066e6:	1e03      	subs	r3, r0, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2280      	movs	r2, #128	; 0x80
 80066ee:	2120      	movs	r1, #32
 80066f0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e036      	b.n	8006764 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10e      	bne.n	800671a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	b29b      	uxth	r3, r3
 8006704:	2212      	movs	r2, #18
 8006706:	18ba      	adds	r2, r7, r2
 8006708:	8812      	ldrh	r2, [r2, #0]
 800670a:	4013      	ands	r3, r2
 800670c:	b29a      	uxth	r2, r3
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	3302      	adds	r3, #2
 8006716:	61bb      	str	r3, [r7, #24]
 8006718:	e00e      	b.n	8006738 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2212      	movs	r2, #18
 8006724:	18ba      	adds	r2, r7, r2
 8006726:	8812      	ldrh	r2, [r2, #0]
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	4013      	ands	r3, r2
 800672c:	b2da      	uxtb	r2, r3
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	3301      	adds	r3, #1
 8006736:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	225a      	movs	r2, #90	; 0x5a
 800673c:	5a9b      	ldrh	r3, [r3, r2]
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b299      	uxth	r1, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	225a      	movs	r2, #90	; 0x5a
 8006748:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	225a      	movs	r2, #90	; 0x5a
 800674e:	5a9b      	ldrh	r3, [r3, r2]
 8006750:	b29b      	uxth	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1be      	bne.n	80066d4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2280      	movs	r2, #128	; 0x80
 800675a:	2120      	movs	r1, #32
 800675c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	e000      	b.n	8006764 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8006762:	2302      	movs	r3, #2
  }
}
 8006764:	0018      	movs	r0, r3
 8006766:	46bd      	mov	sp, r7
 8006768:	b008      	add	sp, #32
 800676a:	bd80      	pop	{r7, pc}
 800676c:	000001ff 	.word	0x000001ff

08006770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006770:	b5b0      	push	{r4, r5, r7, lr}
 8006772:	b08e      	sub	sp, #56	; 0x38
 8006774:	af00      	add	r7, sp, #0
 8006776:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006778:	231a      	movs	r3, #26
 800677a:	2218      	movs	r2, #24
 800677c:	189b      	adds	r3, r3, r2
 800677e:	19db      	adds	r3, r3, r7
 8006780:	2200      	movs	r2, #0
 8006782:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	431a      	orrs	r2, r3
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	431a      	orrs	r2, r3
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	4313      	orrs	r3, r2
 800679a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4ac6      	ldr	r2, [pc, #792]	; (8006abc <UART_SetConfig+0x34c>)
 80067a4:	4013      	ands	r3, r2
 80067a6:	0019      	movs	r1, r3
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067ae:	430a      	orrs	r2, r1
 80067b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4ac1      	ldr	r2, [pc, #772]	; (8006ac0 <UART_SetConfig+0x350>)
 80067ba:	4013      	ands	r3, r2
 80067bc:	0019      	movs	r1, r3
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4abb      	ldr	r2, [pc, #748]	; (8006ac4 <UART_SetConfig+0x354>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067e0:	4313      	orrs	r3, r2
 80067e2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	4ab7      	ldr	r2, [pc, #732]	; (8006ac8 <UART_SetConfig+0x358>)
 80067ec:	4013      	ands	r3, r2
 80067ee:	0019      	movs	r1, r3
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067f6:	430a      	orrs	r2, r1
 80067f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4ab3      	ldr	r2, [pc, #716]	; (8006acc <UART_SetConfig+0x35c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d131      	bne.n	8006868 <UART_SetConfig+0xf8>
 8006804:	4bb2      	ldr	r3, [pc, #712]	; (8006ad0 <UART_SetConfig+0x360>)
 8006806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006808:	2203      	movs	r2, #3
 800680a:	4013      	ands	r3, r2
 800680c:	2b03      	cmp	r3, #3
 800680e:	d01d      	beq.n	800684c <UART_SetConfig+0xdc>
 8006810:	d823      	bhi.n	800685a <UART_SetConfig+0xea>
 8006812:	2b02      	cmp	r3, #2
 8006814:	d00c      	beq.n	8006830 <UART_SetConfig+0xc0>
 8006816:	d820      	bhi.n	800685a <UART_SetConfig+0xea>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <UART_SetConfig+0xb2>
 800681c:	2b01      	cmp	r3, #1
 800681e:	d00e      	beq.n	800683e <UART_SetConfig+0xce>
 8006820:	e01b      	b.n	800685a <UART_SetConfig+0xea>
 8006822:	231b      	movs	r3, #27
 8006824:	2218      	movs	r2, #24
 8006826:	189b      	adds	r3, r3, r2
 8006828:	19db      	adds	r3, r3, r7
 800682a:	2201      	movs	r2, #1
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	e09c      	b.n	800696a <UART_SetConfig+0x1fa>
 8006830:	231b      	movs	r3, #27
 8006832:	2218      	movs	r2, #24
 8006834:	189b      	adds	r3, r3, r2
 8006836:	19db      	adds	r3, r3, r7
 8006838:	2202      	movs	r2, #2
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	e095      	b.n	800696a <UART_SetConfig+0x1fa>
 800683e:	231b      	movs	r3, #27
 8006840:	2218      	movs	r2, #24
 8006842:	189b      	adds	r3, r3, r2
 8006844:	19db      	adds	r3, r3, r7
 8006846:	2204      	movs	r2, #4
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	e08e      	b.n	800696a <UART_SetConfig+0x1fa>
 800684c:	231b      	movs	r3, #27
 800684e:	2218      	movs	r2, #24
 8006850:	189b      	adds	r3, r3, r2
 8006852:	19db      	adds	r3, r3, r7
 8006854:	2208      	movs	r2, #8
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	e087      	b.n	800696a <UART_SetConfig+0x1fa>
 800685a:	231b      	movs	r3, #27
 800685c:	2218      	movs	r2, #24
 800685e:	189b      	adds	r3, r3, r2
 8006860:	19db      	adds	r3, r3, r7
 8006862:	2210      	movs	r2, #16
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	e080      	b.n	800696a <UART_SetConfig+0x1fa>
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a99      	ldr	r2, [pc, #612]	; (8006ad4 <UART_SetConfig+0x364>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d131      	bne.n	80068d6 <UART_SetConfig+0x166>
 8006872:	4b97      	ldr	r3, [pc, #604]	; (8006ad0 <UART_SetConfig+0x360>)
 8006874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006876:	220c      	movs	r2, #12
 8006878:	4013      	ands	r3, r2
 800687a:	2b0c      	cmp	r3, #12
 800687c:	d01d      	beq.n	80068ba <UART_SetConfig+0x14a>
 800687e:	d823      	bhi.n	80068c8 <UART_SetConfig+0x158>
 8006880:	2b08      	cmp	r3, #8
 8006882:	d00c      	beq.n	800689e <UART_SetConfig+0x12e>
 8006884:	d820      	bhi.n	80068c8 <UART_SetConfig+0x158>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <UART_SetConfig+0x120>
 800688a:	2b04      	cmp	r3, #4
 800688c:	d00e      	beq.n	80068ac <UART_SetConfig+0x13c>
 800688e:	e01b      	b.n	80068c8 <UART_SetConfig+0x158>
 8006890:	231b      	movs	r3, #27
 8006892:	2218      	movs	r2, #24
 8006894:	189b      	adds	r3, r3, r2
 8006896:	19db      	adds	r3, r3, r7
 8006898:	2200      	movs	r2, #0
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	e065      	b.n	800696a <UART_SetConfig+0x1fa>
 800689e:	231b      	movs	r3, #27
 80068a0:	2218      	movs	r2, #24
 80068a2:	189b      	adds	r3, r3, r2
 80068a4:	19db      	adds	r3, r3, r7
 80068a6:	2202      	movs	r2, #2
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	e05e      	b.n	800696a <UART_SetConfig+0x1fa>
 80068ac:	231b      	movs	r3, #27
 80068ae:	2218      	movs	r2, #24
 80068b0:	189b      	adds	r3, r3, r2
 80068b2:	19db      	adds	r3, r3, r7
 80068b4:	2204      	movs	r2, #4
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	e057      	b.n	800696a <UART_SetConfig+0x1fa>
 80068ba:	231b      	movs	r3, #27
 80068bc:	2218      	movs	r2, #24
 80068be:	189b      	adds	r3, r3, r2
 80068c0:	19db      	adds	r3, r3, r7
 80068c2:	2208      	movs	r2, #8
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	e050      	b.n	800696a <UART_SetConfig+0x1fa>
 80068c8:	231b      	movs	r3, #27
 80068ca:	2218      	movs	r2, #24
 80068cc:	189b      	adds	r3, r3, r2
 80068ce:	19db      	adds	r3, r3, r7
 80068d0:	2210      	movs	r2, #16
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	e049      	b.n	800696a <UART_SetConfig+0x1fa>
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a7a      	ldr	r2, [pc, #488]	; (8006ac4 <UART_SetConfig+0x354>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d13e      	bne.n	800695e <UART_SetConfig+0x1ee>
 80068e0:	4b7b      	ldr	r3, [pc, #492]	; (8006ad0 <UART_SetConfig+0x360>)
 80068e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068e4:	23c0      	movs	r3, #192	; 0xc0
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	4013      	ands	r3, r2
 80068ea:	22c0      	movs	r2, #192	; 0xc0
 80068ec:	0112      	lsls	r2, r2, #4
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d027      	beq.n	8006942 <UART_SetConfig+0x1d2>
 80068f2:	22c0      	movs	r2, #192	; 0xc0
 80068f4:	0112      	lsls	r2, r2, #4
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d82a      	bhi.n	8006950 <UART_SetConfig+0x1e0>
 80068fa:	2280      	movs	r2, #128	; 0x80
 80068fc:	0112      	lsls	r2, r2, #4
 80068fe:	4293      	cmp	r3, r2
 8006900:	d011      	beq.n	8006926 <UART_SetConfig+0x1b6>
 8006902:	2280      	movs	r2, #128	; 0x80
 8006904:	0112      	lsls	r2, r2, #4
 8006906:	4293      	cmp	r3, r2
 8006908:	d822      	bhi.n	8006950 <UART_SetConfig+0x1e0>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <UART_SetConfig+0x1a8>
 800690e:	2280      	movs	r2, #128	; 0x80
 8006910:	00d2      	lsls	r2, r2, #3
 8006912:	4293      	cmp	r3, r2
 8006914:	d00e      	beq.n	8006934 <UART_SetConfig+0x1c4>
 8006916:	e01b      	b.n	8006950 <UART_SetConfig+0x1e0>
 8006918:	231b      	movs	r3, #27
 800691a:	2218      	movs	r2, #24
 800691c:	189b      	adds	r3, r3, r2
 800691e:	19db      	adds	r3, r3, r7
 8006920:	2200      	movs	r2, #0
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	e021      	b.n	800696a <UART_SetConfig+0x1fa>
 8006926:	231b      	movs	r3, #27
 8006928:	2218      	movs	r2, #24
 800692a:	189b      	adds	r3, r3, r2
 800692c:	19db      	adds	r3, r3, r7
 800692e:	2202      	movs	r2, #2
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	e01a      	b.n	800696a <UART_SetConfig+0x1fa>
 8006934:	231b      	movs	r3, #27
 8006936:	2218      	movs	r2, #24
 8006938:	189b      	adds	r3, r3, r2
 800693a:	19db      	adds	r3, r3, r7
 800693c:	2204      	movs	r2, #4
 800693e:	701a      	strb	r2, [r3, #0]
 8006940:	e013      	b.n	800696a <UART_SetConfig+0x1fa>
 8006942:	231b      	movs	r3, #27
 8006944:	2218      	movs	r2, #24
 8006946:	189b      	adds	r3, r3, r2
 8006948:	19db      	adds	r3, r3, r7
 800694a:	2208      	movs	r2, #8
 800694c:	701a      	strb	r2, [r3, #0]
 800694e:	e00c      	b.n	800696a <UART_SetConfig+0x1fa>
 8006950:	231b      	movs	r3, #27
 8006952:	2218      	movs	r2, #24
 8006954:	189b      	adds	r3, r3, r2
 8006956:	19db      	adds	r3, r3, r7
 8006958:	2210      	movs	r2, #16
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	e005      	b.n	800696a <UART_SetConfig+0x1fa>
 800695e:	231b      	movs	r3, #27
 8006960:	2218      	movs	r2, #24
 8006962:	189b      	adds	r3, r3, r2
 8006964:	19db      	adds	r3, r3, r7
 8006966:	2210      	movs	r2, #16
 8006968:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a55      	ldr	r2, [pc, #340]	; (8006ac4 <UART_SetConfig+0x354>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d000      	beq.n	8006976 <UART_SetConfig+0x206>
 8006974:	e084      	b.n	8006a80 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006976:	231b      	movs	r3, #27
 8006978:	2218      	movs	r2, #24
 800697a:	189b      	adds	r3, r3, r2
 800697c:	19db      	adds	r3, r3, r7
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b08      	cmp	r3, #8
 8006982:	d01d      	beq.n	80069c0 <UART_SetConfig+0x250>
 8006984:	dc20      	bgt.n	80069c8 <UART_SetConfig+0x258>
 8006986:	2b04      	cmp	r3, #4
 8006988:	d015      	beq.n	80069b6 <UART_SetConfig+0x246>
 800698a:	dc1d      	bgt.n	80069c8 <UART_SetConfig+0x258>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <UART_SetConfig+0x226>
 8006990:	2b02      	cmp	r3, #2
 8006992:	d005      	beq.n	80069a0 <UART_SetConfig+0x230>
 8006994:	e018      	b.n	80069c8 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006996:	f7ff f959 	bl	8005c4c <HAL_RCC_GetPCLK1Freq>
 800699a:	0003      	movs	r3, r0
 800699c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800699e:	e01c      	b.n	80069da <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069a0:	4b4b      	ldr	r3, [pc, #300]	; (8006ad0 <UART_SetConfig+0x360>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2210      	movs	r2, #16
 80069a6:	4013      	ands	r3, r2
 80069a8:	d002      	beq.n	80069b0 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80069aa:	4b4b      	ldr	r3, [pc, #300]	; (8006ad8 <UART_SetConfig+0x368>)
 80069ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069ae:	e014      	b.n	80069da <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80069b0:	4b4a      	ldr	r3, [pc, #296]	; (8006adc <UART_SetConfig+0x36c>)
 80069b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069b4:	e011      	b.n	80069da <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069b6:	f7ff f899 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80069ba:	0003      	movs	r3, r0
 80069bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069be:	e00c      	b.n	80069da <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069c0:	2380      	movs	r3, #128	; 0x80
 80069c2:	021b      	lsls	r3, r3, #8
 80069c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069c6:	e008      	b.n	80069da <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80069cc:	231a      	movs	r3, #26
 80069ce:	2218      	movs	r2, #24
 80069d0:	189b      	adds	r3, r3, r2
 80069d2:	19db      	adds	r3, r3, r7
 80069d4:	2201      	movs	r2, #1
 80069d6:	701a      	strb	r2, [r3, #0]
        break;
 80069d8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d100      	bne.n	80069e2 <UART_SetConfig+0x272>
 80069e0:	e132      	b.n	8006c48 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	0013      	movs	r3, r2
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	189b      	adds	r3, r3, r2
 80069ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d305      	bcc.n	80069fe <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d906      	bls.n	8006a0c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80069fe:	231a      	movs	r3, #26
 8006a00:	2218      	movs	r2, #24
 8006a02:	189b      	adds	r3, r3, r2
 8006a04:	19db      	adds	r3, r3, r7
 8006a06:	2201      	movs	r2, #1
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	e11d      	b.n	8006c48 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	613b      	str	r3, [r7, #16]
 8006a10:	2300      	movs	r3, #0
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	6939      	ldr	r1, [r7, #16]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	000b      	movs	r3, r1
 8006a1a:	0e1b      	lsrs	r3, r3, #24
 8006a1c:	0010      	movs	r0, r2
 8006a1e:	0205      	lsls	r5, r0, #8
 8006a20:	431d      	orrs	r5, r3
 8006a22:	000b      	movs	r3, r1
 8006a24:	021c      	lsls	r4, r3, #8
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	085b      	lsrs	r3, r3, #1
 8006a2c:	60bb      	str	r3, [r7, #8]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	68b8      	ldr	r0, [r7, #8]
 8006a34:	68f9      	ldr	r1, [r7, #12]
 8006a36:	1900      	adds	r0, r0, r4
 8006a38:	4169      	adcs	r1, r5
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	2300      	movs	r3, #0
 8006a42:	607b      	str	r3, [r7, #4]
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f7f9 fc36 	bl	80002b8 <__aeabi_uldivmod>
 8006a4c:	0002      	movs	r2, r0
 8006a4e:	000b      	movs	r3, r1
 8006a50:	0013      	movs	r3, r2
 8006a52:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a56:	23c0      	movs	r3, #192	; 0xc0
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d309      	bcc.n	8006a72 <UART_SetConfig+0x302>
 8006a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a60:	2380      	movs	r3, #128	; 0x80
 8006a62:	035b      	lsls	r3, r3, #13
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d204      	bcs.n	8006a72 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a6e:	60da      	str	r2, [r3, #12]
 8006a70:	e0ea      	b.n	8006c48 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8006a72:	231a      	movs	r3, #26
 8006a74:	2218      	movs	r2, #24
 8006a76:	189b      	adds	r3, r3, r2
 8006a78:	19db      	adds	r3, r3, r7
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	e0e3      	b.n	8006c48 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	2380      	movs	r3, #128	; 0x80
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d000      	beq.n	8006a8e <UART_SetConfig+0x31e>
 8006a8c:	e085      	b.n	8006b9a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8006a8e:	231b      	movs	r3, #27
 8006a90:	2218      	movs	r2, #24
 8006a92:	189b      	adds	r3, r3, r2
 8006a94:	19db      	adds	r3, r3, r7
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d837      	bhi.n	8006b0c <UART_SetConfig+0x39c>
 8006a9c:	009a      	lsls	r2, r3, #2
 8006a9e:	4b10      	ldr	r3, [pc, #64]	; (8006ae0 <UART_SetConfig+0x370>)
 8006aa0:	18d3      	adds	r3, r2, r3
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa6:	f7ff f8d1 	bl	8005c4c <HAL_RCC_GetPCLK1Freq>
 8006aaa:	0003      	movs	r3, r0
 8006aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006aae:	e036      	b.n	8006b1e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab0:	f7ff f8e2 	bl	8005c78 <HAL_RCC_GetPCLK2Freq>
 8006ab4:	0003      	movs	r3, r0
 8006ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ab8:	e031      	b.n	8006b1e <UART_SetConfig+0x3ae>
 8006aba:	46c0      	nop			; (mov r8, r8)
 8006abc:	efff69f3 	.word	0xefff69f3
 8006ac0:	ffffcfff 	.word	0xffffcfff
 8006ac4:	40004800 	.word	0x40004800
 8006ac8:	fffff4ff 	.word	0xfffff4ff
 8006acc:	40013800 	.word	0x40013800
 8006ad0:	40021000 	.word	0x40021000
 8006ad4:	40004400 	.word	0x40004400
 8006ad8:	003d0900 	.word	0x003d0900
 8006adc:	00f42400 	.word	0x00f42400
 8006ae0:	08007c94 	.word	0x08007c94
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ae4:	4b60      	ldr	r3, [pc, #384]	; (8006c68 <UART_SetConfig+0x4f8>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2210      	movs	r2, #16
 8006aea:	4013      	ands	r3, r2
 8006aec:	d002      	beq.n	8006af4 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006aee:	4b5f      	ldr	r3, [pc, #380]	; (8006c6c <UART_SetConfig+0x4fc>)
 8006af0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006af2:	e014      	b.n	8006b1e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8006af4:	4b5e      	ldr	r3, [pc, #376]	; (8006c70 <UART_SetConfig+0x500>)
 8006af6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006af8:	e011      	b.n	8006b1e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006afa:	f7fe fff7 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8006afe:	0003      	movs	r3, r0
 8006b00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b02:	e00c      	b.n	8006b1e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b04:	2380      	movs	r3, #128	; 0x80
 8006b06:	021b      	lsls	r3, r3, #8
 8006b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b0a:	e008      	b.n	8006b1e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b10:	231a      	movs	r3, #26
 8006b12:	2218      	movs	r2, #24
 8006b14:	189b      	adds	r3, r3, r2
 8006b16:	19db      	adds	r3, r3, r7
 8006b18:	2201      	movs	r2, #1
 8006b1a:	701a      	strb	r2, [r3, #0]
        break;
 8006b1c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d100      	bne.n	8006b26 <UART_SetConfig+0x3b6>
 8006b24:	e090      	b.n	8006c48 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	005a      	lsls	r2, r3, #1
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	085b      	lsrs	r3, r3, #1
 8006b30:	18d2      	adds	r2, r2, r3
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	0019      	movs	r1, r3
 8006b38:	0010      	movs	r0, r2
 8006b3a:	f7f9 faf7 	bl	800012c <__udivsi3>
 8006b3e:	0003      	movs	r3, r0
 8006b40:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	2b0f      	cmp	r3, #15
 8006b46:	d921      	bls.n	8006b8c <UART_SetConfig+0x41c>
 8006b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b4a:	2380      	movs	r3, #128	; 0x80
 8006b4c:	025b      	lsls	r3, r3, #9
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d21c      	bcs.n	8006b8c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	200e      	movs	r0, #14
 8006b58:	2418      	movs	r4, #24
 8006b5a:	1903      	adds	r3, r0, r4
 8006b5c:	19db      	adds	r3, r3, r7
 8006b5e:	210f      	movs	r1, #15
 8006b60:	438a      	bics	r2, r1
 8006b62:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	085b      	lsrs	r3, r3, #1
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2207      	movs	r2, #7
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	b299      	uxth	r1, r3
 8006b70:	1903      	adds	r3, r0, r4
 8006b72:	19db      	adds	r3, r3, r7
 8006b74:	1902      	adds	r2, r0, r4
 8006b76:	19d2      	adds	r2, r2, r7
 8006b78:	8812      	ldrh	r2, [r2, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	1902      	adds	r2, r0, r4
 8006b84:	19d2      	adds	r2, r2, r7
 8006b86:	8812      	ldrh	r2, [r2, #0]
 8006b88:	60da      	str	r2, [r3, #12]
 8006b8a:	e05d      	b.n	8006c48 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8006b8c:	231a      	movs	r3, #26
 8006b8e:	2218      	movs	r2, #24
 8006b90:	189b      	adds	r3, r3, r2
 8006b92:	19db      	adds	r3, r3, r7
 8006b94:	2201      	movs	r2, #1
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	e056      	b.n	8006c48 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b9a:	231b      	movs	r3, #27
 8006b9c:	2218      	movs	r2, #24
 8006b9e:	189b      	adds	r3, r3, r2
 8006ba0:	19db      	adds	r3, r3, r7
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	d822      	bhi.n	8006bee <UART_SetConfig+0x47e>
 8006ba8:	009a      	lsls	r2, r3, #2
 8006baa:	4b32      	ldr	r3, [pc, #200]	; (8006c74 <UART_SetConfig+0x504>)
 8006bac:	18d3      	adds	r3, r2, r3
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb2:	f7ff f84b 	bl	8005c4c <HAL_RCC_GetPCLK1Freq>
 8006bb6:	0003      	movs	r3, r0
 8006bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bba:	e021      	b.n	8006c00 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bbc:	f7ff f85c 	bl	8005c78 <HAL_RCC_GetPCLK2Freq>
 8006bc0:	0003      	movs	r3, r0
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bc4:	e01c      	b.n	8006c00 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bc6:	4b28      	ldr	r3, [pc, #160]	; (8006c68 <UART_SetConfig+0x4f8>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2210      	movs	r2, #16
 8006bcc:	4013      	ands	r3, r2
 8006bce:	d002      	beq.n	8006bd6 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006bd0:	4b26      	ldr	r3, [pc, #152]	; (8006c6c <UART_SetConfig+0x4fc>)
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bd4:	e014      	b.n	8006c00 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8006bd6:	4b26      	ldr	r3, [pc, #152]	; (8006c70 <UART_SetConfig+0x500>)
 8006bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bda:	e011      	b.n	8006c00 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bdc:	f7fe ff86 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8006be0:	0003      	movs	r3, r0
 8006be2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006be4:	e00c      	b.n	8006c00 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006be6:	2380      	movs	r3, #128	; 0x80
 8006be8:	021b      	lsls	r3, r3, #8
 8006bea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bec:	e008      	b.n	8006c00 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006bf2:	231a      	movs	r3, #26
 8006bf4:	2218      	movs	r2, #24
 8006bf6:	189b      	adds	r3, r3, r2
 8006bf8:	19db      	adds	r3, r3, r7
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	701a      	strb	r2, [r3, #0]
        break;
 8006bfe:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d020      	beq.n	8006c48 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	085a      	lsrs	r2, r3, #1
 8006c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0e:	18d2      	adds	r2, r2, r3
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	0019      	movs	r1, r3
 8006c16:	0010      	movs	r0, r2
 8006c18:	f7f9 fa88 	bl	800012c <__udivsi3>
 8006c1c:	0003      	movs	r3, r0
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	2b0f      	cmp	r3, #15
 8006c24:	d90a      	bls.n	8006c3c <UART_SetConfig+0x4cc>
 8006c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	025b      	lsls	r3, r3, #9
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d205      	bcs.n	8006c3c <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60da      	str	r2, [r3, #12]
 8006c3a:	e005      	b.n	8006c48 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8006c3c:	231a      	movs	r3, #26
 8006c3e:	2218      	movs	r2, #24
 8006c40:	189b      	adds	r3, r3, r2
 8006c42:	19db      	adds	r3, r3, r7
 8006c44:	2201      	movs	r2, #1
 8006c46:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	2200      	movs	r2, #0
 8006c52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c54:	231a      	movs	r3, #26
 8006c56:	2218      	movs	r2, #24
 8006c58:	189b      	adds	r3, r3, r2
 8006c5a:	19db      	adds	r3, r3, r7
 8006c5c:	781b      	ldrb	r3, [r3, #0]
}
 8006c5e:	0018      	movs	r0, r3
 8006c60:	46bd      	mov	sp, r7
 8006c62:	b00e      	add	sp, #56	; 0x38
 8006c64:	bdb0      	pop	{r4, r5, r7, pc}
 8006c66:	46c0      	nop			; (mov r8, r8)
 8006c68:	40021000 	.word	0x40021000
 8006c6c:	003d0900 	.word	0x003d0900
 8006c70:	00f42400 	.word	0x00f42400
 8006c74:	08007cb8 	.word	0x08007cb8

08006c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	2201      	movs	r2, #1
 8006c86:	4013      	ands	r3, r2
 8006c88:	d00b      	beq.n	8006ca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	4a4a      	ldr	r2, [pc, #296]	; (8006dbc <UART_AdvFeatureConfig+0x144>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	0019      	movs	r1, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	4013      	ands	r3, r2
 8006caa:	d00b      	beq.n	8006cc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	4a43      	ldr	r2, [pc, #268]	; (8006dc0 <UART_AdvFeatureConfig+0x148>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	0019      	movs	r1, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	2204      	movs	r2, #4
 8006cca:	4013      	ands	r3, r2
 8006ccc:	d00b      	beq.n	8006ce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	4a3b      	ldr	r2, [pc, #236]	; (8006dc4 <UART_AdvFeatureConfig+0x14c>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	0019      	movs	r1, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	2208      	movs	r2, #8
 8006cec:	4013      	ands	r3, r2
 8006cee:	d00b      	beq.n	8006d08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	4a34      	ldr	r2, [pc, #208]	; (8006dc8 <UART_AdvFeatureConfig+0x150>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	0019      	movs	r1, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	2210      	movs	r2, #16
 8006d0e:	4013      	ands	r3, r2
 8006d10:	d00b      	beq.n	8006d2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	4a2c      	ldr	r2, [pc, #176]	; (8006dcc <UART_AdvFeatureConfig+0x154>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	0019      	movs	r1, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	2220      	movs	r2, #32
 8006d30:	4013      	ands	r3, r2
 8006d32:	d00b      	beq.n	8006d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	4a25      	ldr	r2, [pc, #148]	; (8006dd0 <UART_AdvFeatureConfig+0x158>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	0019      	movs	r1, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	2240      	movs	r2, #64	; 0x40
 8006d52:	4013      	ands	r3, r2
 8006d54:	d01d      	beq.n	8006d92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	4a1d      	ldr	r2, [pc, #116]	; (8006dd4 <UART_AdvFeatureConfig+0x15c>)
 8006d5e:	4013      	ands	r3, r2
 8006d60:	0019      	movs	r1, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d72:	2380      	movs	r3, #128	; 0x80
 8006d74:	035b      	lsls	r3, r3, #13
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d10b      	bne.n	8006d92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	4a15      	ldr	r2, [pc, #84]	; (8006dd8 <UART_AdvFeatureConfig+0x160>)
 8006d82:	4013      	ands	r3, r2
 8006d84:	0019      	movs	r1, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	2280      	movs	r2, #128	; 0x80
 8006d98:	4013      	ands	r3, r2
 8006d9a:	d00b      	beq.n	8006db4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	4a0e      	ldr	r2, [pc, #56]	; (8006ddc <UART_AdvFeatureConfig+0x164>)
 8006da4:	4013      	ands	r3, r2
 8006da6:	0019      	movs	r1, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	605a      	str	r2, [r3, #4]
  }
}
 8006db4:	46c0      	nop			; (mov r8, r8)
 8006db6:	46bd      	mov	sp, r7
 8006db8:	b002      	add	sp, #8
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	fffdffff 	.word	0xfffdffff
 8006dc0:	fffeffff 	.word	0xfffeffff
 8006dc4:	fffbffff 	.word	0xfffbffff
 8006dc8:	ffff7fff 	.word	0xffff7fff
 8006dcc:	ffffefff 	.word	0xffffefff
 8006dd0:	ffffdfff 	.word	0xffffdfff
 8006dd4:	ffefffff 	.word	0xffefffff
 8006dd8:	ff9fffff 	.word	0xff9fffff
 8006ddc:	fff7ffff 	.word	0xfff7ffff

08006de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b092      	sub	sp, #72	; 0x48
 8006de4:	af02      	add	r7, sp, #8
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2284      	movs	r2, #132	; 0x84
 8006dec:	2100      	movs	r1, #0
 8006dee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006df0:	f7fc fa60 	bl	80032b4 <HAL_GetTick>
 8006df4:	0003      	movs	r3, r0
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2208      	movs	r2, #8
 8006e00:	4013      	ands	r3, r2
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d12c      	bne.n	8006e60 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e08:	2280      	movs	r2, #128	; 0x80
 8006e0a:	0391      	lsls	r1, r2, #14
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	4a46      	ldr	r2, [pc, #280]	; (8006f28 <UART_CheckIdleState+0x148>)
 8006e10:	9200      	str	r2, [sp, #0]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f000 f88c 	bl	8006f30 <UART_WaitOnFlagUntilTimeout>
 8006e18:	1e03      	subs	r3, r0, #0
 8006e1a:	d021      	beq.n	8006e60 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e26:	2301      	movs	r3, #1
 8006e28:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2c:	f383 8810 	msr	PRIMASK, r3
}
 8006e30:	46c0      	nop			; (mov r8, r8)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2180      	movs	r1, #128	; 0x80
 8006e3e:	438a      	bics	r2, r1
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	f383 8810 	msr	PRIMASK, r3
}
 8006e4c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2278      	movs	r2, #120	; 0x78
 8006e58:	2100      	movs	r1, #0
 8006e5a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e05f      	b.n	8006f20 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2204      	movs	r2, #4
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d146      	bne.n	8006efc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e70:	2280      	movs	r2, #128	; 0x80
 8006e72:	03d1      	lsls	r1, r2, #15
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	4a2c      	ldr	r2, [pc, #176]	; (8006f28 <UART_CheckIdleState+0x148>)
 8006e78:	9200      	str	r2, [sp, #0]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f000 f858 	bl	8006f30 <UART_WaitOnFlagUntilTimeout>
 8006e80:	1e03      	subs	r3, r0, #0
 8006e82:	d03b      	beq.n	8006efc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e84:	f3ef 8310 	mrs	r3, PRIMASK
 8006e88:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e8e:	2301      	movs	r3, #1
 8006e90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f383 8810 	msr	PRIMASK, r3
}
 8006e98:	46c0      	nop			; (mov r8, r8)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4921      	ldr	r1, [pc, #132]	; (8006f2c <UART_CheckIdleState+0x14c>)
 8006ea6:	400a      	ands	r2, r1
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f383 8810 	msr	PRIMASK, r3
}
 8006eb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8006eba:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ebc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	f383 8810 	msr	PRIMASK, r3
}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	438a      	bics	r2, r1
 8006eda:	609a      	str	r2, [r3, #8]
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	f383 8810 	msr	PRIMASK, r3
}
 8006ee6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2280      	movs	r2, #128	; 0x80
 8006eec:	2120      	movs	r1, #32
 8006eee:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2278      	movs	r2, #120	; 0x78
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e011      	b.n	8006f20 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2220      	movs	r2, #32
 8006f00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2280      	movs	r2, #128	; 0x80
 8006f06:	2120      	movs	r1, #32
 8006f08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2278      	movs	r2, #120	; 0x78
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	0018      	movs	r0, r3
 8006f22:	46bd      	mov	sp, r7
 8006f24:	b010      	add	sp, #64	; 0x40
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	01ffffff 	.word	0x01ffffff
 8006f2c:	fffffedf 	.word	0xfffffedf

08006f30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	1dfb      	adds	r3, r7, #7
 8006f3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f40:	e04b      	b.n	8006fda <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	3301      	adds	r3, #1
 8006f46:	d048      	beq.n	8006fda <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f48:	f7fc f9b4 	bl	80032b4 <HAL_GetTick>
 8006f4c:	0002      	movs	r2, r0
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d302      	bcc.n	8006f5e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e04b      	b.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2204      	movs	r2, #4
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	d035      	beq.n	8006fda <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	2208      	movs	r2, #8
 8006f76:	4013      	ands	r3, r2
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d111      	bne.n	8006fa0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2208      	movs	r2, #8
 8006f82:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	0018      	movs	r0, r3
 8006f88:	f000 f83c 	bl	8007004 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2284      	movs	r2, #132	; 0x84
 8006f90:	2108      	movs	r1, #8
 8006f92:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2278      	movs	r2, #120	; 0x78
 8006f98:	2100      	movs	r1, #0
 8006f9a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e02c      	b.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	69da      	ldr	r2, [r3, #28]
 8006fa6:	2380      	movs	r3, #128	; 0x80
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	401a      	ands	r2, r3
 8006fac:	2380      	movs	r3, #128	; 0x80
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d112      	bne.n	8006fda <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2280      	movs	r2, #128	; 0x80
 8006fba:	0112      	lsls	r2, r2, #4
 8006fbc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f000 f81f 	bl	8007004 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2284      	movs	r2, #132	; 0x84
 8006fca:	2120      	movs	r1, #32
 8006fcc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2278      	movs	r2, #120	; 0x78
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e00f      	b.n	8006ffa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	425a      	negs	r2, r3
 8006fea:	4153      	adcs	r3, r2
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	001a      	movs	r2, r3
 8006ff0:	1dfb      	adds	r3, r7, #7
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d0a4      	beq.n	8006f42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	b004      	add	sp, #16
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08e      	sub	sp, #56	; 0x38
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800700c:	f3ef 8310 	mrs	r3, PRIMASK
 8007010:	617b      	str	r3, [r7, #20]
  return(result);
 8007012:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
 8007016:	2301      	movs	r3, #1
 8007018:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	f383 8810 	msr	PRIMASK, r3
}
 8007020:	46c0      	nop			; (mov r8, r8)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4926      	ldr	r1, [pc, #152]	; (80070c8 <UART_EndRxTransfer+0xc4>)
 800702e:	400a      	ands	r2, r1
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007034:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	f383 8810 	msr	PRIMASK, r3
}
 800703c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800703e:	f3ef 8310 	mrs	r3, PRIMASK
 8007042:	623b      	str	r3, [r7, #32]
  return(result);
 8007044:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007046:	633b      	str	r3, [r7, #48]	; 0x30
 8007048:	2301      	movs	r3, #1
 800704a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	f383 8810 	msr	PRIMASK, r3
}
 8007052:	46c0      	nop			; (mov r8, r8)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689a      	ldr	r2, [r3, #8]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2101      	movs	r1, #1
 8007060:	438a      	bics	r2, r1
 8007062:	609a      	str	r2, [r3, #8]
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706a:	f383 8810 	msr	PRIMASK, r3
}
 800706e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007074:	2b01      	cmp	r3, #1
 8007076:	d118      	bne.n	80070aa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007078:	f3ef 8310 	mrs	r3, PRIMASK
 800707c:	60bb      	str	r3, [r7, #8]
  return(result);
 800707e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007082:	2301      	movs	r3, #1
 8007084:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f383 8810 	msr	PRIMASK, r3
}
 800708c:	46c0      	nop			; (mov r8, r8)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2110      	movs	r1, #16
 800709a:	438a      	bics	r2, r1
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f383 8810 	msr	PRIMASK, r3
}
 80070a8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2280      	movs	r2, #128	; 0x80
 80070ae:	2120      	movs	r1, #32
 80070b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80070be:	46c0      	nop			; (mov r8, r8)
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b00e      	add	sp, #56	; 0x38
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	fffffedf 	.word	0xfffffedf

080070cc <__errno>:
 80070cc:	4b01      	ldr	r3, [pc, #4]	; (80070d4 <__errno+0x8>)
 80070ce:	6818      	ldr	r0, [r3, #0]
 80070d0:	4770      	bx	lr
 80070d2:	46c0      	nop			; (mov r8, r8)
 80070d4:	20000048 	.word	0x20000048

080070d8 <__libc_init_array>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	2600      	movs	r6, #0
 80070dc:	4d0c      	ldr	r5, [pc, #48]	; (8007110 <__libc_init_array+0x38>)
 80070de:	4c0d      	ldr	r4, [pc, #52]	; (8007114 <__libc_init_array+0x3c>)
 80070e0:	1b64      	subs	r4, r4, r5
 80070e2:	10a4      	asrs	r4, r4, #2
 80070e4:	42a6      	cmp	r6, r4
 80070e6:	d109      	bne.n	80070fc <__libc_init_array+0x24>
 80070e8:	2600      	movs	r6, #0
 80070ea:	f000 fc8b 	bl	8007a04 <_init>
 80070ee:	4d0a      	ldr	r5, [pc, #40]	; (8007118 <__libc_init_array+0x40>)
 80070f0:	4c0a      	ldr	r4, [pc, #40]	; (800711c <__libc_init_array+0x44>)
 80070f2:	1b64      	subs	r4, r4, r5
 80070f4:	10a4      	asrs	r4, r4, #2
 80070f6:	42a6      	cmp	r6, r4
 80070f8:	d105      	bne.n	8007106 <__libc_init_array+0x2e>
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	00b3      	lsls	r3, r6, #2
 80070fe:	58eb      	ldr	r3, [r5, r3]
 8007100:	4798      	blx	r3
 8007102:	3601      	adds	r6, #1
 8007104:	e7ee      	b.n	80070e4 <__libc_init_array+0xc>
 8007106:	00b3      	lsls	r3, r6, #2
 8007108:	58eb      	ldr	r3, [r5, r3]
 800710a:	4798      	blx	r3
 800710c:	3601      	adds	r6, #1
 800710e:	e7f2      	b.n	80070f6 <__libc_init_array+0x1e>
 8007110:	08007d18 	.word	0x08007d18
 8007114:	08007d18 	.word	0x08007d18
 8007118:	08007d18 	.word	0x08007d18
 800711c:	08007d1c 	.word	0x08007d1c

08007120 <memcpy>:
 8007120:	2300      	movs	r3, #0
 8007122:	b510      	push	{r4, lr}
 8007124:	429a      	cmp	r2, r3
 8007126:	d100      	bne.n	800712a <memcpy+0xa>
 8007128:	bd10      	pop	{r4, pc}
 800712a:	5ccc      	ldrb	r4, [r1, r3]
 800712c:	54c4      	strb	r4, [r0, r3]
 800712e:	3301      	adds	r3, #1
 8007130:	e7f8      	b.n	8007124 <memcpy+0x4>

08007132 <memset>:
 8007132:	0003      	movs	r3, r0
 8007134:	1882      	adds	r2, r0, r2
 8007136:	4293      	cmp	r3, r2
 8007138:	d100      	bne.n	800713c <memset+0xa>
 800713a:	4770      	bx	lr
 800713c:	7019      	strb	r1, [r3, #0]
 800713e:	3301      	adds	r3, #1
 8007140:	e7f9      	b.n	8007136 <memset+0x4>
	...

08007144 <siprintf>:
 8007144:	b40e      	push	{r1, r2, r3}
 8007146:	b500      	push	{lr}
 8007148:	490b      	ldr	r1, [pc, #44]	; (8007178 <siprintf+0x34>)
 800714a:	b09c      	sub	sp, #112	; 0x70
 800714c:	ab1d      	add	r3, sp, #116	; 0x74
 800714e:	9002      	str	r0, [sp, #8]
 8007150:	9006      	str	r0, [sp, #24]
 8007152:	9107      	str	r1, [sp, #28]
 8007154:	9104      	str	r1, [sp, #16]
 8007156:	4809      	ldr	r0, [pc, #36]	; (800717c <siprintf+0x38>)
 8007158:	4909      	ldr	r1, [pc, #36]	; (8007180 <siprintf+0x3c>)
 800715a:	cb04      	ldmia	r3!, {r2}
 800715c:	9105      	str	r1, [sp, #20]
 800715e:	6800      	ldr	r0, [r0, #0]
 8007160:	a902      	add	r1, sp, #8
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	f000 f870 	bl	8007248 <_svfiprintf_r>
 8007168:	2300      	movs	r3, #0
 800716a:	9a02      	ldr	r2, [sp, #8]
 800716c:	7013      	strb	r3, [r2, #0]
 800716e:	b01c      	add	sp, #112	; 0x70
 8007170:	bc08      	pop	{r3}
 8007172:	b003      	add	sp, #12
 8007174:	4718      	bx	r3
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	7fffffff 	.word	0x7fffffff
 800717c:	20000048 	.word	0x20000048
 8007180:	ffff0208 	.word	0xffff0208

08007184 <__ssputs_r>:
 8007184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007186:	688e      	ldr	r6, [r1, #8]
 8007188:	b085      	sub	sp, #20
 800718a:	0007      	movs	r7, r0
 800718c:	000c      	movs	r4, r1
 800718e:	9203      	str	r2, [sp, #12]
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	429e      	cmp	r6, r3
 8007194:	d83c      	bhi.n	8007210 <__ssputs_r+0x8c>
 8007196:	2390      	movs	r3, #144	; 0x90
 8007198:	898a      	ldrh	r2, [r1, #12]
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	421a      	tst	r2, r3
 800719e:	d034      	beq.n	800720a <__ssputs_r+0x86>
 80071a0:	6909      	ldr	r1, [r1, #16]
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	6960      	ldr	r0, [r4, #20]
 80071a6:	1a5b      	subs	r3, r3, r1
 80071a8:	9302      	str	r3, [sp, #8]
 80071aa:	2303      	movs	r3, #3
 80071ac:	4343      	muls	r3, r0
 80071ae:	0fdd      	lsrs	r5, r3, #31
 80071b0:	18ed      	adds	r5, r5, r3
 80071b2:	9b01      	ldr	r3, [sp, #4]
 80071b4:	9802      	ldr	r0, [sp, #8]
 80071b6:	3301      	adds	r3, #1
 80071b8:	181b      	adds	r3, r3, r0
 80071ba:	106d      	asrs	r5, r5, #1
 80071bc:	42ab      	cmp	r3, r5
 80071be:	d900      	bls.n	80071c2 <__ssputs_r+0x3e>
 80071c0:	001d      	movs	r5, r3
 80071c2:	0553      	lsls	r3, r2, #21
 80071c4:	d532      	bpl.n	800722c <__ssputs_r+0xa8>
 80071c6:	0029      	movs	r1, r5
 80071c8:	0038      	movs	r0, r7
 80071ca:	f000 fb49 	bl	8007860 <_malloc_r>
 80071ce:	1e06      	subs	r6, r0, #0
 80071d0:	d109      	bne.n	80071e6 <__ssputs_r+0x62>
 80071d2:	230c      	movs	r3, #12
 80071d4:	603b      	str	r3, [r7, #0]
 80071d6:	2340      	movs	r3, #64	; 0x40
 80071d8:	2001      	movs	r0, #1
 80071da:	89a2      	ldrh	r2, [r4, #12]
 80071dc:	4240      	negs	r0, r0
 80071de:	4313      	orrs	r3, r2
 80071e0:	81a3      	strh	r3, [r4, #12]
 80071e2:	b005      	add	sp, #20
 80071e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e6:	9a02      	ldr	r2, [sp, #8]
 80071e8:	6921      	ldr	r1, [r4, #16]
 80071ea:	f7ff ff99 	bl	8007120 <memcpy>
 80071ee:	89a3      	ldrh	r3, [r4, #12]
 80071f0:	4a14      	ldr	r2, [pc, #80]	; (8007244 <__ssputs_r+0xc0>)
 80071f2:	401a      	ands	r2, r3
 80071f4:	2380      	movs	r3, #128	; 0x80
 80071f6:	4313      	orrs	r3, r2
 80071f8:	81a3      	strh	r3, [r4, #12]
 80071fa:	9b02      	ldr	r3, [sp, #8]
 80071fc:	6126      	str	r6, [r4, #16]
 80071fe:	18f6      	adds	r6, r6, r3
 8007200:	6026      	str	r6, [r4, #0]
 8007202:	6165      	str	r5, [r4, #20]
 8007204:	9e01      	ldr	r6, [sp, #4]
 8007206:	1aed      	subs	r5, r5, r3
 8007208:	60a5      	str	r5, [r4, #8]
 800720a:	9b01      	ldr	r3, [sp, #4]
 800720c:	429e      	cmp	r6, r3
 800720e:	d900      	bls.n	8007212 <__ssputs_r+0x8e>
 8007210:	9e01      	ldr	r6, [sp, #4]
 8007212:	0032      	movs	r2, r6
 8007214:	9903      	ldr	r1, [sp, #12]
 8007216:	6820      	ldr	r0, [r4, #0]
 8007218:	f000 faa3 	bl	8007762 <memmove>
 800721c:	68a3      	ldr	r3, [r4, #8]
 800721e:	2000      	movs	r0, #0
 8007220:	1b9b      	subs	r3, r3, r6
 8007222:	60a3      	str	r3, [r4, #8]
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	199e      	adds	r6, r3, r6
 8007228:	6026      	str	r6, [r4, #0]
 800722a:	e7da      	b.n	80071e2 <__ssputs_r+0x5e>
 800722c:	002a      	movs	r2, r5
 800722e:	0038      	movs	r0, r7
 8007230:	f000 fb8c 	bl	800794c <_realloc_r>
 8007234:	1e06      	subs	r6, r0, #0
 8007236:	d1e0      	bne.n	80071fa <__ssputs_r+0x76>
 8007238:	0038      	movs	r0, r7
 800723a:	6921      	ldr	r1, [r4, #16]
 800723c:	f000 faa4 	bl	8007788 <_free_r>
 8007240:	e7c7      	b.n	80071d2 <__ssputs_r+0x4e>
 8007242:	46c0      	nop			; (mov r8, r8)
 8007244:	fffffb7f 	.word	0xfffffb7f

08007248 <_svfiprintf_r>:
 8007248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800724a:	b0a1      	sub	sp, #132	; 0x84
 800724c:	9003      	str	r0, [sp, #12]
 800724e:	001d      	movs	r5, r3
 8007250:	898b      	ldrh	r3, [r1, #12]
 8007252:	000f      	movs	r7, r1
 8007254:	0016      	movs	r6, r2
 8007256:	061b      	lsls	r3, r3, #24
 8007258:	d511      	bpl.n	800727e <_svfiprintf_r+0x36>
 800725a:	690b      	ldr	r3, [r1, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10e      	bne.n	800727e <_svfiprintf_r+0x36>
 8007260:	2140      	movs	r1, #64	; 0x40
 8007262:	f000 fafd 	bl	8007860 <_malloc_r>
 8007266:	6038      	str	r0, [r7, #0]
 8007268:	6138      	str	r0, [r7, #16]
 800726a:	2800      	cmp	r0, #0
 800726c:	d105      	bne.n	800727a <_svfiprintf_r+0x32>
 800726e:	230c      	movs	r3, #12
 8007270:	9a03      	ldr	r2, [sp, #12]
 8007272:	3801      	subs	r0, #1
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	b021      	add	sp, #132	; 0x84
 8007278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800727a:	2340      	movs	r3, #64	; 0x40
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	2300      	movs	r3, #0
 8007280:	ac08      	add	r4, sp, #32
 8007282:	6163      	str	r3, [r4, #20]
 8007284:	3320      	adds	r3, #32
 8007286:	7663      	strb	r3, [r4, #25]
 8007288:	3310      	adds	r3, #16
 800728a:	76a3      	strb	r3, [r4, #26]
 800728c:	9507      	str	r5, [sp, #28]
 800728e:	0035      	movs	r5, r6
 8007290:	782b      	ldrb	r3, [r5, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <_svfiprintf_r+0x52>
 8007296:	2b25      	cmp	r3, #37	; 0x25
 8007298:	d147      	bne.n	800732a <_svfiprintf_r+0xe2>
 800729a:	1bab      	subs	r3, r5, r6
 800729c:	9305      	str	r3, [sp, #20]
 800729e:	42b5      	cmp	r5, r6
 80072a0:	d00c      	beq.n	80072bc <_svfiprintf_r+0x74>
 80072a2:	0032      	movs	r2, r6
 80072a4:	0039      	movs	r1, r7
 80072a6:	9803      	ldr	r0, [sp, #12]
 80072a8:	f7ff ff6c 	bl	8007184 <__ssputs_r>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d100      	bne.n	80072b2 <_svfiprintf_r+0x6a>
 80072b0:	e0ae      	b.n	8007410 <_svfiprintf_r+0x1c8>
 80072b2:	6962      	ldr	r2, [r4, #20]
 80072b4:	9b05      	ldr	r3, [sp, #20]
 80072b6:	4694      	mov	ip, r2
 80072b8:	4463      	add	r3, ip
 80072ba:	6163      	str	r3, [r4, #20]
 80072bc:	782b      	ldrb	r3, [r5, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d100      	bne.n	80072c4 <_svfiprintf_r+0x7c>
 80072c2:	e0a5      	b.n	8007410 <_svfiprintf_r+0x1c8>
 80072c4:	2201      	movs	r2, #1
 80072c6:	2300      	movs	r3, #0
 80072c8:	4252      	negs	r2, r2
 80072ca:	6062      	str	r2, [r4, #4]
 80072cc:	a904      	add	r1, sp, #16
 80072ce:	3254      	adds	r2, #84	; 0x54
 80072d0:	1852      	adds	r2, r2, r1
 80072d2:	1c6e      	adds	r6, r5, #1
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	60e3      	str	r3, [r4, #12]
 80072d8:	60a3      	str	r3, [r4, #8]
 80072da:	7013      	strb	r3, [r2, #0]
 80072dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80072de:	2205      	movs	r2, #5
 80072e0:	7831      	ldrb	r1, [r6, #0]
 80072e2:	4854      	ldr	r0, [pc, #336]	; (8007434 <_svfiprintf_r+0x1ec>)
 80072e4:	f000 fa32 	bl	800774c <memchr>
 80072e8:	1c75      	adds	r5, r6, #1
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d11f      	bne.n	800732e <_svfiprintf_r+0xe6>
 80072ee:	6822      	ldr	r2, [r4, #0]
 80072f0:	06d3      	lsls	r3, r2, #27
 80072f2:	d504      	bpl.n	80072fe <_svfiprintf_r+0xb6>
 80072f4:	2353      	movs	r3, #83	; 0x53
 80072f6:	a904      	add	r1, sp, #16
 80072f8:	185b      	adds	r3, r3, r1
 80072fa:	2120      	movs	r1, #32
 80072fc:	7019      	strb	r1, [r3, #0]
 80072fe:	0713      	lsls	r3, r2, #28
 8007300:	d504      	bpl.n	800730c <_svfiprintf_r+0xc4>
 8007302:	2353      	movs	r3, #83	; 0x53
 8007304:	a904      	add	r1, sp, #16
 8007306:	185b      	adds	r3, r3, r1
 8007308:	212b      	movs	r1, #43	; 0x2b
 800730a:	7019      	strb	r1, [r3, #0]
 800730c:	7833      	ldrb	r3, [r6, #0]
 800730e:	2b2a      	cmp	r3, #42	; 0x2a
 8007310:	d016      	beq.n	8007340 <_svfiprintf_r+0xf8>
 8007312:	0035      	movs	r5, r6
 8007314:	2100      	movs	r1, #0
 8007316:	200a      	movs	r0, #10
 8007318:	68e3      	ldr	r3, [r4, #12]
 800731a:	782a      	ldrb	r2, [r5, #0]
 800731c:	1c6e      	adds	r6, r5, #1
 800731e:	3a30      	subs	r2, #48	; 0x30
 8007320:	2a09      	cmp	r2, #9
 8007322:	d94e      	bls.n	80073c2 <_svfiprintf_r+0x17a>
 8007324:	2900      	cmp	r1, #0
 8007326:	d111      	bne.n	800734c <_svfiprintf_r+0x104>
 8007328:	e017      	b.n	800735a <_svfiprintf_r+0x112>
 800732a:	3501      	adds	r5, #1
 800732c:	e7b0      	b.n	8007290 <_svfiprintf_r+0x48>
 800732e:	4b41      	ldr	r3, [pc, #260]	; (8007434 <_svfiprintf_r+0x1ec>)
 8007330:	6822      	ldr	r2, [r4, #0]
 8007332:	1ac0      	subs	r0, r0, r3
 8007334:	2301      	movs	r3, #1
 8007336:	4083      	lsls	r3, r0
 8007338:	4313      	orrs	r3, r2
 800733a:	002e      	movs	r6, r5
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	e7ce      	b.n	80072de <_svfiprintf_r+0x96>
 8007340:	9b07      	ldr	r3, [sp, #28]
 8007342:	1d19      	adds	r1, r3, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	9107      	str	r1, [sp, #28]
 8007348:	2b00      	cmp	r3, #0
 800734a:	db01      	blt.n	8007350 <_svfiprintf_r+0x108>
 800734c:	930b      	str	r3, [sp, #44]	; 0x2c
 800734e:	e004      	b.n	800735a <_svfiprintf_r+0x112>
 8007350:	425b      	negs	r3, r3
 8007352:	60e3      	str	r3, [r4, #12]
 8007354:	2302      	movs	r3, #2
 8007356:	4313      	orrs	r3, r2
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	782b      	ldrb	r3, [r5, #0]
 800735c:	2b2e      	cmp	r3, #46	; 0x2e
 800735e:	d10a      	bne.n	8007376 <_svfiprintf_r+0x12e>
 8007360:	786b      	ldrb	r3, [r5, #1]
 8007362:	2b2a      	cmp	r3, #42	; 0x2a
 8007364:	d135      	bne.n	80073d2 <_svfiprintf_r+0x18a>
 8007366:	9b07      	ldr	r3, [sp, #28]
 8007368:	3502      	adds	r5, #2
 800736a:	1d1a      	adds	r2, r3, #4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	9207      	str	r2, [sp, #28]
 8007370:	2b00      	cmp	r3, #0
 8007372:	db2b      	blt.n	80073cc <_svfiprintf_r+0x184>
 8007374:	9309      	str	r3, [sp, #36]	; 0x24
 8007376:	4e30      	ldr	r6, [pc, #192]	; (8007438 <_svfiprintf_r+0x1f0>)
 8007378:	2203      	movs	r2, #3
 800737a:	0030      	movs	r0, r6
 800737c:	7829      	ldrb	r1, [r5, #0]
 800737e:	f000 f9e5 	bl	800774c <memchr>
 8007382:	2800      	cmp	r0, #0
 8007384:	d006      	beq.n	8007394 <_svfiprintf_r+0x14c>
 8007386:	2340      	movs	r3, #64	; 0x40
 8007388:	1b80      	subs	r0, r0, r6
 800738a:	4083      	lsls	r3, r0
 800738c:	6822      	ldr	r2, [r4, #0]
 800738e:	3501      	adds	r5, #1
 8007390:	4313      	orrs	r3, r2
 8007392:	6023      	str	r3, [r4, #0]
 8007394:	7829      	ldrb	r1, [r5, #0]
 8007396:	2206      	movs	r2, #6
 8007398:	4828      	ldr	r0, [pc, #160]	; (800743c <_svfiprintf_r+0x1f4>)
 800739a:	1c6e      	adds	r6, r5, #1
 800739c:	7621      	strb	r1, [r4, #24]
 800739e:	f000 f9d5 	bl	800774c <memchr>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d03c      	beq.n	8007420 <_svfiprintf_r+0x1d8>
 80073a6:	4b26      	ldr	r3, [pc, #152]	; (8007440 <_svfiprintf_r+0x1f8>)
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d125      	bne.n	80073f8 <_svfiprintf_r+0x1b0>
 80073ac:	2207      	movs	r2, #7
 80073ae:	9b07      	ldr	r3, [sp, #28]
 80073b0:	3307      	adds	r3, #7
 80073b2:	4393      	bics	r3, r2
 80073b4:	3308      	adds	r3, #8
 80073b6:	9307      	str	r3, [sp, #28]
 80073b8:	6963      	ldr	r3, [r4, #20]
 80073ba:	9a04      	ldr	r2, [sp, #16]
 80073bc:	189b      	adds	r3, r3, r2
 80073be:	6163      	str	r3, [r4, #20]
 80073c0:	e765      	b.n	800728e <_svfiprintf_r+0x46>
 80073c2:	4343      	muls	r3, r0
 80073c4:	0035      	movs	r5, r6
 80073c6:	2101      	movs	r1, #1
 80073c8:	189b      	adds	r3, r3, r2
 80073ca:	e7a6      	b.n	800731a <_svfiprintf_r+0xd2>
 80073cc:	2301      	movs	r3, #1
 80073ce:	425b      	negs	r3, r3
 80073d0:	e7d0      	b.n	8007374 <_svfiprintf_r+0x12c>
 80073d2:	2300      	movs	r3, #0
 80073d4:	200a      	movs	r0, #10
 80073d6:	001a      	movs	r2, r3
 80073d8:	3501      	adds	r5, #1
 80073da:	6063      	str	r3, [r4, #4]
 80073dc:	7829      	ldrb	r1, [r5, #0]
 80073de:	1c6e      	adds	r6, r5, #1
 80073e0:	3930      	subs	r1, #48	; 0x30
 80073e2:	2909      	cmp	r1, #9
 80073e4:	d903      	bls.n	80073ee <_svfiprintf_r+0x1a6>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0c5      	beq.n	8007376 <_svfiprintf_r+0x12e>
 80073ea:	9209      	str	r2, [sp, #36]	; 0x24
 80073ec:	e7c3      	b.n	8007376 <_svfiprintf_r+0x12e>
 80073ee:	4342      	muls	r2, r0
 80073f0:	0035      	movs	r5, r6
 80073f2:	2301      	movs	r3, #1
 80073f4:	1852      	adds	r2, r2, r1
 80073f6:	e7f1      	b.n	80073dc <_svfiprintf_r+0x194>
 80073f8:	ab07      	add	r3, sp, #28
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	003a      	movs	r2, r7
 80073fe:	0021      	movs	r1, r4
 8007400:	4b10      	ldr	r3, [pc, #64]	; (8007444 <_svfiprintf_r+0x1fc>)
 8007402:	9803      	ldr	r0, [sp, #12]
 8007404:	e000      	b.n	8007408 <_svfiprintf_r+0x1c0>
 8007406:	bf00      	nop
 8007408:	9004      	str	r0, [sp, #16]
 800740a:	9b04      	ldr	r3, [sp, #16]
 800740c:	3301      	adds	r3, #1
 800740e:	d1d3      	bne.n	80073b8 <_svfiprintf_r+0x170>
 8007410:	89bb      	ldrh	r3, [r7, #12]
 8007412:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007414:	065b      	lsls	r3, r3, #25
 8007416:	d400      	bmi.n	800741a <_svfiprintf_r+0x1d2>
 8007418:	e72d      	b.n	8007276 <_svfiprintf_r+0x2e>
 800741a:	2001      	movs	r0, #1
 800741c:	4240      	negs	r0, r0
 800741e:	e72a      	b.n	8007276 <_svfiprintf_r+0x2e>
 8007420:	ab07      	add	r3, sp, #28
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	003a      	movs	r2, r7
 8007426:	0021      	movs	r1, r4
 8007428:	4b06      	ldr	r3, [pc, #24]	; (8007444 <_svfiprintf_r+0x1fc>)
 800742a:	9803      	ldr	r0, [sp, #12]
 800742c:	f000 f87c 	bl	8007528 <_printf_i>
 8007430:	e7ea      	b.n	8007408 <_svfiprintf_r+0x1c0>
 8007432:	46c0      	nop			; (mov r8, r8)
 8007434:	08007cdc 	.word	0x08007cdc
 8007438:	08007ce2 	.word	0x08007ce2
 800743c:	08007ce6 	.word	0x08007ce6
 8007440:	00000000 	.word	0x00000000
 8007444:	08007185 	.word	0x08007185

08007448 <_printf_common>:
 8007448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800744a:	0015      	movs	r5, r2
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	688a      	ldr	r2, [r1, #8]
 8007450:	690b      	ldr	r3, [r1, #16]
 8007452:	000c      	movs	r4, r1
 8007454:	9000      	str	r0, [sp, #0]
 8007456:	4293      	cmp	r3, r2
 8007458:	da00      	bge.n	800745c <_printf_common+0x14>
 800745a:	0013      	movs	r3, r2
 800745c:	0022      	movs	r2, r4
 800745e:	602b      	str	r3, [r5, #0]
 8007460:	3243      	adds	r2, #67	; 0x43
 8007462:	7812      	ldrb	r2, [r2, #0]
 8007464:	2a00      	cmp	r2, #0
 8007466:	d001      	beq.n	800746c <_printf_common+0x24>
 8007468:	3301      	adds	r3, #1
 800746a:	602b      	str	r3, [r5, #0]
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	069b      	lsls	r3, r3, #26
 8007470:	d502      	bpl.n	8007478 <_printf_common+0x30>
 8007472:	682b      	ldr	r3, [r5, #0]
 8007474:	3302      	adds	r3, #2
 8007476:	602b      	str	r3, [r5, #0]
 8007478:	6822      	ldr	r2, [r4, #0]
 800747a:	2306      	movs	r3, #6
 800747c:	0017      	movs	r7, r2
 800747e:	401f      	ands	r7, r3
 8007480:	421a      	tst	r2, r3
 8007482:	d027      	beq.n	80074d4 <_printf_common+0x8c>
 8007484:	0023      	movs	r3, r4
 8007486:	3343      	adds	r3, #67	; 0x43
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	1e5a      	subs	r2, r3, #1
 800748c:	4193      	sbcs	r3, r2
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	0692      	lsls	r2, r2, #26
 8007492:	d430      	bmi.n	80074f6 <_printf_common+0xae>
 8007494:	0022      	movs	r2, r4
 8007496:	9901      	ldr	r1, [sp, #4]
 8007498:	9800      	ldr	r0, [sp, #0]
 800749a:	9e08      	ldr	r6, [sp, #32]
 800749c:	3243      	adds	r2, #67	; 0x43
 800749e:	47b0      	blx	r6
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d025      	beq.n	80074f0 <_printf_common+0xa8>
 80074a4:	2306      	movs	r3, #6
 80074a6:	6820      	ldr	r0, [r4, #0]
 80074a8:	682a      	ldr	r2, [r5, #0]
 80074aa:	68e1      	ldr	r1, [r4, #12]
 80074ac:	2500      	movs	r5, #0
 80074ae:	4003      	ands	r3, r0
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d103      	bne.n	80074bc <_printf_common+0x74>
 80074b4:	1a8d      	subs	r5, r1, r2
 80074b6:	43eb      	mvns	r3, r5
 80074b8:	17db      	asrs	r3, r3, #31
 80074ba:	401d      	ands	r5, r3
 80074bc:	68a3      	ldr	r3, [r4, #8]
 80074be:	6922      	ldr	r2, [r4, #16]
 80074c0:	4293      	cmp	r3, r2
 80074c2:	dd01      	ble.n	80074c8 <_printf_common+0x80>
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	18ed      	adds	r5, r5, r3
 80074c8:	2700      	movs	r7, #0
 80074ca:	42bd      	cmp	r5, r7
 80074cc:	d120      	bne.n	8007510 <_printf_common+0xc8>
 80074ce:	2000      	movs	r0, #0
 80074d0:	e010      	b.n	80074f4 <_printf_common+0xac>
 80074d2:	3701      	adds	r7, #1
 80074d4:	68e3      	ldr	r3, [r4, #12]
 80074d6:	682a      	ldr	r2, [r5, #0]
 80074d8:	1a9b      	subs	r3, r3, r2
 80074da:	42bb      	cmp	r3, r7
 80074dc:	ddd2      	ble.n	8007484 <_printf_common+0x3c>
 80074de:	0022      	movs	r2, r4
 80074e0:	2301      	movs	r3, #1
 80074e2:	9901      	ldr	r1, [sp, #4]
 80074e4:	9800      	ldr	r0, [sp, #0]
 80074e6:	9e08      	ldr	r6, [sp, #32]
 80074e8:	3219      	adds	r2, #25
 80074ea:	47b0      	blx	r6
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d1f0      	bne.n	80074d2 <_printf_common+0x8a>
 80074f0:	2001      	movs	r0, #1
 80074f2:	4240      	negs	r0, r0
 80074f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074f6:	2030      	movs	r0, #48	; 0x30
 80074f8:	18e1      	adds	r1, r4, r3
 80074fa:	3143      	adds	r1, #67	; 0x43
 80074fc:	7008      	strb	r0, [r1, #0]
 80074fe:	0021      	movs	r1, r4
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	3145      	adds	r1, #69	; 0x45
 8007504:	7809      	ldrb	r1, [r1, #0]
 8007506:	18a2      	adds	r2, r4, r2
 8007508:	3243      	adds	r2, #67	; 0x43
 800750a:	3302      	adds	r3, #2
 800750c:	7011      	strb	r1, [r2, #0]
 800750e:	e7c1      	b.n	8007494 <_printf_common+0x4c>
 8007510:	0022      	movs	r2, r4
 8007512:	2301      	movs	r3, #1
 8007514:	9901      	ldr	r1, [sp, #4]
 8007516:	9800      	ldr	r0, [sp, #0]
 8007518:	9e08      	ldr	r6, [sp, #32]
 800751a:	321a      	adds	r2, #26
 800751c:	47b0      	blx	r6
 800751e:	1c43      	adds	r3, r0, #1
 8007520:	d0e6      	beq.n	80074f0 <_printf_common+0xa8>
 8007522:	3701      	adds	r7, #1
 8007524:	e7d1      	b.n	80074ca <_printf_common+0x82>
	...

08007528 <_printf_i>:
 8007528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800752a:	b08b      	sub	sp, #44	; 0x2c
 800752c:	9206      	str	r2, [sp, #24]
 800752e:	000a      	movs	r2, r1
 8007530:	3243      	adds	r2, #67	; 0x43
 8007532:	9307      	str	r3, [sp, #28]
 8007534:	9005      	str	r0, [sp, #20]
 8007536:	9204      	str	r2, [sp, #16]
 8007538:	7e0a      	ldrb	r2, [r1, #24]
 800753a:	000c      	movs	r4, r1
 800753c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800753e:	2a78      	cmp	r2, #120	; 0x78
 8007540:	d807      	bhi.n	8007552 <_printf_i+0x2a>
 8007542:	2a62      	cmp	r2, #98	; 0x62
 8007544:	d809      	bhi.n	800755a <_printf_i+0x32>
 8007546:	2a00      	cmp	r2, #0
 8007548:	d100      	bne.n	800754c <_printf_i+0x24>
 800754a:	e0c1      	b.n	80076d0 <_printf_i+0x1a8>
 800754c:	2a58      	cmp	r2, #88	; 0x58
 800754e:	d100      	bne.n	8007552 <_printf_i+0x2a>
 8007550:	e08c      	b.n	800766c <_printf_i+0x144>
 8007552:	0026      	movs	r6, r4
 8007554:	3642      	adds	r6, #66	; 0x42
 8007556:	7032      	strb	r2, [r6, #0]
 8007558:	e022      	b.n	80075a0 <_printf_i+0x78>
 800755a:	0010      	movs	r0, r2
 800755c:	3863      	subs	r0, #99	; 0x63
 800755e:	2815      	cmp	r0, #21
 8007560:	d8f7      	bhi.n	8007552 <_printf_i+0x2a>
 8007562:	f7f8 fdd9 	bl	8000118 <__gnu_thumb1_case_shi>
 8007566:	0016      	.short	0x0016
 8007568:	fff6001f 	.word	0xfff6001f
 800756c:	fff6fff6 	.word	0xfff6fff6
 8007570:	001ffff6 	.word	0x001ffff6
 8007574:	fff6fff6 	.word	0xfff6fff6
 8007578:	fff6fff6 	.word	0xfff6fff6
 800757c:	003600a8 	.word	0x003600a8
 8007580:	fff6009a 	.word	0xfff6009a
 8007584:	00b9fff6 	.word	0x00b9fff6
 8007588:	0036fff6 	.word	0x0036fff6
 800758c:	fff6fff6 	.word	0xfff6fff6
 8007590:	009e      	.short	0x009e
 8007592:	0026      	movs	r6, r4
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	3642      	adds	r6, #66	; 0x42
 8007598:	1d11      	adds	r1, r2, #4
 800759a:	6019      	str	r1, [r3, #0]
 800759c:	6813      	ldr	r3, [r2, #0]
 800759e:	7033      	strb	r3, [r6, #0]
 80075a0:	2301      	movs	r3, #1
 80075a2:	e0a7      	b.n	80076f4 <_printf_i+0x1cc>
 80075a4:	6808      	ldr	r0, [r1, #0]
 80075a6:	6819      	ldr	r1, [r3, #0]
 80075a8:	1d0a      	adds	r2, r1, #4
 80075aa:	0605      	lsls	r5, r0, #24
 80075ac:	d50b      	bpl.n	80075c6 <_printf_i+0x9e>
 80075ae:	680d      	ldr	r5, [r1, #0]
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	da03      	bge.n	80075be <_printf_i+0x96>
 80075b6:	232d      	movs	r3, #45	; 0x2d
 80075b8:	9a04      	ldr	r2, [sp, #16]
 80075ba:	426d      	negs	r5, r5
 80075bc:	7013      	strb	r3, [r2, #0]
 80075be:	4b61      	ldr	r3, [pc, #388]	; (8007744 <_printf_i+0x21c>)
 80075c0:	270a      	movs	r7, #10
 80075c2:	9303      	str	r3, [sp, #12]
 80075c4:	e01b      	b.n	80075fe <_printf_i+0xd6>
 80075c6:	680d      	ldr	r5, [r1, #0]
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	0641      	lsls	r1, r0, #25
 80075cc:	d5f1      	bpl.n	80075b2 <_printf_i+0x8a>
 80075ce:	b22d      	sxth	r5, r5
 80075d0:	e7ef      	b.n	80075b2 <_printf_i+0x8a>
 80075d2:	680d      	ldr	r5, [r1, #0]
 80075d4:	6819      	ldr	r1, [r3, #0]
 80075d6:	1d08      	adds	r0, r1, #4
 80075d8:	6018      	str	r0, [r3, #0]
 80075da:	062e      	lsls	r6, r5, #24
 80075dc:	d501      	bpl.n	80075e2 <_printf_i+0xba>
 80075de:	680d      	ldr	r5, [r1, #0]
 80075e0:	e003      	b.n	80075ea <_printf_i+0xc2>
 80075e2:	066d      	lsls	r5, r5, #25
 80075e4:	d5fb      	bpl.n	80075de <_printf_i+0xb6>
 80075e6:	680d      	ldr	r5, [r1, #0]
 80075e8:	b2ad      	uxth	r5, r5
 80075ea:	4b56      	ldr	r3, [pc, #344]	; (8007744 <_printf_i+0x21c>)
 80075ec:	2708      	movs	r7, #8
 80075ee:	9303      	str	r3, [sp, #12]
 80075f0:	2a6f      	cmp	r2, #111	; 0x6f
 80075f2:	d000      	beq.n	80075f6 <_printf_i+0xce>
 80075f4:	3702      	adds	r7, #2
 80075f6:	0023      	movs	r3, r4
 80075f8:	2200      	movs	r2, #0
 80075fa:	3343      	adds	r3, #67	; 0x43
 80075fc:	701a      	strb	r2, [r3, #0]
 80075fe:	6863      	ldr	r3, [r4, #4]
 8007600:	60a3      	str	r3, [r4, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	db03      	blt.n	800760e <_printf_i+0xe6>
 8007606:	2204      	movs	r2, #4
 8007608:	6821      	ldr	r1, [r4, #0]
 800760a:	4391      	bics	r1, r2
 800760c:	6021      	str	r1, [r4, #0]
 800760e:	2d00      	cmp	r5, #0
 8007610:	d102      	bne.n	8007618 <_printf_i+0xf0>
 8007612:	9e04      	ldr	r6, [sp, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00c      	beq.n	8007632 <_printf_i+0x10a>
 8007618:	9e04      	ldr	r6, [sp, #16]
 800761a:	0028      	movs	r0, r5
 800761c:	0039      	movs	r1, r7
 800761e:	f7f8 fe0b 	bl	8000238 <__aeabi_uidivmod>
 8007622:	9b03      	ldr	r3, [sp, #12]
 8007624:	3e01      	subs	r6, #1
 8007626:	5c5b      	ldrb	r3, [r3, r1]
 8007628:	7033      	strb	r3, [r6, #0]
 800762a:	002b      	movs	r3, r5
 800762c:	0005      	movs	r5, r0
 800762e:	429f      	cmp	r7, r3
 8007630:	d9f3      	bls.n	800761a <_printf_i+0xf2>
 8007632:	2f08      	cmp	r7, #8
 8007634:	d109      	bne.n	800764a <_printf_i+0x122>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	07db      	lsls	r3, r3, #31
 800763a:	d506      	bpl.n	800764a <_printf_i+0x122>
 800763c:	6863      	ldr	r3, [r4, #4]
 800763e:	6922      	ldr	r2, [r4, #16]
 8007640:	4293      	cmp	r3, r2
 8007642:	dc02      	bgt.n	800764a <_printf_i+0x122>
 8007644:	2330      	movs	r3, #48	; 0x30
 8007646:	3e01      	subs	r6, #1
 8007648:	7033      	strb	r3, [r6, #0]
 800764a:	9b04      	ldr	r3, [sp, #16]
 800764c:	1b9b      	subs	r3, r3, r6
 800764e:	6123      	str	r3, [r4, #16]
 8007650:	9b07      	ldr	r3, [sp, #28]
 8007652:	0021      	movs	r1, r4
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	9805      	ldr	r0, [sp, #20]
 8007658:	9b06      	ldr	r3, [sp, #24]
 800765a:	aa09      	add	r2, sp, #36	; 0x24
 800765c:	f7ff fef4 	bl	8007448 <_printf_common>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d14c      	bne.n	80076fe <_printf_i+0x1d6>
 8007664:	2001      	movs	r0, #1
 8007666:	4240      	negs	r0, r0
 8007668:	b00b      	add	sp, #44	; 0x2c
 800766a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800766c:	3145      	adds	r1, #69	; 0x45
 800766e:	700a      	strb	r2, [r1, #0]
 8007670:	4a34      	ldr	r2, [pc, #208]	; (8007744 <_printf_i+0x21c>)
 8007672:	9203      	str	r2, [sp, #12]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	6821      	ldr	r1, [r4, #0]
 8007678:	ca20      	ldmia	r2!, {r5}
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	0608      	lsls	r0, r1, #24
 800767e:	d516      	bpl.n	80076ae <_printf_i+0x186>
 8007680:	07cb      	lsls	r3, r1, #31
 8007682:	d502      	bpl.n	800768a <_printf_i+0x162>
 8007684:	2320      	movs	r3, #32
 8007686:	4319      	orrs	r1, r3
 8007688:	6021      	str	r1, [r4, #0]
 800768a:	2710      	movs	r7, #16
 800768c:	2d00      	cmp	r5, #0
 800768e:	d1b2      	bne.n	80075f6 <_printf_i+0xce>
 8007690:	2320      	movs	r3, #32
 8007692:	6822      	ldr	r2, [r4, #0]
 8007694:	439a      	bics	r2, r3
 8007696:	6022      	str	r2, [r4, #0]
 8007698:	e7ad      	b.n	80075f6 <_printf_i+0xce>
 800769a:	2220      	movs	r2, #32
 800769c:	6809      	ldr	r1, [r1, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	6022      	str	r2, [r4, #0]
 80076a2:	0022      	movs	r2, r4
 80076a4:	2178      	movs	r1, #120	; 0x78
 80076a6:	3245      	adds	r2, #69	; 0x45
 80076a8:	7011      	strb	r1, [r2, #0]
 80076aa:	4a27      	ldr	r2, [pc, #156]	; (8007748 <_printf_i+0x220>)
 80076ac:	e7e1      	b.n	8007672 <_printf_i+0x14a>
 80076ae:	0648      	lsls	r0, r1, #25
 80076b0:	d5e6      	bpl.n	8007680 <_printf_i+0x158>
 80076b2:	b2ad      	uxth	r5, r5
 80076b4:	e7e4      	b.n	8007680 <_printf_i+0x158>
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	680d      	ldr	r5, [r1, #0]
 80076ba:	1d10      	adds	r0, r2, #4
 80076bc:	6949      	ldr	r1, [r1, #20]
 80076be:	6018      	str	r0, [r3, #0]
 80076c0:	6813      	ldr	r3, [r2, #0]
 80076c2:	062e      	lsls	r6, r5, #24
 80076c4:	d501      	bpl.n	80076ca <_printf_i+0x1a2>
 80076c6:	6019      	str	r1, [r3, #0]
 80076c8:	e002      	b.n	80076d0 <_printf_i+0x1a8>
 80076ca:	066d      	lsls	r5, r5, #25
 80076cc:	d5fb      	bpl.n	80076c6 <_printf_i+0x19e>
 80076ce:	8019      	strh	r1, [r3, #0]
 80076d0:	2300      	movs	r3, #0
 80076d2:	9e04      	ldr	r6, [sp, #16]
 80076d4:	6123      	str	r3, [r4, #16]
 80076d6:	e7bb      	b.n	8007650 <_printf_i+0x128>
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	1d11      	adds	r1, r2, #4
 80076dc:	6019      	str	r1, [r3, #0]
 80076de:	6816      	ldr	r6, [r2, #0]
 80076e0:	2100      	movs	r1, #0
 80076e2:	0030      	movs	r0, r6
 80076e4:	6862      	ldr	r2, [r4, #4]
 80076e6:	f000 f831 	bl	800774c <memchr>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d001      	beq.n	80076f2 <_printf_i+0x1ca>
 80076ee:	1b80      	subs	r0, r0, r6
 80076f0:	6060      	str	r0, [r4, #4]
 80076f2:	6863      	ldr	r3, [r4, #4]
 80076f4:	6123      	str	r3, [r4, #16]
 80076f6:	2300      	movs	r3, #0
 80076f8:	9a04      	ldr	r2, [sp, #16]
 80076fa:	7013      	strb	r3, [r2, #0]
 80076fc:	e7a8      	b.n	8007650 <_printf_i+0x128>
 80076fe:	6923      	ldr	r3, [r4, #16]
 8007700:	0032      	movs	r2, r6
 8007702:	9906      	ldr	r1, [sp, #24]
 8007704:	9805      	ldr	r0, [sp, #20]
 8007706:	9d07      	ldr	r5, [sp, #28]
 8007708:	47a8      	blx	r5
 800770a:	1c43      	adds	r3, r0, #1
 800770c:	d0aa      	beq.n	8007664 <_printf_i+0x13c>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	079b      	lsls	r3, r3, #30
 8007712:	d415      	bmi.n	8007740 <_printf_i+0x218>
 8007714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007716:	68e0      	ldr	r0, [r4, #12]
 8007718:	4298      	cmp	r0, r3
 800771a:	daa5      	bge.n	8007668 <_printf_i+0x140>
 800771c:	0018      	movs	r0, r3
 800771e:	e7a3      	b.n	8007668 <_printf_i+0x140>
 8007720:	0022      	movs	r2, r4
 8007722:	2301      	movs	r3, #1
 8007724:	9906      	ldr	r1, [sp, #24]
 8007726:	9805      	ldr	r0, [sp, #20]
 8007728:	9e07      	ldr	r6, [sp, #28]
 800772a:	3219      	adds	r2, #25
 800772c:	47b0      	blx	r6
 800772e:	1c43      	adds	r3, r0, #1
 8007730:	d098      	beq.n	8007664 <_printf_i+0x13c>
 8007732:	3501      	adds	r5, #1
 8007734:	68e3      	ldr	r3, [r4, #12]
 8007736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007738:	1a9b      	subs	r3, r3, r2
 800773a:	42ab      	cmp	r3, r5
 800773c:	dcf0      	bgt.n	8007720 <_printf_i+0x1f8>
 800773e:	e7e9      	b.n	8007714 <_printf_i+0x1ec>
 8007740:	2500      	movs	r5, #0
 8007742:	e7f7      	b.n	8007734 <_printf_i+0x20c>
 8007744:	08007ced 	.word	0x08007ced
 8007748:	08007cfe 	.word	0x08007cfe

0800774c <memchr>:
 800774c:	b2c9      	uxtb	r1, r1
 800774e:	1882      	adds	r2, r0, r2
 8007750:	4290      	cmp	r0, r2
 8007752:	d101      	bne.n	8007758 <memchr+0xc>
 8007754:	2000      	movs	r0, #0
 8007756:	4770      	bx	lr
 8007758:	7803      	ldrb	r3, [r0, #0]
 800775a:	428b      	cmp	r3, r1
 800775c:	d0fb      	beq.n	8007756 <memchr+0xa>
 800775e:	3001      	adds	r0, #1
 8007760:	e7f6      	b.n	8007750 <memchr+0x4>

08007762 <memmove>:
 8007762:	b510      	push	{r4, lr}
 8007764:	4288      	cmp	r0, r1
 8007766:	d902      	bls.n	800776e <memmove+0xc>
 8007768:	188b      	adds	r3, r1, r2
 800776a:	4298      	cmp	r0, r3
 800776c:	d303      	bcc.n	8007776 <memmove+0x14>
 800776e:	2300      	movs	r3, #0
 8007770:	e007      	b.n	8007782 <memmove+0x20>
 8007772:	5c8b      	ldrb	r3, [r1, r2]
 8007774:	5483      	strb	r3, [r0, r2]
 8007776:	3a01      	subs	r2, #1
 8007778:	d2fb      	bcs.n	8007772 <memmove+0x10>
 800777a:	bd10      	pop	{r4, pc}
 800777c:	5ccc      	ldrb	r4, [r1, r3]
 800777e:	54c4      	strb	r4, [r0, r3]
 8007780:	3301      	adds	r3, #1
 8007782:	429a      	cmp	r2, r3
 8007784:	d1fa      	bne.n	800777c <memmove+0x1a>
 8007786:	e7f8      	b.n	800777a <memmove+0x18>

08007788 <_free_r>:
 8007788:	b570      	push	{r4, r5, r6, lr}
 800778a:	0005      	movs	r5, r0
 800778c:	2900      	cmp	r1, #0
 800778e:	d010      	beq.n	80077b2 <_free_r+0x2a>
 8007790:	1f0c      	subs	r4, r1, #4
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	da00      	bge.n	800779a <_free_r+0x12>
 8007798:	18e4      	adds	r4, r4, r3
 800779a:	0028      	movs	r0, r5
 800779c:	f000 f918 	bl	80079d0 <__malloc_lock>
 80077a0:	4a1d      	ldr	r2, [pc, #116]	; (8007818 <_free_r+0x90>)
 80077a2:	6813      	ldr	r3, [r2, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d105      	bne.n	80077b4 <_free_r+0x2c>
 80077a8:	6063      	str	r3, [r4, #4]
 80077aa:	6014      	str	r4, [r2, #0]
 80077ac:	0028      	movs	r0, r5
 80077ae:	f000 f917 	bl	80079e0 <__malloc_unlock>
 80077b2:	bd70      	pop	{r4, r5, r6, pc}
 80077b4:	42a3      	cmp	r3, r4
 80077b6:	d908      	bls.n	80077ca <_free_r+0x42>
 80077b8:	6821      	ldr	r1, [r4, #0]
 80077ba:	1860      	adds	r0, r4, r1
 80077bc:	4283      	cmp	r3, r0
 80077be:	d1f3      	bne.n	80077a8 <_free_r+0x20>
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	1841      	adds	r1, r0, r1
 80077c6:	6021      	str	r1, [r4, #0]
 80077c8:	e7ee      	b.n	80077a8 <_free_r+0x20>
 80077ca:	001a      	movs	r2, r3
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <_free_r+0x4e>
 80077d2:	42a3      	cmp	r3, r4
 80077d4:	d9f9      	bls.n	80077ca <_free_r+0x42>
 80077d6:	6811      	ldr	r1, [r2, #0]
 80077d8:	1850      	adds	r0, r2, r1
 80077da:	42a0      	cmp	r0, r4
 80077dc:	d10b      	bne.n	80077f6 <_free_r+0x6e>
 80077de:	6820      	ldr	r0, [r4, #0]
 80077e0:	1809      	adds	r1, r1, r0
 80077e2:	1850      	adds	r0, r2, r1
 80077e4:	6011      	str	r1, [r2, #0]
 80077e6:	4283      	cmp	r3, r0
 80077e8:	d1e0      	bne.n	80077ac <_free_r+0x24>
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	1841      	adds	r1, r0, r1
 80077f0:	6011      	str	r1, [r2, #0]
 80077f2:	6053      	str	r3, [r2, #4]
 80077f4:	e7da      	b.n	80077ac <_free_r+0x24>
 80077f6:	42a0      	cmp	r0, r4
 80077f8:	d902      	bls.n	8007800 <_free_r+0x78>
 80077fa:	230c      	movs	r3, #12
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	e7d5      	b.n	80077ac <_free_r+0x24>
 8007800:	6821      	ldr	r1, [r4, #0]
 8007802:	1860      	adds	r0, r4, r1
 8007804:	4283      	cmp	r3, r0
 8007806:	d103      	bne.n	8007810 <_free_r+0x88>
 8007808:	6818      	ldr	r0, [r3, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	1841      	adds	r1, r0, r1
 800780e:	6021      	str	r1, [r4, #0]
 8007810:	6063      	str	r3, [r4, #4]
 8007812:	6054      	str	r4, [r2, #4]
 8007814:	e7ca      	b.n	80077ac <_free_r+0x24>
 8007816:	46c0      	nop			; (mov r8, r8)
 8007818:	200002f8 	.word	0x200002f8

0800781c <sbrk_aligned>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	4e0f      	ldr	r6, [pc, #60]	; (800785c <sbrk_aligned+0x40>)
 8007820:	000d      	movs	r5, r1
 8007822:	6831      	ldr	r1, [r6, #0]
 8007824:	0004      	movs	r4, r0
 8007826:	2900      	cmp	r1, #0
 8007828:	d102      	bne.n	8007830 <sbrk_aligned+0x14>
 800782a:	f000 f8bf 	bl	80079ac <_sbrk_r>
 800782e:	6030      	str	r0, [r6, #0]
 8007830:	0029      	movs	r1, r5
 8007832:	0020      	movs	r0, r4
 8007834:	f000 f8ba 	bl	80079ac <_sbrk_r>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d00a      	beq.n	8007852 <sbrk_aligned+0x36>
 800783c:	2303      	movs	r3, #3
 800783e:	1cc5      	adds	r5, r0, #3
 8007840:	439d      	bics	r5, r3
 8007842:	42a8      	cmp	r0, r5
 8007844:	d007      	beq.n	8007856 <sbrk_aligned+0x3a>
 8007846:	1a29      	subs	r1, r5, r0
 8007848:	0020      	movs	r0, r4
 800784a:	f000 f8af 	bl	80079ac <_sbrk_r>
 800784e:	1c43      	adds	r3, r0, #1
 8007850:	d101      	bne.n	8007856 <sbrk_aligned+0x3a>
 8007852:	2501      	movs	r5, #1
 8007854:	426d      	negs	r5, r5
 8007856:	0028      	movs	r0, r5
 8007858:	bd70      	pop	{r4, r5, r6, pc}
 800785a:	46c0      	nop			; (mov r8, r8)
 800785c:	200002fc 	.word	0x200002fc

08007860 <_malloc_r>:
 8007860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007862:	2203      	movs	r2, #3
 8007864:	1ccb      	adds	r3, r1, #3
 8007866:	4393      	bics	r3, r2
 8007868:	3308      	adds	r3, #8
 800786a:	0006      	movs	r6, r0
 800786c:	001f      	movs	r7, r3
 800786e:	2b0c      	cmp	r3, #12
 8007870:	d232      	bcs.n	80078d8 <_malloc_r+0x78>
 8007872:	270c      	movs	r7, #12
 8007874:	42b9      	cmp	r1, r7
 8007876:	d831      	bhi.n	80078dc <_malloc_r+0x7c>
 8007878:	0030      	movs	r0, r6
 800787a:	f000 f8a9 	bl	80079d0 <__malloc_lock>
 800787e:	4d32      	ldr	r5, [pc, #200]	; (8007948 <_malloc_r+0xe8>)
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	001c      	movs	r4, r3
 8007884:	2c00      	cmp	r4, #0
 8007886:	d12e      	bne.n	80078e6 <_malloc_r+0x86>
 8007888:	0039      	movs	r1, r7
 800788a:	0030      	movs	r0, r6
 800788c:	f7ff ffc6 	bl	800781c <sbrk_aligned>
 8007890:	0004      	movs	r4, r0
 8007892:	1c43      	adds	r3, r0, #1
 8007894:	d11e      	bne.n	80078d4 <_malloc_r+0x74>
 8007896:	682c      	ldr	r4, [r5, #0]
 8007898:	0025      	movs	r5, r4
 800789a:	2d00      	cmp	r5, #0
 800789c:	d14a      	bne.n	8007934 <_malloc_r+0xd4>
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	0029      	movs	r1, r5
 80078a2:	18e3      	adds	r3, r4, r3
 80078a4:	0030      	movs	r0, r6
 80078a6:	9301      	str	r3, [sp, #4]
 80078a8:	f000 f880 	bl	80079ac <_sbrk_r>
 80078ac:	9b01      	ldr	r3, [sp, #4]
 80078ae:	4283      	cmp	r3, r0
 80078b0:	d143      	bne.n	800793a <_malloc_r+0xda>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	3703      	adds	r7, #3
 80078b6:	1aff      	subs	r7, r7, r3
 80078b8:	2303      	movs	r3, #3
 80078ba:	439f      	bics	r7, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	2f0c      	cmp	r7, #12
 80078c0:	d200      	bcs.n	80078c4 <_malloc_r+0x64>
 80078c2:	270c      	movs	r7, #12
 80078c4:	0039      	movs	r1, r7
 80078c6:	0030      	movs	r0, r6
 80078c8:	f7ff ffa8 	bl	800781c <sbrk_aligned>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d034      	beq.n	800793a <_malloc_r+0xda>
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	19df      	adds	r7, r3, r7
 80078d4:	6027      	str	r7, [r4, #0]
 80078d6:	e013      	b.n	8007900 <_malloc_r+0xa0>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	dacb      	bge.n	8007874 <_malloc_r+0x14>
 80078dc:	230c      	movs	r3, #12
 80078de:	2500      	movs	r5, #0
 80078e0:	6033      	str	r3, [r6, #0]
 80078e2:	0028      	movs	r0, r5
 80078e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078e6:	6822      	ldr	r2, [r4, #0]
 80078e8:	1bd1      	subs	r1, r2, r7
 80078ea:	d420      	bmi.n	800792e <_malloc_r+0xce>
 80078ec:	290b      	cmp	r1, #11
 80078ee:	d917      	bls.n	8007920 <_malloc_r+0xc0>
 80078f0:	19e2      	adds	r2, r4, r7
 80078f2:	6027      	str	r7, [r4, #0]
 80078f4:	42a3      	cmp	r3, r4
 80078f6:	d111      	bne.n	800791c <_malloc_r+0xbc>
 80078f8:	602a      	str	r2, [r5, #0]
 80078fa:	6863      	ldr	r3, [r4, #4]
 80078fc:	6011      	str	r1, [r2, #0]
 80078fe:	6053      	str	r3, [r2, #4]
 8007900:	0030      	movs	r0, r6
 8007902:	0025      	movs	r5, r4
 8007904:	f000 f86c 	bl	80079e0 <__malloc_unlock>
 8007908:	2207      	movs	r2, #7
 800790a:	350b      	adds	r5, #11
 800790c:	1d23      	adds	r3, r4, #4
 800790e:	4395      	bics	r5, r2
 8007910:	1aea      	subs	r2, r5, r3
 8007912:	429d      	cmp	r5, r3
 8007914:	d0e5      	beq.n	80078e2 <_malloc_r+0x82>
 8007916:	1b5b      	subs	r3, r3, r5
 8007918:	50a3      	str	r3, [r4, r2]
 800791a:	e7e2      	b.n	80078e2 <_malloc_r+0x82>
 800791c:	605a      	str	r2, [r3, #4]
 800791e:	e7ec      	b.n	80078fa <_malloc_r+0x9a>
 8007920:	6862      	ldr	r2, [r4, #4]
 8007922:	42a3      	cmp	r3, r4
 8007924:	d101      	bne.n	800792a <_malloc_r+0xca>
 8007926:	602a      	str	r2, [r5, #0]
 8007928:	e7ea      	b.n	8007900 <_malloc_r+0xa0>
 800792a:	605a      	str	r2, [r3, #4]
 800792c:	e7e8      	b.n	8007900 <_malloc_r+0xa0>
 800792e:	0023      	movs	r3, r4
 8007930:	6864      	ldr	r4, [r4, #4]
 8007932:	e7a7      	b.n	8007884 <_malloc_r+0x24>
 8007934:	002c      	movs	r4, r5
 8007936:	686d      	ldr	r5, [r5, #4]
 8007938:	e7af      	b.n	800789a <_malloc_r+0x3a>
 800793a:	230c      	movs	r3, #12
 800793c:	0030      	movs	r0, r6
 800793e:	6033      	str	r3, [r6, #0]
 8007940:	f000 f84e 	bl	80079e0 <__malloc_unlock>
 8007944:	e7cd      	b.n	80078e2 <_malloc_r+0x82>
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	200002f8 	.word	0x200002f8

0800794c <_realloc_r>:
 800794c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800794e:	0007      	movs	r7, r0
 8007950:	000e      	movs	r6, r1
 8007952:	0014      	movs	r4, r2
 8007954:	2900      	cmp	r1, #0
 8007956:	d105      	bne.n	8007964 <_realloc_r+0x18>
 8007958:	0011      	movs	r1, r2
 800795a:	f7ff ff81 	bl	8007860 <_malloc_r>
 800795e:	0005      	movs	r5, r0
 8007960:	0028      	movs	r0, r5
 8007962:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007964:	2a00      	cmp	r2, #0
 8007966:	d103      	bne.n	8007970 <_realloc_r+0x24>
 8007968:	f7ff ff0e 	bl	8007788 <_free_r>
 800796c:	0025      	movs	r5, r4
 800796e:	e7f7      	b.n	8007960 <_realloc_r+0x14>
 8007970:	f000 f83e 	bl	80079f0 <_malloc_usable_size_r>
 8007974:	9001      	str	r0, [sp, #4]
 8007976:	4284      	cmp	r4, r0
 8007978:	d803      	bhi.n	8007982 <_realloc_r+0x36>
 800797a:	0035      	movs	r5, r6
 800797c:	0843      	lsrs	r3, r0, #1
 800797e:	42a3      	cmp	r3, r4
 8007980:	d3ee      	bcc.n	8007960 <_realloc_r+0x14>
 8007982:	0021      	movs	r1, r4
 8007984:	0038      	movs	r0, r7
 8007986:	f7ff ff6b 	bl	8007860 <_malloc_r>
 800798a:	1e05      	subs	r5, r0, #0
 800798c:	d0e8      	beq.n	8007960 <_realloc_r+0x14>
 800798e:	9b01      	ldr	r3, [sp, #4]
 8007990:	0022      	movs	r2, r4
 8007992:	429c      	cmp	r4, r3
 8007994:	d900      	bls.n	8007998 <_realloc_r+0x4c>
 8007996:	001a      	movs	r2, r3
 8007998:	0031      	movs	r1, r6
 800799a:	0028      	movs	r0, r5
 800799c:	f7ff fbc0 	bl	8007120 <memcpy>
 80079a0:	0031      	movs	r1, r6
 80079a2:	0038      	movs	r0, r7
 80079a4:	f7ff fef0 	bl	8007788 <_free_r>
 80079a8:	e7da      	b.n	8007960 <_realloc_r+0x14>
	...

080079ac <_sbrk_r>:
 80079ac:	2300      	movs	r3, #0
 80079ae:	b570      	push	{r4, r5, r6, lr}
 80079b0:	4d06      	ldr	r5, [pc, #24]	; (80079cc <_sbrk_r+0x20>)
 80079b2:	0004      	movs	r4, r0
 80079b4:	0008      	movs	r0, r1
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	f7fb fbb0 	bl	800311c <_sbrk>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d103      	bne.n	80079c8 <_sbrk_r+0x1c>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d000      	beq.n	80079c8 <_sbrk_r+0x1c>
 80079c6:	6023      	str	r3, [r4, #0]
 80079c8:	bd70      	pop	{r4, r5, r6, pc}
 80079ca:	46c0      	nop			; (mov r8, r8)
 80079cc:	20000300 	.word	0x20000300

080079d0 <__malloc_lock>:
 80079d0:	b510      	push	{r4, lr}
 80079d2:	4802      	ldr	r0, [pc, #8]	; (80079dc <__malloc_lock+0xc>)
 80079d4:	f000 f814 	bl	8007a00 <__retarget_lock_acquire_recursive>
 80079d8:	bd10      	pop	{r4, pc}
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	20000304 	.word	0x20000304

080079e0 <__malloc_unlock>:
 80079e0:	b510      	push	{r4, lr}
 80079e2:	4802      	ldr	r0, [pc, #8]	; (80079ec <__malloc_unlock+0xc>)
 80079e4:	f000 f80d 	bl	8007a02 <__retarget_lock_release_recursive>
 80079e8:	bd10      	pop	{r4, pc}
 80079ea:	46c0      	nop			; (mov r8, r8)
 80079ec:	20000304 	.word	0x20000304

080079f0 <_malloc_usable_size_r>:
 80079f0:	1f0b      	subs	r3, r1, #4
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	1f18      	subs	r0, r3, #4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	da01      	bge.n	80079fe <_malloc_usable_size_r+0xe>
 80079fa:	580b      	ldr	r3, [r1, r0]
 80079fc:	18c0      	adds	r0, r0, r3
 80079fe:	4770      	bx	lr

08007a00 <__retarget_lock_acquire_recursive>:
 8007a00:	4770      	bx	lr

08007a02 <__retarget_lock_release_recursive>:
 8007a02:	4770      	bx	lr

08007a04 <_init>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	46c0      	nop			; (mov r8, r8)
 8007a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0a:	bc08      	pop	{r3}
 8007a0c:	469e      	mov	lr, r3
 8007a0e:	4770      	bx	lr

08007a10 <_fini>:
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a16:	bc08      	pop	{r3}
 8007a18:	469e      	mov	lr, r3
 8007a1a:	4770      	bx	lr
