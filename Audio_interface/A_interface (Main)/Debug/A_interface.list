
A_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005454  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08005514  08005514  00015514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057bc  080057bc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057c4  080057c4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c4  080057c4  000157c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080057cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200000a8  08005874  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08005874  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dbf5  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a6a  00000000  00000000  0003dcc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001283e  00000000  00000000  0004172f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00053f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b18  00000000  00000000  00054f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000162d7  00000000  00000000  00056a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001efaa  00000000  00000000  0006cd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008525e  00000000  00000000  0008bcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00110f4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003744  00000000  00000000  00110fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a8 	.word	0x200000a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080054fc 	.word	0x080054fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000ac 	.word	0x200000ac
 8000104:	080054fc 	.word	0x080054fc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cfrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0008      	movs	r0, r1
 8000430:	4661      	mov	r1, ip
 8000432:	e7ff      	b.n	8000434 <__aeabi_cfcmpeq>

08000434 <__aeabi_cfcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f000 f9b9 	bl	80007ac <__lesf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cfcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_fcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 f945 	bl	80006d4 <__eqsf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_fcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f9ab 	bl	80007ac <__lesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_fcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 f9a1 	bl	80007ac <__lesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_fcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_fcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 f951 	bl	8000720 <__gesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_fcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_fcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 f947 	bl	8000720 <__gesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_fcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_uldivmod>:
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d111      	bne.n	80004c8 <__aeabi_uldivmod+0x28>
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	d10f      	bne.n	80004c8 <__aeabi_uldivmod+0x28>
 80004a8:	2900      	cmp	r1, #0
 80004aa:	d100      	bne.n	80004ae <__aeabi_uldivmod+0xe>
 80004ac:	2800      	cmp	r0, #0
 80004ae:	d002      	beq.n	80004b6 <__aeabi_uldivmod+0x16>
 80004b0:	2100      	movs	r1, #0
 80004b2:	43c9      	mvns	r1, r1
 80004b4:	0008      	movs	r0, r1
 80004b6:	b407      	push	{r0, r1, r2}
 80004b8:	4802      	ldr	r0, [pc, #8]	; (80004c4 <__aeabi_uldivmod+0x24>)
 80004ba:	a102      	add	r1, pc, #8	; (adr r1, 80004c4 <__aeabi_uldivmod+0x24>)
 80004bc:	1840      	adds	r0, r0, r1
 80004be:	9002      	str	r0, [sp, #8]
 80004c0:	bd03      	pop	{r0, r1, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	ffffff65 	.word	0xffffff65
 80004c8:	b403      	push	{r0, r1}
 80004ca:	4668      	mov	r0, sp
 80004cc:	b501      	push	{r0, lr}
 80004ce:	9802      	ldr	r0, [sp, #8]
 80004d0:	f000 f834 	bl	800053c <__udivmoddi4>
 80004d4:	9b01      	ldr	r3, [sp, #4]
 80004d6:	469e      	mov	lr, r3
 80004d8:	b002      	add	sp, #8
 80004da:	bc0c      	pop	{r2, r3}
 80004dc:	4770      	bx	lr
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_lmul>:
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	46ce      	mov	lr, r9
 80004e4:	4647      	mov	r7, r8
 80004e6:	b580      	push	{r7, lr}
 80004e8:	0007      	movs	r7, r0
 80004ea:	4699      	mov	r9, r3
 80004ec:	0c3b      	lsrs	r3, r7, #16
 80004ee:	469c      	mov	ip, r3
 80004f0:	0413      	lsls	r3, r2, #16
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0400      	lsls	r0, r0, #16
 80004fc:	0c14      	lsrs	r4, r2, #16
 80004fe:	0c00      	lsrs	r0, r0, #16
 8000500:	4345      	muls	r5, r0
 8000502:	434b      	muls	r3, r1
 8000504:	4360      	muls	r0, r4
 8000506:	4361      	muls	r1, r4
 8000508:	18c0      	adds	r0, r0, r3
 800050a:	0c2c      	lsrs	r4, r5, #16
 800050c:	1820      	adds	r0, r4, r0
 800050e:	468c      	mov	ip, r1
 8000510:	4283      	cmp	r3, r0
 8000512:	d903      	bls.n	800051c <__aeabi_lmul+0x3c>
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	025b      	lsls	r3, r3, #9
 8000518:	4698      	mov	r8, r3
 800051a:	44c4      	add	ip, r8
 800051c:	4649      	mov	r1, r9
 800051e:	4379      	muls	r1, r7
 8000520:	4372      	muls	r2, r6
 8000522:	0c03      	lsrs	r3, r0, #16
 8000524:	4463      	add	r3, ip
 8000526:	042d      	lsls	r5, r5, #16
 8000528:	0c2d      	lsrs	r5, r5, #16
 800052a:	18c9      	adds	r1, r1, r3
 800052c:	0400      	lsls	r0, r0, #16
 800052e:	1940      	adds	r0, r0, r5
 8000530:	1889      	adds	r1, r1, r2
 8000532:	bcc0      	pop	{r6, r7}
 8000534:	46b9      	mov	r9, r7
 8000536:	46b0      	mov	r8, r6
 8000538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)

0800053c <__udivmoddi4>:
 800053c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053e:	4657      	mov	r7, sl
 8000540:	464e      	mov	r6, r9
 8000542:	4645      	mov	r5, r8
 8000544:	46de      	mov	lr, fp
 8000546:	b5e0      	push	{r5, r6, r7, lr}
 8000548:	0004      	movs	r4, r0
 800054a:	000d      	movs	r5, r1
 800054c:	4692      	mov	sl, r2
 800054e:	4699      	mov	r9, r3
 8000550:	b083      	sub	sp, #12
 8000552:	428b      	cmp	r3, r1
 8000554:	d830      	bhi.n	80005b8 <__udivmoddi4+0x7c>
 8000556:	d02d      	beq.n	80005b4 <__udivmoddi4+0x78>
 8000558:	4649      	mov	r1, r9
 800055a:	4650      	mov	r0, sl
 800055c:	f000 faf0 	bl	8000b40 <__clzdi2>
 8000560:	0029      	movs	r1, r5
 8000562:	0006      	movs	r6, r0
 8000564:	0020      	movs	r0, r4
 8000566:	f000 faeb 	bl	8000b40 <__clzdi2>
 800056a:	1a33      	subs	r3, r6, r0
 800056c:	4698      	mov	r8, r3
 800056e:	3b20      	subs	r3, #32
 8000570:	469b      	mov	fp, r3
 8000572:	d433      	bmi.n	80005dc <__udivmoddi4+0xa0>
 8000574:	465a      	mov	r2, fp
 8000576:	4653      	mov	r3, sl
 8000578:	4093      	lsls	r3, r2
 800057a:	4642      	mov	r2, r8
 800057c:	001f      	movs	r7, r3
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	001e      	movs	r6, r3
 8000584:	42af      	cmp	r7, r5
 8000586:	d83a      	bhi.n	80005fe <__udivmoddi4+0xc2>
 8000588:	42af      	cmp	r7, r5
 800058a:	d100      	bne.n	800058e <__udivmoddi4+0x52>
 800058c:	e078      	b.n	8000680 <__udivmoddi4+0x144>
 800058e:	465b      	mov	r3, fp
 8000590:	1ba4      	subs	r4, r4, r6
 8000592:	41bd      	sbcs	r5, r7
 8000594:	2b00      	cmp	r3, #0
 8000596:	da00      	bge.n	800059a <__udivmoddi4+0x5e>
 8000598:	e075      	b.n	8000686 <__udivmoddi4+0x14a>
 800059a:	2200      	movs	r2, #0
 800059c:	2300      	movs	r3, #0
 800059e:	9200      	str	r2, [sp, #0]
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	465a      	mov	r2, fp
 80005a6:	4093      	lsls	r3, r2
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	4642      	mov	r2, r8
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	e028      	b.n	8000606 <__udivmoddi4+0xca>
 80005b4:	4282      	cmp	r2, r0
 80005b6:	d9cf      	bls.n	8000558 <__udivmoddi4+0x1c>
 80005b8:	2200      	movs	r2, #0
 80005ba:	2300      	movs	r3, #0
 80005bc:	9200      	str	r2, [sp, #0]
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <__udivmoddi4+0x8e>
 80005c6:	601c      	str	r4, [r3, #0]
 80005c8:	605d      	str	r5, [r3, #4]
 80005ca:	9800      	ldr	r0, [sp, #0]
 80005cc:	9901      	ldr	r1, [sp, #4]
 80005ce:	b003      	add	sp, #12
 80005d0:	bcf0      	pop	{r4, r5, r6, r7}
 80005d2:	46bb      	mov	fp, r7
 80005d4:	46b2      	mov	sl, r6
 80005d6:	46a9      	mov	r9, r5
 80005d8:	46a0      	mov	r8, r4
 80005da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	4652      	mov	r2, sl
 80005e4:	40da      	lsrs	r2, r3
 80005e6:	4641      	mov	r1, r8
 80005e8:	0013      	movs	r3, r2
 80005ea:	464a      	mov	r2, r9
 80005ec:	408a      	lsls	r2, r1
 80005ee:	0017      	movs	r7, r2
 80005f0:	4642      	mov	r2, r8
 80005f2:	431f      	orrs	r7, r3
 80005f4:	4653      	mov	r3, sl
 80005f6:	4093      	lsls	r3, r2
 80005f8:	001e      	movs	r6, r3
 80005fa:	42af      	cmp	r7, r5
 80005fc:	d9c4      	bls.n	8000588 <__udivmoddi4+0x4c>
 80005fe:	2200      	movs	r2, #0
 8000600:	2300      	movs	r3, #0
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	4643      	mov	r3, r8
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0d9      	beq.n	80005c0 <__udivmoddi4+0x84>
 800060c:	07fb      	lsls	r3, r7, #31
 800060e:	0872      	lsrs	r2, r6, #1
 8000610:	431a      	orrs	r2, r3
 8000612:	4646      	mov	r6, r8
 8000614:	087b      	lsrs	r3, r7, #1
 8000616:	e00e      	b.n	8000636 <__udivmoddi4+0xfa>
 8000618:	42ab      	cmp	r3, r5
 800061a:	d101      	bne.n	8000620 <__udivmoddi4+0xe4>
 800061c:	42a2      	cmp	r2, r4
 800061e:	d80c      	bhi.n	800063a <__udivmoddi4+0xfe>
 8000620:	1aa4      	subs	r4, r4, r2
 8000622:	419d      	sbcs	r5, r3
 8000624:	2001      	movs	r0, #1
 8000626:	1924      	adds	r4, r4, r4
 8000628:	416d      	adcs	r5, r5
 800062a:	2100      	movs	r1, #0
 800062c:	3e01      	subs	r6, #1
 800062e:	1824      	adds	r4, r4, r0
 8000630:	414d      	adcs	r5, r1
 8000632:	2e00      	cmp	r6, #0
 8000634:	d006      	beq.n	8000644 <__udivmoddi4+0x108>
 8000636:	42ab      	cmp	r3, r5
 8000638:	d9ee      	bls.n	8000618 <__udivmoddi4+0xdc>
 800063a:	3e01      	subs	r6, #1
 800063c:	1924      	adds	r4, r4, r4
 800063e:	416d      	adcs	r5, r5
 8000640:	2e00      	cmp	r6, #0
 8000642:	d1f8      	bne.n	8000636 <__udivmoddi4+0xfa>
 8000644:	9800      	ldr	r0, [sp, #0]
 8000646:	9901      	ldr	r1, [sp, #4]
 8000648:	465b      	mov	r3, fp
 800064a:	1900      	adds	r0, r0, r4
 800064c:	4169      	adcs	r1, r5
 800064e:	2b00      	cmp	r3, #0
 8000650:	db24      	blt.n	800069c <__udivmoddi4+0x160>
 8000652:	002b      	movs	r3, r5
 8000654:	465a      	mov	r2, fp
 8000656:	4644      	mov	r4, r8
 8000658:	40d3      	lsrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	db2a      	blt.n	80006be <__udivmoddi4+0x182>
 8000668:	0026      	movs	r6, r4
 800066a:	409e      	lsls	r6, r3
 800066c:	0033      	movs	r3, r6
 800066e:	0026      	movs	r6, r4
 8000670:	4647      	mov	r7, r8
 8000672:	40be      	lsls	r6, r7
 8000674:	0032      	movs	r2, r6
 8000676:	1a80      	subs	r0, r0, r2
 8000678:	4199      	sbcs	r1, r3
 800067a:	9000      	str	r0, [sp, #0]
 800067c:	9101      	str	r1, [sp, #4]
 800067e:	e79f      	b.n	80005c0 <__udivmoddi4+0x84>
 8000680:	42a3      	cmp	r3, r4
 8000682:	d8bc      	bhi.n	80005fe <__udivmoddi4+0xc2>
 8000684:	e783      	b.n	800058e <__udivmoddi4+0x52>
 8000686:	4642      	mov	r2, r8
 8000688:	2320      	movs	r3, #32
 800068a:	2100      	movs	r1, #0
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	2200      	movs	r2, #0
 8000690:	9100      	str	r1, [sp, #0]
 8000692:	9201      	str	r2, [sp, #4]
 8000694:	2201      	movs	r2, #1
 8000696:	40da      	lsrs	r2, r3
 8000698:	9201      	str	r2, [sp, #4]
 800069a:	e786      	b.n	80005aa <__udivmoddi4+0x6e>
 800069c:	4642      	mov	r2, r8
 800069e:	2320      	movs	r3, #32
 80006a0:	1a9b      	subs	r3, r3, r2
 80006a2:	002a      	movs	r2, r5
 80006a4:	4646      	mov	r6, r8
 80006a6:	409a      	lsls	r2, r3
 80006a8:	0023      	movs	r3, r4
 80006aa:	40f3      	lsrs	r3, r6
 80006ac:	4644      	mov	r4, r8
 80006ae:	4313      	orrs	r3, r2
 80006b0:	002a      	movs	r2, r5
 80006b2:	40e2      	lsrs	r2, r4
 80006b4:	001c      	movs	r4, r3
 80006b6:	465b      	mov	r3, fp
 80006b8:	0015      	movs	r5, r2
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	dad4      	bge.n	8000668 <__udivmoddi4+0x12c>
 80006be:	4642      	mov	r2, r8
 80006c0:	002f      	movs	r7, r5
 80006c2:	2320      	movs	r3, #32
 80006c4:	0026      	movs	r6, r4
 80006c6:	4097      	lsls	r7, r2
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	40de      	lsrs	r6, r3
 80006cc:	003b      	movs	r3, r7
 80006ce:	4333      	orrs	r3, r6
 80006d0:	e7cd      	b.n	800066e <__udivmoddi4+0x132>
 80006d2:	46c0      	nop			; (mov r8, r8)

080006d4 <__eqsf2>:
 80006d4:	b570      	push	{r4, r5, r6, lr}
 80006d6:	0042      	lsls	r2, r0, #1
 80006d8:	0245      	lsls	r5, r0, #9
 80006da:	024e      	lsls	r6, r1, #9
 80006dc:	004c      	lsls	r4, r1, #1
 80006de:	0fc3      	lsrs	r3, r0, #31
 80006e0:	0a6d      	lsrs	r5, r5, #9
 80006e2:	2001      	movs	r0, #1
 80006e4:	0e12      	lsrs	r2, r2, #24
 80006e6:	0a76      	lsrs	r6, r6, #9
 80006e8:	0e24      	lsrs	r4, r4, #24
 80006ea:	0fc9      	lsrs	r1, r1, #31
 80006ec:	2aff      	cmp	r2, #255	; 0xff
 80006ee:	d006      	beq.n	80006fe <__eqsf2+0x2a>
 80006f0:	2cff      	cmp	r4, #255	; 0xff
 80006f2:	d003      	beq.n	80006fc <__eqsf2+0x28>
 80006f4:	42a2      	cmp	r2, r4
 80006f6:	d101      	bne.n	80006fc <__eqsf2+0x28>
 80006f8:	42b5      	cmp	r5, r6
 80006fa:	d006      	beq.n	800070a <__eqsf2+0x36>
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d1fc      	bne.n	80006fc <__eqsf2+0x28>
 8000702:	2cff      	cmp	r4, #255	; 0xff
 8000704:	d1fa      	bne.n	80006fc <__eqsf2+0x28>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d1f8      	bne.n	80006fc <__eqsf2+0x28>
 800070a:	428b      	cmp	r3, r1
 800070c:	d006      	beq.n	800071c <__eqsf2+0x48>
 800070e:	2001      	movs	r0, #1
 8000710:	2a00      	cmp	r2, #0
 8000712:	d1f3      	bne.n	80006fc <__eqsf2+0x28>
 8000714:	0028      	movs	r0, r5
 8000716:	1e43      	subs	r3, r0, #1
 8000718:	4198      	sbcs	r0, r3
 800071a:	e7ef      	b.n	80006fc <__eqsf2+0x28>
 800071c:	2000      	movs	r0, #0
 800071e:	e7ed      	b.n	80006fc <__eqsf2+0x28>

08000720 <__gesf2>:
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	0042      	lsls	r2, r0, #1
 8000724:	0245      	lsls	r5, r0, #9
 8000726:	024e      	lsls	r6, r1, #9
 8000728:	004c      	lsls	r4, r1, #1
 800072a:	0fc3      	lsrs	r3, r0, #31
 800072c:	0a6d      	lsrs	r5, r5, #9
 800072e:	0e12      	lsrs	r2, r2, #24
 8000730:	0a76      	lsrs	r6, r6, #9
 8000732:	0e24      	lsrs	r4, r4, #24
 8000734:	0fc8      	lsrs	r0, r1, #31
 8000736:	2aff      	cmp	r2, #255	; 0xff
 8000738:	d01b      	beq.n	8000772 <__gesf2+0x52>
 800073a:	2cff      	cmp	r4, #255	; 0xff
 800073c:	d00e      	beq.n	800075c <__gesf2+0x3c>
 800073e:	2a00      	cmp	r2, #0
 8000740:	d11b      	bne.n	800077a <__gesf2+0x5a>
 8000742:	2c00      	cmp	r4, #0
 8000744:	d101      	bne.n	800074a <__gesf2+0x2a>
 8000746:	2e00      	cmp	r6, #0
 8000748:	d01c      	beq.n	8000784 <__gesf2+0x64>
 800074a:	2d00      	cmp	r5, #0
 800074c:	d00c      	beq.n	8000768 <__gesf2+0x48>
 800074e:	4283      	cmp	r3, r0
 8000750:	d01c      	beq.n	800078c <__gesf2+0x6c>
 8000752:	2102      	movs	r1, #2
 8000754:	1e58      	subs	r0, r3, #1
 8000756:	4008      	ands	r0, r1
 8000758:	3801      	subs	r0, #1
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	2e00      	cmp	r6, #0
 800075e:	d122      	bne.n	80007a6 <__gesf2+0x86>
 8000760:	2a00      	cmp	r2, #0
 8000762:	d1f4      	bne.n	800074e <__gesf2+0x2e>
 8000764:	2d00      	cmp	r5, #0
 8000766:	d1f2      	bne.n	800074e <__gesf2+0x2e>
 8000768:	2800      	cmp	r0, #0
 800076a:	d1f6      	bne.n	800075a <__gesf2+0x3a>
 800076c:	2001      	movs	r0, #1
 800076e:	4240      	negs	r0, r0
 8000770:	e7f3      	b.n	800075a <__gesf2+0x3a>
 8000772:	2d00      	cmp	r5, #0
 8000774:	d117      	bne.n	80007a6 <__gesf2+0x86>
 8000776:	2cff      	cmp	r4, #255	; 0xff
 8000778:	d0f0      	beq.n	800075c <__gesf2+0x3c>
 800077a:	2c00      	cmp	r4, #0
 800077c:	d1e7      	bne.n	800074e <__gesf2+0x2e>
 800077e:	2e00      	cmp	r6, #0
 8000780:	d1e5      	bne.n	800074e <__gesf2+0x2e>
 8000782:	e7e6      	b.n	8000752 <__gesf2+0x32>
 8000784:	2000      	movs	r0, #0
 8000786:	2d00      	cmp	r5, #0
 8000788:	d0e7      	beq.n	800075a <__gesf2+0x3a>
 800078a:	e7e2      	b.n	8000752 <__gesf2+0x32>
 800078c:	42a2      	cmp	r2, r4
 800078e:	dc05      	bgt.n	800079c <__gesf2+0x7c>
 8000790:	dbea      	blt.n	8000768 <__gesf2+0x48>
 8000792:	42b5      	cmp	r5, r6
 8000794:	d802      	bhi.n	800079c <__gesf2+0x7c>
 8000796:	d3e7      	bcc.n	8000768 <__gesf2+0x48>
 8000798:	2000      	movs	r0, #0
 800079a:	e7de      	b.n	800075a <__gesf2+0x3a>
 800079c:	4243      	negs	r3, r0
 800079e:	4158      	adcs	r0, r3
 80007a0:	0040      	lsls	r0, r0, #1
 80007a2:	3801      	subs	r0, #1
 80007a4:	e7d9      	b.n	800075a <__gesf2+0x3a>
 80007a6:	2002      	movs	r0, #2
 80007a8:	4240      	negs	r0, r0
 80007aa:	e7d6      	b.n	800075a <__gesf2+0x3a>

080007ac <__lesf2>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	0042      	lsls	r2, r0, #1
 80007b0:	0245      	lsls	r5, r0, #9
 80007b2:	024e      	lsls	r6, r1, #9
 80007b4:	004c      	lsls	r4, r1, #1
 80007b6:	0fc3      	lsrs	r3, r0, #31
 80007b8:	0a6d      	lsrs	r5, r5, #9
 80007ba:	0e12      	lsrs	r2, r2, #24
 80007bc:	0a76      	lsrs	r6, r6, #9
 80007be:	0e24      	lsrs	r4, r4, #24
 80007c0:	0fc8      	lsrs	r0, r1, #31
 80007c2:	2aff      	cmp	r2, #255	; 0xff
 80007c4:	d00b      	beq.n	80007de <__lesf2+0x32>
 80007c6:	2cff      	cmp	r4, #255	; 0xff
 80007c8:	d00d      	beq.n	80007e6 <__lesf2+0x3a>
 80007ca:	2a00      	cmp	r2, #0
 80007cc:	d11f      	bne.n	800080e <__lesf2+0x62>
 80007ce:	2c00      	cmp	r4, #0
 80007d0:	d116      	bne.n	8000800 <__lesf2+0x54>
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	d114      	bne.n	8000800 <__lesf2+0x54>
 80007d6:	2000      	movs	r0, #0
 80007d8:	2d00      	cmp	r5, #0
 80007da:	d010      	beq.n	80007fe <__lesf2+0x52>
 80007dc:	e009      	b.n	80007f2 <__lesf2+0x46>
 80007de:	2d00      	cmp	r5, #0
 80007e0:	d10c      	bne.n	80007fc <__lesf2+0x50>
 80007e2:	2cff      	cmp	r4, #255	; 0xff
 80007e4:	d113      	bne.n	800080e <__lesf2+0x62>
 80007e6:	2e00      	cmp	r6, #0
 80007e8:	d108      	bne.n	80007fc <__lesf2+0x50>
 80007ea:	2a00      	cmp	r2, #0
 80007ec:	d008      	beq.n	8000800 <__lesf2+0x54>
 80007ee:	4283      	cmp	r3, r0
 80007f0:	d012      	beq.n	8000818 <__lesf2+0x6c>
 80007f2:	2102      	movs	r1, #2
 80007f4:	1e58      	subs	r0, r3, #1
 80007f6:	4008      	ands	r0, r1
 80007f8:	3801      	subs	r0, #1
 80007fa:	e000      	b.n	80007fe <__lesf2+0x52>
 80007fc:	2002      	movs	r0, #2
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
 8000800:	2d00      	cmp	r5, #0
 8000802:	d1f4      	bne.n	80007ee <__lesf2+0x42>
 8000804:	2800      	cmp	r0, #0
 8000806:	d1fa      	bne.n	80007fe <__lesf2+0x52>
 8000808:	2001      	movs	r0, #1
 800080a:	4240      	negs	r0, r0
 800080c:	e7f7      	b.n	80007fe <__lesf2+0x52>
 800080e:	2c00      	cmp	r4, #0
 8000810:	d1ed      	bne.n	80007ee <__lesf2+0x42>
 8000812:	2e00      	cmp	r6, #0
 8000814:	d1eb      	bne.n	80007ee <__lesf2+0x42>
 8000816:	e7ec      	b.n	80007f2 <__lesf2+0x46>
 8000818:	42a2      	cmp	r2, r4
 800081a:	dc05      	bgt.n	8000828 <__lesf2+0x7c>
 800081c:	dbf2      	blt.n	8000804 <__lesf2+0x58>
 800081e:	42b5      	cmp	r5, r6
 8000820:	d802      	bhi.n	8000828 <__lesf2+0x7c>
 8000822:	d3ef      	bcc.n	8000804 <__lesf2+0x58>
 8000824:	2000      	movs	r0, #0
 8000826:	e7ea      	b.n	80007fe <__lesf2+0x52>
 8000828:	4243      	negs	r3, r0
 800082a:	4158      	adcs	r0, r3
 800082c:	0040      	lsls	r0, r0, #1
 800082e:	3801      	subs	r0, #1
 8000830:	e7e5      	b.n	80007fe <__lesf2+0x52>
 8000832:	46c0      	nop			; (mov r8, r8)

08000834 <__aeabi_fmul>:
 8000834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000836:	464f      	mov	r7, r9
 8000838:	4646      	mov	r6, r8
 800083a:	46d6      	mov	lr, sl
 800083c:	0244      	lsls	r4, r0, #9
 800083e:	0045      	lsls	r5, r0, #1
 8000840:	b5c0      	push	{r6, r7, lr}
 8000842:	0a64      	lsrs	r4, r4, #9
 8000844:	1c0f      	adds	r7, r1, #0
 8000846:	0e2d      	lsrs	r5, r5, #24
 8000848:	0fc6      	lsrs	r6, r0, #31
 800084a:	2d00      	cmp	r5, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_fmul+0x1c>
 800084e:	e08d      	b.n	800096c <__aeabi_fmul+0x138>
 8000850:	2dff      	cmp	r5, #255	; 0xff
 8000852:	d100      	bne.n	8000856 <__aeabi_fmul+0x22>
 8000854:	e092      	b.n	800097c <__aeabi_fmul+0x148>
 8000856:	2300      	movs	r3, #0
 8000858:	2080      	movs	r0, #128	; 0x80
 800085a:	4699      	mov	r9, r3
 800085c:	469a      	mov	sl, r3
 800085e:	00e4      	lsls	r4, r4, #3
 8000860:	04c0      	lsls	r0, r0, #19
 8000862:	4304      	orrs	r4, r0
 8000864:	3d7f      	subs	r5, #127	; 0x7f
 8000866:	0278      	lsls	r0, r7, #9
 8000868:	0a43      	lsrs	r3, r0, #9
 800086a:	4698      	mov	r8, r3
 800086c:	007b      	lsls	r3, r7, #1
 800086e:	0e1b      	lsrs	r3, r3, #24
 8000870:	0fff      	lsrs	r7, r7, #31
 8000872:	2b00      	cmp	r3, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_fmul+0x44>
 8000876:	e070      	b.n	800095a <__aeabi_fmul+0x126>
 8000878:	2bff      	cmp	r3, #255	; 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fmul+0x4a>
 800087c:	e086      	b.n	800098c <__aeabi_fmul+0x158>
 800087e:	4642      	mov	r2, r8
 8000880:	00d0      	lsls	r0, r2, #3
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	3b7f      	subs	r3, #127	; 0x7f
 8000886:	18ed      	adds	r5, r5, r3
 8000888:	2300      	movs	r3, #0
 800088a:	04d2      	lsls	r2, r2, #19
 800088c:	4302      	orrs	r2, r0
 800088e:	4690      	mov	r8, r2
 8000890:	469c      	mov	ip, r3
 8000892:	0031      	movs	r1, r6
 8000894:	464b      	mov	r3, r9
 8000896:	4079      	eors	r1, r7
 8000898:	1c68      	adds	r0, r5, #1
 800089a:	2b0f      	cmp	r3, #15
 800089c:	d81c      	bhi.n	80008d8 <__aeabi_fmul+0xa4>
 800089e:	4a76      	ldr	r2, [pc, #472]	; (8000a78 <__aeabi_fmul+0x244>)
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	58d3      	ldr	r3, [r2, r3]
 80008a4:	469f      	mov	pc, r3
 80008a6:	0039      	movs	r1, r7
 80008a8:	4644      	mov	r4, r8
 80008aa:	46e2      	mov	sl, ip
 80008ac:	4653      	mov	r3, sl
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d00f      	beq.n	80008d2 <__aeabi_fmul+0x9e>
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fmul+0x84>
 80008b6:	e0d7      	b.n	8000a68 <__aeabi_fmul+0x234>
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d137      	bne.n	800092c <__aeabi_fmul+0xf8>
 80008bc:	2000      	movs	r0, #0
 80008be:	2400      	movs	r4, #0
 80008c0:	05c0      	lsls	r0, r0, #23
 80008c2:	4320      	orrs	r0, r4
 80008c4:	07c9      	lsls	r1, r1, #31
 80008c6:	4308      	orrs	r0, r1
 80008c8:	bce0      	pop	{r5, r6, r7}
 80008ca:	46ba      	mov	sl, r7
 80008cc:	46b1      	mov	r9, r6
 80008ce:	46a8      	mov	r8, r5
 80008d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d2:	20ff      	movs	r0, #255	; 0xff
 80008d4:	2400      	movs	r4, #0
 80008d6:	e7f3      	b.n	80008c0 <__aeabi_fmul+0x8c>
 80008d8:	0c26      	lsrs	r6, r4, #16
 80008da:	0424      	lsls	r4, r4, #16
 80008dc:	0c22      	lsrs	r2, r4, #16
 80008de:	4644      	mov	r4, r8
 80008e0:	0424      	lsls	r4, r4, #16
 80008e2:	0c24      	lsrs	r4, r4, #16
 80008e4:	4643      	mov	r3, r8
 80008e6:	0027      	movs	r7, r4
 80008e8:	0c1b      	lsrs	r3, r3, #16
 80008ea:	4357      	muls	r7, r2
 80008ec:	4374      	muls	r4, r6
 80008ee:	435a      	muls	r2, r3
 80008f0:	435e      	muls	r6, r3
 80008f2:	1912      	adds	r2, r2, r4
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	189b      	adds	r3, r3, r2
 80008f8:	429c      	cmp	r4, r3
 80008fa:	d903      	bls.n	8000904 <__aeabi_fmul+0xd0>
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	0252      	lsls	r2, r2, #9
 8000900:	4694      	mov	ip, r2
 8000902:	4466      	add	r6, ip
 8000904:	043f      	lsls	r7, r7, #16
 8000906:	041a      	lsls	r2, r3, #16
 8000908:	0c3f      	lsrs	r7, r7, #16
 800090a:	19d2      	adds	r2, r2, r7
 800090c:	0194      	lsls	r4, r2, #6
 800090e:	1e67      	subs	r7, r4, #1
 8000910:	41bc      	sbcs	r4, r7
 8000912:	0c1b      	lsrs	r3, r3, #16
 8000914:	0e92      	lsrs	r2, r2, #26
 8000916:	199b      	adds	r3, r3, r6
 8000918:	4314      	orrs	r4, r2
 800091a:	019b      	lsls	r3, r3, #6
 800091c:	431c      	orrs	r4, r3
 800091e:	011b      	lsls	r3, r3, #4
 8000920:	d400      	bmi.n	8000924 <__aeabi_fmul+0xf0>
 8000922:	e09b      	b.n	8000a5c <__aeabi_fmul+0x228>
 8000924:	2301      	movs	r3, #1
 8000926:	0862      	lsrs	r2, r4, #1
 8000928:	401c      	ands	r4, r3
 800092a:	4314      	orrs	r4, r2
 800092c:	0002      	movs	r2, r0
 800092e:	327f      	adds	r2, #127	; 0x7f
 8000930:	2a00      	cmp	r2, #0
 8000932:	dd64      	ble.n	80009fe <__aeabi_fmul+0x1ca>
 8000934:	0763      	lsls	r3, r4, #29
 8000936:	d004      	beq.n	8000942 <__aeabi_fmul+0x10e>
 8000938:	230f      	movs	r3, #15
 800093a:	4023      	ands	r3, r4
 800093c:	2b04      	cmp	r3, #4
 800093e:	d000      	beq.n	8000942 <__aeabi_fmul+0x10e>
 8000940:	3404      	adds	r4, #4
 8000942:	0123      	lsls	r3, r4, #4
 8000944:	d503      	bpl.n	800094e <__aeabi_fmul+0x11a>
 8000946:	0002      	movs	r2, r0
 8000948:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <__aeabi_fmul+0x248>)
 800094a:	3280      	adds	r2, #128	; 0x80
 800094c:	401c      	ands	r4, r3
 800094e:	2afe      	cmp	r2, #254	; 0xfe
 8000950:	dcbf      	bgt.n	80008d2 <__aeabi_fmul+0x9e>
 8000952:	01a4      	lsls	r4, r4, #6
 8000954:	0a64      	lsrs	r4, r4, #9
 8000956:	b2d0      	uxtb	r0, r2
 8000958:	e7b2      	b.n	80008c0 <__aeabi_fmul+0x8c>
 800095a:	4643      	mov	r3, r8
 800095c:	2b00      	cmp	r3, #0
 800095e:	d13d      	bne.n	80009dc <__aeabi_fmul+0x1a8>
 8000960:	464a      	mov	r2, r9
 8000962:	3301      	adds	r3, #1
 8000964:	431a      	orrs	r2, r3
 8000966:	4691      	mov	r9, r2
 8000968:	469c      	mov	ip, r3
 800096a:	e792      	b.n	8000892 <__aeabi_fmul+0x5e>
 800096c:	2c00      	cmp	r4, #0
 800096e:	d129      	bne.n	80009c4 <__aeabi_fmul+0x190>
 8000970:	2304      	movs	r3, #4
 8000972:	4699      	mov	r9, r3
 8000974:	3b03      	subs	r3, #3
 8000976:	2500      	movs	r5, #0
 8000978:	469a      	mov	sl, r3
 800097a:	e774      	b.n	8000866 <__aeabi_fmul+0x32>
 800097c:	2c00      	cmp	r4, #0
 800097e:	d11b      	bne.n	80009b8 <__aeabi_fmul+0x184>
 8000980:	2308      	movs	r3, #8
 8000982:	4699      	mov	r9, r3
 8000984:	3b06      	subs	r3, #6
 8000986:	25ff      	movs	r5, #255	; 0xff
 8000988:	469a      	mov	sl, r3
 800098a:	e76c      	b.n	8000866 <__aeabi_fmul+0x32>
 800098c:	4643      	mov	r3, r8
 800098e:	35ff      	adds	r5, #255	; 0xff
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10b      	bne.n	80009ac <__aeabi_fmul+0x178>
 8000994:	2302      	movs	r3, #2
 8000996:	464a      	mov	r2, r9
 8000998:	431a      	orrs	r2, r3
 800099a:	4691      	mov	r9, r2
 800099c:	469c      	mov	ip, r3
 800099e:	e778      	b.n	8000892 <__aeabi_fmul+0x5e>
 80009a0:	4653      	mov	r3, sl
 80009a2:	0031      	movs	r1, r6
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d000      	beq.n	80009aa <__aeabi_fmul+0x176>
 80009a8:	e783      	b.n	80008b2 <__aeabi_fmul+0x7e>
 80009aa:	e792      	b.n	80008d2 <__aeabi_fmul+0x9e>
 80009ac:	2303      	movs	r3, #3
 80009ae:	464a      	mov	r2, r9
 80009b0:	431a      	orrs	r2, r3
 80009b2:	4691      	mov	r9, r2
 80009b4:	469c      	mov	ip, r3
 80009b6:	e76c      	b.n	8000892 <__aeabi_fmul+0x5e>
 80009b8:	230c      	movs	r3, #12
 80009ba:	4699      	mov	r9, r3
 80009bc:	3b09      	subs	r3, #9
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	469a      	mov	sl, r3
 80009c2:	e750      	b.n	8000866 <__aeabi_fmul+0x32>
 80009c4:	0020      	movs	r0, r4
 80009c6:	f000 f89d 	bl	8000b04 <__clzsi2>
 80009ca:	2576      	movs	r5, #118	; 0x76
 80009cc:	1f43      	subs	r3, r0, #5
 80009ce:	409c      	lsls	r4, r3
 80009d0:	2300      	movs	r3, #0
 80009d2:	426d      	negs	r5, r5
 80009d4:	4699      	mov	r9, r3
 80009d6:	469a      	mov	sl, r3
 80009d8:	1a2d      	subs	r5, r5, r0
 80009da:	e744      	b.n	8000866 <__aeabi_fmul+0x32>
 80009dc:	4640      	mov	r0, r8
 80009de:	f000 f891 	bl	8000b04 <__clzsi2>
 80009e2:	4642      	mov	r2, r8
 80009e4:	1f43      	subs	r3, r0, #5
 80009e6:	409a      	lsls	r2, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	1a2d      	subs	r5, r5, r0
 80009ec:	4690      	mov	r8, r2
 80009ee:	469c      	mov	ip, r3
 80009f0:	3d76      	subs	r5, #118	; 0x76
 80009f2:	e74e      	b.n	8000892 <__aeabi_fmul+0x5e>
 80009f4:	2480      	movs	r4, #128	; 0x80
 80009f6:	2100      	movs	r1, #0
 80009f8:	20ff      	movs	r0, #255	; 0xff
 80009fa:	03e4      	lsls	r4, r4, #15
 80009fc:	e760      	b.n	80008c0 <__aeabi_fmul+0x8c>
 80009fe:	2301      	movs	r3, #1
 8000a00:	1a9b      	subs	r3, r3, r2
 8000a02:	2b1b      	cmp	r3, #27
 8000a04:	dd00      	ble.n	8000a08 <__aeabi_fmul+0x1d4>
 8000a06:	e759      	b.n	80008bc <__aeabi_fmul+0x88>
 8000a08:	0022      	movs	r2, r4
 8000a0a:	309e      	adds	r0, #158	; 0x9e
 8000a0c:	40da      	lsrs	r2, r3
 8000a0e:	4084      	lsls	r4, r0
 8000a10:	0013      	movs	r3, r2
 8000a12:	1e62      	subs	r2, r4, #1
 8000a14:	4194      	sbcs	r4, r2
 8000a16:	431c      	orrs	r4, r3
 8000a18:	0763      	lsls	r3, r4, #29
 8000a1a:	d004      	beq.n	8000a26 <__aeabi_fmul+0x1f2>
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	4023      	ands	r3, r4
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d000      	beq.n	8000a26 <__aeabi_fmul+0x1f2>
 8000a24:	3404      	adds	r4, #4
 8000a26:	0163      	lsls	r3, r4, #5
 8000a28:	d51a      	bpl.n	8000a60 <__aeabi_fmul+0x22c>
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	e747      	b.n	80008c0 <__aeabi_fmul+0x8c>
 8000a30:	2080      	movs	r0, #128	; 0x80
 8000a32:	03c0      	lsls	r0, r0, #15
 8000a34:	4204      	tst	r4, r0
 8000a36:	d009      	beq.n	8000a4c <__aeabi_fmul+0x218>
 8000a38:	4643      	mov	r3, r8
 8000a3a:	4203      	tst	r3, r0
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_fmul+0x218>
 8000a3e:	4644      	mov	r4, r8
 8000a40:	4304      	orrs	r4, r0
 8000a42:	0264      	lsls	r4, r4, #9
 8000a44:	0039      	movs	r1, r7
 8000a46:	20ff      	movs	r0, #255	; 0xff
 8000a48:	0a64      	lsrs	r4, r4, #9
 8000a4a:	e739      	b.n	80008c0 <__aeabi_fmul+0x8c>
 8000a4c:	2080      	movs	r0, #128	; 0x80
 8000a4e:	03c0      	lsls	r0, r0, #15
 8000a50:	4304      	orrs	r4, r0
 8000a52:	0264      	lsls	r4, r4, #9
 8000a54:	0031      	movs	r1, r6
 8000a56:	20ff      	movs	r0, #255	; 0xff
 8000a58:	0a64      	lsrs	r4, r4, #9
 8000a5a:	e731      	b.n	80008c0 <__aeabi_fmul+0x8c>
 8000a5c:	0028      	movs	r0, r5
 8000a5e:	e765      	b.n	800092c <__aeabi_fmul+0xf8>
 8000a60:	01a4      	lsls	r4, r4, #6
 8000a62:	2000      	movs	r0, #0
 8000a64:	0a64      	lsrs	r4, r4, #9
 8000a66:	e72b      	b.n	80008c0 <__aeabi_fmul+0x8c>
 8000a68:	2080      	movs	r0, #128	; 0x80
 8000a6a:	03c0      	lsls	r0, r0, #15
 8000a6c:	4304      	orrs	r4, r0
 8000a6e:	0264      	lsls	r4, r4, #9
 8000a70:	20ff      	movs	r0, #255	; 0xff
 8000a72:	0a64      	lsrs	r4, r4, #9
 8000a74:	e724      	b.n	80008c0 <__aeabi_fmul+0x8c>
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	08005588 	.word	0x08005588
 8000a7c:	f7ffffff 	.word	0xf7ffffff

08000a80 <__aeabi_ui2f>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	1e05      	subs	r5, r0, #0
 8000a84:	d00e      	beq.n	8000aa4 <__aeabi_ui2f+0x24>
 8000a86:	f000 f83d 	bl	8000b04 <__clzsi2>
 8000a8a:	239e      	movs	r3, #158	; 0x9e
 8000a8c:	0004      	movs	r4, r0
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	2b96      	cmp	r3, #150	; 0x96
 8000a92:	dc0c      	bgt.n	8000aae <__aeabi_ui2f+0x2e>
 8000a94:	2808      	cmp	r0, #8
 8000a96:	dd01      	ble.n	8000a9c <__aeabi_ui2f+0x1c>
 8000a98:	3c08      	subs	r4, #8
 8000a9a:	40a5      	lsls	r5, r4
 8000a9c:	026d      	lsls	r5, r5, #9
 8000a9e:	0a6d      	lsrs	r5, r5, #9
 8000aa0:	b2d8      	uxtb	r0, r3
 8000aa2:	e001      	b.n	8000aa8 <__aeabi_ui2f+0x28>
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	2500      	movs	r5, #0
 8000aa8:	05c0      	lsls	r0, r0, #23
 8000aaa:	4328      	orrs	r0, r5
 8000aac:	bd70      	pop	{r4, r5, r6, pc}
 8000aae:	2b99      	cmp	r3, #153	; 0x99
 8000ab0:	dd09      	ble.n	8000ac6 <__aeabi_ui2f+0x46>
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	0029      	movs	r1, r5
 8000ab6:	321b      	adds	r2, #27
 8000ab8:	4091      	lsls	r1, r2
 8000aba:	1e4a      	subs	r2, r1, #1
 8000abc:	4191      	sbcs	r1, r2
 8000abe:	2205      	movs	r2, #5
 8000ac0:	1a12      	subs	r2, r2, r0
 8000ac2:	40d5      	lsrs	r5, r2
 8000ac4:	430d      	orrs	r5, r1
 8000ac6:	2c05      	cmp	r4, #5
 8000ac8:	dc12      	bgt.n	8000af0 <__aeabi_ui2f+0x70>
 8000aca:	0029      	movs	r1, r5
 8000acc:	4e0c      	ldr	r6, [pc, #48]	; (8000b00 <__aeabi_ui2f+0x80>)
 8000ace:	4031      	ands	r1, r6
 8000ad0:	076a      	lsls	r2, r5, #29
 8000ad2:	d009      	beq.n	8000ae8 <__aeabi_ui2f+0x68>
 8000ad4:	200f      	movs	r0, #15
 8000ad6:	4028      	ands	r0, r5
 8000ad8:	2804      	cmp	r0, #4
 8000ada:	d005      	beq.n	8000ae8 <__aeabi_ui2f+0x68>
 8000adc:	3104      	adds	r1, #4
 8000ade:	014a      	lsls	r2, r1, #5
 8000ae0:	d502      	bpl.n	8000ae8 <__aeabi_ui2f+0x68>
 8000ae2:	239f      	movs	r3, #159	; 0x9f
 8000ae4:	4031      	ands	r1, r6
 8000ae6:	1b1b      	subs	r3, r3, r4
 8000ae8:	0189      	lsls	r1, r1, #6
 8000aea:	0a4d      	lsrs	r5, r1, #9
 8000aec:	b2d8      	uxtb	r0, r3
 8000aee:	e7db      	b.n	8000aa8 <__aeabi_ui2f+0x28>
 8000af0:	1f62      	subs	r2, r4, #5
 8000af2:	4095      	lsls	r5, r2
 8000af4:	0029      	movs	r1, r5
 8000af6:	4e02      	ldr	r6, [pc, #8]	; (8000b00 <__aeabi_ui2f+0x80>)
 8000af8:	4031      	ands	r1, r6
 8000afa:	076a      	lsls	r2, r5, #29
 8000afc:	d0f4      	beq.n	8000ae8 <__aeabi_ui2f+0x68>
 8000afe:	e7e9      	b.n	8000ad4 <__aeabi_ui2f+0x54>
 8000b00:	fbffffff 	.word	0xfbffffff

08000b04 <__clzsi2>:
 8000b04:	211c      	movs	r1, #28
 8000b06:	2301      	movs	r3, #1
 8000b08:	041b      	lsls	r3, r3, #16
 8000b0a:	4298      	cmp	r0, r3
 8000b0c:	d301      	bcc.n	8000b12 <__clzsi2+0xe>
 8000b0e:	0c00      	lsrs	r0, r0, #16
 8000b10:	3910      	subs	r1, #16
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	4298      	cmp	r0, r3
 8000b16:	d301      	bcc.n	8000b1c <__clzsi2+0x18>
 8000b18:	0a00      	lsrs	r0, r0, #8
 8000b1a:	3908      	subs	r1, #8
 8000b1c:	091b      	lsrs	r3, r3, #4
 8000b1e:	4298      	cmp	r0, r3
 8000b20:	d301      	bcc.n	8000b26 <__clzsi2+0x22>
 8000b22:	0900      	lsrs	r0, r0, #4
 8000b24:	3904      	subs	r1, #4
 8000b26:	a202      	add	r2, pc, #8	; (adr r2, 8000b30 <__clzsi2+0x2c>)
 8000b28:	5c10      	ldrb	r0, [r2, r0]
 8000b2a:	1840      	adds	r0, r0, r1
 8000b2c:	4770      	bx	lr
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	02020304 	.word	0x02020304
 8000b34:	01010101 	.word	0x01010101
	...

08000b40 <__clzdi2>:
 8000b40:	b510      	push	{r4, lr}
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d103      	bne.n	8000b4e <__clzdi2+0xe>
 8000b46:	f7ff ffdd 	bl	8000b04 <__clzsi2>
 8000b4a:	3020      	adds	r0, #32
 8000b4c:	e002      	b.n	8000b54 <__clzdi2+0x14>
 8000b4e:	0008      	movs	r0, r1
 8000b50:	f7ff ffd8 	bl	8000b04 <__clzsi2>
 8000b54:	bd10      	pop	{r4, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)

08000b58 <DS3231_set_time>:

void DS3231_set_time(uint8_t sec, uint8_t minute, uint8_t hour)
{
  uint8_t buffer[4];

  buffer[0] = SECONDS_AD;
 8000b58:	2300      	movs	r3, #0
{
 8000b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5c:	b087      	sub	sp, #28
  buffer[0] = SECONDS_AD;
 8000b5e:	ac05      	add	r4, sp, #20
{
 8000b60:	000e      	movs	r6, r1
  buffer[1] = ((sec/10)<<4) + (sec%10);
 8000b62:	210a      	movs	r1, #10
{
 8000b64:	0015      	movs	r5, r2
 8000b66:	0007      	movs	r7, r0
  buffer[0] = SECONDS_AD;
 8000b68:	7023      	strb	r3, [r4, #0]
  buffer[1] = ((sec/10)<<4) + (sec%10);
 8000b6a:	f7ff fae9 	bl	8000140 <__udivsi3>
 8000b6e:	210a      	movs	r1, #10
 8000b70:	0103      	lsls	r3, r0, #4
 8000b72:	0038      	movs	r0, r7
 8000b74:	9303      	str	r3, [sp, #12]
 8000b76:	f7ff fb69 	bl	800024c <__aeabi_uidivmod>
 8000b7a:	9b03      	ldr	r3, [sp, #12]
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000b7c:	0030      	movs	r0, r6
  buffer[1] = ((sec/10)<<4) + (sec%10);
 8000b7e:	1859      	adds	r1, r3, r1
 8000b80:	7061      	strb	r1, [r4, #1]
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000b82:	210a      	movs	r1, #10
 8000b84:	f7ff fadc 	bl	8000140 <__udivsi3>
 8000b88:	210a      	movs	r1, #10
 8000b8a:	0107      	lsls	r7, r0, #4
 8000b8c:	0030      	movs	r0, r6
 8000b8e:	f7ff fb5d 	bl	800024c <__aeabi_uidivmod>
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 8000b92:	0028      	movs	r0, r5
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000b94:	187f      	adds	r7, r7, r1
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 8000b96:	210a      	movs	r1, #10
  buffer[2] = ((minute/10)<<4) + (minute%10);
 8000b98:	70a7      	strb	r7, [r4, #2]
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 8000b9a:	f7ff fad1 	bl	8000140 <__udivsi3>
 8000b9e:	0106      	lsls	r6, r0, #4
 8000ba0:	2030      	movs	r0, #48	; 0x30
 8000ba2:	210a      	movs	r1, #10
 8000ba4:	4006      	ands	r6, r0
 8000ba6:	0028      	movs	r0, r5
 8000ba8:	f7ff fb50 	bl	800024c <__aeabi_uidivmod>

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000bac:	2364      	movs	r3, #100	; 0x64
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 8000bae:	1876      	adds	r6, r6, r1
 8000bb0:	70e6      	strb	r6, [r4, #3]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000bb2:	0022      	movs	r2, r4
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	21d0      	movs	r1, #208	; 0xd0
 8000bb8:	3b60      	subs	r3, #96	; 0x60
 8000bba:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <DS3231_set_time+0x6c>)
 8000bbc:	f002 fd5e 	bl	800367c <HAL_I2C_Master_Transmit>
}
 8000bc0:	b007      	add	sp, #28
 8000bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc4:	200001a0 	.word	0x200001a0

08000bc8 <DS3231_get_time>:

void DS3231_get_time(uint8_t *get_second, uint8_t *get_minute, uint8_t *get_hour)
{
  uint8_t buffer;

  buffer = SECONDS_AD;
 8000bc8:	2300      	movs	r3, #0
{
 8000bca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bcc:	b087      	sub	sp, #28
 8000bce:	0016      	movs	r6, r2
  buffer = SECONDS_AD;
 8000bd0:	aa02      	add	r2, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000bd2:	2564      	movs	r5, #100	; 0x64
  buffer = SECONDS_AD;
 8000bd4:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	4c29      	ldr	r4, [pc, #164]	; (8000c80 <DS3231_get_time+0xb8>)
{
 8000bda:	9103      	str	r1, [sp, #12]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000bdc:	a902      	add	r1, sp, #8
{
 8000bde:	9002      	str	r0, [sp, #8]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000be0:	1852      	adds	r2, r2, r1
 8000be2:	0020      	movs	r0, r4
 8000be4:	21d1      	movs	r1, #209	; 0xd1
 8000be6:	9500      	str	r5, [sp, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	f002 fd47 	bl	800367c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_second, 1, 100);
 8000bee:	9a02      	ldr	r2, [sp, #8]
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	21d1      	movs	r1, #209	; 0xd1
 8000bf4:	0020      	movs	r0, r4
 8000bf6:	9500      	str	r5, [sp, #0]
 8000bf8:	f002 fdd2 	bl	80037a0 <HAL_I2C_Master_Receive>

  buffer = MINUTES_AD;
 8000bfc:	2701      	movs	r7, #1
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000bfe:	220f      	movs	r2, #15
  buffer = MINUTES_AD;
 8000c00:	ab02      	add	r3, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000c02:	a902      	add	r1, sp, #8
  buffer = MINUTES_AD;
 8000c04:	73df      	strb	r7, [r3, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000c06:	1852      	adds	r2, r2, r1
 8000c08:	003b      	movs	r3, r7
 8000c0a:	21d1      	movs	r1, #209	; 0xd1
 8000c0c:	0020      	movs	r0, r4
 8000c0e:	9500      	str	r5, [sp, #0]
 8000c10:	f002 fd34 	bl	800367c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_minute, 1, 100);
 8000c14:	003b      	movs	r3, r7
 8000c16:	9a03      	ldr	r2, [sp, #12]
 8000c18:	21d1      	movs	r1, #209	; 0xd1
 8000c1a:	0020      	movs	r0, r4
 8000c1c:	9500      	str	r5, [sp, #0]
 8000c1e:	f002 fdbf 	bl	80037a0 <HAL_I2C_Master_Receive>

  buffer = HOURS_AD;
 8000c22:	2302      	movs	r3, #2
 8000c24:	aa02      	add	r2, sp, #8
 8000c26:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000c28:	220f      	movs	r2, #15
 8000c2a:	a902      	add	r1, sp, #8
 8000c2c:	003b      	movs	r3, r7
 8000c2e:	1852      	adds	r2, r2, r1
 8000c30:	0020      	movs	r0, r4
 8000c32:	21d1      	movs	r1, #209	; 0xd1
 8000c34:	9500      	str	r5, [sp, #0]
 8000c36:	f002 fd21 	bl	800367c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_hour, 1, 100);
 8000c3a:	003b      	movs	r3, r7
 8000c3c:	0032      	movs	r2, r6
 8000c3e:	21d1      	movs	r1, #209	; 0xd1
 8000c40:	0020      	movs	r0, r4
 8000c42:	9500      	str	r5, [sp, #0]
 8000c44:	f002 fdac 	bl	80037a0 <HAL_I2C_Master_Receive>

  *get_hour = (((*get_hour & 0x30) >> 4) * 10) + (*get_hour & 0x0f);
 8000c48:	230a      	movs	r3, #10
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	7830      	ldrb	r0, [r6, #0]
 8000c4e:	0682      	lsls	r2, r0, #26
 8000c50:	0f92      	lsrs	r2, r2, #30
 8000c52:	435a      	muls	r2, r3
 8000c54:	4008      	ands	r0, r1
 8000c56:	1812      	adds	r2, r2, r0
 8000c58:	7032      	strb	r2, [r6, #0]
  *get_minute = ((*get_minute >> 4) * 10) + (*get_minute & 0x0f);
 8000c5a:	9a03      	ldr	r2, [sp, #12]
 8000c5c:	7810      	ldrb	r0, [r2, #0]
 8000c5e:	0902      	lsrs	r2, r0, #4
 8000c60:	435a      	muls	r2, r3
 8000c62:	4008      	ands	r0, r1
 8000c64:	1812      	adds	r2, r2, r0
 8000c66:	9803      	ldr	r0, [sp, #12]
 8000c68:	7002      	strb	r2, [r0, #0]
  *get_second = ((*get_second >> 4) * 10) + (*get_second & 0x0f);
 8000c6a:	9a02      	ldr	r2, [sp, #8]
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	0910      	lsrs	r0, r2, #4
 8000c70:	4343      	muls	r3, r0
 8000c72:	400a      	ands	r2, r1
 8000c74:	189b      	adds	r3, r3, r2
 8000c76:	9a02      	ldr	r2, [sp, #8]
 8000c78:	7013      	strb	r3, [r2, #0]
}
 8000c7a:	b007      	add	sp, #28
 8000c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	200001a0 	.word	0x200001a0

08000c84 <DS3231_set_date>:

void DS3231_set_date(uint8_t day, uint8_t month, uint8_t year)
{
  uint8_t buffer[4];

  buffer[0] = DATE_AD;
 8000c84:	2304      	movs	r3, #4
{
 8000c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c88:	b087      	sub	sp, #28
  buffer[0] = DATE_AD;
 8000c8a:	ac05      	add	r4, sp, #20
{
 8000c8c:	000e      	movs	r6, r1
  buffer[1] = ((day/10)<<4) + (day%10);
 8000c8e:	210a      	movs	r1, #10
{
 8000c90:	0015      	movs	r5, r2
 8000c92:	0007      	movs	r7, r0
  buffer[0] = DATE_AD;
 8000c94:	7023      	strb	r3, [r4, #0]
  buffer[1] = ((day/10)<<4) + (day%10);
 8000c96:	f7ff fa53 	bl	8000140 <__udivsi3>
 8000c9a:	210a      	movs	r1, #10
 8000c9c:	0103      	lsls	r3, r0, #4
 8000c9e:	0038      	movs	r0, r7
 8000ca0:	9303      	str	r3, [sp, #12]
 8000ca2:	f7ff fad3 	bl	800024c <__aeabi_uidivmod>
 8000ca6:	9b03      	ldr	r3, [sp, #12]
  buffer[2] = ((month/10)<<4) + (month%10);
 8000ca8:	0030      	movs	r0, r6
  buffer[1] = ((day/10)<<4) + (day%10);
 8000caa:	1859      	adds	r1, r3, r1
 8000cac:	7061      	strb	r1, [r4, #1]
  buffer[2] = ((month/10)<<4) + (month%10);
 8000cae:	210a      	movs	r1, #10
 8000cb0:	f7ff fa46 	bl	8000140 <__udivsi3>
 8000cb4:	210a      	movs	r1, #10
 8000cb6:	0107      	lsls	r7, r0, #4
 8000cb8:	0030      	movs	r0, r6
 8000cba:	f7ff fac7 	bl	800024c <__aeabi_uidivmod>
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000cbe:	0028      	movs	r0, r5
  buffer[2] = ((month/10)<<4) + (month%10);
 8000cc0:	187f      	adds	r7, r7, r1
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000cc2:	210a      	movs	r1, #10
  buffer[2] = ((month/10)<<4) + (month%10);
 8000cc4:	70a7      	strb	r7, [r4, #2]
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000cc6:	f7ff fa3b 	bl	8000140 <__udivsi3>
 8000cca:	0106      	lsls	r6, r0, #4
 8000ccc:	2030      	movs	r0, #48	; 0x30
 8000cce:	210a      	movs	r1, #10
 8000cd0:	4006      	ands	r6, r0
 8000cd2:	0028      	movs	r0, r5
 8000cd4:	f7ff faba 	bl	800024c <__aeabi_uidivmod>

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000cd8:	2364      	movs	r3, #100	; 0x64
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000cda:	1876      	adds	r6, r6, r1
 8000cdc:	70e6      	strb	r6, [r4, #3]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000cde:	0022      	movs	r2, r4
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	21d0      	movs	r1, #208	; 0xd0
 8000ce4:	3b60      	subs	r3, #96	; 0x60
 8000ce6:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <DS3231_set_date+0x6c>)
 8000ce8:	f002 fcc8 	bl	800367c <HAL_I2C_Master_Transmit>
}
 8000cec:	b007      	add	sp, #28
 8000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf0:	200001a0 	.word	0x200001a0

08000cf4 <DS3231_get_date>:

void DS3231_get_date(uint8_t *get_day, uint8_t *get_month, uint8_t *get_year)
{
  uint8_t buffer;

  buffer = DATE_AD;
 8000cf4:	2304      	movs	r3, #4
{
 8000cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf8:	b087      	sub	sp, #28
 8000cfa:	9203      	str	r2, [sp, #12]
  buffer = DATE_AD;
 8000cfc:	aa02      	add	r2, sp, #8
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000cfe:	2564      	movs	r5, #100	; 0x64
  buffer = DATE_AD;
 8000d00:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000d02:	220f      	movs	r2, #15
{
 8000d04:	0007      	movs	r7, r0
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000d06:	4c28      	ldr	r4, [pc, #160]	; (8000da8 <DS3231_get_date+0xb4>)
{
 8000d08:	000e      	movs	r6, r1
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000d0a:	a902      	add	r1, sp, #8
 8000d0c:	1852      	adds	r2, r2, r1
 8000d0e:	0020      	movs	r0, r4
 8000d10:	21d1      	movs	r1, #209	; 0xd1
 8000d12:	9500      	str	r5, [sp, #0]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	f002 fcb1 	bl	800367c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_day, 1, 100);
 8000d1a:	003a      	movs	r2, r7
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	21d1      	movs	r1, #209	; 0xd1
 8000d20:	0020      	movs	r0, r4
 8000d22:	9500      	str	r5, [sp, #0]
 8000d24:	f002 fd3c 	bl	80037a0 <HAL_I2C_Master_Receive>

  buffer = MONTH_AD;
 8000d28:	2305      	movs	r3, #5
 8000d2a:	aa02      	add	r2, sp, #8
 8000d2c:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000d2e:	220f      	movs	r2, #15
 8000d30:	a902      	add	r1, sp, #8
 8000d32:	1852      	adds	r2, r2, r1
 8000d34:	0020      	movs	r0, r4
 8000d36:	21d1      	movs	r1, #209	; 0xd1
 8000d38:	9500      	str	r5, [sp, #0]
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	f002 fc9e 	bl	800367c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_month, 1, 100);
 8000d40:	0032      	movs	r2, r6
 8000d42:	2301      	movs	r3, #1
 8000d44:	21d1      	movs	r1, #209	; 0xd1
 8000d46:	0020      	movs	r0, r4
 8000d48:	9500      	str	r5, [sp, #0]
 8000d4a:	f002 fd29 	bl	80037a0 <HAL_I2C_Master_Receive>

  buffer = YEAR_AD;
 8000d4e:	2306      	movs	r3, #6
 8000d50:	aa02      	add	r2, sp, #8
 8000d52:	73d3      	strb	r3, [r2, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000d54:	220f      	movs	r2, #15
 8000d56:	a902      	add	r1, sp, #8
 8000d58:	1852      	adds	r2, r2, r1
 8000d5a:	0020      	movs	r0, r4
 8000d5c:	21d1      	movs	r1, #209	; 0xd1
 8000d5e:	9500      	str	r5, [sp, #0]
 8000d60:	3b05      	subs	r3, #5
 8000d62:	f002 fc8b 	bl	800367c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_year, 1, 100);
 8000d66:	9a03      	ldr	r2, [sp, #12]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	21d1      	movs	r1, #209	; 0xd1
 8000d6c:	0020      	movs	r0, r4
 8000d6e:	9500      	str	r5, [sp, #0]
 8000d70:	f002 fd16 	bl	80037a0 <HAL_I2C_Master_Receive>

  *get_day = ((*get_day >> 4) * 10) + (*get_day & 0x0f);
 8000d74:	230a      	movs	r3, #10
 8000d76:	210f      	movs	r1, #15
 8000d78:	7838      	ldrb	r0, [r7, #0]
 8000d7a:	0902      	lsrs	r2, r0, #4
 8000d7c:	435a      	muls	r2, r3
 8000d7e:	4008      	ands	r0, r1
 8000d80:	1812      	adds	r2, r2, r0
 8000d82:	703a      	strb	r2, [r7, #0]
  *get_month = (((*get_month & 0x10) >> 4) * 10) + (*get_month & 0x0f);
 8000d84:	7830      	ldrb	r0, [r6, #0]
 8000d86:	06c2      	lsls	r2, r0, #27
 8000d88:	0fd2      	lsrs	r2, r2, #31
 8000d8a:	435a      	muls	r2, r3
 8000d8c:	4008      	ands	r0, r1
 8000d8e:	1812      	adds	r2, r2, r0
 8000d90:	7032      	strb	r2, [r6, #0]
  *get_year = ((*get_year >> 4) * 10) + (*get_year & 0x0f);
 8000d92:	9a03      	ldr	r2, [sp, #12]
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	0910      	lsrs	r0, r2, #4
 8000d98:	4343      	muls	r3, r0
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	189b      	adds	r3, r3, r2
 8000d9e:	9a03      	ldr	r2, [sp, #12]
 8000da0:	7013      	strb	r3, [r2, #0]
}
 8000da2:	b007      	add	sp, #28
 8000da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	200001a0 	.word	0x200001a0

08000dac <readRegister8>:

static TS_POINT coor; // User coordinate
static uint8_t touches;
static uint16_t touchX[2], touchY[2], touchID[2];

static uint8_t readRegister8(uint8_t reg){
 8000dac:	220f      	movs	r2, #15
 8000dae:	b570      	push	{r4, r5, r6, lr}
	uint8_t data;
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &reg, 1, 10);
 8000db0:	260a      	movs	r6, #10
	HAL_I2C_Master_Receive(&hi2c1, FT62XX_ADDR, &data, 1, 10);
 8000db2:	2417      	movs	r4, #23
static uint8_t readRegister8(uint8_t reg){
 8000db4:	b086      	sub	sp, #24
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &reg, 1, 10);
 8000db6:	4d0a      	ldr	r5, [pc, #40]	; (8000de0 <readRegister8+0x34>)
static uint8_t readRegister8(uint8_t reg){
 8000db8:	446a      	add	r2, sp
 8000dba:	7010      	strb	r0, [r2, #0]
	HAL_I2C_Master_Receive(&hi2c1, FT62XX_ADDR, &data, 1, 10);
 8000dbc:	446c      	add	r4, sp
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &reg, 1, 10);
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	2171      	movs	r1, #113	; 0x71
 8000dc2:	0028      	movs	r0, r5
 8000dc4:	9600      	str	r6, [sp, #0]
 8000dc6:	f002 fc59 	bl	800367c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, FT62XX_ADDR, &data, 1, 10);
 8000dca:	2301      	movs	r3, #1
 8000dcc:	0022      	movs	r2, r4
 8000dce:	2171      	movs	r1, #113	; 0x71
 8000dd0:	0028      	movs	r0, r5
 8000dd2:	9600      	str	r6, [sp, #0]
 8000dd4:	f002 fce4 	bl	80037a0 <HAL_I2C_Master_Receive>
	return data;
 8000dd8:	7820      	ldrb	r0, [r4, #0]
}
 8000dda:	b006      	add	sp, #24
 8000ddc:	bd70      	pop	{r4, r5, r6, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	200001a0 	.word	0x200001a0

08000de4 <FT6206_Begin>:
static void writeRegister8(uint8_t reg, uint8_t val){
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &reg, 1, 10);
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &val, 1, 10);
}

bool FT6206_Begin(uint8_t thresh){
 8000de4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000de6:	250e      	movs	r5, #14
 8000de8:	220f      	movs	r2, #15
 8000dea:	2380      	movs	r3, #128	; 0x80
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &reg, 1, 10);
 8000dec:	260a      	movs	r6, #10
 8000dee:	4c14      	ldr	r4, [pc, #80]	; (8000e40 <FT6206_Begin+0x5c>)
 8000df0:	446a      	add	r2, sp
 8000df2:	446d      	add	r5, sp
 8000df4:	7013      	strb	r3, [r2, #0]
 8000df6:	7028      	strb	r0, [r5, #0]
 8000df8:	2171      	movs	r1, #113	; 0x71
 8000dfa:	3b7f      	subs	r3, #127	; 0x7f
 8000dfc:	0020      	movs	r0, r4
 8000dfe:	9600      	str	r6, [sp, #0]
 8000e00:	f002 fc3c 	bl	800367c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &val, 1, 10);
 8000e04:	2301      	movs	r3, #1
 8000e06:	002a      	movs	r2, r5
 8000e08:	2171      	movs	r1, #113	; 0x71
 8000e0a:	0020      	movs	r0, r4
 8000e0c:	9600      	str	r6, [sp, #0]
 8000e0e:	f002 fc35 	bl	800367c <HAL_I2C_Master_Transmit>
	writeRegister8(FT62XX_REG_THRESHHOLD, thresh);

	if(readRegister8(FT62XX_REG_VENDID) != FT62XX_VENDID)
 8000e12:	20a8      	movs	r0, #168	; 0xa8
 8000e14:	f7ff ffca 	bl	8000dac <readRegister8>
 8000e18:	0003      	movs	r3, r0
		return false;
 8000e1a:	2000      	movs	r0, #0
	if(readRegister8(FT62XX_REG_VENDID) != FT62XX_VENDID)
 8000e1c:	2b11      	cmp	r3, #17
 8000e1e:	d10c      	bne.n	8000e3a <FT6206_Begin+0x56>
	uint8_t id = readRegister8(FT62XX_REG_CHIPID);
 8000e20:	30a3      	adds	r0, #163	; 0xa3
 8000e22:	f7ff ffc3 	bl	8000dac <readRegister8>
 8000e26:	0003      	movs	r3, r0
	if((id != FT6206_CHIPID) && (id != FT6236_CHIPID) && (id != FT6236U_CHIPID))
		return false;

	return true;
 8000e28:	2001      	movs	r0, #1
	if((id != FT6206_CHIPID) && (id != FT6236_CHIPID) && (id != FT6236U_CHIPID))
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d005      	beq.n	8000e3a <FT6206_Begin+0x56>
 8000e2e:	2b36      	cmp	r3, #54	; 0x36
 8000e30:	d003      	beq.n	8000e3a <FT6206_Begin+0x56>
 8000e32:	3b64      	subs	r3, #100	; 0x64
 8000e34:	425a      	negs	r2, r3
 8000e36:	4153      	adcs	r3, r2
 8000e38:	b2d8      	uxtb	r0, r3
}
 8000e3a:	b004      	add	sp, #16
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	200001a0 	.word	0x200001a0

08000e44 <readData>:

void readData(void){
	uint8_t i2cdat[16];
	uint8_t data = 0;
 8000e44:	220f      	movs	r2, #15
void readData(void){
 8000e46:	b5f0      	push	{r4, r5, r6, r7, lr}

	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &data, 1, 10);
 8000e48:	270a      	movs	r7, #10
	uint8_t data = 0;
 8000e4a:	2500      	movs	r5, #0
void readData(void){
 8000e4c:	b089      	sub	sp, #36	; 0x24
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &data, 1, 10);
 8000e4e:	4e1a      	ldr	r6, [pc, #104]	; (8000eb8 <readData+0x74>)
	uint8_t data = 0;
 8000e50:	446a      	add	r2, sp
 8000e52:	7015      	strb	r5, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &data, 1, 10);
 8000e54:	2301      	movs	r3, #1
 8000e56:	2171      	movs	r1, #113	; 0x71
	HAL_I2C_Master_Receive(&hi2c1, FT62XX_ADDR, i2cdat, 16, 10);
 8000e58:	ac04      	add	r4, sp, #16
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &data, 1, 10);
 8000e5a:	0030      	movs	r0, r6
 8000e5c:	9700      	str	r7, [sp, #0]
 8000e5e:	f002 fc0d 	bl	800367c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, FT62XX_ADDR, i2cdat, 16, 10);
 8000e62:	2310      	movs	r3, #16
 8000e64:	0022      	movs	r2, r4
 8000e66:	2171      	movs	r1, #113	; 0x71
 8000e68:	0030      	movs	r0, r6
 8000e6a:	9700      	str	r7, [sp, #0]
 8000e6c:	f002 fc98 	bl	80037a0 <HAL_I2C_Master_Receive>

	touches = i2cdat[0x02];
 8000e70:	78a2      	ldrb	r2, [r4, #2]
	if(touches > 2) touches = 0;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <readData+0x78>)
 8000e74:	2a02      	cmp	r2, #2
 8000e76:	d81d      	bhi.n	8000eb4 <readData+0x70>
	touches = i2cdat[0x02];
 8000e78:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0 ; i < 2 ; i++){
	    touchX[i] = i2cdat[0x03 + i * 6] & 0x0F;
 8000e7a:	200f      	movs	r0, #15
 8000e7c:	78e2      	ldrb	r2, [r4, #3]
	    touchX[i] <<= 8;
	    touchX[i] |= i2cdat[0x04 + i * 6];
 8000e7e:	7921      	ldrb	r1, [r4, #4]
	    touchX[i] = i2cdat[0x03 + i * 6] & 0x0F;
 8000e80:	4002      	ands	r2, r0
	    touchX[i] |= i2cdat[0x04 + i * 6];
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <readData+0x7c>)
	    touchX[i] <<= 8;
 8000e84:	0212      	lsls	r2, r2, #8
	    touchX[i] |= i2cdat[0x04 + i * 6];
 8000e86:	430a      	orrs	r2, r1
 8000e88:	801a      	strh	r2, [r3, #0]

	    touchY[i] = i2cdat[0x05 + i * 6] & 0x0F;
 8000e8a:	7962      	ldrb	r2, [r4, #5]
	    touchY[i] <<= 8;
	    touchY[i] |= i2cdat[0x06 + i * 6];
 8000e8c:	79a5      	ldrb	r5, [r4, #6]
	    touchY[i] = i2cdat[0x05 + i * 6] & 0x0F;
 8000e8e:	4002      	ands	r2, r0
	    touchY[i] |= i2cdat[0x06 + i * 6];
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <readData+0x80>)
	    touchY[i] <<= 8;
 8000e92:	0212      	lsls	r2, r2, #8
	    touchY[i] |= i2cdat[0x06 + i * 6];
 8000e94:	432a      	orrs	r2, r5
 8000e96:	800a      	strh	r2, [r1, #0]
	    touchX[i] = i2cdat[0x03 + i * 6] & 0x0F;
 8000e98:	7a62      	ldrb	r2, [r4, #9]
	    touchX[i] |= i2cdat[0x04 + i * 6];
 8000e9a:	7aa5      	ldrb	r5, [r4, #10]
	    touchX[i] = i2cdat[0x03 + i * 6] & 0x0F;
 8000e9c:	4002      	ands	r2, r0
	    touchX[i] <<= 8;
 8000e9e:	0212      	lsls	r2, r2, #8
	    touchX[i] |= i2cdat[0x04 + i * 6];
 8000ea0:	432a      	orrs	r2, r5
 8000ea2:	805a      	strh	r2, [r3, #2]
	    touchY[i] = i2cdat[0x05 + i * 6] & 0x0F;
 8000ea4:	7ae3      	ldrb	r3, [r4, #11]
	    touchY[i] |= i2cdat[0x06 + i * 6];
 8000ea6:	7b22      	ldrb	r2, [r4, #12]
	    touchY[i] = i2cdat[0x05 + i * 6] & 0x0F;
 8000ea8:	4003      	ands	r3, r0
	    touchY[i] <<= 8;
 8000eaa:	021b      	lsls	r3, r3, #8
	    touchY[i] |= i2cdat[0x06 + i * 6];
 8000eac:	4313      	orrs	r3, r2
 8000eae:	804b      	strh	r3, [r1, #2]

	    touchID[i] = i2cdat[0x05 + i * 6] >> 4;
	}
}
 8000eb0:	b009      	add	sp, #36	; 0x24
 8000eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(touches > 2) touches = 0;
 8000eb4:	701d      	strb	r5, [r3, #0]
 8000eb6:	e7e0      	b.n	8000e7a <readData+0x36>
 8000eb8:	200001a0 	.word	0x200001a0
 8000ebc:	200000d2 	.word	0x200000d2
 8000ec0:	200000ca 	.word	0x200000ca
 8000ec4:	200000ce 	.word	0x200000ce

08000ec8 <INIT_FT6206>:

void INIT_FT6206(void) {
	touches = 0;
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4b01      	ldr	r3, [pc, #4]	; (8000ed0 <INIT_FT6206+0x8>)
 8000ecc:	701a      	strb	r2, [r3, #0]
}
 8000ece:	4770      	bx	lr
 8000ed0:	200000d2 	.word	0x200000d2

08000ed4 <touched>:

uint8_t touched(void){
 8000ed4:	b510      	push	{r4, lr}
	uint8_t n = readRegister8(FT62XX_REG_NUMTOUCHES);
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f7ff ff68 	bl	8000dac <readRegister8>
	if(n > 2) n = 0;
 8000edc:	2802      	cmp	r0, #2
 8000ede:	d900      	bls.n	8000ee2 <touched+0xe>
 8000ee0:	2000      	movs	r0, #0
	return n;
}
 8000ee2:	bd10      	pop	{r4, pc}

08000ee4 <getPoint>:

TS_POINT getPoint(uint8_t n) {
 8000ee4:	b570      	push	{r4, r5, r6, lr}
 8000ee6:	000d      	movs	r5, r1
 8000ee8:	0004      	movs	r4, r0
	readData();
 8000eea:	f7ff ffab 	bl	8000e44 <readData>
	if ((touches == 0) || (n >= 1)) TS_POINT_set(0, 0, 0);
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <getPoint+0x44>)
 8000ef0:	490e      	ldr	r1, [pc, #56]	; (8000f2c <getPoint+0x48>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <getPoint+0x18>
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	d009      	beq.n	8000f10 <getPoint+0x2c>
void TS_POINT_clear(void) {
	coor.x = coor.y = coor.z = 0;
}

void TS_POINT_set(int16_t _x, int16_t _y, int16_t _z) {
	coor.x = _x;
 8000efc:	2300      	movs	r3, #0
 8000efe:	800b      	strh	r3, [r1, #0]
	coor.y = _y;
 8000f00:	804b      	strh	r3, [r1, #2]
	return coor;
 8000f02:	2206      	movs	r2, #6
 8000f04:	0020      	movs	r0, r4
	coor.z = _z;
 8000f06:	808b      	strh	r3, [r1, #4]
	return coor;
 8000f08:	f003 fe86 	bl	8004c18 <memcpy>
}
 8000f0c:	0020      	movs	r0, r4
 8000f0e:	bd70      	pop	{r4, r5, r6, pc}
	else TS_POINT_set(320 - touchY[n], touchX[n], 1);
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <getPoint+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	5e9a      	ldrsh	r2, [r3, r2]
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <getPoint+0x50>)
	coor.y = _y;
 8000f18:	804a      	strh	r2, [r1, #2]
	else TS_POINT_set(320 - touchY[n], touchX[n], 1);
 8000f1a:	8818      	ldrh	r0, [r3, #0]
 8000f1c:	23a0      	movs	r3, #160	; 0xa0
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	1a1b      	subs	r3, r3, r0
	coor.x = _x;
 8000f22:	800b      	strh	r3, [r1, #0]
	coor.z = _z;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e7ec      	b.n	8000f02 <getPoint+0x1e>
 8000f28:	200000d2 	.word	0x200000d2
 8000f2c:	200000c4 	.word	0x200000c4
 8000f30:	200000ca 	.word	0x200000ca
 8000f34:	200000ce 	.word	0x200000ce

08000f38 <Coordinate_Tx>:
		HAL_UART_Receive(&huart1, &rxData, 1, 10);
	}
	return rxData;
}

static void Coordinate_Tx(uint16_t x, uint16_t y){
 8000f38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f3a:	466b      	mov	r3, sp
	for(uint8_t i = 0 ; i < 2 ; i++){
		HAL_UART_Transmit(&huart1, (uint8_t*)&x, 1, 10);
 8000f3c:	4e13      	ldr	r6, [pc, #76]	; (8000f8c <Coordinate_Tx+0x54>)
static void Coordinate_Tx(uint16_t x, uint16_t y){
 8000f3e:	1d9c      	adds	r4, r3, #6
 8000f40:	ad01      	add	r5, sp, #4
 8000f42:	8029      	strh	r1, [r5, #0]
 8000f44:	80d8      	strh	r0, [r3, #6]
		HAL_UART_Transmit(&huart1, (uint8_t*)&x, 1, 10);
 8000f46:	0021      	movs	r1, r4
 8000f48:	0030      	movs	r0, r6
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f003 fcbc 	bl	80048ca <HAL_UART_Transmit>
		x >>= 8;
 8000f52:	8823      	ldrh	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)&x, 1, 10);
 8000f54:	0021      	movs	r1, r4
		x >>= 8;
 8000f56:	0a1b      	lsrs	r3, r3, #8
		HAL_UART_Transmit(&huart1, (uint8_t*)&x, 1, 10);
 8000f58:	0030      	movs	r0, r6
		x >>= 8;
 8000f5a:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)&x, 1, 10);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	230a      	movs	r3, #10
 8000f60:	f003 fcb3 	bl	80048ca <HAL_UART_Transmit>
		x >>= 8;
 8000f64:	8823      	ldrh	r3, [r4, #0]
	}
	for(uint8_t i = 0 ; i < 2 ; i++){
		HAL_UART_Transmit(&huart1, (uint8_t*)&y, 1, 10);
 8000f66:	0029      	movs	r1, r5
		x >>= 8;
 8000f68:	0a1b      	lsrs	r3, r3, #8
		HAL_UART_Transmit(&huart1, (uint8_t*)&y, 1, 10);
 8000f6a:	0030      	movs	r0, r6
		x >>= 8;
 8000f6c:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)&y, 1, 10);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	230a      	movs	r3, #10
 8000f72:	f003 fcaa 	bl	80048ca <HAL_UART_Transmit>
		y >>= 8;
 8000f76:	882b      	ldrh	r3, [r5, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)&y, 1, 10);
 8000f78:	0029      	movs	r1, r5
		y >>= 8;
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	802b      	strh	r3, [r5, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)&y, 1, 10);
 8000f7e:	0030      	movs	r0, r6
 8000f80:	230a      	movs	r3, #10
 8000f82:	2201      	movs	r2, #1
 8000f84:	f003 fca1 	bl	80048ca <HAL_UART_Transmit>
	}
}
 8000f88:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	20000234 	.word	0x20000234

08000f90 <Test_Rx>:
static uint8_t Test_Rx(uint8_t num){
 8000f90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f92:	466b      	mov	r3, sp
 8000f94:	1ddd      	adds	r5, r3, #7
	rxData = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	4c0a      	ldr	r4, [pc, #40]	; (8000fc4 <Test_Rx+0x34>)
static uint8_t Test_Rx(uint8_t num){
 8000f9a:	7028      	strb	r0, [r5, #0]
	rxData = 0;
 8000f9c:	7023      	strb	r3, [r4, #0]
	while(rxData == 0) {
 8000f9e:	7820      	ldrb	r0, [r4, #0]
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d000      	beq.n	8000fa6 <Test_Rx+0x16>
}
 8000fa4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		HAL_UART_Transmit(&huart1, &num, 1, 10);
 8000fa6:	4e08      	ldr	r6, [pc, #32]	; (8000fc8 <Test_Rx+0x38>)
 8000fa8:	0029      	movs	r1, r5
 8000faa:	230a      	movs	r3, #10
 8000fac:	2201      	movs	r2, #1
 8000fae:	0030      	movs	r0, r6
 8000fb0:	f003 fc8b 	bl	80048ca <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, &rxData, 1, 10);
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	0021      	movs	r1, r4
 8000fba:	0030      	movs	r0, r6
 8000fbc:	f003 fcec 	bl	8004998 <HAL_UART_Receive>
 8000fc0:	e7ed      	b.n	8000f9e <Test_Rx+0xe>
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	200000d3 	.word	0x200000d3
 8000fc8:	20000234 	.word	0x20000234

08000fcc <LCD_FillScreen>:
		}
	}
	else return;
}

void LCD_FillScreen(LCD_COLOR color){
 8000fcc:	b513      	push	{r0, r1, r4, lr}
 8000fce:	466b      	mov	r3, sp
 8000fd0:	71d8      	strb	r0, [r3, #7]
	num = 3;
	if(Test_Rx(num)) {
 8000fd2:	2003      	movs	r0, #3
void LCD_FillScreen(LCD_COLOR color){
 8000fd4:	1ddc      	adds	r4, r3, #7
	if(Test_Rx(num)) {
 8000fd6:	f7ff ffdb 	bl	8000f90 <Test_Rx>
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	d005      	beq.n	8000fea <LCD_FillScreen+0x1e>
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 8000fde:	230a      	movs	r3, #10
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	0021      	movs	r1, r4
 8000fe4:	4801      	ldr	r0, [pc, #4]	; (8000fec <LCD_FillScreen+0x20>)
 8000fe6:	f003 fc70 	bl	80048ca <HAL_UART_Transmit>
	}
	else return;
}
 8000fea:	bd13      	pop	{r0, r1, r4, pc}
 8000fec:	20000234 	.word	0x20000234

08000ff0 <LCD_DrawVLine>:
		HAL_UART_Transmit(&huart1, &color, 1, 10);
	}
	else return;
}

void LCD_DrawVLine(uint16_t x, uint16_t y, uint16_t height, LCD_COLOR color){
 8000ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ff2:	000f      	movs	r7, r1
 8000ff4:	4669      	mov	r1, sp
 8000ff6:	0005      	movs	r5, r0
	num = 7;
	if(Test_Rx(num)){
 8000ff8:	2007      	movs	r0, #7
void LCD_DrawVLine(uint16_t x, uint16_t y, uint16_t height, LCD_COLOR color){
 8000ffa:	1d8c      	adds	r4, r1, #6
 8000ffc:	80ca      	strh	r2, [r1, #6]
 8000ffe:	1d4e      	adds	r6, r1, #5
 8001000:	714b      	strb	r3, [r1, #5]
	if(Test_Rx(num)){
 8001002:	f7ff ffc5 	bl	8000f90 <Test_Rx>
 8001006:	2800      	cmp	r0, #0
 8001008:	d01c      	beq.n	8001044 <LCD_DrawVLine+0x54>
		Coordinate_Tx(x, y);
 800100a:	0028      	movs	r0, r5
 800100c:	0039      	movs	r1, r7
 800100e:	f7ff ff93 	bl	8000f38 <Coordinate_Tx>
		for(uint8_t i = 0 ; i < 2 ; i++){
			HAL_UART_Transmit(&huart1, (uint8_t*)&height, 1, 10);
 8001012:	4d0d      	ldr	r5, [pc, #52]	; (8001048 <LCD_DrawVLine+0x58>)
 8001014:	230a      	movs	r3, #10
 8001016:	2201      	movs	r2, #1
 8001018:	0021      	movs	r1, r4
 800101a:	0028      	movs	r0, r5
 800101c:	f003 fc55 	bl	80048ca <HAL_UART_Transmit>
			height >>= 8;
 8001020:	8823      	ldrh	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)&height, 1, 10);
 8001022:	2201      	movs	r2, #1
			height >>= 8;
 8001024:	0a1b      	lsrs	r3, r3, #8
			HAL_UART_Transmit(&huart1, (uint8_t*)&height, 1, 10);
 8001026:	0021      	movs	r1, r4
			height >>= 8;
 8001028:	8023      	strh	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)&height, 1, 10);
 800102a:	0028      	movs	r0, r5
 800102c:	230a      	movs	r3, #10
 800102e:	f003 fc4c 	bl	80048ca <HAL_UART_Transmit>
			height >>= 8;
 8001032:	8823      	ldrh	r3, [r4, #0]
		}
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 8001034:	2201      	movs	r2, #1
			height >>= 8;
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 800103a:	0031      	movs	r1, r6
 800103c:	230a      	movs	r3, #10
 800103e:	0028      	movs	r0, r5
 8001040:	f003 fc43 	bl	80048ca <HAL_UART_Transmit>
	}
	else return;
}
 8001044:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	20000234 	.word	0x20000234

0800104c <LCD_DrawHollowCircle>:

void LCD_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, LCD_COLOR color){
 800104c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800104e:	000f      	movs	r7, r1
 8001050:	4669      	mov	r1, sp
 8001052:	0005      	movs	r5, r0
	num = 8;
	if(Test_Rx(num)){
 8001054:	2008      	movs	r0, #8
void LCD_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, LCD_COLOR color){
 8001056:	1d8c      	adds	r4, r1, #6
 8001058:	80ca      	strh	r2, [r1, #6]
 800105a:	1d4e      	adds	r6, r1, #5
 800105c:	714b      	strb	r3, [r1, #5]
	if(Test_Rx(num)){
 800105e:	f7ff ff97 	bl	8000f90 <Test_Rx>
 8001062:	2800      	cmp	r0, #0
 8001064:	d01c      	beq.n	80010a0 <LCD_DrawHollowCircle+0x54>
		Coordinate_Tx(X, Y);
 8001066:	0028      	movs	r0, r5
 8001068:	0039      	movs	r1, r7
 800106a:	f7ff ff65 	bl	8000f38 <Coordinate_Tx>
		for(uint8_t i = 0 ; i < 2 ; i++){
			HAL_UART_Transmit(&huart1, (uint8_t*)&radius, 1, 10);
 800106e:	4d0d      	ldr	r5, [pc, #52]	; (80010a4 <LCD_DrawHollowCircle+0x58>)
 8001070:	230a      	movs	r3, #10
 8001072:	2201      	movs	r2, #1
 8001074:	0021      	movs	r1, r4
 8001076:	0028      	movs	r0, r5
 8001078:	f003 fc27 	bl	80048ca <HAL_UART_Transmit>
			radius >>= 8;
 800107c:	8823      	ldrh	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)&radius, 1, 10);
 800107e:	2201      	movs	r2, #1
			radius >>= 8;
 8001080:	0a1b      	lsrs	r3, r3, #8
			HAL_UART_Transmit(&huart1, (uint8_t*)&radius, 1, 10);
 8001082:	0021      	movs	r1, r4
			radius >>= 8;
 8001084:	8023      	strh	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)&radius, 1, 10);
 8001086:	0028      	movs	r0, r5
 8001088:	230a      	movs	r3, #10
 800108a:	f003 fc1e 	bl	80048ca <HAL_UART_Transmit>
			radius >>= 8;
 800108e:	8823      	ldrh	r3, [r4, #0]
		}
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 8001090:	2201      	movs	r2, #1
			radius >>= 8;
 8001092:	0a1b      	lsrs	r3, r3, #8
 8001094:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 8001096:	0031      	movs	r1, r6
 8001098:	230a      	movs	r3, #10
 800109a:	0028      	movs	r0, r5
 800109c:	f003 fc15 	bl	80048ca <HAL_UART_Transmit>
	}
	else return;
}
 80010a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	20000234 	.word	0x20000234

080010a8 <LCD_DrawFilledCircle>:

void LCD_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, LCD_COLOR color){
 80010a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80010aa:	000f      	movs	r7, r1
 80010ac:	4669      	mov	r1, sp
 80010ae:	0005      	movs	r5, r0
	num = 9;
	if(Test_Rx(num)){
 80010b0:	2009      	movs	r0, #9
void LCD_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, LCD_COLOR color){
 80010b2:	1d8c      	adds	r4, r1, #6
 80010b4:	80ca      	strh	r2, [r1, #6]
 80010b6:	1d4e      	adds	r6, r1, #5
 80010b8:	714b      	strb	r3, [r1, #5]
	if(Test_Rx(num)){
 80010ba:	f7ff ff69 	bl	8000f90 <Test_Rx>
 80010be:	2800      	cmp	r0, #0
 80010c0:	d01c      	beq.n	80010fc <LCD_DrawFilledCircle+0x54>
		Coordinate_Tx(X, Y);
 80010c2:	0028      	movs	r0, r5
 80010c4:	0039      	movs	r1, r7
 80010c6:	f7ff ff37 	bl	8000f38 <Coordinate_Tx>
		for(uint8_t i = 0 ; i < 2 ; i++){
			HAL_UART_Transmit(&huart1, (uint8_t*)&radius, 1, 10);
 80010ca:	4d0d      	ldr	r5, [pc, #52]	; (8001100 <LCD_DrawFilledCircle+0x58>)
 80010cc:	230a      	movs	r3, #10
 80010ce:	2201      	movs	r2, #1
 80010d0:	0021      	movs	r1, r4
 80010d2:	0028      	movs	r0, r5
 80010d4:	f003 fbf9 	bl	80048ca <HAL_UART_Transmit>
			radius >>= 8;
 80010d8:	8823      	ldrh	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)&radius, 1, 10);
 80010da:	2201      	movs	r2, #1
			radius >>= 8;
 80010dc:	0a1b      	lsrs	r3, r3, #8
			HAL_UART_Transmit(&huart1, (uint8_t*)&radius, 1, 10);
 80010de:	0021      	movs	r1, r4
			radius >>= 8;
 80010e0:	8023      	strh	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)&radius, 1, 10);
 80010e2:	0028      	movs	r0, r5
 80010e4:	230a      	movs	r3, #10
 80010e6:	f003 fbf0 	bl	80048ca <HAL_UART_Transmit>
			radius >>= 8;
 80010ea:	8823      	ldrh	r3, [r4, #0]
		}
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 80010ec:	2201      	movs	r2, #1
			radius >>= 8;
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 80010f2:	0031      	movs	r1, r6
 80010f4:	230a      	movs	r3, #10
 80010f6:	0028      	movs	r0, r5
 80010f8:	f003 fbe7 	bl	80048ca <HAL_UART_Transmit>
	}
	else return;
}
 80010fc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	20000234 	.word	0x20000234

08001104 <LCD_DrawFilledRectangleCoord>:
		HAL_UART_Transmit(&huart1, &color, 1, 10);
	}
	else return;
}

void LCD_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, LCD_COLOR color){
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	0006      	movs	r6, r0
	num = 11;
	if(Test_Rx(num)){
 8001108:	200b      	movs	r0, #11
void LCD_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, LCD_COLOR color){
 800110a:	000f      	movs	r7, r1
 800110c:	0014      	movs	r4, r2
 800110e:	001d      	movs	r5, r3
	if(Test_Rx(num)){
 8001110:	f7ff ff3e 	bl	8000f90 <Test_Rx>
 8001114:	2800      	cmp	r0, #0
 8001116:	d00d      	beq.n	8001134 <LCD_DrawFilledRectangleCoord+0x30>
		Coordinate_Tx(X0, Y0);
 8001118:	0039      	movs	r1, r7
 800111a:	0030      	movs	r0, r6
 800111c:	f7ff ff0c 	bl	8000f38 <Coordinate_Tx>
		Coordinate_Tx(X1, Y1);
 8001120:	0029      	movs	r1, r5
 8001122:	0020      	movs	r0, r4
 8001124:	f7ff ff08 	bl	8000f38 <Coordinate_Tx>
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 8001128:	230a      	movs	r3, #10
 800112a:	2201      	movs	r2, #1
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <LCD_DrawFilledRectangleCoord+0x34>)
 800112e:	a906      	add	r1, sp, #24
 8001130:	f003 fbcb 	bl	80048ca <HAL_UART_Transmit>
	}
	else return;
}
 8001134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	20000234 	.word	0x20000234

0800113c <LCD_DrawText>:
		HAL_UART_Transmit(&huart1, &bgcolor, 1, 10);
	}
	return;
}

void LCD_DrawText(const char* str, uint16_t X, uint16_t Y, LCD_COLOR color, LCD_COLOR bgcolor){
 800113c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113e:	b085      	sub	sp, #20
 8001140:	9202      	str	r2, [sp, #8]
 8001142:	aa02      	add	r2, sp, #8
 8001144:	0005      	movs	r5, r0
	num = 13;
	if(Test_Rx(num)){
 8001146:	200d      	movs	r0, #13
void LCD_DrawText(const char* str, uint16_t X, uint16_t Y, LCD_COLOR color, LCD_COLOR bgcolor){
 8001148:	1dd7      	adds	r7, r2, #7
 800114a:	9101      	str	r1, [sp, #4]
 800114c:	703b      	strb	r3, [r7, #0]
	if(Test_Rx(num)){
 800114e:	f7ff ff1f 	bl	8000f90 <Test_Rx>
 8001152:	2800      	cmp	r0, #0
 8001154:	d021      	beq.n	800119a <LCD_DrawText+0x5e>
		uint8_t len = strlen(str);
 8001156:	0028      	movs	r0, r5
 8001158:	f7fe ffd6 	bl	8000108 <strlen>
		for(uint8_t i = 0 ; i <= len ; i++)
 800115c:	2400      	movs	r4, #0
		uint8_t len = strlen(str);
 800115e:	b2c3      	uxtb	r3, r0
 8001160:	9300      	str	r3, [sp, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)&str[i], 1, 10);
 8001162:	4e0f      	ldr	r6, [pc, #60]	; (80011a0 <LCD_DrawText+0x64>)
 8001164:	230a      	movs	r3, #10
 8001166:	1929      	adds	r1, r5, r4
 8001168:	2201      	movs	r2, #1
 800116a:	0030      	movs	r0, r6
 800116c:	f003 fbad 	bl	80048ca <HAL_UART_Transmit>
		for(uint8_t i = 0 ; i <= len ; i++)
 8001170:	3401      	adds	r4, #1
 8001172:	9b00      	ldr	r3, [sp, #0]
 8001174:	b2e4      	uxtb	r4, r4
 8001176:	42a3      	cmp	r3, r4
 8001178:	d2f3      	bcs.n	8001162 <LCD_DrawText+0x26>
		Coordinate_Tx(X, Y);
 800117a:	9902      	ldr	r1, [sp, #8]
 800117c:	9801      	ldr	r0, [sp, #4]
 800117e:	f7ff fedb 	bl	8000f38 <Coordinate_Tx>
		HAL_UART_Transmit(&huart1, &color, 1, 10);
 8001182:	230a      	movs	r3, #10
 8001184:	2201      	movs	r2, #1
 8001186:	0039      	movs	r1, r7
 8001188:	0030      	movs	r0, r6
 800118a:	f003 fb9e 	bl	80048ca <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, &bgcolor, 1, 10);
 800118e:	230a      	movs	r3, #10
 8001190:	2201      	movs	r2, #1
 8001192:	0030      	movs	r0, r6
 8001194:	a90a      	add	r1, sp, #40	; 0x28
 8001196:	f003 fb98 	bl	80048ca <HAL_UART_Transmit>
	}
}
 800119a:	b005      	add	sp, #20
 800119c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	20000234 	.word	0x20000234

080011a4 <xy_check>:
__STATIC_INLINE void time_get(void){
	DS3231_get_time(&time.sec, &time.min, &time.hour);
	DS3231_get_date(&time.day, &time.month, &time.year);
}

__STATIC_INLINE uint8_t xy_check(uint16_t x0, uint16_t x1, uint16_t y0, uint16_t y1){
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return ((curXY.x >= x0 * 15 && curXY.x <= x1 * 15) && (curXY.y >= y0 * 19 && curXY.y <= y1 * 19));
 80011a6:	250f      	movs	r5, #15
__STATIC_INLINE uint8_t xy_check(uint16_t x0, uint16_t x1, uint16_t y0, uint16_t y1){
 80011a8:	000e      	movs	r6, r1
	return ((curXY.x >= x0 * 15 && curXY.x <= x1 * 15) && (curXY.y >= y0 * 19 && curXY.y <= y1 * 19));
 80011aa:	4368      	muls	r0, r5
 80011ac:	490a      	ldr	r1, [pc, #40]	; (80011d8 <xy_check+0x34>)
 80011ae:	2400      	movs	r4, #0
 80011b0:	5f0f      	ldrsh	r7, [r1, r4]
 80011b2:	2400      	movs	r4, #0
 80011b4:	4287      	cmp	r7, r0
 80011b6:	db0d      	blt.n	80011d4 <xy_check+0x30>
 80011b8:	4375      	muls	r5, r6
 80011ba:	42af      	cmp	r7, r5
 80011bc:	dc0a      	bgt.n	80011d4 <xy_check+0x30>
 80011be:	2502      	movs	r5, #2
 80011c0:	5f4d      	ldrsh	r5, [r1, r5]
 80011c2:	2113      	movs	r1, #19
 80011c4:	434a      	muls	r2, r1
 80011c6:	4295      	cmp	r5, r2
 80011c8:	db04      	blt.n	80011d4 <xy_check+0x30>
 80011ca:	2000      	movs	r0, #0
 80011cc:	4359      	muls	r1, r3
 80011ce:	0fec      	lsrs	r4, r5, #31
 80011d0:	42a9      	cmp	r1, r5
 80011d2:	4144      	adcs	r4, r0
 80011d4:	b2e0      	uxtb	r0, r4
}
 80011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d8:	200000de 	.word	0x200000de

080011dc <time_get>:
__STATIC_INLINE void time_get(void){
 80011dc:	b510      	push	{r4, lr}
	DS3231_get_time(&time.sec, &time.min, &time.hour);
 80011de:	4c06      	ldr	r4, [pc, #24]	; (80011f8 <time_get+0x1c>)
 80011e0:	1ce2      	adds	r2, r4, #3
 80011e2:	1d21      	adds	r1, r4, #4
 80011e4:	1d60      	adds	r0, r4, #5
 80011e6:	f7ff fcef 	bl	8000bc8 <DS3231_get_time>
	DS3231_get_date(&time.day, &time.month, &time.year);
 80011ea:	0022      	movs	r2, r4
 80011ec:	1c61      	adds	r1, r4, #1
 80011ee:	1ca0      	adds	r0, r4, #2
 80011f0:	f7ff fd80 	bl	8000cf4 <DS3231_get_date>
}
 80011f4:	bd10      	pop	{r4, pc}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	2000002f 	.word	0x2000002f

080011fc <reset_value>:

__STATIC_INLINE void LCD_Clear(LCD_COLOR color){
	LCD_FillScreen(color);
}

__STATIC_INLINE void reset_value(void){
 80011fc:	b510      	push	{r4, lr}
	backupM = modeF;
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <reset_value+0x2c>)
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <reset_value+0x30>)
 8001202:	7811      	ldrb	r1, [r2, #0]
 8001204:	7019      	strb	r1, [r3, #0]
	touched_check = none_xy;
 8001206:	2300      	movs	r3, #0
 8001208:	4909      	ldr	r1, [pc, #36]	; (8001230 <reset_value+0x34>)
	modeF = firF = buzM = 0;
 800120a:	7013      	strb	r3, [r2, #0]
	touched_check = none_xy;
 800120c:	700b      	strb	r3, [r1, #0]
	modeF = firF = buzM = 0;
 800120e:	4909      	ldr	r1, [pc, #36]	; (8001234 <reset_value+0x38>)
	XYsetZero;
 8001210:	4a09      	ldr	r2, [pc, #36]	; (8001238 <reset_value+0x3c>)
	modeF = firF = buzM = 0;
 8001212:	700b      	strb	r3, [r1, #0]
 8001214:	4909      	ldr	r1, [pc, #36]	; (800123c <reset_value+0x40>)
	XYsetZero;
 8001216:	8053      	strh	r3, [r2, #2]
	modeF = firF = buzM = 0;
 8001218:	700b      	strb	r3, [r1, #0]
	XYsetZero;
 800121a:	8013      	strh	r3, [r2, #0]
	LCD_Clear(set_bcolor);
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <reset_value+0x44>)
	LCD_FillScreen(color);
 800121e:	7818      	ldrb	r0, [r3, #0]
 8001220:	f7ff fed4 	bl	8000fcc <LCD_FillScreen>
}
 8001224:	bd10      	pop	{r4, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	200002bc 	.word	0x200002bc
 800122c:	200000d9 	.word	0x200000d9
 8001230:	200002c4 	.word	0x200002c4
 8001234:	200000dc 	.word	0x200000dc
 8001238:	200000de 	.word	0x200000de
 800123c:	200000e4 	.word	0x200000e4
 8001240:	2000002d 	.word	0x2000002d

08001244 <Init_setting>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Init_setting(SETTING_RESET_STATE state){
	switch(state){
 8001244:	2800      	cmp	r0, #0
 8001246:	d002      	beq.n	800124e <Init_setting+0xa>
 8001248:	2801      	cmp	r0, #1
 800124a:	d00b      	beq.n	8001264 <Init_setting+0x20>

		set_tcolor = black;
		set_bcolor = black;
		break;
	}
}
 800124c:	4770      	bx	lr
		coor_volume = 135;
 800124e:	2387      	movs	r3, #135	; 0x87
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <Init_setting+0x34>)
 8001252:	7013      	strb	r3, [r2, #0]
		coor_pitch = 135;
 8001254:	4a09      	ldr	r2, [pc, #36]	; (800127c <Init_setting+0x38>)
 8001256:	7013      	strb	r3, [r2, #0]
		set_bcolor = white;
 8001258:	2205      	movs	r2, #5
		set_tcolor = black;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <Init_setting+0x3c>)
 800125c:	7018      	strb	r0, [r3, #0]
		set_bcolor = white;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <Init_setting+0x40>)
 8001260:	701a      	strb	r2, [r3, #0]
}
 8001262:	e7f3      	b.n	800124c <Init_setting+0x8>
		coor_volume = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <Init_setting+0x34>)
 8001268:	7013      	strb	r3, [r2, #0]
		coor_pitch = 0;
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <Init_setting+0x38>)
 800126c:	7013      	strb	r3, [r2, #0]
		set_tcolor = black;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <Init_setting+0x3c>)
 8001270:	7013      	strb	r3, [r2, #0]
		set_bcolor = black;
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <Init_setting+0x40>)
 8001274:	7013      	strb	r3, [r2, #0]
}
 8001276:	e7e9      	b.n	800124c <Init_setting+0x8>
 8001278:	20000012 	.word	0x20000012
 800127c:	20000011 	.word	0x20000011
 8001280:	200002be 	.word	0x200002be
 8001284:	2000002d 	.word	0x2000002d

08001288 <color_save>:

void color_save(void){
 8001288:	b510      	push	{r4, lr}
	eepWrite(Text_Color_ADDR, set_tcolor);
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <color_save+0x24>)
 800128c:	781c      	ldrb	r4, [r3, #0]
	HAL_FLASHEx_DATAEEPROM_Unlock();
 800128e:	f001 ff35 	bl	80030fc <HAL_FLASHEx_DATAEEPROM_Unlock>
	*(__IO uint8_t*)(DATA_EEPROM_BASE + addr) = data;
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <color_save+0x28>)
 8001294:	701c      	strb	r4, [r3, #0]
	HAL_FLASHEx_DATAEEPROM_Lock();
 8001296:	f001 ff49 	bl	800312c <HAL_FLASHEx_DATAEEPROM_Lock>
	eepWrite(Background_Color_ADDR, set_bcolor);
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <color_save+0x2c>)
 800129c:	781c      	ldrb	r4, [r3, #0]
	HAL_FLASHEx_DATAEEPROM_Unlock();
 800129e:	f001 ff2d 	bl	80030fc <HAL_FLASHEx_DATAEEPROM_Unlock>
	*(__IO uint8_t*)(DATA_EEPROM_BASE + addr) = data;
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <color_save+0x30>)
 80012a4:	701c      	strb	r4, [r3, #0]
	HAL_FLASHEx_DATAEEPROM_Lock();
 80012a6:	f001 ff41 	bl	800312c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 80012aa:	bd10      	pop	{r4, pc}
 80012ac:	200002be 	.word	0x200002be
 80012b0:	08080001 	.word	0x08080001
 80012b4:	2000002d 	.word	0x2000002d
 80012b8:	08080000 	.word	0x08080000

080012bc <color_read>:
	return *(__IO uint8_t*)(DATA_EEPROM_BASE + addr);
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <color_read+0x14>)
 80012be:	781a      	ldrb	r2, [r3, #0]

void color_read(void){
	set_tcolor = eepRead(Text_Color_ADDR);
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <color_read+0x18>)
 80012c2:	701a      	strb	r2, [r3, #0]
	return *(__IO uint8_t*)(DATA_EEPROM_BASE + addr);
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <color_read+0x1c>)
 80012c6:	781a      	ldrb	r2, [r3, #0]
	set_bcolor = eepRead(Background_Color_ADDR);
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <color_read+0x20>)
 80012ca:	701a      	strb	r2, [r3, #0]
}
 80012cc:	4770      	bx	lr
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	08080001 	.word	0x08080001
 80012d4:	200002be 	.word	0x200002be
 80012d8:	08080000 	.word	0x08080000
 80012dc:	2000002d 	.word	0x2000002d

080012e0 <VP_save>:

void VP_save(void){
 80012e0:	b510      	push	{r4, lr}
	eepWrite(Pitch_ADDR, coor_pitch);
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <VP_save+0x24>)
 80012e4:	781c      	ldrb	r4, [r3, #0]
	HAL_FLASHEx_DATAEEPROM_Unlock();
 80012e6:	f001 ff09 	bl	80030fc <HAL_FLASHEx_DATAEEPROM_Unlock>
	*(__IO uint8_t*)(DATA_EEPROM_BASE + addr) = data;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <VP_save+0x28>)
 80012ec:	701c      	strb	r4, [r3, #0]
	HAL_FLASHEx_DATAEEPROM_Lock();
 80012ee:	f001 ff1d 	bl	800312c <HAL_FLASHEx_DATAEEPROM_Lock>
	eepWrite(Volume_ADDR, coor_volume);
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <VP_save+0x2c>)
 80012f4:	781c      	ldrb	r4, [r3, #0]
	HAL_FLASHEx_DATAEEPROM_Unlock();
 80012f6:	f001 ff01 	bl	80030fc <HAL_FLASHEx_DATAEEPROM_Unlock>
	*(__IO uint8_t*)(DATA_EEPROM_BASE + addr) = data;
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <VP_save+0x30>)
 80012fc:	701c      	strb	r4, [r3, #0]
	HAL_FLASHEx_DATAEEPROM_Lock();
 80012fe:	f001 ff15 	bl	800312c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8001302:	bd10      	pop	{r4, pc}
 8001304:	20000011 	.word	0x20000011
 8001308:	08080003 	.word	0x08080003
 800130c:	20000012 	.word	0x20000012
 8001310:	08080002 	.word	0x08080002

08001314 <VP_read>:
	return *(__IO uint8_t*)(DATA_EEPROM_BASE + addr);
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <VP_read+0x14>)
 8001316:	781a      	ldrb	r2, [r3, #0]

void VP_read(void){
	coor_pitch = eepRead(Pitch_ADDR);
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <VP_read+0x18>)
 800131a:	701a      	strb	r2, [r3, #0]
	return *(__IO uint8_t*)(DATA_EEPROM_BASE + addr);
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <VP_read+0x1c>)
 800131e:	781a      	ldrb	r2, [r3, #0]
	coor_volume = eepRead(Volume_ADDR);
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <VP_read+0x20>)
 8001322:	701a      	strb	r2, [r3, #0]
}
 8001324:	4770      	bx	lr
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	08080003 	.word	0x08080003
 800132c:	20000011 	.word	0x20000011
 8001330:	08080002 	.word	0x08080002
 8001334:	20000012 	.word	0x20000012

08001338 <All_eepRead>:

void All_eepRead(void){
 8001338:	b510      	push	{r4, lr}
	VP_read();
 800133a:	f7ff ffeb 	bl	8001314 <VP_read>
	color_read();
 800133e:	f7ff ffbd 	bl	80012bc <color_read>
}
 8001342:	bd10      	pop	{r4, pc}

08001344 <All_eepWrite>:

void All_eepWrite(void){
 8001344:	b510      	push	{r4, lr}
	VP_save();
 8001346:	f7ff ffcb 	bl	80012e0 <VP_save>
	color_save();
 800134a:	f7ff ff9d 	bl	8001288 <color_save>
}
 800134e:	bd10      	pop	{r4, pc}

08001350 <LCD_putsXY>:

void LCD_putsXY(uint16_t x, uint16_t y, char* str, LCD_COLOR color, LCD_COLOR bg_color){
 8001350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001352:	0014      	movs	r4, r2
 8001354:	aa06      	add	r2, sp, #24
 8001356:	7815      	ldrb	r5, [r2, #0]
	LCD_DrawText(str, x * 15, y * 19, color, bg_color);
 8001358:	2213      	movs	r2, #19
 800135a:	434a      	muls	r2, r1
 800135c:	210f      	movs	r1, #15
 800135e:	4341      	muls	r1, r0
 8001360:	9500      	str	r5, [sp, #0]
 8001362:	0020      	movs	r0, r4
 8001364:	b292      	uxth	r2, r2
 8001366:	b289      	uxth	r1, r1
 8001368:	f7ff fee8 	bl	800113c <LCD_DrawText>
}
 800136c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	...

08001370 <array_puts>:

void array_puts(POS* pos, char* title, char** arr, LCD_COLOR* color, LCD_COLOR* bg_color, uint8_t num){
 8001370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001372:	b087      	sub	sp, #28
 8001374:	001e      	movs	r6, r3
 8001376:	ab0c      	add	r3, sp, #48	; 0x30
 8001378:	cb80      	ldmia	r3!, {r7}
 800137a:	9203      	str	r2, [sp, #12]
 800137c:	781b      	ldrb	r3, [r3, #0]
	LCD_putsXY(0, 0, title, set_tcolor, set_bcolor);
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <array_puts+0x54>)
void array_puts(POS* pos, char* title, char** arr, LCD_COLOR* color, LCD_COLOR* bg_color, uint8_t num){
 8001380:	9304      	str	r3, [sp, #16]
	LCD_DrawText(str, x * 15, y * 19, color, bg_color);
 8001382:	7812      	ldrb	r2, [r2, #0]
	LCD_putsXY(0, 0, title, set_tcolor, set_bcolor);
 8001384:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <array_puts+0x58>)
void array_puts(POS* pos, char* title, char** arr, LCD_COLOR* color, LCD_COLOR* bg_color, uint8_t num){
 8001386:	0004      	movs	r4, r0
	LCD_DrawText(str, x * 15, y * 19, color, bg_color);
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	9200      	str	r2, [sp, #0]
 800138c:	2200      	movs	r2, #0
void array_puts(POS* pos, char* title, char** arr, LCD_COLOR* color, LCD_COLOR* bg_color, uint8_t num){
 800138e:	0008      	movs	r0, r1
	LCD_DrawText(str, x * 15, y * 19, color, bg_color);
 8001390:	0011      	movs	r1, r2
 8001392:	f7ff fed3 	bl	800113c <LCD_DrawText>
	for(uint8_t i = 0 ; i < num ; i++)
 8001396:	2500      	movs	r5, #0
 8001398:	9b04      	ldr	r3, [sp, #16]
 800139a:	429d      	cmp	r5, r3
 800139c:	d101      	bne.n	80013a2 <array_puts+0x32>
		LCD_putsXY(pos[i].x, pos[i].y, arr[i], color[i], bg_color[i]);
}
 800139e:	b007      	add	sp, #28
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LCD_putsXY(pos[i].x, pos[i].y, arr[i], color[i], bg_color[i]);
 80013a2:	00aa      	lsls	r2, r5, #2
 80013a4:	0011      	movs	r1, r2
 80013a6:	8862      	ldrh	r2, [r4, #2]
 80013a8:	5d73      	ldrb	r3, [r6, r5]
 80013aa:	9205      	str	r2, [sp, #20]
 80013ac:	5d7a      	ldrb	r2, [r7, r5]
 80013ae:	8820      	ldrh	r0, [r4, #0]
 80013b0:	9200      	str	r2, [sp, #0]
 80013b2:	9a03      	ldr	r2, [sp, #12]
 80013b4:	3501      	adds	r5, #1
 80013b6:	5852      	ldr	r2, [r2, r1]
 80013b8:	9905      	ldr	r1, [sp, #20]
 80013ba:	f7ff ffc9 	bl	8001350 <LCD_putsXY>
	for(uint8_t i = 0 ; i < num ; i++)
 80013be:	3404      	adds	r4, #4
 80013c0:	e7ea      	b.n	8001398 <array_puts+0x28>
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	2000002d 	.word	0x2000002d
 80013c8:	200002be 	.word	0x200002be

080013cc <time_setting>:

void time_setting(TIME_LOAD_STATE state){
 80013cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ce:	b0bb      	sub	sp, #236	; 0xec
 80013d0:	0004      	movs	r4, r0
	uint8_t sel = 0;
	TIME set_time = { 23, 6, 22, 0, 0, 0 };

	POS pos[9] = {{5, 4}, {10, 4}, {14, 4}, {6, 5}, {10, 5}, {14, 5}, {7, 8}, {12, 8}, {17, 10}};
 80013d2:	2224      	movs	r2, #36	; 0x24
 80013d4:	49cd      	ldr	r1, [pc, #820]	; (800170c <time_setting+0x340>)
 80013d6:	a80a      	add	r0, sp, #40	; 0x28
 80013d8:	f003 fc1e 	bl	8004c18 <memcpy>
	char bf[6][20];

	if(state == load_time){
 80013dc:	2c01      	cmp	r4, #1
 80013de:	d000      	beq.n	80013e2 <time_setting+0x16>
 80013e0:	e118      	b.n	8001614 <time_setting+0x248>
		time_get();
 80013e2:	f7ff fefb 	bl	80011dc <time_get>
		set_time = time;
 80013e6:	4bca      	ldr	r3, [pc, #808]	; (8001710 <time_setting+0x344>)
 80013e8:	781a      	ldrb	r2, [r3, #0]
 80013ea:	9205      	str	r2, [sp, #20]
 80013ec:	785a      	ldrb	r2, [r3, #1]
 80013ee:	9204      	str	r2, [sp, #16]
 80013f0:	78da      	ldrb	r2, [r3, #3]
 80013f2:	789d      	ldrb	r5, [r3, #2]
 80013f4:	9203      	str	r2, [sp, #12]
 80013f6:	791e      	ldrb	r6, [r3, #4]
 80013f8:	795f      	ldrb	r7, [r3, #5]
	}

	LCD_Clear(set_bcolor);
 80013fa:	4bc6      	ldr	r3, [pc, #792]	; (8001714 <time_setting+0x348>)
	LCD_FillScreen(color);
 80013fc:	7818      	ldrb	r0, [r3, #0]
 80013fe:	f7ff fde5 	bl	8000fcc <LCD_FillScreen>
	uint8_t sel = 0;
 8001402:	2400      	movs	r4, #0
	while(1){
		if(!firF){
 8001404:	49c4      	ldr	r1, [pc, #784]	; (8001718 <time_setting+0x34c>)
 8001406:	780a      	ldrb	r2, [r1, #0]
 8001408:	2a00      	cmp	r2, #0
 800140a:	d110      	bne.n	800142e <time_setting+0x62>
			firF = 1;

			XYsetZero;

			LCD_putsXY(6, 1, "< Time Setting >", set_tcolor, set_bcolor);
 800140c:	4bc3      	ldr	r3, [pc, #780]	; (800171c <time_setting+0x350>)
 800140e:	48c1      	ldr	r0, [pc, #772]	; (8001714 <time_setting+0x348>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	7800      	ldrb	r0, [r0, #0]
 8001414:	469c      	mov	ip, r3
			firF = 1;
 8001416:	2301      	movs	r3, #1
 8001418:	700b      	strb	r3, [r1, #0]
			XYsetZero;
 800141a:	49c1      	ldr	r1, [pc, #772]	; (8001720 <time_setting+0x354>)
	LCD_DrawText(str, x * 15, y * 19, color, bg_color);
 800141c:	4663      	mov	r3, ip
			XYsetZero;
 800141e:	804a      	strh	r2, [r1, #2]
 8001420:	800a      	strh	r2, [r1, #0]
	LCD_DrawText(str, x * 15, y * 19, color, bg_color);
 8001422:	9000      	str	r0, [sp, #0]
 8001424:	215a      	movs	r1, #90	; 0x5a
 8001426:	48bf      	ldr	r0, [pc, #764]	; (8001724 <time_setting+0x358>)
 8001428:	3213      	adds	r2, #19
 800142a:	f7ff fe87 	bl	800113c <LCD_DrawText>
		}

		for(uint8_t i = 0 ; i < 9 ; i++){
			back_color[i] = set_bcolor;
 800142e:	4bb9      	ldr	r3, [pc, #740]	; (8001714 <time_setting+0x348>)
			if(sel == i) {
				if(set_tcolor == white && set_bcolor == black) txt_color[i] = blue;
				else{
					txt_color[i] = (set_tcolor + 1) % 7;
 8001430:	2107      	movs	r1, #7
			back_color[i] = set_bcolor;
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	9306      	str	r3, [sp, #24]
					if(txt_color[i] == set_bcolor) txt_color[i] = (set_bcolor + 1) % 7;
				}
			}
			else txt_color[i] = set_tcolor;
 8001436:	4bb9      	ldr	r3, [pc, #740]	; (800171c <time_setting+0x350>)
 8001438:	781b      	ldrb	r3, [r3, #0]
					txt_color[i] = (set_tcolor + 1) % 7;
 800143a:	1c58      	adds	r0, r3, #1
			else txt_color[i] = set_tcolor;
 800143c:	9307      	str	r3, [sp, #28]
					txt_color[i] = (set_tcolor + 1) % 7;
 800143e:	f7fe ffef 	bl	8000420 <__aeabi_idivmod>
 8001442:	b2cb      	uxtb	r3, r1
					if(txt_color[i] == set_bcolor) txt_color[i] = (set_bcolor + 1) % 7;
 8001444:	1c48      	adds	r0, r1, #1
 8001446:	2107      	movs	r1, #7
					txt_color[i] = (set_tcolor + 1) % 7;
 8001448:	9308      	str	r3, [sp, #32]
					if(txt_color[i] == set_bcolor) txt_color[i] = (set_bcolor + 1) % 7;
 800144a:	f7fe ffe9 	bl	8000420 <__aeabi_idivmod>
			back_color[i] = set_bcolor;
 800144e:	2209      	movs	r2, #9
					if(txt_color[i] == set_bcolor) txt_color[i] = (set_bcolor + 1) % 7;
 8001450:	b2cb      	uxtb	r3, r1
			back_color[i] = set_bcolor;
 8001452:	48b5      	ldr	r0, [pc, #724]	; (8001728 <time_setting+0x35c>)
 8001454:	9906      	ldr	r1, [sp, #24]
					if(txt_color[i] == set_bcolor) txt_color[i] = (set_bcolor + 1) % 7;
 8001456:	9309      	str	r3, [sp, #36]	; 0x24
			back_color[i] = set_bcolor;
 8001458:	f003 fbe7 	bl	8004c2a <memset>
 800145c:	2300      	movs	r3, #0
 800145e:	4ab3      	ldr	r2, [pc, #716]	; (800172c <time_setting+0x360>)
				if(set_tcolor == white && set_bcolor == black) txt_color[i] = blue;
 8001460:	9907      	ldr	r1, [sp, #28]
			if(sel == i) {
 8001462:	429c      	cmp	r4, r3
 8001464:	d107      	bne.n	8001476 <time_setting+0xaa>
				if(set_tcolor == white && set_bcolor == black) txt_color[i] = blue;
 8001466:	2905      	cmp	r1, #5
 8001468:	d000      	beq.n	800146c <time_setting+0xa0>
 800146a:	e0dc      	b.n	8001626 <time_setting+0x25a>
 800146c:	9906      	ldr	r1, [sp, #24]
 800146e:	2900      	cmp	r1, #0
 8001470:	d000      	beq.n	8001474 <time_setting+0xa8>
 8001472:	e0d8      	b.n	8001626 <time_setting+0x25a>
 8001474:	3101      	adds	r1, #1
		for(uint8_t i = 0 ; i < 9 ; i++){
 8001476:	3301      	adds	r3, #1
 8001478:	b2db      	uxtb	r3, r3
			else txt_color[i] = set_tcolor;
 800147a:	7011      	strb	r1, [r2, #0]
		for(uint8_t i = 0 ; i < 9 ; i++){
 800147c:	3201      	adds	r2, #1
 800147e:	2b09      	cmp	r3, #9
 8001480:	d1ee      	bne.n	8001460 <time_setting+0x94>
		}
		if(set_time.day > lastDay[set_time.month - 1]) set_time.day = lastDay[set_time.month - 1];
 8001482:	9a04      	ldr	r2, [sp, #16]
 8001484:	4baa      	ldr	r3, [pc, #680]	; (8001730 <time_setting+0x364>)
 8001486:	189b      	adds	r3, r3, r2
 8001488:	3b01      	subs	r3, #1
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	9306      	str	r3, [sp, #24]
 800148e:	466b      	mov	r3, sp
 8001490:	9a06      	ldr	r2, [sp, #24]
 8001492:	7e1b      	ldrb	r3, [r3, #24]
 8001494:	42aa      	cmp	r2, r5
 8001496:	d900      	bls.n	800149a <time_setting+0xce>
 8001498:	1c2b      	adds	r3, r5, #0

		sprintf(bf[0], "Y:%04d", 2000 + set_time.year);
 800149a:	22fa      	movs	r2, #250	; 0xfa
 800149c:	b2dd      	uxtb	r5, r3
 800149e:	9b05      	ldr	r3, [sp, #20]
 80014a0:	00d2      	lsls	r2, r2, #3
 80014a2:	189a      	adds	r2, r3, r2
 80014a4:	49a3      	ldr	r1, [pc, #652]	; (8001734 <time_setting+0x368>)
 80014a6:	a81c      	add	r0, sp, #112	; 0x70
 80014a8:	f003 fbc8 	bl	8004c3c <siprintf>
		sprintf(bf[1], "M:%02d", set_time.month);
 80014ac:	9a04      	ldr	r2, [sp, #16]
 80014ae:	49a2      	ldr	r1, [pc, #648]	; (8001738 <time_setting+0x36c>)
 80014b0:	a821      	add	r0, sp, #132	; 0x84
 80014b2:	f003 fbc3 	bl	8004c3c <siprintf>
		sprintf(bf[2], "D:%02d", set_time.day);
 80014b6:	002a      	movs	r2, r5
 80014b8:	49a0      	ldr	r1, [pc, #640]	; (800173c <time_setting+0x370>)
 80014ba:	a826      	add	r0, sp, #152	; 0x98
 80014bc:	f003 fbbe 	bl	8004c3c <siprintf>
		sprintf(bf[3], "H:%02d", set_time.hour);
 80014c0:	9a03      	ldr	r2, [sp, #12]
 80014c2:	499f      	ldr	r1, [pc, #636]	; (8001740 <time_setting+0x374>)
 80014c4:	a82b      	add	r0, sp, #172	; 0xac
 80014c6:	f003 fbb9 	bl	8004c3c <siprintf>
		sprintf(bf[4], "m:%02d", set_time.min);
 80014ca:	0032      	movs	r2, r6
 80014cc:	499d      	ldr	r1, [pc, #628]	; (8001744 <time_setting+0x378>)
 80014ce:	a830      	add	r0, sp, #192	; 0xc0
 80014d0:	f003 fbb4 	bl	8004c3c <siprintf>
		sprintf(bf[5], "S:%02d", set_time.sec);
 80014d4:	003a      	movs	r2, r7
 80014d6:	499c      	ldr	r1, [pc, #624]	; (8001748 <time_setting+0x37c>)
 80014d8:	a835      	add	r0, sp, #212	; 0xd4
 80014da:	f003 fbaf 	bl	8004c3c <siprintf>

		char* array[9] = { bf[0], bf[1], bf[2], bf[3], bf[4], bf[5], "UP", "DOWN", "OK!" };
 80014de:	ab1c      	add	r3, sp, #112	; 0x70
 80014e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80014e2:	ab21      	add	r3, sp, #132	; 0x84
 80014e4:	9314      	str	r3, [sp, #80]	; 0x50
 80014e6:	ab26      	add	r3, sp, #152	; 0x98
 80014e8:	9315      	str	r3, [sp, #84]	; 0x54
 80014ea:	ab2b      	add	r3, sp, #172	; 0xac
 80014ec:	9316      	str	r3, [sp, #88]	; 0x58
 80014ee:	ab30      	add	r3, sp, #192	; 0xc0
 80014f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80014f2:	ab35      	add	r3, sp, #212	; 0xd4
 80014f4:	9318      	str	r3, [sp, #96]	; 0x60
 80014f6:	4b95      	ldr	r3, [pc, #596]	; (800174c <time_setting+0x380>)
		array_puts(pos, "", array, txt_color, back_color, 9);
 80014f8:	4995      	ldr	r1, [pc, #596]	; (8001750 <time_setting+0x384>)
		char* array[9] = { bf[0], bf[1], bf[2], bf[3], bf[4], bf[5], "UP", "DOWN", "OK!" };
 80014fa:	9319      	str	r3, [sp, #100]	; 0x64
 80014fc:	4b95      	ldr	r3, [pc, #596]	; (8001754 <time_setting+0x388>)
		array_puts(pos, "", array, txt_color, back_color, 9);
 80014fe:	aa13      	add	r2, sp, #76	; 0x4c
		char* array[9] = { bf[0], bf[1], bf[2], bf[3], bf[4], bf[5], "UP", "DOWN", "OK!" };
 8001500:	931a      	str	r3, [sp, #104]	; 0x68
 8001502:	4b95      	ldr	r3, [pc, #596]	; (8001758 <time_setting+0x38c>)
		array_puts(pos, "", array, txt_color, back_color, 9);
 8001504:	a80a      	add	r0, sp, #40	; 0x28
		char* array[9] = { bf[0], bf[1], bf[2], bf[3], bf[4], bf[5], "UP", "DOWN", "OK!" };
 8001506:	931b      	str	r3, [sp, #108]	; 0x6c
		array_puts(pos, "", array, txt_color, back_color, 9);
 8001508:	2309      	movs	r3, #9
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	4b86      	ldr	r3, [pc, #536]	; (8001728 <time_setting+0x35c>)
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	4b86      	ldr	r3, [pc, #536]	; (800172c <time_setting+0x360>)
 8001512:	f7ff ff2d 	bl	8001370 <array_puts>

		if((curXY.x >0 || curXY.y > 0)){
 8001516:	4b82      	ldr	r3, [pc, #520]	; (8001720 <time_setting+0x354>)
 8001518:	2100      	movs	r1, #0
 800151a:	5e5a      	ldrsh	r2, [r3, r1]
 800151c:	2a00      	cmp	r2, #0
 800151e:	dc04      	bgt.n	800152a <time_setting+0x15e>
 8001520:	2202      	movs	r2, #2
 8001522:	5e9b      	ldrsh	r3, [r3, r2]
 8001524:	2b00      	cmp	r3, #0
 8001526:	dc00      	bgt.n	800152a <time_setting+0x15e>
 8001528:	e76c      	b.n	8001404 <time_setting+0x38>
			if(xy_check(17, 17 + strlen("OK!"), 10, 11))       break;
 800152a:	230b      	movs	r3, #11
 800152c:	220a      	movs	r2, #10
 800152e:	2114      	movs	r1, #20
 8001530:	2011      	movs	r0, #17
 8001532:	f7ff fe37 	bl	80011a4 <xy_check>
 8001536:	9007      	str	r0, [sp, #28]
 8001538:	2800      	cmp	r0, #0
 800153a:	d000      	beq.n	800153e <time_setting+0x172>
 800153c:	e110      	b.n	8001760 <time_setting+0x394>
			else if(xy_check(5, 5 + strlen(bf[0]), 4, 5))      sel = 0;
 800153e:	a81c      	add	r0, sp, #112	; 0x70
 8001540:	f7fe fde2 	bl	8000108 <strlen>
 8001544:	2305      	movs	r3, #5
 8001546:	3005      	adds	r0, #5
 8001548:	b281      	uxth	r1, r0
 800154a:	2204      	movs	r2, #4
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff fe29 	bl	80011a4 <xy_check>
 8001552:	2800      	cmp	r0, #0
 8001554:	d000      	beq.n	8001558 <time_setting+0x18c>
 8001556:	e754      	b.n	8001402 <time_setting+0x36>
			else if(xy_check(10, 10 + strlen(bf[1]), 4, 5))    sel = 1;
 8001558:	a821      	add	r0, sp, #132	; 0x84
 800155a:	f7fe fdd5 	bl	8000108 <strlen>
 800155e:	300a      	adds	r0, #10
 8001560:	b281      	uxth	r1, r0
 8001562:	2305      	movs	r3, #5
 8001564:	2204      	movs	r2, #4
 8001566:	200a      	movs	r0, #10
 8001568:	f7ff fe1c 	bl	80011a4 <xy_check>
 800156c:	2800      	cmp	r0, #0
 800156e:	d000      	beq.n	8001572 <time_setting+0x1a6>
 8001570:	e0c2      	b.n	80016f8 <time_setting+0x32c>
			else if(xy_check(14, 14 + strlen(bf[2]), 4, 5))    sel = 2;
 8001572:	a826      	add	r0, sp, #152	; 0x98
 8001574:	f7fe fdc8 	bl	8000108 <strlen>
 8001578:	300e      	adds	r0, #14
 800157a:	b281      	uxth	r1, r0
 800157c:	2305      	movs	r3, #5
 800157e:	2204      	movs	r2, #4
 8001580:	200e      	movs	r0, #14
 8001582:	f7ff fe0f 	bl	80011a4 <xy_check>
 8001586:	2800      	cmp	r0, #0
 8001588:	d000      	beq.n	800158c <time_setting+0x1c0>
 800158a:	e0b7      	b.n	80016fc <time_setting+0x330>
			else if(xy_check(6, 7 + strlen(bf[3]), 5, 6))      sel = 3;
 800158c:	a82b      	add	r0, sp, #172	; 0xac
 800158e:	f7fe fdbb 	bl	8000108 <strlen>
 8001592:	2306      	movs	r3, #6
 8001594:	3007      	adds	r0, #7
 8001596:	b281      	uxth	r1, r0
 8001598:	2205      	movs	r2, #5
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff fe02 	bl	80011a4 <xy_check>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d000      	beq.n	80015a6 <time_setting+0x1da>
 80015a4:	e0ac      	b.n	8001700 <time_setting+0x334>
			else if(xy_check(10, 10 + strlen(bf[4]), 5, 6))    sel = 4;
 80015a6:	a830      	add	r0, sp, #192	; 0xc0
 80015a8:	f7fe fdae 	bl	8000108 <strlen>
 80015ac:	300a      	adds	r0, #10
 80015ae:	b281      	uxth	r1, r0
 80015b0:	2306      	movs	r3, #6
 80015b2:	2205      	movs	r2, #5
 80015b4:	200a      	movs	r0, #10
 80015b6:	f7ff fdf5 	bl	80011a4 <xy_check>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d000      	beq.n	80015c0 <time_setting+0x1f4>
 80015be:	e0a1      	b.n	8001704 <time_setting+0x338>
			else if(xy_check(14, 14 + strlen(bf[5]), 5, 6))    sel = 5;
 80015c0:	a835      	add	r0, sp, #212	; 0xd4
 80015c2:	f7fe fda1 	bl	8000108 <strlen>
 80015c6:	300e      	adds	r0, #14
 80015c8:	b281      	uxth	r1, r0
 80015ca:	2306      	movs	r3, #6
 80015cc:	2205      	movs	r2, #5
 80015ce:	200e      	movs	r0, #14
 80015d0:	f7ff fde8 	bl	80011a4 <xy_check>
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d000      	beq.n	80015da <time_setting+0x20e>
 80015d8:	e096      	b.n	8001708 <time_setting+0x33c>
			else{
				static uint32_t frev_tick;
				uint32_t now_tick = HAL_GetTick();
 80015da:	f001 f9b3 	bl	8002944 <HAL_GetTick>
				if(now_tick - frev_tick > 500){
 80015de:	21fa      	movs	r1, #250	; 0xfa
 80015e0:	4a5e      	ldr	r2, [pc, #376]	; (800175c <time_setting+0x390>)
 80015e2:	0049      	lsls	r1, r1, #1
 80015e4:	6813      	ldr	r3, [r2, #0]
 80015e6:	1ac3      	subs	r3, r0, r3
 80015e8:	428b      	cmp	r3, r1
 80015ea:	d800      	bhi.n	80015ee <time_setting+0x222>
 80015ec:	e70a      	b.n	8001404 <time_setting+0x38>
					frev_tick = now_tick;
 80015ee:	6010      	str	r0, [r2, #0]
					if(xy_check(7, 7 + strlen("UP"), 7, 9)){
 80015f0:	2309      	movs	r3, #9
 80015f2:	2207      	movs	r2, #7
 80015f4:	0019      	movs	r1, r3
 80015f6:	0010      	movs	r0, r2
 80015f8:	f7ff fdd4 	bl	80011a4 <xy_check>
 80015fc:	2800      	cmp	r0, #0
 80015fe:	d046      	beq.n	800168e <time_setting+0x2c2>
						if(sel == 0 && set_time.year < 99)                                   set_time.year++;
 8001600:	2c00      	cmp	r4, #0
 8001602:	d118      	bne.n	8001636 <time_setting+0x26a>
 8001604:	9b05      	ldr	r3, [sp, #20]
 8001606:	2b62      	cmp	r3, #98	; 0x62
 8001608:	d900      	bls.n	800160c <time_setting+0x240>
 800160a:	e6fb      	b.n	8001404 <time_setting+0x38>
 800160c:	3301      	adds	r3, #1
						else if(sel == 3 && set_time.hour < 23)                              set_time.hour++;
						else if(sel == 4 && set_time.min < 59)                               set_time.min++;
						else if(sel == 5 && set_time.sec < 59)                               set_time.sec++;
					}
					else if(xy_check(12, 12 + strlen("DOWN"), 7, 9)){
						if(sel == 0 && set_time.year > 0)                                    set_time.year--;
 800160e:	b2db      	uxtb	r3, r3
 8001610:	9305      	str	r3, [sp, #20]
 8001612:	e6f7      	b.n	8001404 <time_setting+0x38>
	TIME set_time = { 23, 6, 22, 0, 0, 0 };
 8001614:	2306      	movs	r3, #6
 8001616:	2700      	movs	r7, #0
 8001618:	9304      	str	r3, [sp, #16]
 800161a:	3311      	adds	r3, #17
 800161c:	003e      	movs	r6, r7
 800161e:	2516      	movs	r5, #22
 8001620:	9703      	str	r7, [sp, #12]
 8001622:	9305      	str	r3, [sp, #20]
 8001624:	e6e9      	b.n	80013fa <time_setting+0x2e>
					if(txt_color[i] == set_bcolor) txt_color[i] = (set_bcolor + 1) % 7;
 8001626:	9906      	ldr	r1, [sp, #24]
 8001628:	9808      	ldr	r0, [sp, #32]
 800162a:	4281      	cmp	r1, r0
 800162c:	d001      	beq.n	8001632 <time_setting+0x266>
					txt_color[i] = (set_tcolor + 1) % 7;
 800162e:	0001      	movs	r1, r0
 8001630:	e721      	b.n	8001476 <time_setting+0xaa>
					if(txt_color[i] == set_bcolor) txt_color[i] = (set_bcolor + 1) % 7;
 8001632:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001634:	e71f      	b.n	8001476 <time_setting+0xaa>
						else if(sel == 1 && set_time.month < 12)                             set_time.month++;
 8001636:	2c01      	cmp	r4, #1
 8001638:	d107      	bne.n	800164a <time_setting+0x27e>
 800163a:	9b04      	ldr	r3, [sp, #16]
 800163c:	2b0b      	cmp	r3, #11
 800163e:	d900      	bls.n	8001642 <time_setting+0x276>
 8001640:	e6e0      	b.n	8001404 <time_setting+0x38>
 8001642:	3301      	adds	r3, #1
						else if(sel == 1 && set_time.month > 1)                              set_time.month--;
 8001644:	b2db      	uxtb	r3, r3
 8001646:	9304      	str	r3, [sp, #16]
 8001648:	e6dc      	b.n	8001404 <time_setting+0x38>
						else if(sel == 2 && set_time.day < lastDay[set_time.month - 1])      set_time.day++;
 800164a:	2c02      	cmp	r4, #2
 800164c:	d106      	bne.n	800165c <time_setting+0x290>
 800164e:	9b06      	ldr	r3, [sp, #24]
 8001650:	42ab      	cmp	r3, r5
 8001652:	d800      	bhi.n	8001656 <time_setting+0x28a>
 8001654:	e6d6      	b.n	8001404 <time_setting+0x38>
 8001656:	3501      	adds	r5, #1
						else if(sel == 2 && set_time.day > 1)                                set_time.day--;
 8001658:	b2ed      	uxtb	r5, r5
 800165a:	e6d3      	b.n	8001404 <time_setting+0x38>
						else if(sel == 3 && set_time.hour < 23)                              set_time.hour++;
 800165c:	2c03      	cmp	r4, #3
 800165e:	d107      	bne.n	8001670 <time_setting+0x2a4>
 8001660:	9b03      	ldr	r3, [sp, #12]
 8001662:	2b16      	cmp	r3, #22
 8001664:	d900      	bls.n	8001668 <time_setting+0x29c>
 8001666:	e6cd      	b.n	8001404 <time_setting+0x38>
 8001668:	3301      	adds	r3, #1
						else if(sel == 3 && set_time.hour > 0)                               set_time.hour--;
 800166a:	b2db      	uxtb	r3, r3
 800166c:	9303      	str	r3, [sp, #12]
 800166e:	e6c9      	b.n	8001404 <time_setting+0x38>
						else if(sel == 4 && set_time.min < 59)                               set_time.min++;
 8001670:	2c04      	cmp	r4, #4
 8001672:	d105      	bne.n	8001680 <time_setting+0x2b4>
 8001674:	2e3a      	cmp	r6, #58	; 0x3a
 8001676:	d900      	bls.n	800167a <time_setting+0x2ae>
 8001678:	e6c4      	b.n	8001404 <time_setting+0x38>
 800167a:	3601      	adds	r6, #1
						else if(sel == 4 && set_time.min > 0)                                set_time.min--;
 800167c:	b2f6      	uxtb	r6, r6
 800167e:	e6c1      	b.n	8001404 <time_setting+0x38>
						else if(sel == 5 && set_time.sec < 59)                               set_time.sec++;
 8001680:	2405      	movs	r4, #5
 8001682:	2f3a      	cmp	r7, #58	; 0x3a
 8001684:	d900      	bls.n	8001688 <time_setting+0x2bc>
 8001686:	e6bd      	b.n	8001404 <time_setting+0x38>
 8001688:	3701      	adds	r7, #1
						else if(sel == 5 && set_time.sec > 0)                                set_time.sec--;
 800168a:	b2ff      	uxtb	r7, r7
 800168c:	e6ba      	b.n	8001404 <time_setting+0x38>
					else if(xy_check(12, 12 + strlen("DOWN"), 7, 9)){
 800168e:	2309      	movs	r3, #9
 8001690:	2207      	movs	r2, #7
 8001692:	2110      	movs	r1, #16
 8001694:	200c      	movs	r0, #12
 8001696:	f7ff fd85 	bl	80011a4 <xy_check>
 800169a:	2800      	cmp	r0, #0
 800169c:	d100      	bne.n	80016a0 <time_setting+0x2d4>
 800169e:	e6b1      	b.n	8001404 <time_setting+0x38>
						if(sel == 0 && set_time.year > 0)                                    set_time.year--;
 80016a0:	2c00      	cmp	r4, #0
 80016a2:	d105      	bne.n	80016b0 <time_setting+0x2e4>
 80016a4:	9b05      	ldr	r3, [sp, #20]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d100      	bne.n	80016ac <time_setting+0x2e0>
 80016aa:	e6ab      	b.n	8001404 <time_setting+0x38>
 80016ac:	3b01      	subs	r3, #1
 80016ae:	e7ae      	b.n	800160e <time_setting+0x242>
						else if(sel == 1 && set_time.month > 1)                              set_time.month--;
 80016b0:	2c01      	cmp	r4, #1
 80016b2:	d105      	bne.n	80016c0 <time_setting+0x2f4>
 80016b4:	9b04      	ldr	r3, [sp, #16]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d800      	bhi.n	80016bc <time_setting+0x2f0>
 80016ba:	e6a3      	b.n	8001404 <time_setting+0x38>
 80016bc:	3b01      	subs	r3, #1
 80016be:	e7c1      	b.n	8001644 <time_setting+0x278>
						else if(sel == 2 && set_time.day > 1)                                set_time.day--;
 80016c0:	2c02      	cmp	r4, #2
 80016c2:	d104      	bne.n	80016ce <time_setting+0x302>
 80016c4:	2d01      	cmp	r5, #1
 80016c6:	d800      	bhi.n	80016ca <time_setting+0x2fe>
 80016c8:	e69c      	b.n	8001404 <time_setting+0x38>
 80016ca:	3d01      	subs	r5, #1
 80016cc:	e7c4      	b.n	8001658 <time_setting+0x28c>
						else if(sel == 3 && set_time.hour > 0)                               set_time.hour--;
 80016ce:	2c03      	cmp	r4, #3
 80016d0:	d105      	bne.n	80016de <time_setting+0x312>
 80016d2:	9b03      	ldr	r3, [sp, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d100      	bne.n	80016da <time_setting+0x30e>
 80016d8:	e694      	b.n	8001404 <time_setting+0x38>
 80016da:	3b01      	subs	r3, #1
 80016dc:	e7c5      	b.n	800166a <time_setting+0x29e>
						else if(sel == 4 && set_time.min > 0)                                set_time.min--;
 80016de:	2c04      	cmp	r4, #4
 80016e0:	d104      	bne.n	80016ec <time_setting+0x320>
 80016e2:	2e00      	cmp	r6, #0
 80016e4:	d100      	bne.n	80016e8 <time_setting+0x31c>
 80016e6:	e68d      	b.n	8001404 <time_setting+0x38>
 80016e8:	3e01      	subs	r6, #1
 80016ea:	e7c7      	b.n	800167c <time_setting+0x2b0>
						else if(sel == 5 && set_time.sec > 0)                                set_time.sec--;
 80016ec:	2405      	movs	r4, #5
 80016ee:	2f00      	cmp	r7, #0
 80016f0:	d100      	bne.n	80016f4 <time_setting+0x328>
 80016f2:	e687      	b.n	8001404 <time_setting+0x38>
 80016f4:	3f01      	subs	r7, #1
 80016f6:	e7c8      	b.n	800168a <time_setting+0x2be>
			else if(xy_check(10, 10 + strlen(bf[1]), 4, 5))    sel = 1;
 80016f8:	2401      	movs	r4, #1
 80016fa:	e683      	b.n	8001404 <time_setting+0x38>
			else if(xy_check(14, 14 + strlen(bf[2]), 4, 5))    sel = 2;
 80016fc:	2402      	movs	r4, #2
 80016fe:	e681      	b.n	8001404 <time_setting+0x38>
			else if(xy_check(6, 7 + strlen(bf[3]), 5, 6))      sel = 3;
 8001700:	2403      	movs	r4, #3
 8001702:	e67f      	b.n	8001404 <time_setting+0x38>
			else if(xy_check(10, 10 + strlen(bf[4]), 5, 6))    sel = 4;
 8001704:	2404      	movs	r4, #4
 8001706:	e67d      	b.n	8001404 <time_setting+0x38>
			else if(xy_check(14, 14 + strlen(bf[5]), 5, 6))    sel = 5;
 8001708:	2405      	movs	r4, #5
	while(1){
 800170a:	e67b      	b.n	8001404 <time_setting+0x38>
 800170c:	08005514 	.word	0x08005514
 8001710:	2000002f 	.word	0x2000002f
 8001714:	2000002d 	.word	0x2000002d
 8001718:	200000e4 	.word	0x200000e4
 800171c:	200002be 	.word	0x200002be
 8001720:	200000de 	.word	0x200000de
 8001724:	080055c8 	.word	0x080055c8
 8001728:	20000000 	.word	0x20000000
 800172c:	200002c5 	.word	0x200002c5
 8001730:	08005746 	.word	0x08005746
 8001734:	080055d9 	.word	0x080055d9
 8001738:	080055e0 	.word	0x080055e0
 800173c:	080055e7 	.word	0x080055e7
 8001740:	080055ee 	.word	0x080055ee
 8001744:	080055f5 	.word	0x080055f5
 8001748:	080055fc 	.word	0x080055fc
 800174c:	08005603 	.word	0x08005603
 8001750:	080056bd 	.word	0x080056bd
 8001754:	08005606 	.word	0x08005606
 8001758:	0800560b 	.word	0x0800560b
 800175c:	200000e8 	.word	0x200000e8
					}
				}
			}
		}
	}
	time = set_time;
 8001760:	4c0d      	ldr	r4, [pc, #52]	; (8001798 <time_setting+0x3cc>)
 8001762:	9b05      	ldr	r3, [sp, #20]
	DS3231_set_time(time.sec, time.min, time.hour);
 8001764:	0031      	movs	r1, r6
	time = set_time;
 8001766:	7023      	strb	r3, [r4, #0]
 8001768:	9b04      	ldr	r3, [sp, #16]
	DS3231_set_time(time.sec, time.min, time.hour);
 800176a:	0038      	movs	r0, r7
	time = set_time;
 800176c:	7063      	strb	r3, [r4, #1]
 800176e:	9b03      	ldr	r3, [sp, #12]
 8001770:	70a5      	strb	r5, [r4, #2]
	DS3231_set_time(time.sec, time.min, time.hour);
 8001772:	001a      	movs	r2, r3
	time = set_time;
 8001774:	70e3      	strb	r3, [r4, #3]
 8001776:	7126      	strb	r6, [r4, #4]
 8001778:	7167      	strb	r7, [r4, #5]
	DS3231_set_time(time.sec, time.min, time.hour);
 800177a:	f7ff f9ed 	bl	8000b58 <DS3231_set_time>
	DS3231_set_date(time.day, time.month, time.year);
 800177e:	7822      	ldrb	r2, [r4, #0]
 8001780:	7861      	ldrb	r1, [r4, #1]
 8001782:	78a0      	ldrb	r0, [r4, #2]
 8001784:	f7ff fa7e 	bl	8000c84 <DS3231_set_date>
	time_set();
	buzM = 1;
 8001788:	2201      	movs	r2, #1
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <time_setting+0x3d0>)
 800178c:	701a      	strb	r2, [r3, #0]
	firF = 0;
 800178e:	2200      	movs	r2, #0
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <time_setting+0x3d4>)
 8001792:	701a      	strb	r2, [r3, #0]
}
 8001794:	b03b      	add	sp, #236	; 0xec
 8001796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001798:	2000002f 	.word	0x2000002f
 800179c:	200000dc 	.word	0x200000dc
 80017a0:	200000e4 	.word	0x200000e4

080017a4 <main_mode>:
	if(state) time_setting(init_time);
	else LCD_Clear(set_bcolor);
	__HAL_RCC_CLEAR_RESET_FLAGS();
}

void main_mode(void){
 80017a4:	b570      	push	{r4, r5, r6, lr}
	if(!firF){
 80017a6:	4d52      	ldr	r5, [pc, #328]	; (80018f0 <main_mode+0x14c>)
 80017a8:	4c52      	ldr	r4, [pc, #328]	; (80018f4 <main_mode+0x150>)
 80017aa:	782b      	ldrb	r3, [r5, #0]
void main_mode(void){
 80017ac:	b096      	sub	sp, #88	; 0x58
	if(!firF){
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d115      	bne.n	80017de <main_mode+0x3a>
		firF = 1;
 80017b2:	2201      	movs	r2, #1
		XYsetZero;
		touched_check = have_xy;

		LCD_Clear(set_bcolor);
 80017b4:	4e50      	ldr	r6, [pc, #320]	; (80018f8 <main_mode+0x154>)
		XYsetZero;
 80017b6:	8063      	strh	r3, [r4, #2]
 80017b8:	8023      	strh	r3, [r4, #0]
		touched_check = have_xy;
 80017ba:	4b50      	ldr	r3, [pc, #320]	; (80018fc <main_mode+0x158>)
	LCD_FillScreen(color);
 80017bc:	7830      	ldrb	r0, [r6, #0]
		touched_check = have_xy;
 80017be:	701a      	strb	r2, [r3, #0]
		firF = 1;
 80017c0:	702a      	strb	r2, [r5, #0]
	LCD_FillScreen(color);
 80017c2:	f7ff fc03 	bl	8000fcc <LCD_FillScreen>

		for(uint8_t i = 0 ; i < 17 ; i++){
			txt_color[i] = set_tcolor;
 80017c6:	4b4e      	ldr	r3, [pc, #312]	; (8001900 <main_mode+0x15c>)
			back_color[i] = set_bcolor;
 80017c8:	7836      	ldrb	r6, [r6, #0]
			txt_color[i] = set_tcolor;
 80017ca:	2211      	movs	r2, #17
 80017cc:	7819      	ldrb	r1, [r3, #0]
 80017ce:	484d      	ldr	r0, [pc, #308]	; (8001904 <main_mode+0x160>)
 80017d0:	f003 fa2b 	bl	8004c2a <memset>
			back_color[i] = set_bcolor;
 80017d4:	2211      	movs	r2, #17
 80017d6:	0031      	movs	r1, r6
 80017d8:	484b      	ldr	r0, [pc, #300]	; (8001908 <main_mode+0x164>)
 80017da:	f003 fa26 	bl	8004c2a <memset>
		}
	}
	time_get();
 80017de:	f7ff fcfd 	bl	80011dc <time_get>
	char bf[40];
	POS pos[4] = {{0, 1}, {2, 4}, {2, 7}, {15, 1}};
 80017e2:	494a      	ldr	r1, [pc, #296]	; (800190c <main_mode+0x168>)
 80017e4:	2210      	movs	r2, #16
 80017e6:	3124      	adds	r1, #36	; 0x24
 80017e8:	a804      	add	r0, sp, #16
 80017ea:	f003 fa15 	bl	8004c18 <memcpy>
	sprintf(bf, "%04d.%02d.%02d %02d:%02d:%02d", 2000 + time.year, time.month, time.day, time.hour, time.min, time.sec);
 80017ee:	20fa      	movs	r0, #250	; 0xfa
 80017f0:	4947      	ldr	r1, [pc, #284]	; (8001910 <main_mode+0x16c>)
 80017f2:	00c0      	lsls	r0, r0, #3
 80017f4:	780a      	ldrb	r2, [r1, #0]
 80017f6:	784b      	ldrb	r3, [r1, #1]
 80017f8:	1812      	adds	r2, r2, r0
 80017fa:	7948      	ldrb	r0, [r1, #5]
 80017fc:	ae0c      	add	r6, sp, #48	; 0x30
 80017fe:	9003      	str	r0, [sp, #12]
 8001800:	7908      	ldrb	r0, [r1, #4]
 8001802:	9002      	str	r0, [sp, #8]
 8001804:	78c8      	ldrb	r0, [r1, #3]
 8001806:	9001      	str	r0, [sp, #4]
 8001808:	7889      	ldrb	r1, [r1, #2]
 800180a:	0030      	movs	r0, r6
 800180c:	9100      	str	r1, [sp, #0]
 800180e:	4941      	ldr	r1, [pc, #260]	; (8001914 <main_mode+0x170>)
 8001810:	f003 fa14 	bl	8004c3c <siprintf>

	char* array[4] = { bf, "1. Sound modulation", "2. Color Setting", "Back" };
 8001814:	4b40      	ldr	r3, [pc, #256]	; (8001918 <main_mode+0x174>)
	array_puts(pos, ">Main", array, txt_color, back_color, 4);
 8001816:	4941      	ldr	r1, [pc, #260]	; (800191c <main_mode+0x178>)
	char* array[4] = { bf, "1. Sound modulation", "2. Color Setting", "Back" };
 8001818:	9309      	str	r3, [sp, #36]	; 0x24
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <main_mode+0x17c>)
	array_puts(pos, ">Main", array, txt_color, back_color, 4);
 800181c:	aa08      	add	r2, sp, #32
	char* array[4] = { bf, "1. Sound modulation", "2. Color Setting", "Back" };
 800181e:	930a      	str	r3, [sp, #40]	; 0x28
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <main_mode+0x180>)
	array_puts(pos, ">Main", array, txt_color, back_color, 4);
 8001822:	a804      	add	r0, sp, #16
	char* array[4] = { bf, "1. Sound modulation", "2. Color Setting", "Back" };
 8001824:	930b      	str	r3, [sp, #44]	; 0x2c
	array_puts(pos, ">Main", array, txt_color, back_color, 4);
 8001826:	2304      	movs	r3, #4
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	4b37      	ldr	r3, [pc, #220]	; (8001908 <main_mode+0x164>)
	char* array[4] = { bf, "1. Sound modulation", "2. Color Setting", "Back" };
 800182c:	9608      	str	r6, [sp, #32]
	array_puts(pos, ">Main", array, txt_color, back_color, 4);
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	4b34      	ldr	r3, [pc, #208]	; (8001904 <main_mode+0x160>)
 8001832:	f7ff fd9d 	bl	8001370 <array_puts>

	if(touched() == none_xy && touched_check == have_xy) touched_check = none_xy;
 8001836:	f7ff fb4d 	bl	8000ed4 <touched>
 800183a:	2800      	cmp	r0, #0
 800183c:	d104      	bne.n	8001848 <main_mode+0xa4>
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <main_mode+0x158>)
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	2a01      	cmp	r2, #1
 8001844:	d100      	bne.n	8001848 <main_mode+0xa4>
 8001846:	7018      	strb	r0, [r3, #0]

	if((curXY.x > 0 || curXY.y > 0) && touched_check == none_xy){
 8001848:	2200      	movs	r2, #0
 800184a:	5ea3      	ldrsh	r3, [r4, r2]
 800184c:	2b00      	cmp	r3, #0
 800184e:	dc03      	bgt.n	8001858 <main_mode+0xb4>
 8001850:	2202      	movs	r2, #2
 8001852:	5ea3      	ldrsh	r3, [r4, r2]
 8001854:	2b00      	cmp	r3, #0
 8001856:	dd2e      	ble.n	80018b6 <main_mode+0x112>
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <main_mode+0x158>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d12a      	bne.n	80018b6 <main_mode+0x112>
		if(xy_check(2, 2 + strlen("1. Sound modulation") - 6, 4, 4 + 1))        {  reset_value(); modeF = sound_menu;   }
 8001860:	2204      	movs	r2, #4
 8001862:	210f      	movs	r1, #15
 8001864:	2002      	movs	r0, #2
 8001866:	3305      	adds	r3, #5
 8001868:	f7ff fc9c 	bl	80011a4 <xy_check>
 800186c:	2800      	cmp	r0, #0
 800186e:	d005      	beq.n	800187c <main_mode+0xd8>
 8001870:	f7ff fcc4 	bl	80011fc <reset_value>
 8001874:	2201      	movs	r2, #1
 8001876:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <main_mode+0x184>)
		else if(xy_check(2, 2 + strlen("2. Color Setting") - 6, 7, 7 + 1))      {  reset_value(); modeF = setting_menu; }
		else if(xy_check(0, strlen(bf) - 6, 1, 1 + 1))                          {  firF = 0; time_setting(load_time);   }
		else if(xy_check(15, 15 + strlen("Back"), 1, 1 + 1))                    {  reset_value(); system_reset();       }
		else if(xy_check(0, strlen(">Main"),0, 1))                              {  reset_value(); modeF = select_menu;  }
 8001878:	701a      	strb	r2, [r3, #0]
	}
}
 800187a:	e01c      	b.n	80018b6 <main_mode+0x112>
		else if(xy_check(2, 2 + strlen("2. Color Setting") - 6, 7, 7 + 1))      {  reset_value(); modeF = setting_menu; }
 800187c:	2308      	movs	r3, #8
 800187e:	2207      	movs	r2, #7
 8001880:	210c      	movs	r1, #12
 8001882:	2002      	movs	r0, #2
 8001884:	f7ff fc8e 	bl	80011a4 <xy_check>
 8001888:	1e04      	subs	r4, r0, #0
 800188a:	d004      	beq.n	8001896 <main_mode+0xf2>
 800188c:	f7ff fcb6 	bl	80011fc <reset_value>
 8001890:	2202      	movs	r2, #2
 8001892:	4b25      	ldr	r3, [pc, #148]	; (8001928 <main_mode+0x184>)
 8001894:	e7f0      	b.n	8001878 <main_mode+0xd4>
		else if(xy_check(0, strlen(bf) - 6, 1, 1 + 1))                          {  firF = 0; time_setting(load_time);   }
 8001896:	0030      	movs	r0, r6
 8001898:	f7fe fc36 	bl	8000108 <strlen>
 800189c:	3806      	subs	r0, #6
 800189e:	b281      	uxth	r1, r0
 80018a0:	2302      	movs	r3, #2
 80018a2:	2201      	movs	r2, #1
 80018a4:	0020      	movs	r0, r4
 80018a6:	f7ff fc7d 	bl	80011a4 <xy_check>
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d005      	beq.n	80018ba <main_mode+0x116>
 80018ae:	2001      	movs	r0, #1
 80018b0:	702c      	strb	r4, [r5, #0]
 80018b2:	f7ff fd8b 	bl	80013cc <time_setting>
}
 80018b6:	b016      	add	sp, #88	; 0x58
 80018b8:	bd70      	pop	{r4, r5, r6, pc}
		else if(xy_check(15, 15 + strlen("Back"), 1, 1 + 1))                    {  reset_value(); system_reset();       }
 80018ba:	2302      	movs	r3, #2
 80018bc:	2201      	movs	r2, #1
 80018be:	2113      	movs	r1, #19
 80018c0:	200f      	movs	r0, #15
 80018c2:	f7ff fc6f 	bl	80011a4 <xy_check>
 80018c6:	2800      	cmp	r0, #0
 80018c8:	d006      	beq.n	80018d8 <main_mode+0x134>
 80018ca:	f7ff fc97 	bl	80011fc <reset_value>
	HAL_DeInit();
 80018ce:	f000 ffe1 	bl	8002894 <HAL_DeInit>
	HAL_NVIC_SystemReset();
 80018d2:	f001 fa9b 	bl	8002e0c <HAL_NVIC_SystemReset>
}
 80018d6:	e7ee      	b.n	80018b6 <main_mode+0x112>
		else if(xy_check(0, strlen(">Main"),0, 1))                              {  reset_value(); modeF = select_menu;  }
 80018d8:	2301      	movs	r3, #1
 80018da:	0002      	movs	r2, r0
 80018dc:	2105      	movs	r1, #5
 80018de:	f7ff fc61 	bl	80011a4 <xy_check>
 80018e2:	2800      	cmp	r0, #0
 80018e4:	d0e7      	beq.n	80018b6 <main_mode+0x112>
 80018e6:	f7ff fc89 	bl	80011fc <reset_value>
 80018ea:	2203      	movs	r2, #3
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <main_mode+0x184>)
 80018ee:	e7c3      	b.n	8001878 <main_mode+0xd4>
 80018f0:	200000e4 	.word	0x200000e4
 80018f4:	200000de 	.word	0x200000de
 80018f8:	2000002d 	.word	0x2000002d
 80018fc:	200002c4 	.word	0x200002c4
 8001900:	200002be 	.word	0x200002be
 8001904:	200002c5 	.word	0x200002c5
 8001908:	20000000 	.word	0x20000000
 800190c:	08005514 	.word	0x08005514
 8001910:	2000002f 	.word	0x2000002f
 8001914:	0800560f 	.word	0x0800560f
 8001918:	0800562d 	.word	0x0800562d
 800191c:	08005657 	.word	0x08005657
 8001920:	08005641 	.word	0x08005641
 8001924:	08005652 	.word	0x08005652
 8001928:	200002bc 	.word	0x200002bc

0800192c <modulation_mode>:

void modulation_mode(void){
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 800192e:	4ba0      	ldr	r3, [pc, #640]	; (8001bb0 <modulation_mode+0x284>)
void modulation_mode(void){
 8001930:	b0a1      	sub	sp, #132	; 0x84
	if(!firF){
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d117      	bne.n	8001968 <modulation_mode+0x3c>
		firF = 1;
 8001938:	2201      	movs	r2, #1
 800193a:	499d      	ldr	r1, [pc, #628]	; (8001bb0 <modulation_mode+0x284>)

		XYsetZero;
		touched_check = have_xy;

		LCD_Clear(set_bcolor);
 800193c:	4c9d      	ldr	r4, [pc, #628]	; (8001bb4 <modulation_mode+0x288>)
		firF = 1;
 800193e:	700a      	strb	r2, [r1, #0]
		XYsetZero;
 8001940:	499d      	ldr	r1, [pc, #628]	; (8001bb8 <modulation_mode+0x28c>)
	LCD_FillScreen(color);
 8001942:	7820      	ldrb	r0, [r4, #0]
		XYsetZero;
 8001944:	804b      	strh	r3, [r1, #2]
 8001946:	800b      	strh	r3, [r1, #0]
		touched_check = have_xy;
 8001948:	4b9c      	ldr	r3, [pc, #624]	; (8001bbc <modulation_mode+0x290>)
 800194a:	701a      	strb	r2, [r3, #0]
	LCD_FillScreen(color);
 800194c:	f7ff fb3e 	bl	8000fcc <LCD_FillScreen>

		for(uint8_t i = 0 ; i < 17 ; i++){
			txt_color[i] = set_tcolor;
 8001950:	4b9b      	ldr	r3, [pc, #620]	; (8001bc0 <modulation_mode+0x294>)
			back_color[i] = set_bcolor;
 8001952:	7824      	ldrb	r4, [r4, #0]
			txt_color[i] = set_tcolor;
 8001954:	2211      	movs	r2, #17
 8001956:	7819      	ldrb	r1, [r3, #0]
 8001958:	489a      	ldr	r0, [pc, #616]	; (8001bc4 <modulation_mode+0x298>)
 800195a:	f003 f966 	bl	8004c2a <memset>
			back_color[i] = set_bcolor;
 800195e:	2211      	movs	r2, #17
 8001960:	0021      	movs	r1, r4
 8001962:	4899      	ldr	r0, [pc, #612]	; (8001bc8 <modulation_mode+0x29c>)
 8001964:	f003 f961 	bl	8004c2a <memset>
		}
	}

	for(PITCH_STATE i = PITCH_STATE_0 ; i <= PITCH_STATE_10 ; i++){
		if(coor_pitch >= 60 + (14 * i) && coor_pitch <= 74 + (14 * i)){
 8001968:	4b98      	ldr	r3, [pc, #608]	; (8001bcc <modulation_mode+0x2a0>)
 800196a:	200e      	movs	r0, #14
 800196c:	7819      	ldrb	r1, [r3, #0]
 800196e:	2300      	movs	r3, #0
 8001970:	0002      	movs	r2, r0
 8001972:	435a      	muls	r2, r3
 8001974:	0015      	movs	r5, r2
 8001976:	353b      	adds	r5, #59	; 0x3b
 8001978:	b2dc      	uxtb	r4, r3
 800197a:	42a9      	cmp	r1, r5
 800197c:	dc00      	bgt.n	8001980 <modulation_mode+0x54>
 800197e:	e0b2      	b.n	8001ae6 <modulation_mode+0x1ba>
 8001980:	324a      	adds	r2, #74	; 0x4a
 8001982:	4291      	cmp	r1, r2
 8001984:	dd00      	ble.n	8001988 <modulation_mode+0x5c>
 8001986:	e0ae      	b.n	8001ae6 <modulation_mode+0x1ba>
			pitch_state = i;
 8001988:	4b91      	ldr	r3, [pc, #580]	; (8001bd0 <modulation_mode+0x2a4>)
 800198a:	701c      	strb	r4, [r3, #0]
			break;
		}
	}

	max_volume = coor_volume - 60;
 800198c:	4d91      	ldr	r5, [pc, #580]	; (8001bd4 <modulation_mode+0x2a8>)
 800198e:	4a92      	ldr	r2, [pc, #584]	; (8001bd8 <modulation_mode+0x2ac>)
 8001990:	782b      	ldrb	r3, [r5, #0]
 8001992:	3b3c      	subs	r3, #60	; 0x3c
 8001994:	b29b      	uxth	r3, r3
	if(max_volume > 100) max_volume = 100;
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d900      	bls.n	800199c <modulation_mode+0x70>
 800199a:	e0a9      	b.n	8001af0 <modulation_mode+0x1c4>
 800199c:	8013      	strh	r3, [r2, #0]

	time_get();
 800199e:	f7ff fc1d 	bl	80011dc <time_get>
	char bf[3][20];
	POS pos[6] = {{0, 1}, {15, 1}, {1, 4}, {1, 6}, {1, 8}, {5, 4},};
 80019a2:	498e      	ldr	r1, [pc, #568]	; (8001bdc <modulation_mode+0x2b0>)
 80019a4:	2218      	movs	r2, #24
 80019a6:	3134      	adds	r1, #52	; 0x34
 80019a8:	a805      	add	r0, sp, #20
 80019aa:	f003 f935 	bl	8004c18 <memcpy>
	sprintf(bf[0], "%04d.%02d.%02d %02d:%02d:%02d", 2000 + time.year, time.month, time.day, time.hour, time.min, time.sec);
 80019ae:	20fa      	movs	r0, #250	; 0xfa
 80019b0:	498b      	ldr	r1, [pc, #556]	; (8001be0 <modulation_mode+0x2b4>)
 80019b2:	00c0      	lsls	r0, r0, #3
 80019b4:	780a      	ldrb	r2, [r1, #0]
 80019b6:	784b      	ldrb	r3, [r1, #1]
 80019b8:	1812      	adds	r2, r2, r0
 80019ba:	7948      	ldrb	r0, [r1, #5]
 80019bc:	af11      	add	r7, sp, #68	; 0x44
 80019be:	9003      	str	r0, [sp, #12]
 80019c0:	7908      	ldrb	r0, [r1, #4]
	sprintf(bf[1], "Volume: %d   ", max_volume);
 80019c2:	ae16      	add	r6, sp, #88	; 0x58
	sprintf(bf[0], "%04d.%02d.%02d %02d:%02d:%02d", 2000 + time.year, time.month, time.day, time.hour, time.min, time.sec);
 80019c4:	9002      	str	r0, [sp, #8]
 80019c6:	78c8      	ldrb	r0, [r1, #3]
 80019c8:	9001      	str	r0, [sp, #4]
 80019ca:	7889      	ldrb	r1, [r1, #2]
 80019cc:	0038      	movs	r0, r7
 80019ce:	9100      	str	r1, [sp, #0]
 80019d0:	4984      	ldr	r1, [pc, #528]	; (8001be4 <modulation_mode+0x2b8>)
 80019d2:	f003 f933 	bl	8004c3c <siprintf>
	sprintf(bf[1], "Volume: %d   ", max_volume);
 80019d6:	4b80      	ldr	r3, [pc, #512]	; (8001bd8 <modulation_mode+0x2ac>)
 80019d8:	4983      	ldr	r1, [pc, #524]	; (8001be8 <modulation_mode+0x2bc>)
 80019da:	881a      	ldrh	r2, [r3, #0]
 80019dc:	0030      	movs	r0, r6
 80019de:	f003 f92d 	bl	8004c3c <siprintf>
	sprintf(bf[2], "Pitch: %d   ", pitch_state);
 80019e2:	4b7b      	ldr	r3, [pc, #492]	; (8001bd0 <modulation_mode+0x2a4>)
 80019e4:	4981      	ldr	r1, [pc, #516]	; (8001bec <modulation_mode+0x2c0>)
 80019e6:	781a      	ldrb	r2, [r3, #0]
 80019e8:	a81b      	add	r0, sp, #108	; 0x6c
 80019ea:	f003 f927 	bl	8004c3c <siprintf>

	txt_color[5] = sound_start == speaker_off ? set_tcolor : set_bcolor;
 80019ee:	4b80      	ldr	r3, [pc, #512]	; (8001bf0 <modulation_mode+0x2c4>)
 80019f0:	4c73      	ldr	r4, [pc, #460]	; (8001bc0 <modulation_mode+0x294>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d17d      	bne.n	8001af4 <modulation_mode+0x1c8>
 80019f8:	7822      	ldrb	r2, [r4, #0]
 80019fa:	4972      	ldr	r1, [pc, #456]	; (8001bc4 <modulation_mode+0x298>)
 80019fc:	714a      	strb	r2, [r1, #5]
	back_color[5] = sound_start == speaker_off ? set_bcolor : set_tcolor;
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d17b      	bne.n	8001afa <modulation_mode+0x1ce>
 8001a02:	4a6c      	ldr	r2, [pc, #432]	; (8001bb4 <modulation_mode+0x288>)
 8001a04:	7812      	ldrb	r2, [r2, #0]
 8001a06:	4970      	ldr	r1, [pc, #448]	; (8001bc8 <modulation_mode+0x29c>)

	char* array[6] = { bf[0], "Back", "Sound: ", bf[1], bf[2], sound_start == speaker_off ? "OFF " : "ON " };
 8001a08:	970b      	str	r7, [sp, #44]	; 0x2c
	back_color[5] = sound_start == speaker_off ? set_bcolor : set_tcolor;
 8001a0a:	714a      	strb	r2, [r1, #5]
	char* array[6] = { bf[0], "Back", "Sound: ", bf[1], bf[2], sound_start == speaker_off ? "OFF " : "ON " };
 8001a0c:	4a79      	ldr	r2, [pc, #484]	; (8001bf4 <modulation_mode+0x2c8>)
 8001a0e:	960e      	str	r6, [sp, #56]	; 0x38
 8001a10:	920c      	str	r2, [sp, #48]	; 0x30
 8001a12:	4a79      	ldr	r2, [pc, #484]	; (8001bf8 <modulation_mode+0x2cc>)
 8001a14:	920d      	str	r2, [sp, #52]	; 0x34
 8001a16:	aa1b      	add	r2, sp, #108	; 0x6c
 8001a18:	920f      	str	r2, [sp, #60]	; 0x3c
 8001a1a:	4a78      	ldr	r2, [pc, #480]	; (8001bfc <modulation_mode+0x2d0>)
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d000      	beq.n	8001a22 <modulation_mode+0xf6>
 8001a20:	4a77      	ldr	r2, [pc, #476]	; (8001c00 <modulation_mode+0x2d4>)
	array_puts(pos, ">Modulation", array, txt_color, back_color, 6);
 8001a22:	2306      	movs	r3, #6
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	4b68      	ldr	r3, [pc, #416]	; (8001bc8 <modulation_mode+0x29c>)
 8001a28:	4976      	ldr	r1, [pc, #472]	; (8001c04 <modulation_mode+0x2d8>)
	char* array[6] = { bf[0], "Back", "Sound: ", bf[1], bf[2], sound_start == speaker_off ? "OFF " : "ON " };
 8001a2a:	9210      	str	r2, [sp, #64]	; 0x40
	array_puts(pos, ">Modulation", array, txt_color, back_color, 6);
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8001a30:	4b64      	ldr	r3, [pc, #400]	; (8001bc4 <modulation_mode+0x298>)
 8001a32:	a805      	add	r0, sp, #20
 8001a34:	f7ff fc9c 	bl	8001370 <array_puts>

	/* Volume Bar Start */
	LCD_DrawHollowCircle(200, 60, 5, set_tcolor);
 8001a38:	2205      	movs	r2, #5
 8001a3a:	213c      	movs	r1, #60	; 0x3c
 8001a3c:	20c8      	movs	r0, #200	; 0xc8
 8001a3e:	7823      	ldrb	r3, [r4, #0]
 8001a40:	f7ff fb04 	bl	800104c <LCD_DrawHollowCircle>
	LCD_DrawHollowCircle(200, 210, 5, set_tcolor);
 8001a44:	2205      	movs	r2, #5
 8001a46:	21d2      	movs	r1, #210	; 0xd2
 8001a48:	20c8      	movs	r0, #200	; 0xc8
 8001a4a:	7823      	ldrb	r3, [r4, #0]
 8001a4c:	f7ff fafe 	bl	800104c <LCD_DrawHollowCircle>
	LCD_DrawVLine(200, 65, 141, set_tcolor);
 8001a50:	228d      	movs	r2, #141	; 0x8d
 8001a52:	2141      	movs	r1, #65	; 0x41
 8001a54:	20c8      	movs	r0, #200	; 0xc8
 8001a56:	7823      	ldrb	r3, [r4, #0]
 8001a58:	f7ff faca 	bl	8000ff0 <LCD_DrawVLine>
	LCD_DrawFilledCircle(200, (uint16_t)coor_volume, 10, set_tcolor);
 8001a5c:	220a      	movs	r2, #10
 8001a5e:	20c8      	movs	r0, #200	; 0xc8
 8001a60:	7823      	ldrb	r3, [r4, #0]
 8001a62:	7829      	ldrb	r1, [r5, #0]
 8001a64:	f7ff fb20 	bl	80010a8 <LCD_DrawFilledCircle>
	/* Volume Bar End */

	/* Pitch Bar Start */
	LCD_DrawHollowCircle(250, 60, 5, set_tcolor);
 8001a68:	2205      	movs	r2, #5
 8001a6a:	213c      	movs	r1, #60	; 0x3c
 8001a6c:	20fa      	movs	r0, #250	; 0xfa
 8001a6e:	7823      	ldrb	r3, [r4, #0]
 8001a70:	f7ff faec 	bl	800104c <LCD_DrawHollowCircle>
	LCD_DrawHollowCircle(250, 210, 5, set_tcolor);
 8001a74:	2205      	movs	r2, #5
 8001a76:	21d2      	movs	r1, #210	; 0xd2
 8001a78:	20fa      	movs	r0, #250	; 0xfa
 8001a7a:	7823      	ldrb	r3, [r4, #0]
 8001a7c:	f7ff fae6 	bl	800104c <LCD_DrawHollowCircle>
	LCD_DrawVLine(250, 65, 141, set_tcolor);
 8001a80:	228d      	movs	r2, #141	; 0x8d
 8001a82:	2141      	movs	r1, #65	; 0x41
 8001a84:	20fa      	movs	r0, #250	; 0xfa
 8001a86:	7823      	ldrb	r3, [r4, #0]
 8001a88:	f7ff fab2 	bl	8000ff0 <LCD_DrawVLine>
	LCD_DrawFilledCircle(250, (uint16_t)coor_pitch, 10, set_tcolor);
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <modulation_mode+0x2a0>)
 8001a8e:	20fa      	movs	r0, #250	; 0xfa
 8001a90:	7811      	ldrb	r1, [r2, #0]
 8001a92:	7823      	ldrb	r3, [r4, #0]
 8001a94:	220a      	movs	r2, #10
 8001a96:	f7ff fb07 	bl	80010a8 <LCD_DrawFilledCircle>
	/* Pitch Bar End */

	if(touched() == none_xy && touched_check == have_xy) touched_check = none_xy;
 8001a9a:	f7ff fa1b 	bl	8000ed4 <touched>
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d104      	bne.n	8001aac <modulation_mode+0x180>
 8001aa2:	4b46      	ldr	r3, [pc, #280]	; (8001bbc <modulation_mode+0x290>)
 8001aa4:	781a      	ldrb	r2, [r3, #0]
 8001aa6:	2a01      	cmp	r2, #1
 8001aa8:	d100      	bne.n	8001aac <modulation_mode+0x180>
 8001aaa:	7018      	strb	r0, [r3, #0]

	if((curXY.x > 0 || curXY.y > 0) && touched_check == none_xy){
 8001aac:	4b42      	ldr	r3, [pc, #264]	; (8001bb8 <modulation_mode+0x28c>)
 8001aae:	2100      	movs	r1, #0
 8001ab0:	5e5a      	ldrsh	r2, [r3, r1]
 8001ab2:	2a00      	cmp	r2, #0
 8001ab4:	dc03      	bgt.n	8001abe <modulation_mode+0x192>
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	5e9b      	ldrsh	r3, [r3, r2]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	dd45      	ble.n	8001b4a <modulation_mode+0x21e>
 8001abe:	4f3f      	ldr	r7, [pc, #252]	; (8001bbc <modulation_mode+0x290>)
 8001ac0:	783b      	ldrb	r3, [r7, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d141      	bne.n	8001b4a <modulation_mode+0x21e>
		if(xy_check(15, 15 + strlen("Back"), 1, 1 + 1)){
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2113      	movs	r1, #19
 8001aca:	200f      	movs	r0, #15
 8001acc:	3302      	adds	r3, #2
 8001ace:	f7ff fb69 	bl	80011a4 <xy_check>
 8001ad2:	1e04      	subs	r4, r0, #0
 8001ad4:	d013      	beq.n	8001afe <modulation_mode+0x1d2>
			VP_save();
 8001ad6:	f7ff fc03 	bl	80012e0 <VP_save>
			reset_value();
 8001ada:	f7ff fb8f 	bl	80011fc <reset_value>
			buzM = 1;
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4b49      	ldr	r3, [pc, #292]	; (8001c08 <modulation_mode+0x2dc>)
		}
		else if(xy_check(0, strlen(bf[0]) - 6, 1, 1 + 1)) { firF = 0; time_setting(load_time); }
		else if(xy_check(5, 5 + strlen("OFF"), 4, 4 + 1)) {
			touched_check = have_xy;
//			sound_start = sound_start == speaker_off ? speaker_on : speaker_off;
			if(sound_start == speaker_off) sound_start = speaker_on;
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	e01c      	b.n	8001b20 <modulation_mode+0x1f4>
	for(PITCH_STATE i = PITCH_STATE_0 ; i <= PITCH_STATE_10 ; i++){
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	2b0b      	cmp	r3, #11
 8001aea:	d000      	beq.n	8001aee <modulation_mode+0x1c2>
 8001aec:	e740      	b.n	8001970 <modulation_mode+0x44>
 8001aee:	e74d      	b.n	800198c <modulation_mode+0x60>
	if(max_volume > 100) max_volume = 100;
 8001af0:	2364      	movs	r3, #100	; 0x64
 8001af2:	e753      	b.n	800199c <modulation_mode+0x70>
	txt_color[5] = sound_start == speaker_off ? set_tcolor : set_bcolor;
 8001af4:	4a2f      	ldr	r2, [pc, #188]	; (8001bb4 <modulation_mode+0x288>)
 8001af6:	7812      	ldrb	r2, [r2, #0]
 8001af8:	e77f      	b.n	80019fa <modulation_mode+0xce>
	back_color[5] = sound_start == speaker_off ? set_bcolor : set_tcolor;
 8001afa:	7822      	ldrb	r2, [r4, #0]
 8001afc:	e783      	b.n	8001a06 <modulation_mode+0xda>
		else if(xy_check(0, strlen(bf[0]) - 6, 1, 1 + 1)) { firF = 0; time_setting(load_time); }
 8001afe:	a811      	add	r0, sp, #68	; 0x44
 8001b00:	f7fe fb02 	bl	8000108 <strlen>
 8001b04:	3806      	subs	r0, #6
 8001b06:	b281      	uxth	r1, r0
 8001b08:	2302      	movs	r3, #2
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	0020      	movs	r0, r4
 8001b0e:	f7ff fb49 	bl	80011a4 <xy_check>
 8001b12:	1e06      	subs	r6, r0, #0
 8001b14:	d01b      	beq.n	8001b4e <modulation_mode+0x222>
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <modulation_mode+0x284>)
 8001b18:	2001      	movs	r0, #1
 8001b1a:	701c      	strb	r4, [r3, #0]
 8001b1c:	f7ff fc56 	bl	80013cc <time_setting>
			else sound_start = speaker_off;
		}
		if(curXY.y >= 60 && curXY.y <= 210){
 8001b20:	4a25      	ldr	r2, [pc, #148]	; (8001bb8 <modulation_mode+0x28c>)
 8001b22:	2302      	movs	r3, #2
 8001b24:	5ed4      	ldrsh	r4, [r2, r3]
 8001b26:	0023      	movs	r3, r4
 8001b28:	3b3c      	subs	r3, #60	; 0x3c
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2b96      	cmp	r3, #150	; 0x96
 8001b2e:	d82c      	bhi.n	8001b8a <modulation_mode+0x25e>
			TS_POINT current_xy = curXY;
			if(curXY.x >= 190 && curXY.x <= 210){
 8001b30:	8813      	ldrh	r3, [r2, #0]
 8001b32:	001a      	movs	r2, r3
 8001b34:	3abe      	subs	r2, #190	; 0xbe
 8001b36:	2a14      	cmp	r2, #20
 8001b38:	d819      	bhi.n	8001b6e <modulation_mode+0x242>
				LCD_DrawFilledCircle(200, (uint16_t)coor_volume, 10, set_bcolor);
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <modulation_mode+0x288>)
 8001b3c:	220a      	movs	r2, #10
 8001b3e:	20c8      	movs	r0, #200	; 0xc8
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	7829      	ldrb	r1, [r5, #0]
 8001b44:	f7ff fab0 	bl	80010a8 <LCD_DrawFilledCircle>
				coor_volume = (uint8_t)current_xy.y;
 8001b48:	702c      	strb	r4, [r5, #0]
				coor_pitch = (uint8_t)current_xy.y;
			}
		}
		else if(xy_check(0, strlen(">Modulation"),0, 1)) { VP_save(); reset_value(); modeF = select_menu; buzM = 1; }
	}
}
 8001b4a:	b021      	add	sp, #132	; 0x84
 8001b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if(xy_check(5, 5 + strlen("OFF"), 4, 4 + 1)) {
 8001b4e:	2305      	movs	r3, #5
 8001b50:	2204      	movs	r2, #4
 8001b52:	2108      	movs	r1, #8
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7ff fb25 	bl	80011a4 <xy_check>
 8001b5a:	2800      	cmp	r0, #0
 8001b5c:	d0e0      	beq.n	8001b20 <modulation_mode+0x1f4>
			touched_check = have_xy;
 8001b5e:	2201      	movs	r2, #1
			if(sound_start == speaker_off) sound_start = speaker_on;
 8001b60:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <modulation_mode+0x2c4>)
			touched_check = have_xy;
 8001b62:	703a      	strb	r2, [r7, #0]
			if(sound_start == speaker_off) sound_start = speaker_on;
 8001b64:	7819      	ldrb	r1, [r3, #0]
 8001b66:	2900      	cmp	r1, #0
 8001b68:	d0bb      	beq.n	8001ae2 <modulation_mode+0x1b6>
			else sound_start = speaker_off;
 8001b6a:	701e      	strb	r6, [r3, #0]
 8001b6c:	e7d8      	b.n	8001b20 <modulation_mode+0x1f4>
			else if(curXY.x >= 240 && curXY.x <= 260){
 8001b6e:	3bf0      	subs	r3, #240	; 0xf0
 8001b70:	2b14      	cmp	r3, #20
 8001b72:	d8ea      	bhi.n	8001b4a <modulation_mode+0x21e>
				LCD_DrawFilledCircle(250, (uint16_t)coor_pitch, 10, set_bcolor);
 8001b74:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <modulation_mode+0x2a0>)
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <modulation_mode+0x288>)
 8001b78:	7811      	ldrb	r1, [r2, #0]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	220a      	movs	r2, #10
 8001b7e:	20fa      	movs	r0, #250	; 0xfa
 8001b80:	f7ff fa92 	bl	80010a8 <LCD_DrawFilledCircle>
				coor_pitch = (uint8_t)current_xy.y;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <modulation_mode+0x2a0>)
 8001b86:	701c      	strb	r4, [r3, #0]
 8001b88:	e7df      	b.n	8001b4a <modulation_mode+0x21e>
		else if(xy_check(0, strlen(">Modulation"),0, 1)) { VP_save(); reset_value(); modeF = select_menu; buzM = 1; }
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	210b      	movs	r1, #11
 8001b90:	0010      	movs	r0, r2
 8001b92:	f7ff fb07 	bl	80011a4 <xy_check>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d0d7      	beq.n	8001b4a <modulation_mode+0x21e>
 8001b9a:	f7ff fba1 	bl	80012e0 <VP_save>
 8001b9e:	f7ff fb2d 	bl	80011fc <reset_value>
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <modulation_mode+0x2e0>)
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <modulation_mode+0x2dc>)
 8001baa:	3a02      	subs	r2, #2
 8001bac:	701a      	strb	r2, [r3, #0]
}
 8001bae:	e7cc      	b.n	8001b4a <modulation_mode+0x21e>
 8001bb0:	200000e4 	.word	0x200000e4
 8001bb4:	2000002d 	.word	0x2000002d
 8001bb8:	200000de 	.word	0x200000de
 8001bbc:	200002c4 	.word	0x200002c4
 8001bc0:	200002be 	.word	0x200002be
 8001bc4:	200002c5 	.word	0x200002c5
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000011 	.word	0x20000011
 8001bd0:	2000002c 	.word	0x2000002c
 8001bd4:	20000012 	.word	0x20000012
 8001bd8:	20000024 	.word	0x20000024
 8001bdc:	08005514 	.word	0x08005514
 8001be0:	2000002f 	.word	0x2000002f
 8001be4:	0800560f 	.word	0x0800560f
 8001be8:	08005666 	.word	0x08005666
 8001bec:	08005674 	.word	0x08005674
 8001bf0:	200002bf 	.word	0x200002bf
 8001bf4:	08005652 	.word	0x08005652
 8001bf8:	08005681 	.word	0x08005681
 8001bfc:	0800565d 	.word	0x0800565d
 8001c00:	08005662 	.word	0x08005662
 8001c04:	08005689 	.word	0x08005689
 8001c08:	200000dc 	.word	0x200000dc
 8001c0c:	200002bc 	.word	0x200002bc

08001c10 <setting_mode>:

void setting_mode(void){
 8001c10:	b5f0      	push	{r4, r5, r6, r7, lr}
	static LCD_COLOR t_color = white, b_color = black;
	if(!firF){
 8001c12:	4bad      	ldr	r3, [pc, #692]	; (8001ec8 <setting_mode+0x2b8>)
 8001c14:	4ead      	ldr	r6, [pc, #692]	; (8001ecc <setting_mode+0x2bc>)
 8001c16:	781c      	ldrb	r4, [r3, #0]
 8001c18:	4fad      	ldr	r7, [pc, #692]	; (8001ed0 <setting_mode+0x2c0>)
void setting_mode(void){
 8001c1a:	b0a3      	sub	sp, #140	; 0x8c
	if(!firF){
 8001c1c:	2c00      	cmp	r4, #0
 8001c1e:	d11b      	bne.n	8001c58 <setting_mode+0x48>
		firF = 1;
 8001c20:	2301      	movs	r3, #1
 8001c22:	4aa9      	ldr	r2, [pc, #676]	; (8001ec8 <setting_mode+0x2b8>)

		XYsetZero;
		touched_check = have_xy;

		LCD_Clear(set_bcolor);
 8001c24:	4dab      	ldr	r5, [pc, #684]	; (8001ed4 <setting_mode+0x2c4>)
		firF = 1;
 8001c26:	7013      	strb	r3, [r2, #0]
		XYsetZero;
 8001c28:	4aab      	ldr	r2, [pc, #684]	; (8001ed8 <setting_mode+0x2c8>)
	LCD_FillScreen(color);
 8001c2a:	7828      	ldrb	r0, [r5, #0]
		XYsetZero;
 8001c2c:	8014      	strh	r4, [r2, #0]
 8001c2e:	8054      	strh	r4, [r2, #2]
		touched_check = have_xy;
 8001c30:	4aaa      	ldr	r2, [pc, #680]	; (8001edc <setting_mode+0x2cc>)
 8001c32:	7013      	strb	r3, [r2, #0]
	LCD_FillScreen(color);
 8001c34:	f7ff f9ca 	bl	8000fcc <LCD_FillScreen>

		sel = 0;
		t_color = set_tcolor;
 8001c38:	4ba9      	ldr	r3, [pc, #676]	; (8001ee0 <setting_mode+0x2d0>)
		sel = 0;
 8001c3a:	7034      	strb	r4, [r6, #0]
		t_color = set_tcolor;
 8001c3c:	7819      	ldrb	r1, [r3, #0]
		b_color = set_bcolor;
 8001c3e:	782c      	ldrb	r4, [r5, #0]
 8001c40:	4ba8      	ldr	r3, [pc, #672]	; (8001ee4 <setting_mode+0x2d4>)

		for(uint8_t i = 0 ; i < 17 ; i++){
			txt_color[i] = set_tcolor;
 8001c42:	2211      	movs	r2, #17
 8001c44:	48a8      	ldr	r0, [pc, #672]	; (8001ee8 <setting_mode+0x2d8>)
		t_color = set_tcolor;
 8001c46:	7039      	strb	r1, [r7, #0]
		b_color = set_bcolor;
 8001c48:	701c      	strb	r4, [r3, #0]
			txt_color[i] = set_tcolor;
 8001c4a:	f002 ffee 	bl	8004c2a <memset>
			back_color[i] = set_bcolor;
 8001c4e:	2211      	movs	r2, #17
 8001c50:	0021      	movs	r1, r4
 8001c52:	48a6      	ldr	r0, [pc, #664]	; (8001eec <setting_mode+0x2dc>)
 8001c54:	f002 ffe9 	bl	8004c2a <memset>
		}
	}

	time_get();
 8001c58:	f7ff fac0 	bl	80011dc <time_get>
	char bf[3][20];
	POS pos[6] = {{0, 1}, {2, 4}, {2, 6}, {14, 4}, {14, 6}, {15, 1}};
 8001c5c:	49a4      	ldr	r1, [pc, #656]	; (8001ef0 <setting_mode+0x2e0>)
 8001c5e:	2218      	movs	r2, #24
 8001c60:	314c      	adds	r1, #76	; 0x4c
 8001c62:	a807      	add	r0, sp, #28
 8001c64:	f002 ffd8 	bl	8004c18 <memcpy>
	sprintf(bf[0], "%04d.%02d.%02d %02d:%02d:%02d", 2000 + time.year, time.month, time.day, time.hour, time.min, time.sec);
 8001c68:	20fa      	movs	r0, #250	; 0xfa
 8001c6a:	49a2      	ldr	r1, [pc, #648]	; (8001ef4 <setting_mode+0x2e4>)
 8001c6c:	00c0      	lsls	r0, r0, #3
 8001c6e:	780a      	ldrb	r2, [r1, #0]
 8001c70:	784b      	ldrb	r3, [r1, #1]
 8001c72:	1812      	adds	r2, r2, r0
 8001c74:	7948      	ldrb	r0, [r1, #5]
 8001c76:	9003      	str	r0, [sp, #12]
 8001c78:	7908      	ldrb	r0, [r1, #4]
 8001c7a:	9002      	str	r0, [sp, #8]
 8001c7c:	78c8      	ldrb	r0, [r1, #3]
 8001c7e:	9001      	str	r0, [sp, #4]
 8001c80:	7889      	ldrb	r1, [r1, #2]
 8001c82:	a813      	add	r0, sp, #76	; 0x4c
 8001c84:	9100      	str	r1, [sp, #0]
 8001c86:	499c      	ldr	r1, [pc, #624]	; (8001ef8 <setting_mode+0x2e8>)
 8001c88:	f002 ffd8 	bl	8004c3c <siprintf>

	back_color[1] = sel == 0 ? set_tcolor : set_bcolor;
 8001c8c:	7833      	ldrb	r3, [r6, #0]
 8001c8e:	4a94      	ldr	r2, [pc, #592]	; (8001ee0 <setting_mode+0x2d0>)
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d000      	beq.n	8001c96 <setting_mode+0x86>
 8001c94:	4a8f      	ldr	r2, [pc, #572]	; (8001ed4 <setting_mode+0x2c4>)
 8001c96:	7811      	ldrb	r1, [r2, #0]
 8001c98:	4a94      	ldr	r2, [pc, #592]	; (8001eec <setting_mode+0x2dc>)
 8001c9a:	7051      	strb	r1, [r2, #1]
	back_color[2] = sel == 1 ? set_tcolor : set_bcolor;
 8001c9c:	4990      	ldr	r1, [pc, #576]	; (8001ee0 <setting_mode+0x2d0>)
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d000      	beq.n	8001ca4 <setting_mode+0x94>
 8001ca2:	498c      	ldr	r1, [pc, #560]	; (8001ed4 <setting_mode+0x2c4>)
 8001ca4:	7809      	ldrb	r1, [r1, #0]
 8001ca6:	7091      	strb	r1, [r2, #2]

	txt_color[1] = sel == 0 ? set_bcolor : set_tcolor;
 8001ca8:	4a8a      	ldr	r2, [pc, #552]	; (8001ed4 <setting_mode+0x2c4>)
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d000      	beq.n	8001cb0 <setting_mode+0xa0>
 8001cae:	4a8c      	ldr	r2, [pc, #560]	; (8001ee0 <setting_mode+0x2d0>)
 8001cb0:	7811      	ldrb	r1, [r2, #0]
 8001cb2:	4a8d      	ldr	r2, [pc, #564]	; (8001ee8 <setting_mode+0x2d8>)
 8001cb4:	7051      	strb	r1, [r2, #1]
	txt_color[2] = sel == 1 ? set_bcolor : set_tcolor;
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d000      	beq.n	8001cbc <setting_mode+0xac>
 8001cba:	e096      	b.n	8001dea <setting_mode+0x1da>
 8001cbc:	4b85      	ldr	r3, [pc, #532]	; (8001ed4 <setting_mode+0x2c4>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]

	txt_color[3] = t_color;
	txt_color[4] = b_color;
 8001cc0:	4d88      	ldr	r5, [pc, #544]	; (8001ee4 <setting_mode+0x2d4>)
	txt_color[2] = sel == 1 ? set_bcolor : set_tcolor;
 8001cc2:	7093      	strb	r3, [r2, #2]
	txt_color[4] = b_color;
 8001cc4:	7829      	ldrb	r1, [r5, #0]
	txt_color[3] = t_color;
 8001cc6:	783b      	ldrb	r3, [r7, #0]
	txt_color[4] = b_color;
 8001cc8:	7111      	strb	r1, [r2, #4]
	txt_color[3] = t_color;
 8001cca:	70d3      	strb	r3, [r2, #3]

	sprintf(bf[1], "%s    ", t_color == black ? "Black" : t_color == blue ? "Blue" : t_color == green ? "Green" : t_color == red ? "Red" : t_color == yellow ? "Yellow" : "White");
 8001ccc:	4a8b      	ldr	r2, [pc, #556]	; (8001efc <setting_mode+0x2ec>)
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00c      	beq.n	8001cec <setting_mode+0xdc>
 8001cd2:	4a8b      	ldr	r2, [pc, #556]	; (8001f00 <setting_mode+0x2f0>)
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d009      	beq.n	8001cec <setting_mode+0xdc>
 8001cd8:	4a8a      	ldr	r2, [pc, #552]	; (8001f04 <setting_mode+0x2f4>)
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d006      	beq.n	8001cec <setting_mode+0xdc>
 8001cde:	4a8a      	ldr	r2, [pc, #552]	; (8001f08 <setting_mode+0x2f8>)
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d003      	beq.n	8001cec <setting_mode+0xdc>
 8001ce4:	4a89      	ldr	r2, [pc, #548]	; (8001f0c <setting_mode+0x2fc>)
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d000      	beq.n	8001cec <setting_mode+0xdc>
 8001cea:	4a89      	ldr	r2, [pc, #548]	; (8001f10 <setting_mode+0x300>)
 8001cec:	4c89      	ldr	r4, [pc, #548]	; (8001f14 <setting_mode+0x304>)
 8001cee:	a818      	add	r0, sp, #96	; 0x60
 8001cf0:	0021      	movs	r1, r4
 8001cf2:	f002 ffa3 	bl	8004c3c <siprintf>
	sprintf(bf[2], "%s    ", b_color == black ? "Black" : b_color == blue ? "Blue" : b_color == green ? "Green" : b_color == red ? "Red" : b_color == yellow ? "Yellow" : "White");
 8001cf6:	782b      	ldrb	r3, [r5, #0]
 8001cf8:	4a80      	ldr	r2, [pc, #512]	; (8001efc <setting_mode+0x2ec>)
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00c      	beq.n	8001d18 <setting_mode+0x108>
 8001cfe:	4a80      	ldr	r2, [pc, #512]	; (8001f00 <setting_mode+0x2f0>)
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d009      	beq.n	8001d18 <setting_mode+0x108>
 8001d04:	4a7f      	ldr	r2, [pc, #508]	; (8001f04 <setting_mode+0x2f4>)
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d006      	beq.n	8001d18 <setting_mode+0x108>
 8001d0a:	4a7f      	ldr	r2, [pc, #508]	; (8001f08 <setting_mode+0x2f8>)
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d003      	beq.n	8001d18 <setting_mode+0x108>
 8001d10:	4a7e      	ldr	r2, [pc, #504]	; (8001f0c <setting_mode+0x2fc>)
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d000      	beq.n	8001d18 <setting_mode+0x108>
 8001d16:	4a7e      	ldr	r2, [pc, #504]	; (8001f10 <setting_mode+0x300>)
 8001d18:	0021      	movs	r1, r4
 8001d1a:	2400      	movs	r4, #0
 8001d1c:	a81d      	add	r0, sp, #116	; 0x74
 8001d1e:	f002 ff8d 	bl	8004c3c <siprintf>

	for(uint8_t i = 0 ; i < 6 ; i++)
 8001d22:	4d7d      	ldr	r5, [pc, #500]	; (8001f18 <setting_mode+0x308>)
		LCD_DrawFilledRectangleCoord(RECT * i, 190, RECT * (i + 1), 240, lcd_color[i]);
 8001d24:	782b      	ldrb	r3, [r5, #0]
 8001d26:	0020      	movs	r0, r4
 8001d28:	3435      	adds	r4, #53	; 0x35
 8001d2a:	b2a4      	uxth	r4, r4
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	0022      	movs	r2, r4
 8001d30:	23f0      	movs	r3, #240	; 0xf0
 8001d32:	21be      	movs	r1, #190	; 0xbe
 8001d34:	f7ff f9e6 	bl	8001104 <LCD_DrawFilledRectangleCoord>
	for(uint8_t i = 0 ; i < 6 ; i++)
 8001d38:	239f      	movs	r3, #159	; 0x9f
 8001d3a:	3501      	adds	r5, #1
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	429c      	cmp	r4, r3
 8001d40:	d1f0      	bne.n	8001d24 <setting_mode+0x114>
	LCD_DrawFilledRectangleCoord(265, 190, 320, 240, white);
 8001d42:	22a0      	movs	r2, #160	; 0xa0
 8001d44:	200a      	movs	r0, #10
 8001d46:	3b3a      	subs	r3, #58	; 0x3a
 8001d48:	3bff      	subs	r3, #255	; 0xff
 8001d4a:	21be      	movs	r1, #190	; 0xbe
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	0052      	lsls	r2, r2, #1
 8001d50:	33eb      	adds	r3, #235	; 0xeb
 8001d52:	30ff      	adds	r0, #255	; 0xff
 8001d54:	f7ff f9d6 	bl	8001104 <LCD_DrawFilledRectangleCoord>

	char* array[6] = { bf[0], "Text Color:", "Background Color:", bf[1], bf[2], "Back" };
 8001d58:	ab13      	add	r3, sp, #76	; 0x4c
 8001d5a:	930d      	str	r3, [sp, #52]	; 0x34
 8001d5c:	4b6f      	ldr	r3, [pc, #444]	; (8001f1c <setting_mode+0x30c>)
	array_puts(pos, ">Setting", array, txt_color, back_color, 6);
 8001d5e:	4970      	ldr	r1, [pc, #448]	; (8001f20 <setting_mode+0x310>)
	char* array[6] = { bf[0], "Text Color:", "Background Color:", bf[1], bf[2], "Back" };
 8001d60:	930e      	str	r3, [sp, #56]	; 0x38
 8001d62:	4b70      	ldr	r3, [pc, #448]	; (8001f24 <setting_mode+0x314>)
	array_puts(pos, ">Setting", array, txt_color, back_color, 6);
 8001d64:	aa0d      	add	r2, sp, #52	; 0x34
	char* array[6] = { bf[0], "Text Color:", "Background Color:", bf[1], bf[2], "Back" };
 8001d66:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d68:	ab18      	add	r3, sp, #96	; 0x60
 8001d6a:	9310      	str	r3, [sp, #64]	; 0x40
 8001d6c:	ab1d      	add	r3, sp, #116	; 0x74
 8001d6e:	9311      	str	r3, [sp, #68]	; 0x44
 8001d70:	4b6d      	ldr	r3, [pc, #436]	; (8001f28 <setting_mode+0x318>)
	array_puts(pos, ">Setting", array, txt_color, back_color, 6);
 8001d72:	a807      	add	r0, sp, #28
	char* array[6] = { bf[0], "Text Color:", "Background Color:", bf[1], bf[2], "Back" };
 8001d74:	9312      	str	r3, [sp, #72]	; 0x48
	array_puts(pos, ">Setting", array, txt_color, back_color, 6);
 8001d76:	2306      	movs	r3, #6
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <setting_mode+0x2dc>)
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	4b5a      	ldr	r3, [pc, #360]	; (8001ee8 <setting_mode+0x2d8>)
 8001d80:	f7ff faf6 	bl	8001370 <array_puts>

	if(touched() == none_xy && touched_check == have_xy) touched_check = none_xy;
 8001d84:	f7ff f8a6 	bl	8000ed4 <touched>
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	d104      	bne.n	8001d96 <setting_mode+0x186>
 8001d8c:	4b53      	ldr	r3, [pc, #332]	; (8001edc <setting_mode+0x2cc>)
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	2a01      	cmp	r2, #1
 8001d92:	d100      	bne.n	8001d96 <setting_mode+0x186>
 8001d94:	7018      	strb	r0, [r3, #0]

	if((curXY.x > 0 || curXY.y > 0) && touched_check == none_xy){
 8001d96:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <setting_mode+0x2c8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	5e9d      	ldrsh	r5, [r3, r2]
 8001d9c:	2d00      	cmp	r5, #0
 8001d9e:	dc03      	bgt.n	8001da8 <setting_mode+0x198>
 8001da0:	2202      	movs	r2, #2
 8001da2:	5e9b      	ldrsh	r3, [r3, r2]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	dd1e      	ble.n	8001de6 <setting_mode+0x1d6>
 8001da8:	4b4c      	ldr	r3, [pc, #304]	; (8001edc <setting_mode+0x2cc>)
 8001daa:	781a      	ldrb	r2, [r3, #0]
 8001dac:	2a00      	cmp	r2, #0
 8001dae:	d11a      	bne.n	8001de6 <setting_mode+0x1d6>
		touched_check = have_xy;
 8001db0:	2401      	movs	r4, #1
		if(xy_check(15, 15 + strlen("Back"), 1, 1 + 1)){
 8001db2:	2113      	movs	r1, #19
		touched_check = have_xy;
 8001db4:	701c      	strb	r4, [r3, #0]
		if(xy_check(15, 15 + strlen("Back"), 1, 1 + 1)){
 8001db6:	0022      	movs	r2, r4
 8001db8:	2302      	movs	r3, #2
 8001dba:	200f      	movs	r0, #15
 8001dbc:	f7ff f9f2 	bl	80011a4 <xy_check>
 8001dc0:	9005      	str	r0, [sp, #20]
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	d013      	beq.n	8001dee <setting_mode+0x1de>
			if(t_color != b_color){
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <setting_mode+0x2d4>)
 8001dc8:	783a      	ldrb	r2, [r7, #0]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d003      	beq.n	8001dd8 <setting_mode+0x1c8>
				set_tcolor = t_color;
 8001dd0:	4943      	ldr	r1, [pc, #268]	; (8001ee0 <setting_mode+0x2d0>)
 8001dd2:	700a      	strb	r2, [r1, #0]
				set_bcolor = b_color;
 8001dd4:	4a3f      	ldr	r2, [pc, #252]	; (8001ed4 <setting_mode+0x2c4>)
 8001dd6:	7013      	strb	r3, [r2, #0]
			}
			color_save();
 8001dd8:	f7ff fa56 	bl	8001288 <color_save>
			reset_value();
 8001ddc:	f7ff fa0e 	bl	80011fc <reset_value>
			buzM = 1;
 8001de0:	2201      	movs	r2, #1
 8001de2:	4b52      	ldr	r3, [pc, #328]	; (8001f2c <setting_mode+0x31c>)
 8001de4:	701a      	strb	r2, [r3, #0]
			else if(curXY.x < RECT * 5)     {  if(sel == 0) t_color = yellow;   else b_color = yellow; }
			else if(curXY.x < RECT * 6)     {  if(sel == 0) t_color = white;    else b_color = white;  }
		}
		else if(xy_check(0, strlen(">Setting"), 0, 1)) { color_save(); reset_value(); modeF = select_menu; buzM = 1; }
	}
}
 8001de6:	b023      	add	sp, #140	; 0x8c
 8001de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	txt_color[2] = sel == 1 ? set_bcolor : set_tcolor;
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <setting_mode+0x2d0>)
 8001dec:	e767      	b.n	8001cbe <setting_mode+0xae>
		else if(xy_check(0, strlen(bf[0]) - 6, 1, 1 + 1)) { firF = 0; time_setting(load_time); }
 8001dee:	a813      	add	r0, sp, #76	; 0x4c
 8001df0:	f7fe f98a 	bl	8000108 <strlen>
 8001df4:	3806      	subs	r0, #6
 8001df6:	b281      	uxth	r1, r0
 8001df8:	2302      	movs	r3, #2
 8001dfa:	0022      	movs	r2, r4
 8001dfc:	9805      	ldr	r0, [sp, #20]
 8001dfe:	f7ff f9d1 	bl	80011a4 <xy_check>
 8001e02:	1e07      	subs	r7, r0, #0
 8001e04:	d006      	beq.n	8001e14 <setting_mode+0x204>
 8001e06:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <setting_mode+0x2b8>)
 8001e08:	9a05      	ldr	r2, [sp, #20]
 8001e0a:	0020      	movs	r0, r4
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	f7ff fadd 	bl	80013cc <time_setting>
 8001e12:	e7e8      	b.n	8001de6 <setting_mode+0x1d6>
		else if(xy_check(2, 2 + strlen("Text Color") - 6, 4, 4 + 1))       sel = 0;
 8001e14:	2305      	movs	r3, #5
 8001e16:	2204      	movs	r2, #4
 8001e18:	2106      	movs	r1, #6
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f7ff f9c2 	bl	80011a4 <xy_check>
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d001      	beq.n	8001e28 <setting_mode+0x218>
 8001e24:	7037      	strb	r7, [r6, #0]
 8001e26:	e7de      	b.n	8001de6 <setting_mode+0x1d6>
		else if(xy_check(2, 2 + strlen("Background Color") - 6, 6, 6 + 1)) sel = 1;
 8001e28:	2307      	movs	r3, #7
 8001e2a:	2206      	movs	r2, #6
 8001e2c:	210c      	movs	r1, #12
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f7ff f9b8 	bl	80011a4 <xy_check>
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d001      	beq.n	8001e3c <setting_mode+0x22c>
 8001e38:	7034      	strb	r4, [r6, #0]
 8001e3a:	e7d4      	b.n	8001de6 <setting_mode+0x1d6>
		else if(curXY.y > 190){
 8001e3c:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <setting_mode+0x2c8>)
 8001e3e:	2202      	movs	r2, #2
 8001e40:	5e9b      	ldrsh	r3, [r3, r2]
 8001e42:	2bbe      	cmp	r3, #190	; 0xbe
 8001e44:	dd30      	ble.n	8001ea8 <setting_mode+0x298>
			if(curXY.x < RECT)              {  if(sel == 0) t_color = black;    else b_color = black;  }
 8001e46:	2d34      	cmp	r5, #52	; 0x34
 8001e48:	dc08      	bgt.n	8001e5c <setting_mode+0x24c>
 8001e4a:	7833      	ldrb	r3, [r6, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <setting_mode+0x246>
			else if(curXY.x < RECT * 6)     {  if(sel == 0) t_color = white;    else b_color = white;  }
 8001e50:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <setting_mode+0x2c0>)
 8001e52:	7013      	strb	r3, [r2, #0]
 8001e54:	e7c7      	b.n	8001de6 <setting_mode+0x1d6>
			if(curXY.x < RECT)              {  if(sel == 0) t_color = black;    else b_color = black;  }
 8001e56:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <setting_mode+0x2d4>)
 8001e58:	7018      	strb	r0, [r3, #0]
 8001e5a:	e7c4      	b.n	8001de6 <setting_mode+0x1d6>
			else if(curXY.x < RECT * 2)     {  if(sel == 0) t_color = blue;     else b_color = blue;   }
 8001e5c:	2d69      	cmp	r5, #105	; 0x69
 8001e5e:	dc07      	bgt.n	8001e70 <setting_mode+0x260>
 8001e60:	7833      	ldrb	r3, [r6, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d102      	bne.n	8001e6c <setting_mode+0x25c>
 8001e66:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <setting_mode+0x2c0>)
		else if(xy_check(0, strlen(">Setting"), 0, 1)) { color_save(); reset_value(); modeF = select_menu; buzM = 1; }
 8001e68:	701c      	strb	r4, [r3, #0]
}
 8001e6a:	e7bc      	b.n	8001de6 <setting_mode+0x1d6>
			else if(curXY.x < RECT * 2)     {  if(sel == 0) t_color = blue;     else b_color = blue;   }
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <setting_mode+0x2d4>)
 8001e6e:	e7fb      	b.n	8001e68 <setting_mode+0x258>
			else if(curXY.x < RECT * 3)     {  if(sel == 0) t_color = green;    else b_color = green;  }
 8001e70:	2d9e      	cmp	r5, #158	; 0x9e
 8001e72:	dc05      	bgt.n	8001e80 <setting_mode+0x270>
 8001e74:	2302      	movs	r3, #2
 8001e76:	7832      	ldrb	r2, [r6, #0]
			else if(curXY.x < RECT * 6)     {  if(sel == 0) t_color = white;    else b_color = white;  }
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	d0e9      	beq.n	8001e50 <setting_mode+0x240>
 8001e7c:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <setting_mode+0x2d4>)
 8001e7e:	e7e8      	b.n	8001e52 <setting_mode+0x242>
			else if(curXY.x < RECT * 4)     {  if(sel == 0) t_color = red;      else b_color = red;    }
 8001e80:	2dd3      	cmp	r5, #211	; 0xd3
 8001e82:	dc02      	bgt.n	8001e8a <setting_mode+0x27a>
 8001e84:	2303      	movs	r3, #3
 8001e86:	7832      	ldrb	r2, [r6, #0]
 8001e88:	e7f6      	b.n	8001e78 <setting_mode+0x268>
			else if(curXY.x < RECT * 5)     {  if(sel == 0) t_color = yellow;   else b_color = yellow; }
 8001e8a:	2384      	movs	r3, #132	; 0x84
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	429d      	cmp	r5, r3
 8001e90:	dc03      	bgt.n	8001e9a <setting_mode+0x28a>
 8001e92:	7832      	ldrb	r2, [r6, #0]
 8001e94:	3b05      	subs	r3, #5
 8001e96:	3bff      	subs	r3, #255	; 0xff
 8001e98:	e7ee      	b.n	8001e78 <setting_mode+0x268>
			else if(curXY.x < RECT * 6)     {  if(sel == 0) t_color = white;    else b_color = white;  }
 8001e9a:	239f      	movs	r3, #159	; 0x9f
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	429d      	cmp	r5, r3
 8001ea0:	daa1      	bge.n	8001de6 <setting_mode+0x1d6>
 8001ea2:	7832      	ldrb	r2, [r6, #0]
 8001ea4:	3b3a      	subs	r3, #58	; 0x3a
 8001ea6:	e7f6      	b.n	8001e96 <setting_mode+0x286>
		else if(xy_check(0, strlen(">Setting"), 0, 1)) { color_save(); reset_value(); modeF = select_menu; buzM = 1; }
 8001ea8:	0023      	movs	r3, r4
 8001eaa:	0002      	movs	r2, r0
 8001eac:	2108      	movs	r1, #8
 8001eae:	f7ff f979 	bl	80011a4 <xy_check>
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	d097      	beq.n	8001de6 <setting_mode+0x1d6>
 8001eb6:	f7ff f9e7 	bl	8001288 <color_save>
 8001eba:	f7ff f99f 	bl	80011fc <reset_value>
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <setting_mode+0x320>)
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <setting_mode+0x31c>)
 8001ec6:	e7cf      	b.n	8001e68 <setting_mode+0x258>
 8001ec8:	200000e4 	.word	0x200000e4
 8001ecc:	200002bd 	.word	0x200002bd
 8001ed0:	2000002e 	.word	0x2000002e
 8001ed4:	2000002d 	.word	0x2000002d
 8001ed8:	200000de 	.word	0x200000de
 8001edc:	200002c4 	.word	0x200002c4
 8001ee0:	200002be 	.word	0x200002be
 8001ee4:	200000d8 	.word	0x200000d8
 8001ee8:	200002c5 	.word	0x200002c5
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	08005514 	.word	0x08005514
 8001ef4:	2000002f 	.word	0x2000002f
 8001ef8:	0800560f 	.word	0x0800560f
 8001efc:	080056a2 	.word	0x080056a2
 8001f00:	080056a8 	.word	0x080056a8
 8001f04:	0800569c 	.word	0x0800569c
 8001f08:	080056ad 	.word	0x080056ad
 8001f0c:	08005695 	.word	0x08005695
 8001f10:	080056b1 	.word	0x080056b1
 8001f14:	080056b7 	.word	0x080056b7
 8001f18:	08005752 	.word	0x08005752
 8001f1c:	080056be 	.word	0x080056be
 8001f20:	080056dc 	.word	0x080056dc
 8001f24:	080056ca 	.word	0x080056ca
 8001f28:	08005652 	.word	0x08005652
 8001f2c:	200000dc 	.word	0x200000dc
 8001f30:	200002bc 	.word	0x200002bc

08001f34 <select_mode>:

void select_mode(void){
 8001f34:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!firF){
 8001f36:	4d4f      	ldr	r5, [pc, #316]	; (8002074 <select_mode+0x140>)
 8001f38:	4c4f      	ldr	r4, [pc, #316]	; (8002078 <select_mode+0x144>)
 8001f3a:	782b      	ldrb	r3, [r5, #0]
void select_mode(void){
 8001f3c:	b097      	sub	sp, #92	; 0x5c
	if(!firF){
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <select_mode+0x22>
		firF = 1;
 8001f42:	2201      	movs	r2, #1
		XYsetZero;
 8001f44:	494d      	ldr	r1, [pc, #308]	; (800207c <select_mode+0x148>)
		touched_check = have_xy;

		LCD_Clear(set_bcolor);
 8001f46:	7820      	ldrb	r0, [r4, #0]
		XYsetZero;
 8001f48:	804b      	strh	r3, [r1, #2]
 8001f4a:	800b      	strh	r3, [r1, #0]
		touched_check = have_xy;
 8001f4c:	4b4c      	ldr	r3, [pc, #304]	; (8002080 <select_mode+0x14c>)
		firF = 1;
 8001f4e:	702a      	strb	r2, [r5, #0]
		touched_check = have_xy;
 8001f50:	701a      	strb	r2, [r3, #0]
	LCD_FillScreen(color);
 8001f52:	f7ff f83b 	bl	8000fcc <LCD_FillScreen>
	}

	for(uint8_t i = 0 ; i < 17 ; i++){
		if(i == 1 + backupM){
 8001f56:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <select_mode+0x150>)
			txt_color[i] = set_bcolor;
			back_color[i] = set_tcolor;
		}
		else{
			txt_color[i] = set_tcolor;
			back_color[i] = set_bcolor;
 8001f58:	2200      	movs	r2, #0
		if(i == 1 + backupM){
 8001f5a:	7818      	ldrb	r0, [r3, #0]
			txt_color[i] = set_tcolor;
 8001f5c:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <select_mode+0x154>)
			back_color[i] = set_bcolor;
 8001f5e:	7824      	ldrb	r4, [r4, #0]
			txt_color[i] = set_tcolor;
 8001f60:	781f      	ldrb	r7, [r3, #0]
 8001f62:	4b4a      	ldr	r3, [pc, #296]	; (800208c <select_mode+0x158>)
 8001f64:	494a      	ldr	r1, [pc, #296]	; (8002090 <select_mode+0x15c>)
 8001f66:	001e      	movs	r6, r3
		if(i == 1 + backupM){
 8001f68:	3001      	adds	r0, #1
 8001f6a:	4290      	cmp	r0, r2
 8001f6c:	d15a      	bne.n	8002024 <select_mode+0xf0>
			txt_color[i] = set_bcolor;
 8001f6e:	701c      	strb	r4, [r3, #0]
			back_color[i] = set_tcolor;
 8001f70:	700f      	strb	r7, [r1, #0]
	for(uint8_t i = 0 ; i < 17 ; i++){
 8001f72:	3201      	adds	r2, #1
 8001f74:	3301      	adds	r3, #1
 8001f76:	3101      	adds	r1, #1
 8001f78:	2a11      	cmp	r2, #17
 8001f7a:	d1f6      	bne.n	8001f6a <select_mode+0x36>
		}
	}
	time_get();
 8001f7c:	f7ff f92e 	bl	80011dc <time_get>
	char bf[40];
	POS pos[4] = {{0, 1}, {0, 4}, {0, 6}, {0, 8}};
 8001f80:	4944      	ldr	r1, [pc, #272]	; (8002094 <select_mode+0x160>)
 8001f82:	2210      	movs	r2, #16
 8001f84:	3164      	adds	r1, #100	; 0x64
 8001f86:	a804      	add	r0, sp, #16
 8001f88:	f002 fe46 	bl	8004c18 <memcpy>
	sprintf(bf, "%04d.%02d.%02d %02d:%02d:%02d", 2000 + time.year, time.month, time.day, time.hour, time.min, time.sec);
 8001f8c:	20fa      	movs	r0, #250	; 0xfa
 8001f8e:	4942      	ldr	r1, [pc, #264]	; (8002098 <select_mode+0x164>)
 8001f90:	00c0      	lsls	r0, r0, #3
 8001f92:	780a      	ldrb	r2, [r1, #0]
 8001f94:	784b      	ldrb	r3, [r1, #1]
 8001f96:	1812      	adds	r2, r2, r0
 8001f98:	7948      	ldrb	r0, [r1, #5]
 8001f9a:	ac0c      	add	r4, sp, #48	; 0x30
 8001f9c:	9003      	str	r0, [sp, #12]
 8001f9e:	7908      	ldrb	r0, [r1, #4]
 8001fa0:	9002      	str	r0, [sp, #8]
 8001fa2:	78c8      	ldrb	r0, [r1, #3]
 8001fa4:	9001      	str	r0, [sp, #4]
 8001fa6:	7889      	ldrb	r1, [r1, #2]
 8001fa8:	0020      	movs	r0, r4
 8001faa:	9100      	str	r1, [sp, #0]
 8001fac:	493b      	ldr	r1, [pc, #236]	; (800209c <select_mode+0x168>)
 8001fae:	f002 fe45 	bl	8004c3c <siprintf>

	char* array[4] = { bf, "Main Menu", "Modulation Mode", "Setting Mode" };
 8001fb2:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <select_mode+0x16c>)
	array_puts(pos, ">Mode Select", array, txt_color, back_color, 4);
 8001fb4:	493b      	ldr	r1, [pc, #236]	; (80020a4 <select_mode+0x170>)
	char* array[4] = { bf, "Main Menu", "Modulation Mode", "Setting Mode" };
 8001fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <select_mode+0x174>)
	array_puts(pos, ">Mode Select", array, txt_color, back_color, 4);
 8001fba:	aa08      	add	r2, sp, #32
	char* array[4] = { bf, "Main Menu", "Modulation Mode", "Setting Mode" };
 8001fbc:	930a      	str	r3, [sp, #40]	; 0x28
 8001fbe:	4b3b      	ldr	r3, [pc, #236]	; (80020ac <select_mode+0x178>)
	array_puts(pos, ">Mode Select", array, txt_color, back_color, 4);
 8001fc0:	a804      	add	r0, sp, #16
	char* array[4] = { bf, "Main Menu", "Modulation Mode", "Setting Mode" };
 8001fc2:	930b      	str	r3, [sp, #44]	; 0x2c
	array_puts(pos, ">Mode Select", array, txt_color, back_color, 4);
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	4b31      	ldr	r3, [pc, #196]	; (8002090 <select_mode+0x15c>)
	char* array[4] = { bf, "Main Menu", "Modulation Mode", "Setting Mode" };
 8001fca:	9408      	str	r4, [sp, #32]
	array_puts(pos, ">Mode Select", array, txt_color, back_color, 4);
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	0033      	movs	r3, r6
 8001fd0:	f7ff f9ce 	bl	8001370 <array_puts>

	if(touched() == none_xy && touched_check == have_xy) touched_check = none_xy;
 8001fd4:	f7fe ff7e 	bl	8000ed4 <touched>
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	d104      	bne.n	8001fe6 <select_mode+0xb2>
 8001fdc:	4b28      	ldr	r3, [pc, #160]	; (8002080 <select_mode+0x14c>)
 8001fde:	781a      	ldrb	r2, [r3, #0]
 8001fe0:	2a01      	cmp	r2, #1
 8001fe2:	d100      	bne.n	8001fe6 <select_mode+0xb2>
 8001fe4:	7018      	strb	r0, [r3, #0]

	if((curXY.x > 0 || curXY.y > 0) && touched_check == none_xy){
 8001fe6:	4b25      	ldr	r3, [pc, #148]	; (800207c <select_mode+0x148>)
 8001fe8:	2100      	movs	r1, #0
 8001fea:	5e5a      	ldrsh	r2, [r3, r1]
 8001fec:	2a00      	cmp	r2, #0
 8001fee:	dc03      	bgt.n	8001ff8 <select_mode+0xc4>
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	5e9b      	ldrsh	r3, [r3, r2]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	dd13      	ble.n	8002020 <select_mode+0xec>
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <select_mode+0x14c>)
 8001ffa:	781e      	ldrb	r6, [r3, #0]
 8001ffc:	2e00      	cmp	r6, #0
 8001ffe:	d10f      	bne.n	8002020 <select_mode+0xec>
		if(xy_check(0, strlen(bf) - 6, 1, 1 + 1))                        { firF = 0; time_setting(load_time);   }
 8002000:	0020      	movs	r0, r4
 8002002:	f7fe f881 	bl	8000108 <strlen>
 8002006:	3806      	subs	r0, #6
 8002008:	b281      	uxth	r1, r0
 800200a:	2302      	movs	r3, #2
 800200c:	2201      	movs	r2, #1
 800200e:	0030      	movs	r0, r6
 8002010:	f7ff f8c8 	bl	80011a4 <xy_check>
 8002014:	1e04      	subs	r4, r0, #0
 8002016:	d008      	beq.n	800202a <select_mode+0xf6>
 8002018:	2001      	movs	r0, #1
 800201a:	702e      	strb	r6, [r5, #0]
 800201c:	f7ff f9d6 	bl	80013cc <time_setting>
		else if(xy_check(0, strlen("Main Menu"), 4, 4 + 1))              { reset_value(); modeF = main_menu;    }
		else if(xy_check(0, strlen("Modulation Mode"), 6, 6 + 1))        { reset_value(); modeF = sound_menu;   }
		else if(xy_check(0, strlen("Setting Mode"), 8, 8 + 1))           { reset_value(); modeF = setting_menu; }
	}
}
 8002020:	b017      	add	sp, #92	; 0x5c
 8002022:	bdf0      	pop	{r4, r5, r6, r7, pc}
			txt_color[i] = set_tcolor;
 8002024:	701f      	strb	r7, [r3, #0]
			back_color[i] = set_bcolor;
 8002026:	700c      	strb	r4, [r1, #0]
 8002028:	e7a3      	b.n	8001f72 <select_mode+0x3e>
		else if(xy_check(0, strlen("Main Menu"), 4, 4 + 1))              { reset_value(); modeF = main_menu;    }
 800202a:	2305      	movs	r3, #5
 800202c:	2204      	movs	r2, #4
 800202e:	2109      	movs	r1, #9
 8002030:	f7ff f8b8 	bl	80011a4 <xy_check>
 8002034:	2800      	cmp	r0, #0
 8002036:	d004      	beq.n	8002042 <select_mode+0x10e>
 8002038:	f7ff f8e0 	bl	80011fc <reset_value>
 800203c:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <select_mode+0x17c>)
 800203e:	701c      	strb	r4, [r3, #0]
 8002040:	e7ee      	b.n	8002020 <select_mode+0xec>
		else if(xy_check(0, strlen("Modulation Mode"), 6, 6 + 1))        { reset_value(); modeF = sound_menu;   }
 8002042:	2307      	movs	r3, #7
 8002044:	2206      	movs	r2, #6
 8002046:	210f      	movs	r1, #15
 8002048:	f7ff f8ac 	bl	80011a4 <xy_check>
 800204c:	2800      	cmp	r0, #0
 800204e:	d005      	beq.n	800205c <select_mode+0x128>
 8002050:	f7ff f8d4 	bl	80011fc <reset_value>
 8002054:	2201      	movs	r2, #1
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <select_mode+0x17c>)
		else if(xy_check(0, strlen("Setting Mode"), 8, 8 + 1))           { reset_value(); modeF = setting_menu; }
 8002058:	701a      	strb	r2, [r3, #0]
}
 800205a:	e7e1      	b.n	8002020 <select_mode+0xec>
		else if(xy_check(0, strlen("Setting Mode"), 8, 8 + 1))           { reset_value(); modeF = setting_menu; }
 800205c:	2309      	movs	r3, #9
 800205e:	2208      	movs	r2, #8
 8002060:	210c      	movs	r1, #12
 8002062:	f7ff f89f 	bl	80011a4 <xy_check>
 8002066:	2800      	cmp	r0, #0
 8002068:	d0da      	beq.n	8002020 <select_mode+0xec>
 800206a:	f7ff f8c7 	bl	80011fc <reset_value>
 800206e:	2202      	movs	r2, #2
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <select_mode+0x17c>)
 8002072:	e7f1      	b.n	8002058 <select_mode+0x124>
 8002074:	200000e4 	.word	0x200000e4
 8002078:	2000002d 	.word	0x2000002d
 800207c:	200000de 	.word	0x200000de
 8002080:	200002c4 	.word	0x200002c4
 8002084:	200000d9 	.word	0x200000d9
 8002088:	200002be 	.word	0x200002be
 800208c:	200002c5 	.word	0x200002c5
 8002090:	20000000 	.word	0x20000000
 8002094:	08005514 	.word	0x08005514
 8002098:	2000002f 	.word	0x2000002f
 800209c:	0800560f 	.word	0x0800560f
 80020a0:	080056e5 	.word	0x080056e5
 80020a4:	0800570c 	.word	0x0800570c
 80020a8:	080056ef 	.word	0x080056ef
 80020ac:	080056ff 	.word	0x080056ff
 80020b0:	200002bc 	.word	0x200002bc

080020b4 <start_dis>:
void start_dis(void){
 80020b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	LCD_Clear(set_bcolor);
 80020b6:	4c0d      	ldr	r4, [pc, #52]	; (80020ec <start_dis+0x38>)
	LCD_FillScreen(color);
 80020b8:	7820      	ldrb	r0, [r4, #0]
 80020ba:	f7fe ff87 	bl	8000fcc <LCD_FillScreen>
	LCD_putsXY(3, 4, "< Skill Competition Task 3 >", set_tcolor, set_bcolor);
 80020be:	4d0c      	ldr	r5, [pc, #48]	; (80020f0 <start_dis+0x3c>)
	LCD_DrawText(str, x * 15, y * 19, color, bg_color);
 80020c0:	7822      	ldrb	r2, [r4, #0]
 80020c2:	782b      	ldrb	r3, [r5, #0]
 80020c4:	212d      	movs	r1, #45	; 0x2d
 80020c6:	9200      	str	r2, [sp, #0]
 80020c8:	480a      	ldr	r0, [pc, #40]	; (80020f4 <start_dis+0x40>)
 80020ca:	224c      	movs	r2, #76	; 0x4c
 80020cc:	f7ff f836 	bl	800113c <LCD_DrawText>
 80020d0:	7822      	ldrb	r2, [r4, #0]
 80020d2:	782b      	ldrb	r3, [r5, #0]
 80020d4:	2169      	movs	r1, #105	; 0x69
 80020d6:	9200      	str	r2, [sp, #0]
 80020d8:	4807      	ldr	r0, [pc, #28]	; (80020f8 <start_dis+0x44>)
 80020da:	2272      	movs	r2, #114	; 0x72
 80020dc:	f7ff f82e 	bl	800113c <LCD_DrawText>
	HAL_Delay(2000);
 80020e0:	20fa      	movs	r0, #250	; 0xfa
 80020e2:	00c0      	lsls	r0, r0, #3
 80020e4:	f000 fc34 	bl	8002950 <HAL_Delay>
}
 80020e8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	2000002d 	.word	0x2000002d
 80020f0:	200002be 	.word	0x200002be
 80020f4:	08005719 	.word	0x08005719
 80020f8:	08005736 	.word	0x08005736

080020fc <start>:
void start(void){
 80020fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)){
 80020fe:	4d22      	ldr	r5, [pc, #136]	; (8002188 <start+0x8c>)
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8002104:	055b      	lsls	r3, r3, #21
 8002106:	0011      	movs	r1, r2
 8002108:	4019      	ands	r1, r3
 800210a:	4f20      	ldr	r7, [pc, #128]	; (800218c <start+0x90>)
 800210c:	4c20      	ldr	r4, [pc, #128]	; (8002190 <start+0x94>)
 800210e:	4e21      	ldr	r6, [pc, #132]	; (8002194 <start+0x98>)
 8002110:	9101      	str	r1, [sp, #4]
 8002112:	421a      	tst	r2, r3
 8002114:	d025      	beq.n	8002162 <start+0x66>
		All_eepRead();
 8002116:	f7ff f90f 	bl	8001338 <All_eepRead>
		if(set_tcolor == set_bcolor) { set_tcolor = black; set_bcolor = white; }
 800211a:	783a      	ldrb	r2, [r7, #0]
 800211c:	7823      	ldrb	r3, [r4, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d103      	bne.n	800212a <start+0x2e>
 8002122:	2300      	movs	r3, #0
 8002124:	703b      	strb	r3, [r7, #0]
 8002126:	3305      	adds	r3, #5
 8002128:	7023      	strb	r3, [r4, #0]
		if(coor_volume < 60 || coor_volume > 210) coor_volume = 135;
 800212a:	7833      	ldrb	r3, [r6, #0]
 800212c:	3b3c      	subs	r3, #60	; 0x3c
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b96      	cmp	r3, #150	; 0x96
 8002132:	d901      	bls.n	8002138 <start+0x3c>
 8002134:	2387      	movs	r3, #135	; 0x87
 8002136:	7033      	strb	r3, [r6, #0]
		if(coor_pitch < 60 || coor_pitch > 210) coor_pitch = 135;
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <start+0x9c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	3b3c      	subs	r3, #60	; 0x3c
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b96      	cmp	r3, #150	; 0x96
 8002142:	d80a      	bhi.n	800215a <start+0x5e>
	start_dis();
 8002144:	f7ff ffb6 	bl	80020b4 <start_dis>
	LCD_FillScreen(color);
 8002148:	7820      	ldrb	r0, [r4, #0]
 800214a:	f7fe ff3f 	bl	8000fcc <LCD_FillScreen>
	__HAL_RCC_CLEAR_RESET_FLAGS();
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8002152:	041b      	lsls	r3, r3, #16
 8002154:	4313      	orrs	r3, r2
 8002156:	652b      	str	r3, [r5, #80]	; 0x50
}
 8002158:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if(coor_pitch < 60 || coor_pitch > 210) coor_pitch = 135;
 800215a:	2387      	movs	r3, #135	; 0x87
 800215c:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <start+0x9c>)
 800215e:	7013      	strb	r3, [r2, #0]
 8002160:	e7f0      	b.n	8002144 <start+0x48>
		Init_setting(reset_setting);
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff f86e 	bl	8001244 <Init_setting>
		All_eepWrite();
 8002168:	f7ff f8ec 	bl	8001344 <All_eepWrite>
		coor_volume = 135;
 800216c:	2387      	movs	r3, #135	; 0x87
		coor_pitch = 135;
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <start+0x9c>)
		coor_volume = 135;
 8002170:	7033      	strb	r3, [r6, #0]
		coor_pitch = 135;
 8002172:	7013      	strb	r3, [r2, #0]
		set_tcolor = black;
 8002174:	9b01      	ldr	r3, [sp, #4]
 8002176:	703b      	strb	r3, [r7, #0]
		set_bcolor = white;
 8002178:	2305      	movs	r3, #5
 800217a:	7023      	strb	r3, [r4, #0]
	start_dis();
 800217c:	f7ff ff9a 	bl	80020b4 <start_dis>
	if(state) time_setting(init_time);
 8002180:	9801      	ldr	r0, [sp, #4]
 8002182:	f7ff f923 	bl	80013cc <time_setting>
 8002186:	e7e2      	b.n	800214e <start+0x52>
 8002188:	40021000 	.word	0x40021000
 800218c:	200002be 	.word	0x200002be
 8002190:	2000002d 	.word	0x2000002d
 8002194:	20000012 	.word	0x20000012
 8002198:	20000011 	.word	0x20000011

0800219c <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void){
 800219c:	b513      	push	{r0, r1, r4, lr}
	if(buzM) buzC++;
 800219e:	4814      	ldr	r0, [pc, #80]	; (80021f0 <HAL_SYSTICK_Callback+0x54>)
 80021a0:	7801      	ldrb	r1, [r0, #0]
 80021a2:	2900      	cmp	r1, #0
 80021a4:	d00d      	beq.n	80021c2 <HAL_SYSTICK_Callback+0x26>
 80021a6:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <HAL_SYSTICK_Callback+0x58>)
 80021a8:	8813      	ldrh	r3, [r2, #0]
 80021aa:	3301      	adds	r3, #1
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	8013      	strh	r3, [r2, #0]

	if(buzM == 1){
 80021b0:	2901      	cmp	r1, #1
 80021b2:	d106      	bne.n	80021c2 <HAL_SYSTICK_Callback+0x26>
		if(buzC < 500) BUZ(1);
 80021b4:	24fa      	movs	r4, #250	; 0xfa
 80021b6:	4910      	ldr	r1, [pc, #64]	; (80021f8 <HAL_SYSTICK_Callback+0x5c>)
 80021b8:	0064      	lsls	r4, r4, #1
 80021ba:	42a3      	cmp	r3, r4
 80021bc:	d211      	bcs.n	80021e2 <HAL_SYSTICK_Callback+0x46>
 80021be:	2308      	movs	r3, #8
		else{
			buzM = buzC = 0;
			BUZ(0);
 80021c0:	618b      	str	r3, [r1, #24]
		}
	}

	if(touched() >= have_xy) getTouch_state = get_coordinate;
 80021c2:	f7fe fe87 	bl	8000ed4 <touched>
 80021c6:	4243      	negs	r3, r0
 80021c8:	4158      	adcs	r0, r3
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <HAL_SYSTICK_Callback+0x60>)
 80021cc:	b2c1      	uxtb	r1, r0
	else getTouch_state = reset_coordinate;
	curXY = getPoint(getTouch_state);
 80021ce:	4668      	mov	r0, sp
 80021d0:	7019      	strb	r1, [r3, #0]
 80021d2:	f7fe fe87 	bl	8000ee4 <getPoint>
 80021d6:	2206      	movs	r2, #6
 80021d8:	4669      	mov	r1, sp
 80021da:	4809      	ldr	r0, [pc, #36]	; (8002200 <HAL_SYSTICK_Callback+0x64>)
 80021dc:	f002 fd1c 	bl	8004c18 <memcpy>
}
 80021e0:	bd13      	pop	{r0, r1, r4, pc}
			buzM = buzC = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	8013      	strh	r3, [r2, #0]
 80021e6:	7003      	strb	r3, [r0, #0]
			BUZ(0);
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	031b      	lsls	r3, r3, #12
 80021ec:	e7e8      	b.n	80021c0 <HAL_SYSTICK_Callback+0x24>
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	200000dc 	.word	0x200000dc
 80021f4:	200000da 	.word	0x200000da
 80021f8:	50000400 	.word	0x50000400
 80021fc:	20000013 	.word	0x20000013
 8002200:	200000de 	.word	0x200000de

08002204 <HAL_TIM_PeriodElapsedCallback>:

}

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
// If this Code don`t play you need annotation inversion for 'value'

	if(htim->Instance == TIM6){
 8002206:	6802      	ldr	r2, [r0, #0]
 8002208:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800220a:	429a      	cmp	r2, r3
 800220c:	d140      	bne.n	8002290 <HAL_TIM_PeriodElapsedCallback+0x8c>
		HAL_ADC_Start_DMA(&hadc, &adcV, 1);
 800220e:	4d2c      	ldr	r5, [pc, #176]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002210:	2201      	movs	r2, #1
 8002212:	0029      	movs	r1, r5
 8002214:	482b      	ldr	r0, [pc, #172]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002216:	f000 fcd9 	bl	8002bcc <HAL_ADC_Start_DMA>
	switch(pitch_state){
 800221a:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800221c:	4c2b      	ldr	r4, [pc, #172]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800221e:	7818      	ldrb	r0, [r3, #0]
 8002220:	280a      	cmp	r0, #10
 8002222:	d809      	bhi.n	8002238 <HAL_TIM_PeriodElapsedCallback+0x34>
 8002224:	f7fd ff78 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002228:	42444648 	.word	0x42444648
 800222c:	393b3d40 	.word	0x393b3d40
 8002230:	3537      	.short	0x3537
 8002232:	06          	.byte	0x06
 8002233:	00          	.byte	0x00
	case PITCH_STATE_10:   pitch =  0.1;     break;
 8002234:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
	case PITCH_STATE_0:    pitch = 10.5;     break;
 8002236:	6023      	str	r3, [r4, #0]

		pitch_set();
		if(++tick > (adcV / 4) * pitch){
 8002238:	4e26      	ldr	r6, [pc, #152]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800223a:	682d      	ldr	r5, [r5, #0]
 800223c:	6833      	ldr	r3, [r6, #0]
 800223e:	1c58      	adds	r0, r3, #1
 8002240:	6030      	str	r0, [r6, #0]
 8002242:	f7fe fc1d 	bl	8000a80 <__aeabi_ui2f>
 8002246:	1c07      	adds	r7, r0, #0
 8002248:	08a8      	lsrs	r0, r5, #2
 800224a:	f7fe fc19 	bl	8000a80 <__aeabi_ui2f>
 800224e:	6821      	ldr	r1, [r4, #0]
 8002250:	f7fe faf0 	bl	8000834 <__aeabi_fmul>
 8002254:	1c01      	adds	r1, r0, #0
 8002256:	1c38      	adds	r0, r7, #0
 8002258:	f7fe f90e 	bl	8000478 <__aeabi_fcmpgt>
 800225c:	2800      	cmp	r0, #0
 800225e:	d00a      	beq.n	8002276 <HAL_TIM_PeriodElapsedCallback+0x72>
			tick = 0;
 8002260:	2300      	movs	r3, #0
//			if(value > 0) value = 0;
//			else value = (uint32_t)max_volume * 40;
			value = value > 0 ? 0 : (uint32_t)max_volume * 40;
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
			tick = 0;
 8002264:	6033      	str	r3, [r6, #0]
			value = value > 0 ? 0 : (uint32_t)max_volume * 40;
 8002266:	6811      	ldr	r1, [r2, #0]
 8002268:	4299      	cmp	r1, r3
 800226a:	d103      	bne.n	8002274 <HAL_TIM_PeriodElapsedCallback+0x70>
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800226e:	8819      	ldrh	r1, [r3, #0]
 8002270:	2328      	movs	r3, #40	; 0x28
 8002272:	434b      	muls	r3, r1
 8002274:	6013      	str	r3, [r2, #0]
		}

		if(sound_start == speaker_on && SOUND_IN) HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <HAL_TIM_PeriodElapsedCallback+0x8c>
 800227e:	2d96      	cmp	r5, #150	; 0x96
 8002280:	d906      	bls.n	8002290 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8002282:	2200      	movs	r2, #0
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002286:	0011      	movs	r1, r2
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4816      	ldr	r0, [pc, #88]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800228c:	f000 fe58 	bl	8002f40 <HAL_DAC_SetValue>
	}
}
 8002290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	case PITCH_STATE_9:    pitch =  0.2;     break;
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002294:	e7cf      	b.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x32>
	case PITCH_STATE_8:    pitch =  0.4;     break;
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002298:	e7cd      	b.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x32>
	case PITCH_STATE_7:    pitch =  0.8;     break;
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800229c:	e7cb      	b.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x32>
	case PITCH_STATE_6:    pitch =  0.9;     break;
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80022a0:	e7c9      	b.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x32>
	case PITCH_STATE_5:    pitch =  1.0;     break;
 80022a2:	23fe      	movs	r3, #254	; 0xfe
 80022a4:	059b      	lsls	r3, r3, #22
 80022a6:	e7c6      	b.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x32>
	case PITCH_STATE_4:    pitch =  2.5;     break;
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80022aa:	e7c4      	b.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x32>
	case PITCH_STATE_3:    pitch =  4.5;     break;
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80022ae:	e7c2      	b.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x32>
	case PITCH_STATE_2:    pitch =  8.5;     break;
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80022b2:	e7c0      	b.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x32>
	case PITCH_STATE_1:    pitch =  9.5;     break;
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80022b6:	e7be      	b.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x32>
	case PITCH_STATE_0:    pitch = 10.5;     break;
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80022ba:	e7bc      	b.n	8002236 <HAL_TIM_PeriodElapsedCallback+0x32>
 80022bc:	40001000 	.word	0x40001000
 80022c0:	200000d4 	.word	0x200000d4
 80022c4:	200000ec 	.word	0x200000ec
 80022c8:	2000002c 	.word	0x2000002c
 80022cc:	20000028 	.word	0x20000028
 80022d0:	3dcccccd 	.word	0x3dcccccd
 80022d4:	200002c0 	.word	0x200002c0
 80022d8:	200002d8 	.word	0x200002d8
 80022dc:	20000024 	.word	0x20000024
 80022e0:	200002bf 	.word	0x200002bf
 80022e4:	20000148 	.word	0x20000148
 80022e8:	3e4ccccd 	.word	0x3e4ccccd
 80022ec:	3ecccccd 	.word	0x3ecccccd
 80022f0:	3f4ccccd 	.word	0x3f4ccccd
 80022f4:	3f666666 	.word	0x3f666666
 80022f8:	40200000 	.word	0x40200000
 80022fc:	40900000 	.word	0x40900000
 8002300:	41080000 	.word	0x41080000
 8002304:	41180000 	.word	0x41180000
 8002308:	41280000 	.word	0x41280000

0800230c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800230c:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800230e:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_DeInit();
 8002310:	f000 fac0 	bl	8002894 <HAL_DeInit>
		HAL_NVIC_SystemReset();
 8002314:	f000 fd7a 	bl	8002e0c <HAL_NVIC_SystemReset>
	while (1)
 8002318:	e7fa      	b.n	8002310 <Error_Handler+0x4>
	...

0800231c <SystemClock_Config>:
{
 800231c:	b510      	push	{r4, lr}
 800231e:	b09c      	sub	sp, #112	; 0x70
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002320:	2224      	movs	r2, #36	; 0x24
 8002322:	2100      	movs	r1, #0
 8002324:	a80f      	add	r0, sp, #60	; 0x3c
 8002326:	f002 fc80 	bl	8004c2a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800232a:	2214      	movs	r2, #20
 800232c:	2100      	movs	r1, #0
 800232e:	a801      	add	r0, sp, #4
 8002330:	f002 fc7b 	bl	8004c2a <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002334:	2220      	movs	r2, #32
 8002336:	2100      	movs	r1, #0
 8002338:	a806      	add	r0, sp, #24
 800233a:	f002 fc76 	bl	8004c2a <memset>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800233e:	491b      	ldr	r1, [pc, #108]	; (80023ac <SystemClock_Config+0x90>)
 8002340:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <SystemClock_Config+0x94>)
 8002342:	680b      	ldr	r3, [r1, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002344:	2401      	movs	r4, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002346:	401a      	ands	r2, r3
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002350:	2302      	movs	r3, #2
 8002352:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002354:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002356:	2300      	movs	r3, #0
 8002358:	9319      	str	r3, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	02db      	lsls	r3, r3, #11
 800235e:	931a      	str	r3, [sp, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002360:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002362:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002364:	03db      	lsls	r3, r3, #15
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002366:	a80e      	add	r0, sp, #56	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002368:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800236a:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800236c:	931b      	str	r3, [sp, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800236e:	f001 fb49 	bl	8003a04 <HAL_RCC_OscConfig>
 8002372:	2800      	cmp	r0, #0
 8002374:	d001      	beq.n	800237a <SystemClock_Config+0x5e>
		Error_Handler();
 8002376:	f7ff ffc9 	bl	800230c <Error_Handler>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800237a:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800237c:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800237e:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002380:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002382:	3b0c      	subs	r3, #12
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002384:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002386:	0021      	movs	r1, r4
 8002388:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800238a:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800238c:	f001 fdbc 	bl	8003f08 <HAL_RCC_ClockConfig>
 8002390:	2800      	cmp	r0, #0
 8002392:	d1f0      	bne.n	8002376 <SystemClock_Config+0x5a>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002394:	2309      	movs	r3, #9
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002396:	9008      	str	r0, [sp, #32]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002398:	900b      	str	r0, [sp, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800239a:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800239c:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800239e:	f001 fea1 	bl	80040e4 <HAL_RCCEx_PeriphCLKConfig>
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d1e7      	bne.n	8002376 <SystemClock_Config+0x5a>
}
 80023a6:	b01c      	add	sp, #112	; 0x70
 80023a8:	bd10      	pop	{r4, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	40007000 	.word	0x40007000
 80023b0:	ffffe7ff 	.word	0xffffe7ff

080023b4 <main>:
{
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	2701      	movs	r7, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023b8:	2402      	movs	r4, #2
{
 80023ba:	b08d      	sub	sp, #52	; 0x34
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023bc:	4e76      	ldr	r6, [pc, #472]	; (8002598 <main+0x1e4>)
	HAL_Init();
 80023be:	f000 faa1 	bl	8002904 <HAL_Init>
	SystemClock_Config();
 80023c2:	f7ff ffab 	bl	800231c <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c6:	2214      	movs	r2, #20
 80023c8:	2100      	movs	r1, #0
 80023ca:	a807      	add	r0, sp, #28
 80023cc:	f002 fc2d 	bl	8004c2a <memset>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023d0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80023d2:	2200      	movs	r2, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	433b      	orrs	r3, r7
 80023d6:	62f3      	str	r3, [r6, #44]	; 0x2c
 80023d8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80023da:	2108      	movs	r1, #8
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023dc:	403b      	ands	r3, r7
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023e2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80023e4:	486d      	ldr	r0, [pc, #436]	; (800259c <main+0x1e8>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	4323      	orrs	r3, r4
 80023e8:	62f3      	str	r3, [r6, #44]	; 0x2c
 80023ea:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2500      	movs	r5, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	4023      	ands	r3, r4
 80023f0:	9302      	str	r3, [sp, #8]
 80023f2:	9b02      	ldr	r3, [sp, #8]
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80023f4:	f000 ff64 	bl	80032c0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = BUZ_Pin;
 80023f8:	2308      	movs	r3, #8
	HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80023fa:	4868      	ldr	r0, [pc, #416]	; (800259c <main+0x1e8>)
 80023fc:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = BUZ_Pin;
 80023fe:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002400:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002402:	9708      	str	r7, [sp, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8002406:	f000 fe9b 	bl	8003140 <HAL_GPIO_Init>
	ADC_ChannelConfTypeDef sConfig = {0};
 800240a:	2208      	movs	r2, #8
 800240c:	0029      	movs	r1, r5
 800240e:	a807      	add	r0, sp, #28
 8002410:	f002 fc0b 	bl	8004c2a <memset>
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002414:	23c2      	movs	r3, #194	; 0xc2
	hadc.Init.OversamplingMode = DISABLE;
 8002416:	4c62      	ldr	r4, [pc, #392]	; (80025a0 <main+0x1ec>)
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002418:	33ff      	adds	r3, #255	; 0xff
 800241a:	6263      	str	r3, [r4, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = DISABLE;
 800241c:	0023      	movs	r3, r4
 800241e:	332c      	adds	r3, #44	; 0x2c
 8002420:	701d      	strb	r5, [r3, #0]
	hadc.Instance = ADC1;
 8002422:	4b60      	ldr	r3, [pc, #384]	; (80025a4 <main+0x1f0>)
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002424:	0020      	movs	r0, r4
	hadc.Instance = ADC1;
 8002426:	6023      	str	r3, [r4, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	05db      	lsls	r3, r3, #23
 800242c:	6063      	str	r3, [r4, #4]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800242e:	2304      	movs	r3, #4
	hadc.Init.ContinuousConvMode = DISABLE;
 8002430:	8425      	strh	r5, [r4, #32]
	hadc.Init.OversamplingMode = DISABLE;
 8002432:	63e5      	str	r5, [r4, #60]	; 0x3c
	hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002434:	63a5      	str	r5, [r4, #56]	; 0x38
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002436:	62a5      	str	r5, [r4, #40]	; 0x28
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002438:	6325      	str	r5, [r4, #48]	; 0x30
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 800243a:	6365      	str	r5, [r4, #52]	; 0x34
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800243c:	60a5      	str	r5, [r4, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800243e:	60e5      	str	r5, [r4, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002440:	6127      	str	r7, [r4, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002442:	6163      	str	r3, [r4, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8002444:	61a5      	str	r5, [r4, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002446:	61e5      	str	r5, [r4, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002448:	f000 fae6 	bl	8002a18 <HAL_ADC_Init>
 800244c:	42a8      	cmp	r0, r5
 800244e:	d001      	beq.n	8002454 <main+0xa0>
		Error_Handler();
 8002450:	f7ff ff5c 	bl	800230c <Error_Handler>
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002454:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002456:	a907      	add	r1, sp, #28
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002458:	015b      	lsls	r3, r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800245a:	0020      	movs	r0, r4
	sConfig.Channel = ADC_CHANNEL_0;
 800245c:	9707      	str	r7, [sp, #28]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800245e:	9308      	str	r3, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002460:	f000 fc4a 	bl	8002cf8 <HAL_ADC_ConfigChannel>
 8002464:	1e01      	subs	r1, r0, #0
 8002466:	d1f3      	bne.n	8002450 <main+0x9c>
	DAC_ChannelConfTypeDef sConfig = {0};
 8002468:	2208      	movs	r2, #8
 800246a:	a805      	add	r0, sp, #20
 800246c:	f002 fbdd 	bl	8004c2a <memset>
	hdac.Instance = DAC;
 8002470:	4d4d      	ldr	r5, [pc, #308]	; (80025a8 <main+0x1f4>)
 8002472:	4b4e      	ldr	r3, [pc, #312]	; (80025ac <main+0x1f8>)
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002474:	0028      	movs	r0, r5
	hdac.Instance = DAC;
 8002476:	602b      	str	r3, [r5, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002478:	f000 fcf4 	bl	8002e64 <HAL_DAC_Init>
 800247c:	1e02      	subs	r2, r0, #0
 800247e:	d1e7      	bne.n	8002450 <main+0x9c>
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002480:	9005      	str	r0, [sp, #20]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002482:	9006      	str	r0, [sp, #24]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002484:	a905      	add	r1, sp, #20
 8002486:	0028      	movs	r0, r5
 8002488:	f000 fd02 	bl	8002e90 <HAL_DAC_ConfigChannel>
 800248c:	2800      	cmp	r0, #0
 800248e:	d1df      	bne.n	8002450 <main+0x9c>
	hi2c1.Instance = I2C1;
 8002490:	4c47      	ldr	r4, [pc, #284]	; (80025b0 <main+0x1fc>)
 8002492:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <main+0x200>)
	hi2c1.Init.OwnAddress1 = 0;
 8002494:	60a0      	str	r0, [r4, #8]
	hi2c1.Instance = I2C1;
 8002496:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x00100413;
 8002498:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <main+0x204>)
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800249a:	6120      	str	r0, [r4, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800249c:	6160      	str	r0, [r4, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800249e:	61a0      	str	r0, [r4, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024a0:	61e0      	str	r0, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024a2:	6220      	str	r0, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024a4:	0020      	movs	r0, r4
	hi2c1.Init.Timing = 0x00100413;
 80024a6:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024a8:	60e7      	str	r7, [r4, #12]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024aa:	f001 f891 	bl	80035d0 <HAL_I2C_Init>
 80024ae:	1e01      	subs	r1, r0, #0
 80024b0:	d1ce      	bne.n	8002450 <main+0x9c>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024b2:	0020      	movs	r0, r4
 80024b4:	f001 fa06 	bl	80038c4 <HAL_I2CEx_ConfigAnalogFilter>
 80024b8:	1e01      	subs	r1, r0, #0
 80024ba:	d1c9      	bne.n	8002450 <main+0x9c>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80024bc:	0020      	movs	r0, r4
 80024be:	f001 fa27 	bl	8003910 <HAL_I2CEx_ConfigDigitalFilter>
 80024c2:	1e04      	subs	r4, r0, #0
 80024c4:	d1c4      	bne.n	8002450 <main+0x9c>
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80024c6:	2080      	movs	r0, #128	; 0x80
 80024c8:	0140      	lsls	r0, r0, #5
 80024ca:	f001 fa45 	bl	8003958 <HAL_I2CEx_EnableFastModePlus>
	__HAL_RCC_DMA1_CLK_ENABLE();
 80024ce:	6b33      	ldr	r3, [r6, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024d0:	0022      	movs	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 80024d2:	433b      	orrs	r3, r7
 80024d4:	6333      	str	r3, [r6, #48]	; 0x30
 80024d6:	6b33      	ldr	r3, [r6, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024d8:	0021      	movs	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 80024da:	403b      	ands	r3, r7
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024dc:	2009      	movs	r0, #9
	__HAL_RCC_DMA1_CLK_ENABLE();
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024e2:	f000 fc5d 	bl	8002da0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024e6:	2009      	movs	r0, #9
 80024e8:	f000 fc84 	bl	8002df4 <HAL_NVIC_EnableIRQ>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ec:	2208      	movs	r2, #8
 80024ee:	0021      	movs	r1, r4
 80024f0:	a803      	add	r0, sp, #12
 80024f2:	f002 fb9a 	bl	8004c2a <memset>
	htim6.Instance = TIM6;
 80024f6:	4e31      	ldr	r6, [pc, #196]	; (80025bc <main+0x208>)
 80024f8:	4b31      	ldr	r3, [pc, #196]	; (80025c0 <main+0x20c>)
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024fa:	0030      	movs	r0, r6
	htim6.Instance = TIM6;
 80024fc:	6033      	str	r3, [r6, #0]
	htim6.Init.Prescaler = 4-1;
 80024fe:	2303      	movs	r3, #3
 8002500:	6073      	str	r3, [r6, #4]
	htim6.Init.Period = 600-1;
 8002502:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <main+0x210>)
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002504:	60b4      	str	r4, [r6, #8]
	htim6.Init.Period = 600-1;
 8002506:	60f3      	str	r3, [r6, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002508:	6174      	str	r4, [r6, #20]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800250a:	f001 feef 	bl	80042ec <HAL_TIM_Base_Init>
 800250e:	2800      	cmp	r0, #0
 8002510:	d19e      	bne.n	8002450 <main+0x9c>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002512:	9003      	str	r0, [sp, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002514:	9004      	str	r0, [sp, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002516:	a903      	add	r1, sp, #12
 8002518:	0030      	movs	r0, r6
 800251a:	f001 ffc3 	bl	80044a4 <HAL_TIMEx_MasterConfigSynchronization>
 800251e:	1e03      	subs	r3, r0, #0
 8002520:	d196      	bne.n	8002450 <main+0x9c>
	huart1.Instance = USART1;
 8002522:	4829      	ldr	r0, [pc, #164]	; (80025c8 <main+0x214>)
 8002524:	4a29      	ldr	r2, [pc, #164]	; (80025cc <main+0x218>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002526:	6083      	str	r3, [r0, #8]
	huart1.Instance = USART1;
 8002528:	6002      	str	r2, [r0, #0]
	huart1.Init.BaudRate = 115200;
 800252a:	22e1      	movs	r2, #225	; 0xe1
 800252c:	0252      	lsls	r2, r2, #9
 800252e:	6042      	str	r2, [r0, #4]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002530:	220c      	movs	r2, #12
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002532:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002534:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002536:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002538:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800253a:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800253c:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800253e:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002540:	f002 fb0e 	bl	8004b60 <HAL_UART_Init>
 8002544:	2800      	cmp	r0, #0
 8002546:	d000      	beq.n	800254a <main+0x196>
 8002548:	e782      	b.n	8002450 <main+0x9c>
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	3011      	adds	r0, #17
 800254e:	0011      	movs	r1, r2
 8002550:	f000 fc26 	bl	8002da0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002554:	2011      	movs	r0, #17
 8002556:	f000 fc4d 	bl	8002df4 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 800255a:	0030      	movs	r0, r6
 800255c:	f001 feea 	bl	8004334 <HAL_TIM_Base_Start_IT>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002560:	2100      	movs	r1, #0
 8002562:	0028      	movs	r0, r5
 8002564:	f000 fcb4 	bl	8002ed0 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8002568:	2300      	movs	r3, #0
 800256a:	0028      	movs	r0, r5
 800256c:	001a      	movs	r2, r3
 800256e:	0019      	movs	r1, r3
 8002570:	f000 fce6 	bl	8002f40 <HAL_DAC_SetValue>
	INIT_FT6206();
 8002574:	f7fe fca8 	bl	8000ec8 <INIT_FT6206>
	FT6206_Begin(FT62XX_DEFAULT_THRESHOLD);
 8002578:	20ff      	movs	r0, #255	; 0xff
 800257a:	f7fe fc33 	bl	8000de4 <FT6206_Begin>
	LCD_Clear(set_bcolor);
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <main+0x21c>)
	LCD_FillScreen(color);
 8002580:	7818      	ldrb	r0, [r3, #0]
 8002582:	f7fe fd23 	bl	8000fcc <LCD_FillScreen>
	start();
 8002586:	f7ff fdb9 	bl	80020fc <start>
		main_fuc[modeF]();
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <main+0x220>)
 800258c:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <main+0x224>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	589b      	ldr	r3, [r3, r2]
 8002594:	4798      	blx	r3
	while (1)
 8002596:	e7f8      	b.n	800258a <main+0x1d6>
 8002598:	40021000 	.word	0x40021000
 800259c:	50000400 	.word	0x50000400
 80025a0:	200000ec 	.word	0x200000ec
 80025a4:	40012400 	.word	0x40012400
 80025a8:	20000148 	.word	0x20000148
 80025ac:	40007400 	.word	0x40007400
 80025b0:	200001a0 	.word	0x200001a0
 80025b4:	40005400 	.word	0x40005400
 80025b8:	00100413 	.word	0x00100413
 80025bc:	200001f4 	.word	0x200001f4
 80025c0:	40001000 	.word	0x40001000
 80025c4:	00000257 	.word	0x00000257
 80025c8:	20000234 	.word	0x20000234
 80025cc:	40013800 	.word	0x40013800
 80025d0:	2000002d 	.word	0x2000002d
 80025d4:	200002bc 	.word	0x200002bc
 80025d8:	20000014 	.word	0x20000014

080025dc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025dc:	2201      	movs	r2, #1
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_MspInit+0x18>)
 80025e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025e2:	430a      	orrs	r2, r1
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	2280      	movs	r2, #128	; 0x80
 80025e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80025ea:	0552      	lsls	r2, r2, #21
 80025ec:	430a      	orrs	r2, r1
 80025ee:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025f0:	4770      	bx	lr
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025f8:	b530      	push	{r4, r5, lr}
 80025fa:	0005      	movs	r5, r0
 80025fc:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fe:	2214      	movs	r2, #20
 8002600:	2100      	movs	r1, #0
 8002602:	a801      	add	r0, sp, #4
 8002604:	f002 fb11 	bl	8004c2a <memset>
  if(hadc->Instance==ADC1)
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_ADC_MspInit+0x80>)
 800260a:	682a      	ldr	r2, [r5, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d130      	bne.n	8002672 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002610:	2280      	movs	r2, #128	; 0x80
 8002612:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_ADC_MspInit+0x84>)
 8002614:	0092      	lsls	r2, r2, #2
 8002616:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800261a:	430a      	orrs	r2, r1
 800261c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	2201      	movs	r2, #1
 8002620:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002624:	4311      	orrs	r1, r2
 8002626:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262c:	4013      	ands	r3, r2
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002632:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002634:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002636:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002638:	f000 fd82 	bl	8003140 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800263c:	4c10      	ldr	r4, [pc, #64]	; (8002680 <HAL_ADC_MspInit+0x88>)
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_ADC_MspInit+0x8c>)
    hdma_adc.Init.Request = DMA_REQUEST_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002640:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8002642:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8002644:	2300      	movs	r3, #0
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002646:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002648:	1892      	adds	r2, r2, r2
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800264a:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800264c:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800264e:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002650:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc.Init.Mode = DMA_NORMAL;
 8002652:	61e3      	str	r3, [r4, #28]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002654:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002656:	23c0      	movs	r3, #192	; 0xc0
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002658:	00d2      	lsls	r2, r2, #3
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800265a:	019b      	lsls	r3, r3, #6
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800265c:	0020      	movs	r0, r4
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800265e:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002660:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002662:	f000 fc7b 	bl	8002f5c <HAL_DMA_Init>
 8002666:	2800      	cmp	r0, #0
 8002668:	d001      	beq.n	800266e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800266a:	f7ff fe4f 	bl	800230c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800266e:	64ec      	str	r4, [r5, #76]	; 0x4c
 8002670:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002672:	b007      	add	sp, #28
 8002674:	bd30      	pop	{r4, r5, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	40012400 	.word	0x40012400
 800267c:	40021000 	.word	0x40021000
 8002680:	20000158 	.word	0x20000158
 8002684:	40020008 	.word	0x40020008

08002688 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002688:	b510      	push	{r4, lr}
 800268a:	0004      	movs	r4, r0
 800268c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268e:	2214      	movs	r2, #20
 8002690:	2100      	movs	r1, #0
 8002692:	a801      	add	r0, sp, #4
 8002694:	f002 fac9 	bl	8004c2a <memset>
  if(hdac->Instance==DAC)
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_DAC_MspInit+0x4c>)
 800269a:	6822      	ldr	r2, [r4, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d116      	bne.n	80026ce <HAL_DAC_MspInit+0x46>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <HAL_DAC_MspInit+0x50>)
 80026a4:	0592      	lsls	r2, r2, #22
 80026a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_DAC_CLK_ENABLE();
 80026aa:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ac:	2101      	movs	r1, #1
    __HAL_RCC_DAC_CLK_ENABLE();
 80026ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b4:	430a      	orrs	r2, r1
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	400b      	ands	r3, r1
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026c0:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026c4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c6:	3b0d      	subs	r3, #13
 80026c8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ca:	f000 fd39 	bl	8003140 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80026ce:	b006      	add	sp, #24
 80026d0:	bd10      	pop	{r4, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	40007400 	.word	0x40007400
 80026d8:	40021000 	.word	0x40021000

080026dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026dc:	b510      	push	{r4, lr}
 80026de:	0004      	movs	r4, r0
 80026e0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e2:	2214      	movs	r2, #20
 80026e4:	2100      	movs	r1, #0
 80026e6:	a801      	add	r0, sp, #4
 80026e8:	f002 fa9f 	bl	8004c2a <memset>
  if(hi2c->Instance==I2C1)
 80026ec:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_I2C_MspInit+0x54>)
 80026ee:	6822      	ldr	r2, [r4, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d11a      	bne.n	800272a <HAL_I2C_MspInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f4:	2102      	movs	r1, #2
 80026f6:	4c0f      	ldr	r4, [pc, #60]	; (8002734 <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f8:	480f      	ldr	r0, [pc, #60]	; (8002738 <HAL_I2C_MspInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026fc:	430a      	orrs	r2, r1
 80026fe:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002700:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002702:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002704:	400b      	ands	r3, r1
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800270a:	23c0      	movs	r3, #192	; 0xc0
 800270c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800270e:	3bae      	subs	r3, #174	; 0xae
 8002710:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002714:	3b11      	subs	r3, #17
 8002716:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002718:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800271a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271c:	f000 fd10 	bl	8003140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002724:	039b      	lsls	r3, r3, #14
 8002726:	4313      	orrs	r3, r2
 8002728:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800272a:	b006      	add	sp, #24
 800272c:	bd10      	pop	{r4, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	40005400 	.word	0x40005400
 8002734:	40021000 	.word	0x40021000
 8002738:	50000400 	.word	0x50000400

0800273c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <HAL_TIM_Base_MspInit+0x14>)
 800273e:	6802      	ldr	r2, [r0, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d104      	bne.n	800274e <HAL_TIM_Base_MspInit+0x12>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002744:	2310      	movs	r3, #16
 8002746:	4a03      	ldr	r2, [pc, #12]	; (8002754 <HAL_TIM_Base_MspInit+0x18>)
 8002748:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800274a:	430b      	orrs	r3, r1
 800274c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800274e:	4770      	bx	lr
 8002750:	40001000 	.word	0x40001000
 8002754:	40021000 	.word	0x40021000

08002758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002758:	b510      	push	{r4, lr}
 800275a:	0004      	movs	r4, r0
 800275c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275e:	2214      	movs	r2, #20
 8002760:	2100      	movs	r1, #0
 8002762:	a801      	add	r0, sp, #4
 8002764:	f002 fa61 	bl	8004c2a <memset>
  if(huart->Instance==USART1)
 8002768:	4b10      	ldr	r3, [pc, #64]	; (80027ac <HAL_UART_MspInit+0x54>)
 800276a:	6822      	ldr	r2, [r4, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d11b      	bne.n	80027a8 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_UART_MspInit+0x58>)
 8002774:	01d2      	lsls	r2, r2, #7
 8002776:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 800277a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 800277e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002784:	430a      	orrs	r2, r1
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	400b      	ands	r3, r1
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002790:	23c0      	movs	r3, #192	; 0xc0
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279a:	185b      	adds	r3, r3, r1
 800279c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800279e:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80027a2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a4:	f000 fccc 	bl	8003140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027a8:	b006      	add	sp, #24
 80027aa:	bd10      	pop	{r4, pc}
 80027ac:	40013800 	.word	0x40013800
 80027b0:	40021000 	.word	0x40021000

080027b4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <NMI_Handler>

080027b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b6:	b510      	push	{r4, lr}

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_DeInit();
 80027b8:	f000 f86c 	bl	8002894 <HAL_DeInit>
	  HAL_NVIC_SystemReset();
 80027bc:	f000 fb26 	bl	8002e0c <HAL_NVIC_SystemReset>
  while (1)
 80027c0:	e7fa      	b.n	80027b8 <HardFault_Handler+0x2>

080027c2 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027c2:	4770      	bx	lr

080027c4 <PendSV_Handler>:
 80027c4:	4770      	bx	lr

080027c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027c6:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c8:	f000 f8b0 	bl	800292c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80027cc:	f000 fb46 	bl	8002e5c <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80027d0:	bd10      	pop	{r4, pc}
	...

080027d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80027d6:	4802      	ldr	r0, [pc, #8]	; (80027e0 <DMA1_Channel1_IRQHandler+0xc>)
 80027d8:	f000 fc44 	bl	8003064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027dc:	bd10      	pop	{r4, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	20000158 	.word	0x20000158

080027e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027e6:	4803      	ldr	r0, [pc, #12]	; (80027f4 <TIM6_DAC_IRQHandler+0x10>)
 80027e8:	f001 fdd4 	bl	8004394 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <TIM6_DAC_IRQHandler+0x14>)
 80027ee:	f000 fb8f 	bl	8002f10 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027f2:	bd10      	pop	{r4, pc}
 80027f4:	200001f4 	.word	0x200001f4
 80027f8:	20000148 	.word	0x20000148

080027fc <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027fc:	4a0b      	ldr	r2, [pc, #44]	; (800282c <_sbrk+0x30>)
 80027fe:	490c      	ldr	r1, [pc, #48]	; (8002830 <_sbrk+0x34>)
{
 8002800:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002802:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002804:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <_sbrk+0x38>)
{
 8002806:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002808:	6810      	ldr	r0, [r2, #0]
 800280a:	2800      	cmp	r0, #0
 800280c:	d101      	bne.n	8002812 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800280e:	480a      	ldr	r0, [pc, #40]	; (8002838 <_sbrk+0x3c>)
 8002810:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002812:	6810      	ldr	r0, [r2, #0]
 8002814:	18c3      	adds	r3, r0, r3
 8002816:	428b      	cmp	r3, r1
 8002818:	d906      	bls.n	8002828 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800281a:	f002 f9d3 	bl	8004bc4 <__errno>
 800281e:	230c      	movs	r3, #12
 8002820:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002822:	2001      	movs	r0, #1
 8002824:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002826:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002828:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800282a:	e7fc      	b.n	8002826 <_sbrk+0x2a>
 800282c:	00000400 	.word	0x00000400
 8002830:	20002000 	.word	0x20002000
 8002834:	200002dc 	.word	0x200002dc
 8002838:	200002f8 	.word	0x200002f8

0800283c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800283c:	4770      	bx	lr
	...

08002840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002840:	480d      	ldr	r0, [pc, #52]	; (8002878 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002842:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002844:	f7ff fffa 	bl	800283c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002848:	480c      	ldr	r0, [pc, #48]	; (800287c <LoopForever+0x6>)
  ldr r1, =_edata
 800284a:	490d      	ldr	r1, [pc, #52]	; (8002880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <LoopForever+0xe>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002860:	4c0a      	ldr	r4, [pc, #40]	; (800288c <LoopForever+0x16>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800286e:	f002 f9af 	bl	8004bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002872:	f7ff fd9f 	bl	80023b4 <main>

08002876 <LoopForever>:

LoopForever:
    b LoopForever
 8002876:	e7fe      	b.n	8002876 <LoopForever>
   ldr   r0, =_estack
 8002878:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002880:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002884:	080057cc 	.word	0x080057cc
  ldr r2, =_sbss
 8002888:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800288c:	200002f4 	.word	0x200002f4

08002890 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC1_COMP_IRQHandler>

08002892 <HAL_MspDeInit>:
 8002892:	4770      	bx	lr

08002894 <HAL_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002894:	2201      	movs	r2, #1
{
 8002896:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_RELEASE_RESET();
 8002898:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <HAL_DeInit+0x24>)
 800289c:	4252      	negs	r2, r2
 800289e:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_APB1_RELEASE_RESET();
 80028a0:	629c      	str	r4, [r3, #40]	; 0x28

  __HAL_RCC_APB2_FORCE_RESET();
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80028a4:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB_FORCE_RESET();
 80028a6:	621a      	str	r2, [r3, #32]
  __HAL_RCC_AHB_RELEASE_RESET();
 80028a8:	621c      	str	r4, [r3, #32]

  __HAL_RCC_IOP_FORCE_RESET();
 80028aa:	61da      	str	r2, [r3, #28]
  __HAL_RCC_IOP_RELEASE_RESET();
 80028ac:	61dc      	str	r4, [r3, #28]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80028ae:	f7ff fff0 	bl	8002892 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
}
 80028b2:	0020      	movs	r0, r4
 80028b4:	bd10      	pop	{r4, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028c0:	20fa      	movs	r0, #250	; 0xfa
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <HAL_InitTick+0x3c>)
 80028c4:	0080      	lsls	r0, r0, #2
 80028c6:	7819      	ldrb	r1, [r3, #0]
 80028c8:	f7fd fc3a 	bl	8000140 <__udivsi3>
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_InitTick+0x40>)
 80028ce:	0001      	movs	r1, r0
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	f7fd fc35 	bl	8000140 <__udivsi3>
 80028d6:	f000 faa7 	bl	8002e28 <HAL_SYSTICK_Config>
 80028da:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80028dc:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028de:	2c00      	cmp	r4, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028e2:	2d03      	cmp	r5, #3
 80028e4:	d807      	bhi.n	80028f6 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e6:	3802      	subs	r0, #2
 80028e8:	0022      	movs	r2, r4
 80028ea:	0029      	movs	r1, r5
 80028ec:	f000 fa58 	bl	8002da0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028f0:	0020      	movs	r0, r4
 80028f2:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_InitTick+0x44>)
 80028f4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	2000003c 	.word	0x2000003c
 80028fc:	20000038 	.word	0x20000038
 8002900:	20000040 	.word	0x20000040

08002904 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002904:	2340      	movs	r3, #64	; 0x40
 8002906:	4a08      	ldr	r2, [pc, #32]	; (8002928 <HAL_Init+0x24>)
{
 8002908:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800290a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800290c:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800290e:	430b      	orrs	r3, r1
 8002910:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002912:	f7ff ffd3 	bl	80028bc <HAL_InitTick>
 8002916:	1e04      	subs	r4, r0, #0
 8002918:	d103      	bne.n	8002922 <HAL_Init+0x1e>
    HAL_MspInit();
 800291a:	f7ff fe5f 	bl	80025dc <HAL_MspInit>
}
 800291e:	0020      	movs	r0, r4
 8002920:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002922:	2401      	movs	r4, #1
 8002924:	e7fb      	b.n	800291e <HAL_Init+0x1a>
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	40022000 	.word	0x40022000

0800292c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800292c:	4a03      	ldr	r2, [pc, #12]	; (800293c <HAL_IncTick+0x10>)
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <HAL_IncTick+0x14>)
 8002930:	6811      	ldr	r1, [r2, #0]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	185b      	adds	r3, r3, r1
 8002936:	6013      	str	r3, [r2, #0]
}
 8002938:	4770      	bx	lr
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	200002e0 	.word	0x200002e0
 8002940:	2000003c 	.word	0x2000003c

08002944 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002944:	4b01      	ldr	r3, [pc, #4]	; (800294c <HAL_GetTick+0x8>)
 8002946:	6818      	ldr	r0, [r3, #0]
}
 8002948:	4770      	bx	lr
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	200002e0 	.word	0x200002e0

08002950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff fff6 	bl	8002944 <HAL_GetTick>
 8002958:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295a:	1c63      	adds	r3, r4, #1
 800295c:	d002      	beq.n	8002964 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800295e:	4b04      	ldr	r3, [pc, #16]	; (8002970 <HAL_Delay+0x20>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002964:	f7ff ffee 	bl	8002944 <HAL_GetTick>
 8002968:	1b40      	subs	r0, r0, r5
 800296a:	42a0      	cmp	r0, r4
 800296c:	d3fa      	bcc.n	8002964 <HAL_Delay+0x14>
  {
  }
}
 800296e:	bd70      	pop	{r4, r5, r6, pc}
 8002970:	2000003c 	.word	0x2000003c

08002974 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <ADC_DelayMicroSecond+0x24>)
{
 8002976:	b513      	push	{r0, r1, r4, lr}
 8002978:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800297a:	4908      	ldr	r1, [pc, #32]	; (800299c <ADC_DelayMicroSecond+0x28>)
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	f7fd fbdf 	bl	8000140 <__udivsi3>
 8002982:	4344      	muls	r4, r0
 8002984:	9401      	str	r4, [sp, #4]

  while (waitLoopIndex != 0U)
 8002986:	9b01      	ldr	r3, [sp, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d100      	bne.n	800298e <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  }
}
 800298c:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800298e:	9b01      	ldr	r3, [sp, #4]
 8002990:	3b01      	subs	r3, #1
 8002992:	9301      	str	r3, [sp, #4]
 8002994:	e7f7      	b.n	8002986 <ADC_DelayMicroSecond+0x12>
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	20000038 	.word	0x20000038
 800299c:	000f4240 	.word	0x000f4240

080029a0 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029a0:	2103      	movs	r1, #3
 80029a2:	6803      	ldr	r3, [r0, #0]
{
 80029a4:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029a6:	689a      	ldr	r2, [r3, #8]
{
 80029a8:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029aa:	400a      	ands	r2, r1
 80029ac:	2a01      	cmp	r2, #1
 80029ae:	d104      	bne.n	80029ba <ADC_Enable+0x1a>
 80029b0:	6819      	ldr	r1, [r3, #0]
 80029b2:	4211      	tst	r1, r2
 80029b4:	d001      	beq.n	80029ba <ADC_Enable+0x1a>
  return HAL_OK;
 80029b6:	2000      	movs	r0, #0
}
 80029b8:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80029ba:	6899      	ldr	r1, [r3, #8]
 80029bc:	4a15      	ldr	r2, [pc, #84]	; (8002a14 <ADC_Enable+0x74>)
 80029be:	4211      	tst	r1, r2
 80029c0:	d008      	beq.n	80029d4 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c2:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c4:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80029c8:	4313      	orrs	r3, r2
 80029ca:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029ce:	4303      	orrs	r3, r0
 80029d0:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80029d2:	e7f1      	b.n	80029b8 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 80029d4:	2501      	movs	r5, #1
 80029d6:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80029d8:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 80029da:	432a      	orrs	r2, r5
 80029dc:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80029de:	f7ff ffc9 	bl	8002974 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 80029e2:	f7ff ffaf 	bl	8002944 <HAL_GetTick>
 80029e6:	0006      	movs	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	422b      	tst	r3, r5
 80029ee:	d1e2      	bne.n	80029b6 <ADC_Enable+0x16>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029f0:	f7ff ffa8 	bl	8002944 <HAL_GetTick>
 80029f4:	1b80      	subs	r0, r0, r6
 80029f6:	280a      	cmp	r0, #10
 80029f8:	d9f6      	bls.n	80029e8 <ADC_Enable+0x48>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	422b      	tst	r3, r5
 8002a00:	d1f2      	bne.n	80029e8 <ADC_Enable+0x48>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a02:	2310      	movs	r3, #16
 8002a04:	6d62      	ldr	r2, [r4, #84]	; 0x54
          return HAL_ERROR;
 8002a06:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a0e:	431d      	orrs	r5, r3
 8002a10:	65a5      	str	r5, [r4, #88]	; 0x58
          return HAL_ERROR;
 8002a12:	e7d1      	b.n	80029b8 <ADC_Enable+0x18>
 8002a14:	80000017 	.word	0x80000017

08002a18 <HAL_ADC_Init>:
{
 8002a18:	b570      	push	{r4, r5, r6, lr}
 8002a1a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002a1c:	2001      	movs	r0, #1
  if (hadc == NULL)
 8002a1e:	2c00      	cmp	r4, #0
 8002a20:	d01b      	beq.n	8002a5a <HAL_ADC_Init+0x42>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8002a28:	0022      	movs	r2, r4
 8002a2a:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8002a2c:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8002a2e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8002a30:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8002a32:	f7ff fde1 	bl	80025f8 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002a36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a38:	06db      	lsls	r3, r3, #27
 8002a3a:	d406      	bmi.n	8002a4a <HAL_ADC_Init+0x32>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	2204      	movs	r2, #4
 8002a40:	6899      	ldr	r1, [r3, #8]
 8002a42:	0008      	movs	r0, r1
 8002a44:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002a46:	4211      	tst	r1, r2
 8002a48:	d008      	beq.n	8002a5c <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4a:	2310      	movs	r3, #16
 8002a4c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8002a4e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a50:	4313      	orrs	r3, r2
 8002a52:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002a54:	2300      	movs	r3, #0
 8002a56:	3450      	adds	r4, #80	; 0x50
 8002a58:	7023      	strb	r3, [r4, #0]
}
 8002a5a:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8002a5c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002a5e:	4955      	ldr	r1, [pc, #340]	; (8002bb4 <HAL_ADC_Init+0x19c>)
 8002a60:	4011      	ands	r1, r2
 8002a62:	2202      	movs	r2, #2
 8002a64:	430a      	orrs	r2, r1
 8002a66:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a68:	2203      	movs	r2, #3
 8002a6a:	6899      	ldr	r1, [r3, #8]
 8002a6c:	4011      	ands	r1, r2
 8002a6e:	4a52      	ldr	r2, [pc, #328]	; (8002bb8 <HAL_ADC_Init+0x1a0>)
 8002a70:	2901      	cmp	r1, #1
 8002a72:	d102      	bne.n	8002a7a <HAL_ADC_Init+0x62>
 8002a74:	681d      	ldr	r5, [r3, #0]
 8002a76:	420d      	tst	r5, r1
 8002a78:	d119      	bne.n	8002aae <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002a7a:	2680      	movs	r6, #128	; 0x80
 8002a7c:	6861      	ldr	r1, [r4, #4]
 8002a7e:	05f6      	lsls	r6, r6, #23
 8002a80:	004d      	lsls	r5, r1, #1
 8002a82:	086d      	lsrs	r5, r5, #1
 8002a84:	42b5      	cmp	r5, r6
 8002a86:	d003      	beq.n	8002a90 <HAL_ADC_Init+0x78>
 8002a88:	2580      	movs	r5, #128	; 0x80
 8002a8a:	062d      	lsls	r5, r5, #24
 8002a8c:	42a9      	cmp	r1, r5
 8002a8e:	d176      	bne.n	8002b7e <HAL_ADC_Init+0x166>
 8002a90:	691d      	ldr	r5, [r3, #16]
 8002a92:	00ad      	lsls	r5, r5, #2
 8002a94:	08ad      	lsrs	r5, r5, #2
 8002a96:	611d      	str	r5, [r3, #16]
 8002a98:	691d      	ldr	r5, [r3, #16]
 8002a9a:	4329      	orrs	r1, r5
 8002a9c:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8002a9e:	2518      	movs	r5, #24
 8002aa0:	68d9      	ldr	r1, [r3, #12]
 8002aa2:	43a9      	bics	r1, r5
 8002aa4:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8002aa6:	68d9      	ldr	r1, [r3, #12]
 8002aa8:	68a5      	ldr	r5, [r4, #8]
 8002aaa:	4329      	orrs	r1, r5
 8002aac:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002aae:	6811      	ldr	r1, [r2, #0]
 8002ab0:	4d42      	ldr	r5, [pc, #264]	; (8002bbc <HAL_ADC_Init+0x1a4>)
 8002ab2:	4029      	ands	r1, r5
 8002ab4:	6011      	str	r1, [r2, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8002ab6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ab8:	6815      	ldr	r5, [r2, #0]
 8002aba:	0649      	lsls	r1, r1, #25
 8002abc:	4329      	orrs	r1, r5
 8002abe:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002ac0:	2280      	movs	r2, #128	; 0x80
 8002ac2:	6899      	ldr	r1, [r3, #8]
 8002ac4:	0552      	lsls	r2, r2, #21
 8002ac6:	4211      	tst	r1, r2
 8002ac8:	d102      	bne.n	8002ad0 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002aca:	6899      	ldr	r1, [r3, #8]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	493b      	ldr	r1, [pc, #236]	; (8002bc0 <HAL_ADC_Init+0x1a8>)
 8002ad4:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002ad6:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002ad8:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002ada:	68dd      	ldr	r5, [r3, #12]
 8002adc:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002ade:	2902      	cmp	r1, #2
 8002ae0:	d100      	bne.n	8002ae4 <HAL_ADC_Init+0xcc>
 8002ae2:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002ae4:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ae6:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002ae8:	4332      	orrs	r2, r6
 8002aea:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002aec:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002aee:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002af0:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002af2:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002af4:	69e5      	ldr	r5, [r4, #28]
 8002af6:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002af8:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002afa:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002afc:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002afe:	0025      	movs	r5, r4
 8002b00:	352c      	adds	r5, #44	; 0x2c
 8002b02:	782d      	ldrb	r5, [r5, #0]
 8002b04:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002b06:	432a      	orrs	r2, r5
 8002b08:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b0a:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002b0c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b10:	30ff      	adds	r0, #255	; 0xff
 8002b12:	4282      	cmp	r2, r0
 8002b14:	d004      	beq.n	8002b20 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002b16:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002b18:	68d8      	ldr	r0, [r3, #12]
 8002b1a:	432a      	orrs	r2, r5
 8002b1c:	4302      	orrs	r2, r0
 8002b1e:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b20:	1ca2      	adds	r2, r4, #2
 8002b22:	7fd2      	ldrb	r2, [r2, #31]
 8002b24:	2a01      	cmp	r2, #1
 8002b26:	d106      	bne.n	8002b36 <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b28:	2900      	cmp	r1, #0
 8002b2a:	d134      	bne.n	8002b96 <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	68d9      	ldr	r1, [r3, #12]
 8002b30:	0252      	lsls	r2, r2, #9
 8002b32:	430a      	orrs	r2, r1
 8002b34:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8002b36:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8002b38:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8002b3a:	2901      	cmp	r1, #1
 8002b3c:	d133      	bne.n	8002ba6 <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8002b3e:	4821      	ldr	r0, [pc, #132]	; (8002bc4 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002b40:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8002b42:	4002      	ands	r2, r0
 8002b44:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002b46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b48:	6918      	ldr	r0, [r3, #16]
 8002b4a:	432a      	orrs	r2, r5
                              hadc->Init.Oversample.RightBitShift             |
 8002b4c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002b4e:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002b50:	4302      	orrs	r2, r0
 8002b52:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	4311      	orrs	r1, r2
 8002b58:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002b5a:	2107      	movs	r1, #7
 8002b5c:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8002b5e:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002b60:	438a      	bics	r2, r1
 8002b62:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8002b6c:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8002b6e:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8002b70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b72:	4393      	bics	r3, r2
 8002b74:	001a      	movs	r2, r3
 8002b76:	2301      	movs	r3, #1
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8002b7c:	e76d      	b.n	8002a5a <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002b7e:	691d      	ldr	r5, [r3, #16]
 8002b80:	4e11      	ldr	r6, [pc, #68]	; (8002bc8 <HAL_ADC_Init+0x1b0>)
 8002b82:	00ad      	lsls	r5, r5, #2
 8002b84:	08ad      	lsrs	r5, r5, #2
 8002b86:	611d      	str	r5, [r3, #16]
 8002b88:	6815      	ldr	r5, [r2, #0]
 8002b8a:	4035      	ands	r5, r6
 8002b8c:	6015      	str	r5, [r2, #0]
 8002b8e:	6815      	ldr	r5, [r2, #0]
 8002b90:	4329      	orrs	r1, r5
 8002b92:	6011      	str	r1, [r2, #0]
 8002b94:	e783      	b.n	8002a9e <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b96:	2120      	movs	r1, #32
 8002b98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b9a:	4301      	orrs	r1, r0
 8002b9c:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	65a2      	str	r2, [r4, #88]	; 0x58
 8002ba4:	e7c7      	b.n	8002b36 <HAL_ADC_Init+0x11e>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	420a      	tst	r2, r1
 8002baa:	d0d6      	beq.n	8002b5a <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	438a      	bics	r2, r1
 8002bb0:	611a      	str	r2, [r3, #16]
 8002bb2:	e7d2      	b.n	8002b5a <HAL_ADC_Init+0x142>
 8002bb4:	fffffefd 	.word	0xfffffefd
 8002bb8:	40012708 	.word	0x40012708
 8002bbc:	fdffffff 	.word	0xfdffffff
 8002bc0:	fffe0219 	.word	0xfffe0219
 8002bc4:	fffffc03 	.word	0xfffffc03
 8002bc8:	ffc3ffff 	.word	0xffc3ffff

08002bcc <HAL_ADC_Start_DMA>:
{
 8002bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bce:	9201      	str	r2, [sp, #4]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bd0:	6802      	ldr	r2, [r0, #0]
{
 8002bd2:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bd4:	6893      	ldr	r3, [r2, #8]
{
 8002bd6:	000e      	movs	r6, r1
    tmp_hal_status = HAL_BUSY;
 8002bd8:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bda:	075b      	lsls	r3, r3, #29
 8002bdc:	d42f      	bmi.n	8002c3e <HAL_ADC_Start_DMA+0x72>
    __HAL_LOCK(hadc);
 8002bde:	0027      	movs	r7, r4
 8002be0:	3750      	adds	r7, #80	; 0x50
 8002be2:	783b      	ldrb	r3, [r7, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d02a      	beq.n	8002c3e <HAL_ADC_Start_DMA+0x72>
 8002be8:	2301      	movs	r3, #1
 8002bea:	703b      	strb	r3, [r7, #0]
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002bec:	68d1      	ldr	r1, [r2, #12]
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002bf2:	69e3      	ldr	r3, [r4, #28]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d123      	bne.n	8002c40 <HAL_ADC_Start_DMA+0x74>
      ADC_STATE_CLR_SET(hadc->State,
 8002bf8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bfa:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <HAL_ADC_Start_DMA+0x80>)
      ADC_CLEAR_ERRORCODE(hadc);
 8002bfc:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002bfe:	401a      	ands	r2, r3
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4313      	orrs	r3, r2
 8002c06:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8002c08:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8002c0a:	703d      	strb	r5, [r7, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c0c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_ADC_Start_DMA+0x84>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c10:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c12:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_ADC_Start_DMA+0x88>)
 8002c16:	6303      	str	r3, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <HAL_ADC_Start_DMA+0x8c>)
 8002c1a:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c1c:	231c      	movs	r3, #28
 8002c1e:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c20:	684a      	ldr	r2, [r1, #4]
 8002c22:	3b0c      	subs	r3, #12
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c28:	0032      	movs	r2, r6
 8002c2a:	9b01      	ldr	r3, [sp, #4]
 8002c2c:	3140      	adds	r1, #64	; 0x40
 8002c2e:	f000 f9d9 	bl	8002fe4 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002c32:	2304      	movs	r3, #4
 8002c34:	0028      	movs	r0, r5
 8002c36:	6822      	ldr	r2, [r4, #0]
 8002c38:	6891      	ldr	r1, [r2, #8]
 8002c3a:	430b      	orrs	r3, r1
 8002c3c:	6093      	str	r3, [r2, #8]
}
 8002c3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8002c40:	0020      	movs	r0, r4
 8002c42:	f7ff fead 	bl	80029a0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d0d6      	beq.n	8002bf8 <HAL_ADC_Start_DMA+0x2c>
 8002c4a:	e7f8      	b.n	8002c3e <HAL_ADC_Start_DMA+0x72>
 8002c4c:	fffff0fe 	.word	0xfffff0fe
 8002c50:	08002c61 	.word	0x08002c61
 8002c54:	08002cd3 	.word	0x08002cd3
 8002c58:	08002cdf 	.word	0x08002cdf

08002c5c <HAL_ADC_ConvCpltCallback>:
 8002c5c:	4770      	bx	lr
	...

08002c60 <ADC_DMAConvCplt>:
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c60:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c62:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8002c64:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c66:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c68:	4211      	tst	r1, r2
 8002c6a:	d12b      	bne.n	8002cc4 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c6e:	32b1      	adds	r2, #177	; 0xb1
 8002c70:	32ff      	adds	r2, #255	; 0xff
 8002c72:	430a      	orrs	r2, r1
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002c74:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	0109      	lsls	r1, r1, #4
 8002c7c:	68d0      	ldr	r0, [r2, #12]
 8002c7e:	4208      	tst	r0, r1
 8002c80:	d113      	bne.n	8002caa <ADC_DMAConvCplt+0x4a>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8002c82:	1c59      	adds	r1, r3, #1
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002c84:	7fc9      	ldrb	r1, [r1, #31]
 8002c86:	2900      	cmp	r1, #0
 8002c88:	d10f      	bne.n	8002caa <ADC_DMAConvCplt+0x4a>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c8a:	6811      	ldr	r1, [r2, #0]
 8002c8c:	0709      	lsls	r1, r1, #28
 8002c8e:	d50c      	bpl.n	8002caa <ADC_DMAConvCplt+0x4a>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c90:	6891      	ldr	r1, [r2, #8]
 8002c92:	0749      	lsls	r1, r1, #29
 8002c94:	d40d      	bmi.n	8002cb2 <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c96:	200c      	movs	r0, #12
 8002c98:	6851      	ldr	r1, [r2, #4]
 8002c9a:	4381      	bics	r1, r0
 8002c9c:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002c9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ca0:	490a      	ldr	r1, [pc, #40]	; (8002ccc <ADC_DMAConvCplt+0x6c>)
 8002ca2:	4011      	ands	r1, r2
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002caa:	0018      	movs	r0, r3
 8002cac:	f7ff ffd6 	bl	8002c5c <HAL_ADC_ConvCpltCallback>
}
 8002cb0:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cba:	2201      	movs	r2, #1
 8002cbc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	659a      	str	r2, [r3, #88]	; 0x58
 8002cc2:	e7f2      	b.n	8002caa <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc8:	4798      	blx	r3
}
 8002cca:	e7f1      	b.n	8002cb0 <ADC_DMAConvCplt+0x50>
 8002ccc:	fffffefe 	.word	0xfffffefe

08002cd0 <HAL_ADC_ConvHalfCpltCallback>:
 8002cd0:	4770      	bx	lr

08002cd2 <ADC_DMAHalfConvCplt>:
{
 8002cd2:	b510      	push	{r4, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cd4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002cd6:	f7ff fffb 	bl	8002cd0 <HAL_ADC_ConvHalfCpltCallback>
}
 8002cda:	bd10      	pop	{r4, pc}

08002cdc <HAL_ADC_ErrorCallback>:
 8002cdc:	4770      	bx	lr

08002cde <ADC_DMAError>:
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cde:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce0:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002ce2:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ce4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cea:	2304      	movs	r3, #4
 8002cec:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc);
 8002cf2:	f7ff fff3 	bl	8002cdc <HAL_ADC_ErrorCallback>
}
 8002cf6:	bd10      	pop	{r4, pc}

08002cf8 <HAL_ADC_ConfigChannel>:
{
 8002cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8002cfa:	0004      	movs	r4, r0
 8002cfc:	3450      	adds	r4, #80	; 0x50
 8002cfe:	7822      	ldrb	r2, [r4, #0]
{
 8002d00:	0003      	movs	r3, r0
 8002d02:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8002d04:	2002      	movs	r0, #2
 8002d06:	2a01      	cmp	r2, #1
 8002d08:	d00b      	beq.n	8002d22 <HAL_ADC_ConfigChannel+0x2a>
 8002d0a:	3801      	subs	r0, #1
 8002d0c:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	6891      	ldr	r1, [r2, #8]
 8002d12:	0749      	lsls	r1, r1, #29
 8002d14:	d506      	bpl.n	8002d24 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d16:	2220      	movs	r2, #32
 8002d18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	7023      	strb	r3, [r4, #0]
}
 8002d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002d24:	2380      	movs	r3, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002d26:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8002d28:	4e19      	ldr	r6, [pc, #100]	; (8002d90 <HAL_ADC_ConfigChannel+0x98>)
 8002d2a:	686f      	ldr	r7, [r5, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002d2c:	0341      	lsls	r1, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002d2e:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002d30:	0b49      	lsrs	r1, r1, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002d32:	4003      	ands	r3, r0
  if (sConfig->Rank != ADC_RANK_NONE)
 8002d34:	42b7      	cmp	r7, r6
 8002d36:	d019      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002d38:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002d3a:	4301      	orrs	r1, r0
 8002d3c:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	4a13      	ldr	r2, [pc, #76]	; (8002d94 <HAL_ADC_ConfigChannel+0x9c>)
 8002d46:	041b      	lsls	r3, r3, #16
 8002d48:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002d4a:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002d50:	f7ff fe10 	bl	8002974 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002d54:	682b      	ldr	r3, [r5, #0]
 8002d56:	039b      	lsls	r3, r3, #14
 8002d58:	d505      	bpl.n	8002d66 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	; (8002d94 <HAL_ADC_ConfigChannel+0x9c>)
 8002d5e:	03db      	lsls	r3, r3, #15
 8002d60:	6811      	ldr	r1, [r2, #0]
 8002d62:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002d64:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8002d66:	2000      	movs	r0, #0
 8002d68:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002d6a:	e7da      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002d6c:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8002d6e:	438d      	bics	r5, r1
 8002d70:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002d76:	4a07      	ldr	r2, [pc, #28]	; (8002d94 <HAL_ADC_ConfigChannel+0x9c>)
 8002d78:	4907      	ldr	r1, [pc, #28]	; (8002d98 <HAL_ADC_ConfigChannel+0xa0>)
 8002d7a:	6813      	ldr	r3, [r2, #0]
 8002d7c:	400b      	ands	r3, r1
 8002d7e:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002d80:	0383      	lsls	r3, r0, #14
 8002d82:	d5f0      	bpl.n	8002d66 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002d84:	4a03      	ldr	r2, [pc, #12]	; (8002d94 <HAL_ADC_ConfigChannel+0x9c>)
 8002d86:	4905      	ldr	r1, [pc, #20]	; (8002d9c <HAL_ADC_ConfigChannel+0xa4>)
 8002d88:	6813      	ldr	r3, [r2, #0]
 8002d8a:	400b      	ands	r3, r1
 8002d8c:	e7ea      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x6c>
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	00001001 	.word	0x00001001
 8002d94:	40012708 	.word	0x40012708
 8002d98:	ff7fffff 	.word	0xff7fffff
 8002d9c:	ffbfffff 	.word	0xffbfffff

08002da0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da0:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002da2:	25ff      	movs	r5, #255	; 0xff
 8002da4:	2403      	movs	r4, #3
 8002da6:	002a      	movs	r2, r5
 8002da8:	4004      	ands	r4, r0
 8002daa:	00e4      	lsls	r4, r4, #3
 8002dac:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dae:	0189      	lsls	r1, r1, #6
 8002db0:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002db2:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002db4:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002db6:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8002db8:	2800      	cmp	r0, #0
 8002dba:	db0a      	blt.n	8002dd2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dbc:	24c0      	movs	r4, #192	; 0xc0
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_NVIC_SetPriority+0x4c>)
 8002dc0:	0880      	lsrs	r0, r0, #2
 8002dc2:	0080      	lsls	r0, r0, #2
 8002dc4:	18c0      	adds	r0, r0, r3
 8002dc6:	00a4      	lsls	r4, r4, #2
 8002dc8:	5903      	ldr	r3, [r0, r4]
 8002dca:	401a      	ands	r2, r3
 8002dcc:	4311      	orrs	r1, r2
 8002dce:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002dd0:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dd2:	200f      	movs	r0, #15
 8002dd4:	4003      	ands	r3, r0
 8002dd6:	3b08      	subs	r3, #8
 8002dd8:	4805      	ldr	r0, [pc, #20]	; (8002df0 <HAL_NVIC_SetPriority+0x50>)
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	181b      	adds	r3, r3, r0
 8002de0:	69d8      	ldr	r0, [r3, #28]
 8002de2:	4002      	ands	r2, r0
 8002de4:	4311      	orrs	r1, r2
 8002de6:	61d9      	str	r1, [r3, #28]
 8002de8:	e7f2      	b.n	8002dd0 <HAL_NVIC_SetPriority+0x30>
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	e000e100 	.word	0xe000e100
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002df4:	2800      	cmp	r0, #0
 8002df6:	db05      	blt.n	8002e04 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002df8:	231f      	movs	r3, #31
 8002dfa:	4018      	ands	r0, r3
 8002dfc:	3b1e      	subs	r3, #30
 8002dfe:	4083      	lsls	r3, r0
 8002e00:	4a01      	ldr	r2, [pc, #4]	; (8002e08 <HAL_NVIC_EnableIRQ+0x14>)
 8002e02:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002e04:	4770      	bx	lr
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	e000e100 	.word	0xe000e100

08002e0c <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e0c:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_NVIC_SystemReset+0x14>)
 8002e12:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <HAL_NVIC_SystemReset+0x18>)
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002e1a:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8002e1c:	e7fd      	b.n	8002e1a <HAL_NVIC_SystemReset+0xe>
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	e000ed00 	.word	0xe000ed00
 8002e24:	05fa0004 	.word	0x05fa0004

08002e28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	1e43      	subs	r3, r0, #1
 8002e2c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e2e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d20d      	bcs.n	8002e50 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e34:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e36:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e38:	4807      	ldr	r0, [pc, #28]	; (8002e58 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e3a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e3c:	6a03      	ldr	r3, [r0, #32]
 8002e3e:	0609      	lsls	r1, r1, #24
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	430b      	orrs	r3, r1
 8002e46:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e48:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e4c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002e50:	4770      	bx	lr
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	e000e010 	.word	0xe000e010
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002e5c:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8002e5e:	f7ff f99d 	bl	800219c <HAL_SYSTICK_Callback>
}
 8002e62:	bd10      	pop	{r4, pc}

08002e64 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002e64:	b510      	push	{r4, lr}
 8002e66:	0004      	movs	r4, r0
  /* Check DAC handle */
  if(hdac == NULL)
  {
     return HAL_ERROR;
 8002e68:	2001      	movs	r0, #1
  if(hdac == NULL)
 8002e6a:	2c00      	cmp	r4, #0
 8002e6c:	d00d      	beq.n	8002e8a <HAL_DAC_Init+0x26>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002e6e:	7923      	ldrb	r3, [r4, #4]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d103      	bne.n	8002e7e <HAL_DAC_Init+0x1a>
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e76:	0020      	movs	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 8002e78:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8002e7a:	f7ff fc05 	bl	8002688 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e7e:	2302      	movs	r3, #2

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e80:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e82:	7123      	strb	r3, [r4, #4]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e84:	3b01      	subs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e86:	60e0      	str	r0, [r4, #12]
  hdac->State = HAL_DAC_STATE_READY;
 8002e88:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8002e8a:	bd10      	pop	{r4, pc}

08002e8c <HAL_DAC_DMAUnderrunCallbackCh1>:
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002e90:	b530      	push	{r4, r5, lr}
 8002e92:	000c      	movs	r4, r1
 8002e94:	2102      	movs	r1, #2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e96:	7945      	ldrb	r5, [r0, #5]
{
 8002e98:	0003      	movs	r3, r0
  __HAL_LOCK(hdac);
 8002e9a:	0008      	movs	r0, r1
 8002e9c:	2d01      	cmp	r5, #1
 8002e9e:	d014      	beq.n	8002eca <HAL_DAC_ConfigChannel+0x3a>
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002ea0:	4d0a      	ldr	r5, [pc, #40]	; (8002ecc <HAL_DAC_ConfigChannel+0x3c>)
  tmpreg1 = hdac->Instance->CR;
 8002ea2:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002ea4:	4095      	lsls	r5, r2
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ea6:	7119      	strb	r1, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8002ea8:	6801      	ldr	r1, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002eaa:	43a9      	bics	r1, r5
 8002eac:	000d      	movs	r5, r1
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002eae:	cc12      	ldmia	r4, {r1, r4}
 8002eb0:	4321      	orrs	r1, r4
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8002eb2:	24c0      	movs	r4, #192	; 0xc0
  tmpreg1 |= tmpreg2 << Channel;
 8002eb4:	4091      	lsls	r1, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8002eb6:	4094      	lsls	r4, r2
  tmpreg1 |= tmpreg2 << Channel;
 8002eb8:	4329      	orrs	r1, r5
  hdac->Instance->CR = tmpreg1;
 8002eba:	6001      	str	r1, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8002ebc:	6801      	ldr	r1, [r0, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ebe:	2201      	movs	r2, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8002ec0:	43a1      	bics	r1, r4
 8002ec2:	6001      	str	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ec4:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002ec6:	711a      	strb	r2, [r3, #4]
  __HAL_UNLOCK(hdac);
 8002ec8:	7158      	strb	r0, [r3, #5]

  /* Return function status */
  return HAL_OK;
}
 8002eca:	bd30      	pop	{r4, r5, pc}
 8002ecc:	00000ffe 	.word	0x00000ffe

08002ed0 <HAL_DAC_Start>:
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ed0:	2202      	movs	r2, #2
{
 8002ed2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdac);
 8002ed4:	7944      	ldrb	r4, [r0, #5]
{
 8002ed6:	0003      	movs	r3, r0
  __HAL_LOCK(hdac);
 8002ed8:	0010      	movs	r0, r2
 8002eda:	2c01      	cmp	r4, #1
 8002edc:	d017      	beq.n	8002f0e <HAL_DAC_Start+0x3e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002ede:	3801      	subs	r0, #1
 8002ee0:	0005      	movs	r5, r0
 8002ee2:	408d      	lsls	r5, r1
 8002ee4:	0029      	movs	r1, r5
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ee6:	711a      	strb	r2, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	6814      	ldr	r4, [r2, #0]
 8002eec:	4321      	orrs	r1, r4
 8002eee:	6011      	str	r1, [r2, #0]

  tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8002ef0:	6814      	ldr	r4, [r2, #0]
  tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8002ef2:	6811      	ldr	r1, [r2, #0]
  /* Check if software trigger enabled */
  if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8002ef4:	0764      	lsls	r4, r4, #29
 8002ef6:	d506      	bpl.n	8002f06 <HAL_DAC_Start+0x36>
  tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8002ef8:	2438      	movs	r4, #56	; 0x38
 8002efa:	4021      	ands	r1, r4
  if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8002efc:	42a1      	cmp	r1, r4
 8002efe:	d102      	bne.n	8002f06 <HAL_DAC_Start+0x36>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002f00:	6851      	ldr	r1, [r2, #4]
 8002f02:	4308      	orrs	r0, r1
 8002f04:	6050      	str	r0, [r2, #4]
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f06:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f08:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002f0a:	711a      	strb	r2, [r3, #4]
  __HAL_UNLOCK(hdac);
 8002f0c:	7158      	strb	r0, [r3, #5]

  /* Return function status */
  return HAL_OK;
}
 8002f0e:	bd30      	pop	{r4, r5, pc}

08002f10 <HAL_DAC_IRQHandler>:
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
  /* Check underrun flag of DAC channel 1 */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002f10:	2180      	movs	r1, #128	; 0x80
 8002f12:	6803      	ldr	r3, [r0, #0]
 8002f14:	0189      	lsls	r1, r1, #6
 8002f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
 8002f18:	b510      	push	{r4, lr}
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002f1a:	420a      	tst	r2, r1
 8002f1c:	d00c      	beq.n	8002f38 <HAL_DAC_IRQHandler+0x28>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002f1e:	2204      	movs	r2, #4
 8002f20:	7102      	strb	r2, [r0, #4]

    /* Set DAC error code to chanel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8002f22:	68c4      	ldr	r4, [r0, #12]
 8002f24:	3a03      	subs	r2, #3
 8002f26:	4322      	orrs	r2, r4
 8002f28:	60c2      	str	r2, [r0, #12]

    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002f2a:	6359      	str	r1, [r3, #52]	; 0x34

    /* Disable the selected DAC channel1 DMA request */
    CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4903      	ldr	r1, [pc, #12]	; (8002f3c <HAL_DAC_IRQHandler+0x2c>)
 8002f30:	400a      	ands	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]

    /* Error callback */
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002f34:	f7ff ffaa 	bl	8002e8c <HAL_DAC_DMAUnderrunCallbackCh1>
  }
}
 8002f38:	bd10      	pop	{r4, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	ffffefff 	.word	0xffffefff

08002f40 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002f40:	0001      	movs	r1, r0
  __IO uint32_t tmp = 0U;
 8002f42:	2000      	movs	r0, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance; 
 8002f44:	6809      	ldr	r1, [r1, #0]
{
 8002f46:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0U;
 8002f48:	9001      	str	r0, [sp, #4]
  tmp = (uint32_t)hdac->Instance; 
 8002f4a:	9101      	str	r1, [sp, #4]
  tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002f4c:	9901      	ldr	r1, [sp, #4]
 8002f4e:	3108      	adds	r1, #8
 8002f50:	1889      	adds	r1, r1, r2
 8002f52:	9101      	str	r1, [sp, #4]

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002f54:	9a01      	ldr	r2, [sp, #4]
 8002f56:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8002f58:	b002      	add	sp, #8
 8002f5a:	4770      	bx	lr

08002f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5e:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8002f60:	2001      	movs	r0, #1
  if(hdma == NULL)
 8002f62:	2c00      	cmp	r4, #0
 8002f64:	d035      	beq.n	8002fd2 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f66:	6825      	ldr	r5, [r4, #0]
 8002f68:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <HAL_DMA_Init+0x78>)
 8002f6a:	2114      	movs	r1, #20
 8002f6c:	18e8      	adds	r0, r5, r3
 8002f6e:	f7fd f8e7 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002f72:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f74:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8002f76:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f7c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f7e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f80:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f82:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f84:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f86:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8002f88:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8002f8c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8e:	433b      	orrs	r3, r7
 8002f90:	6967      	ldr	r7, [r4, #20]
 8002f92:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f94:	69a7      	ldr	r7, [r4, #24]
 8002f96:	433b      	orrs	r3, r7
 8002f98:	69e7      	ldr	r7, [r4, #28]
 8002f9a:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f9c:	6a27      	ldr	r7, [r4, #32]
 8002f9e:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8002fa0:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fa2:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	01db      	lsls	r3, r3, #7
 8002fa8:	4299      	cmp	r1, r3
 8002faa:	d00c      	beq.n	8002fc6 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fac:	251c      	movs	r5, #28
 8002fae:	4028      	ands	r0, r5
 8002fb0:	3d0d      	subs	r5, #13
 8002fb2:	4085      	lsls	r5, r0
 8002fb4:	490a      	ldr	r1, [pc, #40]	; (8002fe0 <HAL_DMA_Init+0x84>)
 8002fb6:	680b      	ldr	r3, [r1, #0]
 8002fb8:	43ab      	bics	r3, r5
 8002fba:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fbc:	6863      	ldr	r3, [r4, #4]
 8002fbe:	680d      	ldr	r5, [r1, #0]
 8002fc0:	4083      	lsls	r3, r0
 8002fc2:	432b      	orrs	r3, r5
 8002fc4:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc6:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002fc8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fca:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fcc:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8002fce:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002fd0:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8002fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fd4:	bffdfff8 	.word	0xbffdfff8
 8002fd8:	40020000 	.word	0x40020000
 8002fdc:	ffff800f 	.word	0xffff800f
 8002fe0:	400200a8 	.word	0x400200a8

08002fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fe6:	1d45      	adds	r5, r0, #5
{
 8002fe8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8002fea:	7feb      	ldrb	r3, [r5, #31]
{
 8002fec:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002fee:	2002      	movs	r0, #2
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d029      	beq.n	8003048 <HAL_DMA_Start_IT+0x64>
 8002ff4:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ff6:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8002ff8:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ffa:	7ffb      	ldrb	r3, [r7, #31]
 8002ffc:	2600      	movs	r6, #0
 8002ffe:	469c      	mov	ip, r3
 8003000:	4660      	mov	r0, ip
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2801      	cmp	r0, #1
 8003006:	d12a      	bne.n	800305e <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003008:	3001      	adds	r0, #1
 800300a:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800300c:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800300e:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003010:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8003012:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003014:	361c      	adds	r6, #28
 8003016:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8003018:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800301a:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 800301c:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800301e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003020:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003022:	9b01      	ldr	r3, [sp, #4]
 8003024:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003026:	68a3      	ldr	r3, [r4, #8]
 8003028:	2b10      	cmp	r3, #16
 800302a:	d10e      	bne.n	800304a <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800302c:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800302e:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003030:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00c      	beq.n	8003050 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003036:	230e      	movs	r3, #14
 8003038:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800303a:	4313      	orrs	r3, r2
 800303c:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 800303e:	2301      	movs	r3, #1
 8003040:	6802      	ldr	r2, [r0, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2000      	movs	r0, #0
}
 8003048:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800304a:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800304c:	60c2      	str	r2, [r0, #12]
 800304e:	e7ef      	b.n	8003030 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003050:	2204      	movs	r2, #4
 8003052:	6803      	ldr	r3, [r0, #0]
 8003054:	4393      	bics	r3, r2
 8003056:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003058:	6802      	ldr	r2, [r0, #0]
 800305a:	230a      	movs	r3, #10
 800305c:	e7ed      	b.n	800303a <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 800305e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8003060:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8003062:	e7f1      	b.n	8003048 <HAL_DMA_Start_IT+0x64>

08003064 <HAL_DMA_IRQHandler>:
{
 8003064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003066:	221c      	movs	r2, #28
 8003068:	2704      	movs	r7, #4
 800306a:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800306c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800306e:	4032      	ands	r2, r6
 8003070:	003e      	movs	r6, r7
 8003072:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003074:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003076:	6803      	ldr	r3, [r0, #0]
 8003078:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800307a:	4235      	tst	r5, r6
 800307c:	d00d      	beq.n	800309a <HAL_DMA_IRQHandler+0x36>
 800307e:	423c      	tst	r4, r7
 8003080:	d00b      	beq.n	800309a <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	0692      	lsls	r2, r2, #26
 8003086:	d402      	bmi.n	800308e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	43ba      	bics	r2, r7
 800308c:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 800308e:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003090:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8003092:	2b00      	cmp	r3, #0
 8003094:	d019      	beq.n	80030ca <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8003096:	4798      	blx	r3
  return;
 8003098:	e017      	b.n	80030ca <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800309a:	2702      	movs	r7, #2
 800309c:	003e      	movs	r6, r7
 800309e:	4096      	lsls	r6, r2
 80030a0:	4235      	tst	r5, r6
 80030a2:	d013      	beq.n	80030cc <HAL_DMA_IRQHandler+0x68>
 80030a4:	423c      	tst	r4, r7
 80030a6:	d011      	beq.n	80030cc <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	0692      	lsls	r2, r2, #26
 80030ac:	d406      	bmi.n	80030bc <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030ae:	240a      	movs	r4, #10
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	43a2      	bics	r2, r4
 80030b4:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80030b6:	2201      	movs	r2, #1
 80030b8:	1d83      	adds	r3, r0, #6
 80030ba:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80030bc:	2200      	movs	r2, #0
 80030be:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80030c0:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80030c2:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80030c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d1e5      	bne.n	8003096 <HAL_DMA_IRQHandler+0x32>
}
 80030ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80030cc:	2608      	movs	r6, #8
 80030ce:	0037      	movs	r7, r6
 80030d0:	4097      	lsls	r7, r2
 80030d2:	423d      	tst	r5, r7
 80030d4:	d0f9      	beq.n	80030ca <HAL_DMA_IRQHandler+0x66>
 80030d6:	4234      	tst	r4, r6
 80030d8:	d0f7      	beq.n	80030ca <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030da:	250e      	movs	r5, #14
 80030dc:	681c      	ldr	r4, [r3, #0]
 80030de:	43ac      	bics	r4, r5
 80030e0:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80030e2:	2301      	movs	r3, #1
 80030e4:	001c      	movs	r4, r3
 80030e6:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80030e8:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80030ea:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030ec:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80030ee:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80030f0:	2200      	movs	r2, #0
 80030f2:	1d43      	adds	r3, r0, #5
 80030f4:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80030f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030f8:	e7e5      	b.n	80030c6 <HAL_DMA_IRQHandler+0x62>
	...

080030fc <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80030fc:	2201      	movs	r2, #1
 80030fe:	4b08      	ldr	r3, [pc, #32]	; (8003120 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 8003100:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	4211      	tst	r1, r2
 8003106:	d00a      	beq.n	800311e <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003108:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800310c:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 800310e:	4805      	ldr	r0, [pc, #20]	; (8003124 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8003110:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8003112:	4805      	ldr	r0, [pc, #20]	; (8003128 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003114:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003116:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800311a:	6858      	ldr	r0, [r3, #4]
 800311c:	4010      	ands	r0, r2
}
 800311e:	4770      	bx	lr
 8003120:	40022000 	.word	0x40022000
 8003124:	89abcdef 	.word	0x89abcdef
 8003128:	02030405 	.word	0x02030405

0800312c <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800312c:	2301      	movs	r3, #1
 800312e:	4a03      	ldr	r2, [pc, #12]	; (800313c <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 8003130:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8003132:	6851      	ldr	r1, [r2, #4]
 8003134:	430b      	orrs	r3, r1
 8003136:	6053      	str	r3, [r2, #4]
}
 8003138:	4770      	bx	lr
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	40022000 	.word	0x40022000

08003140 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003140:	4a58      	ldr	r2, [pc, #352]	; (80032a4 <HAL_GPIO_Init+0x164>)
{
 8003142:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003144:	1882      	adds	r2, r0, r2
 8003146:	1e54      	subs	r4, r2, #1
 8003148:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800314a:	2300      	movs	r3, #0
{
 800314c:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800314e:	3205      	adds	r2, #5
{
 8003150:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003152:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003154:	9a03      	ldr	r2, [sp, #12]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	0014      	movs	r4, r2
 800315a:	40dc      	lsrs	r4, r3
 800315c:	d101      	bne.n	8003162 <HAL_GPIO_Init+0x22>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 800315e:	b007      	add	sp, #28
 8003160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003162:	2101      	movs	r1, #1
 8003164:	000d      	movs	r5, r1
 8003166:	0014      	movs	r4, r2
 8003168:	409d      	lsls	r5, r3
 800316a:	402c      	ands	r4, r5
 800316c:	468c      	mov	ip, r1
 800316e:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8003170:	422a      	tst	r2, r5
 8003172:	d100      	bne.n	8003176 <HAL_GPIO_Init+0x36>
 8003174:	e094      	b.n	80032a0 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003176:	2403      	movs	r4, #3
 8003178:	9a03      	ldr	r2, [sp, #12]
 800317a:	005e      	lsls	r6, r3, #1
 800317c:	6852      	ldr	r2, [r2, #4]
 800317e:	9201      	str	r2, [sp, #4]
 8003180:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003182:	40b4      	lsls	r4, r6
 8003184:	43e1      	mvns	r1, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003186:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003188:	9104      	str	r1, [sp, #16]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800318a:	4564      	cmp	r4, ip
 800318c:	d82a      	bhi.n	80031e4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 800318e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003190:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003192:	9903      	ldr	r1, [sp, #12]
 8003194:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003196:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003198:	40b4      	lsls	r4, r6
 800319a:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 800319c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800319e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031a0:	43ac      	bics	r4, r5
 80031a2:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a4:	090c      	lsrs	r4, r1, #4
 80031a6:	4661      	mov	r1, ip
 80031a8:	400c      	ands	r4, r1
 80031aa:	409c      	lsls	r4, r3
 80031ac:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80031ae:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80031b0:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031b2:	9904      	ldr	r1, [sp, #16]
 80031b4:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b6:	9903      	ldr	r1, [sp, #12]
 80031b8:	688c      	ldr	r4, [r1, #8]
 80031ba:	40b4      	lsls	r4, r6
 80031bc:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80031be:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c0:	2a02      	cmp	r2, #2
 80031c2:	d111      	bne.n	80031e8 <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80031c4:	2507      	movs	r5, #7
 80031c6:	210f      	movs	r1, #15
 80031c8:	401d      	ands	r5, r3
 80031ca:	00ad      	lsls	r5, r5, #2
 80031cc:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 80031ce:	08dc      	lsrs	r4, r3, #3
 80031d0:	00a4      	lsls	r4, r4, #2
 80031d2:	1904      	adds	r4, r0, r4
 80031d4:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80031d6:	438f      	bics	r7, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80031d8:	9903      	ldr	r1, [sp, #12]
 80031da:	6909      	ldr	r1, [r1, #16]
 80031dc:	40a9      	lsls	r1, r5
 80031de:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80031e0:	6227      	str	r7, [r4, #32]
 80031e2:	e001      	b.n	80031e8 <HAL_GPIO_Init+0xa8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e4:	2a03      	cmp	r2, #3
 80031e6:	d1e3      	bne.n	80031b0 <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031e8:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 80031ea:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031ec:	9904      	ldr	r1, [sp, #16]
 80031ee:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031f0:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 80031f2:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031f4:	22c0      	movs	r2, #192	; 0xc0
 80031f6:	9901      	ldr	r1, [sp, #4]
 80031f8:	0292      	lsls	r2, r2, #10
 80031fa:	4211      	tst	r1, r2
 80031fc:	d050      	beq.n	80032a0 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fe:	2701      	movs	r7, #1
 8003200:	4c29      	ldr	r4, [pc, #164]	; (80032a8 <HAL_GPIO_Init+0x168>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003202:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003204:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003206:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003208:	433a      	orrs	r2, r7
 800320a:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 800320c:	4a27      	ldr	r2, [pc, #156]	; (80032ac <HAL_GPIO_Init+0x16c>)
 800320e:	089c      	lsrs	r4, r3, #2
 8003210:	00a4      	lsls	r4, r4, #2
 8003212:	18a4      	adds	r4, r4, r2
 8003214:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003216:	4035      	ands	r5, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8003218:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800321a:	220f      	movs	r2, #15
 800321c:	00ad      	lsls	r5, r5, #2
 800321e:	40aa      	lsls	r2, r5
 8003220:	4661      	mov	r1, ip
 8003222:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003224:	22a0      	movs	r2, #160	; 0xa0
 8003226:	05d2      	lsls	r2, r2, #23
 8003228:	4694      	mov	ip, r2
 800322a:	2200      	movs	r2, #0
 800322c:	4560      	cmp	r0, ip
 800322e:	d00d      	beq.n	800324c <HAL_GPIO_Init+0x10c>
 8003230:	4a1f      	ldr	r2, [pc, #124]	; (80032b0 <HAL_GPIO_Init+0x170>)
 8003232:	4694      	mov	ip, r2
 8003234:	003a      	movs	r2, r7
 8003236:	4560      	cmp	r0, ip
 8003238:	d008      	beq.n	800324c <HAL_GPIO_Init+0x10c>
 800323a:	4f1e      	ldr	r7, [pc, #120]	; (80032b4 <HAL_GPIO_Init+0x174>)
 800323c:	1892      	adds	r2, r2, r2
 800323e:	42b8      	cmp	r0, r7
 8003240:	d004      	beq.n	800324c <HAL_GPIO_Init+0x10c>
 8003242:	4f1d      	ldr	r7, [pc, #116]	; (80032b8 <HAL_GPIO_Init+0x178>)
 8003244:	0032      	movs	r2, r6
 8003246:	42b8      	cmp	r0, r7
 8003248:	d000      	beq.n	800324c <HAL_GPIO_Init+0x10c>
 800324a:	9a05      	ldr	r2, [sp, #20]
 800324c:	40aa      	lsls	r2, r5
 800324e:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8003250:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003252:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8003254:	000d      	movs	r5, r1
        temp = EXTI->RTSR;
 8003256:	4a19      	ldr	r2, [pc, #100]	; (80032bc <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 8003258:	43cc      	mvns	r4, r1
        temp = EXTI->RTSR;
 800325a:	6896      	ldr	r6, [r2, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800325c:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800325e:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003260:	02c9      	lsls	r1, r1, #11
 8003262:	d401      	bmi.n	8003268 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8003264:	0035      	movs	r5, r6
 8003266:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8003268:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800326a:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800326c:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800326e:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003270:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003272:	0289      	lsls	r1, r1, #10
 8003274:	d401      	bmi.n	800327a <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8003276:	0035      	movs	r5, r6
 8003278:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 800327a:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 800327c:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800327e:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003280:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003282:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003284:	0389      	lsls	r1, r1, #14
 8003286:	d401      	bmi.n	800328c <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8003288:	0035      	movs	r5, r6
 800328a:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800328c:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 800328e:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8003290:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003292:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8003294:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003296:	03c9      	lsls	r1, r1, #15
 8003298:	d401      	bmi.n	800329e <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 800329a:	4025      	ands	r5, r4
 800329c:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 800329e:	6016      	str	r6, [r2, #0]
    position++;
 80032a0:	3301      	adds	r3, #1
 80032a2:	e757      	b.n	8003154 <HAL_GPIO_Init+0x14>
 80032a4:	afffe400 	.word	0xafffe400
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40010000 	.word	0x40010000
 80032b0:	50000400 	.word	0x50000400
 80032b4:	50000800 	.word	0x50000800
 80032b8:	50000c00 	.word	0x50000c00
 80032bc:	40010400 	.word	0x40010400

080032c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032c0:	2a00      	cmp	r2, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032c4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80032c6:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80032c8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80032ca:	e7fc      	b.n	80032c6 <HAL_GPIO_WritePin+0x6>

080032cc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032cc:	6803      	ldr	r3, [r0, #0]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	0792      	lsls	r2, r2, #30
 80032d2:	d501      	bpl.n	80032d8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032d4:	2200      	movs	r2, #0
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d8:	2201      	movs	r2, #1
 80032da:	6999      	ldr	r1, [r3, #24]
 80032dc:	4211      	tst	r1, r2
 80032de:	d102      	bne.n	80032e6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032e0:	6999      	ldr	r1, [r3, #24]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	619a      	str	r2, [r3, #24]
  }
}
 80032e6:	4770      	bx	lr

080032e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032e8:	b530      	push	{r4, r5, lr}
 80032ea:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032ec:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ee:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032f0:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032f2:	0589      	lsls	r1, r1, #22
 80032f4:	431a      	orrs	r2, r3
 80032f6:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <I2C_TransferConfig+0x28>)
 80032fa:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032fc:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80032fe:	0d64      	lsrs	r4, r4, #21
 8003300:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003302:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003304:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003306:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003308:	432a      	orrs	r2, r5
 800330a:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800330c:	bd30      	pop	{r4, r5, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	03ff63ff 	.word	0x03ff63ff

08003314 <I2C_IsErrorOccurred>:
{
 8003314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003316:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8003318:	6802      	ldr	r2, [r0, #0]
{
 800331a:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 800331c:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800331e:	2310      	movs	r3, #16
 8003320:	000f      	movs	r7, r1
{
 8003322:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003324:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8003326:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003328:	4219      	tst	r1, r3
 800332a:	d00e      	beq.n	800334a <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800332c:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800332e:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8003330:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003332:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	699a      	ldr	r2, [r3, #24]
 8003338:	423a      	tst	r2, r7
 800333a:	d164      	bne.n	8003406 <I2C_IsErrorOccurred+0xf2>
 800333c:	9a01      	ldr	r2, [sp, #4]
 800333e:	2a00      	cmp	r2, #0
 8003340:	d032      	beq.n	80033a8 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 8003342:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8003344:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8003346:	9b00      	ldr	r3, [sp, #0]
 8003348:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800334a:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 800334c:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800334e:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 8003350:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003352:	420a      	tst	r2, r1
 8003354:	d002      	beq.n	800335c <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 8003356:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003358:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800335a:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	00c9      	lsls	r1, r1, #3
 8003360:	420a      	tst	r2, r1
 8003362:	d003      	beq.n	800336c <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8003364:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003366:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8003368:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 800336a:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	0089      	lsls	r1, r1, #2
 8003370:	420a      	tst	r2, r1
 8003372:	d04d      	beq.n	8003410 <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 8003374:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003376:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8003378:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 800337a:	0020      	movs	r0, r4
 800337c:	f7ff ffa6 	bl	80032cc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003380:	6822      	ldr	r2, [r4, #0]
 8003382:	4925      	ldr	r1, [pc, #148]	; (8003418 <I2C_IsErrorOccurred+0x104>)
 8003384:	6853      	ldr	r3, [r2, #4]
 8003386:	400b      	ands	r3, r1
 8003388:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800338a:	0023      	movs	r3, r4
 800338c:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 800338e:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003390:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 8003392:	4307      	orrs	r7, r0
 8003394:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003396:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003398:	0022      	movs	r2, r4
 800339a:	2300      	movs	r3, #0
 800339c:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800339e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a0:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80033a2:	2001      	movs	r0, #1
 80033a4:	7023      	strb	r3, [r4, #0]
 80033a6:	e035      	b.n	8003414 <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 80033a8:	1c72      	adds	r2, r6, #1
 80033aa:	d0c4      	beq.n	8003336 <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033ac:	f7ff faca 	bl	8002944 <HAL_GetTick>
 80033b0:	1b40      	subs	r0, r0, r5
 80033b2:	42b0      	cmp	r0, r6
 80033b4:	d801      	bhi.n	80033ba <I2C_IsErrorOccurred+0xa6>
 80033b6:	2e00      	cmp	r6, #0
 80033b8:	d1bc      	bne.n	8003334 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 80033ba:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033bc:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 80033be:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033c0:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80033c2:	7811      	ldrb	r1, [r2, #0]
 80033c4:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033c6:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 80033c8:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033ca:	699a      	ldr	r2, [r3, #24]
 80033cc:	0209      	lsls	r1, r1, #8
 80033ce:	420a      	tst	r2, r1
 80033d0:	d00c      	beq.n	80033ec <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033d6:	4210      	tst	r0, r2
 80033d8:	d108      	bne.n	80033ec <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 80033da:	4661      	mov	r1, ip
 80033dc:	2920      	cmp	r1, #32
 80033de:	d005      	beq.n	80033ec <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80033e6:	f7ff faad 	bl	8002944 <HAL_GetTick>
 80033ea:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	423b      	tst	r3, r7
 80033f2:	d19f      	bne.n	8003334 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033f4:	f7ff faa6 	bl	8002944 <HAL_GetTick>
 80033f8:	1b40      	subs	r0, r0, r5
 80033fa:	2819      	cmp	r0, #25
 80033fc:	d9f6      	bls.n	80033ec <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003400:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8003402:	9301      	str	r3, [sp, #4]
 8003404:	e796      	b.n	8003334 <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 8003406:	9a01      	ldr	r2, [sp, #4]
 8003408:	2a00      	cmp	r2, #0
 800340a:	d19a      	bne.n	8003342 <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800340c:	61df      	str	r7, [r3, #28]
 800340e:	e798      	b.n	8003342 <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8003410:	2800      	cmp	r0, #0
 8003412:	d1b2      	bne.n	800337a <I2C_IsErrorOccurred+0x66>
}
 8003414:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	fe00e800 	.word	0xfe00e800

0800341c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341e:	0004      	movs	r4, r0
 8003420:	000d      	movs	r5, r1
 8003422:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003424:	2702      	movs	r7, #2
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	423b      	tst	r3, r7
 800342c:	d001      	beq.n	8003432 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800342e:	2000      	movs	r0, #0
}
 8003430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003432:	0032      	movs	r2, r6
 8003434:	0029      	movs	r1, r5
 8003436:	0020      	movs	r0, r4
 8003438:	f7ff ff6c 	bl	8003314 <I2C_IsErrorOccurred>
 800343c:	2800      	cmp	r0, #0
 800343e:	d118      	bne.n	8003472 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8003440:	1c6b      	adds	r3, r5, #1
 8003442:	d0f0      	beq.n	8003426 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003444:	f7ff fa7e 	bl	8002944 <HAL_GetTick>
 8003448:	1b80      	subs	r0, r0, r6
 800344a:	42a8      	cmp	r0, r5
 800344c:	d801      	bhi.n	8003452 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800344e:	2d00      	cmp	r5, #0
 8003450:	d1e9      	bne.n	8003426 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	001a      	movs	r2, r3
 8003458:	403a      	ands	r2, r7
 800345a:	423b      	tst	r3, r7
 800345c:	d1e3      	bne.n	8003426 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800345e:	2120      	movs	r1, #32
 8003460:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003462:	430b      	orrs	r3, r1
 8003464:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003466:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8003468:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 800346a:	3341      	adds	r3, #65	; 0x41
 800346c:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800346e:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8003470:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8003472:	2001      	movs	r0, #1
 8003474:	e7dc      	b.n	8003430 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08003476 <I2C_WaitOnFlagUntilTimeout>:
{
 8003476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003478:	0004      	movs	r4, r0
 800347a:	000d      	movs	r5, r1
 800347c:	0017      	movs	r7, r2
 800347e:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003480:	6822      	ldr	r2, [r4, #0]
 8003482:	6993      	ldr	r3, [r2, #24]
 8003484:	402b      	ands	r3, r5
 8003486:	1b5b      	subs	r3, r3, r5
 8003488:	4259      	negs	r1, r3
 800348a:	414b      	adcs	r3, r1
 800348c:	42bb      	cmp	r3, r7
 800348e:	d001      	beq.n	8003494 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8003490:	2000      	movs	r0, #0
 8003492:	e01f      	b.n	80034d4 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8003494:	1c73      	adds	r3, r6, #1
 8003496:	d0f4      	beq.n	8003482 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003498:	f7ff fa54 	bl	8002944 <HAL_GetTick>
 800349c:	9b06      	ldr	r3, [sp, #24]
 800349e:	1ac0      	subs	r0, r0, r3
 80034a0:	42b0      	cmp	r0, r6
 80034a2:	d801      	bhi.n	80034a8 <I2C_WaitOnFlagUntilTimeout+0x32>
 80034a4:	2e00      	cmp	r6, #0
 80034a6:	d1eb      	bne.n	8003480 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	402b      	ands	r3, r5
 80034ae:	1b5b      	subs	r3, r3, r5
 80034b0:	425a      	negs	r2, r3
 80034b2:	4153      	adcs	r3, r2
 80034b4:	42bb      	cmp	r3, r7
 80034b6:	d1e3      	bne.n	8003480 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034b8:	2220      	movs	r2, #32
 80034ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80034bc:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034be:	4313      	orrs	r3, r2
 80034c0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	0023      	movs	r3, r4
 80034c4:	3341      	adds	r3, #65	; 0x41
 80034c6:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c8:	0022      	movs	r2, r4
 80034ca:	2300      	movs	r3, #0
 80034cc:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80034ce:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d0:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80034d2:	7023      	strb	r3, [r4, #0]
}
 80034d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080034d6 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80034d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d8:	0004      	movs	r4, r0
 80034da:	000e      	movs	r6, r1
 80034dc:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034de:	2520      	movs	r5, #32
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	422b      	tst	r3, r5
 80034e6:	d001      	beq.n	80034ec <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80034e8:	2000      	movs	r0, #0
}
 80034ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ec:	003a      	movs	r2, r7
 80034ee:	0031      	movs	r1, r6
 80034f0:	0020      	movs	r0, r4
 80034f2:	f7ff ff0f 	bl	8003314 <I2C_IsErrorOccurred>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d115      	bne.n	8003526 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fa:	f7ff fa23 	bl	8002944 <HAL_GetTick>
 80034fe:	1bc0      	subs	r0, r0, r7
 8003500:	42b0      	cmp	r0, r6
 8003502:	d801      	bhi.n	8003508 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003504:	2e00      	cmp	r6, #0
 8003506:	d1eb      	bne.n	80034e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	001a      	movs	r2, r3
 800350e:	402a      	ands	r2, r5
 8003510:	422b      	tst	r3, r5
 8003512:	d1e5      	bne.n	80034e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003514:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003516:	432b      	orrs	r3, r5
 8003518:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800351a:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 800351c:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800351e:	3341      	adds	r3, #65	; 0x41
 8003520:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003522:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8003524:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8003526:	2001      	movs	r0, #1
 8003528:	e7df      	b.n	80034ea <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

0800352c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352e:	0004      	movs	r4, r0
 8003530:	000d      	movs	r5, r1
 8003532:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003534:	2604      	movs	r6, #4
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	4233      	tst	r3, r6
 800353c:	d111      	bne.n	8003562 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800353e:	003a      	movs	r2, r7
 8003540:	0029      	movs	r1, r5
 8003542:	0020      	movs	r0, r4
 8003544:	f7ff fee6 	bl	8003314 <I2C_IsErrorOccurred>
 8003548:	2800      	cmp	r0, #0
 800354a:	d124      	bne.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800354c:	2120      	movs	r1, #32
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	420a      	tst	r2, r1
 8003554:	d023      	beq.n	800359e <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	4232      	tst	r2, r6
 800355a:	d004      	beq.n	8003566 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 800355c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800355e:	2a00      	cmp	r2, #0
 8003560:	d001      	beq.n	8003566 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 8003562:	2000      	movs	r0, #0
}
 8003564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003566:	6999      	ldr	r1, [r3, #24]
 8003568:	2210      	movs	r2, #16
 800356a:	0008      	movs	r0, r1
 800356c:	4010      	ands	r0, r2
 800356e:	4211      	tst	r1, r2
 8003570:	d013      	beq.n	800359a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003572:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003574:	3a0c      	subs	r2, #12
 8003576:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003578:	2120      	movs	r1, #32
 800357a:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	4813      	ldr	r0, [pc, #76]	; (80035cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>)
 8003580:	4002      	ands	r2, r0
 8003582:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8003584:	0023      	movs	r3, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003586:	0022      	movs	r2, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8003588:	3341      	adds	r3, #65	; 0x41
 800358a:	7019      	strb	r1, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800358c:	2300      	movs	r3, #0
 800358e:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8003590:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003592:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8003594:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003596:	2001      	movs	r0, #1
 8003598:	e7e4      	b.n	8003564 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800359a:	6460      	str	r0, [r4, #68]	; 0x44
 800359c:	e7ec      	b.n	8003578 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359e:	f7ff f9d1 	bl	8002944 <HAL_GetTick>
 80035a2:	1bc0      	subs	r0, r0, r7
 80035a4:	42a8      	cmp	r0, r5
 80035a6:	d801      	bhi.n	80035ac <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 80035a8:	2d00      	cmp	r5, #0
 80035aa:	d1c4      	bne.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	0019      	movs	r1, r3
 80035b2:	4031      	ands	r1, r6
 80035b4:	4233      	tst	r3, r6
 80035b6:	d1be      	bne.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b8:	2220      	movs	r2, #32
 80035ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80035bc:	4313      	orrs	r3, r2
 80035be:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 80035c2:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	3341      	adds	r3, #65	; 0x41
 80035c6:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 80035c8:	7021      	strb	r1, [r4, #0]
        return HAL_ERROR;
 80035ca:	e7e4      	b.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
 80035cc:	fe00e800 	.word	0xfe00e800

080035d0 <HAL_I2C_Init>:
{
 80035d0:	b570      	push	{r4, r5, r6, lr}
 80035d2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80035d4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80035d6:	2c00      	cmp	r4, #0
 80035d8:	d03f      	beq.n	800365a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035da:	0025      	movs	r5, r4
 80035dc:	3541      	adds	r5, #65	; 0x41
 80035de:	782b      	ldrb	r3, [r5, #0]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80035e6:	0023      	movs	r3, r4
 80035e8:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 80035ea:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 80035ec:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 80035ee:	f7ff f875 	bl	80026dc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80035f2:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80035f4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80035f6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80035f8:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035fa:	481d      	ldr	r0, [pc, #116]	; (8003670 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 80035fc:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035fe:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8003600:	438a      	bics	r2, r1
 8003602:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003604:	6861      	ldr	r1, [r4, #4]
 8003606:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <HAL_I2C_Init+0xa4>)
 8003608:	400a      	ands	r2, r1
 800360a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	4002      	ands	r2, r0
 8003610:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003612:	68e2      	ldr	r2, [r4, #12]
 8003614:	2a01      	cmp	r2, #1
 8003616:	d121      	bne.n	800365c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	0209      	lsls	r1, r1, #8
 800361c:	4331      	orrs	r1, r6
 800361e:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	4915      	ldr	r1, [pc, #84]	; (8003678 <HAL_I2C_Init+0xa8>)
 8003624:	4311      	orrs	r1, r2
 8003626:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003628:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800362a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800362c:	4002      	ands	r2, r0
 800362e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003630:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003632:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003634:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003636:	69a1      	ldr	r1, [r4, #24]
 8003638:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800363a:	430a      	orrs	r2, r1
 800363c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800363e:	6a21      	ldr	r1, [r4, #32]
 8003640:	69e2      	ldr	r2, [r4, #28]
 8003642:	430a      	orrs	r2, r1
 8003644:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003646:	2201      	movs	r2, #1
 8003648:	6819      	ldr	r1, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800364e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003650:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003652:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003654:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003656:	3442      	adds	r4, #66	; 0x42
 8003658:	7020      	strb	r0, [r4, #0]
}
 800365a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800365c:	2184      	movs	r1, #132	; 0x84
 800365e:	0209      	lsls	r1, r1, #8
 8003660:	4331      	orrs	r1, r6
 8003662:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003664:	2a02      	cmp	r2, #2
 8003666:	d1db      	bne.n	8003620 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003668:	2280      	movs	r2, #128	; 0x80
 800366a:	0112      	lsls	r2, r2, #4
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	e7d7      	b.n	8003620 <HAL_I2C_Init+0x50>
 8003670:	ffff7fff 	.word	0xffff7fff
 8003674:	f0ffffff 	.word	0xf0ffffff
 8003678:	02008000 	.word	0x02008000

0800367c <HAL_I2C_Master_Transmit>:
{
 800367c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800367e:	b087      	sub	sp, #28
 8003680:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003682:	0003      	movs	r3, r0
 8003684:	3341      	adds	r3, #65	; 0x41
{
 8003686:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003688:	9303      	str	r3, [sp, #12]
 800368a:	781b      	ldrb	r3, [r3, #0]
{
 800368c:	0004      	movs	r4, r0
 800368e:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003690:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003692:	2b20      	cmp	r3, #32
 8003694:	d114      	bne.n	80036c0 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 8003696:	0023      	movs	r3, r4
 8003698:	3340      	adds	r3, #64	; 0x40
 800369a:	781a      	ldrb	r2, [r3, #0]
 800369c:	2a01      	cmp	r2, #1
 800369e:	d00f      	beq.n	80036c0 <HAL_I2C_Master_Transmit+0x44>
 80036a0:	2601      	movs	r6, #1
 80036a2:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80036a4:	f7ff f94e 	bl	8002944 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036a8:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80036aa:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036ac:	9000      	str	r0, [sp, #0]
 80036ae:	2319      	movs	r3, #25
 80036b0:	0032      	movs	r2, r6
 80036b2:	0020      	movs	r0, r4
 80036b4:	0209      	lsls	r1, r1, #8
 80036b6:	f7ff fede 	bl	8003476 <I2C_WaitOnFlagUntilTimeout>
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 80036be:	2001      	movs	r0, #1
}
 80036c0:	b007      	add	sp, #28
 80036c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036c4:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036c6:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036c8:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036ca:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036cc:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036ce:	3b11      	subs	r3, #17
 80036d0:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 80036d2:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80036d6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80036d8:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 80036da:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80036dc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80036e0:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <HAL_I2C_Master_Transmit+0x11c>)
 80036e2:	2aff      	cmp	r2, #255	; 0xff
 80036e4:	d920      	bls.n	8003728 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036e6:	22ff      	movs	r2, #255	; 0xff
 80036e8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036f0:	0039      	movs	r1, r7
 80036f2:	0020      	movs	r0, r4
 80036f4:	f7ff fdf8 	bl	80032e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036fa:	002a      	movs	r2, r5
 80036fc:	0020      	movs	r0, r4
 80036fe:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8003700:	2b00      	cmp	r3, #0
 8003702:	d119      	bne.n	8003738 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003704:	f7ff fee7 	bl	80034d6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003708:	2800      	cmp	r0, #0
 800370a:	d1d8      	bne.n	80036be <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800370c:	2120      	movs	r1, #32
 800370e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003710:	4d22      	ldr	r5, [pc, #136]	; (800379c <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003712:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	402a      	ands	r2, r5
 8003718:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800371a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800371c:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800371e:	3341      	adds	r3, #65	; 0x41
 8003720:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003722:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003724:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003726:	e7cb      	b.n	80036c0 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8003728:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800372a:	b292      	uxth	r2, r2
 800372c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	049b      	lsls	r3, r3, #18
 8003736:	e7db      	b.n	80036f0 <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003738:	f7ff fe70 	bl	800341c <I2C_WaitOnTXISFlagUntilTimeout>
 800373c:	2800      	cmp	r0, #0
 800373e:	d1be      	bne.n	80036be <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003740:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003746:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003748:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800374a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800374c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800374e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003750:	3b01      	subs	r3, #1
 8003752:	b29b      	uxth	r3, r3
 8003754:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003756:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003758:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800375a:	b292      	uxth	r2, r2
 800375c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0ca      	beq.n	80036f8 <HAL_I2C_Master_Transmit+0x7c>
 8003762:	2a00      	cmp	r2, #0
 8003764:	d1c8      	bne.n	80036f8 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003766:	2180      	movs	r1, #128	; 0x80
 8003768:	0020      	movs	r0, r4
 800376a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800376c:	9500      	str	r5, [sp, #0]
 800376e:	f7ff fe82 	bl	8003476 <I2C_WaitOnFlagUntilTimeout>
 8003772:	2800      	cmp	r0, #0
 8003774:	d1a3      	bne.n	80036be <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003776:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003778:	2bff      	cmp	r3, #255	; 0xff
 800377a:	d906      	bls.n	800378a <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800377c:	23ff      	movs	r3, #255	; 0xff
 800377e:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	22ff      	movs	r2, #255	; 0xff
 8003784:	9000      	str	r0, [sp, #0]
 8003786:	045b      	lsls	r3, r3, #17
 8003788:	e7b2      	b.n	80036f0 <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 800378a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800378c:	b292      	uxth	r2, r2
 800378e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	9000      	str	r0, [sp, #0]
 8003794:	e7cd      	b.n	8003732 <HAL_I2C_Master_Transmit+0xb6>
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	80002000 	.word	0x80002000
 800379c:	fe00e800 	.word	0xfe00e800

080037a0 <HAL_I2C_Master_Receive>:
{
 80037a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a2:	b087      	sub	sp, #28
 80037a4:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a6:	0003      	movs	r3, r0
 80037a8:	3341      	adds	r3, #65	; 0x41
{
 80037aa:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ac:	9303      	str	r3, [sp, #12]
 80037ae:	781b      	ldrb	r3, [r3, #0]
{
 80037b0:	0004      	movs	r4, r0
 80037b2:	000f      	movs	r7, r1
    return HAL_BUSY;
 80037b4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	d114      	bne.n	80037e4 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 80037ba:	0023      	movs	r3, r4
 80037bc:	3340      	adds	r3, #64	; 0x40
 80037be:	781a      	ldrb	r2, [r3, #0]
 80037c0:	2a01      	cmp	r2, #1
 80037c2:	d00f      	beq.n	80037e4 <HAL_I2C_Master_Receive+0x44>
 80037c4:	2601      	movs	r6, #1
 80037c6:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80037c8:	f7ff f8bc 	bl	8002944 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037cc:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80037ce:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037d0:	9000      	str	r0, [sp, #0]
 80037d2:	2319      	movs	r3, #25
 80037d4:	0032      	movs	r2, r6
 80037d6:	0020      	movs	r0, r4
 80037d8:	0209      	lsls	r1, r1, #8
 80037da:	f7ff fe4c 	bl	8003476 <I2C_WaitOnFlagUntilTimeout>
 80037de:	2800      	cmp	r0, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 80037e2:	2001      	movs	r0, #1
}
 80037e4:	b007      	add	sp, #28
 80037e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037e8:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037ea:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037ec:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037ee:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037f0:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037f2:	3b12      	subs	r3, #18
 80037f4:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 80037f6:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80037fa:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80037fc:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 80037fe:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8003800:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003802:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003804:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <HAL_I2C_Master_Receive+0x11c>)
 8003806:	2aff      	cmp	r2, #255	; 0xff
 8003808:	d920      	bls.n	800384c <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800380a:	22ff      	movs	r2, #255	; 0xff
 800380c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003814:	0039      	movs	r1, r7
 8003816:	0020      	movs	r0, r4
 8003818:	f7ff fd66 	bl	80032e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800381c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381e:	002a      	movs	r2, r5
 8003820:	0020      	movs	r0, r4
 8003822:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8003824:	2b00      	cmp	r3, #0
 8003826:	d119      	bne.n	800385c <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003828:	f7ff fe55 	bl	80034d6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800382c:	2800      	cmp	r0, #0
 800382e:	d1d8      	bne.n	80037e2 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003830:	2120      	movs	r1, #32
 8003832:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003834:	4d22      	ldr	r5, [pc, #136]	; (80038c0 <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003836:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	402a      	ands	r2, r5
 800383c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800383e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003840:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003842:	3341      	adds	r3, #65	; 0x41
 8003844:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003846:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003848:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800384a:	e7cb      	b.n	80037e4 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800384c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800384e:	b292      	uxth	r2, r2
 8003850:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	049b      	lsls	r3, r3, #18
 800385a:	e7db      	b.n	8003814 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385c:	f7ff fe66 	bl	800352c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003860:	2800      	cmp	r0, #0
 8003862:	d1be      	bne.n	80037e2 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800386c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800386e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003870:	3301      	adds	r3, #1
 8003872:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003874:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003876:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003878:	3b01      	subs	r3, #1
 800387a:	b29b      	uxth	r3, r3
 800387c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800387e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003880:	b292      	uxth	r2, r2
 8003882:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0c9      	beq.n	800381c <HAL_I2C_Master_Receive+0x7c>
 8003888:	2a00      	cmp	r2, #0
 800388a:	d1c7      	bne.n	800381c <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800388c:	2180      	movs	r1, #128	; 0x80
 800388e:	0020      	movs	r0, r4
 8003890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003892:	9500      	str	r5, [sp, #0]
 8003894:	f7ff fdef 	bl	8003476 <I2C_WaitOnFlagUntilTimeout>
 8003898:	2800      	cmp	r0, #0
 800389a:	d1a2      	bne.n	80037e2 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800389c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800389e:	2bff      	cmp	r3, #255	; 0xff
 80038a0:	d906      	bls.n	80038b0 <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038a2:	23ff      	movs	r3, #255	; 0xff
 80038a4:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	22ff      	movs	r2, #255	; 0xff
 80038aa:	9000      	str	r0, [sp, #0]
 80038ac:	045b      	lsls	r3, r3, #17
 80038ae:	e7b1      	b.n	8003814 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 80038b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80038b2:	b292      	uxth	r2, r2
 80038b4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	9000      	str	r0, [sp, #0]
 80038ba:	e7cc      	b.n	8003856 <HAL_I2C_Master_Receive+0xb6>
 80038bc:	80002400 	.word	0x80002400
 80038c0:	fe00e800 	.word	0xfe00e800

080038c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c6:	0004      	movs	r4, r0
 80038c8:	3441      	adds	r4, #65	; 0x41
 80038ca:	7822      	ldrb	r2, [r4, #0]
{
 80038cc:	0003      	movs	r3, r0
 80038ce:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d2:	b2d6      	uxtb	r6, r2
 80038d4:	2a20      	cmp	r2, #32
 80038d6:	d118      	bne.n	800390a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 80038d8:	001d      	movs	r5, r3
 80038da:	3540      	adds	r5, #64	; 0x40
 80038dc:	782a      	ldrb	r2, [r5, #0]
 80038de:	2a01      	cmp	r2, #1
 80038e0:	d013      	beq.n	800390a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80038e2:	2224      	movs	r2, #36	; 0x24
 80038e4:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3a23      	subs	r2, #35	; 0x23
 80038ea:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038ec:	4807      	ldr	r0, [pc, #28]	; (800390c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80038ee:	4391      	bics	r1, r2
 80038f0:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038f2:	6819      	ldr	r1, [r3, #0]
 80038f4:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 80038f6:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038f8:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80038fa:	6819      	ldr	r1, [r3, #0]
 80038fc:	4339      	orrs	r1, r7
 80038fe:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003906:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003908:	7028      	strb	r0, [r5, #0]
  }
}
 800390a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800390c:	ffffefff 	.word	0xffffefff

08003910 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003910:	0002      	movs	r2, r0
{
 8003912:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003914:	3241      	adds	r2, #65	; 0x41
 8003916:	7814      	ldrb	r4, [r2, #0]
{
 8003918:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800391a:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800391c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800391e:	2c20      	cmp	r4, #32
 8003920:	d117      	bne.n	8003952 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003922:	001c      	movs	r4, r3
 8003924:	3440      	adds	r4, #64	; 0x40
 8003926:	7826      	ldrb	r6, [r4, #0]
 8003928:	2e01      	cmp	r6, #1
 800392a:	d012      	beq.n	8003952 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	3022      	adds	r0, #34	; 0x22
 800392e:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3823      	subs	r0, #35	; 0x23
 8003934:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003936:	4f07      	ldr	r7, [pc, #28]	; (8003954 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003938:	4386      	bics	r6, r0
 800393a:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800393c:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 800393e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003940:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003942:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8003944:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003946:	6819      	ldr	r1, [r3, #0]
 8003948:	4308      	orrs	r0, r1
 800394a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800394c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800394e:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003950:	7020      	strb	r0, [r4, #0]
  }
}
 8003952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003954:	fffff0ff 	.word	0xfffff0ff

08003958 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003958:	2201      	movs	r2, #1
 800395a:	4904      	ldr	r1, [pc, #16]	; (800396c <HAL_I2CEx_EnableFastModePlus+0x14>)
 800395c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800395e:	431a      	orrs	r2, r3
 8003960:	634a      	str	r2, [r1, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 8003962:	4a03      	ldr	r2, [pc, #12]	; (8003970 <HAL_I2CEx_EnableFastModePlus+0x18>)
 8003964:	6853      	ldr	r3, [r2, #4]
 8003966:	4303      	orrs	r3, r0
 8003968:	6053      	str	r3, [r2, #4]
}
 800396a:	4770      	bx	lr
 800396c:	40021000 	.word	0x40021000
 8003970:	40010000 	.word	0x40010000

08003974 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003974:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8003976:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <HAL_RCC_GetSysClockFreq+0x78>)
{
 8003978:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800397a:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800397c:	4022      	ands	r2, r4
 800397e:	2a08      	cmp	r2, #8
 8003980:	d031      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x72>
 8003982:	2a0c      	cmp	r2, #12
 8003984:	d009      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0x26>
 8003986:	2a04      	cmp	r2, #4
 8003988:	d125      	bne.n	80039d6 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800398a:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800398e:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003990:	17c0      	asrs	r0, r0, #31
 8003992:	4018      	ands	r0, r3
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x80>)
 8003996:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003998:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800399a:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800399c:	4816      	ldr	r0, [pc, #88]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800399e:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039a0:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a2:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80039a4:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a6:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80039a8:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039aa:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80039ac:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ae:	4211      	tst	r1, r2
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039b2:	4a12      	ldr	r2, [pc, #72]	; (80039fc <HAL_RCC_GetSysClockFreq+0x88>)
 80039b4:	2300      	movs	r3, #0
 80039b6:	2100      	movs	r1, #0
 80039b8:	f7fc fd92 	bl	80004e0 <__aeabi_lmul>
 80039bc:	0022      	movs	r2, r4
 80039be:	2300      	movs	r3, #0
 80039c0:	f7fc fd6e 	bl	80004a0 <__aeabi_uldivmod>
 80039c4:	e7e8      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	2310      	movs	r3, #16
 80039ca:	421a      	tst	r2, r3
 80039cc:	d001      	beq.n	80039d2 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80039ce:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x8c>)
 80039d0:	e7f0      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039d2:	4a08      	ldr	r2, [pc, #32]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x80>)
 80039d4:	e7ee      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80039d6:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80039d8:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80039da:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80039e0:	3301      	adds	r3, #1
 80039e2:	4098      	lsls	r0, r3
      break;
 80039e4:	e7d8      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 80039e6:	4805      	ldr	r0, [pc, #20]	; (80039fc <HAL_RCC_GetSysClockFreq+0x88>)
 80039e8:	e7d6      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x24>
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	40021000 	.word	0x40021000
 80039f0:	ff48e500 	.word	0xff48e500
 80039f4:	00f42400 	.word	0x00f42400
 80039f8:	08005770 	.word	0x08005770
 80039fc:	007a1200 	.word	0x007a1200
 8003a00:	003d0900 	.word	0x003d0900

08003a04 <HAL_RCC_OscConfig>:
{
 8003a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a06:	0005      	movs	r5, r0
 8003a08:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d05a      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0e:	230c      	movs	r3, #12
 8003a10:	4cbe      	ldr	r4, [pc, #760]	; (8003d0c <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a12:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a14:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a16:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a18:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	025b      	lsls	r3, r3, #9
 8003a1e:	0019      	movs	r1, r3
 8003a20:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a22:	07d2      	lsls	r2, r2, #31
 8003a24:	d442      	bmi.n	8003aac <HAL_RCC_OscConfig+0xa8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a26:	682b      	ldr	r3, [r5, #0]
 8003a28:	079b      	lsls	r3, r3, #30
 8003a2a:	d500      	bpl.n	8003a2e <HAL_RCC_OscConfig+0x2a>
 8003a2c:	e08b      	b.n	8003b46 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a2e:	682b      	ldr	r3, [r5, #0]
 8003a30:	06db      	lsls	r3, r3, #27
 8003a32:	d529      	bpl.n	8003a88 <HAL_RCC_OscConfig+0x84>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a34:	2e00      	cmp	r6, #0
 8003a36:	d000      	beq.n	8003a3a <HAL_RCC_OscConfig+0x36>
 8003a38:	e0dc      	b.n	8003bf4 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	059b      	lsls	r3, r3, #22
 8003a3e:	d502      	bpl.n	8003a46 <HAL_RCC_OscConfig+0x42>
 8003a40:	69eb      	ldr	r3, [r5, #28]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d03e      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a46:	6862      	ldr	r2, [r4, #4]
 8003a48:	49b1      	ldr	r1, [pc, #708]	; (8003d10 <HAL_RCC_OscConfig+0x30c>)
 8003a4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a4c:	400a      	ands	r2, r1
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a52:	6861      	ldr	r1, [r4, #4]
 8003a54:	6a2a      	ldr	r2, [r5, #32]
 8003a56:	0209      	lsls	r1, r1, #8
 8003a58:	0a09      	lsrs	r1, r1, #8
 8003a5a:	0612      	lsls	r2, r2, #24
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a60:	2280      	movs	r2, #128	; 0x80
 8003a62:	0b5b      	lsrs	r3, r3, #13
 8003a64:	3301      	adds	r3, #1
 8003a66:	0212      	lsls	r2, r2, #8
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003a6c:	68e1      	ldr	r1, [r4, #12]
 8003a6e:	060a      	lsls	r2, r1, #24
 8003a70:	49a8      	ldr	r1, [pc, #672]	; (8003d14 <HAL_RCC_OscConfig+0x310>)
 8003a72:	0f12      	lsrs	r2, r2, #28
 8003a74:	5c8a      	ldrb	r2, [r1, r2]
 8003a76:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a78:	4aa7      	ldr	r2, [pc, #668]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003a7a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003a7c:	4ba7      	ldr	r3, [pc, #668]	; (8003d1c <HAL_RCC_OscConfig+0x318>)
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	f7fe ff1c 	bl	80028bc <HAL_InitTick>
        if(status != HAL_OK)
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d134      	bne.n	8003af2 <HAL_RCC_OscConfig+0xee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	071b      	lsls	r3, r3, #28
 8003a8c:	d500      	bpl.n	8003a90 <HAL_RCC_OscConfig+0x8c>
 8003a8e:	e0e8      	b.n	8003c62 <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a90:	682b      	ldr	r3, [r5, #0]
 8003a92:	075b      	lsls	r3, r3, #29
 8003a94:	d500      	bpl.n	8003a98 <HAL_RCC_OscConfig+0x94>
 8003a96:	e10a      	b.n	8003cae <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	069b      	lsls	r3, r3, #26
 8003a9c:	d500      	bpl.n	8003aa0 <HAL_RCC_OscConfig+0x9c>
 8003a9e:	e18e      	b.n	8003dbe <HAL_RCC_OscConfig+0x3ba>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d000      	beq.n	8003aa8 <HAL_RCC_OscConfig+0xa4>
 8003aa6:	e1bd      	b.n	8003e24 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	e022      	b.n	8003af2 <HAL_RCC_OscConfig+0xee>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aac:	2e08      	cmp	r6, #8
 8003aae:	d003      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ab0:	2e0c      	cmp	r6, #12
 8003ab2:	d109      	bne.n	8003ac8 <HAL_RCC_OscConfig+0xc4>
 8003ab4:	2f00      	cmp	r7, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	039b      	lsls	r3, r3, #14
 8003abc:	d5b3      	bpl.n	8003a26 <HAL_RCC_OscConfig+0x22>
 8003abe:	686b      	ldr	r3, [r5, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1b0      	bne.n	8003a26 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	e014      	b.n	8003af2 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac8:	686a      	ldr	r2, [r5, #4]
 8003aca:	428a      	cmp	r2, r1
 8003acc:	d113      	bne.n	8003af6 <HAL_RCC_OscConfig+0xf2>
 8003ace:	6822      	ldr	r2, [r4, #0]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ad4:	f7fe ff36 	bl	8002944 <HAL_GetTick>
 8003ad8:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ada:	2280      	movs	r2, #128	; 0x80
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	0292      	lsls	r2, r2, #10
 8003ae0:	4213      	tst	r3, r2
 8003ae2:	d1a0      	bne.n	8003a26 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fe ff2e 	bl	8002944 <HAL_GetTick>
 8003ae8:	9b00      	ldr	r3, [sp, #0]
 8003aea:	1ac0      	subs	r0, r0, r3
 8003aec:	2864      	cmp	r0, #100	; 0x64
 8003aee:	d9f4      	bls.n	8003ada <HAL_RCC_OscConfig+0xd6>
            return HAL_TIMEOUT;
 8003af0:	2003      	movs	r0, #3
}
 8003af2:	b005      	add	sp, #20
 8003af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af6:	21a0      	movs	r1, #160	; 0xa0
 8003af8:	02c9      	lsls	r1, r1, #11
 8003afa:	428a      	cmp	r2, r1
 8003afc:	d105      	bne.n	8003b0a <HAL_RCC_OscConfig+0x106>
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	6821      	ldr	r1, [r4, #0]
 8003b02:	02d2      	lsls	r2, r2, #11
 8003b04:	430a      	orrs	r2, r1
 8003b06:	6022      	str	r2, [r4, #0]
 8003b08:	e7e1      	b.n	8003ace <HAL_RCC_OscConfig+0xca>
 8003b0a:	6821      	ldr	r1, [r4, #0]
 8003b0c:	4884      	ldr	r0, [pc, #528]	; (8003d20 <HAL_RCC_OscConfig+0x31c>)
 8003b0e:	4001      	ands	r1, r0
 8003b10:	6021      	str	r1, [r4, #0]
 8003b12:	6821      	ldr	r1, [r4, #0]
 8003b14:	400b      	ands	r3, r1
 8003b16:	9303      	str	r3, [sp, #12]
 8003b18:	9b03      	ldr	r3, [sp, #12]
 8003b1a:	4982      	ldr	r1, [pc, #520]	; (8003d24 <HAL_RCC_OscConfig+0x320>)
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	400b      	ands	r3, r1
 8003b20:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b22:	2a00      	cmp	r2, #0
 8003b24:	d1d6      	bne.n	8003ad4 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
 8003b26:	f7fe ff0d 	bl	8002944 <HAL_GetTick>
 8003b2a:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b2c:	2280      	movs	r2, #128	; 0x80
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	0292      	lsls	r2, r2, #10
 8003b32:	4213      	tst	r3, r2
 8003b34:	d100      	bne.n	8003b38 <HAL_RCC_OscConfig+0x134>
 8003b36:	e776      	b.n	8003a26 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b38:	f7fe ff04 	bl	8002944 <HAL_GetTick>
 8003b3c:	9b00      	ldr	r3, [sp, #0]
 8003b3e:	1ac0      	subs	r0, r0, r3
 8003b40:	2864      	cmp	r0, #100	; 0x64
 8003b42:	d9f3      	bls.n	8003b2c <HAL_RCC_OscConfig+0x128>
 8003b44:	e7d4      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
    hsi_state = RCC_OscInitStruct->HSIState;
 8003b46:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b48:	2e04      	cmp	r6, #4
 8003b4a:	d003      	beq.n	8003b54 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b4c:	2e0c      	cmp	r6, #12
 8003b4e:	d124      	bne.n	8003b9a <HAL_RCC_OscConfig+0x196>
 8003b50:	2f00      	cmp	r7, #0
 8003b52:	d122      	bne.n	8003b9a <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	075b      	lsls	r3, r3, #29
 8003b58:	d501      	bpl.n	8003b5e <HAL_RCC_OscConfig+0x15a>
 8003b5a:	2a00      	cmp	r2, #0
 8003b5c:	d0b2      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5e:	6861      	ldr	r1, [r4, #4]
 8003b60:	692b      	ldr	r3, [r5, #16]
 8003b62:	4871      	ldr	r0, [pc, #452]	; (8003d28 <HAL_RCC_OscConfig+0x324>)
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	4001      	ands	r1, r0
 8003b68:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b6a:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	438b      	bics	r3, r1
 8003b72:	4313      	orrs	r3, r2
 8003b74:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b76:	f7ff fefd 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8003b7a:	68e3      	ldr	r3, [r4, #12]
 8003b7c:	4a65      	ldr	r2, [pc, #404]	; (8003d14 <HAL_RCC_OscConfig+0x310>)
 8003b7e:	061b      	lsls	r3, r3, #24
 8003b80:	0f1b      	lsrs	r3, r3, #28
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	40d8      	lsrs	r0, r3
 8003b86:	4b64      	ldr	r3, [pc, #400]	; (8003d18 <HAL_RCC_OscConfig+0x314>)
 8003b88:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8003b8a:	4b64      	ldr	r3, [pc, #400]	; (8003d1c <HAL_RCC_OscConfig+0x318>)
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	f7fe fe95 	bl	80028bc <HAL_InitTick>
      if(status != HAL_OK)
 8003b92:	2800      	cmp	r0, #0
 8003b94:	d100      	bne.n	8003b98 <HAL_RCC_OscConfig+0x194>
 8003b96:	e74a      	b.n	8003a2e <HAL_RCC_OscConfig+0x2a>
 8003b98:	e7ab      	b.n	8003af2 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b9a:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8003b9c:	2a00      	cmp	r2, #0
 8003b9e:	d018      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003ba0:	2109      	movs	r1, #9
 8003ba2:	438b      	bics	r3, r1
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ba8:	f7fe fecc 	bl	8002944 <HAL_GetTick>
 8003bac:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bae:	2204      	movs	r2, #4
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	4213      	tst	r3, r2
 8003bb4:	d007      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb6:	6862      	ldr	r2, [r4, #4]
 8003bb8:	692b      	ldr	r3, [r5, #16]
 8003bba:	495b      	ldr	r1, [pc, #364]	; (8003d28 <HAL_RCC_OscConfig+0x324>)
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	400a      	ands	r2, r1
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	6063      	str	r3, [r4, #4]
 8003bc4:	e733      	b.n	8003a2e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc6:	f7fe febd 	bl	8002944 <HAL_GetTick>
 8003bca:	1bc0      	subs	r0, r0, r7
 8003bcc:	2802      	cmp	r0, #2
 8003bce:	d9ee      	bls.n	8003bae <HAL_RCC_OscConfig+0x1aa>
 8003bd0:	e78e      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	4393      	bics	r3, r2
 8003bd6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003bd8:	f7fe feb4 	bl	8002944 <HAL_GetTick>
 8003bdc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bde:	2204      	movs	r2, #4
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	4213      	tst	r3, r2
 8003be4:	d100      	bne.n	8003be8 <HAL_RCC_OscConfig+0x1e4>
 8003be6:	e722      	b.n	8003a2e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be8:	f7fe feac 	bl	8002944 <HAL_GetTick>
 8003bec:	1bc0      	subs	r0, r0, r7
 8003bee:	2802      	cmp	r0, #2
 8003bf0:	d9f5      	bls.n	8003bde <HAL_RCC_OscConfig+0x1da>
 8003bf2:	e77d      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bf4:	69eb      	ldr	r3, [r5, #28]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d020      	beq.n	8003c3c <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	6822      	ldr	r2, [r4, #0]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4313      	orrs	r3, r2
 8003c02:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003c04:	f7fe fe9e 	bl	8002944 <HAL_GetTick>
 8003c08:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c0a:	2280      	movs	r2, #128	; 0x80
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	0092      	lsls	r2, r2, #2
 8003c10:	4213      	tst	r3, r2
 8003c12:	d00d      	beq.n	8003c30 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c14:	6863      	ldr	r3, [r4, #4]
 8003c16:	4a3e      	ldr	r2, [pc, #248]	; (8003d10 <HAL_RCC_OscConfig+0x30c>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c20:	6862      	ldr	r2, [r4, #4]
 8003c22:	6a2b      	ldr	r3, [r5, #32]
 8003c24:	0212      	lsls	r2, r2, #8
 8003c26:	061b      	lsls	r3, r3, #24
 8003c28:	0a12      	lsrs	r2, r2, #8
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	6063      	str	r3, [r4, #4]
 8003c2e:	e72b      	b.n	8003a88 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c30:	f7fe fe88 	bl	8002944 <HAL_GetTick>
 8003c34:	1bc0      	subs	r0, r0, r7
 8003c36:	2802      	cmp	r0, #2
 8003c38:	d9e7      	bls.n	8003c0a <HAL_RCC_OscConfig+0x206>
 8003c3a:	e759      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_DISABLE();
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	4a3b      	ldr	r2, [pc, #236]	; (8003d2c <HAL_RCC_OscConfig+0x328>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003c44:	f7fe fe7e 	bl	8002944 <HAL_GetTick>
 8003c48:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	0092      	lsls	r2, r2, #2
 8003c50:	4213      	tst	r3, r2
 8003c52:	d100      	bne.n	8003c56 <HAL_RCC_OscConfig+0x252>
 8003c54:	e718      	b.n	8003a88 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c56:	f7fe fe75 	bl	8002944 <HAL_GetTick>
 8003c5a:	1bc0      	subs	r0, r0, r7
 8003c5c:	2802      	cmp	r0, #2
 8003c5e:	d9f4      	bls.n	8003c4a <HAL_RCC_OscConfig+0x246>
 8003c60:	e746      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c62:	696a      	ldr	r2, [r5, #20]
 8003c64:	2301      	movs	r3, #1
 8003c66:	2a00      	cmp	r2, #0
 8003c68:	d010      	beq.n	8003c8c <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8003c6a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003c70:	f7fe fe68 	bl	8002944 <HAL_GetTick>
 8003c74:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c76:	2202      	movs	r2, #2
 8003c78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003c7a:	4213      	tst	r3, r2
 8003c7c:	d000      	beq.n	8003c80 <HAL_RCC_OscConfig+0x27c>
 8003c7e:	e707      	b.n	8003a90 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c80:	f7fe fe60 	bl	8002944 <HAL_GetTick>
 8003c84:	1bc0      	subs	r0, r0, r7
 8003c86:	2802      	cmp	r0, #2
 8003c88:	d9f5      	bls.n	8003c76 <HAL_RCC_OscConfig+0x272>
 8003c8a:	e731      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 8003c8c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003c8e:	439a      	bics	r2, r3
 8003c90:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003c92:	f7fe fe57 	bl	8002944 <HAL_GetTick>
 8003c96:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c98:	2202      	movs	r2, #2
 8003c9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003c9c:	4213      	tst	r3, r2
 8003c9e:	d100      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x29e>
 8003ca0:	e6f6      	b.n	8003a90 <HAL_RCC_OscConfig+0x8c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca2:	f7fe fe4f 	bl	8002944 <HAL_GetTick>
 8003ca6:	1bc0      	subs	r0, r0, r7
 8003ca8:	2802      	cmp	r0, #2
 8003caa:	d9f5      	bls.n	8003c98 <HAL_RCC_OscConfig+0x294>
 8003cac:	e720      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cae:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003cb0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003cb4:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003cb6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb8:	421a      	tst	r2, r3
 8003cba:	d104      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cbc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	2280      	movs	r2, #128	; 0x80
 8003cc8:	4f19      	ldr	r7, [pc, #100]	; (8003d30 <HAL_RCC_OscConfig+0x32c>)
 8003cca:	0052      	lsls	r2, r2, #1
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4213      	tst	r3, r2
 8003cd0:	d008      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd2:	2280      	movs	r2, #128	; 0x80
 8003cd4:	68ab      	ldr	r3, [r5, #8]
 8003cd6:	0052      	lsls	r2, r2, #1
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d12b      	bne.n	8003d34 <HAL_RCC_OscConfig+0x330>
 8003cdc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	6523      	str	r3, [r4, #80]	; 0x50
 8003ce2:	e04c      	b.n	8003d7e <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ce4:	2280      	movs	r2, #128	; 0x80
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	0052      	lsls	r2, r2, #1
 8003cea:	4313      	orrs	r3, r2
 8003cec:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003cee:	f7fe fe29 	bl	8002944 <HAL_GetTick>
 8003cf2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf4:	2280      	movs	r2, #128	; 0x80
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	0052      	lsls	r2, r2, #1
 8003cfa:	4213      	tst	r3, r2
 8003cfc:	d1e9      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfe:	f7fe fe21 	bl	8002944 <HAL_GetTick>
 8003d02:	9b01      	ldr	r3, [sp, #4]
 8003d04:	1ac0      	subs	r0, r0, r3
 8003d06:	2864      	cmp	r0, #100	; 0x64
 8003d08:	d9f4      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x2f0>
 8003d0a:	e6f1      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	ffff1fff 	.word	0xffff1fff
 8003d14:	08005758 	.word	0x08005758
 8003d18:	20000038 	.word	0x20000038
 8003d1c:	20000040 	.word	0x20000040
 8003d20:	fffeffff 	.word	0xfffeffff
 8003d24:	fffbffff 	.word	0xfffbffff
 8003d28:	ffffe0ff 	.word	0xffffe0ff
 8003d2c:	fffffeff 	.word	0xfffffeff
 8003d30:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d116      	bne.n	8003d66 <HAL_RCC_OscConfig+0x362>
 8003d38:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d3a:	4a6b      	ldr	r2, [pc, #428]	; (8003ee8 <HAL_RCC_OscConfig+0x4e4>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	6523      	str	r3, [r4, #80]	; 0x50
 8003d40:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d42:	4a6a      	ldr	r2, [pc, #424]	; (8003eec <HAL_RCC_OscConfig+0x4e8>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003d48:	f7fe fdfc 	bl	8002944 <HAL_GetTick>
 8003d4c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d52:	0092      	lsls	r2, r2, #2
 8003d54:	4213      	tst	r3, r2
 8003d56:	d01a      	beq.n	8003d8e <HAL_RCC_OscConfig+0x38a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7fe fdf4 	bl	8002944 <HAL_GetTick>
 8003d5c:	4b64      	ldr	r3, [pc, #400]	; (8003ef0 <HAL_RCC_OscConfig+0x4ec>)
 8003d5e:	1bc0      	subs	r0, r0, r7
 8003d60:	4298      	cmp	r0, r3
 8003d62:	d9f4      	bls.n	8003d4e <HAL_RCC_OscConfig+0x34a>
 8003d64:	e6c4      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d66:	21a0      	movs	r1, #160	; 0xa0
 8003d68:	00c9      	lsls	r1, r1, #3
 8003d6a:	428b      	cmp	r3, r1
 8003d6c:	d118      	bne.n	8003da0 <HAL_RCC_OscConfig+0x39c>
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6523      	str	r3, [r4, #80]	; 0x50
 8003d78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003d7e:	f7fe fde1 	bl	8002944 <HAL_GetTick>
 8003d82:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d84:	2280      	movs	r2, #128	; 0x80
 8003d86:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003d88:	0092      	lsls	r2, r2, #2
 8003d8a:	4213      	tst	r3, r2
 8003d8c:	d010      	beq.n	8003db0 <HAL_RCC_OscConfig+0x3ac>
    if(pwrclkchanged == SET)
 8003d8e:	9b00      	ldr	r3, [sp, #0]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d000      	beq.n	8003d96 <HAL_RCC_OscConfig+0x392>
 8003d94:	e680      	b.n	8003a98 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d98:	4a56      	ldr	r2, [pc, #344]	; (8003ef4 <HAL_RCC_OscConfig+0x4f0>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	63a3      	str	r3, [r4, #56]	; 0x38
 8003d9e:	e67b      	b.n	8003a98 <HAL_RCC_OscConfig+0x94>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003da2:	4a51      	ldr	r2, [pc, #324]	; (8003ee8 <HAL_RCC_OscConfig+0x4e4>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	6523      	str	r3, [r4, #80]	; 0x50
 8003da8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003daa:	4a50      	ldr	r2, [pc, #320]	; (8003eec <HAL_RCC_OscConfig+0x4e8>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	e797      	b.n	8003ce0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fe fdc8 	bl	8002944 <HAL_GetTick>
 8003db4:	4b4e      	ldr	r3, [pc, #312]	; (8003ef0 <HAL_RCC_OscConfig+0x4ec>)
 8003db6:	1bc0      	subs	r0, r0, r7
 8003db8:	4298      	cmp	r0, r3
 8003dba:	d9e3      	bls.n	8003d84 <HAL_RCC_OscConfig+0x380>
 8003dbc:	e698      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dbe:	69a9      	ldr	r1, [r5, #24]
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	4a4d      	ldr	r2, [pc, #308]	; (8003ef8 <HAL_RCC_OscConfig+0x4f4>)
 8003dc4:	2900      	cmp	r1, #0
 8003dc6:	d018      	beq.n	8003dfa <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI48_ENABLE();
 8003dc8:	68a1      	ldr	r1, [r4, #8]
 8003dca:	4319      	orrs	r1, r3
 8003dcc:	60a1      	str	r1, [r4, #8]
 8003dce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6363      	str	r3, [r4, #52]	; 0x34
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	6a11      	ldr	r1, [r2, #32]
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003dde:	f7fe fdb1 	bl	8002944 <HAL_GetTick>
 8003de2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003de4:	2202      	movs	r2, #2
 8003de6:	68a3      	ldr	r3, [r4, #8]
 8003de8:	4213      	tst	r3, r2
 8003dea:	d000      	beq.n	8003dee <HAL_RCC_OscConfig+0x3ea>
 8003dec:	e658      	b.n	8003aa0 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dee:	f7fe fda9 	bl	8002944 <HAL_GetTick>
 8003df2:	1bc0      	subs	r0, r0, r7
 8003df4:	2802      	cmp	r0, #2
 8003df6:	d9f5      	bls.n	8003de4 <HAL_RCC_OscConfig+0x3e0>
 8003df8:	e67a      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI48_DISABLE();
 8003dfa:	68a1      	ldr	r1, [r4, #8]
 8003dfc:	4399      	bics	r1, r3
 8003dfe:	60a1      	str	r1, [r4, #8]
 8003e00:	6a13      	ldr	r3, [r2, #32]
 8003e02:	493e      	ldr	r1, [pc, #248]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003e04:	400b      	ands	r3, r1
 8003e06:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003e08:	f7fe fd9c 	bl	8002944 <HAL_GetTick>
 8003e0c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e0e:	2202      	movs	r2, #2
 8003e10:	68a3      	ldr	r3, [r4, #8]
 8003e12:	4213      	tst	r3, r2
 8003e14:	d100      	bne.n	8003e18 <HAL_RCC_OscConfig+0x414>
 8003e16:	e643      	b.n	8003aa0 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e18:	f7fe fd94 	bl	8002944 <HAL_GetTick>
 8003e1c:	1bc0      	subs	r0, r0, r7
 8003e1e:	2802      	cmp	r0, #2
 8003e20:	d9f5      	bls.n	8003e0e <HAL_RCC_OscConfig+0x40a>
 8003e22:	e665      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e24:	2e0c      	cmp	r6, #12
 8003e26:	d043      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e28:	4a35      	ldr	r2, [pc, #212]	; (8003f00 <HAL_RCC_OscConfig+0x4fc>)
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d12e      	bne.n	8003e8c <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_DISABLE();
 8003e2e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e30:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003e32:	4013      	ands	r3, r2
 8003e34:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e36:	f7fe fd85 	bl	8002944 <HAL_GetTick>
 8003e3a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e3c:	04bf      	lsls	r7, r7, #18
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	423b      	tst	r3, r7
 8003e42:	d11d      	bne.n	8003e80 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e44:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8003e46:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003e48:	68e2      	ldr	r2, [r4, #12]
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	492d      	ldr	r1, [pc, #180]	; (8003f04 <HAL_RCC_OscConfig+0x500>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003e4e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e50:	400a      	ands	r2, r1
 8003e52:	4313      	orrs	r3, r2
 8003e54:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003e56:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003e5c:	2380      	movs	r3, #128	; 0x80
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	045b      	lsls	r3, r3, #17
 8003e62:	4313      	orrs	r3, r2
 8003e64:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e66:	f7fe fd6d 	bl	8002944 <HAL_GetTick>
 8003e6a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	4233      	tst	r3, r6
 8003e70:	d000      	beq.n	8003e74 <HAL_RCC_OscConfig+0x470>
 8003e72:	e619      	b.n	8003aa8 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fe fd66 	bl	8002944 <HAL_GetTick>
 8003e78:	1b40      	subs	r0, r0, r5
 8003e7a:	2802      	cmp	r0, #2
 8003e7c:	d9f6      	bls.n	8003e6c <HAL_RCC_OscConfig+0x468>
 8003e7e:	e637      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fe fd60 	bl	8002944 <HAL_GetTick>
 8003e84:	1b80      	subs	r0, r0, r6
 8003e86:	2802      	cmp	r0, #2
 8003e88:	d9d9      	bls.n	8003e3e <HAL_RCC_OscConfig+0x43a>
 8003e8a:	e631      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_PLL_DISABLE();
 8003e8c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e8e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003e90:	4013      	ands	r3, r2
 8003e92:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e94:	f7fe fd56 	bl	8002944 <HAL_GetTick>
 8003e98:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e9a:	04b6      	lsls	r6, r6, #18
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	4233      	tst	r3, r6
 8003ea0:	d100      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x4a0>
 8003ea2:	e601      	b.n	8003aa8 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fe fd4e 	bl	8002944 <HAL_GetTick>
 8003ea8:	1b40      	subs	r0, r0, r5
 8003eaa:	2802      	cmp	r0, #2
 8003eac:	d9f6      	bls.n	8003e9c <HAL_RCC_OscConfig+0x498>
 8003eae:	e61f      	b.n	8003af0 <HAL_RCC_OscConfig+0xec>
        return HAL_ERROR;
 8003eb0:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d100      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x4b4>
 8003eb6:	e61c      	b.n	8003af2 <HAL_RCC_OscConfig+0xee>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb8:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8003eba:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ebc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003ebe:	0252      	lsls	r2, r2, #9
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	428a      	cmp	r2, r1
 8003ec4:	d000      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x4c4>
 8003ec6:	e5fd      	b.n	8003ac4 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ec8:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ecc:	0392      	lsls	r2, r2, #14
 8003ece:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed0:	428a      	cmp	r2, r1
 8003ed2:	d000      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x4d2>
 8003ed4:	e5f6      	b.n	8003ac4 <HAL_RCC_OscConfig+0xc0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003ed6:	22c0      	movs	r2, #192	; 0xc0
 8003ed8:	0412      	lsls	r2, r2, #16
 8003eda:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003edc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d100      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4e0>
 8003ee2:	e5e1      	b.n	8003aa8 <HAL_RCC_OscConfig+0xa4>
 8003ee4:	e5ee      	b.n	8003ac4 <HAL_RCC_OscConfig+0xc0>
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	fffffeff 	.word	0xfffffeff
 8003eec:	fffffbff 	.word	0xfffffbff
 8003ef0:	00001388 	.word	0x00001388
 8003ef4:	efffffff 	.word	0xefffffff
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	ffffdfff 	.word	0xffffdfff
 8003f00:	feffffff 	.word	0xfeffffff
 8003f04:	ff02ffff 	.word	0xff02ffff

08003f08 <HAL_RCC_ClockConfig>:
{
 8003f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f0a:	1e04      	subs	r4, r0, #0
 8003f0c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8003f10:	2001      	movs	r0, #1
}
 8003f12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f14:	2501      	movs	r5, #1
 8003f16:	4e5b      	ldr	r6, [pc, #364]	; (8004084 <HAL_RCC_ClockConfig+0x17c>)
 8003f18:	9a01      	ldr	r2, [sp, #4]
 8003f1a:	6833      	ldr	r3, [r6, #0]
 8003f1c:	402b      	ands	r3, r5
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d331      	bcc.n	8003f86 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f22:	6822      	ldr	r2, [r4, #0]
 8003f24:	0793      	lsls	r3, r2, #30
 8003f26:	d443      	bmi.n	8003fb0 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f28:	07d3      	lsls	r3, r2, #31
 8003f2a:	d449      	bmi.n	8003fc0 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f2c:	2501      	movs	r5, #1
 8003f2e:	6833      	ldr	r3, [r6, #0]
 8003f30:	9a01      	ldr	r2, [sp, #4]
 8003f32:	402b      	ands	r3, r5
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d909      	bls.n	8003f4c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f38:	6833      	ldr	r3, [r6, #0]
 8003f3a:	43ab      	bics	r3, r5
 8003f3c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003f3e:	f7fe fd01 	bl	8002944 <HAL_GetTick>
 8003f42:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f44:	6833      	ldr	r3, [r6, #0]
 8003f46:	422b      	tst	r3, r5
 8003f48:	d000      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x44>
 8003f4a:	e08c      	b.n	8004066 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	6822      	ldr	r2, [r4, #0]
 8003f4e:	4d4e      	ldr	r5, [pc, #312]	; (8004088 <HAL_RCC_ClockConfig+0x180>)
 8003f50:	0753      	lsls	r3, r2, #29
 8003f52:	d500      	bpl.n	8003f56 <HAL_RCC_ClockConfig+0x4e>
 8003f54:	e08f      	b.n	8004076 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f56:	0713      	lsls	r3, r2, #28
 8003f58:	d506      	bpl.n	8003f68 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f5a:	68e9      	ldr	r1, [r5, #12]
 8003f5c:	6923      	ldr	r3, [r4, #16]
 8003f5e:	4a4b      	ldr	r2, [pc, #300]	; (800408c <HAL_RCC_ClockConfig+0x184>)
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	400a      	ands	r2, r1
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f68:	f7ff fd04 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8003f6c:	68eb      	ldr	r3, [r5, #12]
 8003f6e:	4a48      	ldr	r2, [pc, #288]	; (8004090 <HAL_RCC_ClockConfig+0x188>)
 8003f70:	061b      	lsls	r3, r3, #24
 8003f72:	0f1b      	lsrs	r3, r3, #28
 8003f74:	5cd3      	ldrb	r3, [r2, r3]
 8003f76:	40d8      	lsrs	r0, r3
 8003f78:	4b46      	ldr	r3, [pc, #280]	; (8004094 <HAL_RCC_ClockConfig+0x18c>)
 8003f7a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003f7c:	4b46      	ldr	r3, [pc, #280]	; (8004098 <HAL_RCC_ClockConfig+0x190>)
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	f7fe fc9c 	bl	80028bc <HAL_InitTick>
  if(status != HAL_OK)
 8003f84:	e7c5      	b.n	8003f12 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	6833      	ldr	r3, [r6, #0]
 8003f88:	9a01      	ldr	r2, [sp, #4]
 8003f8a:	43ab      	bics	r3, r5
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003f90:	f7fe fcd8 	bl	8002944 <HAL_GetTick>
 8003f94:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	6833      	ldr	r3, [r6, #0]
 8003f98:	9a01      	ldr	r2, [sp, #4]
 8003f9a:	402b      	ands	r3, r5
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d0c0      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fe fcd0 	bl	8002944 <HAL_GetTick>
 8003fa4:	4b3d      	ldr	r3, [pc, #244]	; (800409c <HAL_RCC_ClockConfig+0x194>)
 8003fa6:	1bc0      	subs	r0, r0, r7
 8003fa8:	4298      	cmp	r0, r3
 8003faa:	d9f4      	bls.n	8003f96 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8003fac:	2003      	movs	r0, #3
 8003fae:	e7b0      	b.n	8003f12 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb0:	20f0      	movs	r0, #240	; 0xf0
 8003fb2:	4935      	ldr	r1, [pc, #212]	; (8004088 <HAL_RCC_ClockConfig+0x180>)
 8003fb4:	68cb      	ldr	r3, [r1, #12]
 8003fb6:	4383      	bics	r3, r0
 8003fb8:	68a0      	ldr	r0, [r4, #8]
 8003fba:	4303      	orrs	r3, r0
 8003fbc:	60cb      	str	r3, [r1, #12]
 8003fbe:	e7b3      	b.n	8003f28 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc0:	4d31      	ldr	r5, [pc, #196]	; (8004088 <HAL_RCC_ClockConfig+0x180>)
 8003fc2:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fc4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc6:	2a02      	cmp	r2, #2
 8003fc8:	d118      	bne.n	8003ffc <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fca:	039b      	lsls	r3, r3, #14
 8003fcc:	d5a0      	bpl.n	8003f10 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fce:	2103      	movs	r1, #3
 8003fd0:	68eb      	ldr	r3, [r5, #12]
 8003fd2:	438b      	bics	r3, r1
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8003fd8:	f7fe fcb4 	bl	8002944 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fdc:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8003fde:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d118      	bne.n	8004016 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fe4:	220c      	movs	r2, #12
 8003fe6:	68eb      	ldr	r3, [r5, #12]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d09e      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fee:	f7fe fca9 	bl	8002944 <HAL_GetTick>
 8003ff2:	4b2a      	ldr	r3, [pc, #168]	; (800409c <HAL_RCC_ClockConfig+0x194>)
 8003ff4:	1bc0      	subs	r0, r0, r7
 8003ff6:	4298      	cmp	r0, r3
 8003ff8:	d9f4      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0xdc>
 8003ffa:	e7d7      	b.n	8003fac <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffc:	2a03      	cmp	r2, #3
 8003ffe:	d102      	bne.n	8004006 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004000:	019b      	lsls	r3, r3, #6
 8004002:	d4e4      	bmi.n	8003fce <HAL_RCC_ClockConfig+0xc6>
 8004004:	e784      	b.n	8003f10 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004006:	2a01      	cmp	r2, #1
 8004008:	d102      	bne.n	8004010 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800400a:	075b      	lsls	r3, r3, #29
 800400c:	d4df      	bmi.n	8003fce <HAL_RCC_ClockConfig+0xc6>
 800400e:	e77f      	b.n	8003f10 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004010:	059b      	lsls	r3, r3, #22
 8004012:	d4dc      	bmi.n	8003fce <HAL_RCC_ClockConfig+0xc6>
 8004014:	e77c      	b.n	8003f10 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004016:	2b03      	cmp	r3, #3
 8004018:	d10b      	bne.n	8004032 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800401a:	220c      	movs	r2, #12
 800401c:	68eb      	ldr	r3, [r5, #12]
 800401e:	4013      	ands	r3, r2
 8004020:	4293      	cmp	r3, r2
 8004022:	d083      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004024:	f7fe fc8e 	bl	8002944 <HAL_GetTick>
 8004028:	4b1c      	ldr	r3, [pc, #112]	; (800409c <HAL_RCC_ClockConfig+0x194>)
 800402a:	1bc0      	subs	r0, r0, r7
 800402c:	4298      	cmp	r0, r3
 800402e:	d9f4      	bls.n	800401a <HAL_RCC_ClockConfig+0x112>
 8004030:	e7bc      	b.n	8003fac <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004032:	2b01      	cmp	r3, #1
 8004034:	d011      	beq.n	800405a <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004036:	220c      	movs	r2, #12
 8004038:	68eb      	ldr	r3, [r5, #12]
 800403a:	4213      	tst	r3, r2
 800403c:	d100      	bne.n	8004040 <HAL_RCC_ClockConfig+0x138>
 800403e:	e775      	b.n	8003f2c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004040:	f7fe fc80 	bl	8002944 <HAL_GetTick>
 8004044:	4b15      	ldr	r3, [pc, #84]	; (800409c <HAL_RCC_ClockConfig+0x194>)
 8004046:	1bc0      	subs	r0, r0, r7
 8004048:	4298      	cmp	r0, r3
 800404a:	d9f4      	bls.n	8004036 <HAL_RCC_ClockConfig+0x12e>
 800404c:	e7ae      	b.n	8003fac <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404e:	f7fe fc79 	bl	8002944 <HAL_GetTick>
 8004052:	4b12      	ldr	r3, [pc, #72]	; (800409c <HAL_RCC_ClockConfig+0x194>)
 8004054:	1bc0      	subs	r0, r0, r7
 8004056:	4298      	cmp	r0, r3
 8004058:	d8a8      	bhi.n	8003fac <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800405a:	220c      	movs	r2, #12
 800405c:	68eb      	ldr	r3, [r5, #12]
 800405e:	4013      	ands	r3, r2
 8004060:	2b04      	cmp	r3, #4
 8004062:	d1f4      	bne.n	800404e <HAL_RCC_ClockConfig+0x146>
 8004064:	e762      	b.n	8003f2c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004066:	f7fe fc6d 	bl	8002944 <HAL_GetTick>
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_RCC_ClockConfig+0x194>)
 800406c:	1bc0      	subs	r0, r0, r7
 800406e:	4298      	cmp	r0, r3
 8004070:	d800      	bhi.n	8004074 <HAL_RCC_ClockConfig+0x16c>
 8004072:	e767      	b.n	8003f44 <HAL_RCC_ClockConfig+0x3c>
 8004074:	e79a      	b.n	8003fac <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004076:	68eb      	ldr	r3, [r5, #12]
 8004078:	4909      	ldr	r1, [pc, #36]	; (80040a0 <HAL_RCC_ClockConfig+0x198>)
 800407a:	400b      	ands	r3, r1
 800407c:	68e1      	ldr	r1, [r4, #12]
 800407e:	430b      	orrs	r3, r1
 8004080:	60eb      	str	r3, [r5, #12]
 8004082:	e768      	b.n	8003f56 <HAL_RCC_ClockConfig+0x4e>
 8004084:	40022000 	.word	0x40022000
 8004088:	40021000 	.word	0x40021000
 800408c:	ffffc7ff 	.word	0xffffc7ff
 8004090:	08005758 	.word	0x08005758
 8004094:	20000038 	.word	0x20000038
 8004098:	20000040 	.word	0x20000040
 800409c:	00001388 	.word	0x00001388
 80040a0:	fffff8ff 	.word	0xfffff8ff

080040a4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040a4:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80040a6:	4a05      	ldr	r2, [pc, #20]	; (80040bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	055b      	lsls	r3, r3, #21
 80040ac:	0f5b      	lsrs	r3, r3, #29
 80040ae:	5cd3      	ldrb	r3, [r2, r3]
 80040b0:	4a03      	ldr	r2, [pc, #12]	; (80040c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80040b2:	6810      	ldr	r0, [r2, #0]
 80040b4:	40d8      	lsrs	r0, r3
}
 80040b6:	4770      	bx	lr
 80040b8:	40021000 	.word	0x40021000
 80040bc:	08005768 	.word	0x08005768
 80040c0:	20000038 	.word	0x20000038

080040c4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040c4:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80040c6:	4a05      	ldr	r2, [pc, #20]	; (80040dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	049b      	lsls	r3, r3, #18
 80040cc:	0f5b      	lsrs	r3, r3, #29
 80040ce:	5cd3      	ldrb	r3, [r2, r3]
 80040d0:	4a03      	ldr	r2, [pc, #12]	; (80040e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80040d2:	6810      	ldr	r0, [r2, #0]
 80040d4:	40d8      	lsrs	r0, r3
}
 80040d6:	4770      	bx	lr
 80040d8:	40021000 	.word	0x40021000
 80040dc:	08005768 	.word	0x08005768
 80040e0:	20000038 	.word	0x20000038

080040e4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040e4:	6803      	ldr	r3, [r0, #0]
{
 80040e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040e8:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040ea:	069b      	lsls	r3, r3, #26
 80040ec:	d52d      	bpl.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x66>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ee:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 80040f0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f2:	4c5c      	ldr	r4, [pc, #368]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80040f4:	055b      	lsls	r3, r3, #21
 80040f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 80040f8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040fa:	421a      	tst	r2, r3
 80040fc:	d104      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004100:	4313      	orrs	r3, r2
 8004102:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004104:	2301      	movs	r3, #1
 8004106:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004108:	2780      	movs	r7, #128	; 0x80
 800410a:	4e57      	ldr	r6, [pc, #348]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800410c:	007f      	lsls	r7, r7, #1
 800410e:	6833      	ldr	r3, [r6, #0]
 8004110:	423b      	tst	r3, r7
 8004112:	d053      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004114:	686b      	ldr	r3, [r5, #4]
 8004116:	21c0      	movs	r1, #192	; 0xc0
 8004118:	0018      	movs	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800411a:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800411c:	0389      	lsls	r1, r1, #14
 800411e:	4008      	ands	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004120:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004122:	4290      	cmp	r0, r2
 8004124:	d15b      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xfa>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004126:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004128:	22c0      	movs	r2, #192	; 0xc0
 800412a:	0008      	movs	r0, r1
 800412c:	0292      	lsls	r2, r2, #10
 800412e:	4010      	ands	r0, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004130:	4211      	tst	r1, r2
 8004132:	d15f      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004134:	682b      	ldr	r3, [r5, #0]
 8004136:	069b      	lsls	r3, r3, #26
 8004138:	d500      	bpl.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x58>
 800413a:	e070      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800413c:	9b00      	ldr	r3, [sp, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d103      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004142:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004144:	4a49      	ldr	r2, [pc, #292]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004146:	4013      	ands	r3, r2
 8004148:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800414a:	682b      	ldr	r3, [r5, #0]
 800414c:	07da      	lsls	r2, r3, #31
 800414e:	d506      	bpl.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004150:	2003      	movs	r0, #3
 8004152:	4944      	ldr	r1, [pc, #272]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004154:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004156:	4382      	bics	r2, r0
 8004158:	68a8      	ldr	r0, [r5, #8]
 800415a:	4302      	orrs	r2, r0
 800415c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800415e:	079a      	lsls	r2, r3, #30
 8004160:	d506      	bpl.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004162:	200c      	movs	r0, #12
 8004164:	493f      	ldr	r1, [pc, #252]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004166:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004168:	4382      	bics	r2, r0
 800416a:	68e8      	ldr	r0, [r5, #12]
 800416c:	4302      	orrs	r2, r0
 800416e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004170:	075a      	lsls	r2, r3, #29
 8004172:	d506      	bpl.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004174:	493b      	ldr	r1, [pc, #236]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004176:	483e      	ldr	r0, [pc, #248]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004178:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800417a:	4002      	ands	r2, r0
 800417c:	6928      	ldr	r0, [r5, #16]
 800417e:	4302      	orrs	r2, r0
 8004180:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004182:	071a      	lsls	r2, r3, #28
 8004184:	d506      	bpl.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004186:	4937      	ldr	r1, [pc, #220]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004188:	483a      	ldr	r0, [pc, #232]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800418a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800418c:	4002      	ands	r2, r0
 800418e:	6968      	ldr	r0, [r5, #20]
 8004190:	4302      	orrs	r2, r0
 8004192:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004194:	065a      	lsls	r2, r3, #25
 8004196:	d506      	bpl.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004198:	4932      	ldr	r1, [pc, #200]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800419a:	4837      	ldr	r0, [pc, #220]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800419c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800419e:	4002      	ands	r2, r0
 80041a0:	69e8      	ldr	r0, [r5, #28]
 80041a2:	4302      	orrs	r2, r0
 80041a4:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80041a6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041a8:	061b      	lsls	r3, r3, #24
 80041aa:	d517      	bpl.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80041ac:	4a2d      	ldr	r2, [pc, #180]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80041ae:	4933      	ldr	r1, [pc, #204]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80041b0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80041b2:	400b      	ands	r3, r1
 80041b4:	69a9      	ldr	r1, [r5, #24]
 80041b6:	430b      	orrs	r3, r1
 80041b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041ba:	e00f      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041bc:	6833      	ldr	r3, [r6, #0]
 80041be:	433b      	orrs	r3, r7
 80041c0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80041c2:	f7fe fbbf 	bl	8002944 <HAL_GetTick>
 80041c6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c8:	6833      	ldr	r3, [r6, #0]
 80041ca:	423b      	tst	r3, r7
 80041cc:	d1a2      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ce:	f7fe fbb9 	bl	8002944 <HAL_GetTick>
 80041d2:	9b01      	ldr	r3, [sp, #4]
 80041d4:	1ac0      	subs	r0, r0, r3
 80041d6:	2864      	cmp	r0, #100	; 0x64
 80041d8:	d9f6      	bls.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          return HAL_TIMEOUT;
 80041da:	2003      	movs	r0, #3
}
 80041dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80041de:	22c0      	movs	r2, #192	; 0xc0
 80041e0:	0019      	movs	r1, r3
 80041e2:	0292      	lsls	r2, r2, #10
 80041e4:	4011      	ands	r1, r2
 80041e6:	4291      	cmp	r1, r2
 80041e8:	d19d      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x42>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80041ea:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 80041ec:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80041ee:	0392      	lsls	r2, r2, #14
 80041f0:	d599      	bpl.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80041f2:	e7f3      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80041f4:	4013      	ands	r3, r2
 80041f6:	4283      	cmp	r3, r0
 80041f8:	d09c      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041fa:	682b      	ldr	r3, [r5, #0]
 80041fc:	069b      	lsls	r3, r3, #26
 80041fe:	d59d      	bpl.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004200:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004202:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004204:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004206:	0312      	lsls	r2, r2, #12
 8004208:	4302      	orrs	r2, r0
 800420a:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800420c:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800420e:	4b1c      	ldr	r3, [pc, #112]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004210:	481c      	ldr	r0, [pc, #112]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004212:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004214:	4002      	ands	r2, r0
 8004216:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004218:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800421a:	05cb      	lsls	r3, r1, #23
 800421c:	d412      	bmi.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800421e:	6869      	ldr	r1, [r5, #4]
 8004220:	23c0      	movs	r3, #192	; 0xc0
 8004222:	000a      	movs	r2, r1
 8004224:	029b      	lsls	r3, r3, #10
 8004226:	401a      	ands	r2, r3
 8004228:	429a      	cmp	r2, r3
 800422a:	d107      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x158>
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	4816      	ldr	r0, [pc, #88]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004230:	4003      	ands	r3, r0
 8004232:	20c0      	movs	r0, #192	; 0xc0
 8004234:	0380      	lsls	r0, r0, #14
 8004236:	4001      	ands	r1, r0
 8004238:	430b      	orrs	r3, r1
 800423a:	6023      	str	r3, [r4, #0]
 800423c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800423e:	431a      	orrs	r2, r3
 8004240:	6522      	str	r2, [r4, #80]	; 0x50
 8004242:	e77b      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 8004244:	f7fe fb7e 	bl	8002944 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004248:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800424a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800424c:	00bf      	lsls	r7, r7, #2
 800424e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004250:	423b      	tst	r3, r7
 8004252:	d000      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004254:	e76e      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fe fb75 	bl	8002944 <HAL_GetTick>
 800425a:	4b0c      	ldr	r3, [pc, #48]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800425c:	1b80      	subs	r0, r0, r6
 800425e:	4298      	cmp	r0, r3
 8004260:	d9f5      	bls.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8004262:	e7ba      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8004264:	40021000 	.word	0x40021000
 8004268:	40007000 	.word	0x40007000
 800426c:	efffffff 	.word	0xefffffff
 8004270:	fffff3ff 	.word	0xfffff3ff
 8004274:	ffffcfff 	.word	0xffffcfff
 8004278:	fbffffff 	.word	0xfbffffff
 800427c:	fff3ffff 	.word	0xfff3ffff
 8004280:	fffcffff 	.word	0xfffcffff
 8004284:	fff7ffff 	.word	0xfff7ffff
 8004288:	ffcfffff 	.word	0xffcfffff
 800428c:	00001388 	.word	0x00001388

08004290 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004290:	2280      	movs	r2, #128	; 0x80
{
 8004292:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004294:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004296:	05d2      	lsls	r2, r2, #23
 8004298:	4290      	cmp	r0, r2
 800429a:	d005      	beq.n	80042a8 <TIM_Base_SetConfig+0x18>
 800429c:	4c10      	ldr	r4, [pc, #64]	; (80042e0 <TIM_Base_SetConfig+0x50>)
 800429e:	42a0      	cmp	r0, r4
 80042a0:	d002      	beq.n	80042a8 <TIM_Base_SetConfig+0x18>
 80042a2:	4c10      	ldr	r4, [pc, #64]	; (80042e4 <TIM_Base_SetConfig+0x54>)
 80042a4:	42a0      	cmp	r0, r4
 80042a6:	d10f      	bne.n	80042c8 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a8:	2470      	movs	r4, #112	; 0x70
 80042aa:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80042ac:	684c      	ldr	r4, [r1, #4]
 80042ae:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042b0:	4290      	cmp	r0, r2
 80042b2:	d005      	beq.n	80042c0 <TIM_Base_SetConfig+0x30>
 80042b4:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <TIM_Base_SetConfig+0x50>)
 80042b6:	4290      	cmp	r0, r2
 80042b8:	d002      	beq.n	80042c0 <TIM_Base_SetConfig+0x30>
 80042ba:	4a0a      	ldr	r2, [pc, #40]	; (80042e4 <TIM_Base_SetConfig+0x54>)
 80042bc:	4290      	cmp	r0, r2
 80042be:	d103      	bne.n	80042c8 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042c0:	4a09      	ldr	r2, [pc, #36]	; (80042e8 <TIM_Base_SetConfig+0x58>)
 80042c2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042c4:	68ca      	ldr	r2, [r1, #12]
 80042c6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c8:	2280      	movs	r2, #128	; 0x80
 80042ca:	4393      	bics	r3, r2
 80042cc:	690a      	ldr	r2, [r1, #16]
 80042ce:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80042d0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d2:	688b      	ldr	r3, [r1, #8]
 80042d4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d6:	680b      	ldr	r3, [r1, #0]
 80042d8:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042da:	2301      	movs	r3, #1
 80042dc:	6143      	str	r3, [r0, #20]
}
 80042de:	bd10      	pop	{r4, pc}
 80042e0:	40010800 	.word	0x40010800
 80042e4:	40011400 	.word	0x40011400
 80042e8:	fffffcff 	.word	0xfffffcff

080042ec <HAL_TIM_Base_Init>:
{
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	0004      	movs	r4, r0
    return HAL_ERROR;
 80042f0:	2001      	movs	r0, #1
  if (htim == NULL)
 80042f2:	2c00      	cmp	r4, #0
 80042f4:	d01d      	beq.n	8004332 <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	0025      	movs	r5, r4
 80042f8:	3539      	adds	r5, #57	; 0x39
 80042fa:	782b      	ldrb	r3, [r5, #0]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d105      	bne.n	800430e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004302:	0023      	movs	r3, r4
 8004304:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8004306:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004308:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 800430a:	f7fe fa17 	bl	800273c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800430e:	2302      	movs	r3, #2
 8004310:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004312:	6820      	ldr	r0, [r4, #0]
 8004314:	1d21      	adds	r1, r4, #4
 8004316:	f7ff ffbb 	bl	8004290 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800431a:	0022      	movs	r2, r4
 800431c:	2301      	movs	r3, #1
  return HAL_OK;
 800431e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004320:	323e      	adds	r2, #62	; 0x3e
 8004322:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004324:	343d      	adds	r4, #61	; 0x3d
 8004326:	3a04      	subs	r2, #4
 8004328:	7013      	strb	r3, [r2, #0]
 800432a:	7053      	strb	r3, [r2, #1]
 800432c:	7093      	strb	r3, [r2, #2]
 800432e:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004330:	702b      	strb	r3, [r5, #0]
}
 8004332:	bd70      	pop	{r4, r5, r6, pc}

08004334 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004334:	0002      	movs	r2, r0
{
 8004336:	0003      	movs	r3, r0
    return HAL_ERROR;
 8004338:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800433a:	3239      	adds	r2, #57	; 0x39
 800433c:	7811      	ldrb	r1, [r2, #0]
 800433e:	4281      	cmp	r1, r0
 8004340:	d119      	bne.n	8004376 <HAL_TIM_Base_Start_IT+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8004342:	2102      	movs	r1, #2
 8004344:	7011      	strb	r1, [r2, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	4302      	orrs	r2, r0
 800434c:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434e:	2280      	movs	r2, #128	; 0x80
 8004350:	05d2      	lsls	r2, r2, #23
 8004352:	4293      	cmp	r3, r2
 8004354:	d005      	beq.n	8004362 <HAL_TIM_Base_Start_IT+0x2e>
 8004356:	4a0b      	ldr	r2, [pc, #44]	; (8004384 <HAL_TIM_Base_Start_IT+0x50>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d002      	beq.n	8004362 <HAL_TIM_Base_Start_IT+0x2e>
 800435c:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <HAL_TIM_Base_Start_IT+0x54>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10a      	bne.n	8004378 <HAL_TIM_Base_Start_IT+0x44>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004362:	2107      	movs	r1, #7
 8004364:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8004366:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004368:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436a:	2a06      	cmp	r2, #6
 800436c:	d003      	beq.n	8004376 <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 800436e:	2201      	movs	r2, #1
 8004370:	6819      	ldr	r1, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	601a      	str	r2, [r3, #0]
}
 8004376:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4310      	orrs	r0, r2
 800437c:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800437e:	2000      	movs	r0, #0
 8004380:	e7f9      	b.n	8004376 <HAL_TIM_Base_Start_IT+0x42>
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	40010800 	.word	0x40010800
 8004388:	40011400 	.word	0x40011400

0800438c <HAL_TIM_OC_DelayElapsedCallback>:
 800438c:	4770      	bx	lr

0800438e <HAL_TIM_IC_CaptureCallback>:
 800438e:	4770      	bx	lr

08004390 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004390:	4770      	bx	lr

08004392 <HAL_TIM_TriggerCallback>:
 8004392:	4770      	bx	lr

08004394 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004394:	2202      	movs	r2, #2
 8004396:	6803      	ldr	r3, [r0, #0]
{
 8004398:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800439a:	6919      	ldr	r1, [r3, #16]
{
 800439c:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800439e:	4211      	tst	r1, r2
 80043a0:	d00d      	beq.n	80043be <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043a2:	68d9      	ldr	r1, [r3, #12]
 80043a4:	4211      	tst	r1, r2
 80043a6:	d00a      	beq.n	80043be <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043a8:	3a05      	subs	r2, #5
 80043aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ac:	3204      	adds	r2, #4
 80043ae:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	079b      	lsls	r3, r3, #30
 80043b4:	d05e      	beq.n	8004474 <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 80043b6:	f7ff ffea 	bl	800438e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ba:	2300      	movs	r3, #0
 80043bc:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043be:	2204      	movs	r2, #4
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	6919      	ldr	r1, [r3, #16]
 80043c4:	4211      	tst	r1, r2
 80043c6:	d010      	beq.n	80043ea <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043c8:	68d9      	ldr	r1, [r3, #12]
 80043ca:	4211      	tst	r1, r2
 80043cc:	d00d      	beq.n	80043ea <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043ce:	3a09      	subs	r2, #9
 80043d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043d2:	3207      	adds	r2, #7
 80043d4:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043d6:	699a      	ldr	r2, [r3, #24]
 80043d8:	23c0      	movs	r3, #192	; 0xc0
 80043da:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80043dc:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043de:	421a      	tst	r2, r3
 80043e0:	d04e      	beq.n	8004480 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 80043e2:	f7ff ffd4 	bl	800438e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	2300      	movs	r3, #0
 80043e8:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043ea:	2208      	movs	r2, #8
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	6919      	ldr	r1, [r3, #16]
 80043f0:	4211      	tst	r1, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043f4:	68d9      	ldr	r1, [r3, #12]
 80043f6:	4211      	tst	r1, r2
 80043f8:	d00b      	beq.n	8004412 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043fa:	3a11      	subs	r2, #17
 80043fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043fe:	320d      	adds	r2, #13
 8004400:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004402:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004404:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004406:	079b      	lsls	r3, r3, #30
 8004408:	d040      	beq.n	800448c <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 800440a:	f7ff ffc0 	bl	800438e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	2300      	movs	r3, #0
 8004410:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004412:	2210      	movs	r2, #16
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	6919      	ldr	r1, [r3, #16]
 8004418:	4211      	tst	r1, r2
 800441a:	d010      	beq.n	800443e <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800441c:	68d9      	ldr	r1, [r3, #12]
 800441e:	4211      	tst	r1, r2
 8004420:	d00d      	beq.n	800443e <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004422:	3a21      	subs	r2, #33	; 0x21
 8004424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004426:	3219      	adds	r2, #25
 8004428:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	23c0      	movs	r3, #192	; 0xc0
 800442e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004430:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004432:	421a      	tst	r2, r3
 8004434:	d030      	beq.n	8004498 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 8004436:	f7ff ffaa 	bl	800438e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	2300      	movs	r3, #0
 800443c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800443e:	2201      	movs	r2, #1
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	6919      	ldr	r1, [r3, #16]
 8004444:	4211      	tst	r1, r2
 8004446:	d007      	beq.n	8004458 <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004448:	68d9      	ldr	r1, [r3, #12]
 800444a:	4211      	tst	r1, r2
 800444c:	d004      	beq.n	8004458 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800444e:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 8004450:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004452:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004454:	f7fd fed6 	bl	8002204 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004458:	2240      	movs	r2, #64	; 0x40
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	6919      	ldr	r1, [r3, #16]
 800445e:	4211      	tst	r1, r2
 8004460:	d007      	beq.n	8004472 <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004462:	68d9      	ldr	r1, [r3, #12]
 8004464:	4211      	tst	r1, r2
 8004466:	d004      	beq.n	8004472 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004468:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 800446a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800446c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800446e:	f7ff ff90 	bl	8004392 <HAL_TIM_TriggerCallback>
}
 8004472:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004474:	f7ff ff8a 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004478:	0020      	movs	r0, r4
 800447a:	f7ff ff89 	bl	8004390 <HAL_TIM_PWM_PulseFinishedCallback>
 800447e:	e79c      	b.n	80043ba <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004480:	f7ff ff84 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004484:	0020      	movs	r0, r4
 8004486:	f7ff ff83 	bl	8004390 <HAL_TIM_PWM_PulseFinishedCallback>
 800448a:	e7ac      	b.n	80043e6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448c:	f7ff ff7e 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	0020      	movs	r0, r4
 8004492:	f7ff ff7d 	bl	8004390 <HAL_TIM_PWM_PulseFinishedCallback>
 8004496:	e7ba      	b.n	800440e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004498:	f7ff ff78 	bl	800438c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	0020      	movs	r0, r4
 800449e:	f7ff ff77 	bl	8004390 <HAL_TIM_PWM_PulseFinishedCallback>
 80044a2:	e7ca      	b.n	800443a <HAL_TIM_IRQHandler+0xa6>

080044a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044a4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044a6:	0004      	movs	r4, r0
 80044a8:	2202      	movs	r2, #2
 80044aa:	3438      	adds	r4, #56	; 0x38
 80044ac:	7825      	ldrb	r5, [r4, #0]
{
 80044ae:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80044b0:	0010      	movs	r0, r2
 80044b2:	2d01      	cmp	r5, #1
 80044b4:	d01d      	beq.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b6:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b8:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80044ba:	3539      	adds	r5, #57	; 0x39
 80044bc:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80044c2:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80044c4:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c6:	680e      	ldr	r6, [r1, #0]
 80044c8:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ca:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044cc:	2080      	movs	r0, #128	; 0x80
 80044ce:	05c0      	lsls	r0, r0, #23
 80044d0:	4283      	cmp	r3, r0
 80044d2:	d005      	beq.n	80044e0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80044d4:	4807      	ldr	r0, [pc, #28]	; (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 80044d6:	4283      	cmp	r3, r0
 80044d8:	d002      	beq.n	80044e0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80044da:	4807      	ldr	r0, [pc, #28]	; (80044f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80044dc:	4283      	cmp	r3, r0
 80044de:	d104      	bne.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e0:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044e2:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e4:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044e6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044ea:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80044ec:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80044ee:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80044f0:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80044f2:	bd70      	pop	{r4, r5, r6, pc}
 80044f4:	40010800 	.word	0x40010800
 80044f8:	40011400 	.word	0x40011400

080044fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044fc:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004502:	2201      	movs	r2, #1
 8004504:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004508:	6801      	ldr	r1, [r0, #0]
 800450a:	4d12      	ldr	r5, [pc, #72]	; (8004554 <UART_EndRxTransfer+0x58>)
 800450c:	680b      	ldr	r3, [r1, #0]
 800450e:	402b      	ands	r3, r5
 8004510:	600b      	str	r3, [r1, #0]
 8004512:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004516:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451e:	6801      	ldr	r1, [r0, #0]
 8004520:	688b      	ldr	r3, [r1, #8]
 8004522:	4393      	bics	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
 8004526:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800452a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800452c:	4293      	cmp	r3, r2
 800452e:	d10a      	bne.n	8004546 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004530:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004534:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004538:	2410      	movs	r4, #16
 800453a:	6802      	ldr	r2, [r0, #0]
 800453c:	6813      	ldr	r3, [r2, #0]
 800453e:	43a3      	bics	r3, r4
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004546:	2220      	movs	r2, #32
 8004548:	1d03      	adds	r3, r0, #4
 800454a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454c:	2300      	movs	r3, #0
 800454e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004550:	6683      	str	r3, [r0, #104]	; 0x68
}
 8004552:	bd30      	pop	{r4, r5, pc}
 8004554:	fffffedf 	.word	0xfffffedf

08004558 <UART_SetConfig>:
{
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800455c:	6925      	ldr	r5, [r4, #16]
 800455e:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8004560:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004562:	4329      	orrs	r1, r5
 8004564:	6965      	ldr	r5, [r4, #20]
 8004566:	69c3      	ldr	r3, [r0, #28]
 8004568:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800456a:	6810      	ldr	r0, [r2, #0]
 800456c:	4d72      	ldr	r5, [pc, #456]	; (8004738 <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800456e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004570:	4028      	ands	r0, r5
 8004572:	4301      	orrs	r1, r0
 8004574:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004576:	6851      	ldr	r1, [r2, #4]
 8004578:	4870      	ldr	r0, [pc, #448]	; (800473c <UART_SetConfig+0x1e4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800457a:	4d71      	ldr	r5, [pc, #452]	; (8004740 <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800457c:	4001      	ands	r1, r0
 800457e:	68e0      	ldr	r0, [r4, #12]
 8004580:	4301      	orrs	r1, r0
 8004582:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004584:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004586:	42aa      	cmp	r2, r5
 8004588:	d001      	beq.n	800458e <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 800458a:	6a21      	ldr	r1, [r4, #32]
 800458c:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800458e:	6891      	ldr	r1, [r2, #8]
 8004590:	4e6c      	ldr	r6, [pc, #432]	; (8004744 <UART_SetConfig+0x1ec>)
 8004592:	4031      	ands	r1, r6
 8004594:	4301      	orrs	r1, r0
 8004596:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004598:	496b      	ldr	r1, [pc, #428]	; (8004748 <UART_SetConfig+0x1f0>)
 800459a:	428a      	cmp	r2, r1
 800459c:	d10f      	bne.n	80045be <UART_SetConfig+0x66>
 800459e:	2103      	movs	r1, #3
 80045a0:	4a6a      	ldr	r2, [pc, #424]	; (800474c <UART_SetConfig+0x1f4>)
 80045a2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80045a4:	400a      	ands	r2, r1
 80045a6:	3a01      	subs	r2, #1
 80045a8:	4969      	ldr	r1, [pc, #420]	; (8004750 <UART_SetConfig+0x1f8>)
 80045aa:	2a02      	cmp	r2, #2
 80045ac:	d90f      	bls.n	80045ce <UART_SetConfig+0x76>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ae:	2280      	movs	r2, #128	; 0x80
 80045b0:	0212      	lsls	r2, r2, #8
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d100      	bne.n	80045b8 <UART_SetConfig+0x60>
 80045b6:	e069      	b.n	800468c <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK2Freq();
 80045b8:	f7ff fd84 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
        break;
 80045bc:	e09c      	b.n	80046f8 <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045be:	4965      	ldr	r1, [pc, #404]	; (8004754 <UART_SetConfig+0x1fc>)
 80045c0:	428a      	cmp	r2, r1
 80045c2:	d113      	bne.n	80045ec <UART_SetConfig+0x94>
 80045c4:	210c      	movs	r1, #12
 80045c6:	4a61      	ldr	r2, [pc, #388]	; (800474c <UART_SetConfig+0x1f4>)
 80045c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80045ca:	400a      	ands	r2, r1
 80045cc:	4962      	ldr	r1, [pc, #392]	; (8004758 <UART_SetConfig+0x200>)
 80045ce:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045d0:	2280      	movs	r2, #128	; 0x80
 80045d2:	0212      	lsls	r2, r2, #8
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d000      	beq.n	80045da <UART_SetConfig+0x82>
 80045d8:	e07f      	b.n	80046da <UART_SetConfig+0x182>
    switch (clocksource)
 80045da:	2808      	cmp	r0, #8
 80045dc:	d818      	bhi.n	8004610 <UART_SetConfig+0xb8>
 80045de:	f7fb fd9b 	bl	8000118 <__gnu_thumb1_case_uqi>
 80045e2:	5550      	.short	0x5550
 80045e4:	17791758 	.word	0x17791758
 80045e8:	1717      	.short	0x1717
 80045ea:	63          	.byte	0x63
 80045eb:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ec:	42aa      	cmp	r2, r5
 80045ee:	d10f      	bne.n	8004610 <UART_SetConfig+0xb8>
 80045f0:	21c0      	movs	r1, #192	; 0xc0
 80045f2:	2080      	movs	r0, #128	; 0x80
 80045f4:	4a55      	ldr	r2, [pc, #340]	; (800474c <UART_SetConfig+0x1f4>)
 80045f6:	0109      	lsls	r1, r1, #4
 80045f8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80045fa:	0100      	lsls	r0, r0, #4
 80045fc:	400b      	ands	r3, r1
 80045fe:	4283      	cmp	r3, r0
 8004600:	d016      	beq.n	8004630 <UART_SetConfig+0xd8>
 8004602:	d807      	bhi.n	8004614 <UART_SetConfig+0xbc>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <UART_SetConfig+0xc6>
 8004608:	2280      	movs	r2, #128	; 0x80
 800460a:	00d2      	lsls	r2, r2, #3
 800460c:	4293      	cmp	r3, r2
 800460e:	d035      	beq.n	800467c <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004610:	2001      	movs	r0, #1
 8004612:	e009      	b.n	8004628 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004614:	428b      	cmp	r3, r1
 8004616:	d1fb      	bne.n	8004610 <UART_SetConfig+0xb8>
 8004618:	2080      	movs	r0, #128	; 0x80
 800461a:	0200      	lsls	r0, r0, #8
 800461c:	e012      	b.n	8004644 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 800461e:	f7ff fd41 	bl	80040a4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004622:	2800      	cmp	r0, #0
 8004624:	d10e      	bne.n	8004644 <UART_SetConfig+0xec>
 8004626:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8004628:	2300      	movs	r3, #0
 800462a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800462c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800462e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004630:	2310      	movs	r3, #16
 8004632:	6810      	ldr	r0, [r2, #0]
 8004634:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004636:	4243      	negs	r3, r0
 8004638:	4158      	adcs	r0, r3
 800463a:	4b48      	ldr	r3, [pc, #288]	; (800475c <UART_SetConfig+0x204>)
 800463c:	4240      	negs	r0, r0
 800463e:	4018      	ands	r0, r3
 8004640:	4b47      	ldr	r3, [pc, #284]	; (8004760 <UART_SetConfig+0x208>)
 8004642:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004644:	2203      	movs	r2, #3
 8004646:	6863      	ldr	r3, [r4, #4]
 8004648:	435a      	muls	r2, r3
 800464a:	4282      	cmp	r2, r0
 800464c:	d8e0      	bhi.n	8004610 <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800464e:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004650:	4282      	cmp	r2, r0
 8004652:	d3dd      	bcc.n	8004610 <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004654:	2700      	movs	r7, #0
 8004656:	0e02      	lsrs	r2, r0, #24
 8004658:	0201      	lsls	r1, r0, #8
 800465a:	085e      	lsrs	r6, r3, #1
 800465c:	1989      	adds	r1, r1, r6
 800465e:	417a      	adcs	r2, r7
 8004660:	0008      	movs	r0, r1
 8004662:	0011      	movs	r1, r2
 8004664:	001a      	movs	r2, r3
 8004666:	003b      	movs	r3, r7
 8004668:	f7fb ff1a 	bl	80004a0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800466c:	4b3d      	ldr	r3, [pc, #244]	; (8004764 <UART_SetConfig+0x20c>)
 800466e:	18c2      	adds	r2, r0, r3
 8004670:	4b3d      	ldr	r3, [pc, #244]	; (8004768 <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004672:	429a      	cmp	r2, r3
 8004674:	d8cc      	bhi.n	8004610 <UART_SetConfig+0xb8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	60d8      	str	r0, [r3, #12]
 800467a:	e7d4      	b.n	8004626 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 800467c:	f7ff f97a 	bl	8003974 <HAL_RCC_GetSysClockFreq>
        break;
 8004680:	e7cf      	b.n	8004622 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004682:	f7ff fd0f 	bl	80040a4 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8004686:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8004688:	d0cd      	beq.n	8004626 <UART_SetConfig+0xce>
 800468a:	e00d      	b.n	80046a8 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 800468c:	f7ff fd1a 	bl	80040c4 <HAL_RCC_GetPCLK2Freq>
 8004690:	e7f9      	b.n	8004686 <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004692:	4b2e      	ldr	r3, [pc, #184]	; (800474c <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004694:	4a32      	ldr	r2, [pc, #200]	; (8004760 <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	2310      	movs	r3, #16
 800469a:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800469c:	4243      	negs	r3, r0
 800469e:	4158      	adcs	r0, r3
 80046a0:	4b2e      	ldr	r3, [pc, #184]	; (800475c <UART_SetConfig+0x204>)
 80046a2:	4240      	negs	r0, r0
 80046a4:	4003      	ands	r3, r0
 80046a6:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046a8:	0058      	lsls	r0, r3, #1
 80046aa:	6863      	ldr	r3, [r4, #4]
 80046ac:	6861      	ldr	r1, [r4, #4]
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	18c0      	adds	r0, r0, r3
 80046b2:	f7fb fd45 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b6:	0002      	movs	r2, r0
 80046b8:	4b2c      	ldr	r3, [pc, #176]	; (800476c <UART_SetConfig+0x214>)
 80046ba:	3a10      	subs	r2, #16
 80046bc:	429a      	cmp	r2, r3
 80046be:	d8a7      	bhi.n	8004610 <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046c0:	230f      	movs	r3, #15
 80046c2:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046c4:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046c6:	439a      	bics	r2, r3
 80046c8:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046ca:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80046cc:	6822      	ldr	r2, [r4, #0]
 80046ce:	4318      	orrs	r0, r3
 80046d0:	60d0      	str	r0, [r2, #12]
 80046d2:	e7a8      	b.n	8004626 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 80046d4:	f7ff f94e 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 80046d8:	e7d5      	b.n	8004686 <UART_SetConfig+0x12e>
    switch (clocksource)
 80046da:	2808      	cmp	r0, #8
 80046dc:	d898      	bhi.n	8004610 <UART_SetConfig+0xb8>
 80046de:	f7fb fd25 	bl	800012c <__gnu_thumb1_case_shi>
 80046e2:	0009      	.short	0x0009
 80046e4:	000fff6b 	.word	0x000fff6b
 80046e8:	0024ff97 	.word	0x0024ff97
 80046ec:	ff97ff97 	.word	0xff97ff97
 80046f0:	0027ff97 	.word	0x0027ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f4:	f7ff fcd6 	bl	80040a4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d100      	bne.n	80046fe <UART_SetConfig+0x1a6>
 80046fc:	e793      	b.n	8004626 <UART_SetConfig+0xce>
 80046fe:	e00a      	b.n	8004716 <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004700:	4b12      	ldr	r3, [pc, #72]	; (800474c <UART_SetConfig+0x1f4>)
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	2310      	movs	r3, #16
 8004706:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004708:	4243      	negs	r3, r0
 800470a:	4158      	adcs	r0, r3
 800470c:	4b13      	ldr	r3, [pc, #76]	; (800475c <UART_SetConfig+0x204>)
 800470e:	4240      	negs	r0, r0
 8004710:	4018      	ands	r0, r3
 8004712:	4b13      	ldr	r3, [pc, #76]	; (8004760 <UART_SetConfig+0x208>)
 8004714:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004716:	6863      	ldr	r3, [r4, #4]
 8004718:	6861      	ldr	r1, [r4, #4]
 800471a:	085b      	lsrs	r3, r3, #1
 800471c:	1818      	adds	r0, r3, r0
 800471e:	f7fb fd0f 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004722:	0002      	movs	r2, r0
 8004724:	4b11      	ldr	r3, [pc, #68]	; (800476c <UART_SetConfig+0x214>)
 8004726:	3a10      	subs	r2, #16
 8004728:	e7a3      	b.n	8004672 <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 800472a:	f7ff f923 	bl	8003974 <HAL_RCC_GetSysClockFreq>
        break;
 800472e:	e7e3      	b.n	80046f8 <UART_SetConfig+0x1a0>
    switch (clocksource)
 8004730:	2080      	movs	r0, #128	; 0x80
 8004732:	0200      	lsls	r0, r0, #8
 8004734:	e7ef      	b.n	8004716 <UART_SetConfig+0x1be>
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	efff69f3 	.word	0xefff69f3
 800473c:	ffffcfff 	.word	0xffffcfff
 8004740:	40004800 	.word	0x40004800
 8004744:	fffff4ff 	.word	0xfffff4ff
 8004748:	40013800 	.word	0x40013800
 800474c:	40021000 	.word	0x40021000
 8004750:	08005779 	.word	0x08005779
 8004754:	40004400 	.word	0x40004400
 8004758:	0800577c 	.word	0x0800577c
 800475c:	00b71b00 	.word	0x00b71b00
 8004760:	003d0900 	.word	0x003d0900
 8004764:	fffffd00 	.word	0xfffffd00
 8004768:	000ffcff 	.word	0x000ffcff
 800476c:	0000ffef 	.word	0x0000ffef

08004770 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004770:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004772:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004774:	07da      	lsls	r2, r3, #31
 8004776:	d506      	bpl.n	8004786 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004778:	6801      	ldr	r1, [r0, #0]
 800477a:	4c28      	ldr	r4, [pc, #160]	; (800481c <UART_AdvFeatureConfig+0xac>)
 800477c:	684a      	ldr	r2, [r1, #4]
 800477e:	4022      	ands	r2, r4
 8004780:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004782:	4322      	orrs	r2, r4
 8004784:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004786:	079a      	lsls	r2, r3, #30
 8004788:	d506      	bpl.n	8004798 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800478a:	6801      	ldr	r1, [r0, #0]
 800478c:	4c24      	ldr	r4, [pc, #144]	; (8004820 <UART_AdvFeatureConfig+0xb0>)
 800478e:	684a      	ldr	r2, [r1, #4]
 8004790:	4022      	ands	r2, r4
 8004792:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004794:	4322      	orrs	r2, r4
 8004796:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004798:	075a      	lsls	r2, r3, #29
 800479a:	d506      	bpl.n	80047aa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800479c:	6801      	ldr	r1, [r0, #0]
 800479e:	4c21      	ldr	r4, [pc, #132]	; (8004824 <UART_AdvFeatureConfig+0xb4>)
 80047a0:	684a      	ldr	r2, [r1, #4]
 80047a2:	4022      	ands	r2, r4
 80047a4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80047a6:	4322      	orrs	r2, r4
 80047a8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047aa:	071a      	lsls	r2, r3, #28
 80047ac:	d506      	bpl.n	80047bc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ae:	6801      	ldr	r1, [r0, #0]
 80047b0:	4c1d      	ldr	r4, [pc, #116]	; (8004828 <UART_AdvFeatureConfig+0xb8>)
 80047b2:	684a      	ldr	r2, [r1, #4]
 80047b4:	4022      	ands	r2, r4
 80047b6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80047b8:	4322      	orrs	r2, r4
 80047ba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047bc:	06da      	lsls	r2, r3, #27
 80047be:	d506      	bpl.n	80047ce <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047c0:	6801      	ldr	r1, [r0, #0]
 80047c2:	4c1a      	ldr	r4, [pc, #104]	; (800482c <UART_AdvFeatureConfig+0xbc>)
 80047c4:	688a      	ldr	r2, [r1, #8]
 80047c6:	4022      	ands	r2, r4
 80047c8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80047ca:	4322      	orrs	r2, r4
 80047cc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ce:	069a      	lsls	r2, r3, #26
 80047d0:	d506      	bpl.n	80047e0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047d2:	6801      	ldr	r1, [r0, #0]
 80047d4:	4c16      	ldr	r4, [pc, #88]	; (8004830 <UART_AdvFeatureConfig+0xc0>)
 80047d6:	688a      	ldr	r2, [r1, #8]
 80047d8:	4022      	ands	r2, r4
 80047da:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80047dc:	4322      	orrs	r2, r4
 80047de:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047e0:	065a      	lsls	r2, r3, #25
 80047e2:	d510      	bpl.n	8004806 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047e4:	6801      	ldr	r1, [r0, #0]
 80047e6:	4d13      	ldr	r5, [pc, #76]	; (8004834 <UART_AdvFeatureConfig+0xc4>)
 80047e8:	684a      	ldr	r2, [r1, #4]
 80047ea:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80047ec:	402a      	ands	r2, r5
 80047ee:	4322      	orrs	r2, r4
 80047f0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047f2:	2280      	movs	r2, #128	; 0x80
 80047f4:	0352      	lsls	r2, r2, #13
 80047f6:	4294      	cmp	r4, r2
 80047f8:	d105      	bne.n	8004806 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047fa:	684a      	ldr	r2, [r1, #4]
 80047fc:	4c0e      	ldr	r4, [pc, #56]	; (8004838 <UART_AdvFeatureConfig+0xc8>)
 80047fe:	4022      	ands	r2, r4
 8004800:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004802:	4322      	orrs	r2, r4
 8004804:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004806:	061b      	lsls	r3, r3, #24
 8004808:	d506      	bpl.n	8004818 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800480a:	6802      	ldr	r2, [r0, #0]
 800480c:	490b      	ldr	r1, [pc, #44]	; (800483c <UART_AdvFeatureConfig+0xcc>)
 800480e:	6853      	ldr	r3, [r2, #4]
 8004810:	400b      	ands	r3, r1
 8004812:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004814:	430b      	orrs	r3, r1
 8004816:	6053      	str	r3, [r2, #4]
}
 8004818:	bd30      	pop	{r4, r5, pc}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	fffdffff 	.word	0xfffdffff
 8004820:	fffeffff 	.word	0xfffeffff
 8004824:	fffbffff 	.word	0xfffbffff
 8004828:	ffff7fff 	.word	0xffff7fff
 800482c:	ffffefff 	.word	0xffffefff
 8004830:	ffffdfff 	.word	0xffffdfff
 8004834:	ffefffff 	.word	0xffefffff
 8004838:	ff9fffff 	.word	0xff9fffff
 800483c:	fff7ffff 	.word	0xfff7ffff

08004840 <UART_WaitOnFlagUntilTimeout>:
{
 8004840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004842:	0004      	movs	r4, r0
 8004844:	000d      	movs	r5, r1
 8004846:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004848:	2608      	movs	r6, #8
{
 800484a:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484c:	6822      	ldr	r2, [r4, #0]
 800484e:	69d3      	ldr	r3, [r2, #28]
 8004850:	402b      	ands	r3, r5
 8004852:	1b5b      	subs	r3, r3, r5
 8004854:	4259      	negs	r1, r3
 8004856:	414b      	adcs	r3, r1
 8004858:	42bb      	cmp	r3, r7
 800485a:	d001      	beq.n	8004860 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 800485c:	2000      	movs	r0, #0
 800485e:	e021      	b.n	80048a4 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8004860:	9b08      	ldr	r3, [sp, #32]
 8004862:	3301      	adds	r3, #1
 8004864:	d0f3      	beq.n	800484e <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004866:	f7fe f86d 	bl	8002944 <HAL_GetTick>
 800486a:	9b00      	ldr	r3, [sp, #0]
 800486c:	1ac0      	subs	r0, r0, r3
 800486e:	9b08      	ldr	r3, [sp, #32]
 8004870:	4298      	cmp	r0, r3
 8004872:	d828      	bhi.n	80048c6 <UART_WaitOnFlagUntilTimeout+0x86>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d026      	beq.n	80048c6 <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004878:	2104      	movs	r1, #4
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	420a      	tst	r2, r1
 8004880:	d0e4      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	0011      	movs	r1, r2
 8004886:	4031      	ands	r1, r6
 8004888:	9101      	str	r1, [sp, #4]
 800488a:	4232      	tst	r2, r6
 800488c:	d00b      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 800488e:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004890:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8004892:	f7ff fe33 	bl	80044fc <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004896:	0023      	movs	r3, r4
 8004898:	3308      	adds	r3, #8
 800489a:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 800489c:	2300      	movs	r3, #0
           return HAL_ERROR;
 800489e:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 80048a0:	3478      	adds	r4, #120	; 0x78
 80048a2:	7023      	strb	r3, [r4, #0]
}
 80048a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048a6:	2280      	movs	r2, #128	; 0x80
 80048a8:	69d9      	ldr	r1, [r3, #28]
 80048aa:	0112      	lsls	r2, r2, #4
 80048ac:	4211      	tst	r1, r2
 80048ae:	d0cd      	beq.n	800484c <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048b0:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80048b2:	0020      	movs	r0, r4
 80048b4:	f7ff fe22 	bl	80044fc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048b8:	0023      	movs	r3, r4
 80048ba:	2220      	movs	r2, #32
 80048bc:	3308      	adds	r3, #8
 80048be:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80048c0:	9b01      	ldr	r3, [sp, #4]
 80048c2:	3478      	adds	r4, #120	; 0x78
 80048c4:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80048c6:	2003      	movs	r0, #3
 80048c8:	e7ec      	b.n	80048a4 <UART_WaitOnFlagUntilTimeout+0x64>

080048ca <HAL_UART_Transmit>:
{
 80048ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048cc:	b085      	sub	sp, #20
 80048ce:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 80048d0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 80048d2:	0004      	movs	r4, r0
 80048d4:	000d      	movs	r5, r1
 80048d6:	0016      	movs	r6, r2
    return HAL_BUSY;
 80048d8:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d139      	bne.n	8004952 <HAL_UART_Transmit+0x88>
      return  HAL_ERROR;
 80048de:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80048e0:	2900      	cmp	r1, #0
 80048e2:	d036      	beq.n	8004952 <HAL_UART_Transmit+0x88>
 80048e4:	2a00      	cmp	r2, #0
 80048e6:	d034      	beq.n	8004952 <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e8:	2380      	movs	r3, #128	; 0x80
 80048ea:	68a2      	ldr	r2, [r4, #8]
 80048ec:	015b      	lsls	r3, r3, #5
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d104      	bne.n	80048fc <HAL_UART_Transmit+0x32>
 80048f2:	6923      	ldr	r3, [r4, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80048f8:	4201      	tst	r1, r0
 80048fa:	d12a      	bne.n	8004952 <HAL_UART_Transmit+0x88>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	0023      	movs	r3, r4
 80048fe:	2200      	movs	r2, #0
 8004900:	3308      	adds	r3, #8
 8004902:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004904:	2321      	movs	r3, #33	; 0x21
 8004906:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8004908:	f7fe f81c 	bl	8002944 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800490c:	0023      	movs	r3, r4
 800490e:	3350      	adds	r3, #80	; 0x50
 8004910:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8004912:	3302      	adds	r3, #2
 8004914:	801e      	strh	r6, [r3, #0]
 8004916:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800491c:	0007      	movs	r7, r0
      pdata16bits = NULL;
 800491e:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004920:	015b      	lsls	r3, r3, #5
 8004922:	429a      	cmp	r2, r3
 8004924:	d104      	bne.n	8004930 <HAL_UART_Transmit+0x66>
 8004926:	6923      	ldr	r3, [r4, #16]
 8004928:	42b3      	cmp	r3, r6
 800492a:	d101      	bne.n	8004930 <HAL_UART_Transmit+0x66>
 800492c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800492e:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8004930:	0023      	movs	r3, r4
 8004932:	3352      	adds	r3, #82	; 0x52
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29a      	uxth	r2, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10c      	bne.n	8004956 <HAL_UART_Transmit+0x8c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800493c:	9b03      	ldr	r3, [sp, #12]
 800493e:	2140      	movs	r1, #64	; 0x40
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	0020      	movs	r0, r4
 8004944:	003b      	movs	r3, r7
 8004946:	f7ff ff7b 	bl	8004840 <UART_WaitOnFlagUntilTimeout>
 800494a:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 800494c:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800494e:	2800      	cmp	r0, #0
 8004950:	d10d      	bne.n	800496e <HAL_UART_Transmit+0xa4>
}
 8004952:	b005      	add	sp, #20
 8004954:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004956:	9b03      	ldr	r3, [sp, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	2180      	movs	r1, #128	; 0x80
 800495e:	003b      	movs	r3, r7
 8004960:	0020      	movs	r0, r4
 8004962:	f7ff ff6d 	bl	8004840 <UART_WaitOnFlagUntilTimeout>
 8004966:	2800      	cmp	r0, #0
 8004968:	d003      	beq.n	8004972 <HAL_UART_Transmit+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 800496a:	2320      	movs	r3, #32
 800496c:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 800496e:	2003      	movs	r0, #3
 8004970:	e7ef      	b.n	8004952 <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004972:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8004974:	2d00      	cmp	r5, #0
 8004976:	d10b      	bne.n	8004990 <HAL_UART_Transmit+0xc6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004978:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800497a:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800497c:	05db      	lsls	r3, r3, #23
 800497e:	0ddb      	lsrs	r3, r3, #23
 8004980:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004982:	9b02      	ldr	r3, [sp, #8]
 8004984:	9a02      	ldr	r2, [sp, #8]
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	3b01      	subs	r3, #1
 800498a:	b29b      	uxth	r3, r3
 800498c:	8013      	strh	r3, [r2, #0]
 800498e:	e7cf      	b.n	8004930 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004990:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8004992:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004994:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8004996:	e7f4      	b.n	8004982 <HAL_UART_Transmit+0xb8>

08004998 <HAL_UART_Receive>:
{
 8004998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800499a:	0016      	movs	r6, r2
 800499c:	b087      	sub	sp, #28
  if (huart->RxState == HAL_UART_STATE_READY)
 800499e:	1d02      	adds	r2, r0, #4
{
 80049a0:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 80049a2:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
{
 80049a4:	0004      	movs	r4, r0
 80049a6:	000d      	movs	r5, r1
    return HAL_BUSY;
 80049a8:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d160      	bne.n	8004a70 <HAL_UART_Receive+0xd8>
      return  HAL_ERROR;
 80049ae:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80049b0:	2900      	cmp	r1, #0
 80049b2:	d05d      	beq.n	8004a70 <HAL_UART_Receive+0xd8>
 80049b4:	2e00      	cmp	r6, #0
 80049b6:	d05b      	beq.n	8004a70 <HAL_UART_Receive+0xd8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	68a1      	ldr	r1, [r4, #8]
 80049bc:	015b      	lsls	r3, r3, #5
 80049be:	4299      	cmp	r1, r3
 80049c0:	d104      	bne.n	80049cc <HAL_UART_Receive+0x34>
 80049c2:	6923      	ldr	r3, [r4, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_UART_Receive+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 80049c8:	4205      	tst	r5, r0
 80049ca:	d151      	bne.n	8004a70 <HAL_UART_Receive+0xd8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	0023      	movs	r3, r4
 80049ce:	2700      	movs	r7, #0
 80049d0:	3308      	adds	r3, #8
 80049d2:	67df      	str	r7, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049d4:	2322      	movs	r3, #34	; 0x22
 80049d6:	67d3      	str	r3, [r2, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d8:	6627      	str	r7, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 80049da:	f7fd ffb3 	bl	8002944 <HAL_GetTick>
    huart->RxXferSize  = Size;
 80049de:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 80049e0:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 80049e2:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 80049e4:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 80049e6:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 80049e8:	3302      	adds	r3, #2
 80049ea:	9303      	str	r3, [sp, #12]
 80049ec:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80049ee:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 80049f0:	0149      	lsls	r1, r1, #5
 80049f2:	3302      	adds	r3, #2
 80049f4:	428a      	cmp	r2, r1
 80049f6:	d11b      	bne.n	8004a30 <HAL_UART_Receive+0x98>
 80049f8:	6921      	ldr	r1, [r4, #16]
 80049fa:	42b9      	cmp	r1, r7
 80049fc:	d116      	bne.n	8004a2c <HAL_UART_Receive+0x94>
 80049fe:	4926      	ldr	r1, [pc, #152]	; (8004a98 <HAL_UART_Receive+0x100>)
 8004a00:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 8004a02:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a04:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 8004a06:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a08:	015b      	lsls	r3, r3, #5
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d104      	bne.n	8004a18 <HAL_UART_Receive+0x80>
 8004a0e:	6923      	ldr	r3, [r4, #16]
 8004a10:	42b3      	cmp	r3, r6
 8004a12:	d101      	bne.n	8004a18 <HAL_UART_Receive+0x80>
 8004a14:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8004a16:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 8004a18:	0023      	movs	r3, r4
 8004a1a:	335a      	adds	r3, #90	; 0x5a
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b298      	uxth	r0, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d117      	bne.n	8004a54 <HAL_UART_Receive+0xbc>
    huart->RxState = HAL_UART_STATE_READY;
 8004a24:	3404      	adds	r4, #4
 8004a26:	3320      	adds	r3, #32
 8004a28:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8004a2a:	e021      	b.n	8004a70 <HAL_UART_Receive+0xd8>
    UART_MASK_COMPUTATION(huart);
 8004a2c:	21ff      	movs	r1, #255	; 0xff
 8004a2e:	e7e7      	b.n	8004a00 <HAL_UART_Receive+0x68>
 8004a30:	2a00      	cmp	r2, #0
 8004a32:	d104      	bne.n	8004a3e <HAL_UART_Receive+0xa6>
 8004a34:	6921      	ldr	r1, [r4, #16]
 8004a36:	2900      	cmp	r1, #0
 8004a38:	d0f8      	beq.n	8004a2c <HAL_UART_Receive+0x94>
 8004a3a:	217f      	movs	r1, #127	; 0x7f
 8004a3c:	e7e0      	b.n	8004a00 <HAL_UART_Receive+0x68>
 8004a3e:	2180      	movs	r1, #128	; 0x80
 8004a40:	0549      	lsls	r1, r1, #21
 8004a42:	428a      	cmp	r2, r1
 8004a44:	d104      	bne.n	8004a50 <HAL_UART_Receive+0xb8>
 8004a46:	6921      	ldr	r1, [r4, #16]
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	d0f6      	beq.n	8004a3a <HAL_UART_Receive+0xa2>
 8004a4c:	213f      	movs	r1, #63	; 0x3f
 8004a4e:	e7d7      	b.n	8004a00 <HAL_UART_Receive+0x68>
 8004a50:	801f      	strh	r7, [r3, #0]
 8004a52:	e7d6      	b.n	8004a02 <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a54:	9b05      	ldr	r3, [sp, #20]
 8004a56:	2200      	movs	r2, #0
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	2120      	movs	r1, #32
 8004a5c:	0020      	movs	r0, r4
 8004a5e:	9b04      	ldr	r3, [sp, #16]
 8004a60:	f7ff feee 	bl	8004840 <UART_WaitOnFlagUntilTimeout>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_UART_Receive+0xdc>
        huart->RxState = HAL_UART_STATE_READY;
 8004a68:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8004a6a:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8004a6c:	3404      	adds	r4, #4
 8004a6e:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8004a70:	b007      	add	sp, #28
 8004a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	d108      	bne.n	8004a90 <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a7e:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 8004a80:	3602      	adds	r6, #2
      huart->RxXferCount--;
 8004a82:	9b03      	ldr	r3, [sp, #12]
 8004a84:	9a03      	ldr	r2, [sp, #12]
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	8013      	strh	r3, [r2, #0]
 8004a8e:	e7c3      	b.n	8004a18 <HAL_UART_Receive+0x80>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a90:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8004a92:	3501      	adds	r5, #1
 8004a94:	e7f5      	b.n	8004a82 <HAL_UART_Receive+0xea>
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	000001ff 	.word	0x000001ff

08004a9c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9c:	0003      	movs	r3, r0
{
 8004a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa0:	2500      	movs	r5, #0
{
 8004aa2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004aa8:	f7fd ff4c 	bl	8002944 <HAL_GetTick>
 8004aac:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aae:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004ab0:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3678      	adds	r6, #120	; 0x78
 8004ab6:	071b      	lsls	r3, r3, #28
 8004ab8:	d51b      	bpl.n	8004af2 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aba:	2180      	movs	r1, #128	; 0x80
 8004abc:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <UART_CheckIdleState+0xbc>)
 8004abe:	002a      	movs	r2, r5
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	0389      	lsls	r1, r1, #14
 8004ac4:	0003      	movs	r3, r0
 8004ac6:	0020      	movs	r0, r4
 8004ac8:	f7ff feba 	bl	8004840 <UART_WaitOnFlagUntilTimeout>
 8004acc:	42a8      	cmp	r0, r5
 8004ace:	d010      	beq.n	8004af2 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ada:	2080      	movs	r0, #128	; 0x80
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	6813      	ldr	r3, [r2, #0]
 8004ae0:	4383      	bics	r3, r0
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004ae8:	2320      	movs	r3, #32
 8004aea:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8004aec:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 8004aee:	2003      	movs	r0, #3
}
 8004af0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004af2:	0025      	movs	r5, r4
 8004af4:	cd08      	ldmia	r5!, {r3}
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	075b      	lsls	r3, r3, #29
 8004afa:	d525      	bpl.n	8004b48 <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afc:	2180      	movs	r1, #128	; 0x80
 8004afe:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <UART_CheckIdleState+0xbc>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	0020      	movs	r0, r4
 8004b06:	003b      	movs	r3, r7
 8004b08:	03c9      	lsls	r1, r1, #15
 8004b0a:	f7ff fe99 	bl	8004840 <UART_WaitOnFlagUntilTimeout>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d01a      	beq.n	8004b48 <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b12:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b16:	2201      	movs	r2, #1
 8004b18:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1c:	6821      	ldr	r1, [r4, #0]
 8004b1e:	4f0f      	ldr	r7, [pc, #60]	; (8004b5c <UART_CheckIdleState+0xc0>)
 8004b20:	680b      	ldr	r3, [r1, #0]
 8004b22:	403b      	ands	r3, r7
 8004b24:	600b      	str	r3, [r1, #0]
 8004b26:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b2e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	6821      	ldr	r1, [r4, #0]
 8004b34:	688b      	ldr	r3, [r1, #8]
 8004b36:	4393      	bics	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
 8004b3a:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	2320      	movs	r3, #32
 8004b40:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8004b42:	2300      	movs	r3, #0
 8004b44:	7033      	strb	r3, [r6, #0]
 8004b46:	e7d2      	b.n	8004aee <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b48:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004b4a:	2320      	movs	r3, #32
 8004b4c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b4e:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b50:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b52:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8004b54:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 8004b56:	e7cb      	b.n	8004af0 <UART_CheckIdleState+0x54>
 8004b58:	01ffffff 	.word	0x01ffffff
 8004b5c:	fffffedf 	.word	0xfffffedf

08004b60 <HAL_UART_Init>:
{
 8004b60:	b510      	push	{r4, lr}
 8004b62:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8004b66:	2001      	movs	r0, #1
}
 8004b68:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004b6a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8004b70:	0002      	movs	r2, r0
 8004b72:	3278      	adds	r2, #120	; 0x78
 8004b74:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8004b76:	f7fd fdef 	bl	8002758 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004b7a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004b80:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004b82:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b84:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004b86:	438b      	bics	r3, r1
 8004b88:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b8a:	f7ff fce5 	bl	8004558 <UART_SetConfig>
 8004b8e:	2801      	cmp	r0, #1
 8004b90:	d0e9      	beq.n	8004b66 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8004b98:	0020      	movs	r0, r4
 8004b9a:	f7ff fde9 	bl	8004770 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	4907      	ldr	r1, [pc, #28]	; (8004bc0 <HAL_UART_Init+0x60>)
 8004ba2:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004ba4:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba6:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba8:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	438a      	bics	r2, r1
 8004bb0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	6819      	ldr	r1, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004bba:	f7ff ff6f 	bl	8004a9c <UART_CheckIdleState>
 8004bbe:	e7d3      	b.n	8004b68 <HAL_UART_Init+0x8>
 8004bc0:	ffffb7ff 	.word	0xffffb7ff

08004bc4 <__errno>:
 8004bc4:	4b01      	ldr	r3, [pc, #4]	; (8004bcc <__errno+0x8>)
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	4770      	bx	lr
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	20000044 	.word	0x20000044

08004bd0 <__libc_init_array>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	2600      	movs	r6, #0
 8004bd4:	4d0c      	ldr	r5, [pc, #48]	; (8004c08 <__libc_init_array+0x38>)
 8004bd6:	4c0d      	ldr	r4, [pc, #52]	; (8004c0c <__libc_init_array+0x3c>)
 8004bd8:	1b64      	subs	r4, r4, r5
 8004bda:	10a4      	asrs	r4, r4, #2
 8004bdc:	42a6      	cmp	r6, r4
 8004bde:	d109      	bne.n	8004bf4 <__libc_init_array+0x24>
 8004be0:	2600      	movs	r6, #0
 8004be2:	f000 fc8b 	bl	80054fc <_init>
 8004be6:	4d0a      	ldr	r5, [pc, #40]	; (8004c10 <__libc_init_array+0x40>)
 8004be8:	4c0a      	ldr	r4, [pc, #40]	; (8004c14 <__libc_init_array+0x44>)
 8004bea:	1b64      	subs	r4, r4, r5
 8004bec:	10a4      	asrs	r4, r4, #2
 8004bee:	42a6      	cmp	r6, r4
 8004bf0:	d105      	bne.n	8004bfe <__libc_init_array+0x2e>
 8004bf2:	bd70      	pop	{r4, r5, r6, pc}
 8004bf4:	00b3      	lsls	r3, r6, #2
 8004bf6:	58eb      	ldr	r3, [r5, r3]
 8004bf8:	4798      	blx	r3
 8004bfa:	3601      	adds	r6, #1
 8004bfc:	e7ee      	b.n	8004bdc <__libc_init_array+0xc>
 8004bfe:	00b3      	lsls	r3, r6, #2
 8004c00:	58eb      	ldr	r3, [r5, r3]
 8004c02:	4798      	blx	r3
 8004c04:	3601      	adds	r6, #1
 8004c06:	e7f2      	b.n	8004bee <__libc_init_array+0x1e>
 8004c08:	080057c4 	.word	0x080057c4
 8004c0c:	080057c4 	.word	0x080057c4
 8004c10:	080057c4 	.word	0x080057c4
 8004c14:	080057c8 	.word	0x080057c8

08004c18 <memcpy>:
 8004c18:	2300      	movs	r3, #0
 8004c1a:	b510      	push	{r4, lr}
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d100      	bne.n	8004c22 <memcpy+0xa>
 8004c20:	bd10      	pop	{r4, pc}
 8004c22:	5ccc      	ldrb	r4, [r1, r3]
 8004c24:	54c4      	strb	r4, [r0, r3]
 8004c26:	3301      	adds	r3, #1
 8004c28:	e7f8      	b.n	8004c1c <memcpy+0x4>

08004c2a <memset>:
 8004c2a:	0003      	movs	r3, r0
 8004c2c:	1882      	adds	r2, r0, r2
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d100      	bne.n	8004c34 <memset+0xa>
 8004c32:	4770      	bx	lr
 8004c34:	7019      	strb	r1, [r3, #0]
 8004c36:	3301      	adds	r3, #1
 8004c38:	e7f9      	b.n	8004c2e <memset+0x4>
	...

08004c3c <siprintf>:
 8004c3c:	b40e      	push	{r1, r2, r3}
 8004c3e:	b500      	push	{lr}
 8004c40:	490b      	ldr	r1, [pc, #44]	; (8004c70 <siprintf+0x34>)
 8004c42:	b09c      	sub	sp, #112	; 0x70
 8004c44:	ab1d      	add	r3, sp, #116	; 0x74
 8004c46:	9002      	str	r0, [sp, #8]
 8004c48:	9006      	str	r0, [sp, #24]
 8004c4a:	9107      	str	r1, [sp, #28]
 8004c4c:	9104      	str	r1, [sp, #16]
 8004c4e:	4809      	ldr	r0, [pc, #36]	; (8004c74 <siprintf+0x38>)
 8004c50:	4909      	ldr	r1, [pc, #36]	; (8004c78 <siprintf+0x3c>)
 8004c52:	cb04      	ldmia	r3!, {r2}
 8004c54:	9105      	str	r1, [sp, #20]
 8004c56:	6800      	ldr	r0, [r0, #0]
 8004c58:	a902      	add	r1, sp, #8
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	f000 f870 	bl	8004d40 <_svfiprintf_r>
 8004c60:	2300      	movs	r3, #0
 8004c62:	9a02      	ldr	r2, [sp, #8]
 8004c64:	7013      	strb	r3, [r2, #0]
 8004c66:	b01c      	add	sp, #112	; 0x70
 8004c68:	bc08      	pop	{r3}
 8004c6a:	b003      	add	sp, #12
 8004c6c:	4718      	bx	r3
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	7fffffff 	.word	0x7fffffff
 8004c74:	20000044 	.word	0x20000044
 8004c78:	ffff0208 	.word	0xffff0208

08004c7c <__ssputs_r>:
 8004c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c7e:	688e      	ldr	r6, [r1, #8]
 8004c80:	b085      	sub	sp, #20
 8004c82:	0007      	movs	r7, r0
 8004c84:	000c      	movs	r4, r1
 8004c86:	9203      	str	r2, [sp, #12]
 8004c88:	9301      	str	r3, [sp, #4]
 8004c8a:	429e      	cmp	r6, r3
 8004c8c:	d83c      	bhi.n	8004d08 <__ssputs_r+0x8c>
 8004c8e:	2390      	movs	r3, #144	; 0x90
 8004c90:	898a      	ldrh	r2, [r1, #12]
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	421a      	tst	r2, r3
 8004c96:	d034      	beq.n	8004d02 <__ssputs_r+0x86>
 8004c98:	6909      	ldr	r1, [r1, #16]
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	6960      	ldr	r0, [r4, #20]
 8004c9e:	1a5b      	subs	r3, r3, r1
 8004ca0:	9302      	str	r3, [sp, #8]
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	4343      	muls	r3, r0
 8004ca6:	0fdd      	lsrs	r5, r3, #31
 8004ca8:	18ed      	adds	r5, r5, r3
 8004caa:	9b01      	ldr	r3, [sp, #4]
 8004cac:	9802      	ldr	r0, [sp, #8]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	181b      	adds	r3, r3, r0
 8004cb2:	106d      	asrs	r5, r5, #1
 8004cb4:	42ab      	cmp	r3, r5
 8004cb6:	d900      	bls.n	8004cba <__ssputs_r+0x3e>
 8004cb8:	001d      	movs	r5, r3
 8004cba:	0553      	lsls	r3, r2, #21
 8004cbc:	d532      	bpl.n	8004d24 <__ssputs_r+0xa8>
 8004cbe:	0029      	movs	r1, r5
 8004cc0:	0038      	movs	r0, r7
 8004cc2:	f000 fb49 	bl	8005358 <_malloc_r>
 8004cc6:	1e06      	subs	r6, r0, #0
 8004cc8:	d109      	bne.n	8004cde <__ssputs_r+0x62>
 8004cca:	230c      	movs	r3, #12
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	2340      	movs	r3, #64	; 0x40
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	89a2      	ldrh	r2, [r4, #12]
 8004cd4:	4240      	negs	r0, r0
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	b005      	add	sp, #20
 8004cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cde:	9a02      	ldr	r2, [sp, #8]
 8004ce0:	6921      	ldr	r1, [r4, #16]
 8004ce2:	f7ff ff99 	bl	8004c18 <memcpy>
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <__ssputs_r+0xc0>)
 8004cea:	401a      	ands	r2, r3
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	9b02      	ldr	r3, [sp, #8]
 8004cf4:	6126      	str	r6, [r4, #16]
 8004cf6:	18f6      	adds	r6, r6, r3
 8004cf8:	6026      	str	r6, [r4, #0]
 8004cfa:	6165      	str	r5, [r4, #20]
 8004cfc:	9e01      	ldr	r6, [sp, #4]
 8004cfe:	1aed      	subs	r5, r5, r3
 8004d00:	60a5      	str	r5, [r4, #8]
 8004d02:	9b01      	ldr	r3, [sp, #4]
 8004d04:	429e      	cmp	r6, r3
 8004d06:	d900      	bls.n	8004d0a <__ssputs_r+0x8e>
 8004d08:	9e01      	ldr	r6, [sp, #4]
 8004d0a:	0032      	movs	r2, r6
 8004d0c:	9903      	ldr	r1, [sp, #12]
 8004d0e:	6820      	ldr	r0, [r4, #0]
 8004d10:	f000 faa3 	bl	800525a <memmove>
 8004d14:	68a3      	ldr	r3, [r4, #8]
 8004d16:	2000      	movs	r0, #0
 8004d18:	1b9b      	subs	r3, r3, r6
 8004d1a:	60a3      	str	r3, [r4, #8]
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	199e      	adds	r6, r3, r6
 8004d20:	6026      	str	r6, [r4, #0]
 8004d22:	e7da      	b.n	8004cda <__ssputs_r+0x5e>
 8004d24:	002a      	movs	r2, r5
 8004d26:	0038      	movs	r0, r7
 8004d28:	f000 fb8c 	bl	8005444 <_realloc_r>
 8004d2c:	1e06      	subs	r6, r0, #0
 8004d2e:	d1e0      	bne.n	8004cf2 <__ssputs_r+0x76>
 8004d30:	0038      	movs	r0, r7
 8004d32:	6921      	ldr	r1, [r4, #16]
 8004d34:	f000 faa4 	bl	8005280 <_free_r>
 8004d38:	e7c7      	b.n	8004cca <__ssputs_r+0x4e>
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	fffffb7f 	.word	0xfffffb7f

08004d40 <_svfiprintf_r>:
 8004d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d42:	b0a1      	sub	sp, #132	; 0x84
 8004d44:	9003      	str	r0, [sp, #12]
 8004d46:	001d      	movs	r5, r3
 8004d48:	898b      	ldrh	r3, [r1, #12]
 8004d4a:	000f      	movs	r7, r1
 8004d4c:	0016      	movs	r6, r2
 8004d4e:	061b      	lsls	r3, r3, #24
 8004d50:	d511      	bpl.n	8004d76 <_svfiprintf_r+0x36>
 8004d52:	690b      	ldr	r3, [r1, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10e      	bne.n	8004d76 <_svfiprintf_r+0x36>
 8004d58:	2140      	movs	r1, #64	; 0x40
 8004d5a:	f000 fafd 	bl	8005358 <_malloc_r>
 8004d5e:	6038      	str	r0, [r7, #0]
 8004d60:	6138      	str	r0, [r7, #16]
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d105      	bne.n	8004d72 <_svfiprintf_r+0x32>
 8004d66:	230c      	movs	r3, #12
 8004d68:	9a03      	ldr	r2, [sp, #12]
 8004d6a:	3801      	subs	r0, #1
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	b021      	add	sp, #132	; 0x84
 8004d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d72:	2340      	movs	r3, #64	; 0x40
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	2300      	movs	r3, #0
 8004d78:	ac08      	add	r4, sp, #32
 8004d7a:	6163      	str	r3, [r4, #20]
 8004d7c:	3320      	adds	r3, #32
 8004d7e:	7663      	strb	r3, [r4, #25]
 8004d80:	3310      	adds	r3, #16
 8004d82:	76a3      	strb	r3, [r4, #26]
 8004d84:	9507      	str	r5, [sp, #28]
 8004d86:	0035      	movs	r5, r6
 8004d88:	782b      	ldrb	r3, [r5, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <_svfiprintf_r+0x52>
 8004d8e:	2b25      	cmp	r3, #37	; 0x25
 8004d90:	d147      	bne.n	8004e22 <_svfiprintf_r+0xe2>
 8004d92:	1bab      	subs	r3, r5, r6
 8004d94:	9305      	str	r3, [sp, #20]
 8004d96:	42b5      	cmp	r5, r6
 8004d98:	d00c      	beq.n	8004db4 <_svfiprintf_r+0x74>
 8004d9a:	0032      	movs	r2, r6
 8004d9c:	0039      	movs	r1, r7
 8004d9e:	9803      	ldr	r0, [sp, #12]
 8004da0:	f7ff ff6c 	bl	8004c7c <__ssputs_r>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d100      	bne.n	8004daa <_svfiprintf_r+0x6a>
 8004da8:	e0ae      	b.n	8004f08 <_svfiprintf_r+0x1c8>
 8004daa:	6962      	ldr	r2, [r4, #20]
 8004dac:	9b05      	ldr	r3, [sp, #20]
 8004dae:	4694      	mov	ip, r2
 8004db0:	4463      	add	r3, ip
 8004db2:	6163      	str	r3, [r4, #20]
 8004db4:	782b      	ldrb	r3, [r5, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d100      	bne.n	8004dbc <_svfiprintf_r+0x7c>
 8004dba:	e0a5      	b.n	8004f08 <_svfiprintf_r+0x1c8>
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	4252      	negs	r2, r2
 8004dc2:	6062      	str	r2, [r4, #4]
 8004dc4:	a904      	add	r1, sp, #16
 8004dc6:	3254      	adds	r2, #84	; 0x54
 8004dc8:	1852      	adds	r2, r2, r1
 8004dca:	1c6e      	adds	r6, r5, #1
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	60e3      	str	r3, [r4, #12]
 8004dd0:	60a3      	str	r3, [r4, #8]
 8004dd2:	7013      	strb	r3, [r2, #0]
 8004dd4:	65a3      	str	r3, [r4, #88]	; 0x58
 8004dd6:	2205      	movs	r2, #5
 8004dd8:	7831      	ldrb	r1, [r6, #0]
 8004dda:	4854      	ldr	r0, [pc, #336]	; (8004f2c <_svfiprintf_r+0x1ec>)
 8004ddc:	f000 fa32 	bl	8005244 <memchr>
 8004de0:	1c75      	adds	r5, r6, #1
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d11f      	bne.n	8004e26 <_svfiprintf_r+0xe6>
 8004de6:	6822      	ldr	r2, [r4, #0]
 8004de8:	06d3      	lsls	r3, r2, #27
 8004dea:	d504      	bpl.n	8004df6 <_svfiprintf_r+0xb6>
 8004dec:	2353      	movs	r3, #83	; 0x53
 8004dee:	a904      	add	r1, sp, #16
 8004df0:	185b      	adds	r3, r3, r1
 8004df2:	2120      	movs	r1, #32
 8004df4:	7019      	strb	r1, [r3, #0]
 8004df6:	0713      	lsls	r3, r2, #28
 8004df8:	d504      	bpl.n	8004e04 <_svfiprintf_r+0xc4>
 8004dfa:	2353      	movs	r3, #83	; 0x53
 8004dfc:	a904      	add	r1, sp, #16
 8004dfe:	185b      	adds	r3, r3, r1
 8004e00:	212b      	movs	r1, #43	; 0x2b
 8004e02:	7019      	strb	r1, [r3, #0]
 8004e04:	7833      	ldrb	r3, [r6, #0]
 8004e06:	2b2a      	cmp	r3, #42	; 0x2a
 8004e08:	d016      	beq.n	8004e38 <_svfiprintf_r+0xf8>
 8004e0a:	0035      	movs	r5, r6
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	200a      	movs	r0, #10
 8004e10:	68e3      	ldr	r3, [r4, #12]
 8004e12:	782a      	ldrb	r2, [r5, #0]
 8004e14:	1c6e      	adds	r6, r5, #1
 8004e16:	3a30      	subs	r2, #48	; 0x30
 8004e18:	2a09      	cmp	r2, #9
 8004e1a:	d94e      	bls.n	8004eba <_svfiprintf_r+0x17a>
 8004e1c:	2900      	cmp	r1, #0
 8004e1e:	d111      	bne.n	8004e44 <_svfiprintf_r+0x104>
 8004e20:	e017      	b.n	8004e52 <_svfiprintf_r+0x112>
 8004e22:	3501      	adds	r5, #1
 8004e24:	e7b0      	b.n	8004d88 <_svfiprintf_r+0x48>
 8004e26:	4b41      	ldr	r3, [pc, #260]	; (8004f2c <_svfiprintf_r+0x1ec>)
 8004e28:	6822      	ldr	r2, [r4, #0]
 8004e2a:	1ac0      	subs	r0, r0, r3
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	4083      	lsls	r3, r0
 8004e30:	4313      	orrs	r3, r2
 8004e32:	002e      	movs	r6, r5
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	e7ce      	b.n	8004dd6 <_svfiprintf_r+0x96>
 8004e38:	9b07      	ldr	r3, [sp, #28]
 8004e3a:	1d19      	adds	r1, r3, #4
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	9107      	str	r1, [sp, #28]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	db01      	blt.n	8004e48 <_svfiprintf_r+0x108>
 8004e44:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e46:	e004      	b.n	8004e52 <_svfiprintf_r+0x112>
 8004e48:	425b      	negs	r3, r3
 8004e4a:	60e3      	str	r3, [r4, #12]
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	6023      	str	r3, [r4, #0]
 8004e52:	782b      	ldrb	r3, [r5, #0]
 8004e54:	2b2e      	cmp	r3, #46	; 0x2e
 8004e56:	d10a      	bne.n	8004e6e <_svfiprintf_r+0x12e>
 8004e58:	786b      	ldrb	r3, [r5, #1]
 8004e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e5c:	d135      	bne.n	8004eca <_svfiprintf_r+0x18a>
 8004e5e:	9b07      	ldr	r3, [sp, #28]
 8004e60:	3502      	adds	r5, #2
 8004e62:	1d1a      	adds	r2, r3, #4
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	9207      	str	r2, [sp, #28]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	db2b      	blt.n	8004ec4 <_svfiprintf_r+0x184>
 8004e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e6e:	4e30      	ldr	r6, [pc, #192]	; (8004f30 <_svfiprintf_r+0x1f0>)
 8004e70:	2203      	movs	r2, #3
 8004e72:	0030      	movs	r0, r6
 8004e74:	7829      	ldrb	r1, [r5, #0]
 8004e76:	f000 f9e5 	bl	8005244 <memchr>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	d006      	beq.n	8004e8c <_svfiprintf_r+0x14c>
 8004e7e:	2340      	movs	r3, #64	; 0x40
 8004e80:	1b80      	subs	r0, r0, r6
 8004e82:	4083      	lsls	r3, r0
 8004e84:	6822      	ldr	r2, [r4, #0]
 8004e86:	3501      	adds	r5, #1
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	6023      	str	r3, [r4, #0]
 8004e8c:	7829      	ldrb	r1, [r5, #0]
 8004e8e:	2206      	movs	r2, #6
 8004e90:	4828      	ldr	r0, [pc, #160]	; (8004f34 <_svfiprintf_r+0x1f4>)
 8004e92:	1c6e      	adds	r6, r5, #1
 8004e94:	7621      	strb	r1, [r4, #24]
 8004e96:	f000 f9d5 	bl	8005244 <memchr>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d03c      	beq.n	8004f18 <_svfiprintf_r+0x1d8>
 8004e9e:	4b26      	ldr	r3, [pc, #152]	; (8004f38 <_svfiprintf_r+0x1f8>)
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d125      	bne.n	8004ef0 <_svfiprintf_r+0x1b0>
 8004ea4:	2207      	movs	r2, #7
 8004ea6:	9b07      	ldr	r3, [sp, #28]
 8004ea8:	3307      	adds	r3, #7
 8004eaa:	4393      	bics	r3, r2
 8004eac:	3308      	adds	r3, #8
 8004eae:	9307      	str	r3, [sp, #28]
 8004eb0:	6963      	ldr	r3, [r4, #20]
 8004eb2:	9a04      	ldr	r2, [sp, #16]
 8004eb4:	189b      	adds	r3, r3, r2
 8004eb6:	6163      	str	r3, [r4, #20]
 8004eb8:	e765      	b.n	8004d86 <_svfiprintf_r+0x46>
 8004eba:	4343      	muls	r3, r0
 8004ebc:	0035      	movs	r5, r6
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	189b      	adds	r3, r3, r2
 8004ec2:	e7a6      	b.n	8004e12 <_svfiprintf_r+0xd2>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	425b      	negs	r3, r3
 8004ec8:	e7d0      	b.n	8004e6c <_svfiprintf_r+0x12c>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	200a      	movs	r0, #10
 8004ece:	001a      	movs	r2, r3
 8004ed0:	3501      	adds	r5, #1
 8004ed2:	6063      	str	r3, [r4, #4]
 8004ed4:	7829      	ldrb	r1, [r5, #0]
 8004ed6:	1c6e      	adds	r6, r5, #1
 8004ed8:	3930      	subs	r1, #48	; 0x30
 8004eda:	2909      	cmp	r1, #9
 8004edc:	d903      	bls.n	8004ee6 <_svfiprintf_r+0x1a6>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0c5      	beq.n	8004e6e <_svfiprintf_r+0x12e>
 8004ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ee4:	e7c3      	b.n	8004e6e <_svfiprintf_r+0x12e>
 8004ee6:	4342      	muls	r2, r0
 8004ee8:	0035      	movs	r5, r6
 8004eea:	2301      	movs	r3, #1
 8004eec:	1852      	adds	r2, r2, r1
 8004eee:	e7f1      	b.n	8004ed4 <_svfiprintf_r+0x194>
 8004ef0:	ab07      	add	r3, sp, #28
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	003a      	movs	r2, r7
 8004ef6:	0021      	movs	r1, r4
 8004ef8:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <_svfiprintf_r+0x1fc>)
 8004efa:	9803      	ldr	r0, [sp, #12]
 8004efc:	e000      	b.n	8004f00 <_svfiprintf_r+0x1c0>
 8004efe:	bf00      	nop
 8004f00:	9004      	str	r0, [sp, #16]
 8004f02:	9b04      	ldr	r3, [sp, #16]
 8004f04:	3301      	adds	r3, #1
 8004f06:	d1d3      	bne.n	8004eb0 <_svfiprintf_r+0x170>
 8004f08:	89bb      	ldrh	r3, [r7, #12]
 8004f0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004f0c:	065b      	lsls	r3, r3, #25
 8004f0e:	d400      	bmi.n	8004f12 <_svfiprintf_r+0x1d2>
 8004f10:	e72d      	b.n	8004d6e <_svfiprintf_r+0x2e>
 8004f12:	2001      	movs	r0, #1
 8004f14:	4240      	negs	r0, r0
 8004f16:	e72a      	b.n	8004d6e <_svfiprintf_r+0x2e>
 8004f18:	ab07      	add	r3, sp, #28
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	003a      	movs	r2, r7
 8004f1e:	0021      	movs	r1, r4
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <_svfiprintf_r+0x1fc>)
 8004f22:	9803      	ldr	r0, [sp, #12]
 8004f24:	f000 f87c 	bl	8005020 <_printf_i>
 8004f28:	e7ea      	b.n	8004f00 <_svfiprintf_r+0x1c0>
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	08005789 	.word	0x08005789
 8004f30:	0800578f 	.word	0x0800578f
 8004f34:	08005793 	.word	0x08005793
 8004f38:	00000000 	.word	0x00000000
 8004f3c:	08004c7d 	.word	0x08004c7d

08004f40 <_printf_common>:
 8004f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f42:	0015      	movs	r5, r2
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	688a      	ldr	r2, [r1, #8]
 8004f48:	690b      	ldr	r3, [r1, #16]
 8004f4a:	000c      	movs	r4, r1
 8004f4c:	9000      	str	r0, [sp, #0]
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	da00      	bge.n	8004f54 <_printf_common+0x14>
 8004f52:	0013      	movs	r3, r2
 8004f54:	0022      	movs	r2, r4
 8004f56:	602b      	str	r3, [r5, #0]
 8004f58:	3243      	adds	r2, #67	; 0x43
 8004f5a:	7812      	ldrb	r2, [r2, #0]
 8004f5c:	2a00      	cmp	r2, #0
 8004f5e:	d001      	beq.n	8004f64 <_printf_common+0x24>
 8004f60:	3301      	adds	r3, #1
 8004f62:	602b      	str	r3, [r5, #0]
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	069b      	lsls	r3, r3, #26
 8004f68:	d502      	bpl.n	8004f70 <_printf_common+0x30>
 8004f6a:	682b      	ldr	r3, [r5, #0]
 8004f6c:	3302      	adds	r3, #2
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	6822      	ldr	r2, [r4, #0]
 8004f72:	2306      	movs	r3, #6
 8004f74:	0017      	movs	r7, r2
 8004f76:	401f      	ands	r7, r3
 8004f78:	421a      	tst	r2, r3
 8004f7a:	d027      	beq.n	8004fcc <_printf_common+0x8c>
 8004f7c:	0023      	movs	r3, r4
 8004f7e:	3343      	adds	r3, #67	; 0x43
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	1e5a      	subs	r2, r3, #1
 8004f84:	4193      	sbcs	r3, r2
 8004f86:	6822      	ldr	r2, [r4, #0]
 8004f88:	0692      	lsls	r2, r2, #26
 8004f8a:	d430      	bmi.n	8004fee <_printf_common+0xae>
 8004f8c:	0022      	movs	r2, r4
 8004f8e:	9901      	ldr	r1, [sp, #4]
 8004f90:	9800      	ldr	r0, [sp, #0]
 8004f92:	9e08      	ldr	r6, [sp, #32]
 8004f94:	3243      	adds	r2, #67	; 0x43
 8004f96:	47b0      	blx	r6
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d025      	beq.n	8004fe8 <_printf_common+0xa8>
 8004f9c:	2306      	movs	r3, #6
 8004f9e:	6820      	ldr	r0, [r4, #0]
 8004fa0:	682a      	ldr	r2, [r5, #0]
 8004fa2:	68e1      	ldr	r1, [r4, #12]
 8004fa4:	2500      	movs	r5, #0
 8004fa6:	4003      	ands	r3, r0
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d103      	bne.n	8004fb4 <_printf_common+0x74>
 8004fac:	1a8d      	subs	r5, r1, r2
 8004fae:	43eb      	mvns	r3, r5
 8004fb0:	17db      	asrs	r3, r3, #31
 8004fb2:	401d      	ands	r5, r3
 8004fb4:	68a3      	ldr	r3, [r4, #8]
 8004fb6:	6922      	ldr	r2, [r4, #16]
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	dd01      	ble.n	8004fc0 <_printf_common+0x80>
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	18ed      	adds	r5, r5, r3
 8004fc0:	2700      	movs	r7, #0
 8004fc2:	42bd      	cmp	r5, r7
 8004fc4:	d120      	bne.n	8005008 <_printf_common+0xc8>
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	e010      	b.n	8004fec <_printf_common+0xac>
 8004fca:	3701      	adds	r7, #1
 8004fcc:	68e3      	ldr	r3, [r4, #12]
 8004fce:	682a      	ldr	r2, [r5, #0]
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	42bb      	cmp	r3, r7
 8004fd4:	ddd2      	ble.n	8004f7c <_printf_common+0x3c>
 8004fd6:	0022      	movs	r2, r4
 8004fd8:	2301      	movs	r3, #1
 8004fda:	9901      	ldr	r1, [sp, #4]
 8004fdc:	9800      	ldr	r0, [sp, #0]
 8004fde:	9e08      	ldr	r6, [sp, #32]
 8004fe0:	3219      	adds	r2, #25
 8004fe2:	47b0      	blx	r6
 8004fe4:	1c43      	adds	r3, r0, #1
 8004fe6:	d1f0      	bne.n	8004fca <_printf_common+0x8a>
 8004fe8:	2001      	movs	r0, #1
 8004fea:	4240      	negs	r0, r0
 8004fec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fee:	2030      	movs	r0, #48	; 0x30
 8004ff0:	18e1      	adds	r1, r4, r3
 8004ff2:	3143      	adds	r1, #67	; 0x43
 8004ff4:	7008      	strb	r0, [r1, #0]
 8004ff6:	0021      	movs	r1, r4
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	3145      	adds	r1, #69	; 0x45
 8004ffc:	7809      	ldrb	r1, [r1, #0]
 8004ffe:	18a2      	adds	r2, r4, r2
 8005000:	3243      	adds	r2, #67	; 0x43
 8005002:	3302      	adds	r3, #2
 8005004:	7011      	strb	r1, [r2, #0]
 8005006:	e7c1      	b.n	8004f8c <_printf_common+0x4c>
 8005008:	0022      	movs	r2, r4
 800500a:	2301      	movs	r3, #1
 800500c:	9901      	ldr	r1, [sp, #4]
 800500e:	9800      	ldr	r0, [sp, #0]
 8005010:	9e08      	ldr	r6, [sp, #32]
 8005012:	321a      	adds	r2, #26
 8005014:	47b0      	blx	r6
 8005016:	1c43      	adds	r3, r0, #1
 8005018:	d0e6      	beq.n	8004fe8 <_printf_common+0xa8>
 800501a:	3701      	adds	r7, #1
 800501c:	e7d1      	b.n	8004fc2 <_printf_common+0x82>
	...

08005020 <_printf_i>:
 8005020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005022:	b08b      	sub	sp, #44	; 0x2c
 8005024:	9206      	str	r2, [sp, #24]
 8005026:	000a      	movs	r2, r1
 8005028:	3243      	adds	r2, #67	; 0x43
 800502a:	9307      	str	r3, [sp, #28]
 800502c:	9005      	str	r0, [sp, #20]
 800502e:	9204      	str	r2, [sp, #16]
 8005030:	7e0a      	ldrb	r2, [r1, #24]
 8005032:	000c      	movs	r4, r1
 8005034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005036:	2a78      	cmp	r2, #120	; 0x78
 8005038:	d807      	bhi.n	800504a <_printf_i+0x2a>
 800503a:	2a62      	cmp	r2, #98	; 0x62
 800503c:	d809      	bhi.n	8005052 <_printf_i+0x32>
 800503e:	2a00      	cmp	r2, #0
 8005040:	d100      	bne.n	8005044 <_printf_i+0x24>
 8005042:	e0c1      	b.n	80051c8 <_printf_i+0x1a8>
 8005044:	2a58      	cmp	r2, #88	; 0x58
 8005046:	d100      	bne.n	800504a <_printf_i+0x2a>
 8005048:	e08c      	b.n	8005164 <_printf_i+0x144>
 800504a:	0026      	movs	r6, r4
 800504c:	3642      	adds	r6, #66	; 0x42
 800504e:	7032      	strb	r2, [r6, #0]
 8005050:	e022      	b.n	8005098 <_printf_i+0x78>
 8005052:	0010      	movs	r0, r2
 8005054:	3863      	subs	r0, #99	; 0x63
 8005056:	2815      	cmp	r0, #21
 8005058:	d8f7      	bhi.n	800504a <_printf_i+0x2a>
 800505a:	f7fb f867 	bl	800012c <__gnu_thumb1_case_shi>
 800505e:	0016      	.short	0x0016
 8005060:	fff6001f 	.word	0xfff6001f
 8005064:	fff6fff6 	.word	0xfff6fff6
 8005068:	001ffff6 	.word	0x001ffff6
 800506c:	fff6fff6 	.word	0xfff6fff6
 8005070:	fff6fff6 	.word	0xfff6fff6
 8005074:	003600a8 	.word	0x003600a8
 8005078:	fff6009a 	.word	0xfff6009a
 800507c:	00b9fff6 	.word	0x00b9fff6
 8005080:	0036fff6 	.word	0x0036fff6
 8005084:	fff6fff6 	.word	0xfff6fff6
 8005088:	009e      	.short	0x009e
 800508a:	0026      	movs	r6, r4
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	3642      	adds	r6, #66	; 0x42
 8005090:	1d11      	adds	r1, r2, #4
 8005092:	6019      	str	r1, [r3, #0]
 8005094:	6813      	ldr	r3, [r2, #0]
 8005096:	7033      	strb	r3, [r6, #0]
 8005098:	2301      	movs	r3, #1
 800509a:	e0a7      	b.n	80051ec <_printf_i+0x1cc>
 800509c:	6808      	ldr	r0, [r1, #0]
 800509e:	6819      	ldr	r1, [r3, #0]
 80050a0:	1d0a      	adds	r2, r1, #4
 80050a2:	0605      	lsls	r5, r0, #24
 80050a4:	d50b      	bpl.n	80050be <_printf_i+0x9e>
 80050a6:	680d      	ldr	r5, [r1, #0]
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	2d00      	cmp	r5, #0
 80050ac:	da03      	bge.n	80050b6 <_printf_i+0x96>
 80050ae:	232d      	movs	r3, #45	; 0x2d
 80050b0:	9a04      	ldr	r2, [sp, #16]
 80050b2:	426d      	negs	r5, r5
 80050b4:	7013      	strb	r3, [r2, #0]
 80050b6:	4b61      	ldr	r3, [pc, #388]	; (800523c <_printf_i+0x21c>)
 80050b8:	270a      	movs	r7, #10
 80050ba:	9303      	str	r3, [sp, #12]
 80050bc:	e01b      	b.n	80050f6 <_printf_i+0xd6>
 80050be:	680d      	ldr	r5, [r1, #0]
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	0641      	lsls	r1, r0, #25
 80050c4:	d5f1      	bpl.n	80050aa <_printf_i+0x8a>
 80050c6:	b22d      	sxth	r5, r5
 80050c8:	e7ef      	b.n	80050aa <_printf_i+0x8a>
 80050ca:	680d      	ldr	r5, [r1, #0]
 80050cc:	6819      	ldr	r1, [r3, #0]
 80050ce:	1d08      	adds	r0, r1, #4
 80050d0:	6018      	str	r0, [r3, #0]
 80050d2:	062e      	lsls	r6, r5, #24
 80050d4:	d501      	bpl.n	80050da <_printf_i+0xba>
 80050d6:	680d      	ldr	r5, [r1, #0]
 80050d8:	e003      	b.n	80050e2 <_printf_i+0xc2>
 80050da:	066d      	lsls	r5, r5, #25
 80050dc:	d5fb      	bpl.n	80050d6 <_printf_i+0xb6>
 80050de:	680d      	ldr	r5, [r1, #0]
 80050e0:	b2ad      	uxth	r5, r5
 80050e2:	4b56      	ldr	r3, [pc, #344]	; (800523c <_printf_i+0x21c>)
 80050e4:	2708      	movs	r7, #8
 80050e6:	9303      	str	r3, [sp, #12]
 80050e8:	2a6f      	cmp	r2, #111	; 0x6f
 80050ea:	d000      	beq.n	80050ee <_printf_i+0xce>
 80050ec:	3702      	adds	r7, #2
 80050ee:	0023      	movs	r3, r4
 80050f0:	2200      	movs	r2, #0
 80050f2:	3343      	adds	r3, #67	; 0x43
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	6863      	ldr	r3, [r4, #4]
 80050f8:	60a3      	str	r3, [r4, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	db03      	blt.n	8005106 <_printf_i+0xe6>
 80050fe:	2204      	movs	r2, #4
 8005100:	6821      	ldr	r1, [r4, #0]
 8005102:	4391      	bics	r1, r2
 8005104:	6021      	str	r1, [r4, #0]
 8005106:	2d00      	cmp	r5, #0
 8005108:	d102      	bne.n	8005110 <_printf_i+0xf0>
 800510a:	9e04      	ldr	r6, [sp, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00c      	beq.n	800512a <_printf_i+0x10a>
 8005110:	9e04      	ldr	r6, [sp, #16]
 8005112:	0028      	movs	r0, r5
 8005114:	0039      	movs	r1, r7
 8005116:	f7fb f899 	bl	800024c <__aeabi_uidivmod>
 800511a:	9b03      	ldr	r3, [sp, #12]
 800511c:	3e01      	subs	r6, #1
 800511e:	5c5b      	ldrb	r3, [r3, r1]
 8005120:	7033      	strb	r3, [r6, #0]
 8005122:	002b      	movs	r3, r5
 8005124:	0005      	movs	r5, r0
 8005126:	429f      	cmp	r7, r3
 8005128:	d9f3      	bls.n	8005112 <_printf_i+0xf2>
 800512a:	2f08      	cmp	r7, #8
 800512c:	d109      	bne.n	8005142 <_printf_i+0x122>
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	07db      	lsls	r3, r3, #31
 8005132:	d506      	bpl.n	8005142 <_printf_i+0x122>
 8005134:	6863      	ldr	r3, [r4, #4]
 8005136:	6922      	ldr	r2, [r4, #16]
 8005138:	4293      	cmp	r3, r2
 800513a:	dc02      	bgt.n	8005142 <_printf_i+0x122>
 800513c:	2330      	movs	r3, #48	; 0x30
 800513e:	3e01      	subs	r6, #1
 8005140:	7033      	strb	r3, [r6, #0]
 8005142:	9b04      	ldr	r3, [sp, #16]
 8005144:	1b9b      	subs	r3, r3, r6
 8005146:	6123      	str	r3, [r4, #16]
 8005148:	9b07      	ldr	r3, [sp, #28]
 800514a:	0021      	movs	r1, r4
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	9805      	ldr	r0, [sp, #20]
 8005150:	9b06      	ldr	r3, [sp, #24]
 8005152:	aa09      	add	r2, sp, #36	; 0x24
 8005154:	f7ff fef4 	bl	8004f40 <_printf_common>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d14c      	bne.n	80051f6 <_printf_i+0x1d6>
 800515c:	2001      	movs	r0, #1
 800515e:	4240      	negs	r0, r0
 8005160:	b00b      	add	sp, #44	; 0x2c
 8005162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005164:	3145      	adds	r1, #69	; 0x45
 8005166:	700a      	strb	r2, [r1, #0]
 8005168:	4a34      	ldr	r2, [pc, #208]	; (800523c <_printf_i+0x21c>)
 800516a:	9203      	str	r2, [sp, #12]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	6821      	ldr	r1, [r4, #0]
 8005170:	ca20      	ldmia	r2!, {r5}
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	0608      	lsls	r0, r1, #24
 8005176:	d516      	bpl.n	80051a6 <_printf_i+0x186>
 8005178:	07cb      	lsls	r3, r1, #31
 800517a:	d502      	bpl.n	8005182 <_printf_i+0x162>
 800517c:	2320      	movs	r3, #32
 800517e:	4319      	orrs	r1, r3
 8005180:	6021      	str	r1, [r4, #0]
 8005182:	2710      	movs	r7, #16
 8005184:	2d00      	cmp	r5, #0
 8005186:	d1b2      	bne.n	80050ee <_printf_i+0xce>
 8005188:	2320      	movs	r3, #32
 800518a:	6822      	ldr	r2, [r4, #0]
 800518c:	439a      	bics	r2, r3
 800518e:	6022      	str	r2, [r4, #0]
 8005190:	e7ad      	b.n	80050ee <_printf_i+0xce>
 8005192:	2220      	movs	r2, #32
 8005194:	6809      	ldr	r1, [r1, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	6022      	str	r2, [r4, #0]
 800519a:	0022      	movs	r2, r4
 800519c:	2178      	movs	r1, #120	; 0x78
 800519e:	3245      	adds	r2, #69	; 0x45
 80051a0:	7011      	strb	r1, [r2, #0]
 80051a2:	4a27      	ldr	r2, [pc, #156]	; (8005240 <_printf_i+0x220>)
 80051a4:	e7e1      	b.n	800516a <_printf_i+0x14a>
 80051a6:	0648      	lsls	r0, r1, #25
 80051a8:	d5e6      	bpl.n	8005178 <_printf_i+0x158>
 80051aa:	b2ad      	uxth	r5, r5
 80051ac:	e7e4      	b.n	8005178 <_printf_i+0x158>
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	680d      	ldr	r5, [r1, #0]
 80051b2:	1d10      	adds	r0, r2, #4
 80051b4:	6949      	ldr	r1, [r1, #20]
 80051b6:	6018      	str	r0, [r3, #0]
 80051b8:	6813      	ldr	r3, [r2, #0]
 80051ba:	062e      	lsls	r6, r5, #24
 80051bc:	d501      	bpl.n	80051c2 <_printf_i+0x1a2>
 80051be:	6019      	str	r1, [r3, #0]
 80051c0:	e002      	b.n	80051c8 <_printf_i+0x1a8>
 80051c2:	066d      	lsls	r5, r5, #25
 80051c4:	d5fb      	bpl.n	80051be <_printf_i+0x19e>
 80051c6:	8019      	strh	r1, [r3, #0]
 80051c8:	2300      	movs	r3, #0
 80051ca:	9e04      	ldr	r6, [sp, #16]
 80051cc:	6123      	str	r3, [r4, #16]
 80051ce:	e7bb      	b.n	8005148 <_printf_i+0x128>
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	1d11      	adds	r1, r2, #4
 80051d4:	6019      	str	r1, [r3, #0]
 80051d6:	6816      	ldr	r6, [r2, #0]
 80051d8:	2100      	movs	r1, #0
 80051da:	0030      	movs	r0, r6
 80051dc:	6862      	ldr	r2, [r4, #4]
 80051de:	f000 f831 	bl	8005244 <memchr>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d001      	beq.n	80051ea <_printf_i+0x1ca>
 80051e6:	1b80      	subs	r0, r0, r6
 80051e8:	6060      	str	r0, [r4, #4]
 80051ea:	6863      	ldr	r3, [r4, #4]
 80051ec:	6123      	str	r3, [r4, #16]
 80051ee:	2300      	movs	r3, #0
 80051f0:	9a04      	ldr	r2, [sp, #16]
 80051f2:	7013      	strb	r3, [r2, #0]
 80051f4:	e7a8      	b.n	8005148 <_printf_i+0x128>
 80051f6:	6923      	ldr	r3, [r4, #16]
 80051f8:	0032      	movs	r2, r6
 80051fa:	9906      	ldr	r1, [sp, #24]
 80051fc:	9805      	ldr	r0, [sp, #20]
 80051fe:	9d07      	ldr	r5, [sp, #28]
 8005200:	47a8      	blx	r5
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	d0aa      	beq.n	800515c <_printf_i+0x13c>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	079b      	lsls	r3, r3, #30
 800520a:	d415      	bmi.n	8005238 <_printf_i+0x218>
 800520c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520e:	68e0      	ldr	r0, [r4, #12]
 8005210:	4298      	cmp	r0, r3
 8005212:	daa5      	bge.n	8005160 <_printf_i+0x140>
 8005214:	0018      	movs	r0, r3
 8005216:	e7a3      	b.n	8005160 <_printf_i+0x140>
 8005218:	0022      	movs	r2, r4
 800521a:	2301      	movs	r3, #1
 800521c:	9906      	ldr	r1, [sp, #24]
 800521e:	9805      	ldr	r0, [sp, #20]
 8005220:	9e07      	ldr	r6, [sp, #28]
 8005222:	3219      	adds	r2, #25
 8005224:	47b0      	blx	r6
 8005226:	1c43      	adds	r3, r0, #1
 8005228:	d098      	beq.n	800515c <_printf_i+0x13c>
 800522a:	3501      	adds	r5, #1
 800522c:	68e3      	ldr	r3, [r4, #12]
 800522e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	42ab      	cmp	r3, r5
 8005234:	dcf0      	bgt.n	8005218 <_printf_i+0x1f8>
 8005236:	e7e9      	b.n	800520c <_printf_i+0x1ec>
 8005238:	2500      	movs	r5, #0
 800523a:	e7f7      	b.n	800522c <_printf_i+0x20c>
 800523c:	0800579a 	.word	0x0800579a
 8005240:	080057ab 	.word	0x080057ab

08005244 <memchr>:
 8005244:	b2c9      	uxtb	r1, r1
 8005246:	1882      	adds	r2, r0, r2
 8005248:	4290      	cmp	r0, r2
 800524a:	d101      	bne.n	8005250 <memchr+0xc>
 800524c:	2000      	movs	r0, #0
 800524e:	4770      	bx	lr
 8005250:	7803      	ldrb	r3, [r0, #0]
 8005252:	428b      	cmp	r3, r1
 8005254:	d0fb      	beq.n	800524e <memchr+0xa>
 8005256:	3001      	adds	r0, #1
 8005258:	e7f6      	b.n	8005248 <memchr+0x4>

0800525a <memmove>:
 800525a:	b510      	push	{r4, lr}
 800525c:	4288      	cmp	r0, r1
 800525e:	d902      	bls.n	8005266 <memmove+0xc>
 8005260:	188b      	adds	r3, r1, r2
 8005262:	4298      	cmp	r0, r3
 8005264:	d303      	bcc.n	800526e <memmove+0x14>
 8005266:	2300      	movs	r3, #0
 8005268:	e007      	b.n	800527a <memmove+0x20>
 800526a:	5c8b      	ldrb	r3, [r1, r2]
 800526c:	5483      	strb	r3, [r0, r2]
 800526e:	3a01      	subs	r2, #1
 8005270:	d2fb      	bcs.n	800526a <memmove+0x10>
 8005272:	bd10      	pop	{r4, pc}
 8005274:	5ccc      	ldrb	r4, [r1, r3]
 8005276:	54c4      	strb	r4, [r0, r3]
 8005278:	3301      	adds	r3, #1
 800527a:	429a      	cmp	r2, r3
 800527c:	d1fa      	bne.n	8005274 <memmove+0x1a>
 800527e:	e7f8      	b.n	8005272 <memmove+0x18>

08005280 <_free_r>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	0005      	movs	r5, r0
 8005284:	2900      	cmp	r1, #0
 8005286:	d010      	beq.n	80052aa <_free_r+0x2a>
 8005288:	1f0c      	subs	r4, r1, #4
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	da00      	bge.n	8005292 <_free_r+0x12>
 8005290:	18e4      	adds	r4, r4, r3
 8005292:	0028      	movs	r0, r5
 8005294:	f000 f918 	bl	80054c8 <__malloc_lock>
 8005298:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <_free_r+0x90>)
 800529a:	6813      	ldr	r3, [r2, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d105      	bne.n	80052ac <_free_r+0x2c>
 80052a0:	6063      	str	r3, [r4, #4]
 80052a2:	6014      	str	r4, [r2, #0]
 80052a4:	0028      	movs	r0, r5
 80052a6:	f000 f917 	bl	80054d8 <__malloc_unlock>
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	d908      	bls.n	80052c2 <_free_r+0x42>
 80052b0:	6821      	ldr	r1, [r4, #0]
 80052b2:	1860      	adds	r0, r4, r1
 80052b4:	4283      	cmp	r3, r0
 80052b6:	d1f3      	bne.n	80052a0 <_free_r+0x20>
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	1841      	adds	r1, r0, r1
 80052be:	6021      	str	r1, [r4, #0]
 80052c0:	e7ee      	b.n	80052a0 <_free_r+0x20>
 80052c2:	001a      	movs	r2, r3
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <_free_r+0x4e>
 80052ca:	42a3      	cmp	r3, r4
 80052cc:	d9f9      	bls.n	80052c2 <_free_r+0x42>
 80052ce:	6811      	ldr	r1, [r2, #0]
 80052d0:	1850      	adds	r0, r2, r1
 80052d2:	42a0      	cmp	r0, r4
 80052d4:	d10b      	bne.n	80052ee <_free_r+0x6e>
 80052d6:	6820      	ldr	r0, [r4, #0]
 80052d8:	1809      	adds	r1, r1, r0
 80052da:	1850      	adds	r0, r2, r1
 80052dc:	6011      	str	r1, [r2, #0]
 80052de:	4283      	cmp	r3, r0
 80052e0:	d1e0      	bne.n	80052a4 <_free_r+0x24>
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	1841      	adds	r1, r0, r1
 80052e8:	6011      	str	r1, [r2, #0]
 80052ea:	6053      	str	r3, [r2, #4]
 80052ec:	e7da      	b.n	80052a4 <_free_r+0x24>
 80052ee:	42a0      	cmp	r0, r4
 80052f0:	d902      	bls.n	80052f8 <_free_r+0x78>
 80052f2:	230c      	movs	r3, #12
 80052f4:	602b      	str	r3, [r5, #0]
 80052f6:	e7d5      	b.n	80052a4 <_free_r+0x24>
 80052f8:	6821      	ldr	r1, [r4, #0]
 80052fa:	1860      	adds	r0, r4, r1
 80052fc:	4283      	cmp	r3, r0
 80052fe:	d103      	bne.n	8005308 <_free_r+0x88>
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	1841      	adds	r1, r0, r1
 8005306:	6021      	str	r1, [r4, #0]
 8005308:	6063      	str	r3, [r4, #4]
 800530a:	6054      	str	r4, [r2, #4]
 800530c:	e7ca      	b.n	80052a4 <_free_r+0x24>
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	200002e4 	.word	0x200002e4

08005314 <sbrk_aligned>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	4e0f      	ldr	r6, [pc, #60]	; (8005354 <sbrk_aligned+0x40>)
 8005318:	000d      	movs	r5, r1
 800531a:	6831      	ldr	r1, [r6, #0]
 800531c:	0004      	movs	r4, r0
 800531e:	2900      	cmp	r1, #0
 8005320:	d102      	bne.n	8005328 <sbrk_aligned+0x14>
 8005322:	f000 f8bf 	bl	80054a4 <_sbrk_r>
 8005326:	6030      	str	r0, [r6, #0]
 8005328:	0029      	movs	r1, r5
 800532a:	0020      	movs	r0, r4
 800532c:	f000 f8ba 	bl	80054a4 <_sbrk_r>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d00a      	beq.n	800534a <sbrk_aligned+0x36>
 8005334:	2303      	movs	r3, #3
 8005336:	1cc5      	adds	r5, r0, #3
 8005338:	439d      	bics	r5, r3
 800533a:	42a8      	cmp	r0, r5
 800533c:	d007      	beq.n	800534e <sbrk_aligned+0x3a>
 800533e:	1a29      	subs	r1, r5, r0
 8005340:	0020      	movs	r0, r4
 8005342:	f000 f8af 	bl	80054a4 <_sbrk_r>
 8005346:	1c43      	adds	r3, r0, #1
 8005348:	d101      	bne.n	800534e <sbrk_aligned+0x3a>
 800534a:	2501      	movs	r5, #1
 800534c:	426d      	negs	r5, r5
 800534e:	0028      	movs	r0, r5
 8005350:	bd70      	pop	{r4, r5, r6, pc}
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	200002e8 	.word	0x200002e8

08005358 <_malloc_r>:
 8005358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800535a:	2203      	movs	r2, #3
 800535c:	1ccb      	adds	r3, r1, #3
 800535e:	4393      	bics	r3, r2
 8005360:	3308      	adds	r3, #8
 8005362:	0006      	movs	r6, r0
 8005364:	001f      	movs	r7, r3
 8005366:	2b0c      	cmp	r3, #12
 8005368:	d232      	bcs.n	80053d0 <_malloc_r+0x78>
 800536a:	270c      	movs	r7, #12
 800536c:	42b9      	cmp	r1, r7
 800536e:	d831      	bhi.n	80053d4 <_malloc_r+0x7c>
 8005370:	0030      	movs	r0, r6
 8005372:	f000 f8a9 	bl	80054c8 <__malloc_lock>
 8005376:	4d32      	ldr	r5, [pc, #200]	; (8005440 <_malloc_r+0xe8>)
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	001c      	movs	r4, r3
 800537c:	2c00      	cmp	r4, #0
 800537e:	d12e      	bne.n	80053de <_malloc_r+0x86>
 8005380:	0039      	movs	r1, r7
 8005382:	0030      	movs	r0, r6
 8005384:	f7ff ffc6 	bl	8005314 <sbrk_aligned>
 8005388:	0004      	movs	r4, r0
 800538a:	1c43      	adds	r3, r0, #1
 800538c:	d11e      	bne.n	80053cc <_malloc_r+0x74>
 800538e:	682c      	ldr	r4, [r5, #0]
 8005390:	0025      	movs	r5, r4
 8005392:	2d00      	cmp	r5, #0
 8005394:	d14a      	bne.n	800542c <_malloc_r+0xd4>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	0029      	movs	r1, r5
 800539a:	18e3      	adds	r3, r4, r3
 800539c:	0030      	movs	r0, r6
 800539e:	9301      	str	r3, [sp, #4]
 80053a0:	f000 f880 	bl	80054a4 <_sbrk_r>
 80053a4:	9b01      	ldr	r3, [sp, #4]
 80053a6:	4283      	cmp	r3, r0
 80053a8:	d143      	bne.n	8005432 <_malloc_r+0xda>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	3703      	adds	r7, #3
 80053ae:	1aff      	subs	r7, r7, r3
 80053b0:	2303      	movs	r3, #3
 80053b2:	439f      	bics	r7, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	2f0c      	cmp	r7, #12
 80053b8:	d200      	bcs.n	80053bc <_malloc_r+0x64>
 80053ba:	270c      	movs	r7, #12
 80053bc:	0039      	movs	r1, r7
 80053be:	0030      	movs	r0, r6
 80053c0:	f7ff ffa8 	bl	8005314 <sbrk_aligned>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d034      	beq.n	8005432 <_malloc_r+0xda>
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	19df      	adds	r7, r3, r7
 80053cc:	6027      	str	r7, [r4, #0]
 80053ce:	e013      	b.n	80053f8 <_malloc_r+0xa0>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	dacb      	bge.n	800536c <_malloc_r+0x14>
 80053d4:	230c      	movs	r3, #12
 80053d6:	2500      	movs	r5, #0
 80053d8:	6033      	str	r3, [r6, #0]
 80053da:	0028      	movs	r0, r5
 80053dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053de:	6822      	ldr	r2, [r4, #0]
 80053e0:	1bd1      	subs	r1, r2, r7
 80053e2:	d420      	bmi.n	8005426 <_malloc_r+0xce>
 80053e4:	290b      	cmp	r1, #11
 80053e6:	d917      	bls.n	8005418 <_malloc_r+0xc0>
 80053e8:	19e2      	adds	r2, r4, r7
 80053ea:	6027      	str	r7, [r4, #0]
 80053ec:	42a3      	cmp	r3, r4
 80053ee:	d111      	bne.n	8005414 <_malloc_r+0xbc>
 80053f0:	602a      	str	r2, [r5, #0]
 80053f2:	6863      	ldr	r3, [r4, #4]
 80053f4:	6011      	str	r1, [r2, #0]
 80053f6:	6053      	str	r3, [r2, #4]
 80053f8:	0030      	movs	r0, r6
 80053fa:	0025      	movs	r5, r4
 80053fc:	f000 f86c 	bl	80054d8 <__malloc_unlock>
 8005400:	2207      	movs	r2, #7
 8005402:	350b      	adds	r5, #11
 8005404:	1d23      	adds	r3, r4, #4
 8005406:	4395      	bics	r5, r2
 8005408:	1aea      	subs	r2, r5, r3
 800540a:	429d      	cmp	r5, r3
 800540c:	d0e5      	beq.n	80053da <_malloc_r+0x82>
 800540e:	1b5b      	subs	r3, r3, r5
 8005410:	50a3      	str	r3, [r4, r2]
 8005412:	e7e2      	b.n	80053da <_malloc_r+0x82>
 8005414:	605a      	str	r2, [r3, #4]
 8005416:	e7ec      	b.n	80053f2 <_malloc_r+0x9a>
 8005418:	6862      	ldr	r2, [r4, #4]
 800541a:	42a3      	cmp	r3, r4
 800541c:	d101      	bne.n	8005422 <_malloc_r+0xca>
 800541e:	602a      	str	r2, [r5, #0]
 8005420:	e7ea      	b.n	80053f8 <_malloc_r+0xa0>
 8005422:	605a      	str	r2, [r3, #4]
 8005424:	e7e8      	b.n	80053f8 <_malloc_r+0xa0>
 8005426:	0023      	movs	r3, r4
 8005428:	6864      	ldr	r4, [r4, #4]
 800542a:	e7a7      	b.n	800537c <_malloc_r+0x24>
 800542c:	002c      	movs	r4, r5
 800542e:	686d      	ldr	r5, [r5, #4]
 8005430:	e7af      	b.n	8005392 <_malloc_r+0x3a>
 8005432:	230c      	movs	r3, #12
 8005434:	0030      	movs	r0, r6
 8005436:	6033      	str	r3, [r6, #0]
 8005438:	f000 f84e 	bl	80054d8 <__malloc_unlock>
 800543c:	e7cd      	b.n	80053da <_malloc_r+0x82>
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	200002e4 	.word	0x200002e4

08005444 <_realloc_r>:
 8005444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005446:	0007      	movs	r7, r0
 8005448:	000e      	movs	r6, r1
 800544a:	0014      	movs	r4, r2
 800544c:	2900      	cmp	r1, #0
 800544e:	d105      	bne.n	800545c <_realloc_r+0x18>
 8005450:	0011      	movs	r1, r2
 8005452:	f7ff ff81 	bl	8005358 <_malloc_r>
 8005456:	0005      	movs	r5, r0
 8005458:	0028      	movs	r0, r5
 800545a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800545c:	2a00      	cmp	r2, #0
 800545e:	d103      	bne.n	8005468 <_realloc_r+0x24>
 8005460:	f7ff ff0e 	bl	8005280 <_free_r>
 8005464:	0025      	movs	r5, r4
 8005466:	e7f7      	b.n	8005458 <_realloc_r+0x14>
 8005468:	f000 f83e 	bl	80054e8 <_malloc_usable_size_r>
 800546c:	9001      	str	r0, [sp, #4]
 800546e:	4284      	cmp	r4, r0
 8005470:	d803      	bhi.n	800547a <_realloc_r+0x36>
 8005472:	0035      	movs	r5, r6
 8005474:	0843      	lsrs	r3, r0, #1
 8005476:	42a3      	cmp	r3, r4
 8005478:	d3ee      	bcc.n	8005458 <_realloc_r+0x14>
 800547a:	0021      	movs	r1, r4
 800547c:	0038      	movs	r0, r7
 800547e:	f7ff ff6b 	bl	8005358 <_malloc_r>
 8005482:	1e05      	subs	r5, r0, #0
 8005484:	d0e8      	beq.n	8005458 <_realloc_r+0x14>
 8005486:	9b01      	ldr	r3, [sp, #4]
 8005488:	0022      	movs	r2, r4
 800548a:	429c      	cmp	r4, r3
 800548c:	d900      	bls.n	8005490 <_realloc_r+0x4c>
 800548e:	001a      	movs	r2, r3
 8005490:	0031      	movs	r1, r6
 8005492:	0028      	movs	r0, r5
 8005494:	f7ff fbc0 	bl	8004c18 <memcpy>
 8005498:	0031      	movs	r1, r6
 800549a:	0038      	movs	r0, r7
 800549c:	f7ff fef0 	bl	8005280 <_free_r>
 80054a0:	e7da      	b.n	8005458 <_realloc_r+0x14>
	...

080054a4 <_sbrk_r>:
 80054a4:	2300      	movs	r3, #0
 80054a6:	b570      	push	{r4, r5, r6, lr}
 80054a8:	4d06      	ldr	r5, [pc, #24]	; (80054c4 <_sbrk_r+0x20>)
 80054aa:	0004      	movs	r4, r0
 80054ac:	0008      	movs	r0, r1
 80054ae:	602b      	str	r3, [r5, #0]
 80054b0:	f7fd f9a4 	bl	80027fc <_sbrk>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	d103      	bne.n	80054c0 <_sbrk_r+0x1c>
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d000      	beq.n	80054c0 <_sbrk_r+0x1c>
 80054be:	6023      	str	r3, [r4, #0]
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	200002ec 	.word	0x200002ec

080054c8 <__malloc_lock>:
 80054c8:	b510      	push	{r4, lr}
 80054ca:	4802      	ldr	r0, [pc, #8]	; (80054d4 <__malloc_lock+0xc>)
 80054cc:	f000 f814 	bl	80054f8 <__retarget_lock_acquire_recursive>
 80054d0:	bd10      	pop	{r4, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	200002f0 	.word	0x200002f0

080054d8 <__malloc_unlock>:
 80054d8:	b510      	push	{r4, lr}
 80054da:	4802      	ldr	r0, [pc, #8]	; (80054e4 <__malloc_unlock+0xc>)
 80054dc:	f000 f80d 	bl	80054fa <__retarget_lock_release_recursive>
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	200002f0 	.word	0x200002f0

080054e8 <_malloc_usable_size_r>:
 80054e8:	1f0b      	subs	r3, r1, #4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	1f18      	subs	r0, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	da01      	bge.n	80054f6 <_malloc_usable_size_r+0xe>
 80054f2:	580b      	ldr	r3, [r1, r0]
 80054f4:	18c0      	adds	r0, r0, r3
 80054f6:	4770      	bx	lr

080054f8 <__retarget_lock_acquire_recursive>:
 80054f8:	4770      	bx	lr

080054fa <__retarget_lock_release_recursive>:
 80054fa:	4770      	bx	lr

080054fc <_init>:
 80054fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005502:	bc08      	pop	{r3}
 8005504:	469e      	mov	lr, r3
 8005506:	4770      	bx	lr

08005508 <_fini>:
 8005508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550e:	bc08      	pop	{r3}
 8005510:	469e      	mov	lr, r3
 8005512:	4770      	bx	lr
