
Audio_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006890  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000132c  08006950  08006950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c7c  08007c7c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c7c  08007c7c  00017c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c84  08007c84  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c84  08007c84  00017c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c88  08007c88  00017c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08007c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000009c  08007d28  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08007d28  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f10c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002acd  00000000  00000000  0002f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00031ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00032af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015097  00000000  00000000  000337e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125c4  00000000  00000000  00048877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a937  00000000  00000000  0005ae3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5772  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003620  00000000  00000000  000d57c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000009c 	.word	0x2000009c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006938 	.word	0x08006938

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a0 	.word	0x200000a0
 8000104:	08006938 	.word	0x08006938

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8d8 	bl	80004b4 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8d3 	bl	80004b4 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzsi2>:
 8000478:	211c      	movs	r1, #28
 800047a:	2301      	movs	r3, #1
 800047c:	041b      	lsls	r3, r3, #16
 800047e:	4298      	cmp	r0, r3
 8000480:	d301      	bcc.n	8000486 <__clzsi2+0xe>
 8000482:	0c00      	lsrs	r0, r0, #16
 8000484:	3910      	subs	r1, #16
 8000486:	0a1b      	lsrs	r3, r3, #8
 8000488:	4298      	cmp	r0, r3
 800048a:	d301      	bcc.n	8000490 <__clzsi2+0x18>
 800048c:	0a00      	lsrs	r0, r0, #8
 800048e:	3908      	subs	r1, #8
 8000490:	091b      	lsrs	r3, r3, #4
 8000492:	4298      	cmp	r0, r3
 8000494:	d301      	bcc.n	800049a <__clzsi2+0x22>
 8000496:	0900      	lsrs	r0, r0, #4
 8000498:	3904      	subs	r1, #4
 800049a:	a202      	add	r2, pc, #8	; (adr r2, 80004a4 <__clzsi2+0x2c>)
 800049c:	5c10      	ldrb	r0, [r2, r0]
 800049e:	1840      	adds	r0, r0, r1
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	02020304 	.word	0x02020304
 80004a8:	01010101 	.word	0x01010101
	...

080004b4 <__clzdi2>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	2900      	cmp	r1, #0
 80004b8:	d103      	bne.n	80004c2 <__clzdi2+0xe>
 80004ba:	f7ff ffdd 	bl	8000478 <__clzsi2>
 80004be:	3020      	adds	r0, #32
 80004c0:	e002      	b.n	80004c8 <__clzdi2+0x14>
 80004c2:	0008      	movs	r0, r1
 80004c4:	f7ff ffd8 	bl	8000478 <__clzsi2>
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <DS3231_set_time>:
#include "DS3231.h"

extern I2C_HandleTypeDef hi2c1;

void DS3231_set_time(uint8_t sec, uint8_t minute, uint8_t hour)
{
 80004cc:	b5b0      	push	{r4, r5, r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	0004      	movs	r4, r0
 80004d4:	0008      	movs	r0, r1
 80004d6:	0011      	movs	r1, r2
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	1c22      	adds	r2, r4, #0
 80004dc:	701a      	strb	r2, [r3, #0]
 80004de:	1dbb      	adds	r3, r7, #6
 80004e0:	1c02      	adds	r2, r0, #0
 80004e2:	701a      	strb	r2, [r3, #0]
 80004e4:	1d7b      	adds	r3, r7, #5
 80004e6:	1c0a      	adds	r2, r1, #0
 80004e8:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[4];

  buffer[0] = SECONDS_AD;
 80004ea:	250c      	movs	r5, #12
 80004ec:	197b      	adds	r3, r7, r5
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
  buffer[1] = ((sec/10)<<4) + (sec%10);
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	210a      	movs	r1, #10
 80004f8:	0018      	movs	r0, r3
 80004fa:	f7ff fe17 	bl	800012c <__udivsi3>
 80004fe:	0003      	movs	r3, r0
 8000500:	b2db      	uxtb	r3, r3
 8000502:	011b      	lsls	r3, r3, #4
 8000504:	b2dc      	uxtb	r4, r3
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	210a      	movs	r1, #10
 800050c:	0018      	movs	r0, r3
 800050e:	f7ff fe93 	bl	8000238 <__aeabi_uidivmod>
 8000512:	000b      	movs	r3, r1
 8000514:	b2db      	uxtb	r3, r3
 8000516:	18e3      	adds	r3, r4, r3
 8000518:	b2da      	uxtb	r2, r3
 800051a:	197b      	adds	r3, r7, r5
 800051c:	705a      	strb	r2, [r3, #1]
  buffer[2] = ((minute/10)<<4) + (minute%10);
 800051e:	1dbb      	adds	r3, r7, #6
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	210a      	movs	r1, #10
 8000524:	0018      	movs	r0, r3
 8000526:	f7ff fe01 	bl	800012c <__udivsi3>
 800052a:	0003      	movs	r3, r0
 800052c:	b2db      	uxtb	r3, r3
 800052e:	011b      	lsls	r3, r3, #4
 8000530:	b2dc      	uxtb	r4, r3
 8000532:	1dbb      	adds	r3, r7, #6
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	210a      	movs	r1, #10
 8000538:	0018      	movs	r0, r3
 800053a:	f7ff fe7d 	bl	8000238 <__aeabi_uidivmod>
 800053e:	000b      	movs	r3, r1
 8000540:	b2db      	uxtb	r3, r3
 8000542:	18e3      	adds	r3, r4, r3
 8000544:	b2da      	uxtb	r2, r3
 8000546:	197b      	adds	r3, r7, r5
 8000548:	709a      	strb	r2, [r3, #2]
  buffer[3] = (((hour/10)&0x03)<<4) + (hour%10);
 800054a:	1d7b      	adds	r3, r7, #5
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	210a      	movs	r1, #10
 8000550:	0018      	movs	r0, r3
 8000552:	f7ff fdeb 	bl	800012c <__udivsi3>
 8000556:	0003      	movs	r3, r0
 8000558:	b2db      	uxtb	r3, r3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	4013      	ands	r3, r2
 8000562:	b2dc      	uxtb	r4, r3
 8000564:	1d7b      	adds	r3, r7, #5
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	210a      	movs	r1, #10
 800056a:	0018      	movs	r0, r3
 800056c:	f7ff fe64 	bl	8000238 <__aeabi_uidivmod>
 8000570:	000b      	movs	r3, r1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	18e3      	adds	r3, r4, r3
 8000576:	b2da      	uxtb	r2, r3
 8000578:	197b      	adds	r3, r7, r5
 800057a:	70da      	strb	r2, [r3, #3]

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 800057c:	197a      	adds	r2, r7, r5
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <DS3231_set_time+0xc8>)
 8000580:	2364      	movs	r3, #100	; 0x64
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2304      	movs	r3, #4
 8000586:	21d0      	movs	r1, #208	; 0xd0
 8000588:	f003 fe00 	bl	800418c <HAL_I2C_Master_Transmit>
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b004      	add	sp, #16
 8000592:	bdb0      	pop	{r4, r5, r7, pc}
 8000594:	20000180 	.word	0x20000180

08000598 <DS3231_get_time>:

void DS3231_get_time(uint8_t *get_second, uint8_t *get_minute, uint8_t *get_hour)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b089      	sub	sp, #36	; 0x24
 800059c:	af02      	add	r7, sp, #8
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
  uint8_t buffer;

  buffer = SECONDS_AD;
 80005a4:	2417      	movs	r4, #23
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80005ac:	193a      	adds	r2, r7, r4
 80005ae:	4839      	ldr	r0, [pc, #228]	; (8000694 <DS3231_get_time+0xfc>)
 80005b0:	2364      	movs	r3, #100	; 0x64
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2301      	movs	r3, #1
 80005b6:	21d1      	movs	r1, #209	; 0xd1
 80005b8:	f003 fde8 	bl	800418c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_second, 1, 100);
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	4835      	ldr	r0, [pc, #212]	; (8000694 <DS3231_get_time+0xfc>)
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	21d1      	movs	r1, #209	; 0xd1
 80005c8:	f003 fee8 	bl	800439c <HAL_I2C_Master_Receive>

  buffer = MINUTES_AD;
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80005d2:	193a      	adds	r2, r7, r4
 80005d4:	482f      	ldr	r0, [pc, #188]	; (8000694 <DS3231_get_time+0xfc>)
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	21d1      	movs	r1, #209	; 0xd1
 80005de:	f003 fdd5 	bl	800418c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_minute, 1, 100);
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	482b      	ldr	r0, [pc, #172]	; (8000694 <DS3231_get_time+0xfc>)
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	21d1      	movs	r1, #209	; 0xd1
 80005ee:	f003 fed5 	bl	800439c <HAL_I2C_Master_Receive>

  buffer = HOURS_AD;
 80005f2:	0021      	movs	r1, r4
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2202      	movs	r2, #2
 80005f8:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80005fa:	187a      	adds	r2, r7, r1
 80005fc:	4825      	ldr	r0, [pc, #148]	; (8000694 <DS3231_get_time+0xfc>)
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	21d1      	movs	r1, #209	; 0xd1
 8000606:	f003 fdc1 	bl	800418c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_hour, 1, 100);
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	4821      	ldr	r0, [pc, #132]	; (8000694 <DS3231_get_time+0xfc>)
 800060e:	2364      	movs	r3, #100	; 0x64
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2301      	movs	r3, #1
 8000614:	21d1      	movs	r1, #209	; 0xd1
 8000616:	f003 fec1 	bl	800439c <HAL_I2C_Master_Receive>

  *get_hour = (((*get_hour & 0x30) >> 4) * 10) + (*get_hour & 0x0f);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	111b      	asrs	r3, r3, #4
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2203      	movs	r2, #3
 8000624:	4013      	ands	r3, r2
 8000626:	b2db      	uxtb	r3, r3
 8000628:	1c1a      	adds	r2, r3, #0
 800062a:	0092      	lsls	r2, r2, #2
 800062c:	18d3      	adds	r3, r2, r3
 800062e:	18db      	adds	r3, r3, r3
 8000630:	b2da      	uxtb	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	210f      	movs	r1, #15
 8000638:	400b      	ands	r3, r1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	18d3      	adds	r3, r2, r3
 800063e:	b2da      	uxtb	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	701a      	strb	r2, [r3, #0]
  *get_minute = ((*get_minute >> 4) * 10) + (*get_minute & 0x0f);
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	091b      	lsrs	r3, r3, #4
 800064a:	b2db      	uxtb	r3, r3
 800064c:	1c1a      	adds	r2, r3, #0
 800064e:	0092      	lsls	r2, r2, #2
 8000650:	18d3      	adds	r3, r2, r3
 8000652:	18db      	adds	r3, r3, r3
 8000654:	b2da      	uxtb	r2, r3
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	210f      	movs	r1, #15
 800065c:	400b      	ands	r3, r1
 800065e:	b2db      	uxtb	r3, r3
 8000660:	18d3      	adds	r3, r2, r3
 8000662:	b2da      	uxtb	r2, r3
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	701a      	strb	r2, [r3, #0]
  *get_second = ((*get_second >> 4) * 10) + (*get_second & 0x0f);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	b2db      	uxtb	r3, r3
 8000670:	1c1a      	adds	r2, r3, #0
 8000672:	0092      	lsls	r2, r2, #2
 8000674:	18d3      	adds	r3, r2, r3
 8000676:	18db      	adds	r3, r3, r3
 8000678:	b2da      	uxtb	r2, r3
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	210f      	movs	r1, #15
 8000680:	400b      	ands	r3, r1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	18d3      	adds	r3, r2, r3
 8000686:	b2da      	uxtb	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	701a      	strb	r2, [r3, #0]
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b007      	add	sp, #28
 8000692:	bd90      	pop	{r4, r7, pc}
 8000694:	20000180 	.word	0x20000180

08000698 <DS3231_set_date>:

void DS3231_set_date(uint8_t day, uint8_t month, uint8_t year)
{
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af02      	add	r7, sp, #8
 800069e:	0004      	movs	r4, r0
 80006a0:	0008      	movs	r0, r1
 80006a2:	0011      	movs	r1, r2
 80006a4:	1dfb      	adds	r3, r7, #7
 80006a6:	1c22      	adds	r2, r4, #0
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	1dbb      	adds	r3, r7, #6
 80006ac:	1c02      	adds	r2, r0, #0
 80006ae:	701a      	strb	r2, [r3, #0]
 80006b0:	1d7b      	adds	r3, r7, #5
 80006b2:	1c0a      	adds	r2, r1, #0
 80006b4:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[4];

  buffer[0] = DATE_AD;
 80006b6:	250c      	movs	r5, #12
 80006b8:	197b      	adds	r3, r7, r5
 80006ba:	2204      	movs	r2, #4
 80006bc:	701a      	strb	r2, [r3, #0]
  buffer[1] = ((day/10)<<4) + (day%10);
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	210a      	movs	r1, #10
 80006c4:	0018      	movs	r0, r3
 80006c6:	f7ff fd31 	bl	800012c <__udivsi3>
 80006ca:	0003      	movs	r3, r0
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	b2dc      	uxtb	r4, r3
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	210a      	movs	r1, #10
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff fdad 	bl	8000238 <__aeabi_uidivmod>
 80006de:	000b      	movs	r3, r1
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	18e3      	adds	r3, r4, r3
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	197b      	adds	r3, r7, r5
 80006e8:	705a      	strb	r2, [r3, #1]
  buffer[2] = ((month/10)<<4) + (month%10);
 80006ea:	1dbb      	adds	r3, r7, #6
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	210a      	movs	r1, #10
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff fd1b 	bl	800012c <__udivsi3>
 80006f6:	0003      	movs	r3, r0
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	011b      	lsls	r3, r3, #4
 80006fc:	b2dc      	uxtb	r4, r3
 80006fe:	1dbb      	adds	r3, r7, #6
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	210a      	movs	r1, #10
 8000704:	0018      	movs	r0, r3
 8000706:	f7ff fd97 	bl	8000238 <__aeabi_uidivmod>
 800070a:	000b      	movs	r3, r1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	18e3      	adds	r3, r4, r3
 8000710:	b2da      	uxtb	r2, r3
 8000712:	197b      	adds	r3, r7, r5
 8000714:	709a      	strb	r2, [r3, #2]
  buffer[3] = (((year/10)&0x03)<<4) + (year%10);
 8000716:	1d7b      	adds	r3, r7, #5
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	210a      	movs	r1, #10
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff fd05 	bl	800012c <__udivsi3>
 8000722:	0003      	movs	r3, r0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2230      	movs	r2, #48	; 0x30
 800072c:	4013      	ands	r3, r2
 800072e:	b2dc      	uxtb	r4, r3
 8000730:	1d7b      	adds	r3, r7, #5
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	210a      	movs	r1, #10
 8000736:	0018      	movs	r0, r3
 8000738:	f7ff fd7e 	bl	8000238 <__aeabi_uidivmod>
 800073c:	000b      	movs	r3, r1
 800073e:	b2db      	uxtb	r3, r3
 8000740:	18e3      	adds	r3, r4, r3
 8000742:	b2da      	uxtb	r2, r3
 8000744:	197b      	adds	r3, r7, r5
 8000746:	70da      	strb	r2, [r3, #3]

  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x00, &buffer[0], 4, 100);
 8000748:	197a      	adds	r2, r7, r5
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <DS3231_set_date+0xc8>)
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2304      	movs	r3, #4
 8000752:	21d0      	movs	r1, #208	; 0xd0
 8000754:	f003 fd1a 	bl	800418c <HAL_I2C_Master_Transmit>
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b004      	add	sp, #16
 800075e:	bdb0      	pop	{r4, r5, r7, pc}
 8000760:	20000180 	.word	0x20000180

08000764 <DS3231_get_date>:

void DS3231_get_date(uint8_t *get_day, uint8_t *get_month, uint8_t *get_year)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b089      	sub	sp, #36	; 0x24
 8000768:	af02      	add	r7, sp, #8
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
  uint8_t buffer;

  buffer = DATE_AD;
 8000770:	2417      	movs	r4, #23
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2204      	movs	r2, #4
 8000776:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 8000778:	193a      	adds	r2, r7, r4
 800077a:	4839      	ldr	r0, [pc, #228]	; (8000860 <DS3231_get_date+0xfc>)
 800077c:	2364      	movs	r3, #100	; 0x64
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	21d1      	movs	r1, #209	; 0xd1
 8000784:	f003 fd02 	bl	800418c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_day, 1, 100);
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	4835      	ldr	r0, [pc, #212]	; (8000860 <DS3231_get_date+0xfc>)
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2301      	movs	r3, #1
 8000792:	21d1      	movs	r1, #209	; 0xd1
 8000794:	f003 fe02 	bl	800439c <HAL_I2C_Master_Receive>

  buffer = MONTH_AD;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2205      	movs	r2, #5
 800079c:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 800079e:	193a      	adds	r2, r7, r4
 80007a0:	482f      	ldr	r0, [pc, #188]	; (8000860 <DS3231_get_date+0xfc>)
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2301      	movs	r3, #1
 80007a8:	21d1      	movs	r1, #209	; 0xd1
 80007aa:	f003 fcef 	bl	800418c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_month, 1, 100);
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	482b      	ldr	r0, [pc, #172]	; (8000860 <DS3231_get_date+0xfc>)
 80007b2:	2364      	movs	r3, #100	; 0x64
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	21d1      	movs	r1, #209	; 0xd1
 80007ba:	f003 fdef 	bl	800439c <HAL_I2C_Master_Receive>

  buffer = YEAR_AD;
 80007be:	0021      	movs	r1, r4
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2206      	movs	r2, #6
 80007c4:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DS3231_AD | 0x01, &buffer, 1, 100);
 80007c6:	187a      	adds	r2, r7, r1
 80007c8:	4825      	ldr	r0, [pc, #148]	; (8000860 <DS3231_get_date+0xfc>)
 80007ca:	2364      	movs	r3, #100	; 0x64
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2301      	movs	r3, #1
 80007d0:	21d1      	movs	r1, #209	; 0xd1
 80007d2:	f003 fcdb 	bl	800418c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, DS3231_AD | 0x01, get_year, 1, 100);
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4821      	ldr	r0, [pc, #132]	; (8000860 <DS3231_get_date+0xfc>)
 80007da:	2364      	movs	r3, #100	; 0x64
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2301      	movs	r3, #1
 80007e0:	21d1      	movs	r1, #209	; 0xd1
 80007e2:	f003 fddb 	bl	800439c <HAL_I2C_Master_Receive>

  *get_day = ((*get_day >> 4) * 10) + (*get_day & 0x0f);
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	091b      	lsrs	r3, r3, #4
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	1c1a      	adds	r2, r3, #0
 80007f0:	0092      	lsls	r2, r2, #2
 80007f2:	18d3      	adds	r3, r2, r3
 80007f4:	18db      	adds	r3, r3, r3
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	210f      	movs	r1, #15
 80007fe:	400b      	ands	r3, r1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	18d3      	adds	r3, r2, r3
 8000804:	b2da      	uxtb	r2, r3
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	701a      	strb	r2, [r3, #0]
  *get_month = (((*get_month & 0x10) >> 4) * 10) + (*get_month & 0x0f);
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	111b      	asrs	r3, r3, #4
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2201      	movs	r2, #1
 8000814:	4013      	ands	r3, r2
 8000816:	b2db      	uxtb	r3, r3
 8000818:	1c1a      	adds	r2, r3, #0
 800081a:	0092      	lsls	r2, r2, #2
 800081c:	18d3      	adds	r3, r2, r3
 800081e:	18db      	adds	r3, r3, r3
 8000820:	b2da      	uxtb	r2, r3
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	210f      	movs	r1, #15
 8000828:	400b      	ands	r3, r1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	18d3      	adds	r3, r2, r3
 800082e:	b2da      	uxtb	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	701a      	strb	r2, [r3, #0]
  *get_year = ((*get_year >> 4) * 10) + (*get_year & 0x0f);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	091b      	lsrs	r3, r3, #4
 800083a:	b2db      	uxtb	r3, r3
 800083c:	1c1a      	adds	r2, r3, #0
 800083e:	0092      	lsls	r2, r2, #2
 8000840:	18d3      	adds	r3, r2, r3
 8000842:	18db      	adds	r3, r3, r3
 8000844:	b2da      	uxtb	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	210f      	movs	r1, #15
 800084c:	400b      	ands	r3, r1
 800084e:	b2db      	uxtb	r3, r3
 8000850:	18d3      	adds	r3, r2, r3
 8000852:	b2da      	uxtb	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	701a      	strb	r2, [r3, #0]
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b007      	add	sp, #28
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	20000180 	.word	0x20000180

08000864 <readRegister8>:

static TS_POINT coor; // user coordinate
static uint8_t touches;
static uint16_t touchX[2], touchY[2], touchID[2];

static uint8_t readRegister8(uint8_t reg){
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b087      	sub	sp, #28
 8000868:	af02      	add	r7, sp, #8
 800086a:	0002      	movs	r2, r0
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &reg, 1, 10);
 8000870:	1dfa      	adds	r2, r7, #7
 8000872:	480b      	ldr	r0, [pc, #44]	; (80008a0 <readRegister8+0x3c>)
 8000874:	230a      	movs	r3, #10
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2301      	movs	r3, #1
 800087a:	2171      	movs	r1, #113	; 0x71
 800087c:	f003 fc86 	bl	800418c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, FT62XX_ADDR, &data, 1, 10);
 8000880:	240f      	movs	r4, #15
 8000882:	193a      	adds	r2, r7, r4
 8000884:	4806      	ldr	r0, [pc, #24]	; (80008a0 <readRegister8+0x3c>)
 8000886:	230a      	movs	r3, #10
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	2171      	movs	r1, #113	; 0x71
 800088e:	f003 fd85 	bl	800439c <HAL_I2C_Master_Receive>
	return data;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	781b      	ldrb	r3, [r3, #0]
}
 8000896:	0018      	movs	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	b005      	add	sp, #20
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	20000180 	.word	0x20000180

080008a4 <writeRegister8>:

static void writeRegister8(uint8_t reg, uint8_t val){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	0002      	movs	r2, r0
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	1dbb      	adds	r3, r7, #6
 80008b2:	1c0a      	adds	r2, r1, #0
 80008b4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &reg, 1, 10);
 80008b6:	1dfa      	adds	r2, r7, #7
 80008b8:	4809      	ldr	r0, [pc, #36]	; (80008e0 <writeRegister8+0x3c>)
 80008ba:	230a      	movs	r3, #10
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	2171      	movs	r1, #113	; 0x71
 80008c2:	f003 fc63 	bl	800418c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &val, 1, 10);
 80008c6:	1dba      	adds	r2, r7, #6
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <writeRegister8+0x3c>)
 80008ca:	230a      	movs	r3, #10
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	2171      	movs	r1, #113	; 0x71
 80008d2:	f003 fc5b 	bl	800418c <HAL_I2C_Master_Transmit>
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b002      	add	sp, #8
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	20000180 	.word	0x20000180

080008e4 <FT6206_Begin>:

bool FT6206_Begin(uint8_t thresh){
 80008e4:	b5b0      	push	{r4, r5, r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	0002      	movs	r2, r0
 80008ec:	1dfb      	adds	r3, r7, #7
 80008ee:	701a      	strb	r2, [r3, #0]
	writeRegister8(FT62XX_REG_THRESHHOLD, thresh);
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	0019      	movs	r1, r3
 80008f6:	2080      	movs	r0, #128	; 0x80
 80008f8:	f7ff ffd4 	bl	80008a4 <writeRegister8>

	if(readRegister8(FT62XX_REG_VENDID) != FT62XX_VENDID)
 80008fc:	20a8      	movs	r0, #168	; 0xa8
 80008fe:	f7ff ffb1 	bl	8000864 <readRegister8>
 8000902:	0003      	movs	r3, r0
 8000904:	2b11      	cmp	r3, #17
 8000906:	d001      	beq.n	800090c <FT6206_Begin+0x28>
		return false;
 8000908:	2300      	movs	r3, #0
 800090a:	e015      	b.n	8000938 <FT6206_Begin+0x54>
	uint8_t id = readRegister8(FT62XX_REG_CHIPID);
 800090c:	250f      	movs	r5, #15
 800090e:	197c      	adds	r4, r7, r5
 8000910:	20a3      	movs	r0, #163	; 0xa3
 8000912:	f7ff ffa7 	bl	8000864 <readRegister8>
 8000916:	0003      	movs	r3, r0
 8000918:	7023      	strb	r3, [r4, #0]
	if((id != FT6206_CHIPID) && (id != FT6236_CHIPID) && (id != FT6236U_CHIPID))
 800091a:	197b      	adds	r3, r7, r5
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b06      	cmp	r3, #6
 8000920:	d009      	beq.n	8000936 <FT6206_Begin+0x52>
 8000922:	197b      	adds	r3, r7, r5
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b36      	cmp	r3, #54	; 0x36
 8000928:	d005      	beq.n	8000936 <FT6206_Begin+0x52>
 800092a:	197b      	adds	r3, r7, r5
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b64      	cmp	r3, #100	; 0x64
 8000930:	d001      	beq.n	8000936 <FT6206_Begin+0x52>
		return false;
 8000932:	2300      	movs	r3, #0
 8000934:	e000      	b.n	8000938 <FT6206_Begin+0x54>

	return true;
 8000936:	2301      	movs	r3, #1
}
 8000938:	0018      	movs	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	b004      	add	sp, #16
 800093e:	bdb0      	pop	{r4, r5, r7, pc}

08000940 <readData>:

void readData(void){
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af02      	add	r7, sp, #8
	uint8_t i2cdat[16];
	uint8_t data = 0;
 8000946:	1cfb      	adds	r3, r7, #3
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, FT62XX_ADDR, &data, 1, 10);
 800094c:	1cfa      	adds	r2, r7, #3
 800094e:	4858      	ldr	r0, [pc, #352]	; (8000ab0 <readData+0x170>)
 8000950:	230a      	movs	r3, #10
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2301      	movs	r3, #1
 8000956:	2171      	movs	r1, #113	; 0x71
 8000958:	f003 fc18 	bl	800418c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, FT62XX_ADDR, i2cdat, 16, 10);
 800095c:	1d3a      	adds	r2, r7, #4
 800095e:	4854      	ldr	r0, [pc, #336]	; (8000ab0 <readData+0x170>)
 8000960:	230a      	movs	r3, #10
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2310      	movs	r3, #16
 8000966:	2171      	movs	r1, #113	; 0x71
 8000968:	f003 fd18 	bl	800439c <HAL_I2C_Master_Receive>

	touches = i2cdat[0x02];
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	789a      	ldrb	r2, [r3, #2]
 8000970:	4b50      	ldr	r3, [pc, #320]	; (8000ab4 <readData+0x174>)
 8000972:	701a      	strb	r2, [r3, #0]
	if(touches > 2 || touches == 0)
 8000974:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <readData+0x174>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d803      	bhi.n	8000984 <readData+0x44>
 800097c:	4b4d      	ldr	r3, [pc, #308]	; (8000ab4 <readData+0x174>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <readData+0x4a>
		touches = 0;
 8000984:	4b4b      	ldr	r3, [pc, #300]	; (8000ab4 <readData+0x174>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0 ; i < 2 ; i++){
 800098a:	2317      	movs	r3, #23
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	e082      	b.n	8000a9a <readData+0x15a>
	    touchX[i] = i2cdat[0x03 + i * 6] & 0x0F;
 8000994:	2117      	movs	r1, #23
 8000996:	187b      	adds	r3, r7, r1
 8000998:	781a      	ldrb	r2, [r3, #0]
 800099a:	0013      	movs	r3, r2
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	189b      	adds	r3, r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	3303      	adds	r3, #3
 80009a4:	1d3a      	adds	r2, r7, #4
 80009a6:	5cd3      	ldrb	r3, [r2, r3]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	0008      	movs	r0, r1
 80009ac:	183a      	adds	r2, r7, r0
 80009ae:	7812      	ldrb	r2, [r2, #0]
 80009b0:	210f      	movs	r1, #15
 80009b2:	400b      	ands	r3, r1
 80009b4:	b299      	uxth	r1, r3
 80009b6:	4b40      	ldr	r3, [pc, #256]	; (8000ab8 <readData+0x178>)
 80009b8:	0052      	lsls	r2, r2, #1
 80009ba:	52d1      	strh	r1, [r2, r3]
	    touchX[i] <<= 8;
 80009bc:	183b      	adds	r3, r7, r0
 80009be:	781a      	ldrb	r2, [r3, #0]
 80009c0:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <readData+0x178>)
 80009c2:	0052      	lsls	r2, r2, #1
 80009c4:	5ad3      	ldrh	r3, [r2, r3]
 80009c6:	183a      	adds	r2, r7, r0
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	021b      	lsls	r3, r3, #8
 80009cc:	b299      	uxth	r1, r3
 80009ce:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <readData+0x178>)
 80009d0:	0052      	lsls	r2, r2, #1
 80009d2:	52d1      	strh	r1, [r2, r3]
	    touchX[i] |= i2cdat[0x04 + i * 6];
 80009d4:	183b      	adds	r3, r7, r0
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <readData+0x178>)
 80009da:	0052      	lsls	r2, r2, #1
 80009dc:	5ad1      	ldrh	r1, [r2, r3]
 80009de:	183b      	adds	r3, r7, r0
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	0013      	movs	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	189b      	adds	r3, r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	3304      	adds	r3, #4
 80009ec:	1d3a      	adds	r2, r7, #4
 80009ee:	5cd3      	ldrb	r3, [r2, r3]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	183a      	adds	r2, r7, r0
 80009f4:	7812      	ldrb	r2, [r2, #0]
 80009f6:	430b      	orrs	r3, r1
 80009f8:	b299      	uxth	r1, r3
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <readData+0x178>)
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	52d1      	strh	r1, [r2, r3]

	    touchY[i] = i2cdat[0x05 + i * 6] & 0x0F;
 8000a00:	0001      	movs	r1, r0
 8000a02:	183b      	adds	r3, r7, r0
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	0013      	movs	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	189b      	adds	r3, r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	3305      	adds	r3, #5
 8000a10:	1d3a      	adds	r2, r7, #4
 8000a12:	5cd3      	ldrb	r3, [r2, r3]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	0008      	movs	r0, r1
 8000a18:	183a      	adds	r2, r7, r0
 8000a1a:	7812      	ldrb	r2, [r2, #0]
 8000a1c:	210f      	movs	r1, #15
 8000a1e:	400b      	ands	r3, r1
 8000a20:	b299      	uxth	r1, r3
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <readData+0x17c>)
 8000a24:	0052      	lsls	r2, r2, #1
 8000a26:	52d1      	strh	r1, [r2, r3]
	    touchY[i] <<= 8;
 8000a28:	183b      	adds	r3, r7, r0
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <readData+0x17c>)
 8000a2e:	0052      	lsls	r2, r2, #1
 8000a30:	5ad3      	ldrh	r3, [r2, r3]
 8000a32:	183a      	adds	r2, r7, r0
 8000a34:	7812      	ldrb	r2, [r2, #0]
 8000a36:	021b      	lsls	r3, r3, #8
 8000a38:	b299      	uxth	r1, r3
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <readData+0x17c>)
 8000a3c:	0052      	lsls	r2, r2, #1
 8000a3e:	52d1      	strh	r1, [r2, r3]
	    touchY[i] |= i2cdat[0x06 + i * 6];
 8000a40:	183b      	adds	r3, r7, r0
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <readData+0x17c>)
 8000a46:	0052      	lsls	r2, r2, #1
 8000a48:	5ad1      	ldrh	r1, [r2, r3]
 8000a4a:	183b      	adds	r3, r7, r0
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	0013      	movs	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	189b      	adds	r3, r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	001a      	movs	r2, r3
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	5c9b      	ldrb	r3, [r3, r2]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	183a      	adds	r2, r7, r0
 8000a62:	7812      	ldrb	r2, [r2, #0]
 8000a64:	430b      	orrs	r3, r1
 8000a66:	b299      	uxth	r1, r3
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <readData+0x17c>)
 8000a6a:	0052      	lsls	r2, r2, #1
 8000a6c:	52d1      	strh	r1, [r2, r3]

	    touchID[i] = i2cdat[0x05 + i * 6] >> 4;
 8000a6e:	183b      	adds	r3, r7, r0
 8000a70:	781a      	ldrb	r2, [r3, #0]
 8000a72:	0013      	movs	r3, r2
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	189b      	adds	r3, r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	3305      	adds	r3, #5
 8000a7c:	1d3a      	adds	r2, r7, #4
 8000a7e:	5cd3      	ldrb	r3, [r2, r3]
 8000a80:	091b      	lsrs	r3, r3, #4
 8000a82:	b2d9      	uxtb	r1, r3
 8000a84:	183b      	adds	r3, r7, r0
 8000a86:	781a      	ldrb	r2, [r3, #0]
 8000a88:	b289      	uxth	r1, r1
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <readData+0x180>)
 8000a8c:	0052      	lsls	r2, r2, #1
 8000a8e:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0 ; i < 2 ; i++){
 8000a90:	183b      	adds	r3, r7, r0
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	183b      	adds	r3, r7, r0
 8000a96:	3201      	adds	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	2317      	movs	r3, #23
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d800      	bhi.n	8000aa6 <readData+0x166>
 8000aa4:	e776      	b.n	8000994 <readData+0x54>
	}
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b006      	add	sp, #24
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000180 	.word	0x20000180
 8000ab4:	200000be 	.word	0x200000be
 8000ab8:	200000c0 	.word	0x200000c0
 8000abc:	200000c4 	.word	0x200000c4
 8000ac0:	200000c8 	.word	0x200000c8

08000ac4 <INIT_FT6206>:

void INIT_FT6206(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	touches = 0;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <INIT_FT6206+0x10>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200000be 	.word	0x200000be

08000ad8 <touched>:

uint8_t touched(void){
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
	uint8_t n = readRegister8(FT62XX_REG_NUMTOUCHES);
 8000ade:	1dfc      	adds	r4, r7, #7
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f7ff febf 	bl	8000864 <readRegister8>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	7023      	strb	r3, [r4, #0]
	if(n > 2)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d902      	bls.n	8000af8 <touched+0x20>
		n = 0;
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
	return n;
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b003      	add	sp, #12
 8000b02:	bd90      	pop	{r4, r7, pc}

08000b04 <getPoint>:

TS_POINT getPoint(uint8_t n) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	000a      	movs	r2, r1
 8000b0e:	1cfb      	adds	r3, r7, #3
 8000b10:	701a      	strb	r2, [r3, #0]
	readData();
 8000b12:	f7ff ff15 	bl	8000940 <readData>
	if ((touches == 0) || (n >= 1))
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <getPoint+0x70>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <getPoint+0x22>
 8000b1e:	1cfb      	adds	r3, r7, #3
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d005      	beq.n	8000b32 <getPoint+0x2e>
		TS_POINT_set(0, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f000 f82a 	bl	8000b84 <TS_POINT_set>
 8000b30:	e013      	b.n	8000b5a <getPoint+0x56>
	else
		TS_POINT_set(320 - touchY[n], touchX[n], 1);
 8000b32:	1cfb      	adds	r3, r7, #3
 8000b34:	781a      	ldrb	r2, [r3, #0]
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <getPoint+0x74>)
 8000b38:	0052      	lsls	r2, r2, #1
 8000b3a:	5ad3      	ldrh	r3, [r2, r3]
 8000b3c:	22a0      	movs	r2, #160	; 0xa0
 8000b3e:	0052      	lsls	r2, r2, #1
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	b218      	sxth	r0, r3
 8000b46:	1cfb      	adds	r3, r7, #3
 8000b48:	781a      	ldrb	r2, [r3, #0]
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <getPoint+0x78>)
 8000b4c:	0052      	lsls	r2, r2, #1
 8000b4e:	5ad3      	ldrh	r3, [r2, r3]
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	2201      	movs	r2, #1
 8000b54:	0019      	movs	r1, r3
 8000b56:	f000 f815 	bl	8000b84 <TS_POINT_set>
	return coor;
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <getPoint+0x7c>)
 8000b5e:	0010      	movs	r0, r2
 8000b60:	0019      	movs	r1, r3
 8000b62:	2306      	movs	r3, #6
 8000b64:	001a      	movs	r2, r3
 8000b66:	f005 fa75 	bl	8006054 <memcpy>
}
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	200000be 	.word	0x200000be
 8000b78:	200000c4 	.word	0x200000c4
 8000b7c:	200000c0 	.word	0x200000c0
 8000b80:	200000b8 	.word	0x200000b8

08000b84 <TS_POINT_set>:

void TS_POINT_clear(void) {
	coor.x = coor.y = coor.z = 0;
}

void TS_POINT_set(int16_t _x, int16_t _y, int16_t _z) {
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	0004      	movs	r4, r0
 8000b8c:	0008      	movs	r0, r1
 8000b8e:	0011      	movs	r1, r2
 8000b90:	1dbb      	adds	r3, r7, #6
 8000b92:	1c22      	adds	r2, r4, #0
 8000b94:	801a      	strh	r2, [r3, #0]
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	1c02      	adds	r2, r0, #0
 8000b9a:	801a      	strh	r2, [r3, #0]
 8000b9c:	1cbb      	adds	r3, r7, #2
 8000b9e:	1c0a      	adds	r2, r1, #0
 8000ba0:	801a      	strh	r2, [r3, #0]
	coor.x = _x;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <TS_POINT_set+0x40>)
 8000ba4:	1dba      	adds	r2, r7, #6
 8000ba6:	8812      	ldrh	r2, [r2, #0]
 8000ba8:	801a      	strh	r2, [r3, #0]
	coor.y = _y;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <TS_POINT_set+0x40>)
 8000bac:	1d3a      	adds	r2, r7, #4
 8000bae:	8812      	ldrh	r2, [r2, #0]
 8000bb0:	805a      	strh	r2, [r3, #2]
	coor.z = _z;
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <TS_POINT_set+0x40>)
 8000bb4:	1cba      	adds	r2, r7, #2
 8000bb6:	8812      	ldrh	r2, [r2, #0]
 8000bb8:	809a      	strh	r2, [r3, #4]
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b003      	add	sp, #12
 8000bc0:	bd90      	pop	{r4, r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	200000b8 	.word	0x200000b8

08000bc8 <ILI9341_DrawFilledRectangleCoord>:
		ILI9341_DrawPixel(X1, Y1, color);
	}
}

void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 8000bc8:	b5b0      	push	{r4, r5, r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af02      	add	r7, sp, #8
 8000bce:	0005      	movs	r5, r0
 8000bd0:	000c      	movs	r4, r1
 8000bd2:	0010      	movs	r0, r2
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	1dbb      	adds	r3, r7, #6
 8000bd8:	1c2a      	adds	r2, r5, #0
 8000bda:	801a      	strh	r2, [r3, #0]
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	1c22      	adds	r2, r4, #0
 8000be0:	801a      	strh	r2, [r3, #0]
 8000be2:	1cbb      	adds	r3, r7, #2
 8000be4:	1c02      	adds	r2, r0, #0
 8000be6:	801a      	strh	r2, [r3, #0]
 8000be8:	003b      	movs	r3, r7
 8000bea:	1c0a      	adds	r2, r1, #0
 8000bec:	801a      	strh	r2, [r3, #0]
	uint16_t xLen = 0;
 8000bee:	2316      	movs	r3, #22
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	801a      	strh	r2, [r3, #0]
	uint16_t yLen = 0;
 8000bf6:	2314      	movs	r3, #20
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	801a      	strh	r2, [r3, #0]
	uint8_t negX = 0;
 8000bfe:	2113      	movs	r1, #19
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
	uint8_t negY = 0;
 8000c06:	2312      	movs	r3, #18
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
	int32_t negCalc = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
	uint16_t X0True = 0;
 8000c12:	2310      	movs	r3, #16
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	2200      	movs	r2, #0
 8000c18:	801a      	strh	r2, [r3, #0]
	uint16_t Y0True = 0;
 8000c1a:	230e      	movs	r3, #14
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	2200      	movs	r2, #0
 8000c20:	801a      	strh	r2, [r3, #0]

	negCalc = X1 - X0;
 8000c22:	1cbb      	adds	r3, r7, #2
 8000c24:	881a      	ldrh	r2, [r3, #0]
 8000c26:	1dbb      	adds	r3, r7, #6
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negX = 1;
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	da02      	bge.n	8000c3a <ILI9341_DrawFilledRectangleCoord+0x72>
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
	negCalc = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]

	negCalc = Y1 - Y0;
 8000c3e:	003b      	movs	r3, r7
 8000c40:	881a      	ldrh	r2, [r3, #0]
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	60bb      	str	r3, [r7, #8]
	if(negCalc < 0) negY = 1;
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	da03      	bge.n	8000c58 <ILI9341_DrawFilledRectangleCoord+0x90>
 8000c50:	2312      	movs	r3, #18
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]

	if(!negX)
 8000c58:	2313      	movs	r3, #19
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10d      	bne.n	8000c7e <ILI9341_DrawFilledRectangleCoord+0xb6>
	{
		xLen = X1 - X0;
 8000c62:	2316      	movs	r3, #22
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	1cb9      	adds	r1, r7, #2
 8000c68:	1dba      	adds	r2, r7, #6
 8000c6a:	8809      	ldrh	r1, [r1, #0]
 8000c6c:	8812      	ldrh	r2, [r2, #0]
 8000c6e:	1a8a      	subs	r2, r1, r2
 8000c70:	801a      	strh	r2, [r3, #0]
		X0True = X0;
 8000c72:	2310      	movs	r3, #16
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	1dba      	adds	r2, r7, #6
 8000c78:	8812      	ldrh	r2, [r2, #0]
 8000c7a:	801a      	strh	r2, [r3, #0]
 8000c7c:	e00c      	b.n	8000c98 <ILI9341_DrawFilledRectangleCoord+0xd0>
	}
	else
	{
		xLen = X0 - X1;
 8000c7e:	2316      	movs	r3, #22
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	1db9      	adds	r1, r7, #6
 8000c84:	1cba      	adds	r2, r7, #2
 8000c86:	8809      	ldrh	r1, [r1, #0]
 8000c88:	8812      	ldrh	r2, [r2, #0]
 8000c8a:	1a8a      	subs	r2, r1, r2
 8000c8c:	801a      	strh	r2, [r3, #0]
		X0True = X1;
 8000c8e:	2310      	movs	r3, #16
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	1cba      	adds	r2, r7, #2
 8000c94:	8812      	ldrh	r2, [r2, #0]
 8000c96:	801a      	strh	r2, [r3, #0]
	}

	if(!negY)
 8000c98:	2312      	movs	r3, #18
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10d      	bne.n	8000cbe <ILI9341_DrawFilledRectangleCoord+0xf6>
	{
		yLen = Y1 - Y0;
 8000ca2:	2314      	movs	r3, #20
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	0039      	movs	r1, r7
 8000ca8:	1d3a      	adds	r2, r7, #4
 8000caa:	8809      	ldrh	r1, [r1, #0]
 8000cac:	8812      	ldrh	r2, [r2, #0]
 8000cae:	1a8a      	subs	r2, r1, r2
 8000cb0:	801a      	strh	r2, [r3, #0]
		Y0True = Y0;
 8000cb2:	230e      	movs	r3, #14
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	1d3a      	adds	r2, r7, #4
 8000cb8:	8812      	ldrh	r2, [r2, #0]
 8000cba:	801a      	strh	r2, [r3, #0]
 8000cbc:	e00c      	b.n	8000cd8 <ILI9341_DrawFilledRectangleCoord+0x110>
	}
	else
	{
		yLen = Y0 - Y1;
 8000cbe:	2314      	movs	r3, #20
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	1d39      	adds	r1, r7, #4
 8000cc4:	003a      	movs	r2, r7
 8000cc6:	8809      	ldrh	r1, [r1, #0]
 8000cc8:	8812      	ldrh	r2, [r2, #0]
 8000cca:	1a8a      	subs	r2, r1, r2
 8000ccc:	801a      	strh	r2, [r3, #0]
		Y0True = Y1;
 8000cce:	230e      	movs	r3, #14
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	003a      	movs	r2, r7
 8000cd4:	8812      	ldrh	r2, [r2, #0]
 8000cd6:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 8000cd8:	2314      	movs	r3, #20
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	881c      	ldrh	r4, [r3, #0]
 8000cde:	2316      	movs	r3, #22
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	881a      	ldrh	r2, [r3, #0]
 8000ce4:	230e      	movs	r3, #14
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	8819      	ldrh	r1, [r3, #0]
 8000cea:	2310      	movs	r3, #16
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	8818      	ldrh	r0, [r3, #0]
 8000cf0:	2328      	movs	r3, #40	; 0x28
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	0023      	movs	r3, r4
 8000cfa:	f000 fc73 	bl	80015e4 <ILI9341_DrawRectangle>
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b006      	add	sp, #24
 8000d04:	bdb0      	pop	{r4, r5, r7, pc}

08000d06 <ILI9341_DrawChar>:

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d08:	b08d      	sub	sp, #52	; 0x34
 8000d0a:	af02      	add	r7, sp, #8
 8000d0c:	0004      	movs	r4, r0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	0010      	movs	r0, r2
 8000d12:	0019      	movs	r1, r3
 8000d14:	250f      	movs	r5, #15
 8000d16:	197b      	adds	r3, r7, r5
 8000d18:	1c22      	adds	r2, r4, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	260c      	movs	r6, #12
 8000d1e:	19bb      	adds	r3, r7, r6
 8000d20:	1c02      	adds	r2, r0, #0
 8000d22:	801a      	strh	r2, [r3, #0]
 8000d24:	1dbb      	adds	r3, r7, #6
 8000d26:	1c0a      	adds	r2, r1, #0
 8000d28:	801a      	strh	r2, [r3, #0]
	if ((ch < 31) || (ch > 127)) return;
 8000d2a:	0029      	movs	r1, r5
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b1e      	cmp	r3, #30
 8000d32:	d800      	bhi.n	8000d36 <ILI9341_DrawChar+0x30>
 8000d34:	e085      	b.n	8000e42 <ILI9341_DrawChar+0x13c>
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	da00      	bge.n	8000d42 <ILI9341_DrawChar+0x3c>
 8000d40:	e07f      	b.n	8000e42 <ILI9341_DrawChar+0x13c>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8000d42:	201f      	movs	r0, #31
 8000d44:	183b      	adds	r3, r7, r0
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	701a      	strb	r2, [r3, #0]
	fWidth = font[1];
 8000d4c:	241e      	movs	r4, #30
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	7852      	ldrb	r2, [r2, #1]
 8000d54:	701a      	strb	r2, [r3, #0]
	fHeight = font[2];
 8000d56:	251d      	movs	r5, #29
 8000d58:	197b      	adds	r3, r7, r5
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	7892      	ldrb	r2, [r2, #2]
 8000d5e:	701a      	strb	r2, [r3, #0]
	fBPL = font[3];
 8000d60:	231c      	movs	r3, #28
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	78d2      	ldrb	r2, [r2, #3]
 8000d68:	701a      	strb	r2, [r3, #0]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	3b20      	subs	r3, #32
 8000d70:	183a      	adds	r2, r7, r0
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	4353      	muls	r3, r2
 8000d76:	3304      	adds	r3, #4
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	18d3      	adds	r3, r2, r3
 8000d7c:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	197b      	adds	r3, r7, r5
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b29c      	uxth	r4, r3
 8000d8a:	1dbb      	adds	r3, r7, #6
 8000d8c:	8819      	ldrh	r1, [r3, #0]
 8000d8e:	19bb      	adds	r3, r7, r6
 8000d90:	8818      	ldrh	r0, [r3, #0]
 8000d92:	233c      	movs	r3, #60	; 0x3c
 8000d94:	2508      	movs	r5, #8
 8000d96:	195b      	adds	r3, r3, r5
 8000d98:	19db      	adds	r3, r3, r7
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	0023      	movs	r3, r4
 8000da0:	f000 fc20 	bl	80015e4 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
 8000da8:	e044      	b.n	8000e34 <ILI9341_DrawChar+0x12e>
	{
		for (int i=0; i < fWidth; i++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
 8000dae:	e038      	b.n	8000e22 <ILI9341_DrawChar+0x11c>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000db0:	231c      	movs	r3, #28
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	6a3a      	ldr	r2, [r7, #32]
 8000db8:	435a      	muls	r2, r3
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	10db      	asrs	r3, r3, #3
 8000dbe:	211f      	movs	r1, #31
 8000dc0:	400b      	ands	r3, r1
 8000dc2:	18d3      	adds	r3, r2, r3
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	18d2      	adds	r2, r2, r3
 8000dca:	2117      	movs	r1, #23
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	7812      	ldrb	r2, [r2, #0]
 8000dd0:	701a      	strb	r2, [r3, #0]
			uint8_t b = 1 << (j & 0x07);
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2201      	movs	r2, #1
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	2016      	movs	r0, #22
 8000dde:	183b      	adds	r3, r7, r0
 8000de0:	701a      	strb	r2, [r3, #0]
			if (( z & b ) != 0x00)
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	183a      	adds	r2, r7, r0
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	4013      	ands	r3, r2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d014      	beq.n	8000e1c <ILI9341_DrawChar+0x116>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000df2:	6a3b      	ldr	r3, [r7, #32]
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	230c      	movs	r3, #12
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	18d3      	adds	r3, r2, r3
 8000dfe:	b298      	uxth	r0, r3
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	1dbb      	adds	r3, r7, #6
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	18d3      	adds	r3, r2, r3
 8000e0a:	b299      	uxth	r1, r3
 8000e0c:	2338      	movs	r3, #56	; 0x38
 8000e0e:	2208      	movs	r2, #8
 8000e10:	189b      	adds	r3, r3, r2
 8000e12:	19db      	adds	r3, r3, r7
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	001a      	movs	r2, r3
 8000e18:	f000 fb6b 	bl	80014f2 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000e1c:	6a3b      	ldr	r3, [r7, #32]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	623b      	str	r3, [r7, #32]
 8000e22:	231e      	movs	r3, #30
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	6a3a      	ldr	r2, [r7, #32]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	dbc0      	blt.n	8000db0 <ILI9341_DrawChar+0xaa>
	for (int j=0; j < fHeight; j++)
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	3301      	adds	r3, #1
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
 8000e34:	231d      	movs	r3, #29
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dbb4      	blt.n	8000daa <ILI9341_DrawChar+0xa4>
 8000e40:	e000      	b.n	8000e44 <ILI9341_DrawChar+0x13e>
	if ((ch < 31) || (ch > 127)) return;
 8000e42:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b00b      	add	sp, #44	; 0x2c
 8000e48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e4a <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000e4a:	b590      	push	{r4, r7, lr}
 8000e4c:	b08b      	sub	sp, #44	; 0x2c
 8000e4e:	af02      	add	r7, sp, #8
 8000e50:	60f8      	str	r0, [r7, #12]
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	0019      	movs	r1, r3
 8000e56:	1dbb      	adds	r3, r7, #6
 8000e58:	801a      	strh	r2, [r3, #0]
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	1c0a      	adds	r2, r1, #0
 8000e5e:	801a      	strh	r2, [r3, #0]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000e60:	231f      	movs	r3, #31
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	701a      	strb	r2, [r3, #0]
	uint8_t fWidth = font[1];	/* Width of font */
 8000e6a:	231e      	movs	r3, #30
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	7852      	ldrb	r2, [r2, #1]
 8000e72:	701a      	strb	r2, [r3, #0]

	while (*str)
 8000e74:	e040      	b.n	8000ef8 <ILI9341_DrawText+0xae>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	7818      	ldrb	r0, [r3, #0]
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	881c      	ldrh	r4, [r3, #0]
 8000e7e:	1dbb      	adds	r3, r7, #6
 8000e80:	881a      	ldrh	r2, [r3, #0]
 8000e82:	68b9      	ldr	r1, [r7, #8]
 8000e84:	2334      	movs	r3, #52	; 0x34
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	2330      	movs	r3, #48	; 0x30
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	0023      	movs	r3, r4
 8000e96:	f7ff ff36 	bl	8000d06 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	3b20      	subs	r3, #32
 8000ea0:	221f      	movs	r2, #31
 8000ea2:	18ba      	adds	r2, r7, r2
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	4353      	muls	r3, r2
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	18d3      	adds	r3, r2, r3
 8000eae:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8000eb0:	2117      	movs	r1, #23
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	7812      	ldrb	r2, [r2, #0]
 8000eb8:	701a      	strb	r2, [r3, #0]

		if(charWidth + 2 < fWidth)
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	1c9a      	adds	r2, r3, #2
 8000ec0:	231e      	movs	r3, #30
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	da0a      	bge.n	8000ee0 <ILI9341_DrawText+0x96>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	1dbb      	adds	r3, r7, #6
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	18d3      	adds	r3, r2, r3
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	3202      	adds	r2, #2
 8000edc:	801a      	strh	r2, [r3, #0]
 8000ede:	e008      	b.n	8000ef2 <ILI9341_DrawText+0xa8>
		}
		else
		{
			X += fWidth;
 8000ee0:	231e      	movs	r3, #30
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b299      	uxth	r1, r3
 8000ee8:	1dbb      	adds	r3, r7, #6
 8000eea:	1dba      	adds	r2, r7, #6
 8000eec:	8812      	ldrh	r2, [r2, #0]
 8000eee:	188a      	adds	r2, r1, r2
 8000ef0:	801a      	strh	r2, [r3, #0]
		}

		str++;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1ba      	bne.n	8000e76 <ILI9341_DrawText+0x2c>
	}
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b009      	add	sp, #36	; 0x24
 8000f08:	bd90      	pop	{r4, r7, pc}
	...

08000f0c <ILI9341_SPI_Tx>:
#include "ILI9341_STM32_Driver.h"

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	0002      	movs	r2, r0
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	701a      	strb	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <ILI9341_SPI_Tx+0x30>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2202      	movs	r2, #2
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d1f8      	bne.n	8000f1a <ILI9341_SPI_Tx+0xe>
//	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 8000f28:	1df9      	adds	r1, r7, #7
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <ILI9341_SPI_Tx+0x30>)
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f004 fe34 	bl	8005b9c <HAL_SPI_Transmit>
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200001d4 	.word	0x200001d4

08000f40 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	000a      	movs	r2, r1
 8000f4a:	1cbb      	adds	r3, r7, #2
 8000f4c:	801a      	strh	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <ILI9341_SPI_TxBuffer+0x34>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	2202      	movs	r2, #2
 8000f58:	4013      	ands	r3, r2
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d1f8      	bne.n	8000f50 <ILI9341_SPI_TxBuffer+0x10>
//	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
 8000f5e:	1cbb      	adds	r3, r7, #2
 8000f60:	881a      	ldrh	r2, [r3, #0]
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <ILI9341_SPI_TxBuffer+0x34>)
 8000f66:	230a      	movs	r3, #10
 8000f68:	f004 fe18 	bl	8005b9c <HAL_SPI_Transmit>
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b002      	add	sp, #8
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200001d4 	.word	0x200001d4

08000f78 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	0002      	movs	r2, r0
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <ILI9341_WriteCommand+0x38>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	2102      	movs	r1, #2
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f003 f84a 	bl	8004024 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <ILI9341_WriteCommand+0x38>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	2101      	movs	r1, #1
 8000f96:	0018      	movs	r0, r3
 8000f98:	f003 f844 	bl	8004024 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff ffb3 	bl	8000f0c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	50000400 	.word	0x50000400

08000fb4 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	0002      	movs	r2, r0
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <ILI9341_WriteData+0x38>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f003 f82c 	bl	8004024 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <ILI9341_WriteData+0x38>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f003 f826 	bl	8004024 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000fd8:	1dfb      	adds	r3, r7, #7
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff ff95 	bl	8000f0c <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	50000400 	.word	0x50000400

08000ff0 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	000a      	movs	r2, r1
 8000ffa:	1cbb      	adds	r3, r7, #2
 8000ffc:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <ILI9341_WriteBuffer+0x3c>)
 8001000:	2201      	movs	r2, #1
 8001002:	2102      	movs	r1, #2
 8001004:	0018      	movs	r0, r3
 8001006:	f003 f80d 	bl	8004024 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <ILI9341_WriteBuffer+0x3c>)
 800100c:	2200      	movs	r2, #0
 800100e:	2101      	movs	r1, #1
 8001010:	0018      	movs	r0, r3
 8001012:	f003 f807 	bl	8004024 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8001016:	1cbb      	adds	r3, r7, #2
 8001018:	881a      	ldrh	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	0011      	movs	r1, r2
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff ff8e 	bl	8000f40 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}
 800102c:	50000400 	.word	0x50000400

08001030 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	0005      	movs	r5, r0
 8001038:	000c      	movs	r4, r1
 800103a:	0010      	movs	r0, r2
 800103c:	0019      	movs	r1, r3
 800103e:	1dbb      	adds	r3, r7, #6
 8001040:	1c2a      	adds	r2, r5, #0
 8001042:	801a      	strh	r2, [r3, #0]
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	1c22      	adds	r2, r4, #0
 8001048:	801a      	strh	r2, [r3, #0]
 800104a:	1cbb      	adds	r3, r7, #2
 800104c:	1c02      	adds	r2, r0, #0
 800104e:	801a      	strh	r2, [r3, #0]
 8001050:	003b      	movs	r3, r7
 8001052:	1c0a      	adds	r2, r1, #0
 8001054:	801a      	strh	r2, [r3, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8001056:	1dbb      	adds	r3, r7, #6
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	0a1b      	lsrs	r3, r3, #8
 800105c:	b29b      	uxth	r3, r3
 800105e:	b2da      	uxtb	r2, r3
 8001060:	210c      	movs	r1, #12
 8001062:	187b      	adds	r3, r7, r1
 8001064:	701a      	strb	r2, [r3, #0]
	buffer[1] = x1;
 8001066:	1dbb      	adds	r3, r7, #6
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	187b      	adds	r3, r7, r1
 800106e:	705a      	strb	r2, [r3, #1]
	buffer[2] = x2 >> 8;
 8001070:	1cbb      	adds	r3, r7, #2
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	b29b      	uxth	r3, r3
 8001078:	b2da      	uxtb	r2, r3
 800107a:	187b      	adds	r3, r7, r1
 800107c:	709a      	strb	r2, [r3, #2]
	buffer[3] = x2;
 800107e:	1cbb      	adds	r3, r7, #2
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	000c      	movs	r4, r1
 8001086:	187b      	adds	r3, r7, r1
 8001088:	70da      	strb	r2, [r3, #3]

	ILI9341_WriteCommand(0x2A);
 800108a:	202a      	movs	r0, #42	; 0x2a
 800108c:	f7ff ff74 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001090:	193b      	adds	r3, r7, r4
 8001092:	2104      	movs	r1, #4
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff ffab 	bl	8000ff0 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	0021      	movs	r1, r4
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	701a      	strb	r2, [r3, #0]
	buffer[1] = y1;
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	705a      	strb	r2, [r3, #1]
	buffer[2] = y2 >> 8;
 80010b4:	003b      	movs	r3, r7
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	709a      	strb	r2, [r3, #2]
	buffer[3] = y2;
 80010c2:	003b      	movs	r3, r7
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	000c      	movs	r4, r1
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	70da      	strb	r2, [r3, #3]

	ILI9341_WriteCommand(0x2B);
 80010ce:	202b      	movs	r0, #43	; 0x2b
 80010d0:	f7ff ff52 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80010d4:	193b      	adds	r3, r7, r4
 80010d6:	2104      	movs	r1, #4
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff ff89 	bl	8000ff0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80010de:	202c      	movs	r0, #44	; 0x2c
 80010e0:	f7ff ff4a 	bl	8000f78 <ILI9341_WriteCommand>
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b004      	add	sp, #16
 80010ea:	bdb0      	pop	{r4, r5, r7, pc}

080010ec <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <ILI9341_Reset+0x3c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	2110      	movs	r1, #16
 80010f6:	0018      	movs	r0, r3
 80010f8:	f002 ff94 	bl	8004024 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f001 fecf 	bl	8002ea0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <ILI9341_Reset+0x3c>)
 8001104:	2200      	movs	r2, #0
 8001106:	2101      	movs	r1, #1
 8001108:	0018      	movs	r0, r3
 800110a:	f002 ff8b 	bl	8004024 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800110e:	200a      	movs	r0, #10
 8001110:	f001 fec6 	bl	8002ea0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <ILI9341_Reset+0x3c>)
 8001116:	2201      	movs	r2, #1
 8001118:	2110      	movs	r1, #16
 800111a:	0018      	movs	r0, r3
 800111c:	f002 ff82 	bl	8004024 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	50000400 	.word	0x50000400

0800112c <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <ILI9341_Enable+0x18>)
 8001132:	2201      	movs	r2, #1
 8001134:	2110      	movs	r1, #16
 8001136:	0018      	movs	r0, r3
 8001138:	f002 ff74 	bl	8004024 <HAL_GPIO_WritePin>
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	50000400 	.word	0x50000400

08001148 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 800114c:	f7ff ffee 	bl	800112c <ILI9341_Enable>
	ILI9341_Reset();
 8001150:	f7ff ffcc 	bl	80010ec <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8001154:	2001      	movs	r0, #1
 8001156:	f7ff ff0f 	bl	8000f78 <ILI9341_WriteCommand>
	HAL_Delay(10);
 800115a:	200a      	movs	r0, #10
 800115c:	f001 fea0 	bl	8002ea0 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8001160:	20cb      	movs	r0, #203	; 0xcb
 8001162:	f7ff ff09 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8001166:	2039      	movs	r0, #57	; 0x39
 8001168:	f7ff ff24 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 800116c:	202c      	movs	r0, #44	; 0x2c
 800116e:	f7ff ff21 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff ff1e 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8001178:	2034      	movs	r0, #52	; 0x34
 800117a:	f7ff ff1b 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 800117e:	2002      	movs	r0, #2
 8001180:	f7ff ff18 	bl	8000fb4 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8001184:	20cf      	movs	r0, #207	; 0xcf
 8001186:	f7ff fef7 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff ff12 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001190:	20c1      	movs	r0, #193	; 0xc1
 8001192:	f7ff ff0f 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8001196:	2030      	movs	r0, #48	; 0x30
 8001198:	f7ff ff0c 	bl	8000fb4 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 800119c:	20e8      	movs	r0, #232	; 0xe8
 800119e:	f7ff feeb 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80011a2:	2085      	movs	r0, #133	; 0x85
 80011a4:	f7ff ff06 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff ff03 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80011ae:	2078      	movs	r0, #120	; 0x78
 80011b0:	f7ff ff00 	bl	8000fb4 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80011b4:	20ea      	movs	r0, #234	; 0xea
 80011b6:	f7ff fedf 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff fefa 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fef7 	bl	8000fb4 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 80011c6:	20ed      	movs	r0, #237	; 0xed
 80011c8:	f7ff fed6 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 80011cc:	2064      	movs	r0, #100	; 0x64
 80011ce:	f7ff fef1 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80011d2:	2003      	movs	r0, #3
 80011d4:	f7ff feee 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 80011d8:	2012      	movs	r0, #18
 80011da:	f7ff feeb 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 80011de:	2081      	movs	r0, #129	; 0x81
 80011e0:	f7ff fee8 	bl	8000fb4 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 80011e4:	20f7      	movs	r0, #247	; 0xf7
 80011e6:	f7ff fec7 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 80011ea:	2020      	movs	r0, #32
 80011ec:	f7ff fee2 	bl	8000fb4 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 80011f0:	20c0      	movs	r0, #192	; 0xc0
 80011f2:	f7ff fec1 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 80011f6:	2023      	movs	r0, #35	; 0x23
 80011f8:	f7ff fedc 	bl	8000fb4 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 80011fc:	20c1      	movs	r0, #193	; 0xc1
 80011fe:	f7ff febb 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8001202:	2010      	movs	r0, #16
 8001204:	f7ff fed6 	bl	8000fb4 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001208:	20c5      	movs	r0, #197	; 0xc5
 800120a:	f7ff feb5 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 800120e:	203e      	movs	r0, #62	; 0x3e
 8001210:	f7ff fed0 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001214:	2028      	movs	r0, #40	; 0x28
 8001216:	f7ff fecd 	bl	8000fb4 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 800121a:	20c7      	movs	r0, #199	; 0xc7
 800121c:	f7ff feac 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001220:	2086      	movs	r0, #134	; 0x86
 8001222:	f7ff fec7 	bl	8000fb4 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8001226:	2036      	movs	r0, #54	; 0x36
 8001228:	f7ff fea6 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 800122c:	2048      	movs	r0, #72	; 0x48
 800122e:	f7ff fec1 	bl	8000fb4 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8001232:	203a      	movs	r0, #58	; 0x3a
 8001234:	f7ff fea0 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001238:	2055      	movs	r0, #85	; 0x55
 800123a:	f7ff febb 	bl	8000fb4 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 800123e:	20b1      	movs	r0, #177	; 0xb1
 8001240:	f7ff fe9a 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff feb5 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 800124a:	2018      	movs	r0, #24
 800124c:	f7ff feb2 	bl	8000fb4 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8001250:	20b6      	movs	r0, #182	; 0xb6
 8001252:	f7ff fe91 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8001256:	2008      	movs	r0, #8
 8001258:	f7ff feac 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 800125c:	2082      	movs	r0, #130	; 0x82
 800125e:	f7ff fea9 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8001262:	2027      	movs	r0, #39	; 0x27
 8001264:	f7ff fea6 	bl	8000fb4 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8001268:	20f2      	movs	r0, #242	; 0xf2
 800126a:	f7ff fe85 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff fea0 	bl	8000fb4 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8001274:	2026      	movs	r0, #38	; 0x26
 8001276:	f7ff fe7f 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 800127a:	2001      	movs	r0, #1
 800127c:	f7ff fe9a 	bl	8000fb4 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001280:	20e0      	movs	r0, #224	; 0xe0
 8001282:	f7ff fe79 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8001286:	200f      	movs	r0, #15
 8001288:	f7ff fe94 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800128c:	2031      	movs	r0, #49	; 0x31
 800128e:	f7ff fe91 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8001292:	202b      	movs	r0, #43	; 0x2b
 8001294:	f7ff fe8e 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001298:	200c      	movs	r0, #12
 800129a:	f7ff fe8b 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800129e:	200e      	movs	r0, #14
 80012a0:	f7ff fe88 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80012a4:	2008      	movs	r0, #8
 80012a6:	f7ff fe85 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80012aa:	204e      	movs	r0, #78	; 0x4e
 80012ac:	f7ff fe82 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80012b0:	20f1      	movs	r0, #241	; 0xf1
 80012b2:	f7ff fe7f 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 80012b6:	2037      	movs	r0, #55	; 0x37
 80012b8:	f7ff fe7c 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80012bc:	2007      	movs	r0, #7
 80012be:	f7ff fe79 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 80012c2:	2010      	movs	r0, #16
 80012c4:	f7ff fe76 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f7ff fe73 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80012ce:	200e      	movs	r0, #14
 80012d0:	f7ff fe70 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 80012d4:	2009      	movs	r0, #9
 80012d6:	f7ff fe6d 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff fe6a 	bl	8000fb4 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 80012e0:	20e1      	movs	r0, #225	; 0xe1
 80012e2:	f7ff fe49 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fe64 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80012ec:	200e      	movs	r0, #14
 80012ee:	f7ff fe61 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 80012f2:	2014      	movs	r0, #20
 80012f4:	f7ff fe5e 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f7ff fe5b 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 80012fe:	2011      	movs	r0, #17
 8001300:	f7ff fe58 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001304:	2007      	movs	r0, #7
 8001306:	f7ff fe55 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800130a:	2031      	movs	r0, #49	; 0x31
 800130c:	f7ff fe52 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001310:	20c1      	movs	r0, #193	; 0xc1
 8001312:	f7ff fe4f 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8001316:	2048      	movs	r0, #72	; 0x48
 8001318:	f7ff fe4c 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 800131c:	2008      	movs	r0, #8
 800131e:	f7ff fe49 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001322:	200f      	movs	r0, #15
 8001324:	f7ff fe46 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001328:	200c      	movs	r0, #12
 800132a:	f7ff fe43 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800132e:	2031      	movs	r0, #49	; 0x31
 8001330:	f7ff fe40 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001334:	2036      	movs	r0, #54	; 0x36
 8001336:	f7ff fe3d 	bl	8000fb4 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800133a:	200f      	movs	r0, #15
 800133c:	f7ff fe3a 	bl	8000fb4 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8001340:	2011      	movs	r0, #17
 8001342:	f7ff fe19 	bl	8000f78 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8001346:	2064      	movs	r0, #100	; 0x64
 8001348:	f001 fdaa 	bl	8002ea0 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 800134c:	2029      	movs	r0, #41	; 0x29
 800134e:	f7ff fe13 	bl	8000f78 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_WriteCommand(0x36);
 8001352:	2036      	movs	r0, #54	; 0x36
 8001354:	f7ff fe10 	bl	8000f78 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001358:	2001      	movs	r0, #1
 800135a:	f001 fda1 	bl	8002ea0 <HAL_Delay>

	ILI9341_WriteData(0x20|0x08);
 800135e:	2028      	movs	r0, #40	; 0x28
 8001360:	f7ff fe28 	bl	8000fb4 <ILI9341_WriteData>
}
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	46c6      	mov	lr, r8
 8001370:	b500      	push	{lr}
 8001372:	b092      	sub	sp, #72	; 0x48
 8001374:	af00      	add	r7, sp, #0
 8001376:	0002      	movs	r2, r0
 8001378:	61b9      	str	r1, [r7, #24]
 800137a:	231e      	movs	r3, #30
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	801a      	strh	r2, [r3, #0]
 8001380:	466b      	mov	r3, sp
 8001382:	4698      	mov	r8, r3
	uint32_t BufferSize = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c

	if((size*2) < BURST_MAX_SIZE)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	005a      	lsls	r2, r3, #1
 800138c:	23fa      	movs	r3, #250	; 0xfa
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	429a      	cmp	r2, r3
 8001392:	d202      	bcs.n	800139a <ILI9341_DrawColorBurst+0x2e>
	{
		BufferSize = size;
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001398:	e002      	b.n	80013a0 <ILI9341_DrawColorBurst+0x34>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 800139a:	23fa      	movs	r3, #250	; 0xfa
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80013a0:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <ILI9341_DrawColorBurst+0x14c>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	2102      	movs	r1, #2
 80013a6:	0018      	movs	r0, r3
 80013a8:	f002 fe3c 	bl	8004024 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80013ac:	4b42      	ldr	r3, [pc, #264]	; (80014b8 <ILI9341_DrawColorBurst+0x14c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	2101      	movs	r1, #1
 80013b2:	0018      	movs	r0, r3
 80013b4:	f002 fe36 	bl	8004024 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 80013b8:	231e      	movs	r3, #30
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	0a1b      	lsrs	r3, r3, #8
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	2323      	movs	r3, #35	; 0x23
 80013c4:	2118      	movs	r1, #24
 80013c6:	185b      	adds	r3, r3, r1
 80013c8:	19db      	adds	r3, r3, r7
 80013ca:	701a      	strb	r2, [r3, #0]
	uint8_t BurstBuffer[BufferSize];
 80013cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ce:	001a      	movs	r2, r3
 80013d0:	3a01      	subs	r2, #1
 80013d2:	637a      	str	r2, [r7, #52]	; 0x34
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	2200      	movs	r2, #0
 80013d8:	60fa      	str	r2, [r7, #12]
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	68f9      	ldr	r1, [r7, #12]
 80013de:	0002      	movs	r2, r0
 80013e0:	0f52      	lsrs	r2, r2, #29
 80013e2:	000e      	movs	r6, r1
 80013e4:	00f6      	lsls	r6, r6, #3
 80013e6:	617e      	str	r6, [r7, #20]
 80013e8:	697e      	ldr	r6, [r7, #20]
 80013ea:	4316      	orrs	r6, r2
 80013ec:	617e      	str	r6, [r7, #20]
 80013ee:	0002      	movs	r2, r0
 80013f0:	00d2      	lsls	r2, r2, #3
 80013f2:	613a      	str	r2, [r7, #16]
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	6838      	ldr	r0, [r7, #0]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	0002      	movs	r2, r0
 8001400:	0f52      	lsrs	r2, r2, #29
 8001402:	000e      	movs	r6, r1
 8001404:	00f5      	lsls	r5, r6, #3
 8001406:	4315      	orrs	r5, r2
 8001408:	0002      	movs	r2, r0
 800140a:	00d4      	lsls	r4, r2, #3
 800140c:	3307      	adds	r3, #7
 800140e:	08db      	lsrs	r3, r3, #3
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	466a      	mov	r2, sp
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	469d      	mov	sp, r3
 8001418:	466b      	mov	r3, sp
 800141a:	3300      	adds	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	; 0x30

	for(uint32_t j = 0; j < BufferSize; j+=2)
 800141e:	2300      	movs	r3, #0
 8001420:	643b      	str	r3, [r7, #64]	; 0x40
 8001422:	e013      	b.n	800144c <ILI9341_DrawColorBurst+0xe0>
	{
		BurstBuffer[j] = chifted;
 8001424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001428:	18d3      	adds	r3, r2, r3
 800142a:	2223      	movs	r2, #35	; 0x23
 800142c:	2118      	movs	r1, #24
 800142e:	1852      	adds	r2, r2, r1
 8001430:	19d2      	adds	r2, r2, r7
 8001432:	7812      	ldrb	r2, [r2, #0]
 8001434:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001438:	3301      	adds	r3, #1
 800143a:	221e      	movs	r2, #30
 800143c:	18ba      	adds	r2, r7, r2
 800143e:	8812      	ldrh	r2, [r2, #0]
 8001440:	b2d1      	uxtb	r1, r2
 8001442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001444:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001448:	3302      	adds	r3, #2
 800144a:	643b      	str	r3, [r7, #64]	; 0x40
 800144c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800144e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001450:	429a      	cmp	r2, r3
 8001452:	d3e7      	bcc.n	8001424 <ILI9341_DrawColorBurst+0xb8>
	}

	uint32_t SendingSize = size * 2;
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t SendingInBlock = SendingSize / BufferSize;
 800145a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800145c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800145e:	f7fe fe65 	bl	800012c <__udivsi3>
 8001462:	0003      	movs	r3, r0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001468:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800146a:	0018      	movs	r0, r3
 800146c:	f7fe fee4 	bl	8000238 <__aeabi_uidivmod>
 8001470:	000b      	movs	r3, r1
 8001472:	627b      	str	r3, [r7, #36]	; 0x24

	if(SendingInBlock != 0)
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	2b00      	cmp	r3, #0
 8001478:	d010      	beq.n	800149c <ILI9341_DrawColorBurst+0x130>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800147a:	2300      	movs	r3, #0
 800147c:	647b      	str	r3, [r7, #68]	; 0x44
 800147e:	e009      	b.n	8001494 <ILI9341_DrawColorBurst+0x128>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001482:	b29a      	uxth	r2, r3
 8001484:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <ILI9341_DrawColorBurst+0x150>)
 8001488:	230a      	movs	r3, #10
 800148a:	f004 fb87 	bl	8005b9c <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800148e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001490:	3301      	adds	r3, #1
 8001492:	647b      	str	r3, [r7, #68]	; 0x44
 8001494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001498:	429a      	cmp	r2, r3
 800149a:	d3f1      	bcc.n	8001480 <ILI9341_DrawColorBurst+0x114>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	b29a      	uxth	r2, r3
 80014a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <ILI9341_DrawColorBurst+0x150>)
 80014a4:	230a      	movs	r3, #10
 80014a6:	f004 fb79 	bl	8005b9c <HAL_SPI_Transmit>
 80014aa:	46c5      	mov	sp, r8
//	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b012      	add	sp, #72	; 0x48
 80014b2:	bc80      	pop	{r7}
 80014b4:	46b8      	mov	r8, r7
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b8:	50000400 	.word	0x50000400
 80014bc:	200001d4 	.word	0x200001d4

080014c0 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	0002      	movs	r2, r0
 80014c8:	1dbb      	adds	r3, r7, #6
 80014ca:	801a      	strh	r2, [r3, #0]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80014cc:	23a0      	movs	r3, #160	; 0xa0
 80014ce:	005a      	lsls	r2, r3, #1
 80014d0:	23f0      	movs	r3, #240	; 0xf0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff fdab 	bl	8001030 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 80014da:	2396      	movs	r3, #150	; 0x96
 80014dc:	025a      	lsls	r2, r3, #9
 80014de:	1dbb      	adds	r3, r7, #6
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	0011      	movs	r1, r2
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff ff41 	bl	800136c <ILI9341_DrawColorBurst>
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80014f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f4:	b087      	sub	sp, #28
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	0004      	movs	r4, r0
 80014fa:	0008      	movs	r0, r1
 80014fc:	0011      	movs	r1, r2
 80014fe:	1dbb      	adds	r3, r7, #6
 8001500:	1c22      	adds	r2, r4, #0
 8001502:	801a      	strh	r2, [r3, #0]
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	1c02      	adds	r2, r0, #0
 8001508:	801a      	strh	r2, [r3, #0]
 800150a:	1cbb      	adds	r3, r7, #2
 800150c:	1c0a      	adds	r2, r1, #0
 800150e:	801a      	strh	r2, [r3, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001510:	1dbb      	adds	r3, r7, #6
 8001512:	881a      	ldrh	r2, [r3, #0]
 8001514:	23a0      	movs	r3, #160	; 0xa0
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	429a      	cmp	r2, r3
 800151a:	d25f      	bcs.n	80015dc <ILI9341_DrawPixel+0xea>
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	2bef      	cmp	r3, #239	; 0xef
 8001522:	d85b      	bhi.n	80015dc <ILI9341_DrawPixel+0xea>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8001524:	1dbb      	adds	r3, r7, #6
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	b29b      	uxth	r3, r3
 800152c:	b2da      	uxtb	r2, r3
 800152e:	2414      	movs	r4, #20
 8001530:	193b      	adds	r3, r7, r4
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	1dbb      	adds	r3, r7, #6
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	193b      	adds	r3, r7, r4
 800153c:	705a      	strb	r2, [r3, #1]
 800153e:	1dbb      	adds	r3, r7, #6
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	121b      	asrs	r3, r3, #8
 8001546:	b2da      	uxtb	r2, r3
 8001548:	193b      	adds	r3, r7, r4
 800154a:	709a      	strb	r2, [r3, #2]
 800154c:	1dbb      	adds	r3, r7, #6
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3301      	adds	r3, #1
 8001554:	b2da      	uxtb	r2, r3
 8001556:	193b      	adds	r3, r7, r4
 8001558:	70da      	strb	r2, [r3, #3]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	b29b      	uxth	r3, r3
 8001562:	b2da      	uxtb	r2, r3
 8001564:	2510      	movs	r5, #16
 8001566:	197b      	adds	r3, r7, r5
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	197b      	adds	r3, r7, r5
 8001572:	705a      	strb	r2, [r3, #1]
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	121b      	asrs	r3, r3, #8
 800157c:	b2da      	uxtb	r2, r3
 800157e:	197b      	adds	r3, r7, r5
 8001580:	709a      	strb	r2, [r3, #2]
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	3301      	adds	r3, #1
 800158a:	b2da      	uxtb	r2, r3
 800158c:	197b      	adds	r3, r7, r5
 800158e:	70da      	strb	r2, [r3, #3]
	uint8_t bufferC[2] = {color>>8, color};
 8001590:	1cbb      	adds	r3, r7, #2
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	b29b      	uxth	r3, r3
 8001598:	b2da      	uxtb	r2, r3
 800159a:	260c      	movs	r6, #12
 800159c:	19bb      	adds	r3, r7, r6
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	1cbb      	adds	r3, r7, #2
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	19bb      	adds	r3, r7, r6
 80015a8:	705a      	strb	r2, [r3, #1]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 80015aa:	202a      	movs	r0, #42	; 0x2a
 80015ac:	f7ff fce4 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 80015b0:	193b      	adds	r3, r7, r4
 80015b2:	2104      	movs	r1, #4
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff fd1b 	bl	8000ff0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 80015ba:	202b      	movs	r0, #43	; 0x2b
 80015bc:	f7ff fcdc 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 80015c0:	197b      	adds	r3, r7, r5
 80015c2:	2104      	movs	r1, #4
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff fd13 	bl	8000ff0 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 80015ca:	202c      	movs	r0, #44	; 0x2c
 80015cc:	f7ff fcd4 	bl	8000f78 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 80015d0:	19bb      	adds	r3, r7, r6
 80015d2:	2102      	movs	r1, #2
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff fd0b 	bl	8000ff0 <ILI9341_WriteBuffer>
 80015da:	e000      	b.n	80015de <ILI9341_DrawPixel+0xec>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80015dc:	46c0      	nop			; (mov r8, r8)
}
 80015de:	46bd      	mov	sp, r7
 80015e0:	b007      	add	sp, #28
 80015e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015e4 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	0005      	movs	r5, r0
 80015ec:	000c      	movs	r4, r1
 80015ee:	0010      	movs	r0, r2
 80015f0:	0019      	movs	r1, r3
 80015f2:	1dbb      	adds	r3, r7, #6
 80015f4:	1c2a      	adds	r2, r5, #0
 80015f6:	801a      	strh	r2, [r3, #0]
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	1c22      	adds	r2, r4, #0
 80015fc:	801a      	strh	r2, [r3, #0]
 80015fe:	1cbb      	adds	r3, r7, #2
 8001600:	1c02      	adds	r2, r0, #0
 8001602:	801a      	strh	r2, [r3, #0]
 8001604:	003b      	movs	r3, r7
 8001606:	1c0a      	adds	r2, r1, #0
 8001608:	801a      	strh	r2, [r3, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800160a:	1dbb      	adds	r3, r7, #6
 800160c:	881a      	ldrh	r2, [r3, #0]
 800160e:	23a0      	movs	r3, #160	; 0xa0
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	429a      	cmp	r2, r3
 8001614:	d246      	bcs.n	80016a4 <ILI9341_DrawRectangle+0xc0>
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	2bef      	cmp	r3, #239	; 0xef
 800161c:	d842      	bhi.n	80016a4 <ILI9341_DrawRectangle+0xc0>

	if((x+width-1)>=LCD_WIDTH)
 800161e:	1dbb      	adds	r3, r7, #6
 8001620:	881a      	ldrh	r2, [r3, #0]
 8001622:	1cbb      	adds	r3, r7, #2
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	18d2      	adds	r2, r2, r3
 8001628:	23a0      	movs	r3, #160	; 0xa0
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	429a      	cmp	r2, r3
 800162e:	dd06      	ble.n	800163e <ILI9341_DrawRectangle+0x5a>
	{
		width=LCD_WIDTH-x;
 8001630:	1cbb      	adds	r3, r7, #2
 8001632:	1dba      	adds	r2, r7, #6
 8001634:	8812      	ldrh	r2, [r2, #0]
 8001636:	21a0      	movs	r1, #160	; 0xa0
 8001638:	0049      	lsls	r1, r1, #1
 800163a:	1a8a      	subs	r2, r1, r2
 800163c:	801a      	strh	r2, [r3, #0]
	}

	if((y+height-1)>=LCD_HEIGHT)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	881a      	ldrh	r2, [r3, #0]
 8001642:	003b      	movs	r3, r7
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	18d3      	adds	r3, r2, r3
 8001648:	2bf0      	cmp	r3, #240	; 0xf0
 800164a:	dd05      	ble.n	8001658 <ILI9341_DrawRectangle+0x74>
	{
		height=LCD_HEIGHT-y;
 800164c:	003b      	movs	r3, r7
 800164e:	1d3a      	adds	r2, r7, #4
 8001650:	8812      	ldrh	r2, [r2, #0]
 8001652:	21f0      	movs	r1, #240	; 0xf0
 8001654:	1a8a      	subs	r2, r1, r2
 8001656:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001658:	1dba      	adds	r2, r7, #6
 800165a:	1cbb      	adds	r3, r7, #2
 800165c:	8812      	ldrh	r2, [r2, #0]
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	18d3      	adds	r3, r2, r3
 8001662:	b29b      	uxth	r3, r3
 8001664:	3b01      	subs	r3, #1
 8001666:	b29c      	uxth	r4, r3
 8001668:	1d3a      	adds	r2, r7, #4
 800166a:	003b      	movs	r3, r7
 800166c:	8812      	ldrh	r2, [r2, #0]
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	18d3      	adds	r3, r2, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	3b01      	subs	r3, #1
 8001676:	b29a      	uxth	r2, r3
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	8819      	ldrh	r1, [r3, #0]
 800167c:	1dbb      	adds	r3, r7, #6
 800167e:	8818      	ldrh	r0, [r3, #0]
 8001680:	0013      	movs	r3, r2
 8001682:	0022      	movs	r2, r4
 8001684:	f7ff fcd4 	bl	8001030 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001688:	003b      	movs	r3, r7
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	1cba      	adds	r2, r7, #2
 800168e:	8812      	ldrh	r2, [r2, #0]
 8001690:	4353      	muls	r3, r2
 8001692:	001a      	movs	r2, r3
 8001694:	2318      	movs	r3, #24
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	0011      	movs	r1, r2
 800169c:	0018      	movs	r0, r3
 800169e:	f7ff fe65 	bl	800136c <ILI9341_DrawColorBurst>
 80016a2:	e000      	b.n	80016a6 <ILI9341_DrawRectangle+0xc2>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80016a4:	46c0      	nop			; (mov r8, r8)
}
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b002      	add	sp, #8
 80016aa:	bdb0      	pop	{r4, r5, r7, pc}

080016ac <BUZ>:
static void MX_SPI1_Init(void);
static void MX_I2C1_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

__STATIC_INLINE void BUZ(uint8_t state){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	0002      	movs	r2, r0
 80016b4:	1dfb      	adds	r3, r7, #7
 80016b6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, state);
 80016b8:	1dfb      	adds	r3, r7, #7
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <BUZ+0x24>)
 80016be:	001a      	movs	r2, r3
 80016c0:	2108      	movs	r1, #8
 80016c2:	f002 fcaf 	bl	8004024 <HAL_GPIO_WritePin>
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b002      	add	sp, #8
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	50000400 	.word	0x50000400

080016d4 <time_set>:

__STATIC_INLINE void time_set(void){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	DS3231_set_date(time.day, time.month, time.year);
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <time_set+0x30>)
 80016da:	7898      	ldrb	r0, [r3, #2]
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <time_set+0x30>)
 80016de:	7859      	ldrb	r1, [r3, #1]
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <time_set+0x30>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	001a      	movs	r2, r3
 80016e6:	f7fe ffd7 	bl	8000698 <DS3231_set_date>
	DS3231_set_time(time.sec, time.min, time.hour);
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <time_set+0x30>)
 80016ec:	7958      	ldrb	r0, [r3, #5]
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <time_set+0x30>)
 80016f0:	7919      	ldrb	r1, [r3, #4]
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <time_set+0x30>)
 80016f4:	78db      	ldrb	r3, [r3, #3]
 80016f6:	001a      	movs	r2, r3
 80016f8:	f7fe fee8 	bl	80004cc <DS3231_set_time>
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	20000014 	.word	0x20000014

08001708 <time_get>:

__STATIC_INLINE void time_get(void){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	DS3231_get_date(&time.day, &time.month, &time.year);
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <time_get+0x24>)
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <time_get+0x28>)
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <time_get+0x2c>)
 8001712:	0018      	movs	r0, r3
 8001714:	f7ff f826 	bl	8000764 <DS3231_get_date>
	DS3231_get_time(&time.sec, &time.min, &time.hour);
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <time_get+0x30>)
 800171a:	4908      	ldr	r1, [pc, #32]	; (800173c <time_get+0x34>)
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <time_get+0x38>)
 800171e:	0018      	movs	r0, r3
 8001720:	f7fe ff3a 	bl	8000598 <DS3231_get_time>
}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	20000014 	.word	0x20000014
 8001730:	20000015 	.word	0x20000015
 8001734:	20000016 	.word	0x20000016
 8001738:	20000017 	.word	0x20000017
 800173c:	20000018 	.word	0x20000018
 8001740:	20000019 	.word	0x20000019

08001744 <coor_check>:

__STATIC_INLINE uint8_t coor_check(uint16_t start_x, uint16_t end_x, uint16_t start_y, uint16_t end_y){
 8001744:	b5b0      	push	{r4, r5, r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	0005      	movs	r5, r0
 800174c:	000c      	movs	r4, r1
 800174e:	0010      	movs	r0, r2
 8001750:	0019      	movs	r1, r3
 8001752:	1dbb      	adds	r3, r7, #6
 8001754:	1c2a      	adds	r2, r5, #0
 8001756:	801a      	strh	r2, [r3, #0]
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	1c22      	adds	r2, r4, #0
 800175c:	801a      	strh	r2, [r3, #0]
 800175e:	1cbb      	adds	r3, r7, #2
 8001760:	1c02      	adds	r2, r0, #0
 8001762:	801a      	strh	r2, [r3, #0]
 8001764:	003b      	movs	r3, r7
 8001766:	1c0a      	adds	r2, r1, #0
 8001768:	801a      	strh	r2, [r3, #0]
	return ((curXY.x >= start_x * 15 && curXY.x <= end_x * 15) && (curXY.y >= start_y * 19 && curXY.y <= end_y * 19));
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <coor_check+0x98>)
 800176c:	2200      	movs	r2, #0
 800176e:	5e9b      	ldrsh	r3, [r3, r2]
 8001770:	0019      	movs	r1, r3
 8001772:	1dbb      	adds	r3, r7, #6
 8001774:	881a      	ldrh	r2, [r3, #0]
 8001776:	0013      	movs	r3, r2
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	1a9b      	subs	r3, r3, r2
 800177c:	4299      	cmp	r1, r3
 800177e:	db26      	blt.n	80017ce <coor_check+0x8a>
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <coor_check+0x98>)
 8001782:	2200      	movs	r2, #0
 8001784:	5e9b      	ldrsh	r3, [r3, r2]
 8001786:	0019      	movs	r1, r3
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	881a      	ldrh	r2, [r3, #0]
 800178c:	0013      	movs	r3, r2
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	4299      	cmp	r1, r3
 8001794:	dc1b      	bgt.n	80017ce <coor_check+0x8a>
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <coor_check+0x98>)
 8001798:	2202      	movs	r2, #2
 800179a:	5e9b      	ldrsh	r3, [r3, r2]
 800179c:	0019      	movs	r1, r3
 800179e:	1cbb      	adds	r3, r7, #2
 80017a0:	881a      	ldrh	r2, [r3, #0]
 80017a2:	0013      	movs	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	189b      	adds	r3, r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	189b      	adds	r3, r3, r2
 80017ac:	4299      	cmp	r1, r3
 80017ae:	db0e      	blt.n	80017ce <coor_check+0x8a>
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <coor_check+0x98>)
 80017b2:	2202      	movs	r2, #2
 80017b4:	5e9b      	ldrsh	r3, [r3, r2]
 80017b6:	0019      	movs	r1, r3
 80017b8:	003b      	movs	r3, r7
 80017ba:	881a      	ldrh	r2, [r3, #0]
 80017bc:	0013      	movs	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	189b      	adds	r3, r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	189b      	adds	r3, r3, r2
 80017c6:	4299      	cmp	r1, r3
 80017c8:	dc01      	bgt.n	80017ce <coor_check+0x8a>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <coor_check+0x8c>
 80017ce:	2300      	movs	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b002      	add	sp, #8
 80017d8:	bdb0      	pop	{r4, r5, r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	20000240 	.word	0x20000240

080017e0 <LCD_clear>:

__STATIC_INLINE void LCD_clear(COLOR_ color){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	0002      	movs	r2, r0
 80017e8:	1dfb      	adds	r3, r7, #7
 80017ea:	701a      	strb	r2, [r3, #0]
	ILI9341_FillScreen(lcd_color[color]);
 80017ec:	1dfb      	adds	r3, r7, #7
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <LCD_clear+0x24>)
 80017f2:	0052      	lsls	r2, r2, #1
 80017f4:	5ad3      	ldrh	r3, [r2, r3]
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7ff fe62 	bl	80014c0 <ILI9341_FillScreen>
}
 80017fc:	46c0      	nop			; (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	b002      	add	sp, #8
 8001802:	bd80      	pop	{r7, pc}
 8001804:	08007c24 	.word	0x08007c24

08001808 <reset_value>:

__STATIC_INLINE void reset_value(void){
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	modeF = firF = buzM = 0;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <reset_value+0x2c>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <reset_value+0x2c>)
 8001814:	781a      	ldrb	r2, [r3, #0]
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <reset_value+0x30>)
 8001818:	701a      	strb	r2, [r3, #0]
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <reset_value+0x30>)
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <reset_value+0x34>)
 8001820:	701a      	strb	r2, [r3, #0]
	LCD_clear(set_bcolor);
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <reset_value+0x38>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	0018      	movs	r0, r3
 8001828:	f7ff ffda 	bl	80017e0 <LCD_clear>
}
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	20000248 	.word	0x20000248
 8001838:	20000247 	.word	0x20000247
 800183c:	20000246 	.word	0x20000246
 8001840:	20000011 	.word	0x20000011

08001844 <LCD_putsXY>:

void LCD_putsXY(uint16_t x, uint16_t y, char* str, COLOR_ color, COLOR_ bg_color){
 8001844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001846:	b087      	sub	sp, #28
 8001848:	af02      	add	r7, sp, #8
 800184a:	0004      	movs	r4, r0
 800184c:	0008      	movs	r0, r1
 800184e:	60ba      	str	r2, [r7, #8]
 8001850:	0019      	movs	r1, r3
 8001852:	250e      	movs	r5, #14
 8001854:	197b      	adds	r3, r7, r5
 8001856:	1c22      	adds	r2, r4, #0
 8001858:	801a      	strh	r2, [r3, #0]
 800185a:	260c      	movs	r6, #12
 800185c:	19bb      	adds	r3, r7, r6
 800185e:	1c02      	adds	r2, r0, #0
 8001860:	801a      	strh	r2, [r3, #0]
 8001862:	1dfb      	adds	r3, r7, #7
 8001864:	1c0a      	adds	r2, r1, #0
 8001866:	701a      	strb	r2, [r3, #0]
	ILI9341_DrawText(str, FONT, x * 15, y * 19, lcd_color[color], lcd_color[bg_color]);
 8001868:	197b      	adds	r3, r7, r5
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	1c1a      	adds	r2, r3, #0
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	b29c      	uxth	r4, r3
 8001874:	19bb      	adds	r3, r7, r6
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	1c1a      	adds	r2, r3, #0
 800187a:	00d2      	lsls	r2, r2, #3
 800187c:	18d2      	adds	r2, r2, r3
 800187e:	1892      	adds	r2, r2, r2
 8001880:	18d3      	adds	r3, r2, r3
 8001882:	b29d      	uxth	r5, r3
 8001884:	1dfb      	adds	r3, r7, #7
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <LCD_putsXY+0x74>)
 800188a:	0052      	lsls	r2, r2, #1
 800188c:	5ad2      	ldrh	r2, [r2, r3]
 800188e:	2320      	movs	r3, #32
 8001890:	2108      	movs	r1, #8
 8001892:	185b      	adds	r3, r3, r1
 8001894:	19db      	adds	r3, r3, r7
 8001896:	7819      	ldrb	r1, [r3, #0]
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <LCD_putsXY+0x74>)
 800189a:	0049      	lsls	r1, r1, #1
 800189c:	5acb      	ldrh	r3, [r1, r3]
 800189e:	4907      	ldr	r1, [pc, #28]	; (80018bc <LCD_putsXY+0x78>)
 80018a0:	68b8      	ldr	r0, [r7, #8]
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	9200      	str	r2, [sp, #0]
 80018a6:	002b      	movs	r3, r5
 80018a8:	0022      	movs	r2, r4
 80018aa:	f7ff face 	bl	8000e4a <ILI9341_DrawText>
}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b005      	add	sp, #20
 80018b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	08007c24 	.word	0x08007c24
 80018bc:	08006ad4 	.word	0x08006ad4

080018c0 <array_puts>:

void array_puts(POS* pos, char* title, char** arr, COLOR_* color, COLOR_* bg_color, uint8_t num){
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
	LCD_putsXY(0, 0, title, set_tcolor, set_bcolor);
 80018ce:	4b23      	ldr	r3, [pc, #140]	; (800195c <array_puts+0x9c>)
 80018d0:	7819      	ldrb	r1, [r3, #0]
 80018d2:	4b23      	ldr	r3, [pc, #140]	; (8001960 <array_puts+0xa0>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	000b      	movs	r3, r1
 80018dc:	2100      	movs	r1, #0
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff ffb0 	bl	8001844 <LCD_putsXY>
	for(uint8_t i = 0 ; i < num ; i++)
 80018e4:	2317      	movs	r3, #23
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e027      	b.n	800193e <array_puts+0x7e>
		LCD_putsXY(pos[i].x, pos[i].y, arr[i], color[i], bg_color[i]);
 80018ee:	2517      	movs	r5, #23
 80018f0:	197b      	adds	r3, r7, r5
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	18d3      	adds	r3, r2, r3
 80018fa:	8818      	ldrh	r0, [r3, #0]
 80018fc:	197b      	adds	r3, r7, r5
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	18d3      	adds	r3, r2, r3
 8001906:	8859      	ldrh	r1, [r3, #2]
 8001908:	197b      	adds	r3, r7, r5
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	18d3      	adds	r3, r2, r3
 8001912:	681c      	ldr	r4, [r3, #0]
 8001914:	002e      	movs	r6, r5
 8001916:	19bb      	adds	r3, r7, r6
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	18d3      	adds	r3, r2, r3
 800191e:	781d      	ldrb	r5, [r3, #0]
 8001920:	19bb      	adds	r3, r7, r6
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001926:	18d3      	adds	r3, r2, r3
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	002b      	movs	r3, r5
 800192e:	0022      	movs	r2, r4
 8001930:	f7ff ff88 	bl	8001844 <LCD_putsXY>
	for(uint8_t i = 0 ; i < num ; i++)
 8001934:	19bb      	adds	r3, r7, r6
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	19bb      	adds	r3, r7, r6
 800193a:	3201      	adds	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	2317      	movs	r3, #23
 8001940:	18fa      	adds	r2, r7, r3
 8001942:	232c      	movs	r3, #44	; 0x2c
 8001944:	2108      	movs	r1, #8
 8001946:	185b      	adds	r3, r3, r1
 8001948:	19db      	adds	r3, r3, r7
 800194a:	7812      	ldrb	r2, [r2, #0]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d3cd      	bcc.n	80018ee <array_puts+0x2e>
}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b007      	add	sp, #28
 800195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195c:	2000023d 	.word	0x2000023d
 8001960:	20000011 	.word	0x20000011

08001964 <time_setting>:

void time_setting(void){
 8001964:	b5b0      	push	{r4, r5, r7, lr}
 8001966:	b0b4      	sub	sp, #208	; 0xd0
 8001968:	af02      	add	r7, sp, #8
	uint8_t sel = 0;
 800196a:	23c7      	movs	r3, #199	; 0xc7
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
	TIME set_time = { 23, 6, 22, 0, 0, 0 };
 8001972:	23c0      	movs	r3, #192	; 0xc0
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	4add      	ldr	r2, [pc, #884]	; (8001cec <time_setting+0x388>)
 8001978:	6811      	ldr	r1, [r2, #0]
 800197a:	6019      	str	r1, [r3, #0]
 800197c:	8892      	ldrh	r2, [r2, #4]
 800197e:	809a      	strh	r2, [r3, #4]

	POS pos[9] = {{5, 4}, {10, 4}, {14, 4}, {6, 5}, {10, 5}, {14, 5}, {7, 8}, {12, 8}, {17, 10}};
 8001980:	239c      	movs	r3, #156	; 0x9c
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	4ada      	ldr	r2, [pc, #872]	; (8001cf0 <time_setting+0x38c>)
 8001986:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001988:	c313      	stmia	r3!, {r0, r1, r4}
 800198a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800198c:	c313      	stmia	r3!, {r0, r1, r4}
 800198e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001990:	c313      	stmia	r3!, {r0, r1, r4}
	char bf[6][20];

	LCD_clear(set_bcolor);
 8001992:	4bd8      	ldr	r3, [pc, #864]	; (8001cf4 <time_setting+0x390>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	0018      	movs	r0, r3
 8001998:	f7ff ff22 	bl	80017e0 <LCD_clear>
	while(1){
		if(!firF){
 800199c:	4bd6      	ldr	r3, [pc, #856]	; (8001cf8 <time_setting+0x394>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d000      	beq.n	80019a6 <time_setting+0x42>
 80019a4:	e0c2      	b.n	8001b2c <time_setting+0x1c8>
			firF = 1;
 80019a6:	4bd4      	ldr	r3, [pc, #848]	; (8001cf8 <time_setting+0x394>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
			LCD_putsXY(6, 1, "< Time Setting >", set_tcolor, set_bcolor);
 80019ac:	4bd3      	ldr	r3, [pc, #844]	; (8001cfc <time_setting+0x398>)
 80019ae:	7819      	ldrb	r1, [r3, #0]
 80019b0:	4bd0      	ldr	r3, [pc, #832]	; (8001cf4 <time_setting+0x390>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4ad2      	ldr	r2, [pc, #840]	; (8001d00 <time_setting+0x39c>)
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	000b      	movs	r3, r1
 80019ba:	2101      	movs	r1, #1
 80019bc:	2006      	movs	r0, #6
 80019be:	f7ff ff41 	bl	8001844 <LCD_putsXY>

			for(uint8_t i = 0 ; i < 9 ; i++){
 80019c2:	23c6      	movs	r3, #198	; 0xc6
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e027      	b.n	8001a1c <time_setting+0xb8>
				if(sel == i){
 80019cc:	23c7      	movs	r3, #199	; 0xc7
 80019ce:	18fa      	adds	r2, r7, r3
 80019d0:	20c6      	movs	r0, #198	; 0xc6
 80019d2:	183b      	adds	r3, r7, r0
 80019d4:	7812      	ldrb	r2, [r2, #0]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d10c      	bne.n	80019f6 <time_setting+0x92>
					txt_color[i] = set_bcolor;
 80019dc:	183b      	adds	r3, r7, r0
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4ac4      	ldr	r2, [pc, #784]	; (8001cf4 <time_setting+0x390>)
 80019e2:	7811      	ldrb	r1, [r2, #0]
 80019e4:	4ac7      	ldr	r2, [pc, #796]	; (8001d04 <time_setting+0x3a0>)
 80019e6:	54d1      	strb	r1, [r2, r3]
					back_color[i] = set_tcolor;
 80019e8:	183b      	adds	r3, r7, r0
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4ac3      	ldr	r2, [pc, #780]	; (8001cfc <time_setting+0x398>)
 80019ee:	7811      	ldrb	r1, [r2, #0]
 80019f0:	4ac5      	ldr	r2, [pc, #788]	; (8001d08 <time_setting+0x3a4>)
 80019f2:	54d1      	strb	r1, [r2, r3]
 80019f4:	e00c      	b.n	8001a10 <time_setting+0xac>
				}
				else{
					txt_color[i] = set_tcolor;
 80019f6:	20c6      	movs	r0, #198	; 0xc6
 80019f8:	183b      	adds	r3, r7, r0
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4abf      	ldr	r2, [pc, #764]	; (8001cfc <time_setting+0x398>)
 80019fe:	7811      	ldrb	r1, [r2, #0]
 8001a00:	4ac0      	ldr	r2, [pc, #768]	; (8001d04 <time_setting+0x3a0>)
 8001a02:	54d1      	strb	r1, [r2, r3]
					back_color[i] = set_bcolor;
 8001a04:	183b      	adds	r3, r7, r0
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4aba      	ldr	r2, [pc, #744]	; (8001cf4 <time_setting+0x390>)
 8001a0a:	7811      	ldrb	r1, [r2, #0]
 8001a0c:	4abe      	ldr	r2, [pc, #760]	; (8001d08 <time_setting+0x3a4>)
 8001a0e:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0 ; i < 9 ; i++){
 8001a10:	21c6      	movs	r1, #198	; 0xc6
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	781a      	ldrb	r2, [r3, #0]
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	3201      	adds	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	23c6      	movs	r3, #198	; 0xc6
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d9d2      	bls.n	80019cc <time_setting+0x68>
				}
			}

			sprintf(bf[0], "Y:%04d", 2000 + set_time.year);
 8001a26:	24c0      	movs	r4, #192	; 0xc0
 8001a28:	193b      	adds	r3, r7, r4
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	22fa      	movs	r2, #250	; 0xfa
 8001a2e:	00d2      	lsls	r2, r2, #3
 8001a30:	189a      	adds	r2, r3, r2
 8001a32:	49b6      	ldr	r1, [pc, #728]	; (8001d0c <time_setting+0x3a8>)
 8001a34:	2524      	movs	r5, #36	; 0x24
 8001a36:	197b      	adds	r3, r7, r5
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f004 fb1d 	bl	8006078 <siprintf>
			sprintf(bf[1], "M:%02d", set_time.month);
 8001a3e:	193b      	adds	r3, r7, r4
 8001a40:	785b      	ldrb	r3, [r3, #1]
 8001a42:	001a      	movs	r2, r3
 8001a44:	49b2      	ldr	r1, [pc, #712]	; (8001d10 <time_setting+0x3ac>)
 8001a46:	197b      	adds	r3, r7, r5
 8001a48:	3314      	adds	r3, #20
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f004 fb14 	bl	8006078 <siprintf>
			if(set_time.day > lastDay[set_time.month - 1]) set_time.day = lastDay[set_time.month - 1];
 8001a50:	193b      	adds	r3, r7, r4
 8001a52:	789a      	ldrb	r2, [r3, #2]
 8001a54:	193b      	adds	r3, r7, r4
 8001a56:	785b      	ldrb	r3, [r3, #1]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	49ae      	ldr	r1, [pc, #696]	; (8001d14 <time_setting+0x3b0>)
 8001a5c:	5ccb      	ldrb	r3, [r1, r3]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d906      	bls.n	8001a70 <time_setting+0x10c>
 8001a62:	193b      	adds	r3, r7, r4
 8001a64:	785b      	ldrb	r3, [r3, #1]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	4aaa      	ldr	r2, [pc, #680]	; (8001d14 <time_setting+0x3b0>)
 8001a6a:	5cd2      	ldrb	r2, [r2, r3]
 8001a6c:	193b      	adds	r3, r7, r4
 8001a6e:	709a      	strb	r2, [r3, #2]
			sprintf(bf[2], "D:%02d", set_time.day);
 8001a70:	25c0      	movs	r5, #192	; 0xc0
 8001a72:	197b      	adds	r3, r7, r5
 8001a74:	789b      	ldrb	r3, [r3, #2]
 8001a76:	001a      	movs	r2, r3
 8001a78:	49a7      	ldr	r1, [pc, #668]	; (8001d18 <time_setting+0x3b4>)
 8001a7a:	2424      	movs	r4, #36	; 0x24
 8001a7c:	193b      	adds	r3, r7, r4
 8001a7e:	3328      	adds	r3, #40	; 0x28
 8001a80:	0018      	movs	r0, r3
 8001a82:	f004 faf9 	bl	8006078 <siprintf>
			sprintf(bf[3], "H:%02d", set_time.hour);
 8001a86:	197b      	adds	r3, r7, r5
 8001a88:	78db      	ldrb	r3, [r3, #3]
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	49a3      	ldr	r1, [pc, #652]	; (8001d1c <time_setting+0x3b8>)
 8001a8e:	193b      	adds	r3, r7, r4
 8001a90:	333c      	adds	r3, #60	; 0x3c
 8001a92:	0018      	movs	r0, r3
 8001a94:	f004 faf0 	bl	8006078 <siprintf>
			sprintf(bf[4], "m:%02d", set_time.min);
 8001a98:	197b      	adds	r3, r7, r5
 8001a9a:	791b      	ldrb	r3, [r3, #4]
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	49a0      	ldr	r1, [pc, #640]	; (8001d20 <time_setting+0x3bc>)
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	3350      	adds	r3, #80	; 0x50
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f004 fae7 	bl	8006078 <siprintf>
			sprintf(bf[5], "S:%02d", set_time.sec);
 8001aaa:	197b      	adds	r3, r7, r5
 8001aac:	795b      	ldrb	r3, [r3, #5]
 8001aae:	001a      	movs	r2, r3
 8001ab0:	499c      	ldr	r1, [pc, #624]	; (8001d24 <time_setting+0x3c0>)
 8001ab2:	193b      	adds	r3, r7, r4
 8001ab4:	3364      	adds	r3, #100	; 0x64
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f004 fade 	bl	8006078 <siprintf>

			char* array[9] = { bf[0], bf[1], bf[2], bf[3], bf[4], bf[5], "UP", "DOWN", "OK!" };
 8001abc:	003b      	movs	r3, r7
 8001abe:	0021      	movs	r1, r4
 8001ac0:	187a      	adds	r2, r7, r1
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	003b      	movs	r3, r7
 8001ac6:	187a      	adds	r2, r7, r1
 8001ac8:	3214      	adds	r2, #20
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	003b      	movs	r3, r7
 8001ace:	187a      	adds	r2, r7, r1
 8001ad0:	3228      	adds	r2, #40	; 0x28
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	003b      	movs	r3, r7
 8001ad6:	187a      	adds	r2, r7, r1
 8001ad8:	323c      	adds	r2, #60	; 0x3c
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	003b      	movs	r3, r7
 8001ade:	187a      	adds	r2, r7, r1
 8001ae0:	3250      	adds	r2, #80	; 0x50
 8001ae2:	611a      	str	r2, [r3, #16]
 8001ae4:	003b      	movs	r3, r7
 8001ae6:	187a      	adds	r2, r7, r1
 8001ae8:	3264      	adds	r2, #100	; 0x64
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	003b      	movs	r3, r7
 8001aee:	4a8e      	ldr	r2, [pc, #568]	; (8001d28 <time_setting+0x3c4>)
 8001af0:	619a      	str	r2, [r3, #24]
 8001af2:	003b      	movs	r3, r7
 8001af4:	4a8d      	ldr	r2, [pc, #564]	; (8001d2c <time_setting+0x3c8>)
 8001af6:	61da      	str	r2, [r3, #28]
 8001af8:	003b      	movs	r3, r7
 8001afa:	4a8d      	ldr	r2, [pc, #564]	; (8001d30 <time_setting+0x3cc>)
 8001afc:	621a      	str	r2, [r3, #32]
			array_puts(pos, "", array, txt_color, back_color, 9);
 8001afe:	4c81      	ldr	r4, [pc, #516]	; (8001d04 <time_setting+0x3a0>)
 8001b00:	003a      	movs	r2, r7
 8001b02:	498c      	ldr	r1, [pc, #560]	; (8001d34 <time_setting+0x3d0>)
 8001b04:	239c      	movs	r3, #156	; 0x9c
 8001b06:	18f8      	adds	r0, r7, r3
 8001b08:	2309      	movs	r3, #9
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	4b7e      	ldr	r3, [pc, #504]	; (8001d08 <time_setting+0x3a4>)
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	0023      	movs	r3, r4
 8001b12:	f7ff fed5 	bl	80018c0 <array_puts>
			LCD_putsXY(6, 1, "< Time Setting >", set_tcolor, set_bcolor);
 8001b16:	4b79      	ldr	r3, [pc, #484]	; (8001cfc <time_setting+0x398>)
 8001b18:	7819      	ldrb	r1, [r3, #0]
 8001b1a:	4b76      	ldr	r3, [pc, #472]	; (8001cf4 <time_setting+0x390>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	4a78      	ldr	r2, [pc, #480]	; (8001d00 <time_setting+0x39c>)
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	000b      	movs	r3, r1
 8001b24:	2101      	movs	r1, #1
 8001b26:	2006      	movs	r0, #6
 8001b28:	f7ff fe8c 	bl	8001844 <LCD_putsXY>
		}

		if(touched()) firF = 0;
 8001b2c:	f7fe ffd4 	bl	8000ad8 <touched>
 8001b30:	1e03      	subs	r3, r0, #0
 8001b32:	d002      	beq.n	8001b3a <time_setting+0x1d6>
 8001b34:	4b70      	ldr	r3, [pc, #448]	; (8001cf8 <time_setting+0x394>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]

		if(curXY.x > 0 || curXY.y > 0){
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <time_setting+0x3d4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	5e9b      	ldrsh	r3, [r3, r2]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	dc05      	bgt.n	8001b50 <time_setting+0x1ec>
 8001b44:	4b7c      	ldr	r3, [pc, #496]	; (8001d38 <time_setting+0x3d4>)
 8001b46:	2202      	movs	r2, #2
 8001b48:	5e9b      	ldrsh	r3, [r3, r2]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	dc00      	bgt.n	8001b50 <time_setting+0x1ec>
 8001b4e:	e725      	b.n	800199c <time_setting+0x38>
			if(coor_check(17, 17 + strlen("OK!"), 10, 11)) break;
 8001b50:	230b      	movs	r3, #11
 8001b52:	220a      	movs	r2, #10
 8001b54:	2114      	movs	r1, #20
 8001b56:	2011      	movs	r0, #17
 8001b58:	f7ff fdf4 	bl	8001744 <coor_check>
 8001b5c:	1e03      	subs	r3, r0, #0
 8001b5e:	d000      	beq.n	8001b62 <time_setting+0x1fe>
 8001b60:	e192      	b.n	8001e88 <time_setting+0x524>
			else if(coor_check(5, 5 + strlen(bf[0]), 4, 5)) sel = 0;
 8001b62:	2324      	movs	r3, #36	; 0x24
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7fe face 	bl	8000108 <strlen>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3305      	adds	r3, #5
 8001b72:	b299      	uxth	r1, r3
 8001b74:	2305      	movs	r3, #5
 8001b76:	2204      	movs	r2, #4
 8001b78:	2005      	movs	r0, #5
 8001b7a:	f7ff fde3 	bl	8001744 <coor_check>
 8001b7e:	1e03      	subs	r3, r0, #0
 8001b80:	d004      	beq.n	8001b8c <time_setting+0x228>
 8001b82:	23c7      	movs	r3, #199	; 0xc7
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	e707      	b.n	800199c <time_setting+0x38>
			else if(coor_check(10, 10 + strlen(bf[1]), 4, 5)) sel = 1;
 8001b8c:	2324      	movs	r3, #36	; 0x24
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	3314      	adds	r3, #20
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7fe fab8 	bl	8000108 <strlen>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	330a      	adds	r3, #10
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	2305      	movs	r3, #5
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	200a      	movs	r0, #10
 8001ba6:	f7ff fdcd 	bl	8001744 <coor_check>
 8001baa:	1e03      	subs	r3, r0, #0
 8001bac:	d004      	beq.n	8001bb8 <time_setting+0x254>
 8001bae:	23c7      	movs	r3, #199	; 0xc7
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	e6f1      	b.n	800199c <time_setting+0x38>
			else if(coor_check(14, 14 + strlen(bf[2]), 4, 5)) sel = 2;
 8001bb8:	2324      	movs	r3, #36	; 0x24
 8001bba:	18fb      	adds	r3, r7, r3
 8001bbc:	3328      	adds	r3, #40	; 0x28
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f7fe faa2 	bl	8000108 <strlen>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	330e      	adds	r3, #14
 8001bca:	b299      	uxth	r1, r3
 8001bcc:	2305      	movs	r3, #5
 8001bce:	2204      	movs	r2, #4
 8001bd0:	200e      	movs	r0, #14
 8001bd2:	f7ff fdb7 	bl	8001744 <coor_check>
 8001bd6:	1e03      	subs	r3, r0, #0
 8001bd8:	d004      	beq.n	8001be4 <time_setting+0x280>
 8001bda:	23c7      	movs	r3, #199	; 0xc7
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	2202      	movs	r2, #2
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	e6db      	b.n	800199c <time_setting+0x38>
			else if(coor_check(6, 7 + strlen(bf[3]), 5, 6)) sel = 3;
 8001be4:	2324      	movs	r3, #36	; 0x24
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	333c      	adds	r3, #60	; 0x3c
 8001bea:	0018      	movs	r0, r3
 8001bec:	f7fe fa8c 	bl	8000108 <strlen>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3307      	adds	r3, #7
 8001bf6:	b299      	uxth	r1, r3
 8001bf8:	2306      	movs	r3, #6
 8001bfa:	2205      	movs	r2, #5
 8001bfc:	2006      	movs	r0, #6
 8001bfe:	f7ff fda1 	bl	8001744 <coor_check>
 8001c02:	1e03      	subs	r3, r0, #0
 8001c04:	d004      	beq.n	8001c10 <time_setting+0x2ac>
 8001c06:	23c7      	movs	r3, #199	; 0xc7
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	701a      	strb	r2, [r3, #0]
 8001c0e:	e6c5      	b.n	800199c <time_setting+0x38>
			else if(coor_check(10, 10 + strlen(bf[4]), 5, 6)) sel = 4;
 8001c10:	2324      	movs	r3, #36	; 0x24
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	3350      	adds	r3, #80	; 0x50
 8001c16:	0018      	movs	r0, r3
 8001c18:	f7fe fa76 	bl	8000108 <strlen>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	330a      	adds	r3, #10
 8001c22:	b299      	uxth	r1, r3
 8001c24:	2306      	movs	r3, #6
 8001c26:	2205      	movs	r2, #5
 8001c28:	200a      	movs	r0, #10
 8001c2a:	f7ff fd8b 	bl	8001744 <coor_check>
 8001c2e:	1e03      	subs	r3, r0, #0
 8001c30:	d004      	beq.n	8001c3c <time_setting+0x2d8>
 8001c32:	23c7      	movs	r3, #199	; 0xc7
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	2204      	movs	r2, #4
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	e6af      	b.n	800199c <time_setting+0x38>
			else if(coor_check(14, 14 + strlen(bf[5]), 5, 6)) sel = 5;
 8001c3c:	2324      	movs	r3, #36	; 0x24
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	3364      	adds	r3, #100	; 0x64
 8001c42:	0018      	movs	r0, r3
 8001c44:	f7fe fa60 	bl	8000108 <strlen>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	330e      	adds	r3, #14
 8001c4e:	b299      	uxth	r1, r3
 8001c50:	2306      	movs	r3, #6
 8001c52:	2205      	movs	r2, #5
 8001c54:	200e      	movs	r0, #14
 8001c56:	f7ff fd75 	bl	8001744 <coor_check>
 8001c5a:	1e03      	subs	r3, r0, #0
 8001c5c:	d004      	beq.n	8001c68 <time_setting+0x304>
 8001c5e:	23c7      	movs	r3, #199	; 0xc7
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	2205      	movs	r2, #5
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	e699      	b.n	800199c <time_setting+0x38>
			else{
				if(coor_check(7, 7 + strlen("UP"), 7, 9)){
 8001c68:	2309      	movs	r3, #9
 8001c6a:	2207      	movs	r2, #7
 8001c6c:	2109      	movs	r1, #9
 8001c6e:	2007      	movs	r0, #7
 8001c70:	f7ff fd68 	bl	8001744 <coor_check>
 8001c74:	1e03      	subs	r3, r0, #0
 8001c76:	d100      	bne.n	8001c7a <time_setting+0x316>
 8001c78:	e095      	b.n	8001da6 <time_setting+0x442>
					if(sel == 0 && set_time.year < 99) set_time.year++;
 8001c7a:	23c7      	movs	r3, #199	; 0xc7
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10b      	bne.n	8001c9c <time_setting+0x338>
 8001c84:	21c0      	movs	r1, #192	; 0xc0
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b62      	cmp	r3, #98	; 0x62
 8001c8c:	d806      	bhi.n	8001c9c <time_setting+0x338>
 8001c8e:	187b      	adds	r3, r7, r1
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	e0f4      	b.n	8001e86 <time_setting+0x522>
					else if(sel == 1 && set_time.month < 12) set_time.month++;
 8001c9c:	23c7      	movs	r3, #199	; 0xc7
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d10b      	bne.n	8001cbe <time_setting+0x35a>
 8001ca6:	21c0      	movs	r1, #192	; 0xc0
 8001ca8:	187b      	adds	r3, r7, r1
 8001caa:	785b      	ldrb	r3, [r3, #1]
 8001cac:	2b0b      	cmp	r3, #11
 8001cae:	d806      	bhi.n	8001cbe <time_setting+0x35a>
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	785b      	ldrb	r3, [r3, #1]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	705a      	strb	r2, [r3, #1]
 8001cbc:	e0e3      	b.n	8001e86 <time_setting+0x522>
					else if(sel == 2 && set_time.day < lastDay[set_time.month - 1]) set_time.day++;
 8001cbe:	23c7      	movs	r3, #199	; 0xc7
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d139      	bne.n	8001d3c <time_setting+0x3d8>
 8001cc8:	20c0      	movs	r0, #192	; 0xc0
 8001cca:	183b      	adds	r3, r7, r0
 8001ccc:	789a      	ldrb	r2, [r3, #2]
 8001cce:	183b      	adds	r3, r7, r0
 8001cd0:	785b      	ldrb	r3, [r3, #1]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	490f      	ldr	r1, [pc, #60]	; (8001d14 <time_setting+0x3b0>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d22f      	bcs.n	8001d3c <time_setting+0x3d8>
 8001cdc:	183b      	adds	r3, r7, r0
 8001cde:	789b      	ldrb	r3, [r3, #2]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	183b      	adds	r3, r7, r0
 8001ce6:	709a      	strb	r2, [r3, #2]
 8001ce8:	e0cd      	b.n	8001e86 <time_setting+0x522>
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	080069a8 	.word	0x080069a8
 8001cf0:	080069b0 	.word	0x080069b0
 8001cf4:	20000011 	.word	0x20000011
 8001cf8:	20000247 	.word	0x20000247
 8001cfc:	2000023d 	.word	0x2000023d
 8001d00:	08006950 	.word	0x08006950
 8001d04:	2000022c 	.word	0x2000022c
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	08006964 	.word	0x08006964
 8001d10:	0800696c 	.word	0x0800696c
 8001d14:	08007c18 	.word	0x08007c18
 8001d18:	08006974 	.word	0x08006974
 8001d1c:	0800697c 	.word	0x0800697c
 8001d20:	08006984 	.word	0x08006984
 8001d24:	0800698c 	.word	0x0800698c
 8001d28:	08006994 	.word	0x08006994
 8001d2c:	08006998 	.word	0x08006998
 8001d30:	080069a0 	.word	0x080069a0
 8001d34:	080069a4 	.word	0x080069a4
 8001d38:	20000240 	.word	0x20000240
					else if(sel == 3 && set_time.hour < 23) set_time.hour++;
 8001d3c:	23c7      	movs	r3, #199	; 0xc7
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d10b      	bne.n	8001d5e <time_setting+0x3fa>
 8001d46:	21c0      	movs	r1, #192	; 0xc0
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	78db      	ldrb	r3, [r3, #3]
 8001d4c:	2b16      	cmp	r3, #22
 8001d4e:	d806      	bhi.n	8001d5e <time_setting+0x3fa>
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	78db      	ldrb	r3, [r3, #3]
 8001d54:	3301      	adds	r3, #1
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	70da      	strb	r2, [r3, #3]
 8001d5c:	e093      	b.n	8001e86 <time_setting+0x522>
					else if(sel == 4 && set_time.min < 59) set_time.min++;
 8001d5e:	23c7      	movs	r3, #199	; 0xc7
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d10b      	bne.n	8001d80 <time_setting+0x41c>
 8001d68:	21c0      	movs	r1, #192	; 0xc0
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	791b      	ldrb	r3, [r3, #4]
 8001d6e:	2b3a      	cmp	r3, #58	; 0x3a
 8001d70:	d806      	bhi.n	8001d80 <time_setting+0x41c>
 8001d72:	187b      	adds	r3, r7, r1
 8001d74:	791b      	ldrb	r3, [r3, #4]
 8001d76:	3301      	adds	r3, #1
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	711a      	strb	r2, [r3, #4]
 8001d7e:	e082      	b.n	8001e86 <time_setting+0x522>
					else if(sel == 5 && set_time.sec < 59) set_time.sec++;
 8001d80:	23c7      	movs	r3, #199	; 0xc7
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d000      	beq.n	8001d8c <time_setting+0x428>
 8001d8a:	e607      	b.n	800199c <time_setting+0x38>
 8001d8c:	21c0      	movs	r1, #192	; 0xc0
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	795b      	ldrb	r3, [r3, #5]
 8001d92:	2b3a      	cmp	r3, #58	; 0x3a
 8001d94:	d900      	bls.n	8001d98 <time_setting+0x434>
 8001d96:	e601      	b.n	800199c <time_setting+0x38>
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	795b      	ldrb	r3, [r3, #5]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	715a      	strb	r2, [r3, #5]
 8001da4:	e5fa      	b.n	800199c <time_setting+0x38>
				}
				else if(coor_check(12, 12 + strlen("DOWN"), 7, 9)){
 8001da6:	2309      	movs	r3, #9
 8001da8:	2207      	movs	r2, #7
 8001daa:	2110      	movs	r1, #16
 8001dac:	200c      	movs	r0, #12
 8001dae:	f7ff fcc9 	bl	8001744 <coor_check>
 8001db2:	1e03      	subs	r3, r0, #0
 8001db4:	d100      	bne.n	8001db8 <time_setting+0x454>
 8001db6:	e5f1      	b.n	800199c <time_setting+0x38>
					if(sel == 0 && set_time.year > 0) set_time.year--;
 8001db8:	23c7      	movs	r3, #199	; 0xc7
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10b      	bne.n	8001dda <time_setting+0x476>
 8001dc2:	21c0      	movs	r1, #192	; 0xc0
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <time_setting+0x476>
 8001dcc:	187b      	adds	r3, r7, r1
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	187b      	adds	r3, r7, r1
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e055      	b.n	8001e86 <time_setting+0x522>
					else if(sel == 1 && set_time.month > 1) set_time.month--;
 8001dda:	23c7      	movs	r3, #199	; 0xc7
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d10b      	bne.n	8001dfc <time_setting+0x498>
 8001de4:	21c0      	movs	r1, #192	; 0xc0
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	785b      	ldrb	r3, [r3, #1]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d906      	bls.n	8001dfc <time_setting+0x498>
 8001dee:	187b      	adds	r3, r7, r1
 8001df0:	785b      	ldrb	r3, [r3, #1]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	187b      	adds	r3, r7, r1
 8001df8:	705a      	strb	r2, [r3, #1]
 8001dfa:	e044      	b.n	8001e86 <time_setting+0x522>
					else if(sel == 2 && set_time.day > 1) set_time.day--;
 8001dfc:	23c7      	movs	r3, #199	; 0xc7
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d10b      	bne.n	8001e1e <time_setting+0x4ba>
 8001e06:	21c0      	movs	r1, #192	; 0xc0
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	789b      	ldrb	r3, [r3, #2]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d906      	bls.n	8001e1e <time_setting+0x4ba>
 8001e10:	187b      	adds	r3, r7, r1
 8001e12:	789b      	ldrb	r3, [r3, #2]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	187b      	adds	r3, r7, r1
 8001e1a:	709a      	strb	r2, [r3, #2]
 8001e1c:	e033      	b.n	8001e86 <time_setting+0x522>
					else if(sel == 3 && set_time.hour > 0) set_time.hour--;
 8001e1e:	23c7      	movs	r3, #199	; 0xc7
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d10b      	bne.n	8001e40 <time_setting+0x4dc>
 8001e28:	21c0      	movs	r1, #192	; 0xc0
 8001e2a:	187b      	adds	r3, r7, r1
 8001e2c:	78db      	ldrb	r3, [r3, #3]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d006      	beq.n	8001e40 <time_setting+0x4dc>
 8001e32:	187b      	adds	r3, r7, r1
 8001e34:	78db      	ldrb	r3, [r3, #3]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	187b      	adds	r3, r7, r1
 8001e3c:	70da      	strb	r2, [r3, #3]
 8001e3e:	e022      	b.n	8001e86 <time_setting+0x522>
					else if(sel == 4 && set_time.min > 0) set_time.min--;
 8001e40:	23c7      	movs	r3, #199	; 0xc7
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d10b      	bne.n	8001e62 <time_setting+0x4fe>
 8001e4a:	21c0      	movs	r1, #192	; 0xc0
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	791b      	ldrb	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <time_setting+0x4fe>
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	791b      	ldrb	r3, [r3, #4]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	187b      	adds	r3, r7, r1
 8001e5e:	711a      	strb	r2, [r3, #4]
 8001e60:	e011      	b.n	8001e86 <time_setting+0x522>
					else if(sel == 5 && set_time.sec > 0) set_time.sec--;
 8001e62:	23c7      	movs	r3, #199	; 0xc7
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d000      	beq.n	8001e6e <time_setting+0x50a>
 8001e6c:	e596      	b.n	800199c <time_setting+0x38>
 8001e6e:	21c0      	movs	r1, #192	; 0xc0
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	795b      	ldrb	r3, [r3, #5]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d100      	bne.n	8001e7a <time_setting+0x516>
 8001e78:	e590      	b.n	800199c <time_setting+0x38>
 8001e7a:	187b      	adds	r3, r7, r1
 8001e7c:	795b      	ldrb	r3, [r3, #5]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	715a      	strb	r2, [r3, #5]
		if(!firF){
 8001e86:	e589      	b.n	800199c <time_setting+0x38>
			if(coor_check(17, 17 + strlen("OK!"), 10, 11)) break;
 8001e88:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
	buzM = 1;
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <time_setting+0x558>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
	time = set_time;
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <time_setting+0x55c>)
 8001e92:	22c0      	movs	r2, #192	; 0xc0
 8001e94:	18ba      	adds	r2, r7, r2
 8001e96:	6811      	ldr	r1, [r2, #0]
 8001e98:	6019      	str	r1, [r3, #0]
 8001e9a:	8892      	ldrh	r2, [r2, #4]
 8001e9c:	809a      	strh	r2, [r3, #4]
	firF = 0;
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <time_setting+0x560>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
	time_set();
 8001ea4:	f7ff fc16 	bl	80016d4 <time_set>
	LCD_clear(set_bcolor);
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <time_setting+0x564>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff fc97 	bl	80017e0 <LCD_clear>
}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b032      	add	sp, #200	; 0xc8
 8001eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	20000248 	.word	0x20000248
 8001ec0:	20000014 	.word	0x20000014
 8001ec4:	20000247 	.word	0x20000247
 8001ec8:	20000011 	.word	0x20000011

08001ecc <start>:

void start(void){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af02      	add	r7, sp, #8
	LCD_clear(set_bcolor);
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <start+0x50>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff fc82 	bl	80017e0 <LCD_clear>

	LCD_putsXY(3, 4, "< Skill Competition Task 3 >", set_tcolor, set_bcolor);
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <start+0x54>)
 8001ede:	7819      	ldrb	r1, [r3, #0]
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <start+0x50>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4a0f      	ldr	r2, [pc, #60]	; (8001f24 <start+0x58>)
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	000b      	movs	r3, r1
 8001eea:	2104      	movs	r1, #4
 8001eec:	2003      	movs	r0, #3
 8001eee:	f7ff fca9 	bl	8001844 <LCD_putsXY>
	LCD_putsXY(7, 6, "Audio Interface", set_tcolor, set_bcolor);
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <start+0x54>)
 8001ef4:	7819      	ldrb	r1, [r3, #0]
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <start+0x50>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <start+0x5c>)
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	000b      	movs	r3, r1
 8001f00:	2106      	movs	r1, #6
 8001f02:	2007      	movs	r0, #7
 8001f04:	f7ff fc9e 	bl	8001844 <LCD_putsXY>
	HAL_Delay(2000);
 8001f08:	23fa      	movs	r3, #250	; 0xfa
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f000 ffc7 	bl	8002ea0 <HAL_Delay>
	time_setting();
 8001f12:	f7ff fd27 	bl	8001964 <time_setting>
}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000011 	.word	0x20000011
 8001f20:	2000023d 	.word	0x2000023d
 8001f24:	080069d4 	.word	0x080069d4
 8001f28:	080069f4 	.word	0x080069f4

08001f2c <main_menu>:

void main_menu(void){
 8001f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2e:	b093      	sub	sp, #76	; 0x4c
 8001f30:	af04      	add	r7, sp, #16
	if(!firF){
 8001f32:	4b55      	ldr	r3, [pc, #340]	; (8002088 <main_menu+0x15c>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d11e      	bne.n	8001f78 <main_menu+0x4c>
		firF = 1;
 8001f3a:	4b53      	ldr	r3, [pc, #332]	; (8002088 <main_menu+0x15c>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0 ; i < 17 ; i++){
 8001f40:	2337      	movs	r3, #55	; 0x37
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	e011      	b.n	8001f6e <main_menu+0x42>
			txt_color[i] = set_tcolor;
 8001f4a:	2037      	movs	r0, #55	; 0x37
 8001f4c:	183b      	adds	r3, r7, r0
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4a4e      	ldr	r2, [pc, #312]	; (800208c <main_menu+0x160>)
 8001f52:	7811      	ldrb	r1, [r2, #0]
 8001f54:	4a4e      	ldr	r2, [pc, #312]	; (8002090 <main_menu+0x164>)
 8001f56:	54d1      	strb	r1, [r2, r3]
			back_color[i] = set_bcolor;
 8001f58:	183b      	adds	r3, r7, r0
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4a4d      	ldr	r2, [pc, #308]	; (8002094 <main_menu+0x168>)
 8001f5e:	7811      	ldrb	r1, [r2, #0]
 8001f60:	4a4d      	ldr	r2, [pc, #308]	; (8002098 <main_menu+0x16c>)
 8001f62:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0 ; i < 17 ; i++){
 8001f64:	183b      	adds	r3, r7, r0
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	183b      	adds	r3, r7, r0
 8001f6a:	3201      	adds	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	2337      	movs	r3, #55	; 0x37
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b10      	cmp	r3, #16
 8001f76:	d9e8      	bls.n	8001f4a <main_menu+0x1e>
		}
	}
	time_get();
 8001f78:	f7ff fbc6 	bl	8001708 <time_get>
	char bf[20];
	POS pos[4] = {{0, 1}, {2, 4}, {2, 7}};
 8001f7c:	2410      	movs	r4, #16
 8001f7e:	193b      	adds	r3, r7, r4
 8001f80:	0018      	movs	r0, r3
 8001f82:	2310      	movs	r3, #16
 8001f84:	001a      	movs	r2, r3
 8001f86:	2100      	movs	r1, #0
 8001f88:	f004 f86d 	bl	8006066 <memset>
 8001f8c:	0021      	movs	r1, r4
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	2201      	movs	r2, #1
 8001f92:	805a      	strh	r2, [r3, #2]
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	2202      	movs	r2, #2
 8001f98:	809a      	strh	r2, [r3, #4]
 8001f9a:	187b      	adds	r3, r7, r1
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	80da      	strh	r2, [r3, #6]
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	811a      	strh	r2, [r3, #8]
 8001fa6:	187b      	adds	r3, r7, r1
 8001fa8:	2207      	movs	r2, #7
 8001faa:	815a      	strh	r2, [r3, #10]
	sprintf(bf, "%04d.%02d.%02d %02d:%02d:%02d", 2000 + time.year, time.month, time.day, time.hour, time.min, time.sec);
 8001fac:	4b3b      	ldr	r3, [pc, #236]	; (800209c <main_menu+0x170>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	22fa      	movs	r2, #250	; 0xfa
 8001fb2:	00d2      	lsls	r2, r2, #3
 8001fb4:	189a      	adds	r2, r3, r2
 8001fb6:	4b39      	ldr	r3, [pc, #228]	; (800209c <main_menu+0x170>)
 8001fb8:	785b      	ldrb	r3, [r3, #1]
 8001fba:	469c      	mov	ip, r3
 8001fbc:	4b37      	ldr	r3, [pc, #220]	; (800209c <main_menu+0x170>)
 8001fbe:	789b      	ldrb	r3, [r3, #2]
 8001fc0:	001c      	movs	r4, r3
 8001fc2:	4b36      	ldr	r3, [pc, #216]	; (800209c <main_menu+0x170>)
 8001fc4:	78db      	ldrb	r3, [r3, #3]
 8001fc6:	001d      	movs	r5, r3
 8001fc8:	4b34      	ldr	r3, [pc, #208]	; (800209c <main_menu+0x170>)
 8001fca:	791b      	ldrb	r3, [r3, #4]
 8001fcc:	001e      	movs	r6, r3
 8001fce:	4b33      	ldr	r3, [pc, #204]	; (800209c <main_menu+0x170>)
 8001fd0:	795b      	ldrb	r3, [r3, #5]
 8001fd2:	4933      	ldr	r1, [pc, #204]	; (80020a0 <main_menu+0x174>)
 8001fd4:	2020      	movs	r0, #32
 8001fd6:	1838      	adds	r0, r7, r0
 8001fd8:	9303      	str	r3, [sp, #12]
 8001fda:	9602      	str	r6, [sp, #8]
 8001fdc:	9501      	str	r5, [sp, #4]
 8001fde:	9400      	str	r4, [sp, #0]
 8001fe0:	4663      	mov	r3, ip
 8001fe2:	f004 f849 	bl	8006078 <siprintf>

	char* array[3] = { bf, "1. Sound modulation", "2. Color Setting" };
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	2020      	movs	r0, #32
 8001fea:	183a      	adds	r2, r7, r0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	; (80020a4 <main_menu+0x178>)
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	4a2c      	ldr	r2, [pc, #176]	; (80020a8 <main_menu+0x17c>)
 8001ff8:	609a      	str	r2, [r3, #8]
	array_puts(pos, ">Main", array, txt_color, back_color, 3);
 8001ffa:	4c25      	ldr	r4, [pc, #148]	; (8002090 <main_menu+0x164>)
 8001ffc:	1d3a      	adds	r2, r7, #4
 8001ffe:	492b      	ldr	r1, [pc, #172]	; (80020ac <main_menu+0x180>)
 8002000:	2310      	movs	r3, #16
 8002002:	18f8      	adds	r0, r7, r3
 8002004:	2303      	movs	r3, #3
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	4b23      	ldr	r3, [pc, #140]	; (8002098 <main_menu+0x16c>)
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	0023      	movs	r3, r4
 800200e:	f7ff fc57 	bl	80018c0 <array_puts>

	if(curXY.x > 0 || curXY.y > 0){
 8002012:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <main_menu+0x184>)
 8002014:	2200      	movs	r2, #0
 8002016:	5e9b      	ldrsh	r3, [r3, r2]
 8002018:	2b00      	cmp	r3, #0
 800201a:	dc04      	bgt.n	8002026 <main_menu+0xfa>
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <main_menu+0x184>)
 800201e:	2202      	movs	r2, #2
 8002020:	5e9b      	ldrsh	r3, [r3, r2]
 8002022:	2b00      	cmp	r3, #0
 8002024:	dd2b      	ble.n	800207e <main_menu+0x152>
		if(coor_check(0, strlen(bf), 1, 1 + 1)) time_setting();
 8002026:	2320      	movs	r3, #32
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	0018      	movs	r0, r3
 800202c:	f7fe f86c 	bl	8000108 <strlen>
 8002030:	0003      	movs	r3, r0
 8002032:	b299      	uxth	r1, r3
 8002034:	2302      	movs	r3, #2
 8002036:	2201      	movs	r2, #1
 8002038:	2000      	movs	r0, #0
 800203a:	f7ff fb83 	bl	8001744 <coor_check>
 800203e:	1e03      	subs	r3, r0, #0
 8002040:	d002      	beq.n	8002048 <main_menu+0x11c>
 8002042:	f7ff fc8f 	bl	8001964 <time_setting>
		else if(coor_check(2, 2 + strlen("2. Color Setting"), 7, 7 + 1)){
			reset_value();
			modeF = 2;
		}
	}
}
 8002046:	e01a      	b.n	800207e <main_menu+0x152>
		else if(coor_check(2, 2 + strlen("1. Sound modulation"), 4, 4 + 1)){
 8002048:	2305      	movs	r3, #5
 800204a:	2204      	movs	r2, #4
 800204c:	2115      	movs	r1, #21
 800204e:	2002      	movs	r0, #2
 8002050:	f7ff fb78 	bl	8001744 <coor_check>
 8002054:	1e03      	subs	r3, r0, #0
 8002056:	d005      	beq.n	8002064 <main_menu+0x138>
			reset_value();
 8002058:	f7ff fbd6 	bl	8001808 <reset_value>
			modeF = 1;
 800205c:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <main_menu+0x188>)
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
}
 8002062:	e00c      	b.n	800207e <main_menu+0x152>
		else if(coor_check(2, 2 + strlen("2. Color Setting"), 7, 7 + 1)){
 8002064:	2308      	movs	r3, #8
 8002066:	2207      	movs	r2, #7
 8002068:	2112      	movs	r1, #18
 800206a:	2002      	movs	r0, #2
 800206c:	f7ff fb6a 	bl	8001744 <coor_check>
 8002070:	1e03      	subs	r3, r0, #0
 8002072:	d004      	beq.n	800207e <main_menu+0x152>
			reset_value();
 8002074:	f7ff fbc8 	bl	8001808 <reset_value>
			modeF = 2;
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <main_menu+0x188>)
 800207a:	2202      	movs	r2, #2
 800207c:	701a      	strb	r2, [r3, #0]
}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b00f      	add	sp, #60	; 0x3c
 8002084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	20000247 	.word	0x20000247
 800208c:	2000023d 	.word	0x2000023d
 8002090:	2000022c 	.word	0x2000022c
 8002094:	20000011 	.word	0x20000011
 8002098:	20000000 	.word	0x20000000
 800209c:	20000014 	.word	0x20000014
 80020a0:	08006a04 	.word	0x08006a04
 80020a4:	08006a24 	.word	0x08006a24
 80020a8:	08006a38 	.word	0x08006a38
 80020ac:	08006a4c 	.word	0x08006a4c
 80020b0:	20000240 	.word	0x20000240
 80020b4:	20000246 	.word	0x20000246

080020b8 <modulation_mode>:

void modulation_mode(void){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0

}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <setting_mode>:

void setting_mode(void){
 80020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c6:	b0a1      	sub	sp, #132	; 0x84
 80020c8:	af04      	add	r7, sp, #16
	static uint8_t sel;
	static COLOR_ t_color = white, b_color = black;

	if(!firF){
 80020ca:	4bd0      	ldr	r3, [pc, #832]	; (800240c <setting_mode+0x348>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d129      	bne.n	8002126 <setting_mode+0x62>
		firF = 1;
 80020d2:	4bce      	ldr	r3, [pc, #824]	; (800240c <setting_mode+0x348>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]

		sel = 0;
 80020d8:	4bcd      	ldr	r3, [pc, #820]	; (8002410 <setting_mode+0x34c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
		t_color = set_tcolor;
 80020de:	4bcd      	ldr	r3, [pc, #820]	; (8002414 <setting_mode+0x350>)
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	4bcd      	ldr	r3, [pc, #820]	; (8002418 <setting_mode+0x354>)
 80020e4:	701a      	strb	r2, [r3, #0]
		b_color = set_bcolor;
 80020e6:	4bcd      	ldr	r3, [pc, #820]	; (800241c <setting_mode+0x358>)
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	4bcd      	ldr	r3, [pc, #820]	; (8002420 <setting_mode+0x35c>)
 80020ec:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0 ; i < 17 ; i++){
 80020ee:	236f      	movs	r3, #111	; 0x6f
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
 80020f6:	e011      	b.n	800211c <setting_mode+0x58>
			txt_color[i] = set_tcolor;
 80020f8:	206f      	movs	r0, #111	; 0x6f
 80020fa:	183b      	adds	r3, r7, r0
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	4ac5      	ldr	r2, [pc, #788]	; (8002414 <setting_mode+0x350>)
 8002100:	7811      	ldrb	r1, [r2, #0]
 8002102:	4ac8      	ldr	r2, [pc, #800]	; (8002424 <setting_mode+0x360>)
 8002104:	54d1      	strb	r1, [r2, r3]
			back_color[i] = set_bcolor;
 8002106:	183b      	adds	r3, r7, r0
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	4ac4      	ldr	r2, [pc, #784]	; (800241c <setting_mode+0x358>)
 800210c:	7811      	ldrb	r1, [r2, #0]
 800210e:	4ac6      	ldr	r2, [pc, #792]	; (8002428 <setting_mode+0x364>)
 8002110:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0 ; i < 17 ; i++){
 8002112:	183b      	adds	r3, r7, r0
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	183b      	adds	r3, r7, r0
 8002118:	3201      	adds	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	236f      	movs	r3, #111	; 0x6f
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b10      	cmp	r3, #16
 8002124:	d9e8      	bls.n	80020f8 <setting_mode+0x34>
		}
	}

	time_get();
 8002126:	f7ff faef 	bl	8001708 <time_get>
	char bf[3][20];
	POS pos[6] = {{0, 1}, {2, 4}, {2, 6}, {14, 4}, {14, 6}, {15, 1}};
 800212a:	2318      	movs	r3, #24
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	4abf      	ldr	r2, [pc, #764]	; (800242c <setting_mode+0x368>)
 8002130:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002132:	c313      	stmia	r3!, {r0, r1, r4}
 8002134:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002136:	c313      	stmia	r3!, {r0, r1, r4}
	sprintf(bf[0], "%04d.%02d.%02d %02d:%02d:%02d", 2000 + time.year, time.month, time.day, time.hour, time.min, time.sec);
 8002138:	4bbd      	ldr	r3, [pc, #756]	; (8002430 <setting_mode+0x36c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	22fa      	movs	r2, #250	; 0xfa
 800213e:	00d2      	lsls	r2, r2, #3
 8002140:	189a      	adds	r2, r3, r2
 8002142:	4bbb      	ldr	r3, [pc, #748]	; (8002430 <setting_mode+0x36c>)
 8002144:	785b      	ldrb	r3, [r3, #1]
 8002146:	469c      	mov	ip, r3
 8002148:	4bb9      	ldr	r3, [pc, #740]	; (8002430 <setting_mode+0x36c>)
 800214a:	789b      	ldrb	r3, [r3, #2]
 800214c:	001c      	movs	r4, r3
 800214e:	4bb8      	ldr	r3, [pc, #736]	; (8002430 <setting_mode+0x36c>)
 8002150:	78db      	ldrb	r3, [r3, #3]
 8002152:	001d      	movs	r5, r3
 8002154:	4bb6      	ldr	r3, [pc, #728]	; (8002430 <setting_mode+0x36c>)
 8002156:	791b      	ldrb	r3, [r3, #4]
 8002158:	001e      	movs	r6, r3
 800215a:	4bb5      	ldr	r3, [pc, #724]	; (8002430 <setting_mode+0x36c>)
 800215c:	795b      	ldrb	r3, [r3, #5]
 800215e:	49b5      	ldr	r1, [pc, #724]	; (8002434 <setting_mode+0x370>)
 8002160:	2030      	movs	r0, #48	; 0x30
 8002162:	1838      	adds	r0, r7, r0
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	9602      	str	r6, [sp, #8]
 8002168:	9501      	str	r5, [sp, #4]
 800216a:	9400      	str	r4, [sp, #0]
 800216c:	4663      	mov	r3, ip
 800216e:	f003 ff83 	bl	8006078 <siprintf>

	back_color[1] = sel == 0 ? set_tcolor : set_bcolor;
 8002172:	4ba7      	ldr	r3, [pc, #668]	; (8002410 <setting_mode+0x34c>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <setting_mode+0xbc>
 800217a:	4ba6      	ldr	r3, [pc, #664]	; (8002414 <setting_mode+0x350>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	e001      	b.n	8002184 <setting_mode+0xc0>
 8002180:	4ba6      	ldr	r3, [pc, #664]	; (800241c <setting_mode+0x358>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4aa8      	ldr	r2, [pc, #672]	; (8002428 <setting_mode+0x364>)
 8002186:	7053      	strb	r3, [r2, #1]
	back_color[2] = sel == 1 ? set_tcolor : set_bcolor;
 8002188:	4ba1      	ldr	r3, [pc, #644]	; (8002410 <setting_mode+0x34c>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d102      	bne.n	8002196 <setting_mode+0xd2>
 8002190:	4ba0      	ldr	r3, [pc, #640]	; (8002414 <setting_mode+0x350>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	e001      	b.n	800219a <setting_mode+0xd6>
 8002196:	4ba1      	ldr	r3, [pc, #644]	; (800241c <setting_mode+0x358>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	4aa3      	ldr	r2, [pc, #652]	; (8002428 <setting_mode+0x364>)
 800219c:	7093      	strb	r3, [r2, #2]

	txt_color[1] = sel == 0 ? set_bcolor : set_tcolor;
 800219e:	4b9c      	ldr	r3, [pc, #624]	; (8002410 <setting_mode+0x34c>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <setting_mode+0xe8>
 80021a6:	4b9d      	ldr	r3, [pc, #628]	; (800241c <setting_mode+0x358>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	e001      	b.n	80021b0 <setting_mode+0xec>
 80021ac:	4b99      	ldr	r3, [pc, #612]	; (8002414 <setting_mode+0x350>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4a9c      	ldr	r2, [pc, #624]	; (8002424 <setting_mode+0x360>)
 80021b2:	7053      	strb	r3, [r2, #1]
	txt_color[2] = sel == 1 ? set_bcolor : set_tcolor;
 80021b4:	4b96      	ldr	r3, [pc, #600]	; (8002410 <setting_mode+0x34c>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d102      	bne.n	80021c2 <setting_mode+0xfe>
 80021bc:	4b97      	ldr	r3, [pc, #604]	; (800241c <setting_mode+0x358>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	e001      	b.n	80021c6 <setting_mode+0x102>
 80021c2:	4b94      	ldr	r3, [pc, #592]	; (8002414 <setting_mode+0x350>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	4a97      	ldr	r2, [pc, #604]	; (8002424 <setting_mode+0x360>)
 80021c8:	7093      	strb	r3, [r2, #2]

	txt_color[3] = t_color;
 80021ca:	4b93      	ldr	r3, [pc, #588]	; (8002418 <setting_mode+0x354>)
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	4b95      	ldr	r3, [pc, #596]	; (8002424 <setting_mode+0x360>)
 80021d0:	70da      	strb	r2, [r3, #3]
	txt_color[4] = b_color;
 80021d2:	4b93      	ldr	r3, [pc, #588]	; (8002420 <setting_mode+0x35c>)
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	4b93      	ldr	r3, [pc, #588]	; (8002424 <setting_mode+0x360>)
 80021d8:	711a      	strb	r2, [r3, #4]

	sprintf(bf[1], "%s   ", t_color == black ? "Black" : t_color == blue ? "Blue" : t_color == green ? "Green" : t_color == red ? "Red" : t_color == yellow ? "Yellow" : "White");
 80021da:	4b8f      	ldr	r3, [pc, #572]	; (8002418 <setting_mode+0x354>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d019      	beq.n	8002216 <setting_mode+0x152>
 80021e2:	4b8d      	ldr	r3, [pc, #564]	; (8002418 <setting_mode+0x354>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d013      	beq.n	8002212 <setting_mode+0x14e>
 80021ea:	4b8b      	ldr	r3, [pc, #556]	; (8002418 <setting_mode+0x354>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d00d      	beq.n	800220e <setting_mode+0x14a>
 80021f2:	4b89      	ldr	r3, [pc, #548]	; (8002418 <setting_mode+0x354>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d007      	beq.n	800220a <setting_mode+0x146>
 80021fa:	4b87      	ldr	r3, [pc, #540]	; (8002418 <setting_mode+0x354>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d101      	bne.n	8002206 <setting_mode+0x142>
 8002202:	4b8d      	ldr	r3, [pc, #564]	; (8002438 <setting_mode+0x374>)
 8002204:	e008      	b.n	8002218 <setting_mode+0x154>
 8002206:	4b8d      	ldr	r3, [pc, #564]	; (800243c <setting_mode+0x378>)
 8002208:	e006      	b.n	8002218 <setting_mode+0x154>
 800220a:	4b8d      	ldr	r3, [pc, #564]	; (8002440 <setting_mode+0x37c>)
 800220c:	e004      	b.n	8002218 <setting_mode+0x154>
 800220e:	4b8d      	ldr	r3, [pc, #564]	; (8002444 <setting_mode+0x380>)
 8002210:	e002      	b.n	8002218 <setting_mode+0x154>
 8002212:	4b8d      	ldr	r3, [pc, #564]	; (8002448 <setting_mode+0x384>)
 8002214:	e000      	b.n	8002218 <setting_mode+0x154>
 8002216:	4b8d      	ldr	r3, [pc, #564]	; (800244c <setting_mode+0x388>)
 8002218:	498d      	ldr	r1, [pc, #564]	; (8002450 <setting_mode+0x38c>)
 800221a:	2230      	movs	r2, #48	; 0x30
 800221c:	18ba      	adds	r2, r7, r2
 800221e:	3214      	adds	r2, #20
 8002220:	0010      	movs	r0, r2
 8002222:	001a      	movs	r2, r3
 8002224:	f003 ff28 	bl	8006078 <siprintf>
	sprintf(bf[2], "%s   ", b_color == black ? "Black" : b_color == blue ? "Blue" : b_color == green ? "Green" : b_color == red ? "Red" : b_color == yellow ? "Yellow" : "White");
 8002228:	4b7d      	ldr	r3, [pc, #500]	; (8002420 <setting_mode+0x35c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d019      	beq.n	8002264 <setting_mode+0x1a0>
 8002230:	4b7b      	ldr	r3, [pc, #492]	; (8002420 <setting_mode+0x35c>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d013      	beq.n	8002260 <setting_mode+0x19c>
 8002238:	4b79      	ldr	r3, [pc, #484]	; (8002420 <setting_mode+0x35c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d00d      	beq.n	800225c <setting_mode+0x198>
 8002240:	4b77      	ldr	r3, [pc, #476]	; (8002420 <setting_mode+0x35c>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d007      	beq.n	8002258 <setting_mode+0x194>
 8002248:	4b75      	ldr	r3, [pc, #468]	; (8002420 <setting_mode+0x35c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d101      	bne.n	8002254 <setting_mode+0x190>
 8002250:	4b79      	ldr	r3, [pc, #484]	; (8002438 <setting_mode+0x374>)
 8002252:	e008      	b.n	8002266 <setting_mode+0x1a2>
 8002254:	4b79      	ldr	r3, [pc, #484]	; (800243c <setting_mode+0x378>)
 8002256:	e006      	b.n	8002266 <setting_mode+0x1a2>
 8002258:	4b79      	ldr	r3, [pc, #484]	; (8002440 <setting_mode+0x37c>)
 800225a:	e004      	b.n	8002266 <setting_mode+0x1a2>
 800225c:	4b79      	ldr	r3, [pc, #484]	; (8002444 <setting_mode+0x380>)
 800225e:	e002      	b.n	8002266 <setting_mode+0x1a2>
 8002260:	4b79      	ldr	r3, [pc, #484]	; (8002448 <setting_mode+0x384>)
 8002262:	e000      	b.n	8002266 <setting_mode+0x1a2>
 8002264:	4b79      	ldr	r3, [pc, #484]	; (800244c <setting_mode+0x388>)
 8002266:	497a      	ldr	r1, [pc, #488]	; (8002450 <setting_mode+0x38c>)
 8002268:	2430      	movs	r4, #48	; 0x30
 800226a:	193a      	adds	r2, r7, r4
 800226c:	3228      	adds	r2, #40	; 0x28
 800226e:	0010      	movs	r0, r2
 8002270:	001a      	movs	r2, r3
 8002272:	f003 ff01 	bl	8006078 <siprintf>

	char* array[6] = { bf[0], "Text Color:", "Background Color:", bf[1], bf[2], "Back" };
 8002276:	003b      	movs	r3, r7
 8002278:	0021      	movs	r1, r4
 800227a:	187a      	adds	r2, r7, r1
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	003b      	movs	r3, r7
 8002280:	4a74      	ldr	r2, [pc, #464]	; (8002454 <setting_mode+0x390>)
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	003b      	movs	r3, r7
 8002286:	4a74      	ldr	r2, [pc, #464]	; (8002458 <setting_mode+0x394>)
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	003b      	movs	r3, r7
 800228c:	187a      	adds	r2, r7, r1
 800228e:	3214      	adds	r2, #20
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	003b      	movs	r3, r7
 8002294:	187a      	adds	r2, r7, r1
 8002296:	3228      	adds	r2, #40	; 0x28
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	003b      	movs	r3, r7
 800229c:	4a6f      	ldr	r2, [pc, #444]	; (800245c <setting_mode+0x398>)
 800229e:	615a      	str	r2, [r3, #20]
	array_puts(pos, ">Setting", array, txt_color, back_color, 6);
 80022a0:	4c60      	ldr	r4, [pc, #384]	; (8002424 <setting_mode+0x360>)
 80022a2:	003a      	movs	r2, r7
 80022a4:	496e      	ldr	r1, [pc, #440]	; (8002460 <setting_mode+0x39c>)
 80022a6:	2318      	movs	r3, #24
 80022a8:	18f8      	adds	r0, r7, r3
 80022aa:	2306      	movs	r3, #6
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	4b5e      	ldr	r3, [pc, #376]	; (8002428 <setting_mode+0x364>)
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	0023      	movs	r3, r4
 80022b4:	f7ff fb04 	bl	80018c0 <array_puts>

	for(uint8_t i = 0 ; i < 6 ; i++)
 80022b8:	236e      	movs	r3, #110	; 0x6e
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	e01d      	b.n	80022fe <setting_mode+0x23a>
		ILI9341_DrawFilledRectangleCoord(RECT * i, 190, RECT * (i + 1), 240, lcd_color[i]);
 80022c2:	246e      	movs	r4, #110	; 0x6e
 80022c4:	193b      	adds	r3, r7, r4
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2232      	movs	r2, #50	; 0x32
 80022cc:	4353      	muls	r3, r2
 80022ce:	b298      	uxth	r0, r3
 80022d0:	193b      	adds	r3, r7, r4
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2232      	movs	r2, #50	; 0x32
 80022da:	4353      	muls	r3, r2
 80022dc:	b299      	uxth	r1, r3
 80022de:	193b      	adds	r3, r7, r4
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	4b60      	ldr	r3, [pc, #384]	; (8002464 <setting_mode+0x3a0>)
 80022e4:	0052      	lsls	r2, r2, #1
 80022e6:	5ad3      	ldrh	r3, [r2, r3]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	23f0      	movs	r3, #240	; 0xf0
 80022ec:	000a      	movs	r2, r1
 80022ee:	21be      	movs	r1, #190	; 0xbe
 80022f0:	f7fe fc6a 	bl	8000bc8 <ILI9341_DrawFilledRectangleCoord>
	for(uint8_t i = 0 ; i < 6 ; i++)
 80022f4:	193b      	adds	r3, r7, r4
 80022f6:	781a      	ldrb	r2, [r3, #0]
 80022f8:	193b      	adds	r3, r7, r4
 80022fa:	3201      	adds	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	236e      	movs	r3, #110	; 0x6e
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b05      	cmp	r3, #5
 8002306:	d9dc      	bls.n	80022c2 <setting_mode+0x1fe>

	if(curXY.x > 0 || curXY.y > 0){
 8002308:	4b57      	ldr	r3, [pc, #348]	; (8002468 <setting_mode+0x3a4>)
 800230a:	2200      	movs	r2, #0
 800230c:	5e9b      	ldrsh	r3, [r3, r2]
 800230e:	2b00      	cmp	r3, #0
 8002310:	dc05      	bgt.n	800231e <setting_mode+0x25a>
 8002312:	4b55      	ldr	r3, [pc, #340]	; (8002468 <setting_mode+0x3a4>)
 8002314:	2202      	movs	r2, #2
 8002316:	5e9b      	ldrsh	r3, [r3, r2]
 8002318:	2b00      	cmp	r3, #0
 800231a:	dc00      	bgt.n	800231e <setting_mode+0x25a>
 800231c:	e0e0      	b.n	80024e0 <setting_mode+0x41c>
		if(coor_check(15, 15 + strlen("Back"), 1, 1 + 1)){
 800231e:	2302      	movs	r3, #2
 8002320:	2201      	movs	r2, #1
 8002322:	2113      	movs	r1, #19
 8002324:	200f      	movs	r0, #15
 8002326:	f7ff fa0d 	bl	8001744 <coor_check>
 800232a:	1e03      	subs	r3, r0, #0
 800232c:	d00d      	beq.n	800234a <setting_mode+0x286>
			set_tcolor = t_color;
 800232e:	4b3a      	ldr	r3, [pc, #232]	; (8002418 <setting_mode+0x354>)
 8002330:	781a      	ldrb	r2, [r3, #0]
 8002332:	4b38      	ldr	r3, [pc, #224]	; (8002414 <setting_mode+0x350>)
 8002334:	701a      	strb	r2, [r3, #0]
			set_bcolor = b_color;
 8002336:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <setting_mode+0x35c>)
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	4b38      	ldr	r3, [pc, #224]	; (800241c <setting_mode+0x358>)
 800233c:	701a      	strb	r2, [r3, #0]
			reset_value();
 800233e:	f7ff fa63 	bl	8001808 <reset_value>
			buzM = 1;
 8002342:	4b4a      	ldr	r3, [pc, #296]	; (800246c <setting_mode+0x3a8>)
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
			else if(curXY.x < RECT * 4) { if(sel == 0) t_color = red; else b_color = red; }
			else if(curXY.x < RECT * 5) { if(sel == 0) t_color = yellow; else b_color = yellow; }
			else if(curXY.x < RECT * 6) { if(sel == 0) t_color = white; else b_color = white; }
		}
	}
}
 8002348:	e0ca      	b.n	80024e0 <setting_mode+0x41c>
		else if(coor_check(0, strlen(bf[0]), 1, 1 + 1)) { firF = 0; time_setting(); }
 800234a:	2330      	movs	r3, #48	; 0x30
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	0018      	movs	r0, r3
 8002350:	f7fd feda 	bl	8000108 <strlen>
 8002354:	0003      	movs	r3, r0
 8002356:	b299      	uxth	r1, r3
 8002358:	2302      	movs	r3, #2
 800235a:	2201      	movs	r2, #1
 800235c:	2000      	movs	r0, #0
 800235e:	f7ff f9f1 	bl	8001744 <coor_check>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d005      	beq.n	8002372 <setting_mode+0x2ae>
 8002366:	4b29      	ldr	r3, [pc, #164]	; (800240c <setting_mode+0x348>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	f7ff fafa 	bl	8001964 <time_setting>
}
 8002370:	e0b6      	b.n	80024e0 <setting_mode+0x41c>
		else if(coor_check(2, 2 + strlen("Text Color: Yellow"), 4, 4 + 1)) sel = 0;
 8002372:	2305      	movs	r3, #5
 8002374:	2204      	movs	r2, #4
 8002376:	2114      	movs	r1, #20
 8002378:	2002      	movs	r0, #2
 800237a:	f7ff f9e3 	bl	8001744 <coor_check>
 800237e:	1e03      	subs	r3, r0, #0
 8002380:	d003      	beq.n	800238a <setting_mode+0x2c6>
 8002382:	4b23      	ldr	r3, [pc, #140]	; (8002410 <setting_mode+0x34c>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
}
 8002388:	e0aa      	b.n	80024e0 <setting_mode+0x41c>
		else if(coor_check(2, 2 + strlen("Background Color: Yellow"), 6, 6 + 1)) sel = 1;
 800238a:	2307      	movs	r3, #7
 800238c:	2206      	movs	r2, #6
 800238e:	211a      	movs	r1, #26
 8002390:	2002      	movs	r0, #2
 8002392:	f7ff f9d7 	bl	8001744 <coor_check>
 8002396:	1e03      	subs	r3, r0, #0
 8002398:	d003      	beq.n	80023a2 <setting_mode+0x2de>
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <setting_mode+0x34c>)
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
}
 80023a0:	e09e      	b.n	80024e0 <setting_mode+0x41c>
		else if(curXY.y > 190){
 80023a2:	4b31      	ldr	r3, [pc, #196]	; (8002468 <setting_mode+0x3a4>)
 80023a4:	2202      	movs	r2, #2
 80023a6:	5e9b      	ldrsh	r3, [r3, r2]
 80023a8:	2bbe      	cmp	r3, #190	; 0xbe
 80023aa:	dc00      	bgt.n	80023ae <setting_mode+0x2ea>
 80023ac:	e098      	b.n	80024e0 <setting_mode+0x41c>
			if(curXY.x < RECT) { if(sel == 0) t_color = black; else b_color = black; }
 80023ae:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <setting_mode+0x3a4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	5e9b      	ldrsh	r3, [r3, r2]
 80023b4:	2b31      	cmp	r3, #49	; 0x31
 80023b6:	dc0b      	bgt.n	80023d0 <setting_mode+0x30c>
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <setting_mode+0x34c>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d103      	bne.n	80023c8 <setting_mode+0x304>
 80023c0:	4b15      	ldr	r3, [pc, #84]	; (8002418 <setting_mode+0x354>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
}
 80023c6:	e08b      	b.n	80024e0 <setting_mode+0x41c>
			if(curXY.x < RECT) { if(sel == 0) t_color = black; else b_color = black; }
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <setting_mode+0x35c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
}
 80023ce:	e087      	b.n	80024e0 <setting_mode+0x41c>
			else if(curXY.x < RECT * 2) { if(sel == 0) t_color = blue; else b_color = blue; }
 80023d0:	4b25      	ldr	r3, [pc, #148]	; (8002468 <setting_mode+0x3a4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	5e9b      	ldrsh	r3, [r3, r2]
 80023d6:	2b63      	cmp	r3, #99	; 0x63
 80023d8:	dc0b      	bgt.n	80023f2 <setting_mode+0x32e>
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <setting_mode+0x34c>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d103      	bne.n	80023ea <setting_mode+0x326>
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <setting_mode+0x354>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
}
 80023e8:	e07a      	b.n	80024e0 <setting_mode+0x41c>
			else if(curXY.x < RECT * 2) { if(sel == 0) t_color = blue; else b_color = blue; }
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <setting_mode+0x35c>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
}
 80023f0:	e076      	b.n	80024e0 <setting_mode+0x41c>
			else if(curXY.x < RECT * 3) { if(sel == 0) t_color = green; else b_color = green; }
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <setting_mode+0x3a4>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	5e9b      	ldrsh	r3, [r3, r2]
 80023f8:	2b95      	cmp	r3, #149	; 0x95
 80023fa:	dc3d      	bgt.n	8002478 <setting_mode+0x3b4>
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <setting_mode+0x34c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d135      	bne.n	8002470 <setting_mode+0x3ac>
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <setting_mode+0x354>)
 8002406:	2202      	movs	r2, #2
 8002408:	701a      	strb	r2, [r3, #0]
}
 800240a:	e069      	b.n	80024e0 <setting_mode+0x41c>
 800240c:	20000247 	.word	0x20000247
 8002410:	20000250 	.word	0x20000250
 8002414:	2000023d 	.word	0x2000023d
 8002418:	20000028 	.word	0x20000028
 800241c:	20000011 	.word	0x20000011
 8002420:	20000251 	.word	0x20000251
 8002424:	2000022c 	.word	0x2000022c
 8002428:	20000000 	.word	0x20000000
 800242c:	08006abc 	.word	0x08006abc
 8002430:	20000014 	.word	0x20000014
 8002434:	08006a04 	.word	0x08006a04
 8002438:	08006a54 	.word	0x08006a54
 800243c:	08006a5c 	.word	0x08006a5c
 8002440:	08006a64 	.word	0x08006a64
 8002444:	08006a68 	.word	0x08006a68
 8002448:	08006a70 	.word	0x08006a70
 800244c:	08006a78 	.word	0x08006a78
 8002450:	08006a80 	.word	0x08006a80
 8002454:	08006a88 	.word	0x08006a88
 8002458:	08006a94 	.word	0x08006a94
 800245c:	08006aa8 	.word	0x08006aa8
 8002460:	08006ab0 	.word	0x08006ab0
 8002464:	08007c24 	.word	0x08007c24
 8002468:	20000240 	.word	0x20000240
 800246c:	20000248 	.word	0x20000248
			else if(curXY.x < RECT * 3) { if(sel == 0) t_color = green; else b_color = green; }
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <setting_mode+0x424>)
 8002472:	2202      	movs	r2, #2
 8002474:	701a      	strb	r2, [r3, #0]
}
 8002476:	e033      	b.n	80024e0 <setting_mode+0x41c>
			else if(curXY.x < RECT * 4) { if(sel == 0) t_color = red; else b_color = red; }
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <setting_mode+0x428>)
 800247a:	2200      	movs	r2, #0
 800247c:	5e9b      	ldrsh	r3, [r3, r2]
 800247e:	2bc7      	cmp	r3, #199	; 0xc7
 8002480:	dc0b      	bgt.n	800249a <setting_mode+0x3d6>
 8002482:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <setting_mode+0x42c>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d103      	bne.n	8002492 <setting_mode+0x3ce>
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <setting_mode+0x430>)
 800248c:	2203      	movs	r2, #3
 800248e:	701a      	strb	r2, [r3, #0]
}
 8002490:	e026      	b.n	80024e0 <setting_mode+0x41c>
			else if(curXY.x < RECT * 4) { if(sel == 0) t_color = red; else b_color = red; }
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <setting_mode+0x424>)
 8002494:	2203      	movs	r2, #3
 8002496:	701a      	strb	r2, [r3, #0]
}
 8002498:	e022      	b.n	80024e0 <setting_mode+0x41c>
			else if(curXY.x < RECT * 5) { if(sel == 0) t_color = yellow; else b_color = yellow; }
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <setting_mode+0x428>)
 800249c:	2200      	movs	r2, #0
 800249e:	5e9b      	ldrsh	r3, [r3, r2]
 80024a0:	2bf9      	cmp	r3, #249	; 0xf9
 80024a2:	dc0b      	bgt.n	80024bc <setting_mode+0x3f8>
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <setting_mode+0x42c>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d103      	bne.n	80024b4 <setting_mode+0x3f0>
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <setting_mode+0x430>)
 80024ae:	2204      	movs	r2, #4
 80024b0:	701a      	strb	r2, [r3, #0]
}
 80024b2:	e015      	b.n	80024e0 <setting_mode+0x41c>
			else if(curXY.x < RECT * 5) { if(sel == 0) t_color = yellow; else b_color = yellow; }
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <setting_mode+0x424>)
 80024b6:	2204      	movs	r2, #4
 80024b8:	701a      	strb	r2, [r3, #0]
}
 80024ba:	e011      	b.n	80024e0 <setting_mode+0x41c>
			else if(curXY.x < RECT * 6) { if(sel == 0) t_color = white; else b_color = white; }
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <setting_mode+0x428>)
 80024be:	2200      	movs	r2, #0
 80024c0:	5e9a      	ldrsh	r2, [r3, r2]
 80024c2:	2396      	movs	r3, #150	; 0x96
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	429a      	cmp	r2, r3
 80024c8:	da0a      	bge.n	80024e0 <setting_mode+0x41c>
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <setting_mode+0x42c>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d103      	bne.n	80024da <setting_mode+0x416>
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <setting_mode+0x430>)
 80024d4:	2205      	movs	r2, #5
 80024d6:	701a      	strb	r2, [r3, #0]
}
 80024d8:	e002      	b.n	80024e0 <setting_mode+0x41c>
			else if(curXY.x < RECT * 6) { if(sel == 0) t_color = white; else b_color = white; }
 80024da:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <setting_mode+0x424>)
 80024dc:	2205      	movs	r2, #5
 80024de:	701a      	strb	r2, [r3, #0]
}
 80024e0:	46c0      	nop			; (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b01d      	add	sp, #116	; 0x74
 80024e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e8:	20000251 	.word	0x20000251
 80024ec:	20000240 	.word	0x20000240
 80024f0:	20000250 	.word	0x20000250
 80024f4:	20000028 	.word	0x20000028

080024f8 <HAL_SYSTICK_Callback>:

void (*main_fuc[3])(void) = { main_menu, modulation_mode, setting_mode };

void HAL_SYSTICK_Callback(void){
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
	if(buzM) buzC++;
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <HAL_SYSTICK_Callback+0x90>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_SYSTICK_Callback+0x1a>
 8002506:	4b21      	ldr	r3, [pc, #132]	; (800258c <HAL_SYSTICK_Callback+0x94>)
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	3301      	adds	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	4b1f      	ldr	r3, [pc, #124]	; (800258c <HAL_SYSTICK_Callback+0x94>)
 8002510:	801a      	strh	r2, [r3, #0]

	if(buzM == 1){
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_SYSTICK_Callback+0x90>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d112      	bne.n	8002540 <HAL_SYSTICK_Callback+0x48>
		if(buzC < 500) BUZ(1);
 800251a:	4b1c      	ldr	r3, [pc, #112]	; (800258c <HAL_SYSTICK_Callback+0x94>)
 800251c:	881a      	ldrh	r2, [r3, #0]
 800251e:	23fa      	movs	r3, #250	; 0xfa
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	429a      	cmp	r2, r3
 8002524:	d203      	bcs.n	800252e <HAL_SYSTICK_Callback+0x36>
 8002526:	2001      	movs	r0, #1
 8002528:	f7ff f8c0 	bl	80016ac <BUZ>
 800252c:	e008      	b.n	8002540 <HAL_SYSTICK_Callback+0x48>
		else{
			buzM = buzC = 0;
 800252e:	4b17      	ldr	r3, [pc, #92]	; (800258c <HAL_SYSTICK_Callback+0x94>)
 8002530:	2200      	movs	r2, #0
 8002532:	801a      	strh	r2, [r3, #0]
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <HAL_SYSTICK_Callback+0x90>)
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
			BUZ(0);
 800253a:	2000      	movs	r0, #0
 800253c:	f7ff f8b6 	bl	80016ac <BUZ>
		}
	}

	if(touched()) curXY = getPoint(0);
 8002540:	f7fe faca 	bl	8000ad8 <touched>
 8002544:	1e03      	subs	r3, r0, #0
 8002546:	d00d      	beq.n	8002564 <HAL_SYSTICK_Callback+0x6c>
 8002548:	4c11      	ldr	r4, [pc, #68]	; (8002590 <HAL_SYSTICK_Callback+0x98>)
 800254a:	003b      	movs	r3, r7
 800254c:	2100      	movs	r1, #0
 800254e:	0018      	movs	r0, r3
 8002550:	f7fe fad8 	bl	8000b04 <getPoint>
 8002554:	003b      	movs	r3, r7
 8002556:	0020      	movs	r0, r4
 8002558:	0019      	movs	r1, r3
 800255a:	2306      	movs	r3, #6
 800255c:	001a      	movs	r2, r3
 800255e:	f003 fd79 	bl	8006054 <memcpy>
	else curXY = getPoint(1);
}
 8002562:	e00c      	b.n	800257e <HAL_SYSTICK_Callback+0x86>
	else curXY = getPoint(1);
 8002564:	4c0a      	ldr	r4, [pc, #40]	; (8002590 <HAL_SYSTICK_Callback+0x98>)
 8002566:	003b      	movs	r3, r7
 8002568:	2101      	movs	r1, #1
 800256a:	0018      	movs	r0, r3
 800256c:	f7fe faca 	bl	8000b04 <getPoint>
 8002570:	003b      	movs	r3, r7
 8002572:	0020      	movs	r0, r4
 8002574:	0019      	movs	r1, r3
 8002576:	2306      	movs	r3, #6
 8002578:	001a      	movs	r2, r3
 800257a:	f003 fd6b 	bl	8006054 <memcpy>
}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b003      	add	sp, #12
 8002584:	bd90      	pop	{r4, r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	20000248 	.word	0x20000248
 800258c:	2000024a 	.word	0x2000024a
 8002590:	20000240 	.word	0x20000240

08002594 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002598:	f000 fc12 	bl	8002dc0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800259c:	f000 f83c 	bl	8002618 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80025a0:	f000 f9e8 	bl	8002974 <MX_GPIO_Init>
	MX_ADC_Init();
 80025a4:	f000 f8b8 	bl	8002718 <MX_ADC_Init>
	MX_DAC_Init();
 80025a8:	f000 f91a 	bl	80027e0 <MX_DAC_Init>
	MX_DMA_Init();
 80025ac:	f000 f9c4 	bl	8002938 <MX_DMA_Init>
	MX_SPI1_Init();
 80025b0:	f000 f98a 	bl	80028c8 <MX_SPI1_Init>
	MX_I2C1_Init();
 80025b4:	f000 f942 	bl	800283c <MX_I2C1_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80025b8:	f000 f8a0 	bl	80026fc <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <main+0x6c>)
 80025be:	2100      	movs	r1, #0
 80025c0:	0018      	movs	r0, r3
 80025c2:	f001 f98d 	bl	80038e0 <HAL_DAC_Start>
	HAL_ADC_Start_DMA(&hadc, &adcV, 1);
 80025c6:	490f      	ldr	r1, [pc, #60]	; (8002604 <main+0x70>)
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <main+0x74>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 fdff 	bl	80031d0 <HAL_ADC_Start_DMA>
	ILI9341_Init();
 80025d2:	f7fe fdb9 	bl	8001148 <ILI9341_Init>
	INIT_FT6206();
 80025d6:	f7fe fa75 	bl	8000ac4 <INIT_FT6206>
	FT6206_Begin(255);
 80025da:	20ff      	movs	r0, #255	; 0xff
 80025dc:	f7fe f982 	bl	80008e4 <FT6206_Begin>
	LCD_clear(set_bcolor);
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <main+0x78>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7ff f8fb 	bl	80017e0 <LCD_clear>

	start();
 80025ea:	f7ff fc6f 	bl	8001ecc <start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		main_fuc[modeF]();
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <main+0x7c>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	001a      	movs	r2, r3
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <main+0x80>)
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	58d3      	ldr	r3, [r2, r3]
 80025fa:	4798      	blx	r3
 80025fc:	e7f7      	b.n	80025ee <main+0x5a>
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	20000170 	.word	0x20000170
 8002604:	2000024c 	.word	0x2000024c
 8002608:	200000cc 	.word	0x200000cc
 800260c:	20000011 	.word	0x20000011
 8002610:	20000246 	.word	0x20000246
 8002614:	2000001c 	.word	0x2000001c

08002618 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b09d      	sub	sp, #116	; 0x74
 800261c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800261e:	2438      	movs	r4, #56	; 0x38
 8002620:	193b      	adds	r3, r7, r4
 8002622:	0018      	movs	r0, r3
 8002624:	2338      	movs	r3, #56	; 0x38
 8002626:	001a      	movs	r2, r3
 8002628:	2100      	movs	r1, #0
 800262a:	f003 fd1c 	bl	8006066 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800262e:	2324      	movs	r3, #36	; 0x24
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	0018      	movs	r0, r3
 8002634:	2314      	movs	r3, #20
 8002636:	001a      	movs	r2, r3
 8002638:	2100      	movs	r1, #0
 800263a:	f003 fd14 	bl	8006066 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	0018      	movs	r0, r3
 8002642:	2320      	movs	r3, #32
 8002644:	001a      	movs	r2, r3
 8002646:	2100      	movs	r1, #0
 8002648:	f003 fd0d 	bl	8006066 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800264c:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <SystemClock_Config+0xdc>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a29      	ldr	r2, [pc, #164]	; (80026f8 <SystemClock_Config+0xe0>)
 8002652:	401a      	ands	r2, r3
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <SystemClock_Config+0xdc>)
 8002656:	2180      	movs	r1, #128	; 0x80
 8002658:	0109      	lsls	r1, r1, #4
 800265a:	430a      	orrs	r2, r1
 800265c:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800265e:	0021      	movs	r1, r4
 8002660:	187b      	adds	r3, r7, r1
 8002662:	2202      	movs	r2, #2
 8002664:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002666:	187b      	adds	r3, r7, r1
 8002668:	2201      	movs	r2, #1
 800266a:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800266c:	187b      	adds	r3, r7, r1
 800266e:	2210      	movs	r2, #16
 8002670:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002672:	187b      	adds	r3, r7, r1
 8002674:	2202      	movs	r2, #2
 8002676:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002678:	187b      	adds	r3, r7, r1
 800267a:	2200      	movs	r2, #0
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800267e:	187b      	adds	r3, r7, r1
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	02d2      	lsls	r2, r2, #11
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002686:	187b      	adds	r3, r7, r1
 8002688:	2280      	movs	r2, #128	; 0x80
 800268a:	03d2      	lsls	r2, r2, #15
 800268c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800268e:	187b      	adds	r3, r7, r1
 8002690:	0018      	movs	r0, r3
 8002692:	f002 faf1 	bl	8004c78 <HAL_RCC_OscConfig>
 8002696:	1e03      	subs	r3, r0, #0
 8002698:	d001      	beq.n	800269e <SystemClock_Config+0x86>
	{
		Error_Handler();
 800269a:	f000 f9af 	bl	80029fc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800269e:	2124      	movs	r1, #36	; 0x24
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	220f      	movs	r2, #15
 80026a4:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	2203      	movs	r2, #3
 80026aa:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	2200      	movs	r2, #0
 80026b6:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026be:	187b      	adds	r3, r7, r1
 80026c0:	2101      	movs	r1, #1
 80026c2:	0018      	movs	r0, r3
 80026c4:	f002 fe9c 	bl	8005400 <HAL_RCC_ClockConfig>
 80026c8:	1e03      	subs	r3, r0, #0
 80026ca:	d001      	beq.n	80026d0 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 80026cc:	f000 f996 	bl	80029fc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	2208      	movs	r2, #8
 80026d4:	601a      	str	r2, [r3, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	2200      	movs	r2, #0
 80026da:	615a      	str	r2, [r3, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	0018      	movs	r0, r3
 80026e0:	f003 f87c 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 80026e4:	1e03      	subs	r3, r0, #0
 80026e6:	d001      	beq.n	80026ec <SystemClock_Config+0xd4>
	{
		Error_Handler();
 80026e8:	f000 f988 	bl	80029fc <Error_Handler>
	}
}
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b01d      	add	sp, #116	; 0x74
 80026f2:	bd90      	pop	{r4, r7, pc}
 80026f4:	40007000 	.word	0x40007000
 80026f8:	ffffe7ff 	.word	0xffffe7ff

080026fc <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
	/* TIM6_DAC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	2011      	movs	r0, #17
 8002706:	f001 f83b 	bl	8003780 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800270a:	2011      	movs	r0, #17
 800270c:	f001 f84d 	bl	80037aa <HAL_NVIC_EnableIRQ>
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800271e:	003b      	movs	r3, r7
 8002720:	0018      	movs	r0, r3
 8002722:	2308      	movs	r3, #8
 8002724:	001a      	movs	r2, r3
 8002726:	2100      	movs	r1, #0
 8002728:	f003 fc9d 	bl	8006066 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 800272c:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <MX_ADC_Init+0xc0>)
 800272e:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <MX_ADC_Init+0xc4>)
 8002730:	601a      	str	r2, [r3, #0]
	hadc.Init.OversamplingMode = DISABLE;
 8002732:	4b29      	ldr	r3, [pc, #164]	; (80027d8 <MX_ADC_Init+0xc0>)
 8002734:	2200      	movs	r2, #0
 8002736:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002738:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <MX_ADC_Init+0xc0>)
 800273a:	2280      	movs	r2, #128	; 0x80
 800273c:	05d2      	lsls	r2, r2, #23
 800273e:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002740:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <MX_ADC_Init+0xc0>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
	hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <MX_ADC_Init+0xc0>)
 8002748:	2200      	movs	r2, #0
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800274c:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <MX_ADC_Init+0xc0>)
 800274e:	2201      	movs	r2, #1
 8002750:	611a      	str	r2, [r3, #16]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002752:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <MX_ADC_Init+0xc0>)
 8002754:	2200      	movs	r2, #0
 8002756:	60da      	str	r2, [r3, #12]
	hadc.Init.ContinuousConvMode = ENABLE;
 8002758:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <MX_ADC_Init+0xc0>)
 800275a:	2220      	movs	r2, #32
 800275c:	2101      	movs	r1, #1
 800275e:	5499      	strb	r1, [r3, r2]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <MX_ADC_Init+0xc0>)
 8002762:	2221      	movs	r2, #33	; 0x21
 8002764:	2100      	movs	r1, #0
 8002766:	5499      	strb	r1, [r3, r2]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <MX_ADC_Init+0xc0>)
 800276a:	2200      	movs	r2, #0
 800276c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <MX_ADC_Init+0xc0>)
 8002770:	22c2      	movs	r2, #194	; 0xc2
 8002772:	32ff      	adds	r2, #255	; 0xff
 8002774:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.DMAContinuousRequests = ENABLE;
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <MX_ADC_Init+0xc0>)
 8002778:	222c      	movs	r2, #44	; 0x2c
 800277a:	2101      	movs	r1, #1
 800277c:	5499      	strb	r1, [r3, r2]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800277e:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <MX_ADC_Init+0xc0>)
 8002780:	2204      	movs	r2, #4
 8002782:	615a      	str	r2, [r3, #20]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <MX_ADC_Init+0xc0>)
 8002786:	2200      	movs	r2, #0
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.LowPowerAutoWait = DISABLE;
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <MX_ADC_Init+0xc0>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <MX_ADC_Init+0xc0>)
 8002792:	2200      	movs	r2, #0
 8002794:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <MX_ADC_Init+0xc0>)
 8002798:	2200      	movs	r2, #0
 800279a:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 800279c:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <MX_ADC_Init+0xc0>)
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 fba2 	bl	8002ee8 <HAL_ADC_Init>
 80027a4:	1e03      	subs	r3, r0, #0
 80027a6:	d001      	beq.n	80027ac <MX_ADC_Init+0x94>
	{
		Error_Handler();
 80027a8:	f000 f928 	bl	80029fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80027ac:	003b      	movs	r3, r7
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80027b2:	003b      	movs	r3, r7
 80027b4:	2280      	movs	r2, #128	; 0x80
 80027b6:	0152      	lsls	r2, r2, #5
 80027b8:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80027ba:	003a      	movs	r2, r7
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <MX_ADC_Init+0xc0>)
 80027be:	0011      	movs	r1, r2
 80027c0:	0018      	movs	r0, r3
 80027c2:	f000 fd9f 	bl	8003304 <HAL_ADC_ConfigChannel>
 80027c6:	1e03      	subs	r3, r0, #0
 80027c8:	d001      	beq.n	80027ce <MX_ADC_Init+0xb6>
	{
		Error_Handler();
 80027ca:	f000 f917 	bl	80029fc <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	200000cc 	.word	0x200000cc
 80027dc:	40012400 	.word	0x40012400

080027e0 <MX_DAC_Init>:
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 80027e6:	003b      	movs	r3, r7
 80027e8:	0018      	movs	r0, r3
 80027ea:	2308      	movs	r3, #8
 80027ec:	001a      	movs	r2, r3
 80027ee:	2100      	movs	r1, #0
 80027f0:	f003 fc39 	bl	8006066 <memset>

	/* USER CODE END DAC_Init 1 */

	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <MX_DAC_Init+0x54>)
 80027f6:	4a10      	ldr	r2, [pc, #64]	; (8002838 <MX_DAC_Init+0x58>)
 80027f8:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <MX_DAC_Init+0x54>)
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 fff8 	bl	80037f2 <HAL_DAC_Init>
 8002802:	1e03      	subs	r3, r0, #0
 8002804:	d001      	beq.n	800280a <MX_DAC_Init+0x2a>
	{
		Error_Handler();
 8002806:	f000 f8f9 	bl	80029fc <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800280a:	003b      	movs	r3, r7
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002810:	003b      	movs	r3, r7
 8002812:	2200      	movs	r2, #0
 8002814:	605a      	str	r2, [r3, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002816:	0039      	movs	r1, r7
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <MX_DAC_Init+0x54>)
 800281a:	2200      	movs	r2, #0
 800281c:	0018      	movs	r0, r3
 800281e:	f001 f813 	bl	8003848 <HAL_DAC_ConfigChannel>
 8002822:	1e03      	subs	r3, r0, #0
 8002824:	d001      	beq.n	800282a <MX_DAC_Init+0x4a>
	{
		Error_Handler();
 8002826:	f000 f8e9 	bl	80029fc <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	b002      	add	sp, #8
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	20000170 	.word	0x20000170
 8002838:	40007400 	.word	0x40007400

0800283c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002840:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <MX_I2C1_Init+0x80>)
 8002842:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <MX_I2C1_Init+0x84>)
 8002844:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00100413;
 8002846:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <MX_I2C1_Init+0x80>)
 8002848:	4a1e      	ldr	r2, [pc, #120]	; (80028c4 <MX_I2C1_Init+0x88>)
 800284a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <MX_I2C1_Init+0x80>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002852:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <MX_I2C1_Init+0x80>)
 8002854:	2201      	movs	r2, #1
 8002856:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002858:	4b18      	ldr	r3, [pc, #96]	; (80028bc <MX_I2C1_Init+0x80>)
 800285a:	2200      	movs	r2, #0
 800285c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <MX_I2C1_Init+0x80>)
 8002860:	2200      	movs	r2, #0
 8002862:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <MX_I2C1_Init+0x80>)
 8002866:	2200      	movs	r2, #0
 8002868:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800286a:	4b14      	ldr	r3, [pc, #80]	; (80028bc <MX_I2C1_Init+0x80>)
 800286c:	2200      	movs	r2, #0
 800286e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <MX_I2C1_Init+0x80>)
 8002872:	2200      	movs	r2, #0
 8002874:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <MX_I2C1_Init+0x80>)
 8002878:	0018      	movs	r0, r3
 800287a:	f001 fbf1 	bl	8004060 <HAL_I2C_Init>
 800287e:	1e03      	subs	r3, r0, #0
 8002880:	d001      	beq.n	8002886 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8002882:	f000 f8bb 	bl	80029fc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <MX_I2C1_Init+0x80>)
 8002888:	2100      	movs	r1, #0
 800288a:	0018      	movs	r0, r3
 800288c:	f002 f944 	bl	8004b18 <HAL_I2CEx_ConfigAnalogFilter>
 8002890:	1e03      	subs	r3, r0, #0
 8002892:	d001      	beq.n	8002898 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8002894:	f000 f8b2 	bl	80029fc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <MX_I2C1_Init+0x80>)
 800289a:	2100      	movs	r1, #0
 800289c:	0018      	movs	r0, r3
 800289e:	f002 f987 	bl	8004bb0 <HAL_I2CEx_ConfigDigitalFilter>
 80028a2:	1e03      	subs	r3, r0, #0
 80028a4:	d001      	beq.n	80028aa <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80028a6:	f000 f8a9 	bl	80029fc <Error_Handler>
	}

	/** I2C Fast mode Plus enable
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	015b      	lsls	r3, r3, #5
 80028ae:	0018      	movs	r0, r3
 80028b0:	f002 f9ca 	bl	8004c48 <HAL_I2CEx_EnableFastModePlus>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	20000180 	.word	0x20000180
 80028c0:	40005400 	.word	0x40005400
 80028c4:	00100413 	.word	0x00100413

080028c8 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <MX_SPI1_Init+0x68>)
 80028ce:	4a19      	ldr	r2, [pc, #100]	; (8002934 <MX_SPI1_Init+0x6c>)
 80028d0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80028d2:	4b17      	ldr	r3, [pc, #92]	; (8002930 <MX_SPI1_Init+0x68>)
 80028d4:	2282      	movs	r2, #130	; 0x82
 80028d6:	0052      	lsls	r2, r2, #1
 80028d8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <MX_SPI1_Init+0x68>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <MX_SPI1_Init+0x68>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <MX_SPI1_Init+0x68>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <MX_SPI1_Init+0x68>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80028f2:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <MX_SPI1_Init+0x68>)
 80028f4:	2280      	movs	r2, #128	; 0x80
 80028f6:	0092      	lsls	r2, r2, #2
 80028f8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <MX_SPI1_Init+0x68>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <MX_SPI1_Init+0x68>)
 8002902:	2200      	movs	r2, #0
 8002904:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <MX_SPI1_Init+0x68>)
 8002908:	2200      	movs	r2, #0
 800290a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <MX_SPI1_Init+0x68>)
 800290e:	2200      	movs	r2, #0
 8002910:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <MX_SPI1_Init+0x68>)
 8002914:	2207      	movs	r2, #7
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <MX_SPI1_Init+0x68>)
 800291a:	0018      	movs	r0, r3
 800291c:	f003 f8aa 	bl	8005a74 <HAL_SPI_Init>
 8002920:	1e03      	subs	r3, r0, #0
 8002922:	d001      	beq.n	8002928 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8002924:	f000 f86a 	bl	80029fc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	200001d4 	.word	0x200001d4
 8002934:	40013000 	.word	0x40013000

08002938 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <MX_DMA_Init+0x38>)
 8002940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <MX_DMA_Init+0x38>)
 8002944:	2101      	movs	r1, #1
 8002946:	430a      	orrs	r2, r1
 8002948:	631a      	str	r2, [r3, #48]	; 0x30
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <MX_DMA_Init+0x38>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	2201      	movs	r2, #1
 8002950:	4013      	ands	r3, r2
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	2009      	movs	r0, #9
 800295c:	f000 ff10 	bl	8003780 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002960:	2009      	movs	r0, #9
 8002962:	f000 ff22 	bl	80037aa <HAL_NVIC_EnableIRQ>

}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b002      	add	sp, #8
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	40021000 	.word	0x40021000

08002974 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297a:	240c      	movs	r4, #12
 800297c:	193b      	adds	r3, r7, r4
 800297e:	0018      	movs	r0, r3
 8002980:	2314      	movs	r3, #20
 8002982:	001a      	movs	r2, r3
 8002984:	2100      	movs	r1, #0
 8002986:	f003 fb6e 	bl	8006066 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <MX_GPIO_Init+0x80>)
 800298c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <MX_GPIO_Init+0x80>)
 8002990:	2101      	movs	r1, #1
 8002992:	430a      	orrs	r2, r1
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c
 8002996:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <MX_GPIO_Init+0x80>)
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	2201      	movs	r2, #1
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80029a2:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <MX_GPIO_Init+0x80>)
 80029a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <MX_GPIO_Init+0x80>)
 80029a8:	2102      	movs	r1, #2
 80029aa:	430a      	orrs	r2, r1
 80029ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <MX_GPIO_Init+0x80>)
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	2202      	movs	r2, #2
 80029b4:	4013      	ands	r3, r2
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_DC_Pin|BUZ_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <MX_GPIO_Init+0x84>)
 80029bc:	2200      	movs	r2, #0
 80029be:	211b      	movs	r1, #27
 80029c0:	0018      	movs	r0, r3
 80029c2:	f001 fb2f 	bl	8004024 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin BUZ_Pin LCD_RST_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|BUZ_Pin|LCD_RST_Pin;
 80029c6:	0021      	movs	r1, r4
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	221b      	movs	r2, #27
 80029cc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	2201      	movs	r2, #1
 80029d2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	2203      	movs	r2, #3
 80029de:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <MX_GPIO_Init+0x84>)
 80029e4:	0019      	movs	r1, r3
 80029e6:	0010      	movs	r0, r2
 80029e8:	f001 f9a6 	bl	8003d38 <HAL_GPIO_Init>

}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b009      	add	sp, #36	; 0x24
 80029f2:	bd90      	pop	{r4, r7, pc}
 80029f4:	40021000 	.word	0x40021000
 80029f8:	50000400 	.word	0x50000400

080029fc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a00:	b672      	cpsid	i
}
 8002a02:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002a04:	e7fe      	b.n	8002a04 <Error_Handler+0x8>
	...

08002a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <HAL_MspInit+0x24>)
 8002a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_MspInit+0x24>)
 8002a12:	2101      	movs	r1, #1
 8002a14:	430a      	orrs	r2, r1
 8002a16:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <HAL_MspInit+0x24>)
 8002a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_MspInit+0x24>)
 8002a1e:	2180      	movs	r1, #128	; 0x80
 8002a20:	0549      	lsls	r1, r1, #21
 8002a22:	430a      	orrs	r2, r1
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000

08002a30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b089      	sub	sp, #36	; 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	240c      	movs	r4, #12
 8002a3a:	193b      	adds	r3, r7, r4
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	2314      	movs	r3, #20
 8002a40:	001a      	movs	r2, r3
 8002a42:	2100      	movs	r1, #0
 8002a44:	f003 fb0f 	bl	8006066 <memset>
  if(hadc->Instance==ADC1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2a      	ldr	r2, [pc, #168]	; (8002af8 <HAL_ADC_MspInit+0xc8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d14d      	bne.n	8002aee <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a52:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HAL_ADC_MspInit+0xcc>)
 8002a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <HAL_ADC_MspInit+0xcc>)
 8002a58:	2180      	movs	r1, #128	; 0x80
 8002a5a:	0089      	lsls	r1, r1, #2
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a60:	4b26      	ldr	r3, [pc, #152]	; (8002afc <HAL_ADC_MspInit+0xcc>)
 8002a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <HAL_ADC_MspInit+0xcc>)
 8002a66:	2101      	movs	r1, #1
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a6c:	4b23      	ldr	r3, [pc, #140]	; (8002afc <HAL_ADC_MspInit+0xcc>)
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	2201      	movs	r2, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = SOUND_IN_Pin;
 8002a78:	193b      	adds	r3, r7, r4
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a7e:	193b      	adds	r3, r7, r4
 8002a80:	2203      	movs	r2, #3
 8002a82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(SOUND_IN_GPIO_Port, &GPIO_InitStruct);
 8002a8a:	193a      	adds	r2, r7, r4
 8002a8c:	23a0      	movs	r3, #160	; 0xa0
 8002a8e:	05db      	lsls	r3, r3, #23
 8002a90:	0011      	movs	r1, r2
 8002a92:	0018      	movs	r0, r3
 8002a94:	f001 f950 	bl	8003d38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <HAL_ADC_MspInit+0xd0>)
 8002a9a:	4a1a      	ldr	r2, [pc, #104]	; (8002b04 <HAL_ADC_MspInit+0xd4>)
 8002a9c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8002a9e:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <HAL_ADC_MspInit+0xd0>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aa4:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <HAL_ADC_MspInit+0xd0>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_ADC_MspInit+0xd0>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002ab0:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <HAL_ADC_MspInit+0xd0>)
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_ADC_MspInit+0xd0>)
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	0052      	lsls	r2, r2, #1
 8002abc:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <HAL_ADC_MspInit+0xd0>)
 8002ac0:	2280      	movs	r2, #128	; 0x80
 8002ac2:	00d2      	lsls	r2, r2, #3
 8002ac4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <HAL_ADC_MspInit+0xd0>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <HAL_ADC_MspInit+0xd0>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_ADC_MspInit+0xd0>)
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 ff75 	bl	80039c4 <HAL_DMA_Init>
 8002ada:	1e03      	subs	r3, r0, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8002ade:	f7ff ff8d 	bl	80029fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a06      	ldr	r2, [pc, #24]	; (8002b00 <HAL_ADC_MspInit+0xd0>)
 8002ae6:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_ADC_MspInit+0xd0>)
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b009      	add	sp, #36	; 0x24
 8002af4:	bd90      	pop	{r4, r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	40012400 	.word	0x40012400
 8002afc:	40021000 	.word	0x40021000
 8002b00:	20000128 	.word	0x20000128
 8002b04:	40020008 	.word	0x40020008

08002b08 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	240c      	movs	r4, #12
 8002b12:	193b      	adds	r3, r7, r4
 8002b14:	0018      	movs	r0, r3
 8002b16:	2314      	movs	r3, #20
 8002b18:	001a      	movs	r2, r3
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	f003 faa3 	bl	8006066 <memset>
  if(hdac->Instance==DAC)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <HAL_DAC_MspInit+0x70>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d122      	bne.n	8002b70 <HAL_DAC_MspInit+0x68>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <HAL_DAC_MspInit+0x74>)
 8002b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <HAL_DAC_MspInit+0x74>)
 8002b30:	2180      	movs	r1, #128	; 0x80
 8002b32:	0589      	lsls	r1, r1, #22
 8002b34:	430a      	orrs	r2, r1
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b38:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <HAL_DAC_MspInit+0x74>)
 8002b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <HAL_DAC_MspInit+0x74>)
 8002b3e:	2101      	movs	r1, #1
 8002b40:	430a      	orrs	r2, r1
 8002b42:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_DAC_MspInit+0x74>)
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	2201      	movs	r2, #1
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b50:	193b      	adds	r3, r7, r4
 8002b52:	2210      	movs	r2, #16
 8002b54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b56:	193b      	adds	r3, r7, r4
 8002b58:	2203      	movs	r2, #3
 8002b5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	193b      	adds	r3, r7, r4
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	193a      	adds	r2, r7, r4
 8002b64:	23a0      	movs	r3, #160	; 0xa0
 8002b66:	05db      	lsls	r3, r3, #23
 8002b68:	0011      	movs	r1, r2
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f001 f8e4 	bl	8003d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b009      	add	sp, #36	; 0x24
 8002b76:	bd90      	pop	{r4, r7, pc}
 8002b78:	40007400 	.word	0x40007400
 8002b7c:	40021000 	.word	0x40021000

08002b80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	240c      	movs	r4, #12
 8002b8a:	193b      	adds	r3, r7, r4
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	2314      	movs	r3, #20
 8002b90:	001a      	movs	r2, r3
 8002b92:	2100      	movs	r1, #0
 8002b94:	f003 fa67 	bl	8006066 <memset>
  if(hi2c->Instance==I2C1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a17      	ldr	r2, [pc, #92]	; (8002bfc <HAL_I2C_MspInit+0x7c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d128      	bne.n	8002bf4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba2:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <HAL_I2C_MspInit+0x80>)
 8002ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba6:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <HAL_I2C_MspInit+0x80>)
 8002ba8:	2102      	movs	r1, #2
 8002baa:	430a      	orrs	r2, r1
 8002bac:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bae:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <HAL_I2C_MspInit+0x80>)
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bba:	0021      	movs	r1, r4
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	22c0      	movs	r2, #192	; 0xc0
 8002bc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	2212      	movs	r2, #18
 8002bc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	2201      	movs	r2, #1
 8002bcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002bd4:	187b      	adds	r3, r7, r1
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bda:	187b      	adds	r3, r7, r1
 8002bdc:	4a09      	ldr	r2, [pc, #36]	; (8002c04 <HAL_I2C_MspInit+0x84>)
 8002bde:	0019      	movs	r1, r3
 8002be0:	0010      	movs	r0, r2
 8002be2:	f001 f8a9 	bl	8003d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_I2C_MspInit+0x80>)
 8002be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_I2C_MspInit+0x80>)
 8002bec:	2180      	movs	r1, #128	; 0x80
 8002bee:	0389      	lsls	r1, r1, #14
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b009      	add	sp, #36	; 0x24
 8002bfa:	bd90      	pop	{r4, r7, pc}
 8002bfc:	40005400 	.word	0x40005400
 8002c00:	40021000 	.word	0x40021000
 8002c04:	50000400 	.word	0x50000400

08002c08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b089      	sub	sp, #36	; 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	240c      	movs	r4, #12
 8002c12:	193b      	adds	r3, r7, r4
 8002c14:	0018      	movs	r0, r3
 8002c16:	2314      	movs	r3, #20
 8002c18:	001a      	movs	r2, r3
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	f003 fa23 	bl	8006066 <memset>
  if(hspi->Instance==SPI1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <HAL_SPI_MspInit+0x80>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d129      	bne.n	8002c7e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c2a:	4b18      	ldr	r3, [pc, #96]	; (8002c8c <HAL_SPI_MspInit+0x84>)
 8002c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <HAL_SPI_MspInit+0x84>)
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	0149      	lsls	r1, r1, #5
 8002c34:	430a      	orrs	r2, r1
 8002c36:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c38:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <HAL_SPI_MspInit+0x84>)
 8002c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3c:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <HAL_SPI_MspInit+0x84>)
 8002c3e:	2101      	movs	r1, #1
 8002c40:	430a      	orrs	r2, r1
 8002c42:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c44:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <HAL_SPI_MspInit+0x84>)
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c50:	0021      	movs	r1, r4
 8002c52:	187b      	adds	r3, r7, r1
 8002c54:	22e0      	movs	r2, #224	; 0xe0
 8002c56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	187b      	adds	r3, r7, r1
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	2203      	movs	r2, #3
 8002c68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002c6a:	187b      	adds	r3, r7, r1
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c70:	187a      	adds	r2, r7, r1
 8002c72:	23a0      	movs	r3, #160	; 0xa0
 8002c74:	05db      	lsls	r3, r3, #23
 8002c76:	0011      	movs	r1, r2
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f001 f85d 	bl	8003d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b009      	add	sp, #36	; 0x24
 8002c84:	bd90      	pop	{r4, r7, pc}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	40013000 	.word	0x40013000
 8002c8c:	40021000 	.word	0x40021000

08002c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <NMI_Handler+0x4>

08002c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c9a:	e7fe      	b.n	8002c9a <HardFault_Handler+0x4>

08002c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb4:	f000 f8d8 	bl	8002e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002cb8:	f000 fd94 	bl	80037e4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <DMA1_Channel1_IRQHandler+0x14>)
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f000 ff58 	bl	8003b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002cd0:	46c0      	nop			; (mov r8, r8)
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	20000128 	.word	0x20000128

08002cdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002ce0:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <TIM6_DAC_IRQHandler+0x14>)
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 fe40 	bl	8003968 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ce8:	46c0      	nop			; (mov r8, r8)
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	20000170 	.word	0x20000170

08002cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cfc:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <_sbrk+0x5c>)
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <_sbrk+0x60>)
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <_sbrk+0x64>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d102      	bne.n	8002d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <_sbrk+0x64>)
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <_sbrk+0x68>)
 8002d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <_sbrk+0x64>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	18d3      	adds	r3, r2, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d207      	bcs.n	8002d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d24:	f003 f96c 	bl	8006000 <__errno>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	425b      	negs	r3, r3
 8002d32:	e009      	b.n	8002d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <_sbrk+0x64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <_sbrk+0x64>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	18d2      	adds	r2, r2, r3
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <_sbrk+0x64>)
 8002d44:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d46:	68fb      	ldr	r3, [r7, #12]
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b006      	add	sp, #24
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20002000 	.word	0x20002000
 8002d54:	00000400 	.word	0x00000400
 8002d58:	20000254 	.word	0x20000254
 8002d5c:	20000270 	.word	0x20000270

08002d60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002d6c:	480d      	ldr	r0, [pc, #52]	; (8002da4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002d6e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d70:	f7ff fff6 	bl	8002d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d74:	480c      	ldr	r0, [pc, #48]	; (8002da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d76:	490d      	ldr	r1, [pc, #52]	; (8002dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d78:	4a0d      	ldr	r2, [pc, #52]	; (8002db0 <LoopForever+0xe>)
  movs r3, #0
 8002d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d7c:	e002      	b.n	8002d84 <LoopCopyDataInit>

08002d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d82:	3304      	adds	r3, #4

08002d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d88:	d3f9      	bcc.n	8002d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d8c:	4c0a      	ldr	r4, [pc, #40]	; (8002db8 <LoopForever+0x16>)
  movs r3, #0
 8002d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d90:	e001      	b.n	8002d96 <LoopFillZerobss>

08002d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d94:	3204      	adds	r2, #4

08002d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d98:	d3fb      	bcc.n	8002d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d9a:	f003 f937 	bl	800600c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d9e:	f7ff fbf9 	bl	8002594 <main>

08002da2 <LoopForever>:

LoopForever:
    b LoopForever
 8002da2:	e7fe      	b.n	8002da2 <LoopForever>
   ldr   r0, =_estack
 8002da4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dac:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002db0:	08007c8c 	.word	0x08007c8c
  ldr r2, =_sbss
 8002db4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002db8:	2000026c 	.word	0x2000026c

08002dbc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dbc:	e7fe      	b.n	8002dbc <ADC1_COMP_IRQHandler>
	...

08002dc0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dc6:	1dfb      	adds	r3, r7, #7
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_Init+0x3c>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_Init+0x3c>)
 8002dd2:	2140      	movs	r1, #64	; 0x40
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dd8:	2003      	movs	r0, #3
 8002dda:	f000 f811 	bl	8002e00 <HAL_InitTick>
 8002dde:	1e03      	subs	r3, r0, #0
 8002de0:	d003      	beq.n	8002dea <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002de2:	1dfb      	adds	r3, r7, #7
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	e001      	b.n	8002dee <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dea:	f7ff fe0d 	bl	8002a08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dee:	1dfb      	adds	r3, r7, #7
 8002df0:	781b      	ldrb	r3, [r3, #0]
}
 8002df2:	0018      	movs	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b002      	add	sp, #8
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	40022000 	.word	0x40022000

08002e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e00:	b590      	push	{r4, r7, lr}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <HAL_InitTick+0x5c>)
 8002e0a:	681c      	ldr	r4, [r3, #0]
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_InitTick+0x60>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	0019      	movs	r1, r3
 8002e12:	23fa      	movs	r3, #250	; 0xfa
 8002e14:	0098      	lsls	r0, r3, #2
 8002e16:	f7fd f989 	bl	800012c <__udivsi3>
 8002e1a:	0003      	movs	r3, r0
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	0020      	movs	r0, r4
 8002e20:	f7fd f984 	bl	800012c <__udivsi3>
 8002e24:	0003      	movs	r3, r0
 8002e26:	0018      	movs	r0, r3
 8002e28:	f000 fccf 	bl	80037ca <HAL_SYSTICK_Config>
 8002e2c:	1e03      	subs	r3, r0, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e00f      	b.n	8002e54 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d80b      	bhi.n	8002e52 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	425b      	negs	r3, r3
 8002e40:	2200      	movs	r2, #0
 8002e42:	0018      	movs	r0, r3
 8002e44:	f000 fc9c 	bl	8003780 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_InitTick+0x64>)
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e000      	b.n	8002e54 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b003      	add	sp, #12
 8002e5a:	bd90      	pop	{r4, r7, pc}
 8002e5c:	2000002c 	.word	0x2000002c
 8002e60:	20000034 	.word	0x20000034
 8002e64:	20000030 	.word	0x20000030

08002e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_IncTick+0x1c>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	001a      	movs	r2, r3
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_IncTick+0x20>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	18d2      	adds	r2, r2, r3
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <HAL_IncTick+0x20>)
 8002e7a:	601a      	str	r2, [r3, #0]
}
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	20000034 	.word	0x20000034
 8002e88:	20000258 	.word	0x20000258

08002e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e90:	4b02      	ldr	r3, [pc, #8]	; (8002e9c <HAL_GetTick+0x10>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	20000258 	.word	0x20000258

08002ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ea8:	f7ff fff0 	bl	8002e8c <HAL_GetTick>
 8002eac:	0003      	movs	r3, r0
 8002eae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	d005      	beq.n	8002ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_Delay+0x44>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	001a      	movs	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	f7ff ffe0 	bl	8002e8c <HAL_GetTick>
 8002ecc:	0002      	movs	r2, r0
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d8f7      	bhi.n	8002ec8 <HAL_Delay+0x28>
  {
  }
}
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b004      	add	sp, #16
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	20000034 	.word	0x20000034

08002ee8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e159      	b.n	80031ae <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2250      	movs	r2, #80	; 0x50
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	0018      	movs	r0, r3
 8002f14:	f7ff fd8c 	bl	8002a30 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d005      	beq.n	8002f30 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002f2e:	d00b      	beq.n	8002f48 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f34:	2210      	movs	r2, #16
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2250      	movs	r2, #80	; 0x50
 8002f40:	2100      	movs	r1, #0
 8002f42:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e132      	b.n	80031ae <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	4a9a      	ldr	r2, [pc, #616]	; (80031b8 <HAL_ADC_Init+0x2d0>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2202      	movs	r2, #2
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d108      	bne.n	8002f78 <HAL_ADC_Init+0x90>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_ADC_Init+0x90>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <HAL_ADC_Init+0x92>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d149      	bne.n	8003012 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	23c0      	movs	r3, #192	; 0xc0
 8002f84:	061b      	lsls	r3, r3, #24
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d00b      	beq.n	8002fa2 <HAL_ADC_Init+0xba>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	05db      	lsls	r3, r3, #23
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d005      	beq.n	8002fa2 <HAL_ADC_Init+0xba>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	061b      	lsls	r3, r3, #24
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d111      	bne.n	8002fc6 <HAL_ADC_Init+0xde>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0092      	lsls	r2, r2, #2
 8002fae:	0892      	lsrs	r2, r2, #2
 8002fb0:	611a      	str	r2, [r3, #16]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6919      	ldr	r1, [r3, #16]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	611a      	str	r2, [r3, #16]
 8002fc4:	e014      	b.n	8002ff0 <HAL_ADC_Init+0x108>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	0092      	lsls	r2, r2, #2
 8002fd2:	0892      	lsrs	r2, r2, #2
 8002fd4:	611a      	str	r2, [r3, #16]
 8002fd6:	4b79      	ldr	r3, [pc, #484]	; (80031bc <HAL_ADC_Init+0x2d4>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4b78      	ldr	r3, [pc, #480]	; (80031bc <HAL_ADC_Init+0x2d4>)
 8002fdc:	4978      	ldr	r1, [pc, #480]	; (80031c0 <HAL_ADC_Init+0x2d8>)
 8002fde:	400a      	ands	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	4b76      	ldr	r3, [pc, #472]	; (80031bc <HAL_ADC_Init+0x2d4>)
 8002fe4:	6819      	ldr	r1, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	4b74      	ldr	r3, [pc, #464]	; (80031bc <HAL_ADC_Init+0x2d4>)
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2118      	movs	r1, #24
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68d9      	ldr	r1, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003012:	4b6a      	ldr	r3, [pc, #424]	; (80031bc <HAL_ADC_Init+0x2d4>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4b69      	ldr	r3, [pc, #420]	; (80031bc <HAL_ADC_Init+0x2d4>)
 8003018:	496a      	ldr	r1, [pc, #424]	; (80031c4 <HAL_ADC_Init+0x2dc>)
 800301a:	400a      	ands	r2, r1
 800301c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800301e:	4b67      	ldr	r3, [pc, #412]	; (80031bc <HAL_ADC_Init+0x2d4>)
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	065a      	lsls	r2, r3, #25
 8003028:	4b64      	ldr	r3, [pc, #400]	; (80031bc <HAL_ADC_Init+0x2d4>)
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	055b      	lsls	r3, r3, #21
 8003038:	4013      	ands	r3, r2
 800303a:	d108      	bne.n	800304e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	0549      	lsls	r1, r1, #21
 800304a:	430a      	orrs	r2, r1
 800304c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	495b      	ldr	r1, [pc, #364]	; (80031c8 <HAL_ADC_Init+0x2e0>)
 800305a:	400a      	ands	r2, r1
 800305c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68d9      	ldr	r1, [r3, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d101      	bne.n	8003074 <HAL_ADC_Init+0x18c>
 8003070:	2304      	movs	r3, #4
 8003072:	e000      	b.n	8003076 <HAL_ADC_Init+0x18e>
 8003074:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003076:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2020      	movs	r0, #32
 800307c:	5c1b      	ldrb	r3, [r3, r0]
 800307e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003080:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	202c      	movs	r0, #44	; 0x2c
 8003086:	5c1b      	ldrb	r3, [r3, r0]
 8003088:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800308a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003090:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003098:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80030a0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ae:	23c2      	movs	r3, #194	; 0xc2
 80030b0:	33ff      	adds	r3, #255	; 0xff
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d00b      	beq.n	80030ce <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68d9      	ldr	r1, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2221      	movs	r2, #33	; 0x21
 80030d2:	5c9b      	ldrb	r3, [r3, r2]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d11a      	bne.n	800310e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	5c9b      	ldrb	r3, [r3, r2]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2180      	movs	r1, #128	; 0x80
 80030ee:	0249      	lsls	r1, r1, #9
 80030f0:	430a      	orrs	r2, r1
 80030f2:	60da      	str	r2, [r3, #12]
 80030f4:	e00b      	b.n	800310e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	2220      	movs	r2, #32
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	2201      	movs	r2, #1
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003112:	2b01      	cmp	r3, #1
 8003114:	d11f      	bne.n	8003156 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	492a      	ldr	r1, [pc, #168]	; (80031cc <HAL_ADC_Init+0x2e4>)
 8003122:	400a      	ands	r2, r1
 8003124:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6919      	ldr	r1, [r3, #16]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003134:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800313a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2101      	movs	r1, #1
 8003150:	430a      	orrs	r2, r1
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	e00e      	b.n	8003174 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2201      	movs	r2, #1
 800315e:	4013      	ands	r3, r2
 8003160:	2b01      	cmp	r3, #1
 8003162:	d107      	bne.n	8003174 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2101      	movs	r1, #1
 8003170:	438a      	bics	r2, r1
 8003172:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2107      	movs	r1, #7
 8003180:	438a      	bics	r2, r1
 8003182:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6959      	ldr	r1, [r3, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	2203      	movs	r2, #3
 80031a2:	4393      	bics	r3, r2
 80031a4:	2201      	movs	r2, #1
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	0018      	movs	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b002      	add	sp, #8
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	fffffefd 	.word	0xfffffefd
 80031bc:	40012708 	.word	0x40012708
 80031c0:	ffc3ffff 	.word	0xffc3ffff
 80031c4:	fdffffff 	.word	0xfdffffff
 80031c8:	fffe0219 	.word	0xfffe0219
 80031cc:	fffffc03 	.word	0xfffffc03

080031d0 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031dc:	2317      	movs	r3, #23
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2204      	movs	r2, #4
 80031ec:	4013      	ands	r3, r2
 80031ee:	d15e      	bne.n	80032ae <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2250      	movs	r2, #80	; 0x50
 80031f4:	5c9b      	ldrb	r3, [r3, r2]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_Start_DMA+0x2e>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e05e      	b.n	80032bc <HAL_ADC_Start_DMA+0xec>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2250      	movs	r2, #80	; 0x50
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2101      	movs	r1, #1
 8003212:	430a      	orrs	r2, r1
 8003214:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d007      	beq.n	800322e <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800321e:	2317      	movs	r3, #23
 8003220:	18fc      	adds	r4, r7, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	0018      	movs	r0, r3
 8003226:	f000 f8f3 	bl	8003410 <ADC_Enable>
 800322a:	0003      	movs	r3, r0
 800322c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800322e:	2317      	movs	r3, #23
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d13e      	bne.n	80032b6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <HAL_ADC_Start_DMA+0xf4>)
 800323e:	4013      	ands	r3, r2
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	0052      	lsls	r2, r2, #1
 8003244:	431a      	orrs	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2250      	movs	r2, #80	; 0x50
 8003254:	2100      	movs	r1, #0
 8003256:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325c:	4a1a      	ldr	r2, [pc, #104]	; (80032c8 <HAL_ADC_Start_DMA+0xf8>)
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003264:	4a19      	ldr	r2, [pc, #100]	; (80032cc <HAL_ADC_Start_DMA+0xfc>)
 8003266:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326c:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <HAL_ADC_Start_DMA+0x100>)
 800326e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	221c      	movs	r2, #28
 8003276:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2110      	movs	r1, #16
 8003284:	430a      	orrs	r2, r1
 8003286:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3340      	adds	r3, #64	; 0x40
 8003292:	0019      	movs	r1, r3
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f000 fc0c 	bl	8003ab4 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2104      	movs	r1, #4
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	e003      	b.n	80032b6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032ae:	2317      	movs	r3, #23
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	2202      	movs	r2, #2
 80032b4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80032b6:	2317      	movs	r3, #23
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	781b      	ldrb	r3, [r3, #0]
}
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	b007      	add	sp, #28
 80032c2:	bd90      	pop	{r4, r7, pc}
 80032c4:	fffff0fe 	.word	0xfffff0fe
 80032c8:	080034e1 	.word	0x080034e1
 80032cc:	08003595 	.word	0x08003595
 80032d0:	080035b3 	.word	0x080035b3

080032d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b002      	add	sp, #8
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b002      	add	sp, #8
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2250      	movs	r2, #80	; 0x50
 8003312:	5c9b      	ldrb	r3, [r3, r2]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_ADC_ConfigChannel+0x18>
 8003318:	2302      	movs	r3, #2
 800331a:	e06c      	b.n	80033f6 <HAL_ADC_ConfigChannel+0xf2>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2250      	movs	r2, #80	; 0x50
 8003320:	2101      	movs	r1, #1
 8003322:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2204      	movs	r2, #4
 800332c:	4013      	ands	r3, r2
 800332e:	d00b      	beq.n	8003348 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003334:	2220      	movs	r2, #32
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2250      	movs	r2, #80	; 0x50
 8003340:	2100      	movs	r1, #0
 8003342:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e056      	b.n	80033f6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a2c      	ldr	r2, [pc, #176]	; (8003400 <HAL_ADC_ConfigChannel+0xfc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d028      	beq.n	80033a4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	035b      	lsls	r3, r3, #13
 800335e:	0b5a      	lsrs	r2, r3, #13
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	02db      	lsls	r3, r3, #11
 8003370:	4013      	ands	r3, r2
 8003372:	d009      	beq.n	8003388 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8003374:	4b23      	ldr	r3, [pc, #140]	; (8003404 <HAL_ADC_ConfigChannel+0x100>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b22      	ldr	r3, [pc, #136]	; (8003404 <HAL_ADC_ConfigChannel+0x100>)
 800337a:	2180      	movs	r1, #128	; 0x80
 800337c:	0409      	lsls	r1, r1, #16
 800337e:	430a      	orrs	r2, r1
 8003380:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003382:	200a      	movs	r0, #10
 8003384:	f000 f930 	bl	80035e8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	029b      	lsls	r3, r3, #10
 8003390:	4013      	ands	r3, r2
 8003392:	d02b      	beq.n	80033ec <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8003394:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <HAL_ADC_ConfigChannel+0x100>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <HAL_ADC_ConfigChannel+0x100>)
 800339a:	2180      	movs	r1, #128	; 0x80
 800339c:	03c9      	lsls	r1, r1, #15
 800339e:	430a      	orrs	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e023      	b.n	80033ec <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	035b      	lsls	r3, r3, #13
 80033b0:	0b5b      	lsrs	r3, r3, #13
 80033b2:	43d9      	mvns	r1, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	400a      	ands	r2, r1
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	02db      	lsls	r3, r3, #11
 80033c4:	4013      	ands	r3, r2
 80033c6:	d005      	beq.n	80033d4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_ADC_ConfigChannel+0x100>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <HAL_ADC_ConfigChannel+0x100>)
 80033ce:	490e      	ldr	r1, [pc, #56]	; (8003408 <HAL_ADC_ConfigChannel+0x104>)
 80033d0:	400a      	ands	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	029b      	lsls	r3, r3, #10
 80033dc:	4013      	ands	r3, r2
 80033de:	d005      	beq.n	80033ec <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80033e0:	4b08      	ldr	r3, [pc, #32]	; (8003404 <HAL_ADC_ConfigChannel+0x100>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b07      	ldr	r3, [pc, #28]	; (8003404 <HAL_ADC_ConfigChannel+0x100>)
 80033e6:	4909      	ldr	r1, [pc, #36]	; (800340c <HAL_ADC_ConfigChannel+0x108>)
 80033e8:	400a      	ands	r2, r1
 80033ea:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2250      	movs	r2, #80	; 0x50
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	0018      	movs	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b002      	add	sp, #8
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	00001001 	.word	0x00001001
 8003404:	40012708 	.word	0x40012708
 8003408:	ff7fffff 	.word	0xff7fffff
 800340c:	ffbfffff 	.word	0xffbfffff

08003410 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2203      	movs	r2, #3
 8003424:	4013      	ands	r3, r2
 8003426:	2b01      	cmp	r3, #1
 8003428:	d108      	bne.n	800343c <ADC_Enable+0x2c>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2201      	movs	r2, #1
 8003432:	4013      	ands	r3, r2
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <ADC_Enable+0x2c>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <ADC_Enable+0x2e>
 800343c:	2300      	movs	r3, #0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d146      	bne.n	80034d0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a24      	ldr	r2, [pc, #144]	; (80034dc <ADC_Enable+0xcc>)
 800344a:	4013      	ands	r3, r2
 800344c:	d00d      	beq.n	800346a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	2210      	movs	r2, #16
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	2201      	movs	r2, #1
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e033      	b.n	80034d2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2101      	movs	r1, #1
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800347a:	2001      	movs	r0, #1
 800347c:	f000 f8b4 	bl	80035e8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003480:	f7ff fd04 	bl	8002e8c <HAL_GetTick>
 8003484:	0003      	movs	r3, r0
 8003486:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003488:	e01b      	b.n	80034c2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800348a:	f7ff fcff 	bl	8002e8c <HAL_GetTick>
 800348e:	0002      	movs	r2, r0
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b0a      	cmp	r3, #10
 8003496:	d914      	bls.n	80034c2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2201      	movs	r2, #1
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d00d      	beq.n	80034c2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	2210      	movs	r2, #16
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	2201      	movs	r2, #1
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e007      	b.n	80034d2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2201      	movs	r2, #1
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d1dc      	bne.n	800348a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	0018      	movs	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b004      	add	sp, #16
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	80000017 	.word	0x80000017

080034e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f2:	2250      	movs	r2, #80	; 0x50
 80034f4:	4013      	ands	r3, r2
 80034f6:	d141      	bne.n	800357c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	0092      	lsls	r2, r2, #2
 8003500:	431a      	orrs	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	23c0      	movs	r3, #192	; 0xc0
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	4013      	ands	r3, r2
 8003512:	d12e      	bne.n	8003572 <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800351a:	2b00      	cmp	r3, #0
 800351c:	d129      	bne.n	8003572 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2208      	movs	r2, #8
 8003526:	4013      	ands	r3, r2
 8003528:	2b08      	cmp	r3, #8
 800352a:	d122      	bne.n	8003572 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2204      	movs	r2, #4
 8003534:	4013      	ands	r3, r2
 8003536:	d110      	bne.n	800355a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	210c      	movs	r1, #12
 8003544:	438a      	bics	r2, r1
 8003546:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354c:	4a10      	ldr	r2, [pc, #64]	; (8003590 <ADC_DMAConvCplt+0xb0>)
 800354e:	4013      	ands	r3, r2
 8003550:	2201      	movs	r2, #1
 8003552:	431a      	orrs	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	655a      	str	r2, [r3, #84]	; 0x54
 8003558:	e00b      	b.n	8003572 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	2220      	movs	r2, #32
 8003560:	431a      	orrs	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	2201      	movs	r2, #1
 800356c:	431a      	orrs	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	0018      	movs	r0, r3
 8003576:	f7ff fead 	bl	80032d4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800357a:	e005      	b.n	8003588 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	0010      	movs	r0, r2
 8003586:	4798      	blx	r3
}
 8003588:	46c0      	nop			; (mov r8, r8)
 800358a:	46bd      	mov	sp, r7
 800358c:	b004      	add	sp, #16
 800358e:	bd80      	pop	{r7, pc}
 8003590:	fffffefe 	.word	0xfffffefe

08003594 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff fe9d 	bl	80032e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b004      	add	sp, #16
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	2240      	movs	r2, #64	; 0x40
 80035c6:	431a      	orrs	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	2204      	movs	r2, #4
 80035d2:	431a      	orrs	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	0018      	movs	r0, r3
 80035dc:	f7ff fe8a 	bl	80032f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b004      	add	sp, #16
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <ADC_DelayMicroSecond+0x38>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	490b      	ldr	r1, [pc, #44]	; (8003624 <ADC_DelayMicroSecond+0x3c>)
 80035f6:	0018      	movs	r0, r3
 80035f8:	f7fc fd98 	bl	800012c <__udivsi3>
 80035fc:	0003      	movs	r3, r0
 80035fe:	001a      	movs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4353      	muls	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8003606:	e002      	b.n	800360e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3b01      	subs	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f9      	bne.n	8003608 <ADC_DelayMicroSecond+0x20>
  }
}
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	b004      	add	sp, #16
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	2000002c 	.word	0x2000002c
 8003624:	000f4240 	.word	0x000f4240

08003628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	0002      	movs	r2, r0
 8003630:	1dfb      	adds	r3, r7, #7
 8003632:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003634:	1dfb      	adds	r3, r7, #7
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b7f      	cmp	r3, #127	; 0x7f
 800363a:	d809      	bhi.n	8003650 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363c:	1dfb      	adds	r3, r7, #7
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	001a      	movs	r2, r3
 8003642:	231f      	movs	r3, #31
 8003644:	401a      	ands	r2, r3
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <__NVIC_EnableIRQ+0x30>)
 8003648:	2101      	movs	r1, #1
 800364a:	4091      	lsls	r1, r2
 800364c:	000a      	movs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]
  }
}
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	b002      	add	sp, #8
 8003656:	bd80      	pop	{r7, pc}
 8003658:	e000e100 	.word	0xe000e100

0800365c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	0002      	movs	r2, r0
 8003664:	6039      	str	r1, [r7, #0]
 8003666:	1dfb      	adds	r3, r7, #7
 8003668:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800366a:	1dfb      	adds	r3, r7, #7
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b7f      	cmp	r3, #127	; 0x7f
 8003670:	d828      	bhi.n	80036c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003672:	4a2f      	ldr	r2, [pc, #188]	; (8003730 <__NVIC_SetPriority+0xd4>)
 8003674:	1dfb      	adds	r3, r7, #7
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	b25b      	sxtb	r3, r3
 800367a:	089b      	lsrs	r3, r3, #2
 800367c:	33c0      	adds	r3, #192	; 0xc0
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	589b      	ldr	r3, [r3, r2]
 8003682:	1dfa      	adds	r2, r7, #7
 8003684:	7812      	ldrb	r2, [r2, #0]
 8003686:	0011      	movs	r1, r2
 8003688:	2203      	movs	r2, #3
 800368a:	400a      	ands	r2, r1
 800368c:	00d2      	lsls	r2, r2, #3
 800368e:	21ff      	movs	r1, #255	; 0xff
 8003690:	4091      	lsls	r1, r2
 8003692:	000a      	movs	r2, r1
 8003694:	43d2      	mvns	r2, r2
 8003696:	401a      	ands	r2, r3
 8003698:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	019b      	lsls	r3, r3, #6
 800369e:	22ff      	movs	r2, #255	; 0xff
 80036a0:	401a      	ands	r2, r3
 80036a2:	1dfb      	adds	r3, r7, #7
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	0018      	movs	r0, r3
 80036a8:	2303      	movs	r3, #3
 80036aa:	4003      	ands	r3, r0
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036b0:	481f      	ldr	r0, [pc, #124]	; (8003730 <__NVIC_SetPriority+0xd4>)
 80036b2:	1dfb      	adds	r3, r7, #7
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	b25b      	sxtb	r3, r3
 80036b8:	089b      	lsrs	r3, r3, #2
 80036ba:	430a      	orrs	r2, r1
 80036bc:	33c0      	adds	r3, #192	; 0xc0
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80036c2:	e031      	b.n	8003728 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036c4:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <__NVIC_SetPriority+0xd8>)
 80036c6:	1dfb      	adds	r3, r7, #7
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	0019      	movs	r1, r3
 80036cc:	230f      	movs	r3, #15
 80036ce:	400b      	ands	r3, r1
 80036d0:	3b08      	subs	r3, #8
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	3306      	adds	r3, #6
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	18d3      	adds	r3, r2, r3
 80036da:	3304      	adds	r3, #4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	1dfa      	adds	r2, r7, #7
 80036e0:	7812      	ldrb	r2, [r2, #0]
 80036e2:	0011      	movs	r1, r2
 80036e4:	2203      	movs	r2, #3
 80036e6:	400a      	ands	r2, r1
 80036e8:	00d2      	lsls	r2, r2, #3
 80036ea:	21ff      	movs	r1, #255	; 0xff
 80036ec:	4091      	lsls	r1, r2
 80036ee:	000a      	movs	r2, r1
 80036f0:	43d2      	mvns	r2, r2
 80036f2:	401a      	ands	r2, r3
 80036f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	22ff      	movs	r2, #255	; 0xff
 80036fc:	401a      	ands	r2, r3
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	0018      	movs	r0, r3
 8003704:	2303      	movs	r3, #3
 8003706:	4003      	ands	r3, r0
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800370c:	4809      	ldr	r0, [pc, #36]	; (8003734 <__NVIC_SetPriority+0xd8>)
 800370e:	1dfb      	adds	r3, r7, #7
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	001c      	movs	r4, r3
 8003714:	230f      	movs	r3, #15
 8003716:	4023      	ands	r3, r4
 8003718:	3b08      	subs	r3, #8
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	430a      	orrs	r2, r1
 800371e:	3306      	adds	r3, #6
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	18c3      	adds	r3, r0, r3
 8003724:	3304      	adds	r3, #4
 8003726:	601a      	str	r2, [r3, #0]
}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b003      	add	sp, #12
 800372e:	bd90      	pop	{r4, r7, pc}
 8003730:	e000e100 	.word	0xe000e100
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	1e5a      	subs	r2, r3, #1
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	045b      	lsls	r3, r3, #17
 8003748:	429a      	cmp	r2, r3
 800374a:	d301      	bcc.n	8003750 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800374c:	2301      	movs	r3, #1
 800374e:	e010      	b.n	8003772 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <SysTick_Config+0x44>)
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	3a01      	subs	r2, #1
 8003756:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003758:	2301      	movs	r3, #1
 800375a:	425b      	negs	r3, r3
 800375c:	2103      	movs	r1, #3
 800375e:	0018      	movs	r0, r3
 8003760:	f7ff ff7c 	bl	800365c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <SysTick_Config+0x44>)
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800376a:	4b04      	ldr	r3, [pc, #16]	; (800377c <SysTick_Config+0x44>)
 800376c:	2207      	movs	r2, #7
 800376e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003770:	2300      	movs	r3, #0
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	b002      	add	sp, #8
 8003778:	bd80      	pop	{r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	e000e010 	.word	0xe000e010

08003780 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	210f      	movs	r1, #15
 800378c:	187b      	adds	r3, r7, r1
 800378e:	1c02      	adds	r2, r0, #0
 8003790:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	187b      	adds	r3, r7, r1
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b25b      	sxtb	r3, r3
 800379a:	0011      	movs	r1, r2
 800379c:	0018      	movs	r0, r3
 800379e:	f7ff ff5d 	bl	800365c <__NVIC_SetPriority>
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b004      	add	sp, #16
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	0002      	movs	r2, r0
 80037b2:	1dfb      	adds	r3, r7, #7
 80037b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037b6:	1dfb      	adds	r3, r7, #7
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	b25b      	sxtb	r3, r3
 80037bc:	0018      	movs	r0, r3
 80037be:	f7ff ff33 	bl	8003628 <__NVIC_EnableIRQ>
}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b002      	add	sp, #8
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7ff ffaf 	bl	8003738 <SysTick_Config>
 80037da:	0003      	movs	r3, r0
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80037e8:	f7fe fe86 	bl	80024f8 <HAL_SYSTICK_Callback>
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e015      	b.n	8003830 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	791b      	ldrb	r3, [r3, #4]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	0018      	movs	r0, r3
 8003818:	f7ff f976 	bl	8002b08 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	60da      	str	r2, [r3, #12]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	b002      	add	sp, #8
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b002      	add	sp, #8
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	795b      	ldrb	r3, [r3, #5]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_DAC_ConfigChannel+0x20>
 8003864:	2302      	movs	r3, #2
 8003866:	e035      	b.n	80038d4 <HAL_DAC_ConfigChannel+0x8c>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2202      	movs	r2, #2
 8003872:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800387c:	4a17      	ldr	r2, [pc, #92]	; (80038dc <HAL_DAC_ConfigChannel+0x94>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	409a      	lsls	r2, r3
 8003882:	0013      	movs	r3, r2
 8003884:	43da      	mvns	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	4013      	ands	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	409a      	lsls	r2, r3
 800389e:	0013      	movs	r3, r2
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	21c0      	movs	r1, #192	; 0xc0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4099      	lsls	r1, r3
 80038ba:	000b      	movs	r3, r1
 80038bc:	43d9      	mvns	r1, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	400a      	ands	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	0018      	movs	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b006      	add	sp, #24
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	00000ffe 	.word	0x00000ffe

080038e0 <HAL_DAC_Start>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	795b      	ldrb	r3, [r3, #5]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_DAC_Start+0x1e>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e030      	b.n	8003960 <HAL_DAC_Start+0x80>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	2201      	movs	r2, #1
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	409a      	lsls	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]

  tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2204      	movs	r2, #4
 8003926:	4013      	ands	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
  tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2238      	movs	r2, #56	; 0x38
 8003932:	4013      	ands	r3, r2
 8003934:	60bb      	str	r3, [r7, #8]
  /* Check if software trigger enabled */
  if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b04      	cmp	r3, #4
 800393a:	d10a      	bne.n	8003952 <HAL_DAC_Start+0x72>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b38      	cmp	r3, #56	; 0x38
 8003940:	d107      	bne.n	8003952 <HAL_DAC_Start+0x72>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2101      	movs	r1, #1
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	0018      	movs	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	b004      	add	sp, #16
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check underrun flag of DAC channel 1 */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	019b      	lsls	r3, r3, #6
 800397a:	401a      	ands	r2, r3
 800397c:	2380      	movs	r3, #128	; 0x80
 800397e:	019b      	lsls	r3, r3, #6
 8003980:	429a      	cmp	r2, r3
 8003982:	d119      	bne.n	80039b8 <HAL_DAC_IRQHandler+0x50>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2204      	movs	r2, #4
 8003988:	711a      	strb	r2, [r3, #4]

    /* Set DAC error code to chanel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2201      	movs	r2, #1
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60da      	str	r2, [r3, #12]

    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	0192      	lsls	r2, r2, #6
 800399e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable the selected DAC channel1 DMA request */
    CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4905      	ldr	r1, [pc, #20]	; (80039c0 <HAL_DAC_IRQHandler+0x58>)
 80039ac:	400a      	ands	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]

    /* Error callback */
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7ff ff40 	bl	8003838 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
}
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b002      	add	sp, #8
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	ffffefff 	.word	0xffffefff

080039c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e061      	b.n	8003a9a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a32      	ldr	r2, [pc, #200]	; (8003aa4 <HAL_DMA_Init+0xe0>)
 80039dc:	4694      	mov	ip, r2
 80039de:	4463      	add	r3, ip
 80039e0:	2114      	movs	r1, #20
 80039e2:	0018      	movs	r0, r3
 80039e4:	f7fc fba2 	bl	800012c <__udivsi3>
 80039e8:	0003      	movs	r3, r0
 80039ea:	009a      	lsls	r2, r3, #2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a2d      	ldr	r2, [pc, #180]	; (8003aa8 <HAL_DMA_Init+0xe4>)
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2225      	movs	r2, #37	; 0x25
 80039fa:	2102      	movs	r1, #2
 80039fc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a28      	ldr	r2, [pc, #160]	; (8003aac <HAL_DMA_Init+0xe8>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	01db      	lsls	r3, r3, #7
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d018      	beq.n	8003a82 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a50:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <HAL_DMA_Init+0xec>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	211c      	movs	r1, #28
 8003a5a:	400b      	ands	r3, r1
 8003a5c:	210f      	movs	r1, #15
 8003a5e:	4099      	lsls	r1, r3
 8003a60:	000b      	movs	r3, r1
 8003a62:	43d9      	mvns	r1, r3
 8003a64:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_DMA_Init+0xec>)
 8003a66:	400a      	ands	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <HAL_DMA_Init+0xec>)
 8003a6c:	6819      	ldr	r1, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	201c      	movs	r0, #28
 8003a78:	4003      	ands	r3, r0
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <HAL_DMA_Init+0xec>)
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2225      	movs	r2, #37	; 0x25
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2224      	movs	r2, #36	; 0x24
 8003a94:	2100      	movs	r1, #0
 8003a96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b004      	add	sp, #16
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	bffdfff8 	.word	0xbffdfff8
 8003aa8:	40020000 	.word	0x40020000
 8003aac:	ffff800f 	.word	0xffff800f
 8003ab0:	400200a8 	.word	0x400200a8

08003ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	2317      	movs	r3, #23
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2224      	movs	r2, #36	; 0x24
 8003ace:	5c9b      	ldrb	r3, [r3, r2]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_DMA_Start_IT+0x24>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e04f      	b.n	8003b78 <HAL_DMA_Start_IT+0xc4>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2224      	movs	r2, #36	; 0x24
 8003adc:	2101      	movs	r1, #1
 8003ade:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2225      	movs	r2, #37	; 0x25
 8003ae4:	5c9b      	ldrb	r3, [r3, r2]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d13a      	bne.n	8003b62 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2225      	movs	r2, #37	; 0x25
 8003af0:	2102      	movs	r1, #2
 8003af2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2101      	movs	r1, #1
 8003b06:	438a      	bics	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f8e3 	bl	8003cdc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	210e      	movs	r1, #14
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e00f      	b.n	8003b50 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2104      	movs	r1, #4
 8003b3c:	438a      	bics	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	210a      	movs	r1, #10
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e007      	b.n	8003b72 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2224      	movs	r2, #36	; 0x24
 8003b66:	2100      	movs	r1, #0
 8003b68:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b6a:	2317      	movs	r3, #23
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	2202      	movs	r2, #2
 8003b70:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003b72:	2317      	movs	r3, #23
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	781b      	ldrb	r3, [r3, #0]
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b006      	add	sp, #24
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9c:	221c      	movs	r2, #28
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2204      	movs	r2, #4
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	0013      	movs	r3, r2
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d026      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x7a>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2204      	movs	r2, #4
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d022      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d107      	bne.n	8003bd0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2104      	movs	r1, #4
 8003bcc:	438a      	bics	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	221c      	movs	r2, #28
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	2104      	movs	r1, #4
 8003bde:	4091      	lsls	r1, r2
 8003be0:	000a      	movs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d100      	bne.n	8003bee <HAL_DMA_IRQHandler+0x6e>
 8003bec:	e071      	b.n	8003cd2 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	0010      	movs	r0, r2
 8003bf6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003bf8:	e06b      	b.n	8003cd2 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	221c      	movs	r2, #28
 8003c00:	4013      	ands	r3, r2
 8003c02:	2202      	movs	r2, #2
 8003c04:	409a      	lsls	r2, r3
 8003c06:	0013      	movs	r3, r2
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d02d      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xea>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2202      	movs	r2, #2
 8003c12:	4013      	ands	r3, r2
 8003c14:	d029      	beq.n	8003c6a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d10b      	bne.n	8003c3a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	210a      	movs	r1, #10
 8003c2e:	438a      	bics	r2, r1
 8003c30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2225      	movs	r2, #37	; 0x25
 8003c36:	2101      	movs	r1, #1
 8003c38:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	221c      	movs	r2, #28
 8003c40:	401a      	ands	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2102      	movs	r1, #2
 8003c48:	4091      	lsls	r1, r2
 8003c4a:	000a      	movs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2224      	movs	r2, #36	; 0x24
 8003c52:	2100      	movs	r1, #0
 8003c54:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d039      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	0010      	movs	r0, r2
 8003c66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c68:	e033      	b.n	8003cd2 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	221c      	movs	r2, #28
 8003c70:	4013      	ands	r3, r2
 8003c72:	2208      	movs	r2, #8
 8003c74:	409a      	lsls	r2, r3
 8003c76:	0013      	movs	r3, r2
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d02a      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x154>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2208      	movs	r2, #8
 8003c82:	4013      	ands	r3, r2
 8003c84:	d026      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	210e      	movs	r1, #14
 8003c92:	438a      	bics	r2, r1
 8003c94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	221c      	movs	r2, #28
 8003c9c:	401a      	ands	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	4091      	lsls	r1, r2
 8003ca6:	000a      	movs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2225      	movs	r2, #37	; 0x25
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2224      	movs	r2, #36	; 0x24
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	0010      	movs	r0, r2
 8003cd0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	46c0      	nop			; (mov r8, r8)
}
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b004      	add	sp, #16
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	221c      	movs	r2, #28
 8003cf0:	401a      	ands	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	4091      	lsls	r1, r2
 8003cfa:	000a      	movs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b10      	cmp	r3, #16
 8003d0c:	d108      	bne.n	8003d20 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d1e:	e007      	b.n	8003d30 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	60da      	str	r2, [r3, #12]
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b004      	add	sp, #16
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d4e:	e14f      	b.n	8003ff0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2101      	movs	r1, #1
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4091      	lsls	r1, r2
 8003d5a:	000a      	movs	r2, r1
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d100      	bne.n	8003d68 <HAL_GPIO_Init+0x30>
 8003d66:	e140      	b.n	8003fea <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d005      	beq.n	8003d80 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d130      	bne.n	8003de2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	0013      	movs	r3, r2
 8003d90:	43da      	mvns	r2, r3
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	409a      	lsls	r2, r3
 8003da2:	0013      	movs	r3, r2
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003db6:	2201      	movs	r2, #1
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	0013      	movs	r3, r2
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	2201      	movs	r2, #1
 8003dce:	401a      	ands	r2, r3
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	0013      	movs	r3, r2
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2203      	movs	r2, #3
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d017      	beq.n	8003e1e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	2203      	movs	r2, #3
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	0013      	movs	r3, r2
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	0013      	movs	r3, r2
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2203      	movs	r2, #3
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d123      	bne.n	8003e72 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	08da      	lsrs	r2, r3, #3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3208      	adds	r2, #8
 8003e32:	0092      	lsls	r2, r2, #2
 8003e34:	58d3      	ldr	r3, [r2, r3]
 8003e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2207      	movs	r2, #7
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	220f      	movs	r2, #15
 8003e42:	409a      	lsls	r2, r3
 8003e44:	0013      	movs	r3, r2
 8003e46:	43da      	mvns	r2, r3
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2107      	movs	r1, #7
 8003e56:	400b      	ands	r3, r1
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	0013      	movs	r3, r2
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	08da      	lsrs	r2, r3, #3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3208      	adds	r2, #8
 8003e6c:	0092      	lsls	r2, r2, #2
 8003e6e:	6939      	ldr	r1, [r7, #16]
 8003e70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	0013      	movs	r3, r2
 8003e82:	43da      	mvns	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2203      	movs	r2, #3
 8003e90:	401a      	ands	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	409a      	lsls	r2, r3
 8003e98:	0013      	movs	r3, r2
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	23c0      	movs	r3, #192	; 0xc0
 8003eac:	029b      	lsls	r3, r3, #10
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d100      	bne.n	8003eb4 <HAL_GPIO_Init+0x17c>
 8003eb2:	e09a      	b.n	8003fea <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb4:	4b54      	ldr	r3, [pc, #336]	; (8004008 <HAL_GPIO_Init+0x2d0>)
 8003eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb8:	4b53      	ldr	r3, [pc, #332]	; (8004008 <HAL_GPIO_Init+0x2d0>)
 8003eba:	2101      	movs	r1, #1
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ec0:	4a52      	ldr	r2, [pc, #328]	; (800400c <HAL_GPIO_Init+0x2d4>)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	589b      	ldr	r3, [r3, r2]
 8003ecc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	220f      	movs	r2, #15
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	0013      	movs	r3, r2
 8003edc:	43da      	mvns	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	23a0      	movs	r3, #160	; 0xa0
 8003ee8:	05db      	lsls	r3, r3, #23
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d019      	beq.n	8003f22 <HAL_GPIO_Init+0x1ea>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a47      	ldr	r2, [pc, #284]	; (8004010 <HAL_GPIO_Init+0x2d8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_GPIO_Init+0x1e6>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a46      	ldr	r2, [pc, #280]	; (8004014 <HAL_GPIO_Init+0x2dc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00d      	beq.n	8003f1a <HAL_GPIO_Init+0x1e2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a45      	ldr	r2, [pc, #276]	; (8004018 <HAL_GPIO_Init+0x2e0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <HAL_GPIO_Init+0x1de>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a44      	ldr	r2, [pc, #272]	; (800401c <HAL_GPIO_Init+0x2e4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_GPIO_Init+0x1da>
 8003f0e:	2305      	movs	r3, #5
 8003f10:	e008      	b.n	8003f24 <HAL_GPIO_Init+0x1ec>
 8003f12:	2306      	movs	r3, #6
 8003f14:	e006      	b.n	8003f24 <HAL_GPIO_Init+0x1ec>
 8003f16:	2303      	movs	r3, #3
 8003f18:	e004      	b.n	8003f24 <HAL_GPIO_Init+0x1ec>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e002      	b.n	8003f24 <HAL_GPIO_Init+0x1ec>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_GPIO_Init+0x1ec>
 8003f22:	2300      	movs	r3, #0
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	2103      	movs	r1, #3
 8003f28:	400a      	ands	r2, r1
 8003f2a:	0092      	lsls	r2, r2, #2
 8003f2c:	4093      	lsls	r3, r2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f34:	4935      	ldr	r1, [pc, #212]	; (800400c <HAL_GPIO_Init+0x2d4>)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f42:	4b37      	ldr	r3, [pc, #220]	; (8004020 <HAL_GPIO_Init+0x2e8>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	43da      	mvns	r2, r3
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	2380      	movs	r3, #128	; 0x80
 8003f58:	035b      	lsls	r3, r3, #13
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f66:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <HAL_GPIO_Init+0x2e8>)
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003f6c:	4b2c      	ldr	r3, [pc, #176]	; (8004020 <HAL_GPIO_Init+0x2e8>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	43da      	mvns	r2, r3
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	039b      	lsls	r3, r3, #14
 8003f84:	4013      	ands	r3, r2
 8003f86:	d003      	beq.n	8003f90 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f90:	4b23      	ldr	r3, [pc, #140]	; (8004020 <HAL_GPIO_Init+0x2e8>)
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003f96:	4b22      	ldr	r3, [pc, #136]	; (8004020 <HAL_GPIO_Init+0x2e8>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	43da      	mvns	r2, r3
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	029b      	lsls	r3, r3, #10
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d003      	beq.n	8003fba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003fba:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_GPIO_Init+0x2e8>)
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fc0:	4b17      	ldr	r3, [pc, #92]	; (8004020 <HAL_GPIO_Init+0x2e8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	43da      	mvns	r2, r3
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	025b      	lsls	r3, r3, #9
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003fe4:	4b0e      	ldr	r3, [pc, #56]	; (8004020 <HAL_GPIO_Init+0x2e8>)
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	3301      	adds	r3, #1
 8003fee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	40da      	lsrs	r2, r3
 8003ff8:	1e13      	subs	r3, r2, #0
 8003ffa:	d000      	beq.n	8003ffe <HAL_GPIO_Init+0x2c6>
 8003ffc:	e6a8      	b.n	8003d50 <HAL_GPIO_Init+0x18>
  }
}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	46c0      	nop			; (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b006      	add	sp, #24
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000
 800400c:	40010000 	.word	0x40010000
 8004010:	50000400 	.word	0x50000400
 8004014:	50000800 	.word	0x50000800
 8004018:	50000c00 	.word	0x50000c00
 800401c:	50001c00 	.word	0x50001c00
 8004020:	40010400 	.word	0x40010400

08004024 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	0008      	movs	r0, r1
 800402e:	0011      	movs	r1, r2
 8004030:	1cbb      	adds	r3, r7, #2
 8004032:	1c02      	adds	r2, r0, #0
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	1c7b      	adds	r3, r7, #1
 8004038:	1c0a      	adds	r2, r1, #0
 800403a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800403c:	1c7b      	adds	r3, r7, #1
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d004      	beq.n	800404e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004044:	1cbb      	adds	r3, r7, #2
 8004046:	881a      	ldrh	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800404c:	e003      	b.n	8004056 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800404e:	1cbb      	adds	r3, r7, #2
 8004050:	881a      	ldrh	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	46bd      	mov	sp, r7
 800405a:	b002      	add	sp, #8
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e082      	b.n	8004178 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2241      	movs	r2, #65	; 0x41
 8004076:	5c9b      	ldrb	r3, [r3, r2]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d107      	bne.n	800408e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2240      	movs	r2, #64	; 0x40
 8004082:	2100      	movs	r1, #0
 8004084:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0018      	movs	r0, r3
 800408a:	f7fe fd79 	bl	8002b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2241      	movs	r2, #65	; 0x41
 8004092:	2124      	movs	r1, #36	; 0x24
 8004094:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2101      	movs	r1, #1
 80040a2:	438a      	bics	r2, r1
 80040a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4934      	ldr	r1, [pc, #208]	; (8004180 <HAL_I2C_Init+0x120>)
 80040b0:	400a      	ands	r2, r1
 80040b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4931      	ldr	r1, [pc, #196]	; (8004184 <HAL_I2C_Init+0x124>)
 80040c0:	400a      	ands	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d108      	bne.n	80040de <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2180      	movs	r1, #128	; 0x80
 80040d6:	0209      	lsls	r1, r1, #8
 80040d8:	430a      	orrs	r2, r1
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	e007      	b.n	80040ee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2184      	movs	r1, #132	; 0x84
 80040e8:	0209      	lsls	r1, r1, #8
 80040ea:	430a      	orrs	r2, r1
 80040ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d104      	bne.n	8004100 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2280      	movs	r2, #128	; 0x80
 80040fc:	0112      	lsls	r2, r2, #4
 80040fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	491f      	ldr	r1, [pc, #124]	; (8004188 <HAL_I2C_Init+0x128>)
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	491a      	ldr	r1, [pc, #104]	; (8004184 <HAL_I2C_Init+0x124>)
 800411c:	400a      	ands	r2, r1
 800411e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	431a      	orrs	r2, r3
 800412a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69d9      	ldr	r1, [r3, #28]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1a      	ldr	r2, [r3, #32]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2101      	movs	r1, #1
 8004156:	430a      	orrs	r2, r1
 8004158:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2241      	movs	r2, #65	; 0x41
 8004164:	2120      	movs	r1, #32
 8004166:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2242      	movs	r2, #66	; 0x42
 8004172:	2100      	movs	r1, #0
 8004174:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b002      	add	sp, #8
 800417e:	bd80      	pop	{r7, pc}
 8004180:	f0ffffff 	.word	0xf0ffffff
 8004184:	ffff7fff 	.word	0xffff7fff
 8004188:	02008000 	.word	0x02008000

0800418c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b089      	sub	sp, #36	; 0x24
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	0008      	movs	r0, r1
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	0019      	movs	r1, r3
 800419a:	230a      	movs	r3, #10
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	1c02      	adds	r2, r0, #0
 80041a0:	801a      	strh	r2, [r3, #0]
 80041a2:	2308      	movs	r3, #8
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	1c0a      	adds	r2, r1, #0
 80041a8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2241      	movs	r2, #65	; 0x41
 80041ae:	5c9b      	ldrb	r3, [r3, r2]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	d000      	beq.n	80041b8 <HAL_I2C_Master_Transmit+0x2c>
 80041b6:	e0e7      	b.n	8004388 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2240      	movs	r2, #64	; 0x40
 80041bc:	5c9b      	ldrb	r3, [r3, r2]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_I2C_Master_Transmit+0x3a>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e0e1      	b.n	800438a <HAL_I2C_Master_Transmit+0x1fe>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2240      	movs	r2, #64	; 0x40
 80041ca:	2101      	movs	r1, #1
 80041cc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041ce:	f7fe fe5d 	bl	8002e8c <HAL_GetTick>
 80041d2:	0003      	movs	r3, r0
 80041d4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	0219      	lsls	r1, r3, #8
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	2319      	movs	r3, #25
 80041e2:	2201      	movs	r2, #1
 80041e4:	f000 fa04 	bl	80045f0 <I2C_WaitOnFlagUntilTimeout>
 80041e8:	1e03      	subs	r3, r0, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0cc      	b.n	800438a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2241      	movs	r2, #65	; 0x41
 80041f4:	2121      	movs	r1, #33	; 0x21
 80041f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2242      	movs	r2, #66	; 0x42
 80041fc:	2110      	movs	r1, #16
 80041fe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2208      	movs	r2, #8
 8004210:	18ba      	adds	r2, r7, r2
 8004212:	8812      	ldrh	r2, [r2, #0]
 8004214:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	2bff      	cmp	r3, #255	; 0xff
 8004224:	d911      	bls.n	800424a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	22ff      	movs	r2, #255	; 0xff
 800422a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004230:	b2da      	uxtb	r2, r3
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	045c      	lsls	r4, r3, #17
 8004236:	230a      	movs	r3, #10
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	8819      	ldrh	r1, [r3, #0]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	4b55      	ldr	r3, [pc, #340]	; (8004394 <HAL_I2C_Master_Transmit+0x208>)
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	0023      	movs	r3, r4
 8004244:	f000 fc2e 	bl	8004aa4 <I2C_TransferConfig>
 8004248:	e075      	b.n	8004336 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004258:	b2da      	uxtb	r2, r3
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	049c      	lsls	r4, r3, #18
 800425e:	230a      	movs	r3, #10
 8004260:	18fb      	adds	r3, r7, r3
 8004262:	8819      	ldrh	r1, [r3, #0]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	4b4b      	ldr	r3, [pc, #300]	; (8004394 <HAL_I2C_Master_Transmit+0x208>)
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	0023      	movs	r3, r4
 800426c:	f000 fc1a 	bl	8004aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004270:	e061      	b.n	8004336 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	0018      	movs	r0, r3
 800427a:	f000 fa07 	bl	800468c <I2C_WaitOnTXISFlagUntilTimeout>
 800427e:	1e03      	subs	r3, r0, #0
 8004280:	d001      	beq.n	8004286 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e081      	b.n	800438a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	781a      	ldrb	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d03a      	beq.n	8004336 <HAL_I2C_Master_Transmit+0x1aa>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d136      	bne.n	8004336 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	0013      	movs	r3, r2
 80042d2:	2200      	movs	r2, #0
 80042d4:	2180      	movs	r1, #128	; 0x80
 80042d6:	f000 f98b 	bl	80045f0 <I2C_WaitOnFlagUntilTimeout>
 80042da:	1e03      	subs	r3, r0, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e053      	b.n	800438a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2bff      	cmp	r3, #255	; 0xff
 80042ea:	d911      	bls.n	8004310 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	22ff      	movs	r2, #255	; 0xff
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	045c      	lsls	r4, r3, #17
 80042fc:	230a      	movs	r3, #10
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	8819      	ldrh	r1, [r3, #0]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	2300      	movs	r3, #0
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	0023      	movs	r3, r4
 800430a:	f000 fbcb 	bl	8004aa4 <I2C_TransferConfig>
 800430e:	e012      	b.n	8004336 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431e:	b2da      	uxtb	r2, r3
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	049c      	lsls	r4, r3, #18
 8004324:	230a      	movs	r3, #10
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	8819      	ldrh	r1, [r3, #0]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	2300      	movs	r3, #0
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	0023      	movs	r3, r4
 8004332:	f000 fbb7 	bl	8004aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d198      	bne.n	8004272 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	0018      	movs	r0, r3
 8004348:	f000 f9e6 	bl	8004718 <I2C_WaitOnSTOPFlagUntilTimeout>
 800434c:	1e03      	subs	r3, r0, #0
 800434e:	d001      	beq.n	8004354 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e01a      	b.n	800438a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2220      	movs	r2, #32
 800435a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	490c      	ldr	r1, [pc, #48]	; (8004398 <HAL_I2C_Master_Transmit+0x20c>)
 8004368:	400a      	ands	r2, r1
 800436a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2241      	movs	r2, #65	; 0x41
 8004370:	2120      	movs	r1, #32
 8004372:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2242      	movs	r2, #66	; 0x42
 8004378:	2100      	movs	r1, #0
 800437a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2240      	movs	r2, #64	; 0x40
 8004380:	2100      	movs	r1, #0
 8004382:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	e000      	b.n	800438a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004388:	2302      	movs	r3, #2
  }
}
 800438a:	0018      	movs	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	b007      	add	sp, #28
 8004390:	bd90      	pop	{r4, r7, pc}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	80002000 	.word	0x80002000
 8004398:	fe00e800 	.word	0xfe00e800

0800439c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b089      	sub	sp, #36	; 0x24
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	0008      	movs	r0, r1
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	0019      	movs	r1, r3
 80043aa:	230a      	movs	r3, #10
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	1c02      	adds	r2, r0, #0
 80043b0:	801a      	strh	r2, [r3, #0]
 80043b2:	2308      	movs	r3, #8
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	1c0a      	adds	r2, r1, #0
 80043b8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2241      	movs	r2, #65	; 0x41
 80043be:	5c9b      	ldrb	r3, [r3, r2]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d000      	beq.n	80043c8 <HAL_I2C_Master_Receive+0x2c>
 80043c6:	e0e8      	b.n	800459a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2240      	movs	r2, #64	; 0x40
 80043cc:	5c9b      	ldrb	r3, [r3, r2]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_I2C_Master_Receive+0x3a>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e0e2      	b.n	800459c <HAL_I2C_Master_Receive+0x200>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2240      	movs	r2, #64	; 0x40
 80043da:	2101      	movs	r1, #1
 80043dc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043de:	f7fe fd55 	bl	8002e8c <HAL_GetTick>
 80043e2:	0003      	movs	r3, r0
 80043e4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	0219      	lsls	r1, r3, #8
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	2319      	movs	r3, #25
 80043f2:	2201      	movs	r2, #1
 80043f4:	f000 f8fc 	bl	80045f0 <I2C_WaitOnFlagUntilTimeout>
 80043f8:	1e03      	subs	r3, r0, #0
 80043fa:	d001      	beq.n	8004400 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0cd      	b.n	800459c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2241      	movs	r2, #65	; 0x41
 8004404:	2122      	movs	r1, #34	; 0x22
 8004406:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2242      	movs	r2, #66	; 0x42
 800440c:	2110      	movs	r1, #16
 800440e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2208      	movs	r2, #8
 8004420:	18ba      	adds	r2, r7, r2
 8004422:	8812      	ldrh	r2, [r2, #0]
 8004424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	2bff      	cmp	r3, #255	; 0xff
 8004434:	d911      	bls.n	800445a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	22ff      	movs	r2, #255	; 0xff
 800443a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	b2da      	uxtb	r2, r3
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	045c      	lsls	r4, r3, #17
 8004446:	230a      	movs	r3, #10
 8004448:	18fb      	adds	r3, r7, r3
 800444a:	8819      	ldrh	r1, [r3, #0]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	4b55      	ldr	r3, [pc, #340]	; (80045a4 <HAL_I2C_Master_Receive+0x208>)
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	0023      	movs	r3, r4
 8004454:	f000 fb26 	bl	8004aa4 <I2C_TransferConfig>
 8004458:	e076      	b.n	8004548 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004468:	b2da      	uxtb	r2, r3
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	049c      	lsls	r4, r3, #18
 800446e:	230a      	movs	r3, #10
 8004470:	18fb      	adds	r3, r7, r3
 8004472:	8819      	ldrh	r1, [r3, #0]
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	4b4b      	ldr	r3, [pc, #300]	; (80045a4 <HAL_I2C_Master_Receive+0x208>)
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	0023      	movs	r3, r4
 800447c:	f000 fb12 	bl	8004aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004480:	e062      	b.n	8004548 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	0018      	movs	r0, r3
 800448a:	f000 f989 	bl	80047a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800448e:	1e03      	subs	r3, r0, #0
 8004490:	d001      	beq.n	8004496 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e082      	b.n	800459c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d03a      	beq.n	8004548 <HAL_I2C_Master_Receive+0x1ac>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d136      	bne.n	8004548 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	0013      	movs	r3, r2
 80044e4:	2200      	movs	r2, #0
 80044e6:	2180      	movs	r1, #128	; 0x80
 80044e8:	f000 f882 	bl	80045f0 <I2C_WaitOnFlagUntilTimeout>
 80044ec:	1e03      	subs	r3, r0, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e053      	b.n	800459c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2bff      	cmp	r3, #255	; 0xff
 80044fc:	d911      	bls.n	8004522 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	22ff      	movs	r2, #255	; 0xff
 8004502:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004508:	b2da      	uxtb	r2, r3
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	045c      	lsls	r4, r3, #17
 800450e:	230a      	movs	r3, #10
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	8819      	ldrh	r1, [r3, #0]
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	2300      	movs	r3, #0
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	0023      	movs	r3, r4
 800451c:	f000 fac2 	bl	8004aa4 <I2C_TransferConfig>
 8004520:	e012      	b.n	8004548 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004530:	b2da      	uxtb	r2, r3
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	049c      	lsls	r4, r3, #18
 8004536:	230a      	movs	r3, #10
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	8819      	ldrh	r1, [r3, #0]
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	2300      	movs	r3, #0
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	0023      	movs	r3, r4
 8004544:	f000 faae 	bl	8004aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d197      	bne.n	8004482 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	0018      	movs	r0, r3
 800455a:	f000 f8dd 	bl	8004718 <I2C_WaitOnSTOPFlagUntilTimeout>
 800455e:	1e03      	subs	r3, r0, #0
 8004560:	d001      	beq.n	8004566 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e01a      	b.n	800459c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2220      	movs	r2, #32
 800456c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	490b      	ldr	r1, [pc, #44]	; (80045a8 <HAL_I2C_Master_Receive+0x20c>)
 800457a:	400a      	ands	r2, r1
 800457c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2241      	movs	r2, #65	; 0x41
 8004582:	2120      	movs	r1, #32
 8004584:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2242      	movs	r2, #66	; 0x42
 800458a:	2100      	movs	r1, #0
 800458c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2240      	movs	r2, #64	; 0x40
 8004592:	2100      	movs	r1, #0
 8004594:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800459a:	2302      	movs	r3, #2
  }
}
 800459c:	0018      	movs	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	b007      	add	sp, #28
 80045a2:	bd90      	pop	{r4, r7, pc}
 80045a4:	80002400 	.word	0x80002400
 80045a8:	fe00e800 	.word	0xfe00e800

080045ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	2202      	movs	r2, #2
 80045bc:	4013      	ands	r3, r2
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d103      	bne.n	80045ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2200      	movs	r2, #0
 80045c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	2201      	movs	r2, #1
 80045d2:	4013      	ands	r3, r2
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d007      	beq.n	80045e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2101      	movs	r1, #1
 80045e4:	430a      	orrs	r2, r1
 80045e6:	619a      	str	r2, [r3, #24]
  }
}
 80045e8:	46c0      	nop			; (mov r8, r8)
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b002      	add	sp, #8
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	1dfb      	adds	r3, r7, #7
 80045fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004600:	e030      	b.n	8004664 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	3301      	adds	r3, #1
 8004606:	d02d      	beq.n	8004664 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004608:	f7fe fc40 	bl	8002e8c <HAL_GetTick>
 800460c:	0002      	movs	r2, r0
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d122      	bne.n	8004664 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	4013      	ands	r3, r2
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	425a      	negs	r2, r3
 800462e:	4153      	adcs	r3, r2
 8004630:	b2db      	uxtb	r3, r3
 8004632:	001a      	movs	r2, r3
 8004634:	1dfb      	adds	r3, r7, #7
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d113      	bne.n	8004664 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	2220      	movs	r2, #32
 8004642:	431a      	orrs	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2241      	movs	r2, #65	; 0x41
 800464c:	2120      	movs	r1, #32
 800464e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2242      	movs	r2, #66	; 0x42
 8004654:	2100      	movs	r1, #0
 8004656:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2240      	movs	r2, #64	; 0x40
 800465c:	2100      	movs	r1, #0
 800465e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e00f      	b.n	8004684 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	4013      	ands	r3, r2
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	425a      	negs	r2, r3
 8004674:	4153      	adcs	r3, r2
 8004676:	b2db      	uxtb	r3, r3
 8004678:	001a      	movs	r2, r3
 800467a:	1dfb      	adds	r3, r7, #7
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d0bf      	beq.n	8004602 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	0018      	movs	r0, r3
 8004686:	46bd      	mov	sp, r7
 8004688:	b004      	add	sp, #16
 800468a:	bd80      	pop	{r7, pc}

0800468c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004698:	e032      	b.n	8004700 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	0018      	movs	r0, r3
 80046a2:	f000 f8ff 	bl	80048a4 <I2C_IsErrorOccurred>
 80046a6:	1e03      	subs	r3, r0, #0
 80046a8:	d001      	beq.n	80046ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e030      	b.n	8004710 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	3301      	adds	r3, #1
 80046b2:	d025      	beq.n	8004700 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b4:	f7fe fbea 	bl	8002e8c <HAL_GetTick>
 80046b8:	0002      	movs	r2, r0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d302      	bcc.n	80046ca <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d11a      	bne.n	8004700 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	2202      	movs	r2, #2
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d013      	beq.n	8004700 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046dc:	2220      	movs	r2, #32
 80046de:	431a      	orrs	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2241      	movs	r2, #65	; 0x41
 80046e8:	2120      	movs	r1, #32
 80046ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2242      	movs	r2, #66	; 0x42
 80046f0:	2100      	movs	r1, #0
 80046f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2240      	movs	r2, #64	; 0x40
 80046f8:	2100      	movs	r1, #0
 80046fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e007      	b.n	8004710 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2202      	movs	r2, #2
 8004708:	4013      	ands	r3, r2
 800470a:	2b02      	cmp	r3, #2
 800470c:	d1c5      	bne.n	800469a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	0018      	movs	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	b004      	add	sp, #16
 8004716:	bd80      	pop	{r7, pc}

08004718 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004724:	e02f      	b.n	8004786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	0018      	movs	r0, r3
 800472e:	f000 f8b9 	bl	80048a4 <I2C_IsErrorOccurred>
 8004732:	1e03      	subs	r3, r0, #0
 8004734:	d001      	beq.n	800473a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e02d      	b.n	8004796 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473a:	f7fe fba7 	bl	8002e8c <HAL_GetTick>
 800473e:	0002      	movs	r2, r0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	429a      	cmp	r2, r3
 8004748:	d302      	bcc.n	8004750 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d11a      	bne.n	8004786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2220      	movs	r2, #32
 8004758:	4013      	ands	r3, r2
 800475a:	2b20      	cmp	r3, #32
 800475c:	d013      	beq.n	8004786 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004762:	2220      	movs	r2, #32
 8004764:	431a      	orrs	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2241      	movs	r2, #65	; 0x41
 800476e:	2120      	movs	r1, #32
 8004770:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2242      	movs	r2, #66	; 0x42
 8004776:	2100      	movs	r1, #0
 8004778:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2240      	movs	r2, #64	; 0x40
 800477e:	2100      	movs	r1, #0
 8004780:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e007      	b.n	8004796 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2220      	movs	r2, #32
 800478e:	4013      	ands	r3, r2
 8004790:	2b20      	cmp	r3, #32
 8004792:	d1c8      	bne.n	8004726 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	0018      	movs	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	b004      	add	sp, #16
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047ac:	e06b      	b.n	8004886 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f000 f875 	bl	80048a4 <I2C_IsErrorOccurred>
 80047ba:	1e03      	subs	r3, r0, #0
 80047bc:	d001      	beq.n	80047c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e069      	b.n	8004896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2220      	movs	r2, #32
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d138      	bne.n	8004842 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2204      	movs	r2, #4
 80047d8:	4013      	ands	r3, r2
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d105      	bne.n	80047ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e055      	b.n	8004896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	2210      	movs	r2, #16
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	d107      	bne.n	8004808 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2210      	movs	r2, #16
 80047fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2204      	movs	r2, #4
 8004804:	645a      	str	r2, [r3, #68]	; 0x44
 8004806:	e002      	b.n	800480e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2220      	movs	r2, #32
 8004814:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	491f      	ldr	r1, [pc, #124]	; (80048a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004822:	400a      	ands	r2, r1
 8004824:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2241      	movs	r2, #65	; 0x41
 800482a:	2120      	movs	r1, #32
 800482c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2242      	movs	r2, #66	; 0x42
 8004832:	2100      	movs	r1, #0
 8004834:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2240      	movs	r2, #64	; 0x40
 800483a:	2100      	movs	r1, #0
 800483c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e029      	b.n	8004896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004842:	f7fe fb23 	bl	8002e8c <HAL_GetTick>
 8004846:	0002      	movs	r2, r0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	429a      	cmp	r2, r3
 8004850:	d302      	bcc.n	8004858 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d116      	bne.n	8004886 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	2204      	movs	r2, #4
 8004860:	4013      	ands	r3, r2
 8004862:	2b04      	cmp	r3, #4
 8004864:	d00f      	beq.n	8004886 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	2220      	movs	r2, #32
 800486c:	431a      	orrs	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2241      	movs	r2, #65	; 0x41
 8004876:	2120      	movs	r1, #32
 8004878:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2240      	movs	r2, #64	; 0x40
 800487e:	2100      	movs	r1, #0
 8004880:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e007      	b.n	8004896 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2204      	movs	r2, #4
 800488e:	4013      	ands	r3, r2
 8004890:	2b04      	cmp	r3, #4
 8004892:	d18c      	bne.n	80047ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	0018      	movs	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	b004      	add	sp, #16
 800489c:	bd80      	pop	{r7, pc}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	fe00e800 	.word	0xfe00e800

080048a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a4:	b590      	push	{r4, r7, lr}
 80048a6:	b08b      	sub	sp, #44	; 0x2c
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b0:	2327      	movs	r3, #39	; 0x27
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2210      	movs	r2, #16
 80048cc:	4013      	ands	r3, r2
 80048ce:	d100      	bne.n	80048d2 <I2C_IsErrorOccurred+0x2e>
 80048d0:	e082      	b.n	80049d8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2210      	movs	r2, #16
 80048d8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048da:	e060      	b.n	800499e <I2C_IsErrorOccurred+0xfa>
 80048dc:	2427      	movs	r4, #39	; 0x27
 80048de:	193b      	adds	r3, r7, r4
 80048e0:	193a      	adds	r2, r7, r4
 80048e2:	7812      	ldrb	r2, [r2, #0]
 80048e4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	3301      	adds	r3, #1
 80048ea:	d058      	beq.n	800499e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048ec:	f7fe face 	bl	8002e8c <HAL_GetTick>
 80048f0:	0002      	movs	r2, r0
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d306      	bcc.n	800490a <I2C_IsErrorOccurred+0x66>
 80048fc:	193b      	adds	r3, r7, r4
 80048fe:	193a      	adds	r2, r7, r4
 8004900:	7812      	ldrb	r2, [r2, #0]
 8004902:	701a      	strb	r2, [r3, #0]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d149      	bne.n	800499e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	01db      	lsls	r3, r3, #7
 8004914:	4013      	ands	r3, r2
 8004916:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004918:	2013      	movs	r0, #19
 800491a:	183b      	adds	r3, r7, r0
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	2142      	movs	r1, #66	; 0x42
 8004920:	5c52      	ldrb	r2, [r2, r1]
 8004922:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	2380      	movs	r3, #128	; 0x80
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	401a      	ands	r2, r3
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	429a      	cmp	r2, r3
 8004936:	d126      	bne.n	8004986 <I2C_IsErrorOccurred+0xe2>
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	01db      	lsls	r3, r3, #7
 800493e:	429a      	cmp	r2, r3
 8004940:	d021      	beq.n	8004986 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004942:	183b      	adds	r3, r7, r0
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b20      	cmp	r3, #32
 8004948:	d01d      	beq.n	8004986 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2180      	movs	r1, #128	; 0x80
 8004956:	01c9      	lsls	r1, r1, #7
 8004958:	430a      	orrs	r2, r1
 800495a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800495c:	f7fe fa96 	bl	8002e8c <HAL_GetTick>
 8004960:	0003      	movs	r3, r0
 8004962:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004964:	e00f      	b.n	8004986 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004966:	f7fe fa91 	bl	8002e8c <HAL_GetTick>
 800496a:	0002      	movs	r2, r0
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b19      	cmp	r3, #25
 8004972:	d908      	bls.n	8004986 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	2220      	movs	r2, #32
 8004978:	4313      	orrs	r3, r2
 800497a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800497c:	2327      	movs	r3, #39	; 0x27
 800497e:	18fb      	adds	r3, r7, r3
 8004980:	2201      	movs	r2, #1
 8004982:	701a      	strb	r2, [r3, #0]

              break;
 8004984:	e00b      	b.n	800499e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	2220      	movs	r2, #32
 800498e:	4013      	ands	r3, r2
 8004990:	2127      	movs	r1, #39	; 0x27
 8004992:	187a      	adds	r2, r7, r1
 8004994:	1879      	adds	r1, r7, r1
 8004996:	7809      	ldrb	r1, [r1, #0]
 8004998:	7011      	strb	r1, [r2, #0]
 800499a:	2b20      	cmp	r3, #32
 800499c:	d1e3      	bne.n	8004966 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2220      	movs	r2, #32
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d004      	beq.n	80049b6 <I2C_IsErrorOccurred+0x112>
 80049ac:	2327      	movs	r3, #39	; 0x27
 80049ae:	18fb      	adds	r3, r7, r3
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d092      	beq.n	80048dc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80049b6:	2327      	movs	r3, #39	; 0x27
 80049b8:	18fb      	adds	r3, r7, r3
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d103      	bne.n	80049c8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2220      	movs	r2, #32
 80049c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	2204      	movs	r2, #4
 80049cc:	4313      	orrs	r3, r2
 80049ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80049d0:	2327      	movs	r3, #39	; 0x27
 80049d2:	18fb      	adds	r3, r7, r3
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	4013      	ands	r3, r2
 80049e8:	d00c      	beq.n	8004a04 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	2201      	movs	r2, #1
 80049ee:	4313      	orrs	r3, r2
 80049f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2280      	movs	r2, #128	; 0x80
 80049f8:	0052      	lsls	r2, r2, #1
 80049fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049fc:	2327      	movs	r3, #39	; 0x27
 80049fe:	18fb      	adds	r3, r7, r3
 8004a00:	2201      	movs	r2, #1
 8004a02:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	d00c      	beq.n	8004a28 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	2208      	movs	r2, #8
 8004a12:	4313      	orrs	r3, r2
 8004a14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2280      	movs	r2, #128	; 0x80
 8004a1c:	00d2      	lsls	r2, r2, #3
 8004a1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a20:	2327      	movs	r3, #39	; 0x27
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	2201      	movs	r2, #1
 8004a26:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4013      	ands	r3, r2
 8004a30:	d00c      	beq.n	8004a4c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	2202      	movs	r2, #2
 8004a36:	4313      	orrs	r3, r2
 8004a38:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2280      	movs	r2, #128	; 0x80
 8004a40:	0092      	lsls	r2, r2, #2
 8004a42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a44:	2327      	movs	r3, #39	; 0x27
 8004a46:	18fb      	adds	r3, r7, r3
 8004a48:	2201      	movs	r2, #1
 8004a4a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004a4c:	2327      	movs	r3, #39	; 0x27
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01d      	beq.n	8004a92 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7ff fda7 	bl	80045ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	490d      	ldr	r1, [pc, #52]	; (8004aa0 <I2C_IsErrorOccurred+0x1fc>)
 8004a6a:	400a      	ands	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2241      	movs	r2, #65	; 0x41
 8004a7e:	2120      	movs	r1, #32
 8004a80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2242      	movs	r2, #66	; 0x42
 8004a86:	2100      	movs	r1, #0
 8004a88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2240      	movs	r2, #64	; 0x40
 8004a8e:	2100      	movs	r1, #0
 8004a90:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004a92:	2327      	movs	r3, #39	; 0x27
 8004a94:	18fb      	adds	r3, r7, r3
 8004a96:	781b      	ldrb	r3, [r3, #0]
}
 8004a98:	0018      	movs	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b00b      	add	sp, #44	; 0x2c
 8004a9e:	bd90      	pop	{r4, r7, pc}
 8004aa0:	fe00e800 	.word	0xfe00e800

08004aa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	0008      	movs	r0, r1
 8004aae:	0011      	movs	r1, r2
 8004ab0:	607b      	str	r3, [r7, #4]
 8004ab2:	240a      	movs	r4, #10
 8004ab4:	193b      	adds	r3, r7, r4
 8004ab6:	1c02      	adds	r2, r0, #0
 8004ab8:	801a      	strh	r2, [r3, #0]
 8004aba:	2009      	movs	r0, #9
 8004abc:	183b      	adds	r3, r7, r0
 8004abe:	1c0a      	adds	r2, r1, #0
 8004ac0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ac2:	193b      	adds	r3, r7, r4
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	059b      	lsls	r3, r3, #22
 8004ac8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004aca:	183b      	adds	r3, r7, r0
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	0419      	lsls	r1, r3, #16
 8004ad0:	23ff      	movs	r3, #255	; 0xff
 8004ad2:	041b      	lsls	r3, r3, #16
 8004ad4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ad6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	085b      	lsrs	r3, r3, #1
 8004ae4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aee:	0d51      	lsrs	r1, r2, #21
 8004af0:	2280      	movs	r2, #128	; 0x80
 8004af2:	00d2      	lsls	r2, r2, #3
 8004af4:	400a      	ands	r2, r1
 8004af6:	4907      	ldr	r1, [pc, #28]	; (8004b14 <I2C_TransferConfig+0x70>)
 8004af8:	430a      	orrs	r2, r1
 8004afa:	43d2      	mvns	r2, r2
 8004afc:	401a      	ands	r2, r3
 8004afe:	0011      	movs	r1, r2
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b007      	add	sp, #28
 8004b10:	bd90      	pop	{r4, r7, pc}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	03ff63ff 	.word	0x03ff63ff

08004b18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2241      	movs	r2, #65	; 0x41
 8004b26:	5c9b      	ldrb	r3, [r3, r2]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d138      	bne.n	8004ba0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2240      	movs	r2, #64	; 0x40
 8004b32:	5c9b      	ldrb	r3, [r3, r2]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e032      	b.n	8004ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2240      	movs	r2, #64	; 0x40
 8004b40:	2101      	movs	r1, #1
 8004b42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2241      	movs	r2, #65	; 0x41
 8004b48:	2124      	movs	r1, #36	; 0x24
 8004b4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2101      	movs	r1, #1
 8004b58:	438a      	bics	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4911      	ldr	r1, [pc, #68]	; (8004bac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004b68:	400a      	ands	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6819      	ldr	r1, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2101      	movs	r1, #1
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2241      	movs	r2, #65	; 0x41
 8004b90:	2120      	movs	r1, #32
 8004b92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2240      	movs	r2, #64	; 0x40
 8004b98:	2100      	movs	r1, #0
 8004b9a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e000      	b.n	8004ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ba0:	2302      	movs	r3, #2
  }
}
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	b002      	add	sp, #8
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	ffffefff 	.word	0xffffefff

08004bb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2241      	movs	r2, #65	; 0x41
 8004bbe:	5c9b      	ldrb	r3, [r3, r2]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d139      	bne.n	8004c3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2240      	movs	r2, #64	; 0x40
 8004bca:	5c9b      	ldrb	r3, [r3, r2]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e033      	b.n	8004c3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2240      	movs	r2, #64	; 0x40
 8004bd8:	2101      	movs	r1, #1
 8004bda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2241      	movs	r2, #65	; 0x41
 8004be0:	2124      	movs	r1, #36	; 0x24
 8004be2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2101      	movs	r1, #1
 8004bf0:	438a      	bics	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a11      	ldr	r2, [pc, #68]	; (8004c44 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2101      	movs	r1, #1
 8004c22:	430a      	orrs	r2, r1
 8004c24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2241      	movs	r2, #65	; 0x41
 8004c2a:	2120      	movs	r1, #32
 8004c2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2240      	movs	r2, #64	; 0x40
 8004c32:	2100      	movs	r1, #0
 8004c34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b004      	add	sp, #16
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	fffff0ff 	.word	0xfffff0ff

08004c48 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8004c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8004c56:	2101      	movs	r1, #1
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8004c5e:	6859      	ldr	r1, [r3, #4]
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
}
 8004c68:	46c0      	nop			; (mov r8, r8)
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b002      	add	sp, #8
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40021000 	.word	0x40021000
 8004c74:	40010000 	.word	0x40010000

08004c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c78:	b5b0      	push	{r4, r5, r7, lr}
 8004c7a:	b08a      	sub	sp, #40	; 0x28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f000 fbaf 	bl	80053ea <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c8c:	4bcf      	ldr	r3, [pc, #828]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	220c      	movs	r2, #12
 8004c92:	4013      	ands	r3, r2
 8004c94:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c96:	4bcd      	ldr	r3, [pc, #820]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	2380      	movs	r3, #128	; 0x80
 8004c9c:	025b      	lsls	r3, r3, #9
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d100      	bne.n	8004cae <HAL_RCC_OscConfig+0x36>
 8004cac:	e07e      	b.n	8004dac <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d007      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	2b0c      	cmp	r3, #12
 8004cb8:	d112      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x68>
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	025b      	lsls	r3, r3, #9
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d10d      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc4:	4bc1      	ldr	r3, [pc, #772]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	2380      	movs	r3, #128	; 0x80
 8004cca:	029b      	lsls	r3, r3, #10
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d100      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x5a>
 8004cd0:	e06b      	b.n	8004daa <HAL_RCC_OscConfig+0x132>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d167      	bne.n	8004daa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f000 fb85 	bl	80053ea <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	2380      	movs	r3, #128	; 0x80
 8004ce6:	025b      	lsls	r3, r3, #9
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d107      	bne.n	8004cfc <HAL_RCC_OscConfig+0x84>
 8004cec:	4bb7      	ldr	r3, [pc, #732]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4bb6      	ldr	r3, [pc, #728]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004cf2:	2180      	movs	r1, #128	; 0x80
 8004cf4:	0249      	lsls	r1, r1, #9
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e027      	b.n	8004d4c <HAL_RCC_OscConfig+0xd4>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	23a0      	movs	r3, #160	; 0xa0
 8004d02:	02db      	lsls	r3, r3, #11
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d10e      	bne.n	8004d26 <HAL_RCC_OscConfig+0xae>
 8004d08:	4bb0      	ldr	r3, [pc, #704]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4baf      	ldr	r3, [pc, #700]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004d0e:	2180      	movs	r1, #128	; 0x80
 8004d10:	02c9      	lsls	r1, r1, #11
 8004d12:	430a      	orrs	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	4bad      	ldr	r3, [pc, #692]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4bac      	ldr	r3, [pc, #688]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004d1c:	2180      	movs	r1, #128	; 0x80
 8004d1e:	0249      	lsls	r1, r1, #9
 8004d20:	430a      	orrs	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e012      	b.n	8004d4c <HAL_RCC_OscConfig+0xd4>
 8004d26:	4ba9      	ldr	r3, [pc, #676]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4ba8      	ldr	r3, [pc, #672]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004d2c:	49a8      	ldr	r1, [pc, #672]	; (8004fd0 <HAL_RCC_OscConfig+0x358>)
 8004d2e:	400a      	ands	r2, r1
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	4ba6      	ldr	r3, [pc, #664]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	2380      	movs	r3, #128	; 0x80
 8004d38:	025b      	lsls	r3, r3, #9
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4ba2      	ldr	r3, [pc, #648]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4ba1      	ldr	r3, [pc, #644]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004d46:	49a3      	ldr	r1, [pc, #652]	; (8004fd4 <HAL_RCC_OscConfig+0x35c>)
 8004d48:	400a      	ands	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d015      	beq.n	8004d80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fe f89a 	bl	8002e8c <HAL_GetTick>
 8004d58:	0003      	movs	r3, r0
 8004d5a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d5c:	e009      	b.n	8004d72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d5e:	f7fe f895 	bl	8002e8c <HAL_GetTick>
 8004d62:	0002      	movs	r2, r0
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b64      	cmp	r3, #100	; 0x64
 8004d6a:	d902      	bls.n	8004d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	f000 fb3c 	bl	80053ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d72:	4b96      	ldr	r3, [pc, #600]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	2380      	movs	r3, #128	; 0x80
 8004d78:	029b      	lsls	r3, r3, #10
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d0ef      	beq.n	8004d5e <HAL_RCC_OscConfig+0xe6>
 8004d7e:	e015      	b.n	8004dac <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d80:	f7fe f884 	bl	8002e8c <HAL_GetTick>
 8004d84:	0003      	movs	r3, r0
 8004d86:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d8a:	f7fe f87f 	bl	8002e8c <HAL_GetTick>
 8004d8e:	0002      	movs	r2, r0
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b64      	cmp	r3, #100	; 0x64
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e326      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d9c:	4b8b      	ldr	r3, [pc, #556]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	2380      	movs	r3, #128	; 0x80
 8004da2:	029b      	lsls	r3, r3, #10
 8004da4:	4013      	ands	r3, r2
 8004da6:	d1f0      	bne.n	8004d8a <HAL_RCC_OscConfig+0x112>
 8004da8:	e000      	b.n	8004dac <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004daa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2202      	movs	r2, #2
 8004db2:	4013      	ands	r3, r2
 8004db4:	d100      	bne.n	8004db8 <HAL_RCC_OscConfig+0x140>
 8004db6:	e08b      	b.n	8004ed0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	2b0c      	cmp	r3, #12
 8004dc8:	d13e      	bne.n	8004e48 <HAL_RCC_OscConfig+0x1d0>
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d13b      	bne.n	8004e48 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004dd0:	4b7e      	ldr	r3, [pc, #504]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <HAL_RCC_OscConfig+0x16c>
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e302      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de4:	4b79      	ldr	r3, [pc, #484]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	4a7b      	ldr	r2, [pc, #492]	; (8004fd8 <HAL_RCC_OscConfig+0x360>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	0019      	movs	r1, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	021a      	lsls	r2, r3, #8
 8004df4:	4b75      	ldr	r3, [pc, #468]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004dfa:	4b74      	ldr	r3, [pc, #464]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2209      	movs	r2, #9
 8004e00:	4393      	bics	r3, r2
 8004e02:	0019      	movs	r1, r3
 8004e04:	4b71      	ldr	r3, [pc, #452]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e0c:	f000 fc40 	bl	8005690 <HAL_RCC_GetSysClockFreq>
 8004e10:	0001      	movs	r1, r0
 8004e12:	4b6e      	ldr	r3, [pc, #440]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	220f      	movs	r2, #15
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	4a6f      	ldr	r2, [pc, #444]	; (8004fdc <HAL_RCC_OscConfig+0x364>)
 8004e1e:	5cd3      	ldrb	r3, [r2, r3]
 8004e20:	000a      	movs	r2, r1
 8004e22:	40da      	lsrs	r2, r3
 8004e24:	4b6e      	ldr	r3, [pc, #440]	; (8004fe0 <HAL_RCC_OscConfig+0x368>)
 8004e26:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004e28:	4b6e      	ldr	r3, [pc, #440]	; (8004fe4 <HAL_RCC_OscConfig+0x36c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2513      	movs	r5, #19
 8004e2e:	197c      	adds	r4, r7, r5
 8004e30:	0018      	movs	r0, r3
 8004e32:	f7fd ffe5 	bl	8002e00 <HAL_InitTick>
 8004e36:	0003      	movs	r3, r0
 8004e38:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004e3a:	197b      	adds	r3, r7, r5
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d046      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8004e42:	197b      	adds	r3, r7, r5
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	e2d0      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d027      	beq.n	8004e9e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004e4e:	4b5f      	ldr	r3, [pc, #380]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2209      	movs	r2, #9
 8004e54:	4393      	bics	r3, r2
 8004e56:	0019      	movs	r1, r3
 8004e58:	4b5c      	ldr	r3, [pc, #368]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e60:	f7fe f814 	bl	8002e8c <HAL_GetTick>
 8004e64:	0003      	movs	r3, r0
 8004e66:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e6a:	f7fe f80f 	bl	8002e8c <HAL_GetTick>
 8004e6e:	0002      	movs	r2, r0
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e2b6      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e7c:	4b53      	ldr	r3, [pc, #332]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2204      	movs	r2, #4
 8004e82:	4013      	ands	r3, r2
 8004e84:	d0f1      	beq.n	8004e6a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e86:	4b51      	ldr	r3, [pc, #324]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4a53      	ldr	r2, [pc, #332]	; (8004fd8 <HAL_RCC_OscConfig+0x360>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	021a      	lsls	r2, r3, #8
 8004e96:	4b4d      	ldr	r3, [pc, #308]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
 8004e9c:	e018      	b.n	8004ed0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e9e:	4b4b      	ldr	r3, [pc, #300]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4b4a      	ldr	r3, [pc, #296]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	438a      	bics	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fd ffef 	bl	8002e8c <HAL_GetTick>
 8004eae:	0003      	movs	r3, r0
 8004eb0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eb4:	f7fd ffea 	bl	8002e8c <HAL_GetTick>
 8004eb8:	0002      	movs	r2, r0
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e291      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ec6:	4b41      	ldr	r3, [pc, #260]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2204      	movs	r2, #4
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d1f1      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2210      	movs	r2, #16
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d100      	bne.n	8004edc <HAL_RCC_OscConfig+0x264>
 8004eda:	e0a1      	b.n	8005020 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d140      	bne.n	8004f64 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ee2:	4b3a      	ldr	r3, [pc, #232]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4013      	ands	r3, r2
 8004eec:	d005      	beq.n	8004efa <HAL_RCC_OscConfig+0x282>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e277      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004efa:	4b34      	ldr	r3, [pc, #208]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	4a3a      	ldr	r2, [pc, #232]	; (8004fe8 <HAL_RCC_OscConfig+0x370>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	0019      	movs	r1, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f08:	4b30      	ldr	r3, [pc, #192]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f0e:	4b2f      	ldr	r3, [pc, #188]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	0a19      	lsrs	r1, r3, #8
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	061a      	lsls	r2, r3, #24
 8004f1c:	4b2b      	ldr	r3, [pc, #172]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	0b5b      	lsrs	r3, r3, #13
 8004f28:	3301      	adds	r3, #1
 8004f2a:	2280      	movs	r2, #128	; 0x80
 8004f2c:	0212      	lsls	r2, r2, #8
 8004f2e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004f30:	4b26      	ldr	r3, [pc, #152]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	091b      	lsrs	r3, r3, #4
 8004f36:	210f      	movs	r1, #15
 8004f38:	400b      	ands	r3, r1
 8004f3a:	4928      	ldr	r1, [pc, #160]	; (8004fdc <HAL_RCC_OscConfig+0x364>)
 8004f3c:	5ccb      	ldrb	r3, [r1, r3]
 8004f3e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004f40:	4b27      	ldr	r3, [pc, #156]	; (8004fe0 <HAL_RCC_OscConfig+0x368>)
 8004f42:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004f44:	4b27      	ldr	r3, [pc, #156]	; (8004fe4 <HAL_RCC_OscConfig+0x36c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2513      	movs	r5, #19
 8004f4a:	197c      	adds	r4, r7, r5
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f7fd ff57 	bl	8002e00 <HAL_InitTick>
 8004f52:	0003      	movs	r3, r0
 8004f54:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004f56:	197b      	adds	r3, r7, r5
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d060      	beq.n	8005020 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8004f5e:	197b      	adds	r3, r7, r5
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	e242      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d03f      	beq.n	8004fec <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f6c:	4b17      	ldr	r3, [pc, #92]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004f72:	2180      	movs	r1, #128	; 0x80
 8004f74:	0049      	lsls	r1, r1, #1
 8004f76:	430a      	orrs	r2, r1
 8004f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7a:	f7fd ff87 	bl	8002e8c <HAL_GetTick>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f84:	f7fd ff82 	bl	8002e8c <HAL_GetTick>
 8004f88:	0002      	movs	r2, r0
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e229      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004f96:	4b0d      	ldr	r3, [pc, #52]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	2380      	movs	r3, #128	; 0x80
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	4a10      	ldr	r2, [pc, #64]	; (8004fe8 <HAL_RCC_OscConfig+0x370>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	0019      	movs	r1, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fb6:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	0a19      	lsrs	r1, r3, #8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	061a      	lsls	r2, r3, #24
 8004fc4:	4b01      	ldr	r3, [pc, #4]	; (8004fcc <HAL_RCC_OscConfig+0x354>)
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
 8004fca:	e029      	b.n	8005020 <HAL_RCC_OscConfig+0x3a8>
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	fffeffff 	.word	0xfffeffff
 8004fd4:	fffbffff 	.word	0xfffbffff
 8004fd8:	ffffe0ff 	.word	0xffffe0ff
 8004fdc:	08007c30 	.word	0x08007c30
 8004fe0:	2000002c 	.word	0x2000002c
 8004fe4:	20000030 	.word	0x20000030
 8004fe8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fec:	4bbd      	ldr	r3, [pc, #756]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	4bbc      	ldr	r3, [pc, #752]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8004ff2:	49bd      	ldr	r1, [pc, #756]	; (80052e8 <HAL_RCC_OscConfig+0x670>)
 8004ff4:	400a      	ands	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7fd ff48 	bl	8002e8c <HAL_GetTick>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005002:	f7fd ff43 	bl	8002e8c <HAL_GetTick>
 8005006:	0002      	movs	r2, r0
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e1ea      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005014:	4bb3      	ldr	r3, [pc, #716]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4013      	ands	r3, r2
 800501e:	d1f0      	bne.n	8005002 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2208      	movs	r2, #8
 8005026:	4013      	ands	r3, r2
 8005028:	d036      	beq.n	8005098 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d019      	beq.n	8005066 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005032:	4bac      	ldr	r3, [pc, #688]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005034:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005036:	4bab      	ldr	r3, [pc, #684]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005038:	2101      	movs	r1, #1
 800503a:	430a      	orrs	r2, r1
 800503c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800503e:	f7fd ff25 	bl	8002e8c <HAL_GetTick>
 8005042:	0003      	movs	r3, r0
 8005044:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005048:	f7fd ff20 	bl	8002e8c <HAL_GetTick>
 800504c:	0002      	movs	r2, r0
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e1c7      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800505a:	4ba2      	ldr	r3, [pc, #648]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 800505c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505e:	2202      	movs	r2, #2
 8005060:	4013      	ands	r3, r2
 8005062:	d0f1      	beq.n	8005048 <HAL_RCC_OscConfig+0x3d0>
 8005064:	e018      	b.n	8005098 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005066:	4b9f      	ldr	r3, [pc, #636]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005068:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800506a:	4b9e      	ldr	r3, [pc, #632]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 800506c:	2101      	movs	r1, #1
 800506e:	438a      	bics	r2, r1
 8005070:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005072:	f7fd ff0b 	bl	8002e8c <HAL_GetTick>
 8005076:	0003      	movs	r3, r0
 8005078:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800507c:	f7fd ff06 	bl	8002e8c <HAL_GetTick>
 8005080:	0002      	movs	r2, r0
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e1ad      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800508e:	4b95      	ldr	r3, [pc, #596]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005092:	2202      	movs	r2, #2
 8005094:	4013      	ands	r3, r2
 8005096:	d1f1      	bne.n	800507c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2204      	movs	r2, #4
 800509e:	4013      	ands	r3, r2
 80050a0:	d100      	bne.n	80050a4 <HAL_RCC_OscConfig+0x42c>
 80050a2:	e0ae      	b.n	8005202 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050a4:	2027      	movs	r0, #39	; 0x27
 80050a6:	183b      	adds	r3, r7, r0
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ac:	4b8d      	ldr	r3, [pc, #564]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 80050ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b0:	2380      	movs	r3, #128	; 0x80
 80050b2:	055b      	lsls	r3, r3, #21
 80050b4:	4013      	ands	r3, r2
 80050b6:	d109      	bne.n	80050cc <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b8:	4b8a      	ldr	r3, [pc, #552]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 80050ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050bc:	4b89      	ldr	r3, [pc, #548]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 80050be:	2180      	movs	r1, #128	; 0x80
 80050c0:	0549      	lsls	r1, r1, #21
 80050c2:	430a      	orrs	r2, r1
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80050c6:	183b      	adds	r3, r7, r0
 80050c8:	2201      	movs	r2, #1
 80050ca:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050cc:	4b87      	ldr	r3, [pc, #540]	; (80052ec <HAL_RCC_OscConfig+0x674>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	4013      	ands	r3, r2
 80050d6:	d11a      	bne.n	800510e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050d8:	4b84      	ldr	r3, [pc, #528]	; (80052ec <HAL_RCC_OscConfig+0x674>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	4b83      	ldr	r3, [pc, #524]	; (80052ec <HAL_RCC_OscConfig+0x674>)
 80050de:	2180      	movs	r1, #128	; 0x80
 80050e0:	0049      	lsls	r1, r1, #1
 80050e2:	430a      	orrs	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050e6:	f7fd fed1 	bl	8002e8c <HAL_GetTick>
 80050ea:	0003      	movs	r3, r0
 80050ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f0:	f7fd fecc 	bl	8002e8c <HAL_GetTick>
 80050f4:	0002      	movs	r2, r0
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	; 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e173      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005102:	4b7a      	ldr	r3, [pc, #488]	; (80052ec <HAL_RCC_OscConfig+0x674>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	2380      	movs	r3, #128	; 0x80
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	4013      	ands	r3, r2
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	2380      	movs	r3, #128	; 0x80
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	429a      	cmp	r2, r3
 8005118:	d107      	bne.n	800512a <HAL_RCC_OscConfig+0x4b2>
 800511a:	4b72      	ldr	r3, [pc, #456]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 800511c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800511e:	4b71      	ldr	r3, [pc, #452]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005120:	2180      	movs	r1, #128	; 0x80
 8005122:	0049      	lsls	r1, r1, #1
 8005124:	430a      	orrs	r2, r1
 8005126:	651a      	str	r2, [r3, #80]	; 0x50
 8005128:	e031      	b.n	800518e <HAL_RCC_OscConfig+0x516>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10c      	bne.n	800514c <HAL_RCC_OscConfig+0x4d4>
 8005132:	4b6c      	ldr	r3, [pc, #432]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005134:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005136:	4b6b      	ldr	r3, [pc, #428]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005138:	496b      	ldr	r1, [pc, #428]	; (80052e8 <HAL_RCC_OscConfig+0x670>)
 800513a:	400a      	ands	r2, r1
 800513c:	651a      	str	r2, [r3, #80]	; 0x50
 800513e:	4b69      	ldr	r3, [pc, #420]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005140:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005142:	4b68      	ldr	r3, [pc, #416]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005144:	496a      	ldr	r1, [pc, #424]	; (80052f0 <HAL_RCC_OscConfig+0x678>)
 8005146:	400a      	ands	r2, r1
 8005148:	651a      	str	r2, [r3, #80]	; 0x50
 800514a:	e020      	b.n	800518e <HAL_RCC_OscConfig+0x516>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	23a0      	movs	r3, #160	; 0xa0
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	429a      	cmp	r2, r3
 8005156:	d10e      	bne.n	8005176 <HAL_RCC_OscConfig+0x4fe>
 8005158:	4b62      	ldr	r3, [pc, #392]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 800515a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800515c:	4b61      	ldr	r3, [pc, #388]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 800515e:	2180      	movs	r1, #128	; 0x80
 8005160:	00c9      	lsls	r1, r1, #3
 8005162:	430a      	orrs	r2, r1
 8005164:	651a      	str	r2, [r3, #80]	; 0x50
 8005166:	4b5f      	ldr	r3, [pc, #380]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005168:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800516a:	4b5e      	ldr	r3, [pc, #376]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 800516c:	2180      	movs	r1, #128	; 0x80
 800516e:	0049      	lsls	r1, r1, #1
 8005170:	430a      	orrs	r2, r1
 8005172:	651a      	str	r2, [r3, #80]	; 0x50
 8005174:	e00b      	b.n	800518e <HAL_RCC_OscConfig+0x516>
 8005176:	4b5b      	ldr	r3, [pc, #364]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005178:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800517a:	4b5a      	ldr	r3, [pc, #360]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 800517c:	495a      	ldr	r1, [pc, #360]	; (80052e8 <HAL_RCC_OscConfig+0x670>)
 800517e:	400a      	ands	r2, r1
 8005180:	651a      	str	r2, [r3, #80]	; 0x50
 8005182:	4b58      	ldr	r3, [pc, #352]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005186:	4b57      	ldr	r3, [pc, #348]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005188:	4959      	ldr	r1, [pc, #356]	; (80052f0 <HAL_RCC_OscConfig+0x678>)
 800518a:	400a      	ands	r2, r1
 800518c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d015      	beq.n	80051c2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005196:	f7fd fe79 	bl	8002e8c <HAL_GetTick>
 800519a:	0003      	movs	r3, r0
 800519c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800519e:	e009      	b.n	80051b4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a0:	f7fd fe74 	bl	8002e8c <HAL_GetTick>
 80051a4:	0002      	movs	r2, r0
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	4a52      	ldr	r2, [pc, #328]	; (80052f4 <HAL_RCC_OscConfig+0x67c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e11a      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051b4:	4b4b      	ldr	r3, [pc, #300]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 80051b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4013      	ands	r3, r2
 80051be:	d0ef      	beq.n	80051a0 <HAL_RCC_OscConfig+0x528>
 80051c0:	e014      	b.n	80051ec <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c2:	f7fd fe63 	bl	8002e8c <HAL_GetTick>
 80051c6:	0003      	movs	r3, r0
 80051c8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051ca:	e009      	b.n	80051e0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051cc:	f7fd fe5e 	bl	8002e8c <HAL_GetTick>
 80051d0:	0002      	movs	r2, r0
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	4a47      	ldr	r2, [pc, #284]	; (80052f4 <HAL_RCC_OscConfig+0x67c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e104      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051e0:	4b40      	ldr	r3, [pc, #256]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 80051e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051e4:	2380      	movs	r3, #128	; 0x80
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4013      	ands	r3, r2
 80051ea:	d1ef      	bne.n	80051cc <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051ec:	2327      	movs	r3, #39	; 0x27
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d105      	bne.n	8005202 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f6:	4b3b      	ldr	r3, [pc, #236]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 80051f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051fa:	4b3a      	ldr	r3, [pc, #232]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 80051fc:	493e      	ldr	r1, [pc, #248]	; (80052f8 <HAL_RCC_OscConfig+0x680>)
 80051fe:	400a      	ands	r2, r1
 8005200:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2220      	movs	r2, #32
 8005208:	4013      	ands	r3, r2
 800520a:	d049      	beq.n	80052a0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d026      	beq.n	8005262 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005214:	4b33      	ldr	r3, [pc, #204]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	4b32      	ldr	r3, [pc, #200]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 800521a:	2101      	movs	r1, #1
 800521c:	430a      	orrs	r2, r1
 800521e:	609a      	str	r2, [r3, #8]
 8005220:	4b30      	ldr	r3, [pc, #192]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005224:	4b2f      	ldr	r3, [pc, #188]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005226:	2101      	movs	r1, #1
 8005228:	430a      	orrs	r2, r1
 800522a:	635a      	str	r2, [r3, #52]	; 0x34
 800522c:	4b33      	ldr	r3, [pc, #204]	; (80052fc <HAL_RCC_OscConfig+0x684>)
 800522e:	6a1a      	ldr	r2, [r3, #32]
 8005230:	4b32      	ldr	r3, [pc, #200]	; (80052fc <HAL_RCC_OscConfig+0x684>)
 8005232:	2180      	movs	r1, #128	; 0x80
 8005234:	0189      	lsls	r1, r1, #6
 8005236:	430a      	orrs	r2, r1
 8005238:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523a:	f7fd fe27 	bl	8002e8c <HAL_GetTick>
 800523e:	0003      	movs	r3, r0
 8005240:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005244:	f7fd fe22 	bl	8002e8c <HAL_GetTick>
 8005248:	0002      	movs	r2, r0
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e0c9      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005256:	4b23      	ldr	r3, [pc, #140]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	2202      	movs	r2, #2
 800525c:	4013      	ands	r3, r2
 800525e:	d0f1      	beq.n	8005244 <HAL_RCC_OscConfig+0x5cc>
 8005260:	e01e      	b.n	80052a0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005262:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	4b1f      	ldr	r3, [pc, #124]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005268:	2101      	movs	r1, #1
 800526a:	438a      	bics	r2, r1
 800526c:	609a      	str	r2, [r3, #8]
 800526e:	4b23      	ldr	r3, [pc, #140]	; (80052fc <HAL_RCC_OscConfig+0x684>)
 8005270:	6a1a      	ldr	r2, [r3, #32]
 8005272:	4b22      	ldr	r3, [pc, #136]	; (80052fc <HAL_RCC_OscConfig+0x684>)
 8005274:	4922      	ldr	r1, [pc, #136]	; (8005300 <HAL_RCC_OscConfig+0x688>)
 8005276:	400a      	ands	r2, r1
 8005278:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527a:	f7fd fe07 	bl	8002e8c <HAL_GetTick>
 800527e:	0003      	movs	r3, r0
 8005280:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005284:	f7fd fe02 	bl	8002e8c <HAL_GetTick>
 8005288:	0002      	movs	r2, r0
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e0a9      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005296:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	2202      	movs	r2, #2
 800529c:	4013      	ands	r3, r2
 800529e:	d1f1      	bne.n	8005284 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d100      	bne.n	80052aa <HAL_RCC_OscConfig+0x632>
 80052a8:	e09e      	b.n	80053e8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	2b0c      	cmp	r3, #12
 80052ae:	d100      	bne.n	80052b2 <HAL_RCC_OscConfig+0x63a>
 80052b0:	e077      	b.n	80053a2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d158      	bne.n	800536c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ba:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <HAL_RCC_OscConfig+0x66c>)
 80052c0:	4910      	ldr	r1, [pc, #64]	; (8005304 <HAL_RCC_OscConfig+0x68c>)
 80052c2:	400a      	ands	r2, r1
 80052c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c6:	f7fd fde1 	bl	8002e8c <HAL_GetTick>
 80052ca:	0003      	movs	r3, r0
 80052cc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80052ce:	e01b      	b.n	8005308 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d0:	f7fd fddc 	bl	8002e8c <HAL_GetTick>
 80052d4:	0002      	movs	r2, r0
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d914      	bls.n	8005308 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e083      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	40021000 	.word	0x40021000
 80052e8:	fffffeff 	.word	0xfffffeff
 80052ec:	40007000 	.word	0x40007000
 80052f0:	fffffbff 	.word	0xfffffbff
 80052f4:	00001388 	.word	0x00001388
 80052f8:	efffffff 	.word	0xefffffff
 80052fc:	40010000 	.word	0x40010000
 8005300:	ffffdfff 	.word	0xffffdfff
 8005304:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005308:	4b3a      	ldr	r3, [pc, #232]	; (80053f4 <HAL_RCC_OscConfig+0x77c>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	2380      	movs	r3, #128	; 0x80
 800530e:	049b      	lsls	r3, r3, #18
 8005310:	4013      	ands	r3, r2
 8005312:	d1dd      	bne.n	80052d0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005314:	4b37      	ldr	r3, [pc, #220]	; (80053f4 <HAL_RCC_OscConfig+0x77c>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	4a37      	ldr	r2, [pc, #220]	; (80053f8 <HAL_RCC_OscConfig+0x780>)
 800531a:	4013      	ands	r3, r2
 800531c:	0019      	movs	r1, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	431a      	orrs	r2, r3
 800532e:	4b31      	ldr	r3, [pc, #196]	; (80053f4 <HAL_RCC_OscConfig+0x77c>)
 8005330:	430a      	orrs	r2, r1
 8005332:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005334:	4b2f      	ldr	r3, [pc, #188]	; (80053f4 <HAL_RCC_OscConfig+0x77c>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	4b2e      	ldr	r3, [pc, #184]	; (80053f4 <HAL_RCC_OscConfig+0x77c>)
 800533a:	2180      	movs	r1, #128	; 0x80
 800533c:	0449      	lsls	r1, r1, #17
 800533e:	430a      	orrs	r2, r1
 8005340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005342:	f7fd fda3 	bl	8002e8c <HAL_GetTick>
 8005346:	0003      	movs	r3, r0
 8005348:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800534c:	f7fd fd9e 	bl	8002e8c <HAL_GetTick>
 8005350:	0002      	movs	r2, r0
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e045      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800535e:	4b25      	ldr	r3, [pc, #148]	; (80053f4 <HAL_RCC_OscConfig+0x77c>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	049b      	lsls	r3, r3, #18
 8005366:	4013      	ands	r3, r2
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0x6d4>
 800536a:	e03d      	b.n	80053e8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536c:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <HAL_RCC_OscConfig+0x77c>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4b20      	ldr	r3, [pc, #128]	; (80053f4 <HAL_RCC_OscConfig+0x77c>)
 8005372:	4922      	ldr	r1, [pc, #136]	; (80053fc <HAL_RCC_OscConfig+0x784>)
 8005374:	400a      	ands	r2, r1
 8005376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005378:	f7fd fd88 	bl	8002e8c <HAL_GetTick>
 800537c:	0003      	movs	r3, r0
 800537e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005382:	f7fd fd83 	bl	8002e8c <HAL_GetTick>
 8005386:	0002      	movs	r2, r0
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e02a      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005394:	4b17      	ldr	r3, [pc, #92]	; (80053f4 <HAL_RCC_OscConfig+0x77c>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	2380      	movs	r3, #128	; 0x80
 800539a:	049b      	lsls	r3, r3, #18
 800539c:	4013      	ands	r3, r2
 800539e:	d1f0      	bne.n	8005382 <HAL_RCC_OscConfig+0x70a>
 80053a0:	e022      	b.n	80053e8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e01d      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053ae:	4b11      	ldr	r3, [pc, #68]	; (80053f4 <HAL_RCC_OscConfig+0x77c>)
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	2380      	movs	r3, #128	; 0x80
 80053b8:	025b      	lsls	r3, r3, #9
 80053ba:	401a      	ands	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d10f      	bne.n	80053e4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	23f0      	movs	r3, #240	; 0xf0
 80053c8:	039b      	lsls	r3, r3, #14
 80053ca:	401a      	ands	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d107      	bne.n	80053e4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	23c0      	movs	r3, #192	; 0xc0
 80053d8:	041b      	lsls	r3, r3, #16
 80053da:	401a      	ands	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d001      	beq.n	80053e8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e000      	b.n	80053ea <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b00a      	add	sp, #40	; 0x28
 80053f0:	bdb0      	pop	{r4, r5, r7, pc}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	40021000 	.word	0x40021000
 80053f8:	ff02ffff 	.word	0xff02ffff
 80053fc:	feffffff 	.word	0xfeffffff

08005400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005400:	b5b0      	push	{r4, r5, r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e128      	b.n	8005666 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005414:	4b96      	ldr	r3, [pc, #600]	; (8005670 <HAL_RCC_ClockConfig+0x270>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2201      	movs	r2, #1
 800541a:	4013      	ands	r3, r2
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d91e      	bls.n	8005460 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005422:	4b93      	ldr	r3, [pc, #588]	; (8005670 <HAL_RCC_ClockConfig+0x270>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2201      	movs	r2, #1
 8005428:	4393      	bics	r3, r2
 800542a:	0019      	movs	r1, r3
 800542c:	4b90      	ldr	r3, [pc, #576]	; (8005670 <HAL_RCC_ClockConfig+0x270>)
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005434:	f7fd fd2a 	bl	8002e8c <HAL_GetTick>
 8005438:	0003      	movs	r3, r0
 800543a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800543c:	e009      	b.n	8005452 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800543e:	f7fd fd25 	bl	8002e8c <HAL_GetTick>
 8005442:	0002      	movs	r2, r0
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	4a8a      	ldr	r2, [pc, #552]	; (8005674 <HAL_RCC_ClockConfig+0x274>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e109      	b.n	8005666 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005452:	4b87      	ldr	r3, [pc, #540]	; (8005670 <HAL_RCC_ClockConfig+0x270>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2201      	movs	r2, #1
 8005458:	4013      	ands	r3, r2
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d1ee      	bne.n	800543e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2202      	movs	r2, #2
 8005466:	4013      	ands	r3, r2
 8005468:	d009      	beq.n	800547e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800546a:	4b83      	ldr	r3, [pc, #524]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	22f0      	movs	r2, #240	; 0xf0
 8005470:	4393      	bics	r3, r2
 8005472:	0019      	movs	r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	4b7f      	ldr	r3, [pc, #508]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 800547a:	430a      	orrs	r2, r1
 800547c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2201      	movs	r2, #1
 8005484:	4013      	ands	r3, r2
 8005486:	d100      	bne.n	800548a <HAL_RCC_ClockConfig+0x8a>
 8005488:	e089      	b.n	800559e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d107      	bne.n	80054a2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005492:	4b79      	ldr	r3, [pc, #484]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	029b      	lsls	r3, r3, #10
 800549a:	4013      	ands	r3, r2
 800549c:	d120      	bne.n	80054e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e0e1      	b.n	8005666 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d107      	bne.n	80054ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054aa:	4b73      	ldr	r3, [pc, #460]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	049b      	lsls	r3, r3, #18
 80054b2:	4013      	ands	r3, r2
 80054b4:	d114      	bne.n	80054e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e0d5      	b.n	8005666 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d106      	bne.n	80054d0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054c2:	4b6d      	ldr	r3, [pc, #436]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2204      	movs	r2, #4
 80054c8:	4013      	ands	r3, r2
 80054ca:	d109      	bne.n	80054e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0ca      	b.n	8005666 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80054d0:	4b69      	ldr	r3, [pc, #420]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4013      	ands	r3, r2
 80054da:	d101      	bne.n	80054e0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e0c2      	b.n	8005666 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054e0:	4b65      	ldr	r3, [pc, #404]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	2203      	movs	r2, #3
 80054e6:	4393      	bics	r3, r2
 80054e8:	0019      	movs	r1, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	4b62      	ldr	r3, [pc, #392]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 80054f0:	430a      	orrs	r2, r1
 80054f2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054f4:	f7fd fcca 	bl	8002e8c <HAL_GetTick>
 80054f8:	0003      	movs	r3, r0
 80054fa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d111      	bne.n	8005528 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005504:	e009      	b.n	800551a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005506:	f7fd fcc1 	bl	8002e8c <HAL_GetTick>
 800550a:	0002      	movs	r2, r0
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	4a58      	ldr	r2, [pc, #352]	; (8005674 <HAL_RCC_ClockConfig+0x274>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d901      	bls.n	800551a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e0a5      	b.n	8005666 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800551a:	4b57      	ldr	r3, [pc, #348]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	220c      	movs	r2, #12
 8005520:	4013      	ands	r3, r2
 8005522:	2b08      	cmp	r3, #8
 8005524:	d1ef      	bne.n	8005506 <HAL_RCC_ClockConfig+0x106>
 8005526:	e03a      	b.n	800559e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b03      	cmp	r3, #3
 800552e:	d111      	bne.n	8005554 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005530:	e009      	b.n	8005546 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005532:	f7fd fcab 	bl	8002e8c <HAL_GetTick>
 8005536:	0002      	movs	r2, r0
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	4a4d      	ldr	r2, [pc, #308]	; (8005674 <HAL_RCC_ClockConfig+0x274>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e08f      	b.n	8005666 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005546:	4b4c      	ldr	r3, [pc, #304]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	220c      	movs	r2, #12
 800554c:	4013      	ands	r3, r2
 800554e:	2b0c      	cmp	r3, #12
 8005550:	d1ef      	bne.n	8005532 <HAL_RCC_ClockConfig+0x132>
 8005552:	e024      	b.n	800559e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d11b      	bne.n	8005594 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800555c:	e009      	b.n	8005572 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800555e:	f7fd fc95 	bl	8002e8c <HAL_GetTick>
 8005562:	0002      	movs	r2, r0
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	4a42      	ldr	r2, [pc, #264]	; (8005674 <HAL_RCC_ClockConfig+0x274>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e079      	b.n	8005666 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005572:	4b41      	ldr	r3, [pc, #260]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	220c      	movs	r2, #12
 8005578:	4013      	ands	r3, r2
 800557a:	2b04      	cmp	r3, #4
 800557c:	d1ef      	bne.n	800555e <HAL_RCC_ClockConfig+0x15e>
 800557e:	e00e      	b.n	800559e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005580:	f7fd fc84 	bl	8002e8c <HAL_GetTick>
 8005584:	0002      	movs	r2, r0
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	4a3a      	ldr	r2, [pc, #232]	; (8005674 <HAL_RCC_ClockConfig+0x274>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e068      	b.n	8005666 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005594:	4b38      	ldr	r3, [pc, #224]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	220c      	movs	r2, #12
 800559a:	4013      	ands	r3, r2
 800559c:	d1f0      	bne.n	8005580 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800559e:	4b34      	ldr	r3, [pc, #208]	; (8005670 <HAL_RCC_ClockConfig+0x270>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2201      	movs	r2, #1
 80055a4:	4013      	ands	r3, r2
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d21e      	bcs.n	80055ea <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ac:	4b30      	ldr	r3, [pc, #192]	; (8005670 <HAL_RCC_ClockConfig+0x270>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2201      	movs	r2, #1
 80055b2:	4393      	bics	r3, r2
 80055b4:	0019      	movs	r1, r3
 80055b6:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <HAL_RCC_ClockConfig+0x270>)
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055be:	f7fd fc65 	bl	8002e8c <HAL_GetTick>
 80055c2:	0003      	movs	r3, r0
 80055c4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055c6:	e009      	b.n	80055dc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c8:	f7fd fc60 	bl	8002e8c <HAL_GetTick>
 80055cc:	0002      	movs	r2, r0
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	4a28      	ldr	r2, [pc, #160]	; (8005674 <HAL_RCC_ClockConfig+0x274>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e044      	b.n	8005666 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055dc:	4b24      	ldr	r3, [pc, #144]	; (8005670 <HAL_RCC_ClockConfig+0x270>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2201      	movs	r2, #1
 80055e2:	4013      	ands	r3, r2
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d1ee      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2204      	movs	r2, #4
 80055f0:	4013      	ands	r3, r2
 80055f2:	d009      	beq.n	8005608 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f4:	4b20      	ldr	r3, [pc, #128]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	4a20      	ldr	r2, [pc, #128]	; (800567c <HAL_RCC_ClockConfig+0x27c>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	0019      	movs	r1, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	4b1d      	ldr	r3, [pc, #116]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 8005604:	430a      	orrs	r2, r1
 8005606:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2208      	movs	r2, #8
 800560e:	4013      	ands	r3, r2
 8005610:	d00a      	beq.n	8005628 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005612:	4b19      	ldr	r3, [pc, #100]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	4a1a      	ldr	r2, [pc, #104]	; (8005680 <HAL_RCC_ClockConfig+0x280>)
 8005618:	4013      	ands	r3, r2
 800561a:	0019      	movs	r1, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	00da      	lsls	r2, r3, #3
 8005622:	4b15      	ldr	r3, [pc, #84]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 8005624:	430a      	orrs	r2, r1
 8005626:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005628:	f000 f832 	bl	8005690 <HAL_RCC_GetSysClockFreq>
 800562c:	0001      	movs	r1, r0
 800562e:	4b12      	ldr	r3, [pc, #72]	; (8005678 <HAL_RCC_ClockConfig+0x278>)
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	091b      	lsrs	r3, r3, #4
 8005634:	220f      	movs	r2, #15
 8005636:	4013      	ands	r3, r2
 8005638:	4a12      	ldr	r2, [pc, #72]	; (8005684 <HAL_RCC_ClockConfig+0x284>)
 800563a:	5cd3      	ldrb	r3, [r2, r3]
 800563c:	000a      	movs	r2, r1
 800563e:	40da      	lsrs	r2, r3
 8005640:	4b11      	ldr	r3, [pc, #68]	; (8005688 <HAL_RCC_ClockConfig+0x288>)
 8005642:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005644:	4b11      	ldr	r3, [pc, #68]	; (800568c <HAL_RCC_ClockConfig+0x28c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	250b      	movs	r5, #11
 800564a:	197c      	adds	r4, r7, r5
 800564c:	0018      	movs	r0, r3
 800564e:	f7fd fbd7 	bl	8002e00 <HAL_InitTick>
 8005652:	0003      	movs	r3, r0
 8005654:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005656:	197b      	adds	r3, r7, r5
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800565e:	197b      	adds	r3, r7, r5
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	e000      	b.n	8005666 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	0018      	movs	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	b004      	add	sp, #16
 800566c:	bdb0      	pop	{r4, r5, r7, pc}
 800566e:	46c0      	nop			; (mov r8, r8)
 8005670:	40022000 	.word	0x40022000
 8005674:	00001388 	.word	0x00001388
 8005678:	40021000 	.word	0x40021000
 800567c:	fffff8ff 	.word	0xfffff8ff
 8005680:	ffffc7ff 	.word	0xffffc7ff
 8005684:	08007c30 	.word	0x08007c30
 8005688:	2000002c 	.word	0x2000002c
 800568c:	20000030 	.word	0x20000030

08005690 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005690:	b5b0      	push	{r4, r5, r7, lr}
 8005692:	b08e      	sub	sp, #56	; 0x38
 8005694:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005696:	4b4c      	ldr	r3, [pc, #304]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800569c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800569e:	230c      	movs	r3, #12
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b0c      	cmp	r3, #12
 80056a4:	d014      	beq.n	80056d0 <HAL_RCC_GetSysClockFreq+0x40>
 80056a6:	d900      	bls.n	80056aa <HAL_RCC_GetSysClockFreq+0x1a>
 80056a8:	e07b      	b.n	80057a2 <HAL_RCC_GetSysClockFreq+0x112>
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d002      	beq.n	80056b4 <HAL_RCC_GetSysClockFreq+0x24>
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d00b      	beq.n	80056ca <HAL_RCC_GetSysClockFreq+0x3a>
 80056b2:	e076      	b.n	80057a2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80056b4:	4b44      	ldr	r3, [pc, #272]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x138>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2210      	movs	r2, #16
 80056ba:	4013      	ands	r3, r2
 80056bc:	d002      	beq.n	80056c4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80056be:	4b43      	ldr	r3, [pc, #268]	; (80057cc <HAL_RCC_GetSysClockFreq+0x13c>)
 80056c0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80056c2:	e07c      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80056c4:	4b42      	ldr	r3, [pc, #264]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x140>)
 80056c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80056c8:	e079      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056ca:	4b42      	ldr	r3, [pc, #264]	; (80057d4 <HAL_RCC_GetSysClockFreq+0x144>)
 80056cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80056ce:	e076      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80056d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d2:	0c9a      	lsrs	r2, r3, #18
 80056d4:	230f      	movs	r3, #15
 80056d6:	401a      	ands	r2, r3
 80056d8:	4b3f      	ldr	r3, [pc, #252]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x148>)
 80056da:	5c9b      	ldrb	r3, [r3, r2]
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80056de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e0:	0d9a      	lsrs	r2, r3, #22
 80056e2:	2303      	movs	r3, #3
 80056e4:	4013      	ands	r3, r2
 80056e6:	3301      	adds	r3, #1
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056ea:	4b37      	ldr	r3, [pc, #220]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x138>)
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	025b      	lsls	r3, r3, #9
 80056f2:	4013      	ands	r3, r2
 80056f4:	d01a      	beq.n	800572c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	4a35      	ldr	r2, [pc, #212]	; (80057d4 <HAL_RCC_GetSysClockFreq+0x144>)
 8005700:	2300      	movs	r3, #0
 8005702:	69b8      	ldr	r0, [r7, #24]
 8005704:	69f9      	ldr	r1, [r7, #28]
 8005706:	f7fa fdbd 	bl	8000284 <__aeabi_lmul>
 800570a:	0002      	movs	r2, r0
 800570c:	000b      	movs	r3, r1
 800570e:	0010      	movs	r0, r2
 8005710:	0019      	movs	r1, r3
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f7fa fd91 	bl	8000244 <__aeabi_uldivmod>
 8005722:	0002      	movs	r2, r0
 8005724:	000b      	movs	r3, r1
 8005726:	0013      	movs	r3, r2
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
 800572a:	e037      	b.n	800579c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800572c:	4b26      	ldr	r3, [pc, #152]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x138>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2210      	movs	r2, #16
 8005732:	4013      	ands	r3, r2
 8005734:	d01a      	beq.n	800576c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	4a23      	ldr	r2, [pc, #140]	; (80057cc <HAL_RCC_GetSysClockFreq+0x13c>)
 8005740:	2300      	movs	r3, #0
 8005742:	68b8      	ldr	r0, [r7, #8]
 8005744:	68f9      	ldr	r1, [r7, #12]
 8005746:	f7fa fd9d 	bl	8000284 <__aeabi_lmul>
 800574a:	0002      	movs	r2, r0
 800574c:	000b      	movs	r3, r1
 800574e:	0010      	movs	r0, r2
 8005750:	0019      	movs	r1, r3
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	2300      	movs	r3, #0
 8005758:	607b      	str	r3, [r7, #4]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f7fa fd71 	bl	8000244 <__aeabi_uldivmod>
 8005762:	0002      	movs	r2, r0
 8005764:	000b      	movs	r3, r1
 8005766:	0013      	movs	r3, r2
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
 800576a:	e017      	b.n	800579c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	0018      	movs	r0, r3
 8005770:	2300      	movs	r3, #0
 8005772:	0019      	movs	r1, r3
 8005774:	4a16      	ldr	r2, [pc, #88]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x140>)
 8005776:	2300      	movs	r3, #0
 8005778:	f7fa fd84 	bl	8000284 <__aeabi_lmul>
 800577c:	0002      	movs	r2, r0
 800577e:	000b      	movs	r3, r1
 8005780:	0010      	movs	r0, r2
 8005782:	0019      	movs	r1, r3
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	001c      	movs	r4, r3
 8005788:	2300      	movs	r3, #0
 800578a:	001d      	movs	r5, r3
 800578c:	0022      	movs	r2, r4
 800578e:	002b      	movs	r3, r5
 8005790:	f7fa fd58 	bl	8000244 <__aeabi_uldivmod>
 8005794:	0002      	movs	r2, r0
 8005796:	000b      	movs	r3, r1
 8005798:	0013      	movs	r3, r2
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800579c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80057a0:	e00d      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80057a2:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x138>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	0b5b      	lsrs	r3, r3, #13
 80057a8:	2207      	movs	r2, #7
 80057aa:	4013      	ands	r3, r2
 80057ac:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	3301      	adds	r3, #1
 80057b2:	2280      	movs	r2, #128	; 0x80
 80057b4:	0212      	lsls	r2, r2, #8
 80057b6:	409a      	lsls	r2, r3
 80057b8:	0013      	movs	r3, r2
 80057ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80057bc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80057c0:	0018      	movs	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b00e      	add	sp, #56	; 0x38
 80057c6:	bdb0      	pop	{r4, r5, r7, pc}
 80057c8:	40021000 	.word	0x40021000
 80057cc:	003d0900 	.word	0x003d0900
 80057d0:	00f42400 	.word	0x00f42400
 80057d4:	007a1200 	.word	0x007a1200
 80057d8:	08007c40 	.word	0x08007c40

080057dc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80057e4:	2017      	movs	r0, #23
 80057e6:	183b      	adds	r3, r7, r0
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2220      	movs	r2, #32
 80057f2:	4013      	ands	r3, r2
 80057f4:	d100      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80057f6:	e0c7      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057f8:	4b93      	ldr	r3, [pc, #588]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	055b      	lsls	r3, r3, #21
 8005800:	4013      	ands	r3, r2
 8005802:	d109      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005804:	4b90      	ldr	r3, [pc, #576]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005808:	4b8f      	ldr	r3, [pc, #572]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800580a:	2180      	movs	r1, #128	; 0x80
 800580c:	0549      	lsls	r1, r1, #21
 800580e:	430a      	orrs	r2, r1
 8005810:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005812:	183b      	adds	r3, r7, r0
 8005814:	2201      	movs	r2, #1
 8005816:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005818:	4b8c      	ldr	r3, [pc, #560]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	4013      	ands	r3, r2
 8005822:	d11a      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005824:	4b89      	ldr	r3, [pc, #548]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	4b88      	ldr	r3, [pc, #544]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800582a:	2180      	movs	r1, #128	; 0x80
 800582c:	0049      	lsls	r1, r1, #1
 800582e:	430a      	orrs	r2, r1
 8005830:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005832:	f7fd fb2b 	bl	8002e8c <HAL_GetTick>
 8005836:	0003      	movs	r3, r0
 8005838:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800583a:	e008      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800583c:	f7fd fb26 	bl	8002e8c <HAL_GetTick>
 8005840:	0002      	movs	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b64      	cmp	r3, #100	; 0x64
 8005848:	d901      	bls.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e0f7      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x262>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800584e:	4b7f      	ldr	r3, [pc, #508]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	2380      	movs	r3, #128	; 0x80
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	4013      	ands	r3, r2
 8005858:	d0f0      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800585a:	4b7b      	ldr	r3, [pc, #492]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	23c0      	movs	r3, #192	; 0xc0
 8005860:	039b      	lsls	r3, r3, #14
 8005862:	4013      	ands	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	23c0      	movs	r3, #192	; 0xc0
 800586c:	039b      	lsls	r3, r3, #14
 800586e:	4013      	ands	r3, r2
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	429a      	cmp	r2, r3
 8005874:	d013      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	23c0      	movs	r3, #192	; 0xc0
 800587c:	029b      	lsls	r3, r3, #10
 800587e:	401a      	ands	r2, r3
 8005880:	23c0      	movs	r3, #192	; 0xc0
 8005882:	029b      	lsls	r3, r3, #10
 8005884:	429a      	cmp	r2, r3
 8005886:	d10a      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005888:	4b6f      	ldr	r3, [pc, #444]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	029b      	lsls	r3, r3, #10
 8005890:	401a      	ands	r2, r3
 8005892:	2380      	movs	r3, #128	; 0x80
 8005894:	029b      	lsls	r3, r3, #10
 8005896:	429a      	cmp	r2, r3
 8005898:	d101      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e0cf      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x262>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800589e:	4b6a      	ldr	r3, [pc, #424]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058a2:	23c0      	movs	r3, #192	; 0xc0
 80058a4:	029b      	lsls	r3, r3, #10
 80058a6:	4013      	ands	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d03b      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	23c0      	movs	r3, #192	; 0xc0
 80058b6:	029b      	lsls	r3, r3, #10
 80058b8:	4013      	ands	r3, r2
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d033      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2220      	movs	r2, #32
 80058c6:	4013      	ands	r3, r2
 80058c8:	d02e      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80058ca:	4b5f      	ldr	r3, [pc, #380]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ce:	4a60      	ldr	r2, [pc, #384]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058d4:	4b5c      	ldr	r3, [pc, #368]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058d8:	4b5b      	ldr	r3, [pc, #364]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058da:	2180      	movs	r1, #128	; 0x80
 80058dc:	0309      	lsls	r1, r1, #12
 80058de:	430a      	orrs	r2, r1
 80058e0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058e2:	4b59      	ldr	r3, [pc, #356]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058e6:	4b58      	ldr	r3, [pc, #352]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058e8:	495a      	ldr	r1, [pc, #360]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80058ea:	400a      	ands	r2, r1
 80058ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80058ee:	4b56      	ldr	r3, [pc, #344]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	2380      	movs	r3, #128	; 0x80
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	4013      	ands	r3, r2
 80058fc:	d014      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fe:	f7fd fac5 	bl	8002e8c <HAL_GetTick>
 8005902:	0003      	movs	r3, r0
 8005904:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005906:	e009      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005908:	f7fd fac0 	bl	8002e8c <HAL_GetTick>
 800590c:	0002      	movs	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	4a51      	ldr	r2, [pc, #324]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d901      	bls.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e090      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x262>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800591c:	4b4a      	ldr	r3, [pc, #296]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800591e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005920:	2380      	movs	r3, #128	; 0x80
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4013      	ands	r3, r2
 8005926:	d0ef      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2220      	movs	r2, #32
 800592e:	4013      	ands	r3, r2
 8005930:	d01f      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	23c0      	movs	r3, #192	; 0xc0
 8005938:	029b      	lsls	r3, r3, #10
 800593a:	401a      	ands	r2, r3
 800593c:	23c0      	movs	r3, #192	; 0xc0
 800593e:	029b      	lsls	r3, r3, #10
 8005940:	429a      	cmp	r2, r3
 8005942:	d10c      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005944:	4b40      	ldr	r3, [pc, #256]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a44      	ldr	r2, [pc, #272]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800594a:	4013      	ands	r3, r2
 800594c:	0019      	movs	r1, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	23c0      	movs	r3, #192	; 0xc0
 8005954:	039b      	lsls	r3, r3, #14
 8005956:	401a      	ands	r2, r3
 8005958:	4b3b      	ldr	r3, [pc, #236]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800595a:	430a      	orrs	r2, r1
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	4b3a      	ldr	r3, [pc, #232]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005960:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	23c0      	movs	r3, #192	; 0xc0
 8005968:	029b      	lsls	r3, r3, #10
 800596a:	401a      	ands	r2, r3
 800596c:	4b36      	ldr	r3, [pc, #216]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800596e:	430a      	orrs	r2, r1
 8005970:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005972:	2317      	movs	r3, #23
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d105      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800597c:	4b32      	ldr	r3, [pc, #200]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800597e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005980:	4b31      	ldr	r3, [pc, #196]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005982:	4937      	ldr	r1, [pc, #220]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005984:	400a      	ands	r2, r1
 8005986:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2201      	movs	r2, #1
 800598e:	4013      	ands	r3, r2
 8005990:	d009      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005992:	4b2d      	ldr	r3, [pc, #180]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005996:	2203      	movs	r2, #3
 8005998:	4393      	bics	r3, r2
 800599a:	0019      	movs	r1, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	4b29      	ldr	r3, [pc, #164]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80059a2:	430a      	orrs	r2, r1
 80059a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2202      	movs	r2, #2
 80059ac:	4013      	ands	r3, r2
 80059ae:	d009      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059b0:	4b25      	ldr	r3, [pc, #148]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80059b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b4:	220c      	movs	r2, #12
 80059b6:	4393      	bics	r3, r2
 80059b8:	0019      	movs	r1, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	4b22      	ldr	r3, [pc, #136]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80059c0:	430a      	orrs	r2, r1
 80059c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2204      	movs	r2, #4
 80059ca:	4013      	ands	r3, r2
 80059cc:	d009      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059ce:	4b1e      	ldr	r3, [pc, #120]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80059d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d2:	4a24      	ldr	r2, [pc, #144]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	0019      	movs	r1, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	4b1a      	ldr	r3, [pc, #104]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80059de:	430a      	orrs	r2, r1
 80059e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2208      	movs	r2, #8
 80059e8:	4013      	ands	r3, r2
 80059ea:	d009      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059ec:	4b16      	ldr	r3, [pc, #88]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80059ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f0:	4a1d      	ldr	r2, [pc, #116]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80059f2:	4013      	ands	r3, r2
 80059f4:	0019      	movs	r1, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695a      	ldr	r2, [r3, #20]
 80059fa:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80059fc:	430a      	orrs	r2, r1
 80059fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2240      	movs	r2, #64	; 0x40
 8005a06:	4013      	ands	r3, r2
 8005a08:	d009      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a0a:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a0e:	4a17      	ldr	r2, [pc, #92]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	0019      	movs	r1, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2280      	movs	r2, #128	; 0x80
 8005a24:	4013      	ands	r3, r2
 8005a26:	d009      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005a28:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a2c:	4a10      	ldr	r2, [pc, #64]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	0019      	movs	r1, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699a      	ldr	r2, [r3, #24]
 8005a36:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	0018      	movs	r0, r3
 8005a40:	46bd      	mov	sp, r7
 8005a42:	b006      	add	sp, #24
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	40007000 	.word	0x40007000
 8005a50:	fffcffff 	.word	0xfffcffff
 8005a54:	fff7ffff 	.word	0xfff7ffff
 8005a58:	00001388 	.word	0x00001388
 8005a5c:	ffcfffff 	.word	0xffcfffff
 8005a60:	efffffff 	.word	0xefffffff
 8005a64:	fffff3ff 	.word	0xfffff3ff
 8005a68:	ffffcfff 	.word	0xffffcfff
 8005a6c:	fbffffff 	.word	0xfbffffff
 8005a70:	fff3ffff 	.word	0xfff3ffff

08005a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e083      	b.n	8005b8e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	2382      	movs	r3, #130	; 0x82
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d009      	beq.n	8005aae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	61da      	str	r2, [r3, #28]
 8005aa0:	e005      	b.n	8005aae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2251      	movs	r2, #81	; 0x51
 8005ab8:	5c9b      	ldrb	r3, [r3, r2]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d107      	bne.n	8005ad0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2250      	movs	r2, #80	; 0x50
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	0018      	movs	r0, r3
 8005acc:	f7fd f89c 	bl	8002c08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2251      	movs	r2, #81	; 0x51
 8005ad4:	2102      	movs	r1, #2
 8005ad6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2140      	movs	r1, #64	; 0x40
 8005ae4:	438a      	bics	r2, r1
 8005ae6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	2382      	movs	r3, #130	; 0x82
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	401a      	ands	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6899      	ldr	r1, [r3, #8]
 8005af6:	2384      	movs	r3, #132	; 0x84
 8005af8:	021b      	lsls	r3, r3, #8
 8005afa:	400b      	ands	r3, r1
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68d9      	ldr	r1, [r3, #12]
 8005b02:	2380      	movs	r3, #128	; 0x80
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	400b      	ands	r3, r1
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2102      	movs	r1, #2
 8005b10:	400b      	ands	r3, r1
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	2101      	movs	r1, #1
 8005b1a:	400b      	ands	r3, r1
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6999      	ldr	r1, [r3, #24]
 8005b22:	2380      	movs	r3, #128	; 0x80
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	400b      	ands	r3, r1
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	2138      	movs	r1, #56	; 0x38
 8005b30:	400b      	ands	r3, r1
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	2180      	movs	r1, #128	; 0x80
 8005b3a:	400b      	ands	r3, r1
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	0011      	movs	r1, r2
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	019b      	lsls	r3, r3, #6
 8005b48:	401a      	ands	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	0c1b      	lsrs	r3, r3, #16
 8005b58:	2204      	movs	r2, #4
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	0019      	movs	r1, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	2210      	movs	r2, #16
 8005b64:	401a      	ands	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4907      	ldr	r1, [pc, #28]	; (8005b98 <HAL_SPI_Init+0x124>)
 8005b7a:	400a      	ands	r2, r1
 8005b7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2251      	movs	r2, #81	; 0x51
 8005b88:	2101      	movs	r1, #1
 8005b8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	0018      	movs	r0, r3
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b002      	add	sp, #8
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	46c0      	nop			; (mov r8, r8)
 8005b98:	fffff7ff 	.word	0xfffff7ff

08005b9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	1dbb      	adds	r3, r7, #6
 8005baa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bac:	231f      	movs	r3, #31
 8005bae:	18fb      	adds	r3, r7, r3
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2250      	movs	r2, #80	; 0x50
 8005bb8:	5c9b      	ldrb	r3, [r3, r2]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_SPI_Transmit+0x26>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e145      	b.n	8005e4e <HAL_SPI_Transmit+0x2b2>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2250      	movs	r2, #80	; 0x50
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bca:	f7fd f95f 	bl	8002e8c <HAL_GetTick>
 8005bce:	0003      	movs	r3, r0
 8005bd0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005bd2:	2316      	movs	r3, #22
 8005bd4:	18fb      	adds	r3, r7, r3
 8005bd6:	1dba      	adds	r2, r7, #6
 8005bd8:	8812      	ldrh	r2, [r2, #0]
 8005bda:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2251      	movs	r2, #81	; 0x51
 8005be0:	5c9b      	ldrb	r3, [r3, r2]
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d004      	beq.n	8005bf2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005be8:	231f      	movs	r3, #31
 8005bea:	18fb      	adds	r3, r7, r3
 8005bec:	2202      	movs	r2, #2
 8005bee:	701a      	strb	r2, [r3, #0]
    goto error;
 8005bf0:	e126      	b.n	8005e40 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_SPI_Transmit+0x64>
 8005bf8:	1dbb      	adds	r3, r7, #6
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d104      	bne.n	8005c0a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005c00:	231f      	movs	r3, #31
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	2201      	movs	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c08:	e11a      	b.n	8005e40 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2251      	movs	r2, #81	; 0x51
 8005c0e:	2103      	movs	r1, #3
 8005c10:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	1dba      	adds	r2, r7, #6
 8005c22:	8812      	ldrh	r2, [r2, #0]
 8005c24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1dba      	adds	r2, r7, #6
 8005c2a:	8812      	ldrh	r2, [r2, #0]
 8005c2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d110      	bne.n	8005c7a <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2140      	movs	r1, #64	; 0x40
 8005c64:	438a      	bics	r2, r1
 8005c66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2180      	movs	r1, #128	; 0x80
 8005c74:	01c9      	lsls	r1, r1, #7
 8005c76:	430a      	orrs	r2, r1
 8005c78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2240      	movs	r2, #64	; 0x40
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b40      	cmp	r3, #64	; 0x40
 8005c86:	d007      	beq.n	8005c98 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2140      	movs	r1, #64	; 0x40
 8005c94:	430a      	orrs	r2, r1
 8005c96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	2380      	movs	r3, #128	; 0x80
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d152      	bne.n	8005d4a <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <HAL_SPI_Transmit+0x11a>
 8005cac:	2316      	movs	r3, #22
 8005cae:	18fb      	adds	r3, r7, r3
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d143      	bne.n	8005d3e <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	881a      	ldrh	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc6:	1c9a      	adds	r2, r3, #2
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cda:	e030      	b.n	8005d3e <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d112      	bne.n	8005d10 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	881a      	ldrh	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfa:	1c9a      	adds	r2, r3, #2
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d0e:	e016      	b.n	8005d3e <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d10:	f7fd f8bc 	bl	8002e8c <HAL_GetTick>
 8005d14:	0002      	movs	r2, r0
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d802      	bhi.n	8005d26 <HAL_SPI_Transmit+0x18a>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	3301      	adds	r3, #1
 8005d24:	d102      	bne.n	8005d2c <HAL_SPI_Transmit+0x190>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d108      	bne.n	8005d3e <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8005d2c:	231f      	movs	r3, #31
 8005d2e:	18fb      	adds	r3, r7, r3
 8005d30:	2203      	movs	r2, #3
 8005d32:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2251      	movs	r2, #81	; 0x51
 8005d38:	2101      	movs	r1, #1
 8005d3a:	5499      	strb	r1, [r3, r2]
          goto error;
 8005d3c:	e080      	b.n	8005e40 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1c9      	bne.n	8005cdc <HAL_SPI_Transmit+0x140>
 8005d48:	e053      	b.n	8005df2 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d004      	beq.n	8005d5c <HAL_SPI_Transmit+0x1c0>
 8005d52:	2316      	movs	r3, #22
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d145      	bne.n	8005de8 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	330c      	adds	r3, #12
 8005d66:	7812      	ldrb	r2, [r2, #0]
 8005d68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d82:	e031      	b.n	8005de8 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d113      	bne.n	8005dba <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	7812      	ldrb	r2, [r2, #0]
 8005d9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005db8:	e016      	b.n	8005de8 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dba:	f7fd f867 	bl	8002e8c <HAL_GetTick>
 8005dbe:	0002      	movs	r2, r0
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d802      	bhi.n	8005dd0 <HAL_SPI_Transmit+0x234>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	d102      	bne.n	8005dd6 <HAL_SPI_Transmit+0x23a>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d108      	bne.n	8005de8 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8005dd6:	231f      	movs	r3, #31
 8005dd8:	18fb      	adds	r3, r7, r3
 8005dda:	2203      	movs	r2, #3
 8005ddc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2251      	movs	r2, #81	; 0x51
 8005de2:	2101      	movs	r1, #1
 8005de4:	5499      	strb	r1, [r3, r2]
          goto error;
 8005de6:	e02b      	b.n	8005e40 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1c8      	bne.n	8005d84 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f000 f8bb 	bl	8005f74 <SPI_EndRxTxTransaction>
 8005dfe:	1e03      	subs	r3, r0, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e10:	2300      	movs	r3, #0
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d004      	beq.n	8005e38 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8005e2e:	231f      	movs	r3, #31
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	2201      	movs	r2, #1
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	e003      	b.n	8005e40 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2251      	movs	r2, #81	; 0x51
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2250      	movs	r2, #80	; 0x50
 8005e44:	2100      	movs	r1, #0
 8005e46:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005e48:	231f      	movs	r3, #31
 8005e4a:	18fb      	adds	r3, r7, r3
 8005e4c:	781b      	ldrb	r3, [r3, #0]
}
 8005e4e:	0018      	movs	r0, r3
 8005e50:	46bd      	mov	sp, r7
 8005e52:	b008      	add	sp, #32
 8005e54:	bd80      	pop	{r7, pc}
	...

08005e58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	1dfb      	adds	r3, r7, #7
 8005e66:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e68:	f7fd f810 	bl	8002e8c <HAL_GetTick>
 8005e6c:	0002      	movs	r2, r0
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	18d3      	adds	r3, r2, r3
 8005e76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e78:	f7fd f808 	bl	8002e8c <HAL_GetTick>
 8005e7c:	0003      	movs	r3, r0
 8005e7e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e80:	4b3a      	ldr	r3, [pc, #232]	; (8005f6c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	015b      	lsls	r3, r3, #5
 8005e86:	0d1b      	lsrs	r3, r3, #20
 8005e88:	69fa      	ldr	r2, [r7, #28]
 8005e8a:	4353      	muls	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e8e:	e058      	b.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	3301      	adds	r3, #1
 8005e94:	d055      	beq.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e96:	f7fc fff9 	bl	8002e8c <HAL_GetTick>
 8005e9a:	0002      	movs	r2, r0
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d902      	bls.n	8005eac <SPI_WaitFlagStateUntilTimeout+0x54>
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d142      	bne.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	21e0      	movs	r1, #224	; 0xe0
 8005eb8:	438a      	bics	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	2382      	movs	r3, #130	; 0x82
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d113      	bne.n	8005ef0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	2380      	movs	r3, #128	; 0x80
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d005      	beq.n	8005ee0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	2380      	movs	r3, #128	; 0x80
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d107      	bne.n	8005ef0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2140      	movs	r1, #64	; 0x40
 8005eec:	438a      	bics	r2, r1
 8005eee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	019b      	lsls	r3, r3, #6
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d110      	bne.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	491a      	ldr	r1, [pc, #104]	; (8005f70 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005f08:	400a      	ands	r2, r1
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2180      	movs	r1, #128	; 0x80
 8005f18:	0189      	lsls	r1, r1, #6
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2251      	movs	r2, #81	; 0x51
 8005f22:	2101      	movs	r1, #1
 8005f24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2250      	movs	r2, #80	; 0x50
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e017      	b.n	8005f62 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	425a      	negs	r2, r3
 8005f52:	4153      	adcs	r3, r2
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	001a      	movs	r2, r3
 8005f58:	1dfb      	adds	r3, r7, #7
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d197      	bne.n	8005e90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	0018      	movs	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	b008      	add	sp, #32
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	2000002c 	.word	0x2000002c
 8005f70:	ffffdfff 	.word	0xffffdfff

08005f74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f80:	4b1d      	ldr	r3, [pc, #116]	; (8005ff8 <SPI_EndRxTxTransaction+0x84>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	491d      	ldr	r1, [pc, #116]	; (8005ffc <SPI_EndRxTxTransaction+0x88>)
 8005f86:	0018      	movs	r0, r3
 8005f88:	f7fa f8d0 	bl	800012c <__udivsi3>
 8005f8c:	0003      	movs	r3, r0
 8005f8e:	001a      	movs	r2, r3
 8005f90:	0013      	movs	r3, r2
 8005f92:	015b      	lsls	r3, r3, #5
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	189b      	adds	r3, r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	2382      	movs	r3, #130	; 0x82
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d112      	bne.n	8005fd0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	0013      	movs	r3, r2
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2180      	movs	r1, #128	; 0x80
 8005fb8:	f7ff ff4e 	bl	8005e58 <SPI_WaitFlagStateUntilTimeout>
 8005fbc:	1e03      	subs	r3, r0, #0
 8005fbe:	d016      	beq.n	8005fee <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e00f      	b.n	8005ff0 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	2280      	movs	r2, #128	; 0x80
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b80      	cmp	r3, #128	; 0x80
 8005fe8:	d0f2      	beq.n	8005fd0 <SPI_EndRxTxTransaction+0x5c>
 8005fea:	e000      	b.n	8005fee <SPI_EndRxTxTransaction+0x7a>
        break;
 8005fec:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b006      	add	sp, #24
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	2000002c 	.word	0x2000002c
 8005ffc:	016e3600 	.word	0x016e3600

08006000 <__errno>:
 8006000:	4b01      	ldr	r3, [pc, #4]	; (8006008 <__errno+0x8>)
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	4770      	bx	lr
 8006006:	46c0      	nop			; (mov r8, r8)
 8006008:	20000038 	.word	0x20000038

0800600c <__libc_init_array>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	2600      	movs	r6, #0
 8006010:	4d0c      	ldr	r5, [pc, #48]	; (8006044 <__libc_init_array+0x38>)
 8006012:	4c0d      	ldr	r4, [pc, #52]	; (8006048 <__libc_init_array+0x3c>)
 8006014:	1b64      	subs	r4, r4, r5
 8006016:	10a4      	asrs	r4, r4, #2
 8006018:	42a6      	cmp	r6, r4
 800601a:	d109      	bne.n	8006030 <__libc_init_array+0x24>
 800601c:	2600      	movs	r6, #0
 800601e:	f000 fc8b 	bl	8006938 <_init>
 8006022:	4d0a      	ldr	r5, [pc, #40]	; (800604c <__libc_init_array+0x40>)
 8006024:	4c0a      	ldr	r4, [pc, #40]	; (8006050 <__libc_init_array+0x44>)
 8006026:	1b64      	subs	r4, r4, r5
 8006028:	10a4      	asrs	r4, r4, #2
 800602a:	42a6      	cmp	r6, r4
 800602c:	d105      	bne.n	800603a <__libc_init_array+0x2e>
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	00b3      	lsls	r3, r6, #2
 8006032:	58eb      	ldr	r3, [r5, r3]
 8006034:	4798      	blx	r3
 8006036:	3601      	adds	r6, #1
 8006038:	e7ee      	b.n	8006018 <__libc_init_array+0xc>
 800603a:	00b3      	lsls	r3, r6, #2
 800603c:	58eb      	ldr	r3, [r5, r3]
 800603e:	4798      	blx	r3
 8006040:	3601      	adds	r6, #1
 8006042:	e7f2      	b.n	800602a <__libc_init_array+0x1e>
 8006044:	08007c84 	.word	0x08007c84
 8006048:	08007c84 	.word	0x08007c84
 800604c:	08007c84 	.word	0x08007c84
 8006050:	08007c88 	.word	0x08007c88

08006054 <memcpy>:
 8006054:	2300      	movs	r3, #0
 8006056:	b510      	push	{r4, lr}
 8006058:	429a      	cmp	r2, r3
 800605a:	d100      	bne.n	800605e <memcpy+0xa>
 800605c:	bd10      	pop	{r4, pc}
 800605e:	5ccc      	ldrb	r4, [r1, r3]
 8006060:	54c4      	strb	r4, [r0, r3]
 8006062:	3301      	adds	r3, #1
 8006064:	e7f8      	b.n	8006058 <memcpy+0x4>

08006066 <memset>:
 8006066:	0003      	movs	r3, r0
 8006068:	1882      	adds	r2, r0, r2
 800606a:	4293      	cmp	r3, r2
 800606c:	d100      	bne.n	8006070 <memset+0xa>
 800606e:	4770      	bx	lr
 8006070:	7019      	strb	r1, [r3, #0]
 8006072:	3301      	adds	r3, #1
 8006074:	e7f9      	b.n	800606a <memset+0x4>
	...

08006078 <siprintf>:
 8006078:	b40e      	push	{r1, r2, r3}
 800607a:	b500      	push	{lr}
 800607c:	490b      	ldr	r1, [pc, #44]	; (80060ac <siprintf+0x34>)
 800607e:	b09c      	sub	sp, #112	; 0x70
 8006080:	ab1d      	add	r3, sp, #116	; 0x74
 8006082:	9002      	str	r0, [sp, #8]
 8006084:	9006      	str	r0, [sp, #24]
 8006086:	9107      	str	r1, [sp, #28]
 8006088:	9104      	str	r1, [sp, #16]
 800608a:	4809      	ldr	r0, [pc, #36]	; (80060b0 <siprintf+0x38>)
 800608c:	4909      	ldr	r1, [pc, #36]	; (80060b4 <siprintf+0x3c>)
 800608e:	cb04      	ldmia	r3!, {r2}
 8006090:	9105      	str	r1, [sp, #20]
 8006092:	6800      	ldr	r0, [r0, #0]
 8006094:	a902      	add	r1, sp, #8
 8006096:	9301      	str	r3, [sp, #4]
 8006098:	f000 f870 	bl	800617c <_svfiprintf_r>
 800609c:	2300      	movs	r3, #0
 800609e:	9a02      	ldr	r2, [sp, #8]
 80060a0:	7013      	strb	r3, [r2, #0]
 80060a2:	b01c      	add	sp, #112	; 0x70
 80060a4:	bc08      	pop	{r3}
 80060a6:	b003      	add	sp, #12
 80060a8:	4718      	bx	r3
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	7fffffff 	.word	0x7fffffff
 80060b0:	20000038 	.word	0x20000038
 80060b4:	ffff0208 	.word	0xffff0208

080060b8 <__ssputs_r>:
 80060b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ba:	688e      	ldr	r6, [r1, #8]
 80060bc:	b085      	sub	sp, #20
 80060be:	0007      	movs	r7, r0
 80060c0:	000c      	movs	r4, r1
 80060c2:	9203      	str	r2, [sp, #12]
 80060c4:	9301      	str	r3, [sp, #4]
 80060c6:	429e      	cmp	r6, r3
 80060c8:	d83c      	bhi.n	8006144 <__ssputs_r+0x8c>
 80060ca:	2390      	movs	r3, #144	; 0x90
 80060cc:	898a      	ldrh	r2, [r1, #12]
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	421a      	tst	r2, r3
 80060d2:	d034      	beq.n	800613e <__ssputs_r+0x86>
 80060d4:	6909      	ldr	r1, [r1, #16]
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	6960      	ldr	r0, [r4, #20]
 80060da:	1a5b      	subs	r3, r3, r1
 80060dc:	9302      	str	r3, [sp, #8]
 80060de:	2303      	movs	r3, #3
 80060e0:	4343      	muls	r3, r0
 80060e2:	0fdd      	lsrs	r5, r3, #31
 80060e4:	18ed      	adds	r5, r5, r3
 80060e6:	9b01      	ldr	r3, [sp, #4]
 80060e8:	9802      	ldr	r0, [sp, #8]
 80060ea:	3301      	adds	r3, #1
 80060ec:	181b      	adds	r3, r3, r0
 80060ee:	106d      	asrs	r5, r5, #1
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	d900      	bls.n	80060f6 <__ssputs_r+0x3e>
 80060f4:	001d      	movs	r5, r3
 80060f6:	0553      	lsls	r3, r2, #21
 80060f8:	d532      	bpl.n	8006160 <__ssputs_r+0xa8>
 80060fa:	0029      	movs	r1, r5
 80060fc:	0038      	movs	r0, r7
 80060fe:	f000 fb49 	bl	8006794 <_malloc_r>
 8006102:	1e06      	subs	r6, r0, #0
 8006104:	d109      	bne.n	800611a <__ssputs_r+0x62>
 8006106:	230c      	movs	r3, #12
 8006108:	603b      	str	r3, [r7, #0]
 800610a:	2340      	movs	r3, #64	; 0x40
 800610c:	2001      	movs	r0, #1
 800610e:	89a2      	ldrh	r2, [r4, #12]
 8006110:	4240      	negs	r0, r0
 8006112:	4313      	orrs	r3, r2
 8006114:	81a3      	strh	r3, [r4, #12]
 8006116:	b005      	add	sp, #20
 8006118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800611a:	9a02      	ldr	r2, [sp, #8]
 800611c:	6921      	ldr	r1, [r4, #16]
 800611e:	f7ff ff99 	bl	8006054 <memcpy>
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	4a14      	ldr	r2, [pc, #80]	; (8006178 <__ssputs_r+0xc0>)
 8006126:	401a      	ands	r2, r3
 8006128:	2380      	movs	r3, #128	; 0x80
 800612a:	4313      	orrs	r3, r2
 800612c:	81a3      	strh	r3, [r4, #12]
 800612e:	9b02      	ldr	r3, [sp, #8]
 8006130:	6126      	str	r6, [r4, #16]
 8006132:	18f6      	adds	r6, r6, r3
 8006134:	6026      	str	r6, [r4, #0]
 8006136:	6165      	str	r5, [r4, #20]
 8006138:	9e01      	ldr	r6, [sp, #4]
 800613a:	1aed      	subs	r5, r5, r3
 800613c:	60a5      	str	r5, [r4, #8]
 800613e:	9b01      	ldr	r3, [sp, #4]
 8006140:	429e      	cmp	r6, r3
 8006142:	d900      	bls.n	8006146 <__ssputs_r+0x8e>
 8006144:	9e01      	ldr	r6, [sp, #4]
 8006146:	0032      	movs	r2, r6
 8006148:	9903      	ldr	r1, [sp, #12]
 800614a:	6820      	ldr	r0, [r4, #0]
 800614c:	f000 faa3 	bl	8006696 <memmove>
 8006150:	68a3      	ldr	r3, [r4, #8]
 8006152:	2000      	movs	r0, #0
 8006154:	1b9b      	subs	r3, r3, r6
 8006156:	60a3      	str	r3, [r4, #8]
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	199e      	adds	r6, r3, r6
 800615c:	6026      	str	r6, [r4, #0]
 800615e:	e7da      	b.n	8006116 <__ssputs_r+0x5e>
 8006160:	002a      	movs	r2, r5
 8006162:	0038      	movs	r0, r7
 8006164:	f000 fb8c 	bl	8006880 <_realloc_r>
 8006168:	1e06      	subs	r6, r0, #0
 800616a:	d1e0      	bne.n	800612e <__ssputs_r+0x76>
 800616c:	0038      	movs	r0, r7
 800616e:	6921      	ldr	r1, [r4, #16]
 8006170:	f000 faa4 	bl	80066bc <_free_r>
 8006174:	e7c7      	b.n	8006106 <__ssputs_r+0x4e>
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	fffffb7f 	.word	0xfffffb7f

0800617c <_svfiprintf_r>:
 800617c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800617e:	b0a1      	sub	sp, #132	; 0x84
 8006180:	9003      	str	r0, [sp, #12]
 8006182:	001d      	movs	r5, r3
 8006184:	898b      	ldrh	r3, [r1, #12]
 8006186:	000f      	movs	r7, r1
 8006188:	0016      	movs	r6, r2
 800618a:	061b      	lsls	r3, r3, #24
 800618c:	d511      	bpl.n	80061b2 <_svfiprintf_r+0x36>
 800618e:	690b      	ldr	r3, [r1, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10e      	bne.n	80061b2 <_svfiprintf_r+0x36>
 8006194:	2140      	movs	r1, #64	; 0x40
 8006196:	f000 fafd 	bl	8006794 <_malloc_r>
 800619a:	6038      	str	r0, [r7, #0]
 800619c:	6138      	str	r0, [r7, #16]
 800619e:	2800      	cmp	r0, #0
 80061a0:	d105      	bne.n	80061ae <_svfiprintf_r+0x32>
 80061a2:	230c      	movs	r3, #12
 80061a4:	9a03      	ldr	r2, [sp, #12]
 80061a6:	3801      	subs	r0, #1
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	b021      	add	sp, #132	; 0x84
 80061ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ae:	2340      	movs	r3, #64	; 0x40
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	2300      	movs	r3, #0
 80061b4:	ac08      	add	r4, sp, #32
 80061b6:	6163      	str	r3, [r4, #20]
 80061b8:	3320      	adds	r3, #32
 80061ba:	7663      	strb	r3, [r4, #25]
 80061bc:	3310      	adds	r3, #16
 80061be:	76a3      	strb	r3, [r4, #26]
 80061c0:	9507      	str	r5, [sp, #28]
 80061c2:	0035      	movs	r5, r6
 80061c4:	782b      	ldrb	r3, [r5, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <_svfiprintf_r+0x52>
 80061ca:	2b25      	cmp	r3, #37	; 0x25
 80061cc:	d147      	bne.n	800625e <_svfiprintf_r+0xe2>
 80061ce:	1bab      	subs	r3, r5, r6
 80061d0:	9305      	str	r3, [sp, #20]
 80061d2:	42b5      	cmp	r5, r6
 80061d4:	d00c      	beq.n	80061f0 <_svfiprintf_r+0x74>
 80061d6:	0032      	movs	r2, r6
 80061d8:	0039      	movs	r1, r7
 80061da:	9803      	ldr	r0, [sp, #12]
 80061dc:	f7ff ff6c 	bl	80060b8 <__ssputs_r>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d100      	bne.n	80061e6 <_svfiprintf_r+0x6a>
 80061e4:	e0ae      	b.n	8006344 <_svfiprintf_r+0x1c8>
 80061e6:	6962      	ldr	r2, [r4, #20]
 80061e8:	9b05      	ldr	r3, [sp, #20]
 80061ea:	4694      	mov	ip, r2
 80061ec:	4463      	add	r3, ip
 80061ee:	6163      	str	r3, [r4, #20]
 80061f0:	782b      	ldrb	r3, [r5, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d100      	bne.n	80061f8 <_svfiprintf_r+0x7c>
 80061f6:	e0a5      	b.n	8006344 <_svfiprintf_r+0x1c8>
 80061f8:	2201      	movs	r2, #1
 80061fa:	2300      	movs	r3, #0
 80061fc:	4252      	negs	r2, r2
 80061fe:	6062      	str	r2, [r4, #4]
 8006200:	a904      	add	r1, sp, #16
 8006202:	3254      	adds	r2, #84	; 0x54
 8006204:	1852      	adds	r2, r2, r1
 8006206:	1c6e      	adds	r6, r5, #1
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	60e3      	str	r3, [r4, #12]
 800620c:	60a3      	str	r3, [r4, #8]
 800620e:	7013      	strb	r3, [r2, #0]
 8006210:	65a3      	str	r3, [r4, #88]	; 0x58
 8006212:	2205      	movs	r2, #5
 8006214:	7831      	ldrb	r1, [r6, #0]
 8006216:	4854      	ldr	r0, [pc, #336]	; (8006368 <_svfiprintf_r+0x1ec>)
 8006218:	f000 fa32 	bl	8006680 <memchr>
 800621c:	1c75      	adds	r5, r6, #1
 800621e:	2800      	cmp	r0, #0
 8006220:	d11f      	bne.n	8006262 <_svfiprintf_r+0xe6>
 8006222:	6822      	ldr	r2, [r4, #0]
 8006224:	06d3      	lsls	r3, r2, #27
 8006226:	d504      	bpl.n	8006232 <_svfiprintf_r+0xb6>
 8006228:	2353      	movs	r3, #83	; 0x53
 800622a:	a904      	add	r1, sp, #16
 800622c:	185b      	adds	r3, r3, r1
 800622e:	2120      	movs	r1, #32
 8006230:	7019      	strb	r1, [r3, #0]
 8006232:	0713      	lsls	r3, r2, #28
 8006234:	d504      	bpl.n	8006240 <_svfiprintf_r+0xc4>
 8006236:	2353      	movs	r3, #83	; 0x53
 8006238:	a904      	add	r1, sp, #16
 800623a:	185b      	adds	r3, r3, r1
 800623c:	212b      	movs	r1, #43	; 0x2b
 800623e:	7019      	strb	r1, [r3, #0]
 8006240:	7833      	ldrb	r3, [r6, #0]
 8006242:	2b2a      	cmp	r3, #42	; 0x2a
 8006244:	d016      	beq.n	8006274 <_svfiprintf_r+0xf8>
 8006246:	0035      	movs	r5, r6
 8006248:	2100      	movs	r1, #0
 800624a:	200a      	movs	r0, #10
 800624c:	68e3      	ldr	r3, [r4, #12]
 800624e:	782a      	ldrb	r2, [r5, #0]
 8006250:	1c6e      	adds	r6, r5, #1
 8006252:	3a30      	subs	r2, #48	; 0x30
 8006254:	2a09      	cmp	r2, #9
 8006256:	d94e      	bls.n	80062f6 <_svfiprintf_r+0x17a>
 8006258:	2900      	cmp	r1, #0
 800625a:	d111      	bne.n	8006280 <_svfiprintf_r+0x104>
 800625c:	e017      	b.n	800628e <_svfiprintf_r+0x112>
 800625e:	3501      	adds	r5, #1
 8006260:	e7b0      	b.n	80061c4 <_svfiprintf_r+0x48>
 8006262:	4b41      	ldr	r3, [pc, #260]	; (8006368 <_svfiprintf_r+0x1ec>)
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	1ac0      	subs	r0, r0, r3
 8006268:	2301      	movs	r3, #1
 800626a:	4083      	lsls	r3, r0
 800626c:	4313      	orrs	r3, r2
 800626e:	002e      	movs	r6, r5
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	e7ce      	b.n	8006212 <_svfiprintf_r+0x96>
 8006274:	9b07      	ldr	r3, [sp, #28]
 8006276:	1d19      	adds	r1, r3, #4
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	9107      	str	r1, [sp, #28]
 800627c:	2b00      	cmp	r3, #0
 800627e:	db01      	blt.n	8006284 <_svfiprintf_r+0x108>
 8006280:	930b      	str	r3, [sp, #44]	; 0x2c
 8006282:	e004      	b.n	800628e <_svfiprintf_r+0x112>
 8006284:	425b      	negs	r3, r3
 8006286:	60e3      	str	r3, [r4, #12]
 8006288:	2302      	movs	r3, #2
 800628a:	4313      	orrs	r3, r2
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	782b      	ldrb	r3, [r5, #0]
 8006290:	2b2e      	cmp	r3, #46	; 0x2e
 8006292:	d10a      	bne.n	80062aa <_svfiprintf_r+0x12e>
 8006294:	786b      	ldrb	r3, [r5, #1]
 8006296:	2b2a      	cmp	r3, #42	; 0x2a
 8006298:	d135      	bne.n	8006306 <_svfiprintf_r+0x18a>
 800629a:	9b07      	ldr	r3, [sp, #28]
 800629c:	3502      	adds	r5, #2
 800629e:	1d1a      	adds	r2, r3, #4
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	9207      	str	r2, [sp, #28]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	db2b      	blt.n	8006300 <_svfiprintf_r+0x184>
 80062a8:	9309      	str	r3, [sp, #36]	; 0x24
 80062aa:	4e30      	ldr	r6, [pc, #192]	; (800636c <_svfiprintf_r+0x1f0>)
 80062ac:	2203      	movs	r2, #3
 80062ae:	0030      	movs	r0, r6
 80062b0:	7829      	ldrb	r1, [r5, #0]
 80062b2:	f000 f9e5 	bl	8006680 <memchr>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d006      	beq.n	80062c8 <_svfiprintf_r+0x14c>
 80062ba:	2340      	movs	r3, #64	; 0x40
 80062bc:	1b80      	subs	r0, r0, r6
 80062be:	4083      	lsls	r3, r0
 80062c0:	6822      	ldr	r2, [r4, #0]
 80062c2:	3501      	adds	r5, #1
 80062c4:	4313      	orrs	r3, r2
 80062c6:	6023      	str	r3, [r4, #0]
 80062c8:	7829      	ldrb	r1, [r5, #0]
 80062ca:	2206      	movs	r2, #6
 80062cc:	4828      	ldr	r0, [pc, #160]	; (8006370 <_svfiprintf_r+0x1f4>)
 80062ce:	1c6e      	adds	r6, r5, #1
 80062d0:	7621      	strb	r1, [r4, #24]
 80062d2:	f000 f9d5 	bl	8006680 <memchr>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d03c      	beq.n	8006354 <_svfiprintf_r+0x1d8>
 80062da:	4b26      	ldr	r3, [pc, #152]	; (8006374 <_svfiprintf_r+0x1f8>)
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d125      	bne.n	800632c <_svfiprintf_r+0x1b0>
 80062e0:	2207      	movs	r2, #7
 80062e2:	9b07      	ldr	r3, [sp, #28]
 80062e4:	3307      	adds	r3, #7
 80062e6:	4393      	bics	r3, r2
 80062e8:	3308      	adds	r3, #8
 80062ea:	9307      	str	r3, [sp, #28]
 80062ec:	6963      	ldr	r3, [r4, #20]
 80062ee:	9a04      	ldr	r2, [sp, #16]
 80062f0:	189b      	adds	r3, r3, r2
 80062f2:	6163      	str	r3, [r4, #20]
 80062f4:	e765      	b.n	80061c2 <_svfiprintf_r+0x46>
 80062f6:	4343      	muls	r3, r0
 80062f8:	0035      	movs	r5, r6
 80062fa:	2101      	movs	r1, #1
 80062fc:	189b      	adds	r3, r3, r2
 80062fe:	e7a6      	b.n	800624e <_svfiprintf_r+0xd2>
 8006300:	2301      	movs	r3, #1
 8006302:	425b      	negs	r3, r3
 8006304:	e7d0      	b.n	80062a8 <_svfiprintf_r+0x12c>
 8006306:	2300      	movs	r3, #0
 8006308:	200a      	movs	r0, #10
 800630a:	001a      	movs	r2, r3
 800630c:	3501      	adds	r5, #1
 800630e:	6063      	str	r3, [r4, #4]
 8006310:	7829      	ldrb	r1, [r5, #0]
 8006312:	1c6e      	adds	r6, r5, #1
 8006314:	3930      	subs	r1, #48	; 0x30
 8006316:	2909      	cmp	r1, #9
 8006318:	d903      	bls.n	8006322 <_svfiprintf_r+0x1a6>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0c5      	beq.n	80062aa <_svfiprintf_r+0x12e>
 800631e:	9209      	str	r2, [sp, #36]	; 0x24
 8006320:	e7c3      	b.n	80062aa <_svfiprintf_r+0x12e>
 8006322:	4342      	muls	r2, r0
 8006324:	0035      	movs	r5, r6
 8006326:	2301      	movs	r3, #1
 8006328:	1852      	adds	r2, r2, r1
 800632a:	e7f1      	b.n	8006310 <_svfiprintf_r+0x194>
 800632c:	ab07      	add	r3, sp, #28
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	003a      	movs	r2, r7
 8006332:	0021      	movs	r1, r4
 8006334:	4b10      	ldr	r3, [pc, #64]	; (8006378 <_svfiprintf_r+0x1fc>)
 8006336:	9803      	ldr	r0, [sp, #12]
 8006338:	e000      	b.n	800633c <_svfiprintf_r+0x1c0>
 800633a:	bf00      	nop
 800633c:	9004      	str	r0, [sp, #16]
 800633e:	9b04      	ldr	r3, [sp, #16]
 8006340:	3301      	adds	r3, #1
 8006342:	d1d3      	bne.n	80062ec <_svfiprintf_r+0x170>
 8006344:	89bb      	ldrh	r3, [r7, #12]
 8006346:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006348:	065b      	lsls	r3, r3, #25
 800634a:	d400      	bmi.n	800634e <_svfiprintf_r+0x1d2>
 800634c:	e72d      	b.n	80061aa <_svfiprintf_r+0x2e>
 800634e:	2001      	movs	r0, #1
 8006350:	4240      	negs	r0, r0
 8006352:	e72a      	b.n	80061aa <_svfiprintf_r+0x2e>
 8006354:	ab07      	add	r3, sp, #28
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	003a      	movs	r2, r7
 800635a:	0021      	movs	r1, r4
 800635c:	4b06      	ldr	r3, [pc, #24]	; (8006378 <_svfiprintf_r+0x1fc>)
 800635e:	9803      	ldr	r0, [sp, #12]
 8006360:	f000 f87c 	bl	800645c <_printf_i>
 8006364:	e7ea      	b.n	800633c <_svfiprintf_r+0x1c0>
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	08007c49 	.word	0x08007c49
 800636c:	08007c4f 	.word	0x08007c4f
 8006370:	08007c53 	.word	0x08007c53
 8006374:	00000000 	.word	0x00000000
 8006378:	080060b9 	.word	0x080060b9

0800637c <_printf_common>:
 800637c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800637e:	0015      	movs	r5, r2
 8006380:	9301      	str	r3, [sp, #4]
 8006382:	688a      	ldr	r2, [r1, #8]
 8006384:	690b      	ldr	r3, [r1, #16]
 8006386:	000c      	movs	r4, r1
 8006388:	9000      	str	r0, [sp, #0]
 800638a:	4293      	cmp	r3, r2
 800638c:	da00      	bge.n	8006390 <_printf_common+0x14>
 800638e:	0013      	movs	r3, r2
 8006390:	0022      	movs	r2, r4
 8006392:	602b      	str	r3, [r5, #0]
 8006394:	3243      	adds	r2, #67	; 0x43
 8006396:	7812      	ldrb	r2, [r2, #0]
 8006398:	2a00      	cmp	r2, #0
 800639a:	d001      	beq.n	80063a0 <_printf_common+0x24>
 800639c:	3301      	adds	r3, #1
 800639e:	602b      	str	r3, [r5, #0]
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	069b      	lsls	r3, r3, #26
 80063a4:	d502      	bpl.n	80063ac <_printf_common+0x30>
 80063a6:	682b      	ldr	r3, [r5, #0]
 80063a8:	3302      	adds	r3, #2
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	6822      	ldr	r2, [r4, #0]
 80063ae:	2306      	movs	r3, #6
 80063b0:	0017      	movs	r7, r2
 80063b2:	401f      	ands	r7, r3
 80063b4:	421a      	tst	r2, r3
 80063b6:	d027      	beq.n	8006408 <_printf_common+0x8c>
 80063b8:	0023      	movs	r3, r4
 80063ba:	3343      	adds	r3, #67	; 0x43
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	1e5a      	subs	r2, r3, #1
 80063c0:	4193      	sbcs	r3, r2
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	0692      	lsls	r2, r2, #26
 80063c6:	d430      	bmi.n	800642a <_printf_common+0xae>
 80063c8:	0022      	movs	r2, r4
 80063ca:	9901      	ldr	r1, [sp, #4]
 80063cc:	9800      	ldr	r0, [sp, #0]
 80063ce:	9e08      	ldr	r6, [sp, #32]
 80063d0:	3243      	adds	r2, #67	; 0x43
 80063d2:	47b0      	blx	r6
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d025      	beq.n	8006424 <_printf_common+0xa8>
 80063d8:	2306      	movs	r3, #6
 80063da:	6820      	ldr	r0, [r4, #0]
 80063dc:	682a      	ldr	r2, [r5, #0]
 80063de:	68e1      	ldr	r1, [r4, #12]
 80063e0:	2500      	movs	r5, #0
 80063e2:	4003      	ands	r3, r0
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d103      	bne.n	80063f0 <_printf_common+0x74>
 80063e8:	1a8d      	subs	r5, r1, r2
 80063ea:	43eb      	mvns	r3, r5
 80063ec:	17db      	asrs	r3, r3, #31
 80063ee:	401d      	ands	r5, r3
 80063f0:	68a3      	ldr	r3, [r4, #8]
 80063f2:	6922      	ldr	r2, [r4, #16]
 80063f4:	4293      	cmp	r3, r2
 80063f6:	dd01      	ble.n	80063fc <_printf_common+0x80>
 80063f8:	1a9b      	subs	r3, r3, r2
 80063fa:	18ed      	adds	r5, r5, r3
 80063fc:	2700      	movs	r7, #0
 80063fe:	42bd      	cmp	r5, r7
 8006400:	d120      	bne.n	8006444 <_printf_common+0xc8>
 8006402:	2000      	movs	r0, #0
 8006404:	e010      	b.n	8006428 <_printf_common+0xac>
 8006406:	3701      	adds	r7, #1
 8006408:	68e3      	ldr	r3, [r4, #12]
 800640a:	682a      	ldr	r2, [r5, #0]
 800640c:	1a9b      	subs	r3, r3, r2
 800640e:	42bb      	cmp	r3, r7
 8006410:	ddd2      	ble.n	80063b8 <_printf_common+0x3c>
 8006412:	0022      	movs	r2, r4
 8006414:	2301      	movs	r3, #1
 8006416:	9901      	ldr	r1, [sp, #4]
 8006418:	9800      	ldr	r0, [sp, #0]
 800641a:	9e08      	ldr	r6, [sp, #32]
 800641c:	3219      	adds	r2, #25
 800641e:	47b0      	blx	r6
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d1f0      	bne.n	8006406 <_printf_common+0x8a>
 8006424:	2001      	movs	r0, #1
 8006426:	4240      	negs	r0, r0
 8006428:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800642a:	2030      	movs	r0, #48	; 0x30
 800642c:	18e1      	adds	r1, r4, r3
 800642e:	3143      	adds	r1, #67	; 0x43
 8006430:	7008      	strb	r0, [r1, #0]
 8006432:	0021      	movs	r1, r4
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	3145      	adds	r1, #69	; 0x45
 8006438:	7809      	ldrb	r1, [r1, #0]
 800643a:	18a2      	adds	r2, r4, r2
 800643c:	3243      	adds	r2, #67	; 0x43
 800643e:	3302      	adds	r3, #2
 8006440:	7011      	strb	r1, [r2, #0]
 8006442:	e7c1      	b.n	80063c8 <_printf_common+0x4c>
 8006444:	0022      	movs	r2, r4
 8006446:	2301      	movs	r3, #1
 8006448:	9901      	ldr	r1, [sp, #4]
 800644a:	9800      	ldr	r0, [sp, #0]
 800644c:	9e08      	ldr	r6, [sp, #32]
 800644e:	321a      	adds	r2, #26
 8006450:	47b0      	blx	r6
 8006452:	1c43      	adds	r3, r0, #1
 8006454:	d0e6      	beq.n	8006424 <_printf_common+0xa8>
 8006456:	3701      	adds	r7, #1
 8006458:	e7d1      	b.n	80063fe <_printf_common+0x82>
	...

0800645c <_printf_i>:
 800645c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800645e:	b08b      	sub	sp, #44	; 0x2c
 8006460:	9206      	str	r2, [sp, #24]
 8006462:	000a      	movs	r2, r1
 8006464:	3243      	adds	r2, #67	; 0x43
 8006466:	9307      	str	r3, [sp, #28]
 8006468:	9005      	str	r0, [sp, #20]
 800646a:	9204      	str	r2, [sp, #16]
 800646c:	7e0a      	ldrb	r2, [r1, #24]
 800646e:	000c      	movs	r4, r1
 8006470:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006472:	2a78      	cmp	r2, #120	; 0x78
 8006474:	d807      	bhi.n	8006486 <_printf_i+0x2a>
 8006476:	2a62      	cmp	r2, #98	; 0x62
 8006478:	d809      	bhi.n	800648e <_printf_i+0x32>
 800647a:	2a00      	cmp	r2, #0
 800647c:	d100      	bne.n	8006480 <_printf_i+0x24>
 800647e:	e0c1      	b.n	8006604 <_printf_i+0x1a8>
 8006480:	2a58      	cmp	r2, #88	; 0x58
 8006482:	d100      	bne.n	8006486 <_printf_i+0x2a>
 8006484:	e08c      	b.n	80065a0 <_printf_i+0x144>
 8006486:	0026      	movs	r6, r4
 8006488:	3642      	adds	r6, #66	; 0x42
 800648a:	7032      	strb	r2, [r6, #0]
 800648c:	e022      	b.n	80064d4 <_printf_i+0x78>
 800648e:	0010      	movs	r0, r2
 8006490:	3863      	subs	r0, #99	; 0x63
 8006492:	2815      	cmp	r0, #21
 8006494:	d8f7      	bhi.n	8006486 <_printf_i+0x2a>
 8006496:	f7f9 fe3f 	bl	8000118 <__gnu_thumb1_case_shi>
 800649a:	0016      	.short	0x0016
 800649c:	fff6001f 	.word	0xfff6001f
 80064a0:	fff6fff6 	.word	0xfff6fff6
 80064a4:	001ffff6 	.word	0x001ffff6
 80064a8:	fff6fff6 	.word	0xfff6fff6
 80064ac:	fff6fff6 	.word	0xfff6fff6
 80064b0:	003600a8 	.word	0x003600a8
 80064b4:	fff6009a 	.word	0xfff6009a
 80064b8:	00b9fff6 	.word	0x00b9fff6
 80064bc:	0036fff6 	.word	0x0036fff6
 80064c0:	fff6fff6 	.word	0xfff6fff6
 80064c4:	009e      	.short	0x009e
 80064c6:	0026      	movs	r6, r4
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	3642      	adds	r6, #66	; 0x42
 80064cc:	1d11      	adds	r1, r2, #4
 80064ce:	6019      	str	r1, [r3, #0]
 80064d0:	6813      	ldr	r3, [r2, #0]
 80064d2:	7033      	strb	r3, [r6, #0]
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0a7      	b.n	8006628 <_printf_i+0x1cc>
 80064d8:	6808      	ldr	r0, [r1, #0]
 80064da:	6819      	ldr	r1, [r3, #0]
 80064dc:	1d0a      	adds	r2, r1, #4
 80064de:	0605      	lsls	r5, r0, #24
 80064e0:	d50b      	bpl.n	80064fa <_printf_i+0x9e>
 80064e2:	680d      	ldr	r5, [r1, #0]
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	da03      	bge.n	80064f2 <_printf_i+0x96>
 80064ea:	232d      	movs	r3, #45	; 0x2d
 80064ec:	9a04      	ldr	r2, [sp, #16]
 80064ee:	426d      	negs	r5, r5
 80064f0:	7013      	strb	r3, [r2, #0]
 80064f2:	4b61      	ldr	r3, [pc, #388]	; (8006678 <_printf_i+0x21c>)
 80064f4:	270a      	movs	r7, #10
 80064f6:	9303      	str	r3, [sp, #12]
 80064f8:	e01b      	b.n	8006532 <_printf_i+0xd6>
 80064fa:	680d      	ldr	r5, [r1, #0]
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	0641      	lsls	r1, r0, #25
 8006500:	d5f1      	bpl.n	80064e6 <_printf_i+0x8a>
 8006502:	b22d      	sxth	r5, r5
 8006504:	e7ef      	b.n	80064e6 <_printf_i+0x8a>
 8006506:	680d      	ldr	r5, [r1, #0]
 8006508:	6819      	ldr	r1, [r3, #0]
 800650a:	1d08      	adds	r0, r1, #4
 800650c:	6018      	str	r0, [r3, #0]
 800650e:	062e      	lsls	r6, r5, #24
 8006510:	d501      	bpl.n	8006516 <_printf_i+0xba>
 8006512:	680d      	ldr	r5, [r1, #0]
 8006514:	e003      	b.n	800651e <_printf_i+0xc2>
 8006516:	066d      	lsls	r5, r5, #25
 8006518:	d5fb      	bpl.n	8006512 <_printf_i+0xb6>
 800651a:	680d      	ldr	r5, [r1, #0]
 800651c:	b2ad      	uxth	r5, r5
 800651e:	4b56      	ldr	r3, [pc, #344]	; (8006678 <_printf_i+0x21c>)
 8006520:	2708      	movs	r7, #8
 8006522:	9303      	str	r3, [sp, #12]
 8006524:	2a6f      	cmp	r2, #111	; 0x6f
 8006526:	d000      	beq.n	800652a <_printf_i+0xce>
 8006528:	3702      	adds	r7, #2
 800652a:	0023      	movs	r3, r4
 800652c:	2200      	movs	r2, #0
 800652e:	3343      	adds	r3, #67	; 0x43
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	6863      	ldr	r3, [r4, #4]
 8006534:	60a3      	str	r3, [r4, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	db03      	blt.n	8006542 <_printf_i+0xe6>
 800653a:	2204      	movs	r2, #4
 800653c:	6821      	ldr	r1, [r4, #0]
 800653e:	4391      	bics	r1, r2
 8006540:	6021      	str	r1, [r4, #0]
 8006542:	2d00      	cmp	r5, #0
 8006544:	d102      	bne.n	800654c <_printf_i+0xf0>
 8006546:	9e04      	ldr	r6, [sp, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00c      	beq.n	8006566 <_printf_i+0x10a>
 800654c:	9e04      	ldr	r6, [sp, #16]
 800654e:	0028      	movs	r0, r5
 8006550:	0039      	movs	r1, r7
 8006552:	f7f9 fe71 	bl	8000238 <__aeabi_uidivmod>
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	3e01      	subs	r6, #1
 800655a:	5c5b      	ldrb	r3, [r3, r1]
 800655c:	7033      	strb	r3, [r6, #0]
 800655e:	002b      	movs	r3, r5
 8006560:	0005      	movs	r5, r0
 8006562:	429f      	cmp	r7, r3
 8006564:	d9f3      	bls.n	800654e <_printf_i+0xf2>
 8006566:	2f08      	cmp	r7, #8
 8006568:	d109      	bne.n	800657e <_printf_i+0x122>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	07db      	lsls	r3, r3, #31
 800656e:	d506      	bpl.n	800657e <_printf_i+0x122>
 8006570:	6863      	ldr	r3, [r4, #4]
 8006572:	6922      	ldr	r2, [r4, #16]
 8006574:	4293      	cmp	r3, r2
 8006576:	dc02      	bgt.n	800657e <_printf_i+0x122>
 8006578:	2330      	movs	r3, #48	; 0x30
 800657a:	3e01      	subs	r6, #1
 800657c:	7033      	strb	r3, [r6, #0]
 800657e:	9b04      	ldr	r3, [sp, #16]
 8006580:	1b9b      	subs	r3, r3, r6
 8006582:	6123      	str	r3, [r4, #16]
 8006584:	9b07      	ldr	r3, [sp, #28]
 8006586:	0021      	movs	r1, r4
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	9805      	ldr	r0, [sp, #20]
 800658c:	9b06      	ldr	r3, [sp, #24]
 800658e:	aa09      	add	r2, sp, #36	; 0x24
 8006590:	f7ff fef4 	bl	800637c <_printf_common>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	d14c      	bne.n	8006632 <_printf_i+0x1d6>
 8006598:	2001      	movs	r0, #1
 800659a:	4240      	negs	r0, r0
 800659c:	b00b      	add	sp, #44	; 0x2c
 800659e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065a0:	3145      	adds	r1, #69	; 0x45
 80065a2:	700a      	strb	r2, [r1, #0]
 80065a4:	4a34      	ldr	r2, [pc, #208]	; (8006678 <_printf_i+0x21c>)
 80065a6:	9203      	str	r2, [sp, #12]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	6821      	ldr	r1, [r4, #0]
 80065ac:	ca20      	ldmia	r2!, {r5}
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	0608      	lsls	r0, r1, #24
 80065b2:	d516      	bpl.n	80065e2 <_printf_i+0x186>
 80065b4:	07cb      	lsls	r3, r1, #31
 80065b6:	d502      	bpl.n	80065be <_printf_i+0x162>
 80065b8:	2320      	movs	r3, #32
 80065ba:	4319      	orrs	r1, r3
 80065bc:	6021      	str	r1, [r4, #0]
 80065be:	2710      	movs	r7, #16
 80065c0:	2d00      	cmp	r5, #0
 80065c2:	d1b2      	bne.n	800652a <_printf_i+0xce>
 80065c4:	2320      	movs	r3, #32
 80065c6:	6822      	ldr	r2, [r4, #0]
 80065c8:	439a      	bics	r2, r3
 80065ca:	6022      	str	r2, [r4, #0]
 80065cc:	e7ad      	b.n	800652a <_printf_i+0xce>
 80065ce:	2220      	movs	r2, #32
 80065d0:	6809      	ldr	r1, [r1, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	6022      	str	r2, [r4, #0]
 80065d6:	0022      	movs	r2, r4
 80065d8:	2178      	movs	r1, #120	; 0x78
 80065da:	3245      	adds	r2, #69	; 0x45
 80065dc:	7011      	strb	r1, [r2, #0]
 80065de:	4a27      	ldr	r2, [pc, #156]	; (800667c <_printf_i+0x220>)
 80065e0:	e7e1      	b.n	80065a6 <_printf_i+0x14a>
 80065e2:	0648      	lsls	r0, r1, #25
 80065e4:	d5e6      	bpl.n	80065b4 <_printf_i+0x158>
 80065e6:	b2ad      	uxth	r5, r5
 80065e8:	e7e4      	b.n	80065b4 <_printf_i+0x158>
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	680d      	ldr	r5, [r1, #0]
 80065ee:	1d10      	adds	r0, r2, #4
 80065f0:	6949      	ldr	r1, [r1, #20]
 80065f2:	6018      	str	r0, [r3, #0]
 80065f4:	6813      	ldr	r3, [r2, #0]
 80065f6:	062e      	lsls	r6, r5, #24
 80065f8:	d501      	bpl.n	80065fe <_printf_i+0x1a2>
 80065fa:	6019      	str	r1, [r3, #0]
 80065fc:	e002      	b.n	8006604 <_printf_i+0x1a8>
 80065fe:	066d      	lsls	r5, r5, #25
 8006600:	d5fb      	bpl.n	80065fa <_printf_i+0x19e>
 8006602:	8019      	strh	r1, [r3, #0]
 8006604:	2300      	movs	r3, #0
 8006606:	9e04      	ldr	r6, [sp, #16]
 8006608:	6123      	str	r3, [r4, #16]
 800660a:	e7bb      	b.n	8006584 <_printf_i+0x128>
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	1d11      	adds	r1, r2, #4
 8006610:	6019      	str	r1, [r3, #0]
 8006612:	6816      	ldr	r6, [r2, #0]
 8006614:	2100      	movs	r1, #0
 8006616:	0030      	movs	r0, r6
 8006618:	6862      	ldr	r2, [r4, #4]
 800661a:	f000 f831 	bl	8006680 <memchr>
 800661e:	2800      	cmp	r0, #0
 8006620:	d001      	beq.n	8006626 <_printf_i+0x1ca>
 8006622:	1b80      	subs	r0, r0, r6
 8006624:	6060      	str	r0, [r4, #4]
 8006626:	6863      	ldr	r3, [r4, #4]
 8006628:	6123      	str	r3, [r4, #16]
 800662a:	2300      	movs	r3, #0
 800662c:	9a04      	ldr	r2, [sp, #16]
 800662e:	7013      	strb	r3, [r2, #0]
 8006630:	e7a8      	b.n	8006584 <_printf_i+0x128>
 8006632:	6923      	ldr	r3, [r4, #16]
 8006634:	0032      	movs	r2, r6
 8006636:	9906      	ldr	r1, [sp, #24]
 8006638:	9805      	ldr	r0, [sp, #20]
 800663a:	9d07      	ldr	r5, [sp, #28]
 800663c:	47a8      	blx	r5
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	d0aa      	beq.n	8006598 <_printf_i+0x13c>
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	079b      	lsls	r3, r3, #30
 8006646:	d415      	bmi.n	8006674 <_printf_i+0x218>
 8006648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664a:	68e0      	ldr	r0, [r4, #12]
 800664c:	4298      	cmp	r0, r3
 800664e:	daa5      	bge.n	800659c <_printf_i+0x140>
 8006650:	0018      	movs	r0, r3
 8006652:	e7a3      	b.n	800659c <_printf_i+0x140>
 8006654:	0022      	movs	r2, r4
 8006656:	2301      	movs	r3, #1
 8006658:	9906      	ldr	r1, [sp, #24]
 800665a:	9805      	ldr	r0, [sp, #20]
 800665c:	9e07      	ldr	r6, [sp, #28]
 800665e:	3219      	adds	r2, #25
 8006660:	47b0      	blx	r6
 8006662:	1c43      	adds	r3, r0, #1
 8006664:	d098      	beq.n	8006598 <_printf_i+0x13c>
 8006666:	3501      	adds	r5, #1
 8006668:	68e3      	ldr	r3, [r4, #12]
 800666a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800666c:	1a9b      	subs	r3, r3, r2
 800666e:	42ab      	cmp	r3, r5
 8006670:	dcf0      	bgt.n	8006654 <_printf_i+0x1f8>
 8006672:	e7e9      	b.n	8006648 <_printf_i+0x1ec>
 8006674:	2500      	movs	r5, #0
 8006676:	e7f7      	b.n	8006668 <_printf_i+0x20c>
 8006678:	08007c5a 	.word	0x08007c5a
 800667c:	08007c6b 	.word	0x08007c6b

08006680 <memchr>:
 8006680:	b2c9      	uxtb	r1, r1
 8006682:	1882      	adds	r2, r0, r2
 8006684:	4290      	cmp	r0, r2
 8006686:	d101      	bne.n	800668c <memchr+0xc>
 8006688:	2000      	movs	r0, #0
 800668a:	4770      	bx	lr
 800668c:	7803      	ldrb	r3, [r0, #0]
 800668e:	428b      	cmp	r3, r1
 8006690:	d0fb      	beq.n	800668a <memchr+0xa>
 8006692:	3001      	adds	r0, #1
 8006694:	e7f6      	b.n	8006684 <memchr+0x4>

08006696 <memmove>:
 8006696:	b510      	push	{r4, lr}
 8006698:	4288      	cmp	r0, r1
 800669a:	d902      	bls.n	80066a2 <memmove+0xc>
 800669c:	188b      	adds	r3, r1, r2
 800669e:	4298      	cmp	r0, r3
 80066a0:	d303      	bcc.n	80066aa <memmove+0x14>
 80066a2:	2300      	movs	r3, #0
 80066a4:	e007      	b.n	80066b6 <memmove+0x20>
 80066a6:	5c8b      	ldrb	r3, [r1, r2]
 80066a8:	5483      	strb	r3, [r0, r2]
 80066aa:	3a01      	subs	r2, #1
 80066ac:	d2fb      	bcs.n	80066a6 <memmove+0x10>
 80066ae:	bd10      	pop	{r4, pc}
 80066b0:	5ccc      	ldrb	r4, [r1, r3]
 80066b2:	54c4      	strb	r4, [r0, r3]
 80066b4:	3301      	adds	r3, #1
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d1fa      	bne.n	80066b0 <memmove+0x1a>
 80066ba:	e7f8      	b.n	80066ae <memmove+0x18>

080066bc <_free_r>:
 80066bc:	b570      	push	{r4, r5, r6, lr}
 80066be:	0005      	movs	r5, r0
 80066c0:	2900      	cmp	r1, #0
 80066c2:	d010      	beq.n	80066e6 <_free_r+0x2a>
 80066c4:	1f0c      	subs	r4, r1, #4
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	da00      	bge.n	80066ce <_free_r+0x12>
 80066cc:	18e4      	adds	r4, r4, r3
 80066ce:	0028      	movs	r0, r5
 80066d0:	f000 f918 	bl	8006904 <__malloc_lock>
 80066d4:	4a1d      	ldr	r2, [pc, #116]	; (800674c <_free_r+0x90>)
 80066d6:	6813      	ldr	r3, [r2, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d105      	bne.n	80066e8 <_free_r+0x2c>
 80066dc:	6063      	str	r3, [r4, #4]
 80066de:	6014      	str	r4, [r2, #0]
 80066e0:	0028      	movs	r0, r5
 80066e2:	f000 f917 	bl	8006914 <__malloc_unlock>
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	42a3      	cmp	r3, r4
 80066ea:	d908      	bls.n	80066fe <_free_r+0x42>
 80066ec:	6821      	ldr	r1, [r4, #0]
 80066ee:	1860      	adds	r0, r4, r1
 80066f0:	4283      	cmp	r3, r0
 80066f2:	d1f3      	bne.n	80066dc <_free_r+0x20>
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	1841      	adds	r1, r0, r1
 80066fa:	6021      	str	r1, [r4, #0]
 80066fc:	e7ee      	b.n	80066dc <_free_r+0x20>
 80066fe:	001a      	movs	r2, r3
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <_free_r+0x4e>
 8006706:	42a3      	cmp	r3, r4
 8006708:	d9f9      	bls.n	80066fe <_free_r+0x42>
 800670a:	6811      	ldr	r1, [r2, #0]
 800670c:	1850      	adds	r0, r2, r1
 800670e:	42a0      	cmp	r0, r4
 8006710:	d10b      	bne.n	800672a <_free_r+0x6e>
 8006712:	6820      	ldr	r0, [r4, #0]
 8006714:	1809      	adds	r1, r1, r0
 8006716:	1850      	adds	r0, r2, r1
 8006718:	6011      	str	r1, [r2, #0]
 800671a:	4283      	cmp	r3, r0
 800671c:	d1e0      	bne.n	80066e0 <_free_r+0x24>
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	1841      	adds	r1, r0, r1
 8006724:	6011      	str	r1, [r2, #0]
 8006726:	6053      	str	r3, [r2, #4]
 8006728:	e7da      	b.n	80066e0 <_free_r+0x24>
 800672a:	42a0      	cmp	r0, r4
 800672c:	d902      	bls.n	8006734 <_free_r+0x78>
 800672e:	230c      	movs	r3, #12
 8006730:	602b      	str	r3, [r5, #0]
 8006732:	e7d5      	b.n	80066e0 <_free_r+0x24>
 8006734:	6821      	ldr	r1, [r4, #0]
 8006736:	1860      	adds	r0, r4, r1
 8006738:	4283      	cmp	r3, r0
 800673a:	d103      	bne.n	8006744 <_free_r+0x88>
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	1841      	adds	r1, r0, r1
 8006742:	6021      	str	r1, [r4, #0]
 8006744:	6063      	str	r3, [r4, #4]
 8006746:	6054      	str	r4, [r2, #4]
 8006748:	e7ca      	b.n	80066e0 <_free_r+0x24>
 800674a:	46c0      	nop			; (mov r8, r8)
 800674c:	2000025c 	.word	0x2000025c

08006750 <sbrk_aligned>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	4e0f      	ldr	r6, [pc, #60]	; (8006790 <sbrk_aligned+0x40>)
 8006754:	000d      	movs	r5, r1
 8006756:	6831      	ldr	r1, [r6, #0]
 8006758:	0004      	movs	r4, r0
 800675a:	2900      	cmp	r1, #0
 800675c:	d102      	bne.n	8006764 <sbrk_aligned+0x14>
 800675e:	f000 f8bf 	bl	80068e0 <_sbrk_r>
 8006762:	6030      	str	r0, [r6, #0]
 8006764:	0029      	movs	r1, r5
 8006766:	0020      	movs	r0, r4
 8006768:	f000 f8ba 	bl	80068e0 <_sbrk_r>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d00a      	beq.n	8006786 <sbrk_aligned+0x36>
 8006770:	2303      	movs	r3, #3
 8006772:	1cc5      	adds	r5, r0, #3
 8006774:	439d      	bics	r5, r3
 8006776:	42a8      	cmp	r0, r5
 8006778:	d007      	beq.n	800678a <sbrk_aligned+0x3a>
 800677a:	1a29      	subs	r1, r5, r0
 800677c:	0020      	movs	r0, r4
 800677e:	f000 f8af 	bl	80068e0 <_sbrk_r>
 8006782:	1c43      	adds	r3, r0, #1
 8006784:	d101      	bne.n	800678a <sbrk_aligned+0x3a>
 8006786:	2501      	movs	r5, #1
 8006788:	426d      	negs	r5, r5
 800678a:	0028      	movs	r0, r5
 800678c:	bd70      	pop	{r4, r5, r6, pc}
 800678e:	46c0      	nop			; (mov r8, r8)
 8006790:	20000260 	.word	0x20000260

08006794 <_malloc_r>:
 8006794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006796:	2203      	movs	r2, #3
 8006798:	1ccb      	adds	r3, r1, #3
 800679a:	4393      	bics	r3, r2
 800679c:	3308      	adds	r3, #8
 800679e:	0006      	movs	r6, r0
 80067a0:	001f      	movs	r7, r3
 80067a2:	2b0c      	cmp	r3, #12
 80067a4:	d232      	bcs.n	800680c <_malloc_r+0x78>
 80067a6:	270c      	movs	r7, #12
 80067a8:	42b9      	cmp	r1, r7
 80067aa:	d831      	bhi.n	8006810 <_malloc_r+0x7c>
 80067ac:	0030      	movs	r0, r6
 80067ae:	f000 f8a9 	bl	8006904 <__malloc_lock>
 80067b2:	4d32      	ldr	r5, [pc, #200]	; (800687c <_malloc_r+0xe8>)
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	001c      	movs	r4, r3
 80067b8:	2c00      	cmp	r4, #0
 80067ba:	d12e      	bne.n	800681a <_malloc_r+0x86>
 80067bc:	0039      	movs	r1, r7
 80067be:	0030      	movs	r0, r6
 80067c0:	f7ff ffc6 	bl	8006750 <sbrk_aligned>
 80067c4:	0004      	movs	r4, r0
 80067c6:	1c43      	adds	r3, r0, #1
 80067c8:	d11e      	bne.n	8006808 <_malloc_r+0x74>
 80067ca:	682c      	ldr	r4, [r5, #0]
 80067cc:	0025      	movs	r5, r4
 80067ce:	2d00      	cmp	r5, #0
 80067d0:	d14a      	bne.n	8006868 <_malloc_r+0xd4>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	0029      	movs	r1, r5
 80067d6:	18e3      	adds	r3, r4, r3
 80067d8:	0030      	movs	r0, r6
 80067da:	9301      	str	r3, [sp, #4]
 80067dc:	f000 f880 	bl	80068e0 <_sbrk_r>
 80067e0:	9b01      	ldr	r3, [sp, #4]
 80067e2:	4283      	cmp	r3, r0
 80067e4:	d143      	bne.n	800686e <_malloc_r+0xda>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	3703      	adds	r7, #3
 80067ea:	1aff      	subs	r7, r7, r3
 80067ec:	2303      	movs	r3, #3
 80067ee:	439f      	bics	r7, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	2f0c      	cmp	r7, #12
 80067f4:	d200      	bcs.n	80067f8 <_malloc_r+0x64>
 80067f6:	270c      	movs	r7, #12
 80067f8:	0039      	movs	r1, r7
 80067fa:	0030      	movs	r0, r6
 80067fc:	f7ff ffa8 	bl	8006750 <sbrk_aligned>
 8006800:	1c43      	adds	r3, r0, #1
 8006802:	d034      	beq.n	800686e <_malloc_r+0xda>
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	19df      	adds	r7, r3, r7
 8006808:	6027      	str	r7, [r4, #0]
 800680a:	e013      	b.n	8006834 <_malloc_r+0xa0>
 800680c:	2b00      	cmp	r3, #0
 800680e:	dacb      	bge.n	80067a8 <_malloc_r+0x14>
 8006810:	230c      	movs	r3, #12
 8006812:	2500      	movs	r5, #0
 8006814:	6033      	str	r3, [r6, #0]
 8006816:	0028      	movs	r0, r5
 8006818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800681a:	6822      	ldr	r2, [r4, #0]
 800681c:	1bd1      	subs	r1, r2, r7
 800681e:	d420      	bmi.n	8006862 <_malloc_r+0xce>
 8006820:	290b      	cmp	r1, #11
 8006822:	d917      	bls.n	8006854 <_malloc_r+0xc0>
 8006824:	19e2      	adds	r2, r4, r7
 8006826:	6027      	str	r7, [r4, #0]
 8006828:	42a3      	cmp	r3, r4
 800682a:	d111      	bne.n	8006850 <_malloc_r+0xbc>
 800682c:	602a      	str	r2, [r5, #0]
 800682e:	6863      	ldr	r3, [r4, #4]
 8006830:	6011      	str	r1, [r2, #0]
 8006832:	6053      	str	r3, [r2, #4]
 8006834:	0030      	movs	r0, r6
 8006836:	0025      	movs	r5, r4
 8006838:	f000 f86c 	bl	8006914 <__malloc_unlock>
 800683c:	2207      	movs	r2, #7
 800683e:	350b      	adds	r5, #11
 8006840:	1d23      	adds	r3, r4, #4
 8006842:	4395      	bics	r5, r2
 8006844:	1aea      	subs	r2, r5, r3
 8006846:	429d      	cmp	r5, r3
 8006848:	d0e5      	beq.n	8006816 <_malloc_r+0x82>
 800684a:	1b5b      	subs	r3, r3, r5
 800684c:	50a3      	str	r3, [r4, r2]
 800684e:	e7e2      	b.n	8006816 <_malloc_r+0x82>
 8006850:	605a      	str	r2, [r3, #4]
 8006852:	e7ec      	b.n	800682e <_malloc_r+0x9a>
 8006854:	6862      	ldr	r2, [r4, #4]
 8006856:	42a3      	cmp	r3, r4
 8006858:	d101      	bne.n	800685e <_malloc_r+0xca>
 800685a:	602a      	str	r2, [r5, #0]
 800685c:	e7ea      	b.n	8006834 <_malloc_r+0xa0>
 800685e:	605a      	str	r2, [r3, #4]
 8006860:	e7e8      	b.n	8006834 <_malloc_r+0xa0>
 8006862:	0023      	movs	r3, r4
 8006864:	6864      	ldr	r4, [r4, #4]
 8006866:	e7a7      	b.n	80067b8 <_malloc_r+0x24>
 8006868:	002c      	movs	r4, r5
 800686a:	686d      	ldr	r5, [r5, #4]
 800686c:	e7af      	b.n	80067ce <_malloc_r+0x3a>
 800686e:	230c      	movs	r3, #12
 8006870:	0030      	movs	r0, r6
 8006872:	6033      	str	r3, [r6, #0]
 8006874:	f000 f84e 	bl	8006914 <__malloc_unlock>
 8006878:	e7cd      	b.n	8006816 <_malloc_r+0x82>
 800687a:	46c0      	nop			; (mov r8, r8)
 800687c:	2000025c 	.word	0x2000025c

08006880 <_realloc_r>:
 8006880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006882:	0007      	movs	r7, r0
 8006884:	000e      	movs	r6, r1
 8006886:	0014      	movs	r4, r2
 8006888:	2900      	cmp	r1, #0
 800688a:	d105      	bne.n	8006898 <_realloc_r+0x18>
 800688c:	0011      	movs	r1, r2
 800688e:	f7ff ff81 	bl	8006794 <_malloc_r>
 8006892:	0005      	movs	r5, r0
 8006894:	0028      	movs	r0, r5
 8006896:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006898:	2a00      	cmp	r2, #0
 800689a:	d103      	bne.n	80068a4 <_realloc_r+0x24>
 800689c:	f7ff ff0e 	bl	80066bc <_free_r>
 80068a0:	0025      	movs	r5, r4
 80068a2:	e7f7      	b.n	8006894 <_realloc_r+0x14>
 80068a4:	f000 f83e 	bl	8006924 <_malloc_usable_size_r>
 80068a8:	9001      	str	r0, [sp, #4]
 80068aa:	4284      	cmp	r4, r0
 80068ac:	d803      	bhi.n	80068b6 <_realloc_r+0x36>
 80068ae:	0035      	movs	r5, r6
 80068b0:	0843      	lsrs	r3, r0, #1
 80068b2:	42a3      	cmp	r3, r4
 80068b4:	d3ee      	bcc.n	8006894 <_realloc_r+0x14>
 80068b6:	0021      	movs	r1, r4
 80068b8:	0038      	movs	r0, r7
 80068ba:	f7ff ff6b 	bl	8006794 <_malloc_r>
 80068be:	1e05      	subs	r5, r0, #0
 80068c0:	d0e8      	beq.n	8006894 <_realloc_r+0x14>
 80068c2:	9b01      	ldr	r3, [sp, #4]
 80068c4:	0022      	movs	r2, r4
 80068c6:	429c      	cmp	r4, r3
 80068c8:	d900      	bls.n	80068cc <_realloc_r+0x4c>
 80068ca:	001a      	movs	r2, r3
 80068cc:	0031      	movs	r1, r6
 80068ce:	0028      	movs	r0, r5
 80068d0:	f7ff fbc0 	bl	8006054 <memcpy>
 80068d4:	0031      	movs	r1, r6
 80068d6:	0038      	movs	r0, r7
 80068d8:	f7ff fef0 	bl	80066bc <_free_r>
 80068dc:	e7da      	b.n	8006894 <_realloc_r+0x14>
	...

080068e0 <_sbrk_r>:
 80068e0:	2300      	movs	r3, #0
 80068e2:	b570      	push	{r4, r5, r6, lr}
 80068e4:	4d06      	ldr	r5, [pc, #24]	; (8006900 <_sbrk_r+0x20>)
 80068e6:	0004      	movs	r4, r0
 80068e8:	0008      	movs	r0, r1
 80068ea:	602b      	str	r3, [r5, #0]
 80068ec:	f7fc fa02 	bl	8002cf4 <_sbrk>
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	d103      	bne.n	80068fc <_sbrk_r+0x1c>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d000      	beq.n	80068fc <_sbrk_r+0x1c>
 80068fa:	6023      	str	r3, [r4, #0]
 80068fc:	bd70      	pop	{r4, r5, r6, pc}
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	20000264 	.word	0x20000264

08006904 <__malloc_lock>:
 8006904:	b510      	push	{r4, lr}
 8006906:	4802      	ldr	r0, [pc, #8]	; (8006910 <__malloc_lock+0xc>)
 8006908:	f000 f814 	bl	8006934 <__retarget_lock_acquire_recursive>
 800690c:	bd10      	pop	{r4, pc}
 800690e:	46c0      	nop			; (mov r8, r8)
 8006910:	20000268 	.word	0x20000268

08006914 <__malloc_unlock>:
 8006914:	b510      	push	{r4, lr}
 8006916:	4802      	ldr	r0, [pc, #8]	; (8006920 <__malloc_unlock+0xc>)
 8006918:	f000 f80d 	bl	8006936 <__retarget_lock_release_recursive>
 800691c:	bd10      	pop	{r4, pc}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	20000268 	.word	0x20000268

08006924 <_malloc_usable_size_r>:
 8006924:	1f0b      	subs	r3, r1, #4
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	1f18      	subs	r0, r3, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	da01      	bge.n	8006932 <_malloc_usable_size_r+0xe>
 800692e:	580b      	ldr	r3, [r1, r0]
 8006930:	18c0      	adds	r0, r0, r3
 8006932:	4770      	bx	lr

08006934 <__retarget_lock_acquire_recursive>:
 8006934:	4770      	bx	lr

08006936 <__retarget_lock_release_recursive>:
 8006936:	4770      	bx	lr

08006938 <_init>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	46c0      	nop			; (mov r8, r8)
 800693c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693e:	bc08      	pop	{r3}
 8006940:	469e      	mov	lr, r3
 8006942:	4770      	bx	lr

08006944 <_fini>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694a:	bc08      	pop	{r3}
 800694c:	469e      	mov	lr, r3
 800694e:	4770      	bx	lr
