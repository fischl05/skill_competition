
Audio_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001178  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f2c  08004f2c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f34  08004f34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f38  08004f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000010  08004f4c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08004f4c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118ca  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003017  00000000  00000000  00031902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00034920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00035a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016105  00000000  00000000  00036a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fbc  00000000  00000000  0004cb25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008142f  00000000  00000000  00062ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3f10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d0c  00000000  00000000  000e3f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d9c 	.word	0x08003d9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003d9c 	.word	0x08003d9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8d8 	bl	8000490 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8d3 	bl	8000490 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzsi2>:
 8000454:	211c      	movs	r1, #28
 8000456:	2301      	movs	r3, #1
 8000458:	041b      	lsls	r3, r3, #16
 800045a:	4298      	cmp	r0, r3
 800045c:	d301      	bcc.n	8000462 <__clzsi2+0xe>
 800045e:	0c00      	lsrs	r0, r0, #16
 8000460:	3910      	subs	r1, #16
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	4298      	cmp	r0, r3
 8000466:	d301      	bcc.n	800046c <__clzsi2+0x18>
 8000468:	0a00      	lsrs	r0, r0, #8
 800046a:	3908      	subs	r1, #8
 800046c:	091b      	lsrs	r3, r3, #4
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0x22>
 8000472:	0900      	lsrs	r0, r0, #4
 8000474:	3904      	subs	r1, #4
 8000476:	a202      	add	r2, pc, #8	; (adr r2, 8000480 <__clzsi2+0x2c>)
 8000478:	5c10      	ldrb	r0, [r2, r0]
 800047a:	1840      	adds	r0, r0, r1
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	02020304 	.word	0x02020304
 8000484:	01010101 	.word	0x01010101
	...

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f7ff ffdd 	bl	8000454 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f7ff ffd8 	bl	8000454 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	b08d      	sub	sp, #52	; 0x34
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	0004      	movs	r4, r0
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	0010      	movs	r0, r2
 80004b4:	0019      	movs	r1, r3
 80004b6:	250f      	movs	r5, #15
 80004b8:	197b      	adds	r3, r7, r5
 80004ba:	1c22      	adds	r2, r4, #0
 80004bc:	701a      	strb	r2, [r3, #0]
 80004be:	260c      	movs	r6, #12
 80004c0:	19bb      	adds	r3, r7, r6
 80004c2:	1c02      	adds	r2, r0, #0
 80004c4:	801a      	strh	r2, [r3, #0]
 80004c6:	1dbb      	adds	r3, r7, #6
 80004c8:	1c0a      	adds	r2, r1, #0
 80004ca:	801a      	strh	r2, [r3, #0]
	if ((ch < 31) || (ch > 127)) return;
 80004cc:	0029      	movs	r1, r5
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b1e      	cmp	r3, #30
 80004d4:	d800      	bhi.n	80004d8 <ILI9341_DrawChar+0x30>
 80004d6:	e085      	b.n	80005e4 <ILI9341_DrawChar+0x13c>
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	b25b      	sxtb	r3, r3
 80004de:	2b00      	cmp	r3, #0
 80004e0:	da00      	bge.n	80004e4 <ILI9341_DrawChar+0x3c>
 80004e2:	e07f      	b.n	80005e4 <ILI9341_DrawChar+0x13c>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80004e4:	201f      	movs	r0, #31
 80004e6:	183b      	adds	r3, r7, r0
 80004e8:	68ba      	ldr	r2, [r7, #8]
 80004ea:	7812      	ldrb	r2, [r2, #0]
 80004ec:	701a      	strb	r2, [r3, #0]
	fWidth = font[1];
 80004ee:	241e      	movs	r4, #30
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	7852      	ldrb	r2, [r2, #1]
 80004f6:	701a      	strb	r2, [r3, #0]
	fHeight = font[2];
 80004f8:	251d      	movs	r5, #29
 80004fa:	197b      	adds	r3, r7, r5
 80004fc:	68ba      	ldr	r2, [r7, #8]
 80004fe:	7892      	ldrb	r2, [r2, #2]
 8000500:	701a      	strb	r2, [r3, #0]
	fBPL = font[3];
 8000502:	231c      	movs	r3, #28
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	78d2      	ldrb	r2, [r2, #3]
 800050a:	701a      	strb	r2, [r3, #0]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 800050c:	187b      	adds	r3, r7, r1
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	3b20      	subs	r3, #32
 8000512:	183a      	adds	r2, r7, r0
 8000514:	7812      	ldrb	r2, [r2, #0]
 8000516:	4353      	muls	r3, r2
 8000518:	3304      	adds	r3, #4
 800051a:	68ba      	ldr	r2, [r7, #8]
 800051c:	18d3      	adds	r3, r2, r3
 800051e:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 8000520:	193b      	adds	r3, r7, r4
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	b29a      	uxth	r2, r3
 8000526:	197b      	adds	r3, r7, r5
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	b29c      	uxth	r4, r3
 800052c:	1dbb      	adds	r3, r7, #6
 800052e:	8819      	ldrh	r1, [r3, #0]
 8000530:	19bb      	adds	r3, r7, r6
 8000532:	8818      	ldrh	r0, [r3, #0]
 8000534:	233c      	movs	r3, #60	; 0x3c
 8000536:	2508      	movs	r5, #8
 8000538:	195b      	adds	r3, r3, r5
 800053a:	19db      	adds	r3, r3, r7
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	0023      	movs	r3, r4
 8000542:	f000 fc7f 	bl	8000e44 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8000546:	2300      	movs	r3, #0
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
 800054a:	e044      	b.n	80005d6 <ILI9341_DrawChar+0x12e>
	{
		for (int i=0; i < fWidth; i++)
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
 8000550:	e038      	b.n	80005c4 <ILI9341_DrawChar+0x11c>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8000552:	231c      	movs	r3, #28
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	6a3a      	ldr	r2, [r7, #32]
 800055a:	435a      	muls	r2, r3
 800055c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800055e:	10db      	asrs	r3, r3, #3
 8000560:	211f      	movs	r1, #31
 8000562:	400b      	ands	r3, r1
 8000564:	18d3      	adds	r3, r2, r3
 8000566:	3301      	adds	r3, #1
 8000568:	69ba      	ldr	r2, [r7, #24]
 800056a:	18d2      	adds	r2, r2, r3
 800056c:	2117      	movs	r1, #23
 800056e:	187b      	adds	r3, r7, r1
 8000570:	7812      	ldrb	r2, [r2, #0]
 8000572:	701a      	strb	r2, [r3, #0]
			uint8_t b = 1 << (j & 0x07);
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	2207      	movs	r2, #7
 8000578:	4013      	ands	r3, r2
 800057a:	2201      	movs	r2, #1
 800057c:	409a      	lsls	r2, r3
 800057e:	2016      	movs	r0, #22
 8000580:	183b      	adds	r3, r7, r0
 8000582:	701a      	strb	r2, [r3, #0]
			if (( z & b ) != 0x00)
 8000584:	187b      	adds	r3, r7, r1
 8000586:	183a      	adds	r2, r7, r0
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	7812      	ldrb	r2, [r2, #0]
 800058c:	4013      	ands	r3, r2
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	d014      	beq.n	80005be <ILI9341_DrawChar+0x116>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8000594:	6a3b      	ldr	r3, [r7, #32]
 8000596:	b29a      	uxth	r2, r3
 8000598:	230c      	movs	r3, #12
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	18d3      	adds	r3, r2, r3
 80005a0:	b298      	uxth	r0, r3
 80005a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	1dbb      	adds	r3, r7, #6
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	18d3      	adds	r3, r2, r3
 80005ac:	b299      	uxth	r1, r3
 80005ae:	2338      	movs	r3, #56	; 0x38
 80005b0:	2208      	movs	r2, #8
 80005b2:	189b      	adds	r3, r3, r2
 80005b4:	19db      	adds	r3, r3, r7
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	001a      	movs	r2, r3
 80005ba:	f000 fbc1 	bl	8000d40 <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80005be:	6a3b      	ldr	r3, [r7, #32]
 80005c0:	3301      	adds	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
 80005c4:	231e      	movs	r3, #30
 80005c6:	18fb      	adds	r3, r7, r3
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	6a3a      	ldr	r2, [r7, #32]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	dbc0      	blt.n	8000552 <ILI9341_DrawChar+0xaa>
	for (int j=0; j < fHeight; j++)
 80005d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d2:	3301      	adds	r3, #1
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
 80005d6:	231d      	movs	r3, #29
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005de:	429a      	cmp	r2, r3
 80005e0:	dbb4      	blt.n	800054c <ILI9341_DrawChar+0xa4>
 80005e2:	e000      	b.n	80005e6 <ILI9341_DrawChar+0x13e>
	if ((ch < 31) || (ch > 127)) return;
 80005e4:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b00b      	add	sp, #44	; 0x2c
 80005ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005ec <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b08b      	sub	sp, #44	; 0x2c
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	0019      	movs	r1, r3
 80005f8:	1dbb      	adds	r3, r7, #6
 80005fa:	801a      	strh	r2, [r3, #0]
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	1c0a      	adds	r2, r1, #0
 8000600:	801a      	strh	r2, [r3, #0]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000602:	231f      	movs	r3, #31
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	7812      	ldrb	r2, [r2, #0]
 800060a:	701a      	strb	r2, [r3, #0]
	uint8_t fWidth = font[1];	/* Width of font */
 800060c:	231e      	movs	r3, #30
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	7852      	ldrb	r2, [r2, #1]
 8000614:	701a      	strb	r2, [r3, #0]

	while (*str)
 8000616:	e040      	b.n	800069a <ILI9341_DrawText+0xae>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	7818      	ldrb	r0, [r3, #0]
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	881c      	ldrh	r4, [r3, #0]
 8000620:	1dbb      	adds	r3, r7, #6
 8000622:	881a      	ldrh	r2, [r3, #0]
 8000624:	68b9      	ldr	r1, [r7, #8]
 8000626:	2334      	movs	r3, #52	; 0x34
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2330      	movs	r3, #48	; 0x30
 8000630:	18fb      	adds	r3, r7, r3
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	0023      	movs	r3, r4
 8000638:	f7ff ff36 	bl	80004a8 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	3b20      	subs	r3, #32
 8000642:	221f      	movs	r2, #31
 8000644:	18ba      	adds	r2, r7, r2
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	4353      	muls	r3, r2
 800064a:	3304      	adds	r3, #4
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	18d3      	adds	r3, r2, r3
 8000650:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8000652:	2117      	movs	r1, #23
 8000654:	187b      	adds	r3, r7, r1
 8000656:	69ba      	ldr	r2, [r7, #24]
 8000658:	7812      	ldrb	r2, [r2, #0]
 800065a:	701a      	strb	r2, [r3, #0]

		if(charWidth + 2 < fWidth)
 800065c:	187b      	adds	r3, r7, r1
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	1c9a      	adds	r2, r3, #2
 8000662:	231e      	movs	r3, #30
 8000664:	18fb      	adds	r3, r7, r3
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	429a      	cmp	r2, r3
 800066a:	da0a      	bge.n	8000682 <ILI9341_DrawText+0x96>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800066c:	187b      	adds	r3, r7, r1
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b29a      	uxth	r2, r3
 8000672:	1dbb      	adds	r3, r7, #6
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	18d3      	adds	r3, r2, r3
 8000678:	b29a      	uxth	r2, r3
 800067a:	1dbb      	adds	r3, r7, #6
 800067c:	3202      	adds	r2, #2
 800067e:	801a      	strh	r2, [r3, #0]
 8000680:	e008      	b.n	8000694 <ILI9341_DrawText+0xa8>
		}
		else
		{
			X += fWidth;
 8000682:	231e      	movs	r3, #30
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b299      	uxth	r1, r3
 800068a:	1dbb      	adds	r3, r7, #6
 800068c:	1dba      	adds	r2, r7, #6
 800068e:	8812      	ldrh	r2, [r2, #0]
 8000690:	188a      	adds	r2, r1, r2
 8000692:	801a      	strh	r2, [r3, #0]
		}

		str++;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	3301      	adds	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
	while (*str)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1ba      	bne.n	8000618 <ILI9341_DrawText+0x2c>
	}
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b009      	add	sp, #36	; 0x24
 80006aa:	bd90      	pop	{r4, r7, pc}

080006ac <ILI9341_SPI_Tx>:
//	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
  }
}

static void ILI9341_SPI_Tx(uint8_t data)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	0002      	movs	r2, r0
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	701a      	strb	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <ILI9341_SPI_Tx+0x30>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	2202      	movs	r2, #2
 80006c2:	4013      	ands	r3, r2
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d1f8      	bne.n	80006ba <ILI9341_SPI_Tx+0xe>
//	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
	HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
 80006c8:	1df9      	adds	r1, r7, #7
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <ILI9341_SPI_Tx+0x30>)
 80006cc:	230a      	movs	r3, #10
 80006ce:	2201      	movs	r2, #1
 80006d0:	f002 ff12 	bl	80034f8 <HAL_SPI_Transmit>
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b002      	add	sp, #8
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000ec 	.word	0x200000ec

080006e0 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	000a      	movs	r2, r1
 80006ea:	1cbb      	adds	r3, r7, #2
 80006ec:	801a      	strh	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <ILI9341_SPI_TxBuffer+0x34>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	2202      	movs	r2, #2
 80006f8:	4013      	ands	r3, r2
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d1f8      	bne.n	80006f0 <ILI9341_SPI_TxBuffer+0x10>
//	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
	HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
 80006fe:	1cbb      	adds	r3, r7, #2
 8000700:	881a      	ldrh	r2, [r3, #0]
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	4803      	ldr	r0, [pc, #12]	; (8000714 <ILI9341_SPI_TxBuffer+0x34>)
 8000706:	230a      	movs	r3, #10
 8000708:	f002 fef6 	bl	80034f8 <HAL_SPI_Transmit>
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b002      	add	sp, #8
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000ec 	.word	0x200000ec

08000718 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	0002      	movs	r2, r0
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <ILI9341_WriteCommand+0x38>)
 8000726:	2200      	movs	r2, #0
 8000728:	2102      	movs	r1, #2
 800072a:	0018      	movs	r0, r3
 800072c:	f001 fe06 	bl	800233c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <ILI9341_WriteCommand+0x38>)
 8000732:	2200      	movs	r2, #0
 8000734:	2101      	movs	r1, #1
 8000736:	0018      	movs	r0, r3
 8000738:	f001 fe00 	bl	800233c <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	0018      	movs	r0, r3
 8000742:	f7ff ffb3 	bl	80006ac <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b002      	add	sp, #8
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	50000400 	.word	0x50000400

08000754 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	0002      	movs	r2, r0
 800075c:	1dfb      	adds	r3, r7, #7
 800075e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <ILI9341_WriteData+0x38>)
 8000762:	2201      	movs	r2, #1
 8000764:	2102      	movs	r1, #2
 8000766:	0018      	movs	r0, r3
 8000768:	f001 fde8 	bl	800233c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <ILI9341_WriteData+0x38>)
 800076e:	2200      	movs	r2, #0
 8000770:	2101      	movs	r1, #1
 8000772:	0018      	movs	r0, r3
 8000774:	f001 fde2 	bl	800233c <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	0018      	movs	r0, r3
 800077e:	f7ff ff95 	bl	80006ac <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	b002      	add	sp, #8
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	50000400 	.word	0x50000400

08000790 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	000a      	movs	r2, r1
 800079a:	1cbb      	adds	r3, r7, #2
 800079c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <ILI9341_WriteBuffer+0x3c>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	2102      	movs	r1, #2
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fdc9 	bl	800233c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <ILI9341_WriteBuffer+0x3c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 fdc3 	bl	800233c <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80007b6:	1cbb      	adds	r3, r7, #2
 80007b8:	881a      	ldrh	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f7ff ff8e 	bl	80006e0 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	50000400 	.word	0x50000400

080007d0 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80007d0:	b5b0      	push	{r4, r5, r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	0005      	movs	r5, r0
 80007d8:	000c      	movs	r4, r1
 80007da:	0010      	movs	r0, r2
 80007dc:	0019      	movs	r1, r3
 80007de:	1dbb      	adds	r3, r7, #6
 80007e0:	1c2a      	adds	r2, r5, #0
 80007e2:	801a      	strh	r2, [r3, #0]
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	1c22      	adds	r2, r4, #0
 80007e8:	801a      	strh	r2, [r3, #0]
 80007ea:	1cbb      	adds	r3, r7, #2
 80007ec:	1c02      	adds	r2, r0, #0
 80007ee:	801a      	strh	r2, [r3, #0]
 80007f0:	003b      	movs	r3, r7
 80007f2:	1c0a      	adds	r2, r1, #0
 80007f4:	801a      	strh	r2, [r3, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80007f6:	1dbb      	adds	r3, r7, #6
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	0a1b      	lsrs	r3, r3, #8
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	210c      	movs	r1, #12
 8000802:	187b      	adds	r3, r7, r1
 8000804:	701a      	strb	r2, [r3, #0]
	buffer[1] = x1;
 8000806:	1dbb      	adds	r3, r7, #6
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	187b      	adds	r3, r7, r1
 800080e:	705a      	strb	r2, [r3, #1]
	buffer[2] = x2 >> 8;
 8000810:	1cbb      	adds	r3, r7, #2
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	b29b      	uxth	r3, r3
 8000818:	b2da      	uxtb	r2, r3
 800081a:	187b      	adds	r3, r7, r1
 800081c:	709a      	strb	r2, [r3, #2]
	buffer[3] = x2;
 800081e:	1cbb      	adds	r3, r7, #2
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	000c      	movs	r4, r1
 8000826:	187b      	adds	r3, r7, r1
 8000828:	70da      	strb	r2, [r3, #3]

	ILI9341_WriteCommand(0x2A);
 800082a:	202a      	movs	r0, #42	; 0x2a
 800082c:	f7ff ff74 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000830:	193b      	adds	r3, r7, r4
 8000832:	2104      	movs	r1, #4
 8000834:	0018      	movs	r0, r3
 8000836:	f7ff ffab 	bl	8000790 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	0a1b      	lsrs	r3, r3, #8
 8000840:	b29b      	uxth	r3, r3
 8000842:	b2da      	uxtb	r2, r3
 8000844:	0021      	movs	r1, r4
 8000846:	187b      	adds	r3, r7, r1
 8000848:	701a      	strb	r2, [r3, #0]
	buffer[1] = y1;
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	187b      	adds	r3, r7, r1
 8000852:	705a      	strb	r2, [r3, #1]
	buffer[2] = y2 >> 8;
 8000854:	003b      	movs	r3, r7
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	b29b      	uxth	r3, r3
 800085c:	b2da      	uxtb	r2, r3
 800085e:	187b      	adds	r3, r7, r1
 8000860:	709a      	strb	r2, [r3, #2]
	buffer[3] = y2;
 8000862:	003b      	movs	r3, r7
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	000c      	movs	r4, r1
 800086a:	187b      	adds	r3, r7, r1
 800086c:	70da      	strb	r2, [r3, #3]

	ILI9341_WriteCommand(0x2B);
 800086e:	202b      	movs	r0, #43	; 0x2b
 8000870:	f7ff ff52 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2104      	movs	r1, #4
 8000878:	0018      	movs	r0, r3
 800087a:	f7ff ff89 	bl	8000790 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800087e:	202c      	movs	r0, #44	; 0x2c
 8000880:	f7ff ff4a 	bl	8000718 <ILI9341_WriteCommand>
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b004      	add	sp, #16
 800088a:	bdb0      	pop	{r4, r5, r7, pc}

0800088c <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <ILI9341_Reset+0x3c>)
 8000892:	2200      	movs	r2, #0
 8000894:	2110      	movs	r1, #16
 8000896:	0018      	movs	r0, r3
 8000898:	f001 fd50 	bl	800233c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800089c:	200a      	movs	r0, #10
 800089e:	f001 f815 	bl	80018cc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <ILI9341_Reset+0x3c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	2101      	movs	r1, #1
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 fd47 	bl	800233c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f001 f80c 	bl	80018cc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <ILI9341_Reset+0x3c>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	2110      	movs	r1, #16
 80008ba:	0018      	movs	r0, r3
 80008bc:	f001 fd3e 	bl	800233c <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	50000400 	.word	0x50000400

080008cc <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <ILI9341_Enable+0x18>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	2110      	movs	r1, #16
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 fd30 	bl	800233c <HAL_GPIO_WritePin>
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	50000400 	.word	0x50000400

080008e8 <ILI9341_Init>:

void ILI9341_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 80008ec:	f7ff ffee 	bl	80008cc <ILI9341_Enable>
	ILI9341_Reset();
 80008f0:	f7ff ffcc 	bl	800088c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f7ff ff0f 	bl	8000718 <ILI9341_WriteCommand>
	HAL_Delay(10);
 80008fa:	200a      	movs	r0, #10
 80008fc:	f000 ffe6 	bl	80018cc <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000900:	20cb      	movs	r0, #203	; 0xcb
 8000902:	f7ff ff09 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000906:	2039      	movs	r0, #57	; 0x39
 8000908:	f7ff ff24 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 800090c:	202c      	movs	r0, #44	; 0x2c
 800090e:	f7ff ff21 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff ff1e 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000918:	2034      	movs	r0, #52	; 0x34
 800091a:	f7ff ff1b 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff ff18 	bl	8000754 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000924:	20cf      	movs	r0, #207	; 0xcf
 8000926:	f7ff fef7 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff ff12 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000930:	20c1      	movs	r0, #193	; 0xc1
 8000932:	f7ff ff0f 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000936:	2030      	movs	r0, #48	; 0x30
 8000938:	f7ff ff0c 	bl	8000754 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 800093c:	20e8      	movs	r0, #232	; 0xe8
 800093e:	f7ff feeb 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000942:	2085      	movs	r0, #133	; 0x85
 8000944:	f7ff ff06 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff ff03 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 800094e:	2078      	movs	r0, #120	; 0x78
 8000950:	f7ff ff00 	bl	8000754 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000954:	20ea      	movs	r0, #234	; 0xea
 8000956:	f7ff fedf 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fefa 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff fef7 	bl	8000754 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000966:	20ed      	movs	r0, #237	; 0xed
 8000968:	f7ff fed6 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 800096c:	2064      	movs	r0, #100	; 0x64
 800096e:	f7ff fef1 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000972:	2003      	movs	r0, #3
 8000974:	f7ff feee 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000978:	2012      	movs	r0, #18
 800097a:	f7ff feeb 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 800097e:	2081      	movs	r0, #129	; 0x81
 8000980:	f7ff fee8 	bl	8000754 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000984:	20f7      	movs	r0, #247	; 0xf7
 8000986:	f7ff fec7 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800098a:	2020      	movs	r0, #32
 800098c:	f7ff fee2 	bl	8000754 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000990:	20c0      	movs	r0, #192	; 0xc0
 8000992:	f7ff fec1 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000996:	2023      	movs	r0, #35	; 0x23
 8000998:	f7ff fedc 	bl	8000754 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 800099c:	20c1      	movs	r0, #193	; 0xc1
 800099e:	f7ff febb 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 80009a2:	2010      	movs	r0, #16
 80009a4:	f7ff fed6 	bl	8000754 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 80009a8:	20c5      	movs	r0, #197	; 0xc5
 80009aa:	f7ff feb5 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 80009ae:	203e      	movs	r0, #62	; 0x3e
 80009b0:	f7ff fed0 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 80009b4:	2028      	movs	r0, #40	; 0x28
 80009b6:	f7ff fecd 	bl	8000754 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 80009ba:	20c7      	movs	r0, #199	; 0xc7
 80009bc:	f7ff feac 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 80009c0:	2086      	movs	r0, #134	; 0x86
 80009c2:	f7ff fec7 	bl	8000754 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 80009c6:	2036      	movs	r0, #54	; 0x36
 80009c8:	f7ff fea6 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 80009cc:	2048      	movs	r0, #72	; 0x48
 80009ce:	f7ff fec1 	bl	8000754 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 80009d2:	203a      	movs	r0, #58	; 0x3a
 80009d4:	f7ff fea0 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 80009d8:	2055      	movs	r0, #85	; 0x55
 80009da:	f7ff febb 	bl	8000754 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80009de:	20b1      	movs	r0, #177	; 0xb1
 80009e0:	f7ff fe9a 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff feb5 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 80009ea:	2018      	movs	r0, #24
 80009ec:	f7ff feb2 	bl	8000754 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80009f0:	20b6      	movs	r0, #182	; 0xb6
 80009f2:	f7ff fe91 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80009f6:	2008      	movs	r0, #8
 80009f8:	f7ff feac 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80009fc:	2082      	movs	r0, #130	; 0x82
 80009fe:	f7ff fea9 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000a02:	2027      	movs	r0, #39	; 0x27
 8000a04:	f7ff fea6 	bl	8000754 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000a08:	20f2      	movs	r0, #242	; 0xf2
 8000a0a:	f7ff fe85 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff fea0 	bl	8000754 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000a14:	2026      	movs	r0, #38	; 0x26
 8000a16:	f7ff fe7f 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f7ff fe9a 	bl	8000754 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000a20:	20e0      	movs	r0, #224	; 0xe0
 8000a22:	f7ff fe79 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000a26:	200f      	movs	r0, #15
 8000a28:	f7ff fe94 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000a2c:	2031      	movs	r0, #49	; 0x31
 8000a2e:	f7ff fe91 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000a32:	202b      	movs	r0, #43	; 0x2b
 8000a34:	f7ff fe8e 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000a38:	200c      	movs	r0, #12
 8000a3a:	f7ff fe8b 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000a3e:	200e      	movs	r0, #14
 8000a40:	f7ff fe88 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000a44:	2008      	movs	r0, #8
 8000a46:	f7ff fe85 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000a4a:	204e      	movs	r0, #78	; 0x4e
 8000a4c:	f7ff fe82 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000a50:	20f1      	movs	r0, #241	; 0xf1
 8000a52:	f7ff fe7f 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000a56:	2037      	movs	r0, #55	; 0x37
 8000a58:	f7ff fe7c 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000a5c:	2007      	movs	r0, #7
 8000a5e:	f7ff fe79 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000a62:	2010      	movs	r0, #16
 8000a64:	f7ff fe76 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f7ff fe73 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000a6e:	200e      	movs	r0, #14
 8000a70:	f7ff fe70 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000a74:	2009      	movs	r0, #9
 8000a76:	f7ff fe6d 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fe6a 	bl	8000754 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000a80:	20e1      	movs	r0, #225	; 0xe1
 8000a82:	f7ff fe49 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f7ff fe64 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000a8c:	200e      	movs	r0, #14
 8000a8e:	f7ff fe61 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000a92:	2014      	movs	r0, #20
 8000a94:	f7ff fe5e 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f7ff fe5b 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000a9e:	2011      	movs	r0, #17
 8000aa0:	f7ff fe58 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000aa4:	2007      	movs	r0, #7
 8000aa6:	f7ff fe55 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000aaa:	2031      	movs	r0, #49	; 0x31
 8000aac:	f7ff fe52 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000ab0:	20c1      	movs	r0, #193	; 0xc1
 8000ab2:	f7ff fe4f 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000ab6:	2048      	movs	r0, #72	; 0x48
 8000ab8:	f7ff fe4c 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000abc:	2008      	movs	r0, #8
 8000abe:	f7ff fe49 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f7ff fe46 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000ac8:	200c      	movs	r0, #12
 8000aca:	f7ff fe43 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000ace:	2031      	movs	r0, #49	; 0x31
 8000ad0:	f7ff fe40 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000ad4:	2036      	movs	r0, #54	; 0x36
 8000ad6:	f7ff fe3d 	bl	8000754 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000ada:	200f      	movs	r0, #15
 8000adc:	f7ff fe3a 	bl	8000754 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000ae0:	2011      	movs	r0, #17
 8000ae2:	f7ff fe19 	bl	8000718 <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000ae6:	2064      	movs	r0, #100	; 0x64
 8000ae8:	f000 fef0 	bl	80018cc <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000aec:	2029      	movs	r0, #41	; 0x29
 8000aee:	f7ff fe13 	bl	8000718 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000af2:	2000      	movs	r0, #0
 8000af4:	f000 f804 	bl	8000b00 <ILI9341_SetRotation>
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	0002      	movs	r2, r0
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	701a      	strb	r2, [r3, #0]
	ILI9341_WriteCommand(0x36);
 8000b0c:	2036      	movs	r0, #54	; 0x36
 8000b0e:	f7ff fe03 	bl	8000718 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f000 feda 	bl	80018cc <HAL_Delay>

	switch(rotation)
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d029      	beq.n	8000b74 <ILI9341_SetRotation+0x74>
 8000b20:	dc33      	bgt.n	8000b8a <ILI9341_SetRotation+0x8a>
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d01b      	beq.n	8000b5e <ILI9341_SetRotation+0x5e>
 8000b26:	dc30      	bgt.n	8000b8a <ILI9341_SetRotation+0x8a>
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <ILI9341_SetRotation+0x32>
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d00b      	beq.n	8000b48 <ILI9341_SetRotation+0x48>
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
		LCD_WIDTH  = 320;
		LCD_HEIGHT = 240;
		break;
	default:
		break;
 8000b30:	e02b      	b.n	8000b8a <ILI9341_SetRotation+0x8a>
		ILI9341_WriteData(0x40|0x08);
 8000b32:	2048      	movs	r0, #72	; 0x48
 8000b34:	f7ff fe0e 	bl	8000754 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <ILI9341_SetRotation+0x94>)
 8000b3a:	22f0      	movs	r2, #240	; 0xf0
 8000b3c:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <ILI9341_SetRotation+0x98>)
 8000b40:	22a0      	movs	r2, #160	; 0xa0
 8000b42:	0052      	lsls	r2, r2, #1
 8000b44:	801a      	strh	r2, [r3, #0]
		break;
 8000b46:	e021      	b.n	8000b8c <ILI9341_SetRotation+0x8c>
		ILI9341_WriteData(0x20|0x08);
 8000b48:	2028      	movs	r0, #40	; 0x28
 8000b4a:	f7ff fe03 	bl	8000754 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <ILI9341_SetRotation+0x94>)
 8000b50:	22a0      	movs	r2, #160	; 0xa0
 8000b52:	0052      	lsls	r2, r2, #1
 8000b54:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <ILI9341_SetRotation+0x98>)
 8000b58:	22f0      	movs	r2, #240	; 0xf0
 8000b5a:	801a      	strh	r2, [r3, #0]
		break;
 8000b5c:	e016      	b.n	8000b8c <ILI9341_SetRotation+0x8c>
		ILI9341_WriteData(0x80|0x08);
 8000b5e:	2088      	movs	r0, #136	; 0x88
 8000b60:	f7ff fdf8 	bl	8000754 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <ILI9341_SetRotation+0x94>)
 8000b66:	22f0      	movs	r2, #240	; 0xf0
 8000b68:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <ILI9341_SetRotation+0x98>)
 8000b6c:	22a0      	movs	r2, #160	; 0xa0
 8000b6e:	0052      	lsls	r2, r2, #1
 8000b70:	801a      	strh	r2, [r3, #0]
		break;
 8000b72:	e00b      	b.n	8000b8c <ILI9341_SetRotation+0x8c>
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000b74:	20e8      	movs	r0, #232	; 0xe8
 8000b76:	f7ff fded 	bl	8000754 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <ILI9341_SetRotation+0x94>)
 8000b7c:	22a0      	movs	r2, #160	; 0xa0
 8000b7e:	0052      	lsls	r2, r2, #1
 8000b80:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <ILI9341_SetRotation+0x98>)
 8000b84:	22f0      	movs	r2, #240	; 0xf0
 8000b86:	801a      	strh	r2, [r3, #0]
		break;
 8000b88:	e000      	b.n	8000b8c <ILI9341_SetRotation+0x8c>
		break;
 8000b8a:	46c0      	nop			; (mov r8, r8)
	}
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b002      	add	sp, #8
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000002 	.word	0x20000002
 8000b98:	20000000 	.word	0x20000000

08000b9c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9e:	46c6      	mov	lr, r8
 8000ba0:	b500      	push	{lr}
 8000ba2:	b092      	sub	sp, #72	; 0x48
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	0002      	movs	r2, r0
 8000ba8:	61b9      	str	r1, [r7, #24]
 8000baa:	231e      	movs	r3, #30
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	801a      	strh	r2, [r3, #0]
 8000bb0:	466b      	mov	r3, sp
 8000bb2:	4698      	mov	r8, r3
	uint32_t BufferSize = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c

	if((size*2) < BURST_MAX_SIZE)
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	005a      	lsls	r2, r3, #1
 8000bbc:	23fa      	movs	r3, #250	; 0xfa
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d202      	bcs.n	8000bca <ILI9341_DrawColorBurst+0x2e>
	{
		BufferSize = size;
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bc8:	e002      	b.n	8000bd0 <ILI9341_DrawColorBurst+0x34>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000bca:	23fa      	movs	r3, #250	; 0xfa
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000bd0:	4b45      	ldr	r3, [pc, #276]	; (8000ce8 <ILI9341_DrawColorBurst+0x14c>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 fbb0 	bl	800233c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000bdc:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <ILI9341_DrawColorBurst+0x14c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	2101      	movs	r1, #1
 8000be2:	0018      	movs	r0, r3
 8000be4:	f001 fbaa 	bl	800233c <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000be8:	231e      	movs	r3, #30
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	0a1b      	lsrs	r3, r3, #8
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	2323      	movs	r3, #35	; 0x23
 8000bf4:	2118      	movs	r1, #24
 8000bf6:	185b      	adds	r3, r3, r1
 8000bf8:	19db      	adds	r3, r3, r7
 8000bfa:	701a      	strb	r2, [r3, #0]
	uint8_t BurstBuffer[BufferSize];
 8000bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bfe:	001a      	movs	r2, r3
 8000c00:	3a01      	subs	r2, #1
 8000c02:	637a      	str	r2, [r7, #52]	; 0x34
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	2200      	movs	r2, #0
 8000c08:	60fa      	str	r2, [r7, #12]
 8000c0a:	68b8      	ldr	r0, [r7, #8]
 8000c0c:	68f9      	ldr	r1, [r7, #12]
 8000c0e:	0002      	movs	r2, r0
 8000c10:	0f52      	lsrs	r2, r2, #29
 8000c12:	000e      	movs	r6, r1
 8000c14:	00f6      	lsls	r6, r6, #3
 8000c16:	617e      	str	r6, [r7, #20]
 8000c18:	697e      	ldr	r6, [r7, #20]
 8000c1a:	4316      	orrs	r6, r2
 8000c1c:	617e      	str	r6, [r7, #20]
 8000c1e:	0002      	movs	r2, r0
 8000c20:	00d2      	lsls	r2, r2, #3
 8000c22:	613a      	str	r2, [r7, #16]
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	2200      	movs	r2, #0
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	6838      	ldr	r0, [r7, #0]
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	0002      	movs	r2, r0
 8000c30:	0f52      	lsrs	r2, r2, #29
 8000c32:	000e      	movs	r6, r1
 8000c34:	00f5      	lsls	r5, r6, #3
 8000c36:	4315      	orrs	r5, r2
 8000c38:	0002      	movs	r2, r0
 8000c3a:	00d4      	lsls	r4, r2, #3
 8000c3c:	3307      	adds	r3, #7
 8000c3e:	08db      	lsrs	r3, r3, #3
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	466a      	mov	r2, sp
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	469d      	mov	sp, r3
 8000c48:	466b      	mov	r3, sp
 8000c4a:	3300      	adds	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	643b      	str	r3, [r7, #64]	; 0x40
 8000c52:	e013      	b.n	8000c7c <ILI9341_DrawColorBurst+0xe0>
	{
		BurstBuffer[j] = chifted;
 8000c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c58:	18d3      	adds	r3, r2, r3
 8000c5a:	2223      	movs	r2, #35	; 0x23
 8000c5c:	2118      	movs	r1, #24
 8000c5e:	1852      	adds	r2, r2, r1
 8000c60:	19d2      	adds	r2, r2, r7
 8000c62:	7812      	ldrb	r2, [r2, #0]
 8000c64:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c68:	3301      	adds	r3, #1
 8000c6a:	221e      	movs	r2, #30
 8000c6c:	18ba      	adds	r2, r7, r2
 8000c6e:	8812      	ldrh	r2, [r2, #0]
 8000c70:	b2d1      	uxtb	r1, r2
 8000c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c74:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c78:	3302      	adds	r3, #2
 8000c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8000c7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d3e7      	bcc.n	8000c54 <ILI9341_DrawColorBurst+0xb8>
	}

	uint32_t SendingSize = size * 2;
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000c8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000c8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000c8e:	f7ff fa3b 	bl	8000108 <__udivsi3>
 8000c92:	0003      	movs	r3, r0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff faba 	bl	8000214 <__aeabi_uidivmod>
 8000ca0:	000b      	movs	r3, r1
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24

	if(SendingInBlock != 0)
 8000ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d010      	beq.n	8000ccc <ILI9341_DrawColorBurst+0x130>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	647b      	str	r3, [r7, #68]	; 0x44
 8000cae:	e009      	b.n	8000cc4 <ILI9341_DrawColorBurst+0x128>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000cb6:	480d      	ldr	r0, [pc, #52]	; (8000cec <ILI9341_DrawColorBurst+0x150>)
 8000cb8:	230a      	movs	r3, #10
 8000cba:	f002 fc1d 	bl	80034f8 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8000cc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d3f1      	bcc.n	8000cb0 <ILI9341_DrawColorBurst+0x114>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <ILI9341_DrawColorBurst+0x150>)
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	f002 fc0f 	bl	80034f8 <HAL_SPI_Transmit>
 8000cda:	46c5      	mov	sp, r8
//	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b012      	add	sp, #72	; 0x48
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	46b8      	mov	r8, r7
 8000ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce8:	50000400 	.word	0x50000400
 8000cec:	200000ec 	.word	0x200000ec

08000cf0 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	0002      	movs	r2, r0
 8000cf8:	1dbb      	adds	r3, r7, #6
 8000cfa:	801a      	strh	r2, [r3, #0]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <ILI9341_FillScreen+0x48>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <ILI9341_FillScreen+0x4c>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff fd60 	bl	80007d0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <ILI9341_FillScreen+0x48>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	001a      	movs	r2, r3
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <ILI9341_FillScreen+0x4c>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	4353      	muls	r3, r2
 8000d20:	001a      	movs	r2, r3
 8000d22:	1dbb      	adds	r3, r7, #6
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	0011      	movs	r1, r2
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff ff37 	bl	8000b9c <ILI9341_DrawColorBurst>
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	20000002 	.word	0x20000002
 8000d3c:	20000000 	.word	0x20000000

08000d40 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	0004      	movs	r4, r0
 8000d48:	0008      	movs	r0, r1
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	1dbb      	adds	r3, r7, #6
 8000d4e:	1c22      	adds	r2, r4, #0
 8000d50:	801a      	strh	r2, [r3, #0]
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	1c02      	adds	r2, r0, #0
 8000d56:	801a      	strh	r2, [r3, #0]
 8000d58:	1cbb      	adds	r3, r7, #2
 8000d5a:	1c0a      	adds	r2, r1, #0
 8000d5c:	801a      	strh	r2, [r3, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000d5e:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <ILI9341_DrawPixel+0xfc>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	1dba      	adds	r2, r7, #6
 8000d66:	8812      	ldrh	r2, [r2, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d262      	bcs.n	8000e32 <ILI9341_DrawPixel+0xf2>
 8000d6c:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <ILI9341_DrawPixel+0x100>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	1d3a      	adds	r2, r7, #4
 8000d74:	8812      	ldrh	r2, [r2, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d25b      	bcs.n	8000e32 <ILI9341_DrawPixel+0xf2>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000d7a:	1dbb      	adds	r3, r7, #6
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	0a1b      	lsrs	r3, r3, #8
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	2414      	movs	r4, #20
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	1dbb      	adds	r3, r7, #6
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	705a      	strb	r2, [r3, #1]
 8000d94:	1dbb      	adds	r3, r7, #6
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	121b      	asrs	r3, r3, #8
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	709a      	strb	r2, [r3, #2]
 8000da2:	1dbb      	adds	r3, r7, #6
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	3301      	adds	r3, #1
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	70da      	strb	r2, [r3, #3]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	2510      	movs	r5, #16
 8000dbc:	197b      	adds	r3, r7, r5
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	197b      	adds	r3, r7, r5
 8000dc8:	705a      	strb	r2, [r3, #1]
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	121b      	asrs	r3, r3, #8
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	197b      	adds	r3, r7, r5
 8000dd6:	709a      	strb	r2, [r3, #2]
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	3301      	adds	r3, #1
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	197b      	adds	r3, r7, r5
 8000de4:	70da      	strb	r2, [r3, #3]
	uint8_t bufferC[2] = {color>>8, color};
 8000de6:	1cbb      	adds	r3, r7, #2
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	0a1b      	lsrs	r3, r3, #8
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	260c      	movs	r6, #12
 8000df2:	19bb      	adds	r3, r7, r6
 8000df4:	701a      	strb	r2, [r3, #0]
 8000df6:	1cbb      	adds	r3, r7, #2
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	19bb      	adds	r3, r7, r6
 8000dfe:	705a      	strb	r2, [r3, #1]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000e00:	202a      	movs	r0, #42	; 0x2a
 8000e02:	f7ff fc89 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000e06:	193b      	adds	r3, r7, r4
 8000e08:	2104      	movs	r1, #4
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f7ff fcc0 	bl	8000790 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000e10:	202b      	movs	r0, #43	; 0x2b
 8000e12:	f7ff fc81 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000e16:	197b      	adds	r3, r7, r5
 8000e18:	2104      	movs	r1, #4
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff fcb8 	bl	8000790 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000e20:	202c      	movs	r0, #44	; 0x2c
 8000e22:	f7ff fc79 	bl	8000718 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000e26:	19bb      	adds	r3, r7, r6
 8000e28:	2102      	movs	r1, #2
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff fcb0 	bl	8000790 <ILI9341_WriteBuffer>
 8000e30:	e000      	b.n	8000e34 <ILI9341_DrawPixel+0xf4>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000e32:	46c0      	nop			; (mov r8, r8)
}
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b007      	add	sp, #28
 8000e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	20000002 	.word	0x20000002
 8000e40:	20000000 	.word	0x20000000

08000e44 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000e44:	b5b0      	push	{r4, r5, r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	0005      	movs	r5, r0
 8000e4c:	000c      	movs	r4, r1
 8000e4e:	0010      	movs	r0, r2
 8000e50:	0019      	movs	r1, r3
 8000e52:	1dbb      	adds	r3, r7, #6
 8000e54:	1c2a      	adds	r2, r5, #0
 8000e56:	801a      	strh	r2, [r3, #0]
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	1c22      	adds	r2, r4, #0
 8000e5c:	801a      	strh	r2, [r3, #0]
 8000e5e:	1cbb      	adds	r3, r7, #2
 8000e60:	1c02      	adds	r2, r0, #0
 8000e62:	801a      	strh	r2, [r3, #0]
 8000e64:	003b      	movs	r3, r7
 8000e66:	1c0a      	adds	r2, r1, #0
 8000e68:	801a      	strh	r2, [r3, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <ILI9341_DrawRectangle+0xe0>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	1dba      	adds	r2, r7, #6
 8000e72:	8812      	ldrh	r2, [r2, #0]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d250      	bcs.n	8000f1a <ILI9341_DrawRectangle+0xd6>
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <ILI9341_DrawRectangle+0xe4>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	1d3a      	adds	r2, r7, #4
 8000e80:	8812      	ldrh	r2, [r2, #0]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d249      	bcs.n	8000f1a <ILI9341_DrawRectangle+0xd6>

	if((x+width-1)>=LCD_WIDTH)
 8000e86:	1dbb      	adds	r3, r7, #6
 8000e88:	881a      	ldrh	r2, [r3, #0]
 8000e8a:	1cbb      	adds	r3, r7, #2
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	18d3      	adds	r3, r2, r3
 8000e90:	4a24      	ldr	r2, [pc, #144]	; (8000f24 <ILI9341_DrawRectangle+0xe0>)
 8000e92:	8812      	ldrh	r2, [r2, #0]
 8000e94:	b292      	uxth	r2, r2
 8000e96:	4293      	cmp	r3, r2
 8000e98:	dd07      	ble.n	8000eaa <ILI9341_DrawRectangle+0x66>
	{
		width=LCD_WIDTH-x;
 8000e9a:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <ILI9341_DrawRectangle+0xe0>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	b299      	uxth	r1, r3
 8000ea0:	1cbb      	adds	r3, r7, #2
 8000ea2:	1dba      	adds	r2, r7, #6
 8000ea4:	8812      	ldrh	r2, [r2, #0]
 8000ea6:	1a8a      	subs	r2, r1, r2
 8000ea8:	801a      	strh	r2, [r3, #0]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	881a      	ldrh	r2, [r3, #0]
 8000eae:	003b      	movs	r3, r7
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	18d3      	adds	r3, r2, r3
 8000eb4:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <ILI9341_DrawRectangle+0xe4>)
 8000eb6:	8812      	ldrh	r2, [r2, #0]
 8000eb8:	b292      	uxth	r2, r2
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	dd07      	ble.n	8000ece <ILI9341_DrawRectangle+0x8a>
	{
		height=LCD_HEIGHT-y;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <ILI9341_DrawRectangle+0xe4>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b299      	uxth	r1, r3
 8000ec4:	003b      	movs	r3, r7
 8000ec6:	1d3a      	adds	r2, r7, #4
 8000ec8:	8812      	ldrh	r2, [r2, #0]
 8000eca:	1a8a      	subs	r2, r1, r2
 8000ecc:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000ece:	1dba      	adds	r2, r7, #6
 8000ed0:	1cbb      	adds	r3, r7, #2
 8000ed2:	8812      	ldrh	r2, [r2, #0]
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	18d3      	adds	r3, r2, r3
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	3b01      	subs	r3, #1
 8000edc:	b29c      	uxth	r4, r3
 8000ede:	1d3a      	adds	r2, r7, #4
 8000ee0:	003b      	movs	r3, r7
 8000ee2:	8812      	ldrh	r2, [r2, #0]
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	18d3      	adds	r3, r2, r3
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	3b01      	subs	r3, #1
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	8819      	ldrh	r1, [r3, #0]
 8000ef2:	1dbb      	adds	r3, r7, #6
 8000ef4:	8818      	ldrh	r0, [r3, #0]
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	0022      	movs	r2, r4
 8000efa:	f7ff fc69 	bl	80007d0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000efe:	003b      	movs	r3, r7
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	1cba      	adds	r2, r7, #2
 8000f04:	8812      	ldrh	r2, [r2, #0]
 8000f06:	4353      	muls	r3, r2
 8000f08:	001a      	movs	r2, r3
 8000f0a:	2318      	movs	r3, #24
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	0011      	movs	r1, r2
 8000f12:	0018      	movs	r0, r3
 8000f14:	f7ff fe42 	bl	8000b9c <ILI9341_DrawColorBurst>
 8000f18:	e000      	b.n	8000f1c <ILI9341_DrawRectangle+0xd8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f1a:	46c0      	nop			; (mov r8, r8)
}
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bdb0      	pop	{r4, r5, r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	20000002 	.word	0x20000002
 8000f28:	20000000 	.word	0x20000000

08000f2c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f32:	003b      	movs	r3, r7
 8000f34:	0018      	movs	r0, r3
 8000f36:	2308      	movs	r3, #8
 8000f38:	001a      	movs	r2, r3
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	f002 ff26 	bl	8003d8c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000f40:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <MX_ADC_Init+0x10c>)
 8000f42:	4a3e      	ldr	r2, [pc, #248]	; (800103c <MX_ADC_Init+0x110>)
 8000f44:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000f46:	4b3c      	ldr	r3, [pc, #240]	; (8001038 <MX_ADC_Init+0x10c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f4c:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <MX_ADC_Init+0x10c>)
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	05d2      	lsls	r2, r2, #23
 8000f52:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f54:	4b38      	ldr	r3, [pc, #224]	; (8001038 <MX_ADC_Init+0x10c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <MX_ADC_Init+0x10c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000f60:	4b35      	ldr	r3, [pc, #212]	; (8001038 <MX_ADC_Init+0x10c>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f66:	4b34      	ldr	r3, [pc, #208]	; (8001038 <MX_ADC_Init+0x10c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f6c:	4b32      	ldr	r3, [pc, #200]	; (8001038 <MX_ADC_Init+0x10c>)
 8000f6e:	2220      	movs	r2, #32
 8000f70:	2100      	movs	r1, #0
 8000f72:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <MX_ADC_Init+0x10c>)
 8000f76:	2221      	movs	r2, #33	; 0x21
 8000f78:	2100      	movs	r1, #0
 8000f7a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <MX_ADC_Init+0x10c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <MX_ADC_Init+0x10c>)
 8000f84:	22c2      	movs	r2, #194	; 0xc2
 8000f86:	32ff      	adds	r2, #255	; 0xff
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <MX_ADC_Init+0x10c>)
 8000f8c:	222c      	movs	r2, #44	; 0x2c
 8000f8e:	2100      	movs	r1, #0
 8000f90:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f92:	4b29      	ldr	r3, [pc, #164]	; (8001038 <MX_ADC_Init+0x10c>)
 8000f94:	2204      	movs	r2, #4
 8000f96:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f98:	4b27      	ldr	r3, [pc, #156]	; (8001038 <MX_ADC_Init+0x10c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <MX_ADC_Init+0x10c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <MX_ADC_Init+0x10c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <MX_ADC_Init+0x10c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fb0:	4b21      	ldr	r3, [pc, #132]	; (8001038 <MX_ADC_Init+0x10c>)
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 fcae 	bl	8001914 <HAL_ADC_Init>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000fbc:	f000 fad3 	bl	8001566 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fc0:	003b      	movs	r3, r7
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	0152      	lsls	r2, r2, #5
 8000fcc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fce:	003a      	movs	r2, r7
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <MX_ADC_Init+0x10c>)
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f000 fe11 	bl	8001bfc <HAL_ADC_ConfigChannel>
 8000fda:	1e03      	subs	r3, r0, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000fde:	f000 fac2 	bl	8001566 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fe2:	003b      	movs	r3, r7
 8000fe4:	4a16      	ldr	r2, [pc, #88]	; (8001040 <MX_ADC_Init+0x114>)
 8000fe6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fe8:	003a      	movs	r2, r7
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_ADC_Init+0x10c>)
 8000fec:	0011      	movs	r1, r2
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f000 fe04 	bl	8001bfc <HAL_ADC_ConfigChannel>
 8000ff4:	1e03      	subs	r3, r0, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000ff8:	f000 fab5 	bl	8001566 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ffc:	003b      	movs	r3, r7
 8000ffe:	4a11      	ldr	r2, [pc, #68]	; (8001044 <MX_ADC_Init+0x118>)
 8001000:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001002:	003a      	movs	r2, r7
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_ADC_Init+0x10c>)
 8001006:	0011      	movs	r1, r2
 8001008:	0018      	movs	r0, r3
 800100a:	f000 fdf7 	bl	8001bfc <HAL_ADC_ConfigChannel>
 800100e:	1e03      	subs	r3, r0, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8001012:	f000 faa8 	bl	8001566 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001016:	003b      	movs	r3, r7
 8001018:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <MX_ADC_Init+0x11c>)
 800101a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800101c:	003a      	movs	r2, r7
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_ADC_Init+0x10c>)
 8001020:	0011      	movs	r1, r2
 8001022:	0018      	movs	r0, r3
 8001024:	f000 fdea 	bl	8001bfc <HAL_ADC_ConfigChannel>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 800102c:	f000 fa9b 	bl	8001566 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000002c 	.word	0x2000002c
 800103c:	40012400 	.word	0x40012400
 8001040:	04000002 	.word	0x04000002
 8001044:	08000004 	.word	0x08000004
 8001048:	0c000008 	.word	0x0c000008

0800104c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	240c      	movs	r4, #12
 8001056:	193b      	adds	r3, r7, r4
 8001058:	0018      	movs	r0, r3
 800105a:	2314      	movs	r3, #20
 800105c:	001a      	movs	r2, r3
 800105e:	2100      	movs	r1, #0
 8001060:	f002 fe94 	bl	8003d8c <memset>
  if(adcHandle->Instance==ADC1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <HAL_ADC_MspInit+0x70>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d122      	bne.n	80010b4 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_ADC_MspInit+0x74>)
 8001070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_ADC_MspInit+0x74>)
 8001074:	2180      	movs	r1, #128	; 0x80
 8001076:	0089      	lsls	r1, r1, #2
 8001078:	430a      	orrs	r2, r1
 800107a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_ADC_MspInit+0x74>)
 800107e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_ADC_MspInit+0x74>)
 8001082:	2101      	movs	r1, #1
 8001084:	430a      	orrs	r2, r1
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_ADC_MspInit+0x74>)
 800108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108c:	2201      	movs	r2, #1
 800108e:	4013      	ands	r3, r2
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = SOUND_IN_Pin|Y__Pin|Y_A2_Pin|X__Pin;
 8001094:	193b      	adds	r3, r7, r4
 8001096:	220f      	movs	r2, #15
 8001098:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109a:	193b      	adds	r3, r7, r4
 800109c:	2203      	movs	r2, #3
 800109e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	193a      	adds	r2, r7, r4
 80010a8:	23a0      	movs	r3, #160	; 0xa0
 80010aa:	05db      	lsls	r3, r3, #23
 80010ac:	0011      	movs	r1, r2
 80010ae:	0018      	movs	r0, r3
 80010b0:	f000 ffce 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b009      	add	sp, #36	; 0x24
 80010ba:	bd90      	pop	{r4, r7, pc}
 80010bc:	40012400 	.word	0x40012400
 80010c0:	40021000 	.word	0x40021000

080010c4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010ca:	003b      	movs	r3, r7
 80010cc:	0018      	movs	r0, r3
 80010ce:	2308      	movs	r3, #8
 80010d0:	001a      	movs	r2, r3
 80010d2:	2100      	movs	r1, #0
 80010d4:	f002 fe5a 	bl	8003d8c <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_DAC_Init+0x54>)
 80010da:	4a10      	ldr	r2, [pc, #64]	; (800111c <MX_DAC_Init+0x58>)
 80010dc:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_DAC_Init+0x54>)
 80010e0:	0018      	movs	r0, r3
 80010e2:	f000 ff0f 	bl	8001f04 <HAL_DAC_Init>
 80010e6:	1e03      	subs	r3, r0, #0
 80010e8:	d001      	beq.n	80010ee <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 80010ea:	f000 fa3c 	bl	8001566 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010ee:	003b      	movs	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010f4:	003b      	movs	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010fa:	0039      	movs	r1, r7
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_DAC_Init+0x54>)
 80010fe:	2200      	movs	r2, #0
 8001100:	0018      	movs	r0, r3
 8001102:	f000 ff2b 	bl	8001f5c <HAL_DAC_ConfigChannel>
 8001106:	1e03      	subs	r3, r0, #0
 8001108:	d001      	beq.n	800110e <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 800110a:	f000 fa2c 	bl	8001566 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	20000088 	.word	0x20000088
 800111c:	40007400 	.word	0x40007400

08001120 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	240c      	movs	r4, #12
 800112a:	193b      	adds	r3, r7, r4
 800112c:	0018      	movs	r0, r3
 800112e:	2314      	movs	r3, #20
 8001130:	001a      	movs	r2, r3
 8001132:	2100      	movs	r1, #0
 8001134:	f002 fe2a 	bl	8003d8c <memset>
  if(dacHandle->Instance==DAC)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <HAL_DAC_MspInit+0x70>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d122      	bne.n	8001188 <HAL_DAC_MspInit+0x68>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_DAC_MspInit+0x74>)
 8001144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_DAC_MspInit+0x74>)
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	0589      	lsls	r1, r1, #22
 800114c:	430a      	orrs	r2, r1
 800114e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HAL_DAC_MspInit+0x74>)
 8001152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_DAC_MspInit+0x74>)
 8001156:	2101      	movs	r1, #1
 8001158:	430a      	orrs	r2, r1
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_DAC_MspInit+0x74>)
 800115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001160:	2201      	movs	r2, #1
 8001162:	4013      	ands	r3, r2
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001168:	193b      	adds	r3, r7, r4
 800116a:	2210      	movs	r2, #16
 800116c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116e:	193b      	adds	r3, r7, r4
 8001170:	2203      	movs	r2, #3
 8001172:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	193b      	adds	r3, r7, r4
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	193a      	adds	r2, r7, r4
 800117c:	23a0      	movs	r3, #160	; 0xa0
 800117e:	05db      	lsls	r3, r3, #23
 8001180:	0011      	movs	r1, r2
 8001182:	0018      	movs	r0, r3
 8001184:	f000 ff64 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	b009      	add	sp, #36	; 0x24
 800118e:	bd90      	pop	{r4, r7, pc}
 8001190:	40007400 	.word	0x40007400
 8001194:	40021000 	.word	0x40021000

08001198 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	240c      	movs	r4, #12
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	0018      	movs	r0, r3
 80011a4:	2314      	movs	r3, #20
 80011a6:	001a      	movs	r2, r3
 80011a8:	2100      	movs	r1, #0
 80011aa:	f002 fdef 	bl	8003d8c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_GPIO_Init+0x80>)
 80011b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_GPIO_Init+0x80>)
 80011b4:	2101      	movs	r1, #1
 80011b6:	430a      	orrs	r2, r1
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_GPIO_Init+0x80>)
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	2201      	movs	r2, #1
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_GPIO_Init+0x80>)
 80011c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <MX_GPIO_Init+0x80>)
 80011cc:	2102      	movs	r1, #2
 80011ce:	430a      	orrs	r2, r1
 80011d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_GPIO_Init+0x80>)
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	2202      	movs	r2, #2
 80011d8:	4013      	ands	r3, r2
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_DC_Pin|BUZ_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_GPIO_Init+0x84>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	211b      	movs	r1, #27
 80011e4:	0018      	movs	r0, r3
 80011e6:	f001 f8a9 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|BUZ_Pin|LCD_RST_Pin;
 80011ea:	0021      	movs	r1, r4
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	221b      	movs	r2, #27
 80011f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2201      	movs	r2, #1
 80011f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	2203      	movs	r2, #3
 8001202:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	187b      	adds	r3, r7, r1
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <MX_GPIO_Init+0x84>)
 8001208:	0019      	movs	r1, r3
 800120a:	0010      	movs	r0, r2
 800120c:	f000 ff20 	bl	8002050 <HAL_GPIO_Init>

}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b009      	add	sp, #36	; 0x24
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	40021000 	.word	0x40021000
 800121c:	50000400 	.word	0x50000400

08001220 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MX_I2C1_Init+0x74>)
 8001226:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <MX_I2C1_Init+0x78>)
 8001228:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_I2C1_Init+0x74>)
 800122c:	4a1b      	ldr	r2, [pc, #108]	; (800129c <MX_I2C1_Init+0x7c>)
 800122e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_I2C1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_I2C1_Init+0x74>)
 8001238:	2201      	movs	r2, #1
 800123a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_I2C1_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_I2C1_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_I2C1_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_I2C1_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_I2C1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_I2C1_Init+0x74>)
 800125c:	0018      	movs	r0, r3
 800125e:	f001 f88b 	bl	8002378 <HAL_I2C_Init>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d001      	beq.n	800126a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001266:	f000 f97e 	bl	8001566 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <MX_I2C1_Init+0x74>)
 800126c:	2100      	movs	r1, #0
 800126e:	0018      	movs	r0, r3
 8001270:	f001 f918 	bl	80024a4 <HAL_I2CEx_ConfigAnalogFilter>
 8001274:	1e03      	subs	r3, r0, #0
 8001276:	d001      	beq.n	800127c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001278:	f000 f975 	bl	8001566 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <MX_I2C1_Init+0x74>)
 800127e:	2100      	movs	r1, #0
 8001280:	0018      	movs	r0, r3
 8001282:	f001 f95b 	bl	800253c <HAL_I2CEx_ConfigDigitalFilter>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d001      	beq.n	800128e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800128a:	f000 f96c 	bl	8001566 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000098 	.word	0x20000098
 8001298:	40005400 	.word	0x40005400
 800129c:	00707cbb 	.word	0x00707cbb

080012a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	240c      	movs	r4, #12
 80012aa:	193b      	adds	r3, r7, r4
 80012ac:	0018      	movs	r0, r3
 80012ae:	2314      	movs	r3, #20
 80012b0:	001a      	movs	r2, r3
 80012b2:	2100      	movs	r1, #0
 80012b4:	f002 fd6a 	bl	8003d8c <memset>
  if(i2cHandle->Instance==I2C1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a17      	ldr	r2, [pc, #92]	; (800131c <HAL_I2C_MspInit+0x7c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d128      	bne.n	8001314 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <HAL_I2C_MspInit+0x80>)
 80012c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_I2C_MspInit+0x80>)
 80012c8:	2102      	movs	r1, #2
 80012ca:	430a      	orrs	r2, r1
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <HAL_I2C_MspInit+0x80>)
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	2202      	movs	r2, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012da:	0021      	movs	r1, r4
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	22c0      	movs	r2, #192	; 0xc0
 80012e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e2:	187b      	adds	r3, r7, r1
 80012e4:	2212      	movs	r2, #18
 80012e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2203      	movs	r2, #3
 80012f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	2201      	movs	r2, #1
 80012f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	4a09      	ldr	r2, [pc, #36]	; (8001324 <HAL_I2C_MspInit+0x84>)
 80012fe:	0019      	movs	r1, r3
 8001300:	0010      	movs	r0, r2
 8001302:	f000 fea5 	bl	8002050 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_I2C_MspInit+0x80>)
 8001308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_I2C_MspInit+0x80>)
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	0389      	lsls	r1, r1, #14
 8001310:	430a      	orrs	r2, r1
 8001312:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b009      	add	sp, #36	; 0x24
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	40005400 	.word	0x40005400
 8001320:	40021000 	.word	0x40021000
 8001324:	50000400 	.word	0x50000400

08001328 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800132e:	f000 fa5d 	bl	80017ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001332:	f000 f891 	bl	8001458 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001336:	f7ff ff2f 	bl	8001198 <MX_GPIO_Init>
	MX_SPI1_Init();
 800133a:	f000 f919 	bl	8001570 <MX_SPI1_Init>
	MX_ADC_Init();
 800133e:	f7ff fdf5 	bl	8000f2c <MX_ADC_Init>
	MX_DAC_Init();
 8001342:	f7ff febf 	bl	80010c4 <MX_DAC_Init>
	MX_TIM6_Init();
 8001346:	f000 f9d3 	bl	80016f0 <MX_TIM6_Init>
	MX_I2C1_Init();
 800134a:	f7ff ff69 	bl	8001220 <MX_I2C1_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 800134e:	f000 f8f5 	bl	800153c <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init();
 8001352:	f7ff fac9 	bl	80008e8 <ILI9341_Init>
	ILI9341_SetRotation(1);
 8001356:	2001      	movs	r0, #1
 8001358:	f7ff fbd2 	bl	8000b00 <ILI9341_SetRotation>
	ILI9341_FillScreen(WHITE);
 800135c:	4b38      	ldr	r3, [pc, #224]	; (8001440 <main+0x118>)
 800135e:	0018      	movs	r0, r3
 8001360:	f7ff fcc6 	bl	8000cf0 <ILI9341_FillScreen>

	ILI9341_DrawText("RED", FONT4, 10, 10, RED, WHITE);
 8001364:	4937      	ldr	r1, [pc, #220]	; (8001444 <main+0x11c>)
 8001366:	4838      	ldr	r0, [pc, #224]	; (8001448 <main+0x120>)
 8001368:	4b35      	ldr	r3, [pc, #212]	; (8001440 <main+0x118>)
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	23f8      	movs	r3, #248	; 0xf8
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	230a      	movs	r3, #10
 8001374:	220a      	movs	r2, #10
 8001376:	f7ff f939 	bl	80005ec <ILI9341_DrawText>
	ILI9341_DrawText("GREEN", FONT4, 10, 30, GREEN, WHITE);
 800137a:	4932      	ldr	r1, [pc, #200]	; (8001444 <main+0x11c>)
 800137c:	4833      	ldr	r0, [pc, #204]	; (800144c <main+0x124>)
 800137e:	4b30      	ldr	r3, [pc, #192]	; (8001440 <main+0x118>)
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	23fc      	movs	r3, #252	; 0xfc
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	231e      	movs	r3, #30
 800138a:	220a      	movs	r2, #10
 800138c:	f7ff f92e 	bl	80005ec <ILI9341_DrawText>
	ILI9341_DrawText("BLUE", FONT4, 10, 50, BLUE, WHITE);
 8001390:	492c      	ldr	r1, [pc, #176]	; (8001444 <main+0x11c>)
 8001392:	482f      	ldr	r0, [pc, #188]	; (8001450 <main+0x128>)
 8001394:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <main+0x118>)
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	231f      	movs	r3, #31
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2332      	movs	r3, #50	; 0x32
 800139e:	220a      	movs	r2, #10
 80013a0:	f7ff f924 	bl	80005ec <ILI9341_DrawText>

	uint8_t cnt = 0;
 80013a4:	1dfb      	adds	r3, r7, #7
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(cnt % 3 == 0) ILI9341_DrawText("RGB", FONT4, 10, 70, RED, WHITE);
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2103      	movs	r1, #3
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7fe ff2f 	bl	8000214 <__aeabi_uidivmod>
 80013b6:	000b      	movs	r3, r1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10b      	bne.n	80013d6 <main+0xae>
 80013be:	4921      	ldr	r1, [pc, #132]	; (8001444 <main+0x11c>)
 80013c0:	4824      	ldr	r0, [pc, #144]	; (8001454 <main+0x12c>)
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <main+0x118>)
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	23f8      	movs	r3, #248	; 0xf8
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2346      	movs	r3, #70	; 0x46
 80013ce:	220a      	movs	r2, #10
 80013d0:	f7ff f90c 	bl	80005ec <ILI9341_DrawText>
 80013d4:	e029      	b.n	800142a <main+0x102>
		else if(cnt % 3 == 1) ILI9341_DrawText("RGB", FONT4, 10, 70, GREEN, WHITE);
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2103      	movs	r1, #3
 80013dc:	0018      	movs	r0, r3
 80013de:	f7fe ff19 	bl	8000214 <__aeabi_uidivmod>
 80013e2:	000b      	movs	r3, r1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d10b      	bne.n	8001402 <main+0xda>
 80013ea:	4916      	ldr	r1, [pc, #88]	; (8001444 <main+0x11c>)
 80013ec:	4819      	ldr	r0, [pc, #100]	; (8001454 <main+0x12c>)
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <main+0x118>)
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	23fc      	movs	r3, #252	; 0xfc
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2346      	movs	r3, #70	; 0x46
 80013fa:	220a      	movs	r2, #10
 80013fc:	f7ff f8f6 	bl	80005ec <ILI9341_DrawText>
 8001400:	e013      	b.n	800142a <main+0x102>
		else if(cnt % 3 == 2) ILI9341_DrawText("RGB", FONT4, 10, 70, BLUE, WHITE);
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2103      	movs	r1, #3
 8001408:	0018      	movs	r0, r3
 800140a:	f7fe ff03 	bl	8000214 <__aeabi_uidivmod>
 800140e:	000b      	movs	r3, r1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d109      	bne.n	800142a <main+0x102>
 8001416:	490b      	ldr	r1, [pc, #44]	; (8001444 <main+0x11c>)
 8001418:	480e      	ldr	r0, [pc, #56]	; (8001454 <main+0x12c>)
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <main+0x118>)
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	231f      	movs	r3, #31
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2346      	movs	r3, #70	; 0x46
 8001424:	220a      	movs	r2, #10
 8001426:	f7ff f8e1 	bl	80005ec <ILI9341_DrawText>
		cnt++;
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	781a      	ldrb	r2, [r3, #0]
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	3201      	adds	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 8001434:	23fa      	movs	r3, #250	; 0xfa
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	0018      	movs	r0, r3
 800143a:	f000 fa47 	bl	80018cc <HAL_Delay>
		if(cnt % 3 == 0) ILI9341_DrawText("RGB", FONT4, 10, 70, RED, WHITE);
 800143e:	e7b4      	b.n	80013aa <main+0x82>
 8001440:	0000ffff 	.word	0x0000ffff
 8001444:	08003dcc 	.word	0x08003dcc
 8001448:	08003db4 	.word	0x08003db4
 800144c:	08003db8 	.word	0x08003db8
 8001450:	08003dc0 	.word	0x08003dc0
 8001454:	08003dc8 	.word	0x08003dc8

08001458 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b09d      	sub	sp, #116	; 0x74
 800145c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	2438      	movs	r4, #56	; 0x38
 8001460:	193b      	adds	r3, r7, r4
 8001462:	0018      	movs	r0, r3
 8001464:	2338      	movs	r3, #56	; 0x38
 8001466:	001a      	movs	r2, r3
 8001468:	2100      	movs	r1, #0
 800146a:	f002 fc8f 	bl	8003d8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146e:	2324      	movs	r3, #36	; 0x24
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	0018      	movs	r0, r3
 8001474:	2314      	movs	r3, #20
 8001476:	001a      	movs	r2, r3
 8001478:	2100      	movs	r1, #0
 800147a:	f002 fc87 	bl	8003d8c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	0018      	movs	r0, r3
 8001482:	2320      	movs	r3, #32
 8001484:	001a      	movs	r2, r3
 8001486:	2100      	movs	r1, #0
 8001488:	f002 fc80 	bl	8003d8c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	4b29      	ldr	r3, [pc, #164]	; (8001534 <SystemClock_Config+0xdc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a29      	ldr	r2, [pc, #164]	; (8001538 <SystemClock_Config+0xe0>)
 8001492:	401a      	ands	r2, r3
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <SystemClock_Config+0xdc>)
 8001496:	2180      	movs	r1, #128	; 0x80
 8001498:	0109      	lsls	r1, r1, #4
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800149e:	0021      	movs	r1, r4
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	2202      	movs	r2, #2
 80014a4:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	2201      	movs	r2, #1
 80014aa:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	2210      	movs	r2, #16
 80014b0:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2202      	movs	r2, #2
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2200      	movs	r2, #0
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	02d2      	lsls	r2, r2, #11
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	03d2      	lsls	r2, r2, #15
 80014cc:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	0018      	movs	r0, r3
 80014d2:	f001 f87f 	bl	80025d4 <HAL_RCC_OscConfig>
 80014d6:	1e03      	subs	r3, r0, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0x86>
	{
		Error_Handler();
 80014da:	f000 f844 	bl	8001566 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014de:	2124      	movs	r1, #36	; 0x24
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	220f      	movs	r2, #15
 80014e4:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2203      	movs	r2, #3
 80014ea:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2101      	movs	r1, #1
 8001502:	0018      	movs	r0, r3
 8001504:	f001 fc2a 	bl	8002d5c <HAL_RCC_ClockConfig>
 8001508:	1e03      	subs	r3, r0, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 800150c:	f000 f82b 	bl	8001566 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2208      	movs	r2, #8
 8001514:	601a      	str	r2, [r3, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	0018      	movs	r0, r3
 8001520:	f001 fe0a 	bl	8003138 <HAL_RCCEx_PeriphCLKConfig>
 8001524:	1e03      	subs	r3, r0, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8001528:	f000 f81d 	bl	8001566 <Error_Handler>
	}
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b01d      	add	sp, #116	; 0x74
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	40007000 	.word	0x40007000
 8001538:	ffffe7ff 	.word	0xffffe7ff

0800153c <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	/* TIM6_DAC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	2011      	movs	r0, #17
 8001546:	f000 fcab 	bl	8001ea0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800154a:	2011      	movs	r0, #17
 800154c:	f000 fcbd 	bl	8001eca <HAL_NVIC_EnableIRQ>
}
 8001550:	46c0      	nop			; (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){

	}
}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	b002      	add	sp, #8
 8001564:	bd80      	pop	{r7, pc}

08001566 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156a:	b672      	cpsid	i
}
 800156c:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800156e:	e7fe      	b.n	800156e <Error_Handler+0x8>

08001570 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <MX_SPI1_Init+0x68>)
 8001576:	4a19      	ldr	r2, [pc, #100]	; (80015dc <MX_SPI1_Init+0x6c>)
 8001578:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <MX_SPI1_Init+0x68>)
 800157c:	2282      	movs	r2, #130	; 0x82
 800157e:	0052      	lsls	r2, r2, #1
 8001580:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <MX_SPI1_Init+0x68>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <MX_SPI1_Init+0x68>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <MX_SPI1_Init+0x68>)
 8001590:	2202      	movs	r2, #2
 8001592:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <MX_SPI1_Init+0x68>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_SPI1_Init+0x68>)
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <MX_SPI1_Init+0x68>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_SPI1_Init+0x68>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <MX_SPI1_Init+0x68>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_SPI1_Init+0x68>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <MX_SPI1_Init+0x68>)
 80015bc:	2207      	movs	r2, #7
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <MX_SPI1_Init+0x68>)
 80015c2:	0018      	movs	r0, r3
 80015c4:	f001 ff04 	bl	80033d0 <HAL_SPI_Init>
 80015c8:	1e03      	subs	r3, r0, #0
 80015ca:	d001      	beq.n	80015d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015cc:	f7ff ffcb 	bl	8001566 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	200000ec 	.word	0x200000ec
 80015dc:	40013000 	.word	0x40013000

080015e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	240c      	movs	r4, #12
 80015ea:	193b      	adds	r3, r7, r4
 80015ec:	0018      	movs	r0, r3
 80015ee:	2314      	movs	r3, #20
 80015f0:	001a      	movs	r2, r3
 80015f2:	2100      	movs	r1, #0
 80015f4:	f002 fbca 	bl	8003d8c <memset>
  if(spiHandle->Instance==SPI1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a18      	ldr	r2, [pc, #96]	; (8001660 <HAL_SPI_MspInit+0x80>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d129      	bne.n	8001656 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_SPI_MspInit+0x84>)
 8001604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_SPI_MspInit+0x84>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0149      	lsls	r1, r1, #5
 800160c:	430a      	orrs	r2, r1
 800160e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_SPI_MspInit+0x84>)
 8001612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <HAL_SPI_MspInit+0x84>)
 8001616:	2101      	movs	r1, #1
 8001618:	430a      	orrs	r2, r1
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_SPI_MspInit+0x84>)
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	2201      	movs	r2, #1
 8001622:	4013      	ands	r3, r2
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001628:	0021      	movs	r1, r4
 800162a:	187b      	adds	r3, r7, r1
 800162c:	22e0      	movs	r2, #224	; 0xe0
 800162e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	187b      	adds	r3, r7, r1
 8001632:	2202      	movs	r2, #2
 8001634:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	187b      	adds	r3, r7, r1
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	187b      	adds	r3, r7, r1
 800163e:	2203      	movs	r2, #3
 8001640:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001642:	187b      	adds	r3, r7, r1
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	187a      	adds	r2, r7, r1
 800164a:	23a0      	movs	r3, #160	; 0xa0
 800164c:	05db      	lsls	r3, r3, #23
 800164e:	0011      	movs	r1, r2
 8001650:	0018      	movs	r0, r3
 8001652:	f000 fcfd 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b009      	add	sp, #36	; 0x24
 800165c:	bd90      	pop	{r4, r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	40013000 	.word	0x40013000
 8001664:	40021000 	.word	0x40021000

08001668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <HAL_MspInit+0x24>)
 800166e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_MspInit+0x24>)
 8001672:	2101      	movs	r1, #1
 8001674:	430a      	orrs	r2, r1
 8001676:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <HAL_MspInit+0x24>)
 800167a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <HAL_MspInit+0x24>)
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	0549      	lsls	r1, r1, #21
 8001682:	430a      	orrs	r2, r1
 8001684:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40021000 	.word	0x40021000

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <NMI_Handler+0x4>

08001696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <HardFault_Handler+0x4>

0800169c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b4:	f000 f8ee 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <TIM6_DAC_IRQHandler+0x1c>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f002 f988 	bl	80039dc <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <TIM6_DAC_IRQHandler+0x20>)
 80016ce:	0018      	movs	r0, r3
 80016d0:	f000 fc90 	bl	8001ff4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	20000144 	.word	0x20000144
 80016e0:	20000088 	.word	0x20000088

080016e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e8:	46c0      	nop			; (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f6:	003b      	movs	r3, r7
 80016f8:	0018      	movs	r0, r3
 80016fa:	2308      	movs	r3, #8
 80016fc:	001a      	movs	r2, r3
 80016fe:	2100      	movs	r1, #0
 8001700:	f002 fb44 	bl	8003d8c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_TIM6_Init+0x6c>)
 8001706:	4a16      	ldr	r2, [pc, #88]	; (8001760 <MX_TIM6_Init+0x70>)
 8001708:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_TIM6_Init+0x6c>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_TIM6_Init+0x6c>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_TIM6_Init+0x6c>)
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <MX_TIM6_Init+0x74>)
 800171a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_TIM6_Init+0x6c>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_TIM6_Init+0x6c>)
 8001724:	0018      	movs	r0, r3
 8001726:	f002 f919 	bl	800395c <HAL_TIM_Base_Init>
 800172a:	1e03      	subs	r3, r0, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800172e:	f7ff ff1a 	bl	8001566 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001732:	003b      	movs	r3, r7
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001738:	003b      	movs	r3, r7
 800173a:	2200      	movs	r2, #0
 800173c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800173e:	003a      	movs	r2, r7
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_TIM6_Init+0x6c>)
 8001742:	0011      	movs	r1, r2
 8001744:	0018      	movs	r0, r3
 8001746:	f002 faa5 	bl	8003c94 <HAL_TIMEx_MasterConfigSynchronization>
 800174a:	1e03      	subs	r3, r0, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800174e:	f7ff ff0a 	bl	8001566 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	20000144 	.word	0x20000144
 8001760:	40001000 	.word	0x40001000
 8001764:	0000ffff 	.word	0x0000ffff

08001768 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_TIM_Base_MspInit+0x28>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d105      	bne.n	8001786 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_TIM_Base_MspInit+0x2c>)
 800177c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_TIM_Base_MspInit+0x2c>)
 8001780:	2110      	movs	r1, #16
 8001782:	430a      	orrs	r2, r1
 8001784:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b002      	add	sp, #8
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	40001000 	.word	0x40001000
 8001794:	40021000 	.word	0x40021000

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001798:	480d      	ldr	r0, [pc, #52]	; (80017d0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800179a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800179c:	f7ff ffa2 	bl	80016e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80017a2:	490d      	ldr	r1, [pc, #52]	; (80017d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <LoopForever+0xe>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b8:	4c0a      	ldr	r4, [pc, #40]	; (80017e4 <LoopForever+0x16>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017c6:	f002 fabd 	bl	8003d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7ff fdad 	bl	8001328 <main>

080017ce <LoopForever>:

LoopForever:
    b LoopForever
 80017ce:	e7fe      	b.n	80017ce <LoopForever>
   ldr   r0, =_estack
 80017d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80017dc:	08004f3c 	.word	0x08004f3c
  ldr r2, =_sbss
 80017e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80017e4:	20000188 	.word	0x20000188

080017e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC1_COMP_IRQHandler>
	...

080017ec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_Init+0x3c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_Init+0x3c>)
 80017fe:	2140      	movs	r1, #64	; 0x40
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001804:	2003      	movs	r0, #3
 8001806:	f000 f811 	bl	800182c <HAL_InitTick>
 800180a:	1e03      	subs	r3, r0, #0
 800180c:	d003      	beq.n	8001816 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
 8001814:	e001      	b.n	800181a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001816:	f7ff ff27 	bl	8001668 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	781b      	ldrb	r3, [r3, #0]
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	40022000 	.word	0x40022000

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_InitTick+0x5c>)
 8001836:	681c      	ldr	r4, [r3, #0]
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_InitTick+0x60>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	0019      	movs	r1, r3
 800183e:	23fa      	movs	r3, #250	; 0xfa
 8001840:	0098      	lsls	r0, r3, #2
 8001842:	f7fe fc61 	bl	8000108 <__udivsi3>
 8001846:	0003      	movs	r3, r0
 8001848:	0019      	movs	r1, r3
 800184a:	0020      	movs	r0, r4
 800184c:	f7fe fc5c 	bl	8000108 <__udivsi3>
 8001850:	0003      	movs	r3, r0
 8001852:	0018      	movs	r0, r3
 8001854:	f000 fb49 	bl	8001eea <HAL_SYSTICK_Config>
 8001858:	1e03      	subs	r3, r0, #0
 800185a:	d001      	beq.n	8001860 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e00f      	b.n	8001880 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d80b      	bhi.n	800187e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	2301      	movs	r3, #1
 800186a:	425b      	negs	r3, r3
 800186c:	2200      	movs	r2, #0
 800186e:	0018      	movs	r0, r3
 8001870:	f000 fb16 	bl	8001ea0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_InitTick+0x64>)
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	b003      	add	sp, #12
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	20000004 	.word	0x20000004
 800188c:	2000000c 	.word	0x2000000c
 8001890:	20000008 	.word	0x20000008

08001894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_IncTick+0x1c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	001a      	movs	r2, r3
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x20>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	18d2      	adds	r2, r2, r3
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_IncTick+0x20>)
 80018a6:	601a      	str	r2, [r3, #0]
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	2000000c 	.word	0x2000000c
 80018b4:	20000184 	.word	0x20000184

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <HAL_GetTick+0x10>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	20000184 	.word	0x20000184

080018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff fff0 	bl	80018b8 <HAL_GetTick>
 80018d8:	0003      	movs	r3, r0
 80018da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	d005      	beq.n	80018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_Delay+0x44>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	001a      	movs	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	189b      	adds	r3, r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	f7ff ffe0 	bl	80018b8 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8f7      	bhi.n	80018f4 <HAL_Delay+0x28>
  {
  }
}
 8001904:	46c0      	nop			; (mov r8, r8)
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b004      	add	sp, #16
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	2000000c 	.word	0x2000000c

08001914 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e159      	b.n	8001bda <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10a      	bne.n	8001944 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2250      	movs	r2, #80	; 0x50
 8001938:	2100      	movs	r1, #0
 800193a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	0018      	movs	r0, r3
 8001940:	f7ff fb84 	bl	800104c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001948:	2210      	movs	r2, #16
 800194a:	4013      	ands	r3, r2
 800194c:	2b10      	cmp	r3, #16
 800194e:	d005      	beq.n	800195c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2204      	movs	r2, #4
 8001958:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800195a:	d00b      	beq.n	8001974 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	2210      	movs	r2, #16
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2250      	movs	r2, #80	; 0x50
 800196c:	2100      	movs	r1, #0
 800196e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e132      	b.n	8001bda <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001978:	4a9a      	ldr	r2, [pc, #616]	; (8001be4 <HAL_ADC_Init+0x2d0>)
 800197a:	4013      	ands	r3, r2
 800197c:	2202      	movs	r2, #2
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2203      	movs	r2, #3
 800198c:	4013      	ands	r3, r2
 800198e:	2b01      	cmp	r3, #1
 8001990:	d108      	bne.n	80019a4 <HAL_ADC_Init+0x90>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <HAL_ADC_Init+0x90>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_ADC_Init+0x92>
 80019a4:	2300      	movs	r3, #0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d149      	bne.n	8001a3e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	23c0      	movs	r3, #192	; 0xc0
 80019b0:	061b      	lsls	r3, r3, #24
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d00b      	beq.n	80019ce <HAL_ADC_Init+0xba>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	05db      	lsls	r3, r3, #23
 80019be:	429a      	cmp	r2, r3
 80019c0:	d005      	beq.n	80019ce <HAL_ADC_Init+0xba>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	061b      	lsls	r3, r3, #24
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d111      	bne.n	80019f2 <HAL_ADC_Init+0xde>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	0892      	lsrs	r2, r2, #2
 80019dc:	611a      	str	r2, [r3, #16]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6919      	ldr	r1, [r3, #16]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	611a      	str	r2, [r3, #16]
 80019f0:	e014      	b.n	8001a1c <HAL_ADC_Init+0x108>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	0892      	lsrs	r2, r2, #2
 8001a00:	611a      	str	r2, [r3, #16]
 8001a02:	4b79      	ldr	r3, [pc, #484]	; (8001be8 <HAL_ADC_Init+0x2d4>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4b78      	ldr	r3, [pc, #480]	; (8001be8 <HAL_ADC_Init+0x2d4>)
 8001a08:	4978      	ldr	r1, [pc, #480]	; (8001bec <HAL_ADC_Init+0x2d8>)
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	4b76      	ldr	r3, [pc, #472]	; (8001be8 <HAL_ADC_Init+0x2d4>)
 8001a10:	6819      	ldr	r1, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	4b74      	ldr	r3, [pc, #464]	; (8001be8 <HAL_ADC_Init+0x2d4>)
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2118      	movs	r1, #24
 8001a28:	438a      	bics	r2, r1
 8001a2a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68d9      	ldr	r1, [r3, #12]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001a3e:	4b6a      	ldr	r3, [pc, #424]	; (8001be8 <HAL_ADC_Init+0x2d4>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b69      	ldr	r3, [pc, #420]	; (8001be8 <HAL_ADC_Init+0x2d4>)
 8001a44:	496a      	ldr	r1, [pc, #424]	; (8001bf0 <HAL_ADC_Init+0x2dc>)
 8001a46:	400a      	ands	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001a4a:	4b67      	ldr	r3, [pc, #412]	; (8001be8 <HAL_ADC_Init+0x2d4>)
 8001a4c:	6819      	ldr	r1, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a52:	065a      	lsls	r2, r3, #25
 8001a54:	4b64      	ldr	r3, [pc, #400]	; (8001be8 <HAL_ADC_Init+0x2d4>)
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	055b      	lsls	r3, r3, #21
 8001a64:	4013      	ands	r3, r2
 8001a66:	d108      	bne.n	8001a7a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	0549      	lsls	r1, r1, #21
 8001a76:	430a      	orrs	r2, r1
 8001a78:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	495b      	ldr	r1, [pc, #364]	; (8001bf4 <HAL_ADC_Init+0x2e0>)
 8001a86:	400a      	ands	r2, r1
 8001a88:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68d9      	ldr	r1, [r3, #12]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_ADC_Init+0x18c>
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	e000      	b.n	8001aa2 <HAL_ADC_Init+0x18e>
 8001aa0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001aa2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2020      	movs	r0, #32
 8001aa8:	5c1b      	ldrb	r3, [r3, r0]
 8001aaa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001aac:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	202c      	movs	r0, #44	; 0x2c
 8001ab2:	5c1b      	ldrb	r3, [r3, r0]
 8001ab4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ab6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001abc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001ac4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001acc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ada:	23c2      	movs	r3, #194	; 0xc2
 8001adc:	33ff      	adds	r3, #255	; 0xff
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d00b      	beq.n	8001afa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68d9      	ldr	r1, [r3, #12]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2221      	movs	r2, #33	; 0x21
 8001afe:	5c9b      	ldrb	r3, [r3, r2]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d11a      	bne.n	8001b3a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	5c9b      	ldrb	r3, [r3, r2]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0249      	lsls	r1, r1, #9
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	60da      	str	r2, [r3, #12]
 8001b20:	e00b      	b.n	8001b3a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b26:	2220      	movs	r2, #32
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	2201      	movs	r2, #1
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d11f      	bne.n	8001b82 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	492a      	ldr	r1, [pc, #168]	; (8001bf8 <HAL_ADC_Init+0x2e4>)
 8001b4e:	400a      	ands	r2, r1
 8001b50:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6919      	ldr	r1, [r3, #16]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001b60:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001b66:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	611a      	str	r2, [r3, #16]
 8001b80:	e00e      	b.n	8001ba0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2107      	movs	r1, #7
 8001bac:	438a      	bics	r2, r1
 8001bae:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6959      	ldr	r1, [r3, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bcc:	2203      	movs	r2, #3
 8001bce:	4393      	bics	r3, r2
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	0018      	movs	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b002      	add	sp, #8
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	fffffefd 	.word	0xfffffefd
 8001be8:	40012708 	.word	0x40012708
 8001bec:	ffc3ffff 	.word	0xffc3ffff
 8001bf0:	fdffffff 	.word	0xfdffffff
 8001bf4:	fffe0219 	.word	0xfffe0219
 8001bf8:	fffffc03 	.word	0xfffffc03

08001bfc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2250      	movs	r2, #80	; 0x50
 8001c0a:	5c9b      	ldrb	r3, [r3, r2]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x18>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e06c      	b.n	8001cee <HAL_ADC_ConfigChannel+0xf2>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2250      	movs	r2, #80	; 0x50
 8001c18:	2101      	movs	r1, #1
 8001c1a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2204      	movs	r2, #4
 8001c24:	4013      	ands	r3, r2
 8001c26:	d00b      	beq.n	8001c40 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2250      	movs	r2, #80	; 0x50
 8001c38:	2100      	movs	r1, #0
 8001c3a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e056      	b.n	8001cee <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a2c      	ldr	r2, [pc, #176]	; (8001cf8 <HAL_ADC_ConfigChannel+0xfc>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d028      	beq.n	8001c9c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	035b      	lsls	r3, r3, #13
 8001c56:	0b5a      	lsrs	r2, r3, #13
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	02db      	lsls	r3, r3, #11
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d009      	beq.n	8001c80 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001c6c:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <HAL_ADC_ConfigChannel+0x100>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_ADC_ConfigChannel+0x100>)
 8001c72:	2180      	movs	r1, #128	; 0x80
 8001c74:	0409      	lsls	r1, r1, #16
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001c7a:	200a      	movs	r0, #10
 8001c7c:	f000 f844 	bl	8001d08 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	029b      	lsls	r3, r3, #10
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d02b      	beq.n	8001ce4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_ADC_ConfigChannel+0x100>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_ADC_ConfigChannel+0x100>)
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	03c9      	lsls	r1, r1, #15
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	e023      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	035b      	lsls	r3, r3, #13
 8001ca8:	0b5b      	lsrs	r3, r3, #13
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	02db      	lsls	r3, r3, #11
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d005      	beq.n	8001ccc <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_ADC_ConfigChannel+0x100>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_ADC_ConfigChannel+0x100>)
 8001cc6:	490e      	ldr	r1, [pc, #56]	; (8001d00 <HAL_ADC_ConfigChannel+0x104>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	029b      	lsls	r3, r3, #10
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d005      	beq.n	8001ce4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_ADC_ConfigChannel+0x100>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <HAL_ADC_ConfigChannel+0x100>)
 8001cde:	4909      	ldr	r1, [pc, #36]	; (8001d04 <HAL_ADC_ConfigChannel+0x108>)
 8001ce0:	400a      	ands	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2250      	movs	r2, #80	; 0x50
 8001ce8:	2100      	movs	r1, #0
 8001cea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b002      	add	sp, #8
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	00001001 	.word	0x00001001
 8001cfc:	40012708 	.word	0x40012708
 8001d00:	ff7fffff 	.word	0xff7fffff
 8001d04:	ffbfffff 	.word	0xffbfffff

08001d08 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <ADC_DelayMicroSecond+0x38>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	490b      	ldr	r1, [pc, #44]	; (8001d44 <ADC_DelayMicroSecond+0x3c>)
 8001d16:	0018      	movs	r0, r3
 8001d18:	f7fe f9f6 	bl	8000108 <__udivsi3>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	001a      	movs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4353      	muls	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001d26:	e002      	b.n	8001d2e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f9      	bne.n	8001d28 <ADC_DelayMicroSecond+0x20>
  }
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b004      	add	sp, #16
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	20000004 	.word	0x20000004
 8001d44:	000f4240 	.word	0x000f4240

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	0002      	movs	r2, r0
 8001d50:	1dfb      	adds	r3, r7, #7
 8001d52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	1dfb      	adds	r3, r7, #7
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b7f      	cmp	r3, #127	; 0x7f
 8001d5a:	d809      	bhi.n	8001d70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5c:	1dfb      	adds	r3, r7, #7
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	001a      	movs	r2, r3
 8001d62:	231f      	movs	r3, #31
 8001d64:	401a      	ands	r2, r3
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <__NVIC_EnableIRQ+0x30>)
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4091      	lsls	r1, r2
 8001d6c:	000a      	movs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]
  }
}
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b002      	add	sp, #8
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	e000e100 	.word	0xe000e100

08001d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	0002      	movs	r2, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	1dfb      	adds	r3, r7, #7
 8001d88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d8a:	1dfb      	adds	r3, r7, #7
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8001d90:	d828      	bhi.n	8001de4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d92:	4a2f      	ldr	r2, [pc, #188]	; (8001e50 <__NVIC_SetPriority+0xd4>)
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b25b      	sxtb	r3, r3
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	33c0      	adds	r3, #192	; 0xc0
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	589b      	ldr	r3, [r3, r2]
 8001da2:	1dfa      	adds	r2, r7, #7
 8001da4:	7812      	ldrb	r2, [r2, #0]
 8001da6:	0011      	movs	r1, r2
 8001da8:	2203      	movs	r2, #3
 8001daa:	400a      	ands	r2, r1
 8001dac:	00d2      	lsls	r2, r2, #3
 8001dae:	21ff      	movs	r1, #255	; 0xff
 8001db0:	4091      	lsls	r1, r2
 8001db2:	000a      	movs	r2, r1
 8001db4:	43d2      	mvns	r2, r2
 8001db6:	401a      	ands	r2, r3
 8001db8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	019b      	lsls	r3, r3, #6
 8001dbe:	22ff      	movs	r2, #255	; 0xff
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	2303      	movs	r3, #3
 8001dca:	4003      	ands	r3, r0
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd0:	481f      	ldr	r0, [pc, #124]	; (8001e50 <__NVIC_SetPriority+0xd4>)
 8001dd2:	1dfb      	adds	r3, r7, #7
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b25b      	sxtb	r3, r3
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	33c0      	adds	r3, #192	; 0xc0
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001de2:	e031      	b.n	8001e48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001de4:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <__NVIC_SetPriority+0xd8>)
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	0019      	movs	r1, r3
 8001dec:	230f      	movs	r3, #15
 8001dee:	400b      	ands	r3, r1
 8001df0:	3b08      	subs	r3, #8
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3306      	adds	r3, #6
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	18d3      	adds	r3, r2, r3
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	1dfa      	adds	r2, r7, #7
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	0011      	movs	r1, r2
 8001e04:	2203      	movs	r2, #3
 8001e06:	400a      	ands	r2, r1
 8001e08:	00d2      	lsls	r2, r2, #3
 8001e0a:	21ff      	movs	r1, #255	; 0xff
 8001e0c:	4091      	lsls	r1, r2
 8001e0e:	000a      	movs	r2, r1
 8001e10:	43d2      	mvns	r2, r2
 8001e12:	401a      	ands	r2, r3
 8001e14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	22ff      	movs	r2, #255	; 0xff
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	0018      	movs	r0, r3
 8001e24:	2303      	movs	r3, #3
 8001e26:	4003      	ands	r3, r0
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e2c:	4809      	ldr	r0, [pc, #36]	; (8001e54 <__NVIC_SetPriority+0xd8>)
 8001e2e:	1dfb      	adds	r3, r7, #7
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	001c      	movs	r4, r3
 8001e34:	230f      	movs	r3, #15
 8001e36:	4023      	ands	r3, r4
 8001e38:	3b08      	subs	r3, #8
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	3306      	adds	r3, #6
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	18c3      	adds	r3, r0, r3
 8001e44:	3304      	adds	r3, #4
 8001e46:	601a      	str	r2, [r3, #0]
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b003      	add	sp, #12
 8001e4e:	bd90      	pop	{r4, r7, pc}
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	1e5a      	subs	r2, r3, #1
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	045b      	lsls	r3, r3, #17
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d301      	bcc.n	8001e70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e010      	b.n	8001e92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <SysTick_Config+0x44>)
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	3a01      	subs	r2, #1
 8001e76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e78:	2301      	movs	r3, #1
 8001e7a:	425b      	negs	r3, r3
 8001e7c:	2103      	movs	r1, #3
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7ff ff7c 	bl	8001d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SysTick_Config+0x44>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <SysTick_Config+0x44>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b002      	add	sp, #8
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	210f      	movs	r1, #15
 8001eac:	187b      	adds	r3, r7, r1
 8001eae:	1c02      	adds	r2, r0, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b25b      	sxtb	r3, r3
 8001eba:	0011      	movs	r1, r2
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff ff5d 	bl	8001d7c <__NVIC_SetPriority>
}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b004      	add	sp, #16
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	b25b      	sxtb	r3, r3
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff ff33 	bl	8001d48 <__NVIC_EnableIRQ>
}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b002      	add	sp, #8
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7ff ffaf 	bl	8001e58 <SysTick_Config>
 8001efa:	0003      	movs	r3, r0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e015      	b.n	8001f42 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	791b      	ldrb	r3, [r3, #4]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d106      	bne.n	8001f2e <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff f8f9 	bl	8001120 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b002      	add	sp, #8
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b002      	add	sp, #8
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	795b      	ldrb	r3, [r3, #5]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_DAC_ConfigChannel+0x20>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e035      	b.n	8001fe8 <HAL_DAC_ConfigChannel+0x8c>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2202      	movs	r2, #2
 8001f86:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001f90:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_DAC_ConfigChannel+0x94>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	409a      	lsls	r2, r3
 8001f96:	0013      	movs	r3, r2
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	0013      	movs	r3, r2
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	21c0      	movs	r1, #192	; 0xc0
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4099      	lsls	r1, r3
 8001fce:	000b      	movs	r3, r1
 8001fd0:	43d9      	mvns	r1, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b006      	add	sp, #24
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	00000ffe 	.word	0x00000ffe

08001ff4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check underrun flag of DAC channel 1 */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	019b      	lsls	r3, r3, #6
 8002006:	401a      	ands	r2, r3
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	019b      	lsls	r3, r3, #6
 800200c:	429a      	cmp	r2, r3
 800200e:	d119      	bne.n	8002044 <HAL_DAC_IRQHandler+0x50>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2204      	movs	r2, #4
 8002014:	711a      	strb	r2, [r3, #4]

    /* Set DAC error code to chanel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60da      	str	r2, [r3, #12]

    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	0192      	lsls	r2, r2, #6
 800202a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable the selected DAC channel1 DMA request */
    CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4905      	ldr	r1, [pc, #20]	; (800204c <HAL_DAC_IRQHandler+0x58>)
 8002038:	400a      	ands	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

    /* Error callback */
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	0018      	movs	r0, r3
 8002040:	f7ff ff83 	bl	8001f4a <HAL_DAC_DMAUnderrunCallbackCh1>
  }
}
 8002044:	46c0      	nop			; (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	b002      	add	sp, #8
 800204a:	bd80      	pop	{r7, pc}
 800204c:	ffffefff 	.word	0xffffefff

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002066:	e14f      	b.n	8002308 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4091      	lsls	r1, r2
 8002072:	000a      	movs	r2, r1
 8002074:	4013      	ands	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <HAL_GPIO_Init+0x30>
 800207e:	e140      	b.n	8002302 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2203      	movs	r2, #3
 8002086:	4013      	ands	r3, r2
 8002088:	2b01      	cmp	r3, #1
 800208a:	d005      	beq.n	8002098 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2203      	movs	r2, #3
 8002092:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002094:	2b02      	cmp	r3, #2
 8002096:	d130      	bne.n	80020fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	409a      	lsls	r2, r3
 80020a6:	0013      	movs	r3, r2
 80020a8:	43da      	mvns	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	409a      	lsls	r2, r3
 80020ba:	0013      	movs	r3, r2
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ce:	2201      	movs	r2, #1
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
 80020d4:	0013      	movs	r3, r2
 80020d6:	43da      	mvns	r2, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	2201      	movs	r2, #1
 80020e6:	401a      	ands	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	409a      	lsls	r2, r3
 80020ec:	0013      	movs	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2203      	movs	r2, #3
 8002100:	4013      	ands	r3, r2
 8002102:	2b03      	cmp	r3, #3
 8002104:	d017      	beq.n	8002136 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	409a      	lsls	r2, r3
 8002114:	0013      	movs	r3, r2
 8002116:	43da      	mvns	r2, r3
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	409a      	lsls	r2, r3
 8002128:	0013      	movs	r3, r2
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2203      	movs	r2, #3
 800213c:	4013      	ands	r3, r2
 800213e:	2b02      	cmp	r3, #2
 8002140:	d123      	bne.n	800218a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	0092      	lsls	r2, r2, #2
 800214c:	58d3      	ldr	r3, [r2, r3]
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2207      	movs	r2, #7
 8002154:	4013      	ands	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	409a      	lsls	r2, r3
 800215c:	0013      	movs	r3, r2
 800215e:	43da      	mvns	r2, r3
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2107      	movs	r1, #7
 800216e:	400b      	ands	r3, r1
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	409a      	lsls	r2, r3
 8002174:	0013      	movs	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	08da      	lsrs	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3208      	adds	r2, #8
 8002184:	0092      	lsls	r2, r2, #2
 8002186:	6939      	ldr	r1, [r7, #16]
 8002188:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	43da      	mvns	r2, r3
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2203      	movs	r2, #3
 80021a8:	401a      	ands	r2, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	409a      	lsls	r2, r3
 80021b0:	0013      	movs	r3, r2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	23c0      	movs	r3, #192	; 0xc0
 80021c4:	029b      	lsls	r3, r3, #10
 80021c6:	4013      	ands	r3, r2
 80021c8:	d100      	bne.n	80021cc <HAL_GPIO_Init+0x17c>
 80021ca:	e09a      	b.n	8002302 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021cc:	4b54      	ldr	r3, [pc, #336]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80021ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d0:	4b53      	ldr	r3, [pc, #332]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80021d2:	2101      	movs	r1, #1
 80021d4:	430a      	orrs	r2, r1
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80021d8:	4a52      	ldr	r2, [pc, #328]	; (8002324 <HAL_GPIO_Init+0x2d4>)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	589b      	ldr	r3, [r3, r2]
 80021e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2203      	movs	r2, #3
 80021ea:	4013      	ands	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	220f      	movs	r2, #15
 80021f0:	409a      	lsls	r2, r3
 80021f2:	0013      	movs	r3, r2
 80021f4:	43da      	mvns	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	23a0      	movs	r3, #160	; 0xa0
 8002200:	05db      	lsls	r3, r3, #23
 8002202:	429a      	cmp	r2, r3
 8002204:	d019      	beq.n	800223a <HAL_GPIO_Init+0x1ea>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a47      	ldr	r2, [pc, #284]	; (8002328 <HAL_GPIO_Init+0x2d8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_GPIO_Init+0x1e6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a46      	ldr	r2, [pc, #280]	; (800232c <HAL_GPIO_Init+0x2dc>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00d      	beq.n	8002232 <HAL_GPIO_Init+0x1e2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a45      	ldr	r2, [pc, #276]	; (8002330 <HAL_GPIO_Init+0x2e0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d007      	beq.n	800222e <HAL_GPIO_Init+0x1de>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a44      	ldr	r2, [pc, #272]	; (8002334 <HAL_GPIO_Init+0x2e4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d101      	bne.n	800222a <HAL_GPIO_Init+0x1da>
 8002226:	2305      	movs	r3, #5
 8002228:	e008      	b.n	800223c <HAL_GPIO_Init+0x1ec>
 800222a:	2306      	movs	r3, #6
 800222c:	e006      	b.n	800223c <HAL_GPIO_Init+0x1ec>
 800222e:	2303      	movs	r3, #3
 8002230:	e004      	b.n	800223c <HAL_GPIO_Init+0x1ec>
 8002232:	2302      	movs	r3, #2
 8002234:	e002      	b.n	800223c <HAL_GPIO_Init+0x1ec>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_GPIO_Init+0x1ec>
 800223a:	2300      	movs	r3, #0
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	2103      	movs	r1, #3
 8002240:	400a      	ands	r2, r1
 8002242:	0092      	lsls	r2, r2, #2
 8002244:	4093      	lsls	r3, r2
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800224c:	4935      	ldr	r1, [pc, #212]	; (8002324 <HAL_GPIO_Init+0x2d4>)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	3302      	adds	r3, #2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225a:	4b37      	ldr	r3, [pc, #220]	; (8002338 <HAL_GPIO_Init+0x2e8>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	43da      	mvns	r2, r3
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	035b      	lsls	r3, r3, #13
 8002272:	4013      	ands	r3, r2
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800227e:	4b2e      	ldr	r3, [pc, #184]	; (8002338 <HAL_GPIO_Init+0x2e8>)
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002284:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <HAL_GPIO_Init+0x2e8>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	43da      	mvns	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	039b      	lsls	r3, r3, #14
 800229c:	4013      	ands	r3, r2
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022a8:	4b23      	ldr	r3, [pc, #140]	; (8002338 <HAL_GPIO_Init+0x2e8>)
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80022ae:	4b22      	ldr	r3, [pc, #136]	; (8002338 <HAL_GPIO_Init+0x2e8>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	43da      	mvns	r2, r3
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	029b      	lsls	r3, r3, #10
 80022c6:	4013      	ands	r3, r2
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_GPIO_Init+0x2e8>)
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d8:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_GPIO_Init+0x2e8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	43da      	mvns	r2, r3
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	025b      	lsls	r3, r3, #9
 80022f0:	4013      	ands	r3, r2
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_GPIO_Init+0x2e8>)
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	3301      	adds	r3, #1
 8002306:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	40da      	lsrs	r2, r3
 8002310:	1e13      	subs	r3, r2, #0
 8002312:	d000      	beq.n	8002316 <HAL_GPIO_Init+0x2c6>
 8002314:	e6a8      	b.n	8002068 <HAL_GPIO_Init+0x18>
  }
}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b006      	add	sp, #24
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	40010000 	.word	0x40010000
 8002328:	50000400 	.word	0x50000400
 800232c:	50000800 	.word	0x50000800
 8002330:	50000c00 	.word	0x50000c00
 8002334:	50001c00 	.word	0x50001c00
 8002338:	40010400 	.word	0x40010400

0800233c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	0008      	movs	r0, r1
 8002346:	0011      	movs	r1, r2
 8002348:	1cbb      	adds	r3, r7, #2
 800234a:	1c02      	adds	r2, r0, #0
 800234c:	801a      	strh	r2, [r3, #0]
 800234e:	1c7b      	adds	r3, r7, #1
 8002350:	1c0a      	adds	r2, r1, #0
 8002352:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002354:	1c7b      	adds	r3, r7, #1
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d004      	beq.n	8002366 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235c:	1cbb      	adds	r3, r7, #2
 800235e:	881a      	ldrh	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002364:	e003      	b.n	800236e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002366:	1cbb      	adds	r3, r7, #2
 8002368:	881a      	ldrh	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b002      	add	sp, #8
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e082      	b.n	8002490 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2241      	movs	r2, #65	; 0x41
 800238e:	5c9b      	ldrb	r3, [r3, r2]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d107      	bne.n	80023a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2240      	movs	r2, #64	; 0x40
 800239a:	2100      	movs	r1, #0
 800239c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f7fe ff7d 	bl	80012a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2241      	movs	r2, #65	; 0x41
 80023aa:	2124      	movs	r1, #36	; 0x24
 80023ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2101      	movs	r1, #1
 80023ba:	438a      	bics	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4934      	ldr	r1, [pc, #208]	; (8002498 <HAL_I2C_Init+0x120>)
 80023c8:	400a      	ands	r2, r1
 80023ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4931      	ldr	r1, [pc, #196]	; (800249c <HAL_I2C_Init+0x124>)
 80023d8:	400a      	ands	r2, r1
 80023da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d108      	bne.n	80023f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2180      	movs	r1, #128	; 0x80
 80023ee:	0209      	lsls	r1, r1, #8
 80023f0:	430a      	orrs	r2, r1
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	e007      	b.n	8002406 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2184      	movs	r1, #132	; 0x84
 8002400:	0209      	lsls	r1, r1, #8
 8002402:	430a      	orrs	r2, r1
 8002404:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d104      	bne.n	8002418 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2280      	movs	r2, #128	; 0x80
 8002414:	0112      	lsls	r2, r2, #4
 8002416:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	491f      	ldr	r1, [pc, #124]	; (80024a0 <HAL_I2C_Init+0x128>)
 8002424:	430a      	orrs	r2, r1
 8002426:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	491a      	ldr	r1, [pc, #104]	; (800249c <HAL_I2C_Init+0x124>)
 8002434:	400a      	ands	r2, r1
 8002436:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	431a      	orrs	r2, r3
 8002442:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69d9      	ldr	r1, [r3, #28]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1a      	ldr	r2, [r3, #32]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2101      	movs	r1, #1
 800246e:	430a      	orrs	r2, r1
 8002470:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2241      	movs	r2, #65	; 0x41
 800247c:	2120      	movs	r1, #32
 800247e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2242      	movs	r2, #66	; 0x42
 800248a:	2100      	movs	r1, #0
 800248c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	b002      	add	sp, #8
 8002496:	bd80      	pop	{r7, pc}
 8002498:	f0ffffff 	.word	0xf0ffffff
 800249c:	ffff7fff 	.word	0xffff7fff
 80024a0:	02008000 	.word	0x02008000

080024a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2241      	movs	r2, #65	; 0x41
 80024b2:	5c9b      	ldrb	r3, [r3, r2]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	d138      	bne.n	800252c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2240      	movs	r2, #64	; 0x40
 80024be:	5c9b      	ldrb	r3, [r3, r2]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e032      	b.n	800252e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2240      	movs	r2, #64	; 0x40
 80024cc:	2101      	movs	r1, #1
 80024ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2241      	movs	r2, #65	; 0x41
 80024d4:	2124      	movs	r1, #36	; 0x24
 80024d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2101      	movs	r1, #1
 80024e4:	438a      	bics	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4911      	ldr	r1, [pc, #68]	; (8002538 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80024f4:	400a      	ands	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2101      	movs	r1, #1
 8002514:	430a      	orrs	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2241      	movs	r2, #65	; 0x41
 800251c:	2120      	movs	r1, #32
 800251e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2240      	movs	r2, #64	; 0x40
 8002524:	2100      	movs	r1, #0
 8002526:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	e000      	b.n	800252e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800252c:	2302      	movs	r3, #2
  }
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	ffffefff 	.word	0xffffefff

0800253c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2241      	movs	r2, #65	; 0x41
 800254a:	5c9b      	ldrb	r3, [r3, r2]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b20      	cmp	r3, #32
 8002550:	d139      	bne.n	80025c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2240      	movs	r2, #64	; 0x40
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800255c:	2302      	movs	r3, #2
 800255e:	e033      	b.n	80025c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2240      	movs	r2, #64	; 0x40
 8002564:	2101      	movs	r1, #1
 8002566:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2241      	movs	r2, #65	; 0x41
 800256c:	2124      	movs	r1, #36	; 0x24
 800256e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2101      	movs	r1, #1
 800257c:	438a      	bics	r2, r1
 800257e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800258c:	4013      	ands	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2101      	movs	r1, #1
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2241      	movs	r2, #65	; 0x41
 80025b6:	2120      	movs	r1, #32
 80025b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2240      	movs	r2, #64	; 0x40
 80025be:	2100      	movs	r1, #0
 80025c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
  }
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	fffff0ff 	.word	0xfffff0ff

080025d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f000 fbaf 	bl	8002d46 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e8:	4bcf      	ldr	r3, [pc, #828]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	220c      	movs	r2, #12
 80025ee:	4013      	ands	r3, r2
 80025f0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f2:	4bcd      	ldr	r3, [pc, #820]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	025b      	lsls	r3, r3, #9
 80025fa:	4013      	ands	r3, r2
 80025fc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2201      	movs	r2, #1
 8002604:	4013      	ands	r3, r2
 8002606:	d100      	bne.n	800260a <HAL_RCC_OscConfig+0x36>
 8002608:	e07e      	b.n	8002708 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d007      	beq.n	8002620 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d112      	bne.n	800263c <HAL_RCC_OscConfig+0x68>
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	025b      	lsls	r3, r3, #9
 800261c:	429a      	cmp	r2, r3
 800261e:	d10d      	bne.n	800263c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	4bc1      	ldr	r3, [pc, #772]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	029b      	lsls	r3, r3, #10
 8002628:	4013      	ands	r3, r2
 800262a:	d100      	bne.n	800262e <HAL_RCC_OscConfig+0x5a>
 800262c:	e06b      	b.n	8002706 <HAL_RCC_OscConfig+0x132>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d167      	bne.n	8002706 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	f000 fb85 	bl	8002d46 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	025b      	lsls	r3, r3, #9
 8002644:	429a      	cmp	r2, r3
 8002646:	d107      	bne.n	8002658 <HAL_RCC_OscConfig+0x84>
 8002648:	4bb7      	ldr	r3, [pc, #732]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4bb6      	ldr	r3, [pc, #728]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	0249      	lsls	r1, r1, #9
 8002652:	430a      	orrs	r2, r1
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e027      	b.n	80026a8 <HAL_RCC_OscConfig+0xd4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	23a0      	movs	r3, #160	; 0xa0
 800265e:	02db      	lsls	r3, r3, #11
 8002660:	429a      	cmp	r2, r3
 8002662:	d10e      	bne.n	8002682 <HAL_RCC_OscConfig+0xae>
 8002664:	4bb0      	ldr	r3, [pc, #704]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4baf      	ldr	r3, [pc, #700]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 800266a:	2180      	movs	r1, #128	; 0x80
 800266c:	02c9      	lsls	r1, r1, #11
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	4bad      	ldr	r3, [pc, #692]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4bac      	ldr	r3, [pc, #688]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	0249      	lsls	r1, r1, #9
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e012      	b.n	80026a8 <HAL_RCC_OscConfig+0xd4>
 8002682:	4ba9      	ldr	r3, [pc, #676]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4ba8      	ldr	r3, [pc, #672]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002688:	49a8      	ldr	r1, [pc, #672]	; (800292c <HAL_RCC_OscConfig+0x358>)
 800268a:	400a      	ands	r2, r1
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	4ba6      	ldr	r3, [pc, #664]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	025b      	lsls	r3, r3, #9
 8002696:	4013      	ands	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4ba2      	ldr	r3, [pc, #648]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4ba1      	ldr	r3, [pc, #644]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80026a2:	49a3      	ldr	r1, [pc, #652]	; (8002930 <HAL_RCC_OscConfig+0x35c>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d015      	beq.n	80026dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff f902 	bl	80018b8 <HAL_GetTick>
 80026b4:	0003      	movs	r3, r0
 80026b6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026b8:	e009      	b.n	80026ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ba:	f7ff f8fd 	bl	80018b8 <HAL_GetTick>
 80026be:	0002      	movs	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b64      	cmp	r3, #100	; 0x64
 80026c6:	d902      	bls.n	80026ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	f000 fb3c 	bl	8002d46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026ce:	4b96      	ldr	r3, [pc, #600]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	029b      	lsls	r3, r3, #10
 80026d6:	4013      	ands	r3, r2
 80026d8:	d0ef      	beq.n	80026ba <HAL_RCC_OscConfig+0xe6>
 80026da:	e015      	b.n	8002708 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7ff f8ec 	bl	80018b8 <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e6:	f7ff f8e7 	bl	80018b8 <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b64      	cmp	r3, #100	; 0x64
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e326      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026f8:	4b8b      	ldr	r3, [pc, #556]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	029b      	lsls	r3, r3, #10
 8002700:	4013      	ands	r3, r2
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0x112>
 8002704:	e000      	b.n	8002708 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002706:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d100      	bne.n	8002714 <HAL_RCC_OscConfig+0x140>
 8002712:	e08b      	b.n	800282c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	2b04      	cmp	r3, #4
 800271e:	d005      	beq.n	800272c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d13e      	bne.n	80027a4 <HAL_RCC_OscConfig+0x1d0>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d13b      	bne.n	80027a4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800272c:	4b7e      	ldr	r3, [pc, #504]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2204      	movs	r2, #4
 8002732:	4013      	ands	r3, r2
 8002734:	d004      	beq.n	8002740 <HAL_RCC_OscConfig+0x16c>
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e302      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b79      	ldr	r3, [pc, #484]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4a7b      	ldr	r2, [pc, #492]	; (8002934 <HAL_RCC_OscConfig+0x360>)
 8002746:	4013      	ands	r3, r2
 8002748:	0019      	movs	r1, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	021a      	lsls	r2, r3, #8
 8002750:	4b75      	ldr	r3, [pc, #468]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002752:	430a      	orrs	r2, r1
 8002754:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002756:	4b74      	ldr	r3, [pc, #464]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2209      	movs	r2, #9
 800275c:	4393      	bics	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	4b71      	ldr	r3, [pc, #452]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002768:	f000 fc40 	bl	8002fec <HAL_RCC_GetSysClockFreq>
 800276c:	0001      	movs	r1, r0
 800276e:	4b6e      	ldr	r3, [pc, #440]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	220f      	movs	r2, #15
 8002776:	4013      	ands	r3, r2
 8002778:	4a6f      	ldr	r2, [pc, #444]	; (8002938 <HAL_RCC_OscConfig+0x364>)
 800277a:	5cd3      	ldrb	r3, [r2, r3]
 800277c:	000a      	movs	r2, r1
 800277e:	40da      	lsrs	r2, r3
 8002780:	4b6e      	ldr	r3, [pc, #440]	; (800293c <HAL_RCC_OscConfig+0x368>)
 8002782:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002784:	4b6e      	ldr	r3, [pc, #440]	; (8002940 <HAL_RCC_OscConfig+0x36c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2513      	movs	r5, #19
 800278a:	197c      	adds	r4, r7, r5
 800278c:	0018      	movs	r0, r3
 800278e:	f7ff f84d 	bl	800182c <HAL_InitTick>
 8002792:	0003      	movs	r3, r0
 8002794:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002796:	197b      	adds	r3, r7, r5
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d046      	beq.n	800282c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800279e:	197b      	adds	r3, r7, r5
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	e2d0      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d027      	beq.n	80027fa <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027aa:	4b5f      	ldr	r3, [pc, #380]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2209      	movs	r2, #9
 80027b0:	4393      	bics	r3, r2
 80027b2:	0019      	movs	r1, r3
 80027b4:	4b5c      	ldr	r3, [pc, #368]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7ff f87c 	bl	80018b8 <HAL_GetTick>
 80027c0:	0003      	movs	r3, r0
 80027c2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c6:	f7ff f877 	bl	80018b8 <HAL_GetTick>
 80027ca:	0002      	movs	r2, r0
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e2b6      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027d8:	4b53      	ldr	r3, [pc, #332]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2204      	movs	r2, #4
 80027de:	4013      	ands	r3, r2
 80027e0:	d0f1      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e2:	4b51      	ldr	r3, [pc, #324]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4a53      	ldr	r2, [pc, #332]	; (8002934 <HAL_RCC_OscConfig+0x360>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	021a      	lsls	r2, r3, #8
 80027f2:	4b4d      	ldr	r3, [pc, #308]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80027f4:	430a      	orrs	r2, r1
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	e018      	b.n	800282c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fa:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4b4a      	ldr	r3, [pc, #296]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002800:	2101      	movs	r1, #1
 8002802:	438a      	bics	r2, r1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7ff f857 	bl	80018b8 <HAL_GetTick>
 800280a:	0003      	movs	r3, r0
 800280c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002810:	f7ff f852 	bl	80018b8 <HAL_GetTick>
 8002814:	0002      	movs	r2, r0
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e291      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002822:	4b41      	ldr	r3, [pc, #260]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2204      	movs	r2, #4
 8002828:	4013      	ands	r3, r2
 800282a:	d1f1      	bne.n	8002810 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2210      	movs	r2, #16
 8002832:	4013      	ands	r3, r2
 8002834:	d100      	bne.n	8002838 <HAL_RCC_OscConfig+0x264>
 8002836:	e0a1      	b.n	800297c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d140      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800283e:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4013      	ands	r3, r2
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x282>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e277      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002856:	4b34      	ldr	r3, [pc, #208]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4a3a      	ldr	r2, [pc, #232]	; (8002944 <HAL_RCC_OscConfig+0x370>)
 800285c:	4013      	ands	r3, r2
 800285e:	0019      	movs	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002864:	4b30      	ldr	r3, [pc, #192]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800286a:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	0a19      	lsrs	r1, r3, #8
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	061a      	lsls	r2, r3, #24
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	0b5b      	lsrs	r3, r3, #13
 8002884:	3301      	adds	r3, #1
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	0212      	lsls	r2, r2, #8
 800288a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800288c:	4b26      	ldr	r3, [pc, #152]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	210f      	movs	r1, #15
 8002894:	400b      	ands	r3, r1
 8002896:	4928      	ldr	r1, [pc, #160]	; (8002938 <HAL_RCC_OscConfig+0x364>)
 8002898:	5ccb      	ldrb	r3, [r1, r3]
 800289a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800289c:	4b27      	ldr	r3, [pc, #156]	; (800293c <HAL_RCC_OscConfig+0x368>)
 800289e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80028a0:	4b27      	ldr	r3, [pc, #156]	; (8002940 <HAL_RCC_OscConfig+0x36c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2513      	movs	r5, #19
 80028a6:	197c      	adds	r4, r7, r5
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7fe ffbf 	bl	800182c <HAL_InitTick>
 80028ae:	0003      	movs	r3, r0
 80028b0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80028b2:	197b      	adds	r3, r7, r5
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d060      	beq.n	800297c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80028ba:	197b      	adds	r3, r7, r5
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	e242      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d03f      	beq.n	8002948 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028c8:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80028ce:	2180      	movs	r1, #128	; 0x80
 80028d0:	0049      	lsls	r1, r1, #1
 80028d2:	430a      	orrs	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe ffef 	bl	80018b8 <HAL_GetTick>
 80028da:	0003      	movs	r3, r0
 80028dc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028e0:	f7fe ffea 	bl	80018b8 <HAL_GetTick>
 80028e4:	0002      	movs	r2, r0
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e229      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4013      	ands	r3, r2
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4a10      	ldr	r2, [pc, #64]	; (8002944 <HAL_RCC_OscConfig+0x370>)
 8002904:	4013      	ands	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	0a19      	lsrs	r1, r3, #8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	061a      	lsls	r2, r3, #24
 8002920:	4b01      	ldr	r3, [pc, #4]	; (8002928 <HAL_RCC_OscConfig+0x354>)
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	e029      	b.n	800297c <HAL_RCC_OscConfig+0x3a8>
 8002928:	40021000 	.word	0x40021000
 800292c:	fffeffff 	.word	0xfffeffff
 8002930:	fffbffff 	.word	0xfffbffff
 8002934:	ffffe0ff 	.word	0xffffe0ff
 8002938:	08004f10 	.word	0x08004f10
 800293c:	20000004 	.word	0x20000004
 8002940:	20000008 	.word	0x20000008
 8002944:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002948:	4bbd      	ldr	r3, [pc, #756]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4bbc      	ldr	r3, [pc, #752]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 800294e:	49bd      	ldr	r1, [pc, #756]	; (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002950:	400a      	ands	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe ffb0 	bl	80018b8 <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800295e:	f7fe ffab 	bl	80018b8 <HAL_GetTick>
 8002962:	0002      	movs	r2, r0
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e1ea      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002970:	4bb3      	ldr	r3, [pc, #716]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4013      	ands	r3, r2
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2208      	movs	r2, #8
 8002982:	4013      	ands	r3, r2
 8002984:	d036      	beq.n	80029f4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d019      	beq.n	80029c2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800298e:	4bac      	ldr	r3, [pc, #688]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002992:	4bab      	ldr	r3, [pc, #684]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002994:	2101      	movs	r1, #1
 8002996:	430a      	orrs	r2, r1
 8002998:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299a:	f7fe ff8d 	bl	80018b8 <HAL_GetTick>
 800299e:	0003      	movs	r3, r0
 80029a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a4:	f7fe ff88 	bl	80018b8 <HAL_GetTick>
 80029a8:	0002      	movs	r2, r0
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e1c7      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029b6:	4ba2      	ldr	r3, [pc, #648]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 80029b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ba:	2202      	movs	r2, #2
 80029bc:	4013      	ands	r3, r2
 80029be:	d0f1      	beq.n	80029a4 <HAL_RCC_OscConfig+0x3d0>
 80029c0:	e018      	b.n	80029f4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c2:	4b9f      	ldr	r3, [pc, #636]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 80029c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029c6:	4b9e      	ldr	r3, [pc, #632]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 80029c8:	2101      	movs	r1, #1
 80029ca:	438a      	bics	r2, r1
 80029cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7fe ff73 	bl	80018b8 <HAL_GetTick>
 80029d2:	0003      	movs	r3, r0
 80029d4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d8:	f7fe ff6e 	bl	80018b8 <HAL_GetTick>
 80029dc:	0002      	movs	r2, r0
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e1ad      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ea:	4b95      	ldr	r3, [pc, #596]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 80029ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ee:	2202      	movs	r2, #2
 80029f0:	4013      	ands	r3, r2
 80029f2:	d1f1      	bne.n	80029d8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2204      	movs	r2, #4
 80029fa:	4013      	ands	r3, r2
 80029fc:	d100      	bne.n	8002a00 <HAL_RCC_OscConfig+0x42c>
 80029fe:	e0ae      	b.n	8002b5e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a00:	2027      	movs	r0, #39	; 0x27
 8002a02:	183b      	adds	r3, r7, r0
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a08:	4b8d      	ldr	r3, [pc, #564]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	055b      	lsls	r3, r3, #21
 8002a10:	4013      	ands	r3, r2
 8002a12:	d109      	bne.n	8002a28 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a14:	4b8a      	ldr	r3, [pc, #552]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a18:	4b89      	ldr	r3, [pc, #548]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	0549      	lsls	r1, r1, #21
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a22:	183b      	adds	r3, r7, r0
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	4b87      	ldr	r3, [pc, #540]	; (8002c48 <HAL_RCC_OscConfig+0x674>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4013      	ands	r3, r2
 8002a32:	d11a      	bne.n	8002a6a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a34:	4b84      	ldr	r3, [pc, #528]	; (8002c48 <HAL_RCC_OscConfig+0x674>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b83      	ldr	r3, [pc, #524]	; (8002c48 <HAL_RCC_OscConfig+0x674>)
 8002a3a:	2180      	movs	r1, #128	; 0x80
 8002a3c:	0049      	lsls	r1, r1, #1
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a42:	f7fe ff39 	bl	80018b8 <HAL_GetTick>
 8002a46:	0003      	movs	r3, r0
 8002a48:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4c:	f7fe ff34 	bl	80018b8 <HAL_GetTick>
 8002a50:	0002      	movs	r2, r0
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e173      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5e:	4b7a      	ldr	r3, [pc, #488]	; (8002c48 <HAL_RCC_OscConfig+0x674>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4013      	ands	r3, r2
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_OscConfig+0x4b2>
 8002a76:	4b72      	ldr	r3, [pc, #456]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002a78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a7a:	4b71      	ldr	r3, [pc, #452]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002a7c:	2180      	movs	r1, #128	; 0x80
 8002a7e:	0049      	lsls	r1, r1, #1
 8002a80:	430a      	orrs	r2, r1
 8002a82:	651a      	str	r2, [r3, #80]	; 0x50
 8002a84:	e031      	b.n	8002aea <HAL_RCC_OscConfig+0x516>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4d4>
 8002a8e:	4b6c      	ldr	r3, [pc, #432]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002a90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a92:	4b6b      	ldr	r3, [pc, #428]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002a94:	496b      	ldr	r1, [pc, #428]	; (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002a96:	400a      	ands	r2, r1
 8002a98:	651a      	str	r2, [r3, #80]	; 0x50
 8002a9a:	4b69      	ldr	r3, [pc, #420]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002a9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a9e:	4b68      	ldr	r3, [pc, #416]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002aa0:	496a      	ldr	r1, [pc, #424]	; (8002c4c <HAL_RCC_OscConfig+0x678>)
 8002aa2:	400a      	ands	r2, r1
 8002aa4:	651a      	str	r2, [r3, #80]	; 0x50
 8002aa6:	e020      	b.n	8002aea <HAL_RCC_OscConfig+0x516>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	23a0      	movs	r3, #160	; 0xa0
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d10e      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4fe>
 8002ab4:	4b62      	ldr	r3, [pc, #392]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002ab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ab8:	4b61      	ldr	r3, [pc, #388]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002aba:	2180      	movs	r1, #128	; 0x80
 8002abc:	00c9      	lsls	r1, r1, #3
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ac2:	4b5f      	ldr	r3, [pc, #380]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002ac4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ac6:	4b5e      	ldr	r3, [pc, #376]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002ac8:	2180      	movs	r1, #128	; 0x80
 8002aca:	0049      	lsls	r1, r1, #1
 8002acc:	430a      	orrs	r2, r1
 8002ace:	651a      	str	r2, [r3, #80]	; 0x50
 8002ad0:	e00b      	b.n	8002aea <HAL_RCC_OscConfig+0x516>
 8002ad2:	4b5b      	ldr	r3, [pc, #364]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ad6:	4b5a      	ldr	r3, [pc, #360]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002ad8:	495a      	ldr	r1, [pc, #360]	; (8002c44 <HAL_RCC_OscConfig+0x670>)
 8002ada:	400a      	ands	r2, r1
 8002adc:	651a      	str	r2, [r3, #80]	; 0x50
 8002ade:	4b58      	ldr	r3, [pc, #352]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002ae0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ae2:	4b57      	ldr	r3, [pc, #348]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002ae4:	4959      	ldr	r1, [pc, #356]	; (8002c4c <HAL_RCC_OscConfig+0x678>)
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d015      	beq.n	8002b1e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af2:	f7fe fee1 	bl	80018b8 <HAL_GetTick>
 8002af6:	0003      	movs	r3, r0
 8002af8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002afa:	e009      	b.n	8002b10 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afc:	f7fe fedc 	bl	80018b8 <HAL_GetTick>
 8002b00:	0002      	movs	r2, r0
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	4a52      	ldr	r2, [pc, #328]	; (8002c50 <HAL_RCC_OscConfig+0x67c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e11a      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b10:	4b4b      	ldr	r3, [pc, #300]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002b12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d0ef      	beq.n	8002afc <HAL_RCC_OscConfig+0x528>
 8002b1c:	e014      	b.n	8002b48 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fecb 	bl	80018b8 <HAL_GetTick>
 8002b22:	0003      	movs	r3, r0
 8002b24:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b26:	e009      	b.n	8002b3c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7fe fec6 	bl	80018b8 <HAL_GetTick>
 8002b2c:	0002      	movs	r2, r0
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	4a47      	ldr	r2, [pc, #284]	; (8002c50 <HAL_RCC_OscConfig+0x67c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e104      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b3c:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002b3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d1ef      	bne.n	8002b28 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b48:	2327      	movs	r3, #39	; 0x27
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d105      	bne.n	8002b5e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b52:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b56:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002b58:	493e      	ldr	r1, [pc, #248]	; (8002c54 <HAL_RCC_OscConfig+0x680>)
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2220      	movs	r2, #32
 8002b64:	4013      	ands	r3, r2
 8002b66:	d049      	beq.n	8002bfc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d026      	beq.n	8002bbe <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002b70:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002b76:	2101      	movs	r1, #1
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b80:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002b82:	2101      	movs	r1, #1
 8002b84:	430a      	orrs	r2, r1
 8002b86:	635a      	str	r2, [r3, #52]	; 0x34
 8002b88:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <HAL_RCC_OscConfig+0x684>)
 8002b8a:	6a1a      	ldr	r2, [r3, #32]
 8002b8c:	4b32      	ldr	r3, [pc, #200]	; (8002c58 <HAL_RCC_OscConfig+0x684>)
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	0189      	lsls	r1, r1, #6
 8002b92:	430a      	orrs	r2, r1
 8002b94:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7fe fe8f 	bl	80018b8 <HAL_GetTick>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ba0:	f7fe fe8a 	bl	80018b8 <HAL_GetTick>
 8002ba4:	0002      	movs	r2, r0
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0c9      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bb2:	4b23      	ldr	r3, [pc, #140]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d0f1      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x5cc>
 8002bbc:	e01e      	b.n	8002bfc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002bbe:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	438a      	bics	r2, r1
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <HAL_RCC_OscConfig+0x684>)
 8002bcc:	6a1a      	ldr	r2, [r3, #32]
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_RCC_OscConfig+0x684>)
 8002bd0:	4922      	ldr	r1, [pc, #136]	; (8002c5c <HAL_RCC_OscConfig+0x688>)
 8002bd2:	400a      	ands	r2, r1
 8002bd4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd6:	f7fe fe6f 	bl	80018b8 <HAL_GetTick>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002be0:	f7fe fe6a 	bl	80018b8 <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0a9      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d1f1      	bne.n	8002be0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d100      	bne.n	8002c06 <HAL_RCC_OscConfig+0x632>
 8002c04:	e09e      	b.n	8002d44 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	2b0c      	cmp	r3, #12
 8002c0a:	d100      	bne.n	8002c0e <HAL_RCC_OscConfig+0x63a>
 8002c0c:	e077      	b.n	8002cfe <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d158      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <HAL_RCC_OscConfig+0x66c>)
 8002c1c:	4910      	ldr	r1, [pc, #64]	; (8002c60 <HAL_RCC_OscConfig+0x68c>)
 8002c1e:	400a      	ands	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7fe fe49 	bl	80018b8 <HAL_GetTick>
 8002c26:	0003      	movs	r3, r0
 8002c28:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c2a:	e01b      	b.n	8002c64 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe fe44 	bl	80018b8 <HAL_GetTick>
 8002c30:	0002      	movs	r2, r0
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d914      	bls.n	8002c64 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e083      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	40021000 	.word	0x40021000
 8002c44:	fffffeff 	.word	0xfffffeff
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	fffffbff 	.word	0xfffffbff
 8002c50:	00001388 	.word	0x00001388
 8002c54:	efffffff 	.word	0xefffffff
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	ffffdfff 	.word	0xffffdfff
 8002c60:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c64:	4b3a      	ldr	r3, [pc, #232]	; (8002d50 <HAL_RCC_OscConfig+0x77c>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	049b      	lsls	r3, r3, #18
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d1dd      	bne.n	8002c2c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c70:	4b37      	ldr	r3, [pc, #220]	; (8002d50 <HAL_RCC_OscConfig+0x77c>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a37      	ldr	r2, [pc, #220]	; (8002d54 <HAL_RCC_OscConfig+0x780>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	0019      	movs	r1, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	4b31      	ldr	r3, [pc, #196]	; (8002d50 <HAL_RCC_OscConfig+0x77c>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c90:	4b2f      	ldr	r3, [pc, #188]	; (8002d50 <HAL_RCC_OscConfig+0x77c>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b2e      	ldr	r3, [pc, #184]	; (8002d50 <HAL_RCC_OscConfig+0x77c>)
 8002c96:	2180      	movs	r1, #128	; 0x80
 8002c98:	0449      	lsls	r1, r1, #17
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fe0b 	bl	80018b8 <HAL_GetTick>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe fe06 	bl	80018b8 <HAL_GetTick>
 8002cac:	0002      	movs	r2, r0
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e045      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002cba:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <HAL_RCC_OscConfig+0x77c>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	049b      	lsls	r3, r3, #18
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x6d4>
 8002cc6:	e03d      	b.n	8002d44 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc8:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <HAL_RCC_OscConfig+0x77c>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_RCC_OscConfig+0x77c>)
 8002cce:	4922      	ldr	r1, [pc, #136]	; (8002d58 <HAL_RCC_OscConfig+0x784>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fdf0 	bl	80018b8 <HAL_GetTick>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cde:	f7fe fdeb 	bl	80018b8 <HAL_GetTick>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e02a      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cf0:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <HAL_RCC_OscConfig+0x77c>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	049b      	lsls	r3, r3, #18
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d1f0      	bne.n	8002cde <HAL_RCC_OscConfig+0x70a>
 8002cfc:	e022      	b.n	8002d44 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e01d      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <HAL_RCC_OscConfig+0x77c>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	025b      	lsls	r3, r3, #9
 8002d16:	401a      	ands	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d10f      	bne.n	8002d40 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d20:	69fa      	ldr	r2, [r7, #28]
 8002d22:	23f0      	movs	r3, #240	; 0xf0
 8002d24:	039b      	lsls	r3, r3, #14
 8002d26:	401a      	ands	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	23c0      	movs	r3, #192	; 0xc0
 8002d34:	041b      	lsls	r3, r3, #16
 8002d36:	401a      	ands	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	0018      	movs	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b00a      	add	sp, #40	; 0x28
 8002d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	40021000 	.word	0x40021000
 8002d54:	ff02ffff 	.word	0xff02ffff
 8002d58:	feffffff 	.word	0xfeffffff

08002d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d5c:	b5b0      	push	{r4, r5, r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e128      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d70:	4b96      	ldr	r3, [pc, #600]	; (8002fcc <HAL_RCC_ClockConfig+0x270>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2201      	movs	r2, #1
 8002d76:	4013      	ands	r3, r2
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d91e      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b93      	ldr	r3, [pc, #588]	; (8002fcc <HAL_RCC_ClockConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2201      	movs	r2, #1
 8002d84:	4393      	bics	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	4b90      	ldr	r3, [pc, #576]	; (8002fcc <HAL_RCC_ClockConfig+0x270>)
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d90:	f7fe fd92 	bl	80018b8 <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d98:	e009      	b.n	8002dae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9a:	f7fe fd8d 	bl	80018b8 <HAL_GetTick>
 8002d9e:	0002      	movs	r2, r0
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	4a8a      	ldr	r2, [pc, #552]	; (8002fd0 <HAL_RCC_ClockConfig+0x274>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e109      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b87      	ldr	r3, [pc, #540]	; (8002fcc <HAL_RCC_ClockConfig+0x270>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2201      	movs	r2, #1
 8002db4:	4013      	ands	r3, r2
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d1ee      	bne.n	8002d9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d009      	beq.n	8002dda <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc6:	4b83      	ldr	r3, [pc, #524]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	22f0      	movs	r2, #240	; 0xf0
 8002dcc:	4393      	bics	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	4b7f      	ldr	r3, [pc, #508]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2201      	movs	r2, #1
 8002de0:	4013      	ands	r3, r2
 8002de2:	d100      	bne.n	8002de6 <HAL_RCC_ClockConfig+0x8a>
 8002de4:	e089      	b.n	8002efa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dee:	4b79      	ldr	r3, [pc, #484]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	029b      	lsls	r3, r3, #10
 8002df6:	4013      	ands	r3, r2
 8002df8:	d120      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0e1      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e06:	4b73      	ldr	r3, [pc, #460]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	049b      	lsls	r3, r3, #18
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d114      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0d5      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e1e:	4b6d      	ldr	r3, [pc, #436]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2204      	movs	r2, #4
 8002e24:	4013      	ands	r3, r2
 8002e26:	d109      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0ca      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e2c:	4b69      	ldr	r3, [pc, #420]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4013      	ands	r3, r2
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0c2      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e3c:	4b65      	ldr	r3, [pc, #404]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2203      	movs	r2, #3
 8002e42:	4393      	bics	r3, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	4b62      	ldr	r3, [pc, #392]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e50:	f7fe fd32 	bl	80018b8 <HAL_GetTick>
 8002e54:	0003      	movs	r3, r0
 8002e56:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d111      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e60:	e009      	b.n	8002e76 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e62:	f7fe fd29 	bl	80018b8 <HAL_GetTick>
 8002e66:	0002      	movs	r2, r0
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	4a58      	ldr	r2, [pc, #352]	; (8002fd0 <HAL_RCC_ClockConfig+0x274>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e0a5      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e76:	4b57      	ldr	r3, [pc, #348]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d1ef      	bne.n	8002e62 <HAL_RCC_ClockConfig+0x106>
 8002e82:	e03a      	b.n	8002efa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d111      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e8c:	e009      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8e:	f7fe fd13 	bl	80018b8 <HAL_GetTick>
 8002e92:	0002      	movs	r2, r0
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	4a4d      	ldr	r2, [pc, #308]	; (8002fd0 <HAL_RCC_ClockConfig+0x274>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e08f      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ea2:	4b4c      	ldr	r3, [pc, #304]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b0c      	cmp	r3, #12
 8002eac:	d1ef      	bne.n	8002e8e <HAL_RCC_ClockConfig+0x132>
 8002eae:	e024      	b.n	8002efa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d11b      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eb8:	e009      	b.n	8002ece <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eba:	f7fe fcfd 	bl	80018b8 <HAL_GetTick>
 8002ebe:	0002      	movs	r2, r0
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	4a42      	ldr	r2, [pc, #264]	; (8002fd0 <HAL_RCC_ClockConfig+0x274>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e079      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ece:	4b41      	ldr	r3, [pc, #260]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d1ef      	bne.n	8002eba <HAL_RCC_ClockConfig+0x15e>
 8002eda:	e00e      	b.n	8002efa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002edc:	f7fe fcec 	bl	80018b8 <HAL_GetTick>
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	4a3a      	ldr	r2, [pc, #232]	; (8002fd0 <HAL_RCC_ClockConfig+0x274>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e068      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ef0:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	220c      	movs	r2, #12
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002efa:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <HAL_RCC_ClockConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	4013      	ands	r3, r2
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d21e      	bcs.n	8002f46 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f08:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_RCC_ClockConfig+0x270>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4393      	bics	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_RCC_ClockConfig+0x270>)
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f1a:	f7fe fccd 	bl	80018b8 <HAL_GetTick>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f22:	e009      	b.n	8002f38 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f24:	f7fe fcc8 	bl	80018b8 <HAL_GetTick>
 8002f28:	0002      	movs	r2, r0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	4a28      	ldr	r2, [pc, #160]	; (8002fd0 <HAL_RCC_ClockConfig+0x274>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e044      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f38:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_RCC_ClockConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	4013      	ands	r3, r2
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d1ee      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f50:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <HAL_RCC_ClockConfig+0x27c>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	0019      	movs	r1, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002f60:	430a      	orrs	r2, r1
 8002f62:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2208      	movs	r2, #8
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f6e:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4a1a      	ldr	r2, [pc, #104]	; (8002fdc <HAL_RCC_ClockConfig+0x280>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	0019      	movs	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	00da      	lsls	r2, r3, #3
 8002f7e:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002f80:	430a      	orrs	r2, r1
 8002f82:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f84:	f000 f832 	bl	8002fec <HAL_RCC_GetSysClockFreq>
 8002f88:	0001      	movs	r1, r0
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_RCC_ClockConfig+0x278>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	220f      	movs	r2, #15
 8002f92:	4013      	ands	r3, r2
 8002f94:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <HAL_RCC_ClockConfig+0x284>)
 8002f96:	5cd3      	ldrb	r3, [r2, r3]
 8002f98:	000a      	movs	r2, r1
 8002f9a:	40da      	lsrs	r2, r3
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_RCC_ClockConfig+0x288>)
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <HAL_RCC_ClockConfig+0x28c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	250b      	movs	r5, #11
 8002fa6:	197c      	adds	r4, r7, r5
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7fe fc3f 	bl	800182c <HAL_InitTick>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002fb2:	197b      	adds	r3, r7, r5
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002fba:	197b      	adds	r3, r7, r5
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	40022000 	.word	0x40022000
 8002fd0:	00001388 	.word	0x00001388
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	fffff8ff 	.word	0xfffff8ff
 8002fdc:	ffffc7ff 	.word	0xffffc7ff
 8002fe0:	08004f10 	.word	0x08004f10
 8002fe4:	20000004 	.word	0x20000004
 8002fe8:	20000008 	.word	0x20000008

08002fec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fec:	b5b0      	push	{r4, r5, r7, lr}
 8002fee:	b08e      	sub	sp, #56	; 0x38
 8002ff0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002ff2:	4b4c      	ldr	r3, [pc, #304]	; (8003124 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ffa:	230c      	movs	r3, #12
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b0c      	cmp	r3, #12
 8003000:	d014      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0x40>
 8003002:	d900      	bls.n	8003006 <HAL_RCC_GetSysClockFreq+0x1a>
 8003004:	e07b      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x112>
 8003006:	2b04      	cmp	r3, #4
 8003008:	d002      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x24>
 800300a:	2b08      	cmp	r3, #8
 800300c:	d00b      	beq.n	8003026 <HAL_RCC_GetSysClockFreq+0x3a>
 800300e:	e076      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003010:	4b44      	ldr	r3, [pc, #272]	; (8003124 <HAL_RCC_GetSysClockFreq+0x138>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2210      	movs	r2, #16
 8003016:	4013      	ands	r3, r2
 8003018:	d002      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800301a:	4b43      	ldr	r3, [pc, #268]	; (8003128 <HAL_RCC_GetSysClockFreq+0x13c>)
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800301e:	e07c      	b.n	800311a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003020:	4b42      	ldr	r3, [pc, #264]	; (800312c <HAL_RCC_GetSysClockFreq+0x140>)
 8003022:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003024:	e079      	b.n	800311a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003026:	4b42      	ldr	r3, [pc, #264]	; (8003130 <HAL_RCC_GetSysClockFreq+0x144>)
 8003028:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800302a:	e076      	b.n	800311a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	0c9a      	lsrs	r2, r3, #18
 8003030:	230f      	movs	r3, #15
 8003032:	401a      	ands	r2, r3
 8003034:	4b3f      	ldr	r3, [pc, #252]	; (8003134 <HAL_RCC_GetSysClockFreq+0x148>)
 8003036:	5c9b      	ldrb	r3, [r3, r2]
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	0d9a      	lsrs	r2, r3, #22
 800303e:	2303      	movs	r3, #3
 8003040:	4013      	ands	r3, r2
 8003042:	3301      	adds	r3, #1
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003046:	4b37      	ldr	r3, [pc, #220]	; (8003124 <HAL_RCC_GetSysClockFreq+0x138>)
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	025b      	lsls	r3, r3, #9
 800304e:	4013      	ands	r3, r2
 8003050:	d01a      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	4a35      	ldr	r2, [pc, #212]	; (8003130 <HAL_RCC_GetSysClockFreq+0x144>)
 800305c:	2300      	movs	r3, #0
 800305e:	69b8      	ldr	r0, [r7, #24]
 8003060:	69f9      	ldr	r1, [r7, #28]
 8003062:	f7fd f8fd 	bl	8000260 <__aeabi_lmul>
 8003066:	0002      	movs	r2, r0
 8003068:	000b      	movs	r3, r1
 800306a:	0010      	movs	r0, r2
 800306c:	0019      	movs	r1, r3
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f7fd f8d1 	bl	8000220 <__aeabi_uldivmod>
 800307e:	0002      	movs	r2, r0
 8003080:	000b      	movs	r3, r1
 8003082:	0013      	movs	r3, r2
 8003084:	637b      	str	r3, [r7, #52]	; 0x34
 8003086:	e037      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003088:	4b26      	ldr	r3, [pc, #152]	; (8003124 <HAL_RCC_GetSysClockFreq+0x138>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2210      	movs	r2, #16
 800308e:	4013      	ands	r3, r2
 8003090:	d01a      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	4a23      	ldr	r2, [pc, #140]	; (8003128 <HAL_RCC_GetSysClockFreq+0x13c>)
 800309c:	2300      	movs	r3, #0
 800309e:	68b8      	ldr	r0, [r7, #8]
 80030a0:	68f9      	ldr	r1, [r7, #12]
 80030a2:	f7fd f8dd 	bl	8000260 <__aeabi_lmul>
 80030a6:	0002      	movs	r2, r0
 80030a8:	000b      	movs	r3, r1
 80030aa:	0010      	movs	r0, r2
 80030ac:	0019      	movs	r1, r3
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f7fd f8b1 	bl	8000220 <__aeabi_uldivmod>
 80030be:	0002      	movs	r2, r0
 80030c0:	000b      	movs	r3, r1
 80030c2:	0013      	movs	r3, r2
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
 80030c6:	e017      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	0018      	movs	r0, r3
 80030cc:	2300      	movs	r3, #0
 80030ce:	0019      	movs	r1, r3
 80030d0:	4a16      	ldr	r2, [pc, #88]	; (800312c <HAL_RCC_GetSysClockFreq+0x140>)
 80030d2:	2300      	movs	r3, #0
 80030d4:	f7fd f8c4 	bl	8000260 <__aeabi_lmul>
 80030d8:	0002      	movs	r2, r0
 80030da:	000b      	movs	r3, r1
 80030dc:	0010      	movs	r0, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	001c      	movs	r4, r3
 80030e4:	2300      	movs	r3, #0
 80030e6:	001d      	movs	r5, r3
 80030e8:	0022      	movs	r2, r4
 80030ea:	002b      	movs	r3, r5
 80030ec:	f7fd f898 	bl	8000220 <__aeabi_uldivmod>
 80030f0:	0002      	movs	r2, r0
 80030f2:	000b      	movs	r3, r1
 80030f4:	0013      	movs	r3, r2
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80030f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030fc:	e00d      	b.n	800311a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_RCC_GetSysClockFreq+0x138>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	0b5b      	lsrs	r3, r3, #13
 8003104:	2207      	movs	r2, #7
 8003106:	4013      	ands	r3, r2
 8003108:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	3301      	adds	r3, #1
 800310e:	2280      	movs	r2, #128	; 0x80
 8003110:	0212      	lsls	r2, r2, #8
 8003112:	409a      	lsls	r2, r3
 8003114:	0013      	movs	r3, r2
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003118:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800311c:	0018      	movs	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	b00e      	add	sp, #56	; 0x38
 8003122:	bdb0      	pop	{r4, r5, r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	003d0900 	.word	0x003d0900
 800312c:	00f42400 	.word	0x00f42400
 8003130:	007a1200 	.word	0x007a1200
 8003134:	08004f20 	.word	0x08004f20

08003138 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003140:	2017      	movs	r0, #23
 8003142:	183b      	adds	r3, r7, r0
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2220      	movs	r2, #32
 800314e:	4013      	ands	r3, r2
 8003150:	d100      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003152:	e0c7      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003154:	4b93      	ldr	r3, [pc, #588]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003158:	2380      	movs	r3, #128	; 0x80
 800315a:	055b      	lsls	r3, r3, #21
 800315c:	4013      	ands	r3, r2
 800315e:	d109      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003160:	4b90      	ldr	r3, [pc, #576]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003164:	4b8f      	ldr	r3, [pc, #572]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003166:	2180      	movs	r1, #128	; 0x80
 8003168:	0549      	lsls	r1, r1, #21
 800316a:	430a      	orrs	r2, r1
 800316c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800316e:	183b      	adds	r3, r7, r0
 8003170:	2201      	movs	r2, #1
 8003172:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	4b8c      	ldr	r3, [pc, #560]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4013      	ands	r3, r2
 800317e:	d11a      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003180:	4b89      	ldr	r3, [pc, #548]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b88      	ldr	r3, [pc, #544]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	0049      	lsls	r1, r1, #1
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318e:	f7fe fb93 	bl	80018b8 <HAL_GetTick>
 8003192:	0003      	movs	r3, r0
 8003194:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003196:	e008      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003198:	f7fe fb8e 	bl	80018b8 <HAL_GetTick>
 800319c:	0002      	movs	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0f7      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x262>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031aa:	4b7f      	ldr	r3, [pc, #508]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4013      	ands	r3, r2
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80031b6:	4b7b      	ldr	r3, [pc, #492]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	23c0      	movs	r3, #192	; 0xc0
 80031bc:	039b      	lsls	r3, r3, #14
 80031be:	4013      	ands	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	23c0      	movs	r3, #192	; 0xc0
 80031c8:	039b      	lsls	r3, r3, #14
 80031ca:	4013      	ands	r3, r2
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d013      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	23c0      	movs	r3, #192	; 0xc0
 80031d8:	029b      	lsls	r3, r3, #10
 80031da:	401a      	ands	r2, r3
 80031dc:	23c0      	movs	r3, #192	; 0xc0
 80031de:	029b      	lsls	r3, r3, #10
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d10a      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80031e4:	4b6f      	ldr	r3, [pc, #444]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	029b      	lsls	r3, r3, #10
 80031ec:	401a      	ands	r2, r3
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	029b      	lsls	r3, r3, #10
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d101      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e0cf      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x262>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80031fa:	4b6a      	ldr	r3, [pc, #424]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031fe:	23c0      	movs	r3, #192	; 0xc0
 8003200:	029b      	lsls	r3, r3, #10
 8003202:	4013      	ands	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d03b      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	23c0      	movs	r3, #192	; 0xc0
 8003212:	029b      	lsls	r3, r3, #10
 8003214:	4013      	ands	r3, r2
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	429a      	cmp	r2, r3
 800321a:	d033      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2220      	movs	r2, #32
 8003222:	4013      	ands	r3, r2
 8003224:	d02e      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003226:	4b5f      	ldr	r3, [pc, #380]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800322a:	4a60      	ldr	r2, [pc, #384]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800322c:	4013      	ands	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003230:	4b5c      	ldr	r3, [pc, #368]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003232:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003234:	4b5b      	ldr	r3, [pc, #364]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003236:	2180      	movs	r1, #128	; 0x80
 8003238:	0309      	lsls	r1, r1, #12
 800323a:	430a      	orrs	r2, r1
 800323c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800323e:	4b59      	ldr	r3, [pc, #356]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003240:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003242:	4b58      	ldr	r3, [pc, #352]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003244:	495a      	ldr	r1, [pc, #360]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003246:	400a      	ands	r2, r1
 8003248:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800324a:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4013      	ands	r3, r2
 8003258:	d014      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7fe fb2d 	bl	80018b8 <HAL_GetTick>
 800325e:	0003      	movs	r3, r0
 8003260:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003262:	e009      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003264:	f7fe fb28 	bl	80018b8 <HAL_GetTick>
 8003268:	0002      	movs	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	4a51      	ldr	r2, [pc, #324]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e090      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x262>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003278:	4b4a      	ldr	r3, [pc, #296]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800327a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4013      	ands	r3, r2
 8003282:	d0ef      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2220      	movs	r2, #32
 800328a:	4013      	ands	r3, r2
 800328c:	d01f      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	23c0      	movs	r3, #192	; 0xc0
 8003294:	029b      	lsls	r3, r3, #10
 8003296:	401a      	ands	r2, r3
 8003298:	23c0      	movs	r3, #192	; 0xc0
 800329a:	029b      	lsls	r3, r3, #10
 800329c:	429a      	cmp	r2, r3
 800329e:	d10c      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x182>
 80032a0:	4b40      	ldr	r3, [pc, #256]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a44      	ldr	r2, [pc, #272]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	0019      	movs	r1, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	23c0      	movs	r3, #192	; 0xc0
 80032b0:	039b      	lsls	r3, r3, #14
 80032b2:	401a      	ands	r2, r3
 80032b4:	4b3b      	ldr	r3, [pc, #236]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032b6:	430a      	orrs	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	4b3a      	ldr	r3, [pc, #232]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	23c0      	movs	r3, #192	; 0xc0
 80032c4:	029b      	lsls	r3, r3, #10
 80032c6:	401a      	ands	r2, r3
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032ca:	430a      	orrs	r2, r1
 80032cc:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032ce:	2317      	movs	r3, #23
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d8:	4b32      	ldr	r3, [pc, #200]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032de:	4937      	ldr	r1, [pc, #220]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80032e0:	400a      	ands	r2, r1
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2201      	movs	r2, #1
 80032ea:	4013      	ands	r3, r2
 80032ec:	d009      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ee:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f2:	2203      	movs	r2, #3
 80032f4:	4393      	bics	r3, r2
 80032f6:	0019      	movs	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	4b29      	ldr	r3, [pc, #164]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032fe:	430a      	orrs	r2, r1
 8003300:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2202      	movs	r2, #2
 8003308:	4013      	ands	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800330c:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800330e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003310:	220c      	movs	r2, #12
 8003312:	4393      	bics	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800331c:	430a      	orrs	r2, r1
 800331e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2204      	movs	r2, #4
 8003326:	4013      	ands	r3, r2
 8003328:	d009      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800332a:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	4a24      	ldr	r2, [pc, #144]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003330:	4013      	ands	r3, r2
 8003332:	0019      	movs	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800333a:	430a      	orrs	r2, r1
 800333c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2208      	movs	r2, #8
 8003344:	4013      	ands	r3, r2
 8003346:	d009      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003348:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800334a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334c:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800334e:	4013      	ands	r3, r2
 8003350:	0019      	movs	r1, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003358:	430a      	orrs	r2, r1
 800335a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2240      	movs	r2, #64	; 0x40
 8003362:	4013      	ands	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003366:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336a:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800336c:	4013      	ands	r3, r2
 800336e:	0019      	movs	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003376:	430a      	orrs	r2, r1
 8003378:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2280      	movs	r2, #128	; 0x80
 8003380:	4013      	ands	r3, r2
 8003382:	d009      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003384:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003388:	4a10      	ldr	r2, [pc, #64]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800338a:	4013      	ands	r3, r2
 800338c:	0019      	movs	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003394:	430a      	orrs	r2, r1
 8003396:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	0018      	movs	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	b006      	add	sp, #24
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40007000 	.word	0x40007000
 80033ac:	fffcffff 	.word	0xfffcffff
 80033b0:	fff7ffff 	.word	0xfff7ffff
 80033b4:	00001388 	.word	0x00001388
 80033b8:	ffcfffff 	.word	0xffcfffff
 80033bc:	efffffff 	.word	0xefffffff
 80033c0:	fffff3ff 	.word	0xfffff3ff
 80033c4:	ffffcfff 	.word	0xffffcfff
 80033c8:	fbffffff 	.word	0xfbffffff
 80033cc:	fff3ffff 	.word	0xfff3ffff

080033d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e083      	b.n	80034ea <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	2382      	movs	r3, #130	; 0x82
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d009      	beq.n	800340a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	61da      	str	r2, [r3, #28]
 80033fc:	e005      	b.n	800340a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2251      	movs	r2, #81	; 0x51
 8003414:	5c9b      	ldrb	r3, [r3, r2]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d107      	bne.n	800342c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2250      	movs	r2, #80	; 0x50
 8003420:	2100      	movs	r1, #0
 8003422:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	0018      	movs	r0, r3
 8003428:	f7fe f8da 	bl	80015e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2251      	movs	r2, #81	; 0x51
 8003430:	2102      	movs	r1, #2
 8003432:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2140      	movs	r1, #64	; 0x40
 8003440:	438a      	bics	r2, r1
 8003442:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	2382      	movs	r3, #130	; 0x82
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	401a      	ands	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6899      	ldr	r1, [r3, #8]
 8003452:	2384      	movs	r3, #132	; 0x84
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	400b      	ands	r3, r1
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68d9      	ldr	r1, [r3, #12]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	400b      	ands	r3, r1
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2102      	movs	r1, #2
 800346c:	400b      	ands	r3, r1
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	2101      	movs	r1, #1
 8003476:	400b      	ands	r3, r1
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6999      	ldr	r1, [r3, #24]
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	400b      	ands	r3, r1
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	2138      	movs	r1, #56	; 0x38
 800348c:	400b      	ands	r3, r1
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	400b      	ands	r3, r1
 8003498:	431a      	orrs	r2, r3
 800349a:	0011      	movs	r1, r2
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	019b      	lsls	r3, r3, #6
 80034a4:	401a      	ands	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	0c1b      	lsrs	r3, r3, #16
 80034b4:	2204      	movs	r2, #4
 80034b6:	4013      	ands	r3, r2
 80034b8:	0019      	movs	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	2210      	movs	r2, #16
 80034c0:	401a      	ands	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69da      	ldr	r2, [r3, #28]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4907      	ldr	r1, [pc, #28]	; (80034f4 <HAL_SPI_Init+0x124>)
 80034d6:	400a      	ands	r2, r1
 80034d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2251      	movs	r2, #81	; 0x51
 80034e4:	2101      	movs	r1, #1
 80034e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b002      	add	sp, #8
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	fffff7ff 	.word	0xfffff7ff

080034f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	1dbb      	adds	r3, r7, #6
 8003506:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003508:	231f      	movs	r3, #31
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2250      	movs	r2, #80	; 0x50
 8003514:	5c9b      	ldrb	r3, [r3, r2]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_SPI_Transmit+0x26>
 800351a:	2302      	movs	r3, #2
 800351c:	e145      	b.n	80037aa <HAL_SPI_Transmit+0x2b2>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2250      	movs	r2, #80	; 0x50
 8003522:	2101      	movs	r1, #1
 8003524:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003526:	f7fe f9c7 	bl	80018b8 <HAL_GetTick>
 800352a:	0003      	movs	r3, r0
 800352c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800352e:	2316      	movs	r3, #22
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	1dba      	adds	r2, r7, #6
 8003534:	8812      	ldrh	r2, [r2, #0]
 8003536:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2251      	movs	r2, #81	; 0x51
 800353c:	5c9b      	ldrb	r3, [r3, r2]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d004      	beq.n	800354e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003544:	231f      	movs	r3, #31
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	2202      	movs	r2, #2
 800354a:	701a      	strb	r2, [r3, #0]
    goto error;
 800354c:	e126      	b.n	800379c <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_SPI_Transmit+0x64>
 8003554:	1dbb      	adds	r3, r7, #6
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d104      	bne.n	8003566 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800355c:	231f      	movs	r3, #31
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	2201      	movs	r2, #1
 8003562:	701a      	strb	r2, [r3, #0]
    goto error;
 8003564:	e11a      	b.n	800379c <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2251      	movs	r2, #81	; 0x51
 800356a:	2103      	movs	r1, #3
 800356c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1dba      	adds	r2, r7, #6
 800357e:	8812      	ldrh	r2, [r2, #0]
 8003580:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1dba      	adds	r2, r7, #6
 8003586:	8812      	ldrh	r2, [r2, #0]
 8003588:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d110      	bne.n	80035d6 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2140      	movs	r1, #64	; 0x40
 80035c0:	438a      	bics	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2180      	movs	r1, #128	; 0x80
 80035d0:	01c9      	lsls	r1, r1, #7
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2240      	movs	r2, #64	; 0x40
 80035de:	4013      	ands	r3, r2
 80035e0:	2b40      	cmp	r3, #64	; 0x40
 80035e2:	d007      	beq.n	80035f4 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2140      	movs	r1, #64	; 0x40
 80035f0:	430a      	orrs	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d152      	bne.n	80036a6 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d004      	beq.n	8003612 <HAL_SPI_Transmit+0x11a>
 8003608:	2316      	movs	r3, #22
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d143      	bne.n	800369a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	881a      	ldrh	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	1c9a      	adds	r2, r3, #2
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003636:	e030      	b.n	800369a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2202      	movs	r2, #2
 8003640:	4013      	ands	r3, r2
 8003642:	2b02      	cmp	r3, #2
 8003644:	d112      	bne.n	800366c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	881a      	ldrh	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	1c9a      	adds	r2, r3, #2
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	86da      	strh	r2, [r3, #54]	; 0x36
 800366a:	e016      	b.n	800369a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800366c:	f7fe f924 	bl	80018b8 <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d802      	bhi.n	8003682 <HAL_SPI_Transmit+0x18a>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	3301      	adds	r3, #1
 8003680:	d102      	bne.n	8003688 <HAL_SPI_Transmit+0x190>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d108      	bne.n	800369a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8003688:	231f      	movs	r3, #31
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	2203      	movs	r2, #3
 800368e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2251      	movs	r2, #81	; 0x51
 8003694:	2101      	movs	r1, #1
 8003696:	5499      	strb	r1, [r3, r2]
          goto error;
 8003698:	e080      	b.n	800379c <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1c9      	bne.n	8003638 <HAL_SPI_Transmit+0x140>
 80036a4:	e053      	b.n	800374e <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <HAL_SPI_Transmit+0x1c0>
 80036ae:	2316      	movs	r3, #22
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d145      	bne.n	8003744 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	7812      	ldrb	r2, [r2, #0]
 80036c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036de:	e031      	b.n	8003744 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2202      	movs	r2, #2
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d113      	bne.n	8003716 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	7812      	ldrb	r2, [r2, #0]
 80036fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	86da      	strh	r2, [r3, #54]	; 0x36
 8003714:	e016      	b.n	8003744 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003716:	f7fe f8cf 	bl	80018b8 <HAL_GetTick>
 800371a:	0002      	movs	r2, r0
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d802      	bhi.n	800372c <HAL_SPI_Transmit+0x234>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	3301      	adds	r3, #1
 800372a:	d102      	bne.n	8003732 <HAL_SPI_Transmit+0x23a>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d108      	bne.n	8003744 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8003732:	231f      	movs	r3, #31
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	2203      	movs	r2, #3
 8003738:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2251      	movs	r2, #81	; 0x51
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]
          goto error;
 8003742:	e02b      	b.n	800379c <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1c8      	bne.n	80036e0 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	6839      	ldr	r1, [r7, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	0018      	movs	r0, r3
 8003756:	f000 f8bb 	bl	80038d0 <SPI_EndRxTxTransaction>
 800375a:	1e03      	subs	r3, r0, #0
 800375c:	d002      	beq.n	8003764 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 800378a:	231f      	movs	r3, #31
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e003      	b.n	800379c <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2251      	movs	r2, #81	; 0x51
 8003798:	2101      	movs	r1, #1
 800379a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2250      	movs	r2, #80	; 0x50
 80037a0:	2100      	movs	r1, #0
 80037a2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80037a4:	231f      	movs	r3, #31
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	781b      	ldrb	r3, [r3, #0]
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b008      	add	sp, #32
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	1dfb      	adds	r3, r7, #7
 80037c2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037c4:	f7fe f878 	bl	80018b8 <HAL_GetTick>
 80037c8:	0002      	movs	r2, r0
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	18d3      	adds	r3, r2, r3
 80037d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037d4:	f7fe f870 	bl	80018b8 <HAL_GetTick>
 80037d8:	0003      	movs	r3, r0
 80037da:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037dc:	4b3a      	ldr	r3, [pc, #232]	; (80038c8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	015b      	lsls	r3, r3, #5
 80037e2:	0d1b      	lsrs	r3, r3, #20
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	4353      	muls	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ea:	e058      	b.n	800389e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	3301      	adds	r3, #1
 80037f0:	d055      	beq.n	800389e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037f2:	f7fe f861 	bl	80018b8 <HAL_GetTick>
 80037f6:	0002      	movs	r2, r0
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d902      	bls.n	8003808 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d142      	bne.n	800388e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	21e0      	movs	r1, #224	; 0xe0
 8003814:	438a      	bics	r2, r1
 8003816:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	2382      	movs	r3, #130	; 0x82
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	429a      	cmp	r2, r3
 8003822:	d113      	bne.n	800384c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	429a      	cmp	r2, r3
 800382e:	d005      	beq.n	800383c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	429a      	cmp	r2, r3
 800383a:	d107      	bne.n	800384c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2140      	movs	r1, #64	; 0x40
 8003848:	438a      	bics	r2, r1
 800384a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	019b      	lsls	r3, r3, #6
 8003854:	429a      	cmp	r2, r3
 8003856:	d110      	bne.n	800387a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	491a      	ldr	r1, [pc, #104]	; (80038cc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003864:	400a      	ands	r2, r1
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2180      	movs	r1, #128	; 0x80
 8003874:	0189      	lsls	r1, r1, #6
 8003876:	430a      	orrs	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2251      	movs	r2, #81	; 0x51
 800387e:	2101      	movs	r1, #1
 8003880:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2250      	movs	r2, #80	; 0x50
 8003886:	2100      	movs	r1, #0
 8003888:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e017      	b.n	80038be <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	3b01      	subs	r3, #1
 800389c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	4013      	ands	r3, r2
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	425a      	negs	r2, r3
 80038ae:	4153      	adcs	r3, r2
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	001a      	movs	r2, r3
 80038b4:	1dfb      	adds	r3, r7, #7
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d197      	bne.n	80037ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	0018      	movs	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b008      	add	sp, #32
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	20000004 	.word	0x20000004
 80038cc:	ffffdfff 	.word	0xffffdfff

080038d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038dc:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <SPI_EndRxTxTransaction+0x84>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	491d      	ldr	r1, [pc, #116]	; (8003958 <SPI_EndRxTxTransaction+0x88>)
 80038e2:	0018      	movs	r0, r3
 80038e4:	f7fc fc10 	bl	8000108 <__udivsi3>
 80038e8:	0003      	movs	r3, r0
 80038ea:	001a      	movs	r2, r3
 80038ec:	0013      	movs	r3, r2
 80038ee:	015b      	lsls	r3, r3, #5
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	189b      	adds	r3, r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	2382      	movs	r3, #130	; 0x82
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	429a      	cmp	r2, r3
 8003904:	d112      	bne.n	800392c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	0013      	movs	r3, r2
 8003910:	2200      	movs	r2, #0
 8003912:	2180      	movs	r1, #128	; 0x80
 8003914:	f7ff ff4e 	bl	80037b4 <SPI_WaitFlagStateUntilTimeout>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d016      	beq.n	800394a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	2220      	movs	r2, #32
 8003922:	431a      	orrs	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e00f      	b.n	800394c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	3b01      	subs	r3, #1
 8003936:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2280      	movs	r2, #128	; 0x80
 8003940:	4013      	ands	r3, r2
 8003942:	2b80      	cmp	r3, #128	; 0x80
 8003944:	d0f2      	beq.n	800392c <SPI_EndRxTxTransaction+0x5c>
 8003946:	e000      	b.n	800394a <SPI_EndRxTxTransaction+0x7a>
        break;
 8003948:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b006      	add	sp, #24
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000004 	.word	0x20000004
 8003958:	016e3600 	.word	0x016e3600

0800395c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e032      	b.n	80039d4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2239      	movs	r2, #57	; 0x39
 8003972:	5c9b      	ldrb	r3, [r3, r2]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d107      	bne.n	800398a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2238      	movs	r2, #56	; 0x38
 800397e:	2100      	movs	r1, #0
 8003980:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	0018      	movs	r0, r3
 8003986:	f7fd feef 	bl	8001768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2239      	movs	r2, #57	; 0x39
 800398e:	2102      	movs	r1, #2
 8003990:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3304      	adds	r3, #4
 800399a:	0019      	movs	r1, r3
 800399c:	0010      	movs	r0, r2
 800399e:	f000 f925 	bl	8003bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	223e      	movs	r2, #62	; 0x3e
 80039a6:	2101      	movs	r1, #1
 80039a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	223a      	movs	r2, #58	; 0x3a
 80039ae:	2101      	movs	r1, #1
 80039b0:	5499      	strb	r1, [r3, r2]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	223b      	movs	r2, #59	; 0x3b
 80039b6:	2101      	movs	r1, #1
 80039b8:	5499      	strb	r1, [r3, r2]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	223c      	movs	r2, #60	; 0x3c
 80039be:	2101      	movs	r1, #1
 80039c0:	5499      	strb	r1, [r3, r2]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	223d      	movs	r2, #61	; 0x3d
 80039c6:	2101      	movs	r1, #1
 80039c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2239      	movs	r2, #57	; 0x39
 80039ce:	2101      	movs	r1, #1
 80039d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	0018      	movs	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b002      	add	sp, #8
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2202      	movs	r2, #2
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d124      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2202      	movs	r2, #2
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d11d      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2203      	movs	r2, #3
 8003a06:	4252      	negs	r2, r2
 8003a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	2203      	movs	r2, #3
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d004      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f000 f8cc 	bl	8003bbc <HAL_TIM_IC_CaptureCallback>
 8003a24:	e007      	b.n	8003a36 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f000 f8bf 	bl	8003bac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f000 f8cb 	bl	8003bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2204      	movs	r2, #4
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d125      	bne.n	8003a96 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2204      	movs	r2, #4
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d11e      	bne.n	8003a96 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2205      	movs	r2, #5
 8003a5e:	4252      	negs	r2, r2
 8003a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	23c0      	movs	r3, #192	; 0xc0
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4013      	ands	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f000 f89f 	bl	8003bbc <HAL_TIM_IC_CaptureCallback>
 8003a7e:	e007      	b.n	8003a90 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	0018      	movs	r0, r3
 8003a84:	f000 f892 	bl	8003bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f000 f89e 	bl	8003bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d124      	bne.n	8003aee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2208      	movs	r2, #8
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d11d      	bne.n	8003aee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2209      	movs	r2, #9
 8003ab8:	4252      	negs	r2, r2
 8003aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2204      	movs	r2, #4
 8003ac0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	2203      	movs	r2, #3
 8003aca:	4013      	ands	r3, r2
 8003acc:	d004      	beq.n	8003ad8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f000 f873 	bl	8003bbc <HAL_TIM_IC_CaptureCallback>
 8003ad6:	e007      	b.n	8003ae8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	0018      	movs	r0, r3
 8003adc:	f000 f866 	bl	8003bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 f872 	bl	8003bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2210      	movs	r2, #16
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d125      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2210      	movs	r2, #16
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b10      	cmp	r3, #16
 8003b08:	d11e      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2211      	movs	r2, #17
 8003b10:	4252      	negs	r2, r2
 8003b12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2208      	movs	r2, #8
 8003b18:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	23c0      	movs	r3, #192	; 0xc0
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4013      	ands	r3, r2
 8003b26:	d004      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f000 f846 	bl	8003bbc <HAL_TIM_IC_CaptureCallback>
 8003b30:	e007      	b.n	8003b42 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	0018      	movs	r0, r3
 8003b36:	f000 f839 	bl	8003bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f000 f845 	bl	8003bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d10f      	bne.n	8003b76 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d108      	bne.n	8003b76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	4252      	negs	r2, r2
 8003b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	0018      	movs	r0, r3
 8003b72:	f7fd fcf0 	bl	8001556 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2240      	movs	r2, #64	; 0x40
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d10f      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	2240      	movs	r2, #64	; 0x40
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d108      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2241      	movs	r2, #65	; 0x41
 8003b98:	4252      	negs	r2, r2
 8003b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f000 f81c 	bl	8003bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b002      	add	sp, #8
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bb4:	46c0      	nop			; (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b002      	add	sp, #8
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b002      	add	sp, #8
 8003bea:	bd80      	pop	{r7, pc}

08003bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	05db      	lsls	r3, r3, #23
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d007      	beq.n	8003c16 <TIM_Base_SetConfig+0x2a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <TIM_Base_SetConfig+0x9c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <TIM_Base_SetConfig+0x2a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <TIM_Base_SetConfig+0xa0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d108      	bne.n	8003c28 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2270      	movs	r2, #112	; 0x70
 8003c1a:	4393      	bics	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	05db      	lsls	r3, r3, #23
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d007      	beq.n	8003c42 <TIM_Base_SetConfig+0x56>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a14      	ldr	r2, [pc, #80]	; (8003c88 <TIM_Base_SetConfig+0x9c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_Base_SetConfig+0x56>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a13      	ldr	r2, [pc, #76]	; (8003c8c <TIM_Base_SetConfig+0xa0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d108      	bne.n	8003c54 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a12      	ldr	r2, [pc, #72]	; (8003c90 <TIM_Base_SetConfig+0xa4>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	4393      	bics	r3, r2
 8003c5a:	001a      	movs	r2, r3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	615a      	str	r2, [r3, #20]
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b004      	add	sp, #16
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40010800 	.word	0x40010800
 8003c8c:	40011400 	.word	0x40011400
 8003c90:	fffffcff 	.word	0xfffffcff

08003c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2238      	movs	r2, #56	; 0x38
 8003ca2:	5c9b      	ldrb	r3, [r3, r2]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e042      	b.n	8003d32 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2238      	movs	r2, #56	; 0x38
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2239      	movs	r2, #57	; 0x39
 8003cb8:	2102      	movs	r1, #2
 8003cba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2270      	movs	r2, #112	; 0x70
 8003cd0:	4393      	bics	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	05db      	lsls	r3, r3, #23
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d009      	beq.n	8003d06 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a11      	ldr	r2, [pc, #68]	; (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0f      	ldr	r2, [pc, #60]	; (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d10c      	bne.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2280      	movs	r2, #128	; 0x80
 8003d0a:	4393      	bics	r3, r2
 8003d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2239      	movs	r2, #57	; 0x39
 8003d24:	2101      	movs	r1, #1
 8003d26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2238      	movs	r2, #56	; 0x38
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b004      	add	sp, #16
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	40010800 	.word	0x40010800
 8003d40:	40011400 	.word	0x40011400

08003d44 <__libc_init_array>:
 8003d44:	b570      	push	{r4, r5, r6, lr}
 8003d46:	2600      	movs	r6, #0
 8003d48:	4d0c      	ldr	r5, [pc, #48]	; (8003d7c <__libc_init_array+0x38>)
 8003d4a:	4c0d      	ldr	r4, [pc, #52]	; (8003d80 <__libc_init_array+0x3c>)
 8003d4c:	1b64      	subs	r4, r4, r5
 8003d4e:	10a4      	asrs	r4, r4, #2
 8003d50:	42a6      	cmp	r6, r4
 8003d52:	d109      	bne.n	8003d68 <__libc_init_array+0x24>
 8003d54:	2600      	movs	r6, #0
 8003d56:	f000 f821 	bl	8003d9c <_init>
 8003d5a:	4d0a      	ldr	r5, [pc, #40]	; (8003d84 <__libc_init_array+0x40>)
 8003d5c:	4c0a      	ldr	r4, [pc, #40]	; (8003d88 <__libc_init_array+0x44>)
 8003d5e:	1b64      	subs	r4, r4, r5
 8003d60:	10a4      	asrs	r4, r4, #2
 8003d62:	42a6      	cmp	r6, r4
 8003d64:	d105      	bne.n	8003d72 <__libc_init_array+0x2e>
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
 8003d68:	00b3      	lsls	r3, r6, #2
 8003d6a:	58eb      	ldr	r3, [r5, r3]
 8003d6c:	4798      	blx	r3
 8003d6e:	3601      	adds	r6, #1
 8003d70:	e7ee      	b.n	8003d50 <__libc_init_array+0xc>
 8003d72:	00b3      	lsls	r3, r6, #2
 8003d74:	58eb      	ldr	r3, [r5, r3]
 8003d76:	4798      	blx	r3
 8003d78:	3601      	adds	r6, #1
 8003d7a:	e7f2      	b.n	8003d62 <__libc_init_array+0x1e>
 8003d7c:	08004f34 	.word	0x08004f34
 8003d80:	08004f34 	.word	0x08004f34
 8003d84:	08004f34 	.word	0x08004f34
 8003d88:	08004f38 	.word	0x08004f38

08003d8c <memset>:
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	1882      	adds	r2, r0, r2
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d100      	bne.n	8003d96 <memset+0xa>
 8003d94:	4770      	bx	lr
 8003d96:	7019      	strb	r1, [r3, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	e7f9      	b.n	8003d90 <memset+0x4>

08003d9c <_init>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da2:	bc08      	pop	{r3}
 8003da4:	469e      	mov	lr, r3
 8003da6:	4770      	bx	lr

08003da8 <_fini>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dae:	bc08      	pop	{r3}
 8003db0:	469e      	mov	lr, r3
 8003db2:	4770      	bx	lr
